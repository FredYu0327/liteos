
App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800a5a  0001483a  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00014600  00014600  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800a6a  00800a6a  000002de  2**0
                  ALLOC
  3 .stab         00000408  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000084  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000001b  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000013e8  00000000  00000000  000007a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000028a  00000000  00000000  00001b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000366  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000080  00000000  00000000  0000217f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000041a  00000000  00000000  000021ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000058  00000000  00000000  00002619  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00002671  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00014600 <__vectors>:
   14600:	0c 94 46 a3 	jmp	0x1468c
   14604:	0c 94 63 a3 	jmp	0x146c6
   14608:	0c 94 63 a3 	jmp	0x146c6
   1460c:	0c 94 63 a3 	jmp	0x146c6
   14610:	0c 94 63 a3 	jmp	0x146c6
   14614:	0c 94 63 a3 	jmp	0x146c6
   14618:	0c 94 63 a3 	jmp	0x146c6
   1461c:	0c 94 63 a3 	jmp	0x146c6
   14620:	0c 94 63 a3 	jmp	0x146c6
   14624:	0c 94 63 a3 	jmp	0x146c6
   14628:	0c 94 63 a3 	jmp	0x146c6
   1462c:	0c 94 63 a3 	jmp	0x146c6
   14630:	0c 94 63 a3 	jmp	0x146c6
   14634:	0c 94 63 a3 	jmp	0x146c6
   14638:	0c 94 63 a3 	jmp	0x146c6
   1463c:	0c 94 63 a3 	jmp	0x146c6
   14640:	0c 94 63 a3 	jmp	0x146c6
   14644:	0c 94 63 a3 	jmp	0x146c6
   14648:	0c 94 63 a3 	jmp	0x146c6
   1464c:	0c 94 63 a3 	jmp	0x146c6
   14650:	0c 94 63 a3 	jmp	0x146c6
   14654:	0c 94 63 a3 	jmp	0x146c6
   14658:	0c 94 63 a3 	jmp	0x146c6
   1465c:	0c 94 63 a3 	jmp	0x146c6
   14660:	0c 94 63 a3 	jmp	0x146c6
   14664:	0c 94 63 a3 	jmp	0x146c6
   14668:	0c 94 63 a3 	jmp	0x146c6
   1466c:	0c 94 63 a3 	jmp	0x146c6
   14670:	0c 94 63 a3 	jmp	0x146c6
   14674:	0c 94 63 a3 	jmp	0x146c6
   14678:	0c 94 63 a3 	jmp	0x146c6
   1467c:	0c 94 63 a3 	jmp	0x146c6
   14680:	0c 94 63 a3 	jmp	0x146c6
   14684:	0c 94 63 a3 	jmp	0x146c6
   14688:	0c 94 63 a3 	jmp	0x146c6

0001468c <__ctors_end>:
   1468c:	11 24       	eor	r1, r1
   1468e:	1f be       	out	0x3f, r1	; 63
   14690:	ca e5       	ldi	r28, 0x5A	; 90
   14692:	db e0       	ldi	r29, 0x0B	; 11
   14694:	de bf       	out	0x3e, r29	; 62
   14696:	cd bf       	out	0x3d, r28	; 61

00014698 <__do_copy_data>:
   14698:	1a e0       	ldi	r17, 0x0A	; 10
   1469a:	aa e5       	ldi	r26, 0x5A	; 90
   1469c:	ba e0       	ldi	r27, 0x0A	; 10
   1469e:	ea e3       	ldi	r30, 0x3A	; 58
   146a0:	f8 e4       	ldi	r31, 0x48	; 72
   146a2:	01 e0       	ldi	r16, 0x01	; 1
   146a4:	0b bf       	out	0x3b, r16	; 59
   146a6:	02 c0       	rjmp	.+4      	; 0x146ac
   146a8:	07 90       	elpm	r0, Z+
   146aa:	0d 92       	st	X+, r0
   146ac:	aa 36       	cpi	r26, 0x6A	; 106
   146ae:	b1 07       	cpc	r27, r17
   146b0:	d9 f7       	brne	.-10     	; 0x146a8

000146b2 <__do_clear_bss>:
   146b2:	1a e0       	ldi	r17, 0x0A	; 10
   146b4:	aa e6       	ldi	r26, 0x6A	; 106
   146b6:	ba e0       	ldi	r27, 0x0A	; 10
   146b8:	01 c0       	rjmp	.+2      	; 0x146bc

000146ba <.do_clear_bss_loop>:
   146ba:	1d 92       	st	X+, r1

000146bc <.do_clear_bss_start>:
   146bc:	ae 36       	cpi	r26, 0x6E	; 110
   146be:	b1 07       	cpc	r27, r17
   146c0:	e1 f7       	brne	.-8      	; 0x146ba
   146c2:	0c 94 87 a3 	jmp	0x1470e

000146c6 <__bad_interrupt>:
   146c6:	0c 94 00 a3 	jmp	0x14600

000146ca <getCurrentThread.1394>:
thread **getCurrentThread()
{
   thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
   146ca:	4f 93       	push	r20
   146cc:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   146ce:	ec e0       	ldi	r30, 0x0C	; 12
   146d0:	fa ee       	ldi	r31, 0xEA	; 234
   146d2:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   146d4:	84 2f       	mov	r24, r20
   146d6:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
   146d8:	5f 91       	pop	r21
   146da:	4f 91       	pop	r20
   146dc:	08 95       	ret

000146de <yield.1393>:
	             "pop r20" "\n\t"
	              ::);
   return current_thread; 
}



uint8_t getCurrentThreadIndex()
{
   
   uint16_t index; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_INDEX_FUNCTION; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   asm volatile(" mov %A0, r20" "\n\t"
	             "mov %B0, r21" "\n\t"
				 :"=r" (index)
				 :
                );
    asm volatile("pop r21" "\n\t"
	             "pop r20" "\n\t"
	              ::);
   return (uint8_t)index; 
}


void sleepThread(int milliseconds)
{
/*
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 

   asm volatile("push r24" "\n\t"
	             "push r25" "\n\t"
	              ::);
   getaddrfp();     

   asm volatile(" mov %A0, r24" "\n\t"
	             "mov %B0, r25" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r24" "\n\t"
	             "pop r25" "\n\t"
	              ::);
 */
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 4;
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
   
   yield(); 
}


void hibernateThread()
{
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 5; 
   yield(); 
}


void yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
   146de:	e0 e0       	ldi	r30, 0x00	; 0
   146e0:	fa ee       	ldi	r31, 0xEA	; 234
   146e2:	09 95       	icall
   146e4:	08 95       	ret

000146e6 <sleepThread.1392>:
   146e6:	0f 93       	push	r16
   146e8:	1f 93       	push	r17
   146ea:	8c 01       	movw	r16, r24
   146ec:	0e 94 65 a3 	call	0x146ca
   146f0:	dc 01       	movw	r26, r24
   146f2:	ed 91       	ld	r30, X+
   146f4:	fc 91       	ld	r31, X
   146f6:	11 97       	sbiw	r26, 0x01	; 1
   146f8:	84 e0       	ldi	r24, 0x04	; 4
   146fa:	82 83       	std	Z+2, r24	; 0x02
   146fc:	ed 91       	ld	r30, X+
   146fe:	fc 91       	ld	r31, X
   14700:	14 8f       	std	Z+28, r17	; 0x1c
   14702:	03 8f       	std	Z+27, r16	; 0x1b
   14704:	0e 94 6f a3 	call	0x146de
   14708:	1f 91       	pop	r17
   1470a:	0f 91       	pop	r16
   1470c:	08 95       	ret

0001470e <main>:



int main()
{
   1470e:	6f 92       	push	r6
   14710:	7f 92       	push	r7
   14712:	8f 92       	push	r8
   14714:	9f 92       	push	r9
   14716:	bf 92       	push	r11
   14718:	cf 92       	push	r12
   1471a:	df 92       	push	r13
   1471c:	ef 92       	push	r14
   1471e:	ff 92       	push	r15
   14720:	0f 93       	push	r16
   14722:	1f 93       	push	r17
   14724:	cf 93       	push	r28
   14726:	df 93       	push	r29
    int i;
	//or (i=0;i<100;i++)
	
	while (1)
	{
  radioSend_string("Hello, world!\n"); 
   14728:	8a e5       	ldi	r24, 0x5A	; 90
   1472a:	68 2e       	mov	r6, r24
   1472c:	8a e0       	ldi	r24, 0x0A	; 10
   1472e:	78 2e       	mov	r7, r24
   14730:	f3 01       	movw	r30, r6
   14732:	01 c0       	rjmp	.+2      	; 0x14736
   14734:	31 96       	adiw	r30, 0x01	; 1


int String_length(char* s) {
	int count=0;
	while(s[count] != '\0')
   14736:	80 81       	ld	r24, Z
   14738:	88 23       	and	r24, r24
   1473a:	e1 f7       	brne	.-8      	; 0x14734
   1473c:	ea 55       	subi	r30, 0x5A	; 90
   1473e:	fa 40       	sbci	r31, 0x0A	; 10
   14740:	4f 01       	movw	r8, r30
mutex *getRadioMutexAddress()
{
   mutex *msend;   
   void (*getaddrfp)(void) = (void (*)(void))GET_RADIO_MUTEX_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
   14742:	4f 93       	push	r20
   14744:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   14746:	e0 e1       	ldi	r30, 0x10	; 16
   14748:	fa ee       	ldi	r31, 0xEA	; 234
   1474a:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   1474c:	c4 2f       	mov	r28, r20
   1474e:	d5 2f       	mov	r29, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (msend)
				 :
                );
    asm volatile("pop r21" "\n\t"
   14750:	5f 91       	pop	r21
   14752:	4f 91       	pop	r20



   msend = getRadioMutexAddress();
   current_thread = getCurrentThread();
   14754:	0e 94 65 a3 	call	0x146ca
   14758:	4f 93       	push	r20
   1475a:	5f 93       	push	r21
   1475c:	ec e5       	ldi	r30, 0x5C	; 92
   1475e:	fa ee       	ldi	r31, 0xEA	; 234
   14760:	09 95       	icall
   14762:	04 2f       	mov	r16, r20
   14764:	15 2f       	mov	r17, r21
   14766:	5f 91       	pop	r21
   14768:	4f 91       	pop	r20
   1476a:	0e 94 65 a3 	call	0x146ca
   1476e:	7c 01       	movw	r14, r24
   14770:	4f 93       	push	r20
   14772:	5f 93       	push	r21
   14774:	ec e1       	ldi	r30, 0x1C	; 28
   14776:	fa ee       	ldi	r31, 0xEA	; 234
   14778:	09 95       	icall
   1477a:	c4 2e       	mov	r12, r20
   1477c:	d5 2e       	mov	r13, r21
   1477e:	5f 91       	pop	r21
   14780:	4f 91       	pop	r20


_atomic_t _atomic_start(void)
{
  _atomic_t result = SREG;
   14782:	bf b6       	in	r11, 0x3f	; 63
  asm volatile("cli" "\n\t"::);
   14784:	f8 94       	cli
   14786:	88 81       	ld	r24, Y
   14788:	88 23       	and	r24, r24
   1478a:	91 f0       	breq	.+36     	; 0x147b0
   1478c:	d7 01       	movw	r26, r14
   1478e:	ed 91       	ld	r30, X+
   14790:	fc 91       	ld	r31, X
   14792:	11 97       	sbiw	r26, 0x01	; 1
   14794:	83 e0       	ldi	r24, 0x03	; 3
   14796:	82 83       	std	Z+2, r24	; 0x02
   14798:	ed 91       	ld	r30, X+
   1479a:	fc 91       	ld	r31, X
   1479c:	d4 8f       	std	Z+28, r29	; 0x1c
   1479e:	c3 8f       	std	Z+27, r28	; 0x1b
   147a0:	89 81       	ldd	r24, Y+1	; 0x01
   147a2:	8f 5f       	subi	r24, 0xFF	; 255
   147a4:	89 83       	std	Y+1, r24	; 0x01
   147a6:	0e 94 6f a3 	call	0x146de
   147aa:	89 81       	ldd	r24, Y+1	; 0x01
   147ac:	81 50       	subi	r24, 0x01	; 1
   147ae:	89 83       	std	Y+1, r24	; 0x01
   147b0:	81 e0       	ldi	r24, 0x01	; 1
   147b2:	88 83       	st	Y, r24
   147b4:	8c 2d       	mov	r24, r12
   147b6:	99 27       	eor	r25, r25
   147b8:	8a 83       	std	Y+2, r24	; 0x02
   147ba:	8b 2d       	mov	r24, r11
   147bc:	99 27       	eor	r25, r25
  return result;
}



void _atomic_end(_atomic_t oldSreg)
{
  SREG = oldSreg;
   147be:	8f bf       	out	0x3f, r24	; 63
   radioinfoaddr = getCurrentRadioInfoAddr();

   Mutex_lock(msend);

   radioinfoaddr-> socket_port = port;
   147c0:	81 e0       	ldi	r24, 0x01	; 1
   147c2:	90 e0       	ldi	r25, 0x00	; 0
   147c4:	f8 01       	movw	r30, r16
   147c6:	91 83       	std	Z+1, r25	; 0x01
   147c8:	80 83       	st	Z, r24
   radioinfoaddr->socket_addr = address;
   147ca:	8f ef       	ldi	r24, 0xFF	; 255
   147cc:	9f ef       	ldi	r25, 0xFF	; 255
   147ce:	93 83       	std	Z+3, r25	; 0x03
   147d0:	82 83       	std	Z+2, r24	; 0x02
   radioinfoaddr->socket_msg_len  = length;
   147d2:	84 82       	std	Z+4, r8	; 0x04
   radioinfoaddr->socket_msg  = msg;
   147d4:	76 82       	std	Z+6, r7	; 0x06
   147d6:	65 82       	std	Z+5, r6	; 0x05
   147d8:	e4 e1       	ldi	r30, 0x14	; 20
   147da:	fa ee       	ldi	r31, 0xEA	; 234
   147dc:	09 95       	icall

   //pending_id = id;
   //pending_address = address;
   //pending_length = length;
   //pending_msg = msg;

   sendRadioMsg();

   sleepThread(30);
   147de:	8e e1       	ldi	r24, 0x1E	; 30
   147e0:	90 e0       	ldi	r25, 0x00	; 0
   147e2:	0e 94 73 a3 	call	0x146e6
   147e6:	e8 eb       	ldi	r30, 0xB8	; 184
   147e8:	fa ee       	ldi	r31, 0xEA	; 234
   147ea:	09 95       	icall
   147ec:	4f 93       	push	r20
   147ee:	5f 93       	push	r21
   147f0:	4c 2f       	mov	r20, r28
   147f2:	5d 2f       	mov	r21, r29
   147f4:	e8 e1       	ldi	r30, 0x18	; 24
   147f6:	fa ee       	ldi	r31, 0xEA	; 234
   147f8:	09 95       	icall
   147fa:	5f 91       	pop	r21
   147fc:	4f 91       	pop	r20

void greenToggle()
{
 void (*greenfp)() = (void (*)(void))GREEN_LED_TOGGLE_FUNCTION; 
 greenfp();                              
   147fe:	e4 e0       	ldi	r30, 0x04	; 4
   14800:	fa ee       	ldi	r31, 0xEA	; 234
   14802:	09 95       	icall
	greenToggle();
	sleepThread(100);
   14804:	84 e6       	ldi	r24, 0x64	; 100
   14806:	90 e0       	ldi	r25, 0x00	; 0
   14808:	0e 94 73 a3 	call	0x146e6
   1480c:	8d cf       	rjmp	.-230    	; 0x14728

0001480e <syscall_postThreadTask.1400>:
}



void syscall_postThreadTask()
{
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK; 
 postthreadfp();                              
   1480e:	e8 e6       	ldi	r30, 0x68	; 104
   14810:	fa ee       	ldi	r31, 0xEA	; 234
   14812:	09 95       	icall
   14814:	08 95       	ret

00014816 <wakeupMe.3095>:

   disableRadioState();


   Mutex_unlock(msend);

   return;
}



//wakeup the current thread once an incoming packet arrives

void wakeupMe()
{
  mythread->state = STATE_ACTIVE;
   14816:	e0 91 6a 0a 	lds	r30, 0x0A6A
   1481a:	f0 91 6b 0a 	lds	r31, 0x0A6B
   1481e:	82 e0       	ldi	r24, 0x02	; 2
   14820:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   14822:	0e 94 07 a4 	call	0x1480e
   14826:	08 95       	ret

00014828 <wakeupMeSerial.3382>:
//wakeup the current thread once an incoming packet arrives

void wakeupMeSerial()
{
  mythreadserial->state = STATE_ACTIVE;
   14828:	e0 91 6c 0a 	lds	r30, 0x0A6C
   1482c:	f0 91 6d 0a 	lds	r31, 0x0A6D
   14830:	82 e0       	ldi	r24, 0x02	; 2
   14832:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   14834:	0e 94 07 a4 	call	0x1480e
   14838:	08 95       	ret
