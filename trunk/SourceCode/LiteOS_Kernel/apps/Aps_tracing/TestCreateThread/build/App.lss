
App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800a5a  00014824  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00014600  00014600  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800a62  00800a62  000002c0  2**0
                  ALLOC
  3 .stab         00000408  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000084  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000001b  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000130d  00000000  00000000  00000787  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002dc  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000332  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  000020a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003cd  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000080  00000000  00000000  000024ff  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00014600 <__vectors>:
   14600:	0c 94 46 a3 	jmp	0x1468c
   14604:	0c 94 63 a3 	jmp	0x146c6
   14608:	0c 94 63 a3 	jmp	0x146c6
   1460c:	0c 94 63 a3 	jmp	0x146c6
   14610:	0c 94 63 a3 	jmp	0x146c6
   14614:	0c 94 63 a3 	jmp	0x146c6
   14618:	0c 94 63 a3 	jmp	0x146c6
   1461c:	0c 94 63 a3 	jmp	0x146c6
   14620:	0c 94 63 a3 	jmp	0x146c6
   14624:	0c 94 63 a3 	jmp	0x146c6
   14628:	0c 94 63 a3 	jmp	0x146c6
   1462c:	0c 94 63 a3 	jmp	0x146c6
   14630:	0c 94 63 a3 	jmp	0x146c6
   14634:	0c 94 63 a3 	jmp	0x146c6
   14638:	0c 94 63 a3 	jmp	0x146c6
   1463c:	0c 94 63 a3 	jmp	0x146c6
   14640:	0c 94 63 a3 	jmp	0x146c6
   14644:	0c 94 63 a3 	jmp	0x146c6
   14648:	0c 94 63 a3 	jmp	0x146c6
   1464c:	0c 94 63 a3 	jmp	0x146c6
   14650:	0c 94 63 a3 	jmp	0x146c6
   14654:	0c 94 63 a3 	jmp	0x146c6
   14658:	0c 94 63 a3 	jmp	0x146c6
   1465c:	0c 94 63 a3 	jmp	0x146c6
   14660:	0c 94 63 a3 	jmp	0x146c6
   14664:	0c 94 63 a3 	jmp	0x146c6
   14668:	0c 94 63 a3 	jmp	0x146c6
   1466c:	0c 94 63 a3 	jmp	0x146c6
   14670:	0c 94 63 a3 	jmp	0x146c6
   14674:	0c 94 63 a3 	jmp	0x146c6
   14678:	0c 94 63 a3 	jmp	0x146c6
   1467c:	0c 94 63 a3 	jmp	0x146c6
   14680:	0c 94 63 a3 	jmp	0x146c6
   14684:	0c 94 63 a3 	jmp	0x146c6
   14688:	0c 94 63 a3 	jmp	0x146c6

0001468c <__ctors_end>:
   1468c:	11 24       	eor	r1, r1
   1468e:	1f be       	out	0x3f, r1	; 63
   14690:	ca e5       	ldi	r28, 0x5A	; 90
   14692:	db e0       	ldi	r29, 0x0B	; 11
   14694:	de bf       	out	0x3e, r29	; 62
   14696:	cd bf       	out	0x3d, r28	; 61

00014698 <__do_copy_data>:
   14698:	1a e0       	ldi	r17, 0x0A	; 10
   1469a:	aa e5       	ldi	r26, 0x5A	; 90
   1469c:	ba e0       	ldi	r27, 0x0A	; 10
   1469e:	e4 e2       	ldi	r30, 0x24	; 36
   146a0:	f8 e4       	ldi	r31, 0x48	; 72
   146a2:	01 e0       	ldi	r16, 0x01	; 1
   146a4:	0b bf       	out	0x3b, r16	; 59
   146a6:	02 c0       	rjmp	.+4      	; 0x146ac
   146a8:	07 90       	elpm	r0, Z+
   146aa:	0d 92       	st	X+, r0
   146ac:	a2 36       	cpi	r26, 0x62	; 98
   146ae:	b1 07       	cpc	r27, r17
   146b0:	d9 f7       	brne	.-10     	; 0x146a8

000146b2 <__do_clear_bss>:
   146b2:	1a e0       	ldi	r17, 0x0A	; 10
   146b4:	a2 e6       	ldi	r26, 0x62	; 98
   146b6:	ba e0       	ldi	r27, 0x0A	; 10
   146b8:	01 c0       	rjmp	.+2      	; 0x146bc

000146ba <.do_clear_bss_loop>:
   146ba:	1d 92       	st	X+, r1

000146bc <.do_clear_bss_start>:
   146bc:	a2 3a       	cpi	r26, 0xA2	; 162
   146be:	b1 07       	cpc	r27, r17
   146c0:	e1 f7       	brne	.-8      	; 0x146ba
   146c2:	0c 94 a3 a3 	jmp	0x14746

000146c6 <__bad_interrupt>:
   146c6:	0c 94 00 a3 	jmp	0x14600

000146ca <getCurrentThread.1403>:
thread **getCurrentThread()
{
   thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
   146ca:	4f 93       	push	r20
   146cc:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   146ce:	ec e0       	ldi	r30, 0x0C	; 12
   146d0:	fa ee       	ldi	r31, 0xEA	; 234
   146d2:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   146d4:	84 2f       	mov	r24, r20
   146d6:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
   146d8:	5f 91       	pop	r21
   146da:	4f 91       	pop	r20
   146dc:	08 95       	ret

000146de <yield.1402>:
	             "pop r20" "\n\t"
	              ::);
   return current_thread; 
}



uint8_t getCurrentThreadIndex()
{
   
   uint16_t index; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_INDEX_FUNCTION; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   asm volatile(" mov %A0, r20" "\n\t"
	             "mov %B0, r21" "\n\t"
				 :"=r" (index)
				 :
                );
    asm volatile("pop r21" "\n\t"
	             "pop r20" "\n\t"
	              ::);
   return (uint8_t)index; 
}


void sleepThread(int milliseconds)
{
/*
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 

   asm volatile("push r24" "\n\t"
	             "push r25" "\n\t"
	              ::);
   getaddrfp();     

   asm volatile(" mov %A0, r24" "\n\t"
	             "mov %B0, r25" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r24" "\n\t"
	             "pop r25" "\n\t"
	              ::);
 */
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 4;
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
   
   yield(); 
}


void hibernateThread()
{
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 5; 
   yield(); 
}


void yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
   146de:	e0 e0       	ldi	r30, 0x00	; 0
   146e0:	fa ee       	ldi	r31, 0xEA	; 234
   146e2:	09 95       	icall
   146e4:	08 95       	ret

000146e6 <sleepThread.1401>:
   146e6:	0f 93       	push	r16
   146e8:	1f 93       	push	r17
   146ea:	8c 01       	movw	r16, r24
   146ec:	0e 94 65 a3 	call	0x146ca
   146f0:	dc 01       	movw	r26, r24
   146f2:	ed 91       	ld	r30, X+
   146f4:	fc 91       	ld	r31, X
   146f6:	11 97       	sbiw	r26, 0x01	; 1
   146f8:	84 e0       	ldi	r24, 0x04	; 4
   146fa:	82 83       	std	Z+2, r24	; 0x02
   146fc:	ed 91       	ld	r30, X+
   146fe:	fc 91       	ld	r31, X
   14700:	14 8f       	std	Z+28, r17	; 0x1c
   14702:	03 8f       	std	Z+27, r16	; 0x1b
   14704:	0e 94 6f a3 	call	0x146de
   14708:	1f 91       	pop	r17
   1470a:	0f 91       	pop	r16
   1470c:	08 95       	ret

0001470e <loop>:
uint8_t ramstack[60]; 

void loop()
{
  __asm__ __volatile__("sei" ::);
   1470e:	78 94       	sei
  while (1)
  { sleepThread(100);}
   14710:	84 e6       	ldi	r24, 0x64	; 100
   14712:	90 e0       	ldi	r25, 0x00	; 0
   14714:	0e 94 73 a3 	call	0x146e6
   14718:	fb cf       	rjmp	.-10     	; 0x14710

0001471a <syscall_postThreadTask.1409>:
}



void syscall_postThreadTask()
{
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK; 
 postthreadfp();                              
   1471a:	e8 e6       	ldi	r30, 0x68	; 104
   1471c:	fa ee       	ldi	r31, 0xEA	; 234
   1471e:	09 95       	icall
   14720:	08 95       	ret

00014722 <wakeupMe.3132>:
//wakeup the current thread once an incoming packet arrives

void wakeupMe()
{
  mythread->state = STATE_ACTIVE;
   14722:	e0 91 9e 0a 	lds	r30, 0x0A9E
   14726:	f0 91 9f 0a 	lds	r31, 0x0A9F
   1472a:	82 e0       	ldi	r24, 0x02	; 2
   1472c:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   1472e:	0e 94 8d a3 	call	0x1471a
   14732:	08 95       	ret

00014734 <wakeupMeSerial.3419>:
//wakeup the current thread once an incoming packet arrives

void wakeupMeSerial()
{
  mythreadserial->state = STATE_ACTIVE;
   14734:	e0 91 a0 0a 	lds	r30, 0x0AA0
   14738:	f0 91 a1 0a 	lds	r31, 0x0AA1
   1473c:	82 e0       	ldi	r24, 0x02	; 2
   1473e:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   14740:	0e 94 8d a3 	call	0x1471a
   14744:	08 95       	ret

00014746 <main>:
  		
}


int main()
{
   14746:	9f 92       	push	r9
   14748:	af 92       	push	r10
   1474a:	bf 92       	push	r11
   1474c:	cf 92       	push	r12
   1474e:	df 92       	push	r13
   14750:	ef 92       	push	r14
   14752:	ff 92       	push	r15
   14754:	0f 93       	push	r16
   14756:	1f 93       	push	r17
   14758:	cf 93       	push	r28
   1475a:	df 93       	push	r29
    __asm__ __volatile__("sei" ::);
   1475c:	78 94       	sei
}


void debugValue(uint16_t v1, uint16_t v2, uint16_t v3)
{

  void (*fp)(void) = (void (*)(void))DEBUG_VALUE_SYSCALL; 
   asm volatile("push r8" "\n\t"
                "push r9" "\n\t"
                "push r10" "\n\t"
                "push r11" "\n\t"
				"push r12" "\n\t"
				"push r13" "\n\t"
                ::);
   
   asm volatile(" mov r8, %A0" "\n\t"
	             "mov r9, %B0" "\n\t"
				 :
				 :"r" (v1)
                );


   asm volatile(" mov r10, %A0" "\n\t"
	             "mov r11, %B0" "\n\t"
				 :
				 :"r" (v2)
                );
 
   asm volatile(" mov r12, %A0" "\n\t"
	             "mov r13, %B0" "\n\t"
				 :
				 :"r" (v3)
                );


  fp(); 

  asm volatile("pop r13" "\n\t"
	           "pop r12" "\n\t"
	              ::);

  asm volatile("pop r11" "\n\t"
	           "pop r10" "\n\t"
	              ::);

  asm volatile("pop r9" "\n\t"
	           "pop r8" "\n\t"
	              ::);
  return; 


}


void postTask(void (*tp) (void), uint16_t priority)
{
   void (*fp)(void) = (void (*)(void))POST_TASK_SYSCALL; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
				"push r22" "\n\t"
				"push r23" "\n\t"
                ::);
   
   asm volatile(" mov r20, %A0" "\n\t"
	             "mov r21, %B0" "\n\t"
				 :
				 :"r" (tp)
                );


   asm volatile(" mov r22, %A0" "\n\t"
	             "mov r23, %B0" "\n\t"
				 :
				 :"r" (priority)
                );

  fp(); 

  asm volatile("pop r23" "\n\t"
	           "pop r22" "\n\t"
	              ::);

  asm volatile("pop r21" "\n\t"
	           "pop r20" "\n\t"
	              ::);
  return; 


}




thread_create_block_type *getCurrentThreadControlBlockAddr()
{
   thread_create_block_type *blockinfo; 
   void (*getaddrfp)(void) = (void (*)(void))GET_THREAD_CONTROL_BLOCK; 
   asm volatile("push r20" "\n\t"
   1475e:	4f 93       	push	r20
   14760:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   14762:	e4 ed       	ldi	r30, 0xD4	; 212
   14764:	fa ee       	ldi	r31, 0xEA	; 234
   14766:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   14768:	e4 2e       	mov	r14, r20
   1476a:	f5 2e       	mov	r15, r21
	              " mov %B0, r21" "\n\t"
				 :"=r" (blockinfo)
				 :
               );
    asm volatile("pop r21" "\n\t"
   1476c:	5f 91       	pop	r21
   1476e:	4f 91       	pop	r20
	               "pop r20" "\n\t"
	               ::);
   return blockinfo; 
}


void *getCurrentThreadControlMutexAddr()
{
   void *blockinfo; 
   void (*getaddrfp)(void) = (void (*)(void))GET_THREAD_CONTROL_MUTEX; 
   asm volatile("push r20" "\n\t"
   14770:	4f 93       	push	r20
   14772:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   14774:	e8 ed       	ldi	r30, 0xD8	; 216
   14776:	fa ee       	ldi	r31, 0xEA	; 234
   14778:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   1477a:	c4 2f       	mov	r28, r20
   1477c:	d5 2f       	mov	r29, r21
	              " mov %B0, r21" "\n\t"
				 :"=r" (blockinfo)
				 :
               );
    asm volatile("pop r21" "\n\t"
   1477e:	5f 91       	pop	r21
   14780:	4f 91       	pop	r20
    

	_atomic_t currentatomic;
    
	current_thread = getCurrentThread(); 
   14782:	0e 94 65 a3 	call	0x146ca
   14786:	6c 01       	movw	r12, r24
   14788:	4f 93       	push	r20
   1478a:	5f 93       	push	r21
   1478c:	ec e1       	ldi	r30, 0x1C	; 28
   1478e:	fa ee       	ldi	r31, 0xEA	; 234
   14790:	09 95       	icall
   14792:	a4 2e       	mov	r10, r20
   14794:	b5 2e       	mov	r11, r21
   14796:	5f 91       	pop	r21
   14798:	4f 91       	pop	r20


_atomic_t _atomic_start(void)
{
  _atomic_t result = SREG;
   1479a:	9f b6       	in	r9, 0x3f	; 63
  asm volatile("cli" "\n\t"::);
   1479c:	f8 94       	cli
	threadindex = getCurrentThreadIndex(); 

	currentatomic = _atomic_start();
	
    if(m->lock){  
   1479e:	88 81       	ld	r24, Y
   147a0:	88 23       	and	r24, r24
   147a2:	91 f0       	breq	.+36     	; 0x147c8
        (*current_thread)->state = STATE_BLOCKED;
   147a4:	d6 01       	movw	r26, r12
   147a6:	ed 91       	ld	r30, X+
   147a8:	fc 91       	ld	r31, X
   147aa:	11 97       	sbiw	r26, 0x01	; 1
   147ac:	83 e0       	ldi	r24, 0x03	; 3
   147ae:	82 83       	std	Z+2, r24	; 0x02
        (*current_thread)->data.m = m;
   147b0:	ed 91       	ld	r30, X+
   147b2:	fc 91       	ld	r31, X
   147b4:	d4 8f       	std	Z+28, r29	; 0x1c
   147b6:	c3 8f       	std	Z+27, r28	; 0x1b
        
      
        m->waiting++;
   147b8:	89 81       	ldd	r24, Y+1	; 0x01
   147ba:	8f 5f       	subi	r24, 0xFF	; 255
   147bc:	89 83       	std	Y+1, r24	; 0x01
       
        yield();
   147be:	0e 94 6f a3 	call	0x146de
     
        m->waiting--;
   147c2:	89 81       	ldd	r24, Y+1	; 0x01
   147c4:	81 50       	subi	r24, 0x01	; 1
   147c6:	89 83       	std	Y+1, r24	; 0x01
      }
      m->lock = 1;
   147c8:	21 e0       	ldi	r18, 0x01	; 1
   147ca:	28 83       	st	Y, r18
   147cc:	8a 2d       	mov	r24, r10
   147ce:	99 27       	eor	r25, r25
      m->lockingthreadid = threadindex; 
   147d0:	8a 83       	std	Y+2, r24	; 0x02
   147d2:	89 2d       	mov	r24, r9
   147d4:	99 27       	eor	r25, r25
  return result;
}



void _atomic_end(_atomic_t oldSreg)
{
  SREG = oldSreg;
   147d6:	8f bf       	out	0x3f, r24	; 63
	               "pop r20" "\n\t"
	               ::);
   return blockinfo; 
}





void createThread(void (*fp)(), uint8_t* ram_start, uint8_t *stack_ptr, uint8_t priority, char *threadname)
{
 
 
   mutex* createthreadmutex; 
   thread_create_block_type *threadblock;
   void (*getaddrfp)(void) = (void (*)(void))CREATE_THERAD_SYSCALL;

  
   threadblock = getCurrentThreadControlBlockAddr(); 
   createthreadmutex = (mutex *)getCurrentThreadControlMutexAddr(); 
   
   Mutex_lock(createthreadmutex);
     
   threadblock-> fp = fp; 
   147d8:	87 e8       	ldi	r24, 0x87	; 135
   147da:	93 ea       	ldi	r25, 0xA3	; 163
   147dc:	f7 01       	movw	r30, r14
   147de:	91 83       	std	Z+1, r25	; 0x01
   147e0:	80 83       	st	Z, r24
   threadblock->ram_start = ram_start; 
   147e2:	82 e6       	ldi	r24, 0x62	; 98
   147e4:	9a e0       	ldi	r25, 0x0A	; 10
   147e6:	93 83       	std	Z+3, r25	; 0x03
   147e8:	82 83       	std	Z+2, r24	; 0x02
   threadblock->stack_ptr = stack_ptr; 
   147ea:	cc 96       	adiw	r24, 0x3c	; 60
   147ec:	95 83       	std	Z+5, r25	; 0x05
   147ee:	84 83       	std	Z+4, r24	; 0x04
   threadblock->priority = priority;
   147f0:	26 83       	std	Z+6, r18	; 0x06
   threadblock->threadname = threadname; 
   147f2:	8a e5       	ldi	r24, 0x5A	; 90
   147f4:	9a e0       	ldi	r25, 0x0A	; 10
   147f6:	90 87       	std	Z+8, r25	; 0x08
   147f8:	87 83       	std	Z+7, r24	; 0x07

   getaddrfp(); 
   147fa:	ec ed       	ldi	r30, 0xDC	; 220
   147fc:	fa ee       	ldi	r31, 0xEA	; 234
   147fe:	09 95       	icall
   
   sleepThread(20); 
   14800:	84 e1       	ldi	r24, 0x14	; 20
   14802:	90 e0       	ldi	r25, 0x00	; 0
   14804:	0e 94 73 a3 	call	0x146e6
      
    _atomic_end(currentatomic);  


}



void Mutex_unlock(mutex *m)
{
     
   void (*getaddrfp)(void) = (void (*)(void))MUTEX_UNLOCK_FUNCTION; 
   asm volatile("push r20" "\n\t"
   14808:	4f 93       	push	r20
   1480a:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
      
   asm volatile(" mov r20, %A0" "\n\t"
   1480c:	4c 2f       	mov	r20, r28
   1480e:	5d 2f       	mov	r21, r29
	              " mov r21, %B0" "\n\t"
				 :
				 :"r" (m)
                );

   getaddrfp();
   14810:	e8 e1       	ldi	r30, 0x18	; 24
   14812:	fa ee       	ldi	r31, 0xEA	; 234
   14814:	09 95       	icall
   asm volatile( "pop r21" "\n\t"
   14816:	5f 91       	pop	r21
   14818:	4f 91       	pop	r20
    	    
    createThread(loop, ramstack, ramstack+60, 1, "loopme");
    
    while (1)
    {
    	 sleepThread(100);
   1481a:	84 e6       	ldi	r24, 0x64	; 100
   1481c:	90 e0       	ldi	r25, 0x00	; 0
   1481e:	0e 94 73 a3 	call	0x146e6
   14822:	fb cf       	rjmp	.-10     	; 0x1481a
