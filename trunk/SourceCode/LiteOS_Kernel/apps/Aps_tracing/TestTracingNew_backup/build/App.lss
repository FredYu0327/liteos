
App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800b2c  0001794c  000007e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000074c  00017200  00017200  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ce  00800b38  00800b38  000007ec  2**0
                  ALLOC
  3 .stab         00000408  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000084  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000001b  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000261c  00000000  00000000  00000cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002d5  00000000  00000000  000032cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a98  00000000  00000000  000035a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000070  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000058d  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002df  00000000  00000000  00004639  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00004918  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00017200 <__vectors>:
   17200:	0c 94 46 b9 	jmp	0x1728c
   17204:	0c 94 63 b9 	jmp	0x172c6
   17208:	0c 94 63 b9 	jmp	0x172c6
   1720c:	0c 94 63 b9 	jmp	0x172c6
   17210:	0c 94 63 b9 	jmp	0x172c6
   17214:	0c 94 63 b9 	jmp	0x172c6
   17218:	0c 94 63 b9 	jmp	0x172c6
   1721c:	0c 94 63 b9 	jmp	0x172c6
   17220:	0c 94 63 b9 	jmp	0x172c6
   17224:	0c 94 63 b9 	jmp	0x172c6
   17228:	0c 94 63 b9 	jmp	0x172c6
   1722c:	0c 94 63 b9 	jmp	0x172c6
   17230:	0c 94 63 b9 	jmp	0x172c6
   17234:	0c 94 63 b9 	jmp	0x172c6
   17238:	0c 94 63 b9 	jmp	0x172c6
   1723c:	0c 94 63 b9 	jmp	0x172c6
   17240:	0c 94 63 b9 	jmp	0x172c6
   17244:	0c 94 63 b9 	jmp	0x172c6
   17248:	0c 94 63 b9 	jmp	0x172c6
   1724c:	0c 94 63 b9 	jmp	0x172c6
   17250:	0c 94 63 b9 	jmp	0x172c6
   17254:	0c 94 63 b9 	jmp	0x172c6
   17258:	0c 94 63 b9 	jmp	0x172c6
   1725c:	0c 94 63 b9 	jmp	0x172c6
   17260:	0c 94 63 b9 	jmp	0x172c6
   17264:	0c 94 63 b9 	jmp	0x172c6
   17268:	0c 94 63 b9 	jmp	0x172c6
   1726c:	0c 94 63 b9 	jmp	0x172c6
   17270:	0c 94 63 b9 	jmp	0x172c6
   17274:	0c 94 63 b9 	jmp	0x172c6
   17278:	0c 94 63 b9 	jmp	0x172c6
   1727c:	0c 94 63 b9 	jmp	0x172c6
   17280:	0c 94 63 b9 	jmp	0x172c6
   17284:	0c 94 63 b9 	jmp	0x172c6
   17288:	0c 94 63 b9 	jmp	0x172c6

0001728c <__ctors_end>:
   1728c:	11 24       	eor	r1, r1
   1728e:	1f be       	out	0x3f, r1	; 63
   17290:	c0 eb       	ldi	r28, 0xB0	; 176
   17292:	de e0       	ldi	r29, 0x0E	; 14
   17294:	de bf       	out	0x3e, r29	; 62
   17296:	cd bf       	out	0x3d, r28	; 61

00017298 <__do_copy_data>:
   17298:	1b e0       	ldi	r17, 0x0B	; 11
   1729a:	ac e2       	ldi	r26, 0x2C	; 44
   1729c:	bb e0       	ldi	r27, 0x0B	; 11
   1729e:	ec e4       	ldi	r30, 0x4C	; 76
   172a0:	f9 e7       	ldi	r31, 0x79	; 121
   172a2:	01 e0       	ldi	r16, 0x01	; 1
   172a4:	0b bf       	out	0x3b, r16	; 59
   172a6:	02 c0       	rjmp	.+4      	; 0x172ac
   172a8:	07 90       	elpm	r0, Z+
   172aa:	0d 92       	st	X+, r0
   172ac:	a8 33       	cpi	r26, 0x38	; 56
   172ae:	b1 07       	cpc	r27, r17
   172b0:	d9 f7       	brne	.-10     	; 0x172a8

000172b2 <__do_clear_bss>:
   172b2:	1c e0       	ldi	r17, 0x0C	; 12
   172b4:	a8 e3       	ldi	r26, 0x38	; 56
   172b6:	bb e0       	ldi	r27, 0x0B	; 11
   172b8:	01 c0       	rjmp	.+2      	; 0x172bc

000172ba <.do_clear_bss_loop>:
   172ba:	1d 92       	st	X+, r1

000172bc <.do_clear_bss_start>:
   172bc:	a6 30       	cpi	r26, 0x06	; 6
   172be:	b1 07       	cpc	r27, r17
   172c0:	e1 f7       	brne	.-8      	; 0x172ba
   172c2:	0c 94 a8 ba 	jmp	0x17550

000172c6 <__bad_interrupt>:
   172c6:	0c 94 00 b9 	jmp	0x17200

000172ca <tracingcontroluser>:
	  uint16_t *sp;



    asm volatile (
   172ca:	ed b7       	in	r30, 0x3d	; 61
   172cc:	fe b7       	in	r31, 0x3e	; 62
    "in %A0, 0x3d" "\n\t"
    "in %B0, 0x3e" "\n\t"
    : "=r" (SPvalue)
    :
    );
    
    SPvalue = SPvalue+5+4; 
    sp = (uint16_t*)SPvalue; 
    regsource = (uint16_t)*(uint16_t*)sp;
   172ce:	81 85       	ldd	r24, Z+9	; 0x09
   172d0:	92 85       	ldd	r25, Z+10	; 0x0a
   172d2:	90 93 c3 0b 	sts	0x0BC3, r25
   172d6:	80 93 c2 0b 	sts	0x0BC2, r24
    //reghigh = *(sp+1); 
    SPvalue = SPvalue-7; 
    
     asm volatile (
   172da:	32 96       	adiw	r30, 0x02	; 2
   172dc:	ed bf       	out	0x3d, r30	; 61
   172de:	fe bf       	out	0x3e, r31	; 62
    "out 0x3d, %A0" "\n\t"
    "out 0x3e, %B0" "\n\t"
    :: "r" (SPvalue)
    
    );
    
    //APPJUMPSTART$$$$$
if (regsource == APPTRACEPOINT0COMPARE)
   172e0:	80 91 c2 0b 	lds	r24, 0x0BC2
   172e4:	90 91 c3 0b 	lds	r25, 0x0BC3
   172e8:	8c 58       	subi	r24, 0x8C	; 140
   172ea:	99 40       	sbci	r25, 0x09	; 9
   172ec:	89 f4       	brne	.+34     	; 0x17310

{

__asm__ __volatile__("pop r29" ::);
   172ee:	df 91       	pop	r29
__asm__ __volatile__("pop r28" ::);
   172f0:	cf 91       	pop	r28
__asm__ __volatile__("pop r25" ::);
   172f2:	9f 91       	pop	r25
__asm__ __volatile__("pop r24" ::);
   172f4:	8f 91       	pop	r24

__asm__ __volatile__("pop r31" ::);
   172f6:	ff 91       	pop	r31
__asm__ __volatile__("pop r30" ::);
   172f8:	ef 91       	pop	r30
__asm__ __volatile__("pop r31" ::);
   172fa:	ff 91       	pop	r31
__asm__ __volatile__("pop r30" ::);
   172fc:	ef 91       	pop	r30

__asm__ __volatile__("pop r31" ::);
   172fe:	ff 91       	pop	r31
__asm__ __volatile__("pop r30" ::);
   17300:	ef 91       	pop	r30

__asm__ __volatile__("push r28"::);
   17302:	cf 93       	push	r28

__asm__ __volatile__("push r29"::);
   17304:	df 93       	push	r29

__asm__ __volatile__("in r28, 0x3d"::);
   17306:	cd b7       	in	r28, 0x3d	; 61

__asm__ __volatile__("in r29, 0x3e"::);
   17308:	de b7       	in	r29, 0x3e	; 62

__asm__ __volatile__("sbiw r28, 0x02"::);
   1730a:	22 97       	sbiw	r28, 0x02	; 2

__asm__ __volatile__("in r0, 0x3f"::);
   1730c:	0f b6       	in	r0, 0x3f	; 63

__asm__ __volatile__("cli"::);
   1730e:	f8 94       	cli

}

    //APPJUMPEND$$$$$
    
    
    {                     
                          
                          
    __asm__ __volatile__("push r31" ::); 
   17310:	ff 93       	push	r31
	  __asm__ __volatile__("push r30" ::); 
   17312:	ef 93       	push	r30
	  __asm__ __volatile__("push r25" ::); 
   17314:	9f 93       	push	r25
	  __asm__ __volatile__("push r24" ::); 
   17316:	8f 93       	push	r24
	  	                    
   // SWAP_STACK_PTR(currentthreadptr, *oldstackptraddr); 
                          
    PUSH_GPR();           
   17318:	0f 92       	push	r0
   1731a:	1f 92       	push	r1
   1731c:	2f 92       	push	r2
   1731e:	3f 92       	push	r3
   17320:	4f 92       	push	r4
   17322:	5f 92       	push	r5
   17324:	6f 92       	push	r6
   17326:	7f 92       	push	r7
   17328:	8f 92       	push	r8
   1732a:	9f 92       	push	r9
   1732c:	af 92       	push	r10
   1732e:	bf 92       	push	r11
   17330:	cf 92       	push	r12
   17332:	df 92       	push	r13
   17334:	ef 92       	push	r14
   17336:	ff 92       	push	r15
   17338:	0f 93       	push	r16
   1733a:	1f 93       	push	r17
   1733c:	2f 93       	push	r18
   1733e:	3f 93       	push	r19
   17340:	4f 93       	push	r20
   17342:	5f 93       	push	r21
   17344:	6f 93       	push	r22
   17346:	7f 93       	push	r23
   17348:	8f 93       	push	r24
   1734a:	9f 93       	push	r25
   1734c:	af 93       	push	r26
   1734e:	bf 93       	push	r27
   17350:	cf 93       	push	r28
   17352:	df 93       	push	r29
   17354:	ef 93       	push	r30
   17356:	ff 93       	push	r31
    PUSH_REG_STATUS();    
   17358:	ff 93       	push	r31
   1735a:	ff b7       	in	r31, 0x3f	; 63
   1735c:	ff 93       	push	r31


_atomic_t _atomic_start(void)
{
  _atomic_t result = SREG;
   1735e:	8f b7       	in	r24, 0x3f	; 63
  asm volatile("cli" "\n\t"::);
   17360:	f8 94       	cli
                          
    {                      
    _atomic_t _atomic = _atomic_start();
   17362:	99 27       	eor	r25, r25
   
    
     //USERTRACEACTIONSTART$$$$$


if ( regsource == APPTRACEPOINT0COMPARE )
   17364:	20 91 c2 0b 	lds	r18, 0x0BC2
   17368:	30 91 c3 0b 	lds	r19, 0x0BC3
  return result;
}



void _atomic_end(_atomic_t oldSreg)
{
  SREG = oldSreg;
   1736c:	8f bf       	out	0x3f, r24	; 63

{
/*
trace[currentindex++] = 2;

trace[currentindex++] = 12;

trace[currentindex++] = 0;
*/

}

    //USERTRACEACTIONEND$$$$$
    
        /*
 
 if (currentindex >= 118)

  	{
	     //Now write the trace into the file and clean it up 
	   //This is critical becuase more events will happen when the write occurs. 
	   uint8_t i;
	   for (i=0;i<32;i++)
	      traceshadow[i] = trace[i]; 
	   currentindex = 0; 

     
     thisthread->state = STATE_ACTIVE; 
      syscall_postThreadTask_nologging();  
      writetask = 1;   

   }
   
 
 */ 
  
    _atomic_end(_atomic); 
    
    }
            
    
    POP_REG_STATUS();
   1736e:	ff 91       	pop	r31
   17370:	ff bf       	out	0x3f, r31	; 63
   17372:	ff 91       	pop	r31
    POP_GPR();
   17374:	ff 91       	pop	r31
   17376:	ef 91       	pop	r30
   17378:	df 91       	pop	r29
   1737a:	cf 91       	pop	r28
   1737c:	bf 91       	pop	r27
   1737e:	af 91       	pop	r26
   17380:	9f 91       	pop	r25
   17382:	8f 91       	pop	r24
   17384:	7f 91       	pop	r23
   17386:	6f 91       	pop	r22
   17388:	5f 91       	pop	r21
   1738a:	4f 91       	pop	r20
   1738c:	3f 91       	pop	r19
   1738e:	2f 91       	pop	r18
   17390:	1f 91       	pop	r17
   17392:	0f 91       	pop	r16
   17394:	ff 90       	pop	r15
   17396:	ef 90       	pop	r14
   17398:	df 90       	pop	r13
   1739a:	cf 90       	pop	r12
   1739c:	bf 90       	pop	r11
   1739e:	af 90       	pop	r10
   173a0:	9f 90       	pop	r9
   173a2:	8f 90       	pop	r8
   173a4:	7f 90       	pop	r7
   173a6:	6f 90       	pop	r6
   173a8:	5f 90       	pop	r5
   173aa:	4f 90       	pop	r4
   173ac:	3f 90       	pop	r3
   173ae:	2f 90       	pop	r2
   173b0:	1f 90       	pop	r1
   173b2:	0f 90       	pop	r0
    
   // SWAP_STACK_PTR(*oldstackptraddr, currentthreadptr); 
    
    __asm__ __volatile__("pop r24" ::); 
   173b4:	8f 91       	pop	r24
	  __asm__ __volatile__("pop r25" ::); 
   173b6:	9f 91       	pop	r25
	  __asm__ __volatile__("pop r30" ::); 	
   173b8:	ef 91       	pop	r30
	  __asm__ __volatile__("pop r31" ::); 
   173ba:	ff 91       	pop	r31
    }
  
    
	  __asm__ __volatile__("push r30" ::); 	
   173bc:	ef 93       	push	r30
	  __asm__ __volatile__("push r31" ::); 
   173be:	ff 93       	push	r31
	  	
    
   asm volatile(" mov r31, %A0" "\n\t"
   173c0:	80 91 c2 0b 	lds	r24, 0x0BC2
   173c4:	90 91 c3 0b 	lds	r25, 0x0BC3
   173c8:	f8 2f       	mov	r31, r24
   173ca:	e9 2f       	mov	r30, r25
	              " mov r30, %B0" "\n\t"
				 :
				 :"r" (regsource)
                );
    
  
   __asm__ __volatile__("ijmp" ::); 
   173cc:	09 94       	ijmp

000173ce <wakeupMe.3619>:
//wakeup the current thread once an incoming packet arrives

void wakeupMe()
{
  mythread->state = STATE_ACTIVE;
   173ce:	e0 91 02 0c 	lds	r30, 0x0C02
   173d2:	f0 91 03 0c 	lds	r31, 0x0C03
   173d6:	82 e0       	ldi	r24, 0x02	; 2
   173d8:	82 83       	std	Z+2, r24	; 0x02

void syscall_postThreadTask()
{
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK; 
 postthreadfp();                              
   173da:	e8 e6       	ldi	r30, 0x68	; 104
   173dc:	fa ee       	ldi	r31, 0xEA	; 234
   173de:	09 95       	icall
   173e0:	08 95       	ret

000173e2 <tracingcontrol.1584>:
   173e2:	8f b7       	in	r24, 0x3f	; 63
   173e4:	f8 94       	cli
   173e6:	99 27       	eor	r25, r25
   173e8:	8f bf       	out	0x3f, r24	; 63
   173ea:	08 95       	ret

000173ec <wakeupMeSerial.3922>:
//wakeup the current thread once an incoming packet arrives

void wakeupMeSerial()
{
  mythreadserial->state = STATE_ACTIVE;
   173ec:	e0 91 04 0c 	lds	r30, 0x0C04
   173f0:	f0 91 05 0c 	lds	r31, 0x0C05
   173f4:	82 e0       	ldi	r24, 0x02	; 2
   173f6:	82 83       	std	Z+2, r24	; 0x02
   173f8:	e8 e6       	ldi	r30, 0x68	; 104
   173fa:	fa ee       	ldi	r31, 0xEA	; 234
   173fc:	09 95       	icall
   173fe:	08 95       	ret

00017400 <mfwrite.1516>:



void mfwrite(MYFILE *fp, void *buffer, int nBytes)
{
   17400:	4f 92       	push	r4
   17402:	5f 92       	push	r5
   17404:	6f 92       	push	r6
   17406:	7f 92       	push	r7
   17408:	8f 92       	push	r8
   1740a:	9f 92       	push	r9
   1740c:	bf 92       	push	r11
   1740e:	cf 92       	push	r12
   17410:	df 92       	push	r13
   17412:	ef 92       	push	r14
   17414:	ff 92       	push	r15
   17416:	0f 93       	push	r16
   17418:	1f 93       	push	r17
   1741a:	cf 93       	push	r28
   1741c:	df 93       	push	r29
   1741e:	4c 01       	movw	r8, r24
   17420:	3b 01       	movw	r6, r22
   17422:	2a 01       	movw	r4, r20
   17424:	4f 93       	push	r20
   17426:	5f 93       	push	r21
   17428:	ec e0       	ldi	r30, 0x0C	; 12
   1742a:	fa ee       	ldi	r31, 0xEA	; 234
   1742c:	09 95       	icall
   1742e:	04 2f       	mov	r16, r20
   17430:	15 2f       	mov	r17, r21
   17432:	5f 91       	pop	r21
   17434:	4f 91       	pop	r20
   17436:	4f 93       	push	r20
   17438:	5f 93       	push	r21
   1743a:	ec e1       	ldi	r30, 0x1C	; 28
   1743c:	fa ee       	ldi	r31, 0xEA	; 234
   1743e:	09 95       	icall
   17440:	84 2f       	mov	r24, r20
   17442:	95 2f       	mov	r25, r21
   17444:	5f 91       	pop	r21
   17446:	4f 91       	pop	r20
mutex *getFileMutexAddress()
{
   mutex *mfile;   
   void (*getaddrfp)(void) = (void (*)(void))GET_FILE_MUTEX_ADDRESS; 
   asm volatile("push r20" "\n\t"
   17448:	4f 93       	push	r20
   1744a:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   1744c:	e8 e2       	ldi	r30, 0x28	; 40
   1744e:	fa ee       	ldi	r31, 0xEA	; 234
   17450:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   17452:	c4 2f       	mov	r28, r20
   17454:	d5 2f       	mov	r29, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (mfile)
				 :
                );
    asm volatile("pop r21" "\n\t"
   17456:	5f 91       	pop	r21
   17458:	4f 91       	pop	r20
   1745a:	4f 93       	push	r20
   1745c:	5f 93       	push	r21
   1745e:	ec e0       	ldi	r30, 0x0C	; 12
   17460:	fa ee       	ldi	r31, 0xEA	; 234
   17462:	09 95       	icall
   17464:	e4 2e       	mov	r14, r20
   17466:	f5 2e       	mov	r15, r21
   17468:	5f 91       	pop	r21
   1746a:	4f 91       	pop	r20
   1746c:	4f 93       	push	r20
   1746e:	5f 93       	push	r21
   17470:	ec e1       	ldi	r30, 0x1C	; 28
   17472:	fa ee       	ldi	r31, 0xEA	; 234
   17474:	09 95       	icall
   17476:	c4 2e       	mov	r12, r20
   17478:	d5 2e       	mov	r13, r21
   1747a:	5f 91       	pop	r21
   1747c:	4f 91       	pop	r20
   1747e:	bf b6       	in	r11, 0x3f	; 63
   17480:	f8 94       	cli
   17482:	88 81       	ld	r24, Y
   17484:	88 23       	and	r24, r24
   17486:	99 f0       	breq	.+38     	; 0x174ae
   17488:	d7 01       	movw	r26, r14
   1748a:	ed 91       	ld	r30, X+
   1748c:	fc 91       	ld	r31, X
   1748e:	11 97       	sbiw	r26, 0x01	; 1
   17490:	83 e0       	ldi	r24, 0x03	; 3
   17492:	82 83       	std	Z+2, r24	; 0x02
   17494:	ed 91       	ld	r30, X+
   17496:	fc 91       	ld	r31, X
   17498:	d4 8f       	std	Z+28, r29	; 0x1c
   1749a:	c3 8f       	std	Z+27, r28	; 0x1b
   1749c:	89 81       	ldd	r24, Y+1	; 0x01
   1749e:	8f 5f       	subi	r24, 0xFF	; 255
   174a0:	89 83       	std	Y+1, r24	; 0x01
   174a2:	e0 e0       	ldi	r30, 0x00	; 0
   174a4:	fa ee       	ldi	r31, 0xEA	; 234
   174a6:	09 95       	icall
   174a8:	89 81       	ldd	r24, Y+1	; 0x01
   174aa:	81 50       	subi	r24, 0x01	; 1
   174ac:	89 83       	std	Y+1, r24	; 0x01
   174ae:	81 e0       	ldi	r24, 0x01	; 1
   174b0:	88 83       	st	Y, r24
   174b2:	8c 2d       	mov	r24, r12
   174b4:	99 27       	eor	r25, r25
   174b6:	8a 83       	std	Y+2, r24	; 0x02
   174b8:	8b 2d       	mov	r24, r11
   174ba:	99 27       	eor	r25, r25
   174bc:	8f bf       	out	0x3f, r24	; 63
   uint8_t currentthreadindex;
   thread** current_thread;
   mutex *mfile;

   current_thread = getCurrentThread();
   currentthreadindex = getCurrentThreadIndex();
   mfile = getFileMutexAddress();


   Mutex_lock(mfile);
   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
   174be:	d8 01       	movw	r26, r16
   174c0:	ed 91       	ld	r30, X+
   174c2:	fc 91       	ld	r31, X
   174c4:	11 97       	sbiw	r26, 0x01	; 1
   174c6:	90 a2       	std	Z+32, r9	; 0x20
   174c8:	87 8e       	std	Z+31, r8	; 0x1f
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
   174ca:	ed 91       	ld	r30, X+
   174cc:	fc 91       	ld	r31, X
   174ce:	11 97       	sbiw	r26, 0x01	; 1
   174d0:	72 a2       	std	Z+34, r7	; 0x22
   174d2:	61 a2       	std	Z+33, r6	; 0x21
   (*current_thread)->filedata.filestate.bytes = nBytes;
   174d4:	ed 91       	ld	r30, X+
   174d6:	fc 91       	ld	r31, X
   174d8:	54 a2       	std	Z+36, r5	; 0x24
   174da:	43 a2       	std	Z+35, r4	; 0x23
   174dc:	e8 e3       	ldi	r30, 0x38	; 56
   174de:	fa ee       	ldi	r31, 0xEA	; 234
   174e0:	09 95       	icall
   174e2:	4f 93       	push	r20
   174e4:	5f 93       	push	r21
   174e6:	ec e0       	ldi	r30, 0x0C	; 12
   174e8:	fa ee       	ldi	r31, 0xEA	; 234
   174ea:	09 95       	icall
   174ec:	a4 2f       	mov	r26, r20
   174ee:	b5 2f       	mov	r27, r21
   174f0:	5f 91       	pop	r21
   174f2:	4f 91       	pop	r20
   174f4:	0f b7       	in	r16, 0x3f	; 63
   174f6:	f8 94       	cli
   174f8:	11 27       	eor	r17, r17
   174fa:	ed 91       	ld	r30, X+
   174fc:	fc 91       	ld	r31, X
   174fe:	11 97       	sbiw	r26, 0x01	; 1
   17500:	86 e0       	ldi	r24, 0x06	; 6
   17502:	82 83       	std	Z+2, r24	; 0x02
   17504:	ed 91       	ld	r30, X+
   17506:	fc 91       	ld	r31, X
   17508:	11 97       	sbiw	r26, 0x01	; 1
   1750a:	87 e0       	ldi	r24, 0x07	; 7
   1750c:	83 8f       	std	Z+27, r24	; 0x1b
   1750e:	ed 91       	ld	r30, X+
   17510:	fc 91       	ld	r31, X
   17512:	84 e0       	ldi	r24, 0x04	; 4
   17514:	84 8f       	std	Z+28, r24	; 0x1c
   17516:	e0 e0       	ldi	r30, 0x00	; 0
   17518:	fa ee       	ldi	r31, 0xEA	; 234
   1751a:	09 95       	icall
   1751c:	0f bf       	out	0x3f, r16	; 63
   1751e:	4f 93       	push	r20
   17520:	5f 93       	push	r21
   17522:	4c 2f       	mov	r20, r28
   17524:	5d 2f       	mov	r21, r29
   17526:	e8 e1       	ldi	r30, 0x18	; 24
   17528:	fa ee       	ldi	r31, 0xEA	; 234
   1752a:	09 95       	icall
   1752c:	5f 91       	pop	r21
   1752e:	4f 91       	pop	r20
   17530:	df 91       	pop	r29
   17532:	cf 91       	pop	r28
   17534:	1f 91       	pop	r17
   17536:	0f 91       	pop	r16
   17538:	ff 90       	pop	r15
   1753a:	ef 90       	pop	r14
   1753c:	df 90       	pop	r13
   1753e:	cf 90       	pop	r12
   17540:	bf 90       	pop	r11
   17542:	9f 90       	pop	r9
   17544:	8f 90       	pop	r8
   17546:	7f 90       	pop	r7
   17548:	6f 90       	pop	r6
   1754a:	5f 90       	pop	r5
   1754c:	4f 90       	pop	r4
   1754e:	08 95       	ret

00017550 <main>:
    
   
}


 
//////////////////////////////////////////////////////////////////////////////////////
/// Clean up task for the thread
//////////////////////////////////////////////////////////////////////////////////////


//The trace arrays should be application specific here
void cleanUpTraceFunction() {

//CLEANTRACESTART$$$$$                     


{
uint32_t tracepointlocation = ((uint32_t)APPTRACEPOINT0*2);

pagenum = tracepointlocation/2/128;

pageoffset = tracepointlocation%256;

removeUserTracePoint( pagenum,  pageoffset , tracepatch0);

}


//CLEANTRACEEND$$$$$
	
}

int main()
{ 
   17550:	6f 92       	push	r6
   17552:	7f 92       	push	r7
   17554:	9f 92       	push	r9
   17556:	af 92       	push	r10
   17558:	bf 92       	push	r11
   1755a:	cf 92       	push	r12
   1755c:	df 92       	push	r13
   1755e:	ef 92       	push	r14
   17560:	ff 92       	push	r15
   17562:	0f 93       	push	r16
   17564:	1f 93       	push	r17
   17566:	cf 93       	push	r28
   17568:	df 93       	push	r29


  
  __asm__ __volatile__("sei" ::); 
   1756a:	78 94       	sei
 
 
writetask = 0; 
   1756c:	10 92 c8 0b 	sts	0x0BC8, r1
 currentindex = 0; 
   17570:	10 92 bf 0b 	sts	0x0BBF, r1
   17574:	10 92 be 0b 	sts	0x0BBE, r1
   17578:	4f 93       	push	r20
   1757a:	5f 93       	push	r21
   1757c:	ec e0       	ldi	r30, 0x0C	; 12
   1757e:	fa ee       	ldi	r31, 0xEA	; 234
   17580:	09 95       	icall
   17582:	64 2e       	mov	r6, r20
   17584:	75 2e       	mov	r7, r21
   17586:	5f 91       	pop	r21
   17588:	4f 91       	pop	r20
   1758a:	4f 93       	push	r20
   1758c:	5f 93       	push	r21
   1758e:	ec e1       	ldi	r30, 0x1C	; 28
   17590:	fa ee       	ldi	r31, 0xEA	; 234
   17592:	09 95       	icall
   17594:	84 2f       	mov	r24, r20
   17596:	95 2f       	mov	r25, r21
   17598:	5f 91       	pop	r21
   1759a:	4f 91       	pop	r20
   1759c:	4f 93       	push	r20
   1759e:	5f 93       	push	r21
   175a0:	e0 e2       	ldi	r30, 0x20	; 32
   175a2:	fa ee       	ldi	r31, 0xEA	; 234
   175a4:	09 95       	icall
   175a6:	e4 2e       	mov	r14, r20
   175a8:	f5 2e       	mov	r15, r21
   175aa:	5f 91       	pop	r21
   175ac:	4f 91       	pop	r20
   175ae:	4f 93       	push	r20
   175b0:	5f 93       	push	r21
   175b2:	e4 e2       	ldi	r30, 0x24	; 36
   175b4:	fa ee       	ldi	r31, 0xEA	; 234
   175b6:	09 95       	icall
   175b8:	c4 2e       	mov	r12, r20
   175ba:	d5 2e       	mov	r13, r21
   175bc:	5f 91       	pop	r21
   175be:	4f 91       	pop	r20
   175c0:	4f 93       	push	r20
   175c2:	5f 93       	push	r21
   175c4:	e8 e2       	ldi	r30, 0x28	; 40
   175c6:	fa ee       	ldi	r31, 0xEA	; 234
   175c8:	09 95       	icall
   175ca:	c4 2f       	mov	r28, r20
   175cc:	d5 2f       	mov	r29, r21
   175ce:	5f 91       	pop	r21
   175d0:	4f 91       	pop	r20
   175d2:	4f 93       	push	r20
   175d4:	5f 93       	push	r21
   175d6:	ec e0       	ldi	r30, 0x0C	; 12
   175d8:	fa ee       	ldi	r31, 0xEA	; 234
   175da:	09 95       	icall
   175dc:	04 2f       	mov	r16, r20
   175de:	15 2f       	mov	r17, r21
   175e0:	5f 91       	pop	r21
   175e2:	4f 91       	pop	r20
   175e4:	4f 93       	push	r20
   175e6:	5f 93       	push	r21
   175e8:	ec e1       	ldi	r30, 0x1C	; 28
   175ea:	fa ee       	ldi	r31, 0xEA	; 234
   175ec:	09 95       	icall
   175ee:	a4 2e       	mov	r10, r20
   175f0:	b5 2e       	mov	r11, r21
   175f2:	5f 91       	pop	r21
   175f4:	4f 91       	pop	r20
   175f6:	9f b6       	in	r9, 0x3f	; 63
   175f8:	f8 94       	cli
   175fa:	88 81       	ld	r24, Y
   175fc:	88 23       	and	r24, r24
   175fe:	09 f0       	breq	.+2      	; 0x17602
   17600:	91 c1       	rjmp	.+802    	; 0x17924
   17602:	81 e0       	ldi	r24, 0x01	; 1
   17604:	88 83       	st	Y, r24
   17606:	8a 2d       	mov	r24, r10
   17608:	99 27       	eor	r25, r25
   1760a:	8a 83       	std	Y+2, r24	; 0x02
   1760c:	89 2d       	mov	r24, r9
   1760e:	99 27       	eor	r25, r25
   17610:	8f bf       	out	0x3f, r24	; 63
void mystrcpy(char *dest, const char *src)
{
	int i;
	i = 0;
	while (src[i]!='\0')
   17612:	80 91 2c 0b 	lds	r24, 0x0B2C
   17616:	88 23       	and	r24, r24
   17618:	09 f4       	brne	.+2      	; 0x1761c
   1761a:	81 c1       	rjmp	.+770    	; 0x1791e
   1761c:	20 e0       	ldi	r18, 0x00	; 0
   1761e:	30 e0       	ldi	r19, 0x00	; 0
   17620:	e0 e0       	ldi	r30, 0x00	; 0
   17622:	f0 e0       	ldi	r31, 0x00	; 0
   17624:	ad e2       	ldi	r26, 0x2D	; 45
   17626:	bb e0       	ldi	r27, 0x0B	; 11
	{ dest[i] = src[i];
   17628:	ee 0d       	add	r30, r14
   1762a:	ff 1d       	adc	r31, r15
   1762c:	80 83       	st	Z, r24
	i++;
   1762e:	f9 01       	movw	r30, r18
   17630:	31 96       	adiw	r30, 0x01	; 1
   17632:	9f 01       	movw	r18, r30
   17634:	8d 91       	ld	r24, X+
   17636:	88 23       	and	r24, r24
   17638:	b9 f7       	brne	.-18     	; 0x17628
   1763a:	cf 01       	movw	r24, r30
	}
	dest[i] = '\0';
   1763c:	e8 0e       	add	r14, r24
   1763e:	f9 1e       	adc	r15, r25
   17640:	f7 01       	movw	r30, r14
   17642:	10 82       	st	Z, r1
   17644:	80 91 36 0b 	lds	r24, 0x0B36
   17648:	88 23       	and	r24, r24
   1764a:	09 f4       	brne	.+2      	; 0x1764e
   1764c:	65 c1       	rjmp	.+714    	; 0x17918
   1764e:	20 e0       	ldi	r18, 0x00	; 0
   17650:	30 e0       	ldi	r19, 0x00	; 0
   17652:	e0 e0       	ldi	r30, 0x00	; 0
   17654:	f0 e0       	ldi	r31, 0x00	; 0
   17656:	a7 e3       	ldi	r26, 0x37	; 55
   17658:	bb e0       	ldi	r27, 0x0B	; 11
   1765a:	ec 0d       	add	r30, r12
   1765c:	fd 1d       	adc	r31, r13
   1765e:	80 83       	st	Z, r24
   17660:	f9 01       	movw	r30, r18
   17662:	31 96       	adiw	r30, 0x01	; 1
   17664:	9f 01       	movw	r18, r30
   17666:	8d 91       	ld	r24, X+
   17668:	88 23       	and	r24, r24
   1766a:	b9 f7       	brne	.-18     	; 0x1765a
   1766c:	cf 01       	movw	r24, r30
   1766e:	c8 0e       	add	r12, r24
   17670:	d9 1e       	adc	r13, r25
   17672:	d6 01       	movw	r26, r12
   17674:	1c 92       	st	X, r1
   17676:	ec e2       	ldi	r30, 0x2C	; 44
   17678:	fa ee       	ldi	r31, 0xEA	; 234
   1767a:	09 95       	icall
   1767c:	4f 93       	push	r20
   1767e:	5f 93       	push	r21
   17680:	ec e0       	ldi	r30, 0x0C	; 12
   17682:	fa ee       	ldi	r31, 0xEA	; 234
   17684:	09 95       	icall
   17686:	a4 2f       	mov	r26, r20
   17688:	b5 2f       	mov	r27, r21
   1768a:	5f 91       	pop	r21
   1768c:	4f 91       	pop	r20
   1768e:	0f b7       	in	r16, 0x3f	; 63
   17690:	f8 94       	cli
   17692:	11 27       	eor	r17, r17
   17694:	ed 91       	ld	r30, X+
   17696:	fc 91       	ld	r31, X
   17698:	11 97       	sbiw	r26, 0x01	; 1
   1769a:	86 e0       	ldi	r24, 0x06	; 6
   1769c:	82 83       	std	Z+2, r24	; 0x02
   1769e:	ed 91       	ld	r30, X+
   176a0:	fc 91       	ld	r31, X
   176a2:	11 97       	sbiw	r26, 0x01	; 1
   176a4:	87 e0       	ldi	r24, 0x07	; 7
   176a6:	83 8f       	std	Z+27, r24	; 0x1b
   176a8:	ed 91       	ld	r30, X+
   176aa:	fc 91       	ld	r31, X
   176ac:	81 e0       	ldi	r24, 0x01	; 1
   176ae:	84 8f       	std	Z+28, r24	; 0x1c
   176b0:	e0 e0       	ldi	r30, 0x00	; 0
   176b2:	fa ee       	ldi	r31, 0xEA	; 234
   176b4:	09 95       	icall
   176b6:	0f bf       	out	0x3f, r16	; 63
   176b8:	4f 93       	push	r20
   176ba:	5f 93       	push	r21
   176bc:	4c 2f       	mov	r20, r28
   176be:	5d 2f       	mov	r21, r29
   176c0:	e8 e1       	ldi	r30, 0x18	; 24
   176c2:	fa ee       	ldi	r31, 0xEA	; 234
   176c4:	09 95       	icall
   176c6:	5f 91       	pop	r21
   176c8:	4f 91       	pop	r20
   176ca:	d3 01       	movw	r26, r6
   176cc:	ed 91       	ld	r30, X+
   176ce:	fc 91       	ld	r31, X
   176d0:	87 8d       	ldd	r24, Z+31	; 0x1f
   176d2:	90 a1       	ldd	r25, Z+32	; 0x20
 fileptr = mfopen("/logtrace", "w");
   176d4:	90 93 3d 0b 	sts	0x0B3D, r25
   176d8:	80 93 3c 0b 	sts	0x0B3C, r24

void enableTracing()
{    
   void (*getaddrfp)(void) = (void (*)(void))ENABLE_TRACING_SYSCALL;
   getaddrfp();
   176dc:	e4 ee       	ldi	r30, 0xE4	; 228
   176de:	fa ee       	ldi	r31, 0xEA	; 234
   176e0:	09 95       	icall
   176e2:	4f 93       	push	r20
   176e4:	5f 93       	push	r21
   176e6:	e0 ee       	ldi	r30, 0xE0	; 224
   176e8:	fa ee       	ldi	r31, 0xEA	; 234
   176ea:	09 95       	icall
   176ec:	e4 2f       	mov	r30, r20
   176ee:	f5 2f       	mov	r31, r21
   176f0:	5f 91       	pop	r21
   176f2:	4f 91       	pop	r20
 enableTracing();  

 blockaddr = (tracingblock *)getEventBlockAddress();
   176f4:	f0 93 39 0b 	sts	0x0B39, r31
   176f8:	e0 93 38 0b 	sts	0x0B38, r30
 eventid = &(blockaddr->internaleventid); 
   176fc:	f0 93 3b 0b 	sts	0x0B3B, r31
   17700:	e0 93 3a 0b 	sts	0x0B3A, r30
 threadid = &(blockaddr->threadid); 
   17704:	31 96       	adiw	r30, 0x01	; 1
   17706:	f0 93 c1 0b 	sts	0x0BC1, r31
   1770a:	e0 93 c0 0b 	sts	0x0BC0, r30
   1770e:	31 97       	sbiw	r30, 0x01	; 1
 blockaddr->externaladdtracefp = tracingcontrol; 
   17710:	81 ef       	ldi	r24, 0xF1	; 241
   17712:	99 eb       	ldi	r25, 0xB9	; 185
   17714:	93 83       	std	Z+3, r25	; 0x03
   17716:	82 83       	std	Z+2, r24	; 0x02
 blockaddr->externalapptracefp = tracingcontroluser; 
   17718:	85 e6       	ldi	r24, 0x65	; 101
   1771a:	99 eb       	ldi	r25, 0xB9	; 185
   1771c:	95 83       	std	Z+5, r25	; 0x05
   1771e:	84 83       	std	Z+4, r24	; 0x04
   17720:	4f 93       	push	r20
   17722:	5f 93       	push	r21
   17724:	ec e0       	ldi	r30, 0x0C	; 12
   17726:	fa ee       	ldi	r31, 0xEA	; 234
   17728:	09 95       	icall
   1772a:	e4 2f       	mov	r30, r20
   1772c:	f5 2f       	mov	r31, r21
   1772e:	5f 91       	pop	r21
   17730:	4f 91       	pop	r20
 
 thiscurrentthread = getCurrentThread(); 
   17732:	f0 93 c5 0b 	sts	0x0BC5, r31
   17736:	e0 93 c4 0b 	sts	0x0BC4, r30
 thisthread = *thiscurrentthread; 
   1773a:	80 81       	ld	r24, Z
   1773c:	91 81       	ldd	r25, Z+1	; 0x01
   1773e:	90 93 c7 0b 	sts	0x0BC7, r25
   17742:	80 93 c6 0b 	sts	0x0BC6, r24
   17746:	4f 93       	push	r20
   17748:	5f 93       	push	r21
   1774a:	e8 e0       	ldi	r30, 0x08	; 8
   1774c:	fb ee       	ldi	r31, 0xEB	; 235
   1774e:	09 95       	icall
   17750:	84 2f       	mov	r24, r20
   17752:	95 2f       	mov	r25, r21
   17754:	5f 91       	pop	r21
   17756:	4f 91       	pop	r20
 
 //setTimerFunction(500, 0, traceMemory);
 
 
 oldstackptraddr = (uint16_t**)getKernelStackPtr(); 
   17758:	90 93 fa 0b 	sts	0x0BFA, r25
   1775c:	80 93 f9 0b 	sts	0x0BF9, r24
 
 //setThreadTerminateHandler(cleanUpTraceFunction); 
 
 
 
//CLEANDEFSTART$$$$$
tracepatch0[0] = 0xcf;
   17760:	8f ec       	ldi	r24, 0xCF	; 207
   17762:	80 93 e9 0b 	sts	0x0BE9, r24

tracepatch0[1] = 0x93;
   17766:	93 e9       	ldi	r25, 0x93	; 147
   17768:	90 93 ea 0b 	sts	0x0BEA, r25

tracepatch0[2] = 0xdf;
   1776c:	8f ed       	ldi	r24, 0xDF	; 223
   1776e:	80 93 eb 0b 	sts	0x0BEB, r24

tracepatch0[3] = 0x93;
   17772:	90 93 ec 0b 	sts	0x0BEC, r25

tracepatch0[4] = 0xcd;
   17776:	8d ec       	ldi	r24, 0xCD	; 205
   17778:	80 93 ed 0b 	sts	0x0BED, r24

tracepatch0[5] = 0xb7;
   1777c:	97 eb       	ldi	r25, 0xB7	; 183
   1777e:	90 93 ee 0b 	sts	0x0BEE, r25

tracepatch0[6] = 0xde;
   17782:	8e ed       	ldi	r24, 0xDE	; 222
   17784:	80 93 ef 0b 	sts	0x0BEF, r24

tracepatch0[7] = 0xb7;
   17788:	90 93 f0 0b 	sts	0x0BF0, r25

tracepatch0[8] = 0x22;
   1778c:	82 e2       	ldi	r24, 0x22	; 34
   1778e:	80 93 f1 0b 	sts	0x0BF1, r24

tracepatch0[9] = 0x97;
   17792:	87 e9       	ldi	r24, 0x97	; 151
   17794:	80 93 f2 0b 	sts	0x0BF2, r24

tracepatch0[10] = 0x0f;
   17798:	8f e0       	ldi	r24, 0x0F	; 15
   1779a:	80 93 f3 0b 	sts	0x0BF3, r24

tracepatch0[11] = 0xb6;
   1779e:	86 eb       	ldi	r24, 0xB6	; 182
   177a0:	80 93 f4 0b 	sts	0x0BF4, r24

tracepatch0[12] = 0xf8;
   177a4:	88 ef       	ldi	r24, 0xF8	; 248
   177a6:	80 93 f5 0b 	sts	0x0BF5, r24

tracepatch0[13] = 0x94;
   177aa:	84 e9       	ldi	r24, 0x94	; 148
   177ac:	80 93 f6 0b 	sts	0x0BF6, r24

tracepatch0[ 14 ] = 0xff;
   177b0:	8f ef       	ldi	r24, 0xFF	; 255
   177b2:	80 93 f7 0b 	sts	0x0BF7, r24

tracepatch0[ 15 ] = 0xff;
   177b6:	80 93 f8 0b 	sts	0x0BF8, r24

//CLEANDEFEND$$$$$
 
//ADDTRACESTART$$$$$


{
uint32_t tracepointlocation = ((uint32_t)APPTRACEPOINT0*2);

pagenum = tracepointlocation/2/128;
   177ba:	28 e1       	ldi	r18, 0x18	; 24
   177bc:	31 e0       	ldi	r19, 0x01	; 1
   177be:	30 93 fc 0b 	sts	0x0BFC, r19
   177c2:	20 93 fb 0b 	sts	0x0BFB, r18

pageoffset = tracepointlocation%256;
   177c6:	88 e0       	ldi	r24, 0x08	; 8
   177c8:	80 93 fd 0b 	sts	0x0BFD, r24
   return;
}



void disableTracing()
{     
   void (*getaddrfp)(void) = (void (*)(void))DISABLE_TRACING_SYSCALL;
   getaddrfp();
   return;
}





void addUserTracePoint(uint16_t pagenum, uint16_t pageoffset)
{
   void (*fp)(void) = (void (*)(void))SYSCALL_USER_ADD_TRACE_POINT; 
   globalpagenum = pagenum;
   177cc:	30 93 ff 0b 	sts	0x0BFF, r19
   177d0:	20 93 fe 0b 	sts	0x0BFE, r18
   globalpageoffset = pageoffset; 
   177d4:	88 e0       	ldi	r24, 0x08	; 8
   177d6:	90 e0       	ldi	r25, 0x00	; 0
   177d8:	90 93 01 0c 	sts	0x0C01, r25
   177dc:	80 93 00 0c 	sts	0x0C00, r24
   
   asm volatile("push r20" "\n\t"
   177e0:	4f 93       	push	r20
   177e2:	5f 93       	push	r21
   177e4:	6f 93       	push	r22
   177e6:	7f 93       	push	r23
                "push r21" "\n\t"
								"push r22" "\n\t"
								"push r23" "\n\t"
                ::);
   
   asm volatile(" mov r20, %A0" "\n\t"
   177e8:	80 91 fe 0b 	lds	r24, 0x0BFE
   177ec:	90 91 ff 0b 	lds	r25, 0x0BFF
   177f0:	48 2f       	mov	r20, r24
   177f2:	59 2f       	mov	r21, r25
	             	" mov r21, %B0" "\n\t"
				 :
				 :"r" (globalpagenum)
                );


   asm volatile(" mov r22, %A0" "\n\t"
   177f4:	80 91 00 0c 	lds	r24, 0x0C00
   177f8:	90 91 01 0c 	lds	r25, 0x0C01
   177fc:	68 2f       	mov	r22, r24
   177fe:	79 2f       	mov	r23, r25
	             	" mov r23, %B0" "\n\t"
				 :
				 :"r" (globalpageoffset)
                );

  fp(); 
   17800:	e8 ef       	ldi	r30, 0xF8	; 248
   17802:	fa ee       	ldi	r31, 0xEA	; 234
   17804:	09 95       	icall

  asm volatile("pop r23" "\n\t"
   17806:	7f 91       	pop	r23
   17808:	6f 91       	pop	r22
	           "pop r22" "\n\t"
	              ::);

  asm volatile("pop r21" "\n\t"
   1780a:	5f 91       	pop	r21
   1780c:	4f 91       	pop	r20
   1780e:	c1 e0       	ldi	r28, 0x01	; 1
   17810:	d0 e0       	ldi	r29, 0x00	; 0
   17812:	4f 93       	push	r20
   17814:	5f 93       	push	r21
   17816:	ec e0       	ldi	r30, 0x0C	; 12
   17818:	fa ee       	ldi	r31, 0xEA	; 234
   1781a:	09 95       	icall
   1781c:	e4 2f       	mov	r30, r20
   1781e:	f5 2f       	mov	r31, r21
   17820:	5f 91       	pop	r21
   17822:	4f 91       	pop	r20
   17824:	01 90       	ld	r0, Z+
   17826:	f0 81       	ld	r31, Z
   17828:	e0 2d       	mov	r30, r0
   1782a:	85 e0       	ldi	r24, 0x05	; 5
   1782c:	82 83       	std	Z+2, r24	; 0x02
   1782e:	e0 e0       	ldi	r30, 0x00	; 0
   17830:	fa ee       	ldi	r31, 0xEA	; 234
   17832:	09 95       	icall

addUserTracePoint( pagenum,  pageoffset);

}


//ADDTRACEEND$$$$$

 while (1)
 {
 	hibernateThread();
 	if (writetask == 1)
   17834:	80 91 c8 0b 	lds	r24, 0x0BC8
   17838:	81 30       	cpi	r24, 0x01	; 1
   1783a:	59 f7       	brne	.-42     	; 0x17812
   1783c:	df b6       	in	r13, 0x3f	; 63
   1783e:	f8 94       	cli
   17840:	40 e2       	ldi	r20, 0x20	; 32
   17842:	50 e0       	ldi	r21, 0x00	; 0
   17844:	69 ec       	ldi	r22, 0xC9	; 201
   17846:	7b e0       	ldi	r23, 0x0B	; 11
   17848:	80 91 3c 0b 	lds	r24, 0x0B3C
   1784c:	90 91 3d 0b 	lds	r25, 0x0B3D
   17850:	0e 94 00 ba 	call	0x17400
   17854:	e0 90 3c 0b 	lds	r14, 0x0B3C
   17858:	f0 90 3d 0b 	lds	r15, 0x0B3D
   1785c:	4f 93       	push	r20
   1785e:	5f 93       	push	r21
   17860:	ec e0       	ldi	r30, 0x0C	; 12
   17862:	fa ee       	ldi	r31, 0xEA	; 234
   17864:	09 95       	icall
   17866:	04 2f       	mov	r16, r20
   17868:	15 2f       	mov	r17, r21
   1786a:	5f 91       	pop	r21
   1786c:	4f 91       	pop	r20
   1786e:	4f 93       	push	r20
   17870:	5f 93       	push	r21
   17872:	ec e1       	ldi	r30, 0x1C	; 28
   17874:	fa ee       	ldi	r31, 0xEA	; 234
   17876:	09 95       	icall
   17878:	84 2f       	mov	r24, r20
   1787a:	95 2f       	mov	r25, r21
   1787c:	5f 91       	pop	r21
   1787e:	4f 91       	pop	r20

   writeFileSysCall();

   Barrier_block(7, 4);
   Mutex_unlock(mfile);

   return;
}


void mfwrite_withoutlength(MYFILE *fp, void *buffer)
{


   uint8_t length;

   length = (uint8_t)String_length((char*)buffer);

   mfwrite(fp, buffer, length);

   return;
}






void mfseek(MYFILE *fp, int offset, int position)
{
   uint8_t currentthreadindex;
   thread** current_thread;

   current_thread = getCurrentThread();
   currentthreadindex = getCurrentThreadIndex();

   (*current_thread)->filedata.fileseekstate.fileptr = (uint8_t*)fp;
   17880:	d8 01       	movw	r26, r16
   17882:	ed 91       	ld	r30, X+
   17884:	fc 91       	ld	r31, X
   17886:	11 97       	sbiw	r26, 0x01	; 1
   17888:	f0 a2       	std	Z+32, r15	; 0x20
   1788a:	e7 8e       	std	Z+31, r14	; 0x1f
   (*current_thread)->filedata.fileseekstate.offset = offset;
   1788c:	ed 91       	ld	r30, X+
   1788e:	fc 91       	ld	r31, X
   17890:	11 97       	sbiw	r26, 0x01	; 1
   17892:	80 e2       	ldi	r24, 0x20	; 32
   17894:	90 e0       	ldi	r25, 0x00	; 0
   17896:	92 a3       	std	Z+34, r25	; 0x22
   17898:	81 a3       	std	Z+33, r24	; 0x21
   (*current_thread)->filedata.fileseekstate.position = position;
   1789a:	ed 91       	ld	r30, X+
   1789c:	fc 91       	ld	r31, X
   1789e:	d4 a3       	std	Z+36, r29	; 0x24
   178a0:	c3 a3       	std	Z+35, r28	; 0x23
   178a2:	ec e3       	ldi	r30, 0x3C	; 60
   178a4:	fa ee       	ldi	r31, 0xEA	; 234
   178a6:	09 95       	icall
   178a8:	40 e6       	ldi	r20, 0x60	; 96
   178aa:	50 e0       	ldi	r21, 0x00	; 0
   178ac:	6e e5       	ldi	r22, 0x5E	; 94
   178ae:	7b e0       	ldi	r23, 0x0B	; 11
   178b0:	80 91 3c 0b 	lds	r24, 0x0B3C
   178b4:	90 91 3d 0b 	lds	r25, 0x0B3D
   178b8:	0e 94 00 ba 	call	0x17400
   178bc:	e0 90 3c 0b 	lds	r14, 0x0B3C
   178c0:	f0 90 3d 0b 	lds	r15, 0x0B3D
   178c4:	4f 93       	push	r20
   178c6:	5f 93       	push	r21
   178c8:	ec e0       	ldi	r30, 0x0C	; 12
   178ca:	fa ee       	ldi	r31, 0xEA	; 234
   178cc:	09 95       	icall
   178ce:	04 2f       	mov	r16, r20
   178d0:	15 2f       	mov	r17, r21
   178d2:	5f 91       	pop	r21
   178d4:	4f 91       	pop	r20
   178d6:	4f 93       	push	r20
   178d8:	5f 93       	push	r21
   178da:	ec e1       	ldi	r30, 0x1C	; 28
   178dc:	fa ee       	ldi	r31, 0xEA	; 234
   178de:	09 95       	icall
   178e0:	84 2f       	mov	r24, r20
   178e2:	95 2f       	mov	r25, r21
   178e4:	5f 91       	pop	r21
   178e6:	4f 91       	pop	r20
   178e8:	d8 01       	movw	r26, r16
   178ea:	ed 91       	ld	r30, X+
   178ec:	fc 91       	ld	r31, X
   178ee:	11 97       	sbiw	r26, 0x01	; 1
   178f0:	f0 a2       	std	Z+32, r15	; 0x20
   178f2:	e7 8e       	std	Z+31, r14	; 0x1f
   178f4:	ed 91       	ld	r30, X+
   178f6:	fc 91       	ld	r31, X
   178f8:	11 97       	sbiw	r26, 0x01	; 1
   178fa:	80 e6       	ldi	r24, 0x60	; 96
   178fc:	90 e0       	ldi	r25, 0x00	; 0
   178fe:	92 a3       	std	Z+34, r25	; 0x22
   17900:	81 a3       	std	Z+33, r24	; 0x21
   17902:	ed 91       	ld	r30, X+
   17904:	fc 91       	ld	r31, X
   17906:	d4 a3       	std	Z+36, r29	; 0x24
   17908:	c3 a3       	std	Z+35, r28	; 0x23
   1790a:	ec e3       	ldi	r30, 0x3C	; 60
   1790c:	fa ee       	ldi	r31, 0xEA	; 234
   1790e:	09 95       	icall
   17910:	df be       	out	0x3f, r13	; 63
   { writeFileTask();
     writetask = 0; 
   17912:	10 92 c8 0b 	sts	0x0BC8, r1
   17916:	7d cf       	rjmp	.-262    	; 0x17812
   17918:	80 e0       	ldi	r24, 0x00	; 0
   1791a:	90 e0       	ldi	r25, 0x00	; 0
   1791c:	a8 ce       	rjmp	.-688    	; 0x1766e
   1791e:	80 e0       	ldi	r24, 0x00	; 0
   17920:	90 e0       	ldi	r25, 0x00	; 0
   17922:	8c ce       	rjmp	.-744    	; 0x1763c
   17924:	d8 01       	movw	r26, r16
   17926:	ed 91       	ld	r30, X+
   17928:	fc 91       	ld	r31, X
   1792a:	11 97       	sbiw	r26, 0x01	; 1
   1792c:	83 e0       	ldi	r24, 0x03	; 3
   1792e:	82 83       	std	Z+2, r24	; 0x02
   17930:	ed 91       	ld	r30, X+
   17932:	fc 91       	ld	r31, X
   17934:	d4 8f       	std	Z+28, r29	; 0x1c
   17936:	c3 8f       	std	Z+27, r28	; 0x1b
   17938:	89 81       	ldd	r24, Y+1	; 0x01
   1793a:	8f 5f       	subi	r24, 0xFF	; 255
   1793c:	89 83       	std	Y+1, r24	; 0x01
   1793e:	e0 e0       	ldi	r30, 0x00	; 0
   17940:	fa ee       	ldi	r31, 0xEA	; 234
   17942:	09 95       	icall
   17944:	89 81       	ldd	r24, Y+1	; 0x01
   17946:	81 50       	subi	r24, 0x01	; 1
   17948:	89 83       	std	Y+1, r24	; 0x01
   1794a:	5b ce       	rjmp	.-842    	; 0x17602
