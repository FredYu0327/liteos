
App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  0000c800  0000c800  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800a8c  00800a8c  000001b6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d37  00000000  00000000  000001f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000200  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000182  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000012ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000037f  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  0000165b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  00001673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000c800 <__vectors>:
    c800:	0c 94 46 64 	jmp	0xc88c	; 0xc88c <__ctors_end>
    c804:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c808:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c80c:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c810:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c814:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c818:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c81c:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c820:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c824:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c828:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c82c:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c830:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c834:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c838:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c83c:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c840:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c844:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c848:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c84c:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c850:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c854:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c858:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c85c:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c860:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c864:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c868:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c86c:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c870:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c874:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c878:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c87c:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c880:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c884:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>
    c888:	0c 94 65 64 	jmp	0xc8ca	; 0xc8ca <__bad_interrupt>

0000c88c <__ctors_end>:
    c88c:	11 24       	eor	r1, r1
    c88e:	1f be       	out	0x3f, r1	; 63
    c890:	cc e1       	ldi	r28, 0x1C	; 28
    c892:	dc e0       	ldi	r29, 0x0C	; 12
    c894:	de bf       	out	0x3e, r29	; 62
    c896:	cd bf       	out	0x3d, r28	; 61

0000c898 <__do_copy_data>:
    c898:	1a e0       	ldi	r17, 0x0A	; 10
    c89a:	ac e8       	ldi	r26, 0x8C	; 140
    c89c:	ba e0       	ldi	r27, 0x0A	; 10
    c89e:	e2 e4       	ldi	r30, 0x42	; 66
    c8a0:	f9 ec       	ldi	r31, 0xC9	; 201
    c8a2:	00 e0       	ldi	r16, 0x00	; 0
    c8a4:	0b bf       	out	0x3b, r16	; 59
    c8a6:	02 c0       	rjmp	.+4      	; 0xc8ac <__do_copy_data+0x14>
    c8a8:	07 90       	elpm	r0, Z+
    c8aa:	0d 92       	st	X+, r0
    c8ac:	ac 38       	cpi	r26, 0x8C	; 140
    c8ae:	b1 07       	cpc	r27, r17
    c8b0:	d9 f7       	brne	.-10     	; 0xc8a8 <__do_copy_data+0x10>

0000c8b2 <__do_clear_bss>:
    c8b2:	1a e0       	ldi	r17, 0x0A	; 10
    c8b4:	ac e8       	ldi	r26, 0x8C	; 140
    c8b6:	ba e0       	ldi	r27, 0x0A	; 10
    c8b8:	01 c0       	rjmp	.+2      	; 0xc8bc <.do_clear_bss_start>

0000c8ba <.do_clear_bss_loop>:
    c8ba:	1d 92       	st	X+, r1

0000c8bc <.do_clear_bss_start>:
    c8bc:	ae 38       	cpi	r26, 0x8E	; 142
    c8be:	b1 07       	cpc	r27, r17
    c8c0:	e1 f7       	brne	.-8      	; 0xc8ba <.do_clear_bss_loop>
    c8c2:	0e 94 67 64 	call	0xc8ce	; 0xc8ce <main>
    c8c6:	0c 94 9f 64 	jmp	0xc93e	; 0xc93e <_exit>

0000c8ca <__bad_interrupt>:
    c8ca:	0c 94 00 64 	jmp	0xc800	; 0xc800 <__vectors>

0000c8ce <main>:
#include "system.h"



int main()
{
    c8ce:	bf 92       	push	r11
    c8d0:	cf 92       	push	r12
    c8d2:	df 92       	push	r13
    c8d4:	ef 92       	push	r14
    c8d6:	ff 92       	push	r15
    c8d8:	0f 93       	push	r16
    c8da:	1f 93       	push	r17
    c8dc:	cf 93       	push	r28
    c8de:	df 93       	push	r29
 uint8_t index;  
 __asm__ __volatile__("sei" ::); 
    c8e0:	78 94       	sei
#include "liteoscommon.h"

void greenToggle()
{
 void (*greenfp)() = (void (*)(void))GREEN_LED_TOGGLE_FUNCTION; 
 greenfp();                              
    c8e2:	24 e0       	ldi	r18, 0x04	; 4
    c8e4:	c2 2e       	mov	r12, r18
    c8e6:	2a ee       	ldi	r18, 0xEA	; 234
    c8e8:	d2 2e       	mov	r13, r18
   thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    c8ea:	9c e0       	ldi	r25, 0x0C	; 12
    c8ec:	e9 2e       	mov	r14, r25
    c8ee:	9a ee       	ldi	r25, 0xEA	; 234
    c8f0:	f9 2e       	mov	r15, r25
 */
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 4;
    c8f2:	84 e0       	ldi	r24, 0x04	; 4
    c8f4:	b8 2e       	mov	r11, r24
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
    c8f6:	08 ee       	ldi	r16, 0xE8	; 232
    c8f8:	13 e0       	ldi	r17, 0x03	; 3


void yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    c8fa:	c0 e0       	ldi	r28, 0x00	; 0
    c8fc:	da ee       	ldi	r29, 0xEA	; 234
    c8fe:	f6 01       	movw	r30, r12
    c900:	09 95       	icall

thread **getCurrentThread()
{
   thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
    c902:	4f 93       	push	r20
    c904:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    c906:	f7 01       	movw	r30, r14
    c908:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    c90a:	e4 2f       	mov	r30, r20
    c90c:	f5 2f       	mov	r31, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
    c90e:	5f 91       	pop	r21
    c910:	4f 91       	pop	r20
 */
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 4;
    c912:	a0 81       	ld	r26, Z
    c914:	b1 81       	ldd	r27, Z+1	; 0x01
    c916:	12 96       	adiw	r26, 0x02	; 2
    c918:	bc 92       	st	X, r11
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
    c91a:	01 90       	ld	r0, Z+
    c91c:	f0 81       	ld	r31, Z
    c91e:	e0 2d       	mov	r30, r0
    c920:	14 8f       	std	Z+28, r17	; 0x1c
    c922:	03 8f       	std	Z+27, r16	; 0x1b


void yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    c924:	fe 01       	movw	r30, r28
    c926:	09 95       	icall
    c928:	ea cf       	rjmp	.-44     	; 0xc8fe <main+0x30>

0000c92a <wakeupMe.3564>:

//wakeup the current thread once an incoming packet arrives

void wakeupMe()
{
  mythread->state = STATE_ACTIVE;
    c92a:	e0 91 8c 0a 	lds	r30, 0x0A8C
    c92e:	f0 91 8d 0a 	lds	r31, 0x0A8D
    c932:	82 e0       	ldi	r24, 0x02	; 2
    c934:	82 83       	std	Z+2, r24	; 0x02


void syscall_postThreadTask()
{
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK; 
 postthreadfp();                              
    c936:	e8 e6       	ldi	r30, 0x68	; 104
    c938:	fa ee       	ldi	r31, 0xEA	; 234
    c93a:	09 95       	icall
  syscall_postThreadTask();
}
    c93c:	08 95       	ret

0000c93e <_exit>:
    c93e:	f8 94       	cli

0000c940 <__stop_program>:
    c940:	ff cf       	rjmp	.-2      	; 0xc940 <__stop_program>
