#! /usr/bin/env python

import sys
import re
import os
import string
from sets import *
import shutil
import fileinput



pageNum  = 0
ramStart = 0
targetFile = ""
ramSize  = 0
staticdatasize = 0


def getParameter():
    """This routine gets the memory settings from the makefile and return it"""
    dataret = textret = stackret = -1
    for line in fileinput.input("Makefile"):
        data = re.search(r'\.data=([a-zA-Z0-9]*)', line)
        if data!=None:
            #print "!!!"+ repr(data.group(1))
            dataret = long(data.group(1), 16)
            dataret = dataret - 0x800000
            print repr(dataret)
            data = None
        text = re.search(r'\.text=([a-zA-Z0-9]*)', line)
        if text!=None:
            textret = long(text.group(1), 16)
            print repr(textret)
            text = None
        stack= re.search(r'stack=([a-zA-Z0-9]*)', line)
        if stack!=None:
            stackret = long(stack.group(1), 16)
            print repr(stackret)
            stack = None
    return [dataret, stackret, textret]


def processHexFile():
    """This routine handles the hex file and translates it into the lhex file"""

    #Analyze the prefix
    global pageNum, ramStart, ramSize, staticdatasize
    trailing = True
    tryoutFFFF = True
    Num1 = pageNum
    Num2 = int(pageNum)*128+70
    Num3 = int(ramStart)/2
    Num4 = (int(ramStart)+int(ramSize))/2
    Num5 = int(staticdatasize)

    prefix = str(Num1) + hex(Num2)[2:]+ hex(Num3)[2:] + hex(Num4)[2:] + '%(#)03d'%{"#":Num5}
    prefix = prefix.upper()
    #print prefix
    
    for line in fileinput.input("./App.hex", inplace = 1):

        if (trailing == True):
            trailing = False
            sys.stdout.write(prefix)
        line = line.rstrip('\n')
        length = int(line[1:3],16)
        code = line[9:9+length*2]
        valid = int(line[7:9])

        if tryoutFFFF == True:
            test = re.search('DEBFCDBF', code)
            if test!=None:
                code = re.sub('[0-9A-F]{8}DEBFCDBF','FFFFFFFFFFFFFFFF', code)
                tryoutFFFF = False
                
        if (valid==0):
                sys.stdout.write(code)
                #print code
                
    return

    
def setParameter(ram_start, ram_end, rom_start):
    """This routine sets the makefile memory settings based on user input"""
    ram_start_string = hex(long(ram_start+0x800000))
    ram_start_string = ram_start_string.rstrip('L')
    ram_end_string = hex(int(ram_end))
    rom_start_string = hex(int(rom_start))
    print "all "+ ram_start_string + " "+ ram_end_string+ " "+ rom_start_string
    for line in fileinput.input("./Makefile", inplace = 1):
        line = line.rstrip('\n')
        data = re.search(r'\.data=([a-zA-Z0-9]*)', line)
        if data!=None:
            line = re.sub('0x[0-9a-zA-Z]+', ram_start_string, line)
            data = None
        text = re.search(r'\.text=([a-zA-Z0-9]*)', line)
        if text!=None:
            line = re.sub('0x[0-9a-zA-Z]+', rom_start_string, line)
            text = None
        stack= re.search(r'stack=([a-zA-Z0-9]*)', line)
        if stack!=None:
            line = re.sub('0x[0-9a-zA-Z]+', ram_end_string, line)
            stack = None
        print line
    return

def processArguments():
    """Set the current parameter readings regarding the values of the memory"""

    global pageNum, ramStart, ramSize, targetFile
    args = sys.argv[1:]

    if len(args)<3:
        print "The number of parameters is incorrect, probably due to unexpected spaces..."
        sys.exit(1)

    temp = args[0]
    if temp.find("flash_page")==-1:
        print "Parameter setting error. Could not find flash_page."
        sys.exit(1)

    pageNum = re.search('[0-9]+', temp).group(0)

    temp = args[1]
    if temp.find("ram_start")==-1:
        print "Parameter setting error. Could not find ram_start."
        sys.exit(1)

    ramStart = re.search('[0-9]+', temp).group(0)

    temp = args[2]
    if temp.find("ram_size")==-1:
        print "Parameter setting error. Could not find ram_size."
        sys.exit(1)

    ramSize = re.search('[0-9]+', temp).group(0)

    targetFile = args[3]
    
    return






if __name__ == "__main__":

				
    print "LiteOS Build Environment Starts..."

#    global staticdatasize  # no need to define global here, suppressed to avoid warning - phamducnam

    processArguments()
    if os.path.isdir("build") == True:
        shutil.rmtree("./build")

    os.mkdir("build")
    os.chdir("./build")

    shutil.copyfile("../../../Makefile", "./Makefile")
    setParameter(int(ramStart), int(ramStart)+int(ramSize), int(pageNum)*256)

    os.system("make clean")
    cmdtemp = "make"
    fout = os.popen(cmdtemp)
    resultoutput = fout.read()
    print resultoutput
    
    pregular = re.compile('Data:\s+(\d+)\s+bytes')
    m = pregular.search(resultoutput).groups()
    staticdatasize = m[0]  
    
    #Now process the generated hex file to get the lhex file

    processHexFile()

    #os.chdir("../")
    #shutil.move("./build/App.hex", "App.hex")
    #if os.path.isdir("build") == True:
    #    shutil.rmtree("./build")
    #os.mkdir("build")
    #os.chdir("./build")
    shutil.copy("./App.hex", targetFile)
    shutil.copy("../../../extract.pl", "extract.pl")
    
    print "Build complete. The lhex is located in ./build directory."
   
    


    
    






    


