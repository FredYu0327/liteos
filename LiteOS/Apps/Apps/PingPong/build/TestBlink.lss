
TestBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800af0  00013b34  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00013800  00013800  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800b08  00800b08  000003e0  2**0
                  ALLOC
  3 .stab         00000408  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000084  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000001b  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000015ed  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002b3  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004ae  00000000  00000000  00002147  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  000025f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004f8  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000133  00000000  00000000  00002b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00013800 <__vectors>:
   13800:	0c 94 46 9c 	jmp	0x1388c
   13804:	0c 94 63 9c 	jmp	0x138c6
   13808:	0c 94 63 9c 	jmp	0x138c6
   1380c:	0c 94 63 9c 	jmp	0x138c6
   13810:	0c 94 63 9c 	jmp	0x138c6
   13814:	0c 94 63 9c 	jmp	0x138c6
   13818:	0c 94 63 9c 	jmp	0x138c6
   1381c:	0c 94 63 9c 	jmp	0x138c6
   13820:	0c 94 63 9c 	jmp	0x138c6
   13824:	0c 94 63 9c 	jmp	0x138c6
   13828:	0c 94 63 9c 	jmp	0x138c6
   1382c:	0c 94 63 9c 	jmp	0x138c6
   13830:	0c 94 63 9c 	jmp	0x138c6
   13834:	0c 94 63 9c 	jmp	0x138c6
   13838:	0c 94 63 9c 	jmp	0x138c6
   1383c:	0c 94 63 9c 	jmp	0x138c6
   13840:	0c 94 63 9c 	jmp	0x138c6
   13844:	0c 94 63 9c 	jmp	0x138c6
   13848:	0c 94 63 9c 	jmp	0x138c6
   1384c:	0c 94 63 9c 	jmp	0x138c6
   13850:	0c 94 63 9c 	jmp	0x138c6
   13854:	0c 94 63 9c 	jmp	0x138c6
   13858:	0c 94 63 9c 	jmp	0x138c6
   1385c:	0c 94 63 9c 	jmp	0x138c6
   13860:	0c 94 63 9c 	jmp	0x138c6
   13864:	0c 94 63 9c 	jmp	0x138c6
   13868:	0c 94 63 9c 	jmp	0x138c6
   1386c:	0c 94 63 9c 	jmp	0x138c6
   13870:	0c 94 63 9c 	jmp	0x138c6
   13874:	0c 94 63 9c 	jmp	0x138c6
   13878:	0c 94 63 9c 	jmp	0x138c6
   1387c:	0c 94 63 9c 	jmp	0x138c6
   13880:	0c 94 63 9c 	jmp	0x138c6
   13884:	0c 94 63 9c 	jmp	0x138c6
   13888:	0c 94 63 9c 	jmp	0x138c6

0001388c <__ctors_end>:
   1388c:	11 24       	eor	r1, r1
   1388e:	1f be       	out	0x3f, r1	; 63
   13890:	c0 ef       	ldi	r28, 0xF0	; 240
   13892:	dc e0       	ldi	r29, 0x0C	; 12
   13894:	de bf       	out	0x3e, r29	; 62
   13896:	cd bf       	out	0x3d, r28	; 61

00013898 <__do_copy_data>:
   13898:	1b e0       	ldi	r17, 0x0B	; 11
   1389a:	a0 ef       	ldi	r26, 0xF0	; 240
   1389c:	ba e0       	ldi	r27, 0x0A	; 10
   1389e:	e4 e3       	ldi	r30, 0x34	; 52
   138a0:	fb e3       	ldi	r31, 0x3B	; 59
   138a2:	01 e0       	ldi	r16, 0x01	; 1
   138a4:	0b bf       	out	0x3b, r16	; 59
   138a6:	02 c0       	rjmp	.+4      	; 0x138ac
   138a8:	07 90       	elpm	r0, Z+
   138aa:	0d 92       	st	X+, r0
   138ac:	a8 30       	cpi	r26, 0x08	; 8
   138ae:	b1 07       	cpc	r27, r17
   138b0:	d9 f7       	brne	.-10     	; 0x138a8

000138b2 <__do_clear_bss>:
   138b2:	1b e0       	ldi	r17, 0x0B	; 11
   138b4:	a8 e0       	ldi	r26, 0x08	; 8
   138b6:	bb e0       	ldi	r27, 0x0B	; 11
   138b8:	01 c0       	rjmp	.+2      	; 0x138bc

000138ba <.do_clear_bss_loop>:
   138ba:	1d 92       	st	X+, r1

000138bc <.do_clear_bss_start>:
   138bc:	a1 31       	cpi	r26, 0x11	; 17
   138be:	b1 07       	cpc	r27, r17
   138c0:	e1 f7       	brne	.-8      	; 0x138ba
   138c2:	0c 94 d9 9c 	jmp	0x139b2

000138c6 <__bad_interrupt>:
   138c6:	0c 94 00 9c 	jmp	0x13800

000138ca <getCurrentThread.1385>:
thread **getCurrentThread()
{
   thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))CURRENTTHREADFUNCTION; 
   asm volatile("push r20" "\n\t"
   138ca:	4f 93       	push	r20
   138cc:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   138ce:	ec e0       	ldi	r30, 0x0C	; 12
   138d0:	fa ee       	ldi	r31, 0xEA	; 234
   138d2:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   138d4:	84 2f       	mov	r24, r20
   138d6:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
   138d8:	5f 91       	pop	r21
   138da:	4f 91       	pop	r20
   138dc:	08 95       	ret

000138de <yield.1384>:
	             "pop r20" "\n\t"
	              ::);
   return current_thread; 
}



uint8_t getCurrentThreadIndex()
{
   
   uint16_t index; 
   void (*getaddrfp)(void) = (void (*)(void))CURRENTTHREADINDEXFUNCTION; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   asm volatile(" mov %A0, r20" "\n\t"
	             "mov %B0, r21" "\n\t"
				 :"=r" (index)
				 :
                );
    asm volatile("pop r21" "\n\t"
	             "pop r20" "\n\t"
	              ::);
   return (uint8_t)index; 
}


void sleepThread(int milliseconds)
{
/*
   void (*getaddrfp)(void) = (void (*)(void))CURRENTTHREADFUNCTION; 

   asm volatile("push r24" "\n\t"
	             "push r25" "\n\t"
	              ::);
   getaddrfp();     

   asm volatile(" mov %A0, r24" "\n\t"
	             "mov %B0, r25" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r24" "\n\t"
	             "pop r25" "\n\t"
	              ::);
 */
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 4;
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
   
   yield(); 
}


void hibernateThread()
{
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 5; 
   yield(); 
}


void yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELDFUNCTION; 
 yieldfp();                              
   138de:	e0 e0       	ldi	r30, 0x00	; 0
   138e0:	fa ee       	ldi	r31, 0xEA	; 234
   138e2:	09 95       	icall
   138e4:	08 95       	ret

000138e6 <sleepThread.1383>:
   138e6:	0f 93       	push	r16
   138e8:	1f 93       	push	r17
   138ea:	8c 01       	movw	r16, r24
   138ec:	0e 94 65 9c 	call	0x138ca
   138f0:	dc 01       	movw	r26, r24
   138f2:	ed 91       	ld	r30, X+
   138f4:	fc 91       	ld	r31, X
   138f6:	11 97       	sbiw	r26, 0x01	; 1
   138f8:	84 e0       	ldi	r24, 0x04	; 4
   138fa:	82 83       	std	Z+2, r24	; 0x02
   138fc:	ed 91       	ld	r30, X+
   138fe:	fc 91       	ld	r31, X
   13900:	10 8f       	std	Z+24, r17	; 0x18
   13902:	07 8b       	std	Z+23, r16	; 0x17
   13904:	0e 94 6f 9c 	call	0x138de
   13908:	1f 91       	pop	r17
   1390a:	0f 91       	pop	r16
   1390c:	08 95       	ret

0001390e <syscall_postThreadTask.1391>:
}



void syscall_postThreadTask()
{
 void (*postthreadfp)(void) = (void (*)(void))POSTTHREADTASK; 
 postthreadfp();                              
   1390e:	e8 e6       	ldi	r30, 0x68	; 104
   13910:	fa ee       	ldi	r31, 0xEA	; 234
   13912:	09 95       	icall
   13914:	08 95       	ret

00013916 <wakeupMeSerial.1725>:
//wakeup the current thread once an incoming packet arrives 

void wakeupMeSerial()
{
  mythreadserial->state = STATE_ACTIVE; 
   13916:	e0 91 0d 0b 	lds	r30, 0x0B0D
   1391a:	f0 91 0e 0b 	lds	r31, 0x0B0E
   1391e:	82 e0       	ldi	r24, 0x02	; 2
   13920:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   13922:	0e 94 87 9c 	call	0x1390e
   13926:	08 95       	ret

00013928 <Mutex_unlock.1415>:
void Mutex_unlock(mutex *m)
{
     
   void (*getaddrfp)(void) = (void (*)(void))MUTEXUNLOCKFUNCTION; 
   asm volatile("push r20" "\n\t"
   13928:	4f 93       	push	r20
   1392a:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
      
   asm volatile(" mov r20, %A0" "\n\t"
   1392c:	48 2f       	mov	r20, r24
   1392e:	59 2f       	mov	r21, r25
	              " mov r21, %B0" "\n\t"
				 :
				 :"r" (m)
                );

   getaddrfp();
   13930:	e8 e1       	ldi	r30, 0x18	; 24
   13932:	fa ee       	ldi	r31, 0xEA	; 234
   13934:	09 95       	icall
   asm volatile( "pop r21" "\n\t"
   13936:	5f 91       	pop	r21
   13938:	4f 91       	pop	r20
   1393a:	08 95       	ret

0001393c <Mutex_lock.1413>:
   1393c:	df 92       	push	r13
   1393e:	ef 92       	push	r14
   13940:	ff 92       	push	r15
   13942:	0f 93       	push	r16
   13944:	1f 93       	push	r17
   13946:	cf 93       	push	r28
   13948:	df 93       	push	r29
   1394a:	ec 01       	movw	r28, r24
   1394c:	0e 94 65 9c 	call	0x138ca
   13950:	8c 01       	movw	r16, r24
   13952:	4f 93       	push	r20
   13954:	5f 93       	push	r21
   13956:	ec e1       	ldi	r30, 0x1C	; 28
   13958:	fa ee       	ldi	r31, 0xEA	; 234
   1395a:	09 95       	icall
   1395c:	e4 2e       	mov	r14, r20
   1395e:	f5 2e       	mov	r15, r21
   13960:	5f 91       	pop	r21
   13962:	4f 91       	pop	r20


_atomic_t _atomic_start(void) 
{
  _atomic_t result = SREG;
   13964:	df b6       	in	r13, 0x3f	; 63
  asm volatile("cli" "\n\t"::);
   13966:	f8 94       	cli
   13968:	88 81       	ld	r24, Y
   1396a:	88 23       	and	r24, r24
   1396c:	91 f0       	breq	.+36     	; 0x13992
   1396e:	d8 01       	movw	r26, r16
   13970:	ed 91       	ld	r30, X+
   13972:	fc 91       	ld	r31, X
   13974:	11 97       	sbiw	r26, 0x01	; 1
   13976:	83 e0       	ldi	r24, 0x03	; 3
   13978:	82 83       	std	Z+2, r24	; 0x02
   1397a:	ed 91       	ld	r30, X+
   1397c:	fc 91       	ld	r31, X
   1397e:	d0 8f       	std	Z+24, r29	; 0x18
   13980:	c7 8b       	std	Z+23, r28	; 0x17
   13982:	89 81       	ldd	r24, Y+1	; 0x01
   13984:	8f 5f       	subi	r24, 0xFF	; 255
   13986:	89 83       	std	Y+1, r24	; 0x01
   13988:	0e 94 6f 9c 	call	0x138de
   1398c:	89 81       	ldd	r24, Y+1	; 0x01
   1398e:	81 50       	subi	r24, 0x01	; 1
   13990:	89 83       	std	Y+1, r24	; 0x01
   13992:	81 e0       	ldi	r24, 0x01	; 1
   13994:	88 83       	st	Y, r24
   13996:	8e 2d       	mov	r24, r14
   13998:	99 27       	eor	r25, r25
   1399a:	8a 83       	std	Y+2, r24	; 0x02
   1399c:	8d 2d       	mov	r24, r13
   1399e:	99 27       	eor	r25, r25
  return result;
}



void _atomic_end(_atomic_t oldSreg)
{
  SREG = oldSreg; 
   139a0:	8f bf       	out	0x3f, r24	; 63
   139a2:	df 91       	pop	r29
   139a4:	cf 91       	pop	r28
   139a6:	1f 91       	pop	r17
   139a8:	0f 91       	pop	r16
   139aa:	ff 90       	pop	r15
   139ac:	ef 90       	pop	r14
   139ae:	df 90       	pop	r13
   139b0:	08 95       	ret

000139b2 <main>:


 
int main()
{
   139b2:	cf 92       	push	r12
   139b4:	df 92       	push	r13
   139b6:	ef 92       	push	r14
   139b8:	ff 92       	push	r15
   139ba:	0f 93       	push	r16
   139bc:	1f 93       	push	r17
   139be:	cf 93       	push	r28
   139c0:	df 93       	push	r29
   139c2:	cd b7       	in	r28, 0x3d	; 61
   139c4:	de b7       	in	r29, 0x3e	; 62
   139c6:	6e 97       	sbiw	r28, 0x1e	; 30
   139c8:	0f b6       	in	r0, 0x3f	; 63
   139ca:	f8 94       	cli
   139cc:	de bf       	out	0x3e, r29	; 62
   139ce:	0f be       	out	0x3f, r0	; 63
   139d0:	cd bf       	out	0x3d, r28	; 61
   uint16_t nodeid; 
   uint8_t *content = "hello, can you hear me?";
   139d2:	80 ef       	ldi	r24, 0xF0	; 240
   139d4:	c8 2e       	mov	r12, r24
   139d6:	8a e0       	ldi	r24, 0x0A	; 10
   139d8:	d8 2e       	mov	r13, r24
   uint8_t receivemsg[30]; 
   
   __asm__ __volatile__("sei" ::); 
   139da:	78 94       	sei
}



int random()
{
	
	 int ret; 
   void (*getrandomfp)(void) = (void (*)(void))GETRANDOM16FUNCTION; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getrandomfp();     
   asm volatile(" mov %A0, r20" "\n\t"
	              "mov %B0, r21" "\n\t"
				 :"=r" (ret)
				 :
                );
   asm volatile("pop r21" "\n\t"
	             "pop r20" "\n\t"
	              ::);
   return ret; 
	
}



uint16_t getnodeID()
	{
		
	   int ret; 
	   void (*fp)(void) = (void (*)(void))GETNODEIDFUNCTION; 
	   asm volatile("push r20" "\n\t"
   139dc:	4f 93       	push	r20
   139de:	5f 93       	push	r21
					"push r21" "\n\t"
					::);
	   fp();	  
   139e0:	ec ec       	ldi	r30, 0xCC	; 204
   139e2:	fa ee       	ldi	r31, 0xEA	; 234
   139e4:	09 95       	icall
	   asm volatile(" mov %A0, r20" "\n\t"
   139e6:	84 2f       	mov	r24, r20
   139e8:	95 2f       	mov	r25, r21
					  "mov %B0, r21" "\n\t"
					 :"=r" (ret)
					 :
					);
	   asm volatile("pop r21" "\n\t"
   139ea:	5f 91       	pop	r21
   139ec:	4f 91       	pop	r20

   nodeid =  getnodeID();
   if (nodeid == 3)
   139ee:	03 97       	sbiw	r24, 0x03	; 3
   139f0:	09 f0       	breq	.+2      	; 0x139f4
   139f2:	37 c0       	rjmp	.+110    	; 0x13a62
	             "pop r20" "\n\t"
	              ::);
   return;  
}



 


void Barrier_block(uint8_t type, uint8_t id){
   
    _atomic_t currentatomic;
	thread **current_thread; 

     
	current_thread = getCurrentThread(); 

    currentatomic = _atomic_start();
    
      (*current_thread)->state = STATE_IO;
      (*current_thread)->data.iostate.type = type;
      (*current_thread)->data.iostate.id = id;
      yield();
    
    _atomic_end(currentatomic);
}



mutex *getRadioMutexAddress()
{
   mutex *msend;   
   void (*getaddrfp)(void) = (void (*)(void))GETRADIOMUTEXFUNCTION; 
   asm volatile("push r20" "\n\t"
   139f4:	4f 93       	push	r20
   139f6:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   139f8:	e0 e1       	ldi	r30, 0x10	; 16
   139fa:	fa ee       	ldi	r31, 0xEA	; 234
   139fc:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   139fe:	e4 2e       	mov	r14, r20
   13a00:	f5 2e       	mov	r15, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (msend)
				 :
                );
    asm volatile("pop r21" "\n\t"
   13a02:	5f 91       	pop	r21
   13a04:	4f 91       	pop	r20

  
   
   msend = getRadioMutexAddress();   
   current_thread = getCurrentThread(); 
   13a06:	0e 94 65 9c 	call	0x138ca
   13a0a:	4f 93       	push	r20
   13a0c:	5f 93       	push	r21
   13a0e:	ec e5       	ldi	r30, 0x5C	; 92
   13a10:	fa ee       	ldi	r31, 0xEA	; 234
   13a12:	09 95       	icall
   13a14:	04 2f       	mov	r16, r20
   13a16:	15 2f       	mov	r17, r21
   13a18:	5f 91       	pop	r21
   13a1a:	4f 91       	pop	r20
   radioinfoaddr = getCurrentRadioInfo();

   Mutex_lock(msend);
   13a1c:	c7 01       	movw	r24, r14
   13a1e:	0e 94 9e 9c 	call	0x1393c
     
   radioinfoaddr-> socket_port = port; 
   13a22:	8a e0       	ldi	r24, 0x0A	; 10
   13a24:	90 e0       	ldi	r25, 0x00	; 0
   13a26:	d8 01       	movw	r26, r16
   13a28:	8d 93       	st	X+, r24
   13a2a:	9c 93       	st	X, r25
   radioinfoaddr->socket_addr = address; 
   13a2c:	8f ef       	ldi	r24, 0xFF	; 255
   13a2e:	9f ef       	ldi	r25, 0xFF	; 255
   13a30:	f8 01       	movw	r30, r16
   13a32:	93 83       	std	Z+3, r25	; 0x03
   13a34:	82 83       	std	Z+2, r24	; 0x02
   radioinfoaddr->socket_msg_len  = length; 
   13a36:	8a e0       	ldi	r24, 0x0A	; 10
   13a38:	84 83       	std	Z+4, r24	; 0x04
   radioinfoaddr->socket_msg  = msg;
   13a3a:	d6 82       	std	Z+6, r13	; 0x06
   13a3c:	c5 82       	std	Z+5, r12	; 0x05
   13a3e:	e4 e1       	ldi	r30, 0x14	; 20
   13a40:	fa ee       	ldi	r31, 0xEA	; 234
   13a42:	09 95       	icall
    
   //pending_id = id;
   //pending_address = address;
   //pending_length = length;
   //pending_msg = msg;

   sendRadioMsg(); 

   sleepThread(30); 
   13a44:	8e e1       	ldi	r24, 0x1E	; 30
   13a46:	90 e0       	ldi	r25, 0x00	; 0
   13a48:	0e 94 73 9c 	call	0x138e6
   13a4c:	e8 eb       	ldi	r30, 0xB8	; 184
   13a4e:	fa ee       	ldi	r31, 0xEA	; 234
   13a50:	09 95       	icall
   
   disableRadioState();

  
   Mutex_unlock(msend); 
   13a52:	c7 01       	movw	r24, r14
   13a54:	0e 94 94 9c 	call	0x13928
   	{
       while (1)
       	{
         radioSend(10, 0xFFFF, 10, content); 
     		 sleepThread(1000); 
   13a58:	88 ee       	ldi	r24, 0xE8	; 232
   13a5a:	93 e0       	ldi	r25, 0x03	; 3
   13a5c:	0e 94 73 9c 	call	0x138e6
   13a60:	c9 cf       	rjmp	.-110    	; 0x139f4

   return; 
}



//wakeup the current thread once an incoming packet arrives 

void wakeupMe()
{
  mythread->state = STATE_ACTIVE; 
  syscall_postThreadTask();

  
}





int radioReceive(uint16_t port, uint8_t maxlength, uint8_t *msg)

{


   thread** current_thread; 

   _atomic_t currentatomic;
    

   radiohandletype *radiohandleaddr; 


   void (*getaddrfp)(void) = (void (*)(void))SETCURRENTRADIOHANDLE; 
   
   current_thread = getCurrentThread(); 
   13a62:	0e 94 65 9c 	call	0x138ca
   13a66:	7c 01       	movw	r14, r24
   13a68:	4f 93       	push	r20
   13a6a:	5f 93       	push	r21
   13a6c:	e0 e6       	ldi	r30, 0x60	; 96
   13a6e:	fa ee       	ldi	r31, 0xEA	; 234
   13a70:	09 95       	icall
   13a72:	e4 2f       	mov	r30, r20
   13a74:	f5 2f       	mov	r31, r21
   13a76:	5f 91       	pop	r21
   13a78:	4f 91       	pop	r20
   
   radiohandleaddr = getCurrentRadioHandleAddr(); 
   
   //set up the radiohandleaddr data structures

   radiohandleaddr->port = port; 
   13a7a:	8a e0       	ldi	r24, 0x0A	; 10
   13a7c:	90 e0       	ldi	r25, 0x00	; 0
   13a7e:	91 83       	std	Z+1, r25	; 0x01
   13a80:	80 83       	st	Z, r24
   radiohandleaddr->maxLength = maxlength; 
   13a82:	8e e1       	ldi	r24, 0x1E	; 30
   13a84:	82 83       	std	Z+2, r24	; 0x02
   radiohandleaddr->dataReady = &radioReceiveDataReady;
   13a86:	88 e0       	ldi	r24, 0x08	; 8
   13a88:	9b e0       	ldi	r25, 0x0B	; 11
   13a8a:	94 83       	std	Z+4, r25	; 0x04
   13a8c:	83 83       	std	Z+3, r24	; 0x03
   radiohandleaddr->data = msg; 
   13a8e:	ce 01       	movw	r24, r28
   13a90:	01 96       	adiw	r24, 0x01	; 1
   13a92:	96 83       	std	Z+6, r25	; 0x06
   13a94:	85 83       	std	Z+5, r24	; 0x05
   radiohandleaddr->packetinfo = radioReceivePacketInfo; 
   13a96:	89 e0       	ldi	r24, 0x09	; 9
   13a98:	9b e0       	ldi	r25, 0x0B	; 11
   13a9a:	90 87       	std	Z+8, r25	; 0x08
   13a9c:	87 83       	std	Z+7, r24	; 0x07
   radiohandleaddr->handlefunc = wakeupMe;
   13a9e:	81 e9       	ldi	r24, 0x91	; 145
   13aa0:	9d e9       	ldi	r25, 0x9D	; 157
   13aa2:	93 87       	std	Z+11, r25	; 0x0b
   13aa4:	82 87       	std	Z+10, r24	; 0x0a
   13aa6:	0f b7       	in	r16, 0x3f	; 63
   13aa8:	f8 94       	cli


   //close the interrupt     
	currentatomic = _atomic_start();
   13aaa:	11 27       	eor	r17, r17

   //call the radio handle set to store the data structure into the handle vectors 
    getaddrfp();     
   13aac:	e4 e6       	ldi	r30, 0x64	; 100
   13aae:	fa ee       	ldi	r31, 0xEA	; 234
   13ab0:	09 95       	icall


   //set up the current thread into sleep mode 
   (*current_thread)->state = STATE_SLEEP;
   13ab2:	d7 01       	movw	r26, r14
   13ab4:	ed 91       	ld	r30, X+
   13ab6:	fc 91       	ld	r31, X
   13ab8:	11 97       	sbiw	r26, 0x01	; 1
   13aba:	85 e0       	ldi	r24, 0x05	; 5
   13abc:	82 83       	std	Z+2, r24	; 0x02

   //set up mythread so that later can wake up this thread 
   mythread = *current_thread; 
   13abe:	8d 91       	ld	r24, X+
   13ac0:	9c 91       	ld	r25, X
   13ac2:	90 93 10 0b 	sts	0x0B10, r25
   13ac6:	80 93 0f 0b 	sts	0x0B0F, r24
   13aca:	0f bf       	out	0x3f, r16	; 63


   //open the interrupt 
   _atomic_end(currentatomic);  

    yield(); 
   13acc:	0e 94 6f 9c 	call	0x138de
	             "pop r20" "\n\t"
	              ::);
    return msend; 
}
 


mutex *getSerialMutexAddress()
{
   mutex *msend;   

   void (*getaddrfp)(void) = (void (*)(void))GETSERIALMUTEXFUNCTION;
   
   asm volatile("push r20" "\n\t"
   13ad0:	4f 93       	push	r20
   13ad2:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   13ad4:	e0 e9       	ldi	r30, 0x90	; 144
   13ad6:	fa ee       	ldi	r31, 0xEA	; 234
   13ad8:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   13ada:	e4 2e       	mov	r14, r20
   13adc:	f5 2e       	mov	r15, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (msend)
				 :
                );
   asm volatile("pop r21" "\n\t"
   13ade:	5f 91       	pop	r21
   13ae0:	4f 91       	pop	r20
   13ae2:	0e 94 65 9c 	call	0x138ca
   13ae6:	4f 93       	push	r20
   13ae8:	5f 93       	push	r21
   13aea:	e4 e9       	ldi	r30, 0x94	; 148
   13aec:	fa ee       	ldi	r31, 0xEA	; 234
   13aee:	09 95       	icall
   13af0:	04 2f       	mov	r16, r20
   13af2:	15 2f       	mov	r17, r21
   13af4:	5f 91       	pop	r21
   13af6:	4f 91       	pop	r20
   13af8:	c7 01       	movw	r24, r14
   13afa:	0e 94 9e 9c 	call	0x1393c
   13afe:	8e e1       	ldi	r24, 0x1E	; 30
   13b00:	f8 01       	movw	r30, r16
   13b02:	80 83       	st	Z, r24
   13b04:	ce 01       	movw	r24, r28
   13b06:	01 96       	adiw	r24, 0x01	; 1
   13b08:	92 83       	std	Z+2, r25	; 0x02
   13b0a:	81 83       	std	Z+1, r24	; 0x01
   13b0c:	e8 e9       	ldi	r30, 0x98	; 152
   13b0e:	fa ee       	ldi	r31, 0xEA	; 234
   13b10:	09 95       	icall
   13b12:	8e e1       	ldi	r24, 0x1E	; 30
   13b14:	90 e0       	ldi	r25, 0x00	; 0
   13b16:	0e 94 73 9c 	call	0x138e6
   13b1a:	c7 01       	movw	r24, r14
   13b1c:	0e 94 94 9c 	call	0x13928
   13b20:	a0 cf       	rjmp	.-192    	; 0x13a62

00013b22 <wakeupMe.3251>:
   13b22:	e0 91 0f 0b 	lds	r30, 0x0B0F
   13b26:	f0 91 10 0b 	lds	r31, 0x0B10
   13b2a:	82 e0       	ldi	r24, 0x02	; 2
   13b2c:	82 83       	std	Z+2, r24	; 0x02
   13b2e:	0e 94 87 9c 	call	0x1390e
   13b32:	08 95       	ret
