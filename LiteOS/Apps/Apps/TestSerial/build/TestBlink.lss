
TestBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800af0  00013a82  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00013800  00013800  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800b1a  00800b1a  00000340  2**0
                  ALLOC
  3 .stab         00000408  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000084  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000001b  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001303  00000000  00000000  00000807  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000276  00000000  00000000  00001b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000039b  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  0000211b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003fb  00000000  00000000  000021ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000009e  00000000  00000000  000025a6  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00013800 <__vectors>:
   13800:	0c 94 46 9c 	jmp	0x1388c
   13804:	0c 94 63 9c 	jmp	0x138c6
   13808:	0c 94 63 9c 	jmp	0x138c6
   1380c:	0c 94 63 9c 	jmp	0x138c6
   13810:	0c 94 63 9c 	jmp	0x138c6
   13814:	0c 94 63 9c 	jmp	0x138c6
   13818:	0c 94 63 9c 	jmp	0x138c6
   1381c:	0c 94 63 9c 	jmp	0x138c6
   13820:	0c 94 63 9c 	jmp	0x138c6
   13824:	0c 94 63 9c 	jmp	0x138c6
   13828:	0c 94 63 9c 	jmp	0x138c6
   1382c:	0c 94 63 9c 	jmp	0x138c6
   13830:	0c 94 63 9c 	jmp	0x138c6
   13834:	0c 94 63 9c 	jmp	0x138c6
   13838:	0c 94 63 9c 	jmp	0x138c6
   1383c:	0c 94 63 9c 	jmp	0x138c6
   13840:	0c 94 63 9c 	jmp	0x138c6
   13844:	0c 94 63 9c 	jmp	0x138c6
   13848:	0c 94 63 9c 	jmp	0x138c6
   1384c:	0c 94 63 9c 	jmp	0x138c6
   13850:	0c 94 63 9c 	jmp	0x138c6
   13854:	0c 94 63 9c 	jmp	0x138c6
   13858:	0c 94 63 9c 	jmp	0x138c6
   1385c:	0c 94 63 9c 	jmp	0x138c6
   13860:	0c 94 63 9c 	jmp	0x138c6
   13864:	0c 94 63 9c 	jmp	0x138c6
   13868:	0c 94 63 9c 	jmp	0x138c6
   1386c:	0c 94 63 9c 	jmp	0x138c6
   13870:	0c 94 63 9c 	jmp	0x138c6
   13874:	0c 94 63 9c 	jmp	0x138c6
   13878:	0c 94 63 9c 	jmp	0x138c6
   1387c:	0c 94 63 9c 	jmp	0x138c6
   13880:	0c 94 63 9c 	jmp	0x138c6
   13884:	0c 94 63 9c 	jmp	0x138c6
   13888:	0c 94 63 9c 	jmp	0x138c6

0001388c <__ctors_end>:
   1388c:	11 24       	eor	r1, r1
   1388e:	1f be       	out	0x3f, r1	; 63
   13890:	c0 ef       	ldi	r28, 0xF0	; 240
   13892:	dc e0       	ldi	r29, 0x0C	; 12
   13894:	de bf       	out	0x3e, r29	; 62
   13896:	cd bf       	out	0x3d, r28	; 61

00013898 <__do_copy_data>:
   13898:	1b e0       	ldi	r17, 0x0B	; 11
   1389a:	a0 ef       	ldi	r26, 0xF0	; 240
   1389c:	ba e0       	ldi	r27, 0x0A	; 10
   1389e:	e2 e8       	ldi	r30, 0x82	; 130
   138a0:	fa e3       	ldi	r31, 0x3A	; 58
   138a2:	01 e0       	ldi	r16, 0x01	; 1
   138a4:	0b bf       	out	0x3b, r16	; 59
   138a6:	02 c0       	rjmp	.+4      	; 0x138ac
   138a8:	07 90       	elpm	r0, Z+
   138aa:	0d 92       	st	X+, r0
   138ac:	aa 31       	cpi	r26, 0x1A	; 26
   138ae:	b1 07       	cpc	r27, r17
   138b0:	d9 f7       	brne	.-10     	; 0x138a8

000138b2 <__do_clear_bss>:
   138b2:	1b e0       	ldi	r17, 0x0B	; 11
   138b4:	aa e1       	ldi	r26, 0x1A	; 26
   138b6:	bb e0       	ldi	r27, 0x0B	; 11
   138b8:	01 c0       	rjmp	.+2      	; 0x138bc

000138ba <.do_clear_bss_loop>:
   138ba:	1d 92       	st	X+, r1

000138bc <.do_clear_bss_start>:
   138bc:	af 33       	cpi	r26, 0x3F	; 63
   138be:	b1 07       	cpc	r27, r17
   138c0:	e1 f7       	brne	.-8      	; 0x138ba
   138c2:	0c 94 02 9d 	jmp	0x13a04

000138c6 <__bad_interrupt>:
   138c6:	0c 94 00 9c 	jmp	0x13800

000138ca <getCurrentThread.1385>:
thread **getCurrentThread()
{
   thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))CURRENTTHREADFUNCTION; 
   asm volatile("push r20" "\n\t"
   138ca:	4f 93       	push	r20
   138cc:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   138ce:	ec e0       	ldi	r30, 0x0C	; 12
   138d0:	fa ee       	ldi	r31, 0xEA	; 234
   138d2:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   138d4:	84 2f       	mov	r24, r20
   138d6:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
   138d8:	5f 91       	pop	r21
   138da:	4f 91       	pop	r20
   138dc:	08 95       	ret

000138de <yield.1384>:
	             "pop r20" "\n\t"
	              ::);
   return current_thread; 
}



uint8_t getCurrentThreadIndex()
{
   
   uint16_t index; 
   void (*getaddrfp)(void) = (void (*)(void))CURRENTTHREADINDEXFUNCTION; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   asm volatile(" mov %A0, r20" "\n\t"
	             "mov %B0, r21" "\n\t"
				 :"=r" (index)
				 :
                );
    asm volatile("pop r21" "\n\t"
	             "pop r20" "\n\t"
	              ::);
   return (uint8_t)index; 
}


void sleepThread(int milliseconds)
{
/*
   void (*getaddrfp)(void) = (void (*)(void))CURRENTTHREADFUNCTION; 

   asm volatile("push r24" "\n\t"
	             "push r25" "\n\t"
	              ::);
   getaddrfp();     

   asm volatile(" mov %A0, r24" "\n\t"
	             "mov %B0, r25" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r24" "\n\t"
	             "pop r25" "\n\t"
	              ::);
 */
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 4;
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
   
   yield(); 
}


void hibernateThread()
{
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 5; 
   yield(); 
}


void yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELDFUNCTION; 
 yieldfp();                              
   138de:	e0 e0       	ldi	r30, 0x00	; 0
   138e0:	fa ee       	ldi	r31, 0xEA	; 234
   138e2:	09 95       	icall
   138e4:	08 95       	ret

000138e6 <sleepThread.1383>:
   138e6:	0f 93       	push	r16
   138e8:	1f 93       	push	r17
   138ea:	8c 01       	movw	r16, r24
   138ec:	0e 94 65 9c 	call	0x138ca
   138f0:	dc 01       	movw	r26, r24
   138f2:	ed 91       	ld	r30, X+
   138f4:	fc 91       	ld	r31, X
   138f6:	11 97       	sbiw	r26, 0x01	; 1
   138f8:	84 e0       	ldi	r24, 0x04	; 4
   138fa:	82 83       	std	Z+2, r24	; 0x02
   138fc:	ed 91       	ld	r30, X+
   138fe:	fc 91       	ld	r31, X
   13900:	10 8f       	std	Z+24, r17	; 0x18
   13902:	07 8b       	std	Z+23, r16	; 0x17
   13904:	0e 94 6f 9c 	call	0x138de
   13908:	1f 91       	pop	r17
   1390a:	0f 91       	pop	r16
   1390c:	08 95       	ret

0001390e <syscall_postThreadTask.1391>:
}



void syscall_postThreadTask()
{
 void (*postthreadfp)(void) = (void (*)(void))POSTTHREADTASK; 
 postthreadfp();                              
   1390e:	e8 e6       	ldi	r30, 0x68	; 104
   13910:	fa ee       	ldi	r31, 0xEA	; 234
   13912:	09 95       	icall
   13914:	08 95       	ret

00013916 <wakeupMeSerial.1726>:
//wakeup the current thread once an incoming packet arrives 

void wakeupMeSerial()
{
  mythreadserial->state = STATE_ACTIVE; 
   13916:	e0 91 3b 0b 	lds	r30, 0x0B3B
   1391a:	f0 91 3c 0b 	lds	r31, 0x0B3C
   1391e:	82 e0       	ldi	r24, 0x02	; 2
   13920:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   13922:	0e 94 87 9c 	call	0x1390e
   13926:	08 95       	ret

00013928 <serialSend.1464>:
   13928:	8f 92       	push	r8
   1392a:	9f 92       	push	r9
   1392c:	af 92       	push	r10
   1392e:	bf 92       	push	r11
   13930:	cf 92       	push	r12
   13932:	df 92       	push	r13
   13934:	ef 92       	push	r14
   13936:	ff 92       	push	r15
   13938:	0f 93       	push	r16
   1393a:	1f 93       	push	r17
   1393c:	cf 93       	push	r28
   1393e:	df 93       	push	r29
   13940:	88 2e       	mov	r8, r24
   13942:	5b 01       	movw	r10, r22
   mutex *msend;   

   void (*getaddrfp)(void) = (void (*)(void))GETSERIALMUTEXFUNCTION;
   
   asm volatile("push r20" "\n\t"
   13944:	4f 93       	push	r20
   13946:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   13948:	e0 e9       	ldi	r30, 0x90	; 144
   1394a:	fa ee       	ldi	r31, 0xEA	; 234
   1394c:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   1394e:	c4 2f       	mov	r28, r20
   13950:	d5 2f       	mov	r29, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (msend)
				 :
                );
   asm volatile("pop r21" "\n\t"
   13952:	5f 91       	pop	r21
   13954:	4f 91       	pop	r20
   13956:	0e 94 65 9c 	call	0x138ca
   1395a:	4f 93       	push	r20
   1395c:	5f 93       	push	r21
   1395e:	e4 e9       	ldi	r30, 0x94	; 148
   13960:	fa ee       	ldi	r31, 0xEA	; 234
   13962:	09 95       	icall
   13964:	c4 2e       	mov	r12, r20
   13966:	d5 2e       	mov	r13, r21
   13968:	5f 91       	pop	r21
   1396a:	4f 91       	pop	r20
   1396c:	0e 94 65 9c 	call	0x138ca
   13970:	8c 01       	movw	r16, r24
   13972:	4f 93       	push	r20
   13974:	5f 93       	push	r21
   13976:	ec e1       	ldi	r30, 0x1C	; 28
   13978:	fa ee       	ldi	r31, 0xEA	; 234
   1397a:	09 95       	icall
   1397c:	e4 2e       	mov	r14, r20
   1397e:	f5 2e       	mov	r15, r21
   13980:	5f 91       	pop	r21
   13982:	4f 91       	pop	r20


_atomic_t _atomic_start(void) 
{
  _atomic_t result = SREG;
   13984:	9f b6       	in	r9, 0x3f	; 63
  asm volatile("cli" "\n\t"::);
   13986:	f8 94       	cli
   13988:	88 81       	ld	r24, Y
   1398a:	88 23       	and	r24, r24
   1398c:	91 f0       	breq	.+36     	; 0x139b2
   1398e:	d8 01       	movw	r26, r16
   13990:	ed 91       	ld	r30, X+
   13992:	fc 91       	ld	r31, X
   13994:	11 97       	sbiw	r26, 0x01	; 1
   13996:	83 e0       	ldi	r24, 0x03	; 3
   13998:	82 83       	std	Z+2, r24	; 0x02
   1399a:	ed 91       	ld	r30, X+
   1399c:	fc 91       	ld	r31, X
   1399e:	d0 8f       	std	Z+24, r29	; 0x18
   139a0:	c7 8b       	std	Z+23, r28	; 0x17
   139a2:	89 81       	ldd	r24, Y+1	; 0x01
   139a4:	8f 5f       	subi	r24, 0xFF	; 255
   139a6:	89 83       	std	Y+1, r24	; 0x01
   139a8:	0e 94 6f 9c 	call	0x138de
   139ac:	89 81       	ldd	r24, Y+1	; 0x01
   139ae:	81 50       	subi	r24, 0x01	; 1
   139b0:	89 83       	std	Y+1, r24	; 0x01
   139b2:	81 e0       	ldi	r24, 0x01	; 1
   139b4:	88 83       	st	Y, r24
   139b6:	8e 2d       	mov	r24, r14
   139b8:	99 27       	eor	r25, r25
   139ba:	8a 83       	std	Y+2, r24	; 0x02
   139bc:	89 2d       	mov	r24, r9
   139be:	99 27       	eor	r25, r25
  return result;
}



void _atomic_end(_atomic_t oldSreg)
{
  SREG = oldSreg; 
   139c0:	8f bf       	out	0x3f, r24	; 63
   139c2:	f6 01       	movw	r30, r12
   139c4:	80 82       	st	Z, r8
   139c6:	b2 82       	std	Z+2, r11	; 0x02
   139c8:	a1 82       	std	Z+1, r10	; 0x01
   139ca:	e8 e9       	ldi	r30, 0x98	; 152
   139cc:	fa ee       	ldi	r31, 0xEA	; 234
   139ce:	09 95       	icall
   139d0:	8e e1       	ldi	r24, 0x1E	; 30
   139d2:	90 e0       	ldi	r25, 0x00	; 0
   139d4:	0e 94 73 9c 	call	0x138e6
   139d8:	4f 93       	push	r20
   139da:	5f 93       	push	r21
   139dc:	4c 2f       	mov	r20, r28
   139de:	5d 2f       	mov	r21, r29
   139e0:	e8 e1       	ldi	r30, 0x18	; 24
   139e2:	fa ee       	ldi	r31, 0xEA	; 234
   139e4:	09 95       	icall
   139e6:	5f 91       	pop	r21
   139e8:	4f 91       	pop	r20
   139ea:	df 91       	pop	r29
   139ec:	cf 91       	pop	r28
   139ee:	1f 91       	pop	r17
   139f0:	0f 91       	pop	r16
   139f2:	ff 90       	pop	r15
   139f4:	ef 90       	pop	r14
   139f6:	df 90       	pop	r13
   139f8:	cf 90       	pop	r12
   139fa:	bf 90       	pop	r11
   139fc:	af 90       	pop	r10
   139fe:	9f 90       	pop	r9
   13a00:	8f 90       	pop	r8
   13a02:	08 95       	ret

00013a04 <main>:
{
 uint16_t reading; 

 
 __asm__ __volatile__("sei" ::); 
   13a04:	78 94       	sei
 
   for (i =0; i< 100; i++)
   13a06:	10 92 1a 0b 	sts	0x0B1A, r1
void redToggle()
{
                          
  void (*redfp)() = (void (*)(void))REDTOGGLEFUNCTION; 
  redfp();    
   13a0a:	e8 e0       	ldi	r30, 0x08	; 8
   13a0c:	fa ee       	ldi	r31, 0xEA	; 234
   13a0e:	09 95       	icall
   	{
	   redToggle(); 
     serialSend_string("This is a message");
   13a10:	e0 ef       	ldi	r30, 0xF0	; 240
   13a12:	fa e0       	ldi	r31, 0x0A	; 10
   13a14:	01 c0       	rjmp	.+2      	; 0x13a18
   13a16:	31 96       	adiw	r30, 0x01	; 1


int String_length(char* s) {
	int count=0;
	while(s[count] != '\0')
   13a18:	80 81       	ld	r24, Z
   13a1a:	88 23       	and	r24, r24
   13a1c:	e1 f7       	brne	.-8      	; 0x13a16
   13a1e:	e0 5f       	subi	r30, 0xF0	; 240
   13a20:	fa 40       	sbci	r31, 0x0A	; 10
   13a22:	60 ef       	ldi	r22, 0xF0	; 240
   13a24:	7a e0       	ldi	r23, 0x0A	; 10
   13a26:	8e 2f       	mov	r24, r30
   13a28:	0e 94 94 9c 	call	0x13928
   13a2c:	10 92 1b 0b 	sts	0x0B1B, r1
   13a30:	8c e7       	ldi	r24, 0x7C	; 124
   13a32:	80 93 1c 0b 	sts	0x0B1C, r24
   13a36:	8e ee       	ldi	r24, 0xEE	; 238
   13a38:	80 93 1e 0b 	sts	0x0B1E, r24
   13a3c:	80 93 1d 0b 	sts	0x0B1D, r24
   13a40:	6b e1       	ldi	r22, 0x1B	; 27
   13a42:	7b e0       	ldi	r23, 0x0B	; 11
   13a44:	80 e1       	ldi	r24, 0x10	; 16
   13a46:	0e 94 94 9c 	call	0x13928
     serialSend_uint16(124);

     serialSend(12, "This is another message");
   13a4a:	62 e0       	ldi	r22, 0x02	; 2
   13a4c:	7b e0       	ldi	r23, 0x0B	; 11
   13a4e:	8c e0       	ldi	r24, 0x0C	; 12
   13a50:	0e 94 94 9c 	call	0x13928
	   sleepThread(100);
   13a54:	84 e6       	ldi	r24, 0x64	; 100
   13a56:	90 e0       	ldi	r25, 0x00	; 0
   13a58:	0e 94 73 9c 	call	0x138e6
   13a5c:	80 91 1a 0b 	lds	r24, 0x0B1A
   13a60:	8f 5f       	subi	r24, 0xFF	; 255
   13a62:	80 93 1a 0b 	sts	0x0B1A, r24
   13a66:	84 36       	cpi	r24, 0x64	; 100
   13a68:	80 f2       	brcs	.-96     	; 0x13a0a
    }
   
	return 0; 
}
   13a6a:	80 e0       	ldi	r24, 0x00	; 0
   13a6c:	90 e0       	ldi	r25, 0x00	; 0
   13a6e:	08 95       	ret

00013a70 <wakeupMe.3252>:
//wakeup the current thread once an incoming packet arrives 

void wakeupMe()
{
  mythread->state = STATE_ACTIVE; 
   13a70:	e0 91 3d 0b 	lds	r30, 0x0B3D
   13a74:	f0 91 3e 0b 	lds	r31, 0x0B3E
   13a78:	82 e0       	ldi	r24, 0x02	; 2
   13a7a:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   13a7c:	0e 94 87 9c 	call	0x1390e
   13a80:	08 95       	ret
