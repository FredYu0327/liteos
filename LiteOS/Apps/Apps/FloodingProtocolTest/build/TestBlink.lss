
TestBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000394  00013800  00013800  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000025  00800af0  00800af0  00000408  2**0
                  ALLOC
  2 .stab         00000408  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000084  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000001b  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015db  00000000  00000000  000008cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b3  00000000  00000000  00001eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f5  00000000  00000000  0000215d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00002652  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cd  00000000  00000000  000026d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000136  00000000  00000000  00002b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00013800 <__vectors>:
   13800:	0c 94 46 9c 	jmp	0x1388c
   13804:	0c 94 63 9c 	jmp	0x138c6
   13808:	0c 94 63 9c 	jmp	0x138c6
   1380c:	0c 94 63 9c 	jmp	0x138c6
   13810:	0c 94 63 9c 	jmp	0x138c6
   13814:	0c 94 63 9c 	jmp	0x138c6
   13818:	0c 94 63 9c 	jmp	0x138c6
   1381c:	0c 94 63 9c 	jmp	0x138c6
   13820:	0c 94 63 9c 	jmp	0x138c6
   13824:	0c 94 63 9c 	jmp	0x138c6
   13828:	0c 94 63 9c 	jmp	0x138c6
   1382c:	0c 94 63 9c 	jmp	0x138c6
   13830:	0c 94 63 9c 	jmp	0x138c6
   13834:	0c 94 63 9c 	jmp	0x138c6
   13838:	0c 94 63 9c 	jmp	0x138c6
   1383c:	0c 94 63 9c 	jmp	0x138c6
   13840:	0c 94 63 9c 	jmp	0x138c6
   13844:	0c 94 63 9c 	jmp	0x138c6
   13848:	0c 94 63 9c 	jmp	0x138c6
   1384c:	0c 94 63 9c 	jmp	0x138c6
   13850:	0c 94 63 9c 	jmp	0x138c6
   13854:	0c 94 63 9c 	jmp	0x138c6
   13858:	0c 94 63 9c 	jmp	0x138c6
   1385c:	0c 94 63 9c 	jmp	0x138c6
   13860:	0c 94 63 9c 	jmp	0x138c6
   13864:	0c 94 63 9c 	jmp	0x138c6
   13868:	0c 94 63 9c 	jmp	0x138c6
   1386c:	0c 94 63 9c 	jmp	0x138c6
   13870:	0c 94 63 9c 	jmp	0x138c6
   13874:	0c 94 63 9c 	jmp	0x138c6
   13878:	0c 94 63 9c 	jmp	0x138c6
   1387c:	0c 94 63 9c 	jmp	0x138c6
   13880:	0c 94 63 9c 	jmp	0x138c6
   13884:	0c 94 63 9c 	jmp	0x138c6
   13888:	0c 94 63 9c 	jmp	0x138c6

0001388c <__ctors_end>:
   1388c:	11 24       	eor	r1, r1
   1388e:	1f be       	out	0x3f, r1	; 63
   13890:	c0 ef       	ldi	r28, 0xF0	; 240
   13892:	dc e0       	ldi	r29, 0x0C	; 12
   13894:	de bf       	out	0x3e, r29	; 62
   13896:	cd bf       	out	0x3d, r28	; 61

00013898 <__do_copy_data>:
   13898:	1a e0       	ldi	r17, 0x0A	; 10
   1389a:	a0 ef       	ldi	r26, 0xF0	; 240
   1389c:	ba e0       	ldi	r27, 0x0A	; 10
   1389e:	e4 e9       	ldi	r30, 0x94	; 148
   138a0:	fb e3       	ldi	r31, 0x3B	; 59
   138a2:	01 e0       	ldi	r16, 0x01	; 1
   138a4:	0b bf       	out	0x3b, r16	; 59
   138a6:	02 c0       	rjmp	.+4      	; 0x138ac
   138a8:	07 90       	elpm	r0, Z+
   138aa:	0d 92       	st	X+, r0
   138ac:	a0 3f       	cpi	r26, 0xF0	; 240
   138ae:	b1 07       	cpc	r27, r17
   138b0:	d9 f7       	brne	.-10     	; 0x138a8

000138b2 <__do_clear_bss>:
   138b2:	1b e0       	ldi	r17, 0x0B	; 11
   138b4:	a0 ef       	ldi	r26, 0xF0	; 240
   138b6:	ba e0       	ldi	r27, 0x0A	; 10
   138b8:	01 c0       	rjmp	.+2      	; 0x138bc

000138ba <.do_clear_bss_loop>:
   138ba:	1d 92       	st	X+, r1

000138bc <.do_clear_bss_start>:
   138bc:	a5 31       	cpi	r26, 0x15	; 21
   138be:	b1 07       	cpc	r27, r17
   138c0:	e1 f7       	brne	.-8      	; 0x138ba
   138c2:	0c 94 94 9c 	jmp	0x13928

000138c6 <__bad_interrupt>:
   138c6:	0c 94 00 9c 	jmp	0x13800

000138ca <getCurrentThread.1385>:
thread **getCurrentThread()
{
   thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))CURRENTTHREADFUNCTION; 
   asm volatile("push r20" "\n\t"
   138ca:	4f 93       	push	r20
   138cc:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   138ce:	ec e0       	ldi	r30, 0x0C	; 12
   138d0:	fa ee       	ldi	r31, 0xEA	; 234
   138d2:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   138d4:	84 2f       	mov	r24, r20
   138d6:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
   138d8:	5f 91       	pop	r21
   138da:	4f 91       	pop	r20
   138dc:	08 95       	ret

000138de <yield.1384>:
	             "pop r20" "\n\t"
	              ::);
   return current_thread; 
}



uint8_t getCurrentThreadIndex()
{
   
   uint16_t index; 
   void (*getaddrfp)(void) = (void (*)(void))CURRENTTHREADINDEXFUNCTION; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   asm volatile(" mov %A0, r20" "\n\t"
	             "mov %B0, r21" "\n\t"
				 :"=r" (index)
				 :
                );
    asm volatile("pop r21" "\n\t"
	             "pop r20" "\n\t"
	              ::);
   return (uint8_t)index; 
}


void sleepThread(int milliseconds)
{
/*
   void (*getaddrfp)(void) = (void (*)(void))CURRENTTHREADFUNCTION; 

   asm volatile("push r24" "\n\t"
	             "push r25" "\n\t"
	              ::);
   getaddrfp();     

   asm volatile(" mov %A0, r24" "\n\t"
	             "mov %B0, r25" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r24" "\n\t"
	             "pop r25" "\n\t"
	              ::);
 */
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 4;
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
   
   yield(); 
}


void hibernateThread()
{
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 5; 
   yield(); 
}


void yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELDFUNCTION; 
 yieldfp();                              
   138de:	e0 e0       	ldi	r30, 0x00	; 0
   138e0:	fa ee       	ldi	r31, 0xEA	; 234
   138e2:	09 95       	icall
   138e4:	08 95       	ret

000138e6 <sleepThread.1383>:
   138e6:	0f 93       	push	r16
   138e8:	1f 93       	push	r17
   138ea:	8c 01       	movw	r16, r24
   138ec:	0e 94 65 9c 	call	0x138ca
   138f0:	dc 01       	movw	r26, r24
   138f2:	ed 91       	ld	r30, X+
   138f4:	fc 91       	ld	r31, X
   138f6:	11 97       	sbiw	r26, 0x01	; 1
   138f8:	84 e0       	ldi	r24, 0x04	; 4
   138fa:	82 83       	std	Z+2, r24	; 0x02
   138fc:	ed 91       	ld	r30, X+
   138fe:	fc 91       	ld	r31, X
   13900:	10 8f       	std	Z+24, r17	; 0x18
   13902:	07 8b       	std	Z+23, r16	; 0x17
   13904:	0e 94 6f 9c 	call	0x138de
   13908:	1f 91       	pop	r17
   1390a:	0f 91       	pop	r16
   1390c:	08 95       	ret

0001390e <syscall_postThreadTask.1391>:
}



void syscall_postThreadTask()
{
 void (*postthreadfp)(void) = (void (*)(void))POSTTHREADTASK; 
 postthreadfp();                              
   1390e:	e8 e6       	ldi	r30, 0x68	; 104
   13910:	fa ee       	ldi	r31, 0xEA	; 234
   13912:	09 95       	icall
   13914:	08 95       	ret

00013916 <wakeupMeSerial.1755>:
//wakeup the current thread once an incoming packet arrives 

void wakeupMeSerial()
{
  mythreadserial->state = STATE_ACTIVE; 
   13916:	e0 91 11 0b 	lds	r30, 0x0B11
   1391a:	f0 91 12 0b 	lds	r31, 0x0B12
   1391e:	82 e0       	ldi	r24, 0x02	; 2
   13920:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   13922:	0e 94 87 9c 	call	0x1390e
   13926:	08 95       	ret

00013928 <main>:
uint16_t sig; 
uint16_t incomingnode; 

int main()
{
   13928:	bf 92       	push	r11
   1392a:	cf 92       	push	r12
   1392c:	df 92       	push	r13
   1392e:	ef 92       	push	r14
   13930:	ff 92       	push	r15
   13932:	0f 93       	push	r16
   13934:	1f 93       	push	r17
   13936:	cf 93       	push	r28
   13938:	df 93       	push	r29


 fromnode = tonode = 100;
   1393a:	84 e6       	ldi	r24, 0x64	; 100
   1393c:	80 93 05 0b 	sts	0x0B05, r24
 fromnode = 2; 
   13940:	82 e0       	ldi	r24, 0x02	; 2
   13942:	80 93 04 0b 	sts	0x0B04, r24
 
 
 __asm__ __volatile__("sei" ::); 
   13946:	78 94       	sei
	{
		
	   int ret; 
	   void (*fp)(void) = (void (*)(void))GETNODEIDFUNCTION; 
	   asm volatile("push r20" "\n\t"
   13948:	4f 93       	push	r20
   1394a:	5f 93       	push	r21
					"push r21" "\n\t"
					::);
	   fp();	  
   1394c:	ec ec       	ldi	r30, 0xCC	; 204
   1394e:	fa ee       	ldi	r31, 0xEA	; 234
   13950:	09 95       	icall
	   asm volatile(" mov %A0, r20" "\n\t"
   13952:	84 2f       	mov	r24, r20
   13954:	95 2f       	mov	r25, r21
					  "mov %B0, r21" "\n\t"
					 :"=r" (ret)
					 :
					);
	   asm volatile("pop r21" "\n\t"
   13956:	5f 91       	pop	r21
   13958:	4f 91       	pop	r20
 
    nodeid = getnodeID();
   1395a:	90 93 07 0b 	sts	0x0B07, r25
   1395e:	80 93 06 0b 	sts	0x0B06, r24
	
	

  while (1)
  	{
  	 
      if (nodeid == fromnode)
   13962:	80 91 04 0b 	lds	r24, 0x0B04
   13966:	99 27       	eor	r25, r25
   13968:	20 91 06 0b 	lds	r18, 0x0B06
   1396c:	30 91 07 0b 	lds	r19, 0x0B07
   13970:	28 17       	cp	r18, r24
   13972:	39 07       	cpc	r19, r25
   13974:	09 f0       	breq	.+2      	; 0x13978
   13976:	95 c0       	rjmp	.+298    	; 0x13aa2
   13978:	4f 93       	push	r20
   1397a:	5f 93       	push	r21
   1397c:	ec eb       	ldi	r30, 0xBC	; 188
   1397e:	fa ee       	ldi	r31, 0xEA	; 234
   13980:	09 95       	icall
   13982:	24 2f       	mov	r18, r20
   13984:	35 2f       	mov	r19, r21
   13986:	5f 91       	pop	r21
   13988:	4f 91       	pop	r20
      {    

      sig = random(); 
   1398a:	30 93 09 0b 	sts	0x0B09, r19
   1398e:	20 93 08 0b 	sts	0x0B08, r18
      msg[0] = nodeid%256;
   13992:	80 91 06 0b 	lds	r24, 0x0B06
   13996:	90 91 07 0b 	lds	r25, 0x0B07
   1399a:	80 93 f0 0a 	sts	0x0AF0, r24
			msg[1] = nodeid/256;
   1399e:	89 2f       	mov	r24, r25
   139a0:	99 27       	eor	r25, r25
   139a2:	80 93 f1 0a 	sts	0x0AF1, r24
			msg[2] = sig%256;
   139a6:	20 93 f2 0a 	sts	0x0AF2, r18
			msg[3] = sig/256;
   139aa:	23 2f       	mov	r18, r19
   139ac:	33 27       	eor	r19, r19
   139ae:	20 93 f3 0a 	sts	0x0AF3, r18
			msg[4] = 90; 
   139b2:	8a e5       	ldi	r24, 0x5A	; 90
   139b4:	80 93 f4 0a 	sts	0x0AF4, r24
			msg[5] = 0xff;
   139b8:	8f ef       	ldi	r24, 0xFF	; 255
   139ba:	80 93 f5 0a 	sts	0x0AF5, r24
			msg[6] = 0xff;
   139be:	80 93 f6 0a 	sts	0x0AF6, r24
			msg[7] = 'h';
   139c2:	88 e6       	ldi	r24, 0x68	; 104
   139c4:	80 93 f7 0a 	sts	0x0AF7, r24
			msg[8] = 'e';
   139c8:	85 e6       	ldi	r24, 0x65	; 101
   139ca:	80 93 f8 0a 	sts	0x0AF8, r24
			msg[9] = 'l';
   139ce:	8c e6       	ldi	r24, 0x6C	; 108
   139d0:	80 93 f9 0a 	sts	0x0AF9, r24
			msg[10] = 'l';
   139d4:	80 93 fa 0a 	sts	0x0AFA, r24
			msg[11] = 'o';
   139d8:	8f e6       	ldi	r24, 0x6F	; 111
   139da:	80 93 fb 0a 	sts	0x0AFB, r24
			msg[12] = 0;
   139de:	10 92 fc 0a 	sts	0x0AFC, r1
mutex *getRadioMutexAddress()
{
   mutex *msend;   
   void (*getaddrfp)(void) = (void (*)(void))GETRADIOMUTEXFUNCTION; 
   asm volatile("push r20" "\n\t"
   139e2:	4f 93       	push	r20
   139e4:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   139e6:	e0 e1       	ldi	r30, 0x10	; 16
   139e8:	fa ee       	ldi	r31, 0xEA	; 234
   139ea:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   139ec:	c4 2f       	mov	r28, r20
   139ee:	d5 2f       	mov	r29, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (msend)
				 :
                );
    asm volatile("pop r21" "\n\t"
   139f0:	5f 91       	pop	r21
   139f2:	4f 91       	pop	r20

  
   
   msend = getRadioMutexAddress();   
   current_thread = getCurrentThread(); 
   139f4:	0e 94 65 9c 	call	0x138ca
   139f8:	4f 93       	push	r20
   139fa:	5f 93       	push	r21
   139fc:	ec e5       	ldi	r30, 0x5C	; 92
   139fe:	fa ee       	ldi	r31, 0xEA	; 234
   13a00:	09 95       	icall
   13a02:	04 2f       	mov	r16, r20
   13a04:	15 2f       	mov	r17, r21
   13a06:	5f 91       	pop	r21
   13a08:	4f 91       	pop	r20
   13a0a:	0e 94 65 9c 	call	0x138ca
   13a0e:	7c 01       	movw	r14, r24
   13a10:	4f 93       	push	r20
   13a12:	5f 93       	push	r21
   13a14:	ec e1       	ldi	r30, 0x1C	; 28
   13a16:	fa ee       	ldi	r31, 0xEA	; 234
   13a18:	09 95       	icall
   13a1a:	c4 2e       	mov	r12, r20
   13a1c:	d5 2e       	mov	r13, r21
   13a1e:	5f 91       	pop	r21
   13a20:	4f 91       	pop	r20
   13a22:	bf b6       	in	r11, 0x3f	; 63
   13a24:	f8 94       	cli
   13a26:	88 81       	ld	r24, Y
   13a28:	88 23       	and	r24, r24
   13a2a:	91 f0       	breq	.+36     	; 0x13a50
   13a2c:	d7 01       	movw	r26, r14
   13a2e:	ed 91       	ld	r30, X+
   13a30:	fc 91       	ld	r31, X
   13a32:	11 97       	sbiw	r26, 0x01	; 1
   13a34:	83 e0       	ldi	r24, 0x03	; 3
   13a36:	82 83       	std	Z+2, r24	; 0x02
   13a38:	ed 91       	ld	r30, X+
   13a3a:	fc 91       	ld	r31, X
   13a3c:	d0 8f       	std	Z+24, r29	; 0x18
   13a3e:	c7 8b       	std	Z+23, r28	; 0x17
   13a40:	89 81       	ldd	r24, Y+1	; 0x01
   13a42:	8f 5f       	subi	r24, 0xFF	; 255
   13a44:	89 83       	std	Y+1, r24	; 0x01
   13a46:	0e 94 6f 9c 	call	0x138de
   13a4a:	89 81       	ldd	r24, Y+1	; 0x01
   13a4c:	81 50       	subi	r24, 0x01	; 1
   13a4e:	89 83       	std	Y+1, r24	; 0x01
   13a50:	81 e0       	ldi	r24, 0x01	; 1
   13a52:	88 83       	st	Y, r24
   13a54:	8c 2d       	mov	r24, r12
   13a56:	99 27       	eor	r25, r25
   13a58:	8a 83       	std	Y+2, r24	; 0x02
   13a5a:	8b 2d       	mov	r24, r11
   13a5c:	99 27       	eor	r25, r25
   13a5e:	8f bf       	out	0x3f, r24	; 63
   radioinfoaddr = getCurrentRadioInfo();

   Mutex_lock(msend);
     
   radioinfoaddr-> socket_port = port; 
   13a60:	84 e1       	ldi	r24, 0x14	; 20
   13a62:	90 e0       	ldi	r25, 0x00	; 0
   13a64:	f8 01       	movw	r30, r16
   13a66:	91 83       	std	Z+1, r25	; 0x01
   13a68:	80 83       	st	Z, r24
   radioinfoaddr->socket_addr = address; 
   13a6a:	13 82       	std	Z+3, r1	; 0x03
   13a6c:	12 82       	std	Z+2, r1	; 0x02
   radioinfoaddr->socket_msg_len  = length; 
   13a6e:	80 e1       	ldi	r24, 0x10	; 16
   13a70:	84 83       	std	Z+4, r24	; 0x04
   radioinfoaddr->socket_msg  = msg;
   13a72:	80 ef       	ldi	r24, 0xF0	; 240
   13a74:	9a e0       	ldi	r25, 0x0A	; 10
   13a76:	96 83       	std	Z+6, r25	; 0x06
   13a78:	85 83       	std	Z+5, r24	; 0x05
   13a7a:	e4 e1       	ldi	r30, 0x14	; 20
   13a7c:	fa ee       	ldi	r31, 0xEA	; 234
   13a7e:	09 95       	icall
    
   //pending_id = id;
   //pending_address = address;
   //pending_length = length;
   //pending_msg = msg;

   sendRadioMsg(); 

   sleepThread(30); 
   13a80:	8e e1       	ldi	r24, 0x1E	; 30
   13a82:	90 e0       	ldi	r25, 0x00	; 0
   13a84:	0e 94 73 9c 	call	0x138e6
   13a88:	e8 eb       	ldi	r30, 0xB8	; 184
   13a8a:	fa ee       	ldi	r31, 0xEA	; 234
   13a8c:	09 95       	icall
   13a8e:	4f 93       	push	r20
   13a90:	5f 93       	push	r21
   13a92:	4c 2f       	mov	r20, r28
   13a94:	5d 2f       	mov	r21, r29
   13a96:	e8 e1       	ldi	r30, 0x18	; 24
   13a98:	fa ee       	ldi	r31, 0xEA	; 234
   13a9a:	09 95       	icall
   13a9c:	5f 91       	pop	r21
   13a9e:	4f 91       	pop	r20
   13aa0:	57 c0       	rjmp	.+174    	; 0x13b50
   
   disableRadioState();

  
   Mutex_unlock(msend); 

   return; 
}



//wakeup the current thread once an incoming packet arrives 

void wakeupMe()
{
  mythread->state = STATE_ACTIVE; 
  syscall_postThreadTask();

  
}





int radioReceive(uint16_t port, uint8_t maxlength, uint8_t *msg)

{


   thread** current_thread; 

   _atomic_t currentatomic;
    

   radiohandletype *radiohandleaddr; 


   void (*getaddrfp)(void) = (void (*)(void))SETCURRENTRADIOHANDLE; 
   
   current_thread = getCurrentThread(); 
   13aa2:	0e 94 65 9c 	call	0x138ca
   13aa6:	7c 01       	movw	r14, r24
   13aa8:	4f 93       	push	r20
   13aaa:	5f 93       	push	r21
   13aac:	e0 e6       	ldi	r30, 0x60	; 96
   13aae:	fa ee       	ldi	r31, 0xEA	; 234
   13ab0:	09 95       	icall
   13ab2:	e4 2f       	mov	r30, r20
   13ab4:	f5 2f       	mov	r31, r21
   13ab6:	5f 91       	pop	r21
   13ab8:	4f 91       	pop	r20
   
   radiohandleaddr = getCurrentRadioHandleAddr(); 
   
   //set up the radiohandleaddr data structures

   radiohandleaddr->port = port; 
   13aba:	8a e5       	ldi	r24, 0x5A	; 90
   13abc:	90 e0       	ldi	r25, 0x00	; 0
   13abe:	91 83       	std	Z+1, r25	; 0x01
   13ac0:	80 83       	st	Z, r24
   radiohandleaddr->maxLength = maxlength; 
   13ac2:	80 e1       	ldi	r24, 0x10	; 16
   13ac4:	82 83       	std	Z+2, r24	; 0x02
   radiohandleaddr->dataReady = &radioReceiveDataReady;
   13ac6:	8c e0       	ldi	r24, 0x0C	; 12
   13ac8:	9b e0       	ldi	r25, 0x0B	; 11
   13aca:	94 83       	std	Z+4, r25	; 0x04
   13acc:	83 83       	std	Z+3, r24	; 0x03
   radiohandleaddr->data = msg; 
   13ace:	80 ef       	ldi	r24, 0xF0	; 240
   13ad0:	9a e0       	ldi	r25, 0x0A	; 10
   13ad2:	96 83       	std	Z+6, r25	; 0x06
   13ad4:	85 83       	std	Z+5, r24	; 0x05
   radiohandleaddr->packetinfo = radioReceivePacketInfo; 
   13ad6:	8d e0       	ldi	r24, 0x0D	; 13
   13ad8:	9b e0       	ldi	r25, 0x0B	; 11
   13ada:	90 87       	std	Z+8, r25	; 0x08
   13adc:	87 83       	std	Z+7, r24	; 0x07
   radiohandleaddr->handlefunc = wakeupMe;
   13ade:	8d ea       	ldi	r24, 0xAD	; 173
   13ae0:	9d e9       	ldi	r25, 0x9D	; 157
   13ae2:	93 87       	std	Z+11, r25	; 0x0b
   13ae4:	82 87       	std	Z+10, r24	; 0x0a
   13ae6:	0f b7       	in	r16, 0x3f	; 63
   13ae8:	f8 94       	cli


   //close the interrupt     
	currentatomic = _atomic_start();
   13aea:	11 27       	eor	r17, r17

   //call the radio handle set to store the data structure into the handle vectors 
    getaddrfp();     
   13aec:	e4 e6       	ldi	r30, 0x64	; 100
   13aee:	fa ee       	ldi	r31, 0xEA	; 234
   13af0:	09 95       	icall


   //set up the current thread into sleep mode 
   (*current_thread)->state = STATE_SLEEP;
   13af2:	d7 01       	movw	r26, r14
   13af4:	ed 91       	ld	r30, X+
   13af6:	fc 91       	ld	r31, X
   13af8:	11 97       	sbiw	r26, 0x01	; 1
   13afa:	85 e0       	ldi	r24, 0x05	; 5
   13afc:	82 83       	std	Z+2, r24	; 0x02

   //set up mythread so that later can wake up this thread 
   mythread = *current_thread; 
   13afe:	8d 91       	ld	r24, X+
   13b00:	9c 91       	ld	r25, X
   13b02:	90 93 14 0b 	sts	0x0B14, r25
   13b06:	80 93 13 0b 	sts	0x0B13, r24
   13b0a:	0f bf       	out	0x3f, r16	; 63


   //open the interrupt 
   _atomic_end(currentatomic);  

    yield(); 
   13b0c:	0e 94 6f 9c 	call	0x138de
	    radioSend(20, 0, 16, msg);
//			redToggle(); 
			 
           
      }
    else 
 	  {
			    radioReceive(90, 16, msg); 
		      incomingnode = (uint16_t)msg[0]+ (((uint16_t)msg[1]) *256); 
   13b10:	20 91 f0 0a 	lds	r18, 0x0AF0
   13b14:	80 91 f1 0a 	lds	r24, 0x0AF1
   13b18:	99 27       	eor	r25, r25
   13b1a:	98 2f       	mov	r25, r24
   13b1c:	88 27       	eor	r24, r24
   13b1e:	82 0f       	add	r24, r18
   13b20:	91 1d       	adc	r25, r1
   13b22:	90 93 0b 0b 	sts	0x0B0B, r25
   13b26:	80 93 0a 0b 	sts	0x0B0A, r24
			  
			    if (incomingnode%3==0)						  
   13b2a:	63 e0       	ldi	r22, 0x03	; 3
   13b2c:	70 e0       	ldi	r23, 0x00	; 0
   13b2e:	0e 94 b6 9d 	call	0x13b6c
   13b32:	00 97       	sbiw	r24, 0x00	; 0
   13b34:	21 f4       	brne	.+8      	; 0x13b3e
void yellowToggle()
{
                          
  void (*yellowfp)() = (void (*)(void))YELLOWTOGGLEFUNCTION; 
  yellowfp();    
   13b36:	e0 e7       	ldi	r30, 0x70	; 112
   13b38:	fa ee       	ldi	r31, 0xEA	; 234
   13b3a:	09 95       	icall
   13b3c:	09 c0       	rjmp	.+18     	; 0x13b50
 				yellowToggle();
				else if (incomingnode%3==1)		
   13b3e:	01 97       	sbiw	r24, 0x01	; 1
   13b40:	21 f4       	brne	.+8      	; 0x13b4a
   13b42:	e8 e0       	ldi	r30, 0x08	; 8
   13b44:	fa ee       	ldi	r31, 0xEA	; 234
   13b46:	09 95       	icall
   13b48:	03 c0       	rjmp	.+6      	; 0x13b50
   13b4a:	e4 e0       	ldi	r30, 0x04	; 4
   13b4c:	fa ee       	ldi	r31, 0xEA	; 234
   13b4e:	09 95       	icall
					redToggle();
				else
					greenToggle(); 
				
				
	  }
	sleepThread(2000);
   13b50:	80 ed       	ldi	r24, 0xD0	; 208
   13b52:	97 e0       	ldi	r25, 0x07	; 7
   13b54:	0e 94 73 9c 	call	0x138e6
   13b58:	04 cf       	rjmp	.-504    	; 0x13962

00013b5a <wakeupMe.3281>:
   13b5a:	e0 91 13 0b 	lds	r30, 0x0B13
   13b5e:	f0 91 14 0b 	lds	r31, 0x0B14
   13b62:	82 e0       	ldi	r24, 0x02	; 2
   13b64:	82 83       	std	Z+2, r24	; 0x02
   13b66:	0e 94 87 9c 	call	0x1390e
   13b6a:	08 95       	ret

00013b6c <__udivmodhi4>:
   13b6c:	aa 1b       	sub	r26, r26
   13b6e:	bb 1b       	sub	r27, r27
   13b70:	51 e1       	ldi	r21, 0x11	; 17
   13b72:	07 c0       	rjmp	.+14     	; 0x13b82

00013b74 <__udivmodhi4_loop>:
   13b74:	aa 1f       	adc	r26, r26
   13b76:	bb 1f       	adc	r27, r27
   13b78:	a6 17       	cp	r26, r22
   13b7a:	b7 07       	cpc	r27, r23
   13b7c:	10 f0       	brcs	.+4      	; 0x13b82
   13b7e:	a6 1b       	sub	r26, r22
   13b80:	b7 0b       	sbc	r27, r23

00013b82 <__udivmodhi4_ep>:
   13b82:	88 1f       	adc	r24, r24
   13b84:	99 1f       	adc	r25, r25
   13b86:	5a 95       	dec	r21
   13b88:	a9 f7       	brne	.-22     	; 0x13b74
   13b8a:	80 95       	com	r24
   13b8c:	90 95       	com	r25
   13b8e:	bc 01       	movw	r22, r24
   13b90:	cd 01       	movw	r24, r26
   13b92:	08 95       	ret
