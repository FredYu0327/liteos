
LiteOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0000ad42  0000af16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ad42  00000000  00000000  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   000009d6  0001e000  0001e000  0000b0d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .systemcall.1 00000018  0001d400  0001d400  0000af60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .systemcall.2 00000038  0001d500  0001d500  0000af78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .systemcall.3 00000008  0001d600  0001d600  0000afb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .systemcall.4 00000008  0001d700  0001d700  0000afb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .systemcall.5 00000038  0001d800  0001d800  0000afc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .systemcall.6 00000048  0001d900  0001d900  0000aff8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .systemcall.7 00000040  0001da00  0001da00  0000b040  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .systemcall.8 00000018  0001db00  0001db00  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .systemcall.9 00000038  0001dc00  0001dc00  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .bss          000008d3  0080014a  0080014a  0000baa6  2**0
                  ALLOC
 13 .debug_aranges 000009b0  00000000  00000000  0000baa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubnames 00006840  00000000  00000000  0000c456  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_info   0001461e  00000000  00000000  00012c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00005553  00000000  00000000  000272b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000faca  00000000  00000000  0002c807  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  00003e90  00000000  00000000  0003c2d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007467  00000000  00000000  00040164  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00009141  00000000  00000000  000475cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00000b00  00000000  00000000  0005070c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      10:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      14:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      18:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      1c:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__vector_7>
      20:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      2c:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__vector_11>
      30:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__vector_12>
      34:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      38:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      3c:	0c 94 3c 36 	jmp	0x6c78	; 0x6c78 <__vector_15>
      40:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      44:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      48:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__vector_18>
      4c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      50:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      54:	0c 94 fb 1b 	jmp	0x37f6	; 0x37f6 <__vector_21>
      58:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      5c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      60:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      64:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      68:	0c 94 d3 35 	jmp	0x6ba6	; 0x6ba6 <__vector_26>
      6c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      70:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      78:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      7c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      80:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      84:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      8c:	7d 45       	sbci	r23, 0x5D	; 93
      8e:	81 45       	sbci	r24, 0x51	; 81
      90:	85 45       	sbci	r24, 0x55	; 85
      92:	89 45       	sbci	r24, 0x59	; 89
      94:	8d 45       	sbci	r24, 0x5D	; 93
      96:	91 45       	sbci	r25, 0x51	; 81
      98:	30 45       	sbci	r19, 0x50	; 80
      9a:	30 45       	sbci	r19, 0x50	; 80
      9c:	30 45       	sbci	r19, 0x50	; 80
      9e:	30 45       	sbci	r19, 0x50	; 80
      a0:	95 45       	sbci	r25, 0x55	; 85
      a2:	47 45       	sbci	r20, 0x57	; 87
      a4:	43 45       	sbci	r20, 0x53	; 83
      a6:	43 45       	sbci	r20, 0x53	; 83
      a8:	30 45       	sbci	r19, 0x50	; 80
      aa:	30 45       	sbci	r19, 0x50	; 80
      ac:	30 45       	sbci	r19, 0x50	; 80
      ae:	30 45       	sbci	r19, 0x50	; 80
      b0:	30 45       	sbci	r19, 0x50	; 80
      b2:	30 45       	sbci	r19, 0x50	; 80
      b4:	30 45       	sbci	r19, 0x50	; 80
      b6:	30 45       	sbci	r19, 0x50	; 80
      b8:	30 45       	sbci	r19, 0x50	; 80
      ba:	30 45       	sbci	r19, 0x50	; 80
      bc:	30 45       	sbci	r19, 0x50	; 80
      be:	30 45       	sbci	r19, 0x50	; 80
      c0:	30 45       	sbci	r19, 0x50	; 80
      c2:	30 45       	sbci	r19, 0x50	; 80
      c4:	30 45       	sbci	r19, 0x50	; 80
      c6:	30 45       	sbci	r19, 0x50	; 80
      c8:	4b 45       	sbci	r20, 0x5B	; 91
      ca:	4f 45       	sbci	r20, 0x5F	; 95
      cc:	53 45       	sbci	r21, 0x53	; 83
      ce:	56 45       	sbci	r21, 0x56	; 86
      d0:	5a 45       	sbci	r21, 0x5A	; 90
      d2:	30 45       	sbci	r19, 0x50	; 80
      d4:	30 45       	sbci	r19, 0x50	; 80
      d6:	30 45       	sbci	r19, 0x50	; 80
      d8:	30 45       	sbci	r19, 0x50	; 80
      da:	30 45       	sbci	r19, 0x50	; 80
      dc:	30 45       	sbci	r19, 0x50	; 80
      de:	30 45       	sbci	r19, 0x50	; 80
      e0:	30 45       	sbci	r19, 0x50	; 80
      e2:	30 45       	sbci	r19, 0x50	; 80
      e4:	30 45       	sbci	r19, 0x50	; 80
      e6:	30 45       	sbci	r19, 0x50	; 80
      e8:	30 45       	sbci	r19, 0x50	; 80
      ea:	30 45       	sbci	r19, 0x50	; 80
      ec:	30 45       	sbci	r19, 0x50	; 80
      ee:	30 45       	sbci	r19, 0x50	; 80
      f0:	5e 45       	sbci	r21, 0x5E	; 94
      f2:	30 45       	sbci	r19, 0x50	; 80
      f4:	30 45       	sbci	r19, 0x50	; 80
      f6:	30 45       	sbci	r19, 0x50	; 80
      f8:	30 45       	sbci	r19, 0x50	; 80
      fa:	30 45       	sbci	r19, 0x50	; 80
      fc:	30 45       	sbci	r19, 0x50	; 80
      fe:	30 45       	sbci	r19, 0x50	; 80
     100:	30 45       	sbci	r19, 0x50	; 80
     102:	30 45       	sbci	r19, 0x50	; 80
     104:	62 45       	sbci	r22, 0x52	; 82
     106:	30 45       	sbci	r19, 0x50	; 80
     108:	30 45       	sbci	r19, 0x50	; 80
     10a:	30 45       	sbci	r19, 0x50	; 80
     10c:	30 45       	sbci	r19, 0x50	; 80
     10e:	30 45       	sbci	r19, 0x50	; 80
     110:	30 45       	sbci	r19, 0x50	; 80
     112:	30 45       	sbci	r19, 0x50	; 80
     114:	30 45       	sbci	r19, 0x50	; 80
     116:	30 45       	sbci	r19, 0x50	; 80
     118:	66 45       	sbci	r22, 0x56	; 86
     11a:	30 45       	sbci	r19, 0x50	; 80
     11c:	30 45       	sbci	r19, 0x50	; 80
     11e:	30 45       	sbci	r19, 0x50	; 80
     120:	30 45       	sbci	r19, 0x50	; 80
     122:	30 45       	sbci	r19, 0x50	; 80
     124:	30 45       	sbci	r19, 0x50	; 80
     126:	30 45       	sbci	r19, 0x50	; 80
     128:	30 45       	sbci	r19, 0x50	; 80
     12a:	30 45       	sbci	r19, 0x50	; 80
     12c:	6a 45       	sbci	r22, 0x5A	; 90
     12e:	30 45       	sbci	r19, 0x50	; 80
     130:	30 45       	sbci	r19, 0x50	; 80
     132:	30 45       	sbci	r19, 0x50	; 80
     134:	30 45       	sbci	r19, 0x50	; 80
     136:	30 45       	sbci	r19, 0x50	; 80
     138:	30 45       	sbci	r19, 0x50	; 80
     13a:	30 45       	sbci	r19, 0x50	; 80
     13c:	30 45       	sbci	r19, 0x50	; 80
     13e:	30 45       	sbci	r19, 0x50	; 80
     140:	30 45       	sbci	r19, 0x50	; 80
     142:	30 45       	sbci	r19, 0x50	; 80
     144:	30 45       	sbci	r19, 0x50	; 80
     146:	30 45       	sbci	r19, 0x50	; 80
     148:	30 45       	sbci	r19, 0x50	; 80
     14a:	30 45       	sbci	r19, 0x50	; 80
     14c:	30 45       	sbci	r19, 0x50	; 80
     14e:	30 45       	sbci	r19, 0x50	; 80
     150:	30 45       	sbci	r19, 0x50	; 80
     152:	30 45       	sbci	r19, 0x50	; 80
     154:	30 45       	sbci	r19, 0x50	; 80
     156:	30 45       	sbci	r19, 0x50	; 80
     158:	30 45       	sbci	r19, 0x50	; 80
     15a:	30 45       	sbci	r19, 0x50	; 80
     15c:	30 45       	sbci	r19, 0x50	; 80
     15e:	30 45       	sbci	r19, 0x50	; 80
     160:	30 45       	sbci	r19, 0x50	; 80
     162:	30 45       	sbci	r19, 0x50	; 80
     164:	30 45       	sbci	r19, 0x50	; 80
     166:	30 45       	sbci	r19, 0x50	; 80
     168:	30 45       	sbci	r19, 0x50	; 80
     16a:	30 45       	sbci	r19, 0x50	; 80
     16c:	30 45       	sbci	r19, 0x50	; 80
     16e:	30 45       	sbci	r19, 0x50	; 80
     170:	30 45       	sbci	r19, 0x50	; 80
     172:	30 45       	sbci	r19, 0x50	; 80
     174:	30 45       	sbci	r19, 0x50	; 80
     176:	30 45       	sbci	r19, 0x50	; 80
     178:	30 45       	sbci	r19, 0x50	; 80
     17a:	30 45       	sbci	r19, 0x50	; 80
     17c:	6e 45       	sbci	r22, 0x5E	; 94
     17e:	30 45       	sbci	r19, 0x50	; 80
     180:	30 45       	sbci	r19, 0x50	; 80
     182:	30 45       	sbci	r19, 0x50	; 80
     184:	30 45       	sbci	r19, 0x50	; 80
     186:	30 45       	sbci	r19, 0x50	; 80
     188:	30 45       	sbci	r19, 0x50	; 80
     18a:	30 45       	sbci	r19, 0x50	; 80
     18c:	30 45       	sbci	r19, 0x50	; 80
     18e:	30 45       	sbci	r19, 0x50	; 80
     190:	72 45       	sbci	r23, 0x52	; 82
     192:	30 45       	sbci	r19, 0x50	; 80
     194:	30 45       	sbci	r19, 0x50	; 80
     196:	30 45       	sbci	r19, 0x50	; 80
     198:	30 45       	sbci	r19, 0x50	; 80
     19a:	30 45       	sbci	r19, 0x50	; 80
     19c:	30 45       	sbci	r19, 0x50	; 80
     19e:	30 45       	sbci	r19, 0x50	; 80
     1a0:	30 45       	sbci	r19, 0x50	; 80
     1a2:	30 45       	sbci	r19, 0x50	; 80
     1a4:	30 45       	sbci	r19, 0x50	; 80
     1a6:	30 45       	sbci	r19, 0x50	; 80
     1a8:	76 45       	sbci	r23, 0x56	; 86
     1aa:	30 45       	sbci	r19, 0x50	; 80
     1ac:	30 45       	sbci	r19, 0x50	; 80
     1ae:	30 45       	sbci	r19, 0x50	; 80
     1b0:	30 45       	sbci	r19, 0x50	; 80
     1b2:	30 45       	sbci	r19, 0x50	; 80
     1b4:	30 45       	sbci	r19, 0x50	; 80
     1b6:	30 45       	sbci	r19, 0x50	; 80
     1b8:	30 45       	sbci	r19, 0x50	; 80
     1ba:	7a 45       	sbci	r23, 0x5A	; 90

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	d0 e1       	ldi	r29, 0x10	; 16
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
     1c8:	11 e0       	ldi	r17, 0x01	; 1
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	e2 e4       	ldi	r30, 0x42	; 66
     1d0:	fd ea       	ldi	r31, 0xAD	; 173
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	aa 34       	cpi	r26, 0x4A	; 74
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	1a e0       	ldi	r17, 0x0A	; 10
     1e4:	aa e4       	ldi	r26, 0x4A	; 74
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	ad 31       	cpi	r26, 0x1D	; 29
     1ee:	b1 07       	cpc	r27, r17
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
     1f6:	0c 94 9f 56 	jmp	0xad3e	; 0xad3e <_exit>

000001fa <__bad_interrupt>:
     1fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fe <main>:
//The platform specific entry point. This is the place where the program gets executed. 
//Every time the system gets compiled, there should be at most one such entry point. 


int main()
{
     1fe:	af 92       	push	r10
     200:	bf 92       	push	r11
     202:	cf 92       	push	r12
     204:	df 92       	push	r13
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
	 
    //micaz specific initilizations
    //hardware ini
    LITE_SET_PIN_DIRECTIONS();
     20c:	0e 94 49 05 	call	0xa92	; 0xa92 <LITE_SET_PIN_DIRECTIONS>
    
    //sensors
    adcdriver_init_adc();
     210:	0e 94 07 1c 	call	0x380e	; 0x380e <adcdriver_init_adc>

    //kernels 
    initScheduling();
     214:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <initScheduling>
    thread_init();
     218:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <thread_init>
    
    //printing
    initUSART();
     21c:	0e 94 37 06 	call	0xc6e	; 0xc6e <initUSART>
    
    
 // printfstr("System booted!\n");

    //for the following, read from else section, which defaults to the 0xff as the MicaZ is first initied by reprogramming
    if (node_readinitstatus() == MICAZCONFIGMESSAGERECEIVED)
     220:	0e 94 3a 02 	call	0x474	; 0x474 <node_readinitstatus>
     224:	8a 30       	cpi	r24, 0x0A	; 10
     226:	09 f4       	brne	.+2      	; 0x22a <main+0x2c>
     228:	84 c0       	rjmp	.+264    	; 0x332 <main+0x134>
        Leds_greenToggle();
        Leds_yellowToggle();
        // node_setinitstatus(MICAZ_INIT_READY); 
        node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
    }
    else if (node_readinitstatus() == MICAZ_INIT_READY)
     22a:	0e 94 3a 02 	call	0x474	; 0x474 <node_readinitstatus>
     22e:	8b 30       	cpi	r24, 0x0B	; 11
     230:	09 f4       	brne	.+2      	; 0x234 <main+0x36>
     232:	b7 c0       	rjmp	.+366    	; 0x3a2 <main+0x1a4>
        /* The following is for debugging the kernel , where no reprogramming overboard is used 
         */
        
		if (JTAG_TOGGLE == 1)
		{
        Leds_redToggle();
     234:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <Leds_redToggle>
        Leds_greenToggle();
     238:	0e 94 b4 1c 	call	0x3968	; 0x3968 <Leds_greenToggle>
        Leds_yellowToggle();
     23c:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Leds_yellowToggle>
        mystrncpy(networkid, "sn01\0", 5);
     240:	86 e0       	ldi	r24, 0x06	; 6
     242:	94 e0       	ldi	r25, 0x04	; 4
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	71 e0       	ldi	r23, 0x01	; 1
     248:	45 e0       	ldi	r20, 0x05	; 5
     24a:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
        mystrncpy(filenameid, "nodeK\0", 6);
     24e:	83 ef       	ldi	r24, 0xF3	; 243
     250:	93 e0       	ldi	r25, 0x03	; 3
     252:	66 e0       	ldi	r22, 0x06	; 6
     254:	71 e0       	ldi	r23, 0x01	; 1
     256:	46 e0       	ldi	r20, 0x06	; 6
     258:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>


        CURRENT_NODE_ID = 1;
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	90 93 05 04 	sts	0x0405, r25
     264:	80 93 04 04 	sts	0x0404, r24
        nodeid = CURRENT_NODE_ID;
     268:	90 93 4b 01 	sts	0x014B, r25
     26c:	80 93 4a 01 	sts	0x014A, r24
        srand(nodeid);
     270:	0e 94 5a 56 	call	0xacb4	; 0xacb4 <srand>
        formatSystem();
     274:	0e 94 9a 20 	call	0x4134	; 0x4134 <formatSystem>
        buildRootNode();
     278:	0e 94 a0 29 	call	0x5340	; 0x5340 <buildRootNode>
        genericwriteBytes(NETWORKNAMEOFFSET, 16, networkid);
     27c:	80 e2       	ldi	r24, 0x20	; 32
     27e:	9c e0       	ldi	r25, 0x0C	; 12
     280:	60 e1       	ldi	r22, 0x10	; 16
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	46 e0       	ldi	r20, 0x06	; 6
     286:	54 e0       	ldi	r21, 0x04	; 4
     288:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <genericwriteBytes>
        genericwriteBytes(NODEFILENAMEOFFSET, 16, filenameid);
     28c:	85 e3       	ldi	r24, 0x35	; 53
     28e:	9c e0       	ldi	r25, 0x0C	; 12
     290:	60 e1       	ldi	r22, 0x10	; 16
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	43 ef       	ldi	r20, 0xF3	; 243
     296:	53 e0       	ldi	r21, 0x03	; 3
     298:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <genericwriteBytes>
        node_writenodeid(nodeid);
     29c:	80 91 4a 01 	lds	r24, 0x014A
     2a0:	90 91 4b 01 	lds	r25, 0x014B
     2a4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <node_writenodeid>
        node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
     2a8:	8a e0       	ldi	r24, 0x0A	; 10
     2aa:	0e 94 45 02 	call	0x48a	; 0x48a <node_setinitstatus>
        node_setradiochannel(20);
     2ae:	84 e1       	ldi	r24, 0x14	; 20
     2b0:	0e 94 3f 02 	call	0x47e	; 0x47e <node_setradiochannel>
        Leds_redToggle();
     2b4:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <Leds_redToggle>
        Leds_greenToggle();
     2b8:	0e 94 b4 1c 	call	0x3968	; 0x3968 <Leds_greenToggle>
        Leds_yellowToggle();
     2bc:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Leds_yellowToggle>

   
  

    //timer and radio 
    GenericTimerInit();
     2c0:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <GenericTimerInit>
    //for global timing purpose use
    GenericTimingStart(); 
     2c4:	0e 94 80 37 	call	0x6f00	; 0x6f00 <GenericTimingStart>
     
    AMStandard_Control_init();
     2c8:	0e 94 49 09 	call	0x1292	; 0x1292 <AMStandard_Control_init>
    AMStandard_Control_start();
     2cc:	0e 94 44 09 	call	0x1288	; 0x1288 <AMStandard_Control_start>
    
    initRadioHandle();
     2d0:	0e 94 ab 09 	call	0x1356	; 0x1356 <initRadioHandle>
    
    InitShell();
     2d4:	0e 94 87 3c 	call	0x790e	; 0x790e <InitShell>
    
    {
        uint8_t currentchannel;
         
         
        currentchannel = node_getradiochannel();
     2d8:	0e 94 35 02 	call	0x46a	; 0x46a <node_getradiochannel>
#ifdef RADIO_CC2420
				
        cc2420controlm_CC2420Control_TuneChannel(currentchannel);
     2dc:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <cc2420controlm_CC2420Control_TuneChannel>
       
#endif
#ifdef RADIO_CC2420
        cc2420controlm_CC2420Control_TunePower(31);
     2e0:	8f e1       	ldi	r24, 0x1F	; 31
     2e2:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <cc2420controlm_CC2420Control_TunePower>
//    

    //threadsequencelogging
    //eeprom_chunk_init();

    create_thread(ShellThread, (uint16_t *) shellbuffer,
     2e6:	88 e9       	ldi	r24, 0x98	; 152
     2e8:	95 e4       	ldi	r25, 0x45	; 69
     2ea:	66 e1       	ldi	r22, 0x16	; 22
     2ec:	77 e0       	ldi	r23, 0x07	; 7
     2ee:	44 e1       	ldi	r20, 0x14	; 20
     2f0:	58 e0       	ldi	r21, 0x08	; 8
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	0f e0       	ldi	r16, 0x0F	; 15
     2f8:	fd e0       	ldi	r31, 0x0D	; 13
     2fa:	ef 2e       	mov	r14, r31
     2fc:	f1 e0       	ldi	r31, 0x01	; 1
     2fe:	ff 2e       	mov	r15, r31
     300:	cc 24       	eor	r12, r12
     302:	dd 24       	eor	r13, r13
     304:	aa 24       	eor	r10, r10
     306:	bb 24       	eor	r11, r11
     308:	0e 94 22 19 	call	0x3244	; 0x3244 <create_thread>

    //trace program must be thread 1 to enable the tracing functionality. 
    //create_thread(tracemain, (uint16_t *) tracebuffer,
      //           STACK_TOP(tracebuffer), 0, 15, "trace", 0, 0);
    
	  create_thread(blink, (uint16_t *) blinkbuffer,
     30c:	87 e1       	ldi	r24, 0x17	; 23
     30e:	95 e5       	ldi	r25, 0x55	; 85
     310:	6f e7       	ldi	r22, 0x7F	; 127
     312:	79 e0       	ldi	r23, 0x09	; 9
     314:	43 e1       	ldi	r20, 0x13	; 19
     316:	5a e0       	ldi	r21, 0x0A	; 10
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	e6 e1       	ldi	r30, 0x16	; 22
     31e:	ee 2e       	mov	r14, r30
     320:	e1 e0       	ldi	r30, 0x01	; 1
     322:	fe 2e       	mov	r15, r30
     324:	0e 94 22 19 	call	0x3244	; 0x3244 <create_thread>
    // sbi(MCUCR, SE);
   
    //GenericTimerStart(15, TIMER_REPEAT, 100); 


    _avr_enable_interrupt();
     328:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_avr_enable_interrupt>

    while (1)
    {
        runNextTask();
     32c:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <runNextTask>
     330:	fd cf       	rjmp	.-6      	; 0x32c <main+0x12e>

    //for the following, read from else section, which defaults to the 0xff as the MicaZ is first initied by reprogramming
    if (node_readinitstatus() == MICAZCONFIGMESSAGERECEIVED)
    {
        //current_node_id is expected to be platform independent variable 
        CURRENT_NODE_ID = node_readnodeid();
     332:	0e 94 4b 02 	call	0x496	; 0x496 <node_readnodeid>
     336:	90 93 05 04 	sts	0x0405, r25
     33a:	80 93 04 04 	sts	0x0404, r24
        srand(CURRENT_NODE_ID);
     33e:	0e 94 5a 56 	call	0xacb4	; 0xacb4 <srand>
        genericreadBytes(NETWORKNAMEOFFSET, 16, networkid);
     342:	80 e2       	ldi	r24, 0x20	; 32
     344:	9c e0       	ldi	r25, 0x0C	; 12
     346:	60 e1       	ldi	r22, 0x10	; 16
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	46 e0       	ldi	r20, 0x06	; 6
     34c:	54 e0       	ldi	r21, 0x04	; 4
     34e:	0e 94 66 1d 	call	0x3acc	; 0x3acc <genericreadBytes>
        genericreadBytes(NODEFILENAMEOFFSET, 16, filenameid);
     352:	85 e3       	ldi	r24, 0x35	; 53
     354:	9c e0       	ldi	r25, 0x0C	; 12
     356:	60 e1       	ldi	r22, 0x10	; 16
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	43 ef       	ldi	r20, 0xF3	; 243
     35c:	53 e0       	ldi	r21, 0x03	; 3
     35e:	0e 94 66 1d 	call	0x3acc	; 0x3acc <genericreadBytes>
        nodeid = CURRENT_NODE_ID;
     362:	80 91 04 04 	lds	r24, 0x0404
     366:	90 91 05 04 	lds	r25, 0x0405
     36a:	90 93 4b 01 	sts	0x014B, r25
     36e:	80 93 4a 01 	sts	0x014A, r24
        networkid[16] = '\0';
     372:	10 92 16 04 	sts	0x0416, r1
        filenameid[16] = '\0';
     376:	10 92 03 04 	sts	0x0403, r1
        Leds_redToggle();
     37a:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <Leds_redToggle>
        Leds_greenToggle();
     37e:	0e 94 b4 1c 	call	0x3968	; 0x3968 <Leds_greenToggle>
        Leds_yellowToggle();
     382:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Leds_yellowToggle>
        formatSystem();
     386:	0e 94 9a 20 	call	0x4134	; 0x4134 <formatSystem>
        buildRootNode();
     38a:	0e 94 a0 29 	call	0x5340	; 0x5340 <buildRootNode>
        Leds_redToggle();
     38e:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <Leds_redToggle>
        Leds_greenToggle();
     392:	0e 94 b4 1c 	call	0x3968	; 0x3968 <Leds_greenToggle>
        Leds_yellowToggle();
     396:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Leds_yellowToggle>
        // node_setinitstatus(MICAZ_INIT_READY); 
        node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
     39a:	8a e0       	ldi	r24, 0x0A	; 10
     39c:	0e 94 45 02 	call	0x48a	; 0x48a <node_setinitstatus>
     3a0:	8f cf       	rjmp	.-226    	; 0x2c0 <main+0xc2>
    }
    else if (node_readinitstatus() == MICAZ_INIT_READY)
    {
        CURRENT_NODE_ID = node_readnodeid();
     3a2:	0e 94 4b 02 	call	0x496	; 0x496 <node_readnodeid>
     3a6:	90 93 05 04 	sts	0x0405, r25
     3aa:	80 93 04 04 	sts	0x0404, r24
        srand(CURRENT_NODE_ID);
     3ae:	0e 94 5a 56 	call	0xacb4	; 0xacb4 <srand>
        genericreadBytes(NETWORKNAMEOFFSET, 16, networkid);
     3b2:	80 e2       	ldi	r24, 0x20	; 32
     3b4:	9c e0       	ldi	r25, 0x0C	; 12
     3b6:	60 e1       	ldi	r22, 0x10	; 16
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	46 e0       	ldi	r20, 0x06	; 6
     3bc:	54 e0       	ldi	r21, 0x04	; 4
     3be:	0e 94 66 1d 	call	0x3acc	; 0x3acc <genericreadBytes>
        genericreadBytes(NODEFILENAMEOFFSET, 16, filenameid);
     3c2:	85 e3       	ldi	r24, 0x35	; 53
     3c4:	9c e0       	ldi	r25, 0x0C	; 12
     3c6:	60 e1       	ldi	r22, 0x10	; 16
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	43 ef       	ldi	r20, 0xF3	; 243
     3cc:	53 e0       	ldi	r21, 0x03	; 3
     3ce:	0e 94 66 1d 	call	0x3acc	; 0x3acc <genericreadBytes>
        nodeid = CURRENT_NODE_ID;
     3d2:	80 91 04 04 	lds	r24, 0x0404
     3d6:	90 91 05 04 	lds	r25, 0x0405
     3da:	90 93 4b 01 	sts	0x014B, r25
     3de:	80 93 4a 01 	sts	0x014A, r24
        networkid[16] = '\0';
     3e2:	10 92 16 04 	sts	0x0416, r1
        filenameid[16] = '\0';
     3e6:	10 92 03 04 	sts	0x0403, r1
        Leds_redToggle();
     3ea:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <Leds_redToggle>
        Leds_greenToggle();
     3ee:	0e 94 b4 1c 	call	0x3968	; 0x3968 <Leds_greenToggle>
        Leds_yellowToggle();
     3f2:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Leds_yellowToggle>
        //formatSystem();
        //buildRootNode();
        //buildDeviceDirectory();
        readVectorFlashFromExternalStorage();
     3f6:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <readVectorFlashFromExternalStorage>
        readVectorNodeFromExternalStorage();
     3fa:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <readVectorNodeFromExternalStorage>
        Leds_redToggle();
     3fe:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <Leds_redToggle>
        Leds_greenToggle();
     402:	0e 94 b4 1c 	call	0x3968	; 0x3968 <Leds_greenToggle>
        Leds_yellowToggle();
     406:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Leds_yellowToggle>
     40a:	5a cf       	rjmp	.-332    	; 0x2c0 <main+0xc2>

0000040c <initCommandReceived>:

//This function receives init command in MicaZ installation task, and sets up the node status for reboot, so that the fiel system will
//be reformatted 

void initCommandReceived(uint8_t * receivebuffer)
{
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	8c 01       	movw	r16, r24
    uint8_t i;

    genericwriteBytes(NETWORKNAMEOFFSET, 16, &receivebuffer[0]);
     412:	80 e2       	ldi	r24, 0x20	; 32
     414:	9c e0       	ldi	r25, 0x0C	; 12
     416:	60 e1       	ldi	r22, 0x10	; 16
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	a8 01       	movw	r20, r16
     41c:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <genericwriteBytes>
    genericwriteBytes(NODEFILENAMEOFFSET, 15, &receivebuffer[16]);
     420:	a8 01       	movw	r20, r16
     422:	40 5f       	subi	r20, 0xF0	; 240
     424:	5f 4f       	sbci	r21, 0xFF	; 255
     426:	85 e3       	ldi	r24, 0x35	; 53
     428:	9c e0       	ldi	r25, 0x0C	; 12
     42a:	6f e0       	ldi	r22, 0x0F	; 15
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <genericwriteBytes>
    node_setradiochannel(receivebuffer[31]);
     432:	f8 01       	movw	r30, r16
     434:	87 8d       	ldd	r24, Z+31	; 0x1f
     436:	0e 94 3f 02 	call	0x47e	; 0x47e <node_setradiochannel>
    node_writenodeid(receivebuffer[32]);
     43a:	f8 01       	movw	r30, r16
     43c:	80 a1       	ldd	r24, Z+32	; 0x20
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 50 02 	call	0x4a0	; 0x4a0 <node_writenodeid>
    node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
     444:	8a e0       	ldi	r24, 0x0A	; 10
     446:	0e 94 45 02 	call	0x48a	; 0x48a <node_setinitstatus>
     44a:	00 e0       	ldi	r16, 0x00	; 0
    for (i = 0; i < 32; i++)
    {
        printfstr('\0');
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <printfstr>
    genericwriteBytes(NETWORKNAMEOFFSET, 16, &receivebuffer[0]);
    genericwriteBytes(NODEFILENAMEOFFSET, 15, &receivebuffer[16]);
    node_setradiochannel(receivebuffer[31]);
    node_writenodeid(receivebuffer[32]);
    node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
    for (i = 0; i < 32; i++)
     454:	0f 5f       	subi	r16, 0xFF	; 255
     456:	00 32       	cpi	r16, 0x20	; 32
     458:	c9 f7       	brne	.-14     	; 0x44c <initCommandReceived+0x40>
    {
        printfstr('\0');
    }
    avr_resetNode();
     45a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <avr_resetNode>
}
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	08 95       	ret

00000464 <node_readnodestring>:


char *node_readnodestring()
{
  return filenameid; 	
}
     464:	83 ef       	ldi	r24, 0xF3	; 243
     466:	93 e0       	ldi	r25, 0x03	; 3
     468:	08 95       	ret

0000046a <node_getradiochannel>:
}

//-------------------------------------------------------------------------
uint8_t node_getradiochannel()
{
    return read8uint(NODECHANNELOFFSET);
     46a:	84 e5       	ldi	r24, 0x54	; 84
     46c:	9c e0       	ldi	r25, 0x0C	; 12
     46e:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <read8uint>
}
     472:	08 95       	ret

00000474 <node_readinitstatus>:
}

//-------------------------------------------------------------------------
uint8_t node_readinitstatus()
{
    return read8uint(NODESTATUSOFFSET);
     474:	82 e5       	ldi	r24, 0x52	; 82
     476:	9c e0       	ldi	r25, 0x0C	; 12
     478:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <read8uint>
}
     47c:	08 95       	ret

0000047e <node_setradiochannel>:

//-------------------------------------------------------------------------
void node_setradiochannel(uint8_t channel)
{
     47e:	68 2f       	mov	r22, r24
    write8uint(NODECHANNELOFFSET, channel);
     480:	84 e5       	ldi	r24, 0x54	; 84
     482:	9c e0       	ldi	r25, 0x0C	; 12
     484:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <write8uint>
}
     488:	08 95       	ret

0000048a <node_setinitstatus>:
    return read16uint(NODEIDOFFSET);
}

//-------------------------------------------------------------------------
void node_setinitstatus(uint8_t status)
{
     48a:	68 2f       	mov	r22, r24
    write8uint(NODESTATUSOFFSET, status);
     48c:	82 e5       	ldi	r24, 0x52	; 82
     48e:	9c e0       	ldi	r25, 0x0C	; 12
     490:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <write8uint>
}
     494:	08 95       	ret

00000496 <node_readnodeid>:
}

//-------------------------------------------------------------------------
uint16_t node_readnodeid()
{
    return read16uint(NODEIDOFFSET);
     496:	8e e4       	ldi	r24, 0x4E	; 78
     498:	9c e0       	ldi	r25, 0x0C	; 12
     49a:	0e 94 57 1d 	call	0x3aae	; 0x3aae <read16uint>
}
     49e:	08 95       	ret

000004a0 <node_writenodeid>:
  return filenameid; 	
}


void node_writenodeid(uint16_t nodeid)
{
     4a0:	bc 01       	movw	r22, r24
    write16uint(NODEIDOFFSET, nodeid);
     4a2:	8e e4       	ldi	r24, 0x4E	; 78
     4a4:	9c e0       	ldi	r25, 0x0C	; 12
     4a6:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <write16uint>
}
     4aa:	08 95       	ret

000004ac <wait_cycle>:
#include "avrhardware.h"
void wait_cycle()
{
    asm volatile ("nop");
     4ac:	00 00       	nop
    asm volatile ("nop");
     4ae:	00 00       	nop
}
     4b0:	08 95       	ret

000004b2 <_atomic_sleep>:

//-------------------------------------------------------------------------
inline void _atomic_sleep()
{
    /* Atomically enable interrupts and sleep */
    sei();                      // Make sure interrupts are on, so we can wake up!
     4b2:	78 94       	sei
    asm volatile ("sleep");
     4b4:	88 95       	sleep
#include "avrhardware.h"
void wait_cycle()
{
    asm volatile ("nop");
     4b6:	00 00       	nop
    asm volatile ("nop");
     4b8:	00 00       	nop
    /* Atomically enable interrupts and sleep */
    sei();                      // Make sure interrupts are on, so we can wake up!
    asm volatile ("sleep");

    wait_cycle();
}
     4ba:	08 95       	ret

000004bc <_avr_sleep>:

//-------------------------------------------------------------------------
inline void _avr_sleep()
{
    asm volatile ("sleep");
     4bc:	88 95       	sleep
}
     4be:	08 95       	ret

000004c0 <_avr_enable_interrupt>:

//-------------------------------------------------------------------------
inline void _avr_enable_interrupt()
{
    sei();
     4c0:	78 94       	sei
}
     4c2:	08 95       	ret

000004c4 <_avr_disable_interrupt>:

//-------------------------------------------------------------------------
inline void _avr_disable_interrupt()
{
    cli();
     4c4:	f8 94       	cli
}
     4c6:	08 95       	ret

000004c8 <_atomic_start_avr>:

//-------------------------------------------------------------------------
_atomic_t _atomic_start_avr(void)
{
    _atomic_t result = inp(SREG);
     4c8:	8f b7       	in	r24, 0x3f	; 63

    cli();
     4ca:	f8 94       	cli
    return result;
}
     4cc:	08 95       	ret

000004ce <_atomic_end_avr>:

//-------------------------------------------------------------------------
void _atomic_end_avr(_atomic_t oldSreg)
{
    outp(oldSreg, SREG);
     4ce:	8f bf       	out	0x3f, r24	; 63
}
     4d0:	08 95       	ret

000004d2 <avr_resetNode>:
{
  //  asm volatile ("ldi	r30, 0x00"::);
  //  asm volatile ("ldi	r31, 0x00"::);
  //  asm volatile ("icall"::);
  
    __asm__ __volatile__("ldi	r30, 0x98" ::); 
     4d2:	e8 e9       	ldi	r30, 0x98	; 152
    __asm__ __volatile__("ldi	r31, 0xEA" ::);
     4d4:	fa ee       	ldi	r31, 0xEA	; 234
    __asm__ __volatile__("icall" ::);
     4d6:	09 95       	icall
}
     4d8:	08 95       	ret

000004da <LITE_wait_250ns>:



void inline LITE_wait_250ns()
{
    asm volatile ("nop"::);
     4da:	00 00       	nop
    asm volatile ("nop"::);
     4dc:	00 00       	nop
}
     4de:	08 95       	ret

000004e0 <LITE_uwait>:

//-------------------------------------------------------------------------
void inline LITE_uwait(int u_sec)
{
    while (u_sec > 0)
     4e0:	18 16       	cp	r1, r24
     4e2:	19 06       	cpc	r1, r25
     4e4:	64 f4       	brge	.+24     	; 0x4fe <LITE_uwait+0x1e>
	...
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);

        u_sec--;
     4f6:	01 97       	sbiw	r24, 0x01	; 1
}

//-------------------------------------------------------------------------
void inline LITE_uwait(int u_sec)
{
    while (u_sec > 0)
     4f8:	18 16       	cp	r1, r24
     4fa:	19 06       	cpc	r1, r25
     4fc:	a4 f3       	brlt	.-24     	; 0x4e6 <LITE_uwait+0x6>
     4fe:	08 95       	ret

00000500 <LITE_SET_RED_LED_PIN>:
        u_sec--;
    }
}

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
     500:	da 9a       	sbi	0x1b, 2	; 27
     502:	08 95       	ret

00000504 <LITE_CLR_RED_LED_PIN>:
     504:	da 98       	cbi	0x1b, 2	; 27
     506:	08 95       	ret

00000508 <LITE_READ_RED_LED_PIN>:
     508:	29 b3       	in	r18, 0x19	; 25
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	36 95       	lsr	r19
     50e:	27 95       	ror	r18
     510:	36 95       	lsr	r19
     512:	27 95       	ror	r18
     514:	21 70       	andi	r18, 0x01	; 1
     516:	30 70       	andi	r19, 0x00	; 0
     518:	c9 01       	movw	r24, r18
     51a:	08 95       	ret

0000051c <LITE_MAKE_RED_LED_OUTPUT>:
     51c:	d2 9a       	sbi	0x1a, 2	; 26
     51e:	08 95       	ret

00000520 <LITE_MAKE_RED_LED_INPUT>:
     520:	d2 98       	cbi	0x1a, 2	; 26
     522:	08 95       	ret

00000524 <LITE_SET_GREEN_LED_PIN>:
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
     524:	d9 9a       	sbi	0x1b, 1	; 27
     526:	08 95       	ret

00000528 <LITE_CLR_GREEN_LED_PIN>:
     528:	d9 98       	cbi	0x1b, 1	; 27
     52a:	08 95       	ret

0000052c <LITE_READ_GREEN_LED_PIN>:
     52c:	29 b3       	in	r18, 0x19	; 25
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	36 95       	lsr	r19
     532:	27 95       	ror	r18
     534:	21 70       	andi	r18, 0x01	; 1
     536:	30 70       	andi	r19, 0x00	; 0
     538:	c9 01       	movw	r24, r18
     53a:	08 95       	ret

0000053c <LITE_MAKE_GREEN_LED_OUTPUT>:
     53c:	d1 9a       	sbi	0x1a, 1	; 26
     53e:	08 95       	ret

00000540 <LITE_MAKE_GREEN_LED_INPUT>:
     540:	d1 98       	cbi	0x1a, 1	; 26
     542:	08 95       	ret

00000544 <LITE_SET_YELLOW_LED_PIN>:
LITE_ASSIGN_PIN(YELLOW_LED, A, 0);
     544:	d8 9a       	sbi	0x1b, 0	; 27
     546:	08 95       	ret

00000548 <LITE_CLR_YELLOW_LED_PIN>:
     548:	d8 98       	cbi	0x1b, 0	; 27
     54a:	08 95       	ret

0000054c <LITE_READ_YELLOW_LED_PIN>:
     54c:	29 b3       	in	r18, 0x19	; 25
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	21 70       	andi	r18, 0x01	; 1
     552:	30 70       	andi	r19, 0x00	; 0
     554:	c9 01       	movw	r24, r18
     556:	08 95       	ret

00000558 <LITE_MAKE_YELLOW_LED_OUTPUT>:
     558:	d0 9a       	sbi	0x1a, 0	; 26
     55a:	08 95       	ret

0000055c <LITE_MAKE_YELLOW_LED_INPUT>:
     55c:	d0 98       	cbi	0x1a, 0	; 26
     55e:	08 95       	ret

00000560 <LITE_SET_SERIAL_ID_PIN>:
LITE_ASSIGN_PIN(SERIAL_ID, A, 4);
     560:	dc 9a       	sbi	0x1b, 4	; 27
     562:	08 95       	ret

00000564 <LITE_CLR_SERIAL_ID_PIN>:
     564:	dc 98       	cbi	0x1b, 4	; 27
     566:	08 95       	ret

00000568 <LITE_READ_SERIAL_ID_PIN>:
     568:	29 b3       	in	r18, 0x19	; 25
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	32 95       	swap	r19
     56e:	22 95       	swap	r18
     570:	2f 70       	andi	r18, 0x0F	; 15
     572:	23 27       	eor	r18, r19
     574:	3f 70       	andi	r19, 0x0F	; 15
     576:	23 27       	eor	r18, r19
     578:	21 70       	andi	r18, 0x01	; 1
     57a:	30 70       	andi	r19, 0x00	; 0
     57c:	c9 01       	movw	r24, r18
     57e:	08 95       	ret

00000580 <LITE_MAKE_SERIAL_ID_OUTPUT>:
     580:	d4 9a       	sbi	0x1a, 4	; 26
     582:	08 95       	ret

00000584 <LITE_MAKE_SERIAL_ID_INPUT>:
     584:	d4 98       	cbi	0x1a, 4	; 26
     586:	08 95       	ret

00000588 <LITE_SET_BAT_MON_PIN>:
LITE_ASSIGN_PIN(BAT_MON, A, 5);
     588:	dd 9a       	sbi	0x1b, 5	; 27
     58a:	08 95       	ret

0000058c <LITE_CLR_BAT_MON_PIN>:
     58c:	dd 98       	cbi	0x1b, 5	; 27
     58e:	08 95       	ret

00000590 <LITE_READ_BAT_MON_PIN>:
     590:	29 b3       	in	r18, 0x19	; 25
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	36 95       	lsr	r19
     596:	27 95       	ror	r18
     598:	32 95       	swap	r19
     59a:	22 95       	swap	r18
     59c:	2f 70       	andi	r18, 0x0F	; 15
     59e:	23 27       	eor	r18, r19
     5a0:	3f 70       	andi	r19, 0x0F	; 15
     5a2:	23 27       	eor	r18, r19
     5a4:	21 70       	andi	r18, 0x01	; 1
     5a6:	30 70       	andi	r19, 0x00	; 0
     5a8:	c9 01       	movw	r24, r18
     5aa:	08 95       	ret

000005ac <LITE_MAKE_BAT_MON_OUTPUT>:
     5ac:	d5 9a       	sbi	0x1a, 5	; 26
     5ae:	08 95       	ret

000005b0 <LITE_MAKE_BAT_MON_INPUT>:
     5b0:	d5 98       	cbi	0x1a, 5	; 26
     5b2:	08 95       	ret

000005b4 <LITE_SET_THERM_PWR_PIN>:
LITE_ASSIGN_PIN(THERM_PWR, A, 7);
     5b4:	df 9a       	sbi	0x1b, 7	; 27
     5b6:	08 95       	ret

000005b8 <LITE_CLR_THERM_PWR_PIN>:
     5b8:	df 98       	cbi	0x1b, 7	; 27
     5ba:	08 95       	ret

000005bc <LITE_READ_THERM_PWR_PIN>:
     5bc:	29 b3       	in	r18, 0x19	; 25
     5be:	33 27       	eor	r19, r19
     5c0:	27 fd       	sbrc	r18, 7
     5c2:	30 95       	com	r19
     5c4:	22 27       	eor	r18, r18
     5c6:	33 0f       	add	r19, r19
     5c8:	22 1f       	adc	r18, r18
     5ca:	33 27       	eor	r19, r19
     5cc:	c9 01       	movw	r24, r18
     5ce:	08 95       	ret

000005d0 <LITE_MAKE_THERM_PWR_OUTPUT>:
     5d0:	d7 9a       	sbi	0x1a, 7	; 26
     5d2:	08 95       	ret

000005d4 <LITE_MAKE_THERM_PWR_INPUT>:
     5d4:	d7 98       	cbi	0x1a, 7	; 26
     5d6:	08 95       	ret

000005d8 <LITE_SET_FLASH_SELECT_PIN>:


// Flash assignments
LITE_ASSIGN_PIN(FLASH_SELECT, A, 3);
     5d8:	db 9a       	sbi	0x1b, 3	; 27
     5da:	08 95       	ret

000005dc <LITE_CLR_FLASH_SELECT_PIN>:
     5dc:	db 98       	cbi	0x1b, 3	; 27
     5de:	08 95       	ret

000005e0 <LITE_READ_FLASH_SELECT_PIN>:
     5e0:	29 b3       	in	r18, 0x19	; 25
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	36 95       	lsr	r19
     5e6:	27 95       	ror	r18
     5e8:	36 95       	lsr	r19
     5ea:	27 95       	ror	r18
     5ec:	36 95       	lsr	r19
     5ee:	27 95       	ror	r18
     5f0:	21 70       	andi	r18, 0x01	; 1
     5f2:	30 70       	andi	r19, 0x00	; 0
     5f4:	c9 01       	movw	r24, r18
     5f6:	08 95       	ret

000005f8 <LITE_MAKE_FLASH_SELECT_OUTPUT>:
     5f8:	d3 9a       	sbi	0x1a, 3	; 26
     5fa:	08 95       	ret

000005fc <LITE_MAKE_FLASH_SELECT_INPUT>:
     5fc:	d3 98       	cbi	0x1a, 3	; 26
     5fe:	08 95       	ret

00000600 <LITE_SET_FLASH_CLK_PIN>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
     600:	95 9a       	sbi	0x12, 5	; 18
     602:	08 95       	ret

00000604 <LITE_CLR_FLASH_CLK_PIN>:
     604:	95 98       	cbi	0x12, 5	; 18
     606:	08 95       	ret

00000608 <LITE_READ_FLASH_CLK_PIN>:
     608:	20 b3       	in	r18, 0x10	; 16
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	36 95       	lsr	r19
     60e:	27 95       	ror	r18
     610:	32 95       	swap	r19
     612:	22 95       	swap	r18
     614:	2f 70       	andi	r18, 0x0F	; 15
     616:	23 27       	eor	r18, r19
     618:	3f 70       	andi	r19, 0x0F	; 15
     61a:	23 27       	eor	r18, r19
     61c:	21 70       	andi	r18, 0x01	; 1
     61e:	30 70       	andi	r19, 0x00	; 0
     620:	c9 01       	movw	r24, r18
     622:	08 95       	ret

00000624 <LITE_MAKE_FLASH_CLK_OUTPUT>:
     624:	8d 9a       	sbi	0x11, 5	; 17
     626:	08 95       	ret

00000628 <LITE_MAKE_FLASH_CLK_INPUT>:
     628:	8d 98       	cbi	0x11, 5	; 17
     62a:	08 95       	ret

0000062c <LITE_SET_FLASH_OUT_PIN>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
     62c:	93 9a       	sbi	0x12, 3	; 18
     62e:	08 95       	ret

00000630 <LITE_CLR_FLASH_OUT_PIN>:
     630:	93 98       	cbi	0x12, 3	; 18
     632:	08 95       	ret

00000634 <LITE_READ_FLASH_OUT_PIN>:
     634:	20 b3       	in	r18, 0x10	; 16
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	36 95       	lsr	r19
     63a:	27 95       	ror	r18
     63c:	36 95       	lsr	r19
     63e:	27 95       	ror	r18
     640:	36 95       	lsr	r19
     642:	27 95       	ror	r18
     644:	21 70       	andi	r18, 0x01	; 1
     646:	30 70       	andi	r19, 0x00	; 0
     648:	c9 01       	movw	r24, r18
     64a:	08 95       	ret

0000064c <LITE_MAKE_FLASH_OUT_OUTPUT>:
     64c:	8b 9a       	sbi	0x11, 3	; 17
     64e:	08 95       	ret

00000650 <LITE_MAKE_FLASH_OUT_INPUT>:
     650:	8b 98       	cbi	0x11, 3	; 17
     652:	08 95       	ret

00000654 <LITE_SET_FLASH_IN_PIN>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
     654:	92 9a       	sbi	0x12, 2	; 18
     656:	08 95       	ret

00000658 <LITE_CLR_FLASH_IN_PIN>:
     658:	92 98       	cbi	0x12, 2	; 18
     65a:	08 95       	ret

0000065c <LITE_READ_FLASH_IN_PIN>:
     65c:	20 b3       	in	r18, 0x10	; 16
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	36 95       	lsr	r19
     662:	27 95       	ror	r18
     664:	36 95       	lsr	r19
     666:	27 95       	ror	r18
     668:	21 70       	andi	r18, 0x01	; 1
     66a:	30 70       	andi	r19, 0x00	; 0
     66c:	c9 01       	movw	r24, r18
     66e:	08 95       	ret

00000670 <LITE_MAKE_FLASH_IN_OUTPUT>:
     670:	8a 9a       	sbi	0x11, 2	; 17
     672:	08 95       	ret

00000674 <LITE_MAKE_FLASH_IN_INPUT>:
     674:	8a 98       	cbi	0x11, 2	; 17
     676:	08 95       	ret

00000678 <LITE_SET_INT0_PIN>:
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
     678:	1c 9a       	sbi	0x03, 4	; 3
     67a:	08 95       	ret

0000067c <LITE_CLR_INT0_PIN>:
     67c:	1c 98       	cbi	0x03, 4	; 3
     67e:	08 95       	ret

00000680 <LITE_READ_INT0_PIN>:
     680:	21 b1       	in	r18, 0x01	; 1
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	32 95       	swap	r19
     686:	22 95       	swap	r18
     688:	2f 70       	andi	r18, 0x0F	; 15
     68a:	23 27       	eor	r18, r19
     68c:	3f 70       	andi	r19, 0x0F	; 15
     68e:	23 27       	eor	r18, r19
     690:	21 70       	andi	r18, 0x01	; 1
     692:	30 70       	andi	r19, 0x00	; 0
     694:	c9 01       	movw	r24, r18
     696:	08 95       	ret

00000698 <LITE_MAKE_INT0_OUTPUT>:
     698:	14 9a       	sbi	0x02, 4	; 2
     69a:	08 95       	ret

0000069c <LITE_MAKE_INT0_INPUT>:
     69c:	14 98       	cbi	0x02, 4	; 2
     69e:	08 95       	ret

000006a0 <LITE_SET_INT1_PIN>:
LITE_ASSIGN_PIN(INT1, E, 5);
     6a0:	1d 9a       	sbi	0x03, 5	; 3
     6a2:	08 95       	ret

000006a4 <LITE_CLR_INT1_PIN>:
     6a4:	1d 98       	cbi	0x03, 5	; 3
     6a6:	08 95       	ret

000006a8 <LITE_READ_INT1_PIN>:
     6a8:	21 b1       	in	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	36 95       	lsr	r19
     6ae:	27 95       	ror	r18
     6b0:	32 95       	swap	r19
     6b2:	22 95       	swap	r18
     6b4:	2f 70       	andi	r18, 0x0F	; 15
     6b6:	23 27       	eor	r18, r19
     6b8:	3f 70       	andi	r19, 0x0F	; 15
     6ba:	23 27       	eor	r18, r19
     6bc:	21 70       	andi	r18, 0x01	; 1
     6be:	30 70       	andi	r19, 0x00	; 0
     6c0:	c9 01       	movw	r24, r18
     6c2:	08 95       	ret

000006c4 <LITE_MAKE_INT1_OUTPUT>:
     6c4:	15 9a       	sbi	0x02, 5	; 2
     6c6:	08 95       	ret

000006c8 <LITE_MAKE_INT1_INPUT>:
     6c8:	15 98       	cbi	0x02, 5	; 2
     6ca:	08 95       	ret

000006cc <LITE_SET_INT2_PIN>:
LITE_ASSIGN_PIN(INT2, E, 6);
     6cc:	1e 9a       	sbi	0x03, 6	; 3
     6ce:	08 95       	ret

000006d0 <LITE_CLR_INT2_PIN>:
     6d0:	1e 98       	cbi	0x03, 6	; 3
     6d2:	08 95       	ret

000006d4 <LITE_READ_INT2_PIN>:
     6d4:	21 b1       	in	r18, 0x01	; 1
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	00 24       	eor	r0, r0
     6da:	22 0f       	add	r18, r18
     6dc:	33 1f       	adc	r19, r19
     6de:	00 1c       	adc	r0, r0
     6e0:	22 0f       	add	r18, r18
     6e2:	33 1f       	adc	r19, r19
     6e4:	00 1c       	adc	r0, r0
     6e6:	23 2f       	mov	r18, r19
     6e8:	30 2d       	mov	r19, r0
     6ea:	21 70       	andi	r18, 0x01	; 1
     6ec:	30 70       	andi	r19, 0x00	; 0
     6ee:	c9 01       	movw	r24, r18
     6f0:	08 95       	ret

000006f2 <LITE_MAKE_INT2_OUTPUT>:
     6f2:	16 9a       	sbi	0x02, 6	; 2
     6f4:	08 95       	ret

000006f6 <LITE_MAKE_INT2_INPUT>:
     6f6:	16 98       	cbi	0x02, 6	; 2
     6f8:	08 95       	ret

000006fa <LITE_SET_INT3_PIN>:
LITE_ASSIGN_PIN(INT3, E, 7);
     6fa:	1f 9a       	sbi	0x03, 7	; 3
     6fc:	08 95       	ret

000006fe <LITE_CLR_INT3_PIN>:
     6fe:	1f 98       	cbi	0x03, 7	; 3
     700:	08 95       	ret

00000702 <LITE_READ_INT3_PIN>:
     702:	21 b1       	in	r18, 0x01	; 1
     704:	33 27       	eor	r19, r19
     706:	27 fd       	sbrc	r18, 7
     708:	30 95       	com	r19
     70a:	22 27       	eor	r18, r18
     70c:	33 0f       	add	r19, r19
     70e:	22 1f       	adc	r18, r18
     710:	33 27       	eor	r19, r19
     712:	c9 01       	movw	r24, r18
     714:	08 95       	ret

00000716 <LITE_MAKE_INT3_OUTPUT>:
     716:	17 9a       	sbi	0x02, 7	; 2
     718:	08 95       	ret

0000071a <LITE_MAKE_INT3_INPUT>:
     71a:	17 98       	cbi	0x02, 7	; 2
     71c:	08 95       	ret

0000071e <LITE_SET_MOSI_PIN>:
// spibus assignments 
LITE_ASSIGN_PIN(MOSI, B, 2);
     71e:	c2 9a       	sbi	0x18, 2	; 24
     720:	08 95       	ret

00000722 <LITE_CLR_MOSI_PIN>:
     722:	c2 98       	cbi	0x18, 2	; 24
     724:	08 95       	ret

00000726 <LITE_READ_MOSI_PIN>:
     726:	26 b3       	in	r18, 0x16	; 22
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	36 95       	lsr	r19
     72c:	27 95       	ror	r18
     72e:	36 95       	lsr	r19
     730:	27 95       	ror	r18
     732:	21 70       	andi	r18, 0x01	; 1
     734:	30 70       	andi	r19, 0x00	; 0
     736:	c9 01       	movw	r24, r18
     738:	08 95       	ret

0000073a <LITE_MAKE_MOSI_OUTPUT>:
     73a:	ba 9a       	sbi	0x17, 2	; 23
     73c:	08 95       	ret

0000073e <LITE_MAKE_MOSI_INPUT>:
     73e:	ba 98       	cbi	0x17, 2	; 23
     740:	08 95       	ret

00000742 <LITE_SET_MISO_PIN>:
LITE_ASSIGN_PIN(MISO, B, 3);
     742:	c3 9a       	sbi	0x18, 3	; 24
     744:	08 95       	ret

00000746 <LITE_CLR_MISO_PIN>:
     746:	c3 98       	cbi	0x18, 3	; 24
     748:	08 95       	ret

0000074a <LITE_READ_MISO_PIN>:
     74a:	26 b3       	in	r18, 0x16	; 22
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	36 95       	lsr	r19
     750:	27 95       	ror	r18
     752:	36 95       	lsr	r19
     754:	27 95       	ror	r18
     756:	36 95       	lsr	r19
     758:	27 95       	ror	r18
     75a:	21 70       	andi	r18, 0x01	; 1
     75c:	30 70       	andi	r19, 0x00	; 0
     75e:	c9 01       	movw	r24, r18
     760:	08 95       	ret

00000762 <LITE_MAKE_MISO_OUTPUT>:
     762:	bb 9a       	sbi	0x17, 3	; 23
     764:	08 95       	ret

00000766 <LITE_MAKE_MISO_INPUT>:
     766:	bb 98       	cbi	0x17, 3	; 23
     768:	08 95       	ret

0000076a <LITE_SET_SPI_SCK_PIN>:
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
     76a:	c1 9a       	sbi	0x18, 1	; 24
     76c:	08 95       	ret

0000076e <LITE_CLR_SPI_SCK_PIN>:
     76e:	c1 98       	cbi	0x18, 1	; 24
     770:	08 95       	ret

00000772 <LITE_READ_SPI_SCK_PIN>:
     772:	26 b3       	in	r18, 0x16	; 22
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	36 95       	lsr	r19
     778:	27 95       	ror	r18
     77a:	21 70       	andi	r18, 0x01	; 1
     77c:	30 70       	andi	r19, 0x00	; 0
     77e:	c9 01       	movw	r24, r18
     780:	08 95       	ret

00000782 <LITE_MAKE_SPI_SCK_OUTPUT>:
     782:	b9 9a       	sbi	0x17, 1	; 23
     784:	08 95       	ret

00000786 <LITE_MAKE_SPI_SCK_INPUT>:
     786:	b9 98       	cbi	0x17, 1	; 23
     788:	08 95       	ret

0000078a <LITE_SET_PW0_PIN>:
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
     78a:	a8 9a       	sbi	0x15, 0	; 21
     78c:	08 95       	ret

0000078e <LITE_CLR_PW0_PIN>:
     78e:	a8 98       	cbi	0x15, 0	; 21
     790:	08 95       	ret

00000792 <LITE_READ_PW0_PIN>:
     792:	23 b3       	in	r18, 0x13	; 19
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	21 70       	andi	r18, 0x01	; 1
     798:	30 70       	andi	r19, 0x00	; 0
     79a:	c9 01       	movw	r24, r18
     79c:	08 95       	ret

0000079e <LITE_MAKE_PW0_OUTPUT>:
     79e:	a0 9a       	sbi	0x14, 0	; 20
     7a0:	08 95       	ret

000007a2 <LITE_MAKE_PW0_INPUT>:
     7a2:	a0 98       	cbi	0x14, 0	; 20
     7a4:	08 95       	ret

000007a6 <LITE_SET_PW1_PIN>:
LITE_ASSIGN_PIN(PW1, C, 1);
     7a6:	a9 9a       	sbi	0x15, 1	; 21
     7a8:	08 95       	ret

000007aa <LITE_CLR_PW1_PIN>:
     7aa:	a9 98       	cbi	0x15, 1	; 21
     7ac:	08 95       	ret

000007ae <LITE_READ_PW1_PIN>:
     7ae:	23 b3       	in	r18, 0x13	; 19
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	36 95       	lsr	r19
     7b4:	27 95       	ror	r18
     7b6:	21 70       	andi	r18, 0x01	; 1
     7b8:	30 70       	andi	r19, 0x00	; 0
     7ba:	c9 01       	movw	r24, r18
     7bc:	08 95       	ret

000007be <LITE_MAKE_PW1_OUTPUT>:
     7be:	a1 9a       	sbi	0x14, 1	; 20
     7c0:	08 95       	ret

000007c2 <LITE_MAKE_PW1_INPUT>:
     7c2:	a1 98       	cbi	0x14, 1	; 20
     7c4:	08 95       	ret

000007c6 <LITE_SET_PW2_PIN>:
LITE_ASSIGN_PIN(PW2, C, 2);
     7c6:	aa 9a       	sbi	0x15, 2	; 21
     7c8:	08 95       	ret

000007ca <LITE_CLR_PW2_PIN>:
     7ca:	aa 98       	cbi	0x15, 2	; 21
     7cc:	08 95       	ret

000007ce <LITE_READ_PW2_PIN>:
     7ce:	23 b3       	in	r18, 0x13	; 19
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	36 95       	lsr	r19
     7d4:	27 95       	ror	r18
     7d6:	36 95       	lsr	r19
     7d8:	27 95       	ror	r18
     7da:	21 70       	andi	r18, 0x01	; 1
     7dc:	30 70       	andi	r19, 0x00	; 0
     7de:	c9 01       	movw	r24, r18
     7e0:	08 95       	ret

000007e2 <LITE_MAKE_PW2_OUTPUT>:
     7e2:	a2 9a       	sbi	0x14, 2	; 20
     7e4:	08 95       	ret

000007e6 <LITE_MAKE_PW2_INPUT>:
     7e6:	a2 98       	cbi	0x14, 2	; 20
     7e8:	08 95       	ret

000007ea <LITE_SET_PW3_PIN>:
LITE_ASSIGN_PIN(PW3, C, 3);
     7ea:	ab 9a       	sbi	0x15, 3	; 21
     7ec:	08 95       	ret

000007ee <LITE_CLR_PW3_PIN>:
     7ee:	ab 98       	cbi	0x15, 3	; 21
     7f0:	08 95       	ret

000007f2 <LITE_READ_PW3_PIN>:
     7f2:	23 b3       	in	r18, 0x13	; 19
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	36 95       	lsr	r19
     7f8:	27 95       	ror	r18
     7fa:	36 95       	lsr	r19
     7fc:	27 95       	ror	r18
     7fe:	36 95       	lsr	r19
     800:	27 95       	ror	r18
     802:	21 70       	andi	r18, 0x01	; 1
     804:	30 70       	andi	r19, 0x00	; 0
     806:	c9 01       	movw	r24, r18
     808:	08 95       	ret

0000080a <LITE_MAKE_PW3_OUTPUT>:
     80a:	a3 9a       	sbi	0x14, 3	; 20
     80c:	08 95       	ret

0000080e <LITE_MAKE_PW3_INPUT>:
     80e:	a3 98       	cbi	0x14, 3	; 20
     810:	08 95       	ret

00000812 <LITE_SET_PW4_PIN>:
LITE_ASSIGN_PIN(PW4, C, 4);
     812:	ac 9a       	sbi	0x15, 4	; 21
     814:	08 95       	ret

00000816 <LITE_CLR_PW4_PIN>:
     816:	ac 98       	cbi	0x15, 4	; 21
     818:	08 95       	ret

0000081a <LITE_READ_PW4_PIN>:
     81a:	23 b3       	in	r18, 0x13	; 19
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	32 95       	swap	r19
     820:	22 95       	swap	r18
     822:	2f 70       	andi	r18, 0x0F	; 15
     824:	23 27       	eor	r18, r19
     826:	3f 70       	andi	r19, 0x0F	; 15
     828:	23 27       	eor	r18, r19
     82a:	21 70       	andi	r18, 0x01	; 1
     82c:	30 70       	andi	r19, 0x00	; 0
     82e:	c9 01       	movw	r24, r18
     830:	08 95       	ret

00000832 <LITE_MAKE_PW4_OUTPUT>:
     832:	a4 9a       	sbi	0x14, 4	; 20
     834:	08 95       	ret

00000836 <LITE_MAKE_PW4_INPUT>:
     836:	a4 98       	cbi	0x14, 4	; 20
     838:	08 95       	ret

0000083a <LITE_SET_PW5_PIN>:
LITE_ASSIGN_PIN(PW5, C, 5);
     83a:	ad 9a       	sbi	0x15, 5	; 21
     83c:	08 95       	ret

0000083e <LITE_CLR_PW5_PIN>:
     83e:	ad 98       	cbi	0x15, 5	; 21
     840:	08 95       	ret

00000842 <LITE_READ_PW5_PIN>:
     842:	23 b3       	in	r18, 0x13	; 19
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	36 95       	lsr	r19
     848:	27 95       	ror	r18
     84a:	32 95       	swap	r19
     84c:	22 95       	swap	r18
     84e:	2f 70       	andi	r18, 0x0F	; 15
     850:	23 27       	eor	r18, r19
     852:	3f 70       	andi	r19, 0x0F	; 15
     854:	23 27       	eor	r18, r19
     856:	21 70       	andi	r18, 0x01	; 1
     858:	30 70       	andi	r19, 0x00	; 0
     85a:	c9 01       	movw	r24, r18
     85c:	08 95       	ret

0000085e <LITE_MAKE_PW5_OUTPUT>:
     85e:	a5 9a       	sbi	0x14, 5	; 20
     860:	08 95       	ret

00000862 <LITE_MAKE_PW5_INPUT>:
     862:	a5 98       	cbi	0x14, 5	; 20
     864:	08 95       	ret

00000866 <LITE_SET_PW6_PIN>:
LITE_ASSIGN_PIN(PW6, C, 6);
     866:	ae 9a       	sbi	0x15, 6	; 21
     868:	08 95       	ret

0000086a <LITE_CLR_PW6_PIN>:
     86a:	ae 98       	cbi	0x15, 6	; 21
     86c:	08 95       	ret

0000086e <LITE_READ_PW6_PIN>:
     86e:	23 b3       	in	r18, 0x13	; 19
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	00 24       	eor	r0, r0
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
     878:	00 1c       	adc	r0, r0
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	00 1c       	adc	r0, r0
     880:	23 2f       	mov	r18, r19
     882:	30 2d       	mov	r19, r0
     884:	21 70       	andi	r18, 0x01	; 1
     886:	30 70       	andi	r19, 0x00	; 0
     888:	c9 01       	movw	r24, r18
     88a:	08 95       	ret

0000088c <LITE_MAKE_PW6_OUTPUT>:
     88c:	a6 9a       	sbi	0x14, 6	; 20
     88e:	08 95       	ret

00000890 <LITE_MAKE_PW6_INPUT>:
     890:	a6 98       	cbi	0x14, 6	; 20
     892:	08 95       	ret

00000894 <LITE_SET_PW7_PIN>:
LITE_ASSIGN_PIN(PW7, C, 7);
     894:	af 9a       	sbi	0x15, 7	; 21
     896:	08 95       	ret

00000898 <LITE_CLR_PW7_PIN>:
     898:	af 98       	cbi	0x15, 7	; 21
     89a:	08 95       	ret

0000089c <LITE_READ_PW7_PIN>:
     89c:	23 b3       	in	r18, 0x13	; 19
     89e:	33 27       	eor	r19, r19
     8a0:	27 fd       	sbrc	r18, 7
     8a2:	30 95       	com	r19
     8a4:	22 27       	eor	r18, r18
     8a6:	33 0f       	add	r19, r19
     8a8:	22 1f       	adc	r18, r18
     8aa:	33 27       	eor	r19, r19
     8ac:	c9 01       	movw	r24, r18
     8ae:	08 95       	ret

000008b0 <LITE_MAKE_PW7_OUTPUT>:
     8b0:	a7 9a       	sbi	0x14, 7	; 20
     8b2:	08 95       	ret

000008b4 <LITE_MAKE_PW7_INPUT>:
     8b4:	a7 98       	cbi	0x14, 7	; 20
     8b6:	08 95       	ret

000008b8 <LITE_SET_I2C_BUS1_SCL_PIN>:
// i2c bus assignments
LITE_ASSIGN_PIN(I2C_BUS1_SCL, D, 0);
     8b8:	90 9a       	sbi	0x12, 0	; 18
     8ba:	08 95       	ret

000008bc <LITE_CLR_I2C_BUS1_SCL_PIN>:
     8bc:	90 98       	cbi	0x12, 0	; 18
     8be:	08 95       	ret

000008c0 <LITE_READ_I2C_BUS1_SCL_PIN>:
     8c0:	20 b3       	in	r18, 0x10	; 16
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	21 70       	andi	r18, 0x01	; 1
     8c6:	30 70       	andi	r19, 0x00	; 0
     8c8:	c9 01       	movw	r24, r18
     8ca:	08 95       	ret

000008cc <LITE_MAKE_I2C_BUS1_SCL_OUTPUT>:
     8cc:	88 9a       	sbi	0x11, 0	; 17
     8ce:	08 95       	ret

000008d0 <LITE_MAKE_I2C_BUS1_SCL_INPUT>:
     8d0:	88 98       	cbi	0x11, 0	; 17
     8d2:	08 95       	ret

000008d4 <LITE_SET_I2C_BUS1_SDA_PIN>:
LITE_ASSIGN_PIN(I2C_BUS1_SDA, D, 1);
     8d4:	91 9a       	sbi	0x12, 1	; 18
     8d6:	08 95       	ret

000008d8 <LITE_CLR_I2C_BUS1_SDA_PIN>:
     8d8:	91 98       	cbi	0x12, 1	; 18
     8da:	08 95       	ret

000008dc <LITE_READ_I2C_BUS1_SDA_PIN>:
     8dc:	20 b3       	in	r18, 0x10	; 16
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	36 95       	lsr	r19
     8e2:	27 95       	ror	r18
     8e4:	21 70       	andi	r18, 0x01	; 1
     8e6:	30 70       	andi	r19, 0x00	; 0
     8e8:	c9 01       	movw	r24, r18
     8ea:	08 95       	ret

000008ec <LITE_MAKE_I2C_BUS1_SDA_OUTPUT>:
     8ec:	89 9a       	sbi	0x11, 1	; 17
     8ee:	08 95       	ret

000008f0 <LITE_MAKE_I2C_BUS1_SDA_INPUT>:
     8f0:	89 98       	cbi	0x11, 1	; 17
     8f2:	08 95       	ret

000008f4 <LITE_SET_UART_RXD0_PIN>:
// uart assignments
LITE_ASSIGN_PIN(UART_RXD0, E, 0);
     8f4:	18 9a       	sbi	0x03, 0	; 3
     8f6:	08 95       	ret

000008f8 <LITE_CLR_UART_RXD0_PIN>:
     8f8:	18 98       	cbi	0x03, 0	; 3
     8fa:	08 95       	ret

000008fc <LITE_READ_UART_RXD0_PIN>:
     8fc:	21 b1       	in	r18, 0x01	; 1
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	21 70       	andi	r18, 0x01	; 1
     902:	30 70       	andi	r19, 0x00	; 0
     904:	c9 01       	movw	r24, r18
     906:	08 95       	ret

00000908 <LITE_MAKE_UART_RXD0_OUTPUT>:
     908:	10 9a       	sbi	0x02, 0	; 2
     90a:	08 95       	ret

0000090c <LITE_MAKE_UART_RXD0_INPUT>:
     90c:	10 98       	cbi	0x02, 0	; 2
     90e:	08 95       	ret

00000910 <LITE_SET_UART_TXD0_PIN>:
LITE_ASSIGN_PIN(UART_TXD0, E, 1);
     910:	19 9a       	sbi	0x03, 1	; 3
     912:	08 95       	ret

00000914 <LITE_CLR_UART_TXD0_PIN>:
     914:	19 98       	cbi	0x03, 1	; 3
     916:	08 95       	ret

00000918 <LITE_READ_UART_TXD0_PIN>:
     918:	21 b1       	in	r18, 0x01	; 1
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	36 95       	lsr	r19
     91e:	27 95       	ror	r18
     920:	21 70       	andi	r18, 0x01	; 1
     922:	30 70       	andi	r19, 0x00	; 0
     924:	c9 01       	movw	r24, r18
     926:	08 95       	ret

00000928 <LITE_MAKE_UART_TXD0_OUTPUT>:
     928:	11 9a       	sbi	0x02, 1	; 2
     92a:	08 95       	ret

0000092c <LITE_MAKE_UART_TXD0_INPUT>:
     92c:	11 98       	cbi	0x02, 1	; 2
     92e:	08 95       	ret

00000930 <LITE_SET_UART_XCK0_PIN>:
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
     930:	1a 9a       	sbi	0x03, 2	; 3
     932:	08 95       	ret

00000934 <LITE_CLR_UART_XCK0_PIN>:
     934:	1a 98       	cbi	0x03, 2	; 3
     936:	08 95       	ret

00000938 <LITE_READ_UART_XCK0_PIN>:
     938:	21 b1       	in	r18, 0x01	; 1
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	36 95       	lsr	r19
     93e:	27 95       	ror	r18
     940:	36 95       	lsr	r19
     942:	27 95       	ror	r18
     944:	21 70       	andi	r18, 0x01	; 1
     946:	30 70       	andi	r19, 0x00	; 0
     948:	c9 01       	movw	r24, r18
     94a:	08 95       	ret

0000094c <LITE_MAKE_UART_XCK0_OUTPUT>:
     94c:	12 9a       	sbi	0x02, 2	; 2
     94e:	08 95       	ret

00000950 <LITE_MAKE_UART_XCK0_INPUT>:
     950:	12 98       	cbi	0x02, 2	; 2
     952:	08 95       	ret

00000954 <LITE_SET_AC_NEG_PIN>:
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
     954:	1b 9a       	sbi	0x03, 3	; 3
     956:	08 95       	ret

00000958 <LITE_CLR_AC_NEG_PIN>:
     958:	1b 98       	cbi	0x03, 3	; 3
     95a:	08 95       	ret

0000095c <LITE_READ_AC_NEG_PIN>:
     95c:	21 b1       	in	r18, 0x01	; 1
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	36 95       	lsr	r19
     962:	27 95       	ror	r18
     964:	36 95       	lsr	r19
     966:	27 95       	ror	r18
     968:	36 95       	lsr	r19
     96a:	27 95       	ror	r18
     96c:	21 70       	andi	r18, 0x01	; 1
     96e:	30 70       	andi	r19, 0x00	; 0
     970:	c9 01       	movw	r24, r18
     972:	08 95       	ret

00000974 <LITE_MAKE_AC_NEG_OUTPUT>:
     974:	13 9a       	sbi	0x02, 3	; 2
     976:	08 95       	ret

00000978 <LITE_MAKE_AC_NEG_INPUT>:
     978:	13 98       	cbi	0x02, 3	; 2
     97a:	08 95       	ret

0000097c <LITE_SET_UART_RXD1_PIN>:
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
     97c:	92 9a       	sbi	0x12, 2	; 18
     97e:	08 95       	ret

00000980 <LITE_CLR_UART_RXD1_PIN>:
     980:	92 98       	cbi	0x12, 2	; 18
     982:	08 95       	ret

00000984 <LITE_READ_UART_RXD1_PIN>:
     984:	20 b3       	in	r18, 0x10	; 16
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	36 95       	lsr	r19
     98a:	27 95       	ror	r18
     98c:	36 95       	lsr	r19
     98e:	27 95       	ror	r18
     990:	21 70       	andi	r18, 0x01	; 1
     992:	30 70       	andi	r19, 0x00	; 0
     994:	c9 01       	movw	r24, r18
     996:	08 95       	ret

00000998 <LITE_MAKE_UART_RXD1_OUTPUT>:
     998:	8a 9a       	sbi	0x11, 2	; 17
     99a:	08 95       	ret

0000099c <LITE_MAKE_UART_RXD1_INPUT>:
     99c:	8a 98       	cbi	0x11, 2	; 17
     99e:	08 95       	ret

000009a0 <LITE_SET_UART_TXD1_PIN>:
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
     9a0:	93 9a       	sbi	0x12, 3	; 18
     9a2:	08 95       	ret

000009a4 <LITE_CLR_UART_TXD1_PIN>:
     9a4:	93 98       	cbi	0x12, 3	; 18
     9a6:	08 95       	ret

000009a8 <LITE_READ_UART_TXD1_PIN>:
     9a8:	20 b3       	in	r18, 0x10	; 16
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	36 95       	lsr	r19
     9ae:	27 95       	ror	r18
     9b0:	36 95       	lsr	r19
     9b2:	27 95       	ror	r18
     9b4:	36 95       	lsr	r19
     9b6:	27 95       	ror	r18
     9b8:	21 70       	andi	r18, 0x01	; 1
     9ba:	30 70       	andi	r19, 0x00	; 0
     9bc:	c9 01       	movw	r24, r18
     9be:	08 95       	ret

000009c0 <LITE_MAKE_UART_TXD1_OUTPUT>:
     9c0:	8b 9a       	sbi	0x11, 3	; 17
     9c2:	08 95       	ret

000009c4 <LITE_MAKE_UART_TXD1_INPUT>:
     9c4:	8b 98       	cbi	0x11, 3	; 17
     9c6:	08 95       	ret

000009c8 <LITE_SET_UART_XCK1_PIN>:
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
     9c8:	95 9a       	sbi	0x12, 5	; 18
     9ca:	08 95       	ret

000009cc <LITE_CLR_UART_XCK1_PIN>:
     9cc:	95 98       	cbi	0x12, 5	; 18
     9ce:	08 95       	ret

000009d0 <LITE_READ_UART_XCK1_PIN>:
     9d0:	20 b3       	in	r18, 0x10	; 16
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	36 95       	lsr	r19
     9d6:	27 95       	ror	r18
     9d8:	32 95       	swap	r19
     9da:	22 95       	swap	r18
     9dc:	2f 70       	andi	r18, 0x0F	; 15
     9de:	23 27       	eor	r18, r19
     9e0:	3f 70       	andi	r19, 0x0F	; 15
     9e2:	23 27       	eor	r18, r19
     9e4:	21 70       	andi	r18, 0x01	; 1
     9e6:	30 70       	andi	r19, 0x00	; 0
     9e8:	c9 01       	movw	r24, r18
     9ea:	08 95       	ret

000009ec <LITE_MAKE_UART_XCK1_OUTPUT>:
     9ec:	8d 9a       	sbi	0x11, 5	; 17
     9ee:	08 95       	ret

000009f0 <LITE_MAKE_UART_XCK1_INPUT>:
     9f0:	8d 98       	cbi	0x11, 5	; 17
     9f2:	08 95       	ret

000009f4 <LITE_SET_TONE_DECODE_SIGNAL_PIN>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
LITE_ASSIGN_PIN(INT3, E, 7);
     9f4:	1f 9a       	sbi	0x03, 7	; 3
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     9f6:	08 95       	ret

000009f8 <LITE_CLR_TONE_DECODE_SIGNAL_PIN>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
LITE_ASSIGN_PIN(INT3, E, 7);
     9f8:	1f 98       	cbi	0x03, 7	; 3
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     9fa:	08 95       	ret

000009fc <LITE_READ_TONE_DECODE_SIGNAL_PIN>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
LITE_ASSIGN_PIN(INT3, E, 7);
     9fc:	81 b1       	in	r24, 0x01	; 1
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     9fe:	88 1f       	adc	r24, r24
     a00:	88 27       	eor	r24, r24
     a02:	88 1f       	adc	r24, r24
     a04:	08 95       	ret

00000a06 <LITE_MAKE_TONE_DECODE_SIGNAL_OUTPUT>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
LITE_ASSIGN_PIN(INT3, E, 7);
     a06:	17 9a       	sbi	0x02, 7	; 2
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     a08:	08 95       	ret

00000a0a <LITE_MAKE_TONE_DECODE_SIGNAL_INPUT>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
LITE_ASSIGN_PIN(INT3, E, 7);
     a0a:	17 98       	cbi	0x02, 7	; 2
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     a0c:	08 95       	ret

00000a0e <LITE_SET_PHOTO_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
     a0e:	1d 9a       	sbi	0x03, 5	; 3
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     a10:	08 95       	ret

00000a12 <LITE_CLR_PHOTO_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
     a12:	1d 98       	cbi	0x03, 5	; 3
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     a14:	08 95       	ret

00000a16 <LITE_READ_PHOTO_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
     a16:	81 b1       	in	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	96 95       	lsr	r25
     a1c:	87 95       	ror	r24
     a1e:	92 95       	swap	r25
     a20:	82 95       	swap	r24
     a22:	8f 70       	andi	r24, 0x0F	; 15
     a24:	89 27       	eor	r24, r25
     a26:	9f 70       	andi	r25, 0x0F	; 15
     a28:	89 27       	eor	r24, r25
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     a2a:	81 70       	andi	r24, 0x01	; 1
     a2c:	08 95       	ret

00000a2e <LITE_MAKE_PHOTO_CTL_OUTPUT>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
     a2e:	15 9a       	sbi	0x02, 5	; 2
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     a30:	08 95       	ret

00000a32 <LITE_MAKE_PHOTO_CTL_INPUT>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
     a32:	15 98       	cbi	0x02, 5	; 2
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     a34:	08 95       	ret

00000a36 <LITE_SET_TEMP_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
     a36:	1e 9a       	sbi	0x03, 6	; 3
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     a38:	08 95       	ret

00000a3a <LITE_CLR_TEMP_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
     a3a:	1e 98       	cbi	0x03, 6	; 3
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     a3c:	08 95       	ret

00000a3e <LITE_READ_TEMP_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
     a3e:	81 b1       	in	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	00 24       	eor	r0, r0
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	00 1c       	adc	r0, r0
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	00 1c       	adc	r0, r0
     a50:	89 2f       	mov	r24, r25
     a52:	90 2d       	mov	r25, r0
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     a54:	81 70       	andi	r24, 0x01	; 1
     a56:	08 95       	ret

00000a58 <LITE_MAKE_TEMP_CTL_OUTPUT>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
     a58:	16 9a       	sbi	0x02, 6	; 2
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     a5a:	08 95       	ret

00000a5c <LITE_MAKE_TEMP_CTL_INPUT>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
     a5c:	16 98       	cbi	0x02, 6	; 2
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     a5e:	08 95       	ret

00000a60 <LITE_SET_MIC_CTL_PIN>:
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
     a60:	ab 9a       	sbi	0x15, 3	; 21
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
     a62:	08 95       	ret

00000a64 <LITE_CLR_MIC_CTL_PIN>:
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
     a64:	ab 98       	cbi	0x15, 3	; 21
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
     a66:	08 95       	ret

00000a68 <LITE_MAKE_MIC_CTL_OUTPUT>:
     a68:	08 95       	ret

00000a6a <LITE_SET_SOUNDER_CTL_PIN>:
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
     a6a:	aa 9a       	sbi	0x15, 2	; 21
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
     a6c:	08 95       	ret

00000a6e <LITE_CLR_SOUNDER_CTL_PIN>:
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
     a6e:	aa 98       	cbi	0x15, 2	; 21
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
     a70:	08 95       	ret

00000a72 <LITE_MAKE_SOUNDER_CTL_OUTPUT>:
     a72:	08 95       	ret

00000a74 <LITE_SET_ACCEL_CTL_PIN>:
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
     a74:	ac 9a       	sbi	0x15, 4	; 21
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
     a76:	08 95       	ret

00000a78 <LITE_CLR_ACCEL_CTL_PIN>:
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
     a78:	ac 98       	cbi	0x15, 4	; 21
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
     a7a:	08 95       	ret

00000a7c <LITE_MAKE_ACCEL_CTL_OUTPUT>:
     a7c:	08 95       	ret

00000a7e <LITE_SET_MAG_CTL_PIN>:
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
     a7e:	ad 9a       	sbi	0x15, 5	; 21
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
LITE_ALIAS_OUTPUT_ONLY_PIN(MAG_CTL, PW5);
     a80:	08 95       	ret

00000a82 <LITE_CLR_MAG_CTL_PIN>:
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
     a82:	ad 98       	cbi	0x15, 5	; 21
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
LITE_ALIAS_OUTPUT_ONLY_PIN(MAG_CTL, PW5);
     a84:	08 95       	ret

00000a86 <LITE_MAKE_MAG_CTL_OUTPUT>:
     a86:	08 95       	ret

00000a88 <LITE_SET_MIC_MUX_SEL_PIN>:
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
LITE_ASSIGN_PIN(PW6, C, 6);
     a88:	ae 9a       	sbi	0x15, 6	; 21
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
LITE_ALIAS_OUTPUT_ONLY_PIN(MAG_CTL, PW5);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_MUX_SEL, PW6);
     a8a:	08 95       	ret

00000a8c <LITE_CLR_MIC_MUX_SEL_PIN>:
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
LITE_ASSIGN_PIN(PW6, C, 6);
     a8c:	ae 98       	cbi	0x15, 6	; 21
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
LITE_ALIAS_OUTPUT_ONLY_PIN(MAG_CTL, PW5);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_MUX_SEL, PW6);
     a8e:	08 95       	ret

00000a90 <LITE_MAKE_MIC_MUX_SEL_OUTPUT>:
     a90:	08 95       	ret

00000a92 <LITE_SET_PIN_DIRECTIONS>:
        u_sec--;
    }
}

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
     a92:	d2 9a       	sbi	0x1a, 2	; 26
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
LITE_ASSIGN_PIN(YELLOW_LED, A, 0);
     a94:	d0 9a       	sbi	0x1a, 0	; 26
    }
}

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
     a96:	d1 9a       	sbi	0x1a, 1	; 26
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
LITE_ASSIGN_PIN(PW6, C, 6);
LITE_ASSIGN_PIN(PW7, C, 7);
     a98:	a7 9a       	sbi	0x14, 7	; 20
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
LITE_ASSIGN_PIN(PW6, C, 6);
     a9a:	a6 9a       	sbi	0x14, 6	; 20
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
     a9c:	a5 9a       	sbi	0x14, 5	; 20
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
     a9e:	a4 9a       	sbi	0x14, 4	; 20
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
     aa0:	a3 9a       	sbi	0x14, 3	; 20
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
     aa2:	a2 9a       	sbi	0x14, 2	; 20
LITE_ASSIGN_PIN(MISO, B, 3);
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
     aa4:	a1 9a       	sbi	0x14, 1	; 20
LITE_ASSIGN_PIN(MOSI, B, 2);
LITE_ASSIGN_PIN(MISO, B, 3);
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
     aa6:	a0 9a       	sbi	0x14, 0	; 20

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
LITE_ASSIGN_PIN(YELLOW_LED, A, 0);
LITE_ASSIGN_PIN(SERIAL_ID, A, 4);
     aa8:	d4 98       	cbi	0x1a, 4	; 26
LITE_ASSIGN_PIN(BAT_MON, A, 5);
LITE_ASSIGN_PIN(THERM_PWR, A, 7);


// Flash assignments
LITE_ASSIGN_PIN(FLASH_SELECT, A, 3);
     aaa:	dc 98       	cbi	0x1b, 4	; 27
     aac:	d3 9a       	sbi	0x1a, 3	; 26
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
     aae:	8b 9a       	sbi	0x11, 3	; 17
LITE_ASSIGN_PIN(THERM_PWR, A, 7);


// Flash assignments
LITE_ASSIGN_PIN(FLASH_SELECT, A, 3);
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
     ab0:	8d 9a       	sbi	0x11, 5	; 17
LITE_ASSIGN_PIN(BAT_MON, A, 5);
LITE_ASSIGN_PIN(THERM_PWR, A, 7);


// Flash assignments
LITE_ASSIGN_PIN(FLASH_SELECT, A, 3);
     ab2:	db 9a       	sbi	0x1b, 3	; 27
        u_sec--;
    }
}

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
     ab4:	da 9a       	sbi	0x1b, 2	; 27
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
LITE_ASSIGN_PIN(YELLOW_LED, A, 0);
     ab6:	d8 9a       	sbi	0x1b, 0	; 27
    }
}

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
     ab8:	d9 9a       	sbi	0x1b, 1	; 27
    LITE_MAKE_FLASH_CLK_OUTPUT();
    LITE_SET_FLASH_SELECT_PIN();
    LITE_SET_RED_LED_PIN();
    LITE_SET_YELLOW_LED_PIN();
    LITE_SET_GREEN_LED_PIN();
}
     aba:	08 95       	ret

00000abc <CC2420_FIFOP_INT_MODE>:
#include "micazhardware.h"

void inline CC2420_FIFOP_INT_MODE(bool LowToHigh)
{
    sbi(EICRB, ISC61);          // edge mode
     abc:	9a b7       	in	r25, 0x3a	; 58
     abe:	90 62       	ori	r25, 0x20	; 32
     ac0:	9a bf       	out	0x3a, r25	; 58
    if (LowToHigh)
     ac2:	88 23       	and	r24, r24
     ac4:	21 f4       	brne	.+8      	; 0xace <CC2420_FIFOP_INT_MODE+0x12>
    {
        sbi(EICRB, ISC60);
    }                           //trigger on rising level
    else
    {
        cbi(EICRB, ISC60);
     ac6:	8a b7       	in	r24, 0x3a	; 58
     ac8:	8f 7e       	andi	r24, 0xEF	; 239
     aca:	8a bf       	out	0x3a, r24	; 58
     acc:	08 95       	ret
void inline CC2420_FIFOP_INT_MODE(bool LowToHigh)
{
    sbi(EICRB, ISC61);          // edge mode
    if (LowToHigh)
    {
        sbi(EICRB, ISC60);
     ace:	8a b7       	in	r24, 0x3a	; 58
     ad0:	80 61       	ori	r24, 0x10	; 16
     ad2:	8a bf       	out	0x3a, r24	; 58
     ad4:	08 95       	ret

00000ad6 <LITE_SET_CC_RSTN_PIN>:




//-------------------------------------------------------------------------
LITE_ASSIGN_PIN(CC_RSTN, A, 6); // chipcon reset
     ad6:	de 9a       	sbi	0x1b, 6	; 27
     ad8:	08 95       	ret

00000ada <LITE_CLR_CC_RSTN_PIN>:
     ada:	de 98       	cbi	0x1b, 6	; 27
     adc:	08 95       	ret

00000ade <LITE_READ_CC_RSTN_PIN>:
     ade:	29 b3       	in	r18, 0x19	; 25
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	00 24       	eor	r0, r0
     ae4:	22 0f       	add	r18, r18
     ae6:	33 1f       	adc	r19, r19
     ae8:	00 1c       	adc	r0, r0
     aea:	22 0f       	add	r18, r18
     aec:	33 1f       	adc	r19, r19
     aee:	00 1c       	adc	r0, r0
     af0:	23 2f       	mov	r18, r19
     af2:	30 2d       	mov	r19, r0
     af4:	21 70       	andi	r18, 0x01	; 1
     af6:	30 70       	andi	r19, 0x00	; 0
     af8:	c9 01       	movw	r24, r18
     afa:	08 95       	ret

00000afc <LITE_MAKE_CC_RSTN_OUTPUT>:
     afc:	d6 9a       	sbi	0x1a, 6	; 26
     afe:	08 95       	ret

00000b00 <LITE_MAKE_CC_RSTN_INPUT>:
     b00:	d6 98       	cbi	0x1a, 6	; 26
     b02:	08 95       	ret

00000b04 <LITE_SET_CC_VREN_PIN>:
LITE_ASSIGN_PIN(CC_VREN, A, 5); // chipcon power enable
     b04:	dd 9a       	sbi	0x1b, 5	; 27
     b06:	08 95       	ret

00000b08 <LITE_CLR_CC_VREN_PIN>:
     b08:	dd 98       	cbi	0x1b, 5	; 27
     b0a:	08 95       	ret

00000b0c <LITE_READ_CC_VREN_PIN>:
     b0c:	29 b3       	in	r18, 0x19	; 25
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	36 95       	lsr	r19
     b12:	27 95       	ror	r18
     b14:	32 95       	swap	r19
     b16:	22 95       	swap	r18
     b18:	2f 70       	andi	r18, 0x0F	; 15
     b1a:	23 27       	eor	r18, r19
     b1c:	3f 70       	andi	r19, 0x0F	; 15
     b1e:	23 27       	eor	r18, r19
     b20:	21 70       	andi	r18, 0x01	; 1
     b22:	30 70       	andi	r19, 0x00	; 0
     b24:	c9 01       	movw	r24, r18
     b26:	08 95       	ret

00000b28 <LITE_MAKE_CC_VREN_OUTPUT>:
     b28:	d5 9a       	sbi	0x1a, 5	; 26
     b2a:	08 95       	ret

00000b2c <LITE_MAKE_CC_VREN_INPUT>:
     b2c:	d5 98       	cbi	0x1a, 5	; 26
     b2e:	08 95       	ret

00000b30 <LITE_SET_CC_FIFOP_PIN>:
//LITE_ASSIGN_PIN(CC_FIFOP1, D, 7);  // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP, E, 6);        // fifo interrupt
     b30:	1e 9a       	sbi	0x03, 6	; 3
     b32:	08 95       	ret

00000b34 <LITE_CLR_CC_FIFOP_PIN>:
     b34:	1e 98       	cbi	0x03, 6	; 3
     b36:	08 95       	ret

00000b38 <LITE_READ_CC_FIFOP_PIN>:
     b38:	21 b1       	in	r18, 0x01	; 1
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	00 24       	eor	r0, r0
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	00 1c       	adc	r0, r0
     b44:	22 0f       	add	r18, r18
     b46:	33 1f       	adc	r19, r19
     b48:	00 1c       	adc	r0, r0
     b4a:	23 2f       	mov	r18, r19
     b4c:	30 2d       	mov	r19, r0
     b4e:	21 70       	andi	r18, 0x01	; 1
     b50:	30 70       	andi	r19, 0x00	; 0
     b52:	c9 01       	movw	r24, r18
     b54:	08 95       	ret

00000b56 <LITE_MAKE_CC_FIFOP_OUTPUT>:
     b56:	16 9a       	sbi	0x02, 6	; 2
     b58:	08 95       	ret

00000b5a <LITE_MAKE_CC_FIFOP_INPUT>:
     b5a:	16 98       	cbi	0x02, 6	; 2
     b5c:	08 95       	ret

00000b5e <LITE_SET_CC_FIFOP1_PIN>:
LITE_ASSIGN_PIN(CC_FIFOP1, E, 6);       // fifo interrupt
     b5e:	1e 9a       	sbi	0x03, 6	; 3
     b60:	08 95       	ret

00000b62 <LITE_CLR_CC_FIFOP1_PIN>:
     b62:	1e 98       	cbi	0x03, 6	; 3
     b64:	08 95       	ret

00000b66 <LITE_READ_CC_FIFOP1_PIN>:
     b66:	21 b1       	in	r18, 0x01	; 1
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	00 24       	eor	r0, r0
     b6c:	22 0f       	add	r18, r18
     b6e:	33 1f       	adc	r19, r19
     b70:	00 1c       	adc	r0, r0
     b72:	22 0f       	add	r18, r18
     b74:	33 1f       	adc	r19, r19
     b76:	00 1c       	adc	r0, r0
     b78:	23 2f       	mov	r18, r19
     b7a:	30 2d       	mov	r19, r0
     b7c:	21 70       	andi	r18, 0x01	; 1
     b7e:	30 70       	andi	r19, 0x00	; 0
     b80:	c9 01       	movw	r24, r18
     b82:	08 95       	ret

00000b84 <LITE_MAKE_CC_FIFOP1_OUTPUT>:
     b84:	16 9a       	sbi	0x02, 6	; 2
     b86:	08 95       	ret

00000b88 <LITE_MAKE_CC_FIFOP1_INPUT>:
     b88:	16 98       	cbi	0x02, 6	; 2
     b8a:	08 95       	ret

00000b8c <LITE_SET_CC_CCA_PIN>:
LITE_ASSIGN_PIN(CC_CCA, D, 6);  // 
     b8c:	96 9a       	sbi	0x12, 6	; 18
     b8e:	08 95       	ret

00000b90 <LITE_CLR_CC_CCA_PIN>:
     b90:	96 98       	cbi	0x12, 6	; 18
     b92:	08 95       	ret

00000b94 <LITE_READ_CC_CCA_PIN>:
     b94:	20 b3       	in	r18, 0x10	; 16
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	00 24       	eor	r0, r0
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	00 1c       	adc	r0, r0
     ba0:	22 0f       	add	r18, r18
     ba2:	33 1f       	adc	r19, r19
     ba4:	00 1c       	adc	r0, r0
     ba6:	23 2f       	mov	r18, r19
     ba8:	30 2d       	mov	r19, r0
     baa:	21 70       	andi	r18, 0x01	; 1
     bac:	30 70       	andi	r19, 0x00	; 0
     bae:	c9 01       	movw	r24, r18
     bb0:	08 95       	ret

00000bb2 <LITE_MAKE_CC_CCA_OUTPUT>:
     bb2:	8e 9a       	sbi	0x11, 6	; 17
     bb4:	08 95       	ret

00000bb6 <LITE_MAKE_CC_CCA_INPUT>:
     bb6:	8e 98       	cbi	0x11, 6	; 17
     bb8:	08 95       	ret

00000bba <LITE_SET_CC_SFD_PIN>:
LITE_ASSIGN_PIN(CC_SFD, D, 4);  // chipcon packet arrival
     bba:	94 9a       	sbi	0x12, 4	; 18
     bbc:	08 95       	ret

00000bbe <LITE_CLR_CC_SFD_PIN>:
     bbe:	94 98       	cbi	0x12, 4	; 18
     bc0:	08 95       	ret

00000bc2 <LITE_READ_CC_SFD_PIN>:
     bc2:	20 b3       	in	r18, 0x10	; 16
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	32 95       	swap	r19
     bc8:	22 95       	swap	r18
     bca:	2f 70       	andi	r18, 0x0F	; 15
     bcc:	23 27       	eor	r18, r19
     bce:	3f 70       	andi	r19, 0x0F	; 15
     bd0:	23 27       	eor	r18, r19
     bd2:	21 70       	andi	r18, 0x01	; 1
     bd4:	30 70       	andi	r19, 0x00	; 0
     bd6:	c9 01       	movw	r24, r18
     bd8:	08 95       	ret

00000bda <LITE_MAKE_CC_SFD_OUTPUT>:
     bda:	8c 9a       	sbi	0x11, 4	; 17
     bdc:	08 95       	ret

00000bde <LITE_MAKE_CC_SFD_INPUT>:
     bde:	8c 98       	cbi	0x11, 4	; 17
     be0:	08 95       	ret

00000be2 <LITE_SET_CC_CS_PIN>:
LITE_ASSIGN_PIN(CC_CS, B, 0);   // chipcon enable
     be2:	c0 9a       	sbi	0x18, 0	; 24
     be4:	08 95       	ret

00000be6 <LITE_CLR_CC_CS_PIN>:
     be6:	c0 98       	cbi	0x18, 0	; 24
     be8:	08 95       	ret

00000bea <LITE_READ_CC_CS_PIN>:
     bea:	26 b3       	in	r18, 0x16	; 22
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	21 70       	andi	r18, 0x01	; 1
     bf0:	30 70       	andi	r19, 0x00	; 0
     bf2:	c9 01       	movw	r24, r18
     bf4:	08 95       	ret

00000bf6 <LITE_MAKE_CC_CS_OUTPUT>:
     bf6:	b8 9a       	sbi	0x17, 0	; 23
     bf8:	08 95       	ret

00000bfa <LITE_MAKE_CC_CS_INPUT>:
     bfa:	b8 98       	cbi	0x17, 0	; 23
     bfc:	08 95       	ret

00000bfe <LITE_SET_CC_FIFO_PIN>:
LITE_ASSIGN_PIN(CC_FIFO, B, 7); // chipcon fifo
     bfe:	c7 9a       	sbi	0x18, 7	; 24
     c00:	08 95       	ret

00000c02 <LITE_CLR_CC_FIFO_PIN>:
     c02:	c7 98       	cbi	0x18, 7	; 24
     c04:	08 95       	ret

00000c06 <LITE_READ_CC_FIFO_PIN>:
     c06:	26 b3       	in	r18, 0x16	; 22
     c08:	33 27       	eor	r19, r19
     c0a:	27 fd       	sbrc	r18, 7
     c0c:	30 95       	com	r19
     c0e:	22 27       	eor	r18, r18
     c10:	33 0f       	add	r19, r19
     c12:	22 1f       	adc	r18, r18
     c14:	33 27       	eor	r19, r19
     c16:	c9 01       	movw	r24, r18
     c18:	08 95       	ret

00000c1a <LITE_MAKE_CC_FIFO_OUTPUT>:
     c1a:	bf 9a       	sbi	0x17, 7	; 23
     c1c:	08 95       	ret

00000c1e <LITE_MAKE_CC_FIFO_INPUT>:
     c1e:	bf 98       	cbi	0x17, 7	; 23
     c20:	08 95       	ret

00000c22 <LITE_SET_RADIO_CCA_PIN>:
LITE_ASSIGN_PIN(RADIO_CCA, D, 6);       // 
     c22:	96 9a       	sbi	0x12, 6	; 18
     c24:	08 95       	ret

00000c26 <LITE_CLR_RADIO_CCA_PIN>:
     c26:	96 98       	cbi	0x12, 6	; 18
     c28:	08 95       	ret

00000c2a <LITE_READ_RADIO_CCA_PIN>:
     c2a:	20 b3       	in	r18, 0x10	; 16
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	00 24       	eor	r0, r0
     c30:	22 0f       	add	r18, r18
     c32:	33 1f       	adc	r19, r19
     c34:	00 1c       	adc	r0, r0
     c36:	22 0f       	add	r18, r18
     c38:	33 1f       	adc	r19, r19
     c3a:	00 1c       	adc	r0, r0
     c3c:	23 2f       	mov	r18, r19
     c3e:	30 2d       	mov	r19, r0
     c40:	21 70       	andi	r18, 0x01	; 1
     c42:	30 70       	andi	r19, 0x00	; 0
     c44:	c9 01       	movw	r24, r18
     c46:	08 95       	ret

00000c48 <LITE_MAKE_RADIO_CCA_OUTPUT>:
     c48:	8e 9a       	sbi	0x11, 6	; 17
     c4a:	08 95       	ret

00000c4c <LITE_MAKE_RADIO_CCA_INPUT>:
     c4c:	8e 98       	cbi	0x11, 6	; 17
     c4e:	08 95       	ret

00000c50 <setCC2420Pins>:

 
void setCC2420Pins(){
 //CC2420 pins  
    LITE_MAKE_MISO_INPUT();
     c50:	0e 94 b3 03 	call	0x766	; 0x766 <LITE_MAKE_MISO_INPUT>
    LITE_MAKE_MOSI_OUTPUT();
     c54:	0e 94 9d 03 	call	0x73a	; 0x73a <LITE_MAKE_MOSI_OUTPUT>
    LITE_MAKE_SPI_SCK_OUTPUT();
     c58:	0e 94 c1 03 	call	0x782	; 0x782 <LITE_MAKE_SPI_SCK_OUTPUT>




//-------------------------------------------------------------------------
LITE_ASSIGN_PIN(CC_RSTN, A, 6); // chipcon reset
     c5c:	d6 9a       	sbi	0x1a, 6	; 26
LITE_ASSIGN_PIN(CC_VREN, A, 5); // chipcon power enable
     c5e:	d5 9a       	sbi	0x1a, 5	; 26
//LITE_ASSIGN_PIN(CC_FIFOP1, D, 7);  // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP, E, 6);        // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP1, E, 6);       // fifo interrupt
LITE_ASSIGN_PIN(CC_CCA, D, 6);  // 
LITE_ASSIGN_PIN(CC_SFD, D, 4);  // chipcon packet arrival
LITE_ASSIGN_PIN(CC_CS, B, 0);   // chipcon enable
     c60:	b8 98       	cbi	0x17, 0	; 23
//-------------------------------------------------------------------------
LITE_ASSIGN_PIN(CC_RSTN, A, 6); // chipcon reset
LITE_ASSIGN_PIN(CC_VREN, A, 5); // chipcon power enable
//LITE_ASSIGN_PIN(CC_FIFOP1, D, 7);  // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP, E, 6);        // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP1, E, 6);       // fifo interrupt
     c62:	16 98       	cbi	0x02, 6	; 2
LITE_ASSIGN_PIN(CC_CCA, D, 6);  // 
     c64:	8e 98       	cbi	0x11, 6	; 17
LITE_ASSIGN_PIN(CC_SFD, D, 4);  // chipcon packet arrival
     c66:	8c 98       	cbi	0x11, 4	; 17
LITE_ASSIGN_PIN(CC_CS, B, 0);   // chipcon enable
LITE_ASSIGN_PIN(CC_FIFO, B, 7); // chipcon fifo
     c68:	bf 98       	cbi	0x17, 7	; 23
LITE_ASSIGN_PIN(RADIO_CCA, D, 6);       // 
     c6a:	8e 98       	cbi	0x11, 6	; 17
    LITE_MAKE_CC_CCA_INPUT();
    LITE_MAKE_CC_SFD_INPUT();
    LITE_MAKE_CC_FIFO_INPUT();
    LITE_MAKE_RADIO_CCA_INPUT();
   
  }
     c6c:	08 95       	ret

00000c6e <initUSART>:

//No need to be called from main 
//This function is called when the system is being initilized and prints system start 
void initUSART()
{
    UBRR0H = 0;
     c6e:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 15;
     c72:	8f e0       	ldi	r24, 0x0F	; 15
     c74:	89 b9       	out	0x09, r24	; 9
    UCSR0A |= _BV(U2X0);        // double speed
     c76:	59 9a       	sbi	0x0b, 1	; 11
    UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);        // 8 data-bits, 1 stop-bit
     c78:	e5 e9       	ldi	r30, 0x95	; 149
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	86 60       	ori	r24, 0x06	; 6
     c80:	80 83       	st	Z, r24
    UCSR0B |= _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
     c82:	8a b1       	in	r24, 0x0a	; 10
     c84:	88 69       	ori	r24, 0x98	; 152
     c86:	8a b9       	out	0x0a, r24	; 10
    // Enable recieve/transmit/interrupts
    cFlag = 1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	80 93 50 03 	sts	0x0350, r24
    previous = 0;
     c8e:	10 92 72 03 	sts	0x0372, r1
    status = 0;
     c92:	10 92 73 03 	sts	0x0373, r1
}
     c96:	08 95       	ret

00000c98 <usartPrint>:

//-------------------------------------------------------------------------
void usartPrint(uint8_t c)
{
     c98:	1f 93       	push	r17
     c9a:	18 2f       	mov	r17, r24
    if (cFlag == 0)
     c9c:	80 91 50 03 	lds	r24, 0x0350
     ca0:	88 23       	and	r24, r24
     ca2:	29 f0       	breq	.+10     	; 0xcae <usartPrint+0x16>
    {
        initUSART();
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
     ca4:	5d 9b       	sbis	0x0b, 5	; 11
     ca6:	fe cf       	rjmp	.-4      	; 0xca4 <usartPrint+0xc>
        ;
    UDR0 = c;
     ca8:	1c b9       	out	0x0c, r17	; 12
}
     caa:	1f 91       	pop	r17
     cac:	08 95       	ret
//-------------------------------------------------------------------------
void usartPrint(uint8_t c)
{
    if (cFlag == 0)
    {
        initUSART();
     cae:	0e 94 37 06 	call	0xc6e	; 0xc6e <initUSART>
     cb2:	f8 cf       	rjmp	.-16     	; 0xca4 <usartPrint+0xc>

00000cb4 <usartPrint_base>:
        ;
    UDR0 = c;
}

void usartPrint_base(uint8_t c)
{
     cb4:	1f 93       	push	r17
     cb6:	18 2f       	mov	r17, r24
    if (cFlag == 0)
     cb8:	80 91 50 03 	lds	r24, 0x0350
     cbc:	88 23       	and	r24, r24
     cbe:	29 f0       	breq	.+10     	; 0xcca <usartPrint_base+0x16>
    {
        initUSART();
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
     cc0:	5d 9b       	sbis	0x0b, 5	; 11
     cc2:	fe cf       	rjmp	.-4      	; 0xcc0 <usartPrint_base+0xc>
        ;
    UDR0 = c;
     cc4:	1c b9       	out	0x0c, r17	; 12
}
     cc6:	1f 91       	pop	r17
     cc8:	08 95       	ret

void usartPrint_base(uint8_t c)
{
    if (cFlag == 0)
    {
        initUSART();
     cca:	0e 94 37 06 	call	0xc6e	; 0xc6e <initUSART>
     cce:	f8 cf       	rjmp	.-16     	; 0xcc0 <usartPrint_base+0xc>

00000cd0 <printString>:



//-------------------------------------------------------------------------
void printString(char *p)
{
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	ec 01       	movw	r28, r24
    usartPrint(0xFC);
     cd6:	8c ef       	ldi	r24, 0xFC	; 252
     cd8:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    while ((*p) != '\0')
     cdc:	88 81       	ld	r24, Y
     cde:	88 23       	and	r24, r24
     ce0:	31 f0       	breq	.+12     	; 0xcee <printString+0x1e>
    {
        usartPrint(*p);
     ce2:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
        p++;
     ce6:	21 96       	adiw	r28, 0x01	; 1

//-------------------------------------------------------------------------
void printString(char *p)
{
    usartPrint(0xFC);
    while ((*p) != '\0')
     ce8:	88 81       	ld	r24, Y
     cea:	88 23       	and	r24, r24
     cec:	d1 f7       	brne	.-12     	; 0xce2 <printString+0x12>
    {
        usartPrint(*p);
        p++;
    }
    usartPrint(0xFC);
     cee:	8c ef       	ldi	r24, 0xFC	; 252
     cf0:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <printStringN>:

//-------------------------------------------------------------------------
void printStringN(char *p, uint8_t n)
{
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	08 2f       	mov	r16, r24
     d06:	f9 2e       	mov	r15, r25
     d08:	16 2f       	mov	r17, r22
    uint8_t i;

    usartPrint(0xFC);
     d0a:	8c ef       	ldi	r24, 0xFC	; 252
     d0c:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    for (i = 0; i < n; i++)
     d10:	11 23       	and	r17, r17
     d12:	59 f0       	breq	.+22     	; 0xd2a <printStringN+0x30>
     d14:	80 2f       	mov	r24, r16
     d16:	9f 2d       	mov	r25, r15
     d18:	9c 01       	movw	r18, r24
     d1a:	e9 01       	movw	r28, r18
    {
        usartPrint(*p);
     d1c:	89 91       	ld	r24, Y+
     d1e:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
void printStringN(char *p, uint8_t n)
{
    uint8_t i;

    usartPrint(0xFC);
    for (i = 0; i < n; i++)
     d22:	9e 01       	movw	r18, r28
     d24:	20 1b       	sub	r18, r16
     d26:	21 17       	cp	r18, r17
     d28:	c8 f3       	brcs	.-14     	; 0xd1c <printStringN+0x22>
    {
        usartPrint(*p);
        p++;
    }
    usartPrint(0xFC);
     d2a:	8c ef       	ldi	r24, 0xFC	; 252
     d2c:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
}
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	08 95       	ret

00000d3c <printStringN_base>:


//-------------------------------------------------------------------------
void printStringN_base(char *p, uint8_t n)
{
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	08 2f       	mov	r16, r24
     d46:	16 2f       	mov	r17, r22
    uint8_t i;

    //usartPrint(0xFC);
    for (i = 0; i < n; i++)
     d48:	66 23       	and	r22, r22
     d4a:	49 f0       	breq	.+18     	; 0xd5e <printStringN_base+0x22>
     d4c:	9c 01       	movw	r18, r24
     d4e:	e9 01       	movw	r28, r18
    {
        usartPrint_base(*p);
     d50:	89 91       	ld	r24, Y+
     d52:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <usartPrint_base>
void printStringN_base(char *p, uint8_t n)
{
    uint8_t i;

    //usartPrint(0xFC);
    for (i = 0; i < n; i++)
     d56:	9e 01       	movw	r18, r28
     d58:	20 1b       	sub	r18, r16
     d5a:	21 17       	cp	r18, r17
     d5c:	c8 f3       	brcs	.-14     	; 0xd50 <printStringN_base+0x14>
    {
        usartPrint_base(*p);
        p++;
    }
    //usartPrint(0xFC);
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	08 95       	ret

00000d68 <usartPutChipHex>:


//-------------------------------------------------------------------------
void usartPutChipHex(uint8_t cChip)
{
    if (cChip > 9)
     d68:	8a 30       	cpi	r24, 0x0A	; 10
     d6a:	20 f4       	brcc	.+8      	; 0xd74 <usartPutChipHex+0xc>
    {
        usartPrint('a' + cChip - 10);
    }
    else
    {
        usartPrint('0' + cChip);
     d6c:	80 5d       	subi	r24, 0xD0	; 208
     d6e:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
     d72:	08 95       	ret
//-------------------------------------------------------------------------
void usartPutChipHex(uint8_t cChip)
{
    if (cChip > 9)
    {
        usartPrint('a' + cChip - 10);
     d74:	89 5a       	subi	r24, 0xA9	; 169
     d76:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
     d7a:	08 95       	ret

00000d7c <usartPutLong2>:
    }
}

//-------------------------------------------------------------------------
void usartPutLong2(uint32_t l)
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <usartPutLong2+0x6>
     d82:	00 d0       	rcall	.+0      	; 0xd84 <usartPutLong2+0x8>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	69 83       	std	Y+1, r22	; 0x01
     d8a:	7a 83       	std	Y+2, r23	; 0x02
     d8c:	8b 83       	std	Y+3, r24	; 0x03
     d8e:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

    usartPrint(*pcByte);
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
     d92:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <usartPutHex>:

//-------------------------------------------------------------------------
void usartPutHex(uint8_t c)
{
     db6:	1f 93       	push	r17
     db8:	18 2f       	mov	r17, r24
    usartPutChipHex(c >> 4);
     dba:	82 95       	swap	r24
     dbc:	8f 70       	andi	r24, 0x0F	; 15
     dbe:	0e 94 b4 06 	call	0xd68	; 0xd68 <usartPutChipHex>
    usartPutChipHex(c & 0xf);
     dc2:	81 2f       	mov	r24, r17
     dc4:	8f 70       	andi	r24, 0x0F	; 15
     dc6:	0e 94 b4 06 	call	0xd68	; 0xd68 <usartPutChipHex>
}
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <printInteger32>:

//-------------------------------------------------------------------------
void printInteger32(int32_t a)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <printInteger32+0x6>
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <printInteger32+0x8>
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	69 83       	std	Y+1, r22	; 0x01
     ddc:	7a 83       	std	Y+2, r23	; 0x02
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	9c 83       	std	Y+4, r25	; 0x04
    usartPrint(0xFD);
     de2:	8d ef       	ldi	r24, 0xFD	; 253
     de4:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPutLong2(*(uint32_t *) (&a));
     de8:	69 81       	ldd	r22, Y+1	; 0x01
     dea:	7a 81       	ldd	r23, Y+2	; 0x02
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	0e 94 be 06 	call	0xd7c	; 0xd7c <usartPutLong2>
    usartPrint(0xFD);
     df4:	8d ef       	ldi	r24, 0xFD	; 253
     df6:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <printIntegerU32>:

//-------------------------------------------------------------------------
void printIntegerU32(uint32_t l)
{
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	7b 01       	movw	r14, r22
     e12:	8c 01       	movw	r16, r24
    usartPrint(0xFE);
     e14:	8e ef       	ldi	r24, 0xFE	; 254
     e16:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPutLong2(l);
     e1a:	c8 01       	movw	r24, r16
     e1c:	b7 01       	movw	r22, r14
     e1e:	0e 94 be 06 	call	0xd7c	; 0xd7c <usartPutLong2>
    usartPrint(0xFE);
     e22:	8e ef       	ldi	r24, 0xFE	; 254
     e24:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
}
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	08 95       	ret

00000e32 <printStringLn>:


void printStringLn()
{
	  usartPrint(0xFC);
     e32:	8c ef       	ldi	r24, 0xFC	; 252
     e34:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPrint(0x6D);
     e38:	8d e6       	ldi	r24, 0x6D	; 109
     e3a:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPrint(0x6D);
     e3e:	8d e6       	ldi	r24, 0x6D	; 109
     e40:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPrint(0x6D);
     e44:	8d e6       	ldi	r24, 0x6D	; 109
     e46:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPrint(0xFC);
     e4a:	8c ef       	ldi	r24, 0xFC	; 252
     e4c:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    
}
     e50:	08 95       	ret

00000e52 <usartPutLong>:
//-------------------------------------------------------------------------
void usartPutLong(uint32_t l)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <usartPutLong+0x6>
     e58:	00 d0       	rcall	.+0      	; 0xe5a <usartPutLong+0x8>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	69 83       	std	Y+1, r22	; 0x01
     e60:	7a 83       	std	Y+2, r23	; 0x02
     e62:	8b 83       	std	Y+3, r24	; 0x03
     e64:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

    usartPrint('0');
     e66:	80 e3       	ldi	r24, 0x30	; 48
     e68:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPrint('x');
     e6c:	88 e7       	ldi	r24, 0x78	; 120
     e6e:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPutHex(*pcByte);
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	0e 94 db 06 	call	0xdb6	; 0xdb6 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	0e 94 db 06 	call	0xdb6	; 0xdb6 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	0e 94 db 06 	call	0xdb6	; 0xdb6 <usartPutHex>
}
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <printInteger>:

//-------------------------------------------------------------------------
void printInteger(int32_t a, int32_t b, int32_t c, int32_t d)
{
     e98:	af 92       	push	r10
     e9a:	bf 92       	push	r11
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	60 97       	sbiw	r28, 0x10	; 16
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	69 83       	std	Y+1, r22	; 0x01
     ebe:	7a 83       	std	Y+2, r23	; 0x02
     ec0:	8b 83       	std	Y+3, r24	; 0x03
     ec2:	9c 83       	std	Y+4, r25	; 0x04
     ec4:	2d 83       	std	Y+5, r18	; 0x05
     ec6:	3e 83       	std	Y+6, r19	; 0x06
     ec8:	4f 83       	std	Y+7, r20	; 0x07
     eca:	58 87       	std	Y+8, r21	; 0x08
     ecc:	e9 86       	std	Y+9, r14	; 0x09
     ece:	fa 86       	std	Y+10, r15	; 0x0a
     ed0:	0b 87       	std	Y+11, r16	; 0x0b
     ed2:	1c 87       	std	Y+12, r17	; 0x0c
     ed4:	ad 86       	std	Y+13, r10	; 0x0d
     ed6:	be 86       	std	Y+14, r11	; 0x0e
     ed8:	cf 86       	std	Y+15, r12	; 0x0f
     eda:	d8 8a       	std	Y+16, r13	; 0x10
    usartPrint(1);
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPutLong(*(uint32_t *) (&a));
     ee2:	69 81       	ldd	r22, Y+1	; 0x01
     ee4:	7a 81       	ldd	r23, Y+2	; 0x02
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	9c 81       	ldd	r25, Y+4	; 0x04
     eea:	0e 94 29 07 	call	0xe52	; 0xe52 <usartPutLong>
    usartPutLong(*(uint32_t *) (&b));
     eee:	6d 81       	ldd	r22, Y+5	; 0x05
     ef0:	7e 81       	ldd	r23, Y+6	; 0x06
     ef2:	8f 81       	ldd	r24, Y+7	; 0x07
     ef4:	98 85       	ldd	r25, Y+8	; 0x08
     ef6:	0e 94 29 07 	call	0xe52	; 0xe52 <usartPutLong>
    usartPutLong(*(uint32_t *) (&c));
     efa:	69 85       	ldd	r22, Y+9	; 0x09
     efc:	7a 85       	ldd	r23, Y+10	; 0x0a
     efe:	8b 85       	ldd	r24, Y+11	; 0x0b
     f00:	9c 85       	ldd	r25, Y+12	; 0x0c
     f02:	0e 94 29 07 	call	0xe52	; 0xe52 <usartPutLong>
    usartPutLong(*(uint32_t *) (&d));
     f06:	6d 85       	ldd	r22, Y+13	; 0x0d
     f08:	7e 85       	ldd	r23, Y+14	; 0x0e
     f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0c:	98 89       	ldd	r25, Y+16	; 0x10
     f0e:	0e 94 29 07 	call	0xe52	; 0xe52 <usartPutLong>
}
     f12:	60 96       	adiw	r28, 0x10	; 16
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	bf 90       	pop	r11
     f30:	af 90       	pop	r10
     f32:	08 95       	ret

00000f34 <__vector_18>:


SIGNAL(USART0_RX_vect)
{
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	0b b6       	in	r0, 0x3b	; 59
     f3e:	0f 92       	push	r0
     f40:	11 24       	eor	r1, r1
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
    uint8_t dummy = UDR0;
     f68:	0c b1       	in	r16, 0x0c	; 12
    uint8_t i;
    uint8_t isthreadtrue;
    _atomic_t _atomic;

    isthreadtrue = 0;
    _atomic = _atomic_start();
     f6a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
     f6e:	18 2f       	mov	r17, r24
    if (is_thread())
     f70:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <is_thread>
     f74:	88 23       	and	r24, r24
     f76:	b9 f5       	brne	.+110    	; 0xfe6 <__vector_18+0xb2>
     f78:	19 82       	std	Y+1, r1	; 0x01
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
     f7a:	81 2f       	mov	r24, r17
     f7c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    if (dummy == 'a')
     f80:	01 36       	cpi	r16, 0x61	; 97
     f82:	09 f4       	brne	.+2      	; 0xf86 <__vector_18+0x52>
     f84:	44 c0       	rjmp	.+136    	; 0x100e <__vector_18+0xda>
        //initCommandReceived(receivebuffer); 
        //serialDeliverPacket(((uint16_t) portnum), ((uint8_t) length),
                            //&receivebuffer[0]);
        currentindex = 0;
    }
    else if (dummy == 'z')
     f86:	0a 37       	cpi	r16, 0x7A	; 122
     f88:	09 f4       	brne	.+2      	; 0xf8c <__vector_18+0x58>
     f8a:	5e c0       	rjmp	.+188    	; 0x1048 <__vector_18+0x114>
        }
        _atomic_end(_atomic);
        initCommandReceived(receivebuffer);
        currentindex = 0;
    }
    _atomic = _atomic_start();
     f8c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
     f90:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	61 f4       	brne	.+24     	; 0xfb0 <__vector_18+0x7c>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
     f98:	8d b7       	in	r24, 0x3d	; 61
     f9a:	9e b7       	in	r25, 0x3e	; 62
     f9c:	90 93 5f 05 	sts	0x055F, r25
     fa0:	80 93 5e 05 	sts	0x055E, r24
     fa4:	80 91 b1 05 	lds	r24, 0x05B1
     fa8:	90 91 b2 05 	lds	r25, 0x05B2
     fac:	9e bf       	out	0x3e, r25	; 62
     fae:	8d bf       	out	0x3d, r24	; 61
        //thread_yield();   
    }
    _atomic_end(_atomic);
     fb0:	82 2f       	mov	r24, r18
     fb2:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    // if (is_thread())
    // {
    //   SWAP_STACK_PTR( old_stack_ptr, stackinterrupt_ptr);
    //  thread_yield();   
    // }
}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	ff 91       	pop	r31
     fbe:	ef 91       	pop	r30
     fc0:	bf 91       	pop	r27
     fc2:	af 91       	pop	r26
     fc4:	9f 91       	pop	r25
     fc6:	8f 91       	pop	r24
     fc8:	7f 91       	pop	r23
     fca:	6f 91       	pop	r22
     fcc:	5f 91       	pop	r21
     fce:	4f 91       	pop	r20
     fd0:	3f 91       	pop	r19
     fd2:	2f 91       	pop	r18
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	0f 90       	pop	r0
     fda:	0b be       	out	0x3b, r0	; 59
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	0f 90       	pop	r0
     fe2:	1f 90       	pop	r1
     fe4:	18 95       	reti
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
     fe6:	8d b7       	in	r24, 0x3d	; 61
     fe8:	9e b7       	in	r25, 0x3e	; 62
     fea:	90 93 b2 05 	sts	0x05B2, r25
     fee:	80 93 b1 05 	sts	0x05B1, r24
     ff2:	80 91 5e 05 	lds	r24, 0x055E
     ff6:	90 91 5f 05 	lds	r25, 0x055F
     ffa:	9e bf       	out	0x3e, r25	; 62
     ffc:	8d bf       	out	0x3d, r24	; 61
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
    }
    _atomic_end(_atomic);
    1002:	81 2f       	mov	r24, r17
    1004:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    if (dummy == 'a')
    1008:	01 36       	cpi	r16, 0x61	; 97
    100a:	09 f0       	breq	.+2      	; 0x100e <__vector_18+0xda>
    100c:	bc cf       	rjmp	.-136    	; 0xf86 <__vector_18+0x52>
    {
        _atomic_t _atomic = _atomic_start();
    100e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    1012:	98 2f       	mov	r25, r24

        while (!(UCSR0A & (1 << RXC0)))
    1014:	5f 9b       	sbis	0x0b, 7	; 11
    1016:	fe cf       	rjmp	.-4      	; 0x1014 <__vector_18+0xe0>
            ;
        portnum = UDR0;
    1018:	8c b1       	in	r24, 0x0c	; 12
        portnum = portnum - 48;
        while (!(UCSR0A & (1 << RXC0)))
    101a:	5f 9b       	sbis	0x0b, 7	; 11
    101c:	fe cf       	rjmp	.-4      	; 0x101a <__vector_18+0xe6>
            ;
        length = UDR0;
    101e:	8c b1       	in	r24, 0x0c	; 12
        length = length - 48;
        for (i = 0; i < length; i++)
    1020:	80 33       	cpi	r24, 0x30	; 48
    1022:	71 f0       	breq	.+28     	; 0x1040 <__vector_18+0x10c>
    1024:	e1 e5       	ldi	r30, 0x51	; 81
    1026:	f3 e0       	ldi	r31, 0x03	; 3
    1028:	81 53       	subi	r24, 0x31	; 49
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	2e 5a       	subi	r18, 0xAE	; 174
    1030:	3c 4f       	sbci	r19, 0xFC	; 252
        {
            while (!(UCSR0A & (1 << RXC0)))
    1032:	5f 9b       	sbis	0x0b, 7	; 11
    1034:	fe cf       	rjmp	.-4      	; 0x1032 <__vector_18+0xfe>
                ;
            receivebuffer[currentindex++] = UDR0;
    1036:	8c b1       	in	r24, 0x0c	; 12
    1038:	81 93       	st	Z+, r24
        portnum = portnum - 48;
        while (!(UCSR0A & (1 << RXC0)))
            ;
        length = UDR0;
        length = length - 48;
        for (i = 0; i < length; i++)
    103a:	e2 17       	cp	r30, r18
    103c:	f3 07       	cpc	r31, r19
    103e:	c9 f7       	brne	.-14     	; 0x1032 <__vector_18+0xfe>
        {
            while (!(UCSR0A & (1 << RXC0)))
                ;
            receivebuffer[currentindex++] = UDR0;
        }
        _atomic_end(_atomic);
    1040:	89 2f       	mov	r24, r25
    1042:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    1046:	a2 cf       	rjmp	.-188    	; 0xf8c <__vector_18+0x58>
                            //&receivebuffer[0]);
        currentindex = 0;
    }
    else if (dummy == 'z')
    {
        _atomic_t _atomic = _atomic_start();
    1048:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    104c:	98 2f       	mov	r25, r24
    104e:	01 e5       	ldi	r16, 0x51	; 81
    1050:	13 e0       	ldi	r17, 0x03	; 3

        for (i = 0; i < 33; i++)
        {
            while (!(UCSR0A & (1 << RXC0)))
    1052:	5f 9b       	sbis	0x0b, 7	; 11
    1054:	fe cf       	rjmp	.-4      	; 0x1052 <__vector_18+0x11e>
                ;
            receivebuffer[currentindex++] = UDR0;
    1056:	8c b1       	in	r24, 0x0c	; 12
    1058:	f8 01       	movw	r30, r16
    105a:	81 93       	st	Z+, r24
    105c:	8f 01       	movw	r16, r30
    }
    else if (dummy == 'z')
    {
        _atomic_t _atomic = _atomic_start();

        for (i = 0; i < 33; i++)
    105e:	f3 e0       	ldi	r31, 0x03	; 3
    1060:	02 37       	cpi	r16, 0x72	; 114
    1062:	1f 07       	cpc	r17, r31
    1064:	b1 f7       	brne	.-20     	; 0x1052 <__vector_18+0x11e>
        {
            while (!(UCSR0A & (1 << RXC0)))
                ;
            receivebuffer[currentindex++] = UDR0;
        }
        _atomic_end(_atomic);
    1066:	89 2f       	mov	r24, r25
    1068:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
        initCommandReceived(receivebuffer);
    106c:	c8 01       	movw	r24, r16
    106e:	81 97       	sbiw	r24, 0x21	; 33
    1070:	0e 94 06 02 	call	0x40c	; 0x40c <initCommandReceived>
    1074:	8b cf       	rjmp	.-234    	; 0xf8c <__vector_18+0x58>

00001076 <printfintegeru32>:
   _atomic_end(currentatomic); 
}

//-------------------------------------------------------------------------
void printfintegeru32(uint32_t val)
{
    1076:	df 92       	push	r13
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	7b 01       	movw	r14, r22
    1082:	8c 01       	movw	r16, r24
	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    1084:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    1088:	d8 2e       	mov	r13, r24
    
#ifdef PLATFORM_AVR
  #ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
    108a:	0e 94 32 02 	call	0x464	; 0x464 <node_readnodestring>
    108e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  printString(": ");
    1092:	84 e3       	ldi	r24, 0x34	; 52
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	#endif
    printIntegerU32(val);
    109a:	c8 01       	movw	r24, r16
    109c:	b7 01       	movw	r22, r14
    109e:	0e 94 04 07 	call	0xe08	; 0xe08 <printIntegerU32>
#endif
_atomic_end(currentatomic); 
    10a2:	8d 2d       	mov	r24, r13
    10a4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	08 95       	ret

000010b4 <printfstr>:
#include "../avrserial/serialprint.h"
#endif


void printfstr(char *str)
{
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	8c 01       	movw	r16, r24
	
	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    10bc:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    10c0:	f8 2e       	mov	r15, r24
#ifdef PLATFORM_AVR
		#ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
    10c2:	0e 94 32 02 	call	0x464	; 0x464 <node_readnodestring>
    10c6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  printString(": ");
    10ca:	84 e3       	ldi	r24, 0x34	; 52
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  #endif
    printString(str);
    10d2:	c8 01       	movw	r24, r16
    10d4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
#endif
  _atomic_end(currentatomic);
    10d8:	8f 2d       	mov	r24, r15
    10da:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	08 95       	ret

000010e6 <printfinteger32>:
#endif
}

//-------------------------------------------------------------------------
void printfinteger32(int32_t val)
{
    10e6:	df 92       	push	r13
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	7b 01       	movw	r14, r22
    10f2:	8c 01       	movw	r16, r24
	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    10f4:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    10f8:	d8 2e       	mov	r13, r24
#ifdef PLATFORM_AVR
	#ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
    10fa:	0e 94 32 02 	call	0x464	; 0x464 <node_readnodestring>
    10fe:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  printString(": ");
    1102:	84 e3       	ldi	r24, 0x34	; 52
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	#endif
    printInteger32(val);
    110a:	c8 01       	movw	r24, r16
    110c:	b7 01       	movw	r22, r14
    110e:	0e 94 e7 06 	call	0xdce	; 0xdce <printInteger32>
#endif
   _atomic_end(currentatomic); 
    1112:	8d 2d       	mov	r24, r13
    1114:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	08 95       	ret

00001124 <printfval>:

//-------------------------------------------------------------------------
void printfval(uint8_t val)
{
#ifdef PLATFORM_AVR
    usartPrint(val);
    1124:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
#endif
}
    1128:	08 95       	ret

0000112a <printfstrlen_base>:
}

void printfstrlen_base(char *str, uint8_t len)
{
#ifdef PLATFORM_AVR
    printStringN_base(str, len);
    112a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printStringN_base>
#endif
}
    112e:	08 95       	ret

00001130 <printfstrlen>:
  
 }

//-------------------------------------------------------------------------
void printfstrlen(char *str, uint8_t len)
{
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	8c 01       	movw	r16, r24
    1138:	f6 2e       	mov	r15, r22
#ifdef PLATFORM_AVR
    #ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
    113a:	0e 94 32 02 	call	0x464	; 0x464 <node_readnodestring>
    113e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  printString(": ");
    1142:	84 e3       	ldi	r24, 0x34	; 52
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  #endif
    printStringN(str, len);
    114a:	c8 01       	movw	r24, r16
    114c:	6f 2d       	mov	r22, r15
    114e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <printStringN>
#endif
}
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	08 95       	ret

0000115a <printfstrln>:
#endif
  _atomic_end(currentatomic);
}

void printfstrln()
 {
    115a:	1f 93       	push	r17
 	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    115c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    1160:	18 2f       	mov	r17, r24
  #ifdef PLATFORM_AVR
     printStringLn();
    1162:	0e 94 19 07 	call	0xe32	; 0xe32 <printStringLn>
  #endif
  _atomic_end(currentatomic);
    1166:	81 2f       	mov	r24, r17
    1168:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
  
 }
    116c:	1f 91       	pop	r17
    116e:	08 95       	ret

00001170 <AMStandard_SendMsg_default_sendDone>:
//-------------------------------------------------------------------------
inline result_t AMStandard_SendMsg_default_sendDone(uint8_t id, Radio_MsgPtr
                                                    msg, result_t success)
{
    return SUCCESS;
}
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	08 95       	ret

00001174 <AMStandard_SendMsg_sendDone>:
inline result_t AMStandard_SendMsg_sendDone(uint16_t arg_0xa3b8f90,
                                            Radio_MsgPtr arg_0xa31a0a0,
                                            result_t arg_0xa31a1f0)
{
    return 0;
}
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	08 95       	ret

00001178 <AMStandard_default_sendDone>:

//-------------------------------------------------------------------------
inline result_t AMStandard_default_sendDone(void)
{
    return SUCCESS;
}
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	08 95       	ret

0000117c <AMStandard_sendDone>:
{
    unsigned char result;

    result = AMStandard_default_sendDone();
    return result;
}
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	08 95       	ret

00001180 <AMStandard_ReceiveMsg_default_receive>:

//-------------------------------------------------------------------------
inline Radio_MsgPtr AMStandard_ReceiveMsg_default_receive(uint8_t id,
                                                          Radio_MsgPtr msg)
{
    1180:	cb 01       	movw	r24, r22
    return msg;
}
    1182:	08 95       	ret

00001184 <AMStandard_ReceiveMsg_receive>:

//Another critical function that bridges to the application 
inline Radio_MsgPtr AMStandard_ReceiveMsg_receive(uint16_t port, Radio_MsgPtr
                                                  msg)
{
    1184:	cb 01       	movw	r24, r22
    return msg;
}
    1186:	08 95       	ret

00001188 <AMStandard_RadioSend_sendDone>:
}

//-------------------------------------------------------------------------
result_t AMStandard_reportSendDone(Radio_MsgPtr msg, result_t success)
{
    AMStandard_state = FALSE;
    1188:	10 92 17 04 	sts	0x0417, r1
//-------------------------------------------------------------------------
inline result_t AMStandard_RadioSend_sendDone(Radio_MsgPtr msg, result_t
                                              success)
{
    return AMStandard_reportSendDone(msg, success);
}
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	08 95       	ret

00001190 <AMStandard_reportSendDone>:

//-------------------------------------------------------------------------
result_t AMStandard_reportSendDone(Radio_MsgPtr msg, result_t success)
{
    AMStandard_state = FALSE;
    1190:	10 92 17 04 	sts	0x0417, r1
    //  AMStandard_SendMsg_sendDone(msg->port, msg, success);
    //  AMStandard_sendDone();
    return SUCCESS;
}
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	08 95       	ret

00001198 <restoreRadioState>:

//-------------------------------------------------------------------------
inline void restoreRadioState()
{
    AMStandard_state = FALSE;
    1198:	10 92 17 04 	sts	0x0417, r1
#if defined(PLATFORM_AVR) && defined (RADIO_CC2420)
    restorecc2420state();
    119c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <restorecc2420state>
#endif
}
    11a0:	08 95       	ret

000011a2 <received>:
//Basically it returns a radio message pointer that must be reused 
//and the content of the packet is the correct packet parsed, and is useful 
//The content starts with a length that is the actual payload length and all information are correct
//Must copy this content to the user supplied buffer, put the user action into a task, and then return this buffer to the recevie module 
Radio_MsgPtr received(Radio_MsgPtr packet)
{
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
    uint16_t addr = CURRENT_NODE_ID;
    11a8:	20 91 04 04 	lds	r18, 0x0404
    11ac:	30 91 05 04 	lds	r19, 0x0405
#ifdef TRACE_ENABLE_RADIOEVENT
    addTrace(TRACE_RADIOEVENT_RECEIVEPACKET, 100);
#endif
#endif

    debugmsg = packet; 
    11b0:	90 93 1b 04 	sts	0x041B, r25
    11b4:	80 93 1a 04 	sts	0x041A, r24
    AMStandard_counter++;
    11b8:	80 91 18 04 	lds	r24, 0x0418
    11bc:	90 91 19 04 	lds	r25, 0x0419
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	90 93 19 04 	sts	0x0419, r25
    11c6:	80 93 18 04 	sts	0x0418, r24
    if (packet->crc == 1 && (packet->addr == BCAST_ADDRESS || packet->addr ==
    11ca:	c0 59       	subi	r28, 0x90	; 144
    11cc:	df 4f       	sbci	r29, 0xFF	; 255
    11ce:	88 81       	ld	r24, Y
    11d0:	c0 57       	subi	r28, 0x70	; 112
    11d2:	d0 40       	sbci	r29, 0x00	; 0
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	21 f0       	breq	.+8      	; 0x11e0 <received+0x3e>
        {
            packet = tmp;
        }
    }
    return packet;
}
    11d8:	ce 01       	movw	r24, r28
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret
#endif
#endif

    debugmsg = packet; 
    AMStandard_counter++;
    if (packet->crc == 1 && (packet->addr == BCAST_ADDRESS || packet->addr ==
    11e0:	8e 81       	ldd	r24, Y+6	; 0x06
    11e2:	9f 81       	ldd	r25, Y+7	; 0x07
    11e4:	4f ef       	ldi	r20, 0xFF	; 255
    11e6:	8f 3f       	cpi	r24, 0xFF	; 255
    11e8:	94 07       	cpc	r25, r20
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <received+0x50>
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	99 f7       	brne	.-26     	; 0x11d8 <received+0x36>
                             addr))
    {
        uint16_t port = packet->port;
        Radio_MsgPtr tmp;

        tmp = Standard_Receive_Packet(port, packet);
    11f2:	88 85       	ldd	r24, Y+8	; 0x08
    11f4:	99 85       	ldd	r25, Y+9	; 0x09
    11f6:	be 01       	movw	r22, r28
    11f8:	0e 94 37 0a 	call	0x146e	; 0x146e <Standard_Receive_Packet>
        if (tmp)
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 f3       	breq	.-40     	; 0x11d8 <received+0x36>
    1200:	ec 01       	movw	r28, r24
        {
            packet = tmp;
        }
    }
    return packet;
}
    1202:	ce 01       	movw	r24, r28
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <AMStandard_SendMsg_send>:

//addr means the current broadcast address, et. id is the port 
//Send out a message and takes a while to complete 
result_t AMStandard_SendMsg_send(uint16_t port, uint16_t addr, uint8_t length,
                                 Radio_MsgPtr data)
{
    120a:	df 92       	push	r13
    120c:	ef 92       	push	r14
    120e:	ff 92       	push	r15
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	7c 01       	movw	r14, r24
    121a:	8b 01       	movw	r16, r22
    121c:	d4 2e       	mov	r13, r20
    121e:	e9 01       	movw	r28, r18
#ifdef TRACE_ENABLE
#ifdef TRACE_ENABLE_RADIOEVENT
    addTrace(TRACE_RADIOEVENT_SENDPACKET, 100);
#endif
#endif
    if (!AMStandard_state)
    1220:	80 91 17 04 	lds	r24, 0x0417
    1224:	88 23       	and	r24, r24
    1226:	41 f4       	brne	.+16     	; 0x1238 <AMStandard_SendMsg_send+0x2e>
    {
        AMStandard_state = TRUE;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 93 17 04 	sts	0x0417, r24
        if (length > DATA_LENGTH)
    122e:	84 e6       	ldi	r24, 0x64	; 100
    1230:	84 17       	cp	r24, r20
    1232:	58 f4       	brcc	.+22     	; 0x124a <AMStandard_SendMsg_send+0x40>
        {
            AMStandard_state = FALSE;
    1234:	10 92 17 04 	sts	0x0417, r1
    1238:	80 e0       	ldi	r24, 0x00	; 0
            data->port = port;
        }
        return SUCCESS;
    }
    return FAIL;
}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
    1246:	df 90       	pop	r13
    1248:	08 95       	ret
        if (length > DATA_LENGTH)
        {
            AMStandard_state = FALSE;
            return FAIL;
        }
        if (!postTask(AMStandard_sendTask, 20))
    124a:	83 e6       	ldi	r24, 0x63	; 99
    124c:	99 e0       	ldi	r25, 0x09	; 9
    124e:	64 e1       	ldi	r22, 0x14	; 20
    1250:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    1254:	88 23       	and	r24, r24
    1256:	91 f0       	breq	.+36     	; 0x127c <AMStandard_SendMsg_send+0x72>
        {
            //length is the first one that means the actual data length
            //adr is the next hop id
            //type is the port
            //group is manmade result 
            AMStandard_buffer = data;
    1258:	d0 93 1f 04 	sts	0x041F, r29
    125c:	c0 93 1e 04 	sts	0x041E, r28
            data->length = length;
    1260:	d8 82       	st	Y, r13
            data->addr = addr;
    1262:	1f 83       	std	Y+7, r17	; 0x07
    1264:	0e 83       	std	Y+6, r16	; 0x06
            data->port = port;
    1266:	f9 86       	std	Y+9, r15	; 0x09
    1268:	e8 86       	std	Y+8, r14	; 0x08
    126a:	81 e0       	ldi	r24, 0x01	; 1
        }
        return SUCCESS;
    }
    return FAIL;
}
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	df 90       	pop	r13
    127a:	08 95       	ret
        if (!postTask(AMStandard_sendTask, 20))
        {
            {
            }
            ;
            AMStandard_state = FALSE;
    127c:	10 92 17 04 	sts	0x0417, r1
    1280:	dc cf       	rjmp	.-72     	; 0x123a <AMStandard_SendMsg_send+0x30>

00001282 <AMStandard_RadioControl_start>:
{
    unsigned char result;
	result = 0; 

#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    result = cc2420radiom_StdControl_start();
    1282:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <cc2420radiom_StdControl_start>
#endif
    return result;
}
    1286:	08 95       	ret

00001288 <AMStandard_Control_start>:
{
    unsigned char result;
	result = 0; 

#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    result = cc2420radiom_StdControl_start();
    1288:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <cc2420radiom_StdControl_start>
//-------------------------------------------------------------------------
inline bool AMStandard_Control_start(void)
{
    result_t ok2 = AMStandard_RadioControl_start();

    AMStandard_state = FALSE;
    128c:	10 92 17 04 	sts	0x0417, r1
    return ok2;
}
    1290:	08 95       	ret

00001292 <AMStandard_Control_init>:
    result_t ok2;
	ok2 = 0; 


#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    ok2 = cc2420radiom_SplitControl_init();
    1292:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <cc2420radiom_SplitControl_init>

#if defined(PLATFORM_AVR) && defined(RADIO_RF230)
    ok2 = trx_init();
#endif 

    AMStandard_state = FALSE;
    1296:	10 92 17 04 	sts	0x0417, r1
    AMStandard_lastCount = 0;
    129a:	10 92 1d 04 	sts	0x041D, r1
    129e:	10 92 1c 04 	sts	0x041C, r1
    AMStandard_counter = 0;
    12a2:	10 92 19 04 	sts	0x0419, r1
    12a6:	10 92 18 04 	sts	0x0418, r1
    return ok2;
}
    12aa:	08 95       	ret

000012ac <AMStandard_RadioSend_send>:
    return ok2;
}

//-------------------------------------------------------------------------
inline result_t AMStandard_RadioSend_send(Radio_MsgPtr arg_0xa3c31f8)
{
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	8c 01       	movw	r16, r24
}

//-------------------------------------------------------------------------
inline void restoreRadioState()
{
    AMStandard_state = FALSE;
    12b2:	10 92 17 04 	sts	0x0417, r1
#if defined(PLATFORM_AVR) && defined (RADIO_CC2420)
    restorecc2420state();
    12b6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <restorecc2420state>
    //Every time send, restore first. 
    
    restoreRadioState();
    
#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    result = cc2420radiom_Send_send(arg_0xa3c31f8);
    12ba:	c8 01       	movw	r24, r16
    12bc:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <cc2420radiom_Send_send>
   trx_init();
   result = rf230radio_Send_send(arg_0xa3c31f8);
#endif

    return result;
}
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	08 95       	ret

000012c6 <AMStandard_sendTask>:

//-------------------------------------------------------------------------
inline void AMStandard_sendTask(void)
{
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    result_t ok;
    Radio_MsgPtr buf;

    buf = AMStandard_buffer;
    12ca:	00 91 1e 04 	lds	r16, 0x041E
    12ce:	10 91 1f 04 	lds	r17, 0x041F
}

//-------------------------------------------------------------------------
inline void restoreRadioState()
{
    AMStandard_state = FALSE;
    12d2:	10 92 17 04 	sts	0x0417, r1
#if defined(PLATFORM_AVR) && defined (RADIO_CC2420)
    restorecc2420state();
    12d6:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <restorecc2420state>
    //Every time send, restore first. 
    
    restoreRadioState();
    
#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    result = cc2420radiom_Send_send(arg_0xa3c31f8);
    12da:	c8 01       	movw	r24, r16
    12dc:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <cc2420radiom_Send_send>
    result_t ok;
    Radio_MsgPtr buf;

    buf = AMStandard_buffer;
    ok = AMStandard_RadioSend_send(buf);
    if (ok == FAIL)
    12e0:	88 23       	and	r24, r24
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <AMStandard_sendTask+0x22>
}

//-------------------------------------------------------------------------
result_t AMStandard_reportSendDone(Radio_MsgPtr msg, result_t success)
{
    AMStandard_state = FALSE;
    12e4:	10 92 17 04 	sts	0x0417, r1
    ok = AMStandard_RadioSend_send(buf);
    if (ok == FAIL)
    {
        AMStandard_reportSendDone(AMStandard_buffer, FAIL);
    }
}
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	08 95       	ret

000012ee <AMStandard_RadioReceive_receive>:



//-------------------------------------------------------------------------
inline Radio_MsgPtr AMStandard_RadioReceive_receive(Radio_MsgPtr packet)
{
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	ec 01       	movw	r28, r24
//and the content of the packet is the correct packet parsed, and is useful 
//The content starts with a length that is the actual payload length and all information are correct
//Must copy this content to the user supplied buffer, put the user action into a task, and then return this buffer to the recevie module 
Radio_MsgPtr received(Radio_MsgPtr packet)
{
    uint16_t addr = CURRENT_NODE_ID;
    12f4:	20 91 04 04 	lds	r18, 0x0404
    12f8:	30 91 05 04 	lds	r19, 0x0405
#ifdef TRACE_ENABLE_RADIOEVENT
    addTrace(TRACE_RADIOEVENT_RECEIVEPACKET, 100);
#endif
#endif

    debugmsg = packet; 
    12fc:	90 93 1b 04 	sts	0x041B, r25
    1300:	80 93 1a 04 	sts	0x041A, r24
    AMStandard_counter++;
    1304:	80 91 18 04 	lds	r24, 0x0418
    1308:	90 91 19 04 	lds	r25, 0x0419
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	90 93 19 04 	sts	0x0419, r25
    1312:	80 93 18 04 	sts	0x0418, r24
    if (packet->crc == 1 && (packet->addr == BCAST_ADDRESS || packet->addr ==
    1316:	c0 59       	subi	r28, 0x90	; 144
    1318:	df 4f       	sbci	r29, 0xFF	; 255
    131a:	88 81       	ld	r24, Y
    131c:	c0 57       	subi	r28, 0x70	; 112
    131e:	d0 40       	sbci	r29, 0x00	; 0
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	21 f0       	breq	.+8      	; 0x132c <AMStandard_RadioReceive_receive+0x3e>
   #if defined(PLATFORM_AVR) && defined(RADIO_RF230)
   return received_iris( packet );
   #endif

     
}
    1324:	ce 01       	movw	r24, r28
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret
#endif
#endif

    debugmsg = packet; 
    AMStandard_counter++;
    if (packet->crc == 1 && (packet->addr == BCAST_ADDRESS || packet->addr ==
    132c:	8e 81       	ldd	r24, Y+6	; 0x06
    132e:	9f 81       	ldd	r25, Y+7	; 0x07
    1330:	4f ef       	ldi	r20, 0xFF	; 255
    1332:	8f 3f       	cpi	r24, 0xFF	; 255
    1334:	94 07       	cpc	r25, r20
    1336:	19 f0       	breq	.+6      	; 0x133e <AMStandard_RadioReceive_receive+0x50>
    1338:	28 17       	cp	r18, r24
    133a:	39 07       	cpc	r19, r25
    133c:	99 f7       	brne	.-26     	; 0x1324 <AMStandard_RadioReceive_receive+0x36>
                             addr))
    {
        uint16_t port = packet->port;
        Radio_MsgPtr tmp;

        tmp = Standard_Receive_Packet(port, packet);
    133e:	88 85       	ldd	r24, Y+8	; 0x08
    1340:	99 85       	ldd	r25, Y+9	; 0x09
    1342:	be 01       	movw	r22, r28
    1344:	0e 94 37 0a 	call	0x146e	; 0x146e <Standard_Receive_Packet>
        if (tmp)
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	61 f3       	breq	.-40     	; 0x1324 <AMStandard_RadioReceive_receive+0x36>
    134c:	ec 01       	movw	r28, r24
   #if defined(PLATFORM_AVR) && defined(RADIO_RF230)
   return received_iris( packet );
   #endif

     
}
    134e:	ce 01       	movw	r24, r28
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <initRadioHandle>:
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        receivehandles[i].handlevalid = 0;
    1356:	10 92 2b 04 	sts	0x042B, r1
    135a:	10 92 37 04 	sts	0x0437, r1
    135e:	10 92 43 04 	sts	0x0443, r1
    1362:	10 92 4f 04 	sts	0x044F, r1
    1366:	10 92 5b 04 	sts	0x045B, r1
    }
	 
}
    136a:	08 95       	ret

0000136c <registerEvent>:
//packetinfo for storing the received packet info on rssi and lqi 
//handle function to be posted 
void registerEvent(uint16_t port, uint8_t maxLength, uint8_t * dataReady,
                   uint8_t * data, uint8_t * packetinfo,
                   void (*handlefunc) (void))
{
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	ec 01       	movw	r28, r24
    137a:	eb e2       	ldi	r30, 0x2B	; 43
    137c:	f4 e0       	ldi	r31, 0x04	; 4
    137e:	a0 e0       	ldi	r26, 0x00	; 0
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
        if (receivehandles[i].handlevalid == 0)
    1382:	80 81       	ld	r24, Z
    1384:	88 23       	and	r24, r24
    1386:	61 f0       	breq	.+24     	; 0x13a0 <registerEvent+0x34>
            receivehandles[i].dataReady = dataReady;
            receivehandles[i].data = data;
            receivehandles[i].packetinfo = packetinfo;
            receivehandles[i].handlefunc = handlefunc;
            receivehandles[i].handlevalid = 1;
            return;
    1388:	11 96       	adiw	r26, 0x01	; 1
    138a:	3c 96       	adiw	r30, 0x0c	; 12
                   uint8_t * data, uint8_t * packetinfo,
                   void (*handlefunc) (void))
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    138c:	a5 30       	cpi	r26, 0x05	; 5
    138e:	b1 05       	cpc	r27, r1
    1390:	c1 f7       	brne	.-16     	; 0x1382 <registerEvent+0x16>
            receivehandles[i].packetinfo = packetinfo;
            receivehandles[i].handlefunc = handlefunc;
            receivehandles[i].handlevalid = 1;
            return;
        }
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	08 95       	ret
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
        if (receivehandles[i].handlevalid == 0)
        {
            receivehandles[i].port = port;
    13a0:	fd 01       	movw	r30, r26
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	ea 0f       	add	r30, r26
    13a8:	fb 1f       	adc	r31, r27
    13aa:	ee 0f       	add	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	df 01       	movw	r26, r30
    13b4:	ae 5d       	subi	r26, 0xDE	; 222
    13b6:	bb 4f       	sbci	r27, 0xFB	; 251
    13b8:	11 96       	adiw	r26, 0x01	; 1
    13ba:	dc 93       	st	X, r29
    13bc:	ce 93       	st	-X, r28
            receivehandles[i].maxLength = maxLength;
    13be:	ec 5d       	subi	r30, 0xDC	; 220
    13c0:	fb 4f       	sbci	r31, 0xFB	; 251
    13c2:	60 83       	st	Z, r22
            receivehandles[i].dataReady = dataReady;
    13c4:	14 96       	adiw	r26, 0x04	; 4
    13c6:	5c 93       	st	X, r21
    13c8:	4e 93       	st	-X, r20
    13ca:	13 97       	sbiw	r26, 0x03	; 3
            receivehandles[i].data = data;
    13cc:	16 96       	adiw	r26, 0x06	; 6
    13ce:	3c 93       	st	X, r19
    13d0:	2e 93       	st	-X, r18
    13d2:	15 97       	sbiw	r26, 0x05	; 5
            receivehandles[i].packetinfo = packetinfo;
    13d4:	18 96       	adiw	r26, 0x08	; 8
    13d6:	1c 93       	st	X, r17
    13d8:	0e 93       	st	-X, r16
    13da:	17 97       	sbiw	r26, 0x07	; 7
            receivehandles[i].handlefunc = handlefunc;
    13dc:	1b 96       	adiw	r26, 0x0b	; 11
    13de:	fc 92       	st	X, r15
    13e0:	ee 92       	st	-X, r14
    13e2:	1a 97       	sbiw	r26, 0x0a	; 10
            receivehandles[i].handlevalid = 1;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	19 96       	adiw	r26, 0x09	; 9
    13e8:	8c 93       	st	X, r24
            return;
        }
}
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	08 95       	ret

000013f8 <deRegisterEvent>:

//-------------------------------------------------------------------------
void deRegisterEvent(uint16_t port)
{
    13f8:	ac 01       	movw	r20, r24
    13fa:	e2 e2       	ldi	r30, 0x22	; 34
    13fc:	f4 e0       	ldi	r31, 0x04	; 4
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
        if ((receivehandles[i].handlevalid == 1) && (receivehandles[i].port
    1402:	81 85       	ldd	r24, Z+9	; 0x09
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	39 f0       	breq	.+14     	; 0x1416 <deRegisterEvent+0x1e>
                                                     == port))
        {
            receivehandles[i].handlevalid = 0;
            receivehandles[i].port = 0;
            return;
    1408:	2f 5f       	subi	r18, 0xFF	; 255
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	3c 96       	adiw	r30, 0x0c	; 12
//-------------------------------------------------------------------------
void deRegisterEvent(uint16_t port)
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    140e:	25 30       	cpi	r18, 0x05	; 5
    1410:	31 05       	cpc	r19, r1
    1412:	b9 f7       	brne	.-18     	; 0x1402 <deRegisterEvent+0xa>
    1414:	08 95       	ret
        if ((receivehandles[i].handlevalid == 1) && (receivehandles[i].port
    1416:	80 81       	ld	r24, Z
    1418:	91 81       	ldd	r25, Z+1	; 0x01
    141a:	84 17       	cp	r24, r20
    141c:	95 07       	cpc	r25, r21
    141e:	a1 f7       	brne	.-24     	; 0x1408 <deRegisterEvent+0x10>
                                                     == port))
        {
            receivehandles[i].handlevalid = 0;
    1420:	f9 01       	movw	r30, r18
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	e2 0f       	add	r30, r18
    1428:	f3 1f       	adc	r31, r19
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	ee 5d       	subi	r30, 0xDE	; 222
    1434:	fb 4f       	sbci	r31, 0xFB	; 251
    1436:	11 86       	std	Z+9, r1	; 0x09
            receivehandles[i].port = 0;
    1438:	11 82       	std	Z+1, r1	; 0x01
    143a:	10 82       	st	Z, r1
    143c:	08 95       	ret

0000143e <deleteThreadRegistrationInReceiverHandles>:
    return packet;
}

//-------------------------------------------------------------------------
void deleteThreadRegistrationInReceiverHandles(uint8_t * start, uint8_t * end)
{
    143e:	ac 01       	movw	r20, r24
    1440:	e2 e2       	ldi	r30, 0x22	; 34
    1442:	f4 e0       	ldi	r31, 0x04	; 4
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].handlevalid == 1)
    1444:	81 85       	ldd	r24, Z+9	; 0x09
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	31 f0       	breq	.+12     	; 0x1456 <deleteThreadRegistrationInReceiverHandles+0x18>
            && (receivehandles[i].dataReady <= end)
            && (receivehandles[i].dataReady >= start))
        {
            receivehandles[i].handlevalid = 0;
            receivehandles[i].port = 0;
    144a:	3c 96       	adiw	r30, 0x0c	; 12
//-------------------------------------------------------------------------
void deleteThreadRegistrationInReceiverHandles(uint8_t * start, uint8_t * end)
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    144c:	84 e0       	ldi	r24, 0x04	; 4
    144e:	ee 35       	cpi	r30, 0x5E	; 94
    1450:	f8 07       	cpc	r31, r24
    1452:	c1 f7       	brne	.-16     	; 0x1444 <deleteThreadRegistrationInReceiverHandles+0x6>
        {
            receivehandles[i].handlevalid = 0;
            receivehandles[i].port = 0;
        }
    }
}
    1454:	08 95       	ret
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].handlevalid == 1)
    1456:	23 81       	ldd	r18, Z+3	; 0x03
    1458:	34 81       	ldd	r19, Z+4	; 0x04
    145a:	62 17       	cp	r22, r18
    145c:	73 07       	cpc	r23, r19
    145e:	a8 f3       	brcs	.-22     	; 0x144a <deleteThreadRegistrationInReceiverHandles+0xc>
    1460:	24 17       	cp	r18, r20
    1462:	35 07       	cpc	r19, r21
    1464:	90 f3       	brcs	.-28     	; 0x144a <deleteThreadRegistrationInReceiverHandles+0xc>
            && (receivehandles[i].dataReady <= end)
            && (receivehandles[i].dataReady >= start))
        {
            receivehandles[i].handlevalid = 0;
    1466:	11 86       	std	Z+9, r1	; 0x09
            receivehandles[i].port = 0;
    1468:	11 82       	std	Z+1, r1	; 0x01
    146a:	10 82       	st	Z, r1
    146c:	ee cf       	rjmp	.-36     	; 0x144a <deleteThreadRegistrationInReceiverHandles+0xc>

0000146e <Standard_Receive_Packet>:
 


//Now this OS has a new packet, needs to deliver it to the correct thread for processing, and return the packet as soon as possible 
Radio_MsgPtr Standard_Receive_Packet(uint16_t port, Radio_MsgPtr packet)
{
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	9c 01       	movw	r18, r24
    147e:	8b 01       	movw	r16, r22
    uint8_t i;

    tmp = packet; 
    1480:	70 93 21 04 	sts	0x0421, r23
    1484:	60 93 20 04 	sts	0x0420, r22
    1488:	e2 e2       	ldi	r30, 0x22	; 34
    148a:	f4 e0       	ldi	r31, 0x04	; 4
    148c:	c0 e0       	ldi	r28, 0x00	; 0
    148e:	d0 e0       	ldi	r29, 0x00	; 0
		 
    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].port == port)
    1490:	80 81       	ld	r24, Z
    1492:	91 81       	ldd	r25, Z+1	; 0x01
    1494:	82 17       	cp	r24, r18
    1496:	93 07       	cpc	r25, r19
    1498:	71 f0       	breq	.+28     	; 0x14b6 <Standard_Receive_Packet+0x48>
            {
                postTask(receivehandles[i].handlefunc, 6);
            }
            //if (*(receivehandles[i].dataReady) == 0) 
            *(receivehandles[i].dataReady) = temp;
            return packet;
    149a:	21 96       	adiw	r28, 0x01	; 1
    149c:	3c 96       	adiw	r30, 0x0c	; 12
{
    uint8_t i;

    tmp = packet; 
		 
    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    149e:	c5 30       	cpi	r28, 0x05	; 5
    14a0:	d1 05       	cpc	r29, r1
    14a2:	b1 f7       	brne	.-20     	; 0x1490 <Standard_Receive_Packet+0x22>
            *(receivehandles[i].dataReady) = temp;
            return packet;
        }
    }
    return packet;
}
    14a4:	c8 01       	movw	r24, r16
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	df 90       	pop	r13
    14b2:	cf 90       	pop	r12
    14b4:	08 95       	ret

    tmp = packet; 
		 
    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].port == port)
    14b6:	81 85       	ldd	r24, Z+9	; 0x09
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	79 f7       	brne	.-34     	; 0x149a <Standard_Receive_Packet+0x2c>
        {
            uint8_t temp;
            uint8_t j;
            uint8_t *buf;

            buf = (uint8_t *) receivehandles[i].data;
    14bc:	6e 01       	movw	r12, r28
    14be:	cc 0c       	add	r12, r12
    14c0:	dd 1c       	adc	r13, r13
    14c2:	f6 01       	movw	r30, r12
    14c4:	ec 0f       	add	r30, r28
    14c6:	fd 1f       	adc	r31, r29
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	ee 0f       	add	r30, r30
    14ce:	ff 1f       	adc	r31, r31
    14d0:	df 01       	movw	r26, r30
    14d2:	ae 5d       	subi	r26, 0xDE	; 222
    14d4:	bb 4f       	sbci	r27, 0xFB	; 251
    14d6:	15 96       	adiw	r26, 0x05	; 5
    14d8:	4c 91       	ld	r20, X
    14da:	15 97       	sbiw	r26, 0x05	; 5
    14dc:	16 96       	adiw	r26, 0x06	; 6
    14de:	2c 91       	ld	r18, X
            temp =
    14e0:	ec 5d       	subi	r30, 0xDC	; 220
    14e2:	fb 4f       	sbci	r31, 0xFB	; 251
    14e4:	d8 01       	movw	r26, r16
    14e6:	8c 91       	ld	r24, X
    14e8:	f0 80       	ld	r15, Z
    14ea:	8f 15       	cp	r24, r15
    14ec:	08 f4       	brcc	.+2      	; 0x14f0 <Standard_Receive_Packet+0x82>
    14ee:	44 c0       	rjmp	.+136    	; 0x1578 <Standard_Receive_Packet+0x10a>
                (packet->length >
                 (receivehandles[i].maxLength) ? (receivehandles[i].
                                                  maxLength) : packet->length);
            for (j = 0; j < temp; j++)
    14f0:	ff 20       	and	r15, r15
    14f2:	71 f0       	breq	.+28     	; 0x1510 <Standard_Receive_Packet+0xa2>
    14f4:	d8 01       	movw	r26, r16
    14f6:	84 2f       	mov	r24, r20
    14f8:	92 2f       	mov	r25, r18
    14fa:	9c 01       	movw	r18, r24
    14fc:	f9 01       	movw	r30, r18
            {
                *buf = packet->data[j];
    14fe:	1a 96       	adiw	r26, 0x0a	; 10
    1500:	8c 91       	ld	r24, X
    1502:	1a 97       	sbiw	r26, 0x0a	; 10
    1504:	81 93       	st	Z+, r24
                buf++;
    1506:	11 96       	adiw	r26, 0x01	; 1
            buf = (uint8_t *) receivehandles[i].data;
            temp =
                (packet->length >
                 (receivehandles[i].maxLength) ? (receivehandles[i].
                                                  maxLength) : packet->length);
            for (j = 0; j < temp; j++)
    1508:	8e 2f       	mov	r24, r30
    150a:	84 1b       	sub	r24, r20
    150c:	8f 15       	cp	r24, r15
    150e:	b8 f3       	brcs	.-18     	; 0x14fe <Standard_Receive_Packet+0x90>
            {
                *buf = packet->data[j];
                buf++;
            }
            if (receivehandles[i].packetinfo != NULL)
    1510:	f6 01       	movw	r30, r12
    1512:	ec 0f       	add	r30, r28
    1514:	fd 1f       	adc	r31, r29
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	ee 0f       	add	r30, r30
    151c:	ff 1f       	adc	r31, r31
    151e:	ee 5d       	subi	r30, 0xDE	; 222
    1520:	fb 4f       	sbci	r31, 0xFB	; 251
    1522:	07 80       	ldd	r0, Z+7	; 0x07
    1524:	f0 85       	ldd	r31, Z+8	; 0x08
    1526:	e0 2d       	mov	r30, r0
    1528:	30 97       	sbiw	r30, 0x00	; 0
    152a:	51 f0       	breq	.+20     	; 0x1540 <Standard_Receive_Packet+0xd2>
            {
                buf = (uint8_t *) receivehandles[i].packetinfo;
                *buf = packet->strength;
    152c:	02 59       	subi	r16, 0x92	; 146
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	d8 01       	movw	r26, r16
    1532:	8d 91       	ld	r24, X+
    1534:	8d 01       	movw	r16, r26
    1536:	80 83       	st	Z, r24
                buf++;
                *buf = packet->lqi;
    1538:	8c 91       	ld	r24, X
    153a:	0f 56       	subi	r16, 0x6F	; 111
    153c:	10 40       	sbci	r17, 0x00	; 0
    153e:	81 83       	std	Z+1, r24	; 0x01
            }
            if (receivehandles[i].handlefunc != NULL)
    1540:	f6 01       	movw	r30, r12
    1542:	ec 0f       	add	r30, r28
    1544:	fd 1f       	adc	r31, r29
    1546:	ee 0f       	add	r30, r30
    1548:	ff 1f       	adc	r31, r31
    154a:	ee 0f       	add	r30, r30
    154c:	ff 1f       	adc	r31, r31
    154e:	ee 5d       	subi	r30, 0xDE	; 222
    1550:	fb 4f       	sbci	r31, 0xFB	; 251
    1552:	82 85       	ldd	r24, Z+10	; 0x0a
    1554:	93 85       	ldd	r25, Z+11	; 0x0b
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	19 f0       	breq	.+6      	; 0x1560 <Standard_Receive_Packet+0xf2>
            {
                postTask(receivehandles[i].handlefunc, 6);
    155a:	66 e0       	ldi	r22, 0x06	; 6
    155c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
            }
            //if (*(receivehandles[i].dataReady) == 0) 
            *(receivehandles[i].dataReady) = temp;
    1560:	cc 0d       	add	r28, r12
    1562:	dd 1d       	adc	r29, r13
    1564:	cc 0f       	add	r28, r28
    1566:	dd 1f       	adc	r29, r29
    1568:	cc 0f       	add	r28, r28
    156a:	dd 1f       	adc	r29, r29
    156c:	ce 5d       	subi	r28, 0xDE	; 222
    156e:	db 4f       	sbci	r29, 0xFB	; 251
    1570:	eb 81       	ldd	r30, Y+3	; 0x03
    1572:	fc 81       	ldd	r31, Y+4	; 0x04
    1574:	f0 82       	st	Z, r15
    1576:	96 cf       	rjmp	.-212    	; 0x14a4 <Standard_Receive_Packet+0x36>
            uint8_t temp;
            uint8_t j;
            uint8_t *buf;

            buf = (uint8_t *) receivehandles[i].data;
            temp =
    1578:	f8 2e       	mov	r15, r24
    157a:	ba cf       	rjmp	.-140    	; 0x14f0 <Standard_Receive_Packet+0x82>

0000157c <cc2420controlm_HPLChipconRAM_writeDone>:
inline result_t cc2420controlm_HPLChipconRAM_writeDone(uint16_t addr, uint8_t
                                                       length,
                                                       uint8_t * buffer)
{
    return SUCCESS;
}
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	08 95       	ret

00001580 <cc2420controlm_HPLChipconControl_init>:
    return FAIL;
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_init(void)
{
    1580:	1f 93       	push	r17
    unsigned char result;

    result = HPLCC2420M_StdControl_init();
    1582:	0e 94 97 14 	call	0x292e	; 0x292e <HPLCC2420M_StdControl_init>
    1586:	18 2f       	mov	r17, r24
    result = rcombine(result, HPLTimer1M_StdControl_init());
    1588:	0e 94 91 15 	call	0x2b22	; 0x2b22 <HPLTimer1M_StdControl_init>
    158c:	68 2f       	mov	r22, r24
    158e:	81 2f       	mov	r24, r17
    1590:	0e 94 24 3c 	call	0x7848	; 0x7848 <rcombine>
    return result;
}
    1594:	1f 91       	pop	r17
    1596:	08 95       	ret

00001598 <cc2420controlm_HPLChipcon_read>:
//-------------------------------------------------------------------------
inline uint16_t cc2420controlm_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1598:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
    return result;
}
    159c:	08 95       	ret

0000159e <cc2420controlm_HPLChipconRAM_write>:
                                                   uint8_t arg_0xa45ae80,
                                                   uint8_t * arg_0xa45afe0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420RAM_write(arg_0xa45ad38, arg_0xa45ae80,
    159e:	0e 94 2a 14 	call	0x2854	; 0x2854 <HPLCC2420M_HPLCC2420RAM_write>
                                           arg_0xa45afe0);
    return result;
}
    15a2:	08 95       	ret

000015a4 <cc2420controlm_CC2420Control_setShortAddress>:

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_setShortAddress(uint16_t addr)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <cc2420controlm_CC2420Control_setShortAddress+0x6>
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
    addr = toLSB16(addr);
    15b2:	0e 94 bf 3a 	call	0x757e	; 0x757e <toLSB16>
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
                                                   uint8_t arg_0xa45ae80,
                                                   uint8_t * arg_0xa45afe0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420RAM_write(arg_0xa45ad38, arg_0xa45ae80,
    15ba:	8a e6       	ldi	r24, 0x6A	; 106
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	62 e0       	ldi	r22, 0x02	; 2
    15c0:	ae 01       	movw	r20, r28
    15c2:	4f 5f       	subi	r20, 0xFF	; 255
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	0e 94 2a 14 	call	0x2854	; 0x2854 <HPLCC2420M_HPLCC2420RAM_write>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_setShortAddress(uint16_t addr)
{
    addr = toLSB16(addr);
    return cc2420controlm_HPLChipconRAM_write(0x16A, 2, (uint8_t *) & addr);
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <cc2420controlm_SplitControl_startDone>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_startDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_startDone();
    15d4:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <cc2420radiom_CC2420SplitControl_startDone>
    return result;
}
    15d8:	08 95       	ret

000015da <cc2420controlm_HPLChipconControl_start>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_start(void)
{
    unsigned char result;

    result = HPLTimer1M_StdControl_start();
    15da:	0e 94 34 16 	call	0x2c68	; 0x2c68 <HPLTimer1M_StdControl_start>
    return result;
}
    15de:	08 95       	ret

000015e0 <cc2420controlm_HPLChipcon_write>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    15e0:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    return result;
}
    15e4:	08 95       	ret

000015e6 <cc2420controlm_CCA_fired>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    15e6:	8d e1       	ldi	r24, 0x1D	; 29
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_fired(void)
{
    cc2420controlm_HPLChipcon_write(0x1D, 0);
    postTask(cc2420controlm_PostOscillatorOn, 5);
    15f0:	8e ea       	ldi	r24, 0xAE	; 174
    15f2:	9c e0       	ldi	r25, 0x0C	; 12
    15f4:	65 e0       	ldi	r22, 0x05	; 5
    15f6:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    return FAIL;
}
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	08 95       	ret

000015fe <cc2420controlm_HPLChipcon_cmd>:
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    15fe:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    return result;
}
    1602:	08 95       	ret

00001604 <cc2420controlm_SetRegs>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1604:	60 91 60 04 	lds	r22, 0x0460
    1608:	70 91 61 04 	lds	r23, 0x0461
    160c:	80 e1       	ldi	r24, 0x10	; 16
    160e:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline uint16_t cc2420controlm_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1612:	60 91 62 04 	lds	r22, 0x0462
    1616:	70 91 63 04 	lds	r23, 0x0463
    161a:	81 e1       	ldi	r24, 0x11	; 17
    161c:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1620:	81 e1       	ldi	r24, 0x11	; 17
    1622:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
                                    [CP_MAIN]);
    cc2420controlm_HPLChipcon_write(0x11,
                                    cc2420controlm_gCurrentParameters
                                    [CP_MDMCTRL0]);
    data = cc2420controlm_HPLChipcon_read(0x11);
    if (data != cc2420controlm_gCurrentParameters[CP_MDMCTRL0])
    1626:	20 91 62 04 	lds	r18, 0x0462
    162a:	30 91 63 04 	lds	r19, 0x0463
    162e:	28 17       	cp	r18, r24
    1630:	39 07       	cpc	r19, r25
    1632:	11 f0       	breq	.+4      	; 0x1638 <cc2420controlm_SetRegs+0x34>
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	08 95       	ret
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1638:	60 91 64 04 	lds	r22, 0x0464
    163c:	70 91 65 04 	lds	r23, 0x0465
    1640:	82 e1       	ldi	r24, 0x12	; 18
    1642:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1646:	60 91 66 04 	lds	r22, 0x0466
    164a:	70 91 67 04 	lds	r23, 0x0467
    164e:	83 e1       	ldi	r24, 0x13	; 19
    1650:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1654:	60 91 68 04 	lds	r22, 0x0468
    1658:	70 91 69 04 	lds	r23, 0x0469
    165c:	84 e1       	ldi	r24, 0x14	; 20
    165e:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1662:	60 91 6a 04 	lds	r22, 0x046A
    1666:	70 91 6b 04 	lds	r23, 0x046B
    166a:	85 e1       	ldi	r24, 0x15	; 21
    166c:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1670:	60 91 6c 04 	lds	r22, 0x046C
    1674:	70 91 6d 04 	lds	r23, 0x046D
    1678:	86 e1       	ldi	r24, 0x16	; 22
    167a:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    167e:	60 91 6e 04 	lds	r22, 0x046E
    1682:	70 91 6f 04 	lds	r23, 0x046F
    1686:	87 e1       	ldi	r24, 0x17	; 23
    1688:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    168c:	60 91 70 04 	lds	r22, 0x0470
    1690:	70 91 71 04 	lds	r23, 0x0471
    1694:	88 e1       	ldi	r24, 0x18	; 24
    1696:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    169a:	60 91 72 04 	lds	r22, 0x0472
    169e:	70 91 73 04 	lds	r23, 0x0473
    16a2:	89 e1       	ldi	r24, 0x19	; 25
    16a4:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    16a8:	60 91 74 04 	lds	r22, 0x0474
    16ac:	70 91 75 04 	lds	r23, 0x0475
    16b0:	8a e1       	ldi	r24, 0x1A	; 26
    16b2:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    16b6:	60 91 78 04 	lds	r22, 0x0478
    16ba:	70 91 79 04 	lds	r23, 0x0479
    16be:	8c e1       	ldi	r24, 0x1C	; 28
    16c0:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    16c4:	60 91 7a 04 	lds	r22, 0x047A
    16c8:	70 91 7b 04 	lds	r23, 0x047B
    16cc:	8d e1       	ldi	r24, 0x1D	; 29
    16ce:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    16d2:	89 e0       	ldi	r24, 0x09	; 9
    16d4:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
                                    cc2420controlm_gCurrentParameters
                                    [CP_IOCFG1]);
    cc2420controlm_HPLChipcon_cmd(0x09);
    cc2420controlm_HPLChipcon_cmd(0x08);
    return TRUE;
}
    16d8:	88 e0       	ldi	r24, 0x08	; 8
    16da:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	08 95       	ret

000016e2 <cc2420controlm_CC2420Control_TunePower>:
inline result_t cc2420controlm_CC2420Control_TunePower(uint8_t powerlevel)
{
    uint8_t status;

    //  cc2420controlm_gCurrentParameters[CP_FSCTRL] = (cc2420controlm_gCurrentParameters[CP_FSCTRL] & 0xfc00) | (fsctrl << 0);
    cc2420controlm_gCurrentParameters[CP_TXCTRL] =
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	8f 71       	andi	r24, 0x1F	; 31
    16e6:	90 70       	andi	r25, 0x00	; 0
    16e8:	20 91 6a 04 	lds	r18, 0x046A
    16ec:	30 91 6b 04 	lds	r19, 0x046B
    16f0:	20 7e       	andi	r18, 0xE0	; 224
    16f2:	82 2b       	or	r24, r18
    16f4:	93 2b       	or	r25, r19
    16f6:	90 93 6b 04 	sts	0x046B, r25
    16fa:	80 93 6a 04 	sts	0x046A, r24
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    16fe:	60 91 70 04 	lds	r22, 0x0470
    1702:	70 91 71 04 	lds	r23, 0x0471
    1706:	85 e1       	ldi	r24, 0x15	; 21
    1708:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
        cc2420controlm_HPLChipcon_write(0x15,
                                        cc2420controlm_gCurrentParameters
                                        [CP_FSCTRL]);
    //IF THE oscillator is running, turn on the rx mode 
    // STATUS bit 06 means that the oscillator is running or not 
    if (status & (1 << 6))
    170c:	86 ff       	sbrs	r24, 6
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <cc2420controlm_CC2420Control_TunePower+0x34>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1710:	83 e0       	ldi	r24, 0x03	; 3
    1712:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    if (status & (1 << 6))
    {
        cc2420controlm_HPLChipcon_cmd(0x03);
    }
    return SUCCESS;
}
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	08 95       	ret

0000171a <cc2420controlm_CC2420Control_TuneManual>:
{
    int fsctrl;
    uint8_t status;

    fsctrl = DesiredFreq - 2048;
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
    171a:	bc 01       	movw	r22, r24
    171c:	60 50       	subi	r22, 0x00	; 0
    171e:	78 40       	sbci	r23, 0x08	; 8
    1720:	80 91 70 04 	lds	r24, 0x0470
    1724:	90 91 71 04 	lds	r25, 0x0471
    1728:	80 70       	andi	r24, 0x00	; 0
    172a:	9c 7f       	andi	r25, 0xFC	; 252
    172c:	68 2b       	or	r22, r24
    172e:	79 2b       	or	r23, r25
    1730:	70 93 71 04 	sts	0x0471, r23
    1734:	60 93 70 04 	sts	0x0470, r22
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1738:	88 e1       	ldi	r24, 0x18	; 24
    173a:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
        cc2420controlm_HPLChipcon_write(0x18,
                                        cc2420controlm_gCurrentParameters
                                        [CP_FSCTRL]);
    //IF THE oscillator is running, turn on the rx mode 
    // STATUS bit 06 means that the oscillator is running or not 
    if (status & (1 << 6))
    173e:	86 ff       	sbrs	r24, 6
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <cc2420controlm_CC2420Control_TuneManual+0x2e>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1742:	83 e0       	ldi	r24, 0x03	; 3
    1744:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    if (status & (1 << 6))
    {
        cc2420controlm_HPLChipcon_cmd(0x03);
    }
    return SUCCESS;
}
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	08 95       	ret

0000174c <cc2420controlm_CC2420Control_RxMode>:
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_RxMode(void)
{
    cc2420controlm_HPLChipcon_cmd(0x03);
    return SUCCESS;
}
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	08 95       	ret

00001756 <cc2420controlm_SplitControl_initDone>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_initDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_initDone();
    1756:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <cc2420radiom_CC2420SplitControl_initDone>
    return result;
}
    175a:	08 95       	ret

0000175c <cc2420controlm_taskInitDone>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_initDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_initDone();
    175c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <cc2420radiom_CC2420SplitControl_initDone>

//-------------------------------------------------------------------------
inline void cc2420controlm_taskInitDone(void)
{
    cc2420controlm_SplitControl_initDone();
}
    1760:	08 95       	ret

00001762 <cc2420controlm_CC2420Control_VREFOff>:
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_VREFOff(void)
{
    LITE_CLR_CC_VREN_PIN();
    1762:	0e 94 84 05 	call	0xb08	; 0xb08 <LITE_CLR_CC_VREN_PIN>
    LITE_uwait(600);
    1766:	88 e5       	ldi	r24, 0x58	; 88
    1768:	92 e0       	ldi	r25, 0x02	; 2
    176a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LITE_uwait>
    return SUCCESS;
}
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	08 95       	ret

00001772 <cc2420controlm_CC2420Control_VREFOn>:
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_VREFOn(void)
{
    LITE_SET_CC_VREN_PIN();
    1772:	0e 94 82 05 	call	0xb04	; 0xb04 <LITE_SET_CC_VREN_PIN>
    LITE_uwait(600);
    1776:	88 e5       	ldi	r24, 0x58	; 88
    1778:	92 e0       	ldi	r25, 0x02	; 2
    177a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LITE_uwait>
    return SUCCESS;
}
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	08 95       	ret

00001782 <cc2420controlm_CCA_startWait>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_CCA_startWait(arg_0xa422588);
    1782:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <hplcc2420interruptm_CCA_startWait>
    return result;
}
    1786:	08 95       	ret

00001788 <cc2420controlm_CC2420Control_OscillatorOn>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1788:	8d e1       	ldi	r24, 0x1D	; 29
    178a:	68 e1       	ldi	r22, 0x18	; 24
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_CCA_startWait(arg_0xa422588);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <hplcc2420interruptm_CCA_startWait>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    i = 0;
    cc2420controlm_HPLChipcon_write(0x1D, 24);
    cc2420controlm_CCA_startWait(TRUE);
    status = cc2420controlm_HPLChipcon_cmd(0x01);
    return SUCCESS;
}
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	08 95       	ret

000017a2 <cc2420controlm_CC2420Control_TuneChannel>:
{
    int fsctrl;
    uint8_t status;

    fsctrl = DesiredFreq - 2048;
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
    17a2:	95 e0       	ldi	r25, 0x05	; 5
    17a4:	89 9f       	mul	r24, r25
    17a6:	b0 01       	movw	r22, r0
    17a8:	11 24       	eor	r1, r1
    17aa:	62 5d       	subi	r22, 0xD2	; 210
    17ac:	7e 4f       	sbci	r23, 0xFE	; 254
    17ae:	80 91 70 04 	lds	r24, 0x0470
    17b2:	90 91 71 04 	lds	r25, 0x0471
    17b6:	80 70       	andi	r24, 0x00	; 0
    17b8:	9c 7f       	andi	r25, 0xFC	; 252
    17ba:	68 2b       	or	r22, r24
    17bc:	79 2b       	or	r23, r25
    17be:	70 93 71 04 	sts	0x0471, r23
    17c2:	60 93 70 04 	sts	0x0470, r22
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    17c6:	88 e1       	ldi	r24, 0x18	; 24
    17c8:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
        cc2420controlm_HPLChipcon_write(0x18,
                                        cc2420controlm_gCurrentParameters
                                        [CP_FSCTRL]);
    //IF THE oscillator is running, turn on the rx mode 
    // STATUS bit 06 means that the oscillator is running or not 
    if (status & (1 << 6))
    17cc:	86 ff       	sbrs	r24, 6
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <cc2420controlm_CC2420Control_TuneChannel+0x34>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    17d0:	83 e0       	ldi	r24, 0x03	; 3
    17d2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    uint16_t freq;

    freq = 2405 + 5 * (channel - 11);
    cc2420controlm_CC2420Control_TuneManual(freq);
    return SUCCESS;
}
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	08 95       	ret

000017da <cc2420controlm_SplitControl_start>:
{
    result_t status;
    uint8_t _state = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    17da:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    17de:	98 2f       	mov	r25, r24

        {
            if (cc2420controlm_state == cc2420controlm_INIT_STATE_DONE)
    17e0:	80 91 5e 04 	lds	r24, 0x045E
    17e4:	82 30       	cpi	r24, 0x02	; 2
    17e6:	29 f0       	breq	.+10     	; 0x17f2 <cc2420controlm_SplitControl_start+0x18>
            {
                cc2420controlm_state = cc2420controlm_START_STATE;
                _state = TRUE;
            }
        }
        _atomic_end(_atomic);
    17e8:	89 2f       	mov	r24, r25
    17ea:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    wait_cycle();
    LITE_SET_CC_RSTN_PIN();
    wait_cycle();
    status = cc2420controlm_CC2420Control_OscillatorOn();
    return status;
}
    17f0:	08 95       	ret
        _atomic_t _atomic = _atomic_start();

        {
            if (cc2420controlm_state == cc2420controlm_INIT_STATE_DONE)
            {
                cc2420controlm_state = cc2420controlm_START_STATE;
    17f2:	83 e0       	ldi	r24, 0x03	; 3
    17f4:	80 93 5e 04 	sts	0x045E, r24
                _state = TRUE;
            }
        }
        _atomic_end(_atomic);
    17f8:	89 2f       	mov	r24, r25
    17fa:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_start(void)
{
    unsigned char result;

    result = HPLTimer1M_StdControl_start();
    17fe:	0e 94 34 16 	call	0x2c68	; 0x2c68 <HPLTimer1M_StdControl_start>
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_VREFOn(void)
{
    LITE_SET_CC_VREN_PIN();
    1802:	0e 94 82 05 	call	0xb04	; 0xb04 <LITE_SET_CC_VREN_PIN>
    LITE_uwait(600);
    1806:	88 e5       	ldi	r24, 0x58	; 88
    1808:	92 e0       	ldi	r25, 0x02	; 2
    180a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LITE_uwait>
    {
        return FAIL;
    }
    cc2420controlm_HPLChipconControl_start();
    cc2420controlm_CC2420Control_VREFOn();
    LITE_CLR_CC_RSTN_PIN();
    180e:	0e 94 6d 05 	call	0xada	; 0xada <LITE_CLR_CC_RSTN_PIN>
    wait_cycle();
    1812:	0e 94 56 02 	call	0x4ac	; 0x4ac <wait_cycle>
    LITE_SET_CC_RSTN_PIN();
    1816:	0e 94 6b 05 	call	0xad6	; 0xad6 <LITE_SET_CC_RSTN_PIN>
    wait_cycle();
    181a:	0e 94 56 02 	call	0x4ac	; 0x4ac <wait_cycle>
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    181e:	8d e1       	ldi	r24, 0x1D	; 29
    1820:	68 e1       	ldi	r22, 0x18	; 24
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_CCA_startWait(arg_0xa422588);
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <hplcc2420interruptm_CCA_startWait>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	08 95       	ret

00001838 <cc2420controlm_SplitControl_init>:
uint8_t CC2420_CHANNEL;
uint8_t CC2420_RFPOWER;
uint8_t cc2420controlm_state;
uint16_t cc2420controlm_gCurrentParameters[14];
inline result_t cc2420controlm_SplitControl_init(void)
{
    1838:	1f 93       	push	r17
    uint8_t _state = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    183a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    183e:	98 2f       	mov	r25, r24

        {
            if (cc2420controlm_state == cc2420controlm_IDLE_STATE)
    1840:	80 91 5e 04 	lds	r24, 0x045E
    1844:	88 23       	and	r24, r24
    1846:	09 f0       	breq	.+2      	; 0x184a <cc2420controlm_SplitControl_init+0x12>
    1848:	7b c0       	rjmp	.+246    	; 0x1940 <cc2420controlm_SplitControl_init+0x108>
                _state = TRUE;
            }
        }
        //Qing Revision
        //IDLE state
        cc2420controlm_state = cc2420controlm_IDLE_STATE;
    184a:	10 92 5e 04 	sts	0x045E, r1
        CC2420_CHANNEL = CC2420_DEF_CHANNEL;
    184e:	8b e0       	ldi	r24, 0x0B	; 11
    1850:	80 93 7c 04 	sts	0x047C, r24
        CC2420_RFPOWER = CC2420_DEF_RFPOWER;
    1854:	8f e1       	ldi	r24, 0x1F	; 31
    1856:	80 93 5f 04 	sts	0x045F, r24
        _atomic_end(_atomic);
    185a:	89 2f       	mov	r24, r25
    185c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_init(void)
{
    unsigned char result;

    result = HPLCC2420M_StdControl_init();
    1860:	0e 94 97 14 	call	0x292e	; 0x292e <HPLCC2420M_StdControl_init>
    1864:	18 2f       	mov	r17, r24
    result = rcombine(result, HPLTimer1M_StdControl_init());
    1866:	0e 94 91 15 	call	0x2b22	; 0x2b22 <HPLTimer1M_StdControl_init>
    186a:	68 2f       	mov	r22, r24
    186c:	81 2f       	mov	r24, r17
    186e:	0e 94 24 3c 	call	0x7848	; 0x7848 <rcombine>
    {
        return FAIL;
    }
    cc2420controlm_HPLChipconControl_init();
    //Basically, reset everything page 64
    cc2420controlm_gCurrentParameters[CP_MAIN] = 0xf800;
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	98 ef       	ldi	r25, 0xF8	; 248
    1876:	90 93 61 04 	sts	0x0461, r25
    187a:	80 93 60 04 	sts	0x0460, r24
    //Basically, check page 65. Very easy 
    cc2420controlm_gCurrentParameters[CP_MDMCTRL0] =
    187e:	82 ee       	ldi	r24, 0xE2	; 226
    1880:	92 e0       	ldi	r25, 0x02	; 2
    1882:	90 93 63 04 	sts	0x0463, r25
    1886:	80 93 62 04 	sts	0x0462, r24
        ((((0 << 11) | (2 << 8)) | (3 << 6)) | (1 << 5)) | (2 << 0);
    //Page 66
    cc2420controlm_gCurrentParameters[CP_MDMCTRL1] = 20 << 6;
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	95 e0       	ldi	r25, 0x05	; 5
    188e:	90 93 65 04 	sts	0x0465, r25
    1892:	80 93 64 04 	sts	0x0464, r24
    //reset values
    cc2420controlm_gCurrentParameters[CP_RSSI] = 0xE080;
    1896:	80 e8       	ldi	r24, 0x80	; 128
    1898:	90 ee       	ldi	r25, 0xE0	; 224
    189a:	90 93 67 04 	sts	0x0467, r25
    189e:	80 93 66 04 	sts	0x0466, r24
    //reset
    cc2420controlm_gCurrentParameters[CP_SYNCWORD] = 0xA70F;
    18a2:	8f e0       	ldi	r24, 0x0F	; 15
    18a4:	97 ea       	ldi	r25, 0xA7	; 167
    18a6:	90 93 69 04 	sts	0x0469, r25
    18aa:	80 93 68 04 	sts	0x0468, r24
    //the last one, according to page 52 of the data sheet and page 67, default to output 0dbm 
    cc2420controlm_gCurrentParameters[CP_TXCTRL] =
    18ae:	80 91 5f 04 	lds	r24, 0x045F
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	80 6e       	ori	r24, 0xE0	; 224
    18b6:	90 66       	ori	r25, 0x60	; 96
    18b8:	90 93 6b 04 	sts	0x046B, r25
    18bc:	80 93 6a 04 	sts	0x046A, r24
        ((((1 << 14) | (1 << 13)) | (3 << 6)) | (1 << 5)) | (CC2420_RFPOWER <<
                                                             0);
    cc2420controlm_gCurrentParameters[CP_RXCTRL0] =
    18c0:	85 ee       	ldi	r24, 0xE5	; 229
    18c2:	92 e1       	ldi	r25, 0x12	; 18
    18c4:	90 93 6d 04 	sts	0x046D, r25
    18c8:	80 93 6c 04 	sts	0x046C, r24
        (((((1 << 12) | (2 << 8)) | (3 << 6)) | (2 << 4)) | (1 << 2)) | (1 <<
                                                                         0);
    cc2420controlm_gCurrentParameters[CP_RXCTRL1] =
    18cc:	86 e5       	ldi	r24, 0x56	; 86
    18ce:	9a e0       	ldi	r25, 0x0A	; 10
    18d0:	90 93 6f 04 	sts	0x046F, r25
    18d4:	80 93 6e 04 	sts	0x046E, r24
        (((((1 << 11) | (1 << 9)) | (1 << 6)) | (1 << 4)) | (1 << 2)) | (2 <<
                                                                         0);
    //PAGE 51 of the manual 
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
    18d8:	80 91 7c 04 	lds	r24, 0x047C
    18dc:	25 e0       	ldi	r18, 0x05	; 5
    18de:	82 9f       	mul	r24, r18
    18e0:	c0 01       	movw	r24, r0
    18e2:	11 24       	eor	r1, r1
    18e4:	82 5d       	subi	r24, 0xD2	; 210
    18e6:	9e 4f       	sbci	r25, 0xFE	; 254
    18e8:	90 64       	ori	r25, 0x40	; 64
    18ea:	90 93 71 04 	sts	0x0471, r25
    18ee:	80 93 70 04 	sts	0x0470, r24
        (1 << 14) | ((357 + 5 * (CC2420_CHANNEL - 11)) << 0);
    cc2420controlm_gCurrentParameters[CP_SECCTRL0] =
    18f2:	84 ec       	ldi	r24, 0xC4	; 196
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	90 93 73 04 	sts	0x0473, r25
    18fa:	80 93 72 04 	sts	0x0472, r24
        (((1 << 8) | (1 << 7)) | (1 << 6)) | (1 << 2);
    cc2420controlm_gCurrentParameters[CP_SECCTRL1] = 0;
    18fe:	10 92 75 04 	sts	0x0475, r1
    1902:	10 92 74 04 	sts	0x0474, r1
    cc2420controlm_gCurrentParameters[CP_BATTMON] = 0;
    1906:	10 92 77 04 	sts	0x0477, r1
    190a:	10 92 76 04 	sts	0x0476, r1
    //fifop and cca polarity are inversed
    cc2420controlm_gCurrentParameters[CP_IOCFG0] = (127 << 0) | (1 << 9);
    190e:	8f e7       	ldi	r24, 0x7F	; 127
    1910:	92 e0       	ldi	r25, 0x02	; 2
    1912:	90 93 79 04 	sts	0x0479, r25
    1916:	80 93 78 04 	sts	0x0478, r24
    cc2420controlm_gCurrentParameters[CP_IOCFG1] = 0;
    191a:	10 92 7b 04 	sts	0x047B, r1
    191e:	10 92 7a 04 	sts	0x047A, r1
    {
        _atomic_t _atomic = _atomic_start();
    1922:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420controlm_state = cc2420controlm_INIT_STATE_DONE;
    1926:	92 e0       	ldi	r25, 0x02	; 2
    1928:	90 93 5e 04 	sts	0x045E, r25
        _atomic_end(_atomic);
    192c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    postTask(cc2420controlm_taskInitDone, 5);
    1930:	8e ea       	ldi	r24, 0xAE	; 174
    1932:	9b e0       	ldi	r25, 0x0B	; 11
    1934:	65 e0       	ldi	r22, 0x05	; 5
    1936:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    193a:	81 e0       	ldi	r24, 0x01	; 1
    return SUCCESS;
}
    193c:	1f 91       	pop	r17
    193e:	08 95       	ret
                _state = TRUE;
            }
        }
        //Qing Revision
        //IDLE state
        cc2420controlm_state = cc2420controlm_IDLE_STATE;
    1940:	10 92 5e 04 	sts	0x045E, r1
        CC2420_CHANNEL = CC2420_DEF_CHANNEL;
    1944:	8b e0       	ldi	r24, 0x0B	; 11
    1946:	80 93 7c 04 	sts	0x047C, r24
        CC2420_RFPOWER = CC2420_DEF_RFPOWER;
    194a:	8f e1       	ldi	r24, 0x1F	; 31
    194c:	80 93 5f 04 	sts	0x045F, r24
        _atomic_end(_atomic);
    1950:	89 2f       	mov	r24, r25
    1952:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    1956:	80 e0       	ldi	r24, 0x00	; 0
        cc2420controlm_state = cc2420controlm_INIT_STATE_DONE;
        _atomic_end(_atomic);
    }
    postTask(cc2420controlm_taskInitDone, 5);
    return SUCCESS;
}
    1958:	1f 91       	pop	r17
    195a:	08 95       	ret

0000195c <cc2420controlm_PostOscillatorOn>:
    return TRUE;
}

//-------------------------------------------------------------------------
inline void cc2420controlm_PostOscillatorOn(void)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <cc2420controlm_PostOscillatorOn+0x6>
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1966:	60 91 60 04 	lds	r22, 0x0460
    196a:	70 91 61 04 	lds	r23, 0x0461
    196e:	80 e1       	ldi	r24, 0x10	; 16
    1970:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline uint16_t cc2420controlm_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1974:	60 91 62 04 	lds	r22, 0x0462
    1978:	70 91 63 04 	lds	r23, 0x0463
    197c:	81 e1       	ldi	r24, 0x11	; 17
    197e:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1982:	81 e1       	ldi	r24, 0x11	; 17
    1984:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
                                    [CP_MAIN]);
    cc2420controlm_HPLChipcon_write(0x11,
                                    cc2420controlm_gCurrentParameters
                                    [CP_MDMCTRL0]);
    data = cc2420controlm_HPLChipcon_read(0x11);
    if (data != cc2420controlm_gCurrentParameters[CP_MDMCTRL0])
    1988:	20 91 62 04 	lds	r18, 0x0462
    198c:	30 91 63 04 	lds	r19, 0x0463
    1990:	82 17       	cp	r24, r18
    1992:	93 07       	cpc	r25, r19
    1994:	89 f1       	breq	.+98     	; 0x19f8 <cc2420controlm_PostOscillatorOn+0x9c>
inline void cc2420controlm_PostOscillatorOn(void)
{
    //This fucntion sets up all the registers of the radio module 
    cc2420controlm_SetRegs();
    //This function sets up the short address of the node, and therefore, if the mac frame includes a short address, it should be matched
    cc2420controlm_CC2420Control_setShortAddress(CURRENT_NODE_ID);
    1996:	80 91 04 04 	lds	r24, 0x0404
    199a:	90 91 05 04 	lds	r25, 0x0405
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_setShortAddress(uint16_t addr)
{
    addr = toLSB16(addr);
    19a2:	0e 94 bf 3a 	call	0x757e	; 0x757e <toLSB16>
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
                                                   uint8_t arg_0xa45ae80,
                                                   uint8_t * arg_0xa45afe0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420RAM_write(arg_0xa45ad38, arg_0xa45ae80,
    19aa:	8a e6       	ldi	r24, 0x6A	; 106
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	62 e0       	ldi	r22, 0x02	; 2
    19b0:	ae 01       	movw	r20, r28
    19b2:	4f 5f       	subi	r20, 0xFF	; 255
    19b4:	5f 4f       	sbci	r21, 0xFF	; 255
    19b6:	0e 94 2a 14 	call	0x2854	; 0x2854 <HPLCC2420M_HPLCC2420RAM_write>
    //This fucntion sets up all the registers of the radio module 
    cc2420controlm_SetRegs();
    //This function sets up the short address of the node, and therefore, if the mac frame includes a short address, it should be matched
    cc2420controlm_CC2420Control_setShortAddress(CURRENT_NODE_ID);
    //tHIS TURNS THE CHANELL
    cc2420controlm_CC2420Control_TuneManual(((cc2420controlm_gCurrentParameters
    19ba:	60 91 70 04 	lds	r22, 0x0470
    19be:	70 91 71 04 	lds	r23, 0x0471
{
    int fsctrl;
    uint8_t status;

    fsctrl = DesiredFreq - 2048;
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
    19c2:	7d 7f       	andi	r23, 0xFD	; 253
    19c4:	70 93 71 04 	sts	0x0471, r23
    19c8:	60 93 70 04 	sts	0x0470, r22
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    19cc:	88 e1       	ldi	r24, 0x18	; 24
    19ce:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
        cc2420controlm_HPLChipcon_write(0x18,
                                        cc2420controlm_gCurrentParameters
                                        [CP_FSCTRL]);
    //IF THE oscillator is running, turn on the rx mode 
    // STATUS bit 06 means that the oscillator is running or not 
    if (status & (1 << 6))
    19d2:	86 ff       	sbrs	r24, 6
    19d4:	03 c0       	rjmp	.+6      	; 0x19dc <cc2420controlm_PostOscillatorOn+0x80>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    19d6:	83 e0       	ldi	r24, 0x03	; 3
    19d8:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    //tHIS TURNS THE CHANELL
    cc2420controlm_CC2420Control_TuneManual(((cc2420controlm_gCurrentParameters
                                              [CP_FSCTRL] << 0) & 0x1FF) +
                                            2048);
    {
        _atomic_t _atomic = _atomic_start();
    19dc:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420controlm_state = cc2420controlm_START_STATE_DONE;
    19e0:	94 e0       	ldi	r25, 0x04	; 4
    19e2:	90 93 5e 04 	sts	0x045E, r25
        _atomic_end(_atomic);
    19e6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_startDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_startDone();
    19ea:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <cc2420radiom_CC2420SplitControl_startDone>

        cc2420controlm_state = cc2420controlm_START_STATE_DONE;
        _atomic_end(_atomic);
    }
    cc2420controlm_SplitControl_startDone();
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    19f8:	60 91 64 04 	lds	r22, 0x0464
    19fc:	70 91 65 04 	lds	r23, 0x0465
    1a00:	82 e1       	ldi	r24, 0x12	; 18
    1a02:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1a06:	60 91 66 04 	lds	r22, 0x0466
    1a0a:	70 91 67 04 	lds	r23, 0x0467
    1a0e:	83 e1       	ldi	r24, 0x13	; 19
    1a10:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1a14:	60 91 68 04 	lds	r22, 0x0468
    1a18:	70 91 69 04 	lds	r23, 0x0469
    1a1c:	84 e1       	ldi	r24, 0x14	; 20
    1a1e:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1a22:	60 91 6a 04 	lds	r22, 0x046A
    1a26:	70 91 6b 04 	lds	r23, 0x046B
    1a2a:	85 e1       	ldi	r24, 0x15	; 21
    1a2c:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1a30:	60 91 6c 04 	lds	r22, 0x046C
    1a34:	70 91 6d 04 	lds	r23, 0x046D
    1a38:	86 e1       	ldi	r24, 0x16	; 22
    1a3a:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1a3e:	60 91 6e 04 	lds	r22, 0x046E
    1a42:	70 91 6f 04 	lds	r23, 0x046F
    1a46:	87 e1       	ldi	r24, 0x17	; 23
    1a48:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1a4c:	60 91 70 04 	lds	r22, 0x0470
    1a50:	70 91 71 04 	lds	r23, 0x0471
    1a54:	88 e1       	ldi	r24, 0x18	; 24
    1a56:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1a5a:	60 91 72 04 	lds	r22, 0x0472
    1a5e:	70 91 73 04 	lds	r23, 0x0473
    1a62:	89 e1       	ldi	r24, 0x19	; 25
    1a64:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1a68:	60 91 74 04 	lds	r22, 0x0474
    1a6c:	70 91 75 04 	lds	r23, 0x0475
    1a70:	8a e1       	ldi	r24, 0x1A	; 26
    1a72:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1a76:	60 91 78 04 	lds	r22, 0x0478
    1a7a:	70 91 79 04 	lds	r23, 0x0479
    1a7e:	8c e1       	ldi	r24, 0x1C	; 28
    1a80:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1a84:	60 91 7a 04 	lds	r22, 0x047A
    1a88:	70 91 7b 04 	lds	r23, 0x047B
    1a8c:	8d e1       	ldi	r24, 0x1D	; 29
    1a8e:	0e 94 00 14 	call	0x2800	; 0x2800 <HPLCC2420M_HPLCC2420_write>
    1a92:	89 e0       	ldi	r24, 0x09	; 9
    1a94:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    1a98:	88 e0       	ldi	r24, 0x08	; 8
    1a9a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    1a9e:	7b cf       	rjmp	.-266    	; 0x1996 <cc2420controlm_PostOscillatorOn+0x3a>

00001aa0 <cc2420radiom_SplitControl_default_initDone>:
   volatile uint16_t cc2420radiom_LocalAddr;
 */
inline result_t cc2420radiom_SplitControl_default_initDone(void)
{
    return SUCCESS;
}
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	08 95       	ret

00001aa4 <cc2420radiom_CC2420SplitControl_initDone>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_initDone(void)
{
    return cc2420radiom_SplitControl_initDone();
}
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	08 95       	ret

00001aa8 <cc2420radiom_SplitControl_default_startDone>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_default_startDone(void)
{
    return SUCCESS;
}
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	08 95       	ret

00001aac <cc2420radiom_SplitControl_startDone>:
{
    unsigned char result;

    result = cc2420radiom_SplitControl_default_startDone();
    return result;
}
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	08 95       	ret

00001ab0 <cc2420radiom_SplitControl_initDone>:
{
    unsigned char result;

    result = cc2420radiom_SplitControl_default_initDone();
    return result;
}
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	08 95       	ret

00001ab4 <restorecc2420state>:

//-------------------------------------------------------------------------
inline void restorecc2420state()
{
    cc2420radiom_stateRadio = 2;
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	80 93 fb 04 	sts	0x04FB, r24
}
    1aba:	08 95       	ret

00001abc <cc2420radiom_StdControl_start>:
    }
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_StdControl_start(void)
{
    1abc:	0f 93       	push	r16
    1abe:	1f 93       	push	r17
    result_t success = FAIL;

    {
        _atomic_t _atomic = _atomic_start();
    1ac0:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    1ac4:	08 2f       	mov	r16, r24

        {
            if (cc2420radiom_stateRadio == cc2420radiom_DISABLED_STATE)
    1ac6:	80 91 fb 04 	lds	r24, 0x04FB
    1aca:	88 23       	and	r24, r24
    1acc:	41 f0       	breq	.+16     	; 0x1ade <cc2420radiom_StdControl_start+0x22>
            {
                if (postTask(cc2420radiom_startRadio, 5))
                {
                    success = SUCCESS;
                    cc2420radiom_stateRadio =
    1ace:	10 e0       	ldi	r17, 0x00	; 0
                        cc2420radiom_DISABLED_STATE_STARTTASK;
                }
            }
        }
        _atomic_end(_atomic);
    1ad0:	80 2f       	mov	r24, r16
    1ad2:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return success;
}
    1ad6:	81 2f       	mov	r24, r17
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	08 95       	ret
        _atomic_t _atomic = _atomic_start();

        {
            if (cc2420radiom_stateRadio == cc2420radiom_DISABLED_STATE)
            {
                if (postTask(cc2420radiom_startRadio, 5))
    1ade:	85 e1       	ldi	r24, 0x15	; 21
    1ae0:	9f e0       	ldi	r25, 0x0F	; 15
    1ae2:	65 e0       	ldi	r22, 0x05	; 5
    1ae4:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    1ae8:	88 23       	and	r24, r24
    1aea:	89 f3       	breq	.-30     	; 0x1ace <cc2420radiom_StdControl_start+0x12>
                {
                    success = SUCCESS;
                    cc2420radiom_stateRadio =
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	80 93 fb 04 	sts	0x04FB, r24
    1af2:	11 e0       	ldi	r17, 0x01	; 1
                        cc2420radiom_DISABLED_STATE_STARTTASK;
                }
            }
        }
        _atomic_end(_atomic);
    1af4:	80 2f       	mov	r24, r16
    1af6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return success;
}
    1afa:	81 2f       	mov	r24, r17
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	08 95       	ret

00001b02 <cc2420radiom_SFD_disable>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_disable();
    1b02:	0e 94 b7 12 	call	0x256e	; 0x256e <hplcc2420interruptm_SFD_disable>
    return result;
}
    1b06:	08 95       	ret

00001b08 <cc2420radiom_Send_sendDone>:
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1b08:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
    return result;
}
    1b0c:	08 95       	ret

00001b0e <cc2420radiom_sendFailed>:

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1b0e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1b12:	92 e0       	ldi	r25, 0x02	; 2
    1b14:	90 93 fb 04 	sts	0x04FB, r25
        _atomic_end(_atomic);
    1b18:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1b1c:	e0 91 f9 04 	lds	r30, 0x04F9
    1b20:	f0 91 fa 04 	lds	r31, 0x04FA
    1b24:	80 81       	ld	r24, Z
    1b26:	8b 50       	subi	r24, 0x0B	; 11
    1b28:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1b2a:	cf 01       	movw	r24, r30
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
        _atomic_end(_atomic);
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
        MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    cc2420radiom_Send_sendDone(cc2420radiom_txbufptr, FAIL);
}
    1b32:	08 95       	ret

00001b34 <cc2420radiom_PacketSent>:
    return result;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_PacketSent(void)
{
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    Radio_MsgPtr pBuf;

    {
        _atomic_t _atomic = _atomic_start();
    1b38:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1b3c:	92 e0       	ldi	r25, 0x02	; 2
    1b3e:	90 93 fb 04 	sts	0x04FB, r25
            pBuf = cc2420radiom_txbufptr;
    1b42:	00 91 f9 04 	lds	r16, 0x04F9
    1b46:	10 91 fa 04 	lds	r17, 0x04FA
            pBuf->length = pBuf->length - MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	90 81       	ld	r25, Z
    1b4e:	9b 50       	subi	r25, 0x0B	; 11
    1b50:	90 83       	st	Z, r25
        }
        _atomic_end(_atomic);
    1b52:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1b56:	c8 01       	movw	r24, r16
    1b58:	61 e0       	ldi	r22, 0x01	; 1
    1b5a:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
            pBuf->length = pBuf->length - MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
        }
        _atomic_end(_atomic);
    }
    cc2420radiom_Send_sendDone(pBuf, SUCCESS);
}
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	08 95       	ret

00001b64 <cc2420radiom_HPLChipconFIFO_readRXFIFO>:
inline result_t cc2420radiom_HPLChipconFIFO_readRXFIFO(uint8_t arg_0xa4118a0,
                                                       uint8_t * arg_0xa411a00)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(arg_0xa4118a0,
    1b64:	0e 94 99 11 	call	0x2332	; 0x2332 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
                                                     arg_0xa411a00);
    return result;
}
    1b68:	08 95       	ret

00001b6a <cc2420radiom_Receive_receive>:
//-------------------------------------------------------------------------
inline Radio_MsgPtr cc2420radiom_Receive_receive(Radio_MsgPtr arg_0xa31b650)
{
    struct Radio_Msg *result;

    result = AMStandard_RadioReceive_receive(arg_0xa31b650);
    1b6a:	0e 94 77 09 	call	0x12ee	; 0x12ee <AMStandard_RadioReceive_receive>
    return result;
}
    1b6e:	08 95       	ret

00001b70 <cc2420radiom_PacketRcvd>:

//-------------------------------------------------------------------------
inline void cc2420radiom_PacketRcvd(void)
{
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    Radio_MsgPtr pBuf;

    {
        _atomic_t _atomic = _atomic_start();
    1b78:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            pBuf = cc2420radiom_rxbufptr;
    1b7c:	00 91 7d 04 	lds	r16, 0x047D
    1b80:	10 91 7e 04 	lds	r17, 0x047E
        } _atomic_end(_atomic);
    1b84:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline Radio_MsgPtr cc2420radiom_Receive_receive(Radio_MsgPtr arg_0xa31b650)
{
    struct Radio_Msg *result;

    result = AMStandard_RadioReceive_receive(arg_0xa31b650);
    1b88:	c8 01       	movw	r24, r16
    1b8a:	0e 94 77 09 	call	0x12ee	; 0x12ee <AMStandard_RadioReceive_receive>
    1b8e:	ec 01       	movw	r28, r24
            pBuf = cc2420radiom_rxbufptr;
        } _atomic_end(_atomic);
    }
    pBuf = cc2420radiom_Receive_receive((Radio_MsgPtr) pBuf);
    {
        _atomic_t _atomic = _atomic_start();
    1b90:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            if (pBuf)
    1b94:	20 97       	sbiw	r28, 0x00	; 0
    1b96:	21 f0       	breq	.+8      	; 0x1ba0 <cc2420radiom_PacketRcvd+0x30>
            {
                cc2420radiom_rxbufptr = pBuf;
    1b98:	d0 93 7e 04 	sts	0x047E, r29
    1b9c:	c0 93 7d 04 	sts	0x047D, r28
            }
            cc2420radiom_rxbufptr->length = 0;
    1ba0:	e0 91 7d 04 	lds	r30, 0x047D
    1ba4:	f0 91 7e 04 	lds	r31, 0x047E
    1ba8:	10 82       	st	Z, r1
            cc2420radiom_bPacketReceiving = FALSE;
    1baa:	10 92 80 04 	sts	0x0480, r1
        }
        _atomic_end(_atomic);
    1bae:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
}
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	08 95       	ret

00001bbc <cc2420radiom_FIFOP_disable>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    1bbc:	0e 94 a5 12 	call	0x254a	; 0x254a <hplcc2420interruptm_FIFOP_disable>
    return result;
}
    1bc0:	08 95       	ret

00001bc2 <cc2420radiom_HPLChipcon_read>:
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1bc2:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
    return result;
}
    1bc6:	08 95       	ret

00001bc8 <cc2420radiom_CC2420Control_RxMode>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420Control_RxMode(void)
{
    unsigned char result;

    result = cc2420controlm_CC2420Control_RxMode();
    1bc8:	0e 94 a6 0b 	call	0x174c	; 0x174c <cc2420controlm_CC2420Control_RxMode>
    return result;
}
    1bcc:	08 95       	ret

00001bce <cc2420radiom_FIFOP_startWait>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1bce:	0e 94 4b 13 	call	0x2696	; 0x2696 <hplcc2420interruptm_FIFOP_startWait>
    return result;
}
    1bd2:	08 95       	ret

00001bd4 <cc2420radiom_HPLChipconFIFO_writeTXFIFO>:
                                                        uint8_t *
                                                        arg_0xa40c170)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO(arg_0xa40c010,
    1bd4:	0e 94 11 12 	call	0x2422	; 0x2422 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>
                                                      arg_0xa40c170);
    return result;
}
    1bd8:	08 95       	ret

00001bda <cc2420radiom_HPLChipcon_cmd>:
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1bda:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    return result;
}
    1bde:	08 95       	ret

00001be0 <cc2420radiom_flushRXFIFO>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    1be0:	0e 94 a5 12 	call	0x254a	; 0x254a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1be4:	8f e3       	ldi	r24, 0x3F	; 63
    1be6:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1bea:	88 e0       	ldi	r24, 0x08	; 8
    1bec:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    1bf0:	88 e0       	ldi	r24, 0x08	; 8
    1bf2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    1bf6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    1bfa:	10 92 80 04 	sts	0x0480, r1
        _atomic_end(_atomic);
    1bfe:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	0e 94 4b 13 	call	0x2696	; 0x2696 <hplcc2420interruptm_FIFOP_startWait>

        cc2420radiom_bPacketReceiving = FALSE;
        _atomic_end(_atomic);
    }
    cc2420radiom_FIFOP_startWait(FALSE);
}
    1c08:	08 95       	ret

00001c0a <cc2420radiom_SFD_enableCapture>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1c0a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <hplcc2420interruptm_SFD_enableCapture>
    return result;
}
    1c0e:	08 95       	ret

00001c10 <cc2420radiom_CC2420SplitControl_startDone>:
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_startDone(void)
{
    1c10:	1f 93       	push	r17
    uint8_t chkstateRadio;

    {
        _atomic_t _atomic = _atomic_start();
    1c12:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        chkstateRadio = cc2420radiom_stateRadio;
    1c16:	10 91 fb 04 	lds	r17, 0x04FB
        _atomic_end(_atomic);
    1c1a:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    if (chkstateRadio == cc2420radiom_WARMUP_STATE)
    1c1e:	1a 30       	cpi	r17, 0x0A	; 10
    1c20:	19 f0       	breq	.+6      	; 0x1c28 <cc2420radiom_CC2420SplitControl_startDone+0x18>
            _atomic_end(_atomic);
        }
    }
    cc2420radiom_SplitControl_startDone();
    return SUCCESS;
}
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	1f 91       	pop	r17
    1c26:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420Control_RxMode(void)
{
    unsigned char result;

    result = cc2420controlm_CC2420Control_RxMode();
    1c28:	0e 94 a6 0b 	call	0x174c	; 0x174c <cc2420controlm_CC2420Control_RxMode>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	0e 94 4b 13 	call	0x2696	; 0x2696 <hplcc2420interruptm_FIFOP_startWait>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <hplcc2420interruptm_SFD_enableCapture>
    {
        cc2420radiom_CC2420Control_RxMode();
        cc2420radiom_FIFOP_startWait(FALSE);
        cc2420radiom_SFD_enableCapture(TRUE);
        {
            _atomic_t _atomic = _atomic_start();
    1c38:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

            cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1c3c:	92 e0       	ldi	r25, 0x02	; 2
    1c3e:	90 93 fb 04 	sts	0x04FB, r25
            _atomic_end(_atomic);
    1c42:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
        }
    }
    cc2420radiom_SplitControl_startDone();
    return SUCCESS;
}
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	1f 91       	pop	r17
    1c4a:	08 95       	ret

00001c4c <cc2420radiom_CC2420SplitControl_start>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_start(void)
{
    unsigned char result;

    result = cc2420controlm_SplitControl_start();
    1c4c:	0e 94 ed 0b 	call	0x17da	; 0x17da <cc2420controlm_SplitControl_start>
    return result;
}
    1c50:	08 95       	ret

00001c52 <cc2420radiom_SplitControl_start>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_start(void)
{
    1c52:	1f 93       	push	r17
    uint8_t chkstateRadio;

    {
        _atomic_t _atomic = _atomic_start();
    1c54:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        chkstateRadio = cc2420radiom_stateRadio;
    1c58:	10 91 fb 04 	lds	r17, 0x04FB
        _atomic_end(_atomic);
    1c5c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    if (chkstateRadio == cc2420radiom_DISABLED_STATE)
    1c60:	11 23       	and	r17, r17
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <cc2420radiom_SplitControl_start+0x18>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
            _atomic_end(_atomic);
        }
        return cc2420radiom_CC2420SplitControl_start();
    }
    return FAIL;
}
    1c66:	1f 91       	pop	r17
    1c68:	08 95       	ret
        _atomic_end(_atomic);
    }
    if (chkstateRadio == cc2420radiom_DISABLED_STATE)
    {
        {
            _atomic_t _atomic = _atomic_start();
    1c6a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

            {
                cc2420radiom_stateRadio = cc2420radiom_WARMUP_STATE;
    1c6e:	9a e0       	ldi	r25, 0x0A	; 10
    1c70:	90 93 fb 04 	sts	0x04FB, r25
                cc2420radiom_countRetry = 0;
    1c74:	10 92 f6 04 	sts	0x04F6, r1
                cc2420radiom_rxbufptr->length = 0;
    1c78:	e0 91 7d 04 	lds	r30, 0x047D
    1c7c:	f0 91 7e 04 	lds	r31, 0x047E
    1c80:	10 82       	st	Z, r1
            }
            _atomic_end(_atomic);
    1c82:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_start(void)
{
    unsigned char result;

    result = cc2420controlm_SplitControl_start();
    1c86:	0e 94 ed 0b 	call	0x17da	; 0x17da <cc2420controlm_SplitControl_start>
            _atomic_end(_atomic);
        }
        return cc2420radiom_CC2420SplitControl_start();
    }
    return FAIL;
}
    1c8a:	1f 91       	pop	r17
    1c8c:	08 95       	ret

00001c8e <cc2420radiom_SplitControl_init>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_init(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1c8e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
    1c92:	10 92 fb 04 	sts	0x04FB, r1
            cc2420radiom_currentDSN = 0;
    1c96:	10 92 7f 04 	sts	0x047F, r1
            cc2420radiom_bAckEnable = FALSE;
    1c9a:	10 92 f5 04 	sts	0x04F5, r1
            cc2420radiom_bPacketReceiving = FALSE;
    1c9e:	10 92 80 04 	sts	0x0480, r1
            cc2420radiom_rxbufptr = &cc2420radiom_RxBuf;
    1ca2:	21 e8       	ldi	r18, 0x81	; 129
    1ca4:	34 e0       	ldi	r19, 0x04	; 4
    1ca6:	30 93 7e 04 	sts	0x047E, r19
    1caa:	20 93 7d 04 	sts	0x047D, r18
            cc2420radiom_rxbufptr->length = 0;
    1cae:	10 92 81 04 	sts	0x0481, r1
        }
        _atomic_end(_atomic);
    1cb2:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    cc2420radiom_LocalAddr = CURRENT_NODE_ID;
    1cb6:	80 91 04 04 	lds	r24, 0x0404
    1cba:	90 91 05 04 	lds	r25, 0x0405
    1cbe:	90 93 f8 04 	sts	0x04F8, r25
    1cc2:	80 93 f7 04 	sts	0x04F7, r24
    return cc2420controlm_SplitControl_init();
    1cc6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <cc2420controlm_SplitControl_init>
}
    1cca:	08 95       	ret

00001ccc <cc2420radiom_sendPacket>:
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1ccc:	85 e0       	ldi	r24, 0x05	; 5
    1cce:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
{
    uint8_t status;

    cc2420radiom_HPLChipcon_cmd(0x05);
    status = cc2420radiom_HPLChipcon_cmd(0x00);
    if ((status >> 3) & 0x01)
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    1cd8:	86 95       	lsr	r24
    1cda:	86 95       	lsr	r24
    1cdc:	86 95       	lsr	r24
    1cde:	80 fd       	sbrc	r24, 0
    1ce0:	13 c0       	rjmp	.+38     	; 0x1d08 <cc2420radiom_sendPacket+0x3c>

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1ce2:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1ce6:	92 e0       	ldi	r25, 0x02	; 2
    1ce8:	90 93 fb 04 	sts	0x04FB, r25
        _atomic_end(_atomic);
    1cec:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1cf0:	e0 91 f9 04 	lds	r30, 0x04F9
    1cf4:	f0 91 fa 04 	lds	r31, 0x04FA
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8b 50       	subi	r24, 0x0B	; 11
    1cfc:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1cfe:	cf 01       	movw	r24, r30
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
    1d06:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <hplcc2420interruptm_SFD_enableCapture>
    1d0e:	08 95       	ret

00001d10 <cc2420radiom_SFD_captured>:
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_captured(uint16_t time)
{
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	ec 01       	movw	r28, r24
    switch (cc2420radiom_stateRadio)
    1d16:	80 91 fb 04 	lds	r24, 0x04FB
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	c9 f1       	breq	.+114    	; 0x1d90 <cc2420radiom_SFD_captured+0x80>
    1d1e:	84 30       	cpi	r24, 0x04	; 4
    1d20:	91 f0       	breq	.+36     	; 0x1d46 <cc2420radiom_SFD_captured+0x36>
        break;
    default:
        ;
    }
    return SUCCESS;
}
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_disable();
    1d2a:	0e 94 b7 12 	call	0x256e	; 0x256e <hplcc2420interruptm_SFD_disable>
        }
        else
        {
            cc2420radiom_stateRadio = cc2420radiom_TX_WAIT;
        }
        cc2420radiom_txbufptr->time = time;
    1d2e:	e0 91 f9 04 	lds	r30, 0x04F9
    1d32:	f0 91 fa 04 	lds	r31, 0x04FA
    1d36:	ee 58       	subi	r30, 0x8E	; 142
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	d1 83       	std	Z+1, r29	; 0x01
    1d3c:	c0 83       	st	Z, r28
        if (cc2420radiom_stateRadio == cc2420radiom_TX_WAIT)
    1d3e:	80 91 fb 04 	lds	r24, 0x04FB
    1d42:	84 30       	cpi	r24, 0x04	; 4
    1d44:	71 f3       	breq	.-36     	; 0x1d22 <cc2420radiom_SFD_captured+0x12>
        {
            break;
        }
    case cc2420radiom_TX_WAIT:
        cc2420radiom_stateRadio = cc2420radiom_POST_TX_STATE;
    1d46:	86 e0       	ldi	r24, 0x06	; 6
    1d48:	80 93 fb 04 	sts	0x04FB, r24
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_disable();
    1d4c:	0e 94 b7 12 	call	0x256e	; 0x256e <hplcc2420interruptm_SFD_disable>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <hplcc2420interruptm_SFD_enableCapture>
        }
    case cc2420radiom_TX_WAIT:
        cc2420radiom_stateRadio = cc2420radiom_POST_TX_STATE;
        cc2420radiom_SFD_disable();
        cc2420radiom_SFD_enableCapture(TRUE);
        if (!postTask(cc2420radiom_PacketSent, 5))
    1d56:	8a e9       	ldi	r24, 0x9A	; 154
    1d58:	9d e0       	ldi	r25, 0x0D	; 13
    1d5a:	65 e0       	ldi	r22, 0x05	; 5
    1d5c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    1d60:	88 23       	and	r24, r24
    1d62:	f9 f6       	brne	.-66     	; 0x1d22 <cc2420radiom_SFD_captured+0x12>

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1d64:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1d68:	92 e0       	ldi	r25, 0x02	; 2
    1d6a:	90 93 fb 04 	sts	0x04FB, r25
        _atomic_end(_atomic);
    1d6e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1d72:	e0 91 f9 04 	lds	r30, 0x04F9
    1d76:	f0 91 fa 04 	lds	r31, 0x04FA
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8b 50       	subi	r24, 0x0B	; 11
    1d7e:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1d80:	cf 01       	movw	r24, r30
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
        break;
    default:
        ;
    }
    return SUCCESS;
}
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <hplcc2420interruptm_SFD_enableCapture>
{
    switch (cc2420radiom_stateRadio)
    {
    case cc2420radiom_TX_STATE:
        cc2420radiom_SFD_enableCapture(FALSE);
        if (!LITE_READ_CC_SFD_PIN())
    1d96:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <LITE_READ_CC_SFD_PIN>
    1d9a:	89 2b       	or	r24, r25
    1d9c:	31 f2       	breq	.-116    	; 0x1d2a <cc2420radiom_SFD_captured+0x1a>
        {
            cc2420radiom_SFD_disable();
        }
        else
        {
            cc2420radiom_stateRadio = cc2420radiom_TX_WAIT;
    1d9e:	84 e0       	ldi	r24, 0x04	; 4
    1da0:	80 93 fb 04 	sts	0x04FB, r24
        }
        cc2420radiom_txbufptr->time = time;
    1da4:	e0 91 f9 04 	lds	r30, 0x04F9
    1da8:	f0 91 fa 04 	lds	r31, 0x04FA
    1dac:	ee 58       	subi	r30, 0x8E	; 142
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	d1 83       	std	Z+1, r29	; 0x01
    1db2:	c0 83       	st	Z, r28
        break;
    default:
        ;
    }
    return SUCCESS;
}
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

00001dbc <cc2420radiom_startSend>:
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1dbc:	89 e0       	ldi	r24, 0x09	; 9
    1dbe:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
}

//-------------------------------------------------------------------------
inline void cc2420radiom_startSend(void)
{
    if (!cc2420radiom_HPLChipcon_cmd(0x09))
    1dc2:	88 23       	and	r24, r24
    1dc4:	61 f0       	breq	.+24     	; 0x1dde <cc2420radiom_startSend+0x22>
                                                        uint8_t *
                                                        arg_0xa40c170)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO(arg_0xa40c010,
    1dc6:	80 91 fc 04 	lds	r24, 0x04FC
    1dca:	60 91 f9 04 	lds	r22, 0x04F9
    1dce:	70 91 fa 04 	lds	r23, 0x04FA
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	0e 94 11 12 	call	0x2422	; 0x2422 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>
    if (!cc2420radiom_HPLChipcon_cmd(0x09))
    {
        cc2420radiom_sendFailed();
        return;
    }
    if (!cc2420radiom_HPLChipconFIFO_writeTXFIFO(cc2420radiom_txlength + 1,
    1dd8:	88 23       	and	r24, r24
    1dda:	a1 f0       	breq	.+40     	; 0x1e04 <cc2420radiom_startSend+0x48>
    1ddc:	08 95       	ret

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1dde:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1de2:	92 e0       	ldi	r25, 0x02	; 2
    1de4:	90 93 fb 04 	sts	0x04FB, r25
        _atomic_end(_atomic);
    1de8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1dec:	e0 91 f9 04 	lds	r30, 0x04F9
    1df0:	f0 91 fa 04 	lds	r31, 0x04FA
    1df4:	80 81       	ld	r24, Z
    1df6:	8b 50       	subi	r24, 0x0B	; 11
    1df8:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1dfa:	cf 01       	movw	r24, r30
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
    1e02:	08 95       	ret

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1e04:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1e08:	92 e0       	ldi	r25, 0x02	; 2
    1e0a:	90 93 fb 04 	sts	0x04FB, r25
        _atomic_end(_atomic);
    1e0e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1e12:	e0 91 f9 04 	lds	r30, 0x04F9
    1e16:	f0 91 fa 04 	lds	r31, 0x04FA
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8b 50       	subi	r24, 0x0B	; 11
    1e1e:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1e20:	cf 01       	movw	r24, r30
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
    1e28:	08 95       	ret

00001e2a <cc2420radiom_startRadio>:
    return FAIL;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_startRadio(void)
{
    1e2a:	1f 93       	push	r17
    result_t success = FAIL;

    {
        _atomic_t _atomic = _atomic_start();
    1e2c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    1e30:	98 2f       	mov	r25, r24

        {
            if (cc2420radiom_stateRadio ==
    1e32:	80 91 fb 04 	lds	r24, 0x04FB
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	29 f0       	breq	.+10     	; 0x1e44 <cc2420radiom_startRadio+0x1a>
            {
                cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
                success = SUCCESS;
            }
        }
        _atomic_end(_atomic);
    1e3a:	89 2f       	mov	r24, r25
    1e3c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    if (success == SUCCESS)
    {
        cc2420radiom_SplitControl_start();
    }
}
    1e40:	1f 91       	pop	r17
    1e42:	08 95       	ret

        {
            if (cc2420radiom_stateRadio ==
                cc2420radiom_DISABLED_STATE_STARTTASK)
            {
                cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
    1e44:	10 92 fb 04 	sts	0x04FB, r1
                success = SUCCESS;
            }
        }
        _atomic_end(_atomic);
    1e48:	89 2f       	mov	r24, r25
    1e4a:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
inline result_t cc2420radiom_SplitControl_start(void)
{
    uint8_t chkstateRadio;

    {
        _atomic_t _atomic = _atomic_start();
    1e4e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        chkstateRadio = cc2420radiom_stateRadio;
    1e52:	10 91 fb 04 	lds	r17, 0x04FB
        _atomic_end(_atomic);
    1e56:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    if (chkstateRadio == cc2420radiom_DISABLED_STATE)
    1e5a:	11 23       	and	r17, r17
    1e5c:	89 f7       	brne	.-30     	; 0x1e40 <cc2420radiom_startRadio+0x16>
    {
        {
            _atomic_t _atomic = _atomic_start();
    1e5e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

            {
                cc2420radiom_stateRadio = cc2420radiom_WARMUP_STATE;
    1e62:	9a e0       	ldi	r25, 0x0A	; 10
    1e64:	90 93 fb 04 	sts	0x04FB, r25
                cc2420radiom_countRetry = 0;
    1e68:	10 92 f6 04 	sts	0x04F6, r1
                cc2420radiom_rxbufptr->length = 0;
    1e6c:	e0 91 7d 04 	lds	r30, 0x047D
    1e70:	f0 91 7e 04 	lds	r31, 0x047E
    1e74:	10 82       	st	Z, r1
            }
            _atomic_end(_atomic);
    1e76:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_start(void)
{
    unsigned char result;

    result = cc2420controlm_SplitControl_start();
    1e7a:	0e 94 ed 0b 	call	0x17da	; 0x17da <cc2420controlm_SplitControl_start>
    1e7e:	e0 cf       	rjmp	.-64     	; 0x1e40 <cc2420radiom_startRadio+0x16>

00001e80 <cc2420radiom_Send_send>:
    }
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_Send_send(Radio_MsgPtr pMsg)
{
    1e80:	1f 93       	push	r17
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	ec 01       	movw	r28, r24
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();
    1e88:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        currentstate = cc2420radiom_stateRadio;
    1e8c:	10 91 fb 04 	lds	r17, 0x04FB
        _atomic_end(_atomic);
    1e90:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    if (currentstate == cc2420radiom_IDLE_STATE)
    1e94:	12 30       	cpi	r17, 0x02	; 2
    1e96:	29 f0       	breq	.+10     	; 0x1ea2 <cc2420radiom_Send_send+0x22>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
            cc2420radiom_sendFailed();
        }
        return SUCCESS;
    }
    return FAIL;
}
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	08 95       	ret
        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_IDLE_STATE)
    {
        pMsg->fcflo = 0x08;
    1ea2:	88 e0       	ldi	r24, 0x08	; 8
    1ea4:	8a 83       	std	Y+2, r24	; 0x02
        if (cc2420radiom_bAckEnable)
    1ea6:	80 91 f5 04 	lds	r24, 0x04F5
    1eaa:	88 23       	and	r24, r24
    1eac:	c9 f5       	brne	.+114    	; 0x1f20 <cc2420radiom_Send_send+0xa0>
        {
            pMsg->fcfhi = 0x21;
        }
        else
        {
            pMsg->fcfhi = 0x01;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	89 83       	std	Y+1, r24	; 0x01
        }
        pMsg->destpan = BCAST_ADDRESS;
    1eb2:	8f ef       	ldi	r24, 0xFF	; 255
    1eb4:	9f ef       	ldi	r25, 0xFF	; 255
    1eb6:	9d 83       	std	Y+5, r25	; 0x05
    1eb8:	8c 83       	std	Y+4, r24	; 0x04
        //don't understand why it has to be LSB. Must check later. 
        pMsg->addr = toLSB16(pMsg->addr);
    1eba:	8e 81       	ldd	r24, Y+6	; 0x06
    1ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ebe:	0e 94 bf 3a 	call	0x757e	; 0x757e <toLSB16>
    1ec2:	9f 83       	std	Y+7, r25	; 0x07
    1ec4:	8e 83       	std	Y+6, r24	; 0x06
        //The length now includes both the 
        pMsg->length = pMsg->length + MSG_HEADER_SIZE + MSG_FOOTER_SIZE;
    1ec6:	88 81       	ld	r24, Y
    1ec8:	85 5f       	subi	r24, 0xF5	; 245
    1eca:	88 83       	st	Y, r24
        pMsg->dsn = ++cc2420radiom_currentDSN;
    1ecc:	80 91 7f 04 	lds	r24, 0x047F
    1ed0:	8f 5f       	subi	r24, 0xFF	; 255
    1ed2:	80 93 7f 04 	sts	0x047F, r24
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
        pMsg->time = 0;
    1ed8:	ce 58       	subi	r28, 0x8E	; 142
    1eda:	df 4f       	sbci	r29, 0xFF	; 255
    1edc:	19 82       	std	Y+1, r1	; 0x01
    1ede:	18 82       	st	Y, r1
    1ee0:	c2 57       	subi	r28, 0x72	; 114
    1ee2:	d0 40       	sbci	r29, 0x00	; 0
        cc2420radiom_txlength = pMsg->length - MSG_FOOTER_SIZE;
    1ee4:	88 81       	ld	r24, Y
    1ee6:	82 50       	subi	r24, 0x02	; 2
    1ee8:	80 93 fc 04 	sts	0x04FC, r24
        cc2420radiom_txbufptr = pMsg;
    1eec:	d0 93 fa 04 	sts	0x04FA, r29
    1ef0:	c0 93 f9 04 	sts	0x04F9, r28
        cc2420radiom_countRetry = 8;
    1ef4:	88 e0       	ldi	r24, 0x08	; 8
    1ef6:	80 93 f6 04 	sts	0x04F6, r24
        {
            _atomic_t _atomic = _atomic_start();
    1efa:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

            cc2420radiom_stateRadio = cc2420radiom_PRE_TX_STATE;
    1efe:	95 e0       	ldi	r25, 0x05	; 5
    1f00:	90 93 fb 04 	sts	0x04FB, r25
            _atomic_end(_atomic);
    1f04:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
        }
        if (!postTask(cc2420radiom_startSend, 5))
    1f08:	8e ed       	ldi	r24, 0xDE	; 222
    1f0a:	9e e0       	ldi	r25, 0x0E	; 14
    1f0c:	65 e0       	ldi	r22, 0x05	; 5
    1f0e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    1f12:	88 23       	and	r24, r24
    1f14:	41 f0       	breq	.+16     	; 0x1f26 <cc2420radiom_Send_send+0xa6>
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1f16:	81 e0       	ldi	r24, 0x01	; 1
            cc2420radiom_sendFailed();
        }
        return SUCCESS;
    }
    return FAIL;
}
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	08 95       	ret
    if (currentstate == cc2420radiom_IDLE_STATE)
    {
        pMsg->fcflo = 0x08;
        if (cc2420radiom_bAckEnable)
        {
            pMsg->fcfhi = 0x21;
    1f20:	81 e2       	ldi	r24, 0x21	; 33
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	c6 cf       	rjmp	.-116    	; 0x1eb2 <cc2420radiom_Send_send+0x32>

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1f26:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1f2a:	92 e0       	ldi	r25, 0x02	; 2
    1f2c:	90 93 fb 04 	sts	0x04FB, r25
        _atomic_end(_atomic);
    1f30:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1f34:	e0 91 f9 04 	lds	r30, 0x04F9
    1f38:	f0 91 fa 04 	lds	r31, 0x04FA
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8b 50       	subi	r24, 0x0B	; 11
    1f40:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1f42:	cf 01       	movw	r24, r30
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	e5 cf       	rjmp	.-54     	; 0x1f18 <cc2420radiom_Send_send+0x98>

00001f4e <cc2420radiom_tryToSend>:
    }
}

//-------------------------------------------------------------------------
inline void cc2420radiom_tryToSend(void)
{
    1f4e:	1f 93       	push	r17
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();
    1f50:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        currentstate = cc2420radiom_stateRadio;
    1f54:	10 91 fb 04 	lds	r17, 0x04FB
        _atomic_end(_atomic);
    1f58:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    1f5c:	15 30       	cpi	r17, 0x05	; 5
    1f5e:	b1 f0       	breq	.+44     	; 0x1f8c <cc2420radiom_tryToSend+0x3e>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    1f60:	0e 94 a5 12 	call	0x254a	; 0x254a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1f64:	8f e3       	ldi	r24, 0x3F	; 63
    1f66:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1f6a:	88 e0       	ldi	r24, 0x08	; 8
    1f6c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    1f70:	88 e0       	ldi	r24, 0x08	; 8
    1f72:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    1f76:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    1f7a:	10 92 80 04 	sts	0x0480, r1
        _atomic_end(_atomic);
    1f7e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	0e 94 4b 13 	call	0x2696	; 0x2696 <hplcc2420interruptm_FIFOP_startWait>
    }
    else
    {
        cc2420radiom_flushRXFIFO();
    }
}
    1f88:	1f 91       	pop	r17
    1f8a:	08 95       	ret
        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    {
        if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    1f8c:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    1f90:	89 2b       	or	r24, r25
    1f92:	71 f0       	breq	.+28     	; 0x1fb0 <cc2420radiom_tryToSend+0x62>
        {
            cc2420radiom_flushRXFIFO();
        }
        if (LITE_READ_RADIO_CCA_PIN())
    1f94:	0e 94 15 06 	call	0xc2a	; 0xc2a <LITE_READ_RADIO_CCA_PIN>
    1f98:	89 2b       	or	r24, r25
    1f9a:	b1 f3       	breq	.-20     	; 0x1f88 <cc2420radiom_tryToSend+0x3a>
        {
            {
                _atomic_t _atomic = _atomic_start();
    1f9c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

                cc2420radiom_stateRadio = cc2420radiom_TX_STATE;
    1fa0:	93 e0       	ldi	r25, 0x03	; 3
    1fa2:	90 93 fb 04 	sts	0x04FB, r25
                _atomic_end(_atomic);
    1fa6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
            }
            cc2420radiom_sendPacket();
    1faa:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <cc2420radiom_sendPacket>
    1fae:	ec cf       	rjmp	.-40     	; 0x1f88 <cc2420radiom_tryToSend+0x3a>
        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    {
        if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    1fb0:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    1fb4:	89 2b       	or	r24, r25
    1fb6:	71 f7       	brne	.-36     	; 0x1f94 <cc2420radiom_tryToSend+0x46>
        {
            cc2420radiom_flushRXFIFO();
    1fb8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <cc2420radiom_flushRXFIFO>
    1fbc:	eb cf       	rjmp	.-42     	; 0x1f94 <cc2420radiom_tryToSend+0x46>

00001fbe <cc2420radiom_HPLChipconFIFO_TXFIFODone>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_HPLChipconFIFO_TXFIFODone(uint8_t length,
                                                       uint8_t * data)
{
    1fbe:	1f 93       	push	r17
inline void cc2420radiom_tryToSend(void)
{
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();
    1fc0:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        currentstate = cc2420radiom_stateRadio;
    1fc4:	10 91 fb 04 	lds	r17, 0x04FB
        _atomic_end(_atomic);
    1fc8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    1fcc:	15 30       	cpi	r17, 0x05	; 5
    1fce:	b9 f0       	breq	.+46     	; 0x1ffe <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x40>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    1fd0:	0e 94 a5 12 	call	0x254a	; 0x254a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1fd4:	8f e3       	ldi	r24, 0x3F	; 63
    1fd6:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1fda:	88 e0       	ldi	r24, 0x08	; 8
    1fdc:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    1fe0:	88 e0       	ldi	r24, 0x08	; 8
    1fe2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    1fe6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    1fea:	10 92 80 04 	sts	0x0480, r1
        _atomic_end(_atomic);
    1fee:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	0e 94 4b 13 	call	0x2696	; 0x2696 <hplcc2420interruptm_FIFOP_startWait>
inline result_t cc2420radiom_HPLChipconFIFO_TXFIFODone(uint8_t length,
                                                       uint8_t * data)
{
    cc2420radiom_tryToSend();
    return SUCCESS;
}
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	1f 91       	pop	r17
    1ffc:	08 95       	ret
        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    {
        if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    1ffe:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    2002:	89 2b       	or	r24, r25
    2004:	71 f0       	breq	.+28     	; 0x2022 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x64>
        {
            cc2420radiom_flushRXFIFO();
        }
        if (LITE_READ_RADIO_CCA_PIN())
    2006:	0e 94 15 06 	call	0xc2a	; 0xc2a <LITE_READ_RADIO_CCA_PIN>
    200a:	89 2b       	or	r24, r25
    200c:	a9 f3       	breq	.-22     	; 0x1ff8 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x3a>
        {
            {
                _atomic_t _atomic = _atomic_start();
    200e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

                cc2420radiom_stateRadio = cc2420radiom_TX_STATE;
    2012:	93 e0       	ldi	r25, 0x03	; 3
    2014:	90 93 fb 04 	sts	0x04FB, r25
                _atomic_end(_atomic);
    2018:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
            }
            cc2420radiom_sendPacket();
    201c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <cc2420radiom_sendPacket>
    2020:	eb cf       	rjmp	.-42     	; 0x1ff8 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x3a>
        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    {
        if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    2022:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    2026:	89 2b       	or	r24, r25
    2028:	71 f7       	brne	.-36     	; 0x2006 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x48>
        {
            cc2420radiom_flushRXFIFO();
    202a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <cc2420radiom_flushRXFIFO>
    202e:	eb cf       	rjmp	.-42     	; 0x2006 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x48>

00002030 <cc2420radiom_FIFOP_fired>:
    cc2420radiom_delayedRXFIFO();
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_fired(void)
{
    2030:	1f 93       	push	r17
    if (!LITE_READ_CC_FIFO_PIN())
    2032:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    2036:	89 2b       	or	r24, r25
    2038:	39 f1       	breq	.+78     	; 0x2088 <cc2420radiom_FIFOP_fired+0x58>
    {
        cc2420radiom_flushRXFIFO();
        return SUCCESS;
    }
    {
        _atomic_t _atomic = _atomic_start();
    203a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    203e:	18 2f       	mov	r17, r24

        {
            if (postTask(cc2420radiom_delayedRXFIFOtask, 5))
    2040:	86 e4       	ldi	r24, 0x46	; 70
    2042:	91 e1       	ldi	r25, 0x11	; 17
    2044:	65 e0       	ldi	r22, 0x05	; 5
    2046:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    204a:	88 23       	and	r24, r24
    204c:	d1 f4       	brne	.+52     	; 0x2082 <cc2420radiom_FIFOP_fired+0x52>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    204e:	0e 94 a5 12 	call	0x254a	; 0x254a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    2052:	8f e3       	ldi	r24, 0x3F	; 63
    2054:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    2058:	88 e0       	ldi	r24, 0x08	; 8
    205a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    205e:	88 e0       	ldi	r24, 0x08	; 8
    2060:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    2064:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    2068:	10 92 80 04 	sts	0x0480, r1
        _atomic_end(_atomic);
    206c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	0e 94 4b 13 	call	0x2696	; 0x2696 <hplcc2420interruptm_FIFOP_startWait>
            else
            {
                cc2420radiom_flushRXFIFO();
            }
        }
        _atomic_end(_atomic);
    2076:	81 2f       	mov	r24, r17
    2078:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return SUCCESS;
}
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	1f 91       	pop	r17
    2080:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    2082:	0e 94 a5 12 	call	0x254a	; 0x254a <hplcc2420interruptm_FIFOP_disable>
    2086:	f7 cf       	rjmp	.-18     	; 0x2076 <cc2420radiom_FIFOP_fired+0x46>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    2088:	0e 94 a5 12 	call	0x254a	; 0x254a <hplcc2420interruptm_FIFOP_disable>
    208c:	8f e3       	ldi	r24, 0x3F	; 63
    208e:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    2092:	88 e0       	ldi	r24, 0x08	; 8
    2094:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    2098:	88 e0       	ldi	r24, 0x08	; 8
    209a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    209e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    20a2:	10 92 80 04 	sts	0x0480, r1
        _atomic_end(_atomic);
    20a6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	0e 94 4b 13 	call	0x2696	; 0x2696 <hplcc2420interruptm_FIFOP_startWait>
            }
        }
        _atomic_end(_atomic);
    }
    return SUCCESS;
}
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	1f 91       	pop	r17
    20b4:	08 95       	ret

000020b6 <cc2420radiom_HPLChipconFIFO_RXFIFODone>:
}

//ALL THE DATA IN LENGTH IS THE CORRECT FRAME 
inline result_t cc2420radiom_HPLChipconFIFO_RXFIFODone(uint8_t length,
                                                       uint8_t * data)
{
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	18 2f       	mov	r17, r24
    20be:	eb 01       	movw	r28, r22
    //The data now contains the full packet, starting with a packet length which is the remaining part of the packet, not including itself
    //The length, however, includes everything 
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();
    20c0:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            currentstate = cc2420radiom_stateRadio;
        }
        _atomic_end(_atomic);
    20c4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    if (((!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN()) || length
    20c8:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    20cc:	89 2b       	or	r24, r25
    20ce:	71 f1       	breq	.+92     	; 0x212c <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x76>
    20d0:	11 23       	and	r17, r17
    20d2:	69 f0       	breq	.+26     	; 0x20ee <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
    20d4:	11 37       	cpi	r17, 0x71	; 113
    20d6:	58 f4       	brcc	.+22     	; 0x20ee <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
            cc2420radiom_bPacketReceiving = FALSE;
            _atomic_end(_atomic);
        }
        return SUCCESS;
    }
    cc2420radiom_rxbufptr = (Radio_MsgPtr) data;
    20d8:	d0 93 7e 04 	sts	0x047E, r29
    20dc:	c0 93 7d 04 	sts	0x047D, r28
    if ((cc2420radiom_rxbufptr->fcfhi & 0x07) != 0x01
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	87 70       	andi	r24, 0x07	; 7
    20e4:	81 30       	cpi	r24, 0x01	; 1
    20e6:	19 f4       	brne	.+6      	; 0x20ee <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	88 30       	cpi	r24, 0x08	; 8
    20ec:	21 f1       	breq	.+72     	; 0x2136 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x80>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    20ee:	0e 94 a5 12 	call	0x254a	; 0x254a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    20f2:	8f e3       	ldi	r24, 0x3F	; 63
    20f4:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    20f8:	88 e0       	ldi	r24, 0x08	; 8
    20fa:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    20fe:	88 e0       	ldi	r24, 0x08	; 8
    2100:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    2104:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    2108:	10 92 80 04 	sts	0x0480, r1
        _atomic_end(_atomic);
    210c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	0e 94 4b 13 	call	0x2696	; 0x2696 <hplcc2420interruptm_FIFOP_startWait>
    if ((cc2420radiom_rxbufptr->fcfhi & 0x07) != 0x01
        || cc2420radiom_rxbufptr->fcflo != 0x08)
    {
        cc2420radiom_flushRXFIFO();
        {
            _atomic_t _atomic = _atomic_start();
    2116:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

            cc2420radiom_bPacketReceiving = FALSE;
    211a:	10 92 80 04 	sts	0x0480, r1
            _atomic_end(_atomic);
    211e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
            return SUCCESS;
        }
    }
    cc2420radiom_flushRXFIFO();
    return SUCCESS;
}
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	1f 91       	pop	r17
    212a:	08 95       	ret
        {
            currentstate = cc2420radiom_stateRadio;
        }
        _atomic_end(_atomic);
    }
    if (((!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN()) || length
    212c:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    2130:	89 2b       	or	r24, r25
    2132:	71 f6       	brne	.-100    	; 0x20d0 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1a>
    2134:	dc cf       	rjmp	.-72     	; 0x20ee <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
            _atomic_end(_atomic);
        }
        return SUCCESS;
    }
    //Now modifies the length such that it only points to the actual payload defined by the user 
    cc2420radiom_rxbufptr->length = cc2420radiom_rxbufptr->length -
    2136:	88 81       	ld	r24, Y
    2138:	8b 50       	subi	r24, 0x0B	; 11
    213a:	88 83       	st	Y, r24
        MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    //Revised by Qing, from 29 to PAYLOAD_LENGTH 
    if (cc2420radiom_rxbufptr->length > PAYLOAD_LENGTH)
    213c:	85 36       	cpi	r24, 0x65	; 101
    213e:	08 f0       	brcs	.+2      	; 0x2142 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x8c>
    2140:	49 c0       	rjmp	.+146    	; 0x21d4 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x11e>
            cc2420radiom_bPacketReceiving = FALSE;
            _atomic_end(_atomic);
        }
        return SUCCESS;
    }
    cc2420radiom_rxbufptr->addr = fromLSB16(cc2420radiom_rxbufptr->addr);
    2142:	8e 81       	ldd	r24, Y+6	; 0x06
    2144:	9f 81       	ldd	r25, Y+7	; 0x07
    2146:	0e 94 d5 3a 	call	0x75aa	; 0x75aa <fromLSB16>
    214a:	9f 83       	std	Y+7, r25	; 0x07
    214c:	8e 83       	std	Y+6, r24	; 0x06
    //CRC and LQI share the information 
    cc2420radiom_rxbufptr->crc = data[length - 1] >> 7;
    214e:	e0 91 7d 04 	lds	r30, 0x047D
    2152:	f0 91 7e 04 	lds	r31, 0x047E
    2156:	21 2f       	mov	r18, r17
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	21 50       	subi	r18, 0x01	; 1
    215c:	30 40       	sbci	r19, 0x00	; 0
    215e:	de 01       	movw	r26, r28
    2160:	a2 0f       	add	r26, r18
    2162:	b3 1f       	adc	r27, r19
    2164:	2f 5f       	subi	r18, 0xFF	; 255
    2166:	3f 4f       	sbci	r19, 0xFF	; 255
    2168:	e0 59       	subi	r30, 0x90	; 144
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	8c 91       	ld	r24, X
    216e:	88 1f       	adc	r24, r24
    2170:	88 27       	eor	r24, r24
    2172:	88 1f       	adc	r24, r24
    2174:	80 83       	st	Z, r24
    cc2420radiom_rxbufptr->strength = data[length - 2];
    2176:	32 97       	sbiw	r30, 0x02	; 2
    2178:	c2 0f       	add	r28, r18
    217a:	d3 1f       	adc	r29, r19
    217c:	22 97       	sbiw	r28, 0x02	; 2
    217e:	88 81       	ld	r24, Y
    2180:	81 93       	st	Z+, r24
    cc2420radiom_rxbufptr->lqi = data[length - 1] & 0x7F;
    2182:	8c 91       	ld	r24, X
    2184:	8f 77       	andi	r24, 0x7F	; 127
    2186:	80 83       	st	Z, r24
    {
        _atomic_t _atomic = _atomic_start();
    2188:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    218c:	18 2f       	mov	r17, r24

        {
            if (!postTask(cc2420radiom_PacketRcvd, 5))
    218e:	88 eb       	ldi	r24, 0xB8	; 184
    2190:	9d e0       	ldi	r25, 0x0D	; 13
    2192:	65 e0       	ldi	r22, 0x05	; 5
    2194:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    2198:	88 23       	and	r24, r24
    219a:	11 f4       	brne	.+4      	; 0x21a0 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0xea>
            {
                cc2420radiom_bPacketReceiving = FALSE;
    219c:	10 92 80 04 	sts	0x0480, r1
            }
        }
        _atomic_end(_atomic);
    21a0:	81 2f       	mov	r24, r17
    21a2:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    21a6:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    21aa:	89 2b       	or	r24, r25
    21ac:	21 f4       	brne	.+8      	; 0x21b6 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x100>
    21ae:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    21b2:	89 2b       	or	r24, r25
    21b4:	61 f0       	breq	.+24     	; 0x21ce <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x118>
    {
        cc2420radiom_flushRXFIFO();
        return SUCCESS;
    }
    if (!LITE_READ_CC_FIFOP_PIN())
    21b6:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    21ba:	89 2b       	or	r24, r25
    21bc:	41 f4       	brne	.+16     	; 0x21ce <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x118>
    {
        if (postTask(cc2420radiom_delayedRXFIFOtask, 5))
    21be:	86 e4       	ldi	r24, 0x46	; 70
    21c0:	91 e1       	ldi	r25, 0x11	; 17
    21c2:	65 e0       	ldi	r22, 0x05	; 5
    21c4:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    21c8:	88 23       	and	r24, r24
    21ca:	09 f0       	breq	.+2      	; 0x21ce <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x118>
    21cc:	aa cf       	rjmp	.-172    	; 0x2122 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x6c>
        {
            return SUCCESS;
        }
    }
    cc2420radiom_flushRXFIFO();
    21ce:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <cc2420radiom_flushRXFIFO>
    21d2:	a7 cf       	rjmp	.-178    	; 0x2122 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x6c>
    cc2420radiom_rxbufptr->length = cc2420radiom_rxbufptr->length -
        MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    //Revised by Qing, from 29 to PAYLOAD_LENGTH 
    if (cc2420radiom_rxbufptr->length > PAYLOAD_LENGTH)
    {
        cc2420radiom_flushRXFIFO();
    21d4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <cc2420radiom_flushRXFIFO>
        {
            _atomic_t _atomic = _atomic_start();
    21d8:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

            cc2420radiom_bPacketReceiving = FALSE;
    21dc:	10 92 80 04 	sts	0x0480, r1
            _atomic_end(_atomic);
    21e0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    21e4:	9e cf       	rjmp	.-196    	; 0x2122 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x6c>

000021e6 <cc2420radiom_delayedRXFIFO>:
    cc2420radiom_FIFOP_startWait(FALSE);
}

//-------------------------------------------------------------------------
void cc2420radiom_delayedRXFIFO(void)
{
    21e6:	1f 93       	push	r17
    //The MSG_DATA_SIZE is defined such that it contains the total length of data plus 2 bytes of the RSSI and LQI 
    uint8_t len = MSG_DATA_SIZE;
    uint8_t _bPacketReceiving;

    if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    21e8:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    21ec:	89 2b       	or	r24, r25
    21ee:	21 f4       	brne	.+8      	; 0x21f8 <cc2420radiom_delayedRXFIFO+0x12>
    21f0:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    21f4:	89 2b       	or	r24, r25
    21f6:	b1 f0       	breq	.+44     	; 0x2224 <cc2420radiom_delayedRXFIFO+0x3e>
    {
        cc2420radiom_flushRXFIFO();
        return;
    }
    {
        _atomic_t _atomic = _atomic_start();
    21f8:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    21fc:	18 2f       	mov	r17, r24

        {
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
    21fe:	80 91 80 04 	lds	r24, 0x0480
    2202:	88 23       	and	r24, r24
    2204:	29 f5       	brne	.+74     	; 0x2250 <cc2420radiom_delayedRXFIFO+0x6a>
                    cc2420radiom_flushRXFIFO();
                }
            }
            else
            {
                cc2420radiom_bPacketReceiving = TRUE;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	80 93 80 04 	sts	0x0480, r24
            }
        }
        _atomic_end(_atomic);
    220c:	81 2f       	mov	r24, r17
    220e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
inline result_t cc2420radiom_HPLChipconFIFO_readRXFIFO(uint8_t arg_0xa4118a0,
                                                       uint8_t * arg_0xa411a00)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(arg_0xa4118a0,
    2212:	60 91 7d 04 	lds	r22, 0x047D
    2216:	70 91 7e 04 	lds	r23, 0x047E
    221a:	80 e7       	ldi	r24, 0x70	; 112
    221c:	0e 94 99 11 	call	0x2332	; 0x2332 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
        _atomic_end(_atomic);
    }
    //Now read the RX to get the data 
    if (!_bPacketReceiving)
    {
        if (!cc2420radiom_HPLChipconFIFO_readRXFIFO(len, (uint8_t *)
    2220:	88 23       	and	r24, r24
    2222:	09 f1       	breq	.+66     	; 0x2266 <cc2420radiom_delayedRXFIFO+0x80>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    2224:	0e 94 a5 12 	call	0x254a	; 0x254a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    2228:	8f e3       	ldi	r24, 0x3F	; 63
    222a:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    222e:	88 e0       	ldi	r24, 0x08	; 8
    2230:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    2234:	88 e0       	ldi	r24, 0x08	; 8
    2236:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    223a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    223e:	10 92 80 04 	sts	0x0480, r1
        _atomic_end(_atomic);
    2242:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	0e 94 4b 13 	call	0x2696	; 0x2696 <hplcc2420interruptm_FIFOP_startWait>
            }
            return;
        }
    }
    cc2420radiom_flushRXFIFO();
}
    224c:	1f 91       	pop	r17
    224e:	08 95       	ret

        {
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
            {
                if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
    2250:	86 e4       	ldi	r24, 0x46	; 70
    2252:	91 e1       	ldi	r25, 0x11	; 17
    2254:	65 e0       	ldi	r22, 0x05	; 5
    2256:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    225a:	88 23       	and	r24, r24
    225c:	a1 f0       	breq	.+40     	; 0x2286 <cc2420radiom_delayedRXFIFO+0xa0>
            else
            {
                cc2420radiom_bPacketReceiving = TRUE;
            }
        }
        _atomic_end(_atomic);
    225e:	81 2f       	mov	r24, r17
    2260:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    2264:	df cf       	rjmp	.-66     	; 0x2224 <cc2420radiom_delayedRXFIFO+0x3e>
    {
        if (!cc2420radiom_HPLChipconFIFO_readRXFIFO(len, (uint8_t *)
                                                    cc2420radiom_rxbufptr))
        {
            {
                _atomic_t _atomic = _atomic_start();
    2266:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

                cc2420radiom_bPacketReceiving = FALSE;
    226a:	10 92 80 04 	sts	0x0480, r1
                _atomic_end(_atomic);
    226e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
            }
            if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
    2272:	86 e4       	ldi	r24, 0x46	; 70
    2274:	91 e1       	ldi	r25, 0x11	; 17
    2276:	65 e0       	ldi	r22, 0x05	; 5
    2278:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    227c:	88 23       	and	r24, r24
    227e:	31 f7       	brne	.-52     	; 0x224c <cc2420radiom_delayedRXFIFO+0x66>
            {
                cc2420radiom_flushRXFIFO();
    2280:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <cc2420radiom_flushRXFIFO>
    2284:	e3 cf       	rjmp	.-58     	; 0x224c <cc2420radiom_delayedRXFIFO+0x66>
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
            {
                if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
                {
                    cc2420radiom_flushRXFIFO();
    2286:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <cc2420radiom_flushRXFIFO>
    228a:	e9 cf       	rjmp	.-46     	; 0x225e <cc2420radiom_delayedRXFIFO+0x78>

0000228c <cc2420radiom_delayedRXFIFOtask>:
    return result;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_delayedRXFIFOtask(void)
{
    228c:	1f 93       	push	r17
{
    //The MSG_DATA_SIZE is defined such that it contains the total length of data plus 2 bytes of the RSSI and LQI 
    uint8_t len = MSG_DATA_SIZE;
    uint8_t _bPacketReceiving;

    if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    228e:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    2292:	89 2b       	or	r24, r25
    2294:	21 f4       	brne	.+8      	; 0x229e <cc2420radiom_delayedRXFIFOtask+0x12>
    2296:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    229a:	89 2b       	or	r24, r25
    229c:	b1 f0       	breq	.+44     	; 0x22ca <cc2420radiom_delayedRXFIFOtask+0x3e>
    {
        cc2420radiom_flushRXFIFO();
        return;
    }
    {
        _atomic_t _atomic = _atomic_start();
    229e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    22a2:	18 2f       	mov	r17, r24

        {
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
    22a4:	80 91 80 04 	lds	r24, 0x0480
    22a8:	88 23       	and	r24, r24
    22aa:	29 f5       	brne	.+74     	; 0x22f6 <cc2420radiom_delayedRXFIFOtask+0x6a>
                    cc2420radiom_flushRXFIFO();
                }
            }
            else
            {
                cc2420radiom_bPacketReceiving = TRUE;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	80 93 80 04 	sts	0x0480, r24
            }
        }
        _atomic_end(_atomic);
    22b2:	81 2f       	mov	r24, r17
    22b4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
inline result_t cc2420radiom_HPLChipconFIFO_readRXFIFO(uint8_t arg_0xa4118a0,
                                                       uint8_t * arg_0xa411a00)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(arg_0xa4118a0,
    22b8:	60 91 7d 04 	lds	r22, 0x047D
    22bc:	70 91 7e 04 	lds	r23, 0x047E
    22c0:	80 e7       	ldi	r24, 0x70	; 112
    22c2:	0e 94 99 11 	call	0x2332	; 0x2332 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
        _atomic_end(_atomic);
    }
    //Now read the RX to get the data 
    if (!_bPacketReceiving)
    {
        if (!cc2420radiom_HPLChipconFIFO_readRXFIFO(len, (uint8_t *)
    22c6:	88 23       	and	r24, r24
    22c8:	09 f1       	breq	.+66     	; 0x230c <cc2420radiom_delayedRXFIFOtask+0x80>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    22ca:	0e 94 a5 12 	call	0x254a	; 0x254a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    22ce:	8f e3       	ldi	r24, 0x3F	; 63
    22d0:	0e 94 bf 13 	call	0x277e	; 0x277e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    22d4:	88 e0       	ldi	r24, 0x08	; 8
    22d6:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    22da:	88 e0       	ldi	r24, 0x08	; 8
    22dc:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <HPLCC2420M_HPLCC2420_cmd>
    22e0:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    22e4:	10 92 80 04 	sts	0x0480, r1
        _atomic_end(_atomic);
    22e8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	0e 94 4b 13 	call	0x2696	; 0x2696 <hplcc2420interruptm_FIFOP_startWait>

//-------------------------------------------------------------------------
inline void cc2420radiom_delayedRXFIFOtask(void)
{
    cc2420radiom_delayedRXFIFO();
}
    22f2:	1f 91       	pop	r17
    22f4:	08 95       	ret

        {
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
            {
                if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
    22f6:	86 e4       	ldi	r24, 0x46	; 70
    22f8:	91 e1       	ldi	r25, 0x11	; 17
    22fa:	65 e0       	ldi	r22, 0x05	; 5
    22fc:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    2300:	88 23       	and	r24, r24
    2302:	a1 f0       	breq	.+40     	; 0x232c <cc2420radiom_delayedRXFIFOtask+0xa0>
            else
            {
                cc2420radiom_bPacketReceiving = TRUE;
            }
        }
        _atomic_end(_atomic);
    2304:	81 2f       	mov	r24, r17
    2306:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    230a:	df cf       	rjmp	.-66     	; 0x22ca <cc2420radiom_delayedRXFIFOtask+0x3e>
    {
        if (!cc2420radiom_HPLChipconFIFO_readRXFIFO(len, (uint8_t *)
                                                    cc2420radiom_rxbufptr))
        {
            {
                _atomic_t _atomic = _atomic_start();
    230c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

                cc2420radiom_bPacketReceiving = FALSE;
    2310:	10 92 80 04 	sts	0x0480, r1
                _atomic_end(_atomic);
    2314:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
            }
            if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
    2318:	86 e4       	ldi	r24, 0x46	; 70
    231a:	91 e1       	ldi	r25, 0x11	; 17
    231c:	65 e0       	ldi	r22, 0x05	; 5
    231e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    2322:	88 23       	and	r24, r24
    2324:	31 f7       	brne	.-52     	; 0x22f2 <cc2420radiom_delayedRXFIFOtask+0x66>
            {
                cc2420radiom_flushRXFIFO();
    2326:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <cc2420radiom_flushRXFIFO>
    232a:	e3 cf       	rjmp	.-58     	; 0x22f2 <cc2420radiom_delayedRXFIFOtask+0x66>
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
            {
                if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
                {
                    cc2420radiom_flushRXFIFO();
    232c:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <cc2420radiom_flushRXFIFO>
    2330:	e9 cf       	rjmp	.-46     	; 0x2304 <cc2420radiom_delayedRXFIFOtask+0x78>

00002332 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>:
inline
    //Seems that the transmitted len is the actual length over the air 
    //The first number in the frame is the remaining part 
    result_t hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(uint8_t len,
                                                     uint8_t * msg)
{
    2332:	0f 93       	push	r16
    2334:	1f 93       	push	r17
    2336:	cf 93       	push	r28
    2338:	df 93       	push	r29
    233a:	18 2f       	mov	r17, r24
    233c:	eb 01       	movw	r28, r22
    uint8_t status;
    uint8_t i;
    bool returnFail = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    233e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2342:	98 2f       	mov	r25, r24

        {
            if (hplcc2420fifom_rxbufBusy)
    2344:	80 91 04 05 	lds	r24, 0x0504
    2348:	88 23       	and	r24, r24
    234a:	09 f0       	breq	.+2      	; 0x234e <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x1c>
    234c:	55 c0       	rjmp	.+170    	; 0x23f8 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xc6>
            {
                returnFail = TRUE;
            }
            else
            {
                hplcc2420fifom_rxbufBusy = TRUE;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	80 93 04 05 	sts	0x0504, r24
            }
        }
        _atomic_end(_atomic);
    2354:	89 2f       	mov	r24, r25
    2356:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    if (returnFail)
    {
        return FAIL;
    }
    {
        _atomic_t _atomic = _atomic_start();
    235a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    235e:	08 2f       	mov	r16, r24

        {
            hplcc2420fifom_bSpiAvail = FALSE;
    2360:	10 92 fe 04 	sts	0x04FE, r1
            hplcc2420fifom_rxbuf = msg;
    2364:	d0 93 00 05 	sts	0x0500, r29
    2368:	c0 93 ff 04 	sts	0x04FF, r28
            LITE_CLR_CC_CS_PIN();
    236c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(CC2420_RXFIFO | 0x40, SPDR);   //output Rxfifo address
    2370:	8f e7       	ldi	r24, 0x7F	; 127
    2372:	8f b9       	out	0x0f, r24	; 15
            while (!(inp(SPSR) & 0x80))
    2374:	77 9b       	sbis	0x0e, 7	; 14
    2376:	fe cf       	rjmp	.-4      	; 0x2374 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x42>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    2378:	8f b1       	in	r24, 0x0f	; 15
            outp(0, SPDR);
    237a:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    237c:	77 9b       	sbis	0x0e, 7	; 14
    237e:	fe cf       	rjmp	.-4      	; 0x237c <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x4a>
            {
            }
            ;                   //wait for spi xfr to complete
            hplcc2420fifom_rxlength = inp(SPDR);
    2380:	8f b1       	in	r24, 0x0f	; 15
    2382:	80 93 05 05 	sts	0x0505, r24
            //My revise
            //The first byte, however, only contains a part of the whole, which needs to add 1 to mean that it is the total to be read 
            //and this also defaults to len, which is the MSG_DATA_SIZE
            if (hplcc2420fifom_rxlength > 0)
    2386:	88 23       	and	r24, r24
    2388:	11 f1       	breq	.+68     	; 0x23ce <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x9c>
            {
                hplcc2420fifom_rxbuf[0] = hplcc2420fifom_rxlength;
    238a:	e0 91 ff 04 	lds	r30, 0x04FF
    238e:	f0 91 00 05 	lds	r31, 0x0500
    2392:	80 83       	st	Z, r24
                hplcc2420fifom_rxlength++;
    2394:	80 91 05 05 	lds	r24, 0x0505
    2398:	8f 5f       	subi	r24, 0xFF	; 255
    239a:	80 93 05 05 	sts	0x0505, r24
                if (hplcc2420fifom_rxlength > len)
    239e:	18 17       	cp	r17, r24
    23a0:	18 f4       	brcc	.+6      	; 0x23a8 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x76>
                {
                    hplcc2420fifom_rxlength = len;
    23a2:	10 93 05 05 	sts	0x0505, r17
    23a6:	81 2f       	mov	r24, r17
                }
                for (i = 1; i < hplcc2420fifom_rxlength; i++)
    23a8:	82 30       	cpi	r24, 0x02	; 2
    23aa:	88 f0       	brcs	.+34     	; 0x23ce <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x9c>
    23ac:	91 e0       	ldi	r25, 0x01	; 1
                {
                    outp(0, SPDR);
    23ae:	1f b8       	out	0x0f, r1	; 15
                    while (!(inp(SPSR) & 0x80))
    23b0:	77 9b       	sbis	0x0e, 7	; 14
    23b2:	fe cf       	rjmp	.-4      	; 0x23b0 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x7e>
                    {
                    }
                    ;           //wait for spi xfr to complete
                    hplcc2420fifom_rxbuf[i] = inp(SPDR);
    23b4:	8f b1       	in	r24, 0x0f	; 15
    23b6:	e0 91 ff 04 	lds	r30, 0x04FF
    23ba:	f0 91 00 05 	lds	r31, 0x0500
    23be:	e9 0f       	add	r30, r25
    23c0:	f1 1d       	adc	r31, r1
    23c2:	80 83       	st	Z, r24
                hplcc2420fifom_rxlength++;
                if (hplcc2420fifom_rxlength > len)
                {
                    hplcc2420fifom_rxlength = len;
                }
                for (i = 1; i < hplcc2420fifom_rxlength; i++)
    23c4:	9f 5f       	subi	r25, 0xFF	; 255
    23c6:	80 91 05 05 	lds	r24, 0x0505
    23ca:	98 17       	cp	r25, r24
    23cc:	80 f3       	brcs	.-32     	; 0x23ae <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x7c>
                    }
                    ;           //wait for spi xfr to complete
                    hplcc2420fifom_rxbuf[i] = inp(SPDR);
                }
            }
            hplcc2420fifom_bSpiAvail = TRUE;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	80 93 fe 04 	sts	0x04FE, r24
        }
        _atomic_end(_atomic);
    23d4:	80 2f       	mov	r24, r16
    23d6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();
    23da:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LITE_SET_CC_CS_PIN>
    if (postTask(hplcc2420fifom_signalRXdone, 5) == FAIL)
    23de:	84 e7       	ldi	r24, 0x74	; 116
    23e0:	92 e1       	ldi	r25, 0x12	; 18
    23e2:	65 e0       	ldi	r22, 0x05	; 5
    23e4:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    23e8:	88 23       	and	r24, r24
    23ea:	79 f0       	breq	.+30     	; 0x240a <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xd8>
    23ec:	81 e0       	ldi	r24, 0x01	; 1
            _atomic_end(_atomic);
        }
        return FAIL;
    }
    return SUCCESS;
}
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	0f 91       	pop	r16
    23f6:	08 95       	ret
            else
            {
                hplcc2420fifom_rxbufBusy = TRUE;
            }
        }
        _atomic_end(_atomic);
    23f8:	89 2f       	mov	r24, r25
    23fa:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
            _atomic_end(_atomic);
        }
        return FAIL;
    }
    return SUCCESS;
}
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	08 95       	ret
    }
    LITE_SET_CC_CS_PIN();
    if (postTask(hplcc2420fifom_signalRXdone, 5) == FAIL)
    {
        {
            _atomic_t _atomic = _atomic_start();
    240a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

            hplcc2420fifom_rxbufBusy = FALSE;
    240e:	10 92 04 05 	sts	0x0504, r1
            _atomic_end(_atomic);
    2412:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    2416:	80 e0       	ldi	r24, 0x00	; 0
        }
        return FAIL;
    }
    return SUCCESS;
}
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	08 95       	ret

00002422 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO(uint8_t len, uint8_t *
                                                         msg)
{
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	18 2f       	mov	r17, r24
    242c:	eb 01       	movw	r28, r22
    uint8_t i = 0;
    uint8_t status;
    bool returnFail = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    242e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2432:	98 2f       	mov	r25, r24

        {
            if (hplcc2420fifom_txbufBusy)
    2434:	80 91 01 05 	lds	r24, 0x0501
    2438:	88 23       	and	r24, r24
    243a:	09 f0       	breq	.+2      	; 0x243e <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x1c>
    243c:	48 c0       	rjmp	.+144    	; 0x24ce <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0xac>
            {
                returnFail = TRUE;
            }
            else
            {
                hplcc2420fifom_txbufBusy = TRUE;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	80 93 01 05 	sts	0x0501, r24
            }
        }
        _atomic_end(_atomic);
    2444:	89 2f       	mov	r24, r25
    2446:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    if (returnFail)
    {
        return FAIL;
    }
    {
        _atomic_t _atomic = _atomic_start();
    244a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    244e:	08 2f       	mov	r16, r24

        {
            hplcc2420fifom_bSpiAvail = FALSE;
    2450:	10 92 fe 04 	sts	0x04FE, r1
            hplcc2420fifom_txlength = len;
    2454:	10 93 fd 04 	sts	0x04FD, r17
            hplcc2420fifom_txbuf = msg;
    2458:	d0 93 03 05 	sts	0x0503, r29
    245c:	c0 93 02 05 	sts	0x0502, r28
            LITE_CLR_CC_CS_PIN();
    2460:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(CC2420_TXFIFO, SPDR);
    2464:	8e e3       	ldi	r24, 0x3E	; 62
    2466:	8f b9       	out	0x0f, r24	; 15
            while (!(inp(SPSR) & 0x80))
    2468:	77 9b       	sbis	0x0e, 7	; 14
    246a:	fe cf       	rjmp	.-4      	; 0x2468 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x46>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    246c:	1f b1       	in	r17, 0x0f	; 15
            for (i = 0; i < hplcc2420fifom_txlength; i++)
    246e:	20 91 fd 04 	lds	r18, 0x04FD
    2472:	22 23       	and	r18, r18
    2474:	81 f0       	breq	.+32     	; 0x2496 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x74>
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	e0 91 02 05 	lds	r30, 0x0502
    247c:	f0 91 03 05 	lds	r31, 0x0503
            {
                outp(*hplcc2420fifom_txbuf, SPDR);
    2480:	81 91       	ld	r24, Z+
    2482:	8f b9       	out	0x0f, r24	; 15
                hplcc2420fifom_txbuf++;
    2484:	f0 93 03 05 	sts	0x0503, r31
    2488:	e0 93 02 05 	sts	0x0502, r30
                while (!(inp(SPSR) & 0x80))
    248c:	77 9b       	sbis	0x0e, 7	; 14
    248e:	fe cf       	rjmp	.-4      	; 0x248c <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x6a>
            while (!(inp(SPSR) & 0x80))
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
            for (i = 0; i < hplcc2420fifom_txlength; i++)
    2490:	9f 5f       	subi	r25, 0xFF	; 255
    2492:	92 17       	cp	r25, r18
    2494:	a8 f3       	brcs	.-22     	; 0x2480 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x5e>
                while (!(inp(SPSR) & 0x80))
                {
                }
                ;               //wait for spi xfr to complete
            }
            hplcc2420fifom_bSpiAvail = TRUE;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	80 93 fe 04 	sts	0x04FE, r24
        }
        _atomic_end(_atomic);
    249c:	80 2f       	mov	r24, r16
    249e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();
    24a2:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LITE_SET_CC_CS_PIN>
    if (postTask(hplcc2420fifom_signalTXdone, 5) == FAIL)
    24a6:	8e e8       	ldi	r24, 0x8E	; 142
    24a8:	92 e1       	ldi	r25, 0x12	; 18
    24aa:	65 e0       	ldi	r22, 0x05	; 5
    24ac:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    24b0:	88 23       	and	r24, r24
    24b2:	89 f4       	brne	.+34     	; 0x24d6 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0xb4>
    {
        {
            _atomic_t _atomic = _atomic_start();
    24b4:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

            hplcc2420fifom_txbufBusy = FALSE;
    24b8:	10 92 01 05 	sts	0x0501, r1
            _atomic_end(_atomic);
    24bc:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    24c0:	10 e0       	ldi	r17, 0x00	; 0
        }
        return FAIL;
    }
    return status;
}
    24c2:	81 2f       	mov	r24, r17
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	08 95       	ret
            else
            {
                hplcc2420fifom_txbufBusy = TRUE;
            }
        }
        _atomic_end(_atomic);
    24ce:	89 2f       	mov	r24, r25
    24d0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    24d4:	10 e0       	ldi	r17, 0x00	; 0
            _atomic_end(_atomic);
        }
        return FAIL;
    }
    return status;
}
    24d6:	81 2f       	mov	r24, r17
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	1f 91       	pop	r17
    24de:	0f 91       	pop	r16
    24e0:	08 95       	ret

000024e2 <hplcc2420fifom_HPLCC2420FIFO_RXFIFODone>:
                                                        uint8_t *
                                                        arg_0xa40c7f0)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_RXFIFODone(arg_0xa40c690,
    24e2:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <cc2420radiom_HPLChipconFIFO_RXFIFODone>
                                                    arg_0xa40c7f0);
    return result;
}
    24e6:	08 95       	ret

000024e8 <hplcc2420fifom_signalRXdone>:

//-------------------------------------------------------------------------
inline void hplcc2420fifom_signalRXdone(void)
{
    24e8:	ff 92       	push	r15
    24ea:	0f 93       	push	r16
    24ec:	1f 93       	push	r17
    uint8_t _rxlen;
    uint8_t *_rxbuf;

    {
        _atomic_t _atomic = _atomic_start();
    24ee:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            _rxlen = hplcc2420fifom_rxlength;
    24f2:	f0 90 05 05 	lds	r15, 0x0505
            _rxbuf = hplcc2420fifom_rxbuf;
    24f6:	00 91 ff 04 	lds	r16, 0x04FF
    24fa:	10 91 00 05 	lds	r17, 0x0500
            hplcc2420fifom_rxbufBusy = FALSE;
    24fe:	10 92 04 05 	sts	0x0504, r1
        }
        _atomic_end(_atomic);
    2502:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
                                                        uint8_t *
                                                        arg_0xa40c7f0)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_RXFIFODone(arg_0xa40c690,
    2506:	8f 2d       	mov	r24, r15
    2508:	b8 01       	movw	r22, r16
    250a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <cc2420radiom_HPLChipconFIFO_RXFIFODone>
            hplcc2420fifom_rxbufBusy = FALSE;
        }
        _atomic_end(_atomic);
    }
    hplcc2420fifom_HPLCC2420FIFO_RXFIFODone(_rxlen, _rxbuf);
}
    250e:	1f 91       	pop	r17
    2510:	0f 91       	pop	r16
    2512:	ff 90       	pop	r15
    2514:	08 95       	ret

00002516 <hplcc2420fifom_HPLCC2420FIFO_TXFIFODone>:
                                                        uint8_t *
                                                        arg_0xa40ce80)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_TXFIFODone(arg_0xa40cd20,
    2516:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <cc2420radiom_HPLChipconFIFO_TXFIFODone>
                                                    arg_0xa40ce80);
    return result;
}
    251a:	08 95       	ret

0000251c <hplcc2420fifom_signalTXdone>:

//-------------------------------------------------------------------------
inline void hplcc2420fifom_signalTXdone(void)
{
    251c:	ff 92       	push	r15
    251e:	0f 93       	push	r16
    2520:	1f 93       	push	r17
    uint8_t _txlen;
    uint8_t *_txbuf;

    {
        _atomic_t _atomic = _atomic_start();
    2522:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            _txlen = hplcc2420fifom_txlength;
    2526:	f0 90 fd 04 	lds	r15, 0x04FD
            _txbuf = hplcc2420fifom_txbuf;
    252a:	00 91 02 05 	lds	r16, 0x0502
    252e:	10 91 03 05 	lds	r17, 0x0503
            hplcc2420fifom_txbufBusy = FALSE;
    2532:	10 92 01 05 	sts	0x0501, r1
        }
        _atomic_end(_atomic);
    2536:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
                                                        uint8_t *
                                                        arg_0xa40ce80)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_TXFIFODone(arg_0xa40cd20,
    253a:	8f 2d       	mov	r24, r15
    253c:	b8 01       	movw	r22, r16
    253e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <cc2420radiom_HPLChipconFIFO_TXFIFODone>
            hplcc2420fifom_txbufBusy = FALSE;
        }
        _atomic_end(_atomic);
    }
    hplcc2420fifom_HPLCC2420FIFO_TXFIFODone(_txlen, _txbuf);
}
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	ff 90       	pop	r15
    2548:	08 95       	ret

0000254a <hplcc2420interruptm_FIFOP_disable>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_disable(void)
{
    *(volatile unsigned char *)(unsigned int)&*(volatile unsigned char *)(0x39
    254a:	89 b7       	in	r24, 0x39	; 57
    254c:	8f 7b       	andi	r24, 0xBF	; 191
    254e:	89 bf       	out	0x39, r24	; 57
                                                                          +
                                                                          0x20)
        &= ~(1 << 6);
    return SUCCESS;
}
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	08 95       	ret

00002554 <hplcc2420interruptm_FIFO_default_fired>:

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFO_default_fired(void)
{
    return FAIL;
}
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	08 95       	ret

00002558 <hplcc2420interruptm_FIFO_fired>:
{
    unsigned char result;

    result = hplcc2420interruptm_FIFO_default_fired();
    return result;
}
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	08 95       	ret

0000255c <hplcc2420interruptm_SFDCapture_isOverflowPending>:
//-------------------------------------------------------------------------
inline bool hplcc2420interruptm_SFDCapture_isOverflowPending(void)
{
    unsigned char result;

    result = HPLTimer1M_CaptureT1_isOverflowPending();
    255c:	0e 94 de 14 	call	0x29bc	; 0x29bc <HPLTimer1M_CaptureT1_isOverflowPending>
    return result;
}
    2560:	08 95       	ret

00002562 <hplcc2420interruptm_SFD_captured>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_captured(uint16_t arg_0xa41e788)
{
    unsigned char result;

    result = cc2420radiom_SFD_captured(arg_0xa41e788);
    2562:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <cc2420radiom_SFD_captured>
    return result;
}
    2566:	08 95       	ret

00002568 <hplcc2420interruptm_SFDCapture_disableEvents>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    2568:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <HPLTimer1M_CaptureT1_disableEvents>
}
    256c:	08 95       	ret

0000256e <hplcc2420interruptm_SFD_disable>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    256e:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <HPLTimer1M_CaptureT1_disableEvents>
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_disable(void)
{
    hplcc2420interruptm_SFDCapture_disableEvents();
    return SUCCESS;
}
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	08 95       	ret

00002576 <hplcc2420interruptm_SFDCapture_setEdge>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_setEdge(uint8_t arg_0xa4c5e80)
{
    HPLTimer1M_CaptureT1_setEdge(arg_0xa4c5e80);
    2576:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <HPLTimer1M_CaptureT1_setEdge>
}
    257a:	08 95       	ret

0000257c <hplcc2420interruptm_SFDCapture_clearOverflow>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_clearOverflow(void)
{
    HPLTimer1M_CaptureT1_clearOverflow();
    257c:	0e 94 cf 14 	call	0x299e	; 0x299e <HPLTimer1M_CaptureT1_clearOverflow>
}
    2580:	08 95       	ret

00002582 <hplcc2420interruptm_SFDCapture_captured>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_captured(uint16_t arg_0xa41e788)
{
    unsigned char result;

    result = cc2420radiom_SFD_captured(arg_0xa41e788);
    2582:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <cc2420radiom_SFD_captured>
void hplcc2420interruptm_SFDCapture_captured(uint16_t time)
{
    result_t val = SUCCESS;

    val = hplcc2420interruptm_SFD_captured(time);
    if (val == FAIL)
    2586:	88 23       	and	r24, r24
    2588:	29 f0       	breq	.+10     	; 0x2594 <hplcc2420interruptm_SFDCapture_captured+0x12>
//-------------------------------------------------------------------------
inline bool hplcc2420interruptm_SFDCapture_isOverflowPending(void)
{
    unsigned char result;

    result = HPLTimer1M_CaptureT1_isOverflowPending();
    258a:	0e 94 de 14 	call	0x29bc	; 0x29bc <HPLTimer1M_CaptureT1_isOverflowPending>
    {
        hplcc2420interruptm_SFDCapture_disableEvents();
    }
    else
    {
        if (hplcc2420interruptm_SFDCapture_isOverflowPending())
    258e:	88 23       	and	r24, r24
    2590:	21 f4       	brne	.+8      	; 0x259a <hplcc2420interruptm_SFDCapture_captured+0x18>
    2592:	08 95       	ret
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    2594:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <HPLTimer1M_CaptureT1_disableEvents>
    2598:	08 95       	ret
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_clearOverflow(void)
{
    HPLTimer1M_CaptureT1_clearOverflow();
    259a:	0e 94 cf 14 	call	0x299e	; 0x299e <HPLTimer1M_CaptureT1_clearOverflow>
    259e:	08 95       	ret

000025a0 <hplcc2420interruptm_SFDCapture_enableEvents>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_enableEvents(void)
{
    HPLTimer1M_CaptureT1_enableEvents();
    25a0:	0e 94 c5 14 	call	0x298a	; 0x298a <HPLTimer1M_CaptureT1_enableEvents>
}
    25a4:	08 95       	ret

000025a6 <hplcc2420interruptm_SFD_enableCapture>:
    HPLTimer1M_CaptureT1_disableEvents();
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_enableCapture(bool low_to_high)
{
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	18 2f       	mov	r17, r24
    {
        _atomic_t _atomic = _atomic_start();
    25ac:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    25b0:	08 2f       	mov	r16, r24
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    25b2:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <HPLTimer1M_CaptureT1_disableEvents>
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_setEdge(uint8_t arg_0xa4c5e80)
{
    HPLTimer1M_CaptureT1_setEdge(arg_0xa4c5e80);
    25b6:	81 2f       	mov	r24, r17
    25b8:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <HPLTimer1M_CaptureT1_setEdge>
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_clearOverflow(void)
{
    HPLTimer1M_CaptureT1_clearOverflow();
    25bc:	0e 94 cf 14 	call	0x299e	; 0x299e <HPLTimer1M_CaptureT1_clearOverflow>
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_enableEvents(void)
{
    HPLTimer1M_CaptureT1_enableEvents();
    25c0:	0e 94 c5 14 	call	0x298a	; 0x298a <HPLTimer1M_CaptureT1_enableEvents>
            hplcc2420interruptm_SFDCapture_disableEvents();
            hplcc2420interruptm_SFDCapture_setEdge(low_to_high);
            hplcc2420interruptm_SFDCapture_clearOverflow();
            hplcc2420interruptm_SFDCapture_enableEvents();
        }
        _atomic_end(_atomic);
    25c4:	80 2f       	mov	r24, r16
    25c6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return SUCCESS;
}
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	08 95       	ret

000025d2 <hplcc2420interruptm_CCATimer_start>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCATimer_start(char arg_0xa315138,
                                                   uint32_t arg_0xa315290)
{
    25d2:	98 2f       	mov	r25, r24
    25d4:	9a 01       	movw	r18, r20
    25d6:	ab 01       	movw	r20, r22
    unsigned char result;

    result = GenericTimerStart(11, arg_0xa315138, arg_0xa315290);
    25d8:	8b e0       	ldi	r24, 0x0B	; 11
    25da:	69 2f       	mov	r22, r25
    25dc:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <GenericTimerStart>
    return result;
}
    25e0:	08 95       	ret

000025e2 <hplcc2420interruptm_FIFOTimer_start>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOTimer_start(char arg_0xa315138,
                                                    uint32_t arg_0xa315290)
{
    25e2:	98 2f       	mov	r25, r24
    25e4:	9a 01       	movw	r18, r20
    25e6:	ab 01       	movw	r20, r22
    unsigned char result;

    result = GenericTimerStart(10, arg_0xa315138, arg_0xa315290);
    25e8:	8a e0       	ldi	r24, 0x0A	; 10
    25ea:	69 2f       	mov	r22, r25
    25ec:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <GenericTimerStart>
    return result;
}
    25f0:	08 95       	ret

000025f2 <hplcc2420interruptm_CCA_startWait>:
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_startWait(bool low_to_high)
{
    25f2:	1f 93       	push	r17
    25f4:	18 2f       	mov	r17, r24
    {
        _atomic_t _atomic = _atomic_start();
    25f6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        hplcc2420interruptm_CCAWaitForState = low_to_high;
    25fa:	10 93 0f 05 	sts	0x050F, r17
        _atomic_end(_atomic);
    25fe:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    hplcc2420interruptm_CCALastState = LITE_READ_CC_CCA_PIN();
    2602:	0e 94 ca 05 	call	0xb94	; 0xb94 <LITE_READ_CC_CCA_PIN>
    2606:	80 93 0e 05 	sts	0x050E, r24
inline result_t hplcc2420interruptm_CCATimer_start(char arg_0xa315138,
                                                   uint32_t arg_0xa315290)
{
    unsigned char result;

    result = GenericTimerStart(11, arg_0xa315138, arg_0xa315290);
    260a:	8b e0       	ldi	r24, 0x0B	; 11
    260c:	61 e0       	ldi	r22, 0x01	; 1
    260e:	21 e0       	ldi	r18, 0x01	; 1
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <GenericTimerStart>
        hplcc2420interruptm_CCAWaitForState = low_to_high;
        _atomic_end(_atomic);
    }
    hplcc2420interruptm_CCALastState = LITE_READ_CC_CCA_PIN();
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
}
    261a:	1f 91       	pop	r17
    261c:	08 95       	ret

0000261e <hplcc2420interruptm_CCA_fired>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_fired(void)
{
    unsigned char result;

    result = cc2420controlm_CCA_fired();
    261e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <cc2420controlm_CCA_fired>
    return result;
}
    2622:	08 95       	ret

00002624 <hplcc2420interruptm_CCATimer_fired>:

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCATimer_fired(void)
{
    2624:	1f 93       	push	r17
    uint8_t CCAState;
    result_t val = SUCCESS;

    CCAState = LITE_READ_CC_CCA_PIN();
    2626:	0e 94 ca 05 	call	0xb94	; 0xb94 <LITE_READ_CC_CCA_PIN>
    262a:	18 2f       	mov	r17, r24
    if (hplcc2420interruptm_CCALastState != hplcc2420interruptm_CCAWaitForState
    262c:	90 91 0f 05 	lds	r25, 0x050F
    2630:	80 91 0e 05 	lds	r24, 0x050E
    2634:	89 17       	cp	r24, r25
    2636:	11 f0       	breq	.+4      	; 0x263c <hplcc2420interruptm_CCATimer_fired+0x18>
    2638:	19 17       	cp	r17, r25
    263a:	61 f0       	breq	.+24     	; 0x2654 <hplcc2420interruptm_CCATimer_fired+0x30>
        if (val == FAIL)
        {
            return SUCCESS;
        }
    }
    hplcc2420interruptm_CCALastState = CCAState;
    263c:	10 93 0e 05 	sts	0x050E, r17
inline result_t hplcc2420interruptm_CCATimer_start(char arg_0xa315138,
                                                   uint32_t arg_0xa315290)
{
    unsigned char result;

    result = GenericTimerStart(11, arg_0xa315138, arg_0xa315290);
    2640:	8b e0       	ldi	r24, 0x0B	; 11
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	21 e0       	ldi	r18, 0x01	; 1
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <GenericTimerStart>
            return SUCCESS;
        }
    }
    hplcc2420interruptm_CCALastState = CCAState;
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
}
    2650:	1f 91       	pop	r17
    2652:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_fired(void)
{
    unsigned char result;

    result = cc2420controlm_CCA_fired();
    2654:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <cc2420controlm_CCA_fired>
    CCAState = LITE_READ_CC_CCA_PIN();
    if (hplcc2420interruptm_CCALastState != hplcc2420interruptm_CCAWaitForState
        && CCAState == hplcc2420interruptm_CCAWaitForState)
    {
        val = hplcc2420interruptm_CCA_fired();
        if (val == FAIL)
    2658:	88 23       	and	r24, r24
    265a:	81 f7       	brne	.-32     	; 0x263c <hplcc2420interruptm_CCATimer_fired+0x18>
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	f8 cf       	rjmp	.-16     	; 0x2650 <hplcc2420interruptm_CCATimer_fired+0x2c>

00002660 <hplcc2420interruptm_FIFOTimer_fired>:
inline result_t hplcc2420interruptm_FIFOTimer_fired(void)
{
    uint8_t FIFOState;
    result_t val = SUCCESS;

    FIFOState = LITE_READ_CC_FIFO_PIN();
    2660:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    2664:	28 2f       	mov	r18, r24
    if (hplcc2420interruptm_FIFOLastState !=
    2666:	90 91 06 05 	lds	r25, 0x0506
    266a:	80 91 0d 05 	lds	r24, 0x050D
    266e:	89 17       	cp	r24, r25
    2670:	11 f0       	breq	.+4      	; 0x2676 <hplcc2420interruptm_FIFOTimer_fired+0x16>
    2672:	29 17       	cp	r18, r25
    2674:	59 f0       	breq	.+22     	; 0x268c <hplcc2420interruptm_FIFOTimer_fired+0x2c>
        if (val == FAIL)
        {
            return SUCCESS;
        }
    }
    hplcc2420interruptm_FIFOLastState = FIFOState;
    2676:	20 93 0d 05 	sts	0x050D, r18
inline result_t hplcc2420interruptm_FIFOTimer_start(char arg_0xa315138,
                                                    uint32_t arg_0xa315290)
{
    unsigned char result;

    result = GenericTimerStart(10, arg_0xa315138, arg_0xa315290);
    267a:	8a e0       	ldi	r24, 0x0A	; 10
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	21 e0       	ldi	r18, 0x01	; 1
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <GenericTimerStart>
            return SUCCESS;
        }
    }
    hplcc2420interruptm_FIFOLastState = FIFOState;
    return hplcc2420interruptm_FIFOTimer_start(TIMER_ONE_SHOT, 1);
}
    268a:	08 95       	ret
{
    uint8_t FIFOState;
    result_t val = SUCCESS;

    FIFOState = LITE_READ_CC_FIFO_PIN();
    if (hplcc2420interruptm_FIFOLastState !=
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	08 95       	ret

00002690 <hplcc2420interruptm_FIFOP_fired>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_fired(void)
{
    unsigned char result;

    result = cc2420radiom_FIFOP_fired();
    2690:	0e 94 18 10 	call	0x2030	; 0x2030 <cc2420radiom_FIFOP_fired>
    return result;
}
    2694:	08 95       	ret

00002696 <hplcc2420interruptm_FIFOP_startWait>:
     
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_startWait(bool low_to_high)
{
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	18 2f       	mov	r17, r24
    {
        _atomic_t _atomic = _atomic_start();
    269c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    26a0:	08 2f       	mov	r16, r24

        {
            CC2420_FIFOP_INT_MODE(low_to_high);
    26a2:	81 2f       	mov	r24, r17
    26a4:	0e 94 5e 05 	call	0xabc	; 0xabc <CC2420_FIFOP_INT_MODE>
            *(volatile unsigned char *)(unsigned int)&*(volatile unsigned
    26a8:	89 b7       	in	r24, 0x39	; 57
    26aa:	80 64       	ori	r24, 0x40	; 64
    26ac:	89 bf       	out	0x39, r24	; 57
                                                        char *)(0x39 + 0x20) |=
                1 << 6;
        }
        _atomic_end(_atomic);
    26ae:	80 2f       	mov	r24, r16
    26b0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return SUCCESS;
}
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	1f 91       	pop	r17
    26b8:	0f 91       	pop	r16
    26ba:	08 95       	ret

000026bc <__vector_7>:
   volatile uint16_t ahcounter; 
   volatile uint32_t alcounter2; 
   volatile uint16_t ahcounter2; 

SIGNAL(INT6_vect)
{
    26bc:	1f 92       	push	r1
    26be:	0f 92       	push	r0
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	0f 92       	push	r0
    26c4:	0b b6       	in	r0, 0x3b	; 59
    26c6:	0f 92       	push	r0
    26c8:	11 24       	eor	r1, r1
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	2f 93       	push	r18
    26d0:	3f 93       	push	r19
    26d2:	4f 93       	push	r20
    26d4:	5f 93       	push	r21
    26d6:	6f 93       	push	r22
    26d8:	7f 93       	push	r23
    26da:	8f 93       	push	r24
    26dc:	9f 93       	push	r25
    26de:	af 93       	push	r26
    26e0:	bf 93       	push	r27
    26e2:	ef 93       	push	r30
    26e4:	ff 93       	push	r31
   }

   #endif
   
    isthreadtrue = 0;
    _atomic = _atomic_start();
    26e6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    26ea:	18 2f       	mov	r17, r24
    if (is_thread())
    26ec:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <is_thread>
    26f0:	88 23       	and	r24, r24
    26f2:	b9 f5       	brne	.+110    	; 0x2762 <__vector_7+0xa6>
    26f4:	00 e0       	ldi	r16, 0x00	; 0
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    26f6:	81 2f       	mov	r24, r17
    26f8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_fired(void)
{
    unsigned char result;

    result = cc2420radiom_FIFOP_fired();
    26fc:	0e 94 18 10 	call	0x2030	; 0x2030 <cc2420radiom_FIFOP_fired>
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    val = hplcc2420interruptm_FIFOP_fired();
    if (val == FAIL)
    2700:	88 23       	and	r24, r24
    2702:	31 f4       	brne	.+12     	; 0x2710 <__vector_7+0x54>
    {
        *(volatile unsigned char *)(unsigned int)&*(volatile unsigned char *)
    2704:	89 b7       	in	r24, 0x39	; 57
    2706:	8f 7b       	andi	r24, 0xBF	; 191
    2708:	89 bf       	out	0x39, r24	; 57
            (0x39 + 0x20) &= ~(1 << 6);
        *(volatile unsigned char *)(unsigned int)&*(volatile unsigned char *)
    270a:	88 b7       	in	r24, 0x38	; 56
    270c:	80 64       	ori	r24, 0x40	; 64
    270e:	88 bf       	out	0x38, r24	; 56
            (0x38 + 0x20) |= 1 << 6;
    }
    _atomic = _atomic_start();
    2710:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2714:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
    2716:	01 30       	cpi	r16, 0x01	; 1
    2718:	61 f4       	brne	.+24     	; 0x2732 <__vector_7+0x76>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    271a:	8d b7       	in	r24, 0x3d	; 61
    271c:	9e b7       	in	r25, 0x3e	; 62
    271e:	90 93 5f 05 	sts	0x055F, r25
    2722:	80 93 5e 05 	sts	0x055E, r24
    2726:	80 91 b1 05 	lds	r24, 0x05B1
    272a:	90 91 b2 05 	lds	r25, 0x05B2
    272e:	9e bf       	out	0x3e, r25	; 62
    2730:	8d bf       	out	0x3d, r24	; 61
        //thread_yield();   
    }
    _atomic_end(_atomic);
    2732:	82 2f       	mov	r24, r18
    2734:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
       __asm__ __volatile__ ("cli" ::);
       }

  #endif       
     
}
    2738:	ff 91       	pop	r31
    273a:	ef 91       	pop	r30
    273c:	bf 91       	pop	r27
    273e:	af 91       	pop	r26
    2740:	9f 91       	pop	r25
    2742:	8f 91       	pop	r24
    2744:	7f 91       	pop	r23
    2746:	6f 91       	pop	r22
    2748:	5f 91       	pop	r21
    274a:	4f 91       	pop	r20
    274c:	3f 91       	pop	r19
    274e:	2f 91       	pop	r18
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	0f 90       	pop	r0
    2756:	0b be       	out	0x3b, r0	; 59
    2758:	0f 90       	pop	r0
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	0f 90       	pop	r0
    275e:	1f 90       	pop	r1
    2760:	18 95       	reti
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    2762:	8d b7       	in	r24, 0x3d	; 61
    2764:	9e b7       	in	r25, 0x3e	; 62
    2766:	90 93 b2 05 	sts	0x05B2, r25
    276a:	80 93 b1 05 	sts	0x05B1, r24
    276e:	80 91 5e 05 	lds	r24, 0x055E
    2772:	90 91 5f 05 	lds	r25, 0x055F
    2776:	9e bf       	out	0x3e, r25	; 62
    2778:	8d bf       	out	0x3d, r24	; 61
    277a:	01 e0       	ldi	r16, 0x01	; 1
    277c:	bc cf       	rjmp	.-136    	; 0x26f6 <__vector_7+0x3a>

0000277e <HPLCC2420M_HPLCC2420_read>:
    return status;
}

//-------------------------------------------------------------------------
inline uint16_t HPLCC2420M_HPLCC2420_read(uint8_t addr)
{
    277e:	ef 92       	push	r14
    2780:	ff 92       	push	r15
    2782:	0f 93       	push	r16
    2784:	1f 93       	push	r17
    2786:	18 2f       	mov	r17, r24
    uint16_t data = 0;
    uint8_t status;

    {
        _atomic_t _atomic = _atomic_start();
    2788:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    278c:	f8 2e       	mov	r15, r24

        {
            HPLCC2420M_bSpiAvail = FALSE;
    278e:	10 92 19 05 	sts	0x0519, r1
            LITE_CLR_CC_CS_PIN();       //enable chip select
    2792:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(addr | 0x40, SPDR);
    2796:	10 64       	ori	r17, 0x40	; 64
    2798:	1f b9       	out	0x0f, r17	; 15
            while (!(inp(SPSR) & 0x80))
    279a:	77 9b       	sbis	0x0e, 7	; 14
    279c:	fe cf       	rjmp	.-4      	; 0x279a <HPLCC2420M_HPLCC2420_read+0x1c>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    279e:	8f b1       	in	r24, 0x0f	; 15
            outp(0, SPDR);
    27a0:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    27a2:	77 9b       	sbis	0x0e, 7	; 14
    27a4:	fe cf       	rjmp	.-4      	; 0x27a2 <HPLCC2420M_HPLCC2420_read+0x24>
            {
            }
            ;                   //wait for spi xfr to complete
            data = inp(SPDR);
    27a6:	8f b1       	in	r24, 0x0f	; 15
            outp(0, SPDR);
    27a8:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    27aa:	77 9b       	sbis	0x0e, 7	; 14
    27ac:	fe cf       	rjmp	.-4      	; 0x27aa <HPLCC2420M_HPLCC2420_read+0x2c>
            {
            }
            ;                   //wait for spi xfr to complete
            data = (data << 8) | inp(SPDR);
    27ae:	18 2f       	mov	r17, r24
    27b0:	00 e0       	ldi	r16, 0x00	; 0
    27b2:	ef b0       	in	r14, 0x0f	; 15
            LITE_SET_CC_CS_PIN();       //disable chip select
    27b4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LITE_SET_CC_CS_PIN>
            HPLCC2420M_bSpiAvail = TRUE;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	80 93 19 05 	sts	0x0519, r24
        }
        _atomic_end(_atomic);
    27be:	8f 2d       	mov	r24, r15
    27c0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    27c4:	ff 24       	eor	r15, r15
    27c6:	e0 2a       	or	r14, r16
    27c8:	f1 2a       	or	r15, r17
    }
    return data;
}
    27ca:	c7 01       	movw	r24, r14
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	ff 90       	pop	r15
    27d2:	ef 90       	pop	r14
    27d4:	08 95       	ret

000027d6 <HPLCC2420M_HPLCC2420_cmd>:
    return status;
}

//-------------------------------------------------------------------------
inline uint8_t HPLCC2420M_HPLCC2420_cmd(uint8_t addr)
{
    27d6:	0f 93       	push	r16
    27d8:	1f 93       	push	r17
    27da:	18 2f       	mov	r17, r24
    uint8_t status;

    {
        _atomic_t _atomic = _atomic_start();
    27dc:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    27e0:	08 2f       	mov	r16, r24

        {
            LITE_CLR_CC_CS_PIN();
    27e2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(addr, SPDR);
    27e6:	1f b9       	out	0x0f, r17	; 15
            while (!(inp(SPSR) & 0x80))
    27e8:	77 9b       	sbis	0x0e, 7	; 14
    27ea:	fe cf       	rjmp	.-4      	; 0x27e8 <HPLCC2420M_HPLCC2420_cmd+0x12>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    27ec:	1f b1       	in	r17, 0x0f	; 15
        }
        _atomic_end(_atomic);
    27ee:	80 2f       	mov	r24, r16
    27f0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();
    27f4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LITE_SET_CC_CS_PIN>
    return status;
}
    27f8:	81 2f       	mov	r24, r17
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	08 95       	ret

00002800 <HPLCC2420M_HPLCC2420_write>:
    return postTask(HPLCC2420M_signalRAMWr, 5);
}

//-------------------------------------------------------------------------
inline result_t HPLCC2420M_HPLCC2420_write(uint8_t addr, uint16_t data)
{
    2800:	df 92       	push	r13
    2802:	ef 92       	push	r14
    2804:	ff 92       	push	r15
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	18 2f       	mov	r17, r24
    280c:	d6 2e       	mov	r13, r22
    280e:	f7 2e       	mov	r15, r23
    uint8_t status;

    {
        _atomic_t _atomic = _atomic_start();
    2810:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2814:	e8 2e       	mov	r14, r24

        {
            HPLCC2420M_bSpiAvail = FALSE;
    2816:	10 92 19 05 	sts	0x0519, r1
            LITE_CLR_CC_CS_PIN();
    281a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(addr, SPDR);
    281e:	1f b9       	out	0x0f, r17	; 15
            while (!(inp(SPSR) & 0x80))
    2820:	77 9b       	sbis	0x0e, 7	; 14
    2822:	fe cf       	rjmp	.-4      	; 0x2820 <HPLCC2420M_HPLCC2420_write+0x20>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    2824:	0f b1       	in	r16, 0x0f	; 15
            if (addr > CC2420_SAES)
    2826:	1f 30       	cpi	r17, 0x0F	; 15
    2828:	30 f0       	brcs	.+12     	; 0x2836 <HPLCC2420M_HPLCC2420_write+0x36>
            {
                outp(data >> 8, SPDR);
    282a:	ff b8       	out	0x0f, r15	; 15
                while (!(inp(SPSR) & 0x80))
    282c:	77 9b       	sbis	0x0e, 7	; 14
    282e:	fe cf       	rjmp	.-4      	; 0x282c <HPLCC2420M_HPLCC2420_write+0x2c>
                {
                }
                ;               //wait for spi xfr to complete
                outp(data & 0xff, SPDR);
    2830:	df b8       	out	0x0f, r13	; 15
                while (!(inp(SPSR) & 0x80))
    2832:	77 9b       	sbis	0x0e, 7	; 14
    2834:	fe cf       	rjmp	.-4      	; 0x2832 <HPLCC2420M_HPLCC2420_write+0x32>
                {
                }
                ;               //wait for spi xfr to complete
            }
            HPLCC2420M_bSpiAvail = TRUE;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	80 93 19 05 	sts	0x0519, r24
        }
        _atomic_end(_atomic);
    283c:	8e 2d       	mov	r24, r14
    283e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();       //disable chip select
    2842:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LITE_SET_CC_CS_PIN>
    return status;
}
    2846:	80 2f       	mov	r24, r16
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	ff 90       	pop	r15
    284e:	ef 90       	pop	r14
    2850:	df 90       	pop	r13
    2852:	08 95       	ret

00002854 <HPLCC2420M_HPLCC2420RAM_write>:
}

//-------------------------------------------------------------------------
inline result_t HPLCC2420M_HPLCC2420RAM_write(uint16_t addr, uint8_t length,
                                              uint8_t * buffer)
{
    2854:	ef 92       	push	r14
    2856:	ff 92       	push	r15
    2858:	0f 93       	push	r16
    285a:	1f 93       	push	r17
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	ec 01       	movw	r28, r24
    2862:	f6 2e       	mov	r15, r22
    2864:	8a 01       	movw	r16, r20
    uint8_t i = 0;
    uint8_t status;

    if (!HPLCC2420M_bSpiAvail)
    2866:	80 91 19 05 	lds	r24, 0x0519
    286a:	88 23       	and	r24, r24
    286c:	39 f4       	brne	.+14     	; 0x287c <HPLCC2420M_HPLCC2420RAM_write+0x28>
        }
        _atomic_end(_atomic);
    }
    HPLCC2420M_bSpiAvail = TRUE;
    return postTask(HPLCC2420M_signalRAMWr, 5);
}
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	1f 91       	pop	r17
    2874:	0f 91       	pop	r16
    2876:	ff 90       	pop	r15
    2878:	ef 90       	pop	r14
    287a:	08 95       	ret
    if (!HPLCC2420M_bSpiAvail)
    {
        return FALSE;
    }
    {
        _atomic_t _atomic = _atomic_start();
    287c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2880:	e8 2e       	mov	r14, r24

        {
            HPLCC2420M_bSpiAvail = FALSE;
    2882:	10 92 19 05 	sts	0x0519, r1
            HPLCC2420M_ramaddr = addr;
    2886:	d0 93 1b 05 	sts	0x051B, r29
    288a:	c0 93 1a 05 	sts	0x051A, r28
            HPLCC2420M_ramlen = length;
    288e:	f0 92 16 05 	sts	0x0516, r15
            HPLCC2420M_rambuf = buffer;
    2892:	10 93 18 05 	sts	0x0518, r17
    2896:	00 93 17 05 	sts	0x0517, r16
            LITE_CLR_CC_CS_PIN();
    289a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(((HPLCC2420M_ramaddr & 0x7F) | 0x80), SPDR);
    289e:	20 91 1a 05 	lds	r18, 0x051A
    28a2:	30 91 1b 05 	lds	r19, 0x051B
    28a6:	82 2f       	mov	r24, r18
    28a8:	80 68       	ori	r24, 0x80	; 128
    28aa:	8f b9       	out	0x0f, r24	; 15
            //ls address      and set RAM/Reg flagbit
            while (!(inp(SPSR) & 0x80))
    28ac:	77 9b       	sbis	0x0e, 7	; 14
    28ae:	fe cf       	rjmp	.-4      	; 0x28ac <HPLCC2420M_HPLCC2420RAM_write+0x58>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    28b0:	8f b1       	in	r24, 0x0f	; 15
            outp(((HPLCC2420M_ramaddr >> 1) & 0xC0), SPDR);     //ms address
    28b2:	36 95       	lsr	r19
    28b4:	27 95       	ror	r18
    28b6:	82 2f       	mov	r24, r18
    28b8:	80 7c       	andi	r24, 0xC0	; 192
    28ba:	8f b9       	out	0x0f, r24	; 15
            while (!(inp(SPSR) & 0x80))
    28bc:	77 9b       	sbis	0x0e, 7	; 14
    28be:	fe cf       	rjmp	.-4      	; 0x28bc <HPLCC2420M_HPLCC2420RAM_write+0x68>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    28c0:	8f b1       	in	r24, 0x0f	; 15
            for (i = 0; i < HPLCC2420M_ramlen; i++)
    28c2:	50 91 16 05 	lds	r21, 0x0516
    28c6:	55 23       	and	r21, r21
    28c8:	81 f0       	breq	.+32     	; 0x28ea <HPLCC2420M_HPLCC2420RAM_write+0x96>
    28ca:	40 91 17 05 	lds	r20, 0x0517
    28ce:	84 2f       	mov	r24, r20
    28d0:	90 91 18 05 	lds	r25, 0x0518
    28d4:	9c 01       	movw	r18, r24
    28d6:	f9 01       	movw	r30, r18
            {
                //buffer write
                outp(HPLCC2420M_rambuf[i], SPDR);
    28d8:	80 81       	ld	r24, Z
    28da:	8f b9       	out	0x0f, r24	; 15
                //        call USARTControl.tx(rambuf[i]);
                while (!(inp(SPSR) & 0x80))
    28dc:	77 9b       	sbis	0x0e, 7	; 14
    28de:	fe cf       	rjmp	.-4      	; 0x28dc <HPLCC2420M_HPLCC2420RAM_write+0x88>
    28e0:	31 96       	adiw	r30, 0x01	; 1
            while (!(inp(SPSR) & 0x80))
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
            for (i = 0; i < HPLCC2420M_ramlen; i++)
    28e2:	8e 2f       	mov	r24, r30
    28e4:	84 1b       	sub	r24, r20
    28e6:	85 17       	cp	r24, r21
    28e8:	b8 f3       	brcs	.-18     	; 0x28d8 <HPLCC2420M_HPLCC2420RAM_write+0x84>
                {
                }
                ;               //wait for spi xfr to complete
            }
        }
        _atomic_end(_atomic);
    28ea:	8e 2d       	mov	r24, r14
    28ec:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    HPLCC2420M_bSpiAvail = TRUE;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	80 93 19 05 	sts	0x0519, r24
    return postTask(HPLCC2420M_signalRAMWr, 5);
    28f6:	8a e8       	ldi	r24, 0x8A	; 138
    28f8:	94 e1       	ldi	r25, 0x14	; 20
    28fa:	65 e0       	ldi	r22, 0x05	; 5
    28fc:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
}
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	ff 90       	pop	r15
    290a:	ef 90       	pop	r14
    290c:	08 95       	ret

0000290e <HPLCC2420M_HPLCC2420RAM_writeDone>:
                                                  uint8_t arg_0xa45b5a8,
                                                  uint8_t * arg_0xa45b708)
{
    unsigned char result;

    result = cc2420controlm_HPLChipconRAM_writeDone(arg_0xa45b460,
    290e:	0e 94 be 0a 	call	0x157c	; 0x157c <cc2420controlm_HPLChipconRAM_writeDone>
                                                    arg_0xa45b5a8,
                                                    arg_0xa45b708);
    return result;
}
    2912:	08 95       	ret

00002914 <HPLCC2420M_signalRAMWr>:
                                                  uint8_t arg_0xa45b5a8,
                                                  uint8_t * arg_0xa45b708)
{
    unsigned char result;

    result = cc2420controlm_HPLChipconRAM_writeDone(arg_0xa45b460,
    2914:	40 91 17 05 	lds	r20, 0x0517
    2918:	50 91 18 05 	lds	r21, 0x0518
    291c:	80 91 1a 05 	lds	r24, 0x051A
    2920:	90 91 1b 05 	lds	r25, 0x051B
    2924:	60 91 16 05 	lds	r22, 0x0516
    2928:	0e 94 be 0a 	call	0x157c	; 0x157c <cc2420controlm_HPLChipconRAM_writeDone>
//-------------------------------------------------------------------------
inline void HPLCC2420M_signalRAMWr(void)
{
    HPLCC2420M_HPLCC2420RAM_writeDone(HPLCC2420M_ramaddr, HPLCC2420M_ramlen,
                                      HPLCC2420M_rambuf);
}
    292c:	08 95       	ret

0000292e <HPLCC2420M_StdControl_init>:
uint8_t HPLCC2420M_ramlen;
uint16_t HPLCC2420M_ramaddr;

//set up basic settings
inline result_t HPLCC2420M_StdControl_init(void)
{
    292e:	1f 93       	push	r17
    HPLCC2420M_bSpiAvail = TRUE;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	80 93 19 05 	sts	0x0519, r24
    LITE_MAKE_MISO_INPUT();
    2936:	0e 94 b3 03 	call	0x766	; 0x766 <LITE_MAKE_MISO_INPUT>
    LITE_MAKE_MOSI_OUTPUT();
    293a:	0e 94 9d 03 	call	0x73a	; 0x73a <LITE_MAKE_MOSI_OUTPUT>
    LITE_MAKE_SPI_SCK_OUTPUT();
    293e:	0e 94 c1 03 	call	0x782	; 0x782 <LITE_MAKE_SPI_SCK_OUTPUT>
    LITE_MAKE_CC_RSTN_OUTPUT();
    2942:	0e 94 7e 05 	call	0xafc	; 0xafc <LITE_MAKE_CC_RSTN_OUTPUT>
    LITE_MAKE_CC_VREN_OUTPUT();
    2946:	0e 94 94 05 	call	0xb28	; 0xb28 <LITE_MAKE_CC_VREN_OUTPUT>
    LITE_MAKE_CC_CS_OUTPUT();
    294a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <LITE_MAKE_CC_CS_OUTPUT>
    LITE_MAKE_CC_FIFOP1_INPUT();
    294e:	0e 94 c4 05 	call	0xb88	; 0xb88 <LITE_MAKE_CC_FIFOP1_INPUT>
    LITE_MAKE_CC_CCA_INPUT();
    2952:	0e 94 db 05 	call	0xbb6	; 0xbb6 <LITE_MAKE_CC_CCA_INPUT>
    LITE_MAKE_CC_SFD_INPUT();
    2956:	0e 94 ef 05 	call	0xbde	; 0xbde <LITE_MAKE_CC_SFD_INPUT>
    LITE_MAKE_CC_FIFO_INPUT();
    295a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <LITE_MAKE_CC_FIFO_INPUT>
    {
        _atomic_t _atomic = _atomic_start();
    295e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2962:	18 2f       	mov	r17, r24

        {
            LITE_MAKE_SPI_SCK_OUTPUT();
    2964:	0e 94 c1 03 	call	0x782	; 0x782 <LITE_MAKE_SPI_SCK_OUTPUT>
            LITE_MAKE_MISO_INPUT();
    2968:	0e 94 b3 03 	call	0x766	; 0x766 <LITE_MAKE_MISO_INPUT>
            LITE_MAKE_MOSI_OUTPUT();
    296c:	0e 94 9d 03 	call	0x73a	; 0x73a <LITE_MAKE_MOSI_OUTPUT>
            sbi(SPSR, SPI2X);   // Double speed spi clock
    2970:	70 9a       	sbi	0x0e, 0	; 14
            sbi(SPCR, MSTR);    // Set master mode
    2972:	6c 9a       	sbi	0x0d, 4	; 13
            cbi(SPCR, CPOL);    // Set proper polarity...
    2974:	6b 98       	cbi	0x0d, 3	; 13
            cbi(SPCR, CPHA);    // ...and phase
    2976:	6a 98       	cbi	0x0d, 2	; 13
            cbi(SPCR, SPR1);    // set clock, fosc/2 (~3.6 Mhz)
    2978:	69 98       	cbi	0x0d, 1	; 13
            cbi(SPCR, SPR0);
    297a:	68 98       	cbi	0x0d, 0	; 13
            //    sbi(SPCR, SPIE);             // enable spi port interrupt
            sbi(SPCR, SPE);     // enable spie port
    297c:	6e 9a       	sbi	0x0d, 6	; 13
        }
        _atomic_end(_atomic);
    297e:	81 2f       	mov	r24, r17
    2980:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return SUCCESS;
}
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	1f 91       	pop	r17
    2988:	08 95       	ret

0000298a <HPLTimer1M_CaptureT1_enableEvents>:
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_enableEvents(void)
{
    cbi(TCCR1B, WGM13);
    298a:	8e b5       	in	r24, 0x2e	; 46
    298c:	8f 7e       	andi	r24, 0xEF	; 239
    298e:	8e bd       	out	0x2e, r24	; 46
    cbi(TCCR1B, WGM12);
    2990:	8e b5       	in	r24, 0x2e	; 46
    2992:	87 7f       	andi	r24, 0xF7	; 247
    2994:	8e bd       	out	0x2e, r24	; 46
    sbi(TIMSK, TICIE1);
    2996:	87 b7       	in	r24, 0x37	; 55
    2998:	80 62       	ori	r24, 0x20	; 32
    299a:	87 bf       	out	0x37, r24	; 55
}
    299c:	08 95       	ret

0000299e <HPLTimer1M_CaptureT1_clearOverflow>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_clearOverflow(void)
{
    sbi(TIFR, TOV1);
    299e:	86 b7       	in	r24, 0x36	; 54
    29a0:	84 60       	ori	r24, 0x04	; 4
    29a2:	86 bf       	out	0x36, r24	; 54
    return;
}
    29a4:	08 95       	ret

000029a6 <HPLTimer1M_CaptureT1_disableEvents>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_disableEvents(void)
{
    cbi(TIMSK, TICIE1);         //disable
    29a6:	87 b7       	in	r24, 0x37	; 55
    29a8:	8f 7d       	andi	r24, 0xDF	; 223
    29aa:	87 bf       	out	0x37, r24	; 55
    sbi(TIFR, ICF1);            //clear any pending interrupt}
    29ac:	86 b7       	in	r24, 0x36	; 54
    29ae:	80 62       	ori	r24, 0x20	; 32
    29b0:	86 bf       	out	0x36, r24	; 54
}
    29b2:	08 95       	ret

000029b4 <HPLTimer1M_Timer1_default_fire>:

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_Timer1_default_fire(void)
{
    return SUCCESS;
}
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	08 95       	ret

000029b8 <HPLTimer1M_Timer1_fire>:
{
    unsigned char result;

    result = HPLTimer1M_Timer1_default_fire();
    return result;
}
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	08 95       	ret

000029bc <HPLTimer1M_CaptureT1_isOverflowPending>:
}

//-------------------------------------------------------------------------
inline bool HPLTimer1M_CaptureT1_isOverflowPending(void)
{
    return (inp(TIFR) & TOV1);
    29bc:	86 b7       	in	r24, 0x36	; 54
}
    29be:	82 70       	andi	r24, 0x02	; 2
    29c0:	08 95       	ret

000029c2 <HPLTimer1M_CaptureT1_setEdge>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_setEdge(uint8_t LowToHigh)
{
    if (LowToHigh)
    29c2:	88 23       	and	r24, r24
    29c4:	39 f4       	brne	.+14     	; 0x29d4 <HPLTimer1M_CaptureT1_setEdge+0x12>
        sbi(TCCR1B, ICES1);
    }
    //rising edge
    else
    {
        cbi(TCCR1B, ICES1);
    29c6:	8e b5       	in	r24, 0x2e	; 46
    29c8:	8f 7b       	andi	r24, 0xBF	; 191
    29ca:	8e bd       	out	0x2e, r24	; 46
    }
    //falling edge
    //Set InputCapture pin PortD pin4 as INPUT
    //  LITE_MAKE_CC_SFD_INPUT();
    sbi(TIFR, ICF1);            //clear any pending interrupt
    29cc:	86 b7       	in	r24, 0x36	; 54
    29ce:	80 62       	ori	r24, 0x20	; 32
    29d0:	86 bf       	out	0x36, r24	; 54
    return;
}
    29d2:	08 95       	ret
//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_setEdge(uint8_t LowToHigh)
{
    if (LowToHigh)
    {
        sbi(TCCR1B, ICES1);
    29d4:	8e b5       	in	r24, 0x2e	; 46
    29d6:	80 64       	ori	r24, 0x40	; 64
    29d8:	8e bd       	out	0x2e, r24	; 46
        cbi(TCCR1B, ICES1);
    }
    //falling edge
    //Set InputCapture pin PortD pin4 as INPUT
    //  LITE_MAKE_CC_SFD_INPUT();
    sbi(TIFR, ICF1);            //clear any pending interrupt
    29da:	86 b7       	in	r24, 0x36	; 54
    29dc:	80 62       	ori	r24, 0x20	; 32
    29de:	86 bf       	out	0x36, r24	; 54
    return;
}
    29e0:	08 95       	ret

000029e2 <__vector_12>:

//void  __vector_12(void)  __attribute__((signal, used,   externally_visible)); 
//void __attribute((interrupt, used, externally_visible))  __vector_12(void)
ISR(TIMER1_COMPA_vect)
{
    29e2:	1f 92       	push	r1
    29e4:	0f 92       	push	r0
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	0f 92       	push	r0
    29ea:	0b b6       	in	r0, 0x3b	; 59
    29ec:	0f 92       	push	r0
    29ee:	11 24       	eor	r1, r1
    29f0:	0f 93       	push	r16
    29f2:	1f 93       	push	r17
    29f4:	2f 93       	push	r18
    29f6:	3f 93       	push	r19
    29f8:	4f 93       	push	r20
    29fa:	5f 93       	push	r21
    29fc:	6f 93       	push	r22
    29fe:	7f 93       	push	r23
    2a00:	8f 93       	push	r24
    2a02:	9f 93       	push	r25
    2a04:	af 93       	push	r26
    2a06:	bf 93       	push	r27
    2a08:	ef 93       	push	r30
    2a0a:	ff 93       	push	r31
    /*   
       __asm__ __volatile__ ("sei" ::);
       SHOWME(int12 start\n);
     */
    isthreadtrue = 0;
    _atomic = _atomic_start();
    2a0c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2a10:	18 2f       	mov	r17, r24
    if (is_thread())
    2a12:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <is_thread>
    2a16:	88 23       	and	r24, r24
    2a18:	09 f0       	breq	.+2      	; 0x2a1c <__vector_12+0x3a>
    2a1a:	47 c0       	rjmp	.+142    	; 0x2aaa <__vector_12+0xc8>
    2a1c:	00 e0       	ldi	r16, 0x00	; 0
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    2a1e:	81 2f       	mov	r24, r17
    2a20:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    {
        _atomic_t _atomic = _atomic_start();
    2a24:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2a28:	28 2f       	mov	r18, r24

        {
            if (HPLTimer1M_set_flag)
    2a2a:	80 91 24 05 	lds	r24, 0x0524
    2a2e:	88 23       	and	r24, r24
    2a30:	81 f0       	breq	.+32     	; 0x2a52 <__vector_12+0x70>
            {
                HPLTimer1M_mscale = HPLTimer1M_nextScale;
    2a32:	80 91 29 05 	lds	r24, 0x0529
    2a36:	80 93 2c 05 	sts	0x052C, r24
                HPLTimer1M_nextScale |= 0x8;
    2a3a:	88 60       	ori	r24, 0x08	; 8
    2a3c:	80 93 29 05 	sts	0x0529, r24
                outp(HPLTimer1M_nextScale, TCCR1B);     //update the clock scale
    2a40:	8e bd       	out	0x2e, r24	; 46
                outw(OCR1AL, HPLTimer1M_minterval);     //update the compare value
    2a42:	80 91 2a 05 	lds	r24, 0x052A
    2a46:	90 91 2b 05 	lds	r25, 0x052B
    2a4a:	9b bd       	out	0x2b, r25	; 43
    2a4c:	8a bd       	out	0x2a, r24	; 42
                HPLTimer1M_set_flag = 0;
    2a4e:	10 92 24 05 	sts	0x0524, r1
            }
        }
        _atomic_end(_atomic);
    2a52:	82 2f       	mov	r24, r18
    2a54:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    HPLTimer1M_Timer1_fire();
    _atomic = _atomic_start();
    2a58:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2a5c:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
    2a5e:	01 30       	cpi	r16, 0x01	; 1
    2a60:	61 f4       	brne	.+24     	; 0x2a7a <__vector_12+0x98>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    2a62:	8d b7       	in	r24, 0x3d	; 61
    2a64:	9e b7       	in	r25, 0x3e	; 62
    2a66:	90 93 5f 05 	sts	0x055F, r25
    2a6a:	80 93 5e 05 	sts	0x055E, r24
    2a6e:	80 91 b1 05 	lds	r24, 0x05B1
    2a72:	90 91 b2 05 	lds	r25, 0x05B2
    2a76:	9e bf       	out	0x3e, r25	; 62
    2a78:	8d bf       	out	0x3d, r24	; 61
        //  thread_yield();   
    }
    _atomic_end(_atomic);
    2a7a:	82 2f       	mov	r24, r18
    2a7c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    /*              
       SHOWME(int12 end\n);
       __asm__ __volatile__ ("cli" ::);     
     */
}
    2a80:	ff 91       	pop	r31
    2a82:	ef 91       	pop	r30
    2a84:	bf 91       	pop	r27
    2a86:	af 91       	pop	r26
    2a88:	9f 91       	pop	r25
    2a8a:	8f 91       	pop	r24
    2a8c:	7f 91       	pop	r23
    2a8e:	6f 91       	pop	r22
    2a90:	5f 91       	pop	r21
    2a92:	4f 91       	pop	r20
    2a94:	3f 91       	pop	r19
    2a96:	2f 91       	pop	r18
    2a98:	1f 91       	pop	r17
    2a9a:	0f 91       	pop	r16
    2a9c:	0f 90       	pop	r0
    2a9e:	0b be       	out	0x3b, r0	; 59
    2aa0:	0f 90       	pop	r0
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	0f 90       	pop	r0
    2aa6:	1f 90       	pop	r1
    2aa8:	18 95       	reti
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    2aaa:	8d b7       	in	r24, 0x3d	; 61
    2aac:	9e b7       	in	r25, 0x3e	; 62
    2aae:	90 93 b2 05 	sts	0x05B2, r25
    2ab2:	80 93 b1 05 	sts	0x05B1, r24
    2ab6:	80 91 5e 05 	lds	r24, 0x055E
    2aba:	90 91 5f 05 	lds	r25, 0x055F
    2abe:	9e bf       	out	0x3e, r25	; 62
    2ac0:	8d bf       	out	0x3d, r24	; 61
    2ac2:	01 e0       	ldi	r16, 0x01	; 1
    2ac4:	ac cf       	rjmp	.-168    	; 0x2a1e <__vector_12+0x3c>

00002ac6 <HPLTimer1M_CaptureT1_getEvent>:
    return result;
}

//-------------------------------------------------------------------------
inline uint16_t HPLTimer1M_CaptureT1_getEvent(void)
{
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    uint16_t i;

    {
        _atomic_t _atomic = _atomic_start();
    2aca:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        i = inw(ICR1L);
    2ace:	06 b5       	in	r16, 0x26	; 38
    2ad0:	17 b5       	in	r17, 0x27	; 39
        _atomic_end(_atomic);
    2ad2:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return i;
}
    2ad6:	c8 01       	movw	r24, r16
    2ad8:	1f 91       	pop	r17
    2ada:	0f 91       	pop	r16
    2adc:	08 95       	ret

00002ade <HPLTimer1M_Timer1_setRate>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_Timer1_setRate(uint16_t interval, char scale)
{
    2ade:	ef 92       	push	r14
    2ae0:	ff 92       	push	r15
    2ae2:	1f 93       	push	r17
    2ae4:	7c 01       	movw	r14, r24
    2ae6:	16 2f       	mov	r17, r22
    scale &= 0x7;
    2ae8:	17 70       	andi	r17, 0x07	; 7
    scale |= 0x8;
    {
        _atomic_t _atomic = _atomic_start();
    2aea:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            outp(0, TCCR1A);    //stop the timer's clock
    2aee:	1f bc       	out	0x2f, r1	; 47
            cbi(TIMSK, OCIE1A); //disable output compare
    2af0:	97 b7       	in	r25, 0x37	; 55
    2af2:	9f 7e       	andi	r25, 0xEF	; 239
    2af4:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TOIE1);  //disable Overflow interrupts
    2af6:	97 b7       	in	r25, 0x37	; 55
    2af8:	9b 7f       	andi	r25, 0xFB	; 251
    2afa:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TICIE1); //clear input capture
    2afc:	97 b7       	in	r25, 0x37	; 55
    2afe:	9f 7d       	andi	r25, 0xDF	; 223
    2b00:	97 bf       	out	0x37, r25	; 55
            outw(TCNT1L, 0);    //clear the 16bit count 
    2b02:	1d bc       	out	0x2d, r1	; 45
    2b04:	1c bc       	out	0x2c, r1	; 44
            outw(OCR1AL, interval);     //set the compare value
    2b06:	fb bc       	out	0x2b, r15	; 43
    2b08:	ea bc       	out	0x2a, r14	; 42
            sbi(TIFR, OCF1A);   //clear Timer1A OCF flag by writing 1
    2b0a:	96 b7       	in	r25, 0x36	; 54
    2b0c:	90 61       	ori	r25, 0x10	; 16
    2b0e:	96 bf       	out	0x36, r25	; 54
            //              sbi(TIMSK, OCIE1A);       //enable OCIE1A interrupt
            outp(scale, TCCR1B);        //starts the timer with sc
    2b10:	18 60       	ori	r17, 0x08	; 8
    2b12:	1e bd       	out	0x2e, r17	; 46
        }
        _atomic_end(_atomic);
    2b14:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return SUCCESS;
}
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	1f 91       	pop	r17
    2b1c:	ff 90       	pop	r15
    2b1e:	ef 90       	pop	r14
    2b20:	08 95       	ret

00002b22 <HPLTimer1M_StdControl_init>:
uint8_t HPLTimer1M_nextScale;
uint16_t HPLTimer1M_minterval;
inline result_t HPLTimer1M_StdControl_init(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    2b22:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            HPLTimer1M_mscale = TCLK_CPU_DIV256;
    2b26:	94 e0       	ldi	r25, 0x04	; 4
    2b28:	90 93 2c 05 	sts	0x052C, r25
            HPLTimer1M_minterval = TIMER1_DEFAULT_INTERVAL;
    2b2c:	2f ef       	ldi	r18, 0xFF	; 255
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	30 93 2b 05 	sts	0x052B, r19
    2b34:	20 93 2a 05 	sts	0x052A, r18
        }
        _atomic_end(_atomic);
    2b38:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return SUCCESS;
}
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	08 95       	ret

00002b40 <HPLTimer1M_CaptureT1_captured>:
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_captured(uint16_t arg_0xa4d7ac0)
{
    hplcc2420interruptm_SFDCapture_captured(arg_0xa4d7ac0);
    2b40:	0e 94 c1 12 	call	0x2582	; 0x2582 <hplcc2420interruptm_SFDCapture_captured>
}
    2b44:	08 95       	ret

00002b46 <__vector_11>:

//void   __vector_11(void) __attribute__((signal, used,   externally_visible)); 
//void  __attribute((signal, used, externally_visible))   __vector_11(void) 
SIGNAL(TIMER1_CAPT_vect)
{
    2b46:	1f 92       	push	r1
    2b48:	0f 92       	push	r0
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	0f 92       	push	r0
    2b4e:	0b b6       	in	r0, 0x3b	; 59
    2b50:	0f 92       	push	r0
    2b52:	11 24       	eor	r1, r1
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	2f 93       	push	r18
    2b5a:	3f 93       	push	r19
    2b5c:	4f 93       	push	r20
    2b5e:	5f 93       	push	r21
    2b60:	6f 93       	push	r22
    2b62:	7f 93       	push	r23
    2b64:	8f 93       	push	r24
    2b66:	9f 93       	push	r25
    2b68:	af 93       	push	r26
    2b6a:	bf 93       	push	r27
    2b6c:	ef 93       	push	r30
    2b6e:	ff 93       	push	r31
       _atomic_end(_atomic); 
       }
    #endif
    
    isthreadtrue = 0;
    _atomic = _atomic_start();
    2b70:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2b74:	08 2f       	mov	r16, r24
    if (is_thread())
    2b76:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <is_thread>
    2b7a:	88 23       	and	r24, r24
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <__vector_11+0x3a>
    2b7e:	3f c0       	rjmp	.+126    	; 0x2bfe <__vector_11+0xb8>
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    2b80:	8d b7       	in	r24, 0x3d	; 61
    2b82:	9e b7       	in	r25, 0x3e	; 62
    2b84:	90 93 b2 05 	sts	0x05B2, r25
    2b88:	80 93 b1 05 	sts	0x05B1, r24
    2b8c:	80 91 5e 05 	lds	r24, 0x055E
    2b90:	90 91 5f 05 	lds	r25, 0x055F
    2b94:	9e bf       	out	0x3e, r25	; 62
    2b96:	8d bf       	out	0x3d, r24	; 61
    }
    _atomic_end(_atomic);
    2b98:	80 2f       	mov	r24, r16
    2b9a:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
inline uint16_t HPLTimer1M_CaptureT1_getEvent(void)
{
    uint16_t i;

    {
        _atomic_t _atomic = _atomic_start();
    2b9e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        i = inw(ICR1L);
    2ba2:	06 b5       	in	r16, 0x26	; 38
    2ba4:	17 b5       	in	r17, 0x27	; 39
        _atomic_end(_atomic);
    2ba6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_captured(uint16_t arg_0xa4d7ac0)
{
    hplcc2420interruptm_SFDCapture_captured(arg_0xa4d7ac0);
    2baa:	c8 01       	movw	r24, r16
    2bac:	0e 94 c1 12 	call	0x2582	; 0x2582 <hplcc2420interruptm_SFDCapture_captured>
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    HPLTimer1M_CaptureT1_captured(HPLTimer1M_CaptureT1_getEvent());
    _atomic = _atomic_start();
    2bb0:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2bb4:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    2bb6:	8d b7       	in	r24, 0x3d	; 61
    2bb8:	9e b7       	in	r25, 0x3e	; 62
    2bba:	90 93 5f 05 	sts	0x055F, r25
    2bbe:	80 93 5e 05 	sts	0x055E, r24
    2bc2:	80 91 b1 05 	lds	r24, 0x05B1
    2bc6:	90 91 b2 05 	lds	r25, 0x05B2
    2bca:	9e bf       	out	0x3e, r25	; 62
    2bcc:	8d bf       	out	0x3d, r24	; 61
        // thread_yield();   
    }
    _atomic_end(_atomic);
    2bce:	82 2f       	mov	r24, r18
    2bd0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
       interruptcost += ((uint32_t)(hcounter2-hcounter))*50000*50000 + lcounter2 - lcounter; 
       _atomic_end(_atomic); 
       }
       __asm__ __volatile__ ("cli" ::);     
    #endif
}
    2bd4:	ff 91       	pop	r31
    2bd6:	ef 91       	pop	r30
    2bd8:	bf 91       	pop	r27
    2bda:	af 91       	pop	r26
    2bdc:	9f 91       	pop	r25
    2bde:	8f 91       	pop	r24
    2be0:	7f 91       	pop	r23
    2be2:	6f 91       	pop	r22
    2be4:	5f 91       	pop	r21
    2be6:	4f 91       	pop	r20
    2be8:	3f 91       	pop	r19
    2bea:	2f 91       	pop	r18
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	0f 90       	pop	r0
    2bf2:	0b be       	out	0x3b, r0	; 59
    2bf4:	0f 90       	pop	r0
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	0f 90       	pop	r0
    2bfa:	1f 90       	pop	r1
    2bfc:	18 95       	reti
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    2bfe:	80 2f       	mov	r24, r16
    2c00:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
inline uint16_t HPLTimer1M_CaptureT1_getEvent(void)
{
    uint16_t i;

    {
        _atomic_t _atomic = _atomic_start();
    2c04:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        i = inw(ICR1L);
    2c08:	06 b5       	in	r16, 0x26	; 38
    2c0a:	17 b5       	in	r17, 0x27	; 39
        _atomic_end(_atomic);
    2c0c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_captured(uint16_t arg_0xa4d7ac0)
{
    hplcc2420interruptm_SFDCapture_captured(arg_0xa4d7ac0);
    2c10:	c8 01       	movw	r24, r16
    2c12:	0e 94 c1 12 	call	0x2582	; 0x2582 <hplcc2420interruptm_SFDCapture_captured>
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    HPLTimer1M_CaptureT1_captured(HPLTimer1M_CaptureT1_getEvent());
    _atomic = _atomic_start();
    2c16:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2c1a:	28 2f       	mov	r18, r24
    2c1c:	d8 cf       	rjmp	.-80     	; 0x2bce <__vector_11+0x88>

00002c1e <HPLTimer1M_StdControl_stop>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_StdControl_stop(void)
{
    2c1e:	0f 93       	push	r16
    2c20:	1f 93       	push	r17
    uint16_t mi;

    {
        _atomic_t _atomic = _atomic_start();
    2c22:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            mi = HPLTimer1M_minterval;
    2c26:	00 91 2a 05 	lds	r16, 0x052A
    2c2a:	10 91 2b 05 	lds	r17, 0x052B
        }
        _atomic_end(_atomic);
    2c2e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
inline result_t HPLTimer1M_Timer1_setRate(uint16_t interval, char scale)
{
    scale &= 0x7;
    scale |= 0x8;
    {
        _atomic_t _atomic = _atomic_start();
    2c32:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            outp(0, TCCR1A);    //stop the timer's clock
    2c36:	1f bc       	out	0x2f, r1	; 47
            cbi(TIMSK, OCIE1A); //disable output compare
    2c38:	97 b7       	in	r25, 0x37	; 55
    2c3a:	9f 7e       	andi	r25, 0xEF	; 239
    2c3c:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TOIE1);  //disable Overflow interrupts
    2c3e:	97 b7       	in	r25, 0x37	; 55
    2c40:	9b 7f       	andi	r25, 0xFB	; 251
    2c42:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TICIE1); //clear input capture
    2c44:	97 b7       	in	r25, 0x37	; 55
    2c46:	9f 7d       	andi	r25, 0xDF	; 223
    2c48:	97 bf       	out	0x37, r25	; 55
            outw(TCNT1L, 0);    //clear the 16bit count 
    2c4a:	1d bc       	out	0x2d, r1	; 45
    2c4c:	1c bc       	out	0x2c, r1	; 44
            outw(OCR1AL, interval);     //set the compare value
    2c4e:	1b bd       	out	0x2b, r17	; 43
    2c50:	0a bd       	out	0x2a, r16	; 42
            sbi(TIFR, OCF1A);   //clear Timer1A OCF flag by writing 1
    2c52:	96 b7       	in	r25, 0x36	; 54
    2c54:	90 61       	ori	r25, 0x10	; 16
    2c56:	96 bf       	out	0x36, r25	; 54
            //              sbi(TIMSK, OCIE1A);       //enable OCIE1A interrupt
            outp(scale, TCCR1B);        //starts the timer with sc
    2c58:	98 e0       	ldi	r25, 0x08	; 8
    2c5a:	9e bd       	out	0x2e, r25	; 46
        }
        _atomic_end(_atomic);
    2c5c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
        }
        _atomic_end(_atomic);
    }
    HPLTimer1M_Timer1_setRate(mi, 0);   //default scale=0=OFF
    return SUCCESS;
}
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	1f 91       	pop	r17
    2c64:	0f 91       	pop	r16
    2c66:	08 95       	ret

00002c68 <HPLTimer1M_StdControl_start>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_StdControl_start(void)
{
    2c68:	ef 92       	push	r14
    2c6a:	ff 92       	push	r15
    2c6c:	1f 93       	push	r17
    uint16_t mi;
    uint8_t ms;

    {
        _atomic_t _atomic = _atomic_start();
    2c6e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            mi = HPLTimer1M_minterval;
    2c72:	e0 90 2a 05 	lds	r14, 0x052A
    2c76:	f0 90 2b 05 	lds	r15, 0x052B
            ms = HPLTimer1M_mscale;
    2c7a:	10 91 2c 05 	lds	r17, 0x052C
        }
        _atomic_end(_atomic);
    2c7e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_Timer1_setRate(uint16_t interval, char scale)
{
    scale &= 0x7;
    2c82:	17 70       	andi	r17, 0x07	; 7
    scale |= 0x8;
    {
        _atomic_t _atomic = _atomic_start();
    2c84:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            outp(0, TCCR1A);    //stop the timer's clock
    2c88:	1f bc       	out	0x2f, r1	; 47
            cbi(TIMSK, OCIE1A); //disable output compare
    2c8a:	97 b7       	in	r25, 0x37	; 55
    2c8c:	9f 7e       	andi	r25, 0xEF	; 239
    2c8e:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TOIE1);  //disable Overflow interrupts
    2c90:	97 b7       	in	r25, 0x37	; 55
    2c92:	9b 7f       	andi	r25, 0xFB	; 251
    2c94:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TICIE1); //clear input capture
    2c96:	97 b7       	in	r25, 0x37	; 55
    2c98:	9f 7d       	andi	r25, 0xDF	; 223
    2c9a:	97 bf       	out	0x37, r25	; 55
            outw(TCNT1L, 0);    //clear the 16bit count 
    2c9c:	1d bc       	out	0x2d, r1	; 45
    2c9e:	1c bc       	out	0x2c, r1	; 44
            outw(OCR1AL, interval);     //set the compare value
    2ca0:	fb bc       	out	0x2b, r15	; 43
    2ca2:	ea bc       	out	0x2a, r14	; 42
            sbi(TIFR, OCF1A);   //clear Timer1A OCF flag by writing 1
    2ca4:	96 b7       	in	r25, 0x36	; 54
    2ca6:	90 61       	ori	r25, 0x10	; 16
    2ca8:	96 bf       	out	0x36, r25	; 54
            //              sbi(TIMSK, OCIE1A);       //enable OCIE1A interrupt
            outp(scale, TCCR1B);        //starts the timer with sc
    2caa:	18 60       	ori	r17, 0x08	; 8
    2cac:	1e bd       	out	0x2e, r17	; 46
        }
        _atomic_end(_atomic);
    2cae:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
        }
        _atomic_end(_atomic);
    }
    HPLTimer1M_Timer1_setRate(mi, ms);
    return SUCCESS;
}
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	1f 91       	pop	r17
    2cb6:	ff 90       	pop	r15
    2cb8:	ef 90       	pop	r14
    2cba:	08 95       	ret

00002cbc <initScheduling>:
#endif
void initScheduling(void)
{
    int i;

    LITE_sched_num = 0;
    2cbc:	10 92 5d 05 	sts	0x055D, r1
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    for (i = 0; i < LITE_MAX_TASKS; i++)
    {
        LITE_queue[i].tp = (void *)0;
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	ee 0f       	add	r30, r30
    2cc8:	ff 1f       	adc	r31, r31
    2cca:	e8 0f       	add	r30, r24
    2ccc:	f9 1f       	adc	r31, r25
    2cce:	e3 5d       	subi	r30, 0xD3	; 211
    2cd0:	fa 4f       	sbci	r31, 0xFA	; 250
    2cd2:	11 82       	std	Z+1, r1	; 0x01
    2cd4:	10 82       	st	Z, r1
void initScheduling(void)
{
    int i;

    LITE_sched_num = 0;
    for (i = 0; i < LITE_MAX_TASKS; i++)
    2cd6:	01 96       	adiw	r24, 0x01	; 1
    2cd8:	80 31       	cpi	r24, 0x10	; 16
    2cda:	91 05       	cpc	r25, r1
    2cdc:	99 f7       	brne	.-26     	; 0x2cc4 <initScheduling+0x8>
        LITE_queue[i].tp = (void *)0;
    }
#ifdef PLATFORM_CPU_MEASURE
    cpucounter = 0;
#endif
}
    2cde:	08 95       	ret

00002ce0 <postTask>:

//-------------------------------------------------------------------------
bool postTask(void (*tp) (void), uint8_t priority)
{
    2ce0:	1f 93       	push	r17
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
    2ce6:	ec 01       	movw	r28, r24
    2ce8:	16 2f       	mov	r17, r22
    _atomic_t fInterruptFlags;
    uint8_t tmp;

    fInterruptFlags = _atomic_start();
    2cea:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2cee:	48 2f       	mov	r20, r24
    if (LITE_sched_num == LITE_MAX_TASKS)
    2cf0:	80 91 5d 05 	lds	r24, 0x055D
    2cf4:	80 31       	cpi	r24, 0x10	; 16
    2cf6:	91 f0       	breq	.+36     	; 0x2d1c <postTask+0x3c>
    {
        _atomic_end(fInterruptFlags);
        return FALSE;
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    {
        if (LITE_queue[tmp].tp == NULL)
    2cfc:	f9 01       	movw	r30, r18
    2cfe:	ee 0f       	add	r30, r30
    2d00:	ff 1f       	adc	r31, r31
    2d02:	e2 0f       	add	r30, r18
    2d04:	f3 1f       	adc	r31, r19
    2d06:	e3 5d       	subi	r30, 0xD3	; 211
    2d08:	fa 4f       	sbci	r31, 0xFA	; 250
    2d0a:	80 81       	ld	r24, Z
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	89 2b       	or	r24, r25
    2d10:	69 f0       	breq	.+26     	; 0x2d2c <postTask+0x4c>
        {
            LITE_queue[tmp].tp = tp;
            LITE_queue[tmp].priority = priority;
            LITE_sched_num++;
            _atomic_end(fInterruptFlags);
            return TRUE;
    2d12:	2f 5f       	subi	r18, 0xFF	; 255
    2d14:	3f 4f       	sbci	r19, 0xFF	; 255
    if (LITE_sched_num == LITE_MAX_TASKS)
    {
        _atomic_end(fInterruptFlags);
        return FALSE;
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    2d16:	20 31       	cpi	r18, 0x10	; 16
    2d18:	31 05       	cpc	r19, r1
    2d1a:	81 f7       	brne	.-32     	; 0x2cfc <postTask+0x1c>
            LITE_sched_num++;
            _atomic_end(fInterruptFlags);
            return TRUE;
        }
    }
    _atomic_end(fInterruptFlags);
    2d1c:	84 2f       	mov	r24, r20
    2d1e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    return FALSE;
}
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	08 95       	ret
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    {
        if (LITE_queue[tmp].tp == NULL)
        {
            LITE_queue[tmp].tp = tp;
    2d2c:	d1 83       	std	Z+1, r29	; 0x01
    2d2e:	c0 83       	st	Z, r28
            LITE_queue[tmp].priority = priority;
    2d30:	12 83       	std	Z+2, r17	; 0x02
            LITE_sched_num++;
    2d32:	80 91 5d 05 	lds	r24, 0x055D
    2d36:	8f 5f       	subi	r24, 0xFF	; 255
    2d38:	80 93 5d 05 	sts	0x055D, r24
            _atomic_end(fInterruptFlags);
    2d3c:	84 2f       	mov	r24, r20
    2d3e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    2d42:	81 e0       	ldi	r24, 0x01	; 1
            return TRUE;
        }
    }
    _atomic_end(fInterruptFlags);
    return FALSE;
}
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	1f 91       	pop	r17
    2d4a:	08 95       	ret

00002d4c <runNextTask>:

//-------------------------------------------------------------------------
bool runNextTask()
{
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    uint8_t tmp;
    uint8_t reserved;
    void (*func) (void);

    reserved = 0;
    fInterruptFlags = _atomic_start();
    2d50:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    2d54:	68 2f       	mov	r22, r24
    currentpriority = 0;
    func = NULL;
    if (LITE_sched_num == 0)
    2d56:	80 91 5d 05 	lds	r24, 0x055D
    2d5a:	88 23       	and	r24, r24
    2d5c:	c1 f1       	breq	.+112    	; 0x2dce <runNextTask+0x82>
        cpucounter++;
#else
        _avr_sleep();
        //   printfstr("ABOUT TO SLEEP!!\n");
#endif
        return FALSE;
    2d5e:	c0 e0       	ldi	r28, 0x00	; 0
    2d60:	d0 e0       	ldi	r29, 0x00	; 0
    2d62:	40 e0       	ldi	r20, 0x00	; 0
    2d64:	50 e0       	ldi	r21, 0x00	; 0
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    {
        if ((LITE_queue[tmp].tp != NULL) && (LITE_queue[tmp].priority >
    2d6a:	f9 01       	movw	r30, r18
    2d6c:	ee 0f       	add	r30, r30
    2d6e:	ff 1f       	adc	r31, r31
    2d70:	e2 0f       	add	r30, r18
    2d72:	f3 1f       	adc	r31, r19
    2d74:	e3 5d       	subi	r30, 0xD3	; 211
    2d76:	fa 4f       	sbci	r31, 0xFA	; 250
    2d78:	80 81       	ld	r24, Z
    2d7a:	91 81       	ldd	r25, Z+1	; 0x01
    2d7c:	89 2b       	or	r24, r25
    2d7e:	39 f0       	breq	.+14     	; 0x2d8e <runNextTask+0x42>
    2d80:	82 81       	ldd	r24, Z+2	; 0x02
    2d82:	48 17       	cp	r20, r24
    2d84:	20 f4       	brcc	.+8      	; 0x2d8e <runNextTask+0x42>
                                             currentpriority))
        {
            func = LITE_queue[tmp].tp;
    2d86:	c0 81       	ld	r28, Z
    2d88:	d1 81       	ldd	r29, Z+1	; 0x01
            reserved = tmp;
            currentpriority = LITE_queue[tmp].priority;
    2d8a:	42 81       	ldd	r20, Z+2	; 0x02
    2d8c:	52 2f       	mov	r21, r18
    2d8e:	2f 5f       	subi	r18, 0xFF	; 255
    2d90:	3f 4f       	sbci	r19, 0xFF	; 255
        _avr_sleep();
        //   printfstr("ABOUT TO SLEEP!!\n");
#endif
        return FALSE;
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    2d92:	20 31       	cpi	r18, 0x10	; 16
    2d94:	31 05       	cpc	r19, r1
    2d96:	49 f7       	brne	.-46     	; 0x2d6a <runNextTask+0x1e>
            func = LITE_queue[tmp].tp;
            reserved = tmp;
            currentpriority = LITE_queue[tmp].priority;
        }
    }
    if (func != NULL)
    2d98:	20 97       	sbiw	r28, 0x00	; 0
    2d9a:	21 f1       	breq	.+72     	; 0x2de4 <runNextTask+0x98>
    {
        LITE_sched_num--;
    2d9c:	80 91 5d 05 	lds	r24, 0x055D
    2da0:	81 50       	subi	r24, 0x01	; 1
    2da2:	80 93 5d 05 	sts	0x055D, r24
        LITE_queue[reserved].tp = NULL;
    2da6:	85 2f       	mov	r24, r21
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	fc 01       	movw	r30, r24
    2dac:	ee 0f       	add	r30, r30
    2dae:	ff 1f       	adc	r31, r31
    2db0:	e8 0f       	add	r30, r24
    2db2:	f9 1f       	adc	r31, r25
    2db4:	e3 5d       	subi	r30, 0xD3	; 211
    2db6:	fa 4f       	sbci	r31, 0xFA	; 250
    2db8:	11 82       	std	Z+1, r1	; 0x01
    2dba:	10 82       	st	Z, r1
    }
    _atomic_end(fInterruptFlags);
    2dbc:	86 2f       	mov	r24, r22
    2dbe:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    if (func != NULL)
    {
        func();
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	09 95       	icall
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    }
    return TRUE;
}
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	08 95       	ret
    fInterruptFlags = _atomic_start();
    currentpriority = 0;
    func = NULL;
    if (LITE_sched_num == 0)
    {
        _atomic_end(fInterruptFlags);
    2dce:	86 2f       	mov	r24, r22
    2dd0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
        _avr_enable_interrupt();
    2dd4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_avr_enable_interrupt>
#ifdef PLATFORM_CPU_MEASURE
        cpucounter++;
#else
        _avr_sleep();
    2dd8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_avr_sleep>
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    if (func != NULL)
    {
        func();
    }
    return TRUE;
}
    2dde:	df 91       	pop	r29
    2de0:	cf 91       	pop	r28
    2de2:	08 95       	ret
    if (func != NULL)
    {
        LITE_sched_num--;
        LITE_queue[reserved].tp = NULL;
    }
    _atomic_end(fInterruptFlags);
    2de4:	86 2f       	mov	r24, r22
    2de6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    if (func != NULL)
    {
        func();
    }
    return TRUE;
}
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	08 95       	ret

00002df2 <call_fcn_ptr>:
   along with LiteOS.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "threaddata.h"
void call_fcn_ptr(void (*tp) ())
{
    (*tp) ();
    2df2:	fc 01       	movw	r30, r24
    2df4:	09 95       	icall
}
    2df6:	08 95       	ret

00002df8 <is_thread>:
//--------------------------------------------------------------------------
//this is still working as it checks if the upperfound of threads are larger than the spvalue or not. 
uint8_t is_thread()
{
  uint16_t SPvalue;
  asm volatile("in %A0, 0x3d""\n\t""in %B0, 0x3e""\n\t": "=r"(SPvalue): );
    2df8:	2d b7       	in	r18, 0x3d	; 61
    2dfa:	3e b7       	in	r19, 0x3e	; 62
    2dfc:	40 e0       	ldi	r20, 0x00	; 0
    2dfe:	80 91 b3 05 	lds	r24, 0x05B3
    2e02:	90 91 b4 05 	lds	r25, 0x05B4
    2e06:	82 17       	cp	r24, r18
    2e08:	93 07       	cpc	r25, r19
    2e0a:	08 f0       	brcs	.+2      	; 0x2e0e <is_thread+0x16>
    2e0c:	41 e0       	ldi	r20, 0x01	; 1
  }
  else
  {
    return 1;
  }
}
    2e0e:	84 2f       	mov	r24, r20
    2e10:	08 95       	ret

00002e12 <setThreadTerminateFunction>:


/* Set up the destroy thread function call */
void setThreadTerminateFunction(uint8_t currentindex, void(*fp)())
{
  thread_table[currentindex].thread_clear_function = fp;
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	fc 01       	movw	r30, r24
    2e16:	ee 0f       	add	r30, r30
    2e18:	ff 1f       	adc	r31, r31
    2e1a:	ee 0f       	add	r30, r30
    2e1c:	ff 1f       	adc	r31, r31
    2e1e:	ee 0f       	add	r30, r30
    2e20:	ff 1f       	adc	r31, r31
    2e22:	9f 01       	movw	r18, r30
    2e24:	22 0f       	add	r18, r18
    2e26:	33 1f       	adc	r19, r19
    2e28:	22 0f       	add	r18, r18
    2e2a:	33 1f       	adc	r19, r19
    2e2c:	e2 0f       	add	r30, r18
    2e2e:	f3 1f       	adc	r31, r19
    2e30:	e8 1b       	sub	r30, r24
    2e32:	f9 0b       	sbc	r31, r25
    2e34:	ee 59       	subi	r30, 0x9E	; 158
    2e36:	fa 4f       	sbci	r31, 0xFA	; 250
    2e38:	74 8f       	std	Z+28, r23	; 0x1c
    2e3a:	63 8f       	std	Z+27, r22	; 0x1b
}
    2e3c:	08 95       	ret

00002e3e <lite_switch_to_user_thread>:
    #endif 
  #endif 
  
   //printfstr("Now switching to user.  \n"); 
  #ifdef PLATFORM_AVR
    PUSH_REG_STATUS();
    2e3e:	ff 93       	push	r31
    2e40:	ff b7       	in	r31, 0x3f	; 63
    2e42:	ff 93       	push	r31
    PUSH_GPR();
    2e44:	0f 92       	push	r0
    2e46:	1f 92       	push	r1
    2e48:	2f 92       	push	r2
    2e4a:	3f 92       	push	r3
    2e4c:	4f 92       	push	r4
    2e4e:	5f 92       	push	r5
    2e50:	6f 92       	push	r6
    2e52:	7f 92       	push	r7
    2e54:	8f 92       	push	r8
    2e56:	9f 92       	push	r9
    2e58:	af 92       	push	r10
    2e5a:	bf 92       	push	r11
    2e5c:	cf 92       	push	r12
    2e5e:	df 92       	push	r13
    2e60:	ef 92       	push	r14
    2e62:	ff 92       	push	r15
    2e64:	0f 93       	push	r16
    2e66:	1f 93       	push	r17
    2e68:	2f 93       	push	r18
    2e6a:	3f 93       	push	r19
    2e6c:	4f 93       	push	r20
    2e6e:	5f 93       	push	r21
    2e70:	6f 93       	push	r22
    2e72:	7f 93       	push	r23
    2e74:	8f 93       	push	r24
    2e76:	9f 93       	push	r25
    2e78:	af 93       	push	r26
    2e7a:	bf 93       	push	r27
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	ef 93       	push	r30
    2e82:	ff 93       	push	r31
    SWAP_STACK_PTR(old_stack_ptr, current_thread->sp);
    2e84:	8d b7       	in	r24, 0x3d	; 61
    2e86:	9e b7       	in	r25, 0x3e	; 62
    2e88:	90 93 5f 05 	sts	0x055F, r25
    2e8c:	80 93 5e 05 	sts	0x055E, r24
    2e90:	e0 91 60 05 	lds	r30, 0x0560
    2e94:	f0 91 61 05 	lds	r31, 0x0561
    2e98:	80 81       	ld	r24, Z
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	9e bf       	out	0x3e, r25	; 62
    2e9e:	8d bf       	out	0x3d, r24	; 61
    POP_GPR();
    2ea0:	ff 91       	pop	r31
    2ea2:	ef 91       	pop	r30
    2ea4:	df 91       	pop	r29
    2ea6:	cf 91       	pop	r28
    2ea8:	bf 91       	pop	r27
    2eaa:	af 91       	pop	r26
    2eac:	9f 91       	pop	r25
    2eae:	8f 91       	pop	r24
    2eb0:	7f 91       	pop	r23
    2eb2:	6f 91       	pop	r22
    2eb4:	5f 91       	pop	r21
    2eb6:	4f 91       	pop	r20
    2eb8:	3f 91       	pop	r19
    2eba:	2f 91       	pop	r18
    2ebc:	1f 91       	pop	r17
    2ebe:	0f 91       	pop	r16
    2ec0:	ff 90       	pop	r15
    2ec2:	ef 90       	pop	r14
    2ec4:	df 90       	pop	r13
    2ec6:	cf 90       	pop	r12
    2ec8:	bf 90       	pop	r11
    2eca:	af 90       	pop	r10
    2ecc:	9f 90       	pop	r9
    2ece:	8f 90       	pop	r8
    2ed0:	7f 90       	pop	r7
    2ed2:	6f 90       	pop	r6
    2ed4:	5f 90       	pop	r5
    2ed6:	4f 90       	pop	r4
    2ed8:	3f 90       	pop	r3
    2eda:	2f 90       	pop	r2
    2edc:	1f 90       	pop	r1
    2ede:	0f 90       	pop	r0
    POP_REG_STATUS();
    2ee0:	ff 91       	pop	r31
    2ee2:	ff bf       	out	0x3f, r31	; 63
    2ee4:	ff 91       	pop	r31
  #endif 
  
  //_avr_enable_interrupt(); 
  return ;
}
    2ee6:	08 95       	ret

00002ee8 <thread_yield>:

//-------------------------------------------------------------------------
void __attribute__((noinline))thread_yield() /* __attribute__((noinline)) */
{
  #ifdef PLATFORM_AVR
    PUSH_REG_STATUS();
    2ee8:	ff 93       	push	r31
    2eea:	ff b7       	in	r31, 0x3f	; 63
    2eec:	ff 93       	push	r31
    PUSH_GPR();
    2eee:	0f 92       	push	r0
    2ef0:	1f 92       	push	r1
    2ef2:	2f 92       	push	r2
    2ef4:	3f 92       	push	r3
    2ef6:	4f 92       	push	r4
    2ef8:	5f 92       	push	r5
    2efa:	6f 92       	push	r6
    2efc:	7f 92       	push	r7
    2efe:	8f 92       	push	r8
    2f00:	9f 92       	push	r9
    2f02:	af 92       	push	r10
    2f04:	bf 92       	push	r11
    2f06:	cf 92       	push	r12
    2f08:	df 92       	push	r13
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	2f 93       	push	r18
    2f14:	3f 93       	push	r19
    2f16:	4f 93       	push	r20
    2f18:	5f 93       	push	r21
    2f1a:	6f 93       	push	r22
    2f1c:	7f 93       	push	r23
    2f1e:	8f 93       	push	r24
    2f20:	9f 93       	push	r25
    2f22:	af 93       	push	r26
    2f24:	bf 93       	push	r27
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	ef 93       	push	r30
    2f2c:	ff 93       	push	r31
    //Now swap the stacks back
    SWAP_STACK_PTR(current_thread->sp, old_stack_ptr);
    2f2e:	e0 91 60 05 	lds	r30, 0x0560
    2f32:	f0 91 61 05 	lds	r31, 0x0561
    2f36:	8d b7       	in	r24, 0x3d	; 61
    2f38:	9e b7       	in	r25, 0x3e	; 62
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	80 83       	st	Z, r24
    2f3e:	80 91 5e 05 	lds	r24, 0x055E
    2f42:	90 91 5f 05 	lds	r25, 0x055F
    2f46:	9e bf       	out	0x3e, r25	; 62
    2f48:	8d bf       	out	0x3d, r24	; 61
    POP_GPR();
    2f4a:	ff 91       	pop	r31
    2f4c:	ef 91       	pop	r30
    2f4e:	df 91       	pop	r29
    2f50:	cf 91       	pop	r28
    2f52:	bf 91       	pop	r27
    2f54:	af 91       	pop	r26
    2f56:	9f 91       	pop	r25
    2f58:	8f 91       	pop	r24
    2f5a:	7f 91       	pop	r23
    2f5c:	6f 91       	pop	r22
    2f5e:	5f 91       	pop	r21
    2f60:	4f 91       	pop	r20
    2f62:	3f 91       	pop	r19
    2f64:	2f 91       	pop	r18
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	ff 90       	pop	r15
    2f6c:	ef 90       	pop	r14
    2f6e:	df 90       	pop	r13
    2f70:	cf 90       	pop	r12
    2f72:	bf 90       	pop	r11
    2f74:	af 90       	pop	r10
    2f76:	9f 90       	pop	r9
    2f78:	8f 90       	pop	r8
    2f7a:	7f 90       	pop	r7
    2f7c:	6f 90       	pop	r6
    2f7e:	5f 90       	pop	r5
    2f80:	4f 90       	pop	r4
    2f82:	3f 90       	pop	r3
    2f84:	2f 90       	pop	r2
    2f86:	1f 90       	pop	r1
    2f88:	0f 90       	pop	r0
    POP_REG_STATUS();
    2f8a:	ff 91       	pop	r31
    2f8c:	ff bf       	out	0x3f, r31	; 63
    2f8e:	ff 91       	pop	r31
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_CONTEXTSWITCH
      addTrace(TRACE_CONTEXTSWITCHFROMUSERTHREAD, 100);
    #endif 
  #endif 
}
    2f90:	08 95       	ret

00002f92 <sleepThread>:
/* thread_sleep
 * This routine puts the current thread into a sleeping state.
 * It will not ever wake up until another task or thread wakes it up
 */
void sleepThread(uint16_t milli)
{
    2f92:	ac 01       	movw	r20, r24
//--------------------------------------------------------------------------
//this is still working as it checks if the upperfound of threads are larger than the spvalue or not. 
uint8_t is_thread()
{
  uint16_t SPvalue;
  asm volatile("in %A0, 0x3d""\n\t""in %B0, 0x3e""\n\t": "=r"(SPvalue): );
    2f94:	2d b7       	in	r18, 0x3d	; 61
    2f96:	3e b7       	in	r19, 0x3e	; 62

  if (SPvalue > (uint16_t)maxthreadrambound)
    2f98:	80 91 b3 05 	lds	r24, 0x05B3
    2f9c:	90 91 b4 05 	lds	r25, 0x05B4
    2fa0:	82 17       	cp	r24, r18
    2fa2:	93 07       	cpc	r25, r19
    2fa4:	50 f0       	brcs	.+20     	; 0x2fba <sleepThread+0x28>
  if (!is_thread())
  {
    return ;
  }
  //this is insid the thread!
  current_thread->state = STATE_PRESLEEP;
    2fa6:	e0 91 60 05 	lds	r30, 0x0560
    2faa:	f0 91 61 05 	lds	r31, 0x0561
    2fae:	84 e0       	ldi	r24, 0x04	; 4
    2fb0:	82 83       	std	Z+2, r24	; 0x02
  current_thread->data.sleepstate.sleeptime = milli;
    2fb2:	56 8f       	std	Z+30, r21	; 0x1e
    2fb4:	45 8f       	std	Z+29, r20	; 0x1d
  thread_yield();
    2fb6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <thread_yield>
    2fba:	08 95       	ret

00002fbc <break_point_function>:
void break_point_function() {
   int i;
   uint16_t index;
   index = 0;
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
      if ( current_thread == & ( thread_table[ i ] )) {
    2fbc:	80 91 60 05 	lds	r24, 0x0560
    2fc0:	90 91 61 05 	lds	r25, 0x0561
    2fc4:	25 e0       	ldi	r18, 0x05	; 5
    2fc6:	82 36       	cpi	r24, 0x62	; 98
    2fc8:	92 07       	cpc	r25, r18
    2fca:	19 f0       	breq	.+6      	; 0x2fd2 <break_point_function+0x16>
    2fcc:	89 58       	subi	r24, 0x89	; 137
    2fce:	95 40       	sbci	r25, 0x05	; 5
    2fd0:	c9 f0       	breq	.+50     	; 0x3004 <break_point_function+0x48>
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
         index = i;
         break;
      }
   }
   thread_table[ index ].state = STATE_BREAK;
    2fd6:	f9 01       	movw	r30, r18
    2fd8:	ee 0f       	add	r30, r30
    2fda:	ff 1f       	adc	r31, r31
    2fdc:	ee 0f       	add	r30, r30
    2fde:	ff 1f       	adc	r31, r31
    2fe0:	ee 0f       	add	r30, r30
    2fe2:	ff 1f       	adc	r31, r31
    2fe4:	cf 01       	movw	r24, r30
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	e8 0f       	add	r30, r24
    2ff0:	f9 1f       	adc	r31, r25
    2ff2:	e2 1b       	sub	r30, r18
    2ff4:	f3 0b       	sbc	r31, r19
    2ff6:	ee 59       	subi	r30, 0x9E	; 158
    2ff8:	fa 4f       	sbci	r31, 0xFA	; 250
    2ffa:	88 e0       	ldi	r24, 0x08	; 8
    2ffc:	82 83       	std	Z+2, r24	; 0x02
   thread_yield();
    2ffe:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <thread_yield>
   //asm volatile("ret"::); 
}
    3002:	08 95       	ret
void break_point_function() {
   int i;
   uint16_t index;
   index = 0;
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
      if ( current_thread == & ( thread_table[ i ] )) {
    3004:	21 e0       	ldi	r18, 0x01	; 1
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	e6 cf       	rjmp	.-52     	; 0x2fd6 <break_point_function+0x1a>

0000300a <postNewThreadTask>:


//-------------------------------------------------------------------------
void postNewThreadTask()
{
  if (thread_task_active == 0)
    300a:	80 91 b0 05 	lds	r24, 0x05B0
    300e:	81 11       	cpse	r24, r1
    3010:	08 95       	ret
  {
    postTask(thread_task, 2);
    3012:	8e e0       	ldi	r24, 0x0E	; 14
    3014:	9a e1       	ldi	r25, 0x1A	; 26
    3016:	62 e0       	ldi	r22, 0x02	; 2
    3018:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    thread_task_active = 1; 
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	80 93 b0 05 	sts	0x05B0, r24
    3022:	08 95       	ret

00003024 <thread_wakeup>:
/* thread_wakeup
 * This routine wakes up a thread that was put to sleep.
 */
void thread_wakeup(uint8_t id)
{
  if (id >= LITE_MAX_THREADS)
    3024:	82 30       	cpi	r24, 0x02	; 2
    3026:	08 f0       	brcs	.+2      	; 0x302a <thread_wakeup+0x6>
    3028:	08 95       	ret
  {
    return ;
  }
  if (thread_table[id].state == STATE_SLEEP)
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	9c 01       	movw	r18, r24
    302e:	22 0f       	add	r18, r18
    3030:	33 1f       	adc	r19, r19
    3032:	22 0f       	add	r18, r18
    3034:	33 1f       	adc	r19, r19
    3036:	22 0f       	add	r18, r18
    3038:	33 1f       	adc	r19, r19
    303a:	f9 01       	movw	r30, r18
    303c:	ee 0f       	add	r30, r30
    303e:	ff 1f       	adc	r31, r31
    3040:	ee 0f       	add	r30, r30
    3042:	ff 1f       	adc	r31, r31
    3044:	e2 0f       	add	r30, r18
    3046:	f3 1f       	adc	r31, r19
    3048:	e8 1b       	sub	r30, r24
    304a:	f9 0b       	sbc	r31, r25
    304c:	ee 59       	subi	r30, 0x9E	; 158
    304e:	fa 4f       	sbci	r31, 0xFA	; 250
    3050:	82 81       	ldd	r24, Z+2	; 0x02
    3052:	85 30       	cpi	r24, 0x05	; 5
    3054:	69 f0       	breq	.+26     	; 0x3070 <thread_wakeup+0x4c>
  {
    thread_table[id].state = STATE_ACTIVE;
  }
  if (thread_task_active == 0)
    3056:	80 91 b0 05 	lds	r24, 0x05B0
    305a:	88 23       	and	r24, r24
    305c:	29 f7       	brne	.-54     	; 0x3028 <thread_wakeup+0x4>
  {
    postTask(thread_task, 2);
    305e:	8e e0       	ldi	r24, 0x0E	; 14
    3060:	9a e1       	ldi	r25, 0x1A	; 26
    3062:	62 e0       	ldi	r22, 0x02	; 2
    3064:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    thread_task_active = 1; 
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	80 93 b0 05 	sts	0x05B0, r24
    306e:	08 95       	ret
  {
    return ;
  }
  if (thread_table[id].state == STATE_SLEEP)
  {
    thread_table[id].state = STATE_ACTIVE;
    3070:	82 e0       	ldi	r24, 0x02	; 2
    3072:	82 83       	std	Z+2, r24	; 0x02
    3074:	f0 cf       	rjmp	.-32     	; 0x3056 <thread_wakeup+0x32>

00003076 <thread_get_next>:



//This function uses the remaining credits to find out the appropriate next thread and returns it 
inline int thread_get_next()
{
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
  int currentcandidate;
  _atomic_t currentatomic;

  currentcandidate =  - 1;
  credits =  - 1;
  currentatomic = _atomic_start();
    3082:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3086:	28 2f       	mov	r18, r24
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_ACTIVE)
    3088:	80 91 64 05 	lds	r24, 0x0564
    308c:	82 30       	cpi	r24, 0x02	; 2
    308e:	09 f4       	brne	.+2      	; 0x3092 <thread_get_next+0x1c>
    3090:	87 c0       	rjmp	.+270    	; 0x31a0 <thread_get_next+0x12a>
    3092:	cf ef       	ldi	r28, 0xFF	; 255
    3094:	df ef       	ldi	r29, 0xFF	; 255
    3096:	ee 24       	eor	r14, r14
    3098:	ea 94       	dec	r14
    309a:	fe 2c       	mov	r15, r14
    309c:	80 91 8b 05 	lds	r24, 0x058B
    30a0:	82 30       	cpi	r24, 0x02	; 2
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <thread_get_next+0x30>
    30a4:	67 c0       	rjmp	.+206    	; 0x3174 <thread_get_next+0xfe>
        credits = thread_table[i].remaincredits;
        currentcandidate = i;
      }
    }
  }
  if (credits < 0)
    30a6:	8f ef       	ldi	r24, 0xFF	; 255
    30a8:	cf 3f       	cpi	r28, 0xFF	; 255
    30aa:	d8 07       	cpc	r29, r24
    30ac:	39 f1       	breq	.+78     	; 0x30fc <thread_get_next+0x86>
  {
    thread_task_active = 0;
  }
  _atomic_end(currentatomic);
    30ae:	87 01       	movw	r16, r14
    30b0:	82 2f       	mov	r24, r18
    30b2:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
  if (credits > 0)
    30b6:	cd 2b       	or	r28, r29
    30b8:	81 f1       	breq	.+96     	; 0x311a <thread_get_next+0xa4>
  {
    currentatomic = _atomic_start();
    30ba:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    thread_table[currentcandidate].remaincredits--;
    30be:	97 01       	movw	r18, r14
    30c0:	22 0f       	add	r18, r18
    30c2:	33 1f       	adc	r19, r19
    30c4:	22 0f       	add	r18, r18
    30c6:	33 1f       	adc	r19, r19
    30c8:	22 0f       	add	r18, r18
    30ca:	33 1f       	adc	r19, r19
    30cc:	f9 01       	movw	r30, r18
    30ce:	ee 0f       	add	r30, r30
    30d0:	ff 1f       	adc	r31, r31
    30d2:	ee 0f       	add	r30, r30
    30d4:	ff 1f       	adc	r31, r31
    30d6:	e2 0f       	add	r30, r18
    30d8:	f3 1f       	adc	r31, r19
    30da:	ee 19       	sub	r30, r14
    30dc:	ff 09       	sbc	r31, r15
    30de:	ee 59       	subi	r30, 0x9E	; 158
    30e0:	fa 4f       	sbci	r31, 0xFA	; 250
    30e2:	94 81       	ldd	r25, Z+4	; 0x04
    30e4:	91 50       	subi	r25, 0x01	; 1
    30e6:	94 83       	std	Z+4, r25	; 0x04
    _atomic_end(currentatomic);
    30e8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
  else if (credits < 0)
  {
    return  - 1;
  }
  return 0;
}
    30ec:	c8 01       	movw	r24, r16
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	1f 91       	pop	r17
    30f4:	0f 91       	pop	r16
    30f6:	ff 90       	pop	r15
    30f8:	ef 90       	pop	r14
    30fa:	08 95       	ret
      }
    }
  }
  if (credits < 0)
  {
    thread_task_active = 0;
    30fc:	10 92 b0 05 	sts	0x05B0, r1
  }
  _atomic_end(currentatomic);
    3100:	82 2f       	mov	r24, r18
    3102:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    3106:	0f ef       	ldi	r16, 0xFF	; 255
    3108:	1f ef       	ldi	r17, 0xFF	; 255
  else if (credits < 0)
  {
    return  - 1;
  }
  return 0;
}
    310a:	c8 01       	movw	r24, r16
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	ff 90       	pop	r15
    3116:	ef 90       	pop	r14
    3118:	08 95       	ret
    _atomic_end(currentatomic);
    return currentcandidate;
  }
  else if (credits == 0)
  {
    currentatomic = _atomic_start();
    311a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    311e:	28 2f       	mov	r18, r24
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
    3120:	80 91 64 05 	lds	r24, 0x0564
    3124:	82 30       	cpi	r24, 0x02	; 2
    3126:	09 f4       	brne	.+2      	; 0x312a <thread_get_next+0xb4>
    3128:	49 c0       	rjmp	.+146    	; 0x31bc <thread_get_next+0x146>
    312a:	80 91 8b 05 	lds	r24, 0x058B
    312e:	82 30       	cpi	r24, 0x02	; 2
    3130:	09 f4       	brne	.+2      	; 0x3134 <thread_get_next+0xbe>
    3132:	3f c0       	rjmp	.+126    	; 0x31b2 <thread_get_next+0x13c>
      {
        thread_table[i].remaincredits = thread_table[i].priority;
      }
    }
    thread_table[currentcandidate].remaincredits--;
    3134:	c7 01       	movw	r24, r14
    3136:	88 0f       	add	r24, r24
    3138:	99 1f       	adc	r25, r25
    313a:	88 0f       	add	r24, r24
    313c:	99 1f       	adc	r25, r25
    313e:	88 0f       	add	r24, r24
    3140:	99 1f       	adc	r25, r25
    3142:	fc 01       	movw	r30, r24
    3144:	ee 0f       	add	r30, r30
    3146:	ff 1f       	adc	r31, r31
    3148:	ee 0f       	add	r30, r30
    314a:	ff 1f       	adc	r31, r31
    314c:	e8 0f       	add	r30, r24
    314e:	f9 1f       	adc	r31, r25
    3150:	ee 19       	sub	r30, r14
    3152:	ff 09       	sbc	r31, r15
    3154:	ee 59       	subi	r30, 0x9E	; 158
    3156:	fa 4f       	sbci	r31, 0xFA	; 250
    3158:	84 81       	ldd	r24, Z+4	; 0x04
    315a:	81 50       	subi	r24, 0x01	; 1
    315c:	84 83       	std	Z+4, r24	; 0x04
    _atomic_end(currentatomic);
    315e:	82 2f       	mov	r24, r18
    3160:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
  else if (credits < 0)
  {
    return  - 1;
  }
  return 0;
}
    3164:	c8 01       	movw	r24, r16
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	1f 91       	pop	r17
    316c:	0f 91       	pop	r16
    316e:	ff 90       	pop	r15
    3170:	ef 90       	pop	r14
    3172:	08 95       	ret
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_ACTIVE)
    {
      if (credits < thread_table[i].remaincredits)
    3174:	80 91 8d 05 	lds	r24, 0x058D
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	c8 17       	cp	r28, r24
    317c:	d9 07       	cpc	r29, r25
    317e:	0c f0       	brlt	.+2      	; 0x3182 <thread_get_next+0x10c>
    3180:	96 cf       	rjmp	.-212    	; 0x30ae <thread_get_next+0x38>
      {
        credits = thread_table[i].remaincredits;
    3182:	80 91 8d 05 	lds	r24, 0x058D
    3186:	c8 2f       	mov	r28, r24
    3188:	d0 e0       	ldi	r29, 0x00	; 0
    318a:	71 e0       	ldi	r23, 0x01	; 1
    318c:	e7 2e       	mov	r14, r23
    318e:	f1 2c       	mov	r15, r1
  }
  if (credits < 0)
  {
    thread_task_active = 0;
  }
  _atomic_end(currentatomic);
    3190:	87 01       	movw	r16, r14
    3192:	82 2f       	mov	r24, r18
    3194:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
  if (credits > 0)
    3198:	cd 2b       	or	r28, r29
    319a:	09 f0       	breq	.+2      	; 0x319e <thread_get_next+0x128>
    319c:	8e cf       	rjmp	.-228    	; 0x30ba <thread_get_next+0x44>
    319e:	bd cf       	rjmp	.-134    	; 0x311a <thread_get_next+0xa4>
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_ACTIVE)
    {
      if (credits < thread_table[i].remaincredits)
    31a0:	80 91 66 05 	lds	r24, 0x0566
      {
        credits = thread_table[i].remaincredits;
    31a4:	80 91 66 05 	lds	r24, 0x0566
    31a8:	c8 2f       	mov	r28, r24
    31aa:	d0 e0       	ldi	r29, 0x00	; 0
    31ac:	ee 24       	eor	r14, r14
    31ae:	ff 24       	eor	r15, r15
    31b0:	75 cf       	rjmp	.-278    	; 0x309c <thread_get_next+0x26>
    currentatomic = _atomic_start();
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
      {
        thread_table[i].remaincredits = thread_table[i].priority;
    31b2:	80 91 8c 05 	lds	r24, 0x058C
    31b6:	80 93 8d 05 	sts	0x058D, r24
    31ba:	bc cf       	rjmp	.-136    	; 0x3134 <thread_get_next+0xbe>
    31bc:	80 91 65 05 	lds	r24, 0x0565
    31c0:	80 93 66 05 	sts	0x0566, r24
    31c4:	b2 cf       	rjmp	.-156    	; 0x312a <thread_get_next+0xb4>

000031c6 <destroy_user_thread>:
/* destroy_user_thread
 * This routine is only called when a users thread returns.
 * It removes it from the thread table.
 */
void destroy_user_thread()
{
    31c6:	1f 93       	push	r17
    31c8:	cf 93       	push	r28
    31ca:	df 93       	push	r29
  uint8_t *start,  *end;
  _atomic_t currentatomic;
  int indexofthread;

  currentatomic = _atomic_start();
    31cc:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    31d0:	18 2f       	mov	r17, r24
  current_thread->state = STATE_NULL;
    31d2:	e0 91 60 05 	lds	r30, 0x0560
    31d6:	f0 91 61 05 	lds	r31, 0x0561
    31da:	12 82       	std	Z+2, r1	; 0x02
  start = (uint8_t*)current_thread->ramstart;
    31dc:	81 89       	ldd	r24, Z+17	; 0x11
    31de:	92 89       	ldd	r25, Z+18	; 0x12
  end = (uint8_t*)current_thread->ramend;
    31e0:	63 89       	ldd	r22, Z+19	; 0x13
    31e2:	74 89       	ldd	r23, Z+20	; 0x14
  deleteThreadRegistrationInReceiverHandles(start, end);
    31e4:	0e 94 1f 0a 	call	0x143e	; 0x143e <deleteThreadRegistrationInReceiverHandles>
  
  indexofthread = getThreadIndexAddress();
    31e8:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
  
  
  if (thread_table[indexofthread].thread_clear_function != NULL)
    31ec:	9c 01       	movw	r18, r24
    31ee:	22 0f       	add	r18, r18
    31f0:	33 1f       	adc	r19, r19
    31f2:	22 0f       	add	r18, r18
    31f4:	33 1f       	adc	r19, r19
    31f6:	22 0f       	add	r18, r18
    31f8:	33 1f       	adc	r19, r19
    31fa:	e9 01       	movw	r28, r18
    31fc:	cc 0f       	add	r28, r28
    31fe:	dd 1f       	adc	r29, r29
    3200:	cc 0f       	add	r28, r28
    3202:	dd 1f       	adc	r29, r29
    3204:	c2 0f       	add	r28, r18
    3206:	d3 1f       	adc	r29, r19
    3208:	c8 1b       	sub	r28, r24
    320a:	d9 0b       	sbc	r29, r25
    320c:	ce 59       	subi	r28, 0x9E	; 158
    320e:	da 4f       	sbci	r29, 0xFA	; 250
    3210:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3212:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3214:	30 97       	sbiw	r30, 0x00	; 0
    3216:	19 f0       	breq	.+6      	; 0x321e <destroy_user_thread+0x58>
  {
    (*thread_table[indexofthread].thread_clear_function)();
    3218:	09 95       	icall
    thread_table[indexofthread].thread_clear_function = NULL;
    321a:	1c 8e       	std	Y+28, r1	; 0x1c
    321c:	1b 8e       	std	Y+27, r1	; 0x1b
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_THREADDESTROY
      addTrace(TRACE_THREADDESTROY, 100);
    #endif 
  #endif 
  thread_yield();
    321e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <thread_yield>
  _atomic_end(currentatomic);
    3222:	81 2f       	mov	r24, r17
    3224:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    3228:	df 91       	pop	r29
    322a:	cf 91       	pop	r28
    322c:	1f 91       	pop	r17
    322e:	08 95       	ret

00003230 <thread_func_dispatcher>:
// also make sure no functions are called with attributes
void thread_func_dispatcher()__attribute__((naked));
void thread_func_dispatcher()
{
  //    (*current_thread->data.tp)();
  call_fcn_ptr(current_thread->data.tp);
    3230:	e0 91 60 05 	lds	r30, 0x0560
    3234:	f0 91 61 05 	lds	r31, 0x0561
    3238:	85 8d       	ldd	r24, Z+29	; 0x1d
    323a:	96 8d       	ldd	r25, Z+30	; 0x1e
    323c:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <call_fcn_ptr>
  destroy_user_thread();
    3240:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <destroy_user_thread>

00003244 <create_thread>:


int create_thread(void(*fcn)(), uint16_t *ram_start, uint16_t *stack_ptr,
  uint16_t staticdatasize, uint8_t priority, char *threadName, uint16_t
  romstart, uint16_t romsize)
{
    3244:	2f 92       	push	r2
    3246:	3f 92       	push	r3
    3248:	4f 92       	push	r4
    324a:	5f 92       	push	r5
    324c:	6f 92       	push	r6
    324e:	7f 92       	push	r7
    3250:	8f 92       	push	r8
    3252:	9f 92       	push	r9
    3254:	af 92       	push	r10
    3256:	bf 92       	push	r11
    3258:	cf 92       	push	r12
    325a:	df 92       	push	r13
    325c:	ef 92       	push	r14
    325e:	ff 92       	push	r15
    3260:	0f 93       	push	r16
    3262:	1f 93       	push	r17
    3264:	cf 93       	push	r28
    3266:	df 93       	push	r29
    3268:	3c 01       	movw	r6, r24
    326a:	1b 01       	movw	r2, r22
    326c:	4a 01       	movw	r8, r20
    326e:	29 01       	movw	r4, r18
//--------------------------------------------------------------------------
//this is still working as it checks if the upperfound of threads are larger than the spvalue or not. 
uint8_t is_thread()
{
  uint16_t SPvalue;
  asm volatile("in %A0, 0x3d""\n\t""in %B0, 0x3e""\n\t": "=r"(SPvalue): );
    3270:	8d b7       	in	r24, 0x3d	; 61
    3272:	9e b7       	in	r25, 0x3e	; 62

  if (SPvalue > (uint16_t)maxthreadrambound)
    3274:	20 91 b3 05 	lds	r18, 0x05B3
    3278:	30 91 b4 05 	lds	r19, 0x05B4
    327c:	28 17       	cp	r18, r24
    327e:	39 07       	cpc	r19, r25
    3280:	60 f4       	brcc	.+24     	; 0x329a <create_thread+0x56>
  //we do not allow threads context to create new threads
  if (is_thread())
  {
    return (0);
  }
  if (stack_ptr > maxthreadrambound)
    3282:	24 17       	cp	r18, r20
    3284:	35 07       	cpc	r19, r21
    3286:	f8 f0       	brcs	.+62     	; 0x32c6 <create_thread+0x82>
  }
  //First loop all the way through the table and find an empty slot 
  //computation time for space here 
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_NULL)
    3288:	80 91 64 05 	lds	r24, 0x0564
    328c:	88 23       	and	r24, r24
    328e:	09 f4       	brne	.+2      	; 0x3292 <create_thread+0x4e>
    3290:	9f c0       	rjmp	.+318    	; 0x33d0 <create_thread+0x18c>
    3292:	80 91 8b 05 	lds	r24, 0x058B
    3296:	88 23       	and	r24, r24
    3298:	d9 f0       	breq	.+54     	; 0x32d0 <create_thread+0x8c>
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_THREADCREATE
      addTrace(TRACE_THREADCREATE, 100);
    #endif 
  #endif 
  return (1);
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
}
    329e:	c9 01       	movw	r24, r18
    32a0:	df 91       	pop	r29
    32a2:	cf 91       	pop	r28
    32a4:	1f 91       	pop	r17
    32a6:	0f 91       	pop	r16
    32a8:	ff 90       	pop	r15
    32aa:	ef 90       	pop	r14
    32ac:	df 90       	pop	r13
    32ae:	cf 90       	pop	r12
    32b0:	bf 90       	pop	r11
    32b2:	af 90       	pop	r10
    32b4:	9f 90       	pop	r9
    32b6:	8f 90       	pop	r8
    32b8:	7f 90       	pop	r7
    32ba:	6f 90       	pop	r6
    32bc:	5f 90       	pop	r5
    32be:	4f 90       	pop	r4
    32c0:	3f 90       	pop	r3
    32c2:	2f 90       	pop	r2
    32c4:	08 95       	ret
  {
    return (0);
  }
  if (stack_ptr > maxthreadrambound)
  {
    maxthreadrambound = stack_ptr;
    32c6:	50 93 b4 05 	sts	0x05B4, r21
    32ca:	40 93 b3 05 	sts	0x05B3, r20
    32ce:	dc cf       	rjmp	.-72     	; 0x3288 <create_thread+0x44>
  }
  //First loop all the way through the table and find an empty slot 
  //computation time for space here 
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_NULL)
    32d0:	c1 e0       	ldi	r28, 0x01	; 1
    32d2:	d0 e0       	ldi	r29, 0x00	; 0
  if (i == LITE_MAX_THREADS)
  {
    return (0);
  }
  //Add the thread
  currentatomic = _atomic_start();
    32d4:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    32d8:	18 2f       	mov	r17, r24
  //Populate the thread table
  current_thread = &thread_table[i];
    32da:	ce 01       	movw	r24, r28
    32dc:	88 0f       	add	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	88 0f       	add	r24, r24
    32e2:	99 1f       	adc	r25, r25
    32e4:	88 0f       	add	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	fc 01       	movw	r30, r24
    32ea:	ee 0f       	add	r30, r30
    32ec:	ff 1f       	adc	r31, r31
    32ee:	ee 0f       	add	r30, r30
    32f0:	ff 1f       	adc	r31, r31
    32f2:	e8 0f       	add	r30, r24
    32f4:	f9 1f       	adc	r31, r25
    32f6:	ec 1b       	sub	r30, r28
    32f8:	fd 0b       	sbc	r31, r29
    32fa:	ee 59       	subi	r30, 0x9E	; 158
    32fc:	fa 4f       	sbci	r31, 0xFA	; 250
    32fe:	f0 93 61 05 	sts	0x0561, r31
    3302:	e0 93 60 05 	sts	0x0560, r30
  current_thread->sp = stack_ptr;
    3306:	91 82       	std	Z+1, r9	; 0x01
    3308:	80 82       	st	Z, r8
  current_thread->state = STATE_ACTIVE;
    330a:	82 e0       	ldi	r24, 0x02	; 2
    330c:	82 83       	std	Z+2, r24	; 0x02
  current_thread->data.tp = fcn;
    330e:	76 8e       	std	Z+30, r7	; 0x1e
    3310:	65 8e       	std	Z+29, r6	; 0x1d
  current_thread->priority = priority;
    3312:	03 83       	std	Z+3, r16	; 0x03
  current_thread->remaincredits = priority;
    3314:	04 83       	std	Z+4, r16	; 0x04
  current_thread->ramstart = ram_start;
    3316:	32 8a       	std	Z+18, r3	; 0x12
    3318:	21 8a       	std	Z+17, r2	; 0x11
  current_thread->ramend = stack_ptr;
    331a:	94 8a       	std	Z+20, r9	; 0x14
    331c:	83 8a       	std	Z+19, r8	; 0x13
  current_thread->thread_clear_function = NULL; 
    331e:	14 8e       	std	Z+28, r1	; 0x1c
    3320:	13 8e       	std	Z+27, r1	; 0x1b

  //if the thread is created by the kernel directly, then the following are all 0. 
  current_thread->sizeofBss = staticdatasize;
    3322:	56 8a       	std	Z+22, r5	; 0x16
    3324:	45 8a       	std	Z+21, r4	; 0x15
  current_thread->romstart = romstart;
    3326:	d0 8e       	std	Z+24, r13	; 0x18
    3328:	c7 8a       	std	Z+23, r12	; 0x17
  current_thread->romsize = romsize;
    332a:	b2 8e       	std	Z+26, r11	; 0x1a
    332c:	a1 8e       	std	Z+25, r10	; 0x19

 //COPY file name 
  {
    uint8_t templen;

    templen = mystrlen(threadName);
    332e:	c7 01       	movw	r24, r14
    3330:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    mystrncpy((char*)current_thread->threadName, (char*)threadName, templen + 1)
    3334:	20 91 60 05 	lds	r18, 0x0560
    3338:	30 91 61 05 	lds	r19, 0x0561
    333c:	48 2f       	mov	r20, r24
    333e:	4f 5f       	subi	r20, 0xFF	; 255
    3340:	c9 01       	movw	r24, r18
    3342:	05 96       	adiw	r24, 0x05	; 5
    3344:	b7 01       	movw	r22, r14
    3346:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
      ;
  }
  
  //set up the corruption detection 
  
  kernelptr = (uint16_t*)((uint8_t*)ram_start + staticdatasize);
    334a:	f1 01       	movw	r30, r2
    334c:	e4 0d       	add	r30, r4
    334e:	f5 1d       	adc	r31, r5
  *kernelptr = 0xeeff;
    3350:	8f ef       	ldi	r24, 0xFF	; 255
    3352:	9e ee       	ldi	r25, 0xEE	; 238
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	80 83       	st	Z, r24
  *(kernelptr + 1) = 0xeeff;
    3358:	93 83       	std	Z+3, r25	; 0x03
    335a:	82 83       	std	Z+2, r24	; 0x02
  
  #ifdef PLATFORM_AVR
    //Prepare the fcn pointer on the new stack, so it can be 
    //prepare set the beginning as the function then registers as 0. 
    PREPARE_REG_FOR_STACK();
    335c:	8d b7       	in	r24, 0x3d	; 61
    335e:	9e b7       	in	r25, 0x3e	; 62
    3360:	90 93 5f 05 	sts	0x055F, r25
    3364:	80 93 5e 05 	sts	0x055E, r24
    3368:	e0 91 60 05 	lds	r30, 0x0560
    336c:	f0 91 61 05 	lds	r31, 0x0561
    3370:	80 81       	ld	r24, Z
    3372:	91 81       	ldd	r25, Z+1	; 0x01
    3374:	9e bf       	out	0x3e, r25	; 62
    3376:	8d bf       	out	0x3d, r24	; 61
    3378:	88 e1       	ldi	r24, 0x18	; 24
    337a:	99 e1       	ldi	r25, 0x19	; 25
    337c:	8f 93       	push	r24
    337e:	9f 93       	push	r25
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	1f 92       	push	r1
    3386:	01 96       	adiw	r24, 0x01	; 1
    3388:	82 32       	cpi	r24, 0x22	; 34
    338a:	91 05       	cpc	r25, r1
    338c:	d9 f7       	brne	.-10     	; 0x3384 <create_thread+0x140>
    338e:	8d b7       	in	r24, 0x3d	; 61
    3390:	9e b7       	in	r25, 0x3e	; 62
    3392:	91 83       	std	Z+1, r25	; 0x01
    3394:	80 83       	st	Z, r24
    3396:	80 91 5e 05 	lds	r24, 0x055E
    339a:	90 91 5f 05 	lds	r25, 0x055F
    339e:	9e bf       	out	0x3e, r25	; 62
    33a0:	8d bf       	out	0x3d, r24	; 61
  #endif 
  
  
  current_thread = 0;
    33a2:	10 92 61 05 	sts	0x0561, r1
    33a6:	10 92 60 05 	sts	0x0560, r1
  if (!thread_task_active)
    33aa:	80 91 b0 05 	lds	r24, 0x05B0
    33ae:	88 23       	and	r24, r24
    33b0:	31 f0       	breq	.+12     	; 0x33be <create_thread+0x17a>
  {
    postTask(thread_task, 2);
    thread_task_active = 1;
  }
  _atomic_end(currentatomic);
    33b2:	81 2f       	mov	r24, r17
    33b4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    33b8:	21 e0       	ldi	r18, 0x01	; 1
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	70 cf       	rjmp	.-288    	; 0x329e <create_thread+0x5a>
  
  
  current_thread = 0;
  if (!thread_task_active)
  {
    postTask(thread_task, 2);
    33be:	8e e0       	ldi	r24, 0x0E	; 14
    33c0:	9a e1       	ldi	r25, 0x1A	; 26
    33c2:	62 e0       	ldi	r22, 0x02	; 2
    33c4:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    thread_task_active = 1;
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	80 93 b0 05 	sts	0x05B0, r24
    33ce:	f1 cf       	rjmp	.-30     	; 0x33b2 <create_thread+0x16e>
  }
  //First loop all the way through the table and find an empty slot 
  //computation time for space here 
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_NULL)
    33d0:	c0 e0       	ldi	r28, 0x00	; 0
    33d2:	d0 e0       	ldi	r29, 0x00	; 0
    33d4:	7f cf       	rjmp	.-258    	; 0x32d4 <create_thread+0x90>

000033d6 <thread_init>:
 


//-------------------------------------------------------------------------
void thread_init()
{
    33d6:	1f 93       	push	r17
 
  _atomic_t currentatomic;

  currentatomic = _atomic_start();
    33d8:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    33dc:	18 2f       	mov	r17, r24
  
  //initilize the thread table
  nmemset(thread_table, 0, sizeof(thread) *LITE_MAX_THREADS);
    33de:	82 e6       	ldi	r24, 0x62	; 98
    33e0:	95 e0       	ldi	r25, 0x05	; 5
    33e2:	60 e0       	ldi	r22, 0x00	; 0
    33e4:	70 e0       	ldi	r23, 0x00	; 0
    33e6:	4e e4       	ldi	r20, 0x4E	; 78
    33e8:	50 e0       	ldi	r21, 0x00	; 0
    33ea:	0e 94 43 3c 	call	0x7886	; 0x7886 <nmemset>
    
  //init all the variables 
  current_thread = 0;
    33ee:	10 92 61 05 	sts	0x0561, r1
    33f2:	10 92 60 05 	sts	0x0560, r1
  old_stack_ptr = 0;
    33f6:	10 92 5f 05 	sts	0x055F, r1
    33fa:	10 92 5e 05 	sts	0x055E, r1
  stackinterrupt_ptr = 0;
    33fe:	10 92 b2 05 	sts	0x05B2, r1
    3402:	10 92 b1 05 	sts	0x05B1, r1
  thread_task_active = 0;
    3406:	10 92 b0 05 	sts	0x05B0, r1
  maxthreadrambound = 0;
    340a:	10 92 b4 05 	sts	0x05B4, r1
    340e:	10 92 b3 05 	sts	0x05B3, r1
  _atomic_end(currentatomic);
    3412:	81 2f       	mov	r24, r17
    3414:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
  //    TimerM_Timer_start(9, TIMER_REPEAT, 1000);
}
    3418:	1f 91       	pop	r17
    341a:	08 95       	ret

0000341c <thread_task>:



//-------------------------------------------------------------------------
void thread_task()
{
    341c:	ff 92       	push	r15
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
  int i;
  uint8_t thread_presleep;
  _atomic_t currentatomic;
   

  currentatomic = _atomic_start();
    3426:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    342a:	f8 2e       	mov	r15, r24
  thread_presleep = 0;

  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_PRESLEEP)
    342c:	80 91 64 05 	lds	r24, 0x0564
    3430:	84 30       	cpi	r24, 0x04	; 4
    3432:	09 f4       	brne	.+2      	; 0x3436 <thread_task+0x1a>
    3434:	bd c0       	rjmp	.+378    	; 0x35b0 <thread_task+0x194>
    3436:	80 91 8b 05 	lds	r24, 0x058B
    343a:	84 30       	cpi	r24, 0x04	; 4
    343c:	09 f4       	brne	.+2      	; 0x3440 <thread_task+0x24>
    343e:	e1 c0       	rjmp	.+450    	; 0x3602 <thread_task+0x1e6>
    
    thread_presleep = 0;
    return ;
  }
  
  _atomic_end(currentatomic);
    3440:	8f 2d       	mov	r24, r15
    3442:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
  int currentcandidate;
  _atomic_t currentatomic;

  currentcandidate =  - 1;
  credits =  - 1;
  currentatomic = _atomic_start();
    3446:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    344a:	28 2f       	mov	r18, r24
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_ACTIVE)
    344c:	80 91 64 05 	lds	r24, 0x0564
    3450:	82 30       	cpi	r24, 0x02	; 2
    3452:	09 f4       	brne	.+2      	; 0x3456 <thread_task+0x3a>
    3454:	9a c0       	rjmp	.+308    	; 0x358a <thread_task+0x16e>
    3456:	cf ef       	ldi	r28, 0xFF	; 255
    3458:	df ef       	ldi	r29, 0xFF	; 255
    345a:	0f ef       	ldi	r16, 0xFF	; 255
    345c:	1f ef       	ldi	r17, 0xFF	; 255
    345e:	80 91 8b 05 	lds	r24, 0x058B
    3462:	82 30       	cpi	r24, 0x02	; 2
    3464:	09 f4       	brne	.+2      	; 0x3468 <thread_task+0x4c>
    3466:	54 c0       	rjmp	.+168    	; 0x3510 <thread_task+0xf4>
        credits = thread_table[i].remaincredits;
        currentcandidate = i;
      }
    }
  }
  if (credits < 0)
    3468:	ff ef       	ldi	r31, 0xFF	; 255
    346a:	cf 3f       	cpi	r28, 0xFF	; 255
    346c:	df 07       	cpc	r29, r31
    346e:	09 f4       	brne	.+2      	; 0x3472 <thread_task+0x56>
    3470:	5d c0       	rjmp	.+186    	; 0x352c <thread_task+0x110>
  {
    thread_task_active = 0;
  }
  _atomic_end(currentatomic);
    3472:	82 2f       	mov	r24, r18
    3474:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
  if (credits > 0)
    3478:	cd 2b       	or	r28, r29
    347a:	09 f4       	brne	.+2      	; 0x347e <thread_task+0x62>
    347c:	62 c0       	rjmp	.+196    	; 0x3542 <thread_task+0x126>
  {
    currentatomic = _atomic_start();
    347e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    thread_table[currentcandidate].remaincredits--;
    3482:	98 01       	movw	r18, r16
    3484:	22 0f       	add	r18, r18
    3486:	33 1f       	adc	r19, r19
    3488:	22 0f       	add	r18, r18
    348a:	33 1f       	adc	r19, r19
    348c:	22 0f       	add	r18, r18
    348e:	33 1f       	adc	r19, r19
    3490:	f9 01       	movw	r30, r18
    3492:	ee 0f       	add	r30, r30
    3494:	ff 1f       	adc	r31, r31
    3496:	ee 0f       	add	r30, r30
    3498:	ff 1f       	adc	r31, r31
    349a:	e2 0f       	add	r30, r18
    349c:	f3 1f       	adc	r31, r19
    349e:	e0 1b       	sub	r30, r16
    34a0:	f1 0b       	sbc	r31, r17
    34a2:	ee 59       	subi	r30, 0x9E	; 158
    34a4:	fa 4f       	sbci	r31, 0xFA	; 250
    34a6:	94 81       	ldd	r25, Z+4	; 0x04
    34a8:	91 50       	subi	r25, 0x01	; 1
    34aa:	94 83       	std	Z+4, r25	; 0x04
    _atomic_end(currentatomic);
    34ac:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
  }
  
  _atomic_end(currentatomic);
  
  i = thread_get_next();
  if (i < 0)
    34b0:	8f ef       	ldi	r24, 0xFF	; 255
    34b2:	0f 3f       	cpi	r16, 0xFF	; 255
    34b4:	18 07       	cpc	r17, r24
    34b6:	31 f1       	breq	.+76     	; 0x3504 <thread_task+0xe8>
  {
    //here is the exit      
    return ;
  }
  postTask(thread_task, 3);
    34b8:	8e e0       	ldi	r24, 0x0E	; 14
    34ba:	9a e1       	ldi	r25, 0x1A	; 26
    34bc:	63 e0       	ldi	r22, 0x03	; 3
    34be:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
  
  i = check_for_memory_corrupt(i);
    34c2:	c8 01       	movw	r24, r16
    34c4:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <check_for_memory_corrupt>
    34c8:	ac 01       	movw	r20, r24
  if (i < 0)
    34ca:	97 fd       	sbrc	r25, 7
    34cc:	1b c0       	rjmp	.+54     	; 0x3504 <thread_task+0xe8>
  if (nextwriteaddr == 3001)
   nextwriteaddr = 2701; 
  write8uint(nextwriteaddr, 0xFF); 
   */

  current_thread = &(thread_table[i]);
    34ce:	88 0f       	add	r24, r24
    34d0:	99 1f       	adc	r25, r25
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	88 0f       	add	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	9c 01       	movw	r18, r24
    34dc:	22 0f       	add	r18, r18
    34de:	33 1f       	adc	r19, r19
    34e0:	22 0f       	add	r18, r18
    34e2:	33 1f       	adc	r19, r19
    34e4:	82 0f       	add	r24, r18
    34e6:	93 1f       	adc	r25, r19
    34e8:	84 1b       	sub	r24, r20
    34ea:	95 0b       	sbc	r25, r21
    34ec:	8e 59       	subi	r24, 0x9E	; 158
    34ee:	9a 4f       	sbci	r25, 0xFA	; 250
    34f0:	90 93 61 05 	sts	0x0561, r25
    34f4:	80 93 60 05 	sts	0x0560, r24
  
  //printfintegeru32(i);
  //printfstr(" thread index\n");
  
  lite_switch_to_user_thread();    
    34f8:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <lite_switch_to_user_thread>
 
  //printfstr("now switching out\n");
 
  current_thread = 0;
    34fc:	10 92 61 05 	sts	0x0561, r1
    3500:	10 92 60 05 	sts	0x0560, r1
  
  
  return ;
}
    3504:	df 91       	pop	r29
    3506:	cf 91       	pop	r28
    3508:	1f 91       	pop	r17
    350a:	0f 91       	pop	r16
    350c:	ff 90       	pop	r15
    350e:	08 95       	ret
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_ACTIVE)
    {
      if (credits < thread_table[i].remaincredits)
    3510:	80 91 8d 05 	lds	r24, 0x058D
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	c8 17       	cp	r28, r24
    3518:	d9 07       	cpc	r29, r25
    351a:	0c f0       	brlt	.+2      	; 0x351e <thread_task+0x102>
    351c:	aa cf       	rjmp	.-172    	; 0x3472 <thread_task+0x56>
      {
        credits = thread_table[i].remaincredits;
    351e:	80 91 8d 05 	lds	r24, 0x058D
    3522:	c8 2f       	mov	r28, r24
    3524:	d0 e0       	ldi	r29, 0x00	; 0
    3526:	01 e0       	ldi	r16, 0x01	; 1
    3528:	10 e0       	ldi	r17, 0x00	; 0
    352a:	a3 cf       	rjmp	.-186    	; 0x3472 <thread_task+0x56>
      }
    }
  }
  if (credits < 0)
  {
    thread_task_active = 0;
    352c:	10 92 b0 05 	sts	0x05B0, r1
  }
  _atomic_end(currentatomic);
    3530:	82 2f       	mov	r24, r18
    3532:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
 
  current_thread = 0;
  
  
  return ;
}
    3536:	df 91       	pop	r29
    3538:	cf 91       	pop	r28
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	ff 90       	pop	r15
    3540:	08 95       	ret
    _atomic_end(currentatomic);
    return currentcandidate;
  }
  else if (credits == 0)
  {
    currentatomic = _atomic_start();
    3542:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3546:	28 2f       	mov	r18, r24
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
    3548:	80 91 64 05 	lds	r24, 0x0564
    354c:	82 30       	cpi	r24, 0x02	; 2
    354e:	59 f1       	breq	.+86     	; 0x35a6 <thread_task+0x18a>
    3550:	80 91 8b 05 	lds	r24, 0x058B
    3554:	82 30       	cpi	r24, 0x02	; 2
    3556:	11 f1       	breq	.+68     	; 0x359c <thread_task+0x180>
      {
        thread_table[i].remaincredits = thread_table[i].priority;
      }
    }
    thread_table[currentcandidate].remaincredits--;
    3558:	c8 01       	movw	r24, r16
    355a:	88 0f       	add	r24, r24
    355c:	99 1f       	adc	r25, r25
    355e:	88 0f       	add	r24, r24
    3560:	99 1f       	adc	r25, r25
    3562:	88 0f       	add	r24, r24
    3564:	99 1f       	adc	r25, r25
    3566:	fc 01       	movw	r30, r24
    3568:	ee 0f       	add	r30, r30
    356a:	ff 1f       	adc	r31, r31
    356c:	ee 0f       	add	r30, r30
    356e:	ff 1f       	adc	r31, r31
    3570:	e8 0f       	add	r30, r24
    3572:	f9 1f       	adc	r31, r25
    3574:	e0 1b       	sub	r30, r16
    3576:	f1 0b       	sbc	r31, r17
    3578:	ee 59       	subi	r30, 0x9E	; 158
    357a:	fa 4f       	sbci	r31, 0xFA	; 250
    357c:	84 81       	ldd	r24, Z+4	; 0x04
    357e:	81 50       	subi	r24, 0x01	; 1
    3580:	84 83       	std	Z+4, r24	; 0x04
    _atomic_end(currentatomic);
    3582:	82 2f       	mov	r24, r18
    3584:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    3588:	93 cf       	rjmp	.-218    	; 0x34b0 <thread_task+0x94>
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_ACTIVE)
    {
      if (credits < thread_table[i].remaincredits)
    358a:	80 91 66 05 	lds	r24, 0x0566
      {
        credits = thread_table[i].remaincredits;
    358e:	80 91 66 05 	lds	r24, 0x0566
    3592:	c8 2f       	mov	r28, r24
    3594:	d0 e0       	ldi	r29, 0x00	; 0
    3596:	00 e0       	ldi	r16, 0x00	; 0
    3598:	10 e0       	ldi	r17, 0x00	; 0
    359a:	61 cf       	rjmp	.-318    	; 0x345e <thread_task+0x42>
    currentatomic = _atomic_start();
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
      {
        thread_table[i].remaincredits = thread_table[i].priority;
    359c:	80 91 8c 05 	lds	r24, 0x058C
    35a0:	80 93 8d 05 	sts	0x058D, r24
    35a4:	d9 cf       	rjmp	.-78     	; 0x3558 <thread_task+0x13c>
    35a6:	80 91 65 05 	lds	r24, 0x0565
    35aa:	80 93 66 05 	sts	0x0566, r24
    35ae:	d0 cf       	rjmp	.-96     	; 0x3550 <thread_task+0x134>
  currentatomic = _atomic_start();
  thread_presleep = 0;

  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_PRESLEEP)
    35b0:	c0 e0       	ldi	r28, 0x00	; 0
    35b2:	d0 e0       	ldi	r29, 0x00	; 0
  }
  thread_presleep = (i != LITE_MAX_THREADS);

  if (thread_presleep)
  {
    postTask(thread_task, 3);
    35b4:	8e e0       	ldi	r24, 0x0E	; 14
    35b6:	9a e1       	ldi	r25, 0x1A	; 26
    35b8:	63 e0       	ldi	r22, 0x03	; 3
    35ba:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    
    thread_table[i].state = STATE_SLEEP;
    35be:	ce 01       	movw	r24, r28
    35c0:	88 0f       	add	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	88 0f       	add	r24, r24
    35c6:	99 1f       	adc	r25, r25
    35c8:	88 0f       	add	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	8c 01       	movw	r16, r24
    35ce:	00 0f       	add	r16, r16
    35d0:	11 1f       	adc	r17, r17
    35d2:	00 0f       	add	r16, r16
    35d4:	11 1f       	adc	r17, r17
    35d6:	08 0f       	add	r16, r24
    35d8:	19 1f       	adc	r17, r25
    35da:	0c 1b       	sub	r16, r28
    35dc:	1d 0b       	sbc	r17, r29
    35de:	0e 59       	subi	r16, 0x9E	; 158
    35e0:	1a 4f       	sbci	r17, 0xFA	; 250
    35e2:	85 e0       	ldi	r24, 0x05	; 5
    35e4:	f8 01       	movw	r30, r16
    35e6:	82 83       	std	Z+2, r24	; 0x02
    
    _atomic_end(currentatomic);
    35e8:	8f 2d       	mov	r24, r15
    35ea:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    // TimerM_Timer_start( i, TIMER_ONE_SHOT, thread_table[ i ].data.sleepstate.sleeptime );
    GenericTimerStart(i, TIMER_ONE_SHOT,
    35ee:	f8 01       	movw	r30, r16
    35f0:	25 8d       	ldd	r18, Z+29	; 0x1d
    35f2:	36 8d       	ldd	r19, Z+30	; 0x1e
    35f4:	40 e0       	ldi	r20, 0x00	; 0
    35f6:	50 e0       	ldi	r21, 0x00	; 0
    35f8:	8c 2f       	mov	r24, r28
    35fa:	61 e0       	ldi	r22, 0x01	; 1
    35fc:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <GenericTimerStart>
    3600:	81 cf       	rjmp	.-254    	; 0x3504 <thread_task+0xe8>
  currentatomic = _atomic_start();
  thread_presleep = 0;

  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_PRESLEEP)
    3602:	c1 e0       	ldi	r28, 0x01	; 1
    3604:	d0 e0       	ldi	r29, 0x00	; 0
    3606:	d6 cf       	rjmp	.-84     	; 0x35b4 <thread_task+0x198>

00003608 <memory_conflict_detect>:


//-------------------------------------------------------------------------
uint8_t memory_conflict_detect(uint16_t createflashromstart, uint16_t
  createflashromsize, uint16_t ramstackstart, uint16_t ramstackend)
{
    3608:	af 92       	push	r10
    360a:	bf 92       	push	r11
    360c:	cf 92       	push	r12
    360e:	df 92       	push	r13
    3610:	ef 92       	push	r14
    3612:	ff 92       	push	r15
    3614:	0f 93       	push	r16
    3616:	1f 93       	push	r17
    3618:	cf 93       	push	r28
    361a:	df 93       	push	r29
    361c:	7c 01       	movw	r14, r24
    361e:	6a 01       	movw	r12, r20
    3620:	59 01       	movw	r10, r18
      }
      userthreadromstart = thread_table[i].romstart;
      userthreadromend = thread_table[i].romsize / 2+userthreadromstart;
      userthreadramstart = (uint16_t)thread_table[i].ramstart;
      userthreadramend = (uint16_t)thread_table[i].ramend;
      if (!((createflashromstart > userthreadromend + 2) || 
    3622:	76 95       	lsr	r23
    3624:	67 95       	ror	r22
    3626:	68 0f       	add	r22, r24
    3628:	79 1f       	adc	r23, r25
    362a:	c3 e7       	ldi	r28, 0x73	; 115
    362c:	d5 e0       	ldi	r29, 0x05	; 5
    362e:	a0 e0       	ldi	r26, 0x00	; 0
    3630:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t userthreadramstart;
  uint16_t userthreadramend;

  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state != STATE_NULL)
    3632:	fd 01       	movw	r30, r26
    3634:	ee 0f       	add	r30, r30
    3636:	ff 1f       	adc	r31, r31
    3638:	ee 0f       	add	r30, r30
    363a:	ff 1f       	adc	r31, r31
    363c:	ee 0f       	add	r30, r30
    363e:	ff 1f       	adc	r31, r31
    3640:	cf 01       	movw	r24, r30
    3642:	88 0f       	add	r24, r24
    3644:	99 1f       	adc	r25, r25
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	e8 0f       	add	r30, r24
    364c:	f9 1f       	adc	r31, r25
    364e:	ea 1b       	sub	r30, r26
    3650:	fb 0b       	sbc	r31, r27
    3652:	ee 59       	subi	r30, 0x9E	; 158
    3654:	fa 4f       	sbci	r31, 0xFA	; 250
    3656:	82 81       	ldd	r24, Z+2	; 0x02
    3658:	88 23       	and	r24, r24
    365a:	11 f1       	breq	.+68     	; 0x36a0 <memory_conflict_detect+0x98>
    {
      if (thread_table[i].romstart == 0)
    365c:	ee 81       	ldd	r30, Y+6	; 0x06
    365e:	ff 81       	ldd	r31, Y+7	; 0x07
    3660:	30 97       	sbiw	r30, 0x00	; 0
    3662:	f1 f0       	breq	.+60     	; 0x36a0 <memory_conflict_detect+0x98>
      {
        continue;
      }
      userthreadromstart = thread_table[i].romstart;
      userthreadromend = thread_table[i].romsize / 2+userthreadromstart;
      userthreadramstart = (uint16_t)thread_table[i].ramstart;
    3664:	08 81       	ld	r16, Y
    3666:	19 81       	ldd	r17, Y+1	; 0x01
      userthreadramend = (uint16_t)thread_table[i].ramend;
    3668:	4a 81       	ldd	r20, Y+2	; 0x02
    366a:	5b 81       	ldd	r21, Y+3	; 0x03
      if (!((createflashromstart > userthreadromend + 2) || 
    366c:	9f 01       	movw	r18, r30
    366e:	2e 5f       	subi	r18, 0xFE	; 254
    3670:	3f 4f       	sbci	r19, 0xFF	; 255
    3672:	88 85       	ldd	r24, Y+8	; 0x08
    3674:	99 85       	ldd	r25, Y+9	; 0x09
    3676:	96 95       	lsr	r25
    3678:	87 95       	ror	r24
    367a:	28 0f       	add	r18, r24
    367c:	39 1f       	adc	r19, r25
    367e:	2e 15       	cp	r18, r14
    3680:	3f 05       	cpc	r19, r15
    3682:	20 f0       	brcs	.+8      	; 0x368c <memory_conflict_detect+0x84>
    3684:	32 97       	sbiw	r30, 0x02	; 2
    3686:	6e 17       	cp	r22, r30
    3688:	7f 07       	cpc	r23, r31
    368a:	d8 f4       	brcc	.+54     	; 0x36c2 <memory_conflict_detect+0xba>
        (createflashromstart + createflashromsize / 2 < userthreadromstart - 2))
        )
      {
        return 1;
      }
      if (!((ramstackstart > userthreadramend + 1) || (ramstackend <
    368c:	4f 5f       	subi	r20, 0xFF	; 255
    368e:	5f 4f       	sbci	r21, 0xFF	; 255
    3690:	4c 15       	cp	r20, r12
    3692:	5d 05       	cpc	r21, r13
    3694:	28 f0       	brcs	.+10     	; 0x36a0 <memory_conflict_detect+0x98>
    3696:	01 50       	subi	r16, 0x01	; 1
    3698:	10 40       	sbci	r17, 0x00	; 0
    369a:	a0 16       	cp	r10, r16
    369c:	b1 06       	cpc	r11, r17
    369e:	88 f4       	brcc	.+34     	; 0x36c2 <memory_conflict_detect+0xba>
    36a0:	11 96       	adiw	r26, 0x01	; 1
    36a2:	a7 96       	adiw	r28, 0x27	; 39
  uint16_t userthreadromstart;
  uint16_t userthreadromend;
  uint16_t userthreadramstart;
  uint16_t userthreadramend;

  for (i = 0; i < LITE_MAX_THREADS; i++)
    36a4:	a2 30       	cpi	r26, 0x02	; 2
    36a6:	b1 05       	cpc	r27, r1
    36a8:	21 f6       	brne	.-120    	; 0x3632 <memory_conflict_detect+0x2a>
    36aa:	80 e0       	ldi	r24, 0x00	; 0
        return 1;
      }
    }
  }
  return 0;
}
    36ac:	df 91       	pop	r29
    36ae:	cf 91       	pop	r28
    36b0:	1f 91       	pop	r17
    36b2:	0f 91       	pop	r16
    36b4:	ff 90       	pop	r15
    36b6:	ef 90       	pop	r14
    36b8:	df 90       	pop	r13
    36ba:	cf 90       	pop	r12
    36bc:	bf 90       	pop	r11
    36be:	af 90       	pop	r10
    36c0:	08 95       	ret
  uint16_t userthreadromstart;
  uint16_t userthreadromend;
  uint16_t userthreadramstart;
  uint16_t userthreadramend;

  for (i = 0; i < LITE_MAX_THREADS; i++)
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	f3 cf       	rjmp	.-26     	; 0x36ac <memory_conflict_detect+0xa4>

000036c6 <check_for_memory_corrupt>:


/* thread_task
 */
int check_for_memory_corrupt(int i)
{
    36c6:	9c 01       	movw	r18, r24
  uint16_t sizeofBss;

  ram_start = thread_table[i].ramstart;
  ram_end = thread_table[i].ramend;
  sizeofBss = thread_table[i].sizeofBss;
  kernelptr = (uint16_t*)((uint8_t*)ram_start + sizeofBss);
    36c8:	ac 01       	movw	r20, r24
    36ca:	44 0f       	add	r20, r20
    36cc:	55 1f       	adc	r21, r21
    36ce:	44 0f       	add	r20, r20
    36d0:	55 1f       	adc	r21, r21
    36d2:	44 0f       	add	r20, r20
    36d4:	55 1f       	adc	r21, r21
    36d6:	fa 01       	movw	r30, r20
    36d8:	ee 0f       	add	r30, r30
    36da:	ff 1f       	adc	r31, r31
    36dc:	ee 0f       	add	r30, r30
    36de:	ff 1f       	adc	r31, r31
    36e0:	e4 0f       	add	r30, r20
    36e2:	f5 1f       	adc	r31, r21
    36e4:	e8 1b       	sub	r30, r24
    36e6:	f9 0b       	sbc	r31, r25
    36e8:	ee 59       	subi	r30, 0x9E	; 158
    36ea:	fa 4f       	sbci	r31, 0xFA	; 250
    36ec:	a1 89       	ldd	r26, Z+17	; 0x11
    36ee:	b2 89       	ldd	r27, Z+18	; 0x12
    36f0:	85 89       	ldd	r24, Z+21	; 0x15
    36f2:	96 89       	ldd	r25, Z+22	; 0x16
    36f4:	a8 0f       	add	r26, r24
    36f6:	b9 1f       	adc	r27, r25
  if ((*kernelptr != 0xeeff) || (*(kernelptr + 1) != 0xeeff))
    36f8:	8d 91       	ld	r24, X+
    36fa:	9c 91       	ld	r25, X
    36fc:	11 97       	sbiw	r26, 0x01	; 1
    36fe:	8f 5f       	subi	r24, 0xFF	; 255
    3700:	9e 4e       	sbci	r25, 0xEE	; 238
    3702:	39 f4       	brne	.+14     	; 0x3712 <check_for_memory_corrupt+0x4c>
    3704:	12 96       	adiw	r26, 0x02	; 2
    3706:	8d 91       	ld	r24, X+
    3708:	9c 91       	ld	r25, X
    370a:	13 97       	sbiw	r26, 0x03	; 3
    370c:	8f 5f       	subi	r24, 0xFF	; 255
    370e:	9e 4e       	sbci	r25, 0xEE	; 238
    3710:	79 f0       	breq	.+30     	; 0x3730 <check_for_memory_corrupt+0x6a>
  {
    thread_table[i].state = STATE_MEM_ERROR;
    3712:	fa 01       	movw	r30, r20
    3714:	ee 0f       	add	r30, r30
    3716:	ff 1f       	adc	r31, r31
    3718:	ee 0f       	add	r30, r30
    371a:	ff 1f       	adc	r31, r31
    371c:	e4 0f       	add	r30, r20
    371e:	f5 1f       	adc	r31, r21
    3720:	e2 1b       	sub	r30, r18
    3722:	f3 0b       	sbc	r31, r19
    3724:	ee 59       	subi	r30, 0x9E	; 158
    3726:	fa 4f       	sbci	r31, 0xFA	; 250
    3728:	89 e0       	ldi	r24, 0x09	; 9
    372a:	82 83       	std	Z+2, r24	; 0x02
    372c:	2f ef       	ldi	r18, 0xFF	; 255
    372e:	3f ef       	ldi	r19, 0xFF	; 255
    return  - 1;
  }
  return i;
  
}
    3730:	c9 01       	movw	r24, r18
    3732:	08 95       	ret

00003734 <getKernelStackAddress>:
  void **addr;

  addr = (void **) &old_stack_ptr;

  return addr;
}
    3734:	8e e5       	ldi	r24, 0x5E	; 94
    3736:	95 e0       	ldi	r25, 0x05	; 5
    3738:	08 95       	ret

0000373a <getThreadIndexAddress>:
//void getThreadIndexAddress() __attribute__((naked));
int getThreadIndexAddress()
{
  int i;
  uint16_t index;
  asm volatile("push r20""\n\t""push r21""\n\t"::);
    373a:	4f 93       	push	r20
    373c:	5f 93       	push	r21

  index = 0;
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (current_thread ==  &(thread_table[i]))
    373e:	80 91 60 05 	lds	r24, 0x0560
    3742:	90 91 61 05 	lds	r25, 0x0561
    3746:	25 e0       	ldi	r18, 0x05	; 5
    3748:	82 36       	cpi	r24, 0x62	; 98
    374a:	92 07       	cpc	r25, r18
    374c:	49 f0       	breq	.+18     	; 0x3760 <getThreadIndexAddress+0x26>
    374e:	89 58       	subi	r24, 0x89	; 137
    3750:	95 40       	sbci	r25, 0x05	; 5
    3752:	51 f0       	breq	.+20     	; 0x3768 <getThreadIndexAddress+0x2e>
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    {
      index = i;
      break;
    }
  }
  asm volatile("pop r21""\n\t""pop r20""\n\t"::);
    3758:	5f 91       	pop	r21
    375a:	4f 91       	pop	r20

  return index;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( index ) );
  //asm volatile("ret"::); 
}
    375c:	c9 01       	movw	r24, r18
    375e:	08 95       	ret
  asm volatile("push r20""\n\t""push r21""\n\t"::);

  index = 0;
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (current_thread ==  &(thread_table[i]))
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	9c 01       	movw	r18, r24
    3766:	f8 cf       	rjmp	.-16     	; 0x3758 <getThreadIndexAddress+0x1e>
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	9c 01       	movw	r18, r24
    376e:	f4 cf       	rjmp	.-24     	; 0x3758 <getThreadIndexAddress+0x1e>

00003770 <barrier_unblock>:

/* This unblocks an IO bound thread.
 * This routine can be called from any context.
 */
void barrier_unblock(uint8_t type, uint8_t id)
{
    3770:	ff 92       	push	r15
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	08 2f       	mov	r16, r24
    3778:	f6 2e       	mov	r15, r22
  uint8_t i;
  _atomic_t currentatomic;

  currentatomic = _atomic_start();
    377a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    377e:	18 2f       	mov	r17, r24
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    //Look for a thread waiting on this IO
    if ((thread_table[i].state == STATE_IO) && 
    3780:	80 91 64 05 	lds	r24, 0x0564
    3784:	86 30       	cpi	r24, 0x06	; 6
    3786:	59 f0       	breq	.+22     	; 0x379e <barrier_unblock+0x2e>
    3788:	80 91 8b 05 	lds	r24, 0x058B
    378c:	86 30       	cpi	r24, 0x06	; 6
    378e:	a9 f0       	breq	.+42     	; 0x37ba <barrier_unblock+0x4a>
      //Mark that thread as active
      thread_table[i].state = STATE_ACTIVE;
      postNewThreadTask();
    }
  }
  _atomic_end(currentatomic);
    3790:	81 2f       	mov	r24, r17
    3792:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	ff 90       	pop	r15
    379c:	08 95       	ret

  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    //Look for a thread waiting on this IO
    if ((thread_table[i].state == STATE_IO) && 
    379e:	80 91 7f 05 	lds	r24, 0x057F
    37a2:	80 17       	cp	r24, r16
    37a4:	89 f7       	brne	.-30     	; 0x3788 <barrier_unblock+0x18>
    37a6:	80 91 80 05 	lds	r24, 0x0580
    37aa:	8f 15       	cp	r24, r15
    37ac:	69 f7       	brne	.-38     	; 0x3788 <barrier_unblock+0x18>
      (thread_table[i].data.iostate.type == type) && 
      (thread_table[i].data.iostate.id == id))
    {
      //Mark that thread as active
      thread_table[i].state = STATE_ACTIVE;
    37ae:	82 e0       	ldi	r24, 0x02	; 2
    37b0:	80 93 64 05 	sts	0x0564, r24
      postNewThreadTask();
    37b4:	0e 94 05 18 	call	0x300a	; 0x300a <postNewThreadTask>
    37b8:	e7 cf       	rjmp	.-50     	; 0x3788 <barrier_unblock+0x18>

  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    //Look for a thread waiting on this IO
    if ((thread_table[i].state == STATE_IO) && 
    37ba:	80 91 a6 05 	lds	r24, 0x05A6
    37be:	80 17       	cp	r24, r16
    37c0:	39 f7       	brne	.-50     	; 0x3790 <barrier_unblock+0x20>
    37c2:	80 91 a7 05 	lds	r24, 0x05A7
    37c6:	8f 15       	cp	r24, r15
    37c8:	19 f7       	brne	.-58     	; 0x3790 <barrier_unblock+0x20>
      (thread_table[i].data.iostate.type == type) && 
      (thread_table[i].data.iostate.id == id))
    {
      //Mark that thread as active
      thread_table[i].state = STATE_ACTIVE;
    37ca:	82 e0       	ldi	r24, 0x02	; 2
    37cc:	80 93 8b 05 	sts	0x058B, r24
      postNewThreadTask();
    37d0:	0e 94 05 18 	call	0x300a	; 0x300a <postNewThreadTask>
    37d4:	dd cf       	rjmp	.-70     	; 0x3790 <barrier_unblock+0x20>

000037d6 <ServiceTimerFired>:


//-------------------------------------------------------------------------
void ServiceTimerFired(uint8_t id)
{
  if (id == 9)
    37d6:	89 30       	cpi	r24, 0x09	; 9
    37d8:	29 f4       	brne	.+10     	; 0x37e4 <ServiceTimerFired+0xe>
  {
    if (thread_task_active == 0)
    37da:	80 91 b0 05 	lds	r24, 0x05B0
    37de:	88 23       	and	r24, r24
    37e0:	21 f0       	breq	.+8      	; 0x37ea <ServiceTimerFired+0x14>
    37e2:	08 95       	ret
      postTask(thread_task, 2);
    }
  }
  else
  {
    thread_wakeup(id);
    37e4:	0e 94 12 18 	call	0x3024	; 0x3024 <thread_wakeup>
    37e8:	08 95       	ret
{
  if (id == 9)
  {
    if (thread_task_active == 0)
    {
      postTask(thread_task, 2);
    37ea:	8e e0       	ldi	r24, 0x0E	; 14
    37ec:	9a e1       	ldi	r25, 0x1A	; 26
    37ee:	62 e0       	ldi	r22, 0x02	; 2
    37f0:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    37f4:	08 95       	ret

000037f6 <__vector_21>:
#define adc_off() ADCSRA &= ~(1 << ADEN)


//The critical ISR function to come back when the interrupt of ADC finishes 
ISR(ADC_vect)
{
    37f6:	1f 92       	push	r1
    37f8:	0f 92       	push	r0
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	0f 92       	push	r0
    37fe:	11 24       	eor	r1, r1
    ADCSRA |= _BV(ADIF);
    3800:	34 9a       	sbi	0x06, 4	; 6
    ADCSRA &= ~_BV(ADEN);       // disable interrupt
    3802:	37 98       	cbi	0x06, 7	; 6
    //   flag = 1;
}
    3804:	0f 90       	pop	r0
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	0f 90       	pop	r0
    380a:	1f 90       	pop	r1
    380c:	18 95       	reti

0000380e <adcdriver_init_adc>:

//-------------------------------------------------------------------------
void adcdriver_init_adc()
{
    ADMUX = 0;
    380e:	17 b8       	out	0x07, r1	; 7
    ADCSRA = _BV(ADIE) | 6;
    3810:	8e e0       	ldi	r24, 0x0E	; 14
    3812:	86 b9       	out	0x06, r24	; 6
    // does not enable interrupt and set prescaler to 64
}
    3814:	08 95       	ret

00003816 <get_adc>:
//poll based approach. After all, requrieing another adc thread is just too expensive!
uint16_t get_adc(int channel)
{
    uint16_t reading;

    ADMUX = 0;
    3816:	17 b8       	out	0x07, r1	; 7
    ADMUX |= (channel & 0x1F);
    3818:	97 b1       	in	r25, 0x07	; 7
    381a:	8f 71       	andi	r24, 0x1F	; 31
    381c:	89 2b       	or	r24, r25
    381e:	87 b9       	out	0x07, r24	; 7
    ADCSRA &= ~(1 << ADIE);
    3820:	33 98       	cbi	0x06, 3	; 6
    ADCSRA |= (1 << ADIF);
    3822:	34 9a       	sbi	0x06, 4	; 6
    ADCSRA |= (1 << ADEN) | (1 << ADSC);
    3824:	86 b1       	in	r24, 0x06	; 6
    3826:	80 6c       	ori	r24, 0xC0	; 192
    3828:	86 b9       	out	0x06, r24	; 6
    // start conversion
    while (ADCSRA & (1 << ADSC))
    382a:	36 99       	sbic	0x06, 6	; 6
    382c:	fe cf       	rjmp	.-4      	; 0x382a <get_adc+0x14>
        ;
    //the interrupt based adc is currently not used. 
    //while (flag == 0); 
    //flag = 0; 
    reading = ADCL;
    382e:	84 b1       	in	r24, 0x04	; 4
    3830:	90 e0       	ldi	r25, 0x00	; 0
    reading |= (ADCH & 3) << 8;
    3832:	25 b1       	in	r18, 0x05	; 5
    ADCSRA &= ~_BV(ADEN);
    3834:	37 98       	cbi	0x06, 7	; 6
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	23 70       	andi	r18, 0x03	; 3
    383a:	30 70       	andi	r19, 0x00	; 0
    383c:	32 2f       	mov	r19, r18
    383e:	22 27       	eor	r18, r18
    3840:	28 2b       	or	r18, r24
    3842:	39 2b       	or	r19, r25
    return reading;
}
    3844:	c9 01       	movw	r24, r18
    3846:	08 95       	ret

00003848 <get_light>:
//-------------------------------------------------------------------------
uint16_t get_light()
{
    uint16_t reading;

    PORTE &= ~_BV(6);
    3848:	1e 98       	cbi	0x03, 6	; 3
    DDRE &= ~_BV(6);
    384a:	16 98       	cbi	0x02, 6	; 2
    PORTE |= _BV(5);
    384c:	1d 9a       	sbi	0x03, 5	; 3
    DDRE |= _BV(5);
    384e:	15 9a       	sbi	0x02, 5	; 2
    reading = get_adc(LIGHT_CHANNEL);
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 0b 1c 	call	0x3816	; 0x3816 <get_adc>
    PORTE &= ~_BV(5);
    3858:	1d 98       	cbi	0x03, 5	; 3
    DDRE &= ~_BV(5);
    385a:	15 98       	cbi	0x02, 5	; 2
    return reading;
}
    385c:	08 95       	ret

0000385e <get_temp>:
//-------------------------------------------------------------------------
uint16_t get_temp()
{
    uint16_t reading;

    PORTE &= ~_BV(5);
    385e:	1d 98       	cbi	0x03, 5	; 3
    DDRE &= ~_BV(5);
    3860:	15 98       	cbi	0x02, 5	; 2
    PORTE |= _BV(6);
    3862:	1e 9a       	sbi	0x03, 6	; 3
    DDRE |= _BV(6);
    3864:	16 9a       	sbi	0x02, 6	; 2
    reading = get_adc(TEMP_CHANNEL);
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	0e 94 0b 1c 	call	0x3816	; 0x3816 <get_adc>
    PORTE &= ~_BV(6);
    386e:	1e 98       	cbi	0x03, 6	; 3
    DDRE &= ~_BV(6);
    3870:	16 98       	cbi	0x02, 6	; 2
    return reading;
}
    3872:	08 95       	ret

00003874 <get_magx>:
//-------------------------------------------------------------------------
uint16_t get_magx()
{
    uint16_t reading;

    DDRC |= _BV(5);
    3874:	a5 9a       	sbi	0x14, 5	; 20
    PORTC |= _BV(5);
    3876:	ad 9a       	sbi	0x15, 5	; 21
    reading = get_adc(MAGX_CHANNEL);
    3878:	85 e0       	ldi	r24, 0x05	; 5
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	0e 94 0b 1c 	call	0x3816	; 0x3816 <get_adc>
    DDRC &= ~_BV(5);
    3880:	a5 98       	cbi	0x14, 5	; 20
    PORTC &= ~_BV(5);
    3882:	ad 98       	cbi	0x15, 5	; 21
    return reading;
}
    3884:	08 95       	ret

00003886 <get_magy>:
//-------------------------------------------------------------------------
uint16_t get_magy()
{
    uint16_t reading;

    DDRC |= _BV(5);
    3886:	a5 9a       	sbi	0x14, 5	; 20
    PORTC |= _BV(5);
    3888:	ad 9a       	sbi	0x15, 5	; 21
    reading = get_adc(MAGY_CHANNEL);
    388a:	86 e0       	ldi	r24, 0x06	; 6
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <get_adc>
    DDRC &= ~_BV(5);
    3892:	a5 98       	cbi	0x14, 5	; 20
    PORTC &= ~_BV(5);
    3894:	ad 98       	cbi	0x15, 5	; 21
    return reading;
}
    3896:	08 95       	ret

00003898 <get_accx>:
//-------------------------------------------------------------------------
uint16_t get_accx()
{
    uint16_t reading;

    DDRC |= _BV(4);
    3898:	a4 9a       	sbi	0x14, 4	; 20
    PORTC |= _BV(4);
    389a:	ac 9a       	sbi	0x15, 4	; 21
    reading = get_adc(ACCX_CHANNEL);
    389c:	83 e0       	ldi	r24, 0x03	; 3
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	0e 94 0b 1c 	call	0x3816	; 0x3816 <get_adc>
    DDRC &= ~_BV(4);
    38a4:	a4 98       	cbi	0x14, 4	; 20
    PORTC &= ~_BV(4);
    38a6:	ac 98       	cbi	0x15, 4	; 21
    return reading;
}
    38a8:	08 95       	ret

000038aa <get_accy>:
//-------------------------------------------------------------------------
uint16_t get_accy()
{
    uint16_t reading;

    DDRC |= _BV(4);
    38aa:	a4 9a       	sbi	0x14, 4	; 20
    PORTC |= _BV(4);
    38ac:	ac 9a       	sbi	0x15, 4	; 21
    reading = get_adc(ACCY_CHANNEL);
    38ae:	84 e0       	ldi	r24, 0x04	; 4
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	0e 94 0b 1c 	call	0x3816	; 0x3816 <get_adc>
    DDRC &= ~_BV(4);
    38b6:	a4 98       	cbi	0x14, 4	; 20
    PORTC &= ~_BV(4);
    38b8:	ac 98       	cbi	0x15, 4	; 21
    return reading;
}
    38ba:	08 95       	ret

000038bc <Leds_yellowOff>:
    return;
}

//-------------------------------------------------------------------------
void Leds_yellowOff()
{
    38bc:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    38be:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    38c2:	18 2f       	mov	r17, r24

        LITE_SET_YELLOW_LED_PIN();
    38c4:	0e 94 a2 02 	call	0x544	; 0x544 <LITE_SET_YELLOW_LED_PIN>
        Leds_ledsOn &= ~Leds_YELLOW_BIT;
    38c8:	80 91 b5 05 	lds	r24, 0x05B5
    38cc:	8b 7f       	andi	r24, 0xFB	; 251
    38ce:	80 93 b5 05 	sts	0x05B5, r24
        _atomic_end(_atomic);
    38d2:	81 2f       	mov	r24, r17
    38d4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    38d8:	1f 91       	pop	r17
    38da:	08 95       	ret

000038dc <Leds_yellowOn>:
    return;
}

//-------------------------------------------------------------------------
void Leds_yellowOn()
{
    38dc:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    38de:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    38e2:	18 2f       	mov	r17, r24

        LITE_CLR_YELLOW_LED_PIN();
    38e4:	0e 94 a4 02 	call	0x548	; 0x548 <LITE_CLR_YELLOW_LED_PIN>
        Leds_ledsOn |= Leds_YELLOW_BIT;
    38e8:	80 91 b5 05 	lds	r24, 0x05B5
    38ec:	84 60       	ori	r24, 0x04	; 4
    38ee:	80 93 b5 05 	sts	0x05B5, r24
        _atomic_end(_atomic);
    38f2:	81 2f       	mov	r24, r17
    38f4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    38f8:	1f 91       	pop	r17
    38fa:	08 95       	ret

000038fc <Leds_yellowToggle>:
    return;
}

//-------------------------------------------------------------------------
void Leds_yellowToggle()
{
    38fc:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    38fe:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3902:	18 2f       	mov	r17, r24

        if (Leds_ledsOn & Leds_YELLOW_BIT)
    3904:	80 91 b5 05 	lds	r24, 0x05B5
    3908:	82 fd       	sbrc	r24, 2
    390a:	07 c0       	rjmp	.+14     	; 0x391a <Leds_yellowToggle+0x1e>
        {
            Leds_yellowOff();
        }
        else
        {
            Leds_yellowOn();
    390c:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <Leds_yellowOn>
        }
        _atomic_end(_atomic);
    3910:	81 2f       	mov	r24, r17
    3912:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    3916:	1f 91       	pop	r17
    3918:	08 95       	ret
    {
        _atomic_t _atomic = _atomic_start();

        if (Leds_ledsOn & Leds_YELLOW_BIT)
        {
            Leds_yellowOff();
    391a:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <Leds_yellowOff>
        }
        else
        {
            Leds_yellowOn();
        }
        _atomic_end(_atomic);
    391e:	81 2f       	mov	r24, r17
    3920:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    3924:	1f 91       	pop	r17
    3926:	08 95       	ret

00003928 <Leds_greenOff>:
    return;
}

//-------------------------------------------------------------------------
void Leds_greenOff()
{
    3928:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    392a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    392e:	18 2f       	mov	r17, r24

        LITE_SET_GREEN_LED_PIN();
    3930:	0e 94 92 02 	call	0x524	; 0x524 <LITE_SET_GREEN_LED_PIN>
        Leds_ledsOn &= ~Leds_GREEN_BIT;
    3934:	80 91 b5 05 	lds	r24, 0x05B5
    3938:	8d 7f       	andi	r24, 0xFD	; 253
    393a:	80 93 b5 05 	sts	0x05B5, r24
        _atomic_end(_atomic);
    393e:	81 2f       	mov	r24, r17
    3940:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    3944:	1f 91       	pop	r17
    3946:	08 95       	ret

00003948 <Leds_greenOn>:
    return;
}

//-------------------------------------------------------------------------
void Leds_greenOn()
{
    3948:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    394a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    394e:	18 2f       	mov	r17, r24

        LITE_CLR_GREEN_LED_PIN();
    3950:	0e 94 94 02 	call	0x528	; 0x528 <LITE_CLR_GREEN_LED_PIN>
        Leds_ledsOn |= Leds_GREEN_BIT;
    3954:	80 91 b5 05 	lds	r24, 0x05B5
    3958:	82 60       	ori	r24, 0x02	; 2
    395a:	80 93 b5 05 	sts	0x05B5, r24
        _atomic_end(_atomic);
    395e:	81 2f       	mov	r24, r17
    3960:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    3964:	1f 91       	pop	r17
    3966:	08 95       	ret

00003968 <Leds_greenToggle>:
    return;
}

//-------------------------------------------------------------------------
void Leds_greenToggle()
{
    3968:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    396a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    396e:	18 2f       	mov	r17, r24

        if (Leds_ledsOn & Leds_GREEN_BIT)
    3970:	80 91 b5 05 	lds	r24, 0x05B5
    3974:	81 fd       	sbrc	r24, 1
    3976:	07 c0       	rjmp	.+14     	; 0x3986 <Leds_greenToggle+0x1e>
        {
            Leds_greenOff();
        }
        else
        {
            Leds_greenOn();
    3978:	0e 94 a4 1c 	call	0x3948	; 0x3948 <Leds_greenOn>
        }
        _atomic_end(_atomic);
    397c:	81 2f       	mov	r24, r17
    397e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    3982:	1f 91       	pop	r17
    3984:	08 95       	ret
    {
        _atomic_t _atomic = _atomic_start();

        if (Leds_ledsOn & Leds_GREEN_BIT)
        {
            Leds_greenOff();
    3986:	0e 94 94 1c 	call	0x3928	; 0x3928 <Leds_greenOff>
        }
        else
        {
            Leds_greenOn();
        }
        _atomic_end(_atomic);
    398a:	81 2f       	mov	r24, r17
    398c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    3990:	1f 91       	pop	r17
    3992:	08 95       	ret

00003994 <Leds_redOff>:
    return;
}

//-------------------------------------------------------------------------
void Leds_redOff()
{
    3994:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3996:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    399a:	18 2f       	mov	r17, r24

        LITE_SET_RED_LED_PIN();
    399c:	0e 94 80 02 	call	0x500	; 0x500 <LITE_SET_RED_LED_PIN>
        Leds_ledsOn &= ~Leds_RED_BIT;
    39a0:	80 91 b5 05 	lds	r24, 0x05B5
    39a4:	8e 7f       	andi	r24, 0xFE	; 254
    39a6:	80 93 b5 05 	sts	0x05B5, r24
        _atomic_end(_atomic);
    39aa:	81 2f       	mov	r24, r17
    39ac:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    39b0:	1f 91       	pop	r17
    39b2:	08 95       	ret

000039b4 <Leds_redOn>:
    }
}

//-------------------------------------------------------------------------
void Leds_redOn()
{
    39b4:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    39b6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    39ba:	18 2f       	mov	r17, r24

        LITE_CLR_RED_LED_PIN();
    39bc:	0e 94 82 02 	call	0x504	; 0x504 <LITE_CLR_RED_LED_PIN>
        Leds_ledsOn |= Leds_RED_BIT;
    39c0:	80 91 b5 05 	lds	r24, 0x05B5
    39c4:	81 60       	ori	r24, 0x01	; 1
    39c6:	80 93 b5 05 	sts	0x05B5, r24
        _atomic_end(_atomic);
    39ca:	81 2f       	mov	r24, r17
    39cc:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    39d0:	1f 91       	pop	r17
    39d2:	08 95       	ret

000039d4 <Leds_redToggle>:
    return;
}

//-------------------------------------------------------------------------
void Leds_redToggle()
{
    39d4:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    39d6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    39da:	18 2f       	mov	r17, r24

        if (Leds_ledsOn & Leds_RED_BIT)
    39dc:	80 91 b5 05 	lds	r24, 0x05B5
    39e0:	80 fd       	sbrc	r24, 0
    39e2:	07 c0       	rjmp	.+14     	; 0x39f2 <Leds_redToggle+0x1e>
        {
            Leds_redOff();
        }
        else
        {
            Leds_redOn();
    39e4:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <Leds_redOn>
        }
        _atomic_end(_atomic);
    39e8:	81 2f       	mov	r24, r17
    39ea:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
#ifdef TRACE_ENABLE_LEDEVENT
    addTrace(TRACE_LEDEVENT_REDTOGGLE, 100);
#endif
#endif
    return;
}
    39ee:	1f 91       	pop	r17
    39f0:	08 95       	ret
    {
        _atomic_t _atomic = _atomic_start();

        if (Leds_ledsOn & Leds_RED_BIT)
        {
            Leds_redOff();
    39f2:	0e 94 ca 1c 	call	0x3994	; 0x3994 <Leds_redOff>
        }
        else
        {
            Leds_redOn();
        }
        _atomic_end(_atomic);
    39f6:	81 2f       	mov	r24, r17
    39f8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
#ifdef TRACE_ENABLE_LEDEVENT
    addTrace(TRACE_LEDEVENT_REDTOGGLE, 100);
#endif
#endif
    return;
}
    39fc:	1f 91       	pop	r17
    39fe:	08 95       	ret

00003a00 <Leds_Leds>:
enum
{
    Leds_RED_BIT = 1, Leds_GREEN_BIT = 2, Leds_YELLOW_BIT = 4
};
void Leds_Leds()
{
    3a00:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3a02:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3a06:	18 2f       	mov	r17, r24

        Leds_ledsOn = 0;
    3a08:	10 92 b5 05 	sts	0x05B5, r1
        LITE_MAKE_RED_LED_OUTPUT();
    3a0c:	0e 94 8e 02 	call	0x51c	; 0x51c <LITE_MAKE_RED_LED_OUTPUT>
        LITE_MAKE_YELLOW_LED_OUTPUT();
    3a10:	0e 94 ac 02 	call	0x558	; 0x558 <LITE_MAKE_YELLOW_LED_OUTPUT>
        LITE_MAKE_GREEN_LED_OUTPUT();
    3a14:	0e 94 9e 02 	call	0x53c	; 0x53c <LITE_MAKE_GREEN_LED_OUTPUT>
        LITE_SET_RED_LED_PIN();
    3a18:	0e 94 80 02 	call	0x500	; 0x500 <LITE_SET_RED_LED_PIN>
        LITE_SET_YELLOW_LED_PIN();
    3a1c:	0e 94 a2 02 	call	0x544	; 0x544 <LITE_SET_YELLOW_LED_PIN>
        LITE_SET_GREEN_LED_PIN();
    3a20:	0e 94 92 02 	call	0x524	; 0x524 <LITE_SET_GREEN_LED_PIN>
        _atomic_end(_atomic);
    3a24:	81 2f       	mov	r24, r17
    3a26:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
}
    3a2a:	1f 91       	pop	r17
    3a2c:	08 95       	ret

00003a2e <sounder_init>:

#include "../hardware/avrhardware.h"
#include "sounder.h"
//--------------------------------------
void sounder_init()
{
    3a2e:	1f 93       	push	r17
    //activate the sounder
    {
        _atomic_t _atomic = _atomic_start();
    3a30:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3a34:	18 2f       	mov	r17, r24

        LITE_MAKE_PW2_OUTPUT();
    3a36:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LITE_MAKE_PW2_OUTPUT>
        _atomic_end(_atomic);
    3a3a:	81 2f       	mov	r24, r17
    3a3c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
}
    3a40:	1f 91       	pop	r17
    3a42:	08 95       	ret

00003a44 <sounderOff>:
    return;
}

//--------------------------------------
void sounderOff()
{
    3a44:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3a46:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3a4a:	18 2f       	mov	r17, r24

        sounder_init();
    3a4c:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <sounder_init>
        LITE_CLR_PW2_PIN();
    3a50:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LITE_CLR_PW2_PIN>
        _atomic_end(_atomic);
    3a54:	81 2f       	mov	r24, r17
    3a56:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    3a5a:	1f 91       	pop	r17
    3a5c:	08 95       	ret

00003a5e <sounderOn>:
    }
}

//--------------------------------------
void sounderOn()
{
    3a5e:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3a60:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3a64:	18 2f       	mov	r17, r24

        sounder_init();
    3a66:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <sounder_init>
        LITE_SET_PW2_PIN();
    3a6a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LITE_SET_PW2_PIN>
        _atomic_end(_atomic);
    3a6e:	81 2f       	mov	r24, r17
    3a70:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return;
}
    3a74:	1f 91       	pop	r17
    3a76:	08 95       	ret

00003a78 <write32int>:
}

//-------------------------------------------------------------------------
void write32int(uint16_t addr, int32_t value)
{
    eeprom_write32int(addr, value);
    3a78:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <eeprom_write32int>
}
    3a7c:	08 95       	ret

00003a7e <write32uint>:
}

//-------------------------------------------------------------------------
void write32uint(uint16_t addr, uint32_t value)
{
    eeprom_write32uint(addr, value);
    3a7e:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <eeprom_write32uint>
}
    3a82:	08 95       	ret

00003a84 <write16int>:
}

//-------------------------------------------------------------------------
void write16int(uint16_t addr, int16_t value)
{
    eeprom_write16int(addr, value);
    3a84:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <eeprom_write16int>
}
    3a88:	08 95       	ret

00003a8a <write16uint>:
}

//-------------------------------------------------------------------------
void write16uint(uint16_t addr, uint16_t value)
{
    eeprom_write16uint(addr, value);
    3a8a:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <eeprom_write16uint>
}
    3a8e:	08 95       	ret

00003a90 <write8int>:
}

//-------------------------------------------------------------------------
void write8int(uint16_t addr, int8_t value)
{
    eeprom_write8int(addr, value);
    3a90:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <eeprom_write8int>
}
    3a94:	08 95       	ret

00003a96 <write8uint>:
}

//-------------------------------------------------------------------------
void write8uint(uint16_t addr, uint8_t value)
{
    eeprom_write8uint(addr, value);
    3a96:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <eeprom_write8uint>
}
    3a9a:	08 95       	ret

00003a9c <read32int>:
}

//-------------------------------------------------------------------------
int32_t read32int(uint16_t addr)
{
    return eeprom_read32int(addr);
    3a9c:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <eeprom_read32int>
}
    3aa0:	08 95       	ret

00003aa2 <read32uint>:
}

//-------------------------------------------------------------------------
uint32_t read32uint(uint16_t addr)
{
    return eeprom_read32uint(addr);
    3aa2:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <eeprom_read32uint>
}
    3aa6:	08 95       	ret

00003aa8 <read16int>:

//-------------------------------------------------------------------------

int16_t read16int(uint16_t addr)
{
    return eeprom_read16int(addr);
    3aa8:	0e 94 75 1e 	call	0x3cea	; 0x3cea <eeprom_read16int>
}
    3aac:	08 95       	ret

00003aae <read16uint>:
}

//-------------------------------------------------------------------------
uint16_t read16uint(uint16_t addr)
{
    return eeprom_read16uint(addr);
    3aae:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <eeprom_read16uint>
}
    3ab2:	08 95       	ret

00003ab4 <read8int>:
}

//-------------------------------------------------------------------------
int8_t read8int(uint16_t addr)
{
    return eeprom_read8int(addr);
    3ab4:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <eeprom_read8int>
}
    3ab8:	08 95       	ret

00003aba <read8uint>:
}

//-------------------------------------------------------------------------
uint8_t read8uint(uint16_t addr)
{
    return eeprom_read8uint(addr);
    3aba:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <eeprom_read8uint>
}
    3abe:	08 95       	ret

00003ac0 <initBytes>:
}

//-------------------------------------------------------------------------
void initBytes(uint16_t addr, int nBytes, uint8_t value)
{
    eeprom_initBytes(addr, nBytes, value);
    3ac0:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <eeprom_initBytes>
}
    3ac4:	08 95       	ret

00003ac6 <genericwriteBytes>:
}

//-------------------------------------------------------------------------
void genericwriteBytes(uint16_t addr, int nBytes, void *buffer)
{
    eeprom_writeBytes(addr, nBytes, buffer);
    3ac6:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <eeprom_writeBytes>
}
    3aca:	08 95       	ret

00003acc <genericreadBytes>:
//-------------------------------------------------------------------------
#ifdef PLATFORM_AVR
#include "../eeprom/ioeeprom.h"
void genericreadBytes(uint16_t addr, int nBytes, void *buffer)
{
    eeprom_readBytes(addr, nBytes, buffer);
    3acc:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <eeprom_readBytes>
}
    3ad0:	08 95       	ret

00003ad2 <eeprom_write32int>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_write32int(uint16_t addr, int32_t value)
{
    3ad2:	bf 92       	push	r11
    3ad4:	cf 92       	push	r12
    3ad6:	df 92       	push	r13
    3ad8:	ef 92       	push	r14
    3ada:	ff 92       	push	r15
    3adc:	0f 93       	push	r16
    3ade:	1f 93       	push	r17
    3ae0:	df 93       	push	r29
    3ae2:	cf 93       	push	r28
    3ae4:	00 d0       	rcall	.+0      	; 0x3ae6 <eeprom_write32int+0x14>
    3ae6:	00 d0       	rcall	.+0      	; 0x3ae8 <eeprom_write32int+0x16>
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	6c 01       	movw	r12, r24
    3aee:	49 83       	std	Y+1, r20	; 0x01
    3af0:	5a 83       	std	Y+2, r21	; 0x02
    3af2:	6b 83       	std	Y+3, r22	; 0x03
    3af4:	7c 83       	std	Y+4, r23	; 0x04
    uint16_t value1;
    uint32_t value2;
    _atomic_t _atomic = _atomic_start();
    3af6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3afa:	b8 2e       	mov	r11, r24

    value1 = (uint16_t) ((*(uint32_t *) & value) >> 16);
    3afc:	e9 80       	ldd	r14, Y+1	; 0x01
    3afe:	fa 80       	ldd	r15, Y+2	; 0x02
    3b00:	0b 81       	ldd	r16, Y+3	; 0x03
    3b02:	1c 81       	ldd	r17, Y+4	; 0x04
    value2 = (uint16_t) ((*(uint32_t *) & value) & 0x0000ffff);
    eeprom_busy_wait();
    3b04:	e1 99       	sbic	0x1c, 1	; 28
    3b06:	fe cf       	rjmp	.-4      	; 0x3b04 <eeprom_write32int+0x32>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value2);
    3b08:	c6 01       	movw	r24, r12
    3b0a:	b7 01       	movw	r22, r14
    3b0c:	0e 94 9a 56 	call	0xad34	; 0xad34 <__eewr_word_m128>
    addr = addr + 2;
    eeprom_busy_wait();
    3b10:	e1 99       	sbic	0x1c, 1	; 28
    3b12:	fe cf       	rjmp	.-4      	; 0x3b10 <eeprom_write32int+0x3e>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value1);
    3b14:	98 01       	movw	r18, r16
    3b16:	44 27       	eor	r20, r20
    3b18:	55 27       	eor	r21, r21
    3b1a:	c6 01       	movw	r24, r12
    3b1c:	02 96       	adiw	r24, 0x02	; 2
    3b1e:	b9 01       	movw	r22, r18
    3b20:	0e 94 9a 56 	call	0xad34	; 0xad34 <__eewr_word_m128>
    _atomic_end(_atomic);
    3b24:	8b 2d       	mov	r24, r11
    3b26:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    return;
}
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	cf 91       	pop	r28
    3b34:	df 91       	pop	r29
    3b36:	1f 91       	pop	r17
    3b38:	0f 91       	pop	r16
    3b3a:	ff 90       	pop	r15
    3b3c:	ef 90       	pop	r14
    3b3e:	df 90       	pop	r13
    3b40:	cf 90       	pop	r12
    3b42:	bf 90       	pop	r11
    3b44:	08 95       	ret

00003b46 <eeprom_write32uint>:
    return *(int32_t *) & returnvalue;
}

//-------------------------------------------------------------------------
void eeprom_write32uint(uint16_t addr, uint32_t value)
{
    3b46:	df 92       	push	r13
    3b48:	ef 92       	push	r14
    3b4a:	ff 92       	push	r15
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	ec 01       	movw	r28, r24
    3b56:	7a 01       	movw	r14, r20
    3b58:	8b 01       	movw	r16, r22
    uint16_t value1;
    uint16_t value2;
    _atomic_t _atomic = _atomic_start();
    3b5a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3b5e:	d8 2e       	mov	r13, r24

    value1 = (uint16_t) (value >> 16);
    value2 = (uint16_t) (value & 0x0000ffff);
    eeprom_busy_wait();
    3b60:	e1 99       	sbic	0x1c, 1	; 28
    3b62:	fe cf       	rjmp	.-4      	; 0x3b60 <eeprom_write32uint+0x1a>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value2);
    3b64:	ce 01       	movw	r24, r28
    3b66:	b7 01       	movw	r22, r14
    3b68:	0e 94 9a 56 	call	0xad34	; 0xad34 <__eewr_word_m128>
    addr = addr + 2;
    eeprom_busy_wait();
    3b6c:	e1 99       	sbic	0x1c, 1	; 28
    3b6e:	fe cf       	rjmp	.-4      	; 0x3b6c <eeprom_write32uint+0x26>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value1);
    3b70:	98 01       	movw	r18, r16
    3b72:	44 27       	eor	r20, r20
    3b74:	55 27       	eor	r21, r21
    3b76:	ce 01       	movw	r24, r28
    3b78:	02 96       	adiw	r24, 0x02	; 2
    3b7a:	b9 01       	movw	r22, r18
    3b7c:	0e 94 9a 56 	call	0xad34	; 0xad34 <__eewr_word_m128>
    _atomic_end(_atomic);
    3b80:	8d 2d       	mov	r24, r13
    3b82:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    return;
}
    3b86:	df 91       	pop	r29
    3b88:	cf 91       	pop	r28
    3b8a:	1f 91       	pop	r17
    3b8c:	0f 91       	pop	r16
    3b8e:	ff 90       	pop	r15
    3b90:	ef 90       	pop	r14
    3b92:	df 90       	pop	r13
    3b94:	08 95       	ret

00003b96 <eeprom_write16int>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_write16int(uint16_t addr, int16_t value)
{
    3b96:	ff 92       	push	r15
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	df 93       	push	r29
    3b9e:	cf 93       	push	r28
    3ba0:	00 d0       	rcall	.+0      	; 0x3ba2 <eeprom_write16int+0xc>
    3ba2:	cd b7       	in	r28, 0x3d	; 61
    3ba4:	de b7       	in	r29, 0x3e	; 62
    3ba6:	8c 01       	movw	r16, r24
    3ba8:	7a 83       	std	Y+2, r23	; 0x02
    3baa:	69 83       	std	Y+1, r22	; 0x01
    uint16_t value2;
    _atomic_t _atomic = _atomic_start();
    3bac:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3bb0:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3bb2:	e1 99       	sbic	0x1c, 1	; 28
    3bb4:	fe cf       	rjmp	.-4      	; 0x3bb2 <eeprom_write16int+0x1c>
    value2 = *(uint16_t *) & value;
    eeprom_write_word((uint16_t *) addr, value2);
    3bb6:	69 81       	ldd	r22, Y+1	; 0x01
    3bb8:	7a 81       	ldd	r23, Y+2	; 0x02
    3bba:	c8 01       	movw	r24, r16
    3bbc:	0e 94 9a 56 	call	0xad34	; 0xad34 <__eewr_word_m128>
    _atomic_end(_atomic);
    3bc0:	8f 2d       	mov	r24, r15
    3bc2:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    return;
}
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	cf 91       	pop	r28
    3bcc:	df 91       	pop	r29
    3bce:	1f 91       	pop	r17
    3bd0:	0f 91       	pop	r16
    3bd2:	ff 90       	pop	r15
    3bd4:	08 95       	ret

00003bd6 <eeprom_write16uint>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_write16uint(uint16_t addr, uint16_t value)
{
    3bd6:	ff 92       	push	r15
    3bd8:	0f 93       	push	r16
    3bda:	1f 93       	push	r17
    3bdc:	cf 93       	push	r28
    3bde:	df 93       	push	r29
    3be0:	ec 01       	movw	r28, r24
    3be2:	8b 01       	movw	r16, r22
    _atomic_t _atomic = _atomic_start();
    3be4:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3be8:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3bea:	e1 99       	sbic	0x1c, 1	; 28
    3bec:	fe cf       	rjmp	.-4      	; 0x3bea <eeprom_write16uint+0x14>
    eeprom_write_word((uint16_t *) addr, value);
    3bee:	ce 01       	movw	r24, r28
    3bf0:	b8 01       	movw	r22, r16
    3bf2:	0e 94 9a 56 	call	0xad34	; 0xad34 <__eewr_word_m128>
    _atomic_end(_atomic);
    3bf6:	8f 2d       	mov	r24, r15
    3bf8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    return;
}
    3bfc:	df 91       	pop	r29
    3bfe:	cf 91       	pop	r28
    3c00:	1f 91       	pop	r17
    3c02:	0f 91       	pop	r16
    3c04:	ff 90       	pop	r15
    3c06:	08 95       	ret

00003c08 <eeprom_read32int>:
    return (((uint32_t) value2) << 16) + (uint32_t) value1;
}

//-------------------------------------------------------------------------
int32_t eeprom_read32int(uint16_t addr)
{
    3c08:	df 92       	push	r13
    3c0a:	ef 92       	push	r14
    3c0c:	ff 92       	push	r15
    3c0e:	0f 93       	push	r16
    3c10:	1f 93       	push	r17
    3c12:	df 93       	push	r29
    3c14:	cf 93       	push	r28
    3c16:	00 d0       	rcall	.+0      	; 0x3c18 <eeprom_read32int+0x10>
    3c18:	00 d0       	rcall	.+0      	; 0x3c1a <eeprom_read32int+0x12>
    3c1a:	cd b7       	in	r28, 0x3d	; 61
    3c1c:	de b7       	in	r29, 0x3e	; 62
    3c1e:	8c 01       	movw	r16, r24
    uint16_t value1;
    uint16_t value2;
    uint32_t returnvalue;
    _atomic_t _atomic = _atomic_start();
    3c20:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3c24:	d8 2e       	mov	r13, r24

    eeprom_busy_wait();
    3c26:	e1 99       	sbic	0x1c, 1	; 28
    3c28:	fe cf       	rjmp	.-4      	; 0x3c26 <eeprom_read32int+0x1e>
    value1 = eeprom_read_word((uint16_t *) addr);
    3c2a:	c8 01       	movw	r24, r16
    3c2c:	0e 94 7d 56 	call	0xacfa	; 0xacfa <__eerd_word_m128>
    3c30:	7c 01       	movw	r14, r24
    eeprom_busy_wait();
    3c32:	e1 99       	sbic	0x1c, 1	; 28
    3c34:	fe cf       	rjmp	.-4      	; 0x3c32 <eeprom_read32int+0x2a>
    value2 = eeprom_read_word((uint16_t *) (addr + 2));
    3c36:	c8 01       	movw	r24, r16
    3c38:	02 96       	adiw	r24, 0x02	; 2
    3c3a:	0e 94 7d 56 	call	0xacfa	; 0xacfa <__eerd_word_m128>
    returnvalue = ((((uint32_t) value2) << 16) + (uint32_t) value1);
    3c3e:	a0 e0       	ldi	r26, 0x00	; 0
    3c40:	b0 e0       	ldi	r27, 0x00	; 0
    3c42:	dc 01       	movw	r26, r24
    3c44:	99 27       	eor	r25, r25
    3c46:	88 27       	eor	r24, r24
    3c48:	97 01       	movw	r18, r14
    3c4a:	40 e0       	ldi	r20, 0x00	; 0
    3c4c:	50 e0       	ldi	r21, 0x00	; 0
    3c4e:	82 0f       	add	r24, r18
    3c50:	93 1f       	adc	r25, r19
    3c52:	a4 1f       	adc	r26, r20
    3c54:	b5 1f       	adc	r27, r21
    3c56:	89 83       	std	Y+1, r24	; 0x01
    3c58:	9a 83       	std	Y+2, r25	; 0x02
    3c5a:	ab 83       	std	Y+3, r26	; 0x03
    3c5c:	bc 83       	std	Y+4, r27	; 0x04
    _atomic_end(_atomic);
    3c5e:	8d 2d       	mov	r24, r13
    3c60:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    3c64:	69 81       	ldd	r22, Y+1	; 0x01
    3c66:	7a 81       	ldd	r23, Y+2	; 0x02
    return *(int32_t *) & returnvalue;
}
    3c68:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	1f 91       	pop	r17
    3c7a:	0f 91       	pop	r16
    3c7c:	ff 90       	pop	r15
    3c7e:	ef 90       	pop	r14
    3c80:	df 90       	pop	r13
    3c82:	08 95       	ret

00003c84 <eeprom_read32uint>:
    return;
}

//-------------------------------------------------------------------------
uint32_t eeprom_read32uint(uint16_t addr)
{
    3c84:	cf 92       	push	r12
    3c86:	df 92       	push	r13
    3c88:	ef 92       	push	r14
    3c8a:	ff 92       	push	r15
    3c8c:	0f 93       	push	r16
    3c8e:	1f 93       	push	r17
    3c90:	cf 93       	push	r28
    3c92:	df 93       	push	r29
    3c94:	ec 01       	movw	r28, r24
    uint16_t value1;
    uint16_t value2;
    _atomic_t _atomic = _atomic_start();
    3c96:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3c9a:	18 2f       	mov	r17, r24

    eeprom_busy_wait();
    3c9c:	e1 99       	sbic	0x1c, 1	; 28
    3c9e:	fe cf       	rjmp	.-4      	; 0x3c9c <eeprom_read32uint+0x18>
    value1 = eeprom_read_word((uint16_t *) addr);
    3ca0:	ce 01       	movw	r24, r28
    3ca2:	0e 94 7d 56 	call	0xacfa	; 0xacfa <__eerd_word_m128>
    3ca6:	6c 01       	movw	r12, r24
    eeprom_busy_wait();
    3ca8:	e1 99       	sbic	0x1c, 1	; 28
    3caa:	fe cf       	rjmp	.-4      	; 0x3ca8 <eeprom_read32uint+0x24>
    value2 = eeprom_read_word((uint16_t *) (addr + 2));
    3cac:	ce 01       	movw	r24, r28
    3cae:	02 96       	adiw	r24, 0x02	; 2
    3cb0:	0e 94 7d 56 	call	0xacfa	; 0xacfa <__eerd_word_m128>
    3cb4:	7c 01       	movw	r14, r24
    _atomic_end(_atomic);
    3cb6:	81 2f       	mov	r24, r17
    3cb8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    3cbc:	00 e0       	ldi	r16, 0x00	; 0
    3cbe:	10 e0       	ldi	r17, 0x00	; 0
    3cc0:	87 01       	movw	r16, r14
    3cc2:	ff 24       	eor	r15, r15
    3cc4:	ee 24       	eor	r14, r14
    3cc6:	c6 01       	movw	r24, r12
    3cc8:	a0 e0       	ldi	r26, 0x00	; 0
    3cca:	b0 e0       	ldi	r27, 0x00	; 0
    3ccc:	e8 0e       	add	r14, r24
    3cce:	f9 1e       	adc	r15, r25
    3cd0:	0a 1f       	adc	r16, r26
    3cd2:	1b 1f       	adc	r17, r27
    return (((uint32_t) value2) << 16) + (uint32_t) value1;
}
    3cd4:	b7 01       	movw	r22, r14
    3cd6:	c8 01       	movw	r24, r16
    3cd8:	df 91       	pop	r29
    3cda:	cf 91       	pop	r28
    3cdc:	1f 91       	pop	r17
    3cde:	0f 91       	pop	r16
    3ce0:	ff 90       	pop	r15
    3ce2:	ef 90       	pop	r14
    3ce4:	df 90       	pop	r13
    3ce6:	cf 90       	pop	r12
    3ce8:	08 95       	ret

00003cea <eeprom_read16int>:
    return value;
}

//-------------------------------------------------------------------------
int16_t eeprom_read16int(uint16_t addr)
{
    3cea:	ff 92       	push	r15
    3cec:	0f 93       	push	r16
    3cee:	1f 93       	push	r17
    3cf0:	df 93       	push	r29
    3cf2:	cf 93       	push	r28
    3cf4:	00 d0       	rcall	.+0      	; 0x3cf6 <eeprom_read16int+0xc>
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
    3cfa:	8c 01       	movw	r16, r24
    uint16_t value;
    _atomic_t _atomic = _atomic_start();
    3cfc:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3d00:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3d02:	e1 99       	sbic	0x1c, 1	; 28
    3d04:	fe cf       	rjmp	.-4      	; 0x3d02 <eeprom_read16int+0x18>
    value = eeprom_read_word((uint16_t *) addr);
    3d06:	c8 01       	movw	r24, r16
    3d08:	0e 94 7d 56 	call	0xacfa	; 0xacfa <__eerd_word_m128>
    3d0c:	9a 83       	std	Y+2, r25	; 0x02
    3d0e:	89 83       	std	Y+1, r24	; 0x01
    _atomic_end(_atomic);
    3d10:	8f 2d       	mov	r24, r15
    3d12:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    return *(int16_t *) & value;
}
    3d16:	89 81       	ldd	r24, Y+1	; 0x01
    3d18:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	1f 91       	pop	r17
    3d24:	0f 91       	pop	r16
    3d26:	ff 90       	pop	r15
    3d28:	08 95       	ret

00003d2a <eeprom_read16uint>:
    return *(int8_t *) & value;
}

//-------------------------------------------------------------------------
uint16_t eeprom_read16uint(uint16_t addr)
{
    3d2a:	ff 92       	push	r15
    3d2c:	0f 93       	push	r16
    3d2e:	1f 93       	push	r17
    3d30:	8c 01       	movw	r16, r24
    uint16_t value;
    _atomic_t _atomic = _atomic_start();
    3d32:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3d36:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3d38:	e1 99       	sbic	0x1c, 1	; 28
    3d3a:	fe cf       	rjmp	.-4      	; 0x3d38 <eeprom_read16uint+0xe>
    value = eeprom_read_word((uint16_t *) addr);
    3d3c:	c8 01       	movw	r24, r16
    3d3e:	0e 94 7d 56 	call	0xacfa	; 0xacfa <__eerd_word_m128>
    3d42:	18 2f       	mov	r17, r24
    3d44:	09 2f       	mov	r16, r25
    _atomic_end(_atomic);
    3d46:	8f 2d       	mov	r24, r15
    3d48:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    return value;
}
    3d4c:	81 2f       	mov	r24, r17
    3d4e:	90 2f       	mov	r25, r16
    3d50:	1f 91       	pop	r17
    3d52:	0f 91       	pop	r16
    3d54:	ff 90       	pop	r15
    3d56:	08 95       	ret

00003d58 <eeprom_write8int>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_write8int(uint16_t addr, int8_t value)
{
    3d58:	ff 92       	push	r15
    3d5a:	0f 93       	push	r16
    3d5c:	1f 93       	push	r17
    3d5e:	df 93       	push	r29
    3d60:	cf 93       	push	r28
    3d62:	0f 92       	push	r0
    3d64:	cd b7       	in	r28, 0x3d	; 61
    3d66:	de b7       	in	r29, 0x3e	; 62
    3d68:	8c 01       	movw	r16, r24
    3d6a:	69 83       	std	Y+1, r22	; 0x01
    uint8_t value2;
    _atomic_t _atomic = _atomic_start();
    3d6c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3d70:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3d72:	e1 99       	sbic	0x1c, 1	; 28
    3d74:	fe cf       	rjmp	.-4      	; 0x3d72 <eeprom_write8int+0x1a>
    value2 = *(uint8_t *) & value;
    eeprom_write_byte((uint8_t *) addr, value2);
    3d76:	c8 01       	movw	r24, r16
    3d78:	69 81       	ldd	r22, Y+1	; 0x01
    3d7a:	0e 94 8d 56 	call	0xad1a	; 0xad1a <__eewr_byte_m128>
    _atomic_end(_atomic);
    3d7e:	8f 2d       	mov	r24, r15
    3d80:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    return;
}
    3d84:	0f 90       	pop	r0
    3d86:	cf 91       	pop	r28
    3d88:	df 91       	pop	r29
    3d8a:	1f 91       	pop	r17
    3d8c:	0f 91       	pop	r16
    3d8e:	ff 90       	pop	r15
    3d90:	08 95       	ret

00003d92 <eeprom_write8uint>:
    return *(int16_t *) & value;
}

//-------------------------------------------------------------------------
void eeprom_write8uint(uint16_t addr, uint8_t value)
{
    3d92:	0f 93       	push	r16
    3d94:	1f 93       	push	r17
    3d96:	cf 93       	push	r28
    3d98:	df 93       	push	r29
    3d9a:	ec 01       	movw	r28, r24
    3d9c:	06 2f       	mov	r16, r22
    _atomic_t _atomic = _atomic_start();
    3d9e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3da2:	18 2f       	mov	r17, r24

    eeprom_busy_wait();
    3da4:	e1 99       	sbic	0x1c, 1	; 28
    3da6:	fe cf       	rjmp	.-4      	; 0x3da4 <eeprom_write8uint+0x12>
    eeprom_write_byte((uint8_t *) addr, value);
    3da8:	ce 01       	movw	r24, r28
    3daa:	60 2f       	mov	r22, r16
    3dac:	0e 94 8d 56 	call	0xad1a	; 0xad1a <__eewr_byte_m128>
    _atomic_end(_atomic);
    3db0:	81 2f       	mov	r24, r17
    3db2:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    return;
}
    3db6:	df 91       	pop	r29
    3db8:	cf 91       	pop	r28
    3dba:	1f 91       	pop	r17
    3dbc:	0f 91       	pop	r16
    3dbe:	08 95       	ret

00003dc0 <eeprom_initBytes>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_initBytes(uint16_t addr, int nBytes, uint8_t value)
{
    3dc0:	cf 92       	push	r12
    3dc2:	df 92       	push	r13
    3dc4:	ef 92       	push	r14
    3dc6:	ff 92       	push	r15
    3dc8:	0f 93       	push	r16
    3dca:	1f 93       	push	r17
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	7c 01       	movw	r14, r24
    3dd2:	8b 01       	movw	r16, r22
    3dd4:	d4 2e       	mov	r13, r20
    int i;
    _atomic_t _atomic = _atomic_start();
    3dd6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3dda:	c8 2e       	mov	r12, r24

    for (i = 0; i < nBytes; i++)
    3ddc:	10 16       	cp	r1, r16
    3dde:	11 06       	cpc	r1, r17
    3de0:	64 f4       	brge	.+24     	; 0x3dfa <eeprom_initBytes+0x3a>
    3de2:	c0 e0       	ldi	r28, 0x00	; 0
    3de4:	d0 e0       	ldi	r29, 0x00	; 0
    {
        eeprom_write8uint(addr + i, value);
    3de6:	ce 01       	movw	r24, r28
    3de8:	8e 0d       	add	r24, r14
    3dea:	9f 1d       	adc	r25, r15
    3dec:	6d 2d       	mov	r22, r13
    3dee:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <eeprom_write8uint>
void eeprom_initBytes(uint16_t addr, int nBytes, uint8_t value)
{
    int i;
    _atomic_t _atomic = _atomic_start();

    for (i = 0; i < nBytes; i++)
    3df2:	21 96       	adiw	r28, 0x01	; 1
    3df4:	c0 17       	cp	r28, r16
    3df6:	d1 07       	cpc	r29, r17
    3df8:	b4 f3       	brlt	.-20     	; 0x3de6 <eeprom_initBytes+0x26>
    {
        eeprom_write8uint(addr + i, value);
    }
    _atomic_end(_atomic);
    3dfa:	8c 2d       	mov	r24, r12
    3dfc:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    3e00:	df 91       	pop	r29
    3e02:	cf 91       	pop	r28
    3e04:	1f 91       	pop	r17
    3e06:	0f 91       	pop	r16
    3e08:	ff 90       	pop	r15
    3e0a:	ef 90       	pop	r14
    3e0c:	df 90       	pop	r13
    3e0e:	cf 90       	pop	r12
    3e10:	08 95       	ret

00003e12 <eeprom_read8int>:
    return ret;
}

//-------------------------------------------------------------------------
int8_t eeprom_read8int(uint16_t addr)
{
    3e12:	ff 92       	push	r15
    3e14:	0f 93       	push	r16
    3e16:	1f 93       	push	r17
    3e18:	df 93       	push	r29
    3e1a:	cf 93       	push	r28
    3e1c:	0f 92       	push	r0
    3e1e:	cd b7       	in	r28, 0x3d	; 61
    3e20:	de b7       	in	r29, 0x3e	; 62
    3e22:	8c 01       	movw	r16, r24
    uint8_t value;
    _atomic_t _atomic = _atomic_start();
    3e24:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3e28:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3e2a:	e1 99       	sbic	0x1c, 1	; 28
    3e2c:	fe cf       	rjmp	.-4      	; 0x3e2a <eeprom_read8int+0x18>
    value = eeprom_read_byte((uint8_t *) addr);
    3e2e:	c8 01       	movw	r24, r16
    3e30:	0e 94 75 56 	call	0xacea	; 0xacea <__eerd_byte_m128>
    3e34:	89 83       	std	Y+1, r24	; 0x01
    _atomic_end(_atomic);
    3e36:	8f 2d       	mov	r24, r15
    3e38:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    return *(int8_t *) & value;
}
    3e3c:	89 81       	ldd	r24, Y+1	; 0x01
    3e3e:	0f 90       	pop	r0
    3e40:	cf 91       	pop	r28
    3e42:	df 91       	pop	r29
    3e44:	1f 91       	pop	r17
    3e46:	0f 91       	pop	r16
    3e48:	ff 90       	pop	r15
    3e4a:	08 95       	ret

00003e4c <eeprom_read8uint>:
    return;
}

//-------------------------------------------------------------------------
uint8_t eeprom_read8uint(uint16_t addr)
{
    3e4c:	0f 93       	push	r16
    3e4e:	1f 93       	push	r17
    3e50:	cf 93       	push	r28
    3e52:	df 93       	push	r29
    3e54:	ec 01       	movw	r28, r24
    uint8_t ret;
    _atomic_t _atomic = _atomic_start();
    3e56:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    3e5a:	08 2f       	mov	r16, r24

    eeprom_busy_wait();
    3e5c:	e1 99       	sbic	0x1c, 1	; 28
    3e5e:	fe cf       	rjmp	.-4      	; 0x3e5c <eeprom_read8uint+0x10>
    ret = eeprom_read_byte((uint8_t *) addr);
    3e60:	ce 01       	movw	r24, r28
    3e62:	0e 94 75 56 	call	0xacea	; 0xacea <__eerd_byte_m128>
    3e66:	18 2f       	mov	r17, r24
    _atomic_end(_atomic);
    3e68:	80 2f       	mov	r24, r16
    3e6a:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    return ret;
}
    3e6e:	81 2f       	mov	r24, r17
    3e70:	df 91       	pop	r29
    3e72:	cf 91       	pop	r28
    3e74:	1f 91       	pop	r17
    3e76:	0f 91       	pop	r16
    3e78:	08 95       	ret

00003e7a <eeprom_writeBytes>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_writeBytes(uint16_t addr, int nBytes, void *buffer)
{
    3e7a:	9c 01       	movw	r18, r24
    3e7c:	fb 01       	movw	r30, r22
    eeprom_busy_wait();
    3e7e:	e1 99       	sbic	0x1c, 1	; 28
    3e80:	fe cf       	rjmp	.-4      	; 0x3e7e <eeprom_writeBytes+0x4>
    eeprom_write_block(buffer, (void *)addr, nBytes);
    3e82:	ca 01       	movw	r24, r20
    3e84:	b9 01       	movw	r22, r18
    3e86:	af 01       	movw	r20, r30
    3e88:	0e 94 83 56 	call	0xad06	; 0xad06 <__eewr_block_m128>
    return;
}
    3e8c:	08 95       	ret

00003e8e <eeprom_readBytes>:
#include "ioeeprom.h"
#include "../../hardware/avrhardware.h"
#include <avr/eeprom.h>
//-------------------------------------------------------------------------
void eeprom_readBytes(uint16_t addr, int nBytes, void *buffer)
{
    3e8e:	9c 01       	movw	r18, r24
    3e90:	fb 01       	movw	r30, r22
    eeprom_busy_wait();
    3e92:	e1 99       	sbic	0x1c, 1	; 28
    3e94:	fe cf       	rjmp	.-4      	; 0x3e92 <eeprom_readBytes+0x4>
    eeprom_read_block(buffer, (void *)addr, nBytes);
    3e96:	ca 01       	movw	r24, r20
    3e98:	b9 01       	movw	r22, r18
    3e9a:	af 01       	movw	r20, r30
    3e9c:	0e 94 65 56 	call	0xacca	; 0xacca <__eerd_block_m128>
    return;
}
    3ea0:	08 95       	ret

00003ea2 <initFidTable>:
void initFidTable()
{
   int i;
   for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   {
      fidtable[ i ].valid = 0;
    3ea2:	10 92 b6 05 	sts	0x05B6, r1
    3ea6:	10 92 c0 05 	sts	0x05C0, r1
   }
}
    3eaa:	08 95       	ret

00003eac <getFreeFid>:
int getFreeFid()
{
   int i;
   for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   {
      if ( fidtable[ i ].valid == 0 )
    3eac:	80 91 b6 05 	lds	r24, 0x05B6
    3eb0:	88 23       	and	r24, r24
    3eb2:	81 f1       	breq	.+96     	; 0x3f14 <getFreeFid+0x68>
    3eb4:	80 91 c0 05 	lds	r24, 0x05C0
    3eb8:	88 23       	and	r24, r24
    3eba:	79 f1       	breq	.+94     	; 0x3f1a <getFreeFid+0x6e>
      {
         break;
    3ebc:	42 e0       	ldi	r20, 0x02	; 2
    3ebe:	50 e0       	ldi	r21, 0x00	; 0
      }
   }
   fidtable[ i ].valid = 1;
    3ec0:	9a 01       	movw	r18, r20
    3ec2:	22 0f       	add	r18, r18
    3ec4:	33 1f       	adc	r19, r19
    3ec6:	ca 01       	movw	r24, r20
    3ec8:	88 0f       	add	r24, r24
    3eca:	99 1f       	adc	r25, r25
    3ecc:	88 0f       	add	r24, r24
    3ece:	99 1f       	adc	r25, r25
    3ed0:	88 0f       	add	r24, r24
    3ed2:	99 1f       	adc	r25, r25
    3ed4:	28 0f       	add	r18, r24
    3ed6:	39 1f       	adc	r19, r25
    3ed8:	2a 54       	subi	r18, 0x4A	; 74
    3eda:	3a 4f       	sbci	r19, 0xFA	; 250
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	f9 01       	movw	r30, r18
    3ee0:	80 83       	st	Z, r24
   fidtable[ i ].index = i;
    3ee2:	41 83       	std	Z+1, r20	; 0x01
   fidtable[ i ].addr = fidtable[ i ].mode = 0;
    3ee4:	13 82       	std	Z+3, r1	; 0x03
    3ee6:	fa 01       	movw	r30, r20
    3ee8:	ee 0f       	add	r30, r30
    3eea:	ff 1f       	adc	r31, r31
    3eec:	ee 0f       	add	r30, r30
    3eee:	ff 1f       	adc	r31, r31
    3ef0:	e4 0f       	add	r30, r20
    3ef2:	f5 1f       	adc	r31, r21
    3ef4:	ee 0f       	add	r30, r30
    3ef6:	ff 1f       	adc	r31, r31
    3ef8:	e8 54       	subi	r30, 0x48	; 72
    3efa:	fa 4f       	sbci	r31, 0xFA	; 250
    3efc:	10 82       	st	Z, r1
   fidtable[ i ].fpos =  - 1;
    3efe:	8f ef       	ldi	r24, 0xFF	; 255
    3f00:	9f ef       	ldi	r25, 0xFF	; 255
    3f02:	af ef       	ldi	r26, 0xFF	; 255
    3f04:	bf ef       	ldi	r27, 0xFF	; 255
    3f06:	f9 01       	movw	r30, r18
    3f08:	86 83       	std	Z+6, r24	; 0x06
    3f0a:	97 83       	std	Z+7, r25	; 0x07
    3f0c:	a0 87       	std	Z+8, r26	; 0x08
    3f0e:	b1 87       	std	Z+9, r27	; 0x09
   return i;
}
    3f10:	ca 01       	movw	r24, r20
    3f12:	08 95       	ret
int getFreeFid()
{
   int i;
   for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   {
      if ( fidtable[ i ].valid == 0 )
    3f14:	40 e0       	ldi	r20, 0x00	; 0
    3f16:	50 e0       	ldi	r21, 0x00	; 0
    3f18:	d3 cf       	rjmp	.-90     	; 0x3ec0 <getFreeFid+0x14>
      {
         break;
    3f1a:	41 e0       	ldi	r20, 0x01	; 1
    3f1c:	50 e0       	ldi	r21, 0x00	; 0
    3f1e:	d0 cf       	rjmp	.-96     	; 0x3ec0 <getFreeFid+0x14>

00003f20 <releaseFid>:
}

//-------------------------------------------------------------------------
void releaseFid( int fid )
{
   fidtable[ fid ].valid = 0;
    3f20:	9c 01       	movw	r18, r24
    3f22:	fc 01       	movw	r30, r24
    3f24:	ee 0f       	add	r30, r30
    3f26:	ff 1f       	adc	r31, r31
    3f28:	ee 0f       	add	r30, r30
    3f2a:	ff 1f       	adc	r31, r31
    3f2c:	ee 0f       	add	r30, r30
    3f2e:	ff 1f       	adc	r31, r31
    3f30:	22 0f       	add	r18, r18
    3f32:	33 1f       	adc	r19, r19
    3f34:	e2 0f       	add	r30, r18
    3f36:	f3 1f       	adc	r31, r19
    3f38:	ea 54       	subi	r30, 0x4A	; 74
    3f3a:	fa 4f       	sbci	r31, 0xFA	; 250
    3f3c:	10 82       	st	Z, r1
}
    3f3e:	08 95       	ret

00003f40 <releaseAllFid>:
//-------------------------------------------------------------------------
void releaseAllFid()
{
  int i;
  for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   fidtable[ i ].valid = 0;
    3f40:	10 92 b6 05 	sts	0x05B6, r1
    3f44:	10 92 c0 05 	sts	0x05C0, r1
}
    3f48:	08 95       	ret

00003f4a <checkFsValid>:
fid fidtable[ MAX_FILE_TABLE_SIZE ];

//-------------------------------------------------------------------------
int checkFsValid()
{
   if ( checkNodeValid( FSROOTNODE ) == DIRNODE )
    3f4a:	80 e0       	ldi	r24, 0x00	; 0
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <checkNodeValid>
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	11 f0       	breq	.+4      	; 0x3f5e <checkFsValid+0x14>
   }
   else
   {
      return 0;
   }
}
    3f5a:	c9 01       	movw	r24, r18
    3f5c:	08 95       	ret
fid fidtable[ MAX_FILE_TABLE_SIZE ];

//-------------------------------------------------------------------------
int checkFsValid()
{
   if ( checkNodeValid( FSROOTNODE ) == DIRNODE )
    3f5e:	21 e0       	ldi	r18, 0x01	; 1
    3f60:	30 e0       	ldi	r19, 0x00	; 0
   }
   else
   {
      return 0;
   }
}
    3f62:	c9 01       	movw	r24, r18
    3f64:	08 95       	ret

00003f66 <fseek2>:
    return;
}

//-------------------------------------------------------------------------
int fseek2(MYFILE * fp, int32_t offset, int position)
{
    3f66:	cf 92       	push	r12
    3f68:	df 92       	push	r13
    3f6a:	ef 92       	push	r14
    3f6c:	ff 92       	push	r15
    3f6e:	0f 93       	push	r16
    3f70:	1f 93       	push	r17
    3f72:	cf 93       	push	r28
    3f74:	df 93       	push	r29
    3f76:	ec 01       	movw	r28, r24
    3f78:	7a 01       	movw	r14, r20
    3f7a:	8b 01       	movw	r16, r22
    3f7c:	f9 01       	movw	r30, r18
    int temp;

    if (position == 0)
    3f7e:	21 15       	cp	r18, r1
    3f80:	31 05       	cpc	r19, r1
    3f82:	09 f4       	brne	.+2      	; 0x3f86 <fseek2+0x20>
    3f84:	47 c0       	rjmp	.+142    	; 0x4014 <fseek2+0xae>
            return -1;
        }
        fp->fpos = offset;
        return 0;
    }
    temp = fp->fpos;
    3f86:	2e 81       	ldd	r18, Y+6	; 0x06
    3f88:	3f 81       	ldd	r19, Y+7	; 0x07
    3f8a:	48 85       	ldd	r20, Y+8	; 0x08
    3f8c:	59 85       	ldd	r21, Y+9	; 0x09
    3f8e:	69 01       	movw	r12, r18
    if (position == 1)
    3f90:	e1 30       	cpi	r30, 0x01	; 1
    3f92:	f1 05       	cpc	r31, r1
    3f94:	b1 f1       	breq	.+108    	; 0x4002 <fseek2+0x9c>
    {
        fp->fpos = fp->fpos + offset;
    }
    if ((fp->fpos < 0) || (fp->fpos > fp->size))
    3f96:	57 fd       	sbrc	r21, 7
    3f98:	1f c0       	rjmp	.+62     	; 0x3fd8 <fseek2+0x72>
    3f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    3f9e:	a0 e0       	ldi	r26, 0x00	; 0
    3fa0:	b0 e0       	ldi	r27, 0x00	; 0
    3fa2:	82 17       	cp	r24, r18
    3fa4:	93 07       	cpc	r25, r19
    3fa6:	a4 07       	cpc	r26, r20
    3fa8:	b5 07       	cpc	r27, r21
    3faa:	b4 f0       	brlt	.+44     	; 0x3fd8 <fseek2+0x72>
    {
        fp->fpos = temp;
        return -1;
    }
    if (position == 2)
    3fac:	32 97       	sbiw	r30, 0x02	; 2
    3fae:	19 f0       	breq	.+6      	; 0x3fb6 <fseek2+0x50>
        fp->fpos = fp->size + offset;
    }
    if ((fp->fpos < 0) || (fp->fpos > fp->size))
    {
        fp->fpos = temp;
        return -1;
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	1c c0       	rjmp	.+56     	; 0x3fee <fseek2+0x88>
        fp->fpos = temp;
        return -1;
    }
    if (position == 2)
    {
        fp->fpos = fp->size + offset;
    3fb6:	b8 01       	movw	r22, r16
    3fb8:	a7 01       	movw	r20, r14
    3fba:	48 0f       	add	r20, r24
    3fbc:	59 1f       	adc	r21, r25
    3fbe:	6a 1f       	adc	r22, r26
    3fc0:	7b 1f       	adc	r23, r27
    3fc2:	4e 83       	std	Y+6, r20	; 0x06
    3fc4:	5f 83       	std	Y+7, r21	; 0x07
    3fc6:	68 87       	std	Y+8, r22	; 0x08
    3fc8:	79 87       	std	Y+9, r23	; 0x09
    }
    if ((fp->fpos < 0) || (fp->fpos > fp->size))
    3fca:	77 fd       	sbrc	r23, 7
    3fcc:	05 c0       	rjmp	.+10     	; 0x3fd8 <fseek2+0x72>
    3fce:	84 17       	cp	r24, r20
    3fd0:	95 07       	cpc	r25, r21
    3fd2:	a6 07       	cpc	r26, r22
    3fd4:	b7 07       	cpc	r27, r23
    3fd6:	64 f7       	brge	.-40     	; 0x3fb0 <fseek2+0x4a>
    {
        fp->fpos = temp;
    3fd8:	c6 01       	movw	r24, r12
    3fda:	aa 27       	eor	r26, r26
    3fdc:	97 fd       	sbrc	r25, 7
    3fde:	a0 95       	com	r26
    3fe0:	ba 2f       	mov	r27, r26
    3fe2:	8e 83       	std	Y+6, r24	; 0x06
    3fe4:	9f 83       	std	Y+7, r25	; 0x07
    3fe6:	a8 87       	std	Y+8, r26	; 0x08
    3fe8:	b9 87       	std	Y+9, r27	; 0x09
    3fea:	2f ef       	ldi	r18, 0xFF	; 255
    3fec:	3f ef       	ldi	r19, 0xFF	; 255
        return -1;
    }
    return 0;
}
    3fee:	c9 01       	movw	r24, r18
    3ff0:	df 91       	pop	r29
    3ff2:	cf 91       	pop	r28
    3ff4:	1f 91       	pop	r17
    3ff6:	0f 91       	pop	r16
    3ff8:	ff 90       	pop	r15
    3ffa:	ef 90       	pop	r14
    3ffc:	df 90       	pop	r13
    3ffe:	cf 90       	pop	r12
    4000:	08 95       	ret
        return 0;
    }
    temp = fp->fpos;
    if (position == 1)
    {
        fp->fpos = fp->fpos + offset;
    4002:	2e 0d       	add	r18, r14
    4004:	3f 1d       	adc	r19, r15
    4006:	40 1f       	adc	r20, r16
    4008:	51 1f       	adc	r21, r17
    400a:	2e 83       	std	Y+6, r18	; 0x06
    400c:	3f 83       	std	Y+7, r19	; 0x07
    400e:	48 87       	std	Y+8, r20	; 0x08
    4010:	59 87       	std	Y+9, r21	; 0x09
    4012:	c1 cf       	rjmp	.-126    	; 0x3f96 <fseek2+0x30>
{
    int temp;

    if (position == 0)
    {
        if (offset > fp->size)
    4014:	8c 81       	ldd	r24, Y+4	; 0x04
    4016:	9d 81       	ldd	r25, Y+5	; 0x05
    4018:	a0 e0       	ldi	r26, 0x00	; 0
    401a:	b0 e0       	ldi	r27, 0x00	; 0
    401c:	84 17       	cp	r24, r20
    401e:	95 07       	cpc	r25, r21
    4020:	a6 07       	cpc	r26, r22
    4022:	b7 07       	cpc	r27, r23
    4024:	14 f3       	brlt	.-60     	; 0x3fea <fseek2+0x84>
        {
            return -1;
        }
        fp->fpos = offset;
    4026:	4e 83       	std	Y+6, r20	; 0x06
    4028:	5f 83       	std	Y+7, r21	; 0x07
    402a:	68 87       	std	Y+8, r22	; 0x08
    402c:	79 87       	std	Y+9, r23	; 0x09
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	dd cf       	rjmp	.-70     	; 0x3fee <fseek2+0x88>

00004034 <fdirnode>:
    formatFS();
}

//-------------------------------------------------------------------------
void fdirnode(char *buffer, int size, int addr)
{
    4034:	5f 92       	push	r5
    4036:	6f 92       	push	r6
    4038:	7f 92       	push	r7
    403a:	8f 92       	push	r8
    403c:	9f 92       	push	r9
    403e:	af 92       	push	r10
    4040:	bf 92       	push	r11
    4042:	cf 92       	push	r12
    4044:	df 92       	push	r13
    4046:	ef 92       	push	r14
    4048:	ff 92       	push	r15
    404a:	0f 93       	push	r16
    404c:	1f 93       	push	r17
    404e:	df 93       	push	r29
    4050:	cf 93       	push	r28
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
    4056:	2d 97       	sbiw	r28, 0x0d	; 13
    4058:	0f b6       	in	r0, 0x3f	; 63
    405a:	f8 94       	cli
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	cd bf       	out	0x3d, r28	; 61
    4062:	3c 01       	movw	r6, r24
    4064:	4b 01       	movw	r8, r22
    int len;
    char namebuffer[13];
    int i;
    char *q;

    p = buffer + size - 1;
    4066:	08 94       	sec
    4068:	81 08       	sbc	r8, r1
    406a:	91 08       	sbc	r9, r1
    406c:	88 0e       	add	r8, r24
    406e:	99 1e       	adc	r9, r25
    *p = '\0';
    4070:	d4 01       	movw	r26, r8
    4072:	1c 92       	st	X, r1
    p--;
    4074:	74 01       	movw	r14, r8
    4076:	08 94       	sec
    4078:	e1 08       	sbc	r14, r1
    407a:	f1 08       	sbc	r15, r1
    407c:	6a 01       	movw	r12, r20
    407e:	5e 01       	movw	r10, r28
    4080:	08 94       	sec
    4082:	a1 1c       	adc	r10, r1
    4084:	b1 1c       	adc	r11, r1
    while (1)
    {
        getName(namebuffer, currentP);
        len = mystrlen(namebuffer);
        mystrncpy(p - len, namebuffer, len);
        *p = '/';
    4086:	8f e2       	ldi	r24, 0x2F	; 47
    4088:	58 2e       	mov	r5, r24
    *p = '\0';
    p--;
    currentP = addr;
    while (1)
    {
        getName(namebuffer, currentP);
    408a:	c5 01       	movw	r24, r10
    408c:	b6 01       	movw	r22, r12
    408e:	0e 94 f6 29 	call	0x53ec	; 0x53ec <getName>
        len = mystrlen(namebuffer);
    4092:	c5 01       	movw	r24, r10
    4094:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    4098:	48 2f       	mov	r20, r24
        mystrncpy(p - len, namebuffer, len);
    409a:	08 2f       	mov	r16, r24
    409c:	19 2f       	mov	r17, r25
    409e:	c7 01       	movw	r24, r14
    40a0:	80 1b       	sub	r24, r16
    40a2:	91 0b       	sbc	r25, r17
    40a4:	b5 01       	movw	r22, r10
    40a6:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
        *p = '/';
    40aa:	f7 01       	movw	r30, r14
    40ac:	50 82       	st	Z, r5
        p = p - len - 1;
    40ae:	00 95       	com	r16
    40b0:	10 95       	com	r17
    40b2:	e0 0e       	add	r14, r16
    40b4:	f1 1e       	adc	r15, r17
        currentP = fsread8uint(currentP, 31);
    40b6:	c6 01       	movw	r24, r12
    40b8:	6f e1       	ldi	r22, 0x1F	; 31
    40ba:	70 e0       	ldi	r23, 0x00	; 0
    40bc:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    40c0:	c8 2e       	mov	r12, r24
    40c2:	dd 24       	eor	r13, r13
        if (currentP == 0)
    40c4:	c1 14       	cp	r12, r1
    40c6:	d1 04       	cpc	r13, r1
    40c8:	01 f7       	brne	.-64     	; 0x408a <fdirnode+0x56>
        {
            break;
        }
    }
    *p = '/';
    40ca:	d7 01       	movw	r26, r14
    40cc:	5c 92       	st	X, r5
    len = buffer + size - 1 - p;
    40ce:	b4 01       	movw	r22, r8
    40d0:	6e 19       	sub	r22, r14
    40d2:	7f 09       	sbc	r23, r15
    q = buffer;
    for (i = 0; i < len; i++)
    40d4:	16 16       	cp	r1, r22
    40d6:	17 06       	cpc	r1, r23
    40d8:	5c f5       	brge	.+86     	; 0x4130 <fdirnode+0xfc>
    40da:	f3 01       	movw	r30, r6
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	4f e2       	ldi	r20, 0x2F	; 47
    40e2:	05 c0       	rjmp	.+10     	; 0x40ee <fdirnode+0xba>
    {
        *q++ = *p++;
    40e4:	08 94       	sec
    40e6:	e1 1c       	adc	r14, r1
    40e8:	f1 1c       	adc	r15, r1
    40ea:	d7 01       	movw	r26, r14
    40ec:	4c 91       	ld	r20, X
    40ee:	41 93       	st	Z+, r20
        }
    }
    *p = '/';
    len = buffer + size - 1 - p;
    q = buffer;
    for (i = 0; i < len; i++)
    40f0:	2f 5f       	subi	r18, 0xFF	; 255
    40f2:	3f 4f       	sbci	r19, 0xFF	; 255
    40f4:	26 17       	cp	r18, r22
    40f6:	37 07       	cpc	r19, r23
    40f8:	ac f3       	brlt	.-22     	; 0x40e4 <fdirnode+0xb0>
    {
        *q++ = *p++;
    40fa:	f3 01       	movw	r30, r6
    40fc:	e6 0f       	add	r30, r22
    40fe:	f7 1f       	adc	r31, r23
    }

    q--;
    *q = '\0';
    4100:	31 97       	sbiw	r30, 0x01	; 1
    4102:	10 82       	st	Z, r1
    return;
}
    4104:	2d 96       	adiw	r28, 0x0d	; 13
    4106:	0f b6       	in	r0, 0x3f	; 63
    4108:	f8 94       	cli
    410a:	de bf       	out	0x3e, r29	; 62
    410c:	0f be       	out	0x3f, r0	; 63
    410e:	cd bf       	out	0x3d, r28	; 61
    4110:	cf 91       	pop	r28
    4112:	df 91       	pop	r29
    4114:	1f 91       	pop	r17
    4116:	0f 91       	pop	r16
    4118:	ff 90       	pop	r15
    411a:	ef 90       	pop	r14
    411c:	df 90       	pop	r13
    411e:	cf 90       	pop	r12
    4120:	bf 90       	pop	r11
    4122:	af 90       	pop	r10
    4124:	9f 90       	pop	r9
    4126:	8f 90       	pop	r8
    4128:	7f 90       	pop	r7
    412a:	6f 90       	pop	r6
    412c:	5f 90       	pop	r5
    412e:	08 95       	ret
        }
    }
    *p = '/';
    len = buffer + size - 1 - p;
    q = buffer;
    for (i = 0; i < len; i++)
    4130:	f3 01       	movw	r30, r6
    4132:	e6 cf       	rjmp	.-52     	; 0x4100 <fdirnode+0xcc>

00004134 <formatSystem>:
}

//-------------------------------------------------------------------------
void formatSystem()
{
    formatFS();
    4134:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <formatFS>
}
    4138:	08 95       	ret

0000413a <fsearch>:
    buffer[14] = fsread8uint(addr, 30);
}

//-------------------------------------------------------------------------
void fsearch(uint8_t * addrlist, uint8_t * size, char *string)
{
    413a:	cf 92       	push	r12
    413c:	df 92       	push	r13
    413e:	ef 92       	push	r14
    4140:	ff 92       	push	r15
    4142:	1f 93       	push	r17
    4144:	cf 93       	push	r28
    4146:	df 93       	push	r29
    4148:	6c 01       	movw	r12, r24
    414a:	eb 01       	movw	r28, r22
    414c:	7a 01       	movw	r14, r20
    uint8_t i;
    uint8_t *p;

    p = addrlist;
    *size = 0;
    414e:	18 82       	st	Y, r1
    4150:	11 e0       	ldi	r17, 0x01	; 1
    4152:	03 c0       	rjmp	.+6      	; 0x415a <fsearch+0x20>
    for (i = 1; i <= INODENUM; i++)
    4154:	1f 5f       	subi	r17, 0xFF	; 255
    4156:	11 36       	cpi	r17, 0x61	; 97
    4158:	89 f0       	breq	.+34     	; 0x417c <fsearch+0x42>
    {
        if (inodeMatch(i, string) == 1)
    415a:	81 2f       	mov	r24, r17
    415c:	b7 01       	movw	r22, r14
    415e:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <inodeMatch>
    4162:	01 97       	sbiw	r24, 0x01	; 1
    4164:	b9 f7       	brne	.-18     	; 0x4154 <fsearch+0x1a>
        {
            p[*size] = i;
    4166:	88 81       	ld	r24, Y
    4168:	f6 01       	movw	r30, r12
    416a:	e8 0f       	add	r30, r24
    416c:	f1 1d       	adc	r31, r1
    416e:	10 83       	st	Z, r17
            (*size)++;
    4170:	88 81       	ld	r24, Y
    4172:	8f 5f       	subi	r24, 0xFF	; 255
    4174:	88 83       	st	Y, r24
    uint8_t i;
    uint8_t *p;

    p = addrlist;
    *size = 0;
    for (i = 1; i <= INODENUM; i++)
    4176:	1f 5f       	subi	r17, 0xFF	; 255
    4178:	11 36       	cpi	r17, 0x61	; 97
    417a:	79 f7       	brne	.-34     	; 0x415a <fsearch+0x20>
            p[*size] = i;
            (*size)++;
        }
    }
    return;
}
    417c:	df 91       	pop	r29
    417e:	cf 91       	pop	r28
    4180:	1f 91       	pop	r17
    4182:	ff 90       	pop	r15
    4184:	ef 90       	pop	r14
    4186:	df 90       	pop	r13
    4188:	cf 90       	pop	r12
    418a:	08 95       	ret

0000418c <finfonode>:
    return;
}

//-------------------------------------------------------------------------
void finfonode(char *buffer, int addr)
{
    418c:	ef 92       	push	r14
    418e:	ff 92       	push	r15
    4190:	0f 93       	push	r16
    4192:	1f 93       	push	r17
    4194:	7c 01       	movw	r14, r24
    4196:	8b 01       	movw	r16, r22
    fsreadBytes(addr, FILENAMEOFFSET, 12, buffer);
    4198:	cb 01       	movw	r24, r22
    419a:	60 e0       	ldi	r22, 0x00	; 0
    419c:	70 e0       	ldi	r23, 0x00	; 0
    419e:	4c e0       	ldi	r20, 0x0C	; 12
    41a0:	50 e0       	ldi	r21, 0x00	; 0
    41a2:	97 01       	movw	r18, r14
    41a4:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <fsreadBytes>
    buffer[12] = fsread8uint(addr, TYPEOFFSET);
    41a8:	c8 01       	movw	r24, r16
    41aa:	6c e0       	ldi	r22, 0x0C	; 12
    41ac:	70 e0       	ldi	r23, 0x00	; 0
    41ae:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    41b2:	f7 01       	movw	r30, r14
    41b4:	84 87       	std	Z+12, r24	; 0x0c
    buffer[13] = fsread8uint(addr, 29);
    41b6:	c8 01       	movw	r24, r16
    41b8:	6d e1       	ldi	r22, 0x1D	; 29
    41ba:	70 e0       	ldi	r23, 0x00	; 0
    41bc:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    41c0:	f7 01       	movw	r30, r14
    41c2:	85 87       	std	Z+13, r24	; 0x0d
    buffer[14] = fsread8uint(addr, 30);
    41c4:	c8 01       	movw	r24, r16
    41c6:	6e e1       	ldi	r22, 0x1E	; 30
    41c8:	70 e0       	ldi	r23, 0x00	; 0
    41ca:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    41ce:	f7 01       	movw	r30, r14
    41d0:	86 87       	std	Z+14, r24	; 0x0e
}
    41d2:	1f 91       	pop	r17
    41d4:	0f 91       	pop	r16
    41d6:	ff 90       	pop	r15
    41d8:	ef 90       	pop	r14
    41da:	08 95       	ret

000041dc <fcurrentdir>:
    return;
}

//-------------------------------------------------------------------------
void fcurrentdir(char *buffer, int size)
{
    41dc:	5f 92       	push	r5
    41de:	6f 92       	push	r6
    41e0:	7f 92       	push	r7
    41e2:	8f 92       	push	r8
    41e4:	9f 92       	push	r9
    41e6:	af 92       	push	r10
    41e8:	bf 92       	push	r11
    41ea:	cf 92       	push	r12
    41ec:	df 92       	push	r13
    41ee:	ef 92       	push	r14
    41f0:	ff 92       	push	r15
    41f2:	0f 93       	push	r16
    41f4:	1f 93       	push	r17
    41f6:	df 93       	push	r29
    41f8:	cf 93       	push	r28
    41fa:	cd b7       	in	r28, 0x3d	; 61
    41fc:	de b7       	in	r29, 0x3e	; 62
    41fe:	2d 97       	sbiw	r28, 0x0d	; 13
    4200:	0f b6       	in	r0, 0x3f	; 63
    4202:	f8 94       	cli
    4204:	de bf       	out	0x3e, r29	; 62
    4206:	0f be       	out	0x3f, r0	; 63
    4208:	cd bf       	out	0x3d, r28	; 61
    420a:	3c 01       	movw	r6, r24
    420c:	4b 01       	movw	r8, r22
    int len;
    char namebuffer[13];
    int i;
    char *q;

    p = buffer + size - 1;
    420e:	08 94       	sec
    4210:	81 08       	sbc	r8, r1
    4212:	91 08       	sbc	r9, r1
    4214:	88 0e       	add	r8, r24
    4216:	99 1e       	adc	r9, r25
    *p = '\0';
    4218:	d4 01       	movw	r26, r8
    421a:	1c 92       	st	X, r1
    p--;
    421c:	74 01       	movw	r14, r8
    421e:	08 94       	sec
    4220:	e1 08       	sbc	r14, r1
    4222:	f1 08       	sbc	r15, r1
    currentP = getPwd();
    4224:	0e 94 ac 29 	call	0x5358	; 0x5358 <getPwd>
    4228:	6c 01       	movw	r12, r24
    422a:	5e 01       	movw	r10, r28
    422c:	08 94       	sec
    422e:	a1 1c       	adc	r10, r1
    4230:	b1 1c       	adc	r11, r1
    while (1)
    {
        getName(namebuffer, currentP);
        len = mystrlen(namebuffer);
        mystrncpy(p - len, namebuffer, len);
        *p = '/';
    4232:	9f e2       	ldi	r25, 0x2F	; 47
    4234:	59 2e       	mov	r5, r25
    *p = '\0';
    p--;
    currentP = getPwd();
    while (1)
    {
        getName(namebuffer, currentP);
    4236:	c5 01       	movw	r24, r10
    4238:	b6 01       	movw	r22, r12
    423a:	0e 94 f6 29 	call	0x53ec	; 0x53ec <getName>
        len = mystrlen(namebuffer);
    423e:	c5 01       	movw	r24, r10
    4240:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    4244:	48 2f       	mov	r20, r24
        mystrncpy(p - len, namebuffer, len);
    4246:	08 2f       	mov	r16, r24
    4248:	19 2f       	mov	r17, r25
    424a:	c7 01       	movw	r24, r14
    424c:	80 1b       	sub	r24, r16
    424e:	91 0b       	sbc	r25, r17
    4250:	b5 01       	movw	r22, r10
    4252:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
        *p = '/';
    4256:	f7 01       	movw	r30, r14
    4258:	50 82       	st	Z, r5
        p = p - len - 1;
    425a:	00 95       	com	r16
    425c:	10 95       	com	r17
    425e:	e0 0e       	add	r14, r16
    4260:	f1 1e       	adc	r15, r17
        currentP = fsread8uint(currentP, 31);
    4262:	c6 01       	movw	r24, r12
    4264:	6f e1       	ldi	r22, 0x1F	; 31
    4266:	70 e0       	ldi	r23, 0x00	; 0
    4268:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    426c:	c8 2e       	mov	r12, r24
    426e:	dd 24       	eor	r13, r13
        if (currentP == 0)
    4270:	c1 14       	cp	r12, r1
    4272:	d1 04       	cpc	r13, r1
    4274:	01 f7       	brne	.-64     	; 0x4236 <fcurrentdir+0x5a>
        {
            break;
        }
    }
    *p = '/';
    4276:	d7 01       	movw	r26, r14
    4278:	5c 92       	st	X, r5
    len = buffer + size - 1 - p;
    427a:	b4 01       	movw	r22, r8
    427c:	6e 19       	sub	r22, r14
    427e:	7f 09       	sbc	r23, r15
    q = buffer;
    for (i = 0; i < len; i++)
    4280:	16 16       	cp	r1, r22
    4282:	17 06       	cpc	r1, r23
    4284:	5c f5       	brge	.+86     	; 0x42dc <fcurrentdir+0x100>
    4286:	f3 01       	movw	r30, r6
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	4f e2       	ldi	r20, 0x2F	; 47
    428e:	05 c0       	rjmp	.+10     	; 0x429a <fcurrentdir+0xbe>
    {
        *q++ = *p++;
    4290:	08 94       	sec
    4292:	e1 1c       	adc	r14, r1
    4294:	f1 1c       	adc	r15, r1
    4296:	d7 01       	movw	r26, r14
    4298:	4c 91       	ld	r20, X
    429a:	41 93       	st	Z+, r20
        }
    }
    *p = '/';
    len = buffer + size - 1 - p;
    q = buffer;
    for (i = 0; i < len; i++)
    429c:	2f 5f       	subi	r18, 0xFF	; 255
    429e:	3f 4f       	sbci	r19, 0xFF	; 255
    42a0:	26 17       	cp	r18, r22
    42a2:	37 07       	cpc	r19, r23
    42a4:	ac f3       	brlt	.-22     	; 0x4290 <fcurrentdir+0xb4>
    {
        *q++ = *p++;
    42a6:	f3 01       	movw	r30, r6
    42a8:	e6 0f       	add	r30, r22
    42aa:	f7 1f       	adc	r31, r23
    }

    q--;
    *q = '\0';
    42ac:	31 97       	sbiw	r30, 0x01	; 1
    42ae:	10 82       	st	Z, r1
    return;
}
    42b0:	2d 96       	adiw	r28, 0x0d	; 13
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	de bf       	out	0x3e, r29	; 62
    42b8:	0f be       	out	0x3f, r0	; 63
    42ba:	cd bf       	out	0x3d, r28	; 61
    42bc:	cf 91       	pop	r28
    42be:	df 91       	pop	r29
    42c0:	1f 91       	pop	r17
    42c2:	0f 91       	pop	r16
    42c4:	ff 90       	pop	r15
    42c6:	ef 90       	pop	r14
    42c8:	df 90       	pop	r13
    42ca:	cf 90       	pop	r12
    42cc:	bf 90       	pop	r11
    42ce:	af 90       	pop	r10
    42d0:	9f 90       	pop	r9
    42d2:	8f 90       	pop	r8
    42d4:	7f 90       	pop	r7
    42d6:	6f 90       	pop	r6
    42d8:	5f 90       	pop	r5
    42da:	08 95       	ret
        }
    }
    *p = '/';
    len = buffer + size - 1 - p;
    q = buffer;
    for (i = 0; i < len; i++)
    42dc:	f3 01       	movw	r30, r6
    42de:	e6 cf       	rjmp	.-52     	; 0x42ac <fcurrentdir+0xd0>

000042e0 <fexist2>:
    return 0;
}

//-------------------------------------------------------------------------
int fexist2(char *pathname)
{
    42e0:	df 93       	push	r29
    42e2:	cf 93       	push	r28
    42e4:	00 d0       	rcall	.+0      	; 0x42e6 <fexist2+0x6>
    42e6:	cd b7       	in	r28, 0x3d	; 61
    42e8:	de b7       	in	r29, 0x3e	; 62
    int retaddr, state;

    retaddr = locateFileName(pathname, &state);
    42ea:	be 01       	movw	r22, r28
    42ec:	6f 5f       	subi	r22, 0xFF	; 255
    42ee:	7f 4f       	sbci	r23, 0xFF	; 255
    42f0:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <locateFileName>
    42f4:	9c 01       	movw	r18, r24
    if ((retaddr == -1) || (state == 0))
    42f6:	8f ef       	ldi	r24, 0xFF	; 255
    42f8:	2f 3f       	cpi	r18, 0xFF	; 255
    42fa:	38 07       	cpc	r19, r24
    42fc:	31 f4       	brne	.+12     	; 0x430a <fexist2+0x2a>
    }
    else
    {
        return retaddr;
    }
}
    42fe:	c9 01       	movw	r24, r18
    4300:	0f 90       	pop	r0
    4302:	0f 90       	pop	r0
    4304:	cf 91       	pop	r28
    4306:	df 91       	pop	r29
    4308:	08 95       	ret
int fexist2(char *pathname)
{
    int retaddr, state;

    retaddr = locateFileName(pathname, &state);
    if ((retaddr == -1) || (state == 0))
    430a:	89 81       	ldd	r24, Y+1	; 0x01
    430c:	9a 81       	ldd	r25, Y+2	; 0x02
    430e:	89 2b       	or	r24, r25
    4310:	b1 f7       	brne	.-20     	; 0x42fe <fexist2+0x1e>
    4312:	2f ef       	ldi	r18, 0xFF	; 255
    4314:	3f ef       	ldi	r19, 0xFF	; 255
    4316:	f3 cf       	rjmp	.-26     	; 0x42fe <fexist2+0x1e>

00004318 <fchangedir>:
    return 0;
}

//-------------------------------------------------------------------------
void fchangedir(char *path)
{
    4318:	df 93       	push	r29
    431a:	cf 93       	push	r28
    431c:	00 d0       	rcall	.+0      	; 0x431e <fchangedir+0x6>
    431e:	cd b7       	in	r28, 0x3d	; 61
    4320:	de b7       	in	r29, 0x3e	; 62
    int ret, state;

    ret = locateFileName(path, &state);
    4322:	be 01       	movw	r22, r28
    4324:	6f 5f       	subi	r22, 0xFF	; 255
    4326:	7f 4f       	sbci	r23, 0xFF	; 255
    4328:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <locateFileName>
    setPwd(ret);
    432c:	0e 94 b1 29 	call	0x5362	; 0x5362 <setPwd>
    return;
}
    4330:	0f 90       	pop	r0
    4332:	0f 90       	pop	r0
    4334:	cf 91       	pop	r28
    4336:	df 91       	pop	r29
    4338:	08 95       	ret

0000433a <fcopy>:
    return 0;
}

//-------------------------------------------------------------------------
int fcopy(char *source, char *target)
{
    433a:	6f 92       	push	r6
    433c:	7f 92       	push	r7
    433e:	8f 92       	push	r8
    4340:	9f 92       	push	r9
    4342:	af 92       	push	r10
    4344:	bf 92       	push	r11
    4346:	cf 92       	push	r12
    4348:	df 92       	push	r13
    434a:	ef 92       	push	r14
    434c:	ff 92       	push	r15
    434e:	0f 93       	push	r16
    4350:	1f 93       	push	r17
    4352:	df 93       	push	r29
    4354:	cf 93       	push	r28
    4356:	00 d0       	rcall	.+0      	; 0x4358 <fcopy+0x1e>
    4358:	00 d0       	rcall	.+0      	; 0x435a <fcopy+0x20>
    435a:	cd b7       	in	r28, 0x3d	; 61
    435c:	de b7       	in	r29, 0x3e	; 62
    435e:	7c 01       	movw	r14, r24
    4360:	8b 01       	movw	r16, r22
    char *p;
    char *q;
    int NewNode;
    uint8_t namelength;

    p = extractLastName(target);
    4362:	cb 01       	movw	r24, r22
    4364:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <extractLastName>
    4368:	b8 2e       	mov	r11, r24
    436a:	a9 2e       	mov	r10, r25
    q = target + mystrlen(target);
    436c:	c8 01       	movw	r24, r16
    436e:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    4372:	6c 01       	movw	r12, r24
    namelength = q - p;
    ret1 = locateFileName(source, &state1);
    4374:	c7 01       	movw	r24, r14
    4376:	be 01       	movw	r22, r28
    4378:	6f 5f       	subi	r22, 0xFF	; 255
    437a:	7f 4f       	sbci	r23, 0xFF	; 255
    437c:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <locateFileName>
    4380:	4c 01       	movw	r8, r24
    ret2 = locateFileName(target, &state2);
    4382:	c8 01       	movw	r24, r16
    4384:	be 01       	movw	r22, r28
    4386:	6d 5f       	subi	r22, 0xFD	; 253
    4388:	7f 4f       	sbci	r23, 0xFF	; 255
    438a:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <locateFileName>
    438e:	f8 2e       	mov	r15, r24
    NewNode = getVectorNode();
    4390:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <getVectorNode>
    4394:	78 2e       	mov	r7, r24
    4396:	69 2e       	mov	r6, r25
    copyVectorNode(ret1, NewNode);
    4398:	c4 01       	movw	r24, r8
    439a:	67 2d       	mov	r22, r7
    439c:	76 2d       	mov	r23, r6
    439e:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <copyVectorNode>
    fswriteBytes(NewNode, FILENAMEOFFSET, namelength, p);
    43a2:	0c 0d       	add	r16, r12
    43a4:	1d 1d       	adc	r17, r13
    43a6:	0b 19       	sub	r16, r11
    43a8:	87 2d       	mov	r24, r7
    43aa:	96 2d       	mov	r25, r6
    43ac:	60 e0       	ldi	r22, 0x00	; 0
    43ae:	70 e0       	ldi	r23, 0x00	; 0
    43b0:	40 2f       	mov	r20, r16
    43b2:	50 e0       	ldi	r21, 0x00	; 0
    43b4:	2b 2d       	mov	r18, r11
    43b6:	3a 2d       	mov	r19, r10
    43b8:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <fswriteBytes>
    fswrite8uint(NewNode, FILENAMEOFFSET + namelength, 0);
    43bc:	87 2d       	mov	r24, r7
    43be:	96 2d       	mov	r25, r6
    43c0:	60 2f       	mov	r22, r16
    43c2:	70 e0       	ldi	r23, 0x00	; 0
    43c4:	40 e0       	ldi	r20, 0x00	; 0
    43c6:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
    fswrite8uint(NewNode, FILE_PARENTOFFSET, ret2);
    43ca:	87 2d       	mov	r24, r7
    43cc:	96 2d       	mov	r25, r6
    43ce:	6f e1       	ldi	r22, 0x1F	; 31
    43d0:	70 e0       	ldi	r23, 0x00	; 0
    43d2:	4f 2d       	mov	r20, r15
    43d4:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
    addChildNode(ret2, NewNode);
    43d8:	8f 2d       	mov	r24, r15
    43da:	67 2d       	mov	r22, r7
    43dc:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <addChildNode>
    43e0:	2e e0       	ldi	r18, 0x0E	; 14
    43e2:	e2 2e       	mov	r14, r18
    43e4:	f1 2c       	mov	r15, r1
    43e6:	07 c0       	rjmp	.+14     	; 0x43f6 <fcopy+0xbc>
        temp = fsread8uint(ret1, FILE_ADDRPAGEOFFSET + i);
        if (temp > 0)
        {
            temp1 = getFlashPage();
            fswrite8uint(NewNode, FILE_ADDRPAGEOFFSET + i, temp1);
            copyVectorPage(temp, temp1);
    43e8:	08 94       	sec
    43ea:	e1 1c       	adc	r14, r1
    43ec:	f1 1c       	adc	r15, r1
    copyVectorNode(ret1, NewNode);
    fswriteBytes(NewNode, FILENAMEOFFSET, namelength, p);
    fswrite8uint(NewNode, FILENAMEOFFSET + namelength, 0);
    fswrite8uint(NewNode, FILE_PARENTOFFSET, ret2);
    addChildNode(ret2, NewNode);
    for (i = 0; i < 8; i++)
    43ee:	86 e1       	ldi	r24, 0x16	; 22
    43f0:	e8 16       	cp	r14, r24
    43f2:	f1 04       	cpc	r15, r1
    43f4:	e9 f0       	breq	.+58     	; 0x4430 <fcopy+0xf6>
    {
        uint8_t temp, temp1;

        temp = fsread8uint(ret1, FILE_ADDRPAGEOFFSET + i);
    43f6:	c4 01       	movw	r24, r8
    43f8:	b7 01       	movw	r22, r14
    43fa:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    43fe:	08 2f       	mov	r16, r24
        if (temp > 0)
    4400:	88 23       	and	r24, r24
    4402:	91 f3       	breq	.-28     	; 0x43e8 <fcopy+0xae>
        {
            temp1 = getFlashPage();
    4404:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <getFlashPage>
    4408:	18 2f       	mov	r17, r24
            fswrite8uint(NewNode, FILE_ADDRPAGEOFFSET + i, temp1);
    440a:	87 2d       	mov	r24, r7
    440c:	96 2d       	mov	r25, r6
    440e:	b7 01       	movw	r22, r14
    4410:	41 2f       	mov	r20, r17
    4412:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
            copyVectorPage(temp, temp1);
    4416:	80 2f       	mov	r24, r16
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	61 2f       	mov	r22, r17
    441c:	70 e0       	ldi	r23, 0x00	; 0
    441e:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <copyVectorPage>
    4422:	08 94       	sec
    4424:	e1 1c       	adc	r14, r1
    4426:	f1 1c       	adc	r15, r1
    copyVectorNode(ret1, NewNode);
    fswriteBytes(NewNode, FILENAMEOFFSET, namelength, p);
    fswrite8uint(NewNode, FILENAMEOFFSET + namelength, 0);
    fswrite8uint(NewNode, FILE_PARENTOFFSET, ret2);
    addChildNode(ret2, NewNode);
    for (i = 0; i < 8; i++)
    4428:	86 e1       	ldi	r24, 0x16	; 22
    442a:	e8 16       	cp	r14, r24
    442c:	f1 04       	cpc	r15, r1
    442e:	19 f7       	brne	.-58     	; 0x43f6 <fcopy+0xbc>
            fswrite8uint(NewNode, FILE_ADDRPAGEOFFSET + i, temp1);
            copyVectorPage(temp, temp1);
        }
    }
    return 0;
}
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	0f 90       	pop	r0
    4436:	0f 90       	pop	r0
    4438:	0f 90       	pop	r0
    443a:	0f 90       	pop	r0
    443c:	cf 91       	pop	r28
    443e:	df 91       	pop	r29
    4440:	1f 91       	pop	r17
    4442:	0f 91       	pop	r16
    4444:	ff 90       	pop	r15
    4446:	ef 90       	pop	r14
    4448:	df 90       	pop	r13
    444a:	cf 90       	pop	r12
    444c:	bf 90       	pop	r11
    444e:	af 90       	pop	r10
    4450:	9f 90       	pop	r9
    4452:	8f 90       	pop	r8
    4454:	7f 90       	pop	r7
    4456:	6f 90       	pop	r6
    4458:	08 95       	ret

0000445a <fmove>:
    return 0;
}

//-------------------------------------------------------------------------
int fmove(char *source, char *target)
{
    445a:	9f 92       	push	r9
    445c:	af 92       	push	r10
    445e:	bf 92       	push	r11
    4460:	cf 92       	push	r12
    4462:	df 92       	push	r13
    4464:	ef 92       	push	r14
    4466:	ff 92       	push	r15
    4468:	0f 93       	push	r16
    446a:	1f 93       	push	r17
    446c:	df 93       	push	r29
    446e:	cf 93       	push	r28
    4470:	00 d0       	rcall	.+0      	; 0x4472 <fmove+0x18>
    4472:	00 d0       	rcall	.+0      	; 0x4474 <fmove+0x1a>
    4474:	cd b7       	in	r28, 0x3d	; 61
    4476:	de b7       	in	r29, 0x3e	; 62
    4478:	7c 01       	movw	r14, r24
    447a:	8b 01       	movw	r16, r22
    int state1, state2;
    uint8_t parent;
    char *p, *q;
    uint8_t namelength;

    p = extractLastName(target);
    447c:	cb 01       	movw	r24, r22
    447e:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <extractLastName>
    4482:	a8 2e       	mov	r10, r24
    4484:	99 2e       	mov	r9, r25
    q = target + mystrlen(target);
    4486:	c8 01       	movw	r24, r16
    4488:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    448c:	6c 01       	movw	r12, r24
    namelength = q - p;
    ret1 = locateFileName(source, &state1);
    448e:	c7 01       	movw	r24, r14
    4490:	be 01       	movw	r22, r28
    4492:	6f 5f       	subi	r22, 0xFF	; 255
    4494:	7f 4f       	sbci	r23, 0xFF	; 255
    4496:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <locateFileName>
    449a:	f8 2e       	mov	r15, r24
    449c:	e9 2e       	mov	r14, r25
    parent = fsread8uint(ret1, FILE_PARENTOFFSET);
    449e:	6f e1       	ldi	r22, 0x1F	; 31
    44a0:	70 e0       	ldi	r23, 0x00	; 0
    44a2:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    removeChildNode(parent, ret1);
    44a6:	6f 2d       	mov	r22, r15
    44a8:	0e 94 2e 2a 	call	0x545c	; 0x545c <removeChildNode>
    ret2 = locateFileName(target, &state2);
    44ac:	c8 01       	movw	r24, r16
    44ae:	be 01       	movw	r22, r28
    44b0:	6d 5f       	subi	r22, 0xFD	; 253
    44b2:	7f 4f       	sbci	r23, 0xFF	; 255
    44b4:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <locateFileName>
    44b8:	b8 2e       	mov	r11, r24
    fswrite8uint(ret1, FILE_PARENTOFFSET, ret2);
    44ba:	8f 2d       	mov	r24, r15
    44bc:	9e 2d       	mov	r25, r14
    44be:	6f e1       	ldi	r22, 0x1F	; 31
    44c0:	70 e0       	ldi	r23, 0x00	; 0
    44c2:	4b 2d       	mov	r20, r11
    44c4:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
    fswriteBytes(ret1, FILENAMEOFFSET, namelength, p);
    44c8:	0c 0d       	add	r16, r12
    44ca:	1d 1d       	adc	r17, r13
    44cc:	0a 19       	sub	r16, r10
    44ce:	8f 2d       	mov	r24, r15
    44d0:	9e 2d       	mov	r25, r14
    44d2:	60 e0       	ldi	r22, 0x00	; 0
    44d4:	70 e0       	ldi	r23, 0x00	; 0
    44d6:	40 2f       	mov	r20, r16
    44d8:	50 e0       	ldi	r21, 0x00	; 0
    44da:	2a 2d       	mov	r18, r10
    44dc:	39 2d       	mov	r19, r9
    44de:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <fswriteBytes>
    fswrite8uint(ret1, FILENAMEOFFSET + namelength, 0);
    44e2:	8f 2d       	mov	r24, r15
    44e4:	9e 2d       	mov	r25, r14
    44e6:	60 2f       	mov	r22, r16
    44e8:	70 e0       	ldi	r23, 0x00	; 0
    44ea:	40 e0       	ldi	r20, 0x00	; 0
    44ec:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
    addChildNode(ret2, ret1);
    44f0:	8b 2d       	mov	r24, r11
    44f2:	6f 2d       	mov	r22, r15
    44f4:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <addChildNode>
    return 0;
}
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	0f 90       	pop	r0
    44fe:	0f 90       	pop	r0
    4500:	0f 90       	pop	r0
    4502:	0f 90       	pop	r0
    4504:	cf 91       	pop	r28
    4506:	df 91       	pop	r29
    4508:	1f 91       	pop	r17
    450a:	0f 91       	pop	r16
    450c:	ff 90       	pop	r15
    450e:	ef 90       	pop	r14
    4510:	df 90       	pop	r13
    4512:	cf 90       	pop	r12
    4514:	bf 90       	pop	r11
    4516:	af 90       	pop	r10
    4518:	9f 90       	pop	r9
    451a:	08 95       	ret

0000451c <fwrite2>:
    return 0;
}

//-------------------------------------------------------------------------
int fwrite2(MYFILE * fp, void *buffer, int nBytes)
{
    451c:	2f 92       	push	r2
    451e:	3f 92       	push	r3
    4520:	4f 92       	push	r4
    4522:	5f 92       	push	r5
    4524:	6f 92       	push	r6
    4526:	7f 92       	push	r7
    4528:	8f 92       	push	r8
    452a:	9f 92       	push	r9
    452c:	af 92       	push	r10
    452e:	bf 92       	push	r11
    4530:	cf 92       	push	r12
    4532:	df 92       	push	r13
    4534:	ef 92       	push	r14
    4536:	ff 92       	push	r15
    4538:	0f 93       	push	r16
    453a:	1f 93       	push	r17
    453c:	cf 93       	push	r28
    453e:	df 93       	push	r29
    4540:	ec 01       	movw	r28, r24
    4542:	2b 01       	movw	r4, r22
    4544:	3a 01       	movw	r6, r20
    uint8_t realsector;
    int readbytes;
    int pagenum, blockoffset, pageoffset;

    //first it checks whether there is enough space for the writing to take place, then it does the actual writing in the same way as above 
    if (fp->fpos + nBytes <= fp->size)
    4546:	ee 80       	ldd	r14, Y+6	; 0x06
    4548:	ff 80       	ldd	r15, Y+7	; 0x07
    454a:	08 85       	ldd	r16, Y+8	; 0x08
    454c:	19 85       	ldd	r17, Y+9	; 0x09
    454e:	5a 01       	movw	r10, r20
    4550:	cc 24       	eor	r12, r12
    4552:	b7 fc       	sbrc	r11, 7
    4554:	c0 94       	com	r12
    4556:	dc 2c       	mov	r13, r12
    4558:	a6 01       	movw	r20, r12
    455a:	95 01       	movw	r18, r10
    455c:	2e 0d       	add	r18, r14
    455e:	3f 1d       	adc	r19, r15
    4560:	40 1f       	adc	r20, r16
    4562:	51 1f       	adc	r21, r17
    4564:	6c 81       	ldd	r22, Y+4	; 0x04
    4566:	7d 81       	ldd	r23, Y+5	; 0x05
    4568:	cb 01       	movw	r24, r22
    456a:	a0 e0       	ldi	r26, 0x00	; 0
    456c:	b0 e0       	ldi	r27, 0x00	; 0
    456e:	82 17       	cp	r24, r18
    4570:	93 07       	cpc	r25, r19
    4572:	a4 07       	cpc	r26, r20
    4574:	b5 07       	cpc	r27, r21
    4576:	ec f4       	brge	.+58     	; 0x45b2 <fwrite2+0x96>
    }
    else
    {
        uint16_t allocate;

        allocate = (fp->size / 2048) * 2048;
    4578:	97 2f       	mov	r25, r23
    457a:	98 7f       	andi	r25, 0xF8	; 248
    457c:	80 e0       	ldi	r24, 0x00	; 0
        if (fp->size % 2048 > 0)
    457e:	77 70       	andi	r23, 0x07	; 7
    4580:	67 2b       	or	r22, r23
    4582:	11 f0       	breq	.+4      	; 0x4588 <fwrite2+0x6c>
        {
            allocate += 2048;
    4584:	80 50       	subi	r24, 0x00	; 0
    4586:	98 4f       	sbci	r25, 0xF8	; 248
        }
        //     if ((allocate == 32768)&&(fp->fpos + nBytes > 32768))
        //         foobar(); 
        if (fp->fpos + nBytes > allocate)
    4588:	a0 e0       	ldi	r26, 0x00	; 0
    458a:	b0 e0       	ldi	r27, 0x00	; 0
    458c:	82 17       	cp	r24, r18
    458e:	93 07       	cpc	r25, r19
    4590:	a4 07       	cpc	r26, r20
    4592:	b5 07       	cpc	r27, r21
    4594:	0c f4       	brge	.+2      	; 0x4598 <fwrite2+0x7c>
    4596:	ae c0       	rjmp	.+348    	; 0x46f4 <fwrite2+0x1d8>
            newSector(fp->addr);
        }

        if (fp->fpos + nBytes > fp->size)
        {
            fp->size = fp->fpos + nBytes;
    4598:	a3 01       	movw	r20, r6
    459a:	4e 0d       	add	r20, r14
    459c:	5f 1d       	adc	r21, r15
    459e:	5d 83       	std	Y+5, r21	; 0x05
    45a0:	4c 83       	std	Y+4, r20	; 0x04
            fswrite16uint(fp->addr, FILE_SIZEOFFSET, fp->size);
    45a2:	8a 81       	ldd	r24, Y+2	; 0x02
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	6d e1       	ldi	r22, 0x1D	; 29
    45a8:	70 e0       	ldi	r23, 0x00	; 0
    45aa:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <fswrite16uint>
    45ae:	6c 81       	ldd	r22, Y+4	; 0x04
    45b0:	7d 81       	ldd	r23, Y+5	; 0x05
        }
    }
    
    //avoid flash overflow
    if (fp->size > 64000)
    45b2:	61 50       	subi	r22, 0x01	; 1
    45b4:	7a 4f       	sbci	r23, 0xFA	; 250
    45b6:	08 f0       	brcs	.+2      	; 0x45ba <fwrite2+0x9e>
    45b8:	9a c0       	rjmp	.+308    	; 0x46ee <fwrite2+0x1d2>
    	return 2; 
    	 
    startsector = fp->fpos / 2048;
    45ba:	ee 80       	ldd	r14, Y+6	; 0x06
    45bc:	ff 80       	ldd	r15, Y+7	; 0x07
    45be:	08 85       	ldd	r16, Y+8	; 0x08
    45c0:	19 85       	ldd	r17, Y+9	; 0x09
    45c2:	c8 01       	movw	r24, r16
    45c4:	b7 01       	movw	r22, r14
    45c6:	20 e0       	ldi	r18, 0x00	; 0
    45c8:	38 e0       	ldi	r19, 0x08	; 8
    45ca:	40 e0       	ldi	r20, 0x00	; 0
    45cc:	50 e0       	ldi	r21, 0x00	; 0
    45ce:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    45d2:	49 01       	movw	r8, r18
    endsector = (fp->fpos + nBytes - 1) / 2048;
    45d4:	c8 01       	movw	r24, r16
    45d6:	b7 01       	movw	r22, r14
    45d8:	61 50       	subi	r22, 0x01	; 1
    45da:	70 40       	sbci	r23, 0x00	; 0
    45dc:	80 40       	sbci	r24, 0x00	; 0
    45de:	90 40       	sbci	r25, 0x00	; 0
    45e0:	6a 0d       	add	r22, r10
    45e2:	7b 1d       	adc	r23, r11
    45e4:	8c 1d       	adc	r24, r12
    45e6:	9d 1d       	adc	r25, r13
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	38 e0       	ldi	r19, 0x08	; 8
    45ec:	40 e0       	ldi	r20, 0x00	; 0
    45ee:	50 e0       	ldi	r21, 0x00	; 0
    45f0:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    45f4:	19 01       	movw	r2, r18
    if (startsector == endsector)
    45f6:	82 16       	cp	r8, r18
    45f8:	93 06       	cpc	r9, r19
    45fa:	09 f4       	brne	.+2      	; 0x45fe <fwrite2+0xe2>
    45fc:	95 c0       	rjmp	.+298    	; 0x4728 <fwrite2+0x20c>
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, nBytes);
    }
    else
    {
        blockoffset = fp->fpos % 2048;
    45fe:	c8 01       	movw	r24, r16
    4600:	b7 01       	movw	r22, r14
    4602:	20 e0       	ldi	r18, 0x00	; 0
    4604:	38 e0       	ldi	r19, 0x08	; 8
    4606:	40 e0       	ldi	r20, 0x00	; 0
    4608:	50 e0       	ldi	r21, 0x00	; 0
    460a:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    460e:	46 2f       	mov	r20, r22
    4610:	e7 2f       	mov	r30, r23
        pageoffset = blockoffset % 256;
    4612:	86 2f       	mov	r24, r22
    4614:	9e 2f       	mov	r25, r30
    4616:	60 e0       	ldi	r22, 0x00	; 0
    4618:	71 e0       	ldi	r23, 0x01	; 1
    461a:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    461e:	7c 01       	movw	r14, r24
        pagenum = blockoffset / 256;
    4620:	24 2f       	mov	r18, r20
    4622:	3e 2f       	mov	r19, r30
    4624:	c9 01       	movw	r24, r18
    4626:	97 fd       	sbrc	r25, 7
    4628:	b2 c0       	rjmp	.+356    	; 0x478e <fwrite2+0x272>
    462a:	09 2f       	mov	r16, r25
    462c:	11 27       	eor	r17, r17
    462e:	07 fd       	sbrc	r16, 7
    4630:	1a 95       	dec	r17
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    4632:	8a 81       	ldd	r24, Y+2	; 0x02
    4634:	68 2d       	mov	r22, r8
    4636:	0e 94 b6 29 	call	0x536c	; 0x536c <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = 256 - pageoffset;
    463a:	81 2c       	mov	r8, r1
    463c:	61 e0       	ldi	r22, 0x01	; 1
    463e:	96 2e       	mov	r9, r22
    4640:	8e 18       	sub	r8, r14
    4642:	9f 08       	sbc	r9, r15
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, readbytes);
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	01 97       	sbiw	r24, 0x01	; 1
    4648:	88 0f       	add	r24, r24
    464a:	99 1f       	adc	r25, r25
    464c:	88 0f       	add	r24, r24
    464e:	99 1f       	adc	r25, r25
    4650:	88 0f       	add	r24, r24
    4652:	99 1f       	adc	r25, r25
    4654:	80 0f       	add	r24, r16
    4656:	91 1f       	adc	r25, r17
    4658:	6e 2d       	mov	r22, r14
    465a:	a2 01       	movw	r20, r4
    465c:	94 01       	movw	r18, r8
    465e:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <writepagestorage>
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    4662:	6e 81       	ldd	r22, Y+6	; 0x06
    4664:	7f 81       	ldd	r23, Y+7	; 0x07
    4666:	88 85       	ldd	r24, Y+8	; 0x08
    4668:	99 85       	ldd	r25, Y+9	; 0x09
    466a:	61 50       	subi	r22, 0x01	; 1
    466c:	70 40       	sbci	r23, 0x00	; 0
    466e:	80 40       	sbci	r24, 0x00	; 0
    4670:	90 40       	sbci	r25, 0x00	; 0
    4672:	6a 0d       	add	r22, r10
    4674:	7b 1d       	adc	r23, r11
    4676:	8c 1d       	adc	r24, r12
    4678:	9d 1d       	adc	r25, r13
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	38 e0       	ldi	r19, 0x08	; 8
    467e:	40 e0       	ldi	r20, 0x00	; 0
    4680:	50 e0       	ldi	r21, 0x00	; 0
    4682:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    4686:	cb 01       	movw	r24, r22
    4688:	77 fd       	sbrc	r23, 7
    468a:	7e c0       	rjmp	.+252    	; 0x4788 <fwrite2+0x26c>
    468c:	09 2f       	mov	r16, r25
    468e:	11 27       	eor	r17, r17
    4690:	07 fd       	sbrc	r16, 7
    4692:	1a 95       	dec	r17
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, endsector);
    4694:	8a 81       	ldd	r24, Y+2	; 0x02
    4696:	62 2d       	mov	r22, r2
    4698:	0e 94 b6 29 	call	0x536c	; 0x536c <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = nBytes - readbytes;
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, 0, buffer, readbytes);
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	01 97       	sbiw	r24, 0x01	; 1
    46a0:	88 0f       	add	r24, r24
    46a2:	99 1f       	adc	r25, r25
    46a4:	88 0f       	add	r24, r24
    46a6:	99 1f       	adc	r25, r25
    46a8:	88 0f       	add	r24, r24
    46aa:	99 1f       	adc	r25, r25
    46ac:	48 0c       	add	r4, r8
    46ae:	59 1c       	adc	r5, r9
    46b0:	68 18       	sub	r6, r8
    46b2:	79 08       	sbc	r7, r9
    46b4:	80 0f       	add	r24, r16
    46b6:	91 1f       	adc	r25, r17
    46b8:	60 e0       	ldi	r22, 0x00	; 0
    46ba:	a2 01       	movw	r20, r4
    46bc:	93 01       	movw	r18, r6
    46be:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <writepagestorage>
    46c2:	20 e0       	ldi	r18, 0x00	; 0
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    }
    return 0;
}
    46c6:	c9 01       	movw	r24, r18
    46c8:	df 91       	pop	r29
    46ca:	cf 91       	pop	r28
    46cc:	1f 91       	pop	r17
    46ce:	0f 91       	pop	r16
    46d0:	ff 90       	pop	r15
    46d2:	ef 90       	pop	r14
    46d4:	df 90       	pop	r13
    46d6:	cf 90       	pop	r12
    46d8:	bf 90       	pop	r11
    46da:	af 90       	pop	r10
    46dc:	9f 90       	pop	r9
    46de:	8f 90       	pop	r8
    46e0:	7f 90       	pop	r7
    46e2:	6f 90       	pop	r6
    46e4:	5f 90       	pop	r5
    46e6:	4f 90       	pop	r4
    46e8:	3f 90       	pop	r3
    46ea:	2f 90       	pop	r2
    46ec:	08 95       	ret
            fswrite16uint(fp->addr, FILE_SIZEOFFSET, fp->size);
        }
    }
    
    //avoid flash overflow
    if (fp->size > 64000)
    46ee:	22 e0       	ldi	r18, 0x02	; 2
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	e9 cf       	rjmp	.-46     	; 0x46c6 <fwrite2+0x1aa>
        }
        //     if ((allocate == 32768)&&(fp->fpos + nBytes > 32768))
        //         foobar(); 
        if (fp->fpos + nBytes > allocate)
        {
            newSector(fp->addr);
    46f4:	8a 81       	ldd	r24, Y+2	; 0x02
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <newSector>
        }

        if (fp->fpos + nBytes > fp->size)
    46fc:	ee 80       	ldd	r14, Y+6	; 0x06
    46fe:	ff 80       	ldd	r15, Y+7	; 0x07
    4700:	08 85       	ldd	r16, Y+8	; 0x08
    4702:	19 85       	ldd	r17, Y+9	; 0x09
    4704:	6c 81       	ldd	r22, Y+4	; 0x04
    4706:	7d 81       	ldd	r23, Y+5	; 0x05
    4708:	a6 01       	movw	r20, r12
    470a:	95 01       	movw	r18, r10
    470c:	2e 0d       	add	r18, r14
    470e:	3f 1d       	adc	r19, r15
    4710:	40 1f       	adc	r20, r16
    4712:	51 1f       	adc	r21, r17
    4714:	cb 01       	movw	r24, r22
    4716:	a0 e0       	ldi	r26, 0x00	; 0
    4718:	b0 e0       	ldi	r27, 0x00	; 0
    471a:	82 17       	cp	r24, r18
    471c:	93 07       	cpc	r25, r19
    471e:	a4 07       	cpc	r26, r20
    4720:	b5 07       	cpc	r27, r21
    4722:	0c f0       	brlt	.+2      	; 0x4726 <fwrite2+0x20a>
    4724:	46 cf       	rjmp	.-372    	; 0x45b2 <fwrite2+0x96>
    4726:	38 cf       	rjmp	.-400    	; 0x4598 <fwrite2+0x7c>
    	 
    startsector = fp->fpos / 2048;
    endsector = (fp->fpos + nBytes - 1) / 2048;
    if (startsector == endsector)
    {
        blockoffset = fp->fpos % 2048;
    4728:	c8 01       	movw	r24, r16
    472a:	b7 01       	movw	r22, r14
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	38 e0       	ldi	r19, 0x08	; 8
    4730:	40 e0       	ldi	r20, 0x00	; 0
    4732:	50 e0       	ldi	r21, 0x00	; 0
    4734:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    4738:	f6 2e       	mov	r15, r22
    473a:	e7 2e       	mov	r14, r23
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    473c:	cb 01       	movw	r24, r22
    473e:	77 fd       	sbrc	r23, 7
    4740:	29 c0       	rjmp	.+82     	; 0x4794 <fwrite2+0x278>
    4742:	09 2f       	mov	r16, r25
    4744:	11 27       	eor	r17, r17
    4746:	07 fd       	sbrc	r16, 7
    4748:	1a 95       	dec	r17
        //      realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    474a:	8a 81       	ldd	r24, Y+2	; 0x02
    474c:	68 2d       	mov	r22, r8
    474e:	0e 94 b6 29 	call	0x536c	; 0x536c <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, nBytes);
    4752:	28 2f       	mov	r18, r24
    4754:	30 e0       	ldi	r19, 0x00	; 0
    4756:	21 50       	subi	r18, 0x01	; 1
    4758:	30 40       	sbci	r19, 0x00	; 0
    475a:	22 0f       	add	r18, r18
    475c:	33 1f       	adc	r19, r19
    475e:	22 0f       	add	r18, r18
    4760:	33 1f       	adc	r19, r19
    4762:	22 0f       	add	r18, r18
    4764:	33 1f       	adc	r19, r19
    4766:	8f 2d       	mov	r24, r15
    4768:	9e 2d       	mov	r25, r14
    476a:	60 e0       	ldi	r22, 0x00	; 0
    476c:	71 e0       	ldi	r23, 0x01	; 1
    476e:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    4772:	68 2f       	mov	r22, r24
    4774:	c9 01       	movw	r24, r18
    4776:	80 0f       	add	r24, r16
    4778:	91 1f       	adc	r25, r17
    477a:	a2 01       	movw	r20, r4
    477c:	93 01       	movw	r18, r6
    477e:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <writepagestorage>
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	9f cf       	rjmp	.-194    	; 0x46c6 <fwrite2+0x1aa>
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, readbytes);
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    4788:	81 50       	subi	r24, 0x01	; 1
    478a:	9f 4f       	sbci	r25, 0xFF	; 255
    478c:	7f cf       	rjmp	.-258    	; 0x468c <fwrite2+0x170>
    }
    else
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    478e:	81 50       	subi	r24, 0x01	; 1
    4790:	9f 4f       	sbci	r25, 0xFF	; 255
    4792:	4b cf       	rjmp	.-362    	; 0x462a <fwrite2+0x10e>
    endsector = (fp->fpos + nBytes - 1) / 2048;
    if (startsector == endsector)
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    4794:	81 50       	subi	r24, 0x01	; 1
    4796:	9f 4f       	sbci	r25, 0xFF	; 255
    4798:	d4 cf       	rjmp	.-88     	; 0x4742 <fwrite2+0x226>

0000479a <fread2>:
    }
}

//-------------------------------------------------------------------------
int fread2(MYFILE * fp, void *buffer, int nBytes)
{
    479a:	2f 92       	push	r2
    479c:	3f 92       	push	r3
    479e:	4f 92       	push	r4
    47a0:	5f 92       	push	r5
    47a2:	6f 92       	push	r6
    47a4:	7f 92       	push	r7
    47a6:	8f 92       	push	r8
    47a8:	9f 92       	push	r9
    47aa:	af 92       	push	r10
    47ac:	bf 92       	push	r11
    47ae:	cf 92       	push	r12
    47b0:	df 92       	push	r13
    47b2:	ef 92       	push	r14
    47b4:	ff 92       	push	r15
    47b6:	0f 93       	push	r16
    47b8:	1f 93       	push	r17
    47ba:	df 93       	push	r29
    47bc:	cf 93       	push	r28
    47be:	00 d0       	rcall	.+0      	; 0x47c0 <fread2+0x26>
    47c0:	00 d0       	rcall	.+0      	; 0x47c2 <fread2+0x28>
    47c2:	00 d0       	rcall	.+0      	; 0x47c4 <fread2+0x2a>
    47c4:	cd b7       	in	r28, 0x3d	; 61
    47c6:	de b7       	in	r29, 0x3e	; 62
    47c8:	4c 01       	movw	r8, r24
    47ca:	7c 83       	std	Y+4, r23	; 0x04
    47cc:	6b 83       	std	Y+3, r22	; 0x03
    47ce:	1a 01       	movw	r2, r20
    int endsector;
    uint8_t realsector;
    int readbytes;
    int pagenum, blockoffset, pageoffset;

    if (fp->fpos + nBytes > fp->size)
    47d0:	fc 01       	movw	r30, r24
    47d2:	a6 80       	ldd	r10, Z+6	; 0x06
    47d4:	b7 80       	ldd	r11, Z+7	; 0x07
    47d6:	c0 84       	ldd	r12, Z+8	; 0x08
    47d8:	d1 84       	ldd	r13, Z+9	; 0x09
    47da:	2a 01       	movw	r4, r20
    47dc:	66 24       	eor	r6, r6
    47de:	57 fc       	sbrc	r5, 7
    47e0:	60 94       	com	r6
    47e2:	76 2c       	mov	r7, r6
    47e4:	83 01       	movw	r16, r6
    47e6:	72 01       	movw	r14, r4
    47e8:	ea 0c       	add	r14, r10
    47ea:	fb 1c       	adc	r15, r11
    47ec:	0c 1d       	adc	r16, r12
    47ee:	1d 1d       	adc	r17, r13
    47f0:	84 81       	ldd	r24, Z+4	; 0x04
    47f2:	95 81       	ldd	r25, Z+5	; 0x05
    47f4:	a0 e0       	ldi	r26, 0x00	; 0
    47f6:	b0 e0       	ldi	r27, 0x00	; 0
    47f8:	8e 15       	cp	r24, r14
    47fa:	9f 05       	cpc	r25, r15
    47fc:	a0 07       	cpc	r26, r16
    47fe:	b1 07       	cpc	r27, r17
    4800:	0c f4       	brge	.+2      	; 0x4804 <fread2+0x6a>
    4802:	a5 c0       	rjmp	.+330    	; 0x494e <fread2+0x1b4>
    {
        return -1;
    }
    startsector = fp->fpos / 2048;
    4804:	c6 01       	movw	r24, r12
    4806:	b5 01       	movw	r22, r10
    4808:	20 e0       	ldi	r18, 0x00	; 0
    480a:	38 e0       	ldi	r19, 0x08	; 8
    480c:	40 e0       	ldi	r20, 0x00	; 0
    480e:	50 e0       	ldi	r21, 0x00	; 0
    4810:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    4814:	3e 83       	std	Y+6, r19	; 0x06
    4816:	2d 83       	std	Y+5, r18	; 0x05
    endsector = (fp->fpos + nBytes - 1) / 2048;
    4818:	08 94       	sec
    481a:	e1 08       	sbc	r14, r1
    481c:	f1 08       	sbc	r15, r1
    481e:	01 09       	sbc	r16, r1
    4820:	11 09       	sbc	r17, r1
    4822:	c8 01       	movw	r24, r16
    4824:	b7 01       	movw	r22, r14
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	38 e0       	ldi	r19, 0x08	; 8
    482a:	40 e0       	ldi	r20, 0x00	; 0
    482c:	50 e0       	ldi	r21, 0x00	; 0
    482e:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    4832:	3a 83       	std	Y+2, r19	; 0x02
    4834:	29 83       	std	Y+1, r18	; 0x01
    if (startsector == endsector)
    4836:	8d 81       	ldd	r24, Y+5	; 0x05
    4838:	9e 81       	ldd	r25, Y+6	; 0x06
    483a:	82 17       	cp	r24, r18
    483c:	93 07       	cpc	r25, r19
    483e:	09 f4       	brne	.+2      	; 0x4842 <fread2+0xa8>
    4840:	89 c0       	rjmp	.+274    	; 0x4954 <fread2+0x1ba>
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, nBytes);
    }
    else
    {
        blockoffset = fp->fpos % 2048;
    4842:	c6 01       	movw	r24, r12
    4844:	b5 01       	movw	r22, r10
    4846:	20 e0       	ldi	r18, 0x00	; 0
    4848:	38 e0       	ldi	r19, 0x08	; 8
    484a:	40 e0       	ldi	r20, 0x00	; 0
    484c:	50 e0       	ldi	r21, 0x00	; 0
    484e:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    4852:	46 2f       	mov	r20, r22
    4854:	e7 2f       	mov	r30, r23
        pageoffset = blockoffset % 256;
    4856:	86 2f       	mov	r24, r22
    4858:	9e 2f       	mov	r25, r30
    485a:	60 e0       	ldi	r22, 0x00	; 0
    485c:	71 e0       	ldi	r23, 0x01	; 1
    485e:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    4862:	7c 01       	movw	r14, r24
        pagenum = blockoffset / 256;
    4864:	24 2f       	mov	r18, r20
    4866:	3e 2f       	mov	r19, r30
    4868:	c9 01       	movw	r24, r18
    486a:	97 fd       	sbrc	r25, 7
    486c:	a8 c0       	rjmp	.+336    	; 0x49be <fread2+0x224>
    486e:	09 2f       	mov	r16, r25
    4870:	11 27       	eor	r17, r17
    4872:	07 fd       	sbrc	r16, 7
    4874:	1a 95       	dec	r17
        //      realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    4876:	f4 01       	movw	r30, r8
    4878:	82 81       	ldd	r24, Z+2	; 0x02
    487a:	6d 81       	ldd	r22, Y+5	; 0x05
    487c:	0e 94 b6 29 	call	0x536c	; 0x536c <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = 256 - pageoffset;
    4880:	c1 2c       	mov	r12, r1
    4882:	31 e0       	ldi	r19, 0x01	; 1
    4884:	d3 2e       	mov	r13, r19
    4886:	ce 18       	sub	r12, r14
    4888:	df 08       	sbc	r13, r15
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, readbytes);
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	01 97       	sbiw	r24, 0x01	; 1
    488e:	88 0f       	add	r24, r24
    4890:	99 1f       	adc	r25, r25
    4892:	88 0f       	add	r24, r24
    4894:	99 1f       	adc	r25, r25
    4896:	88 0f       	add	r24, r24
    4898:	99 1f       	adc	r25, r25
    489a:	80 0f       	add	r24, r16
    489c:	91 1f       	adc	r25, r17
    489e:	6e 2d       	mov	r22, r14
    48a0:	4b 81       	ldd	r20, Y+3	; 0x03
    48a2:	5c 81       	ldd	r21, Y+4	; 0x04
    48a4:	96 01       	movw	r18, r12
    48a6:	0e 94 31 35 	call	0x6a62	; 0x6a62 <readpagestorage>
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    48aa:	f4 01       	movw	r30, r8
    48ac:	66 81       	ldd	r22, Z+6	; 0x06
    48ae:	77 81       	ldd	r23, Z+7	; 0x07
    48b0:	80 85       	ldd	r24, Z+8	; 0x08
    48b2:	91 85       	ldd	r25, Z+9	; 0x09
    48b4:	61 50       	subi	r22, 0x01	; 1
    48b6:	70 40       	sbci	r23, 0x00	; 0
    48b8:	80 40       	sbci	r24, 0x00	; 0
    48ba:	90 40       	sbci	r25, 0x00	; 0
    48bc:	64 0d       	add	r22, r4
    48be:	75 1d       	adc	r23, r5
    48c0:	86 1d       	adc	r24, r6
    48c2:	97 1d       	adc	r25, r7
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	38 e0       	ldi	r19, 0x08	; 8
    48c8:	40 e0       	ldi	r20, 0x00	; 0
    48ca:	50 e0       	ldi	r21, 0x00	; 0
    48cc:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    48d0:	cb 01       	movw	r24, r22
    48d2:	77 fd       	sbrc	r23, 7
    48d4:	71 c0       	rjmp	.+226    	; 0x49b8 <fread2+0x21e>
    48d6:	09 2f       	mov	r16, r25
    48d8:	11 27       	eor	r17, r17
    48da:	07 fd       	sbrc	r16, 7
    48dc:	1a 95       	dec	r17
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, endsector);
    48de:	f4 01       	movw	r30, r8
    48e0:	82 81       	ldd	r24, Z+2	; 0x02
    48e2:	69 81       	ldd	r22, Y+1	; 0x01
    48e4:	0e 94 b6 29 	call	0x536c	; 0x536c <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = nBytes - readbytes;
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, 0, buffer, readbytes);
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	01 97       	sbiw	r24, 0x01	; 1
    48ec:	88 0f       	add	r24, r24
    48ee:	99 1f       	adc	r25, r25
    48f0:	88 0f       	add	r24, r24
    48f2:	99 1f       	adc	r25, r25
    48f4:	88 0f       	add	r24, r24
    48f6:	99 1f       	adc	r25, r25
    48f8:	2b 81       	ldd	r18, Y+3	; 0x03
    48fa:	3c 81       	ldd	r19, Y+4	; 0x04
    48fc:	2c 0d       	add	r18, r12
    48fe:	3d 1d       	adc	r19, r13
    4900:	3c 83       	std	Y+4, r19	; 0x04
    4902:	2b 83       	std	Y+3, r18	; 0x03
    4904:	2c 18       	sub	r2, r12
    4906:	3d 08       	sbc	r3, r13
    4908:	80 0f       	add	r24, r16
    490a:	91 1f       	adc	r25, r17
    490c:	60 e0       	ldi	r22, 0x00	; 0
    490e:	a9 01       	movw	r20, r18
    4910:	91 01       	movw	r18, r2
    4912:	0e 94 31 35 	call	0x6a62	; 0x6a62 <readpagestorage>
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	30 e0       	ldi	r19, 0x00	; 0
    }
    return 0;
}
    491a:	c9 01       	movw	r24, r18
    491c:	26 96       	adiw	r28, 0x06	; 6
    491e:	0f b6       	in	r0, 0x3f	; 63
    4920:	f8 94       	cli
    4922:	de bf       	out	0x3e, r29	; 62
    4924:	0f be       	out	0x3f, r0	; 63
    4926:	cd bf       	out	0x3d, r28	; 61
    4928:	cf 91       	pop	r28
    492a:	df 91       	pop	r29
    492c:	1f 91       	pop	r17
    492e:	0f 91       	pop	r16
    4930:	ff 90       	pop	r15
    4932:	ef 90       	pop	r14
    4934:	df 90       	pop	r13
    4936:	cf 90       	pop	r12
    4938:	bf 90       	pop	r11
    493a:	af 90       	pop	r10
    493c:	9f 90       	pop	r9
    493e:	8f 90       	pop	r8
    4940:	7f 90       	pop	r7
    4942:	6f 90       	pop	r6
    4944:	5f 90       	pop	r5
    4946:	4f 90       	pop	r4
    4948:	3f 90       	pop	r3
    494a:	2f 90       	pop	r2
    494c:	08 95       	ret
    int endsector;
    uint8_t realsector;
    int readbytes;
    int pagenum, blockoffset, pageoffset;

    if (fp->fpos + nBytes > fp->size)
    494e:	2f ef       	ldi	r18, 0xFF	; 255
    4950:	3f ef       	ldi	r19, 0xFF	; 255
    4952:	e3 cf       	rjmp	.-58     	; 0x491a <fread2+0x180>
    }
    startsector = fp->fpos / 2048;
    endsector = (fp->fpos + nBytes - 1) / 2048;
    if (startsector == endsector)
    {
        blockoffset = fp->fpos % 2048;
    4954:	c6 01       	movw	r24, r12
    4956:	b5 01       	movw	r22, r10
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	38 e0       	ldi	r19, 0x08	; 8
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	50 e0       	ldi	r21, 0x00	; 0
    4960:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    4964:	f6 2e       	mov	r15, r22
    4966:	e7 2e       	mov	r14, r23
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    4968:	cb 01       	movw	r24, r22
    496a:	77 fd       	sbrc	r23, 7
    496c:	2b c0       	rjmp	.+86     	; 0x49c4 <fread2+0x22a>
    496e:	09 2f       	mov	r16, r25
    4970:	11 27       	eor	r17, r17
    4972:	07 fd       	sbrc	r16, 7
    4974:	1a 95       	dec	r17
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //  realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    4976:	f4 01       	movw	r30, r8
    4978:	82 81       	ldd	r24, Z+2	; 0x02
    497a:	6d 81       	ldd	r22, Y+5	; 0x05
    497c:	0e 94 b6 29 	call	0x536c	; 0x536c <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, nBytes);
    4980:	28 2f       	mov	r18, r24
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	21 50       	subi	r18, 0x01	; 1
    4986:	30 40       	sbci	r19, 0x00	; 0
    4988:	22 0f       	add	r18, r18
    498a:	33 1f       	adc	r19, r19
    498c:	22 0f       	add	r18, r18
    498e:	33 1f       	adc	r19, r19
    4990:	22 0f       	add	r18, r18
    4992:	33 1f       	adc	r19, r19
    4994:	8f 2d       	mov	r24, r15
    4996:	9e 2d       	mov	r25, r14
    4998:	60 e0       	ldi	r22, 0x00	; 0
    499a:	71 e0       	ldi	r23, 0x01	; 1
    499c:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    49a0:	68 2f       	mov	r22, r24
    49a2:	c9 01       	movw	r24, r18
    49a4:	80 0f       	add	r24, r16
    49a6:	91 1f       	adc	r25, r17
    49a8:	4b 81       	ldd	r20, Y+3	; 0x03
    49aa:	5c 81       	ldd	r21, Y+4	; 0x04
    49ac:	91 01       	movw	r18, r2
    49ae:	0e 94 31 35 	call	0x6a62	; 0x6a62 <readpagestorage>
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	b1 cf       	rjmp	.-158    	; 0x491a <fread2+0x180>
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, readbytes);
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    49b8:	81 50       	subi	r24, 0x01	; 1
    49ba:	9f 4f       	sbci	r25, 0xFF	; 255
    49bc:	8c cf       	rjmp	.-232    	; 0x48d6 <fread2+0x13c>
    }
    else
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    49be:	81 50       	subi	r24, 0x01	; 1
    49c0:	9f 4f       	sbci	r25, 0xFF	; 255
    49c2:	55 cf       	rjmp	.-342    	; 0x486e <fread2+0xd4>
    endsector = (fp->fpos + nBytes - 1) / 2048;
    if (startsector == endsector)
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    49c4:	81 50       	subi	r24, 0x01	; 1
    49c6:	9f 4f       	sbci	r25, 0xFF	; 255
    49c8:	d2 cf       	rjmp	.-92     	; 0x496e <fread2+0x1d4>

000049ca <fsprintall>:


//-------------------------------------------------------------------------
//vs patch used for debugging only 
void fsprintall()
{
    49ca:	cf 93       	push	r28
    49cc:	df 93       	push	r29
    49ce:	c0 e0       	ldi	r28, 0x00	; 0
    49d0:	d0 e0       	ldi	r29, 0x00	; 0
    int i;

    //  printf("*****************************************************************\n");
    for (i = 0; i <= 96; i++)
    {
        if (checkNodeValid(i) > 0)
    49d2:	ce 01       	movw	r24, r28
    49d4:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <checkNodeValid>
    49d8:	18 16       	cp	r1, r24
    49da:	19 06       	cpc	r1, r25
    49dc:	1c f4       	brge	.+6      	; 0x49e4 <fsprintall+0x1a>
        {
            printNode(i);
    49de:	ce 01       	movw	r24, r28
    49e0:	0e 94 08 27 	call	0x4e10	; 0x4e10 <printNode>
void fsprintall()
{
    int i;

    //  printf("*****************************************************************\n");
    for (i = 0; i <= 96; i++)
    49e4:	21 96       	adiw	r28, 0x01	; 1
    49e6:	c1 36       	cpi	r28, 0x61	; 97
    49e8:	d1 05       	cpc	r29, r1
    49ea:	99 f7       	brne	.-26     	; 0x49d2 <fsprintall+0x8>
        if (checkNodeValid(i) > 0)
        {
            printNode(i);
        }
    }
}
    49ec:	df 91       	pop	r29
    49ee:	cf 91       	pop	r28
    49f0:	08 95       	ret

000049f2 <fcheckStorageAllocation>:
}

//-------------------------------------------------------------------------
int fcheckStorageAllocation()
{
    return countVectorFlash();
    49f2:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <countVectorFlash>
}
    49f6:	08 95       	ret

000049f8 <fcheckFSAllocation>:
}

//-------------------------------------------------------------------------
int fcheckFSAllocation()
{
    return countVectorNode();
    49f8:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <countVectorNode>
}
    49fc:	08 95       	ret

000049fe <fdelete2>:
//-------------------------------------------------------------------------
int fdelete2(char *pathname)
{
    int ret;

    if ((ret = fexist2(pathname)) == -1)
    49fe:	0e 94 70 21 	call	0x42e0	; 0x42e0 <fexist2>
    4a02:	2f ef       	ldi	r18, 0xFF	; 255
    4a04:	8f 3f       	cpi	r24, 0xFF	; 255
    4a06:	92 07       	cpc	r25, r18
    4a08:	31 f0       	breq	.+12     	; 0x4a16 <fdelete2+0x18>
    {
        return -1;
    }
    else
    {
        deleteNode(ret);
    4a0a:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <deleteNode>
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
        return 0;
    }
}
    4a12:	c9 01       	movw	r24, r18
    4a14:	08 95       	ret
//-------------------------------------------------------------------------
int fdelete2(char *pathname)
{
    int ret;

    if ((ret = fexist2(pathname)) == -1)
    4a16:	2f ef       	ldi	r18, 0xFF	; 255
    4a18:	3f ef       	ldi	r19, 0xFF	; 255
    else
    {
        deleteNode(ret);
        return 0;
    }
}
    4a1a:	c9 01       	movw	r24, r18
    4a1c:	08 95       	ret

00004a1e <fcreatedir2>:
    }
}

//-------------------------------------------------------------------------
int fcreatedir2(char *pathname)
{
    4a1e:	ef 92       	push	r14
    4a20:	ff 92       	push	r15
    4a22:	0f 93       	push	r16
    4a24:	1f 93       	push	r17
    4a26:	df 93       	push	r29
    4a28:	cf 93       	push	r28
    4a2a:	00 d0       	rcall	.+0      	; 0x4a2c <fcreatedir2+0xe>
    4a2c:	cd b7       	in	r28, 0x3d	; 61
    4a2e:	de b7       	in	r29, 0x3e	; 62
    4a30:	7c 01       	movw	r14, r24
    int retaddr, state;

    retaddr = locateFileName(pathname, &state);
    4a32:	be 01       	movw	r22, r28
    4a34:	6f 5f       	subi	r22, 0xFF	; 255
    4a36:	7f 4f       	sbci	r23, 0xFF	; 255
    4a38:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <locateFileName>
    4a3c:	8c 01       	movw	r16, r24
    if (retaddr == -1)
    4a3e:	8f ef       	ldi	r24, 0xFF	; 255
    4a40:	0f 3f       	cpi	r16, 0xFF	; 255
    4a42:	18 07       	cpc	r17, r24
    4a44:	61 f4       	brne	.+24     	; 0x4a5e <fcreatedir2+0x40>
    }
    //first, file does not exist
    if (state == 0)
    {
        createDir(extractLastName(pathname), retaddr);
        return 0;
    4a46:	2f ef       	ldi	r18, 0xFF	; 255
    4a48:	3f ef       	ldi	r19, 0xFF	; 255
    }
    return -1;
}
    4a4a:	c9 01       	movw	r24, r18
    4a4c:	0f 90       	pop	r0
    4a4e:	0f 90       	pop	r0
    4a50:	cf 91       	pop	r28
    4a52:	df 91       	pop	r29
    4a54:	1f 91       	pop	r17
    4a56:	0f 91       	pop	r16
    4a58:	ff 90       	pop	r15
    4a5a:	ef 90       	pop	r14
    4a5c:	08 95       	ret
    if (retaddr == -1)
    {
        return -1;
    }
    //first, file does not exist
    if (state == 0)
    4a5e:	89 81       	ldd	r24, Y+1	; 0x01
    4a60:	9a 81       	ldd	r25, Y+2	; 0x02
    4a62:	89 2b       	or	r24, r25
    4a64:	81 f7       	brne	.-32     	; 0x4a46 <fcreatedir2+0x28>
    {
        createDir(extractLastName(pathname), retaddr);
    4a66:	c7 01       	movw	r24, r14
    4a68:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <extractLastName>
    4a6c:	b8 01       	movw	r22, r16
    4a6e:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <createDir>
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	e9 cf       	rjmp	.-46     	; 0x4a4a <fcreatedir2+0x2c>

00004a78 <fclose2>:
}

//-------------------------------------------------------------------------
void fclose2(MYFILE * fp)
{
    releaseFid(fp->index);
    4a78:	fc 01       	movw	r30, r24
    4a7a:	81 81       	ldd	r24, Z+1	; 0x01
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <releaseFid>
    fp = NULL;
    return;
}
    4a82:	08 95       	ret

00004a84 <fopen2>:

extern fid fidtable[MAX_FILE_TABLE_SIZE];

//-------------------------------------------------------------------------
MYFILE *fopen2(char *pathname, char *mode)
{
    4a84:	af 92       	push	r10
    4a86:	bf 92       	push	r11
    4a88:	cf 92       	push	r12
    4a8a:	df 92       	push	r13
    4a8c:	ef 92       	push	r14
    4a8e:	ff 92       	push	r15
    4a90:	0f 93       	push	r16
    4a92:	1f 93       	push	r17
    4a94:	df 93       	push	r29
    4a96:	cf 93       	push	r28
    4a98:	00 d0       	rcall	.+0      	; 0x4a9a <fopen2+0x16>
    4a9a:	cd b7       	in	r28, 0x3d	; 61
    4a9c:	de b7       	in	r29, 0x3e	; 62
    4a9e:	6c 01       	movw	r12, r24
    4aa0:	8b 01       	movw	r16, r22
    int retaddr, state;
    int openmode;

    retaddr = locateFileName(pathname, &state);
    4aa2:	be 01       	movw	r22, r28
    4aa4:	6f 5f       	subi	r22, 0xFF	; 255
    4aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa8:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <locateFileName>
    4aac:	5c 01       	movw	r10, r24
    openmode = fileMode(mode);
    4aae:	c8 01       	movw	r24, r16
    4ab0:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fileMode>
    4ab4:	7c 01       	movw	r14, r24
    //ERROR in open mode 
    if (openmode == 0)
    4ab6:	00 97       	sbiw	r24, 0x00	; 0
    4ab8:	81 f4       	brne	.+32     	; 0x4ada <fopen2+0x56>
    {
        int fid;

        fid = getFreeFid();
        openFile(retaddr, fid, openmode);
        return &fidtable[fid];
    4aba:	20 e0       	ldi	r18, 0x00	; 0
    4abc:	30 e0       	ldi	r19, 0x00	; 0
    }
}
    4abe:	c9 01       	movw	r24, r18
    4ac0:	0f 90       	pop	r0
    4ac2:	0f 90       	pop	r0
    4ac4:	cf 91       	pop	r28
    4ac6:	df 91       	pop	r29
    4ac8:	1f 91       	pop	r17
    4aca:	0f 91       	pop	r16
    4acc:	ff 90       	pop	r15
    4ace:	ef 90       	pop	r14
    4ad0:	df 90       	pop	r13
    4ad2:	cf 90       	pop	r12
    4ad4:	bf 90       	pop	r11
    4ad6:	af 90       	pop	r10
    4ad8:	08 95       	ret
    if (openmode == 0)
    {
        return NULL;
    }
    //If the file location fails, return -1 
    if (retaddr == -1)
    4ada:	8f ef       	ldi	r24, 0xFF	; 255
    4adc:	a8 16       	cp	r10, r24
    4ade:	8f ef       	ldi	r24, 0xFF	; 255
    4ae0:	b8 06       	cpc	r11, r24
    4ae2:	59 f3       	breq	.-42     	; 0x4aba <fopen2+0x36>
    {
        return NULL;
    }
    //first, file does not exist
    if (state == 0)
    4ae4:	89 81       	ldd	r24, Y+1	; 0x01
    4ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae8:	00 97       	sbiw	r24, 0x00	; 0
    4aea:	39 f5       	brne	.+78     	; 0x4b3a <fopen2+0xb6>
    {
        if (openmode == 2)
    4aec:	82 e0       	ldi	r24, 0x02	; 2
    4aee:	e8 16       	cp	r14, r24
    4af0:	f1 04       	cpc	r15, r1
    4af2:	19 f7       	brne	.-58     	; 0x4aba <fopen2+0x36>
        {
            int blockaddr;
            int fid;
            char *temp;

            temp = extractLastName(pathname);
    4af4:	c6 01       	movw	r24, r12
    4af6:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <extractLastName>
            blockaddr = createFileFromDirectory(temp, retaddr);
    4afa:	b5 01       	movw	r22, r10
    4afc:	0e 94 bb 2b 	call	0x5776	; 0x5776 <createFileFromDirectory>
    4b00:	18 2f       	mov	r17, r24
            fid = getFreeFid();
    4b02:	0e 94 56 1f 	call	0x3eac	; 0x3eac <getFreeFid>
    4b06:	08 2f       	mov	r16, r24
    4b08:	f9 2e       	mov	r15, r25
            openFile(blockaddr, fid, openmode);
    4b0a:	81 2f       	mov	r24, r17
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	60 2f       	mov	r22, r16
    4b10:	7f 2d       	mov	r23, r15
    4b12:	42 e0       	ldi	r20, 0x02	; 2
    4b14:	50 e0       	ldi	r21, 0x00	; 0
    4b16:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <openFile>
            return &fidtable[fid];
    4b1a:	80 2f       	mov	r24, r16
    4b1c:	9f 2d       	mov	r25, r15
    {
        int fid;

        fid = getFreeFid();
        openFile(retaddr, fid, openmode);
        return &fidtable[fid];
    4b1e:	9c 01       	movw	r18, r24
    4b20:	22 0f       	add	r18, r18
    4b22:	33 1f       	adc	r19, r19
    4b24:	22 0f       	add	r18, r18
    4b26:	33 1f       	adc	r19, r19
    4b28:	22 0f       	add	r18, r18
    4b2a:	33 1f       	adc	r19, r19
    4b2c:	88 0f       	add	r24, r24
    4b2e:	99 1f       	adc	r25, r25
    4b30:	28 0f       	add	r18, r24
    4b32:	39 1f       	adc	r19, r25
    4b34:	2a 54       	subi	r18, 0x4A	; 74
    4b36:	3a 4f       	sbci	r19, 0xFA	; 250
    4b38:	c2 cf       	rjmp	.-124    	; 0x4abe <fopen2+0x3a>
        else
        {
            return NULL;
        }
    }
    if (state != FILENODE)
    4b3a:	02 97       	sbiw	r24, 0x02	; 2
    4b3c:	09 f0       	breq	.+2      	; 0x4b40 <fopen2+0xbc>
    4b3e:	bd cf       	rjmp	.-134    	; 0x4aba <fopen2+0x36>
        return NULL;
    }
    {
        int fid;

        fid = getFreeFid();
    4b40:	0e 94 56 1f 	call	0x3eac	; 0x3eac <getFreeFid>
    4b44:	18 2f       	mov	r17, r24
    4b46:	09 2f       	mov	r16, r25
        openFile(retaddr, fid, openmode);
    4b48:	c5 01       	movw	r24, r10
    4b4a:	61 2f       	mov	r22, r17
    4b4c:	70 2f       	mov	r23, r16
    4b4e:	a7 01       	movw	r20, r14
    4b50:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <openFile>
        return &fidtable[fid];
    4b54:	81 2f       	mov	r24, r17
    4b56:	90 2f       	mov	r25, r16
    4b58:	e2 cf       	rjmp	.-60     	; 0x4b1e <fopen2+0x9a>

00004b5a <fsinitBytes>:
void fsinitBytes(int inode, int offset, int nBytes, uint8_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    initBytes(addr, nBytes, value);
    4b5a:	88 0f       	add	r24, r24
    4b5c:	99 1f       	adc	r25, r25
    4b5e:	82 95       	swap	r24
    4b60:	92 95       	swap	r25
    4b62:	90 7f       	andi	r25, 0xF0	; 240
    4b64:	98 27       	eor	r25, r24
    4b66:	80 7f       	andi	r24, 0xF0	; 240
    4b68:	98 27       	eor	r25, r24
    4b6a:	86 0f       	add	r24, r22
    4b6c:	97 1f       	adc	r25, r23
    4b6e:	ba 01       	movw	r22, r20
    4b70:	42 2f       	mov	r20, r18
    4b72:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <initBytes>
}
    4b76:	08 95       	ret

00004b78 <fswriteBytes>:
void fswriteBytes(int inode, int offset, int nBytes, void *buffer)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    genericwriteBytes(addr, nBytes, buffer);
    4b78:	88 0f       	add	r24, r24
    4b7a:	99 1f       	adc	r25, r25
    4b7c:	82 95       	swap	r24
    4b7e:	92 95       	swap	r25
    4b80:	90 7f       	andi	r25, 0xF0	; 240
    4b82:	98 27       	eor	r25, r24
    4b84:	80 7f       	andi	r24, 0xF0	; 240
    4b86:	98 27       	eor	r25, r24
    4b88:	86 0f       	add	r24, r22
    4b8a:	97 1f       	adc	r25, r23
    4b8c:	ba 01       	movw	r22, r20
    4b8e:	a9 01       	movw	r20, r18
    4b90:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <genericwriteBytes>
}
    4b94:	08 95       	ret

00004b96 <fsreadBytes>:
void fsreadBytes(int inode, int offset, int nBytes, void *buffer)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    genericreadBytes(addr, nBytes, buffer);
    4b96:	88 0f       	add	r24, r24
    4b98:	99 1f       	adc	r25, r25
    4b9a:	82 95       	swap	r24
    4b9c:	92 95       	swap	r25
    4b9e:	90 7f       	andi	r25, 0xF0	; 240
    4ba0:	98 27       	eor	r25, r24
    4ba2:	80 7f       	andi	r24, 0xF0	; 240
    4ba4:	98 27       	eor	r25, r24
    4ba6:	86 0f       	add	r24, r22
    4ba8:	97 1f       	adc	r25, r23
    4baa:	ba 01       	movw	r22, r20
    4bac:	a9 01       	movw	r20, r18
    4bae:	0e 94 66 1d 	call	0x3acc	; 0x3acc <genericreadBytes>
}
    4bb2:	08 95       	ret

00004bb4 <fswrite32int>:
void fswrite32int(int inode, int offset, int32_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write32uint(addr, value);
    4bb4:	88 0f       	add	r24, r24
    4bb6:	99 1f       	adc	r25, r25
    4bb8:	82 95       	swap	r24
    4bba:	92 95       	swap	r25
    4bbc:	90 7f       	andi	r25, 0xF0	; 240
    4bbe:	98 27       	eor	r25, r24
    4bc0:	80 7f       	andi	r24, 0xF0	; 240
    4bc2:	98 27       	eor	r25, r24
    4bc4:	86 0f       	add	r24, r22
    4bc6:	97 1f       	adc	r25, r23
    4bc8:	ba 01       	movw	r22, r20
    4bca:	a9 01       	movw	r20, r18
    4bcc:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <write32uint>
}
    4bd0:	08 95       	ret

00004bd2 <fswrite32uint>:
void fswrite32uint(int inode, int offset, uint32_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write32uint(addr, value);
    4bd2:	88 0f       	add	r24, r24
    4bd4:	99 1f       	adc	r25, r25
    4bd6:	82 95       	swap	r24
    4bd8:	92 95       	swap	r25
    4bda:	90 7f       	andi	r25, 0xF0	; 240
    4bdc:	98 27       	eor	r25, r24
    4bde:	80 7f       	andi	r24, 0xF0	; 240
    4be0:	98 27       	eor	r25, r24
    4be2:	86 0f       	add	r24, r22
    4be4:	97 1f       	adc	r25, r23
    4be6:	ba 01       	movw	r22, r20
    4be8:	a9 01       	movw	r20, r18
    4bea:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <write32uint>
}
    4bee:	08 95       	ret

00004bf0 <fswrite16int>:
void fswrite16int(int inode, int offset, int16_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write16int(addr, value);
    4bf0:	88 0f       	add	r24, r24
    4bf2:	99 1f       	adc	r25, r25
    4bf4:	82 95       	swap	r24
    4bf6:	92 95       	swap	r25
    4bf8:	90 7f       	andi	r25, 0xF0	; 240
    4bfa:	98 27       	eor	r25, r24
    4bfc:	80 7f       	andi	r24, 0xF0	; 240
    4bfe:	98 27       	eor	r25, r24
    4c00:	86 0f       	add	r24, r22
    4c02:	97 1f       	adc	r25, r23
    4c04:	ba 01       	movw	r22, r20
    4c06:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <write16int>
}
    4c0a:	08 95       	ret

00004c0c <fswrite16uint>:
void fswrite16uint(int inode, int offset, uint16_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write16uint(addr, value);
    4c0c:	88 0f       	add	r24, r24
    4c0e:	99 1f       	adc	r25, r25
    4c10:	82 95       	swap	r24
    4c12:	92 95       	swap	r25
    4c14:	90 7f       	andi	r25, 0xF0	; 240
    4c16:	98 27       	eor	r25, r24
    4c18:	80 7f       	andi	r24, 0xF0	; 240
    4c1a:	98 27       	eor	r25, r24
    4c1c:	86 0f       	add	r24, r22
    4c1e:	97 1f       	adc	r25, r23
    4c20:	ba 01       	movw	r22, r20
    4c22:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <write16uint>
}
    4c26:	08 95       	ret

00004c28 <fswrite8int>:
void fswrite8int(int inode, int offset, int8_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write8int(addr, value);
    4c28:	88 0f       	add	r24, r24
    4c2a:	99 1f       	adc	r25, r25
    4c2c:	82 95       	swap	r24
    4c2e:	92 95       	swap	r25
    4c30:	90 7f       	andi	r25, 0xF0	; 240
    4c32:	98 27       	eor	r25, r24
    4c34:	80 7f       	andi	r24, 0xF0	; 240
    4c36:	98 27       	eor	r25, r24
    4c38:	86 0f       	add	r24, r22
    4c3a:	97 1f       	adc	r25, r23
    4c3c:	64 2f       	mov	r22, r20
    4c3e:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <write8int>
}
    4c42:	08 95       	ret

00004c44 <fswrite8uint>:
void fswrite8uint(int inode, int offset, uint8_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write8uint(addr, value);
    4c44:	88 0f       	add	r24, r24
    4c46:	99 1f       	adc	r25, r25
    4c48:	82 95       	swap	r24
    4c4a:	92 95       	swap	r25
    4c4c:	90 7f       	andi	r25, 0xF0	; 240
    4c4e:	98 27       	eor	r25, r24
    4c50:	80 7f       	andi	r24, 0xF0	; 240
    4c52:	98 27       	eor	r25, r24
    4c54:	86 0f       	add	r24, r22
    4c56:	97 1f       	adc	r25, r23
    4c58:	64 2f       	mov	r22, r20
    4c5a:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <write8uint>
}
    4c5e:	08 95       	ret

00004c60 <fsread32int>:
int32_t fsread32int(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read32int(addr);
    4c60:	88 0f       	add	r24, r24
    4c62:	99 1f       	adc	r25, r25
    4c64:	82 95       	swap	r24
    4c66:	92 95       	swap	r25
    4c68:	90 7f       	andi	r25, 0xF0	; 240
    4c6a:	98 27       	eor	r25, r24
    4c6c:	80 7f       	andi	r24, 0xF0	; 240
    4c6e:	98 27       	eor	r25, r24
    4c70:	86 0f       	add	r24, r22
    4c72:	97 1f       	adc	r25, r23
    4c74:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <read32int>
}
    4c78:	08 95       	ret

00004c7a <fsread32uint>:
uint32_t fsread32uint(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read32uint(addr);
    4c7a:	88 0f       	add	r24, r24
    4c7c:	99 1f       	adc	r25, r25
    4c7e:	82 95       	swap	r24
    4c80:	92 95       	swap	r25
    4c82:	90 7f       	andi	r25, 0xF0	; 240
    4c84:	98 27       	eor	r25, r24
    4c86:	80 7f       	andi	r24, 0xF0	; 240
    4c88:	98 27       	eor	r25, r24
    4c8a:	86 0f       	add	r24, r22
    4c8c:	97 1f       	adc	r25, r23
    4c8e:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <read32uint>
}
    4c92:	08 95       	ret

00004c94 <fsread16int>:
int16_t fsread16int(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read16int(addr);
    4c94:	88 0f       	add	r24, r24
    4c96:	99 1f       	adc	r25, r25
    4c98:	82 95       	swap	r24
    4c9a:	92 95       	swap	r25
    4c9c:	90 7f       	andi	r25, 0xF0	; 240
    4c9e:	98 27       	eor	r25, r24
    4ca0:	80 7f       	andi	r24, 0xF0	; 240
    4ca2:	98 27       	eor	r25, r24
    4ca4:	86 0f       	add	r24, r22
    4ca6:	97 1f       	adc	r25, r23
    4ca8:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <read16int>
}
    4cac:	08 95       	ret

00004cae <fsread16uint>:
uint16_t fsread16uint(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read16uint(addr);
    4cae:	88 0f       	add	r24, r24
    4cb0:	99 1f       	adc	r25, r25
    4cb2:	82 95       	swap	r24
    4cb4:	92 95       	swap	r25
    4cb6:	90 7f       	andi	r25, 0xF0	; 240
    4cb8:	98 27       	eor	r25, r24
    4cba:	80 7f       	andi	r24, 0xF0	; 240
    4cbc:	98 27       	eor	r25, r24
    4cbe:	86 0f       	add	r24, r22
    4cc0:	97 1f       	adc	r25, r23
    4cc2:	0e 94 57 1d 	call	0x3aae	; 0x3aae <read16uint>
}
    4cc6:	08 95       	ret

00004cc8 <fsread8int>:
int8_t fsread8int(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read8int(addr);
    4cc8:	88 0f       	add	r24, r24
    4cca:	99 1f       	adc	r25, r25
    4ccc:	82 95       	swap	r24
    4cce:	92 95       	swap	r25
    4cd0:	90 7f       	andi	r25, 0xF0	; 240
    4cd2:	98 27       	eor	r25, r24
    4cd4:	80 7f       	andi	r24, 0xF0	; 240
    4cd6:	98 27       	eor	r25, r24
    4cd8:	86 0f       	add	r24, r22
    4cda:	97 1f       	adc	r25, r23
    4cdc:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <read8int>
}
    4ce0:	08 95       	ret

00004ce2 <fsread8uint>:
uint8_t fsread8uint(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read8uint(addr);
    4ce2:	88 0f       	add	r24, r24
    4ce4:	99 1f       	adc	r25, r25
    4ce6:	82 95       	swap	r24
    4ce8:	92 95       	swap	r25
    4cea:	90 7f       	andi	r25, 0xF0	; 240
    4cec:	98 27       	eor	r25, r24
    4cee:	80 7f       	andi	r24, 0xF0	; 240
    4cf0:	98 27       	eor	r25, r24
    4cf2:	86 0f       	add	r24, r22
    4cf4:	97 1f       	adc	r25, r23
    4cf6:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <read8uint>
}
    4cfa:	08 95       	ret

00004cfc <extractString>:
#include "fsstring.h"
#include "../../types/types.h"
#include "../../types/string.h"
char *extractString(char *start, char *buffer)
{
    4cfc:	fc 01       	movw	r30, r24
    char *p, *q;

    q = buffer;
    p = start;
    if (*p == '/')
    4cfe:	40 81       	ld	r20, Z
    4d00:	4f 32       	cpi	r20, 0x2F	; 47
    4d02:	b9 f0       	breq	.+46     	; 0x4d32 <extractString+0x36>
    4d04:	dc 01       	movw	r26, r24
    {
        p++;
    4d06:	fb 01       	movw	r30, r22
    4d08:	03 c0       	rjmp	.+6      	; 0x4d10 <extractString+0x14>
    }
    while ((isLetter(*p)) || (*p == '_') || (*p == '.') || (isDigit(*p)))
    {
        *q++ = *p++;
    4d0a:	41 93       	st	Z+, r20
    4d0c:	11 96       	adiw	r26, 0x01	; 1
    4d0e:	4c 91       	ld	r20, X
    p = start;
    if (*p == '/')
    {
        p++;
    }
    while ((isLetter(*p)) || (*p == '_') || (*p == '.') || (isDigit(*p)))
    4d10:	84 2f       	mov	r24, r20
    4d12:	81 56       	subi	r24, 0x61	; 97
    4d14:	8a 31       	cpi	r24, 0x1A	; 26
    4d16:	c8 f3       	brcs	.-14     	; 0x4d0a <extractString+0xe>
    4d18:	80 5e       	subi	r24, 0xE0	; 224
    4d1a:	8a 31       	cpi	r24, 0x1A	; 26
    4d1c:	b0 f3       	brcs	.-20     	; 0x4d0a <extractString+0xe>
    4d1e:	4f 35       	cpi	r20, 0x5F	; 95
    4d20:	a1 f3       	breq	.-24     	; 0x4d0a <extractString+0xe>
    4d22:	4e 32       	cpi	r20, 0x2E	; 46
    4d24:	91 f3       	breq	.-28     	; 0x4d0a <extractString+0xe>
    4d26:	8f 5e       	subi	r24, 0xEF	; 239
    4d28:	8a 30       	cpi	r24, 0x0A	; 10
    4d2a:	78 f3       	brcs	.-34     	; 0x4d0a <extractString+0xe>
    {
        *q++ = *p++;
    }

    *q = '\0';
    4d2c:	10 82       	st	Z, r1
    return p;
}
    4d2e:	cd 01       	movw	r24, r26
    4d30:	08 95       	ret

    q = buffer;
    p = start;
    if (*p == '/')
    {
        p++;
    4d32:	dc 01       	movw	r26, r24
    4d34:	11 96       	adiw	r26, 0x01	; 1
    4d36:	41 81       	ldd	r20, Z+1	; 0x01
    4d38:	e6 cf       	rjmp	.-52     	; 0x4d06 <extractString+0xa>

00004d3a <fileMode>:
    }
}

//-------------------------------------------------------------------------
int fileMode(char *s)
{
    4d3a:	cf 93       	push	r28
    4d3c:	df 93       	push	r29
    4d3e:	ec 01       	movw	r28, r24
    if (mystrlen(s) == 1)
    4d40:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    4d44:	01 97       	sbiw	r24, 0x01	; 1
    4d46:	89 f0       	breq	.+34     	; 0x4d6a <fileMode+0x30>
        if (s[0] == 't')
        {
            return 4;
        }
    }
    else if (mystrlen(s) == 2)
    4d48:	ce 01       	movw	r24, r28
    4d4a:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    4d4e:	02 97       	sbiw	r24, 0x02	; 2
    4d50:	31 f0       	breq	.+12     	; 0x4d5e <fileMode+0x24>
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    else
    {
        return 0;
    }
    return 0;
}
    4d56:	c9 01       	movw	r24, r18
    4d58:	df 91       	pop	r29
    4d5a:	cf 91       	pop	r28
    4d5c:	08 95       	ret
        if (s[0] == 't')
        {
            return 4;
        }
    }
    else if (mystrlen(s) == 2)
    4d5e:	25 e0       	ldi	r18, 0x05	; 5
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    else
    {
        return 0;
    }
    return 0;
}
    4d62:	c9 01       	movw	r24, r18
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	08 95       	ret
//-------------------------------------------------------------------------
int fileMode(char *s)
{
    if (mystrlen(s) == 1)
    {
        if (s[0] == 'r')
    4d6a:	88 81       	ld	r24, Y
    4d6c:	82 37       	cpi	r24, 0x72	; 114
    4d6e:	49 f0       	breq	.+18     	; 0x4d82 <fileMode+0x48>
        {
            return 1;
        }

        if (s[0] == 'w')
    4d70:	87 37       	cpi	r24, 0x77	; 119
    4d72:	69 f0       	breq	.+26     	; 0x4d8e <fileMode+0x54>
        {
            return 2;
        }

        if (s[0] == 'a')
    4d74:	81 36       	cpi	r24, 0x61	; 97
    4d76:	41 f0       	breq	.+16     	; 0x4d88 <fileMode+0x4e>
        {
            return 3;
        }

        if (s[0] == 't')
    4d78:	84 37       	cpi	r24, 0x74	; 116
    4d7a:	59 f7       	brne	.-42     	; 0x4d52 <fileMode+0x18>
    4d7c:	24 e0       	ldi	r18, 0x04	; 4
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	ea cf       	rjmp	.-44     	; 0x4d56 <fileMode+0x1c>
//-------------------------------------------------------------------------
int fileMode(char *s)
{
    if (mystrlen(s) == 1)
    {
        if (s[0] == 'r')
    4d82:	21 e0       	ldi	r18, 0x01	; 1
    4d84:	30 e0       	ldi	r19, 0x00	; 0
    4d86:	e7 cf       	rjmp	.-50     	; 0x4d56 <fileMode+0x1c>
        if (s[0] == 'w')
        {
            return 2;
        }

        if (s[0] == 'a')
    4d88:	23 e0       	ldi	r18, 0x03	; 3
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	e4 cf       	rjmp	.-56     	; 0x4d56 <fileMode+0x1c>
        if (s[0] == 'r')
        {
            return 1;
        }

        if (s[0] == 'w')
    4d8e:	22 e0       	ldi	r18, 0x02	; 2
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	e1 cf       	rjmp	.-62     	; 0x4d56 <fileMode+0x1c>

00004d94 <extractLastName>:
    return p;
}

//-------------------------------------------------------------------------
char *extractLastName(char *pathname)
{
    4d94:	cf 93       	push	r28
    4d96:	df 93       	push	r29
    4d98:	ec 01       	movw	r28, r24
    char *p, *start;
    int length;

    length = mystrlen(pathname);
    4d9a:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    p = pathname + (length - 1);
    4d9e:	fc 01       	movw	r30, r24
    4da0:	31 97       	sbiw	r30, 0x01	; 1
    4da2:	ec 0f       	add	r30, r28
    4da4:	fd 1f       	adc	r31, r29
    start = pathname;
    while ((*p != '/') && (p != start))
    4da6:	80 81       	ld	r24, Z
    4da8:	8f 32       	cpi	r24, 0x2F	; 47
    4daa:	21 f4       	brne	.+8      	; 0x4db4 <extractLastName+0x20>
    4dac:	08 c0       	rjmp	.+16     	; 0x4dbe <extractLastName+0x2a>
    4dae:	82 91       	ld	r24, -Z
    4db0:	8f 32       	cpi	r24, 0x2F	; 47
    4db2:	29 f0       	breq	.+10     	; 0x4dbe <extractLastName+0x2a>
    4db4:	ce 17       	cp	r28, r30
    4db6:	df 07       	cpc	r29, r31
    4db8:	d1 f7       	brne	.-12     	; 0x4dae <extractLastName+0x1a>
    {
        return p;
    }
    else
    {
        return ++p;
    4dba:	fe 01       	movw	r30, r28
    4dbc:	04 c0       	rjmp	.+8      	; 0x4dc6 <extractLastName+0x32>
    while ((*p != '/') && (p != start))
    {
        p--;
    }

    if ((p == start) && ((*start) != '/'))
    4dbe:	ec 17       	cp	r30, r28
    4dc0:	fd 07       	cpc	r31, r29
    4dc2:	29 f0       	breq	.+10     	; 0x4dce <extractLastName+0x3a>
    {
        return p;
    }
    else
    {
        return ++p;
    4dc4:	31 96       	adiw	r30, 0x01	; 1
    }
}
    4dc6:	cf 01       	movw	r24, r30
    4dc8:	df 91       	pop	r29
    4dca:	cf 91       	pop	r28
    4dcc:	08 95       	ret
    while ((*p != '/') && (p != start))
    {
        p--;
    }

    if ((p == start) && ((*start) != '/'))
    4dce:	8f 32       	cpi	r24, 0x2F	; 47
    4dd0:	c9 f3       	breq	.-14     	; 0x4dc4 <extractLastName+0x30>
    4dd2:	f9 cf       	rjmp	.-14     	; 0x4dc6 <extractLastName+0x32>

00004dd4 <checkNodeValid>:




int checkNodeValid(int nodeaddr)
{
    4dd4:	ff 92       	push	r15
    4dd6:	0f 93       	push	r16
    4dd8:	1f 93       	push	r17
    4dda:	8c 01       	movw	r16, r24
    uint8_t validness;
    uint8_t nodetype;

    validness = fsread8uint(nodeaddr, VALIDOFFSET);
    4ddc:	6d e0       	ldi	r22, 0x0D	; 13
    4dde:	70 e0       	ldi	r23, 0x00	; 0
    4de0:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    4de4:	f8 2e       	mov	r15, r24
    nodetype = fsread8uint(nodeaddr, TYPEOFFSET);
    4de6:	c8 01       	movw	r24, r16
    4de8:	6c e0       	ldi	r22, 0x0C	; 12
    4dea:	70 e0       	ldi	r23, 0x00	; 0
    4dec:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    if (validness == 0)
    4df0:	ff 20       	and	r15, r15
    4df2:	39 f0       	breq	.+14     	; 0x4e02 <checkNodeValid+0x2e>
    {
        return 0;
    }
    else
    {
        return (int)nodetype;
    4df4:	28 2f       	mov	r18, r24
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    }
}
    4df8:	c9 01       	movw	r24, r18
    4dfa:	1f 91       	pop	r17
    4dfc:	0f 91       	pop	r16
    4dfe:	ff 90       	pop	r15
    4e00:	08 95       	ret
    uint8_t validness;
    uint8_t nodetype;

    validness = fsread8uint(nodeaddr, VALIDOFFSET);
    nodetype = fsread8uint(nodeaddr, TYPEOFFSET);
    if (validness == 0)
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    }
    else
    {
        return (int)nodetype;
    }
}
    4e06:	c9 01       	movw	r24, r18
    4e08:	1f 91       	pop	r17
    4e0a:	0f 91       	pop	r16
    4e0c:	ff 90       	pop	r15
    4e0e:	08 95       	ret

00004e10 <printNode>:
    return;
}

//-------------------------------------------------------------------------
void printNode(int addr)
{
    4e10:	ef 92       	push	r14
    4e12:	ff 92       	push	r15
    4e14:	0f 93       	push	r16
    4e16:	1f 93       	push	r17
    4e18:	df 93       	push	r29
    4e1a:	cf 93       	push	r28
    4e1c:	cd b7       	in	r28, 0x3d	; 61
    4e1e:	de b7       	in	r29, 0x3e	; 62
    4e20:	2d 97       	sbiw	r28, 0x0d	; 13
    4e22:	0f b6       	in	r0, 0x3f	; 63
    4e24:	f8 94       	cli
    4e26:	de bf       	out	0x3e, r29	; 62
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	cd bf       	out	0x3d, r28	; 61
    4e2c:	7c 01       	movw	r14, r24
    uint8_t uid, parent, type, valid;
    uint8_t subdirectory[10];
    int i;
    uint8_t flashdirectory[8];

    filename[12] = '\0';
    4e2e:	1d 86       	std	Y+13, r1	; 0x0d
    fsreadBytes(addr, FILENAMEOFFSET, 12, filename);
    4e30:	60 e0       	ldi	r22, 0x00	; 0
    4e32:	70 e0       	ldi	r23, 0x00	; 0
    4e34:	4c e0       	ldi	r20, 0x0C	; 12
    4e36:	50 e0       	ldi	r21, 0x00	; 0
    4e38:	9e 01       	movw	r18, r28
    4e3a:	2f 5f       	subi	r18, 0xFF	; 255
    4e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e3e:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <fsreadBytes>
    type = fsread8uint(addr, TYPEOFFSET);
    4e42:	c7 01       	movw	r24, r14
    4e44:	6c e0       	ldi	r22, 0x0C	; 12
    4e46:	70 e0       	ldi	r23, 0x00	; 0
    4e48:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    4e4c:	18 2f       	mov	r17, r24
    valid = fsread8uint(addr, VALIDOFFSET);
    4e4e:	c7 01       	movw	r24, r14
    4e50:	6d e0       	ldi	r22, 0x0D	; 13
    4e52:	70 e0       	ldi	r23, 0x00	; 0
    4e54:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    if ((valid > 0) && (type == DIRNODE))
    4e58:	88 23       	and	r24, r24
    4e5a:	79 f0       	breq	.+30     	; 0x4e7a <printNode+0x6a>
    4e5c:	11 30       	cpi	r17, 0x01	; 1
    4e5e:	21 f1       	breq	.+72     	; 0x4ea8 <printNode+0x98>
        for (i = 0; i < 10; i++)
        {
            subdirectory[i] = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        }
    }
    if ((valid > 0) && (type == FILENODE))
    4e60:	12 30       	cpi	r17, 0x02	; 2
    4e62:	59 f4       	brne	.+22     	; 0x4e7a <printNode+0x6a>
    fsreadBytes(addr, FILENAMEOFFSET, 12, filename);
    type = fsread8uint(addr, TYPEOFFSET);
    valid = fsread8uint(addr, VALIDOFFSET);
    if ((valid > 0) && (type == DIRNODE))
    {
        for (i = 0; i < 10; i++)
    4e64:	0e e0       	ldi	r16, 0x0E	; 14
    4e66:	10 e0       	ldi	r17, 0x00	; 0
    }
    if ((valid > 0) && (type == FILENODE))
    {
        for (i = 0; i < 8; i++)
        {
            flashdirectory[i] = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    4e68:	c7 01       	movw	r24, r14
    4e6a:	b8 01       	movw	r22, r16
    4e6c:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    4e70:	0f 5f       	subi	r16, 0xFF	; 255
    4e72:	1f 4f       	sbci	r17, 0xFF	; 255
            subdirectory[i] = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        }
    }
    if ((valid > 0) && (type == FILENODE))
    {
        for (i = 0; i < 8; i++)
    4e74:	06 31       	cpi	r16, 0x16	; 22
    4e76:	11 05       	cpc	r17, r1
    4e78:	b9 f7       	brne	.-18     	; 0x4e68 <printNode+0x58>
        {
            flashdirectory[i] = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
        }
    }
    uid = fsread8uint(addr, 28);
    4e7a:	c7 01       	movw	r24, r14
    4e7c:	6c e1       	ldi	r22, 0x1C	; 28
    4e7e:	70 e0       	ldi	r23, 0x00	; 0
    4e80:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    parent = fsread8uint(addr, 31);
    4e84:	c7 01       	movw	r24, r14
    4e86:	6f e1       	ldi	r22, 0x1F	; 31
    4e88:	70 e0       	ldi	r23, 0x00	; 0
    4e8a:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
        //                        printf("The %d sub flash is %d\n", i, flashdirectory[i]);
    }
    //        printf("The node parent is %d\n", parent);
    //        printf("*************************\n");
    return;
}
    4e8e:	2d 96       	adiw	r28, 0x0d	; 13
    4e90:	0f b6       	in	r0, 0x3f	; 63
    4e92:	f8 94       	cli
    4e94:	de bf       	out	0x3e, r29	; 62
    4e96:	0f be       	out	0x3f, r0	; 63
    4e98:	cd bf       	out	0x3d, r28	; 61
    4e9a:	cf 91       	pop	r28
    4e9c:	df 91       	pop	r29
    4e9e:	1f 91       	pop	r17
    4ea0:	0f 91       	pop	r16
    4ea2:	ff 90       	pop	r15
    4ea4:	ef 90       	pop	r14
    4ea6:	08 95       	ret

    filename[12] = '\0';
    fsreadBytes(addr, FILENAMEOFFSET, 12, filename);
    type = fsread8uint(addr, TYPEOFFSET);
    valid = fsread8uint(addr, VALIDOFFSET);
    if ((valid > 0) && (type == DIRNODE))
    4ea8:	0e e0       	ldi	r16, 0x0E	; 14
    4eaa:	10 e0       	ldi	r17, 0x00	; 0
    {
        for (i = 0; i < 10; i++)
        {
            subdirectory[i] = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    4eac:	c7 01       	movw	r24, r14
    4eae:	b8 01       	movw	r22, r16
    4eb0:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    4eb4:	0f 5f       	subi	r16, 0xFF	; 255
    4eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    fsreadBytes(addr, FILENAMEOFFSET, 12, filename);
    type = fsread8uint(addr, TYPEOFFSET);
    valid = fsread8uint(addr, VALIDOFFSET);
    if ((valid > 0) && (type == DIRNODE))
    {
        for (i = 0; i < 10; i++)
    4eb8:	08 31       	cpi	r16, 0x18	; 24
    4eba:	11 05       	cpc	r17, r1
    4ebc:	b9 f7       	brne	.-18     	; 0x4eac <printNode+0x9c>
    4ebe:	dd cf       	rjmp	.-70     	; 0x4e7a <printNode+0x6a>

00004ec0 <inodeMatch>:
    return;
}

//-------------------------------------------------------------------------
int inodeMatch(uint8_t addr, char *string)
{
    4ec0:	af 92       	push	r10
    4ec2:	bf 92       	push	r11
    4ec4:	df 92       	push	r13
    4ec6:	ef 92       	push	r14
    4ec8:	ff 92       	push	r15
    4eca:	0f 93       	push	r16
    4ecc:	1f 93       	push	r17
    4ece:	df 93       	push	r29
    4ed0:	cf 93       	push	r28
    4ed2:	cd b7       	in	r28, 0x3d	; 61
    4ed4:	de b7       	in	r29, 0x3e	; 62
    4ed6:	2d 97       	sbiw	r28, 0x0d	; 13
    4ed8:	0f b6       	in	r0, 0x3f	; 63
    4eda:	f8 94       	cli
    4edc:	de bf       	out	0x3e, r29	; 62
    4ede:	0f be       	out	0x3f, r0	; 63
    4ee0:	cd bf       	out	0x3d, r28	; 61
    4ee2:	18 2f       	mov	r17, r24
    4ee4:	5b 01       	movw	r10, r22
    char temp[13];
    uint8_t length;
    uint8_t i;
    uint8_t valid;

    valid = fsread8uint(addr, VALIDOFFSET);
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
    4ee8:	6d e0       	ldi	r22, 0x0D	; 13
    4eea:	70 e0       	ldi	r23, 0x00	; 0
    4eec:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    if (valid == 0)
    4ef0:	88 23       	and	r24, r24
    4ef2:	99 f4       	brne	.+38     	; 0x4f1a <inodeMatch+0x5a>
        return 0;
    }
    fsreadBytes(addr, FILENAMEOFFSET, 12, temp);
    temp[12] = '\0';
    length = mystrlen(temp);
    for (i = 0; i < length; i++)
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
        {
            return 1;
        }
    }
    return 0;
}
    4ef8:	c9 01       	movw	r24, r18
    4efa:	2d 96       	adiw	r28, 0x0d	; 13
    4efc:	0f b6       	in	r0, 0x3f	; 63
    4efe:	f8 94       	cli
    4f00:	de bf       	out	0x3e, r29	; 62
    4f02:	0f be       	out	0x3f, r0	; 63
    4f04:	cd bf       	out	0x3d, r28	; 61
    4f06:	cf 91       	pop	r28
    4f08:	df 91       	pop	r29
    4f0a:	1f 91       	pop	r17
    4f0c:	0f 91       	pop	r16
    4f0e:	ff 90       	pop	r15
    4f10:	ef 90       	pop	r14
    4f12:	df 90       	pop	r13
    4f14:	bf 90       	pop	r11
    4f16:	af 90       	pop	r10
    4f18:	08 95       	ret
    valid = fsread8uint(addr, VALIDOFFSET);
    if (valid == 0)
    {
        return 0;
    }
    fsreadBytes(addr, FILENAMEOFFSET, 12, temp);
    4f1a:	81 2f       	mov	r24, r17
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	60 e0       	ldi	r22, 0x00	; 0
    4f20:	70 e0       	ldi	r23, 0x00	; 0
    4f22:	4c e0       	ldi	r20, 0x0C	; 12
    4f24:	50 e0       	ldi	r21, 0x00	; 0
    4f26:	7e 01       	movw	r14, r28
    4f28:	08 94       	sec
    4f2a:	e1 1c       	adc	r14, r1
    4f2c:	f1 1c       	adc	r15, r1
    4f2e:	97 01       	movw	r18, r14
    4f30:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <fsreadBytes>
    temp[12] = '\0';
    4f34:	1d 86       	std	Y+13, r1	; 0x0d
    length = mystrlen(temp);
    4f36:	c7 01       	movw	r24, r14
    4f38:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    4f3c:	d8 2e       	mov	r13, r24
    for (i = 0; i < length; i++)
    4f3e:	88 23       	and	r24, r24
    4f40:	c9 f2       	breq	.-78     	; 0x4ef4 <inodeMatch+0x34>
    4f42:	87 01       	movw	r16, r14
    4f44:	06 c0       	rjmp	.+12     	; 0x4f52 <inodeMatch+0x92>
    {
        if (superstring(temp + i, string) == 0)
    4f46:	0f 5f       	subi	r16, 0xFF	; 255
    4f48:	1f 4f       	sbci	r17, 0xFF	; 255
        return 0;
    }
    fsreadBytes(addr, FILENAMEOFFSET, 12, temp);
    temp[12] = '\0';
    length = mystrlen(temp);
    for (i = 0; i < length; i++)
    4f4a:	80 2f       	mov	r24, r16
    4f4c:	8e 19       	sub	r24, r14
    4f4e:	8d 15       	cp	r24, r13
    4f50:	88 f6       	brcc	.-94     	; 0x4ef4 <inodeMatch+0x34>
    {
        if (superstring(temp + i, string) == 0)
    4f52:	c8 01       	movw	r24, r16
    4f54:	b5 01       	movw	r22, r10
    4f56:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <superstring>
    4f5a:	89 2b       	or	r24, r25
    4f5c:	a1 f7       	brne	.-24     	; 0x4f46 <inodeMatch+0x86>
    4f5e:	21 e0       	ldi	r18, 0x01	; 1
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	ca cf       	rjmp	.-108    	; 0x4ef8 <inodeMatch+0x38>

00004f64 <copyVectorPage>:
    }
}

//-------------------------------------------------------------------------
void copyVectorPage(int from, int to)
{
    4f64:	ef 92       	push	r14
    4f66:	ff 92       	push	r15
    4f68:	0f 93       	push	r16
    4f6a:	1f 93       	push	r17
    4f6c:	cf 93       	push	r28
    4f6e:	df 93       	push	r29
    4f70:	8b 01       	movw	r16, r22
    4f72:	7c 01       	movw	r14, r24
    4f74:	08 94       	sec
    4f76:	e1 08       	sbc	r14, r1
    4f78:	f1 08       	sbc	r15, r1
    4f7a:	ee 0c       	add	r14, r14
    4f7c:	ff 1c       	adc	r15, r15
    4f7e:	ee 0c       	add	r14, r14
    4f80:	ff 1c       	adc	r15, r15
    4f82:	ee 0c       	add	r14, r14
    4f84:	ff 1c       	adc	r15, r15
    4f86:	01 50       	subi	r16, 0x01	; 1
    4f88:	10 40       	sbci	r17, 0x00	; 0
    4f8a:	00 0f       	add	r16, r16
    4f8c:	11 1f       	adc	r17, r17
    4f8e:	00 0f       	add	r16, r16
    4f90:	11 1f       	adc	r17, r17
    4f92:	00 0f       	add	r16, r16
    4f94:	11 1f       	adc	r17, r17
    4f96:	c0 e0       	ldi	r28, 0x00	; 0
    4f98:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 8; i++)
    {
        pagefrom = i + (from - 1) * 8;
        pageto = i + (to - 1) * 8;
        copyPage(pagefrom, pageto);
    4f9a:	be 01       	movw	r22, r28
    4f9c:	60 0f       	add	r22, r16
    4f9e:	71 1f       	adc	r23, r17
    4fa0:	ce 01       	movw	r24, r28
    4fa2:	8e 0d       	add	r24, r14
    4fa4:	9f 1d       	adc	r25, r15
    4fa6:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <copyPage>
void copyVectorPage(int from, int to)
{
    int i;
    int pagefrom, pageto;

    for (i = 0; i < 8; i++)
    4faa:	21 96       	adiw	r28, 0x01	; 1
    4fac:	c8 30       	cpi	r28, 0x08	; 8
    4fae:	d1 05       	cpc	r29, r1
    4fb0:	a1 f7       	brne	.-24     	; 0x4f9a <copyVectorPage+0x36>
        pagefrom = i + (from - 1) * 8;
        pageto = i + (to - 1) * 8;
        copyPage(pagefrom, pageto);
    }
    return;
}
    4fb2:	df 91       	pop	r29
    4fb4:	cf 91       	pop	r28
    4fb6:	1f 91       	pop	r17
    4fb8:	0f 91       	pop	r16
    4fba:	ff 90       	pop	r15
    4fbc:	ef 90       	pop	r14
    4fbe:	08 95       	ret

00004fc0 <copyVectorNode>:
    buildNewNode(FSROOTNODE, "root", 0, 0, DIRNODE);
}

//-------------------------------------------------------------------------
void copyVectorNode(int from, int to)
{
    4fc0:	ef 92       	push	r14
    4fc2:	ff 92       	push	r15
    4fc4:	0f 93       	push	r16
    4fc6:	1f 93       	push	r17
    4fc8:	cf 93       	push	r28
    4fca:	df 93       	push	r29
    4fcc:	7c 01       	movw	r14, r24
    4fce:	8b 01       	movw	r16, r22
    4fd0:	c0 e0       	ldi	r28, 0x00	; 0
    4fd2:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 32; i++)
    {
        uint8_t temp;

        temp = fsread8uint(from, i);
    4fd4:	c7 01       	movw	r24, r14
    4fd6:	be 01       	movw	r22, r28
    4fd8:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    4fdc:	48 2f       	mov	r20, r24
        fswrite8uint(to, i, temp);
    4fde:	c8 01       	movw	r24, r16
    4fe0:	be 01       	movw	r22, r28
    4fe2:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
//-------------------------------------------------------------------------
void copyVectorNode(int from, int to)
{
    int i;

    for (i = 0; i < 32; i++)
    4fe6:	21 96       	adiw	r28, 0x01	; 1
    4fe8:	c0 32       	cpi	r28, 0x20	; 32
    4fea:	d1 05       	cpc	r29, r1
    4fec:	99 f7       	brne	.-26     	; 0x4fd4 <copyVectorNode+0x14>
        uint8_t temp;

        temp = fsread8uint(from, i);
        fswrite8uint(to, i, temp);
    }
}
    4fee:	df 91       	pop	r29
    4ff0:	cf 91       	pop	r28
    4ff2:	1f 91       	pop	r17
    4ff4:	0f 91       	pop	r16
    4ff6:	ff 90       	pop	r15
    4ff8:	ef 90       	pop	r14
    4ffa:	08 95       	ret

00004ffc <deleteNode>:
    initVectorNode();
}

//-------------------------------------------------------------------------
void deleteNode(int addr)
{
    4ffc:	ef 92       	push	r14
    4ffe:	ff 92       	push	r15
    5000:	0f 93       	push	r16
    5002:	1f 93       	push	r17
    5004:	cf 93       	push	r28
    5006:	df 93       	push	r29
    5008:	7c 01       	movw	r14, r24
    uint8_t type;
    uint8_t parent;

    type = fsread8uint(addr, TYPEOFFSET);
    500a:	6c e0       	ldi	r22, 0x0C	; 12
    500c:	70 e0       	ldi	r23, 0x00	; 0
    500e:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    5012:	18 2f       	mov	r17, r24
    parent = fsread8uint(addr, 31);
    5014:	c7 01       	movw	r24, r14
    5016:	6f e1       	ldi	r22, 0x1F	; 31
    5018:	70 e0       	ldi	r23, 0x00	; 0
    501a:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    501e:	08 2f       	mov	r16, r24
    if (type == DIRNODE)
    5020:	11 30       	cpi	r17, 0x01	; 1
    5022:	99 f0       	breq	.+38     	; 0x504a <deleteNode+0x4e>
                    break;
                }
            }
        }
    }
    else if (type == FILENODE)
    5024:	12 30       	cpi	r17, 0x02	; 2
    5026:	09 f4       	brne	.+2      	; 0x502a <deleteNode+0x2e>
    5028:	63 c0       	rjmp	.+198    	; 0x50f0 <deleteNode+0xf4>
                    break;
                }
            }
        }
    }
    else if (type == DEVNODE)
    502a:	13 30       	cpi	r17, 0x03	; 3
    502c:	09 f4       	brne	.+2      	; 0x5030 <deleteNode+0x34>
    502e:	44 c0       	rjmp	.+136    	; 0x50b8 <deleteNode+0xbc>
                    break;
                }
            }
        }
    }
    else if (type == APPNODE)
    5030:	14 30       	cpi	r17, 0x04	; 4
    5032:	09 f4       	brne	.+2      	; 0x5036 <deleteNode+0x3a>
    5034:	a6 c0       	rjmp	.+332    	; 0x5182 <deleteNode+0x186>
                    break;
                }
            }
        }
    }
    releaseVectorNode(addr);
    5036:	c7 01       	movw	r24, r14
    5038:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <releaseVectorNode>
}
    503c:	df 91       	pop	r29
    503e:	cf 91       	pop	r28
    5040:	1f 91       	pop	r17
    5042:	0f 91       	pop	r16
    5044:	ff 90       	pop	r15
    5046:	ef 90       	pop	r14
    5048:	08 95       	ret
    uint8_t type;
    uint8_t parent;

    type = fsread8uint(addr, TYPEOFFSET);
    parent = fsread8uint(addr, 31);
    if (type == DIRNODE)
    504a:	ce e0       	ldi	r28, 0x0E	; 14
    504c:	d0 e0       	ldi	r29, 0x00	; 0
    504e:	04 c0       	rjmp	.+8      	; 0x5058 <deleteNode+0x5c>
            uint8_t subaddr;

            subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
            if (subaddr > 0)
            {
                deleteNode(subaddr);
    5050:	21 96       	adiw	r28, 0x01	; 1
    parent = fsread8uint(addr, 31);
    if (type == DIRNODE)
    {
        uint8_t i;

        for (i = 0; i < 10; i++)
    5052:	c8 31       	cpi	r28, 0x18	; 24
    5054:	d1 05       	cpc	r29, r1
    5056:	69 f0       	breq	.+26     	; 0x5072 <deleteNode+0x76>
        {
            uint8_t subaddr;

            subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    5058:	c7 01       	movw	r24, r14
    505a:	be 01       	movw	r22, r28
    505c:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
            if (subaddr > 0)
    5060:	88 23       	and	r24, r24
    5062:	b1 f3       	breq	.-20     	; 0x5050 <deleteNode+0x54>
            {
                deleteNode(subaddr);
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <deleteNode>
    506a:	21 96       	adiw	r28, 0x01	; 1
    parent = fsread8uint(addr, 31);
    if (type == DIRNODE)
    {
        uint8_t i;

        for (i = 0; i < 10; i++)
    506c:	c8 31       	cpi	r28, 0x18	; 24
    506e:	d1 05       	cpc	r29, r1
    5070:	99 f7       	brne	.-26     	; 0x5058 <deleteNode+0x5c>
            if (subaddr > 0)
            {
                deleteNode(subaddr);
            }
        }
        fswrite8uint(addr, VALIDOFFSET, 0);
    5072:	c7 01       	movw	r24, r14
    5074:	6d e0       	ldi	r22, 0x0D	; 13
    5076:	70 e0       	ldi	r23, 0x00	; 0
    5078:	40 e0       	ldi	r20, 0x00	; 0
    507a:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    507e:	e1 14       	cp	r14, r1
    5080:	f1 04       	cpc	r15, r1
    5082:	b9 f0       	breq	.+46     	; 0x50b2 <deleteNode+0xb6>
    5084:	ce e0       	ldi	r28, 0x0E	; 14
    5086:	d0 e0       	ldi	r29, 0x00	; 0
    5088:	04 c0       	rjmp	.+8      	; 0x5092 <deleteNode+0x96>

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
    508a:	21 96       	adiw	r28, 0x01	; 1
        }
        else
        {
            uint8_t i;

            for (i = 0; i < 10; i++)
    508c:	c8 31       	cpi	r28, 0x18	; 24
    508e:	d1 05       	cpc	r29, r1
    5090:	91 f2       	breq	.-92     	; 0x5036 <deleteNode+0x3a>
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    5092:	80 2f       	mov	r24, r16
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	be 01       	movw	r22, r28
    5098:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
                if (subaddr == addr)
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	8e 15       	cp	r24, r14
    50a0:	9f 05       	cpc	r25, r15
    50a2:	99 f7       	brne	.-26     	; 0x508a <deleteNode+0x8e>
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
    50a4:	80 2f       	mov	r24, r16
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	be 01       	movw	r22, r28
    50aa:	40 e0       	ldi	r20, 0x00	; 0
    50ac:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
    50b0:	c2 cf       	rjmp	.-124    	; 0x5036 <deleteNode+0x3a>
            {
                deleteNode(subaddr);
            }
        }
        fswrite8uint(addr, VALIDOFFSET, 0);
        if ((addr == 0) && (parent == 0))
    50b2:	00 23       	and	r16, r16
    50b4:	39 f7       	brne	.-50     	; 0x5084 <deleteNode+0x88>
    50b6:	bf cf       	rjmp	.-130    	; 0x5036 <deleteNode+0x3a>
            }
        }
    }
    else if (type == DEVNODE)
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
    50b8:	c7 01       	movw	r24, r14
    50ba:	6d e0       	ldi	r22, 0x0D	; 13
    50bc:	70 e0       	ldi	r23, 0x00	; 0
    50be:	40 e0       	ldi	r20, 0x00	; 0
    50c0:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    50c4:	e1 14       	cp	r14, r1
    50c6:	f1 04       	cpc	r15, r1
    50c8:	09 f4       	brne	.+2      	; 0x50cc <deleteNode+0xd0>
    50ca:	76 c0       	rjmp	.+236    	; 0x51b8 <deleteNode+0x1bc>
    50cc:	ce e0       	ldi	r28, 0x0E	; 14
    50ce:	d0 e0       	ldi	r29, 0x00	; 0
    50d0:	05 c0       	rjmp	.+10     	; 0x50dc <deleteNode+0xe0>

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
    50d2:	21 96       	adiw	r28, 0x01	; 1
        }
        else
        {
            int i;

            for (i = 0; i < 10; i++)
    50d4:	c8 31       	cpi	r28, 0x18	; 24
    50d6:	d1 05       	cpc	r29, r1
    50d8:	09 f4       	brne	.+2      	; 0x50dc <deleteNode+0xe0>
    50da:	ad cf       	rjmp	.-166    	; 0x5036 <deleteNode+0x3a>
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    50dc:	80 2f       	mov	r24, r16
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	be 01       	movw	r22, r28
    50e2:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
                if (subaddr == addr)
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	8e 15       	cp	r24, r14
    50ea:	9f 05       	cpc	r25, r15
    50ec:	91 f7       	brne	.-28     	; 0x50d2 <deleteNode+0xd6>
    50ee:	da cf       	rjmp	.-76     	; 0x50a4 <deleteNode+0xa8>
    else if (type == FILENODE)
    {
        char i;
        uint8_t readpage;

        fswrite8uint(addr, VALIDOFFSET, 0);
    50f0:	c7 01       	movw	r24, r14
    50f2:	6d e0       	ldi	r22, 0x0D	; 13
    50f4:	70 e0       	ldi	r23, 0x00	; 0
    50f6:	40 e0       	ldi	r20, 0x00	; 0
    50f8:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    50fc:	e1 14       	cp	r14, r1
    50fe:	f1 04       	cpc	r15, r1
    5100:	11 f4       	brne	.+4      	; 0x5106 <deleteNode+0x10a>
    5102:	00 23       	and	r16, r16
    5104:	81 f0       	breq	.+32     	; 0x5126 <deleteNode+0x12a>
    5106:	ce e0       	ldi	r28, 0x0E	; 14
    5108:	d0 e0       	ldi	r29, 0x00	; 0
        {
            for (i = 0; i < 10; i++)
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    510a:	80 2f       	mov	r24, r16
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	be 01       	movw	r22, r28
    5110:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
                if (subaddr == addr)
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	8e 15       	cp	r24, r14
    5118:	9f 05       	cpc	r25, r15
    511a:	09 f4       	brne	.+2      	; 0x511e <deleteNode+0x122>
    511c:	54 c0       	rjmp	.+168    	; 0x51c6 <deleteNode+0x1ca>
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
    511e:	21 96       	adiw	r28, 0x01	; 1
        if ((addr == 0) && (parent == 0))
        {
        }
        else
        {
            for (i = 0; i < 10; i++)
    5120:	c8 31       	cpi	r28, 0x18	; 24
    5122:	d1 05       	cpc	r29, r1
    5124:	91 f7       	brne	.-28     	; 0x510a <deleteNode+0x10e>
    5126:	ce e0       	ldi	r28, 0x0E	; 14
    5128:	d0 e0       	ldi	r29, 0x00	; 0
                }
            }
        }
        for (i = 0; i < 8; i++)
        {
            readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    512a:	c7 01       	movw	r24, r14
    512c:	be 01       	movw	r22, r28
    512e:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
            if (readpage == 0)
    5132:	88 23       	and	r24, r24
    5134:	39 f0       	breq	.+14     	; 0x5144 <deleteNode+0x148>
            {
                break;
            }
            else
            {
                releaseFlashPage(readpage);
    5136:	90 e0       	ldi	r25, 0x00	; 0
    5138:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <releaseFlashPage>
    513c:	21 96       	adiw	r28, 0x01	; 1
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
                }
            }
        }
        for (i = 0; i < 8; i++)
    513e:	c6 31       	cpi	r28, 0x16	; 22
    5140:	d1 05       	cpc	r29, r1
    5142:	99 f7       	brne	.-26     	; 0x512a <deleteNode+0x12e>
            }
        }
        {
            uint8_t currentaddr;

            currentaddr = addr;
    5144:	1e 2d       	mov	r17, r14
            while (1)
            {
                currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
    5146:	81 2f       	mov	r24, r17
    5148:	90 e0       	ldi	r25, 0x00	; 0
    514a:	68 e1       	ldi	r22, 0x18	; 24
    514c:	70 e0       	ldi	r23, 0x00	; 0
    514e:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    5152:	18 2f       	mov	r17, r24
                if (currentaddr > 0)
    5154:	88 23       	and	r24, r24
    5156:	09 f4       	brne	.+2      	; 0x515a <deleteNode+0x15e>
    5158:	6e cf       	rjmp	.-292    	; 0x5036 <deleteNode+0x3a>
                {
                    releaseVectorNode(currentaddr);
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	0e 94 9c 2e 	call	0x5d38	; 0x5d38 <releaseVectorNode>
    5160:	ce e0       	ldi	r28, 0x0E	; 14
    5162:	d0 e0       	ldi	r29, 0x00	; 0
                    for (i = 0; i < 8; i++)
                    {
                        readpage =
    5164:	81 2f       	mov	r24, r17
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	be 01       	movw	r22, r28
    516a:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
                            fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + i);
                        if (readpage == 0)
    516e:	88 23       	and	r24, r24
    5170:	51 f3       	breq	.-44     	; 0x5146 <deleteNode+0x14a>
                        {
                            break;
                        }
                        else
                        {
                            releaseFlashPage(readpage);
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <releaseFlashPage>
    5178:	21 96       	adiw	r28, 0x01	; 1
            {
                currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
                if (currentaddr > 0)
                {
                    releaseVectorNode(currentaddr);
                    for (i = 0; i < 8; i++)
    517a:	c6 31       	cpi	r28, 0x16	; 22
    517c:	d1 05       	cpc	r29, r1
    517e:	91 f7       	brne	.-28     	; 0x5164 <deleteNode+0x168>
    5180:	e2 cf       	rjmp	.-60     	; 0x5146 <deleteNode+0x14a>
            }
        }
    }
    else if (type == APPNODE)
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
    5182:	c7 01       	movw	r24, r14
    5184:	6d e0       	ldi	r22, 0x0D	; 13
    5186:	70 e0       	ldi	r23, 0x00	; 0
    5188:	40 e0       	ldi	r20, 0x00	; 0
    518a:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    518e:	e1 14       	cp	r14, r1
    5190:	f1 04       	cpc	r15, r1
    5192:	b1 f0       	breq	.+44     	; 0x51c0 <deleteNode+0x1c4>
    5194:	ce e0       	ldi	r28, 0x0E	; 14
    5196:	d0 e0       	ldi	r29, 0x00	; 0
    5198:	05 c0       	rjmp	.+10     	; 0x51a4 <deleteNode+0x1a8>

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
    519a:	21 96       	adiw	r28, 0x01	; 1
        }
        else
        {
            int i;

            for (i = 0; i < 10; i++)
    519c:	c8 31       	cpi	r28, 0x18	; 24
    519e:	d1 05       	cpc	r29, r1
    51a0:	09 f4       	brne	.+2      	; 0x51a4 <deleteNode+0x1a8>
    51a2:	49 cf       	rjmp	.-366    	; 0x5036 <deleteNode+0x3a>
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    51a4:	80 2f       	mov	r24, r16
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	be 01       	movw	r22, r28
    51aa:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
                if (subaddr == addr)
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	8e 15       	cp	r24, r14
    51b2:	9f 05       	cpc	r25, r15
    51b4:	91 f7       	brne	.-28     	; 0x519a <deleteNode+0x19e>
    51b6:	76 cf       	rjmp	.-276    	; 0x50a4 <deleteNode+0xa8>
        }
    }
    else if (type == DEVNODE)
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
        if ((addr == 0) && (parent == 0))
    51b8:	00 23       	and	r16, r16
    51ba:	09 f0       	breq	.+2      	; 0x51be <deleteNode+0x1c2>
    51bc:	87 cf       	rjmp	.-242    	; 0x50cc <deleteNode+0xd0>
    51be:	3b cf       	rjmp	.-394    	; 0x5036 <deleteNode+0x3a>
        }
    }
    else if (type == APPNODE)
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
        if ((addr == 0) && (parent == 0))
    51c0:	00 23       	and	r16, r16
    51c2:	41 f7       	brne	.-48     	; 0x5194 <deleteNode+0x198>
    51c4:	38 cf       	rjmp	.-400    	; 0x5036 <deleteNode+0x3a>
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
    51c6:	80 2f       	mov	r24, r16
    51c8:	90 e0       	ldi	r25, 0x00	; 0
    51ca:	be 01       	movw	r22, r28
    51cc:	40 e0       	ldi	r20, 0x00	; 0
    51ce:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
    51d2:	ce e0       	ldi	r28, 0x0E	; 14
    51d4:	d0 e0       	ldi	r29, 0x00	; 0
    51d6:	a9 cf       	rjmp	.-174    	; 0x512a <deleteNode+0x12e>

000051d8 <formatFSLite>:
}

//-------------------------------------------------------------------------
void formatFSLite()
{
    initVectorFlash();
    51d8:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <initVectorFlash>
    initVectorNode();
    51dc:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <initVectorNode>
}
    51e0:	08 95       	ret

000051e2 <formatFS>:
    return;
}

//-------------------------------------------------------------------------
void formatFS()
{
    51e2:	cf 93       	push	r28
    51e4:	df 93       	push	r29
    51e6:	c0 e0       	ldi	r28, 0x00	; 0
    51e8:	d0 e0       	ldi	r29, 0x00	; 0
    int i;

    for (i = 0; i <= FILE_SYS_RANGE; i++)
    {
        fsinitBytes(i, 0, 32, 0);
    51ea:	ce 01       	movw	r24, r28
    51ec:	60 e0       	ldi	r22, 0x00	; 0
    51ee:	70 e0       	ldi	r23, 0x00	; 0
    51f0:	40 e2       	ldi	r20, 0x20	; 32
    51f2:	50 e0       	ldi	r21, 0x00	; 0
    51f4:	20 e0       	ldi	r18, 0x00	; 0
    51f6:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <fsinitBytes>
//-------------------------------------------------------------------------
void formatFS()
{
    int i;

    for (i = 0; i <= FILE_SYS_RANGE; i++)
    51fa:	21 96       	adiw	r28, 0x01	; 1
    51fc:	c1 32       	cpi	r28, 0x21	; 33
    51fe:	d1 05       	cpc	r29, r1
    5200:	a1 f7       	brne	.-24     	; 0x51ea <formatFS+0x8>
    {
        fsinitBytes(i, 0, 32, 0);
    }
    //  write8uint(i, VALIDOFFSET, 0); 
    initVectorFlash();
    5202:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <initVectorFlash>
    initVectorNode();
    5206:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <initVectorNode>
}
    520a:	df 91       	pop	r29
    520c:	cf 91       	pop	r28
    520e:	08 95       	ret

00005210 <buildNewNode>:
}

//-------------------------------------------------------------------------
void buildNewNode(int addr, char *name, uint8_t uid, uint8_t parent, uint8_t
                  type)
{
    5210:	df 92       	push	r13
    5212:	ef 92       	push	r14
    5214:	ff 92       	push	r15
    5216:	0f 93       	push	r16
    5218:	1f 93       	push	r17
    521a:	cf 93       	push	r28
    521c:	df 93       	push	r29
    521e:	7c 01       	movw	r14, r24
    5220:	eb 01       	movw	r28, r22
    5222:	d4 2e       	mov	r13, r20
    5224:	12 2f       	mov	r17, r18
    uint8_t namelength;

    namelength = mystrlen(name);
    5226:	cb 01       	movw	r24, r22
    5228:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    522c:	48 2f       	mov	r20, r24
    if (namelength < 12)
    522e:	8c 30       	cpi	r24, 0x0C	; 12
    5230:	08 f4       	brcc	.+2      	; 0x5234 <buildNewNode+0x24>
    {
        namelength++;
    5232:	4f 5f       	subi	r20, 0xFF	; 255
    }
    //consider several types of type
    if (type == DIRNODE)
    5234:	01 30       	cpi	r16, 0x01	; 1
    5236:	09 f4       	brne	.+2      	; 0x523a <buildNewNode+0x2a>
    5238:	5f c0       	rjmp	.+190    	; 0x52f8 <buildNewNode+0xe8>
        fsinitBytes(addr, DIR_ADDRSUBOFFSET, 14, 0);
        fswrite8uint(addr, DIR_UIDOFFSET, uid);
        fswrite16uint(addr, DIR_SIZEOFFSET, 0);
        fswrite8uint(addr, DIR_PARENTOFFSET, parent);
    }
    else if (type == FILENODE)
    523a:	02 30       	cpi	r16, 0x02	; 2
    523c:	09 f4       	brne	.+2      	; 0x5240 <buildNewNode+0x30>
    523e:	68 c0       	rjmp	.+208    	; 0x5310 <buildNewNode+0x100>
        fsinitBytes(addr, FILE_ADDRPAGEOFFSET, 14, 0);
        fswrite8uint(addr, FILE_UIDOFFSET, uid);
        fswrite16uint(addr, FILE_SIZEOFFSET, 0);
        fswrite8uint(addr, FILE_PARENTOFFSET, parent);
    }
    else if (type == DEVNODE)
    5240:	03 30       	cpi	r16, 0x03	; 3
    5242:	09 f4       	brne	.+2      	; 0x5246 <buildNewNode+0x36>
    5244:	71 c0       	rjmp	.+226    	; 0x5328 <buildNewNode+0x118>
        fsinitBytes(addr, DEV_PROGRAMENTRYOFFSET, 14, 0);
        fswrite8uint(addr, DEV_UIDOFFSET, uid);
        fswrite16uint(addr, DEV_SIZEOFFSET, 0);
        fswrite8uint(addr, DEV_PARENTOFFSET, parent);
    }
    else if (type == APPNODE)
    5246:	04 30       	cpi	r16, 0x04	; 4
    5248:	41 f1       	breq	.+80     	; 0x529a <buildNewNode+0x8a>
        fsinitBytes(addr, APP_ENTRYOFFSET, 14, 0);
        fswrite8uint(addr, APP_UIDOFFSET, uid);
        fswrite16uint(addr, APP_SIZEOFFSET, 0);
        fswrite8uint(addr, APP_PARENTOFFSET, parent);
    }
    if ((addr == 0) && (parent == 0))
    524a:	e1 14       	cp	r14, r1
    524c:	f1 04       	cpc	r15, r1
    524e:	11 f4       	brne	.+4      	; 0x5254 <buildNewNode+0x44>
    5250:	11 23       	and	r17, r17
    5252:	69 f0       	breq	.+26     	; 0x526e <buildNewNode+0x5e>
    5254:	ce e0       	ldi	r28, 0x0E	; 14
    5256:	d0 e0       	ldi	r29, 0x00	; 0

        for (i = 0; i < 10; i++)
        {
            uint8_t subaddr;

            subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    5258:	81 2f       	mov	r24, r17
    525a:	90 e0       	ldi	r25, 0x00	; 0
    525c:	be 01       	movw	r22, r28
    525e:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
            if (subaddr == 0)
    5262:	88 23       	and	r24, r24
    5264:	61 f0       	breq	.+24     	; 0x527e <buildNewNode+0x6e>
            {
                fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, addr);
                break;
    5266:	21 96       	adiw	r28, 0x01	; 1
    }
    else
    {
        int i;

        for (i = 0; i < 10; i++)
    5268:	c8 31       	cpi	r28, 0x18	; 24
    526a:	d1 05       	cpc	r29, r1
    526c:	a9 f7       	brne	.-22     	; 0x5258 <buildNewNode+0x48>
                break;
            }
        }
    }
    return;
}
    526e:	df 91       	pop	r29
    5270:	cf 91       	pop	r28
    5272:	1f 91       	pop	r17
    5274:	0f 91       	pop	r16
    5276:	ff 90       	pop	r15
    5278:	ef 90       	pop	r14
    527a:	df 90       	pop	r13
    527c:	08 95       	ret
            uint8_t subaddr;

            subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
            if (subaddr == 0)
            {
                fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, addr);
    527e:	81 2f       	mov	r24, r17
    5280:	90 e0       	ldi	r25, 0x00	; 0
    5282:	be 01       	movw	r22, r28
    5284:	4e 2d       	mov	r20, r14
    5286:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
                break;
            }
        }
    }
    return;
}
    528a:	df 91       	pop	r29
    528c:	cf 91       	pop	r28
    528e:	1f 91       	pop	r17
    5290:	0f 91       	pop	r16
    5292:	ff 90       	pop	r15
    5294:	ef 90       	pop	r14
    5296:	df 90       	pop	r13
    5298:	08 95       	ret
        fswrite16uint(addr, DEV_SIZEOFFSET, 0);
        fswrite8uint(addr, DEV_PARENTOFFSET, parent);
    }
    else if (type == APPNODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    529a:	c7 01       	movw	r24, r14
    529c:	60 e0       	ldi	r22, 0x00	; 0
    529e:	70 e0       	ldi	r23, 0x00	; 0
    52a0:	50 e0       	ldi	r21, 0x00	; 0
    52a2:	9e 01       	movw	r18, r28
    52a4:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    52a8:	c7 01       	movw	r24, r14
    52aa:	6c e0       	ldi	r22, 0x0C	; 12
    52ac:	70 e0       	ldi	r23, 0x00	; 0
    52ae:	44 e0       	ldi	r20, 0x04	; 4
    52b0:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
        fswrite8uint(addr, VALIDOFFSET, 1);
    52b4:	c7 01       	movw	r24, r14
    52b6:	6d e0       	ldi	r22, 0x0D	; 13
    52b8:	70 e0       	ldi	r23, 0x00	; 0
    52ba:	41 e0       	ldi	r20, 0x01	; 1
    52bc:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
        fsinitBytes(addr, APP_ENTRYOFFSET, 14, 0);
    52c0:	c7 01       	movw	r24, r14
    52c2:	6e e0       	ldi	r22, 0x0E	; 14
    52c4:	70 e0       	ldi	r23, 0x00	; 0
    52c6:	4e e0       	ldi	r20, 0x0E	; 14
    52c8:	50 e0       	ldi	r21, 0x00	; 0
    52ca:	20 e0       	ldi	r18, 0x00	; 0
    52cc:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <fsinitBytes>
        fswrite8uint(addr, APP_UIDOFFSET, uid);
    52d0:	c7 01       	movw	r24, r14
    52d2:	6c e1       	ldi	r22, 0x1C	; 28
    52d4:	70 e0       	ldi	r23, 0x00	; 0
    52d6:	4d 2d       	mov	r20, r13
    52d8:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
        fswrite16uint(addr, APP_SIZEOFFSET, 0);
    52dc:	c7 01       	movw	r24, r14
    52de:	6d e1       	ldi	r22, 0x1D	; 29
    52e0:	70 e0       	ldi	r23, 0x00	; 0
    52e2:	40 e0       	ldi	r20, 0x00	; 0
    52e4:	50 e0       	ldi	r21, 0x00	; 0
    52e6:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <fswrite16uint>
        fswrite8uint(addr, APP_PARENTOFFSET, parent);
    52ea:	c7 01       	movw	r24, r14
    52ec:	6f e1       	ldi	r22, 0x1F	; 31
    52ee:	70 e0       	ldi	r23, 0x00	; 0
    52f0:	41 2f       	mov	r20, r17
    52f2:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
    52f6:	a9 cf       	rjmp	.-174    	; 0x524a <buildNewNode+0x3a>
        namelength++;
    }
    //consider several types of type
    if (type == DIRNODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    52f8:	c7 01       	movw	r24, r14
    52fa:	60 e0       	ldi	r22, 0x00	; 0
    52fc:	70 e0       	ldi	r23, 0x00	; 0
    52fe:	50 e0       	ldi	r21, 0x00	; 0
    5300:	9e 01       	movw	r18, r28
    5302:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    5306:	c7 01       	movw	r24, r14
    5308:	6c e0       	ldi	r22, 0x0C	; 12
    530a:	70 e0       	ldi	r23, 0x00	; 0
    530c:	41 e0       	ldi	r20, 0x01	; 1
    530e:	d0 cf       	rjmp	.-96     	; 0x52b0 <buildNewNode+0xa0>
        fswrite16uint(addr, DIR_SIZEOFFSET, 0);
        fswrite8uint(addr, DIR_PARENTOFFSET, parent);
    }
    else if (type == FILENODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    5310:	c7 01       	movw	r24, r14
    5312:	60 e0       	ldi	r22, 0x00	; 0
    5314:	70 e0       	ldi	r23, 0x00	; 0
    5316:	50 e0       	ldi	r21, 0x00	; 0
    5318:	9e 01       	movw	r18, r28
    531a:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    531e:	c7 01       	movw	r24, r14
    5320:	6c e0       	ldi	r22, 0x0C	; 12
    5322:	70 e0       	ldi	r23, 0x00	; 0
    5324:	42 e0       	ldi	r20, 0x02	; 2
    5326:	c4 cf       	rjmp	.-120    	; 0x52b0 <buildNewNode+0xa0>
        fswrite16uint(addr, FILE_SIZEOFFSET, 0);
        fswrite8uint(addr, FILE_PARENTOFFSET, parent);
    }
    else if (type == DEVNODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    5328:	c7 01       	movw	r24, r14
    532a:	60 e0       	ldi	r22, 0x00	; 0
    532c:	70 e0       	ldi	r23, 0x00	; 0
    532e:	50 e0       	ldi	r21, 0x00	; 0
    5330:	9e 01       	movw	r18, r28
    5332:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    5336:	c7 01       	movw	r24, r14
    5338:	6c e0       	ldi	r22, 0x0C	; 12
    533a:	70 e0       	ldi	r23, 0x00	; 0
    533c:	43 e0       	ldi	r20, 0x03	; 3
    533e:	b8 cf       	rjmp	.-144    	; 0x52b0 <buildNewNode+0xa0>

00005340 <buildRootNode>:
    releaseVectorNode(addr);
}

//-------------------------------------------------------------------------
void buildRootNode()
{
    5340:	0f 93       	push	r16
    buildNewNode(FSROOTNODE, "root", 0, 0, DIRNODE);
    5342:	80 e0       	ldi	r24, 0x00	; 0
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	67 e3       	ldi	r22, 0x37	; 55
    5348:	71 e0       	ldi	r23, 0x01	; 1
    534a:	40 e0       	ldi	r20, 0x00	; 0
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	01 e0       	ldi	r16, 0x01	; 1
    5350:	0e 94 08 29 	call	0x5210	; 0x5210 <buildNewNode>
}
    5354:	0f 91       	pop	r16
    5356:	08 95       	ret

00005358 <getPwd>:

//return current directory
int getPwd()
{
    return currentdirectory;
}
    5358:	80 91 74 03 	lds	r24, 0x0374
    535c:	90 91 75 03 	lds	r25, 0x0375
    5360:	08 95       	ret

00005362 <setPwd>:

//set current directory 
void setPwd(int directory)
{
    currentdirectory = directory;
    5362:	90 93 75 03 	sts	0x0375, r25
    5366:	80 93 74 03 	sts	0x0374, r24
    return;
}
    536a:	08 95       	ret

0000536c <getRealSector>:
    }
}

//-------------------------------------------------------------------------
uint8_t getRealSector(uint8_t addr, uint8_t sectornum)
{
    536c:	0f 93       	push	r16
    536e:	1f 93       	push	r17
    5370:	06 2f       	mov	r16, r22
    uint8_t currentaddr;

    currentaddr = addr;
    while (sectornum >= 8)
    5372:	68 30       	cpi	r22, 0x08	; 8
    5374:	50 f0       	brcs	.+20     	; 0x538a <getRealSector+0x1e>
    5376:	16 2f       	mov	r17, r22
    {
        currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	68 e1       	ldi	r22, 0x18	; 24
    537c:	70 e0       	ldi	r23, 0x00	; 0
    537e:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
        sectornum -= 8;
    5382:	18 50       	subi	r17, 0x08	; 8
uint8_t getRealSector(uint8_t addr, uint8_t sectornum)
{
    uint8_t currentaddr;

    currentaddr = addr;
    while (sectornum >= 8)
    5384:	18 30       	cpi	r17, 0x08	; 8
    5386:	c0 f7       	brcc	.-16     	; 0x5378 <getRealSector+0xc>
    }
}

//-------------------------------------------------------------------------
uint8_t getRealSector(uint8_t addr, uint8_t sectornum)
{
    5388:	07 70       	andi	r16, 0x07	; 7
    while (sectornum >= 8)
    {
        currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
        sectornum -= 8;
    }
    return fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + sectornum);
    538a:	60 2f       	mov	r22, r16
    538c:	70 e0       	ldi	r23, 0x00	; 0
    538e:	62 5f       	subi	r22, 0xF2	; 242
    5390:	7f 4f       	sbci	r23, 0xFF	; 255
    5392:	90 e0       	ldi	r25, 0x00	; 0
    5394:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
}
    5398:	1f 91       	pop	r17
    539a:	0f 91       	pop	r16
    539c:	08 95       	ret

0000539e <emptyDirectory>:
}

//check directory empty
//returns 0 if it is empty. Returns 1 if otherwise 
int emptyDirectory(int directory)
{
    539e:	0f 93       	push	r16
    53a0:	1f 93       	push	r17
    53a2:	cf 93       	push	r28
    53a4:	df 93       	push	r29
    53a6:	8c 01       	movw	r16, r24
    53a8:	ce e0       	ldi	r28, 0x0E	; 14
    53aa:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    53ac:	c8 01       	movw	r24, r16
    53ae:	be 01       	movw	r22, r28
    53b0:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
        if (subaddr > 0)
    53b4:	88 23       	and	r24, r24
    53b6:	61 f4       	brne	.+24     	; 0x53d0 <emptyDirectory+0x32>
    53b8:	21 96       	adiw	r28, 0x01	; 1
//returns 0 if it is empty. Returns 1 if otherwise 
int emptyDirectory(int directory)
{
    int i;

    for (i = 0; i < 10; i++)
    53ba:	c8 31       	cpi	r28, 0x18	; 24
    53bc:	d1 05       	cpc	r29, r1
    53be:	b1 f7       	brne	.-20     	; 0x53ac <emptyDirectory+0xe>
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
        {
            return 1;
        }
    }
    return 0;
}
    53c4:	c9 01       	movw	r24, r18
    53c6:	df 91       	pop	r29
    53c8:	cf 91       	pop	r28
    53ca:	1f 91       	pop	r17
    53cc:	0f 91       	pop	r16
    53ce:	08 95       	ret
    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
        if (subaddr > 0)
    53d0:	21 e0       	ldi	r18, 0x01	; 1
    53d2:	30 e0       	ldi	r19, 0x00	; 0
        {
            return 1;
        }
    }
    return 0;
}
    53d4:	c9 01       	movw	r24, r18
    53d6:	df 91       	pop	r29
    53d8:	cf 91       	pop	r28
    53da:	1f 91       	pop	r17
    53dc:	0f 91       	pop	r16
    53de:	08 95       	ret

000053e0 <getParentDirectory>:
//-------------------------------------------------------------------------
int getParentDirectory(int directory)
{
    uint8_t parentnode;

    parentnode = fsread8uint(directory, DIR_PARENTOFFSET);
    53e0:	6f e1       	ldi	r22, 0x1F	; 31
    53e2:	70 e0       	ldi	r23, 0x00	; 0
    53e4:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    return parentnode;
}
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	08 95       	ret

000053ec <getName>:
    return 1;
}

//-------------------------------------------------------------------------
void getName(char *buffer, int addr)
{
    53ec:	ef 92       	push	r14
    53ee:	ff 92       	push	r15
    53f0:	0f 93       	push	r16
    53f2:	1f 93       	push	r17
    53f4:	cf 93       	push	r28
    53f6:	df 93       	push	r29
    53f8:	7b 01       	movw	r14, r22
    53fa:	8c 01       	movw	r16, r24
    53fc:	c0 e0       	ldi	r28, 0x00	; 0
    53fe:	d0 e0       	ldi	r29, 0x00	; 0
    char *p;

    p = buffer;
    for (i = 0; i < 12; i++)
    {
        *p = fsread8uint(addr, FILENAMEOFFSET + i);
    5400:	c7 01       	movw	r24, r14
    5402:	be 01       	movw	r22, r28
    5404:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    5408:	f8 01       	movw	r30, r16
    540a:	80 83       	st	Z, r24
        if ((*p) == '\0')
    540c:	88 23       	and	r24, r24
    540e:	31 f0       	breq	.+12     	; 0x541c <getName+0x30>
        {
            break;
        }

        p++;
    5410:	0f 5f       	subi	r16, 0xFF	; 255
    5412:	1f 4f       	sbci	r17, 0xFF	; 255
{
    int i;
    char *p;

    p = buffer;
    for (i = 0; i < 12; i++)
    5414:	21 96       	adiw	r28, 0x01	; 1
    5416:	cc 30       	cpi	r28, 0x0C	; 12
    5418:	d1 05       	cpc	r29, r1
    541a:	91 f7       	brne	.-28     	; 0x5400 <getName+0x14>
            break;
        }

        p++;
    }
    *p = '\0';
    541c:	f8 01       	movw	r30, r16
    541e:	10 82       	st	Z, r1
    return;
}
    5420:	df 91       	pop	r29
    5422:	cf 91       	pop	r28
    5424:	1f 91       	pop	r17
    5426:	0f 91       	pop	r16
    5428:	ff 90       	pop	r15
    542a:	ef 90       	pop	r14
    542c:	08 95       	ret

0000542e <fullBlock>:
    return 0;
}

//if the directory is full return 1 else return 0
uint8_t fullBlock(int directory)
{
    542e:	0f 93       	push	r16
    5430:	1f 93       	push	r17
    5432:	cf 93       	push	r28
    5434:	df 93       	push	r29
    5436:	8c 01       	movw	r16, r24
    5438:	ce e0       	ldi	r28, 0x0E	; 14
    543a:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    543c:	c8 01       	movw	r24, r16
    543e:	be 01       	movw	r22, r28
    5440:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
        if (subaddr == 0)
    5444:	88 23       	and	r24, r24
    5446:	29 f0       	breq	.+10     	; 0x5452 <fullBlock+0x24>
    5448:	21 96       	adiw	r28, 0x01	; 1
//if the directory is full return 1 else return 0
uint8_t fullBlock(int directory)
{
    int i;

    for (i = 0; i < 10; i++)
    544a:	c8 31       	cpi	r28, 0x18	; 24
    544c:	d1 05       	cpc	r29, r1
    544e:	b1 f7       	brne	.-20     	; 0x543c <fullBlock+0xe>
    5450:	81 e0       	ldi	r24, 0x01	; 1
        {
            return 0;
        }
    }
    return 1;
}
    5452:	df 91       	pop	r29
    5454:	cf 91       	pop	r28
    5456:	1f 91       	pop	r17
    5458:	0f 91       	pop	r16
    545a:	08 95       	ret

0000545c <removeChildNode>:
    return;
}

//-------------------------------------------------------------------------
void removeChildNode(uint8_t addr, uint8_t child)
{
    545c:	0f 93       	push	r16
    545e:	1f 93       	push	r17
    5460:	cf 93       	push	r28
    5462:	df 93       	push	r29
    5464:	08 2f       	mov	r16, r24
    5466:	16 2f       	mov	r17, r22
    5468:	ce e0       	ldi	r28, 0x0E	; 14
    546a:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    546c:	80 2f       	mov	r24, r16
    546e:	90 e0       	ldi	r25, 0x00	; 0
    5470:	be 01       	movw	r22, r28
    5472:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
        if (subaddr == child)
    5476:	81 17       	cp	r24, r17
    5478:	49 f0       	breq	.+18     	; 0x548c <removeChildNode+0x30>
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, 0);
            return;
    547a:	21 96       	adiw	r28, 0x01	; 1
//-------------------------------------------------------------------------
void removeChildNode(uint8_t addr, uint8_t child)
{
    uint8_t i;

    for (i = 0; i < 10; i++)
    547c:	c8 31       	cpi	r28, 0x18	; 24
    547e:	d1 05       	cpc	r29, r1
    5480:	a9 f7       	brne	.-22     	; 0x546c <removeChildNode+0x10>
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, 0);
            return;
        }
    }
    return;
}
    5482:	df 91       	pop	r29
    5484:	cf 91       	pop	r28
    5486:	1f 91       	pop	r17
    5488:	0f 91       	pop	r16
    548a:	08 95       	ret
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        if (subaddr == child)
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, 0);
    548c:	80 2f       	mov	r24, r16
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	be 01       	movw	r22, r28
    5492:	40 e0       	ldi	r20, 0x00	; 0
    5494:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
            return;
        }
    }
    return;
}
    5498:	df 91       	pop	r29
    549a:	cf 91       	pop	r28
    549c:	1f 91       	pop	r17
    549e:	0f 91       	pop	r16
    54a0:	08 95       	ret

000054a2 <addChildNode>:
    }
}

//-------------------------------------------------------------------------
void addChildNode(uint8_t addr, uint8_t child)
{
    54a2:	0f 93       	push	r16
    54a4:	1f 93       	push	r17
    54a6:	cf 93       	push	r28
    54a8:	df 93       	push	r29
    54aa:	18 2f       	mov	r17, r24
    54ac:	06 2f       	mov	r16, r22
    54ae:	ce e0       	ldi	r28, 0x0E	; 14
    54b0:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    54b2:	81 2f       	mov	r24, r17
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	be 01       	movw	r22, r28
    54b8:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
        if (subaddr == 0)
    54bc:	88 23       	and	r24, r24
    54be:	49 f0       	breq	.+18     	; 0x54d2 <addChildNode+0x30>
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, child);
            return;
    54c0:	21 96       	adiw	r28, 0x01	; 1
//-------------------------------------------------------------------------
void addChildNode(uint8_t addr, uint8_t child)
{
    uint8_t i;

    for (i = 0; i < 10; i++)
    54c2:	c8 31       	cpi	r28, 0x18	; 24
    54c4:	d1 05       	cpc	r29, r1
    54c6:	a9 f7       	brne	.-22     	; 0x54b2 <addChildNode+0x10>
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, child);
            return;
        }
    }
    return;
}
    54c8:	df 91       	pop	r29
    54ca:	cf 91       	pop	r28
    54cc:	1f 91       	pop	r17
    54ce:	0f 91       	pop	r16
    54d0:	08 95       	ret
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        if (subaddr == 0)
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, child);
    54d2:	81 2f       	mov	r24, r17
    54d4:	90 e0       	ldi	r25, 0x00	; 0
    54d6:	be 01       	movw	r22, r28
    54d8:	40 2f       	mov	r20, r16
    54da:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
            return;
        }
    }
    return;
}
    54de:	df 91       	pop	r29
    54e0:	cf 91       	pop	r28
    54e2:	1f 91       	pop	r17
    54e4:	0f 91       	pop	r16
    54e6:	08 95       	ret

000054e8 <newSector>:
    return fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + sectornum);
}

//-------------------------------------------------------------------------
void newSector(int addr)
{
    54e8:	0f 93       	push	r16
    54ea:	1f 93       	push	r17
    54ec:	cf 93       	push	r28
    54ee:	df 93       	push	r29
    54f0:	18 2f       	mov	r17, r24
    uint8_t i, readpage;
    uint8_t next, currentaddr, getnode;

    currentaddr = addr;
    54f2:	01 2f       	mov	r16, r17
    54f4:	6e e0       	ldi	r22, 0x0E	; 14
    54f6:	70 e0       	ldi	r23, 0x00	; 0
    54f8:	eb 01       	movw	r28, r22
    // 3 get to the next addr and loop 
    while (1)
    {
        for (i = 0; i < 8; i++)
        {
            readpage = fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + i);
    54fa:	81 2f       	mov	r24, r17
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
            if (readpage == 0)
    5502:	88 23       	and	r24, r24
    5504:	71 f1       	breq	.+92     	; 0x5562 <newSector+0x7a>
            {
                break;
    5506:	9e 01       	movw	r18, r28
    5508:	2d 50       	subi	r18, 0x0D	; 13
    550a:	be 01       	movw	r22, r28
    550c:	6f 5f       	subi	r22, 0xFF	; 255
    550e:	7f 4f       	sbci	r23, 0xFF	; 255
    // 1 check whether the current 8 pages are occupied or not
    // 2 check the next field is ok or not
    // 3 get to the next addr and loop 
    while (1)
    {
        for (i = 0; i < 8; i++)
    5510:	66 31       	cpi	r22, 0x16	; 22
    5512:	71 05       	cpc	r23, r1
    5514:	89 f7       	brne	.-30     	; 0x54f8 <newSector+0x10>
            if (readpage == 0)
            {
                break;
            }
        }
        if (i < 8)
    5516:	28 30       	cpi	r18, 0x08	; 8
    5518:	08 f1       	brcs	.+66     	; 0x555c <newSector+0x74>
        {
            readpage = getFlashPage();
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET + i, readpage);
            return;
        }
        next = fsread8uint(currentaddr, FILE_NEXTOFFSET);
    551a:	81 2f       	mov	r24, r17
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	68 e1       	ldi	r22, 0x18	; 24
    5520:	70 e0       	ldi	r23, 0x00	; 0
    5522:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    5526:	18 2f       	mov	r17, r24
        if (next == 0)
    5528:	88 23       	and	r24, r24
    552a:	19 f7       	brne	.-58     	; 0x54f2 <newSector+0xa>
        {
            getnode = getVectorNode();
    552c:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <getVectorNode>
    5530:	18 2f       	mov	r17, r24
            fswrite8uint(currentaddr, FILE_NEXTOFFSET, getnode);
    5532:	80 2f       	mov	r24, r16
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	68 e1       	ldi	r22, 0x18	; 24
    5538:	70 e0       	ldi	r23, 0x00	; 0
    553a:	41 2f       	mov	r20, r17
    553c:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
            currentaddr = getnode;
            readpage = getFlashPage();
    5540:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <getFlashPage>
    5544:	48 2f       	mov	r20, r24
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET, readpage);
    5546:	81 2f       	mov	r24, r17
    5548:	90 e0       	ldi	r25, 0x00	; 0
    554a:	6e e0       	ldi	r22, 0x0E	; 14
    554c:	70 e0       	ldi	r23, 0x00	; 0
    554e:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
            return;
        }
        currentaddr = next;
    }
}
    5552:	df 91       	pop	r29
    5554:	cf 91       	pop	r28
    5556:	1f 91       	pop	r17
    5558:	0f 91       	pop	r16
    555a:	08 95       	ret
            if (readpage == 0)
            {
                break;
            }
        }
        if (i < 8)
    555c:	c2 2f       	mov	r28, r18
    555e:	d0 e0       	ldi	r29, 0x00	; 0
    5560:	2e 96       	adiw	r28, 0x0e	; 14
        {
            readpage = getFlashPage();
    5562:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <getFlashPage>
    5566:	48 2f       	mov	r20, r24
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET + i, readpage);
    5568:	81 2f       	mov	r24, r17
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	be 01       	movw	r22, r28
    556e:	0e 94 22 26 	call	0x4c44	; 0x4c44 <fswrite8uint>
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET, readpage);
            return;
        }
        currentaddr = next;
    }
}
    5572:	df 91       	pop	r29
    5574:	cf 91       	pop	r28
    5576:	1f 91       	pop	r17
    5578:	0f 91       	pop	r16
    557a:	08 95       	ret

0000557c <freeBlocks>:
    }
}

//-------------------------------------------------------------------------
void freeBlocks(int addr)
{
    557c:	0f 93       	push	r16
    557e:	1f 93       	push	r17
    5580:	cf 93       	push	r28
    5582:	df 93       	push	r29
    5584:	8c 01       	movw	r16, r24
    5586:	ce e0       	ldi	r28, 0x0E	; 14
    5588:	d0 e0       	ldi	r29, 0x00	; 0
    int i;
    uint8_t readpage;

    for (i = 0; i < 8; i++)
    {
        readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    558a:	c8 01       	movw	r24, r16
    558c:	be 01       	movw	r22, r28
    558e:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
        if (readpage == 0)
    5592:	88 23       	and	r24, r24
    5594:	39 f0       	breq	.+14     	; 0x55a4 <freeBlocks+0x28>
        {
            break;
        }
        else
        {
            releaseFlashPage(readpage);
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <releaseFlashPage>
    559c:	21 96       	adiw	r28, 0x01	; 1
void freeBlocks(int addr)
{
    int i;
    uint8_t readpage;

    for (i = 0; i < 8; i++)
    559e:	c6 31       	cpi	r28, 0x16	; 22
    55a0:	d1 05       	cpc	r29, r1
    55a2:	99 f7       	brne	.-26     	; 0x558a <freeBlocks+0xe>
        {
            releaseFlashPage(readpage);
        }
    }
    return;
}
    55a4:	df 91       	pop	r29
    55a6:	cf 91       	pop	r28
    55a8:	1f 91       	pop	r17
    55aa:	0f 91       	pop	r16
    55ac:	08 95       	ret

000055ae <openFile>:

//open a file according to the mode and populate the fid section 
void openFile(int addr, int fid, int mode)
{
    55ae:	af 92       	push	r10
    55b0:	bf 92       	push	r11
    55b2:	cf 92       	push	r12
    55b4:	df 92       	push	r13
    55b6:	ef 92       	push	r14
    55b8:	ff 92       	push	r15
    55ba:	0f 93       	push	r16
    55bc:	1f 93       	push	r17
    55be:	cf 93       	push	r28
    55c0:	df 93       	push	r29
    55c2:	d8 2e       	mov	r13, r24
    55c4:	c9 2e       	mov	r12, r25
    55c6:	8a 01       	movw	r16, r20
    fidtable[fid].addr = (uint8_t) addr;
    55c8:	fb 01       	movw	r30, r22
    55ca:	ee 0f       	add	r30, r30
    55cc:	ff 1f       	adc	r31, r31
    55ce:	ee 0f       	add	r30, r30
    55d0:	ff 1f       	adc	r31, r31
    55d2:	e6 0f       	add	r30, r22
    55d4:	f7 1f       	adc	r31, r23
    55d6:	ee 0f       	add	r30, r30
    55d8:	ff 1f       	adc	r31, r31
    55da:	e8 54       	subi	r30, 0x48	; 72
    55dc:	fa 4f       	sbci	r31, 0xFA	; 250
    55de:	80 83       	st	Z, r24
    fidtable[fid].mode = (uint8_t) mode;
    55e0:	5b 01       	movw	r10, r22
    55e2:	aa 0c       	add	r10, r10
    55e4:	bb 1c       	adc	r11, r11
    55e6:	7b 01       	movw	r14, r22
    55e8:	ee 0c       	add	r14, r14
    55ea:	ff 1c       	adc	r15, r15
    55ec:	ee 0c       	add	r14, r14
    55ee:	ff 1c       	adc	r15, r15
    55f0:	ee 0c       	add	r14, r14
    55f2:	ff 1c       	adc	r15, r15
    55f4:	e5 01       	movw	r28, r10
    55f6:	ce 0d       	add	r28, r14
    55f8:	df 1d       	adc	r29, r15
    55fa:	ca 54       	subi	r28, 0x4A	; 74
    55fc:	da 4f       	sbci	r29, 0xFA	; 250
    55fe:	4b 83       	std	Y+3, r20	; 0x03
    fidtable[fid].size = fsread16uint(addr, 29);
    5600:	8d 2d       	mov	r24, r13
    5602:	9c 2d       	mov	r25, r12
    5604:	6d e1       	ldi	r22, 0x1D	; 29
    5606:	70 e0       	ldi	r23, 0x00	; 0
    5608:	0e 94 57 26 	call	0x4cae	; 0x4cae <fsread16uint>
    560c:	9d 83       	std	Y+5, r25	; 0x05
    560e:	8c 83       	std	Y+4, r24	; 0x04
    //mode: 1 read 2 write 3 append 4 truncate 5 rw
    if (mode == 1)
    5610:	01 30       	cpi	r16, 0x01	; 1
    5612:	11 05       	cpc	r17, r1
    5614:	19 f1       	breq	.+70     	; 0x565c <openFile+0xae>
    {
        fidtable[fid].fpos = 0;
    }
    if (mode == 2)
    5616:	02 30       	cpi	r16, 0x02	; 2
    5618:	11 05       	cpc	r17, r1
    561a:	d9 f0       	breq	.+54     	; 0x5652 <openFile+0xa4>
    {
        fidtable[fid].fpos = 0;
    }
    if (mode == 3)
    561c:	03 30       	cpi	r16, 0x03	; 3
    561e:	11 05       	cpc	r17, r1
    5620:	89 f4       	brne	.+34     	; 0x5644 <openFile+0x96>
    {
        fidtable[fid].fpos = fidtable[fid].size;
    5622:	a0 e0       	ldi	r26, 0x00	; 0
    5624:	b0 e0       	ldi	r27, 0x00	; 0
    5626:	8e 83       	std	Y+6, r24	; 0x06
    5628:	9f 83       	std	Y+7, r25	; 0x07
    562a:	a8 87       	std	Y+8, r26	; 0x08
    562c:	b9 87       	std	Y+9, r27	; 0x09
    }
    if (mode == 5)
    {
        fidtable[fid].fpos = 0;
    }
}
    562e:	df 91       	pop	r29
    5630:	cf 91       	pop	r28
    5632:	1f 91       	pop	r17
    5634:	0f 91       	pop	r16
    5636:	ff 90       	pop	r15
    5638:	ef 90       	pop	r14
    563a:	df 90       	pop	r13
    563c:	cf 90       	pop	r12
    563e:	bf 90       	pop	r11
    5640:	af 90       	pop	r10
    5642:	08 95       	ret
    }
    if (mode == 3)
    {
        fidtable[fid].fpos = fidtable[fid].size;
    }
    if (mode == 4)
    5644:	04 30       	cpi	r16, 0x04	; 4
    5646:	11 05       	cpc	r17, r1
    5648:	69 f4       	brne	.+26     	; 0x5664 <openFile+0xb6>
    {
        freeBlocks(addr);
    564a:	8d 2d       	mov	r24, r13
    564c:	9c 2d       	mov	r25, r12
    564e:	0e 94 be 2a 	call	0x557c	; 0x557c <freeBlocks>
        fidtable[fid].fpos = 0;
    5652:	1e 82       	std	Y+6, r1	; 0x06
    5654:	1f 82       	std	Y+7, r1	; 0x07
    5656:	18 86       	std	Y+8, r1	; 0x08
    5658:	19 86       	std	Y+9, r1	; 0x09
    565a:	e9 cf       	rjmp	.-46     	; 0x562e <openFile+0x80>
    fidtable[fid].mode = (uint8_t) mode;
    fidtable[fid].size = fsread16uint(addr, 29);
    //mode: 1 read 2 write 3 append 4 truncate 5 rw
    if (mode == 1)
    {
        fidtable[fid].fpos = 0;
    565c:	1e 82       	std	Y+6, r1	; 0x06
    565e:	1f 82       	std	Y+7, r1	; 0x07
    5660:	18 86       	std	Y+8, r1	; 0x08
    5662:	19 86       	std	Y+9, r1	; 0x09
    if (mode == 4)
    {
        freeBlocks(addr);
        fidtable[fid].fpos = 0;
    }
    if (mode == 5)
    5664:	05 30       	cpi	r16, 0x05	; 5
    5666:	11 05       	cpc	r17, r1
    5668:	11 f7       	brne	.-60     	; 0x562e <openFile+0x80>
    {
        fidtable[fid].fpos = 0;
    566a:	ea 0c       	add	r14, r10
    566c:	fb 1c       	adc	r15, r11
    566e:	86 eb       	ldi	r24, 0xB6	; 182
    5670:	95 e0       	ldi	r25, 0x05	; 5
    5672:	e8 0e       	add	r14, r24
    5674:	f9 1e       	adc	r15, r25
    5676:	f7 01       	movw	r30, r14
    5678:	16 82       	std	Z+6, r1	; 0x06
    567a:	17 82       	std	Z+7, r1	; 0x07
    567c:	10 86       	std	Z+8, r1	; 0x08
    567e:	11 86       	std	Z+9, r1	; 0x09
    5680:	d6 cf       	rjmp	.-84     	; 0x562e <openFile+0x80>

00005682 <isDirectory>:
}

//check if the addr block is a directory or not 
int isDirectory(int addr)
{
    if (checkNodeValid(addr) == DIRNODE)
    5682:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <checkNodeValid>
    5686:	20 e0       	ldi	r18, 0x00	; 0
    5688:	30 e0       	ldi	r19, 0x00	; 0
    568a:	01 97       	sbiw	r24, 0x01	; 1
    568c:	11 f0       	breq	.+4      	; 0x5692 <isDirectory+0x10>
    }
    else
    {
        return 0;
    }
}
    568e:	c9 01       	movw	r24, r18
    5690:	08 95       	ret
}

//check if the addr block is a directory or not 
int isDirectory(int addr)
{
    if (checkNodeValid(addr) == DIRNODE)
    5692:	21 e0       	ldi	r18, 0x01	; 1
    5694:	30 e0       	ldi	r19, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    5696:	c9 01       	movw	r24, r18
    5698:	08 95       	ret

0000569a <checkName>:
//filename should be no more than 12 bytes and must end with \0
//the checking goes as follows. It checks the bytes by bytes and make sure that 
//the string mathces. if not match then 1 if \0 and match then 0 otherwise proceeds 
//and the filename must be valid 
int checkName(char *filename, int addr)
{
    569a:	cf 92       	push	r12
    569c:	df 92       	push	r13
    569e:	ef 92       	push	r14
    56a0:	ff 92       	push	r15
    56a2:	1f 93       	push	r17
    56a4:	cf 93       	push	r28
    56a6:	df 93       	push	r29
    56a8:	18 2f       	mov	r17, r24
    56aa:	f9 2e       	mov	r15, r25
    56ac:	6b 01       	movw	r12, r22
    char *p;
    int i;

    i = 0;
    if (mystrlen(filename) > 12)
    56ae:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    56b2:	0d 97       	sbiw	r24, 0x0d	; 13
    56b4:	5c f0       	brlt	.+22     	; 0x56cc <checkName+0x32>
    }
    if (checkNodeValid(addr) == 0)
    {
        return 1;
    }
    for (i = 0; i < 12; i++)
    56b6:	21 e0       	ldi	r18, 0x01	; 1
    56b8:	30 e0       	ldi	r19, 0x00	; 0
                continue;
            }
        }
    }
    return 0;
}
    56ba:	c9 01       	movw	r24, r18
    56bc:	df 91       	pop	r29
    56be:	cf 91       	pop	r28
    56c0:	1f 91       	pop	r17
    56c2:	ff 90       	pop	r15
    56c4:	ef 90       	pop	r14
    56c6:	df 90       	pop	r13
    56c8:	cf 90       	pop	r12
    56ca:	08 95       	ret
    i = 0;
    if (mystrlen(filename) > 12)
    {
        return 1;
    }
    if (checkNodeValid(addr) == 0)
    56cc:	c6 01       	movw	r24, r12
    56ce:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <checkNodeValid>
    56d2:	89 2b       	or	r24, r25
    56d4:	81 f3       	breq	.-32     	; 0x56b6 <checkName+0x1c>
    56d6:	81 2f       	mov	r24, r17
    56d8:	9f 2d       	mov	r25, r15
    56da:	9c 01       	movw	r18, r24
    56dc:	79 01       	movw	r14, r18
    56de:	c0 e0       	ldi	r28, 0x00	; 0
    56e0:	d0 e0       	ldi	r29, 0x00	; 0
    }
    for (i = 0; i < 12; i++)
    {
        p = filename;
        p += i;
        if ((uint8_t) (*p) != fsread8uint(addr, FILENAMEOFFSET + i))
    56e2:	f7 01       	movw	r30, r14
    56e4:	10 81       	ld	r17, Z
    56e6:	c6 01       	movw	r24, r12
    56e8:	be 01       	movw	r22, r28
    56ea:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    56ee:	18 17       	cp	r17, r24
    56f0:	11 f7       	brne	.-60     	; 0x56b6 <checkName+0x1c>
        {
            return 1;
        }
        else
        {
            if ((*p) == '\0')
    56f2:	f7 01       	movw	r30, r14
    56f4:	80 81       	ld	r24, Z
    56f6:	88 23       	and	r24, r24
    56f8:	39 f0       	breq	.+14     	; 0x5708 <checkName+0x6e>
    }
    if (checkNodeValid(addr) == 0)
    {
        return 1;
    }
    for (i = 0; i < 12; i++)
    56fa:	21 96       	adiw	r28, 0x01	; 1
    56fc:	08 94       	sec
    56fe:	e1 1c       	adc	r14, r1
    5700:	f1 1c       	adc	r15, r1
    5702:	cc 30       	cpi	r28, 0x0C	; 12
    5704:	d1 05       	cpc	r29, r1
    5706:	69 f7       	brne	.-38     	; 0x56e2 <checkName+0x48>
    5708:	20 e0       	ldi	r18, 0x00	; 0
    570a:	30 e0       	ldi	r19, 0x00	; 0
    570c:	d6 cf       	rjmp	.-84     	; 0x56ba <checkName+0x20>

0000570e <existBlockAddr>:
    return 0;
}

//check wehther a block exists. the filename must be single level 
int existBlockAddr(char *filename, int directory)
{
    570e:	af 92       	push	r10
    5710:	bf 92       	push	r11
    5712:	cf 92       	push	r12
    5714:	df 92       	push	r13
    5716:	ff 92       	push	r15
    5718:	0f 93       	push	r16
    571a:	1f 93       	push	r17
    571c:	cf 93       	push	r28
    571e:	df 93       	push	r29
    5720:	5c 01       	movw	r10, r24
    5722:	6b 01       	movw	r12, r22
    5724:	ce e0       	ldi	r28, 0x0E	; 14
    5726:	d0 e0       	ldi	r29, 0x00	; 0
    5728:	04 c0       	rjmp	.+8      	; 0x5732 <existBlockAddr+0x24>
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
        if (checkName(filename, subaddr) == 0)
        {
            if (((temp = checkNodeValid(subaddr)) > 0) && (subaddr > 0))
    572a:	21 96       	adiw	r28, 0x01	; 1
int existBlockAddr(char *filename, int directory)
{
    int i;
    uint8_t temp;

    for (i = 0; i < 10; i++)
    572c:	c8 31       	cpi	r28, 0x18	; 24
    572e:	d1 05       	cpc	r29, r1
    5730:	f9 f0       	breq	.+62     	; 0x5770 <existBlockAddr+0x62>
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    5732:	c6 01       	movw	r24, r12
    5734:	be 01       	movw	r22, r28
    5736:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    573a:	f8 2e       	mov	r15, r24
        if (checkName(filename, subaddr) == 0)
    573c:	08 2f       	mov	r16, r24
    573e:	10 e0       	ldi	r17, 0x00	; 0
    5740:	c5 01       	movw	r24, r10
    5742:	b8 01       	movw	r22, r16
    5744:	0e 94 4d 2b 	call	0x569a	; 0x569a <checkName>
    5748:	89 2b       	or	r24, r25
    574a:	79 f7       	brne	.-34     	; 0x572a <existBlockAddr+0x1c>
        {
            if (((temp = checkNodeValid(subaddr)) > 0) && (subaddr > 0))
    574c:	c8 01       	movw	r24, r16
    574e:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <checkNodeValid>
    5752:	88 23       	and	r24, r24
    5754:	51 f3       	breq	.-44     	; 0x572a <existBlockAddr+0x1c>
    5756:	ff 20       	and	r15, r15
    5758:	41 f3       	breq	.-48     	; 0x572a <existBlockAddr+0x1c>
                continue;
            }
        }
    }
    return 0;
}
    575a:	c8 01       	movw	r24, r16
    575c:	df 91       	pop	r29
    575e:	cf 91       	pop	r28
    5760:	1f 91       	pop	r17
    5762:	0f 91       	pop	r16
    5764:	ff 90       	pop	r15
    5766:	df 90       	pop	r13
    5768:	cf 90       	pop	r12
    576a:	bf 90       	pop	r11
    576c:	af 90       	pop	r10
    576e:	08 95       	ret
int existBlockAddr(char *filename, int directory)
{
    int i;
    uint8_t temp;

    for (i = 0; i < 10; i++)
    5770:	00 e0       	ldi	r16, 0x00	; 0
    5772:	10 e0       	ldi	r17, 0x00	; 0
    5774:	f2 cf       	rjmp	.-28     	; 0x575a <existBlockAddr+0x4c>

00005776 <createFileFromDirectory>:

//void foobar()
//{}
//create a file
uint8_t createFileFromDirectory(char *filename, int directory)
{
    5776:	0f 93       	push	r16
    5778:	1f 93       	push	r17
    577a:	cf 93       	push	r28
    577c:	df 93       	push	r29
    577e:	ec 01       	movw	r28, r24
    5780:	8b 01       	movw	r16, r22
    //this part first inserts a directory and then creates a node 
    uint8_t getaddr;

    if (existBlockAddr(filename, directory) > 0)
    5782:	0e 94 87 2b 	call	0x570e	; 0x570e <existBlockAddr>
    5786:	18 16       	cp	r1, r24
    5788:	19 06       	cpc	r1, r25
    578a:	3c f4       	brge	.+14     	; 0x579a <createFileFromDirectory+0x24>
    578c:	10 e0       	ldi	r17, 0x00	; 0
        return 255;
    }
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, FILENODE);
    return getaddr;
}
    578e:	81 2f       	mov	r24, r17
    5790:	df 91       	pop	r29
    5792:	cf 91       	pop	r28
    5794:	1f 91       	pop	r17
    5796:	0f 91       	pop	r16
    5798:	08 95       	ret

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    579a:	c8 01       	movw	r24, r16
    579c:	0e 94 17 2a 	call	0x542e	; 0x542e <fullBlock>
    57a0:	81 30       	cpi	r24, 0x01	; 1
    57a2:	81 f0       	breq	.+32     	; 0x57c4 <createFileFromDirectory+0x4e>
    {
        return 255;
    }
    getaddr = (uint8_t) getVectorNode();
    57a4:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <getVectorNode>
    57a8:	18 2f       	mov	r17, r24
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, FILENODE);
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	be 01       	movw	r22, r28
    57ae:	40 e0       	ldi	r20, 0x00	; 0
    57b0:	20 2f       	mov	r18, r16
    57b2:	02 e0       	ldi	r16, 0x02	; 2
    57b4:	0e 94 08 29 	call	0x5210	; 0x5210 <buildNewNode>
    return getaddr;
}
    57b8:	81 2f       	mov	r24, r17
    57ba:	df 91       	pop	r29
    57bc:	cf 91       	pop	r28
    57be:	1f 91       	pop	r17
    57c0:	0f 91       	pop	r16
    57c2:	08 95       	ret

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    57c4:	1f ef       	ldi	r17, 0xFF	; 255
        return 255;
    }
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, FILENODE);
    return getaddr;
}
    57c6:	81 2f       	mov	r24, r17
    57c8:	df 91       	pop	r29
    57ca:	cf 91       	pop	r28
    57cc:	1f 91       	pop	r17
    57ce:	0f 91       	pop	r16
    57d0:	08 95       	ret

000057d2 <createDir>:
    return 0;
}

//create a directory
uint8_t createDir(char *filename, int directory)
{
    57d2:	0f 93       	push	r16
    57d4:	1f 93       	push	r17
    57d6:	cf 93       	push	r28
    57d8:	df 93       	push	r29
    57da:	ec 01       	movw	r28, r24
    57dc:	8b 01       	movw	r16, r22
    //fix: should first try to see if there is a directory with the same name
    uint8_t getaddr;

    if (existBlockAddr(filename, directory) > 0)
    57de:	0e 94 87 2b 	call	0x570e	; 0x570e <existBlockAddr>
    57e2:	18 16       	cp	r1, r24
    57e4:	19 06       	cpc	r1, r25
    57e6:	3c f4       	brge	.+14     	; 0x57f6 <createDir+0x24>
    57e8:	10 e0       	ldi	r17, 0x00	; 0
    }
    //this part first inserts a directory and then creates a node 
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, DIRNODE);
    return getaddr;
}
    57ea:	81 2f       	mov	r24, r17
    57ec:	df 91       	pop	r29
    57ee:	cf 91       	pop	r28
    57f0:	1f 91       	pop	r17
    57f2:	0f 91       	pop	r16
    57f4:	08 95       	ret

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    57f6:	c8 01       	movw	r24, r16
    57f8:	0e 94 17 2a 	call	0x542e	; 0x542e <fullBlock>
    57fc:	81 30       	cpi	r24, 0x01	; 1
    57fe:	81 f0       	breq	.+32     	; 0x5820 <createDir+0x4e>
    {
        return 255;
    }
    //this part first inserts a directory and then creates a node 
    getaddr = (uint8_t) getVectorNode();
    5800:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <getVectorNode>
    5804:	18 2f       	mov	r17, r24
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, DIRNODE);
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	be 01       	movw	r22, r28
    580a:	40 e0       	ldi	r20, 0x00	; 0
    580c:	20 2f       	mov	r18, r16
    580e:	01 e0       	ldi	r16, 0x01	; 1
    5810:	0e 94 08 29 	call	0x5210	; 0x5210 <buildNewNode>
    return getaddr;
}
    5814:	81 2f       	mov	r24, r17
    5816:	df 91       	pop	r29
    5818:	cf 91       	pop	r28
    581a:	1f 91       	pop	r17
    581c:	0f 91       	pop	r16
    581e:	08 95       	ret

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    5820:	1f ef       	ldi	r17, 0xFF	; 255
    }
    //this part first inserts a directory and then creates a node 
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, DIRNODE);
    return getaddr;
}
    5822:	81 2f       	mov	r24, r17
    5824:	df 91       	pop	r29
    5826:	cf 91       	pop	r28
    5828:	1f 91       	pop	r17
    582a:	0f 91       	pop	r16
    582c:	08 95       	ret

0000582e <existBlock>:
    return parentnode;
}

//check wehther a block exists. the filename must be single level 
int existBlock(char *filename, int directory)
{
    582e:	cf 92       	push	r12
    5830:	df 92       	push	r13
    5832:	ef 92       	push	r14
    5834:	ff 92       	push	r15
    5836:	1f 93       	push	r17
    5838:	cf 93       	push	r28
    583a:	df 93       	push	r29
    583c:	6c 01       	movw	r12, r24
    583e:	7b 01       	movw	r14, r22
    5840:	ce e0       	ldi	r28, 0x0E	; 14
    5842:	d0 e0       	ldi	r29, 0x00	; 0
    5844:	04 c0       	rjmp	.+8      	; 0x584e <existBlock+0x20>
        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
        if (checkName(filename, subaddr) == 0)
        {
            if (((temp = checkNodeValid(subaddr)) > 0) && (subaddr > 0))
            {
                return temp;
    5846:	21 96       	adiw	r28, 0x01	; 1
int existBlock(char *filename, int directory)
{
    int i;
    uint8_t temp;

    for (i = 0; i < 10; i++)
    5848:	c8 31       	cpi	r28, 0x18	; 24
    584a:	d1 05       	cpc	r29, r1
    584c:	b9 f0       	breq	.+46     	; 0x587c <existBlock+0x4e>
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    584e:	c7 01       	movw	r24, r14
    5850:	be 01       	movw	r22, r28
    5852:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    5856:	18 2f       	mov	r17, r24
        if (checkName(filename, subaddr) == 0)
    5858:	c6 01       	movw	r24, r12
    585a:	61 2f       	mov	r22, r17
    585c:	70 e0       	ldi	r23, 0x00	; 0
    585e:	0e 94 4d 2b 	call	0x569a	; 0x569a <checkName>
    5862:	89 2b       	or	r24, r25
    5864:	81 f7       	brne	.-32     	; 0x5846 <existBlock+0x18>
        {
            if (((temp = checkNodeValid(subaddr)) > 0) && (subaddr > 0))
    5866:	81 2f       	mov	r24, r17
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <checkNodeValid>
    586e:	88 23       	and	r24, r24
    5870:	51 f3       	breq	.-44     	; 0x5846 <existBlock+0x18>
    5872:	11 23       	and	r17, r17
    5874:	41 f3       	breq	.-48     	; 0x5846 <existBlock+0x18>
            {
                return temp;
    5876:	28 2f       	mov	r18, r24
    5878:	30 e0       	ldi	r19, 0x00	; 0
    587a:	02 c0       	rjmp	.+4      	; 0x5880 <existBlock+0x52>
int existBlock(char *filename, int directory)
{
    int i;
    uint8_t temp;

    for (i = 0; i < 10; i++)
    587c:	20 e0       	ldi	r18, 0x00	; 0
    587e:	30 e0       	ldi	r19, 0x00	; 0
                continue;
            }
        }
    }
    return 0;
}
    5880:	c9 01       	movw	r24, r18
    5882:	df 91       	pop	r29
    5884:	cf 91       	pop	r28
    5886:	1f 91       	pop	r17
    5888:	ff 90       	pop	r15
    588a:	ef 90       	pop	r14
    588c:	df 90       	pop	r13
    588e:	cf 90       	pop	r12
    5890:	08 95       	ret

00005892 <changeDirectory>:
    return;
}

//in this one, the directory is checked to see if the file is out there if not return -1 
int changeDirectory(char *filename, int directory)
{
    5892:	cf 92       	push	r12
    5894:	df 92       	push	r13
    5896:	ef 92       	push	r14
    5898:	ff 92       	push	r15
    589a:	0f 93       	push	r16
    589c:	1f 93       	push	r17
    589e:	cf 93       	push	r28
    58a0:	df 93       	push	r29
    58a2:	6c 01       	movw	r12, r24
    58a4:	7b 01       	movw	r14, r22
    58a6:	ce e0       	ldi	r28, 0x0E	; 14
    58a8:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    58aa:	c7 01       	movw	r24, r14
    58ac:	be 01       	movw	r22, r28
    58ae:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
        if (checkName(filename, subaddr) == 0)
    58b2:	08 2f       	mov	r16, r24
    58b4:	10 e0       	ldi	r17, 0x00	; 0
    58b6:	c6 01       	movw	r24, r12
    58b8:	b8 01       	movw	r22, r16
    58ba:	0e 94 4d 2b 	call	0x569a	; 0x569a <checkName>
    58be:	89 2b       	or	r24, r25
    58c0:	31 f0       	breq	.+12     	; 0x58ce <changeDirectory+0x3c>
    58c2:	21 96       	adiw	r28, 0x01	; 1
//in this one, the directory is checked to see if the file is out there if not return -1 
int changeDirectory(char *filename, int directory)
{
    int i;

    for (i = 0; i < 10; i++)
    58c4:	c8 31       	cpi	r28, 0x18	; 24
    58c6:	d1 05       	cpc	r29, r1
    58c8:	81 f7       	brne	.-32     	; 0x58aa <changeDirectory+0x18>
    58ca:	0f ef       	ldi	r16, 0xFF	; 255
    58cc:	1f ef       	ldi	r17, 0xFF	; 255
        {
            return subaddr;
        }
    }
    return -1;
}
    58ce:	c8 01       	movw	r24, r16
    58d0:	df 91       	pop	r29
    58d2:	cf 91       	pop	r28
    58d4:	1f 91       	pop	r17
    58d6:	0f 91       	pop	r16
    58d8:	ff 90       	pop	r15
    58da:	ef 90       	pop	r14
    58dc:	df 90       	pop	r13
    58de:	cf 90       	pop	r12
    58e0:	08 95       	ret

000058e2 <locateFileName>:
//the pathname is organized as ../ or ./ or name/ or /something and does not end with / 
//sovled
//and the following are the functions this thing uses
//
int locateFileName(char *pathname, int *state)
{
    58e2:	af 92       	push	r10
    58e4:	bf 92       	push	r11
    58e6:	cf 92       	push	r12
    58e8:	df 92       	push	r13
    58ea:	ef 92       	push	r14
    58ec:	ff 92       	push	r15
    58ee:	0f 93       	push	r16
    58f0:	1f 93       	push	r17
    58f2:	df 93       	push	r29
    58f4:	cf 93       	push	r28
    58f6:	cd b7       	in	r28, 0x3d	; 61
    58f8:	de b7       	in	r29, 0x3e	; 62
    58fa:	2d 97       	sbiw	r28, 0x0d	; 13
    58fc:	0f b6       	in	r0, 0x3f	; 63
    58fe:	f8 94       	cli
    5900:	de bf       	out	0x3e, r29	; 62
    5902:	0f be       	out	0x3f, r0	; 63
    5904:	cd bf       	out	0x3d, r28	; 61
    5906:	6c 01       	movw	r12, r24
    5908:	5b 01       	movw	r10, r22
    int addrTrack;
    char nextString[13];
    int ret;

    //first classify what type of pathname this is 
    p = pathname[0];
    590a:	fc 01       	movw	r30, r24
    590c:	91 91       	ld	r25, Z+
    590e:	8f 01       	movw	r16, r30
    q = pathname[1];
    5910:	f6 01       	movw	r30, r12
    5912:	81 81       	ldd	r24, Z+1	; 0x01
}

//return current directory
int getPwd()
{
    return currentdirectory;
    5914:	e0 90 74 03 	lds	r14, 0x0374
    5918:	f0 90 75 03 	lds	r15, 0x0375
    //first classify what type of pathname this is 
    p = pathname[0];
    q = pathname[1];
    relativestart = pathname;
    addrTrack = getPwd();
    if ((p == '.') && (q == '.'))
    591c:	9e 32       	cpi	r25, 0x2E	; 46
    591e:	09 f4       	brne	.+2      	; 0x5922 <locateFileName+0x40>
    5920:	56 c0       	rjmp	.+172    	; 0x59ce <locateFileName+0xec>
    }
    else if ((p == '.') && (q == '/'))
    {
        relativestart = pathname + 1;
    }
    else if (p == '/')
    5922:	9f 32       	cpi	r25, 0x2F	; 47
    5924:	f1 f0       	breq	.+60     	; 0x5962 <locateFileName+0x80>
    {
        addrTrack = FSROOTNODE;
        relativestart = pathname;
    }
    else if (isLetter(p) == 1)
    5926:	89 2f       	mov	r24, r25
    5928:	81 56       	subi	r24, 0x61	; 97
    592a:	8a 31       	cpi	r24, 0x1A	; 26
    592c:	08 f0       	brcs	.+2      	; 0x5930 <locateFileName+0x4e>
    592e:	5f c0       	rjmp	.+190    	; 0x59ee <locateFileName+0x10c>
    {
        //this case is the "mnae" case, where there may or may not be further stuff behind 
        //buggy place 
        relativestart = extractString(relativestart, (char *)nextString);
    5930:	c6 01       	movw	r24, r12
    5932:	6e 01       	movw	r12, r28
    5934:	08 94       	sec
    5936:	c1 1c       	adc	r12, r1
    5938:	d1 1c       	adc	r13, r1
    593a:	b6 01       	movw	r22, r12
    593c:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <extractString>
    5940:	8c 01       	movw	r16, r24
        if (relativestart == '\0')
    5942:	00 97       	sbiw	r24, 0x00	; 0
    5944:	09 f0       	breq	.+2      	; 0x5948 <locateFileName+0x66>
    5946:	6d c0       	rjmp	.+218    	; 0x5a22 <locateFileName+0x140>
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    5948:	c6 01       	movw	r24, r12
    594a:	b7 01       	movw	r22, r14
    594c:	0e 94 17 2c 	call	0x582e	; 0x582e <existBlock>
    5950:	00 97       	sbiw	r24, 0x00	; 0
    5952:	09 f4       	brne	.+2      	; 0x5956 <locateFileName+0x74>
    5954:	48 c0       	rjmp	.+144    	; 0x59e6 <locateFileName+0x104>
                *state = 0;
                return addrTrack;
            }
            else
            {
                *state = ret;
    5956:	f5 01       	movw	r30, r10
    5958:	91 83       	std	Z+1, r25	; 0x01
    595a:	80 83       	st	Z, r24
                ret = changeDirectory(nextString, addrTrack);
    595c:	c6 01       	movw	r24, r12
    595e:	b7 01       	movw	r22, r14
    5960:	51 c0       	rjmp	.+162    	; 0x5a04 <locateFileName+0x122>
    }
    else if ((p == '.') && (q == '/'))
    {
        relativestart = pathname + 1;
    }
    else if (p == '/')
    5962:	86 01       	movw	r16, r12
    5964:	ee 24       	eor	r14, r14
    5966:	ff 24       	eor	r15, r15
        //Now all cases have been uniform now. It is like /a/b/c type 
        if (isDirectory(addrTrack) == 0)
        {
            return -1;
        }
        relativestart = extractString(relativestart, nextString);
    5968:	6e 01       	movw	r12, r28
    596a:	08 94       	sec
    596c:	c1 1c       	adc	r12, r1
    596e:	d1 1c       	adc	r13, r1
    5970:	14 c0       	rjmp	.+40     	; 0x599a <locateFileName+0xb8>
    5972:	c8 01       	movw	r24, r16
    5974:	b6 01       	movw	r22, r12
    5976:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <extractString>
    597a:	8c 01       	movw	r16, r24
        if (*relativestart == '\0')
    597c:	fc 01       	movw	r30, r24
    597e:	80 81       	ld	r24, Z
    5980:	88 23       	and	r24, r24
    5982:	59 f1       	breq	.+86     	; 0x59da <locateFileName+0xf8>
                return ret;
            }
        }
        else
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    5984:	c6 01       	movw	r24, r12
    5986:	b7 01       	movw	r22, r14
    5988:	0e 94 17 2c 	call	0x582e	; 0x582e <existBlock>
    598c:	89 2b       	or	r24, r25
    598e:	51 f0       	breq	.+20     	; 0x59a4 <locateFileName+0xc2>
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
    5990:	c6 01       	movw	r24, r12
    5992:	b7 01       	movw	r22, r14
    5994:	0e 94 49 2c 	call	0x5892	; 0x5892 <changeDirectory>
    5998:	7c 01       	movw	r14, r24
        }
    }
    while (1)
    {
        //Now all cases have been uniform now. It is like /a/b/c type 
        if (isDirectory(addrTrack) == 0)
    599a:	c7 01       	movw	r24, r14
    599c:	0e 94 41 2b 	call	0x5682	; 0x5682 <isDirectory>
    59a0:	89 2b       	or	r24, r25
    59a2:	39 f7       	brne	.-50     	; 0x5972 <locateFileName+0x90>
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
            }
        }
    }
    59a4:	ee 24       	eor	r14, r14
    59a6:	ea 94       	dec	r14
    59a8:	fe 2c       	mov	r15, r14
}
    59aa:	c7 01       	movw	r24, r14
    59ac:	2d 96       	adiw	r28, 0x0d	; 13
    59ae:	0f b6       	in	r0, 0x3f	; 63
    59b0:	f8 94       	cli
    59b2:	de bf       	out	0x3e, r29	; 62
    59b4:	0f be       	out	0x3f, r0	; 63
    59b6:	cd bf       	out	0x3d, r28	; 61
    59b8:	cf 91       	pop	r28
    59ba:	df 91       	pop	r29
    59bc:	1f 91       	pop	r17
    59be:	0f 91       	pop	r16
    59c0:	ff 90       	pop	r15
    59c2:	ef 90       	pop	r14
    59c4:	df 90       	pop	r13
    59c6:	cf 90       	pop	r12
    59c8:	bf 90       	pop	r11
    59ca:	af 90       	pop	r10
    59cc:	08 95       	ret
    //first classify what type of pathname this is 
    p = pathname[0];
    q = pathname[1];
    relativestart = pathname;
    addrTrack = getPwd();
    if ((p == '.') && (q == '.'))
    59ce:	8e 32       	cpi	r24, 0x2E	; 46
    59d0:	e9 f0       	breq	.+58     	; 0x5a0c <locateFileName+0x12a>
    {
        addrTrack = getParentDirectory(addrTrack);
        relativestart = pathname + 2;
    }
    else if ((p == '.') && (q == '/'))
    59d2:	8f 32       	cpi	r24, 0x2F	; 47
    59d4:	49 f2       	breq	.-110    	; 0x5968 <locateFileName+0x86>
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
    59d6:	86 01       	movw	r16, r12
    59d8:	c7 cf       	rjmp	.-114    	; 0x5968 <locateFileName+0x86>
            return -1;
        }
        relativestart = extractString(relativestart, nextString);
        if (*relativestart == '\0')
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    59da:	c6 01       	movw	r24, r12
    59dc:	b7 01       	movw	r22, r14
    59de:	0e 94 17 2c 	call	0x582e	; 0x582e <existBlock>
    59e2:	00 97       	sbiw	r24, 0x00	; 0
    59e4:	51 f4       	brne	.+20     	; 0x59fa <locateFileName+0x118>
            {
                //ok there is only one string but no further strings after that. And this string does not exist 
                *state = 0;
    59e6:	f5 01       	movw	r30, r10
    59e8:	11 82       	std	Z+1, r1	; 0x01
    59ea:	10 82       	st	Z, r1
    59ec:	de cf       	rjmp	.-68     	; 0x59aa <locateFileName+0xc8>
    else if (p == '/')
    {
        addrTrack = FSROOTNODE;
        relativestart = pathname;
    }
    else if (isLetter(p) == 1)
    59ee:	91 54       	subi	r25, 0x41	; 65
    59f0:	9a 31       	cpi	r25, 0x1A	; 26
    59f2:	08 f4       	brcc	.+2      	; 0x59f6 <locateFileName+0x114>
    59f4:	9d cf       	rjmp	.-198    	; 0x5930 <locateFileName+0x4e>
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
    59f6:	86 01       	movw	r16, r12
    59f8:	b7 cf       	rjmp	.-146    	; 0x5968 <locateFileName+0x86>
                *state = 0;
                return addrTrack;
            }
            else
            {
                *state = ret;
    59fa:	f5 01       	movw	r30, r10
    59fc:	91 83       	std	Z+1, r25	; 0x01
    59fe:	80 83       	st	Z, r24
                ret = changeDirectory(nextString, addrTrack);
    5a00:	c6 01       	movw	r24, r12
    5a02:	b7 01       	movw	r22, r14
    5a04:	0e 94 49 2c 	call	0x5892	; 0x5892 <changeDirectory>
    5a08:	7c 01       	movw	r14, r24
    5a0a:	cf cf       	rjmp	.-98     	; 0x59aa <locateFileName+0xc8>
//-------------------------------------------------------------------------
int getParentDirectory(int directory)
{
    uint8_t parentnode;

    parentnode = fsread8uint(directory, DIR_PARENTOFFSET);
    5a0c:	c7 01       	movw	r24, r14
    5a0e:	6f e1       	ldi	r22, 0x1F	; 31
    5a10:	70 e0       	ldi	r23, 0x00	; 0
    5a12:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    return parentnode;
    5a16:	e8 2e       	mov	r14, r24
    5a18:	ff 24       	eor	r15, r15
    relativestart = pathname;
    addrTrack = getPwd();
    if ((p == '.') && (q == '.'))
    {
        addrTrack = getParentDirectory(addrTrack);
        relativestart = pathname + 2;
    5a1a:	86 01       	movw	r16, r12
    5a1c:	0e 5f       	subi	r16, 0xFE	; 254
    5a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a20:	a3 cf       	rjmp	.-186    	; 0x5968 <locateFileName+0x86>
                return ret;
            }
        }
        else
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    5a22:	c6 01       	movw	r24, r12
    5a24:	b7 01       	movw	r22, r14
    5a26:	0e 94 17 2c 	call	0x582e	; 0x582e <existBlock>
    5a2a:	89 2b       	or	r24, r25
    5a2c:	09 f4       	brne	.+2      	; 0x5a30 <locateFileName+0x14e>
    5a2e:	ba cf       	rjmp	.-140    	; 0x59a4 <locateFileName+0xc2>
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
    5a30:	c6 01       	movw	r24, r12
    5a32:	b7 01       	movw	r22, r14
    5a34:	0e 94 49 2c 	call	0x5892	; 0x5892 <changeDirectory>
    5a38:	7c 01       	movw	r14, r24
    5a3a:	96 cf       	rjmp	.-212    	; 0x5968 <locateFileName+0x86>

00005a3c <getbit>:
#endif
}

//-------------------------------------------------------------------------
static int getbit(char *set, int number)
{
    5a3c:	ac 01       	movw	r20, r24
    5a3e:	fb 01       	movw	r30, r22
    5a40:	77 fd       	sbrc	r23, 7
    5a42:	1a c0       	rjmp	.+52     	; 0x5a78 <getbit+0x3c>
    5a44:	f5 95       	asr	r31
    5a46:	e7 95       	ror	r30
    5a48:	f5 95       	asr	r31
    5a4a:	e7 95       	ror	r30
    5a4c:	f5 95       	asr	r31
    5a4e:	e7 95       	ror	r30
    5a50:	e4 0f       	add	r30, r20
    5a52:	f5 1f       	adc	r31, r21
    5a54:	20 81       	ld	r18, Z
    5a56:	33 27       	eor	r19, r19
    5a58:	27 fd       	sbrc	r18, 7
    5a5a:	30 95       	com	r19
    5a5c:	cb 01       	movw	r24, r22
    5a5e:	68 e0       	ldi	r22, 0x08	; 8
    5a60:	70 e0       	ldi	r23, 0x00	; 0
    5a62:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    5a66:	02 c0       	rjmp	.+4      	; 0x5a6c <getbit+0x30>
    5a68:	35 95       	asr	r19
    5a6a:	27 95       	ror	r18
    5a6c:	8a 95       	dec	r24
    5a6e:	e2 f7       	brpl	.-8      	; 0x5a68 <getbit+0x2c>
    5a70:	21 70       	andi	r18, 0x01	; 1
    5a72:	30 70       	andi	r19, 0x00	; 0
    set += number / 8;
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
}
    5a74:	c9 01       	movw	r24, r18
    5a76:	08 95       	ret
#endif
}

//-------------------------------------------------------------------------
static int getbit(char *set, int number)
{
    5a78:	37 96       	adiw	r30, 0x07	; 7
    5a7a:	e4 cf       	rjmp	.-56     	; 0x5a44 <getbit+0x8>

00005a7c <setbit>:
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
}

//-------------------------------------------------------------------------
static void setbit(char *set, int number, int value)
{
    5a7c:	dc 01       	movw	r26, r24
    set += number / 8;
    5a7e:	9b 01       	movw	r18, r22
    5a80:	77 fd       	sbrc	r23, 7
    5a82:	2c c0       	rjmp	.+88     	; 0x5adc <setbit+0x60>
    5a84:	f9 01       	movw	r30, r18
    5a86:	f5 95       	asr	r31
    5a88:	e7 95       	ror	r30
    5a8a:	f5 95       	asr	r31
    5a8c:	e7 95       	ror	r30
    5a8e:	f5 95       	asr	r31
    5a90:	e7 95       	ror	r30
    5a92:	ea 0f       	add	r30, r26
    5a94:	fb 1f       	adc	r31, r27
    if (value)
    5a96:	45 2b       	or	r20, r21
    5a98:	89 f4       	brne	.+34     	; 0x5abc <setbit+0x40>
    {
        *set |= 1 << (number % 8);
    }                           /* set bit      */
    else
    {
        *set &= ~(1 << (number % 8));
    5a9a:	cb 01       	movw	r24, r22
    5a9c:	68 e0       	ldi	r22, 0x08	; 8
    5a9e:	70 e0       	ldi	r23, 0x00	; 0
    5aa0:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    5aa4:	21 e0       	ldi	r18, 0x01	; 1
    5aa6:	30 e0       	ldi	r19, 0x00	; 0
    5aa8:	02 c0       	rjmp	.+4      	; 0x5aae <setbit+0x32>
    5aaa:	22 0f       	add	r18, r18
    5aac:	33 1f       	adc	r19, r19
    5aae:	8a 95       	dec	r24
    5ab0:	e2 f7       	brpl	.-8      	; 0x5aaa <setbit+0x2e>
    5ab2:	20 95       	com	r18
    5ab4:	80 81       	ld	r24, Z
    5ab6:	82 23       	and	r24, r18
    5ab8:	80 83       	st	Z, r24
    5aba:	08 95       	ret
static void setbit(char *set, int number, int value)
{
    set += number / 8;
    if (value)
    {
        *set |= 1 << (number % 8);
    5abc:	cb 01       	movw	r24, r22
    5abe:	68 e0       	ldi	r22, 0x08	; 8
    5ac0:	70 e0       	ldi	r23, 0x00	; 0
    5ac2:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    5ac6:	21 e0       	ldi	r18, 0x01	; 1
    5ac8:	30 e0       	ldi	r19, 0x00	; 0
    5aca:	02 c0       	rjmp	.+4      	; 0x5ad0 <setbit+0x54>
    5acc:	22 0f       	add	r18, r18
    5ace:	33 1f       	adc	r19, r19
    5ad0:	8a 95       	dec	r24
    5ad2:	e2 f7       	brpl	.-8      	; 0x5acc <setbit+0x50>
    5ad4:	80 81       	ld	r24, Z
    5ad6:	82 2b       	or	r24, r18
    5ad8:	80 83       	st	Z, r24
    5ada:	08 95       	ret
}

//-------------------------------------------------------------------------
static void setbit(char *set, int number, int value)
{
    set += number / 8;
    5adc:	29 5f       	subi	r18, 0xF9	; 249
    5ade:	3f 4f       	sbci	r19, 0xFF	; 255
    5ae0:	d1 cf       	rjmp	.-94     	; 0x5a84 <setbit+0x8>

00005ae2 <initVectorFlash>:
    }                           /* clear bit    */
}

//-------------------------------------------------------------------------
void initVectorFlash()
{
    5ae2:	e6 e7       	ldi	r30, 0x76	; 118
    5ae4:	f3 e0       	ldi	r31, 0x03	; 3
    int i;

    for (i = 0; i < 32; i++)
    {
        vectorflash[i] = 0;
    5ae6:	11 92       	st	Z+, r1
//-------------------------------------------------------------------------
void initVectorFlash()
{
    int i;

    for (i = 0; i < 32; i++)
    5ae8:	83 e0       	ldi	r24, 0x03	; 3
    5aea:	e6 39       	cpi	r30, 0x96	; 150
    5aec:	f8 07       	cpc	r31, r24
    5aee:	d9 f7       	brne	.-10     	; 0x5ae6 <initVectorFlash+0x4>
    {
        vectorflash[i] = 0;
    }
}
    5af0:	08 95       	ret

00005af2 <getFlashPage>:

//-------------------------------------------------------------------------
int getFlashPage()
{
    5af2:	cf 93       	push	r28
    5af4:	df 93       	push	r29
    5af6:	c0 e0       	ldi	r28, 0x00	; 0
    5af8:	d0 e0       	ldi	r29, 0x00	; 0
    5afa:	05 c0       	rjmp	.+10     	; 0x5b06 <getFlashPage+0x14>
    int num;

    for (num = 0; num < 256; num++)
    5afc:	21 96       	adiw	r28, 0x01	; 1
    5afe:	81 e0       	ldi	r24, 0x01	; 1
    5b00:	c0 30       	cpi	r28, 0x00	; 0
    5b02:	d8 07       	cpc	r29, r24
    5b04:	a9 f0       	breq	.+42     	; 0x5b30 <getFlashPage+0x3e>
    {
        if (getbit(vectorflash, num) == 0)
    5b06:	86 e7       	ldi	r24, 0x76	; 118
    5b08:	93 e0       	ldi	r25, 0x03	; 3
    5b0a:	be 01       	movw	r22, r28
    5b0c:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <getbit>
    5b10:	89 2b       	or	r24, r25
    5b12:	a1 f7       	brne	.-24     	; 0x5afc <getFlashPage+0xa>
        {
            setbit(vectorflash, num, 1);
    5b14:	86 e7       	ldi	r24, 0x76	; 118
    5b16:	93 e0       	ldi	r25, 0x03	; 3
    5b18:	be 01       	movw	r22, r28
    5b1a:	41 e0       	ldi	r20, 0x01	; 1
    5b1c:	50 e0       	ldi	r21, 0x00	; 0
    5b1e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <setbit>
            return num + 1;
    5b22:	be 01       	movw	r22, r28
    5b24:	6f 5f       	subi	r22, 0xFF	; 255
    5b26:	7f 4f       	sbci	r23, 0xFF	; 255
        }
    }
    return -1;
}
    5b28:	cb 01       	movw	r24, r22
    5b2a:	df 91       	pop	r29
    5b2c:	cf 91       	pop	r28
    5b2e:	08 95       	ret
//-------------------------------------------------------------------------
int getFlashPage()
{
    int num;

    for (num = 0; num < 256; num++)
    5b30:	6f ef       	ldi	r22, 0xFF	; 255
    5b32:	7f ef       	ldi	r23, 0xFF	; 255
            setbit(vectorflash, num, 1);
            return num + 1;
        }
    }
    return -1;
}
    5b34:	cb 01       	movw	r24, r22
    5b36:	df 91       	pop	r29
    5b38:	cf 91       	pop	r28
    5b3a:	08 95       	ret

00005b3c <releaseFlashPage>:
}

//-------------------------------------------------------------------------
void releaseFlashPage(int num)
{
    setbit(vectorflash, num - 1, 0);
    5b3c:	bc 01       	movw	r22, r24
    5b3e:	61 50       	subi	r22, 0x01	; 1
    5b40:	70 40       	sbci	r23, 0x00	; 0
    5b42:	86 e7       	ldi	r24, 0x76	; 118
    5b44:	93 e0       	ldi	r25, 0x03	; 3
    5b46:	40 e0       	ldi	r20, 0x00	; 0
    5b48:	50 e0       	ldi	r21, 0x00	; 0
    5b4a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <setbit>
}
    5b4e:	08 95       	ret

00005b50 <countVectorFlash>:

//-------------------------------------------------------------------------
int countVectorFlash()
{
    5b50:	0f 93       	push	r16
    5b52:	1f 93       	push	r17
    5b54:	cf 93       	push	r28
    5b56:	df 93       	push	r29
    5b58:	00 e0       	ldi	r16, 0x00	; 0
    5b5a:	10 e0       	ldi	r17, 0x00	; 0
    5b5c:	c0 e0       	ldi	r28, 0x00	; 0
    5b5e:	d0 e0       	ldi	r29, 0x00	; 0
    5b60:	05 c0       	rjmp	.+10     	; 0x5b6c <countVectorFlash+0x1c>
    int count, num;

    count = 0;
    for (num = 0; num < 256; num++)
    5b62:	21 96       	adiw	r28, 0x01	; 1
    5b64:	81 e0       	ldi	r24, 0x01	; 1
    5b66:	c0 30       	cpi	r28, 0x00	; 0
    5b68:	d8 07       	cpc	r29, r24
    5b6a:	71 f0       	breq	.+28     	; 0x5b88 <countVectorFlash+0x38>
    {
        if (getbit(vectorflash, num) == 1)
    5b6c:	86 e7       	ldi	r24, 0x76	; 118
    5b6e:	93 e0       	ldi	r25, 0x03	; 3
    5b70:	be 01       	movw	r22, r28
    5b72:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <getbit>
    5b76:	01 97       	sbiw	r24, 0x01	; 1
    5b78:	a1 f7       	brne	.-24     	; 0x5b62 <countVectorFlash+0x12>
        {
            count++;
    5b7a:	0f 5f       	subi	r16, 0xFF	; 255
    5b7c:	1f 4f       	sbci	r17, 0xFF	; 255
int countVectorFlash()
{
    int count, num;

    count = 0;
    for (num = 0; num < 256; num++)
    5b7e:	21 96       	adiw	r28, 0x01	; 1
    5b80:	81 e0       	ldi	r24, 0x01	; 1
    5b82:	c0 30       	cpi	r28, 0x00	; 0
    5b84:	d8 07       	cpc	r29, r24
    5b86:	91 f7       	brne	.-28     	; 0x5b6c <countVectorFlash+0x1c>
    5b88:	9e 01       	movw	r18, r28
    5b8a:	20 1b       	sub	r18, r16
    5b8c:	31 0b       	sbc	r19, r17
        {
            count++;
        }
    }
    return 256 - count;
}
    5b8e:	c9 01       	movw	r24, r18
    5b90:	df 91       	pop	r29
    5b92:	cf 91       	pop	r28
    5b94:	1f 91       	pop	r17
    5b96:	0f 91       	pop	r16
    5b98:	08 95       	ret

00005b9a <printVectorFlash>:
        else
        {
            data[i] = 1;
        }
    }
}
    5b9a:	08 95       	ret

00005b9c <scanVectorFlash>:
    return -1;
}

//-------------------------------------------------------------------------
void scanVectorFlash()
{
    5b9c:	ef 92       	push	r14
    5b9e:	ff 92       	push	r15
    5ba0:	1f 93       	push	r17
    5ba2:	cf 93       	push	r28
    5ba4:	df 93       	push	r29
    5ba6:	80 e0       	ldi	r24, 0x00	; 0
    5ba8:	90 e0       	ldi	r25, 0x00	; 0
    5baa:	04 c0       	rjmp	.+8      	; 0x5bb4 <scanVectorFlash+0x18>
        type = fsread8uint(addr, TYPEOFFSET);
        if ((valid == 1) && (type == FILENODE))
        {
            char i;

            for (i = 0; i < 8; i++)
    5bac:	c7 01       	movw	r24, r14
    int num, addr;
    uint8_t valid;
    uint8_t type;
    uint8_t readpage;

    for (num = 0; num < 96; num++)
    5bae:	80 36       	cpi	r24, 0x60	; 96
    5bb0:	91 05       	cpc	r25, r1
    5bb2:	59 f1       	breq	.+86     	; 0x5c0a <scanVectorFlash+0x6e>
    {
        addr = num + 1;
    5bb4:	7c 01       	movw	r14, r24
    5bb6:	08 94       	sec
    5bb8:	e1 1c       	adc	r14, r1
    5bba:	f1 1c       	adc	r15, r1
        valid = fsread8uint(addr, VALIDOFFSET);
    5bbc:	c7 01       	movw	r24, r14
    5bbe:	6d e0       	ldi	r22, 0x0D	; 13
    5bc0:	70 e0       	ldi	r23, 0x00	; 0
    5bc2:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    5bc6:	18 2f       	mov	r17, r24
        type = fsread8uint(addr, TYPEOFFSET);
    5bc8:	c7 01       	movw	r24, r14
    5bca:	6c e0       	ldi	r22, 0x0C	; 12
    5bcc:	70 e0       	ldi	r23, 0x00	; 0
    5bce:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
        if ((valid == 1) && (type == FILENODE))
    5bd2:	11 30       	cpi	r17, 0x01	; 1
    5bd4:	59 f7       	brne	.-42     	; 0x5bac <scanVectorFlash+0x10>
    5bd6:	82 30       	cpi	r24, 0x02	; 2
    5bd8:	49 f7       	brne	.-46     	; 0x5bac <scanVectorFlash+0x10>
    5bda:	ce e0       	ldi	r28, 0x0E	; 14
    5bdc:	d0 e0       	ldi	r29, 0x00	; 0
    5bde:	04 c0       	rjmp	.+8      	; 0x5be8 <scanVectorFlash+0x4c>
            for (i = 0; i < 8; i++)
            {
                readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
                if (readpage > 0)
                {
                    setbit(vectorflash, readpage - 1, 1);
    5be0:	21 96       	adiw	r28, 0x01	; 1
        type = fsread8uint(addr, TYPEOFFSET);
        if ((valid == 1) && (type == FILENODE))
        {
            char i;

            for (i = 0; i < 8; i++)
    5be2:	c6 31       	cpi	r28, 0x16	; 22
    5be4:	d1 05       	cpc	r29, r1
    5be6:	11 f3       	breq	.-60     	; 0x5bac <scanVectorFlash+0x10>
            {
                readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    5be8:	c7 01       	movw	r24, r14
    5bea:	be 01       	movw	r22, r28
    5bec:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
                if (readpage > 0)
    5bf0:	88 23       	and	r24, r24
    5bf2:	b1 f3       	breq	.-20     	; 0x5be0 <scanVectorFlash+0x44>
                {
                    setbit(vectorflash, readpage - 1, 1);
    5bf4:	68 2f       	mov	r22, r24
    5bf6:	70 e0       	ldi	r23, 0x00	; 0
    5bf8:	61 50       	subi	r22, 0x01	; 1
    5bfa:	70 40       	sbci	r23, 0x00	; 0
    5bfc:	86 e7       	ldi	r24, 0x76	; 118
    5bfe:	93 e0       	ldi	r25, 0x03	; 3
    5c00:	41 e0       	ldi	r20, 0x01	; 1
    5c02:	50 e0       	ldi	r21, 0x00	; 0
    5c04:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <setbit>
    5c08:	eb cf       	rjmp	.-42     	; 0x5be0 <scanVectorFlash+0x44>
                }
            }
        }
    }
}
    5c0a:	df 91       	pop	r29
    5c0c:	cf 91       	pop	r28
    5c0e:	1f 91       	pop	r17
    5c10:	ff 90       	pop	r15
    5c12:	ef 90       	pop	r14
    5c14:	08 95       	ret

00005c16 <readVectorFlashFromExternalStorage>:

//-------------------------------------------------------------------------
void readVectorFlashFromExternalStorage()
{
#ifdef PLATFORM_AVR
    genericreadBytes(FLASHVECTORSTART, 32, vectorflash);
    5c16:	8e e4       	ldi	r24, 0x4E	; 78
    5c18:	9c e0       	ldi	r25, 0x0C	; 12
    5c1a:	60 e2       	ldi	r22, 0x20	; 32
    5c1c:	70 e0       	ldi	r23, 0x00	; 0
    5c1e:	46 e7       	ldi	r20, 0x76	; 118
    5c20:	53 e0       	ldi	r21, 0x03	; 3
    5c22:	0e 94 66 1d 	call	0x3acc	; 0x3acc <genericreadBytes>
#endif
}
    5c26:	08 95       	ret

00005c28 <writeVectorFlashToExternalStorage>:
static char vectorflash[32];

void writeVectorFlashToExternalStorage()
{
#ifdef PLATFORM_AVR
    genericwriteBytes(FLASHVECTORSTART, 32, vectorflash);
    5c28:	8e e4       	ldi	r24, 0x4E	; 78
    5c2a:	9c e0       	ldi	r25, 0x0C	; 12
    5c2c:	60 e2       	ldi	r22, 0x20	; 32
    5c2e:	70 e0       	ldi	r23, 0x00	; 0
    5c30:	46 e7       	ldi	r20, 0x76	; 118
    5c32:	53 e0       	ldi	r21, 0x03	; 3
    5c34:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <genericwriteBytes>
#endif
}
    5c38:	08 95       	ret

00005c3a <getbit>:
    genericwriteBytes(EEPROMVECTORSTART, 12, vectornode);
}

//-------------------------------------------------------------------------
int getbit(char *set, int number)
{
    5c3a:	ac 01       	movw	r20, r24
    5c3c:	fb 01       	movw	r30, r22
    5c3e:	77 fd       	sbrc	r23, 7
    5c40:	1a c0       	rjmp	.+52     	; 0x5c76 <getbit+0x3c>
    5c42:	f5 95       	asr	r31
    5c44:	e7 95       	ror	r30
    5c46:	f5 95       	asr	r31
    5c48:	e7 95       	ror	r30
    5c4a:	f5 95       	asr	r31
    5c4c:	e7 95       	ror	r30
    5c4e:	e4 0f       	add	r30, r20
    5c50:	f5 1f       	adc	r31, r21
    5c52:	20 81       	ld	r18, Z
    5c54:	33 27       	eor	r19, r19
    5c56:	27 fd       	sbrc	r18, 7
    5c58:	30 95       	com	r19
    5c5a:	cb 01       	movw	r24, r22
    5c5c:	68 e0       	ldi	r22, 0x08	; 8
    5c5e:	70 e0       	ldi	r23, 0x00	; 0
    5c60:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    5c64:	02 c0       	rjmp	.+4      	; 0x5c6a <getbit+0x30>
    5c66:	35 95       	asr	r19
    5c68:	27 95       	ror	r18
    5c6a:	8a 95       	dec	r24
    5c6c:	e2 f7       	brpl	.-8      	; 0x5c66 <getbit+0x2c>
    5c6e:	21 70       	andi	r18, 0x01	; 1
    5c70:	30 70       	andi	r19, 0x00	; 0
    set += number / 8;
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
}
    5c72:	c9 01       	movw	r24, r18
    5c74:	08 95       	ret
    genericwriteBytes(EEPROMVECTORSTART, 12, vectornode);
}

//-------------------------------------------------------------------------
int getbit(char *set, int number)
{
    5c76:	37 96       	adiw	r30, 0x07	; 7
    5c78:	e4 cf       	rjmp	.-56     	; 0x5c42 <getbit+0x8>

00005c7a <setbit>:
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
}

//-------------------------------------------------------------------------
void setbit(char *set, int number, int value)
{
    5c7a:	dc 01       	movw	r26, r24
    set += number / 8;
    5c7c:	9b 01       	movw	r18, r22
    5c7e:	77 fd       	sbrc	r23, 7
    5c80:	2c c0       	rjmp	.+88     	; 0x5cda <setbit+0x60>
    5c82:	f9 01       	movw	r30, r18
    5c84:	f5 95       	asr	r31
    5c86:	e7 95       	ror	r30
    5c88:	f5 95       	asr	r31
    5c8a:	e7 95       	ror	r30
    5c8c:	f5 95       	asr	r31
    5c8e:	e7 95       	ror	r30
    5c90:	ea 0f       	add	r30, r26
    5c92:	fb 1f       	adc	r31, r27
    if (value)
    5c94:	45 2b       	or	r20, r21
    5c96:	89 f4       	brne	.+34     	; 0x5cba <setbit+0x40>
    {
        *set |= 1 << (number % 8);
    }                           /* set bit      */
    else
    {
        *set &= ~(1 << (number % 8));
    5c98:	cb 01       	movw	r24, r22
    5c9a:	68 e0       	ldi	r22, 0x08	; 8
    5c9c:	70 e0       	ldi	r23, 0x00	; 0
    5c9e:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    5ca2:	21 e0       	ldi	r18, 0x01	; 1
    5ca4:	30 e0       	ldi	r19, 0x00	; 0
    5ca6:	02 c0       	rjmp	.+4      	; 0x5cac <setbit+0x32>
    5ca8:	22 0f       	add	r18, r18
    5caa:	33 1f       	adc	r19, r19
    5cac:	8a 95       	dec	r24
    5cae:	e2 f7       	brpl	.-8      	; 0x5ca8 <setbit+0x2e>
    5cb0:	20 95       	com	r18
    5cb2:	80 81       	ld	r24, Z
    5cb4:	82 23       	and	r24, r18
    5cb6:	80 83       	st	Z, r24
    5cb8:	08 95       	ret
void setbit(char *set, int number, int value)
{
    set += number / 8;
    if (value)
    {
        *set |= 1 << (number % 8);
    5cba:	cb 01       	movw	r24, r22
    5cbc:	68 e0       	ldi	r22, 0x08	; 8
    5cbe:	70 e0       	ldi	r23, 0x00	; 0
    5cc0:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    5cc4:	21 e0       	ldi	r18, 0x01	; 1
    5cc6:	30 e0       	ldi	r19, 0x00	; 0
    5cc8:	02 c0       	rjmp	.+4      	; 0x5cce <setbit+0x54>
    5cca:	22 0f       	add	r18, r18
    5ccc:	33 1f       	adc	r19, r19
    5cce:	8a 95       	dec	r24
    5cd0:	e2 f7       	brpl	.-8      	; 0x5cca <setbit+0x50>
    5cd2:	80 81       	ld	r24, Z
    5cd4:	82 2b       	or	r24, r18
    5cd6:	80 83       	st	Z, r24
    5cd8:	08 95       	ret
}

//-------------------------------------------------------------------------
void setbit(char *set, int number, int value)
{
    set += number / 8;
    5cda:	29 5f       	subi	r18, 0xF9	; 249
    5cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    5cde:	d1 cf       	rjmp	.-94     	; 0x5c82 <setbit+0x8>

00005ce0 <initVectorNode>:
    }                           /* clear bit    */
}

//-------------------------------------------------------------------------
void initVectorNode()
{
    5ce0:	ea ec       	ldi	r30, 0xCA	; 202
    5ce2:	f5 e0       	ldi	r31, 0x05	; 5
    int i;

    for (i = 0; i < 12; i++)
    {
        vectornode[i] = 0;
    5ce4:	11 92       	st	Z+, r1
//-------------------------------------------------------------------------
void initVectorNode()
{
    int i;

    for (i = 0; i < 12; i++)
    5ce6:	85 e0       	ldi	r24, 0x05	; 5
    5ce8:	e6 3d       	cpi	r30, 0xD6	; 214
    5cea:	f8 07       	cpc	r31, r24
    5cec:	d9 f7       	brne	.-10     	; 0x5ce4 <initVectorNode+0x4>
    {
        vectornode[i] = 0;
    }
}
    5cee:	08 95       	ret

00005cf0 <getVectorNode>:

//-------------------------------------------------------------------------
int getVectorNode()
{
    5cf0:	cf 93       	push	r28
    5cf2:	df 93       	push	r29
    5cf4:	c0 e0       	ldi	r28, 0x00	; 0
    5cf6:	d0 e0       	ldi	r29, 0x00	; 0
    5cf8:	04 c0       	rjmp	.+8      	; 0x5d02 <getVectorNode+0x12>
    int num;

    for (num = 0; num < 96; num++)
    5cfa:	21 96       	adiw	r28, 0x01	; 1
    5cfc:	c0 36       	cpi	r28, 0x60	; 96
    5cfe:	d1 05       	cpc	r29, r1
    5d00:	a9 f0       	breq	.+42     	; 0x5d2c <getVectorNode+0x3c>
    {
        if (getbit(vectornode, num) == 0)
    5d02:	8a ec       	ldi	r24, 0xCA	; 202
    5d04:	95 e0       	ldi	r25, 0x05	; 5
    5d06:	be 01       	movw	r22, r28
    5d08:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <getbit>
    5d0c:	89 2b       	or	r24, r25
    5d0e:	a9 f7       	brne	.-22     	; 0x5cfa <getVectorNode+0xa>
        {
            setbit(vectornode, num, 1);
    5d10:	8a ec       	ldi	r24, 0xCA	; 202
    5d12:	95 e0       	ldi	r25, 0x05	; 5
    5d14:	be 01       	movw	r22, r28
    5d16:	41 e0       	ldi	r20, 0x01	; 1
    5d18:	50 e0       	ldi	r21, 0x00	; 0
    5d1a:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <setbit>
            return num + 1;
    5d1e:	be 01       	movw	r22, r28
    5d20:	6f 5f       	subi	r22, 0xFF	; 255
    5d22:	7f 4f       	sbci	r23, 0xFF	; 255
        }
    }
    return -1;
}
    5d24:	cb 01       	movw	r24, r22
    5d26:	df 91       	pop	r29
    5d28:	cf 91       	pop	r28
    5d2a:	08 95       	ret
//-------------------------------------------------------------------------
int getVectorNode()
{
    int num;

    for (num = 0; num < 96; num++)
    5d2c:	6f ef       	ldi	r22, 0xFF	; 255
    5d2e:	7f ef       	ldi	r23, 0xFF	; 255
            setbit(vectornode, num, 1);
            return num + 1;
        }
    }
    return -1;
}
    5d30:	cb 01       	movw	r24, r22
    5d32:	df 91       	pop	r29
    5d34:	cf 91       	pop	r28
    5d36:	08 95       	ret

00005d38 <releaseVectorNode>:
}

//-------------------------------------------------------------------------
void releaseVectorNode(int num)
{
    setbit(vectornode, num - 1, 0);
    5d38:	bc 01       	movw	r22, r24
    5d3a:	61 50       	subi	r22, 0x01	; 1
    5d3c:	70 40       	sbci	r23, 0x00	; 0
    5d3e:	8a ec       	ldi	r24, 0xCA	; 202
    5d40:	95 e0       	ldi	r25, 0x05	; 5
    5d42:	40 e0       	ldi	r20, 0x00	; 0
    5d44:	50 e0       	ldi	r21, 0x00	; 0
    5d46:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <setbit>
}
    5d4a:	08 95       	ret

00005d4c <countVectorNode>:

//-------------------------------------------------------------------------
int countVectorNode()
{
    5d4c:	0f 93       	push	r16
    5d4e:	1f 93       	push	r17
    5d50:	cf 93       	push	r28
    5d52:	df 93       	push	r29
    5d54:	c0 e0       	ldi	r28, 0x00	; 0
    5d56:	d0 e0       	ldi	r29, 0x00	; 0
    5d58:	00 e0       	ldi	r16, 0x00	; 0
    5d5a:	10 e0       	ldi	r17, 0x00	; 0
    5d5c:	04 c0       	rjmp	.+8      	; 0x5d66 <countVectorNode+0x1a>
    int num, count;

    count = 0;
    for (num = 0; num < 96; num++)
    5d5e:	21 96       	adiw	r28, 0x01	; 1
    5d60:	c0 36       	cpi	r28, 0x60	; 96
    5d62:	d1 05       	cpc	r29, r1
    5d64:	69 f0       	breq	.+26     	; 0x5d80 <countVectorNode+0x34>
    {
        if (getbit(vectornode, num) == 1)
    5d66:	8a ec       	ldi	r24, 0xCA	; 202
    5d68:	95 e0       	ldi	r25, 0x05	; 5
    5d6a:	be 01       	movw	r22, r28
    5d6c:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <getbit>
    5d70:	01 97       	sbiw	r24, 0x01	; 1
    5d72:	a9 f7       	brne	.-22     	; 0x5d5e <countVectorNode+0x12>
        {
            count++;
    5d74:	0f 5f       	subi	r16, 0xFF	; 255
    5d76:	1f 4f       	sbci	r17, 0xFF	; 255
int countVectorNode()
{
    int num, count;

    count = 0;
    for (num = 0; num < 96; num++)
    5d78:	21 96       	adiw	r28, 0x01	; 1
    5d7a:	c0 36       	cpi	r28, 0x60	; 96
    5d7c:	d1 05       	cpc	r29, r1
    5d7e:	99 f7       	brne	.-26     	; 0x5d66 <countVectorNode+0x1a>
    5d80:	9e 01       	movw	r18, r28
    5d82:	20 1b       	sub	r18, r16
    5d84:	31 0b       	sbc	r19, r17
        {
            count++;
        }
    }
    return 96 - count;
}
    5d86:	c9 01       	movw	r24, r18
    5d88:	df 91       	pop	r29
    5d8a:	cf 91       	pop	r28
    5d8c:	1f 91       	pop	r17
    5d8e:	0f 91       	pop	r16
    5d90:	08 95       	ret

00005d92 <scanVectorNode>:
    return -1;
}

//-------------------------------------------------------------------------
void scanVectorNode()
{
    5d92:	0f 93       	push	r16
    5d94:	1f 93       	push	r17
    5d96:	cf 93       	push	r28
    5d98:	df 93       	push	r29
    5d9a:	c0 e0       	ldi	r28, 0x00	; 0
    5d9c:	d0 e0       	ldi	r29, 0x00	; 0
    5d9e:	0b c0       	rjmp	.+22     	; 0x5db6 <scanVectorNode+0x24>
    {
        addr = num + 1;
        valid = fsread8uint(addr, VALIDOFFSET);
        if (valid == 0)
        {
            setbit(vectornode, num, 0);
    5da0:	8a ec       	ldi	r24, 0xCA	; 202
    5da2:	95 e0       	ldi	r25, 0x05	; 5
    5da4:	be 01       	movw	r22, r28
    5da6:	40 e0       	ldi	r20, 0x00	; 0
    5da8:	50 e0       	ldi	r21, 0x00	; 0
    5daa:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <setbit>
        }
        else
        {
            setbit(vectornode, num, 1);
    5dae:	e8 01       	movw	r28, r16
void scanVectorNode()
{
    int num, addr;
    uint8_t valid;

    for (num = 0; num < 96; num++)
    5db0:	00 36       	cpi	r16, 0x60	; 96
    5db2:	11 05       	cpc	r17, r1
    5db4:	a9 f0       	breq	.+42     	; 0x5de0 <scanVectorNode+0x4e>
    {
        addr = num + 1;
    5db6:	8e 01       	movw	r16, r28
    5db8:	0f 5f       	subi	r16, 0xFF	; 255
    5dba:	1f 4f       	sbci	r17, 0xFF	; 255
        valid = fsread8uint(addr, VALIDOFFSET);
    5dbc:	c8 01       	movw	r24, r16
    5dbe:	6d e0       	ldi	r22, 0x0D	; 13
    5dc0:	70 e0       	ldi	r23, 0x00	; 0
    5dc2:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
        if (valid == 0)
    5dc6:	88 23       	and	r24, r24
    5dc8:	59 f3       	breq	.-42     	; 0x5da0 <scanVectorNode+0xe>
        {
            setbit(vectornode, num, 0);
        }
        else
        {
            setbit(vectornode, num, 1);
    5dca:	8a ec       	ldi	r24, 0xCA	; 202
    5dcc:	95 e0       	ldi	r25, 0x05	; 5
    5dce:	be 01       	movw	r22, r28
    5dd0:	41 e0       	ldi	r20, 0x01	; 1
    5dd2:	50 e0       	ldi	r21, 0x00	; 0
    5dd4:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <setbit>
    5dd8:	e8 01       	movw	r28, r16
void scanVectorNode()
{
    int num, addr;
    uint8_t valid;

    for (num = 0; num < 96; num++)
    5dda:	00 36       	cpi	r16, 0x60	; 96
    5ddc:	11 05       	cpc	r17, r1
    5dde:	59 f7       	brne	.-42     	; 0x5db6 <scanVectorNode+0x24>
        else
        {
            setbit(vectornode, num, 1);
        }
    }
}
    5de0:	df 91       	pop	r29
    5de2:	cf 91       	pop	r28
    5de4:	1f 91       	pop	r17
    5de6:	0f 91       	pop	r16
    5de8:	08 95       	ret

00005dea <readVectorNodeFromExternalStorage>:
}

//-------------------------------------------------------------------------
void readVectorNodeFromExternalStorage()
{
    genericwriteBytes(EEPROMVECTORSTART, 12, vectornode);
    5dea:	82 e4       	ldi	r24, 0x42	; 66
    5dec:	9c e0       	ldi	r25, 0x0C	; 12
    5dee:	6c e0       	ldi	r22, 0x0C	; 12
    5df0:	70 e0       	ldi	r23, 0x00	; 0
    5df2:	4a ec       	ldi	r20, 0xCA	; 202
    5df4:	55 e0       	ldi	r21, 0x05	; 5
    5df6:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <genericwriteBytes>
}
    5dfa:	08 95       	ret

00005dfc <writeVectorNodeToExternalStorage>:
#include "storageconstants.h"

char vectornode[12];
void writeVectorNodeToExternalStorage()
{
    genericreadBytes(EEPROMVECTORSTART, 12, vectornode);
    5dfc:	82 e4       	ldi	r24, 0x42	; 66
    5dfe:	9c e0       	ldi	r25, 0x0C	; 12
    5e00:	6c e0       	ldi	r22, 0x0C	; 12
    5e02:	70 e0       	ldi	r23, 0x00	; 0
    5e04:	4a ec       	ldi	r20, 0xCA	; 202
    5e06:	55 e0       	ldi	r21, 0x05	; 5
    5e08:	0e 94 66 1d 	call	0x3acc	; 0x3acc <genericreadBytes>
}
    5e0c:	08 95       	ret

00005e0e <atmel_flash_init>:
/* device-specific functions */
void atmel_flash_init(void)
{
    uint8_t sreg;

    sreg = SREG;
    5e0e:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5e10:	f8 94       	cli
    // set the flash select pin
    DDRA |= 1 << ATMEL_FLASH_SELECT_PIN;
    5e12:	d3 9a       	sbi	0x1a, 3	; 26
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    5e14:	db 9a       	sbi	0x1b, 3	; 27
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    5e16:	95 98       	cbi	0x12, 5	; 18
    // set flash clock output direction
    ATMEL_FLASH_DIRE |= 1 << ATMEL_FLASH_CLK;
    5e18:	8d 9a       	sbi	0x11, 5	; 17
    // clear flash out pin
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_OUT);
    5e1a:	92 98       	cbi	0x12, 2	; 18
    // set flash out pin direction
    ATMEL_FLASH_DIRE &= ~(1 << ATMEL_FLASH_OUT);
    5e1c:	8a 98       	cbi	0x11, 2	; 17
    // clear flash in pin
    ATMEL_FLASH_PORT |= 1 << ATMEL_FLASH_IN;
    5e1e:	93 9a       	sbi	0x12, 3	; 18
    // set flash in pin direction
    ATMEL_FLASH_DIRE |= 1 << ATMEL_FLASH_IN;
    5e20:	8b 9a       	sbi	0x11, 3	; 17
    SREG = sreg;
    5e22:	8f bf       	out	0x3f, r24	; 63
    atmel_flash_addr = 0;
    5e24:	10 92 96 03 	sts	0x0396, r1
    5e28:	10 92 97 03 	sts	0x0397, r1
    5e2c:	10 92 98 03 	sts	0x0398, r1
    5e30:	10 92 99 03 	sts	0x0399, r1
    cur_buff = ATMEL_FLASH_BUFFER_1;
    5e34:	21 e0       	ldi	r18, 0x01	; 1
    5e36:	20 93 9a 03 	sts	0x039A, r18
    cur_page = ATMEL_FLASH_MAX_PAGES;
    5e3a:	80 e0       	ldi	r24, 0x00	; 0
    5e3c:	98 e0       	ldi	r25, 0x08	; 8
    5e3e:	90 93 9c 03 	sts	0x039C, r25
    5e42:	80 93 9b 03 	sts	0x039B, r24
    dirty = 0;
    5e46:	10 92 9d 03 	sts	0x039D, r1
    initdone = 1;
    5e4a:	20 93 9e 03 	sts	0x039E, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5e4e:	80 e4       	ldi	r24, 0x40	; 64
    5e50:	9c e9       	ldi	r25, 0x9C	; 156
    5e52:	01 97       	sbiw	r24, 0x01	; 1
    5e54:	f1 f7       	brne	.-4      	; 0x5e52 <atmel_flash_init+0x44>
    _delay_ms(20);
}
    5e56:	08 95       	ret

00005e58 <atmel_flash_get_byte>:
static uint8_t atmel_flash_get_byte(void)
{
    uint8_t spiIn = 0;
    uint8_t sreg;

    sreg = SREG;
    5e58:	2f b7       	in	r18, 0x3f	; 63
    cli();
    5e5a:	f8 94       	cli
    BITINIT;
    5e5c:	92 b3       	in	r25, 0x12	; 18
    5e5e:	97 7d       	andi	r25, 0xD7	; 215
    READBIT(7);
    5e60:	92 bb       	out	0x12, r25	; 18
    5e62:	80 e0       	ldi	r24, 0x00	; 0
    5e64:	95 9a       	sbi	0x12, 5	; 18
    5e66:	82 99       	sbic	0x10, 2	; 16
    5e68:	80 68       	ori	r24, 0x80	; 128
    READBIT(6);
    5e6a:	92 bb       	out	0x12, r25	; 18
    5e6c:	95 9a       	sbi	0x12, 5	; 18
    5e6e:	82 99       	sbic	0x10, 2	; 16
    5e70:	80 64       	ori	r24, 0x40	; 64
    READBIT(5);
    5e72:	92 bb       	out	0x12, r25	; 18
    5e74:	95 9a       	sbi	0x12, 5	; 18
    5e76:	82 99       	sbic	0x10, 2	; 16
    5e78:	80 62       	ori	r24, 0x20	; 32
    READBIT(4);
    5e7a:	92 bb       	out	0x12, r25	; 18
    5e7c:	95 9a       	sbi	0x12, 5	; 18
    5e7e:	82 99       	sbic	0x10, 2	; 16
    5e80:	80 61       	ori	r24, 0x10	; 16
    READBIT(3);
    5e82:	92 bb       	out	0x12, r25	; 18
    5e84:	95 9a       	sbi	0x12, 5	; 18
    5e86:	82 99       	sbic	0x10, 2	; 16
    5e88:	88 60       	ori	r24, 0x08	; 8
    READBIT(2);
    5e8a:	92 bb       	out	0x12, r25	; 18
    5e8c:	95 9a       	sbi	0x12, 5	; 18
    5e8e:	82 99       	sbic	0x10, 2	; 16
    5e90:	84 60       	ori	r24, 0x04	; 4
    READBIT(1);
    5e92:	92 bb       	out	0x12, r25	; 18
    5e94:	95 9a       	sbi	0x12, 5	; 18
    5e96:	82 99       	sbic	0x10, 2	; 16
    5e98:	82 60       	ori	r24, 0x02	; 2
    READBIT(0);
    5e9a:	92 bb       	out	0x12, r25	; 18
    5e9c:	95 9a       	sbi	0x12, 5	; 18
    5e9e:	82 99       	sbic	0x10, 2	; 16
    5ea0:	81 60       	ori	r24, 0x01	; 1
    SREG = sreg;
    5ea2:	2f bf       	out	0x3f, r18	; 63
    return spiIn;
}
    5ea4:	08 95       	ret

00005ea6 <atmel_flash_send_byte>:

/** @brief Send 1 byte of data from the external flash.
*/
static uint8_t atmel_flash_send_byte(uint8_t spiOut)
{
    5ea6:	28 2f       	mov	r18, r24
    uint8_t spiIn = 0;
    uint8_t sreg;

    sreg = SREG;
    5ea8:	3f b7       	in	r19, 0x3f	; 63
    cli();
    5eaa:	f8 94       	cli
    BITINIT;
    5eac:	92 b3       	in	r25, 0x12	; 18
    5eae:	97 7d       	andi	r25, 0xD7	; 215
    WRITEBIT(7);
    5eb0:	92 bb       	out	0x12, r25	; 18
    5eb2:	80 e0       	ldi	r24, 0x00	; 0
    5eb4:	27 fd       	sbrc	r18, 7
    5eb6:	93 9a       	sbi	0x12, 3	; 18
    5eb8:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(6);
    5eba:	92 bb       	out	0x12, r25	; 18
    5ebc:	26 fd       	sbrc	r18, 6
    5ebe:	93 9a       	sbi	0x12, 3	; 18
    5ec0:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(5);
    5ec2:	92 bb       	out	0x12, r25	; 18
    5ec4:	25 fd       	sbrc	r18, 5
    5ec6:	93 9a       	sbi	0x12, 3	; 18
    5ec8:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(4);
    5eca:	92 bb       	out	0x12, r25	; 18
    5ecc:	24 fd       	sbrc	r18, 4
    5ece:	93 9a       	sbi	0x12, 3	; 18
    5ed0:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(3);
    5ed2:	92 bb       	out	0x12, r25	; 18
    5ed4:	23 fd       	sbrc	r18, 3
    5ed6:	93 9a       	sbi	0x12, 3	; 18
    5ed8:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(2);
    5eda:	92 bb       	out	0x12, r25	; 18
    5edc:	22 fd       	sbrc	r18, 2
    5ede:	93 9a       	sbi	0x12, 3	; 18
    5ee0:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(1);
    5ee2:	92 bb       	out	0x12, r25	; 18
    5ee4:	21 fd       	sbrc	r18, 1
    5ee6:	93 9a       	sbi	0x12, 3	; 18
    5ee8:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(0);
    5eea:	92 bb       	out	0x12, r25	; 18
    5eec:	20 fd       	sbrc	r18, 0
    5eee:	93 9a       	sbi	0x12, 3	; 18
    5ef0:	95 9a       	sbi	0x12, 5	; 18
    SREG = sreg;
    5ef2:	3f bf       	out	0x3f, r19	; 63
    return spiIn;
}
    5ef4:	08 95       	ret

00005ef6 <atmel_flash_pagesize>:

//-------------------------------------------------------------------------
inline uint16_t atmel_flash_pagesize()
{
    return 256;
}
    5ef6:	80 e0       	ldi	r24, 0x00	; 0
    5ef8:	91 e0       	ldi	r25, 0x01	; 1
    5efa:	08 95       	ret

00005efc <atmel_flash_pagenumber>:

//-------------------------------------------------------------------------
inline uint16_t atmel_flash_pagenumber()
{
    return 2048;
}
    5efc:	80 e0       	ldi	r24, 0x00	; 0
    5efe:	98 e0       	ldi	r25, 0x08	; 8
    5f00:	08 95       	ret

00005f02 <atmel_flash_busy>:
* A little bit slower than simply holding the clk low, But
* easier
* @return TRUE if busy, else return FALSE
*/
static uint8_t atmel_flash_busy(void)
{
    5f02:	0f 93       	push	r16
    5f04:	1f 93       	push	r17
    uint8_t status;
    _atomic_t _atomic = _atomic_start();
    5f06:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    5f0a:	08 2f       	mov	r16, r24
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    5f0c:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5f0e:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    5f10:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    5f12:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    5f14:	8f bf       	out	0x3f, r24	; 63
{
    uint8_t status;
    _atomic_t _atomic = _atomic_start();

    atmel_flash_low();
    atmel_flash_send_byte(C_REQ_STATUS);
    5f16:	87 ed       	ldi	r24, 0xD7	; 215
    5f18:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <atmel_flash_send_byte>
    //SEND d7h, op code for register request
    status = atmel_flash_get_byte();
    5f1c:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <atmel_flash_get_byte>
    5f20:	18 2f       	mov	r17, r24
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    5f22:	db 9a       	sbi	0x1b, 3	; 27
    atmel_flash_send_byte(C_REQ_STATUS);
    //SEND d7h, op code for register request
    status = atmel_flash_get_byte();
    atmel_flash_high();
    status &= 0x80;
    _atomic_end(_atomic);
    5f24:	80 2f       	mov	r24, r16
    5f26:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    5f2a:	11 1f       	adc	r17, r17
    5f2c:	11 27       	eor	r17, r17
    5f2e:	11 1f       	adc	r17, r17
    {
        return TRUE;
    }

    return FALSE;
}
    5f30:	81 e0       	ldi	r24, 0x01	; 1
    5f32:	81 27       	eor	r24, r17
    5f34:	1f 91       	pop	r17
    5f36:	0f 91       	pop	r16
    5f38:	08 95       	ret

00005f3a <atmel_flash_write_buffer>:
* @param len Length of data
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_write_buffer(uint8_t selected, uint16_t offset,
                                        void *reqdata, uint16_t len)
{
    5f3a:	af 92       	push	r10
    5f3c:	bf 92       	push	r11
    5f3e:	cf 92       	push	r12
    5f40:	df 92       	push	r13
    5f42:	ef 92       	push	r14
    5f44:	ff 92       	push	r15
    5f46:	0f 93       	push	r16
    5f48:	1f 93       	push	r17
    5f4a:	df 93       	push	r29
    5f4c:	cf 93       	push	r28
    5f4e:	00 d0       	rcall	.+0      	; 0x5f50 <atmel_flash_write_buffer+0x16>
    5f50:	00 d0       	rcall	.+0      	; 0x5f52 <atmel_flash_write_buffer+0x18>
    5f52:	cd b7       	in	r28, 0x3d	; 61
    5f54:	de b7       	in	r29, 0x3e	; 62
    5f56:	5a 01       	movw	r10, r20
    5f58:	69 01       	movw	r12, r18
    uint8_t cmd[4], *reqPtr;
    uint16_t i;

    if (selected == 1)
    5f5a:	81 30       	cpi	r24, 0x01	; 1
    5f5c:	d9 f1       	breq	.+118    	; 0x5fd4 <atmel_flash_write_buffer+0x9a>
    {
        cmd[0] = C_WRITE_BUFFER1;
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_WRITE_BUFFER2;
    5f5e:	87 e8       	ldi	r24, 0x87	; 135
    5f60:	89 83       	std	Y+1, r24	; 0x01
    }                           // 8 bit of op code
    cmd[1] = 0x00;              // 8 bit don't care code
    5f62:	1a 82       	std	Y+2, r1	; 0x02
    cmd[2] = offset >> 8;       // 7 bit don't care code with 1 bit address
    5f64:	7b 83       	std	Y+3, r23	; 0x03
    cmd[3] = offset;            // low-order 8 address bits
    5f66:	6c 83       	std	Y+4, r22	; 0x04
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    5f68:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5f6a:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    5f6c:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    5f6e:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    5f70:	8f bf       	out	0x3f, r24	; 63
    5f72:	8e 01       	movw	r16, r28
    5f74:	0f 5f       	subi	r16, 0xFF	; 255
    5f76:	1f 4f       	sbci	r17, 0xFF	; 255
    5f78:	85 e0       	ldi	r24, 0x05	; 5
    5f7a:	e8 2e       	mov	r14, r24
    5f7c:	f1 2c       	mov	r15, r1
    5f7e:	ec 0e       	add	r14, r28
    5f80:	fd 1e       	adc	r15, r29
    reqPtr = (uint8_t *) reqdata;
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    5f82:	f8 01       	movw	r30, r16
    5f84:	81 91       	ld	r24, Z+
    5f86:	8f 01       	movw	r16, r30
    5f88:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <atmel_flash_send_byte>
    cmd[2] = offset >> 8;       // 7 bit don't care code with 1 bit address
    cmd[3] = offset;            // low-order 8 address bits
    reqPtr = (uint8_t *) reqdata;
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    5f8c:	0e 15       	cp	r16, r14
    5f8e:	1f 05       	cpc	r17, r15
    5f90:	c1 f7       	brne	.-16     	; 0x5f82 <atmel_flash_write_buffer+0x48>
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    5f92:	c1 14       	cp	r12, r1
    5f94:	d1 04       	cpc	r13, r1
    5f96:	69 f0       	breq	.+26     	; 0x5fb2 <atmel_flash_write_buffer+0x78>
    5f98:	00 e0       	ldi	r16, 0x00	; 0
    5f9a:	10 e0       	ldi	r17, 0x00	; 0
    {
        atmel_flash_send_byte(reqPtr[i]);
    5f9c:	f5 01       	movw	r30, r10
    5f9e:	e0 0f       	add	r30, r16
    5fa0:	f1 1f       	adc	r31, r17
    5fa2:	80 81       	ld	r24, Z
    5fa4:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <atmel_flash_send_byte>
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    5fa8:	0f 5f       	subi	r16, 0xFF	; 255
    5faa:	1f 4f       	sbci	r17, 0xFF	; 255
    5fac:	0c 15       	cp	r16, r12
    5fae:	1d 05       	cpc	r17, r13
    5fb0:	a8 f3       	brcs	.-22     	; 0x5f9c <atmel_flash_write_buffer+0x62>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    5fb2:	db 9a       	sbi	0x1b, 3	; 27
    {
        atmel_flash_send_byte(reqPtr[i]);
    }
    atmel_flash_high();
    return TRUE;
}
    5fb4:	81 e0       	ldi	r24, 0x01	; 1
    5fb6:	0f 90       	pop	r0
    5fb8:	0f 90       	pop	r0
    5fba:	0f 90       	pop	r0
    5fbc:	0f 90       	pop	r0
    5fbe:	cf 91       	pop	r28
    5fc0:	df 91       	pop	r29
    5fc2:	1f 91       	pop	r17
    5fc4:	0f 91       	pop	r16
    5fc6:	ff 90       	pop	r15
    5fc8:	ef 90       	pop	r14
    5fca:	df 90       	pop	r13
    5fcc:	cf 90       	pop	r12
    5fce:	bf 90       	pop	r11
    5fd0:	af 90       	pop	r10
    5fd2:	08 95       	ret
    uint8_t cmd[4], *reqPtr;
    uint16_t i;

    if (selected == 1)
    {
        cmd[0] = C_WRITE_BUFFER1;
    5fd4:	84 e8       	ldi	r24, 0x84	; 132
    5fd6:	89 83       	std	Y+1, r24	; 0x01
    5fd8:	c4 cf       	rjmp	.-120    	; 0x5f62 <atmel_flash_write_buffer+0x28>

00005fda <atmel_flash_flush_buffer>:
* @param selected Flush buffer to select
* @param page Page to flush to
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_flush_buffer(uint8_t selected, uint16_t page)
{
    5fda:	ef 92       	push	r14
    5fdc:	ff 92       	push	r15
    5fde:	0f 93       	push	r16
    5fe0:	1f 93       	push	r17
    5fe2:	df 93       	push	r29
    5fe4:	cf 93       	push	r28
    5fe6:	00 d0       	rcall	.+0      	; 0x5fe8 <atmel_flash_flush_buffer+0xe>
    5fe8:	00 d0       	rcall	.+0      	; 0x5fea <atmel_flash_flush_buffer+0x10>
    5fea:	cd b7       	in	r28, 0x3d	; 61
    5fec:	de b7       	in	r29, 0x3e	; 62
    uint8_t i, cmd[4];

    if (selected == 1)
    5fee:	81 30       	cpi	r24, 0x01	; 1
    5ff0:	79 f1       	breq	.+94     	; 0x6050 <atmel_flash_flush_buffer+0x76>
    {
        cmd[0] = C_FLUSH_BUFFER1;
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_FLUSH_BUFFER2;
    5ff2:	86 e8       	ldi	r24, 0x86	; 134
    5ff4:	89 83       	std	Y+1, r24	; 0x01
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    5ff6:	cb 01       	movw	r24, r22
    5ff8:	88 0f       	add	r24, r24
    5ffa:	89 2f       	mov	r24, r25
    5ffc:	88 1f       	adc	r24, r24
    5ffe:	99 0b       	sbc	r25, r25
    6000:	91 95       	neg	r25
    6002:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    6004:	86 2f       	mov	r24, r22
    6006:	88 0f       	add	r24, r24
    6008:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    600a:	1c 82       	std	Y+4, r1	; 0x04
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    600c:	8f b7       	in	r24, 0x3f	; 63
    cli();
    600e:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    6010:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    6012:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    6014:	8f bf       	out	0x3f, r24	; 63
    6016:	8e 01       	movw	r16, r28
    6018:	0f 5f       	subi	r16, 0xFF	; 255
    601a:	1f 4f       	sbci	r17, 0xFF	; 255
    601c:	95 e0       	ldi	r25, 0x05	; 5
    601e:	e9 2e       	mov	r14, r25
    6020:	f1 2c       	mov	r15, r1
    6022:	ec 0e       	add	r14, r28
    6024:	fd 1e       	adc	r15, r29
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    6026:	f8 01       	movw	r30, r16
    6028:	81 91       	ld	r24, Z+
    602a:	8f 01       	movw	r16, r30
    602c:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    6030:	0e 15       	cp	r16, r14
    6032:	1f 05       	cpc	r17, r15
    6034:	c1 f7       	brne	.-16     	; 0x6026 <atmel_flash_flush_buffer+0x4c>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    6036:	db 9a       	sbi	0x1b, 3	; 27
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    return TRUE;
}
    6038:	81 e0       	ldi	r24, 0x01	; 1
    603a:	0f 90       	pop	r0
    603c:	0f 90       	pop	r0
    603e:	0f 90       	pop	r0
    6040:	0f 90       	pop	r0
    6042:	cf 91       	pop	r28
    6044:	df 91       	pop	r29
    6046:	1f 91       	pop	r17
    6048:	0f 91       	pop	r16
    604a:	ff 90       	pop	r15
    604c:	ef 90       	pop	r14
    604e:	08 95       	ret
{
    uint8_t i, cmd[4];

    if (selected == 1)
    {
        cmd[0] = C_FLUSH_BUFFER1;
    6050:	83 e8       	ldi	r24, 0x83	; 131
    6052:	89 83       	std	Y+1, r24	; 0x01
    6054:	d0 cf       	rjmp	.-96     	; 0x5ff6 <atmel_flash_flush_buffer+0x1c>

00006056 <atmel_flash_crc>:
}

/** @brief Compute the crc from the current flash address, for count bytes
*/
uint16_t atmel_flash_crc(uint32_t count)
{
    6056:	6f 92       	push	r6
    6058:	7f 92       	push	r7
    605a:	8f 92       	push	r8
    605c:	9f 92       	push	r9
    605e:	af 92       	push	r10
    6060:	bf 92       	push	r11
    6062:	cf 92       	push	r12
    6064:	df 92       	push	r13
    6066:	ef 92       	push	r14
    6068:	ff 92       	push	r15
    606a:	0f 93       	push	r16
    606c:	1f 93       	push	r17
    606e:	df 93       	push	r29
    6070:	cf 93       	push	r28
    6072:	cd b7       	in	r28, 0x3d	; 61
    6074:	de b7       	in	r29, 0x3e	; 62
    6076:	28 97       	sbiw	r28, 0x08	; 8
    6078:	0f b6       	in	r0, 0x3f	; 63
    607a:	f8 94       	cli
    607c:	de bf       	out	0x3e, r29	; 62
    607e:	0f be       	out	0x3f, r0	; 63
    6080:	cd bf       	out	0x3d, r28	; 61
    6082:	3b 01       	movw	r6, r22
    6084:	4c 01       	movw	r8, r24
    uint16_t page, offset, crc;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    6086:	e0 90 96 03 	lds	r14, 0x0396
    608a:	f0 90 97 03 	lds	r15, 0x0397
    608e:	00 91 98 03 	lds	r16, 0x0398
    6092:	10 91 99 03 	lds	r17, 0x0399
    6096:	c8 01       	movw	r24, r16
    6098:	b7 01       	movw	r22, r14
    609a:	28 e0       	ldi	r18, 0x08	; 8
    609c:	31 e0       	ldi	r19, 0x01	; 1
    609e:	40 e0       	ldi	r20, 0x00	; 0
    60a0:	50 e0       	ldi	r21, 0x00	; 0
    60a2:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__udivmodsi4>
    60a6:	69 01       	movw	r12, r18
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    60a8:	c8 01       	movw	r24, r16
    60aa:	b7 01       	movw	r22, r14
    60ac:	28 e0       	ldi	r18, 0x08	; 8
    60ae:	31 e0       	ldi	r19, 0x01	; 1
    60b0:	40 e0       	ldi	r20, 0x00	; 0
    60b2:	50 e0       	ldi	r21, 0x00	; 0
    60b4:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__udivmodsi4>
    60b8:	8b 01       	movw	r16, r22
    if (dirty && page <= cur_page && page + (offset + count) /
    60ba:	80 91 9d 03 	lds	r24, 0x039D
    60be:	88 23       	and	r24, r24
    60c0:	89 f1       	breq	.+98     	; 0x6124 <atmel_flash_crc+0xce>
    60c2:	e0 90 9b 03 	lds	r14, 0x039B
    60c6:	f0 90 9c 03 	lds	r15, 0x039C
    60ca:	ec 14       	cp	r14, r12
    60cc:	fd 04       	cpc	r15, r13
    60ce:	50 f1       	brcs	.+84     	; 0x6124 <atmel_flash_crc+0xce>
    60d0:	b8 01       	movw	r22, r16
    60d2:	80 e0       	ldi	r24, 0x00	; 0
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	66 0d       	add	r22, r6
    60d8:	77 1d       	adc	r23, r7
    60da:	88 1d       	adc	r24, r8
    60dc:	99 1d       	adc	r25, r9
    60de:	28 e0       	ldi	r18, 0x08	; 8
    60e0:	31 e0       	ldi	r19, 0x01	; 1
    60e2:	40 e0       	ldi	r20, 0x00	; 0
    60e4:	50 e0       	ldi	r21, 0x00	; 0
    60e6:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__udivmodsi4>
    60ea:	c6 01       	movw	r24, r12
    60ec:	a0 e0       	ldi	r26, 0x00	; 0
    60ee:	b0 e0       	ldi	r27, 0x00	; 0
    60f0:	82 0f       	add	r24, r18
    60f2:	93 1f       	adc	r25, r19
    60f4:	a4 1f       	adc	r26, r20
    60f6:	b5 1f       	adc	r27, r21
    60f8:	97 01       	movw	r18, r14
    60fa:	40 e0       	ldi	r20, 0x00	; 0
    60fc:	50 e0       	ldi	r21, 0x00	; 0
    60fe:	82 17       	cp	r24, r18
    6100:	93 07       	cpc	r25, r19
    6102:	a4 07       	cpc	r26, r20
    6104:	b5 07       	cpc	r27, r21
    6106:	70 f0       	brcs	.+28     	; 0x6124 <atmel_flash_crc+0xce>
        ATMEL_FLASH_PAGE_SIZE >= cur_page)
    {
        while (atmel_flash_busy())
    6108:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    610c:	88 23       	and	r24, r24
    610e:	e1 f7       	brne	.-8      	; 0x6108 <atmel_flash_crc+0xb2>
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
    6110:	60 91 9b 03 	lds	r22, 0x039B
    6114:	70 91 9c 03 	lds	r23, 0x039C
    6118:	80 91 9a 03 	lds	r24, 0x039A
    611c:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <atmel_flash_flush_buffer>
        dirty = 0;
    6120:	10 92 9d 03 	sts	0x039D, r1
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
    6124:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6128:	88 23       	and	r24, r24
    612a:	e1 f7       	brne	.-8      	; 0x6124 <atmel_flash_crc+0xce>
{
    uint8_t cmd[8];
    uint16_t crc;
    uint32_t i;

    cmd[0] = C_READ_THROUGH_MEMORY;     // 8 bit of op code
    612c:	88 ee       	ldi	r24, 0xE8	; 232
    612e:	89 83       	std	Y+1, r24	; 0x01
    cmd[1] = (page >> 7);       // 4 bit reserve and high 4 MSB
    6130:	c6 01       	movw	r24, r12
    6132:	88 0f       	add	r24, r24
    6134:	89 2f       	mov	r24, r25
    6136:	88 1f       	adc	r24, r24
    6138:	99 0b       	sbc	r25, r25
    613a:	91 95       	neg	r25
    613c:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = (page << 1) | offset >> 8; // 7 bit page and 1 bit offset MSB
    613e:	8c 2d       	mov	r24, r12
    6140:	88 0f       	add	r24, r24
    6142:	81 2b       	or	r24, r17
    6144:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = offset;            // low-order 8 address bits
    6146:	0c 83       	std	Y+4, r16	; 0x04
    cmd[4] = 0x00;
    6148:	1d 82       	std	Y+5, r1	; 0x05
    cmd[5] = 0x00;
    614a:	1e 82       	std	Y+6, r1	; 0x06
    cmd[6] = 0x00;
    614c:	1f 82       	std	Y+7, r1	; 0x07
    cmd[7] = 0x00;
    614e:	18 86       	std	Y+8, r1	; 0x08
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    6150:	8f b7       	in	r24, 0x3f	; 63
    cli();
    6152:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    6154:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    6156:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    6158:	8f bf       	out	0x3f, r24	; 63
    615a:	8e 01       	movw	r16, r28
    615c:	0f 5f       	subi	r16, 0xFF	; 255
    615e:	1f 4f       	sbci	r17, 0xFF	; 255
    6160:	e9 e0       	ldi	r30, 0x09	; 9
    6162:	ee 2e       	mov	r14, r30
    6164:	f1 2c       	mov	r15, r1
    6166:	ec 0e       	add	r14, r28
    6168:	fd 1e       	adc	r15, r29
    cmd[6] = 0x00;
    cmd[7] = 0x00;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    616a:	f8 01       	movw	r30, r16
    616c:	81 91       	ld	r24, Z+
    616e:	8f 01       	movw	r16, r30
    6170:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <atmel_flash_send_byte>
    cmd[4] = 0x00;
    cmd[5] = 0x00;
    cmd[6] = 0x00;
    cmd[7] = 0x00;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    6174:	0e 15       	cp	r16, r14
    6176:	1f 05       	cpc	r17, r15
    6178:	c1 f7       	brne	.-16     	; 0x616a <atmel_flash_crc+0x114>
    // The following code was adapted directly from crc.c
    {
        uint8_t v, xor_flag, byte, bit;

        crc = 0xFFFF /*INITIAL_VALUE */ ;
        for (i = 0; i < len; i++)
    617a:	61 14       	cp	r6, r1
    617c:	71 04       	cpc	r7, r1
    617e:	81 04       	cpc	r8, r1
    6180:	91 04       	cpc	r9, r1
    6182:	09 f4       	brne	.+2      	; 0x6186 <atmel_flash_crc+0x130>
    6184:	57 c0       	rjmp	.+174    	; 0x6234 <atmel_flash_crc+0x1de>
    6186:	cc 24       	eor	r12, r12
    6188:	dd 24       	eor	r13, r13
    618a:	76 01       	movw	r14, r12
    618c:	0f ef       	ldi	r16, 0xFF	; 255
    618e:	1f ef       	ldi	r17, 0xFF	; 255
                    crc = crc + 1;
                }

                if (xor_flag)
                {
                    crc = crc ^ 0x1021 /*POLY*/;
    6190:	71 e2       	ldi	r23, 0x21	; 33
    6192:	a7 2e       	mov	r10, r23
    6194:	70 e1       	ldi	r23, 0x10	; 16
    6196:	b7 2e       	mov	r11, r23

        crc = 0xFFFF /*INITIAL_VALUE */ ;
        for (i = 0; i < len; i++)
        {
            // Read the current byte from flash
            byte = atmel_flash_get_byte();
    6198:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <atmel_flash_get_byte>
    619c:	58 2f       	mov	r21, r24
    619e:	40 e8       	ldi	r20, 0x80	; 128
    61a0:	90 e0       	ldi	r25, 0x00	; 0
    61a2:	05 c0       	rjmp	.+10     	; 0x61ae <atmel_flash_crc+0x158>
                if (byte & v)
                {
                    crc = crc + 1;
                }

                if (xor_flag)
    61a4:	89 01       	movw	r16, r18
        for (i = 0; i < len; i++)
        {
            // Read the current byte from flash
            byte = atmel_flash_get_byte();
            v = 0x80;
            for (bit = 0; bit < 8; bit++)
    61a6:	9f 5f       	subi	r25, 0xFF	; 255
    61a8:	98 30       	cpi	r25, 0x08	; 8
    61aa:	89 f0       	breq	.+34     	; 0x61ce <atmel_flash_crc+0x178>
                if (xor_flag)
                {
                    crc = crc ^ 0x1021 /*POLY*/;
                }

                v = v >> 1;
    61ac:	46 95       	lsr	r20
                else
                {
                    xor_flag = 0;
                }

                crc = crc << 1;
    61ae:	98 01       	movw	r18, r16
    61b0:	22 0f       	add	r18, r18
    61b2:	33 1f       	adc	r19, r19
                if (byte & v)
    61b4:	84 2f       	mov	r24, r20
    61b6:	85 23       	and	r24, r21
    61b8:	11 f0       	breq	.+4      	; 0x61be <atmel_flash_crc+0x168>
                {
                    crc = crc + 1;
    61ba:	2f 5f       	subi	r18, 0xFF	; 255
    61bc:	3f 4f       	sbci	r19, 0xFF	; 255
                }

                if (xor_flag)
    61be:	17 ff       	sbrs	r17, 7
    61c0:	f1 cf       	rjmp	.-30     	; 0x61a4 <atmel_flash_crc+0x14e>
                {
                    crc = crc ^ 0x1021 /*POLY*/;
    61c2:	89 01       	movw	r16, r18
    61c4:	0a 25       	eor	r16, r10
    61c6:	1b 25       	eor	r17, r11
        for (i = 0; i < len; i++)
        {
            // Read the current byte from flash
            byte = atmel_flash_get_byte();
            v = 0x80;
            for (bit = 0; bit < 8; bit++)
    61c8:	9f 5f       	subi	r25, 0xFF	; 255
    61ca:	98 30       	cpi	r25, 0x08	; 8
    61cc:	79 f7       	brne	.-34     	; 0x61ac <atmel_flash_crc+0x156>
    // The following code was adapted directly from crc.c
    {
        uint8_t v, xor_flag, byte, bit;

        crc = 0xFFFF /*INITIAL_VALUE */ ;
        for (i = 0; i < len; i++)
    61ce:	08 94       	sec
    61d0:	c1 1c       	adc	r12, r1
    61d2:	d1 1c       	adc	r13, r1
    61d4:	e1 1c       	adc	r14, r1
    61d6:	f1 1c       	adc	r15, r1
    61d8:	c6 14       	cp	r12, r6
    61da:	d7 04       	cpc	r13, r7
    61dc:	e8 04       	cpc	r14, r8
    61de:	f9 04       	cpc	r15, r9
    61e0:	d8 f2       	brcs	.-74     	; 0x6198 <atmel_flash_crc+0x142>
    61e2:	80 e0       	ldi	r24, 0x00	; 0
            }

            crc = crc << 1;
            if (xor_flag)
            {
                crc = crc ^ 0x1021 /*POLY*/;
    61e4:	21 e2       	ldi	r18, 0x21	; 33
    61e6:	30 e1       	ldi	r19, 0x10	; 16
    61e8:	05 c0       	rjmp	.+10     	; 0x61f4 <atmel_flash_crc+0x19e>
            else
            {
                xor_flag = 0;
            }

            crc = crc << 1;
    61ea:	00 0f       	add	r16, r16
    61ec:	11 1f       	adc	r17, r17
                }

                v = v >> 1;
            }
        }
        for (bit = 0; bit < 16; bit++)
    61ee:	8f 5f       	subi	r24, 0xFF	; 255
    61f0:	80 31       	cpi	r24, 0x10	; 16
    61f2:	49 f0       	breq	.+18     	; 0x6206 <atmel_flash_crc+0x1b0>
        {
            if (crc & 0x8000)
    61f4:	17 ff       	sbrs	r17, 7
    61f6:	f9 cf       	rjmp	.-14     	; 0x61ea <atmel_flash_crc+0x194>
            else
            {
                xor_flag = 0;
            }

            crc = crc << 1;
    61f8:	00 0f       	add	r16, r16
    61fa:	11 1f       	adc	r17, r17
            if (xor_flag)
            {
                crc = crc ^ 0x1021 /*POLY*/;
    61fc:	02 27       	eor	r16, r18
    61fe:	13 27       	eor	r17, r19
                }

                v = v >> 1;
            }
        }
        for (bit = 0; bit < 16; bit++)
    6200:	8f 5f       	subi	r24, 0xFF	; 255
    6202:	80 31       	cpi	r24, 0x10	; 16
    6204:	b9 f7       	brne	.-18     	; 0x61f4 <atmel_flash_crc+0x19e>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    6206:	db 9a       	sbi	0x1b, 3	; 27
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    crc = atmel_flash_crc_memory(page, offset, count);
    return crc;
}
    6208:	c8 01       	movw	r24, r16
    620a:	28 96       	adiw	r28, 0x08	; 8
    620c:	0f b6       	in	r0, 0x3f	; 63
    620e:	f8 94       	cli
    6210:	de bf       	out	0x3e, r29	; 62
    6212:	0f be       	out	0x3f, r0	; 63
    6214:	cd bf       	out	0x3d, r28	; 61
    6216:	cf 91       	pop	r28
    6218:	df 91       	pop	r29
    621a:	1f 91       	pop	r17
    621c:	0f 91       	pop	r16
    621e:	ff 90       	pop	r15
    6220:	ef 90       	pop	r14
    6222:	df 90       	pop	r13
    6224:	cf 90       	pop	r12
    6226:	bf 90       	pop	r11
    6228:	af 90       	pop	r10
    622a:	9f 90       	pop	r9
    622c:	8f 90       	pop	r8
    622e:	7f 90       	pop	r7
    6230:	6f 90       	pop	r6
    6232:	08 95       	ret
    // The following code was adapted directly from crc.c
    {
        uint8_t v, xor_flag, byte, bit;

        crc = 0xFFFF /*INITIAL_VALUE */ ;
        for (i = 0; i < len; i++)
    6234:	0f ef       	ldi	r16, 0xFF	; 255
    6236:	1f ef       	ldi	r17, 0xFF	; 255
    6238:	d4 cf       	rjmp	.-88     	; 0x61e2 <atmel_flash_crc+0x18c>

0000623a <atmel_flash_fill_buffer>:
* @param selected Fill buffer to select
* @param page Page to fill from
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_fill_buffer(uint8_t selected, uint16_t page)
{
    623a:	ef 92       	push	r14
    623c:	ff 92       	push	r15
    623e:	0f 93       	push	r16
    6240:	1f 93       	push	r17
    6242:	df 93       	push	r29
    6244:	cf 93       	push	r28
    6246:	00 d0       	rcall	.+0      	; 0x6248 <atmel_flash_fill_buffer+0xe>
    6248:	00 d0       	rcall	.+0      	; 0x624a <atmel_flash_fill_buffer+0x10>
    624a:	cd b7       	in	r28, 0x3d	; 61
    624c:	de b7       	in	r29, 0x3e	; 62
    624e:	f8 2e       	mov	r15, r24
    6250:	8b 01       	movw	r16, r22
    uint8_t i, cmd[4];

    while (atmel_flash_busy())
    6252:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6256:	88 23       	and	r24, r24
    6258:	e1 f7       	brne	.-8      	; 0x6252 <atmel_flash_fill_buffer+0x18>
        ;
    atmel_flash_flush_buffer(cur_buff, cur_page);
    625a:	60 91 9b 03 	lds	r22, 0x039B
    625e:	70 91 9c 03 	lds	r23, 0x039C
    6262:	80 91 9a 03 	lds	r24, 0x039A
    6266:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <atmel_flash_flush_buffer>
    while (atmel_flash_busy())
    626a:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    626e:	88 23       	and	r24, r24
    6270:	e1 f7       	brne	.-8      	; 0x626a <atmel_flash_fill_buffer+0x30>
        ;
    if (selected == 1)
    6272:	81 e0       	ldi	r24, 0x01	; 1
    6274:	f8 16       	cp	r15, r24
    6276:	79 f1       	breq	.+94     	; 0x62d6 <atmel_flash_fill_buffer+0x9c>
    {
        cmd[0] = C_FILL_BUFFER1;
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_FILL_BUFFER2;
    6278:	85 e5       	ldi	r24, 0x55	; 85
    627a:	89 83       	std	Y+1, r24	; 0x01
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    627c:	c8 01       	movw	r24, r16
    627e:	88 0f       	add	r24, r24
    6280:	89 2f       	mov	r24, r25
    6282:	88 1f       	adc	r24, r24
    6284:	99 0b       	sbc	r25, r25
    6286:	91 95       	neg	r25
    6288:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    628a:	80 2f       	mov	r24, r16
    628c:	88 0f       	add	r24, r24
    628e:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    6290:	1c 82       	std	Y+4, r1	; 0x04
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    6292:	8f b7       	in	r24, 0x3f	; 63
    cli();
    6294:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    6296:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    6298:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    629a:	8f bf       	out	0x3f, r24	; 63
    629c:	8e 01       	movw	r16, r28
    629e:	0f 5f       	subi	r16, 0xFF	; 255
    62a0:	1f 4f       	sbci	r17, 0xFF	; 255
    62a2:	a5 e0       	ldi	r26, 0x05	; 5
    62a4:	ea 2e       	mov	r14, r26
    62a6:	f1 2c       	mov	r15, r1
    62a8:	ec 0e       	add	r14, r28
    62aa:	fd 1e       	adc	r15, r29
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    62ac:	f8 01       	movw	r30, r16
    62ae:	81 91       	ld	r24, Z+
    62b0:	8f 01       	movw	r16, r30
    62b2:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    62b6:	0e 15       	cp	r16, r14
    62b8:	1f 05       	cpc	r17, r15
    62ba:	c1 f7       	brne	.-16     	; 0x62ac <atmel_flash_fill_buffer+0x72>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    62bc:	db 9a       	sbi	0x1b, 3	; 27
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    return TRUE;
}
    62be:	81 e0       	ldi	r24, 0x01	; 1
    62c0:	0f 90       	pop	r0
    62c2:	0f 90       	pop	r0
    62c4:	0f 90       	pop	r0
    62c6:	0f 90       	pop	r0
    62c8:	cf 91       	pop	r28
    62ca:	df 91       	pop	r29
    62cc:	1f 91       	pop	r17
    62ce:	0f 91       	pop	r16
    62d0:	ff 90       	pop	r15
    62d2:	ef 90       	pop	r14
    62d4:	08 95       	ret
    atmel_flash_flush_buffer(cur_buff, cur_page);
    while (atmel_flash_busy())
        ;
    if (selected == 1)
    {
        cmd[0] = C_FILL_BUFFER1;
    62d6:	83 e5       	ldi	r24, 0x53	; 83
    62d8:	89 83       	std	Y+1, r24	; 0x01
    62da:	d0 cf       	rjmp	.-96     	; 0x627c <atmel_flash_fill_buffer+0x42>

000062dc <atmel_flash_compare>:
}

/** @brief Compare buf to the current flash address, for count bytes
*/
uint8_t atmel_flash_compare(uint8_t * buf, uint16_t count)
{
    62dc:	2f 92       	push	r2
    62de:	3f 92       	push	r3
    62e0:	4f 92       	push	r4
    62e2:	5f 92       	push	r5
    62e4:	6f 92       	push	r6
    62e6:	7f 92       	push	r7
    62e8:	8f 92       	push	r8
    62ea:	9f 92       	push	r9
    62ec:	af 92       	push	r10
    62ee:	bf 92       	push	r11
    62f0:	cf 92       	push	r12
    62f2:	df 92       	push	r13
    62f4:	ef 92       	push	r14
    62f6:	ff 92       	push	r15
    62f8:	0f 93       	push	r16
    62fa:	1f 93       	push	r17
    62fc:	df 93       	push	r29
    62fe:	cf 93       	push	r28
    6300:	00 d0       	rcall	.+0      	; 0x6302 <atmel_flash_compare+0x26>
    6302:	00 d0       	rcall	.+0      	; 0x6304 <atmel_flash_compare+0x28>
    6304:	cd b7       	in	r28, 0x3d	; 61
    6306:	de b7       	in	r29, 0x3e	; 62
    6308:	1c 01       	movw	r2, r24
    630a:	4b 01       	movw	r8, r22
    uint16_t page, offset, num_bytes;
    uint16_t index = 0;
    uint8_t compare = 0;

    if (dirty)
    630c:	80 91 9d 03 	lds	r24, 0x039D
    6310:	88 23       	and	r24, r24
    6312:	71 f0       	breq	.+28     	; 0x6330 <atmel_flash_compare+0x54>
    {
        while (atmel_flash_busy())
    6314:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6318:	88 23       	and	r24, r24
    631a:	e1 f7       	brne	.-8      	; 0x6314 <atmel_flash_compare+0x38>
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
    631c:	60 91 9b 03 	lds	r22, 0x039B
    6320:	70 91 9c 03 	lds	r23, 0x039C
    6324:	80 91 9a 03 	lds	r24, 0x039A
    6328:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <atmel_flash_flush_buffer>
        dirty = 0;
    632c:	10 92 9d 03 	sts	0x039D, r1
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
    6330:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6334:	88 23       	and	r24, r24
    6336:	e1 f7       	brne	.-8      	; 0x6330 <atmel_flash_compare+0x54>
        ;
    while (count > 0)
    6338:	81 14       	cp	r8, r1
    633a:	91 04       	cpc	r9, r1
    633c:	09 f4       	brne	.+2      	; 0x6340 <atmel_flash_compare+0x64>
    633e:	96 c0       	rjmp	.+300    	; 0x646c <atmel_flash_compare+0x190>
    6340:	66 24       	eor	r6, r6
    6342:	77 24       	eor	r7, r7
    6344:	e0 90 96 03 	lds	r14, 0x0396
    6348:	f0 90 97 03 	lds	r15, 0x0397
    634c:	00 91 98 03 	lds	r16, 0x0398
    6350:	10 91 99 03 	lds	r17, 0x0399
    6354:	95 e0       	ldi	r25, 0x05	; 5
    6356:	49 2e       	mov	r4, r25
    6358:	51 2c       	mov	r5, r1
    635a:	4c 0e       	add	r4, r28
    635c:	5d 1e       	adc	r5, r29
    {
        page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    635e:	c8 01       	movw	r24, r16
    6360:	b7 01       	movw	r22, r14
    6362:	28 e0       	ldi	r18, 0x08	; 8
    6364:	31 e0       	ldi	r19, 0x01	; 1
    6366:	40 e0       	ldi	r20, 0x00	; 0
    6368:	50 e0       	ldi	r21, 0x00	; 0
    636a:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__udivmodsi4>
    636e:	69 01       	movw	r12, r18
        offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    6370:	c8 01       	movw	r24, r16
    6372:	b7 01       	movw	r22, r14
    6374:	28 e0       	ldi	r18, 0x08	; 8
    6376:	31 e0       	ldi	r19, 0x01	; 1
    6378:	40 e0       	ldi	r20, 0x00	; 0
    637a:	50 e0       	ldi	r21, 0x00	; 0
    637c:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__udivmodsi4>
    6380:	8b 01       	movw	r16, r22
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
    6382:	c4 01       	movw	r24, r8
    6384:	80 0f       	add	r24, r16
    6386:	91 1f       	adc	r25, r17
    6388:	89 50       	subi	r24, 0x09	; 9
    638a:	91 40       	sbci	r25, 0x01	; 1
    638c:	08 f0       	brcs	.+2      	; 0x6390 <atmel_flash_compare+0xb4>
    638e:	59 c0       	rjmp	.+178    	; 0x6442 <atmel_flash_compare+0x166>
    6390:	54 01       	movw	r10, r8
        else
        {
            num_bytes = count;
        }
        // Are we not comparing a whole page?
        if (num_bytes < ATMEL_FLASH_PAGE_SIZE)
    6392:	88 e0       	ldi	r24, 0x08	; 8
    6394:	a8 16       	cp	r10, r24
    6396:	81 e0       	ldi	r24, 0x01	; 1
    6398:	b8 06       	cpc	r11, r24
    639a:	08 f4       	brcc	.+2      	; 0x639e <atmel_flash_compare+0xc2>
    639c:	5e c0       	rjmp	.+188    	; 0x645a <atmel_flash_compare+0x17e>
            atmel_flash_fill_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page);
            while (atmel_flash_busy())
                ;
        }
        // Write the data we want to compare to the buffer
        atmel_flash_write_buffer(ATMEL_FLASH_DEFAULT_BUFFER, offset,
    639e:	a1 01       	movw	r20, r2
    63a0:	46 0d       	add	r20, r6
    63a2:	57 1d       	adc	r21, r7
    63a4:	81 e0       	ldi	r24, 0x01	; 1
    63a6:	b8 01       	movw	r22, r16
    63a8:	95 01       	movw	r18, r10
    63aa:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <atmel_flash_write_buffer>
{
    uint8_t i, cmd[4], status;

    if (selected == 1)
    {
        cmd[0] = C_COMPARE_BUFFER1;
    63ae:	e0 e6       	ldi	r30, 0x60	; 96
    63b0:	e9 83       	std	Y+1, r30	; 0x01
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_COMPARE_BUFFER2;
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    63b2:	c6 01       	movw	r24, r12
    63b4:	88 0f       	add	r24, r24
    63b6:	89 2f       	mov	r24, r25
    63b8:	88 1f       	adc	r24, r24
    63ba:	99 0b       	sbc	r25, r25
    63bc:	91 95       	neg	r25
    63be:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    63c0:	8c 2d       	mov	r24, r12
    63c2:	88 0f       	add	r24, r24
    63c4:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    63c6:	1c 82       	std	Y+4, r1	; 0x04
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    63c8:	8f b7       	in	r24, 0x3f	; 63
    cli();
    63ca:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    63cc:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    63ce:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    63d0:	8f bf       	out	0x3f, r24	; 63
    63d2:	8e 01       	movw	r16, r28
    63d4:	0f 5f       	subi	r16, 0xFF	; 255
    63d6:	1f 4f       	sbci	r17, 0xFF	; 255
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    63d8:	f8 01       	movw	r30, r16
    63da:	81 91       	ld	r24, Z+
    63dc:	8f 01       	movw	r16, r30
    63de:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    63e2:	04 15       	cp	r16, r4
    63e4:	15 05       	cpc	r17, r5
    63e6:	c1 f7       	brne	.-16     	; 0x63d8 <atmel_flash_compare+0xfc>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    63e8:	db 9a       	sbi	0x1b, 3	; 27
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    63ea:	8f b7       	in	r24, 0x3f	; 63
    cli();
    63ec:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    63ee:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    63f0:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    63f2:	8f bf       	out	0x3f, r24	; 63
    }
    atmel_flash_high();
    do
    {
        atmel_flash_low();
        atmel_flash_send_byte(C_REQ_STATUS);
    63f4:	87 ed       	ldi	r24, 0xD7	; 215
    63f6:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <atmel_flash_send_byte>
        //SEND d7h, op code for register request
        status = atmel_flash_get_byte();
    63fa:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <atmel_flash_get_byte>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    63fe:	db 9a       	sbi	0x1b, 3	; 27
        //SEND d7h, op code for register request
        status = atmel_flash_get_byte();
        atmel_flash_high();
    }

    while (status & 0x80);      // wait until comparison is complete
    6400:	87 fd       	sbrc	r24, 7
    6402:	f3 cf       	rjmp	.-26     	; 0x63ea <atmel_flash_compare+0x10e>
        }
        // Write the data we want to compare to the buffer
        atmel_flash_write_buffer(ATMEL_FLASH_DEFAULT_BUFFER, offset,
                                 &buf[index], num_bytes);
        // Compare the buffer to main memory
        if (atmel_flash_compare_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page))
    6404:	86 fd       	sbrc	r24, 6
    6406:	62 c0       	rjmp	.+196    	; 0x64cc <atmel_flash_compare+0x1f0>
        {
            compare = 1;
            break;
        }
        index += num_bytes;
        atmel_flash_addr += num_bytes;
    6408:	c5 01       	movw	r24, r10
    640a:	a0 e0       	ldi	r26, 0x00	; 0
    640c:	b0 e0       	ldi	r27, 0x00	; 0
    640e:	e0 90 96 03 	lds	r14, 0x0396
    6412:	f0 90 97 03 	lds	r15, 0x0397
    6416:	00 91 98 03 	lds	r16, 0x0398
    641a:	10 91 99 03 	lds	r17, 0x0399
    641e:	e8 0e       	add	r14, r24
    6420:	f9 1e       	adc	r15, r25
    6422:	0a 1f       	adc	r16, r26
    6424:	1b 1f       	adc	r17, r27
    6426:	e0 92 96 03 	sts	0x0396, r14
    642a:	f0 92 97 03 	sts	0x0397, r15
    642e:	00 93 98 03 	sts	0x0398, r16
    6432:	10 93 99 03 	sts	0x0399, r17
        count -= num_bytes;
    6436:	8a 18       	sub	r8, r10
    6438:	9b 08       	sbc	r9, r11
        dirty = 0;
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    while (count > 0)
    643a:	01 f1       	breq	.+64     	; 0x647c <atmel_flash_compare+0x1a0>
        if (atmel_flash_compare_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page))
        {
            compare = 1;
            break;
        }
        index += num_bytes;
    643c:	6a 0c       	add	r6, r10
    643e:	7b 1c       	adc	r7, r11
    6440:	8e cf       	rjmp	.-228    	; 0x635e <atmel_flash_compare+0x82>
    {
        page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
        offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
        {
            num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
    6442:	88 e0       	ldi	r24, 0x08	; 8
    6444:	a8 2e       	mov	r10, r24
    6446:	81 e0       	ldi	r24, 0x01	; 1
    6448:	b8 2e       	mov	r11, r24
    644a:	a0 1a       	sub	r10, r16
    644c:	b1 0a       	sbc	r11, r17
        else
        {
            num_bytes = count;
        }
        // Are we not comparing a whole page?
        if (num_bytes < ATMEL_FLASH_PAGE_SIZE)
    644e:	88 e0       	ldi	r24, 0x08	; 8
    6450:	a8 16       	cp	r10, r24
    6452:	81 e0       	ldi	r24, 0x01	; 1
    6454:	b8 06       	cpc	r11, r24
    6456:	08 f0       	brcs	.+2      	; 0x645a <atmel_flash_compare+0x17e>
    6458:	a2 cf       	rjmp	.-188    	; 0x639e <atmel_flash_compare+0xc2>
        {
            atmel_flash_fill_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page);
    645a:	81 e0       	ldi	r24, 0x01	; 1
    645c:	b6 01       	movw	r22, r12
    645e:	0e 94 1d 31 	call	0x623a	; 0x623a <atmel_flash_fill_buffer>
            while (atmel_flash_busy())
    6462:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6466:	88 23       	and	r24, r24
    6468:	e1 f7       	brne	.-8      	; 0x6462 <atmel_flash_compare+0x186>
    646a:	99 cf       	rjmp	.-206    	; 0x639e <atmel_flash_compare+0xc2>
    646c:	e0 90 96 03 	lds	r14, 0x0396
    6470:	f0 90 97 03 	lds	r15, 0x0397
    6474:	00 91 98 03 	lds	r16, 0x0398
    6478:	10 91 99 03 	lds	r17, 0x0399
        if (atmel_flash_compare_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page))
        {
            compare = 1;
            break;
        }
        index += num_bytes;
    647c:	20 e0       	ldi	r18, 0x00	; 0
        atmel_flash_addr += num_bytes;
        count -= num_bytes;
    }
    // In case we exited the loop early, act like we read the whole range
    atmel_flash_addr += count;
    647e:	c4 01       	movw	r24, r8
    6480:	a0 e0       	ldi	r26, 0x00	; 0
    6482:	b0 e0       	ldi	r27, 0x00	; 0
    6484:	e8 0e       	add	r14, r24
    6486:	f9 1e       	adc	r15, r25
    6488:	0a 1f       	adc	r16, r26
    648a:	1b 1f       	adc	r17, r27
    648c:	e0 92 96 03 	sts	0x0396, r14
    6490:	f0 92 97 03 	sts	0x0397, r15
    6494:	00 93 98 03 	sts	0x0398, r16
    6498:	10 93 99 03 	sts	0x0399, r17
    return compare;
}
    649c:	82 2f       	mov	r24, r18
    649e:	0f 90       	pop	r0
    64a0:	0f 90       	pop	r0
    64a2:	0f 90       	pop	r0
    64a4:	0f 90       	pop	r0
    64a6:	cf 91       	pop	r28
    64a8:	df 91       	pop	r29
    64aa:	1f 91       	pop	r17
    64ac:	0f 91       	pop	r16
    64ae:	ff 90       	pop	r15
    64b0:	ef 90       	pop	r14
    64b2:	df 90       	pop	r13
    64b4:	cf 90       	pop	r12
    64b6:	bf 90       	pop	r11
    64b8:	af 90       	pop	r10
    64ba:	9f 90       	pop	r9
    64bc:	8f 90       	pop	r8
    64be:	7f 90       	pop	r7
    64c0:	6f 90       	pop	r6
    64c2:	5f 90       	pop	r5
    64c4:	4f 90       	pop	r4
    64c6:	3f 90       	pop	r3
    64c8:	2f 90       	pop	r2
    64ca:	08 95       	ret
        if (atmel_flash_compare_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page))
        {
            compare = 1;
            break;
        }
        index += num_bytes;
    64cc:	21 e0       	ldi	r18, 0x01	; 1
    64ce:	e0 90 96 03 	lds	r14, 0x0396
    64d2:	f0 90 97 03 	lds	r15, 0x0397
    64d6:	00 91 98 03 	lds	r16, 0x0398
    64da:	10 91 99 03 	lds	r17, 0x0399
    64de:	cf cf       	rjmp	.-98     	; 0x647e <atmel_flash_compare+0x1a2>

000064e0 <copyFlash>:
    return;
}

//-------------------------------------------------------------------------
void copyFlash(int sourcepage, int targetpage)
{
    64e0:	0f 93       	push	r16
    64e2:	1f 93       	push	r17
    64e4:	cf 93       	push	r28
    64e6:	df 93       	push	r29
    64e8:	ec 01       	movw	r28, r24
    64ea:	8b 01       	movw	r16, r22
    while (atmel_flash_busy())
    64ec:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    64f0:	88 23       	and	r24, r24
    64f2:	e1 f7       	brne	.-8      	; 0x64ec <copyFlash+0xc>
        ;
    atmel_flash_fill_buffer(1, sourcepage);
    64f4:	81 e0       	ldi	r24, 0x01	; 1
    64f6:	be 01       	movw	r22, r28
    64f8:	0e 94 1d 31 	call	0x623a	; 0x623a <atmel_flash_fill_buffer>
    while (atmel_flash_busy())
    64fc:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6500:	88 23       	and	r24, r24
    6502:	e1 f7       	brne	.-8      	; 0x64fc <copyFlash+0x1c>
        ;
    atmel_flash_flush_buffer(1, targetpage);
    6504:	81 e0       	ldi	r24, 0x01	; 1
    6506:	b8 01       	movw	r22, r16
    6508:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <atmel_flash_flush_buffer>
    while (atmel_flash_busy())
    650c:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6510:	88 23       	and	r24, r24
    6512:	e1 f7       	brne	.-8      	; 0x650c <copyFlash+0x2c>
        ;
}
    6514:	df 91       	pop	r29
    6516:	cf 91       	pop	r28
    6518:	1f 91       	pop	r17
    651a:	0f 91       	pop	r16
    651c:	08 95       	ret

0000651e <dev_write_atmel_flash>:
}

/** @brief Write p into the current flash address, for count bytes
*/
static uint16_t dev_write_atmel_flash(const void *p, uint16_t count)
{
    651e:	2f 92       	push	r2
    6520:	3f 92       	push	r3
    6522:	4f 92       	push	r4
    6524:	5f 92       	push	r5
    6526:	6f 92       	push	r6
    6528:	7f 92       	push	r7
    652a:	8f 92       	push	r8
    652c:	9f 92       	push	r9
    652e:	af 92       	push	r10
    6530:	bf 92       	push	r11
    6532:	cf 92       	push	r12
    6534:	df 92       	push	r13
    6536:	ef 92       	push	r14
    6538:	ff 92       	push	r15
    653a:	0f 93       	push	r16
    653c:	1f 93       	push	r17
    653e:	df 93       	push	r29
    6540:	cf 93       	push	r28
    6542:	00 d0       	rcall	.+0      	; 0x6544 <dev_write_atmel_flash+0x26>
    6544:	00 d0       	rcall	.+0      	; 0x6546 <dev_write_atmel_flash+0x28>
    6546:	cd b7       	in	r28, 0x3d	; 61
    6548:	de b7       	in	r29, 0x3e	; 62
    654a:	4b 01       	movw	r8, r22
    uint16_t page, offset, num_bytes;
    uint16_t index = 0;
    uint8_t *buf = (uint8_t *) p;
    654c:	2c 01       	movw	r4, r24

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    654e:	a0 90 96 03 	lds	r10, 0x0396
    6552:	b0 90 97 03 	lds	r11, 0x0397
    6556:	c0 90 98 03 	lds	r12, 0x0398
    655a:	d0 90 99 03 	lds	r13, 0x0399
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    while (atmel_flash_busy())
    655e:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6562:	88 23       	and	r24, r24
    6564:	e1 f7       	brne	.-8      	; 0x655e <dev_write_atmel_flash+0x40>
        ;
    while (count > 0)
    6566:	81 14       	cp	r8, r1
    6568:	91 04       	cpc	r9, r1
    656a:	09 f4       	brne	.+2      	; 0x656e <dev_write_atmel_flash+0x50>
    656c:	ba c0       	rjmp	.+372    	; 0x66e2 <dev_write_atmel_flash+0x1c4>
{
    uint16_t page, offset, num_bytes;
    uint16_t index = 0;
    uint8_t *buf = (uint8_t *) p;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    656e:	c6 01       	movw	r24, r12
    6570:	b5 01       	movw	r22, r10
    6572:	28 e0       	ldi	r18, 0x08	; 8
    6574:	31 e0       	ldi	r19, 0x01	; 1
    6576:	40 e0       	ldi	r20, 0x00	; 0
    6578:	50 e0       	ldi	r21, 0x00	; 0
    657a:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__udivmodsi4>
    657e:	79 01       	movw	r14, r18
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    6580:	c6 01       	movw	r24, r12
    6582:	b5 01       	movw	r22, r10
    6584:	28 e0       	ldi	r18, 0x08	; 8
    6586:	31 e0       	ldi	r19, 0x01	; 1
    6588:	40 e0       	ldi	r20, 0x00	; 0
    658a:	50 e0       	ldi	r21, 0x00	; 0
    658c:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__udivmodsi4>
    6590:	5b 01       	movw	r10, r22
    6592:	66 24       	eor	r6, r6
    6594:	77 24       	eor	r7, r7
    6596:	45 e0       	ldi	r20, 0x05	; 5
    6598:	24 2e       	mov	r2, r20
    659a:	31 2c       	mov	r3, r1
    659c:	2c 0e       	add	r2, r28
    659e:	3d 1e       	adc	r3, r29
    while (atmel_flash_busy())
        ;
    while (count > 0)
    {
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
    65a0:	c5 01       	movw	r24, r10
    65a2:	88 0d       	add	r24, r8
    65a4:	99 1d       	adc	r25, r9
    65a6:	89 50       	subi	r24, 0x09	; 9
    65a8:	91 40       	sbci	r25, 0x01	; 1
    65aa:	08 f0       	brcs	.+2      	; 0x65ae <dev_write_atmel_flash+0x90>
    65ac:	7e c0       	rjmp	.+252    	; 0x66aa <dev_write_atmel_flash+0x18c>
    65ae:	64 01       	movw	r12, r8
        }
        else
        {
            num_bytes = count;
        }
        if (page != cur_page)
    65b0:	80 91 9b 03 	lds	r24, 0x039B
    65b4:	90 91 9c 03 	lds	r25, 0x039C
    65b8:	e8 16       	cp	r14, r24
    65ba:	f9 06       	cpc	r15, r25
    65bc:	09 f4       	brne	.+2      	; 0x65c0 <dev_write_atmel_flash+0xa2>
    65be:	41 c0       	rjmp	.+130    	; 0x6642 <dev_write_atmel_flash+0x124>
        {
            if (dirty)
    65c0:	80 91 9d 03 	lds	r24, 0x039D
    65c4:	88 23       	and	r24, r24
    65c6:	09 f0       	breq	.+2      	; 0x65ca <dev_write_atmel_flash+0xac>
    65c8:	77 c0       	rjmp	.+238    	; 0x66b8 <dev_write_atmel_flash+0x19a>
                while (atmel_flash_busy())
                    ;
                atmel_flash_flush_buffer(cur_buff, cur_page);
                dirty = 0;
            }
            cur_buff =
    65ca:	80 91 9a 03 	lds	r24, 0x039A
    65ce:	81 30       	cpi	r24, 0x01	; 1
    65d0:	09 f4       	brne	.+2      	; 0x65d4 <dev_write_atmel_flash+0xb6>
    65d2:	85 c0       	rjmp	.+266    	; 0x66de <dev_write_atmel_flash+0x1c0>
    65d4:	81 e0       	ldi	r24, 0x01	; 1
    65d6:	80 93 9a 03 	sts	0x039A, r24
                (cur_buff ==
                 ATMEL_FLASH_BUFFER_1 ? ATMEL_FLASH_BUFFER_2 :
                 ATMEL_FLASH_BUFFER_1);
            cur_page = page;
    65da:	f0 92 9c 03 	sts	0x039C, r15
    65de:	e0 92 9b 03 	sts	0x039B, r14
            if (num_bytes < ATMEL_FLASH_PAGE_SIZE)
    65e2:	88 e0       	ldi	r24, 0x08	; 8
    65e4:	c8 16       	cp	r12, r24
    65e6:	81 e0       	ldi	r24, 0x01	; 1
    65e8:	d8 06       	cpc	r13, r24
    65ea:	48 f4       	brcc	.+18     	; 0x65fe <dev_write_atmel_flash+0xe0>
            {
                while (atmel_flash_busy())
    65ec:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    65f0:	88 23       	and	r24, r24
    65f2:	e1 f7       	brne	.-8      	; 0x65ec <dev_write_atmel_flash+0xce>
                    ;
                atmel_flash_fill_buffer(cur_buff, page);
    65f4:	80 91 9a 03 	lds	r24, 0x039A
    65f8:	b7 01       	movw	r22, r14
    65fa:	0e 94 1d 31 	call	0x623a	; 0x623a <atmel_flash_fill_buffer>
            }
            // Erase next page right now
            while (atmel_flash_busy())
    65fe:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6602:	88 23       	and	r24, r24
    6604:	e1 f7       	brne	.-8      	; 0x65fe <dev_write_atmel_flash+0xe0>
*/
static uint8_t atmel_flash_erase_page(uint16_t page)
{
    uint8_t i, cmd[4];

    cmd[0] = C_ERASE_PAGE;      // 8 bit of op code
    6606:	e1 e8       	ldi	r30, 0x81	; 129
    6608:	e9 83       	std	Y+1, r30	; 0x01
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    660a:	c7 01       	movw	r24, r14
    660c:	88 0f       	add	r24, r24
    660e:	89 2f       	mov	r24, r25
    6610:	88 1f       	adc	r24, r24
    6612:	99 0b       	sbc	r25, r25
    6614:	91 95       	neg	r25
    6616:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    6618:	8e 2d       	mov	r24, r14
    661a:	88 0f       	add	r24, r24
    661c:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    661e:	1c 82       	std	Y+4, r1	; 0x04
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    6620:	8f b7       	in	r24, 0x3f	; 63
    cli();
    6622:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    6624:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    6626:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    6628:	8f bf       	out	0x3f, r24	; 63
    662a:	8e 01       	movw	r16, r28
    662c:	0f 5f       	subi	r16, 0xFF	; 255
    662e:	1f 4f       	sbci	r17, 0xFF	; 255
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    6630:	f8 01       	movw	r30, r16
    6632:	81 91       	ld	r24, Z+
    6634:	8f 01       	movw	r16, r30
    6636:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    663a:	02 15       	cp	r16, r2
    663c:	13 05       	cpc	r17, r3
    663e:	c1 f7       	brne	.-16     	; 0x6630 <dev_write_atmel_flash+0x112>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    6640:	db 9a       	sbi	0x1b, 3	; 27
            // Erase next page right now
            while (atmel_flash_busy())
                ;
            atmel_flash_erase_page(page);
        }
        atmel_flash_write_buffer(cur_buff, offset, &buf[index], num_bytes);
    6642:	a2 01       	movw	r20, r4
    6644:	46 0d       	add	r20, r6
    6646:	57 1d       	adc	r21, r7
    6648:	80 91 9a 03 	lds	r24, 0x039A
    664c:	b5 01       	movw	r22, r10
    664e:	96 01       	movw	r18, r12
    6650:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <atmel_flash_write_buffer>
        dirty = 1;
    6654:	f1 e0       	ldi	r31, 0x01	; 1
    6656:	f0 93 9d 03 	sts	0x039D, r31
        index += num_bytes;
        atmel_flash_addr += num_bytes;
    665a:	96 01       	movw	r18, r12
    665c:	40 e0       	ldi	r20, 0x00	; 0
    665e:	50 e0       	ldi	r21, 0x00	; 0
    6660:	80 91 96 03 	lds	r24, 0x0396
    6664:	90 91 97 03 	lds	r25, 0x0397
    6668:	a0 91 98 03 	lds	r26, 0x0398
    666c:	b0 91 99 03 	lds	r27, 0x0399
    6670:	82 0f       	add	r24, r18
    6672:	93 1f       	adc	r25, r19
    6674:	a4 1f       	adc	r26, r20
    6676:	b5 1f       	adc	r27, r21
    6678:	80 93 96 03 	sts	0x0396, r24
    667c:	90 93 97 03 	sts	0x0397, r25
    6680:	a0 93 98 03 	sts	0x0398, r26
    6684:	b0 93 99 03 	sts	0x0399, r27
        count -= num_bytes;
    6688:	8c 18       	sub	r8, r12
    668a:	9d 08       	sbc	r9, r13

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    while (atmel_flash_busy())
        ;
    while (count > 0)
    668c:	51 f1       	breq	.+84     	; 0x66e2 <dev_write_atmel_flash+0x1c4>
                ;
            atmel_flash_erase_page(page);
        }
        atmel_flash_write_buffer(cur_buff, offset, &buf[index], num_bytes);
        dirty = 1;
        index += num_bytes;
    668e:	6c 0c       	add	r6, r12
    6690:	7d 1c       	adc	r7, r13
        atmel_flash_addr += num_bytes;
        count -= num_bytes;
        page++;
    6692:	08 94       	sec
    6694:	e1 1c       	adc	r14, r1
    6696:	f1 1c       	adc	r15, r1
    6698:	aa 24       	eor	r10, r10
    669a:	bb 24       	eor	r11, r11
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    while (atmel_flash_busy())
        ;
    while (count > 0)
    {
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
    669c:	c5 01       	movw	r24, r10
    669e:	88 0d       	add	r24, r8
    66a0:	99 1d       	adc	r25, r9
    66a2:	89 50       	subi	r24, 0x09	; 9
    66a4:	91 40       	sbci	r25, 0x01	; 1
    66a6:	08 f4       	brcc	.+2      	; 0x66aa <dev_write_atmel_flash+0x18c>
    66a8:	82 cf       	rjmp	.-252    	; 0x65ae <dev_write_atmel_flash+0x90>
        {
            num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
    66aa:	38 e0       	ldi	r19, 0x08	; 8
    66ac:	c3 2e       	mov	r12, r19
    66ae:	31 e0       	ldi	r19, 0x01	; 1
    66b0:	d3 2e       	mov	r13, r19
    66b2:	ca 18       	sub	r12, r10
    66b4:	db 08       	sbc	r13, r11
    66b6:	7c cf       	rjmp	.-264    	; 0x65b0 <dev_write_atmel_flash+0x92>
        }
        if (page != cur_page)
        {
            if (dirty)
            {
                while (atmel_flash_busy())
    66b8:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    66bc:	88 23       	and	r24, r24
    66be:	e1 f7       	brne	.-8      	; 0x66b8 <dev_write_atmel_flash+0x19a>
                    ;
                atmel_flash_flush_buffer(cur_buff, cur_page);
    66c0:	60 91 9b 03 	lds	r22, 0x039B
    66c4:	70 91 9c 03 	lds	r23, 0x039C
    66c8:	80 91 9a 03 	lds	r24, 0x039A
    66cc:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <atmel_flash_flush_buffer>
                dirty = 0;
    66d0:	10 92 9d 03 	sts	0x039D, r1
            }
            cur_buff =
    66d4:	80 91 9a 03 	lds	r24, 0x039A
    66d8:	81 30       	cpi	r24, 0x01	; 1
    66da:	09 f0       	breq	.+2      	; 0x66de <dev_write_atmel_flash+0x1c0>
    66dc:	7b cf       	rjmp	.-266    	; 0x65d4 <dev_write_atmel_flash+0xb6>
    66de:	82 e0       	ldi	r24, 0x02	; 2
    66e0:	7a cf       	rjmp	.-268    	; 0x65d6 <dev_write_atmel_flash+0xb8>
        count -= num_bytes;
        page++;
        offset = 0;
    }
    return count;
}
    66e2:	80 e0       	ldi	r24, 0x00	; 0
    66e4:	90 e0       	ldi	r25, 0x00	; 0
    66e6:	0f 90       	pop	r0
    66e8:	0f 90       	pop	r0
    66ea:	0f 90       	pop	r0
    66ec:	0f 90       	pop	r0
    66ee:	cf 91       	pop	r28
    66f0:	df 91       	pop	r29
    66f2:	1f 91       	pop	r17
    66f4:	0f 91       	pop	r16
    66f6:	ff 90       	pop	r15
    66f8:	ef 90       	pop	r14
    66fa:	df 90       	pop	r13
    66fc:	cf 90       	pop	r12
    66fe:	bf 90       	pop	r11
    6700:	af 90       	pop	r10
    6702:	9f 90       	pop	r9
    6704:	8f 90       	pop	r8
    6706:	7f 90       	pop	r7
    6708:	6f 90       	pop	r6
    670a:	5f 90       	pop	r5
    670c:	4f 90       	pop	r4
    670e:	3f 90       	pop	r3
    6710:	2f 90       	pop	r2
    6712:	08 95       	ret

00006714 <writeFlash>:
    return;
}

//-------------------------------------------------------------------------
void writeFlash(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
    6714:	af 92       	push	r10
    6716:	bf 92       	push	r11
    6718:	df 92       	push	r13
    671a:	ef 92       	push	r14
    671c:	ff 92       	push	r15
    671e:	0f 93       	push	r16
    6720:	1f 93       	push	r17
    6722:	cf 93       	push	r28
    6724:	df 93       	push	r29
    6726:	7c 01       	movw	r14, r24
    6728:	d6 2e       	mov	r13, r22
    672a:	5a 01       	movw	r10, r20
    672c:	89 01       	movw	r16, r18
    uint16_t count;

    if (initdone == 0)
    672e:	80 91 9e 03 	lds	r24, 0x039E
    6732:	88 23       	and	r24, r24
    6734:	09 f4       	brne	.+2      	; 0x6738 <writeFlash+0x24>
    6736:	69 c0       	rjmp	.+210    	; 0x680a <writeFlash+0xf6>
    {
        atmel_flash_init();
    }
    atmel_flash_addr = pagenum * 264 + offset;
    6738:	6d 2d       	mov	r22, r13
    673a:	70 e0       	ldi	r23, 0x00	; 0
    673c:	88 e0       	ldi	r24, 0x08	; 8
    673e:	91 e0       	ldi	r25, 0x01	; 1
    6740:	9c 01       	movw	r18, r24
    6742:	e2 9e       	mul	r14, r18
    6744:	c0 01       	movw	r24, r0
    6746:	e3 9e       	mul	r14, r19
    6748:	90 0d       	add	r25, r0
    674a:	f2 9e       	mul	r15, r18
    674c:	90 0d       	add	r25, r0
    674e:	11 24       	eor	r1, r1
    6750:	86 0f       	add	r24, r22
    6752:	97 1f       	adc	r25, r23
    6754:	aa 27       	eor	r26, r26
    6756:	97 fd       	sbrc	r25, 7
    6758:	a0 95       	com	r26
    675a:	ba 2f       	mov	r27, r26
    675c:	80 93 96 03 	sts	0x0396, r24
    6760:	90 93 97 03 	sts	0x0397, r25
    6764:	a0 93 98 03 	sts	0x0398, r26
    6768:	b0 93 99 03 	sts	0x0399, r27
    if (offset + NumOfBytes > 256)
    676c:	c8 01       	movw	r24, r16
    676e:	86 0f       	add	r24, r22
    6770:	97 1f       	adc	r25, r23
    6772:	81 50       	subi	r24, 0x01	; 1
    6774:	91 40       	sbci	r25, 0x01	; 1
    6776:	0c f4       	brge	.+2      	; 0x677a <writeFlash+0x66>
    6778:	46 c0       	rjmp	.+140    	; 0x6806 <writeFlash+0xf2>
    {
        count = 256 - offset;
    677a:	c0 e0       	ldi	r28, 0x00	; 0
    677c:	d1 e0       	ldi	r29, 0x01	; 1
    677e:	c6 1b       	sub	r28, r22
    6780:	d7 0b       	sbc	r29, r23
    }
    else
    {
        count = NumOfBytes;
    }
    while (atmel_flash_busy())
    6782:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6786:	88 23       	and	r24, r24
    6788:	e1 f7       	brne	.-8      	; 0x6782 <writeFlash+0x6e>
        ;
    dev_write_atmel_flash(buffer, count);
    678a:	c5 01       	movw	r24, r10
    678c:	be 01       	movw	r22, r28
    678e:	0e 94 8f 32 	call	0x651e	; 0x651e <dev_write_atmel_flash>
    while (atmel_flash_busy())
    6792:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6796:	88 23       	and	r24, r24
    6798:	e1 f7       	brne	.-8      	; 0x6792 <writeFlash+0x7e>
        ;
    buffer = (void *)((char *)buffer + count);
    if (count < NumOfBytes)
    679a:	c0 17       	cp	r28, r16
    679c:	d1 07       	cpc	r29, r17
    679e:	48 f5       	brcc	.+82     	; 0x67f2 <writeFlash+0xde>
    {
        atmel_flash_addr = (pagenum + 1) * 264;
    67a0:	08 94       	sec
    67a2:	e1 1c       	adc	r14, r1
    67a4:	f1 1c       	adc	r15, r1
    67a6:	88 e0       	ldi	r24, 0x08	; 8
    67a8:	91 e0       	ldi	r25, 0x01	; 1
    67aa:	9c 01       	movw	r18, r24
    67ac:	e2 9e       	mul	r14, r18
    67ae:	c0 01       	movw	r24, r0
    67b0:	e3 9e       	mul	r14, r19
    67b2:	90 0d       	add	r25, r0
    67b4:	f2 9e       	mul	r15, r18
    67b6:	90 0d       	add	r25, r0
    67b8:	11 24       	eor	r1, r1
    67ba:	aa 27       	eor	r26, r26
    67bc:	97 fd       	sbrc	r25, 7
    67be:	a0 95       	com	r26
    67c0:	ba 2f       	mov	r27, r26
    67c2:	80 93 96 03 	sts	0x0396, r24
    67c6:	90 93 97 03 	sts	0x0397, r25
    67ca:	a0 93 98 03 	sts	0x0398, r26
    67ce:	b0 93 99 03 	sts	0x0399, r27
        count = NumOfBytes - count;
        while (atmel_flash_busy())
    67d2:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    67d6:	88 23       	and	r24, r24
    67d8:	e1 f7       	brne	.-8      	; 0x67d2 <writeFlash+0xbe>
            ;
        dev_write_atmel_flash(buffer, count);
    67da:	0c 1b       	sub	r16, r28
    67dc:	1d 0b       	sbc	r17, r29
    67de:	c5 01       	movw	r24, r10
    67e0:	8c 0f       	add	r24, r28
    67e2:	9d 1f       	adc	r25, r29
    67e4:	b8 01       	movw	r22, r16
    67e6:	0e 94 8f 32 	call	0x651e	; 0x651e <dev_write_atmel_flash>
        while (atmel_flash_busy())
    67ea:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    67ee:	88 23       	and	r24, r24
    67f0:	e1 f7       	brne	.-8      	; 0x67ea <writeFlash+0xd6>
            ;
    }
    return;
}
    67f2:	df 91       	pop	r29
    67f4:	cf 91       	pop	r28
    67f6:	1f 91       	pop	r17
    67f8:	0f 91       	pop	r16
    67fa:	ff 90       	pop	r15
    67fc:	ef 90       	pop	r14
    67fe:	df 90       	pop	r13
    6800:	bf 90       	pop	r11
    6802:	af 90       	pop	r10
    6804:	08 95       	ret
    {
        count = 256 - offset;
    }
    else
    {
        count = NumOfBytes;
    6806:	e8 01       	movw	r28, r16
    6808:	bc cf       	rjmp	.-136    	; 0x6782 <writeFlash+0x6e>
{
    uint16_t count;

    if (initdone == 0)
    {
        atmel_flash_init();
    680a:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <atmel_flash_init>
    680e:	94 cf       	rjmp	.-216    	; 0x6738 <writeFlash+0x24>

00006810 <dev_read_atmel_flash>:
}

/** @brief Read from the current flash address into p, for count bytes
*/
static uint16_t dev_read_atmel_flash(void *p, uint16_t count)
{
    6810:	8f 92       	push	r8
    6812:	9f 92       	push	r9
    6814:	af 92       	push	r10
    6816:	bf 92       	push	r11
    6818:	cf 92       	push	r12
    681a:	df 92       	push	r13
    681c:	ef 92       	push	r14
    681e:	ff 92       	push	r15
    6820:	0f 93       	push	r16
    6822:	1f 93       	push	r17
    6824:	df 93       	push	r29
    6826:	cf 93       	push	r28
    6828:	cd b7       	in	r28, 0x3d	; 61
    682a:	de b7       	in	r29, 0x3e	; 62
    682c:	28 97       	sbiw	r28, 0x08	; 8
    682e:	0f b6       	in	r0, 0x3f	; 63
    6830:	f8 94       	cli
    6832:	de bf       	out	0x3e, r29	; 62
    6834:	0f be       	out	0x3f, r0	; 63
    6836:	cd bf       	out	0x3d, r28	; 61
    6838:	4c 01       	movw	r8, r24
    683a:	6b 01       	movw	r12, r22
    uint16_t page, offset;
    uint8_t *buf = (uint8_t *) p;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    683c:	e0 90 96 03 	lds	r14, 0x0396
    6840:	f0 90 97 03 	lds	r15, 0x0397
    6844:	00 91 98 03 	lds	r16, 0x0398
    6848:	10 91 99 03 	lds	r17, 0x0399
    684c:	c8 01       	movw	r24, r16
    684e:	b7 01       	movw	r22, r14
    6850:	28 e0       	ldi	r18, 0x08	; 8
    6852:	31 e0       	ldi	r19, 0x01	; 1
    6854:	40 e0       	ldi	r20, 0x00	; 0
    6856:	50 e0       	ldi	r21, 0x00	; 0
    6858:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__udivmodsi4>
    685c:	59 01       	movw	r10, r18
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    685e:	c8 01       	movw	r24, r16
    6860:	b7 01       	movw	r22, r14
    6862:	28 e0       	ldi	r18, 0x08	; 8
    6864:	31 e0       	ldi	r19, 0x01	; 1
    6866:	40 e0       	ldi	r20, 0x00	; 0
    6868:	50 e0       	ldi	r21, 0x00	; 0
    686a:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__udivmodsi4>
    686e:	8b 01       	movw	r16, r22
    if (dirty && page <= cur_page && page + (offset + count) /
    6870:	80 91 9d 03 	lds	r24, 0x039D
    6874:	88 23       	and	r24, r24
    6876:	09 f1       	breq	.+66     	; 0x68ba <dev_read_atmel_flash+0xaa>
    6878:	20 91 9b 03 	lds	r18, 0x039B
    687c:	30 91 9c 03 	lds	r19, 0x039C
    6880:	2a 15       	cp	r18, r10
    6882:	3b 05       	cpc	r19, r11
    6884:	d0 f0       	brcs	.+52     	; 0x68ba <dev_read_atmel_flash+0xaa>
    6886:	c6 01       	movw	r24, r12
    6888:	80 0f       	add	r24, r16
    688a:	91 1f       	adc	r25, r17
    688c:	68 e0       	ldi	r22, 0x08	; 8
    688e:	71 e0       	ldi	r23, 0x01	; 1
    6890:	0e 94 96 55 	call	0xab2c	; 0xab2c <__udivmodhi4>
    6894:	6a 0d       	add	r22, r10
    6896:	7b 1d       	adc	r23, r11
    6898:	62 17       	cp	r22, r18
    689a:	73 07       	cpc	r23, r19
    689c:	70 f0       	brcs	.+28     	; 0x68ba <dev_read_atmel_flash+0xaa>
        ATMEL_FLASH_PAGE_SIZE >= cur_page)
    {
        while (atmel_flash_busy())
    689e:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    68a2:	88 23       	and	r24, r24
    68a4:	e1 f7       	brne	.-8      	; 0x689e <dev_read_atmel_flash+0x8e>
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
    68a6:	60 91 9b 03 	lds	r22, 0x039B
    68aa:	70 91 9c 03 	lds	r23, 0x039C
    68ae:	80 91 9a 03 	lds	r24, 0x039A
    68b2:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <atmel_flash_flush_buffer>
        dirty = 0;
    68b6:	10 92 9d 03 	sts	0x039D, r1
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
    68ba:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    68be:	88 23       	and	r24, r24
    68c0:	e1 f7       	brne	.-8      	; 0x68ba <dev_read_atmel_flash+0xaa>
                                    void *reqData, uint16_t len)
{
    uint8_t cmd[8], *reqPtr;
    uint16_t i;

    cmd[0] = C_READ_THROUGH_MEMORY;     // 8 bit of op code
    68c2:	88 ee       	ldi	r24, 0xE8	; 232
    68c4:	89 83       	std	Y+1, r24	; 0x01
    cmd[1] = (page >> 7);       // 4 bit reserve and high 4 MSB
    68c6:	c5 01       	movw	r24, r10
    68c8:	88 0f       	add	r24, r24
    68ca:	89 2f       	mov	r24, r25
    68cc:	88 1f       	adc	r24, r24
    68ce:	99 0b       	sbc	r25, r25
    68d0:	91 95       	neg	r25
    68d2:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = (page << 1) | offset >> 8; // 7 bit page and 1 bit offset MSB
    68d4:	8a 2d       	mov	r24, r10
    68d6:	88 0f       	add	r24, r24
    68d8:	81 2b       	or	r24, r17
    68da:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = offset;            // low-order 8 address bits
    68dc:	0c 83       	std	Y+4, r16	; 0x04
    cmd[4] = 0x00;
    68de:	1d 82       	std	Y+5, r1	; 0x05
    cmd[5] = 0x00;
    68e0:	1e 82       	std	Y+6, r1	; 0x06
    cmd[6] = 0x00;
    68e2:	1f 82       	std	Y+7, r1	; 0x07
    cmd[7] = 0x00;
    68e4:	18 86       	std	Y+8, r1	; 0x08
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    68e6:	8f b7       	in	r24, 0x3f	; 63
    cli();
    68e8:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    68ea:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    68ec:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    68ee:	8f bf       	out	0x3f, r24	; 63
    68f0:	8e 01       	movw	r16, r28
    68f2:	0f 5f       	subi	r16, 0xFF	; 255
    68f4:	1f 4f       	sbci	r17, 0xFF	; 255
    68f6:	59 e0       	ldi	r21, 0x09	; 9
    68f8:	e5 2e       	mov	r14, r21
    68fa:	f1 2c       	mov	r15, r1
    68fc:	ec 0e       	add	r14, r28
    68fe:	fd 1e       	adc	r15, r29
    cmd[7] = 0x00;
    reqPtr = (uint8_t *) reqData;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    6900:	f8 01       	movw	r30, r16
    6902:	81 91       	ld	r24, Z+
    6904:	8f 01       	movw	r16, r30
    6906:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <atmel_flash_send_byte>
    cmd[5] = 0x00;
    cmd[6] = 0x00;
    cmd[7] = 0x00;
    reqPtr = (uint8_t *) reqData;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    690a:	0e 15       	cp	r16, r14
    690c:	1f 05       	cpc	r17, r15
    690e:	c1 f7       	brne	.-16     	; 0x6900 <dev_read_atmel_flash+0xf0>
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    6910:	c1 14       	cp	r12, r1
    6912:	d1 04       	cpc	r13, r1
    6914:	69 f0       	breq	.+26     	; 0x6930 <dev_read_atmel_flash+0x120>
    6916:	00 e0       	ldi	r16, 0x00	; 0
    6918:	10 e0       	ldi	r17, 0x00	; 0
    {
        reqPtr[i] = atmel_flash_get_byte();
    691a:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <atmel_flash_get_byte>
    691e:	f4 01       	movw	r30, r8
    6920:	e0 0f       	add	r30, r16
    6922:	f1 1f       	adc	r31, r17
    6924:	80 83       	st	Z, r24
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    6926:	0f 5f       	subi	r16, 0xFF	; 255
    6928:	1f 4f       	sbci	r17, 0xFF	; 255
    692a:	0c 15       	cp	r16, r12
    692c:	1d 05       	cpc	r17, r13
    692e:	a8 f3       	brcs	.-22     	; 0x691a <dev_read_atmel_flash+0x10a>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    6930:	db 9a       	sbi	0x1b, 3	; 27
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    atmel_flash_read_memory(page, offset, buf, count);
    return count;
}
    6932:	c6 01       	movw	r24, r12
    6934:	28 96       	adiw	r28, 0x08	; 8
    6936:	0f b6       	in	r0, 0x3f	; 63
    6938:	f8 94       	cli
    693a:	de bf       	out	0x3e, r29	; 62
    693c:	0f be       	out	0x3f, r0	; 63
    693e:	cd bf       	out	0x3d, r28	; 61
    6940:	cf 91       	pop	r28
    6942:	df 91       	pop	r29
    6944:	1f 91       	pop	r17
    6946:	0f 91       	pop	r16
    6948:	ff 90       	pop	r15
    694a:	ef 90       	pop	r14
    694c:	df 90       	pop	r13
    694e:	cf 90       	pop	r12
    6950:	bf 90       	pop	r11
    6952:	af 90       	pop	r10
    6954:	9f 90       	pop	r9
    6956:	8f 90       	pop	r8
    6958:	08 95       	ret

0000695a <readFlash>:
    _delay_ms(20);
}

//-------------------------------------------------------------------------
void readFlash(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
    695a:	af 92       	push	r10
    695c:	bf 92       	push	r11
    695e:	df 92       	push	r13
    6960:	ef 92       	push	r14
    6962:	ff 92       	push	r15
    6964:	0f 93       	push	r16
    6966:	1f 93       	push	r17
    6968:	cf 93       	push	r28
    696a:	df 93       	push	r29
    696c:	7c 01       	movw	r14, r24
    696e:	d6 2e       	mov	r13, r22
    6970:	5a 01       	movw	r10, r20
    6972:	89 01       	movw	r16, r18
    uint16_t count;

    if (initdone == 0)
    6974:	80 91 9e 03 	lds	r24, 0x039E
    6978:	88 23       	and	r24, r24
    697a:	09 f4       	brne	.+2      	; 0x697e <readFlash+0x24>
    697c:	69 c0       	rjmp	.+210    	; 0x6a50 <readFlash+0xf6>
    {
        atmel_flash_init();
    }
    atmel_flash_addr = pagenum * 264 + offset;
    697e:	6d 2d       	mov	r22, r13
    6980:	70 e0       	ldi	r23, 0x00	; 0
    6982:	88 e0       	ldi	r24, 0x08	; 8
    6984:	91 e0       	ldi	r25, 0x01	; 1
    6986:	9c 01       	movw	r18, r24
    6988:	e2 9e       	mul	r14, r18
    698a:	c0 01       	movw	r24, r0
    698c:	e3 9e       	mul	r14, r19
    698e:	90 0d       	add	r25, r0
    6990:	f2 9e       	mul	r15, r18
    6992:	90 0d       	add	r25, r0
    6994:	11 24       	eor	r1, r1
    6996:	86 0f       	add	r24, r22
    6998:	97 1f       	adc	r25, r23
    699a:	aa 27       	eor	r26, r26
    699c:	97 fd       	sbrc	r25, 7
    699e:	a0 95       	com	r26
    69a0:	ba 2f       	mov	r27, r26
    69a2:	80 93 96 03 	sts	0x0396, r24
    69a6:	90 93 97 03 	sts	0x0397, r25
    69aa:	a0 93 98 03 	sts	0x0398, r26
    69ae:	b0 93 99 03 	sts	0x0399, r27
    if (offset + NumOfBytes > 256)
    69b2:	c8 01       	movw	r24, r16
    69b4:	86 0f       	add	r24, r22
    69b6:	97 1f       	adc	r25, r23
    69b8:	81 50       	subi	r24, 0x01	; 1
    69ba:	91 40       	sbci	r25, 0x01	; 1
    69bc:	0c f4       	brge	.+2      	; 0x69c0 <readFlash+0x66>
    69be:	46 c0       	rjmp	.+140    	; 0x6a4c <readFlash+0xf2>
    {
        count = 256 - offset;
    69c0:	c0 e0       	ldi	r28, 0x00	; 0
    69c2:	d1 e0       	ldi	r29, 0x01	; 1
    69c4:	c6 1b       	sub	r28, r22
    69c6:	d7 0b       	sbc	r29, r23
    }
    else
    {
        count = NumOfBytes;
    }
    while (atmel_flash_busy())
    69c8:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    69cc:	88 23       	and	r24, r24
    69ce:	e1 f7       	brne	.-8      	; 0x69c8 <readFlash+0x6e>
        ;
    dev_read_atmel_flash(buffer, count);
    69d0:	c5 01       	movw	r24, r10
    69d2:	be 01       	movw	r22, r28
    69d4:	0e 94 08 34 	call	0x6810	; 0x6810 <dev_read_atmel_flash>
    while (atmel_flash_busy())
    69d8:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    69dc:	88 23       	and	r24, r24
    69de:	e1 f7       	brne	.-8      	; 0x69d8 <readFlash+0x7e>
        ;
    buffer = (void *)((char *)buffer + count);
    if (count < NumOfBytes)
    69e0:	c0 17       	cp	r28, r16
    69e2:	d1 07       	cpc	r29, r17
    69e4:	48 f5       	brcc	.+82     	; 0x6a38 <readFlash+0xde>
    {
        atmel_flash_addr = (pagenum + 1) * 264;
    69e6:	08 94       	sec
    69e8:	e1 1c       	adc	r14, r1
    69ea:	f1 1c       	adc	r15, r1
    69ec:	88 e0       	ldi	r24, 0x08	; 8
    69ee:	91 e0       	ldi	r25, 0x01	; 1
    69f0:	9c 01       	movw	r18, r24
    69f2:	e2 9e       	mul	r14, r18
    69f4:	c0 01       	movw	r24, r0
    69f6:	e3 9e       	mul	r14, r19
    69f8:	90 0d       	add	r25, r0
    69fa:	f2 9e       	mul	r15, r18
    69fc:	90 0d       	add	r25, r0
    69fe:	11 24       	eor	r1, r1
    6a00:	aa 27       	eor	r26, r26
    6a02:	97 fd       	sbrc	r25, 7
    6a04:	a0 95       	com	r26
    6a06:	ba 2f       	mov	r27, r26
    6a08:	80 93 96 03 	sts	0x0396, r24
    6a0c:	90 93 97 03 	sts	0x0397, r25
    6a10:	a0 93 98 03 	sts	0x0398, r26
    6a14:	b0 93 99 03 	sts	0x0399, r27
        count = NumOfBytes - count;
        while (atmel_flash_busy())
    6a18:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6a1c:	88 23       	and	r24, r24
    6a1e:	e1 f7       	brne	.-8      	; 0x6a18 <readFlash+0xbe>
            ;
        dev_read_atmel_flash(buffer, count);
    6a20:	0c 1b       	sub	r16, r28
    6a22:	1d 0b       	sbc	r17, r29
    6a24:	c5 01       	movw	r24, r10
    6a26:	8c 0f       	add	r24, r28
    6a28:	9d 1f       	adc	r25, r29
    6a2a:	b8 01       	movw	r22, r16
    6a2c:	0e 94 08 34 	call	0x6810	; 0x6810 <dev_read_atmel_flash>
        while (atmel_flash_busy())
    6a30:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <atmel_flash_busy>
    6a34:	88 23       	and	r24, r24
    6a36:	e1 f7       	brne	.-8      	; 0x6a30 <readFlash+0xd6>
            ;
    }
    return;
}
    6a38:	df 91       	pop	r29
    6a3a:	cf 91       	pop	r28
    6a3c:	1f 91       	pop	r17
    6a3e:	0f 91       	pop	r16
    6a40:	ff 90       	pop	r15
    6a42:	ef 90       	pop	r14
    6a44:	df 90       	pop	r13
    6a46:	bf 90       	pop	r11
    6a48:	af 90       	pop	r10
    6a4a:	08 95       	ret
    {
        count = 256 - offset;
    }
    else
    {
        count = NumOfBytes;
    6a4c:	e8 01       	movw	r28, r16
    6a4e:	bc cf       	rjmp	.-136    	; 0x69c8 <readFlash+0x6e>
{
    uint16_t count;

    if (initdone == 0)
    {
        atmel_flash_init();
    6a50:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <atmel_flash_init>
    6a54:	94 cf       	rjmp	.-216    	; 0x697e <readFlash+0x24>

00006a56 <copyPage>:
    writeFlash(pagenum, offset, buffer, NumOfBytes);
}

void copyPage(int sourcepage, int targetpage)
{		
	   copyFlash(sourcepage, targetpage); 
    6a56:	0e 94 70 32 	call	0x64e0	; 0x64e0 <copyFlash>
}
    6a5a:	08 95       	ret

00006a5c <writepagestorage>:

//Write to a page.  Intra-page only. 
void writepagestorage(int pagenum, uint8_t offset, void *buffer, int
                      NumOfBytes)
{
    writeFlash(pagenum, offset, buffer, NumOfBytes);
    6a5c:	0e 94 8a 33 	call	0x6714	; 0x6714 <writeFlash>
}
    6a60:	08 95       	ret

00006a62 <readpagestorage>:
}

//Read from a page. Intra-page only.
void readpagestorage(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
    readFlash(pagenum, offset, buffer, NumOfBytes);
    6a62:	0e 94 ad 34 	call	0x695a	; 0x695a <readFlash>
}
    6a66:	08 95       	ret

00006a68 <pagestorageinit>:
}

//Init the page storage
void pagestorageinit()
{
    atmel_flash_init();
    6a68:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <atmel_flash_init>
}
    6a6c:	08 95       	ret

00006a6e <getpagenumber>:
}

//Get the total number of pages
uint16_t getpagenumber()
{
    return atmel_flash_pagenumber();
    6a6e:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <atmel_flash_pagenumber>
}
    6a72:	08 95       	ret

00006a74 <getpagesize>:
#ifdef PLATFORM_AVR
#include "./atmelflash.h"
//Get the size of each page
uint16_t getpagesize()
{
    return atmel_flash_pagesize();
    6a74:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <atmel_flash_pagesize>
}
    6a78:	08 95       	ret

00006a7a <HPLClock_Timer3_Start>:
void HPLClock_Timer3_Start()
{
    //Prescaler 0
    //TCCR1B |= (1 << 0); // Timer1 (Clock)
    //Set up the tccr to be driven by the clock with cycle wise driven 
    sbi(TCCR3B, CS30);
    6a7a:	ea e8       	ldi	r30, 0x8A	; 138
    6a7c:	f0 e0       	ldi	r31, 0x00	; 0
    6a7e:	80 81       	ld	r24, Z
    6a80:	81 60       	ori	r24, 0x01	; 1
    6a82:	80 83       	st	Z, r24
    //Configure Timer1 to be CTC mode 
    sbi(TCCR3B, WGM32);
    6a84:	80 81       	ld	r24, Z
    6a86:	88 60       	ori	r24, 0x08	; 8
    6a88:	80 83       	st	Z, r24
    //Enable interrupt 
    sbi(ETIMSK, OCIE3A);
    6a8a:	ed e7       	ldi	r30, 0x7D	; 125
    6a8c:	f0 e0       	ldi	r31, 0x00	; 0
    6a8e:	80 81       	ld	r24, Z
    6a90:	80 61       	ori	r24, 0x10	; 16
    6a92:	80 83       	st	Z, r24

    sbi(ETIFR, OCF3A);
    6a94:	ec e7       	ldi	r30, 0x7C	; 124
    6a96:	f0 e0       	ldi	r31, 0x00	; 0
    6a98:	80 81       	ld	r24, Z
    6a9a:	80 61       	ori	r24, 0x10	; 16
    6a9c:	80 83       	st	Z, r24
    //Once the 50000 compared, then itnerrupt 
    //So one interrupt every 50000 cpu cycles 
    OCR3A = 50000;
    6a9e:	80 e5       	ldi	r24, 0x50	; 80
    6aa0:	93 ec       	ldi	r25, 0xC3	; 195
    6aa2:	90 93 87 00 	sts	0x0087, r25
    6aa6:	80 93 86 00 	sts	0x0086, r24
    //Counters 
    lowcounter = highcounter = 0;
    6aaa:	10 92 db 05 	sts	0x05DB, r1
    6aae:	10 92 da 05 	sts	0x05DA, r1
    6ab2:	80 91 da 05 	lds	r24, 0x05DA
    6ab6:	90 91 db 05 	lds	r25, 0x05DB
    6aba:	90 93 e1 05 	sts	0x05E1, r25
    6abe:	80 93 e0 05 	sts	0x05E0, r24
    //Zero timer
    TCNT3 = 0;
    6ac2:	10 92 89 00 	sts	0x0089, r1
    6ac6:	10 92 88 00 	sts	0x0088, r1
	historyvalue = 0; 
    6aca:	10 92 d6 05 	sts	0x05D6, r1
    6ace:	10 92 d7 05 	sts	0x05D7, r1
    6ad2:	10 92 d8 05 	sts	0x05D8, r1
    6ad6:	10 92 d9 05 	sts	0x05D9, r1
}
    6ada:	08 95       	ret

00006adc <HPLClock_Timer3_Stop>:

//-------------------------------------------------------------------------
void HPLClock_Timer3_Stop()
{
    //stop the timer 
    cbi(TCCR3B, CS30);
    6adc:	ea e8       	ldi	r30, 0x8A	; 138
    6ade:	f0 e0       	ldi	r31, 0x00	; 0
    6ae0:	80 81       	ld	r24, Z
    6ae2:	8e 7f       	andi	r24, 0xFE	; 254
    6ae4:	80 83       	st	Z, r24
}
    6ae6:	08 95       	ret

00006ae8 <HPLClock_readTimeCounterHigh>:

//-------------------------------------------------------------------------
uint16_t HPLClock_readTimeCounterHigh()
{
    return highcounter;
    6ae8:	20 91 da 05 	lds	r18, 0x05DA
    6aec:	30 91 db 05 	lds	r19, 0x05DB
}
    6af0:	c9 01       	movw	r24, r18
    6af2:	08 95       	ret

00006af4 <HPLClock_readTimeCounterLow>:

//-------------------------------------------------------------------------
inline uint32_t HPLClock_readTimeCounterLow()
{
    6af4:	1f 93       	push	r17
    6af6:	cf 93       	push	r28
    6af8:	df 93       	push	r29
    uint16_t m;
    uint32_t retval;
    uint16_t tempcounter;
    unsigned char sreg;

    sreg = SREG;
    6afa:	1f b7       	in	r17, 0x3f	; 63
    //Disable interrupt
    asm volatile ("cli");
    6afc:	f8 94       	cli

    temp = TCNT3;
    6afe:	c0 91 88 00 	lds	r28, 0x0088
    6b02:	d0 91 89 00 	lds	r29, 0x0089
    //check against the problem when the read of TCNT is not atomic 
    m = temp & 0xff;
    if ((m == 0xfe) || (m == 0xff))
    6b06:	ce 01       	movw	r24, r28
    6b08:	90 70       	andi	r25, 0x00	; 0
    6b0a:	8e 5f       	subi	r24, 0xFE	; 254
    6b0c:	90 40       	sbci	r25, 0x00	; 0
    6b0e:	02 97       	sbiw	r24, 0x02	; 2
    6b10:	c0 f1       	brcs	.+112    	; 0x6b82 <HPLClock_readTimeCounterLow+0x8e>
    {
        temp = temp - 0x100;
    }
    //Solve the problem that the counter might should have increased 
    if (temp <= 1)
    6b12:	c2 30       	cpi	r28, 0x02	; 2
    6b14:	d1 05       	cpc	r29, r1
    6b16:	d0 f1       	brcs	.+116    	; 0x6b8c <HPLClock_readTimeCounterLow+0x98>
    {
        tempcounter = lowcounter + 1;
    }
    else
    {
        tempcounter = lowcounter;
    6b18:	60 91 e0 05 	lds	r22, 0x05E0
    6b1c:	70 91 e1 05 	lds	r23, 0x05E1
    }
    //get the return value 
    retval = (((uint32_t) tempcounter) * 50000) + (uint32_t) temp;
    6b20:	80 e0       	ldi	r24, 0x00	; 0
    6b22:	90 e0       	ldi	r25, 0x00	; 0
    6b24:	20 e5       	ldi	r18, 0x50	; 80
    6b26:	33 ec       	ldi	r19, 0xC3	; 195
    6b28:	40 e0       	ldi	r20, 0x00	; 0
    6b2a:	50 e0       	ldi	r21, 0x00	; 0
    6b2c:	0e 94 77 55 	call	0xaaee	; 0xaaee <__mulsi3>
    6b30:	9b 01       	movw	r18, r22
    6b32:	ac 01       	movw	r20, r24
    6b34:	ce 01       	movw	r24, r28
    6b36:	a0 e0       	ldi	r26, 0x00	; 0
    6b38:	b0 e0       	ldi	r27, 0x00	; 0
    6b3a:	28 0f       	add	r18, r24
    6b3c:	39 1f       	adc	r19, r25
    6b3e:	4a 1f       	adc	r20, r26
    6b40:	5b 1f       	adc	r21, r27
    //restore sreg
    SREG = sreg;
    6b42:	1f bf       	out	0x3f, r17	; 63
    //return 
	if (historyvalue > retval)
    6b44:	80 91 d6 05 	lds	r24, 0x05D6
    6b48:	90 91 d7 05 	lds	r25, 0x05D7
    6b4c:	a0 91 d8 05 	lds	r26, 0x05D8
    6b50:	b0 91 d9 05 	lds	r27, 0x05D9
    6b54:	28 17       	cp	r18, r24
    6b56:	39 07       	cpc	r19, r25
    6b58:	4a 07       	cpc	r20, r26
    6b5a:	5b 07       	cpc	r21, r27
    6b5c:	20 f4       	brcc	.+8      	; 0x6b66 <HPLClock_readTimeCounterLow+0x72>
	 {
	  retval += 50000;
    6b5e:	20 5b       	subi	r18, 0xB0	; 176
    6b60:	3c 43       	sbci	r19, 0x3C	; 60
    6b62:	4f 4f       	sbci	r20, 0xFF	; 255
    6b64:	5f 4f       	sbci	r21, 0xFF	; 255
	  
	 }

   historyvalue = retval; 
    6b66:	20 93 d6 05 	sts	0x05D6, r18
    6b6a:	30 93 d7 05 	sts	0x05D7, r19
    6b6e:	40 93 d8 05 	sts	0x05D8, r20
    6b72:	50 93 d9 05 	sts	0x05D9, r21
	 
    

    return retval;
}
    6b76:	b9 01       	movw	r22, r18
    6b78:	ca 01       	movw	r24, r20
    6b7a:	df 91       	pop	r29
    6b7c:	cf 91       	pop	r28
    6b7e:	1f 91       	pop	r17
    6b80:	08 95       	ret
    temp = TCNT3;
    //check against the problem when the read of TCNT is not atomic 
    m = temp & 0xff;
    if ((m == 0xfe) || (m == 0xff))
    {
        temp = temp - 0x100;
    6b82:	c0 50       	subi	r28, 0x00	; 0
    6b84:	d1 40       	sbci	r29, 0x01	; 1
    }
    //Solve the problem that the counter might should have increased 
    if (temp <= 1)
    6b86:	c2 30       	cpi	r28, 0x02	; 2
    6b88:	d1 05       	cpc	r29, r1
    6b8a:	30 f6       	brcc	.-116    	; 0x6b18 <HPLClock_readTimeCounterLow+0x24>
    {
        tempcounter = lowcounter + 1;
    6b8c:	60 91 e0 05 	lds	r22, 0x05E0
    6b90:	70 91 e1 05 	lds	r23, 0x05E1
    6b94:	6f 5f       	subi	r22, 0xFF	; 255
    6b96:	7f 4f       	sbci	r23, 0xFF	; 255
    6b98:	c3 cf       	rjmp	.-122    	; 0x6b20 <HPLClock_readTimeCounterLow+0x2c>

00006b9a <HPLClock_Clock_readCounter>:
}

//-------------------------------------------------------------------------
inline uint8_t HPLClock_Clock_readCounter(void)
{
    return TCNT0;
    6b9a:	82 b7       	in	r24, 0x32	; 50
    //return * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x32 + 0x20);
}
    6b9c:	08 95       	ret

00006b9e <HPLClock_Clock_getInterval>:

//-------------------------------------------------------------------------

inline uint8_t HPLClock_Clock_getInterval(void)
{
    return OCR0;
    6b9e:	81 b7       	in	r24, 0x31	; 49
    //return * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20);
}
    6ba0:	08 95       	ret

00006ba2 <HPLClock_Clock_setInterval>:
}

//-------------------------------------------------------------------------
inline void HPLClock_Clock_setInterval(uint8_t value)
{
    OCR0 = value;
    6ba2:	81 bf       	out	0x31, r24	; 49
    //* (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20) = value;
}
    6ba4:	08 95       	ret

00006ba6 <__vector_26>:

//_INTERRUPT(SIG_OUTPUT_COMPARE0)
//void __vector_15() __attribute__ ((interrupt, spontaneous, C))
//void __attribute((interrupt))   __vector_15(void)
ISR(TIMER3_COMPA_vect)
{
    6ba6:	1f 92       	push	r1
    6ba8:	0f 92       	push	r0
    6baa:	0f b6       	in	r0, 0x3f	; 63
    6bac:	0f 92       	push	r0
    6bae:	0b b6       	in	r0, 0x3b	; 59
    6bb0:	0f 92       	push	r0
    6bb2:	11 24       	eor	r1, r1
    6bb4:	2f 93       	push	r18
    6bb6:	3f 93       	push	r19
    6bb8:	4f 93       	push	r20
    6bba:	5f 93       	push	r21
    6bbc:	6f 93       	push	r22
    6bbe:	7f 93       	push	r23
    6bc0:	8f 93       	push	r24
    6bc2:	9f 93       	push	r25
    6bc4:	af 93       	push	r26
    6bc6:	bf 93       	push	r27
    6bc8:	ef 93       	push	r30
    6bca:	ff 93       	push	r31
    _atomic_t _atomic;

    _atomic = _atomic_start_avr();
    6bcc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_atomic_start_avr>
    6bd0:	28 2f       	mov	r18, r24
    lowcounter++;
    6bd2:	80 91 e0 05 	lds	r24, 0x05E0
    6bd6:	90 91 e1 05 	lds	r25, 0x05E1
    6bda:	01 96       	adiw	r24, 0x01	; 1
    6bdc:	90 93 e1 05 	sts	0x05E1, r25
    6be0:	80 93 e0 05 	sts	0x05E0, r24
    if (lowcounter == 50000)
    6be4:	80 91 e0 05 	lds	r24, 0x05E0
    6be8:	90 91 e1 05 	lds	r25, 0x05E1
    6bec:	80 55       	subi	r24, 0x50	; 80
    6bee:	93 4c       	sbci	r25, 0xC3	; 195
    6bf0:	69 f4       	brne	.+26     	; 0x6c0c <__vector_26+0x66>
    {
        highcounter++;
    6bf2:	80 91 da 05 	lds	r24, 0x05DA
    6bf6:	90 91 db 05 	lds	r25, 0x05DB
    6bfa:	01 96       	adiw	r24, 0x01	; 1
    6bfc:	90 93 db 05 	sts	0x05DB, r25
    6c00:	80 93 da 05 	sts	0x05DA, r24
        lowcounter = 0;
    6c04:	10 92 e1 05 	sts	0x05E1, r1
    6c08:	10 92 e0 05 	sts	0x05E0, r1
    }
    _atomic_end_avr(_atomic);
    6c0c:	82 2f       	mov	r24, r18
    6c0e:	0e 94 67 02 	call	0x4ce	; 0x4ce <_atomic_end_avr>
}
    6c12:	ff 91       	pop	r31
    6c14:	ef 91       	pop	r30
    6c16:	bf 91       	pop	r27
    6c18:	af 91       	pop	r26
    6c1a:	9f 91       	pop	r25
    6c1c:	8f 91       	pop	r24
    6c1e:	7f 91       	pop	r23
    6c20:	6f 91       	pop	r22
    6c22:	5f 91       	pop	r21
    6c24:	4f 91       	pop	r20
    6c26:	3f 91       	pop	r19
    6c28:	2f 91       	pop	r18
    6c2a:	0f 90       	pop	r0
    6c2c:	0b be       	out	0x3b, r0	; 59
    6c2e:	0f 90       	pop	r0
    6c30:	0f be       	out	0x3f, r0	; 63
    6c32:	0f 90       	pop	r0
    6c34:	1f 90       	pop	r1
    6c36:	18 95       	reti

00006c38 <HPLClock_Clock_setRate>:
    //* (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20) = value;
}

//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_setRate(char interval, char scale)
{
    6c38:	0f 93       	push	r16
    6c3a:	1f 93       	push	r17
    6c3c:	08 2f       	mov	r16, r24
    6c3e:	16 2f       	mov	r17, r22
    scale &= 0x7;
    6c40:	17 70       	andi	r17, 0x07	; 7
    scale |= 0x8;
    //shoudl be 1011 here in scale 
    {
        _atomic_t _atomic = _atomic_start();
    6c42:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            cbi(TIMSK, TOIE0);
    6c46:	97 b7       	in	r25, 0x37	; 55
    6c48:	9e 7f       	andi	r25, 0xFE	; 254
    6c4a:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, OCIE0);  //Disable TC0 interrupt
    6c4c:	97 b7       	in	r25, 0x37	; 55
    6c4e:	9d 7f       	andi	r25, 0xFD	; 253
    6c50:	97 bf       	out	0x37, r25	; 55
            sbi(ASSR, AS0);     //set Timer/Counter0 to be asynchronous
    6c52:	90 b7       	in	r25, 0x30	; 48
    6c54:	98 60       	ori	r25, 0x08	; 8
    6c56:	90 bf       	out	0x30, r25	; 48
            //from the CPU clock with a second external
            //clock(32,768kHz)driving it.
            outp(scale, TCCR0); //prescale the timer to be clock/128 to make it
    6c58:	18 60       	ori	r17, 0x08	; 8
    6c5a:	13 bf       	out	0x33, r17	; 51
            outp(0, TCNT0);
    6c5c:	12 be       	out	0x32, r1	; 50
            outp(interval, OCR0);
    6c5e:	01 bf       	out	0x31, r16	; 49
            sbi(TIMSK, OCIE0);
    6c60:	97 b7       	in	r25, 0x37	; 55
    6c62:	92 60       	ori	r25, 0x02	; 2
    6c64:	97 bf       	out	0x37, r25	; 55
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x32 + 0x20) = 0;
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20) = interval;
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x37 + 0x20) |= 1 << 1;
             */
        }
        _atomic_end(_atomic);
    6c66:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return SUCCESS;
}
    6c6a:	81 e0       	ldi	r24, 0x01	; 1
    6c6c:	1f 91       	pop	r17
    6c6e:	0f 91       	pop	r16
    6c70:	08 95       	ret

00006c72 <HPLClock_Clock_fire>:
//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_fire(void)
{
    unsigned char result;

    result = TimerM_Clock_fire();
    6c72:	0e 94 12 38 	call	0x7024	; 0x7024 <TimerM_Clock_fire>
    return result;
}
    6c76:	08 95       	ret

00006c78 <__vector_15>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
_INTERRUPT(SIG_OUTPUT_COMPARE0)
{
    6c78:	78 94       	sei
    6c7a:	1f 92       	push	r1
    6c7c:	0f 92       	push	r0
    6c7e:	0f b6       	in	r0, 0x3f	; 63
    6c80:	0f 92       	push	r0
    6c82:	0b b6       	in	r0, 0x3b	; 59
    6c84:	0f 92       	push	r0
    6c86:	11 24       	eor	r1, r1
    6c88:	0f 93       	push	r16
    6c8a:	1f 93       	push	r17
    6c8c:	2f 93       	push	r18
    6c8e:	3f 93       	push	r19
    6c90:	4f 93       	push	r20
    6c92:	5f 93       	push	r21
    6c94:	6f 93       	push	r22
    6c96:	7f 93       	push	r23
    6c98:	8f 93       	push	r24
    6c9a:	9f 93       	push	r25
    6c9c:	af 93       	push	r26
    6c9e:	bf 93       	push	r27
    6ca0:	ef 93       	push	r30
    6ca2:	ff 93       	push	r31
    _atomic_t _atomic;
    uint8_t isthreadtrue;

    isthreadtrue = 0;
    _atomic = _atomic_start();
    6ca4:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    6ca8:	18 2f       	mov	r17, r24
    if (is_thread())
    6caa:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <is_thread>
    6cae:	88 23       	and	r24, r24
    6cb0:	09 f0       	breq	.+2      	; 0x6cb4 <__vector_15+0x3c>
    6cb2:	46 c0       	rjmp	.+140    	; 0x6d40 <__vector_15+0xc8>
    6cb4:	00 e0       	ldi	r16, 0x00	; 0
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    6cb6:	81 2f       	mov	r24, r17
    6cb8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    {
        _atomic = _atomic_start();
    6cbc:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    6cc0:	98 2f       	mov	r25, r24
        {
            if (HPLClock_set_flag)
    6cc2:	80 91 de 05 	lds	r24, 0x05DE
    6cc6:	88 23       	and	r24, r24
    6cc8:	69 f0       	breq	.+26     	; 0x6ce4 <__vector_15+0x6c>
            {
                HPLClock_mscale = HPLClock_nextScale;
    6cca:	80 91 dd 05 	lds	r24, 0x05DD
    6cce:	80 93 dc 05 	sts	0x05DC, r24
                HPLClock_nextScale |= 0x8;
    6cd2:	88 60       	ori	r24, 0x08	; 8
    6cd4:	80 93 dd 05 	sts	0x05DD, r24
                outp(HPLClock_nextScale, TCCR0);
    6cd8:	83 bf       	out	0x33, r24	; 51
                outp(HPLClock_minterval, OCR0);
    6cda:	80 91 df 05 	lds	r24, 0x05DF
    6cde:	81 bf       	out	0x31, r24	; 49
                HPLClock_set_flag = 0;
    6ce0:	10 92 de 05 	sts	0x05DE, r1
            }
        }
        _atomic_end(_atomic);
    6ce4:	89 2f       	mov	r24, r25
    6ce6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_fire(void)
{
    unsigned char result;

    result = TimerM_Clock_fire();
    6cea:	0e 94 12 38 	call	0x7024	; 0x7024 <TimerM_Clock_fire>
            }
        }
        _atomic_end(_atomic);
    }
    HPLClock_Clock_fire();
    _atomic = _atomic_start();
    6cee:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    6cf2:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
    6cf4:	01 30       	cpi	r16, 0x01	; 1
    6cf6:	61 f4       	brne	.+24     	; 0x6d10 <__vector_15+0x98>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    6cf8:	8d b7       	in	r24, 0x3d	; 61
    6cfa:	9e b7       	in	r25, 0x3e	; 62
    6cfc:	90 93 5f 05 	sts	0x055F, r25
    6d00:	80 93 5e 05 	sts	0x055E, r24
    6d04:	80 91 b1 05 	lds	r24, 0x05B1
    6d08:	90 91 b2 05 	lds	r25, 0x05B2
    6d0c:	9e bf       	out	0x3e, r25	; 62
    6d0e:	8d bf       	out	0x3d, r24	; 61
        //thread_yield();
    }
    _atomic_end(_atomic);
    6d10:	82 2f       	mov	r24, r18
    6d12:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    //SHOWME(timer 0 end\n);
}
    6d16:	ff 91       	pop	r31
    6d18:	ef 91       	pop	r30
    6d1a:	bf 91       	pop	r27
    6d1c:	af 91       	pop	r26
    6d1e:	9f 91       	pop	r25
    6d20:	8f 91       	pop	r24
    6d22:	7f 91       	pop	r23
    6d24:	6f 91       	pop	r22
    6d26:	5f 91       	pop	r21
    6d28:	4f 91       	pop	r20
    6d2a:	3f 91       	pop	r19
    6d2c:	2f 91       	pop	r18
    6d2e:	1f 91       	pop	r17
    6d30:	0f 91       	pop	r16
    6d32:	0f 90       	pop	r0
    6d34:	0b be       	out	0x3b, r0	; 59
    6d36:	0f 90       	pop	r0
    6d38:	0f be       	out	0x3f, r0	; 63
    6d3a:	0f 90       	pop	r0
    6d3c:	1f 90       	pop	r1
    6d3e:	18 95       	reti
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    6d40:	8d b7       	in	r24, 0x3d	; 61
    6d42:	9e b7       	in	r25, 0x3e	; 62
    6d44:	90 93 b2 05 	sts	0x05B2, r25
    6d48:	80 93 b1 05 	sts	0x05B1, r24
    6d4c:	80 91 5e 05 	lds	r24, 0x055E
    6d50:	90 91 5f 05 	lds	r25, 0x055F
    6d54:	9e bf       	out	0x3e, r25	; 62
    6d56:	8d bf       	out	0x3d, r24	; 61
    6d58:	01 e0       	ldi	r16, 0x01	; 1
    6d5a:	ad cf       	rjmp	.-166    	; 0x6cb6 <__vector_15+0x3e>

00006d5c <timercallbackinvoke>:
//-------------------------------------------------------------------------
void timercallbackinvoke(uint8_t id)
{
    uint8_t index = id - 18;

    if (timercallback[index] != NULL)
    6d5c:	e8 2f       	mov	r30, r24
    6d5e:	e2 51       	subi	r30, 0x12	; 18
    6d60:	f0 e0       	ldi	r31, 0x00	; 0
    6d62:	ee 0f       	add	r30, r30
    6d64:	ff 1f       	adc	r31, r31
    6d66:	eb 51       	subi	r30, 0x1B	; 27
    6d68:	fa 4f       	sbci	r31, 0xFA	; 250
    6d6a:	01 90       	ld	r0, Z+
    6d6c:	f0 81       	ld	r31, Z
    6d6e:	e0 2d       	mov	r30, r0
    6d70:	30 97       	sbiw	r30, 0x00	; 0
    6d72:	09 f0       	breq	.+2      	; 0x6d76 <timercallbackinvoke+0x1a>
    {
        (*timercallback[index]) ();
    6d74:	09 95       	icall
    6d76:	08 95       	ret

00006d78 <GenericTimerFired>:


    unsigned char result;
    
    //0, 1, 2 for threads
    switch (id)
    6d78:	86 30       	cpi	r24, 0x06	; 6
    6d7a:	09 f4       	brne	.+2      	; 0x6d7e <GenericTimerFired+0x6>
    6d7c:	6d c0       	rjmp	.+218    	; 0x6e58 <GenericTimerFired+0xe0>
    6d7e:	87 30       	cpi	r24, 0x07	; 7
    6d80:	70 f0       	brcs	.+28     	; 0x6d9e <GenericTimerFired+0x26>
    6d82:	8a 30       	cpi	r24, 0x0A	; 10
    6d84:	09 f4       	brne	.+2      	; 0x6d88 <GenericTimerFired+0x10>
    6d86:	59 c0       	rjmp	.+178    	; 0x6e3a <GenericTimerFired+0xc2>
    6d88:	8b 30       	cpi	r24, 0x0B	; 11
    6d8a:	b8 f4       	brcc	.+46     	; 0x6dba <GenericTimerFired+0x42>
    6d8c:	87 30       	cpi	r24, 0x07	; 7
    6d8e:	09 f4       	brne	.+2      	; 0x6d92 <GenericTimerFired+0x1a>
    6d90:	50 c0       	rjmp	.+160    	; 0x6e32 <GenericTimerFired+0xba>
    6d92:	89 30       	cpi	r24, 0x09	; 9
    6d94:	11 f0       	breq	.+4      	; 0x6d9a <GenericTimerFired+0x22>
	      		 enabled = false; 
	      }
       break; 
	
    default:
        timercallbackinvoke(id);
    6d96:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <timercallbackinvoke>
        result = SUCCESS;
    }
    return SUCCESS;
}
    6d9a:	81 e0       	ldi	r24, 0x01	; 1
    6d9c:	08 95       	ret


    unsigned char result;
    
    //0, 1, 2 for threads
    switch (id)
    6d9e:	82 30       	cpi	r24, 0x02	; 2
    6da0:	09 f4       	brne	.+2      	; 0x6da4 <GenericTimerFired+0x2c>
    6da2:	56 c0       	rjmp	.+172    	; 0x6e50 <GenericTimerFired+0xd8>
    6da4:	83 30       	cpi	r24, 0x03	; 3
    6da6:	a8 f1       	brcs	.+106    	; 0x6e12 <GenericTimerFired+0x9a>
    6da8:	84 30       	cpi	r24, 0x04	; 4
    6daa:	09 f4       	brne	.+2      	; 0x6dae <GenericTimerFired+0x36>
    6dac:	49 c0       	rjmp	.+146    	; 0x6e40 <GenericTimerFired+0xc8>
    6dae:	85 30       	cpi	r24, 0x05	; 5
    6db0:	c8 f1       	brcs	.+114    	; 0x6e24 <GenericTimerFired+0xac>
        break;
    case 4:
        ServiceTimerFired(4);
        break;
    case 5:
        ServiceTimerFired(5);
    6db2:	85 e0       	ldi	r24, 0x05	; 5
    6db4:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <ServiceTimerFired>
    6db8:	f0 cf       	rjmp	.-32     	; 0x6d9a <GenericTimerFired+0x22>


    unsigned char result;
    
    //0, 1, 2 for threads
    switch (id)
    6dba:	8c 30       	cpi	r24, 0x0C	; 12
    6dbc:	71 f3       	breq	.-36     	; 0x6d9a <GenericTimerFired+0x22>
    6dbe:	8c 30       	cpi	r24, 0x0C	; 12
    6dc0:	a8 f1       	brcs	.+106    	; 0x6e2c <GenericTimerFired+0xb4>
    6dc2:	8f 30       	cpi	r24, 0x0F	; 15
    6dc4:	41 f7       	brne	.-48     	; 0x6d96 <GenericTimerFired+0x1e>
	    //  #endif
	      
	      {
	      	
	      	datapayload *p = (datapayload *)datamsg.data; 
	      	p->index = currentcounter; 
    6dc6:	80 91 e3 05 	lds	r24, 0x05E3
    6dca:	90 91 e4 05 	lds	r25, 0x05E4
    6dce:	90 93 00 06 	sts	0x0600, r25
    6dd2:	80 93 ff 05 	sts	0x05FF, r24
	      	p->power = currentpower;
    6dd6:	80 91 69 06 	lds	r24, 0x0669
    6dda:	80 93 01 06 	sts	0x0601, r24
            cc2420controlm_CC2420Control_TunePower(currentpower); 
    6dde:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <cc2420controlm_CC2420Control_TunePower>

	      	if (enabled == true)
    6de2:	80 91 e2 05 	lds	r24, 0x05E2
    6de6:	81 30       	cpi	r24, 0x01	; 1
    6de8:	09 f4       	brne	.+2      	; 0x6dec <GenericTimerFired+0x74>
    6dea:	44 c0       	rjmp	.+136    	; 0x6e74 <GenericTimerFired+0xfc>
	      	{	        
	        Leds_redToggle();
	        AMStandard_SendMsg_send(16, 0xFFFF, 10, &datamsg);
	        }
	      	currentcounter++;
    6dec:	80 91 e3 05 	lds	r24, 0x05E3
    6df0:	90 91 e4 05 	lds	r25, 0x05E4
    6df4:	01 96       	adiw	r24, 0x01	; 1
    6df6:	90 93 e4 05 	sts	0x05E4, r25
    6dfa:	80 93 e3 05 	sts	0x05E3, r24
	      	if (currentcounter == 500)
    6dfe:	84 5f       	subi	r24, 0xF4	; 244
    6e00:	91 40       	sbci	r25, 0x01	; 1
    6e02:	71 f1       	breq	.+92     	; 0x6e60 <GenericTimerFired+0xe8>
    6e04:	80 91 69 06 	lds	r24, 0x0669
	      		 { currentcounter = 0;
	      		 	 currentpower+=3;
	      		 }
	      	if (currentpower == 21)
    6e08:	85 31       	cpi	r24, 0x15	; 21
    6e0a:	39 f6       	brne	.-114    	; 0x6d9a <GenericTimerFired+0x22>
	      		 enabled = false; 
    6e0c:	10 92 e2 05 	sts	0x05E2, r1
    6e10:	c4 cf       	rjmp	.-120    	; 0x6d9a <GenericTimerFired+0x22>


    unsigned char result;
    
    //0, 1, 2 for threads
    switch (id)
    6e12:	88 23       	and	r24, r24
    6e14:	c9 f0       	breq	.+50     	; 0x6e48 <GenericTimerFired+0xd0>
    6e16:	81 30       	cpi	r24, 0x01	; 1
    6e18:	09 f0       	breq	.+2      	; 0x6e1c <GenericTimerFired+0xa4>
    6e1a:	bd cf       	rjmp	.-134    	; 0x6d96 <GenericTimerFired+0x1e>
    {
    case 0:
        ServiceTimerFired(0);
        break;
    case 1:
        ServiceTimerFired(1);
    6e1c:	81 e0       	ldi	r24, 0x01	; 1
    6e1e:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <ServiceTimerFired>
    6e22:	bb cf       	rjmp	.-138    	; 0x6d9a <GenericTimerFired+0x22>
        break;
    case 2:
        ServiceTimerFired(2);
        break;
    case 3:
        ServiceTimerFired(3);
    6e24:	83 e0       	ldi	r24, 0x03	; 3
    6e26:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <ServiceTimerFired>
    6e2a:	b7 cf       	rjmp	.-146    	; 0x6d9a <GenericTimerFired+0x22>
#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    case 10:
        hplcc2420interruptm_FIFOTimer_fired();
        break;
    case 11:
        hplcc2420interruptm_CCATimer_fired();
    6e2c:	0e 94 12 13 	call	0x2624	; 0x2624 <hplcc2420interruptm_CCATimer_fired>
    6e30:	b4 cf       	rjmp	.-152    	; 0x6d9a <GenericTimerFired+0x22>
        break;
    case 6:
        ServiceTimerFired(6);
        break;
    case 7:
        ServiceTimerFired(7);
    6e32:	87 e0       	ldi	r24, 0x07	; 7
    6e34:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <ServiceTimerFired>
    6e38:	b0 cf       	rjmp	.-160    	; 0x6d9a <GenericTimerFired+0x22>
        }
#endif
        break;
#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    case 10:
        hplcc2420interruptm_FIFOTimer_fired();
    6e3a:	0e 94 30 13 	call	0x2660	; 0x2660 <hplcc2420interruptm_FIFOTimer_fired>
    6e3e:	ad cf       	rjmp	.-166    	; 0x6d9a <GenericTimerFired+0x22>
        break;
    case 3:
        ServiceTimerFired(3);
        break;
    case 4:
        ServiceTimerFired(4);
    6e40:	84 e0       	ldi	r24, 0x04	; 4
    6e42:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <ServiceTimerFired>
    6e46:	a9 cf       	rjmp	.-174    	; 0x6d9a <GenericTimerFired+0x22>
    
    //0, 1, 2 for threads
    switch (id)
    {
    case 0:
        ServiceTimerFired(0);
    6e48:	80 e0       	ldi	r24, 0x00	; 0
    6e4a:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <ServiceTimerFired>
    6e4e:	a5 cf       	rjmp	.-182    	; 0x6d9a <GenericTimerFired+0x22>
        break;
    case 1:
        ServiceTimerFired(1);
        break;
    case 2:
        ServiceTimerFired(2);
    6e50:	82 e0       	ldi	r24, 0x02	; 2
    6e52:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <ServiceTimerFired>
    6e56:	a1 cf       	rjmp	.-190    	; 0x6d9a <GenericTimerFired+0x22>
        break;
    case 5:
        ServiceTimerFired(5);
        break;
    case 6:
        ServiceTimerFired(6);
    6e58:	86 e0       	ldi	r24, 0x06	; 6
    6e5a:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <ServiceTimerFired>
    6e5e:	9d cf       	rjmp	.-198    	; 0x6d9a <GenericTimerFired+0x22>
	        Leds_redToggle();
	        AMStandard_SendMsg_send(16, 0xFFFF, 10, &datamsg);
	        }
	      	currentcounter++;
	      	if (currentcounter == 500)
	      		 { currentcounter = 0;
    6e60:	10 92 e4 05 	sts	0x05E4, r1
    6e64:	10 92 e3 05 	sts	0x05E3, r1
	      		 	 currentpower+=3;
    6e68:	80 91 69 06 	lds	r24, 0x0669
    6e6c:	8d 5f       	subi	r24, 0xFD	; 253
    6e6e:	80 93 69 06 	sts	0x0669, r24
    6e72:	ca cf       	rjmp	.-108    	; 0x6e08 <GenericTimerFired+0x90>
	      	p->power = currentpower;
            cc2420controlm_CC2420Control_TunePower(currentpower); 

	      	if (enabled == true)
	      	{	        
	        Leds_redToggle();
    6e74:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <Leds_redToggle>
	        AMStandard_SendMsg_send(16, 0xFFFF, 10, &datamsg);
    6e78:	80 e1       	ldi	r24, 0x10	; 16
    6e7a:	90 e0       	ldi	r25, 0x00	; 0
    6e7c:	6f ef       	ldi	r22, 0xFF	; 255
    6e7e:	7f ef       	ldi	r23, 0xFF	; 255
    6e80:	4a e0       	ldi	r20, 0x0A	; 10
    6e82:	2f ef       	ldi	r18, 0xFF	; 255
    6e84:	35 e0       	ldi	r19, 0x05	; 5
    6e86:	2a 50       	subi	r18, 0x0A	; 10
    6e88:	30 40       	sbci	r19, 0x00	; 0
    6e8a:	0e 94 05 09 	call	0x120a	; 0x120a <AMStandard_SendMsg_send>
    6e8e:	ae cf       	rjmp	.-164    	; 0x6dec <GenericTimerFired+0x74>

00006e90 <GenericTimerStop>:

//-------------------------------------------------------------------------
inline result_t GenericTimerStop(uint8_t id)
{
#ifdef PLATFORM_AVR
    return TimerM_Timer_stop(id);
    6e90:	0e 94 1e 39 	call	0x723c	; 0x723c <TimerM_Timer_stop>
#endif
}
    6e94:	08 95       	ret

00006e96 <GenericTimerStart>:

//-------------------------------------------------------------------------
inline result_t GenericTimerStart(uint8_t id, char type, uint32_t interval)
{
#ifdef PLATFORM_AVR
    return TimerM_Timer_start(id, type, interval);
    6e96:	0e 94 a8 38 	call	0x7150	; 0x7150 <TimerM_Timer_start>
#endif
}
    6e9a:	08 95       	ret

00006e9c <setTimerCallBackFunction>:
}

//-------------------------------------------------------------------------
void setTimerCallBackFunction(uint8_t currentthreadindex, uint16_t period,
                              uint16_t type, void (*fp) ())
{
    6e9c:	ef 92       	push	r14
    6e9e:	ff 92       	push	r15
    6ea0:	0f 93       	push	r16
    6ea2:	1f 93       	push	r17
    6ea4:	7b 01       	movw	r14, r22
    timercallback[currentthreadindex] = fp;
    6ea6:	e8 2f       	mov	r30, r24
    6ea8:	f0 e0       	ldi	r31, 0x00	; 0
    6eaa:	ee 0f       	add	r30, r30
    6eac:	ff 1f       	adc	r31, r31
    6eae:	eb 51       	subi	r30, 0x1B	; 27
    6eb0:	fa 4f       	sbci	r31, 0xFA	; 250
    6eb2:	31 83       	std	Z+1, r19	; 0x01
    6eb4:	20 83       	st	Z, r18

//-------------------------------------------------------------------------
inline result_t GenericTimerStart(uint8_t id, char type, uint32_t interval)
{
#ifdef PLATFORM_AVR
    return TimerM_Timer_start(id, type, interval);
    6eb6:	00 e0       	ldi	r16, 0x00	; 0
    6eb8:	10 e0       	ldi	r17, 0x00	; 0
    6eba:	8e 5e       	subi	r24, 0xEE	; 238
    6ebc:	64 2f       	mov	r22, r20
    6ebe:	a8 01       	movw	r20, r16
    6ec0:	97 01       	movw	r18, r14
    6ec2:	0e 94 a8 38 	call	0x7150	; 0x7150 <TimerM_Timer_start>
void setTimerCallBackFunction(uint8_t currentthreadindex, uint16_t period,
                              uint16_t type, void (*fp) ())
{
    timercallback[currentthreadindex] = fp;
    GenericTimerStart(currentthreadindex + 18, type, period);
}
    6ec6:	1f 91       	pop	r17
    6ec8:	0f 91       	pop	r16
    6eca:	ff 90       	pop	r15
    6ecc:	ef 90       	pop	r14
    6ece:	08 95       	ret

00006ed0 <GenericTimerInit>:

inline result_t GenericTimerInit(void)
{
    uint8_t i;

    currentcounter = 0;
    6ed0:	10 92 e4 05 	sts	0x05E4, r1
    6ed4:	10 92 e3 05 	sts	0x05E3, r1
   currentpower = 3; 
    6ed8:	83 e0       	ldi	r24, 0x03	; 3
    6eda:	80 93 69 06 	sts	0x0669, r24
   enabled = true;
    6ede:	81 e0       	ldi	r24, 0x01	; 1
    6ee0:	80 93 e2 05 	sts	0x05E2, r24
    6ee4:	e5 ee       	ldi	r30, 0xE5	; 229
    6ee6:	f5 e0       	ldi	r31, 0x05	; 5
    for (i = 0; i < 8; i++)
    {
        timercallback[i] = NULL;
    6ee8:	11 92       	st	Z+, r1
    6eea:	11 92       	st	Z+, r1
    uint8_t i;

    currentcounter = 0;
   currentpower = 3; 
   enabled = true;
    for (i = 0; i < 8; i++)
    6eec:	85 e0       	ldi	r24, 0x05	; 5
    6eee:	e5 3f       	cpi	r30, 0xF5	; 245
    6ef0:	f8 07       	cpc	r31, r24
    6ef2:	d1 f7       	brne	.-12     	; 0x6ee8 <GenericTimerInit+0x18>
    {
        timercallback[i] = NULL;
    }
#ifdef PLATFORM_AVR
    return TimerM_StdControl_init();
    6ef4:	0e 94 81 39 	call	0x7302	; 0x7302 <TimerM_StdControl_init>
#endif

    
}
    6ef8:	08 95       	ret

00006efa <GenericTimingStop>:

//-------------------------------------------------------------------------
void GenericTimingStop()
{

    HPLClock_Timer3_Stop();
    6efa:	0e 94 6e 35 	call	0x6adc	; 0x6adc <HPLClock_Timer3_Stop>

}
    6efe:	08 95       	ret

00006f00 <GenericTimingStart>:

//-------------------------------------------------------------------------
void GenericTimingStart()
{

    timeselect = 1;
    6f00:	81 e0       	ldi	r24, 0x01	; 1
    6f02:	80 93 ab 03 	sts	0x03AB, r24
    HPLClock_Timer3_Start();
    6f06:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <HPLClock_Timer3_Start>

}
    6f0a:	08 95       	ret

00006f0c <getCurrentResolution>:
{

    uint32_t test;
    //printfstr("test0\n");
    
    test= HPLClock_readTimeCounterLow();
    6f0c:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <HPLClock_readTimeCounterLow>
    //printfintegeru32(test);
    return test;

}
}
    6f10:	08 95       	ret

00006f12 <getCurrentCounterHigh>:

//-------------------------------------------------------------------------
uint16_t getCurrentCounterHigh()
{

    return HPLClock_readTimeCounterHigh();
    6f12:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <HPLClock_readTimeCounterHigh>

}
    6f16:	08 95       	ret

00006f18 <getCurrentTimeStamp>:

static currentTimeUnit internaltime1, internaltime2;
static uint8_t timeselect;

currentTimeUnit *getCurrentTimeStamp()
{
    6f18:	ef 92       	push	r14
    6f1a:	ff 92       	push	r15
    6f1c:	0f 93       	push	r16
    6f1e:	1f 93       	push	r17
    6f20:	cf 93       	push	r28
    6f22:	df 93       	push	r29

    uint16_t counter1, counter2;
    uint32_t resolution;

    counter1 = HPLClock_readTimeCounterHigh();
    6f24:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <HPLClock_readTimeCounterHigh>
    6f28:	ec 01       	movw	r28, r24
    resolution = HPLClock_readTimeCounterLow();
    6f2a:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <HPLClock_readTimeCounterLow>
    6f2e:	7b 01       	movw	r14, r22
    6f30:	8c 01       	movw	r16, r24
    counter2 = HPLClock_readTimeCounterHigh();
    6f32:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <HPLClock_readTimeCounterHigh>
    if (counter1 == counter2)
    6f36:	c8 17       	cp	r28, r24
    6f38:	d9 07       	cpc	r29, r25
    6f3a:	49 f0       	breq	.+18     	; 0x6f4e <getCurrentTimeStamp+0x36>
    {
    }
    else
    {
        counter1 = HPLClock_readTimeCounterHigh();
    6f3c:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <HPLClock_readTimeCounterHigh>
    6f40:	ec 01       	movw	r28, r24
        resolution = HPLClock_readTimeCounterLow();
    6f42:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <HPLClock_readTimeCounterLow>
    6f46:	7b 01       	movw	r14, r22
    6f48:	8c 01       	movw	r16, r24
        counter2 = HPLClock_readTimeCounterHigh();
    6f4a:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <HPLClock_readTimeCounterHigh>
    }
    if (timeselect == 1)
    6f4e:	80 91 ab 03 	lds	r24, 0x03AB
    6f52:	81 30       	cpi	r24, 0x01	; 1
    6f54:	c9 f4       	brne	.+50     	; 0x6f88 <getCurrentTimeStamp+0x70>
    {
        internaltime1.counter = counter1;
    6f56:	d0 93 a0 03 	sts	0x03A0, r29
    6f5a:	c0 93 9f 03 	sts	0x039F, r28
        internaltime1.resolution = resolution;
    6f5e:	e0 92 a1 03 	sts	0x03A1, r14
    6f62:	f0 92 a2 03 	sts	0x03A2, r15
    6f66:	00 93 a3 03 	sts	0x03A3, r16
    6f6a:	10 93 a4 03 	sts	0x03A4, r17
        timeselect = 2;
    6f6e:	82 e0       	ldi	r24, 0x02	; 2
    6f70:	80 93 ab 03 	sts	0x03AB, r24
    6f74:	2f e9       	ldi	r18, 0x9F	; 159
    6f76:	33 e0       	ldi	r19, 0x03	; 3
        internaltime2.resolution = resolution;
        return &internaltime2;
    }

    return NULL;
}
    6f78:	c9 01       	movw	r24, r18
    6f7a:	df 91       	pop	r29
    6f7c:	cf 91       	pop	r28
    6f7e:	1f 91       	pop	r17
    6f80:	0f 91       	pop	r16
    6f82:	ff 90       	pop	r15
    6f84:	ef 90       	pop	r14
    6f86:	08 95       	ret
        internaltime1.counter = counter1;
        internaltime1.resolution = resolution;
        timeselect = 2;
        return &internaltime1;
    }
    if (timeselect == 2)
    6f88:	82 30       	cpi	r24, 0x02	; 2
    6f8a:	19 f0       	breq	.+6      	; 0x6f92 <getCurrentTimeStamp+0x7a>
    6f8c:	20 e0       	ldi	r18, 0x00	; 0
    6f8e:	30 e0       	ldi	r19, 0x00	; 0
    6f90:	f3 cf       	rjmp	.-26     	; 0x6f78 <getCurrentTimeStamp+0x60>
    {
        timeselect = 1;
    6f92:	81 e0       	ldi	r24, 0x01	; 1
    6f94:	80 93 ab 03 	sts	0x03AB, r24
        internaltime2.counter = counter1;
    6f98:	d0 93 a6 03 	sts	0x03A6, r29
    6f9c:	c0 93 a5 03 	sts	0x03A5, r28
        internaltime2.resolution = resolution;
    6fa0:	e0 92 a7 03 	sts	0x03A7, r14
    6fa4:	f0 92 a8 03 	sts	0x03A8, r15
    6fa8:	00 93 a9 03 	sts	0x03A9, r16
    6fac:	10 93 aa 03 	sts	0x03AA, r17
    6fb0:	25 ea       	ldi	r18, 0xA5	; 165
    6fb2:	33 e0       	ldi	r19, 0x03	; 3
    6fb4:	e1 cf       	rjmp	.-62     	; 0x6f78 <getCurrentTimeStamp+0x60>

00006fb6 <TimerM_enqueue>:
    }
}

//-------------------------------------------------------------------------
inline void TimerM_enqueue(uint8_t value)
{
    6fb6:	98 2f       	mov	r25, r24
    if (TimerM_queue_tail == NUM_TIMERS - 1)
    6fb8:	e0 91 6a 06 	lds	r30, 0x066A
    6fbc:	ef 30       	cpi	r30, 0x0F	; 15
    6fbe:	09 f4       	brne	.+2      	; 0x6fc2 <TimerM_enqueue+0xc>
    6fc0:	ef ef       	ldi	r30, 0xFF	; 255
    {
        TimerM_queue_tail = -1;
    }
    TimerM_queue_tail++;
    6fc2:	ef 5f       	subi	r30, 0xFF	; 255
    6fc4:	e0 93 6a 06 	sts	0x066A, r30
    TimerM_queue_size++;
    6fc8:	80 91 6f 06 	lds	r24, 0x066F
    6fcc:	8f 5f       	subi	r24, 0xFF	; 255
    6fce:	80 93 6f 06 	sts	0x066F, r24
    TimerM_queue[(uint8_t) TimerM_queue_tail] = value;
    6fd2:	f0 e0       	ldi	r31, 0x00	; 0
    6fd4:	ed 58       	subi	r30, 0x8D	; 141
    6fd6:	f9 4f       	sbci	r31, 0xF9	; 249
    6fd8:	90 83       	st	Z, r25
}
    6fda:	08 95       	ret

00006fdc <TimerM_Timer_default_fired>:

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_default_fired(uint8_t id)
{
    return SUCCESS;
}
    6fdc:	81 e0       	ldi	r24, 0x01	; 1
    6fde:	08 95       	ret

00006fe0 <TimerM_dequeue>:
}

//-------------------------------------------------------------------------
inline uint8_t TimerM_dequeue(void)
{
    if (TimerM_queue_size == 0)
    6fe0:	80 91 6f 06 	lds	r24, 0x066F
    6fe4:	88 23       	and	r24, r24
    6fe6:	79 f0       	breq	.+30     	; 0x7006 <TimerM_dequeue+0x26>
    {
        return NUM_TIMERS;
    }
    if (TimerM_queue_head == NUM_TIMERS - 1)
    6fe8:	e0 91 85 06 	lds	r30, 0x0685
    6fec:	ef 30       	cpi	r30, 0x0F	; 15
    6fee:	69 f0       	breq	.+26     	; 0x700a <TimerM_dequeue+0x2a>
    {
        TimerM_queue_head = -1;
    }
    TimerM_queue_head++;
    6ff0:	ef 5f       	subi	r30, 0xFF	; 255
    6ff2:	e0 93 85 06 	sts	0x0685, r30
    TimerM_queue_size--;
    6ff6:	81 50       	subi	r24, 0x01	; 1
    6ff8:	80 93 6f 06 	sts	0x066F, r24
    return TimerM_queue[(uint8_t) TimerM_queue_head];
    6ffc:	f0 e0       	ldi	r31, 0x00	; 0
    6ffe:	ed 58       	subi	r30, 0x8D	; 141
    7000:	f9 4f       	sbci	r31, 0xF9	; 249
    7002:	80 81       	ld	r24, Z
}
    7004:	08 95       	ret
}

//-------------------------------------------------------------------------
inline uint8_t TimerM_dequeue(void)
{
    if (TimerM_queue_size == 0)
    7006:	80 e1       	ldi	r24, 0x10	; 16
    7008:	08 95       	ret
    700a:	ef ef       	ldi	r30, 0xFF	; 255
    700c:	f1 cf       	rjmp	.-30     	; 0x6ff0 <TimerM_dequeue+0x10>

0000700e <TimerM_StdControl_start>:

//-------------------------------------------------------------------------
inline result_t TimerM_StdControl_start(void)
{
    return SUCCESS;
}
    700e:	81 e0       	ldi	r24, 0x01	; 1
    7010:	08 95       	ret

00007012 <TimerM_Clock_setInterval>:
}

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t arg_0xa362928)
{
    HPLClock_Clock_setInterval(arg_0xa362928);
    7012:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <HPLClock_Clock_setInterval>
}
    7016:	08 95       	ret

00007018 <TimerM_Clock_getInterval>:
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_getInterval(void)
{
    unsigned char result;

    result = HPLClock_Clock_getInterval();
    7018:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <HPLClock_Clock_getInterval>
    return result;
}
    701c:	08 95       	ret

0000701e <TimerM_Clock_readCounter>:
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_readCounter(void)
{
    unsigned char result;

    result = HPLClock_Clock_readCounter();
    701e:	0e 94 cd 35 	call	0x6b9a	; 0x6b9a <HPLClock_Clock_readCounter>
    return result;
}
    7022:	08 95       	ret

00007024 <TimerM_Clock_fire>:
    }
}

//-------------------------------------------------------------------------
inline result_t TimerM_Clock_fire(void)
{
    7024:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    7026:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    702a:	18 2f       	mov	r17, r24

        {
            if (TimerM_interval_outstanding == 0)
    702c:	80 91 83 06 	lds	r24, 0x0683
    7030:	90 91 84 06 	lds	r25, 0x0684
    7034:	89 2b       	or	r24, r25
    7036:	29 f4       	brne	.+10     	; 0x7042 <TimerM_Clock_fire+0x1e>
            {
                postTask(TimerM_HandleFire, 12);
    7038:	8c e9       	ldi	r24, 0x9C	; 156
    703a:	99 e3       	ldi	r25, 0x39	; 57
    703c:	6c e0       	ldi	r22, 0x0C	; 12
    703e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_getInterval(void)
{
    unsigned char result;

    result = HPLClock_Clock_getInterval();
    7042:	0e 94 cf 35 	call	0x6b9e	; 0x6b9e <HPLClock_Clock_getInterval>
            }
            else
            {
            }
            ;
            TimerM_interval_outstanding += TimerM_Clock_getInterval() + 1;
    7046:	20 91 83 06 	lds	r18, 0x0683
    704a:	30 91 84 06 	lds	r19, 0x0684
    704e:	2f 5f       	subi	r18, 0xFF	; 255
    7050:	3f 4f       	sbci	r19, 0xFF	; 255
    7052:	28 0f       	add	r18, r24
    7054:	31 1d       	adc	r19, r1
    7056:	30 93 84 06 	sts	0x0684, r19
    705a:	20 93 83 06 	sts	0x0683, r18
        }
        _atomic_end(_atomic);
    705e:	81 2f       	mov	r24, r17
    7060:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    return SUCCESS;
}
    7064:	81 e0       	ldi	r24, 0x01	; 1
    7066:	1f 91       	pop	r17
    7068:	08 95       	ret

0000706a <TimerM_adjustInterval>:
    return result;
}

//-------------------------------------------------------------------------
void TimerM_adjustInterval(void)
{
    706a:	9f 92       	push	r9
    706c:	af 92       	push	r10
    706e:	bf 92       	push	r11
    7070:	cf 92       	push	r12
    7072:	df 92       	push	r13
    7074:	ef 92       	push	r14
    7076:	ff 92       	push	r15
    7078:	0f 93       	push	r16
    707a:	1f 93       	push	r17
    uint8_t i;
    uint8_t val = TimerM_maxTimerInterval;

    if (TimerM_mState)
    707c:	e0 90 6b 06 	lds	r14, 0x066B
    7080:	f0 90 6c 06 	lds	r15, 0x066C
    7084:	00 91 6d 06 	lds	r16, 0x066D
    7088:	10 91 6e 06 	lds	r17, 0x066E
    708c:	e1 14       	cp	r14, r1
    708e:	f1 04       	cpc	r15, r1
    7090:	01 05       	cpc	r16, r1
    7092:	11 05       	cpc	r17, r1
    7094:	09 f4       	brne	.+2      	; 0x7098 <TimerM_adjustInterval+0x2e>
    7096:	4e c0       	rjmp	.+156    	; 0x7134 <TimerM_adjustInterval+0xca>
    7098:	eb e8       	ldi	r30, 0x8B	; 139
    709a:	f6 e0       	ldi	r31, 0x06	; 6
    709c:	96 ee       	ldi	r25, 0xE6	; 230
    709e:	99 2e       	mov	r9, r25
    70a0:	20 e0       	ldi	r18, 0x00	; 0
    70a2:	30 e0       	ldi	r19, 0x00	; 0
    {
        for (i = 0; i < NUM_TIMERS; i++)
        {
            if (TimerM_mState & (0x1L << i) && TimerM_mTimerList[i].ticksLeft
    70a4:	81 e0       	ldi	r24, 0x01	; 1
    70a6:	a8 2e       	mov	r10, r24
    70a8:	b1 2c       	mov	r11, r1
    70aa:	c1 2c       	mov	r12, r1
    70ac:	d1 2c       	mov	r13, r1
    70ae:	d6 01       	movw	r26, r12
    70b0:	c5 01       	movw	r24, r10
    70b2:	02 2e       	mov	r0, r18
    70b4:	04 c0       	rjmp	.+8      	; 0x70be <TimerM_adjustInterval+0x54>
    70b6:	88 0f       	add	r24, r24
    70b8:	99 1f       	adc	r25, r25
    70ba:	aa 1f       	adc	r26, r26
    70bc:	bb 1f       	adc	r27, r27
    70be:	0a 94       	dec	r0
    70c0:	d2 f7       	brpl	.-12     	; 0x70b6 <TimerM_adjustInterval+0x4c>
    70c2:	8e 21       	and	r24, r14
    70c4:	9f 21       	and	r25, r15
    70c6:	a0 23       	and	r26, r16
    70c8:	b1 23       	and	r27, r17
    70ca:	00 97       	sbiw	r24, 0x00	; 0
    70cc:	a1 05       	cpc	r26, r1
    70ce:	b1 05       	cpc	r27, r1
    70d0:	71 f0       	breq	.+28     	; 0x70ee <TimerM_adjustInterval+0x84>
    70d2:	40 81       	ld	r20, Z
    70d4:	51 81       	ldd	r21, Z+1	; 0x01
    70d6:	62 81       	ldd	r22, Z+2	; 0x02
    70d8:	73 81       	ldd	r23, Z+3	; 0x03
    70da:	89 2d       	mov	r24, r9
    70dc:	90 e0       	ldi	r25, 0x00	; 0
    70de:	a0 e0       	ldi	r26, 0x00	; 0
    70e0:	b0 e0       	ldi	r27, 0x00	; 0
    70e2:	48 17       	cp	r20, r24
    70e4:	59 07       	cpc	r21, r25
    70e6:	6a 07       	cpc	r22, r26
    70e8:	7b 07       	cpc	r23, r27
    70ea:	0c f4       	brge	.+2      	; 0x70ee <TimerM_adjustInterval+0x84>
                < val)
            {
                val = TimerM_mTimerList[i].ticksLeft;
    70ec:	94 2e       	mov	r9, r20
    70ee:	2f 5f       	subi	r18, 0xFF	; 255
    70f0:	3f 4f       	sbci	r19, 0xFF	; 255
    70f2:	39 96       	adiw	r30, 0x09	; 9
    uint8_t i;
    uint8_t val = TimerM_maxTimerInterval;

    if (TimerM_mState)
    {
        for (i = 0; i < NUM_TIMERS; i++)
    70f4:	20 31       	cpi	r18, 0x10	; 16
    70f6:	31 05       	cpc	r19, r1
    70f8:	d1 f6       	brne	.-76     	; 0x70ae <TimerM_adjustInterval+0x44>
            {
                val = TimerM_mTimerList[i].ticksLeft;
            }
        }
        {
            _atomic_t _atomic = _atomic_start();
    70fa:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    70fe:	18 2f       	mov	r17, r24
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_readCounter(void)
{
    unsigned char result;

    result = HPLClock_Clock_readCounter();
    7100:	0e 94 cd 35 	call	0x6b9a	; 0x6b9a <HPLClock_Clock_readCounter>
        }
        {
            _atomic_t _atomic = _atomic_start();

            {
                i = TimerM_Clock_readCounter() + 3;
    7104:	8d 5f       	subi	r24, 0xFD	; 253
                if (val < i)
    7106:	98 16       	cp	r9, r24
    7108:	08 f4       	brcc	.+2      	; 0x710c <TimerM_adjustInterval+0xa2>
    710a:	98 2e       	mov	r9, r24
                {
                    val = i;
                }
                TimerM_mInterval = val;
    710c:	90 92 71 06 	sts	0x0671, r9
}

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t arg_0xa362928)
{
    HPLClock_Clock_setInterval(arg_0xa362928);
    7110:	89 2d       	mov	r24, r9
    7112:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <HPLClock_Clock_setInterval>
                {
                    val = i;
                }
                TimerM_mInterval = val;
                TimerM_Clock_setInterval(TimerM_mInterval);
                TimerM_setIntervalFlag = 0;
    7116:	10 92 72 06 	sts	0x0672, r1
            }
            _atomic_end(_atomic);
    711a:	81 2f       	mov	r24, r17
    711c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
                TimerM_setIntervalFlag = 0;
            }
            _atomic_end(_atomic);
        }
    }
}
    7120:	1f 91       	pop	r17
    7122:	0f 91       	pop	r16
    7124:	ff 90       	pop	r15
    7126:	ef 90       	pop	r14
    7128:	df 90       	pop	r13
    712a:	cf 90       	pop	r12
    712c:	bf 90       	pop	r11
    712e:	af 90       	pop	r10
    7130:	9f 90       	pop	r9
    7132:	08 95       	ret
        }
    }
    else
    {
        {
            _atomic_t _atomic = _atomic_start();
    7134:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    7138:	18 2f       	mov	r17, r24

            {
                TimerM_mInterval = TimerM_maxTimerInterval;
    713a:	86 ee       	ldi	r24, 0xE6	; 230
    713c:	80 93 71 06 	sts	0x0671, r24
}

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t arg_0xa362928)
{
    HPLClock_Clock_setInterval(arg_0xa362928);
    7140:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <HPLClock_Clock_setInterval>
            _atomic_t _atomic = _atomic_start();

            {
                TimerM_mInterval = TimerM_maxTimerInterval;
                TimerM_Clock_setInterval(TimerM_mInterval);
                TimerM_setIntervalFlag = 0;
    7144:	10 92 72 06 	sts	0x0672, r1
            }
            _atomic_end(_atomic);
    7148:	81 2f       	mov	r24, r17
    714a:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    714e:	e8 cf       	rjmp	.-48     	; 0x7120 <TimerM_adjustInterval+0xb6>

00007150 <TimerM_Timer_start>:
    return FAIL;
}

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_start(uint8_t id, char type, uint32_t interval)
{
    7150:	af 92       	push	r10
    7152:	bf 92       	push	r11
    7154:	cf 92       	push	r12
    7156:	df 92       	push	r13
    7158:	ef 92       	push	r14
    715a:	ff 92       	push	r15
    715c:	0f 93       	push	r16
    715e:	1f 93       	push	r17
    7160:	59 01       	movw	r10, r18
    7162:	6a 01       	movw	r12, r20
    uint8_t diff;

    if (id >= NUM_TIMERS)
    7164:	80 31       	cpi	r24, 0x10	; 16
    7166:	10 f4       	brcc	.+4      	; 0x716c <TimerM_Timer_start+0x1c>
    {
        return FAIL;
    }
    if (type > TIMER_ONE_SHOT)
    7168:	62 30       	cpi	r22, 0x02	; 2
    716a:	54 f0       	brlt	.+20     	; 0x7180 <TimerM_Timer_start+0x30>
                TimerM_setIntervalFlag = 0;
            }
        }
        _atomic_end(_atomic);
    }
    return SUCCESS;
    716c:	80 e0       	ldi	r24, 0x00	; 0
}
    716e:	1f 91       	pop	r17
    7170:	0f 91       	pop	r16
    7172:	ff 90       	pop	r15
    7174:	ef 90       	pop	r14
    7176:	df 90       	pop	r13
    7178:	cf 90       	pop	r12
    717a:	bf 90       	pop	r11
    717c:	af 90       	pop	r10
    717e:	08 95       	ret
    }
    if (type > TIMER_ONE_SHOT)
    {
        return FAIL;
    }
    if (type == TIMER_REPEAT && interval <= 2)
    7180:	66 23       	and	r22, r22
    7182:	29 f4       	brne	.+10     	; 0x718e <TimerM_Timer_start+0x3e>
    7184:	23 30       	cpi	r18, 0x03	; 3
    7186:	31 05       	cpc	r19, r1
    7188:	41 05       	cpc	r20, r1
    718a:	51 05       	cpc	r21, r1
    718c:	78 f3       	brcs	.-34     	; 0x716c <TimerM_Timer_start+0x1c>
    {
        return FAIL;
    }
    TimerM_mTimerList[id].ticks = interval;
    718e:	e8 2e       	mov	r14, r24
    7190:	ff 24       	eor	r15, r15
    7192:	87 01       	movw	r16, r14
    7194:	00 0f       	add	r16, r16
    7196:	11 1f       	adc	r17, r17
    7198:	00 0f       	add	r16, r16
    719a:	11 1f       	adc	r17, r17
    719c:	00 0f       	add	r16, r16
    719e:	11 1f       	adc	r17, r17
    71a0:	0e 0d       	add	r16, r14
    71a2:	1f 1d       	adc	r17, r15
    71a4:	0a 57       	subi	r16, 0x7A	; 122
    71a6:	19 4f       	sbci	r17, 0xF9	; 249
    71a8:	f8 01       	movw	r30, r16
    71aa:	a1 82       	std	Z+1, r10	; 0x01
    71ac:	b2 82       	std	Z+2, r11	; 0x02
    71ae:	c3 82       	std	Z+3, r12	; 0x03
    71b0:	d4 82       	std	Z+4, r13	; 0x04
    TimerM_mTimerList[id].type = type;
    71b2:	60 83       	st	Z, r22
    {
        _atomic_t _atomic = _atomic_start();
    71b4:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    71b8:	f8 2e       	mov	r15, r24
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_readCounter(void)
{
    unsigned char result;

    result = HPLClock_Clock_readCounter();
    71ba:	0e 94 cd 35 	call	0x6b9a	; 0x6b9a <HPLClock_Clock_readCounter>
    {
        _atomic_t _atomic = _atomic_start();

        {
            diff = TimerM_Clock_readCounter();
            interval += diff;
    71be:	a8 0e       	add	r10, r24
    71c0:	b1 1c       	adc	r11, r1
    71c2:	c1 1c       	adc	r12, r1
    71c4:	d1 1c       	adc	r13, r1
            TimerM_mTimerList[id].ticksLeft = interval;
    71c6:	f8 01       	movw	r30, r16
    71c8:	a5 82       	std	Z+5, r10	; 0x05
    71ca:	b6 82       	std	Z+6, r11	; 0x06
    71cc:	c7 82       	std	Z+7, r12	; 0x07
    71ce:	d0 86       	std	Z+8, r13	; 0x08
            TimerM_mState |= 0x1L << id;
    71d0:	21 e0       	ldi	r18, 0x01	; 1
    71d2:	30 e0       	ldi	r19, 0x00	; 0
    71d4:	40 e0       	ldi	r20, 0x00	; 0
    71d6:	50 e0       	ldi	r21, 0x00	; 0
    71d8:	04 c0       	rjmp	.+8      	; 0x71e2 <TimerM_Timer_start+0x92>
    71da:	22 0f       	add	r18, r18
    71dc:	33 1f       	adc	r19, r19
    71de:	44 1f       	adc	r20, r20
    71e0:	55 1f       	adc	r21, r21
    71e2:	ea 94       	dec	r14
    71e4:	d2 f7       	brpl	.-12     	; 0x71da <TimerM_Timer_start+0x8a>
    71e6:	80 91 6b 06 	lds	r24, 0x066B
    71ea:	90 91 6c 06 	lds	r25, 0x066C
    71ee:	a0 91 6d 06 	lds	r26, 0x066D
    71f2:	b0 91 6e 06 	lds	r27, 0x066E
    71f6:	82 2b       	or	r24, r18
    71f8:	93 2b       	or	r25, r19
    71fa:	a4 2b       	or	r26, r20
    71fc:	b5 2b       	or	r27, r21
    71fe:	80 93 6b 06 	sts	0x066B, r24
    7202:	90 93 6c 06 	sts	0x066C, r25
    7206:	a0 93 6d 06 	sts	0x066D, r26
    720a:	b0 93 6e 06 	sts	0x066E, r27
            if (interval < TimerM_mInterval)
    720e:	80 91 71 06 	lds	r24, 0x0671
    7212:	90 e0       	ldi	r25, 0x00	; 0
    7214:	a0 e0       	ldi	r26, 0x00	; 0
    7216:	b0 e0       	ldi	r27, 0x00	; 0
    7218:	a8 16       	cp	r10, r24
    721a:	b9 06       	cpc	r11, r25
    721c:	ca 06       	cpc	r12, r26
    721e:	db 06       	cpc	r13, r27
    7220:	28 f0       	brcs	.+10     	; 0x722c <TimerM_Timer_start+0xdc>
                TimerM_mInterval = interval;
                TimerM_Clock_setInterval(TimerM_mInterval);
                TimerM_setIntervalFlag = 0;
            }
        }
        _atomic_end(_atomic);
    7222:	8f 2d       	mov	r24, r15
    7224:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    7228:	81 e0       	ldi	r24, 0x01	; 1
    722a:	a1 cf       	rjmp	.-190    	; 0x716e <TimerM_Timer_start+0x1e>
            interval += diff;
            TimerM_mTimerList[id].ticksLeft = interval;
            TimerM_mState |= 0x1L << id;
            if (interval < TimerM_mInterval)
            {
                TimerM_mInterval = interval;
    722c:	a0 92 71 06 	sts	0x0671, r10
}

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t arg_0xa362928)
{
    HPLClock_Clock_setInterval(arg_0xa362928);
    7230:	8a 2d       	mov	r24, r10
    7232:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <HPLClock_Clock_setInterval>
            TimerM_mState |= 0x1L << id;
            if (interval < TimerM_mInterval)
            {
                TimerM_mInterval = interval;
                TimerM_Clock_setInterval(TimerM_mInterval);
                TimerM_setIntervalFlag = 0;
    7236:	10 92 72 06 	sts	0x0672, r1
    723a:	f3 cf       	rjmp	.-26     	; 0x7222 <TimerM_Timer_start+0xd2>

0000723c <TimerM_Timer_stop>:
    return TimerM_Clock_setRate(TimerM_mInterval, TimerM_mScale);
}

//-------------------------------------------------------------------------
inline uint8_t TimerM_Timer_stop(uint8_t id)
{
    723c:	ef 92       	push	r14
    723e:	ff 92       	push	r15
    7240:	0f 93       	push	r16
    7242:	1f 93       	push	r17
    if (id > NUM_TIMERS)
    7244:	81 31       	cpi	r24, 0x11	; 17
    7246:	e0 f4       	brcc	.+56     	; 0x7280 <TimerM_Timer_stop+0x44>
    {
        return FAIL;
    }
    if (TimerM_mState & (0x1L << id))
    7248:	31 e0       	ldi	r19, 0x01	; 1
    724a:	e3 2e       	mov	r14, r19
    724c:	f1 2c       	mov	r15, r1
    724e:	01 2d       	mov	r16, r1
    7250:	11 2d       	mov	r17, r1
    7252:	04 c0       	rjmp	.+8      	; 0x725c <TimerM_Timer_stop+0x20>
    7254:	ee 0c       	add	r14, r14
    7256:	ff 1c       	adc	r15, r15
    7258:	00 1f       	adc	r16, r16
    725a:	11 1f       	adc	r17, r17
    725c:	8a 95       	dec	r24
    725e:	d2 f7       	brpl	.-12     	; 0x7254 <TimerM_Timer_stop+0x18>
    7260:	80 91 6b 06 	lds	r24, 0x066B
    7264:	90 91 6c 06 	lds	r25, 0x066C
    7268:	a0 91 6d 06 	lds	r26, 0x066D
    726c:	b0 91 6e 06 	lds	r27, 0x066E
    7270:	8e 21       	and	r24, r14
    7272:	9f 21       	and	r25, r15
    7274:	a0 23       	and	r26, r16
    7276:	b1 23       	and	r27, r17
    7278:	00 97       	sbiw	r24, 0x00	; 0
    727a:	a1 05       	cpc	r26, r1
    727c:	b1 05       	cpc	r27, r1
    727e:	31 f4       	brne	.+12     	; 0x728c <TimerM_Timer_stop+0x50>

        TimerM_mState &= ~(0x1L << id);
        _atomic_end(_atomic);
        if (!TimerM_mState)
        {
            TimerM_setIntervalFlag = 1;
    7280:	80 e0       	ldi	r24, 0x00	; 0
        }
        return SUCCESS;
    }
    return FAIL;
}
    7282:	1f 91       	pop	r17
    7284:	0f 91       	pop	r16
    7286:	ff 90       	pop	r15
    7288:	ef 90       	pop	r14
    728a:	08 95       	ret
    {
        return FAIL;
    }
    if (TimerM_mState & (0x1L << id))
    {
        _atomic_t _atomic = _atomic_start();
    728c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        TimerM_mState &= ~(0x1L << id);
    7290:	a8 01       	movw	r20, r16
    7292:	97 01       	movw	r18, r14
    7294:	20 95       	com	r18
    7296:	30 95       	com	r19
    7298:	40 95       	com	r20
    729a:	50 95       	com	r21
    729c:	e0 90 6b 06 	lds	r14, 0x066B
    72a0:	f0 90 6c 06 	lds	r15, 0x066C
    72a4:	00 91 6d 06 	lds	r16, 0x066D
    72a8:	10 91 6e 06 	lds	r17, 0x066E
    72ac:	e2 22       	and	r14, r18
    72ae:	f3 22       	and	r15, r19
    72b0:	04 23       	and	r16, r20
    72b2:	15 23       	and	r17, r21
    72b4:	e0 92 6b 06 	sts	0x066B, r14
    72b8:	f0 92 6c 06 	sts	0x066C, r15
    72bc:	00 93 6d 06 	sts	0x066D, r16
    72c0:	10 93 6e 06 	sts	0x066E, r17
        _atomic_end(_atomic);
    72c4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
        if (!TimerM_mState)
    72c8:	80 91 6b 06 	lds	r24, 0x066B
    72cc:	90 91 6c 06 	lds	r25, 0x066C
    72d0:	a0 91 6d 06 	lds	r26, 0x066D
    72d4:	b0 91 6e 06 	lds	r27, 0x066E
    72d8:	00 97       	sbiw	r24, 0x00	; 0
    72da:	a1 05       	cpc	r26, r1
    72dc:	b1 05       	cpc	r27, r1
    72de:	41 f4       	brne	.+16     	; 0x72f0 <TimerM_Timer_stop+0xb4>
        {
            TimerM_setIntervalFlag = 1;
    72e0:	81 e0       	ldi	r24, 0x01	; 1
    72e2:	80 93 72 06 	sts	0x0672, r24
        }
        return SUCCESS;
    }
    return FAIL;
}
    72e6:	1f 91       	pop	r17
    72e8:	0f 91       	pop	r16
    72ea:	ff 90       	pop	r15
    72ec:	ef 90       	pop	r14
    72ee:	08 95       	ret
    {
        _atomic_t _atomic = _atomic_start();

        TimerM_mState &= ~(0x1L << id);
        _atomic_end(_atomic);
        if (!TimerM_mState)
    72f0:	81 e0       	ldi	r24, 0x01	; 1
    72f2:	c7 cf       	rjmp	.-114    	; 0x7282 <TimerM_Timer_stop+0x46>

000072f4 <TimerM_Timer_fired>:
}

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_fired(uint8_t id)
{
    GenericTimerFired(id);
    72f4:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <GenericTimerFired>
    return SUCCESS;
}
    72f8:	81 e0       	ldi	r24, 0x01	; 1
    72fa:	08 95       	ret

000072fc <TimerM_Clock_setRate>:
//-------------------------------------------------------------------------
inline result_t TimerM_Clock_setRate(char arg_0xa369e18, char arg_0xa369f58)
{
    unsigned char result;

    result = HPLClock_Clock_setRate(arg_0xa369e18, arg_0xa369f58);
    72fc:	0e 94 1c 36 	call	0x6c38	; 0x6c38 <HPLClock_Clock_setRate>
    return result;
}
    7300:	08 95       	ret

00007302 <TimerM_StdControl_init>:
{
    TimerM_maxTimerInterval = 230
};
inline result_t TimerM_StdControl_init(void)
{
    TimerM_mState = 0;
    7302:	10 92 6b 06 	sts	0x066B, r1
    7306:	10 92 6c 06 	sts	0x066C, r1
    730a:	10 92 6d 06 	sts	0x066D, r1
    730e:	10 92 6e 06 	sts	0x066E, r1
    TimerM_setIntervalFlag = 0;
    7312:	10 92 72 06 	sts	0x0672, r1
    TimerM_queue_head = TimerM_queue_tail = -1;
    7316:	8f ef       	ldi	r24, 0xFF	; 255
    7318:	80 93 6a 06 	sts	0x066A, r24
    731c:	80 93 85 06 	sts	0x0685, r24
    TimerM_queue_size = 0;
    7320:	10 92 6f 06 	sts	0x066F, r1
    TimerM_mScale = 3;
    7324:	83 e0       	ldi	r24, 0x03	; 3
    7326:	80 93 70 06 	sts	0x0670, r24
    TimerM_mInterval = TimerM_maxTimerInterval;
    732a:	86 ee       	ldi	r24, 0xE6	; 230
    732c:	80 93 71 06 	sts	0x0671, r24
//-------------------------------------------------------------------------
inline result_t TimerM_Clock_setRate(char arg_0xa369e18, char arg_0xa369f58)
{
    unsigned char result;

    result = HPLClock_Clock_setRate(arg_0xa369e18, arg_0xa369f58);
    7330:	63 e0       	ldi	r22, 0x03	; 3
    7332:	0e 94 1c 36 	call	0x6c38	; 0x6c38 <HPLClock_Clock_setRate>
    TimerM_queue_head = TimerM_queue_tail = -1;
    TimerM_queue_size = 0;
    TimerM_mScale = 3;
    TimerM_mInterval = TimerM_maxTimerInterval;
    return TimerM_Clock_setRate(TimerM_mInterval, TimerM_mScale);
}
    7336:	08 95       	ret

00007338 <TimerM_HandleFire>:
    }
}

//-------------------------------------------------------------------------
inline void TimerM_HandleFire(void)
{
    7338:	3f 92       	push	r3
    733a:	4f 92       	push	r4
    733c:	5f 92       	push	r5
    733e:	6f 92       	push	r6
    7340:	7f 92       	push	r7
    7342:	8f 92       	push	r8
    7344:	9f 92       	push	r9
    7346:	af 92       	push	r10
    7348:	bf 92       	push	r11
    734a:	cf 92       	push	r12
    734c:	df 92       	push	r13
    734e:	ef 92       	push	r14
    7350:	ff 92       	push	r15
    7352:	0f 93       	push	r16
    7354:	1f 93       	push	r17
    7356:	cf 93       	push	r28
    7358:	df 93       	push	r29
    uint8_t i;
    uint16_t int_out;

    TimerM_setIntervalFlag = 1;
    735a:	81 e0       	ldi	r24, 0x01	; 1
    735c:	80 93 72 06 	sts	0x0672, r24
    {
        _atomic_t _atomic = _atomic_start();
    7360:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        {
            int_out = TimerM_interval_outstanding;
    7364:	00 91 83 06 	lds	r16, 0x0683
    7368:	10 91 84 06 	lds	r17, 0x0684
            TimerM_interval_outstanding = 0;
    736c:	10 92 84 06 	sts	0x0684, r1
    7370:	10 92 83 06 	sts	0x0683, r1
        }
        _atomic_end(_atomic);
    7374:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    if (TimerM_mState)
    7378:	20 91 6b 06 	lds	r18, 0x066B
    737c:	30 91 6c 06 	lds	r19, 0x066C
    7380:	40 91 6d 06 	lds	r20, 0x066D
    7384:	50 91 6e 06 	lds	r21, 0x066E
    7388:	21 15       	cp	r18, r1
    738a:	31 05       	cpc	r19, r1
    738c:	41 05       	cpc	r20, r1
    738e:	51 05       	cpc	r21, r1
    7390:	09 f4       	brne	.+2      	; 0x7394 <TimerM_HandleFire+0x5c>
    7392:	86 c0       	rjmp	.+268    	; 0x74a0 <TimerM_HandleFire+0x168>
    7394:	76 e8       	ldi	r23, 0x86	; 134
    7396:	c7 2e       	mov	r12, r23
    7398:	76 e0       	ldi	r23, 0x06	; 6
    739a:	d7 2e       	mov	r13, r23
    739c:	c0 e0       	ldi	r28, 0x00	; 0
    739e:	d0 e0       	ldi	r29, 0x00	; 0
    {
        for (i = 0; i < NUM_TIMERS; i++)
        {
            if (TimerM_mState & (0x1L << i))
    73a0:	61 e0       	ldi	r22, 0x01	; 1
    73a2:	46 2e       	mov	r4, r22
    73a4:	51 2c       	mov	r5, r1
    73a6:	61 2c       	mov	r6, r1
    73a8:	71 2c       	mov	r7, r1
            {
                TimerM_mTimerList[i].ticksLeft -= int_out;
    73aa:	48 01       	movw	r8, r16
    73ac:	aa 24       	eor	r10, r10
    73ae:	bb 24       	eor	r11, r11
    73b0:	11 c0       	rjmp	.+34     	; 0x73d4 <TimerM_HandleFire+0x9c>
                    else
                    {
                        {
                        }
                        ;
                        TimerM_mTimerList[i].ticksLeft = TimerM_mInterval;
    73b2:	21 96       	adiw	r28, 0x01	; 1
    73b4:	89 e0       	ldi	r24, 0x09	; 9
    73b6:	90 e0       	ldi	r25, 0x00	; 0
    73b8:	c8 0e       	add	r12, r24
    73ba:	d9 1e       	adc	r13, r25
        }
        _atomic_end(_atomic);
    }
    if (TimerM_mState)
    {
        for (i = 0; i < NUM_TIMERS; i++)
    73bc:	c0 31       	cpi	r28, 0x10	; 16
    73be:	d1 05       	cpc	r29, r1
    73c0:	09 f4       	brne	.+2      	; 0x73c4 <TimerM_HandleFire+0x8c>
    73c2:	6e c0       	rjmp	.+220    	; 0x74a0 <TimerM_HandleFire+0x168>
    73c4:	20 91 6b 06 	lds	r18, 0x066B
    73c8:	30 91 6c 06 	lds	r19, 0x066C
    73cc:	40 91 6d 06 	lds	r20, 0x066D
    73d0:	50 91 6e 06 	lds	r21, 0x066E
            int_out = TimerM_interval_outstanding;
            TimerM_interval_outstanding = 0;
        }
        _atomic_end(_atomic);
    }
    if (TimerM_mState)
    73d4:	3c 2e       	mov	r3, r28
    {
        for (i = 0; i < NUM_TIMERS; i++)
        {
            if (TimerM_mState & (0x1L << i))
    73d6:	83 01       	movw	r16, r6
    73d8:	72 01       	movw	r14, r4
    73da:	0c 2e       	mov	r0, r28
    73dc:	04 c0       	rjmp	.+8      	; 0x73e6 <TimerM_HandleFire+0xae>
    73de:	ee 0c       	add	r14, r14
    73e0:	ff 1c       	adc	r15, r15
    73e2:	00 1f       	adc	r16, r16
    73e4:	11 1f       	adc	r17, r17
    73e6:	0a 94       	dec	r0
    73e8:	d2 f7       	brpl	.-12     	; 0x73de <TimerM_HandleFire+0xa6>
    73ea:	2e 21       	and	r18, r14
    73ec:	3f 21       	and	r19, r15
    73ee:	40 23       	and	r20, r16
    73f0:	51 23       	and	r21, r17
    73f2:	21 15       	cp	r18, r1
    73f4:	31 05       	cpc	r19, r1
    73f6:	41 05       	cpc	r20, r1
    73f8:	51 05       	cpc	r21, r1
    73fa:	d9 f2       	breq	.-74     	; 0x73b2 <TimerM_HandleFire+0x7a>
            {
                TimerM_mTimerList[i].ticksLeft -= int_out;
    73fc:	f6 01       	movw	r30, r12
    73fe:	85 81       	ldd	r24, Z+5	; 0x05
    7400:	96 81       	ldd	r25, Z+6	; 0x06
    7402:	a7 81       	ldd	r26, Z+7	; 0x07
    7404:	b0 85       	ldd	r27, Z+8	; 0x08
    7406:	88 19       	sub	r24, r8
    7408:	99 09       	sbc	r25, r9
    740a:	aa 09       	sbc	r26, r10
    740c:	bb 09       	sbc	r27, r11
    740e:	85 83       	std	Z+5, r24	; 0x05
    7410:	96 83       	std	Z+6, r25	; 0x06
    7412:	a7 83       	std	Z+7, r26	; 0x07
    7414:	b0 87       	std	Z+8, r27	; 0x08
                if (TimerM_mTimerList[i].ticksLeft <= 2)
    7416:	03 97       	sbiw	r24, 0x03	; 3
    7418:	a1 05       	cpc	r26, r1
    741a:	b1 05       	cpc	r27, r1
    741c:	54 f6       	brge	.-108    	; 0x73b2 <TimerM_HandleFire+0x7a>
                {
                    if (postTask(TimerM_signalOneTimer, 7))
    741e:	8a e8       	ldi	r24, 0x8A	; 138
    7420:	9a e3       	ldi	r25, 0x3A	; 58
    7422:	67 e0       	ldi	r22, 0x07	; 7
    7424:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    7428:	88 23       	and	r24, r24
    742a:	09 f4       	brne	.+2      	; 0x742e <TimerM_HandleFire+0xf6>
    742c:	57 c0       	rjmp	.+174    	; 0x74dc <TimerM_HandleFire+0x1a4>
                    {
                        if (TimerM_mTimerList[i].type == TIMER_REPEAT)
    742e:	f6 01       	movw	r30, r12
    7430:	80 81       	ld	r24, Z
    7432:	88 23       	and	r24, r24
    7434:	09 f4       	brne	.+2      	; 0x7438 <TimerM_HandleFire+0x100>
    7436:	5d c0       	rjmp	.+186    	; 0x74f2 <TimerM_HandleFire+0x1ba>
                            TimerM_mTimerList[i].ticksLeft +=
                                TimerM_mTimerList[i].ticks;
                        }
                        else
                        {
                            TimerM_mState &= ~(0x1L << i);
    7438:	d8 01       	movw	r26, r16
    743a:	c7 01       	movw	r24, r14
    743c:	80 95       	com	r24
    743e:	90 95       	com	r25
    7440:	a0 95       	com	r26
    7442:	b0 95       	com	r27
    7444:	20 91 6b 06 	lds	r18, 0x066B
    7448:	30 91 6c 06 	lds	r19, 0x066C
    744c:	40 91 6d 06 	lds	r20, 0x066D
    7450:	50 91 6e 06 	lds	r21, 0x066E
    7454:	28 23       	and	r18, r24
    7456:	39 23       	and	r19, r25
    7458:	4a 23       	and	r20, r26
    745a:	5b 23       	and	r21, r27
    745c:	20 93 6b 06 	sts	0x066B, r18
    7460:	30 93 6c 06 	sts	0x066C, r19
    7464:	40 93 6d 06 	sts	0x066D, r20
    7468:	50 93 6e 06 	sts	0x066E, r21
}

//-------------------------------------------------------------------------
inline void TimerM_enqueue(uint8_t value)
{
    if (TimerM_queue_tail == NUM_TIMERS - 1)
    746c:	e0 91 6a 06 	lds	r30, 0x066A
    7470:	ef 30       	cpi	r30, 0x0F	; 15
    7472:	09 f4       	brne	.+2      	; 0x7476 <TimerM_HandleFire+0x13e>
    7474:	ef ef       	ldi	r30, 0xFF	; 255
    {
        TimerM_queue_tail = -1;
    }
    TimerM_queue_tail++;
    7476:	ef 5f       	subi	r30, 0xFF	; 255
    7478:	e0 93 6a 06 	sts	0x066A, r30
    TimerM_queue_size++;
    747c:	80 91 6f 06 	lds	r24, 0x066F
    7480:	8f 5f       	subi	r24, 0xFF	; 255
    7482:	80 93 6f 06 	sts	0x066F, r24
    TimerM_queue[(uint8_t) TimerM_queue_tail] = value;
    7486:	f0 e0       	ldi	r31, 0x00	; 0
    7488:	ed 58       	subi	r30, 0x8D	; 141
    748a:	f9 4f       	sbci	r31, 0xF9	; 249
    748c:	30 82       	st	Z, r3
                    else
                    {
                        {
                        }
                        ;
                        TimerM_mTimerList[i].ticksLeft = TimerM_mInterval;
    748e:	21 96       	adiw	r28, 0x01	; 1
    7490:	89 e0       	ldi	r24, 0x09	; 9
    7492:	90 e0       	ldi	r25, 0x00	; 0
    7494:	c8 0e       	add	r12, r24
    7496:	d9 1e       	adc	r13, r25
        }
        _atomic_end(_atomic);
    }
    if (TimerM_mState)
    {
        for (i = 0; i < NUM_TIMERS; i++)
    7498:	c0 31       	cpi	r28, 0x10	; 16
    749a:	d1 05       	cpc	r29, r1
    749c:	09 f0       	breq	.+2      	; 0x74a0 <TimerM_HandleFire+0x168>
    749e:	92 cf       	rjmp	.-220    	; 0x73c4 <TimerM_HandleFire+0x8c>
                }
            }
        }
    }
    {
        _atomic_t _atomic = _atomic_start();
    74a0:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>

        int_out = TimerM_interval_outstanding;
    74a4:	00 91 83 06 	lds	r16, 0x0683
    74a8:	10 91 84 06 	lds	r17, 0x0684
        _atomic_end(_atomic);
    74ac:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    }
    if (int_out == 0)
    74b0:	01 2b       	or	r16, r17
    74b2:	11 f4       	brne	.+4      	; 0x74b8 <TimerM_HandleFire+0x180>
    {
        TimerM_adjustInterval();
    74b4:	0e 94 35 38 	call	0x706a	; 0x706a <TimerM_adjustInterval>
    }
}
    74b8:	df 91       	pop	r29
    74ba:	cf 91       	pop	r28
    74bc:	1f 91       	pop	r17
    74be:	0f 91       	pop	r16
    74c0:	ff 90       	pop	r15
    74c2:	ef 90       	pop	r14
    74c4:	df 90       	pop	r13
    74c6:	cf 90       	pop	r12
    74c8:	bf 90       	pop	r11
    74ca:	af 90       	pop	r10
    74cc:	9f 90       	pop	r9
    74ce:	8f 90       	pop	r8
    74d0:	7f 90       	pop	r7
    74d2:	6f 90       	pop	r6
    74d4:	5f 90       	pop	r5
    74d6:	4f 90       	pop	r4
    74d8:	3f 90       	pop	r3
    74da:	08 95       	ret
                    else
                    {
                        {
                        }
                        ;
                        TimerM_mTimerList[i].ticksLeft = TimerM_mInterval;
    74dc:	80 91 71 06 	lds	r24, 0x0671
    74e0:	90 e0       	ldi	r25, 0x00	; 0
    74e2:	a0 e0       	ldi	r26, 0x00	; 0
    74e4:	b0 e0       	ldi	r27, 0x00	; 0
    74e6:	f6 01       	movw	r30, r12
    74e8:	85 83       	std	Z+5, r24	; 0x05
    74ea:	96 83       	std	Z+6, r25	; 0x06
    74ec:	a7 83       	std	Z+7, r26	; 0x07
    74ee:	b0 87       	std	Z+8, r27	; 0x08
    74f0:	60 cf       	rjmp	.-320    	; 0x73b2 <TimerM_HandleFire+0x7a>
                {
                    if (postTask(TimerM_signalOneTimer, 7))
                    {
                        if (TimerM_mTimerList[i].type == TIMER_REPEAT)
                        {
                            TimerM_mTimerList[i].ticksLeft +=
    74f2:	85 81       	ldd	r24, Z+5	; 0x05
    74f4:	96 81       	ldd	r25, Z+6	; 0x06
    74f6:	a7 81       	ldd	r26, Z+7	; 0x07
    74f8:	b0 85       	ldd	r27, Z+8	; 0x08
    74fa:	21 81       	ldd	r18, Z+1	; 0x01
    74fc:	32 81       	ldd	r19, Z+2	; 0x02
    74fe:	43 81       	ldd	r20, Z+3	; 0x03
    7500:	54 81       	ldd	r21, Z+4	; 0x04
    7502:	82 0f       	add	r24, r18
    7504:	93 1f       	adc	r25, r19
    7506:	a4 1f       	adc	r26, r20
    7508:	b5 1f       	adc	r27, r21
    750a:	85 83       	std	Z+5, r24	; 0x05
    750c:	96 83       	std	Z+6, r25	; 0x06
    750e:	a7 83       	std	Z+7, r26	; 0x07
    7510:	b0 87       	std	Z+8, r27	; 0x08
    7512:	ac cf       	rjmp	.-168    	; 0x746c <TimerM_HandleFire+0x134>

00007514 <TimerM_signalOneTimer>:
}

//-------------------------------------------------------------------------
inline uint8_t TimerM_dequeue(void)
{
    if (TimerM_queue_size == 0)
    7514:	80 91 6f 06 	lds	r24, 0x066F
    7518:	88 23       	and	r24, r24
    751a:	91 f0       	breq	.+36     	; 0x7540 <TimerM_signalOneTimer+0x2c>
    {
        return NUM_TIMERS;
    }
    if (TimerM_queue_head == NUM_TIMERS - 1)
    751c:	e0 91 85 06 	lds	r30, 0x0685
    7520:	ef 30       	cpi	r30, 0x0F	; 15
    7522:	79 f0       	breq	.+30     	; 0x7542 <TimerM_signalOneTimer+0x2e>
    {
        TimerM_queue_head = -1;
    }
    TimerM_queue_head++;
    7524:	ef 5f       	subi	r30, 0xFF	; 255
    7526:	e0 93 85 06 	sts	0x0685, r30
    TimerM_queue_size--;
    752a:	81 50       	subi	r24, 0x01	; 1
    752c:	80 93 6f 06 	sts	0x066F, r24
    return TimerM_queue[(uint8_t) TimerM_queue_head];
    7530:	f0 e0       	ldi	r31, 0x00	; 0
    7532:	ed 58       	subi	r30, 0x8D	; 141
    7534:	f9 4f       	sbci	r31, 0xF9	; 249
    7536:	80 81       	ld	r24, Z
//-------------------------------------------------------------------------
inline void TimerM_signalOneTimer(void)
{
    uint8_t itimer = TimerM_dequeue();

    if (itimer < NUM_TIMERS)
    7538:	80 31       	cpi	r24, 0x10	; 16
    753a:	10 f4       	brcc	.+4      	; 0x7540 <TimerM_signalOneTimer+0x2c>
}

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_fired(uint8_t id)
{
    GenericTimerFired(id);
    753c:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <GenericTimerFired>
    7540:	08 95       	ret
    7542:	ef ef       	ldi	r30, 0xFF	; 255
    7544:	ef cf       	rjmp	.-34     	; 0x7524 <TimerM_signalOneTimer+0x10>

00007546 <is_host_lsb>:
   along with LiteOS.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "byteorder.h"
//-------------------------------------------------------------------------
inline int is_host_lsb(void)
{
    7546:	df 93       	push	r29
    7548:	cf 93       	push	r28
    754a:	00 d0       	rcall	.+0      	; 0x754c <is_host_lsb+0x6>
    754c:	cd b7       	in	r28, 0x3d	; 61
    754e:	de b7       	in	r29, 0x3e	; 62
    const uint8_t n[2] = {
        1, 0
    };
    7550:	81 e0       	ldi	r24, 0x01	; 1
    7552:	89 83       	std	Y+1, r24	; 0x01
    7554:	1a 82       	std	Y+2, r1	; 0x02
    7556:	20 e0       	ldi	r18, 0x00	; 0
    7558:	30 e0       	ldi	r19, 0x00	; 0
    755a:	89 81       	ldd	r24, Y+1	; 0x01
    755c:	9a 81       	ldd	r25, Y+2	; 0x02
    755e:	01 97       	sbiw	r24, 0x01	; 1
    7560:	31 f0       	breq	.+12     	; 0x756e <is_host_lsb+0x28>
    return *(uint16_t *) n == 1;
}
    7562:	c9 01       	movw	r24, r18
    7564:	0f 90       	pop	r0
    7566:	0f 90       	pop	r0
    7568:	cf 91       	pop	r28
    756a:	df 91       	pop	r29
    756c:	08 95       	ret
//-------------------------------------------------------------------------
inline int is_host_lsb(void)
{
    const uint8_t n[2] = {
        1, 0
    };
    756e:	21 e0       	ldi	r18, 0x01	; 1
    7570:	30 e0       	ldi	r19, 0x00	; 0
    return *(uint16_t *) n == 1;
}
    7572:	c9 01       	movw	r24, r18
    7574:	0f 90       	pop	r0
    7576:	0f 90       	pop	r0
    7578:	cf 91       	pop	r28
    757a:	df 91       	pop	r29
    757c:	08 95       	ret

0000757e <toLSB16>:

//-------------------------------------------------------------------------
inline uint16_t toLSB16(uint16_t a)
{
    757e:	df 93       	push	r29
    7580:	cf 93       	push	r28
    7582:	00 d0       	rcall	.+0      	; 0x7584 <toLSB16+0x6>
    7584:	cd b7       	in	r28, 0x3d	; 61
    7586:	de b7       	in	r29, 0x3e	; 62
    7588:	9c 01       	movw	r18, r24
//-------------------------------------------------------------------------
inline int is_host_lsb(void)
{
    const uint8_t n[2] = {
        1, 0
    };
    758a:	81 e0       	ldi	r24, 0x01	; 1
    758c:	89 83       	std	Y+1, r24	; 0x01
    758e:	1a 82       	std	Y+2, r1	; 0x02
}

//-------------------------------------------------------------------------
inline uint16_t toLSB16(uint16_t a)
{
    return is_host_lsb()? a : (a << 8) | (a >> 8);
    7590:	89 81       	ldd	r24, Y+1	; 0x01
    7592:	9a 81       	ldd	r25, Y+2	; 0x02
    7594:	01 97       	sbiw	r24, 0x01	; 1
    7596:	19 f0       	breq	.+6      	; 0x759e <toLSB16+0x20>
    7598:	82 2f       	mov	r24, r18
    759a:	23 2f       	mov	r18, r19
    759c:	38 2f       	mov	r19, r24
}
    759e:	c9 01       	movw	r24, r18
    75a0:	0f 90       	pop	r0
    75a2:	0f 90       	pop	r0
    75a4:	cf 91       	pop	r28
    75a6:	df 91       	pop	r29
    75a8:	08 95       	ret

000075aa <fromLSB16>:

//-------------------------------------------------------------------------
inline uint16_t fromLSB16(uint16_t a)
{
    75aa:	df 93       	push	r29
    75ac:	cf 93       	push	r28
    75ae:	00 d0       	rcall	.+0      	; 0x75b0 <fromLSB16+0x6>
    75b0:	cd b7       	in	r28, 0x3d	; 61
    75b2:	de b7       	in	r29, 0x3e	; 62
    75b4:	9c 01       	movw	r18, r24
//-------------------------------------------------------------------------
inline int is_host_lsb(void)
{
    const uint8_t n[2] = {
        1, 0
    };
    75b6:	81 e0       	ldi	r24, 0x01	; 1
    75b8:	89 83       	std	Y+1, r24	; 0x01
    75ba:	1a 82       	std	Y+2, r1	; 0x02
}

//-------------------------------------------------------------------------
inline uint16_t fromLSB16(uint16_t a)
{
    return is_host_lsb()? a : (a << 8) | (a >> 8);
    75bc:	89 81       	ldd	r24, Y+1	; 0x01
    75be:	9a 81       	ldd	r25, Y+2	; 0x02
    75c0:	01 97       	sbiw	r24, 0x01	; 1
    75c2:	19 f0       	breq	.+6      	; 0x75ca <fromLSB16+0x20>
    75c4:	82 2f       	mov	r24, r18
    75c6:	23 2f       	mov	r18, r19
    75c8:	38 2f       	mov	r19, r24
}
    75ca:	c9 01       	movw	r24, r18
    75cc:	0f 90       	pop	r0
    75ce:	0f 90       	pop	r0
    75d0:	cf 91       	pop	r28
    75d2:	df 91       	pop	r29
    75d4:	08 95       	ret

000075d6 <mystrcpy>:
   along with LiteOS.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "string.h"
//-------------------------------------------------------------------------
void mystrcpy(char *dest, const char *src)
{
    75d6:	cf 93       	push	r28
    75d8:	df 93       	push	r29
    75da:	eb 01       	movw	r28, r22
    int i;

    i = 0;
    while (src[i] != '\0')
    75dc:	e8 81       	ld	r30, Y
    75de:	ee 23       	and	r30, r30
    75e0:	b1 f0       	breq	.+44     	; 0x760e <mystrcpy+0x38>
    75e2:	20 e0       	ldi	r18, 0x00	; 0
    75e4:	30 e0       	ldi	r19, 0x00	; 0
    75e6:	a0 e0       	ldi	r26, 0x00	; 0
    75e8:	b0 e0       	ldi	r27, 0x00	; 0
    {
        dest[i] = src[i];
    75ea:	a8 0f       	add	r26, r24
    75ec:	b9 1f       	adc	r27, r25
    75ee:	ec 93       	st	X, r30
        i++;
    75f0:	2f 5f       	subi	r18, 0xFF	; 255
    75f2:	3f 4f       	sbci	r19, 0xFF	; 255
    75f4:	d9 01       	movw	r26, r18
void mystrcpy(char *dest, const char *src)
{
    int i;

    i = 0;
    while (src[i] != '\0')
    75f6:	fe 01       	movw	r30, r28
    75f8:	e2 0f       	add	r30, r18
    75fa:	f3 1f       	adc	r31, r19
    75fc:	e0 81       	ld	r30, Z
    75fe:	ee 23       	and	r30, r30
    7600:	a1 f7       	brne	.-24     	; 0x75ea <mystrcpy+0x14>
    {
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';
    7602:	a8 0f       	add	r26, r24
    7604:	b9 1f       	adc	r27, r25
    7606:	1c 92       	st	X, r1
}
    7608:	df 91       	pop	r29
    760a:	cf 91       	pop	r28
    760c:	08 95       	ret
void mystrcpy(char *dest, const char *src)
{
    int i;

    i = 0;
    while (src[i] != '\0')
    760e:	a0 e0       	ldi	r26, 0x00	; 0
    7610:	b0 e0       	ldi	r27, 0x00	; 0
    7612:	f7 cf       	rjmp	.-18     	; 0x7602 <mystrcpy+0x2c>

00007614 <mystrncpy>:
    dest[i] = '\0';
}

//-------------------------------------------------------------------------
void mystrncpy(char *dest, const char *src, uint8_t n)
{
    7614:	cf 93       	push	r28
    7616:	df 93       	push	r29
    7618:	ec 01       	movw	r28, r24
    int i;

    for (i = 0; i < n; i++)
    761a:	50 e0       	ldi	r21, 0x00	; 0
    761c:	41 15       	cp	r20, r1
    761e:	51 05       	cpc	r21, r1
    7620:	79 f0       	breq	.+30     	; 0x7640 <mystrncpy+0x2c>
    7622:	20 e0       	ldi	r18, 0x00	; 0
    7624:	30 e0       	ldi	r19, 0x00	; 0
    {
        dest[i] = src[i];
    7626:	fe 01       	movw	r30, r28
    7628:	e2 0f       	add	r30, r18
    762a:	f3 1f       	adc	r31, r19
    762c:	db 01       	movw	r26, r22
    762e:	a2 0f       	add	r26, r18
    7630:	b3 1f       	adc	r27, r19
    7632:	8c 91       	ld	r24, X
    7634:	80 83       	st	Z, r24
//-------------------------------------------------------------------------
void mystrncpy(char *dest, const char *src, uint8_t n)
{
    int i;

    for (i = 0; i < n; i++)
    7636:	2f 5f       	subi	r18, 0xFF	; 255
    7638:	3f 4f       	sbci	r19, 0xFF	; 255
    763a:	24 17       	cp	r18, r20
    763c:	35 07       	cpc	r19, r21
    763e:	9c f3       	brlt	.-26     	; 0x7626 <mystrncpy+0x12>
    {
        dest[i] = src[i];
    }
}
    7640:	df 91       	pop	r29
    7642:	cf 91       	pop	r28
    7644:	08 95       	ret

00007646 <strappend>:

//-------------------------------------------------------------------------
void strappend(char *base, char *string)
{
    7646:	0f 93       	push	r16
    7648:	1f 93       	push	r17
    764a:	cf 93       	push	r28
    764c:	df 93       	push	r29
    764e:	8c 01       	movw	r16, r24
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    7650:	fc 01       	movw	r30, r24
    7652:	80 81       	ld	r24, Z
    7654:	88 23       	and	r24, r24
    7656:	c1 f1       	breq	.+112    	; 0x76c8 <strappend+0x82>
    7658:	40 e0       	ldi	r20, 0x00	; 0
    765a:	50 e0       	ldi	r21, 0x00	; 0
    {
        count++;
    765c:	4f 5f       	subi	r20, 0xFF	; 255
    765e:	5f 4f       	sbci	r21, 0xFF	; 255
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    7660:	e8 01       	movw	r28, r16
    7662:	c4 0f       	add	r28, r20
    7664:	d5 1f       	adc	r29, r21
    7666:	88 81       	ld	r24, Y
    7668:	88 23       	and	r24, r24
    766a:	c1 f7       	brne	.-16     	; 0x765c <strappend+0x16>
    {
        count++;
    766c:	fb 01       	movw	r30, r22
    766e:	80 81       	ld	r24, Z
    7670:	88 23       	and	r24, r24
    7672:	69 f1       	breq	.+90     	; 0x76ce <strappend+0x88>
    7674:	20 e0       	ldi	r18, 0x00	; 0
    7676:	30 e0       	ldi	r19, 0x00	; 0
    7678:	2f 5f       	subi	r18, 0xFF	; 255
    767a:	3f 4f       	sbci	r19, 0xFF	; 255
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    767c:	fb 01       	movw	r30, r22
    767e:	e2 0f       	add	r30, r18
    7680:	f3 1f       	adc	r31, r19
    7682:	80 81       	ld	r24, Z
    7684:	88 23       	and	r24, r24
    7686:	c1 f7       	brne	.-16     	; 0x7678 <strappend+0x32>
    7688:	90 e0       	ldi	r25, 0x00	; 0
    768a:	a0 e0       	ldi	r26, 0x00	; 0
    768c:	b0 e0       	ldi	r27, 0x00	; 0
    768e:	e8 01       	movw	r28, r16
    7690:	c4 0f       	add	r28, r20
    7692:	d5 1f       	adc	r29, r21
    7694:	e0 e0       	ldi	r30, 0x00	; 0
    7696:	f0 e0       	ldi	r31, 0x00	; 0

    length1 = mystrlen(base);
    length2 = mystrlen(string);
    for (i = 0; i < length2; i++)
    {
        base[i + length1] = string[i];
    7698:	ac 0f       	add	r26, r28
    769a:	bd 1f       	adc	r27, r29
    769c:	e6 0f       	add	r30, r22
    769e:	f7 1f       	adc	r31, r23
    76a0:	80 81       	ld	r24, Z
    76a2:	8c 93       	st	X, r24
    int length1, length2;
    uint8_t i;

    length1 = mystrlen(base);
    length2 = mystrlen(string);
    for (i = 0; i < length2; i++)
    76a4:	9f 5f       	subi	r25, 0xFF	; 255
    76a6:	e9 2f       	mov	r30, r25
    76a8:	f0 e0       	ldi	r31, 0x00	; 0
    76aa:	df 01       	movw	r26, r30
    76ac:	e2 17       	cp	r30, r18
    76ae:	f3 07       	cpc	r31, r19
    76b0:	9c f3       	brlt	.-26     	; 0x7698 <strappend+0x52>
    {
        base[i + length1] = string[i];
    }
    base[length1 + length2] = '\0';
    76b2:	20 0f       	add	r18, r16
    76b4:	31 1f       	adc	r19, r17
    76b6:	42 0f       	add	r20, r18
    76b8:	53 1f       	adc	r21, r19
    76ba:	fa 01       	movw	r30, r20
    76bc:	10 82       	st	Z, r1
}
    76be:	df 91       	pop	r29
    76c0:	cf 91       	pop	r28
    76c2:	1f 91       	pop	r17
    76c4:	0f 91       	pop	r16
    76c6:	08 95       	ret
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    76c8:	40 e0       	ldi	r20, 0x00	; 0
    76ca:	50 e0       	ldi	r21, 0x00	; 0
    76cc:	cf cf       	rjmp	.-98     	; 0x766c <strappend+0x26>
    76ce:	20 e0       	ldi	r18, 0x00	; 0
    76d0:	30 e0       	ldi	r19, 0x00	; 0
    76d2:	ef cf       	rjmp	.-34     	; 0x76b2 <strappend+0x6c>

000076d4 <superstring>:
    return temp;
}

//-------------------------------------------------------------------------
int superstring(char *string1, char *string2)
{
    76d4:	cf 93       	push	r28
    76d6:	df 93       	push	r29
    76d8:	fc 01       	movw	r30, r24
    76da:	eb 01       	movw	r28, r22
    //else return 1
    char *p, *q;

    p = string1;
    q = string2;
    while ((*p == *q) && (*p != '\0'))
    76dc:	80 81       	ld	r24, Z
    76de:	28 81       	ld	r18, Y
    76e0:	82 17       	cp	r24, r18
    76e2:	69 f4       	brne	.+26     	; 0x76fe <superstring+0x2a>
    76e4:	88 23       	and	r24, r24
    76e6:	c1 f0       	breq	.+48     	; 0x7718 <superstring+0x44>
    76e8:	df 01       	movw	r26, r30
    76ea:	fb 01       	movw	r30, r22
    76ec:	02 c0       	rjmp	.+4      	; 0x76f2 <superstring+0x1e>
    76ee:	88 23       	and	r24, r24
    76f0:	99 f0       	breq	.+38     	; 0x7718 <superstring+0x44>
    {
        p++;
    76f2:	11 96       	adiw	r26, 0x01	; 1
        q++;
    76f4:	31 96       	adiw	r30, 0x01	; 1
    //else return 1
    char *p, *q;

    p = string1;
    q = string2;
    while ((*p == *q) && (*p != '\0'))
    76f6:	8c 91       	ld	r24, X
    76f8:	20 81       	ld	r18, Z
    76fa:	82 17       	cp	r24, r18
    76fc:	c1 f3       	breq	.-16     	; 0x76ee <superstring+0x1a>
    76fe:	90 e0       	ldi	r25, 0x00	; 0
    7700:	22 23       	and	r18, r18
    7702:	41 f0       	breq	.+16     	; 0x7714 <superstring+0x40>
    7704:	81 e0       	ldi	r24, 0x01	; 1
    7706:	98 27       	eor	r25, r24
    7708:	29 2f       	mov	r18, r25
    770a:	30 e0       	ldi	r19, 0x00	; 0
    {
        return 0;
    }

    return 1;
}
    770c:	c9 01       	movw	r24, r18
    770e:	df 91       	pop	r29
    7710:	cf 91       	pop	r28
    7712:	08 95       	ret
    //else return 1
    char *p, *q;

    p = string1;
    q = string2;
    while ((*p == *q) && (*p != '\0'))
    7714:	91 e0       	ldi	r25, 0x01	; 1
    7716:	f6 cf       	rjmp	.-20     	; 0x7704 <superstring+0x30>
    7718:	20 e0       	ldi	r18, 0x00	; 0
    771a:	30 e0       	ldi	r19, 0x00	; 0
    {
        return 0;
    }

    return 1;
}
    771c:	c9 01       	movw	r24, r18
    771e:	df 91       	pop	r29
    7720:	cf 91       	pop	r28
    7722:	08 95       	ret

00007724 <mystrncmp>:

//-------------------------------------------------------------------------
int mystrncmp(char *s, uint8_t start1, char *t, uint8_t start2, uint8_t length)
{
    7724:	0f 93       	push	r16
    7726:	cf 93       	push	r28
    7728:	df 93       	push	r29
    772a:	ec 01       	movw	r28, r24
    uint8_t i;

    for (i = 0; i < length; i++)
    772c:	00 23       	and	r16, r16
    772e:	e9 f0       	breq	.+58     	; 0x776a <mystrncmp+0x46>
    {
        if (s[i + start1] != t[i + start2])
    7730:	70 e0       	ldi	r23, 0x00	; 0
    7732:	30 e0       	ldi	r19, 0x00	; 0
    7734:	fc 01       	movw	r30, r24
    7736:	e6 0f       	add	r30, r22
    7738:	f7 1f       	adc	r31, r23
    773a:	da 01       	movw	r26, r20
    773c:	a2 0f       	add	r26, r18
    773e:	b3 1f       	adc	r27, r19
    7740:	90 81       	ld	r25, Z
    7742:	8c 91       	ld	r24, X
    7744:	98 17       	cp	r25, r24
    7746:	c1 f4       	brne	.+48     	; 0x7778 <mystrncmp+0x54>
    7748:	db 01       	movw	r26, r22
    774a:	11 96       	adiw	r26, 0x01	; 1
    774c:	ac 0f       	add	r26, r28
    774e:	bd 1f       	adc	r27, r29
    7750:	f9 01       	movw	r30, r18
    7752:	31 96       	adiw	r30, 0x01	; 1
    7754:	e4 0f       	add	r30, r20
    7756:	f5 1f       	adc	r31, r21
    7758:	20 e0       	ldi	r18, 0x00	; 0
    775a:	04 c0       	rjmp	.+8      	; 0x7764 <mystrncmp+0x40>
    775c:	9d 91       	ld	r25, X+
    775e:	81 91       	ld	r24, Z+
    7760:	98 17       	cp	r25, r24
    7762:	51 f4       	brne	.+20     	; 0x7778 <mystrncmp+0x54>
//-------------------------------------------------------------------------
int mystrncmp(char *s, uint8_t start1, char *t, uint8_t start2, uint8_t length)
{
    uint8_t i;

    for (i = 0; i < length; i++)
    7764:	2f 5f       	subi	r18, 0xFF	; 255
    7766:	20 17       	cp	r18, r16
    7768:	c8 f3       	brcs	.-14     	; 0x775c <mystrncmp+0x38>
    776a:	20 e0       	ldi	r18, 0x00	; 0
    776c:	30 e0       	ldi	r19, 0x00	; 0
        {
            return 1;
        }
    }
    return 0;
}
    776e:	c9 01       	movw	r24, r18
    7770:	df 91       	pop	r29
    7772:	cf 91       	pop	r28
    7774:	0f 91       	pop	r16
    7776:	08 95       	ret
//-------------------------------------------------------------------------
int mystrncmp(char *s, uint8_t start1, char *t, uint8_t start2, uint8_t length)
{
    uint8_t i;

    for (i = 0; i < length; i++)
    7778:	21 e0       	ldi	r18, 0x01	; 1
    777a:	30 e0       	ldi	r19, 0x00	; 0
        {
            return 1;
        }
    }
    return 0;
}
    777c:	c9 01       	movw	r24, r18
    777e:	df 91       	pop	r29
    7780:	cf 91       	pop	r28
    7782:	0f 91       	pop	r16
    7784:	08 95       	ret

00007786 <mystrlen>:

//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    7786:	dc 01       	movw	r26, r24
    int count = 0;

    while (s[count] != '\0')
    7788:	8c 91       	ld	r24, X
    778a:	88 23       	and	r24, r24
    778c:	61 f0       	breq	.+24     	; 0x77a6 <mystrlen+0x20>
    778e:	20 e0       	ldi	r18, 0x00	; 0
    7790:	30 e0       	ldi	r19, 0x00	; 0
    {
        count++;
    7792:	2f 5f       	subi	r18, 0xFF	; 255
    7794:	3f 4f       	sbci	r19, 0xFF	; 255
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    7796:	fd 01       	movw	r30, r26
    7798:	e2 0f       	add	r30, r18
    779a:	f3 1f       	adc	r31, r19
    779c:	80 81       	ld	r24, Z
    779e:	88 23       	and	r24, r24
    77a0:	c1 f7       	brne	.-16     	; 0x7792 <mystrlen+0xc>
    {
        count++;
    }

    return count;
}
    77a2:	c9 01       	movw	r24, r18
    77a4:	08 95       	ret
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    77a6:	20 e0       	ldi	r18, 0x00	; 0
    77a8:	30 e0       	ldi	r19, 0x00	; 0
    77aa:	fb cf       	rjmp	.-10     	; 0x77a2 <mystrlen+0x1c>

000077ac <str_from_integer>:
    base[length1 + length2] = '\0';
}

//-------------------------------------------------------------------------
char *str_from_integer(int num)
{
    77ac:	ef 92       	push	r14
    77ae:	ff 92       	push	r15
    77b0:	1f 93       	push	r17
    77b2:	cf 93       	push	r28
    77b4:	df 93       	push	r29
    77b6:	7c 01       	movw	r14, r24
    77b8:	ec 01       	movw	r28, r24
    77ba:	97 fd       	sbrc	r25, 7
    77bc:	40 c0       	rjmp	.+128    	; 0x783e <str_from_integer+0x92>
    }
    else
    {
        internal = num;
    }
    temp[6] = '\0';
    77be:	10 92 b2 03 	sts	0x03B2, r1
    77c2:	15 e0       	ldi	r17, 0x05	; 5
    do
    {
        remainder = internal % 10;
        temp[offset] = dec2asciichar(remainder);
    77c4:	ce 01       	movw	r24, r28
    77c6:	6a e0       	ldi	r22, 0x0A	; 10
    77c8:	70 e0       	ldi	r23, 0x00	; 0
    77ca:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    77ce:	0e 94 3d 3c 	call	0x787a	; 0x787a <dec2asciichar>
    77d2:	e1 2f       	mov	r30, r17
    77d4:	f0 e0       	ldi	r31, 0x00	; 0
    77d6:	e4 55       	subi	r30, 0x54	; 84
    77d8:	fc 4f       	sbci	r31, 0xFC	; 252
    77da:	80 83       	st	Z, r24
        internal = internal / 10;
    77dc:	ce 01       	movw	r24, r28
    77de:	6a e0       	ldi	r22, 0x0A	; 10
    77e0:	70 e0       	ldi	r23, 0x00	; 0
    77e2:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    77e6:	eb 01       	movw	r28, r22
        offset--;
    77e8:	11 50       	subi	r17, 0x01	; 1
    }

    while (internal != 0);
    77ea:	61 15       	cp	r22, r1
    77ec:	71 05       	cpc	r23, r1
    77ee:	51 f7       	brne	.-44     	; 0x77c4 <str_from_integer+0x18>
    if (num < 0)
    77f0:	f7 fc       	sbrc	r15, 7
    77f2:	1b c0       	rjmp	.+54     	; 0x782a <str_from_integer+0x7e>
        {
            offset--;
        }
    }
    {
        length = 7 - offset - 1;
    77f4:	86 e0       	ldi	r24, 0x06	; 6
    77f6:	81 1b       	sub	r24, r17
        for (i = 0; i < length; i++)
    77f8:	81 f0       	breq	.+32     	; 0x781a <str_from_integer+0x6e>
    77fa:	e1 2f       	mov	r30, r17
    77fc:	f0 e0       	ldi	r31, 0x00	; 0
    77fe:	e3 55       	subi	r30, 0x53	; 83
    7800:	fc 4f       	sbci	r31, 0xFC	; 252
    7802:	ac ea       	ldi	r26, 0xAC	; 172
    7804:	b3 e0       	ldi	r27, 0x03	; 3
    7806:	81 50       	subi	r24, 0x01	; 1
    7808:	28 2f       	mov	r18, r24
    780a:	30 e0       	ldi	r19, 0x00	; 0
    780c:	23 55       	subi	r18, 0x53	; 83
    780e:	3c 4f       	sbci	r19, 0xFC	; 252
        {
            temp[i] = temp[i + offset + 1];
    7810:	81 91       	ld	r24, Z+
    7812:	8d 93       	st	X+, r24
            offset--;
        }
    }
    {
        length = 7 - offset - 1;
        for (i = 0; i < length; i++)
    7814:	a2 17       	cp	r26, r18
    7816:	b3 07       	cpc	r27, r19
    7818:	d9 f7       	brne	.-10     	; 0x7810 <str_from_integer+0x64>
        {
            temp[i] = temp[i + offset + 1];
        }
    }
    return temp;
}
    781a:	8c ea       	ldi	r24, 0xAC	; 172
    781c:	93 e0       	ldi	r25, 0x03	; 3
    781e:	df 91       	pop	r29
    7820:	cf 91       	pop	r28
    7822:	1f 91       	pop	r17
    7824:	ff 90       	pop	r15
    7826:	ef 90       	pop	r14
    7828:	08 95       	ret
    }

    while (internal != 0);
    if (num < 0)
    {
        temp[offset] = '-';
    782a:	e1 2f       	mov	r30, r17
    782c:	f0 e0       	ldi	r31, 0x00	; 0
    782e:	e4 55       	subi	r30, 0x54	; 84
    7830:	fc 4f       	sbci	r31, 0xFC	; 252
    7832:	8d e2       	ldi	r24, 0x2D	; 45
    7834:	80 83       	st	Z, r24
        if (offset == 0)
    7836:	11 23       	and	r17, r17
    7838:	81 f3       	breq	.-32     	; 0x781a <str_from_integer+0x6e>
        {
            return temp;
        }
        else
        {
            offset--;
    783a:	11 50       	subi	r17, 0x01	; 1
    783c:	db cf       	rjmp	.-74     	; 0x77f4 <str_from_integer+0x48>
    base[length1 + length2] = '\0';
}

//-------------------------------------------------------------------------
char *str_from_integer(int num)
{
    783e:	cc 27       	eor	r28, r28
    7840:	dd 27       	eor	r29, r29
    7842:	c8 1b       	sub	r28, r24
    7844:	d9 0b       	sbc	r29, r25
    7846:	bb cf       	rjmp	.-138    	; 0x77be <str_from_integer+0x12>

00007848 <rcombine>:
#ifdef PLATFORM_AVR
#include "../hardware/avrhardware.h"
#endif
inline result_t rcombine(result_t r1, result_t r2)
{
    return r1 == FAIL ? FAIL : r2;
    7848:	88 23       	and	r24, r24
    784a:	09 f4       	brne	.+2      	; 0x784e <rcombine+0x6>
    784c:	60 e0       	ldi	r22, 0x00	; 0
}
    784e:	86 2f       	mov	r24, r22
    7850:	08 95       	ret

00007852 <hex2value>:

//-------------------------------------------------------------------------
uint16_t hex2value(uint8_t hex)
{
    7852:	98 2f       	mov	r25, r24
    char a = (char)hex;
    uint16_t high;

    if ((a >= '0') && (a <= '9'))
    7854:	80 53       	subi	r24, 0x30	; 48
    7856:	8a 30       	cpi	r24, 0x0A	; 10
    7858:	40 f0       	brcs	.+16     	; 0x786a <hex2value+0x18>
    {
        high = a - '0';
    }
    else
    {
        high = a - 'A' + 10;
    785a:	29 2f       	mov	r18, r25
    785c:	33 27       	eor	r19, r19
    785e:	27 fd       	sbrc	r18, 7
    7860:	30 95       	com	r19
    7862:	27 53       	subi	r18, 0x37	; 55
    7864:	30 40       	sbci	r19, 0x00	; 0
    }

    return high;
}
    7866:	c9 01       	movw	r24, r18
    7868:	08 95       	ret
    char a = (char)hex;
    uint16_t high;

    if ((a >= '0') && (a <= '9'))
    {
        high = a - '0';
    786a:	29 2f       	mov	r18, r25
    786c:	33 27       	eor	r19, r19
    786e:	27 fd       	sbrc	r18, 7
    7870:	30 95       	com	r19
    7872:	20 53       	subi	r18, 0x30	; 48
    7874:	30 40       	sbci	r19, 0x00	; 0
    {
        high = a - 'A' + 10;
    }

    return high;
}
    7876:	c9 01       	movw	r24, r18
    7878:	08 95       	ret

0000787a <dec2asciichar>:

//-------------------------------------------------------------------------
char dec2asciichar(uint8_t value)
{
    if ( /*( value >= 0 ) && */ (value <= 9))
    787a:	8a 30       	cpi	r24, 0x0A	; 10
    787c:	10 f4       	brcc	.+4      	; 0x7882 <dec2asciichar+0x8>
    {
        return (char)(value + 0x30);
    787e:	80 5d       	subi	r24, 0xD0	; 208
    }
    else
    {
        return 0;
    }
}
    7880:	08 95       	ret
}

//-------------------------------------------------------------------------
char dec2asciichar(uint8_t value)
{
    if ( /*( value >= 0 ) && */ (value <= 9))
    7882:	80 e0       	ldi	r24, 0x00	; 0
    7884:	08 95       	ret

00007886 <nmemset>:
#endif
}

//-------------------------------------------------------------------------
inline void *nmemset(void *to, int val, size_t n)
{
    7886:	78 2f       	mov	r23, r24
    7888:	a9 2f       	mov	r26, r25
    char *cto = to;

    while (n--)
    788a:	41 15       	cp	r20, r1
    788c:	51 05       	cpc	r21, r1
    788e:	31 f0       	breq	.+12     	; 0x789c <nmemset+0x16>
}

//-------------------------------------------------------------------------
inline void *nmemset(void *to, int val, size_t n)
{
    char *cto = to;
    7890:	9c 01       	movw	r18, r24
    7892:	f9 01       	movw	r30, r18

    while (n--)
    {
        *cto++ = val;
    7894:	61 93       	st	Z+, r22
    7896:	41 50       	subi	r20, 0x01	; 1
    7898:	50 40       	sbci	r21, 0x00	; 0
//-------------------------------------------------------------------------
inline void *nmemset(void *to, int val, size_t n)
{
    char *cto = to;

    while (n--)
    789a:	e1 f7       	brne	.-8      	; 0x7894 <nmemset+0xe>
    {
        *cto++ = val;
    }

    return to;
}
    789c:	87 2f       	mov	r24, r23
    789e:	9a 2f       	mov	r25, r26
    78a0:	08 95       	ret

000078a2 <_atomic_end>:

//-------------------------------------------------------------------------
void _atomic_end(_atomic_t oldSreg)
{
#ifdef PLATFORM_AVR
    _atomic_end_avr(oldSreg);
    78a2:	0e 94 67 02 	call	0x4ce	; 0x4ce <_atomic_end_avr>
#endif
}
    78a6:	08 95       	ret

000078a8 <_atomic_start>:

//-------------------------------------------------------------------------
_atomic_t _atomic_start(void)
{
#ifdef PLATFORM_AVR
    _atomic_t result = _atomic_start_avr();
    78a8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_atomic_start_avr>
#endif
    return result;
}
    78ac:	08 95       	ret

000078ae <getRandomNumber>:
uint16_t getRandomNumber()
{
    uint16_t ret;

#ifdef PLATFORM_AVR
    ret = rand();
    78ae:	0e 94 55 56 	call	0xacaa	; 0xacaa <rand>
#endif
    return ret;
}
    78b2:	08 95       	ret

000078b4 <init_breakpoint_table>:

void init_breakpoint_table()
{
   int i;
   for (i=0; i< NUM_BREAKPOINTS; i++)
     br_state[i].active = 0; 	
    78b4:	10 92 22 08 	sts	0x0822, r1
    78b8:	10 92 2b 08 	sts	0x082B, r1
    78bc:	10 92 34 08 	sts	0x0834, r1
	
}
    78c0:	08 95       	ret

000078c2 <get_breakpoint_index>:
uint8_t get_breakpoint_index()
{
    int i; 	
	  for (i=0; i< NUM_BREAKPOINTS; i++)
     {
     	  if ( br_state[i].active == 0)
    78c2:	80 91 22 08 	lds	r24, 0x0822
    78c6:	88 23       	and	r24, r24
    78c8:	51 f0       	breq	.+20     	; 0x78de <get_breakpoint_index+0x1c>
    78ca:	80 91 2b 08 	lds	r24, 0x082B
    78ce:	88 23       	and	r24, r24
    78d0:	b9 f0       	breq	.+46     	; 0x7900 <get_breakpoint_index+0x3e>
    78d2:	80 91 34 08 	lds	r24, 0x0834
    78d6:	88 23       	and	r24, r24
    78d8:	b1 f0       	breq	.+44     	; 0x7906 <get_breakpoint_index+0x44>
    78da:	8f ef       	ldi	r24, 0xFF	; 255
    78dc:	08 95       	ret
    78de:	20 e0       	ldi	r18, 0x00	; 0
    78e0:	30 e0       	ldi	r19, 0x00	; 0
     	  	{
     	  		 br_state[i].active = 1; 
    78e2:	f9 01       	movw	r30, r18
    78e4:	ee 0f       	add	r30, r30
    78e6:	ff 1f       	adc	r31, r31
    78e8:	ee 0f       	add	r30, r30
    78ea:	ff 1f       	adc	r31, r31
    78ec:	ee 0f       	add	r30, r30
    78ee:	ff 1f       	adc	r31, r31
    78f0:	e2 0f       	add	r30, r18
    78f2:	f3 1f       	adc	r31, r19
    78f4:	e6 5e       	subi	r30, 0xE6	; 230
    78f6:	f7 4f       	sbci	r31, 0xF7	; 247
    78f8:	81 e0       	ldi	r24, 0x01	; 1
    78fa:	80 87       	std	Z+8, r24	; 0x08
     	  		 return i; 
    78fc:	82 2f       	mov	r24, r18
     	    }
	   } 
	   return 255;  
}
    78fe:	08 95       	ret
uint8_t get_breakpoint_index()
{
    int i; 	
	  for (i=0; i< NUM_BREAKPOINTS; i++)
     {
     	  if ( br_state[i].active == 0)
    7900:	21 e0       	ldi	r18, 0x01	; 1
    7902:	30 e0       	ldi	r19, 0x00	; 0
    7904:	ee cf       	rjmp	.-36     	; 0x78e2 <get_breakpoint_index+0x20>
    7906:	22 e0       	ldi	r18, 0x02	; 2
    7908:	30 e0       	ldi	r19, 0x00	; 0
    790a:	eb cf       	rjmp	.-42     	; 0x78e2 <get_breakpoint_index+0x20>

0000790c <reply_ls_short>:
//Get the block information of sub directory and files using simplfied version 
void reply_ls_short(uint8_t block)
{
    //Actually this is not used because to ensure that the system is simple, we only use the long version 
    return;
}
    790c:	08 95       	ret

0000790e <InitShell>:
    postNewThreadTask();
}

//-------------------------------------------------------------------------
void InitShell()
{
    790e:	ef 92       	push	r14
    7910:	ff 92       	push	r15
    7912:	0f 93       	push	r16
    7914:	1f 93       	push	r17
    IncomingLength = 0;
    7916:	10 92 73 08 	sts	0x0873, r1
    nodeid = CURRENT_NODE_ID;
    791a:	80 91 04 04 	lds	r24, 0x0404
    791e:	90 91 05 04 	lds	r25, 0x0405
    7922:	90 93 b9 08 	sts	0x08B9, r25
    7926:	80 93 b8 08 	sts	0x08B8, r24
    registerEvent(0xfefe, 64, &IncomingLength, IncomingMsg, PacketInfo,
    792a:	8e ef       	ldi	r24, 0xFE	; 254
    792c:	9e ef       	ldi	r25, 0xFE	; 254
    792e:	60 e4       	ldi	r22, 0x40	; 64
    7930:	43 e7       	ldi	r20, 0x73	; 115
    7932:	58 e0       	ldi	r21, 0x08	; 8
    7934:	24 e7       	ldi	r18, 0x74	; 116
    7936:	38 e0       	ldi	r19, 0x08	; 8
    7938:	04 eb       	ldi	r16, 0xB4	; 180
    793a:	18 e0       	ldi	r17, 0x08	; 8
    793c:	7f ea       	ldi	r23, 0xAF	; 175
    793e:	e7 2e       	mov	r14, r23
    7940:	7c e3       	ldi	r23, 0x3C	; 60
    7942:	f7 2e       	mov	r15, r23
    7944:	0e 94 b6 09 	call	0x136c	; 0x136c <registerEvent>

void init_breakpoint_table()
{
   int i;
   for (i=0; i< NUM_BREAKPOINTS; i++)
     br_state[i].active = 0; 	
    7948:	10 92 22 08 	sts	0x0822, r1
    794c:	10 92 2b 08 	sts	0x082B, r1
    7950:	10 92 34 08 	sts	0x0834, r1
    IncomingLength = 0;
    nodeid = CURRENT_NODE_ID;
    registerEvent(0xfefe, 64, &IncomingLength, IncomingMsg, PacketInfo,
                  WakeupMe);
    init_breakpoint_table();
}
    7954:	1f 91       	pop	r17
    7956:	0f 91       	pop	r16
    7958:	ff 90       	pop	r15
    795a:	ef 90       	pop	r14
    795c:	08 95       	ret

0000795e <WakeupMe>:
}

//-------------------------------------------------------------------------
void WakeupMe()
{
    thisthread->state = STATE_ACTIVE;
    795e:	e0 91 b6 08 	lds	r30, 0x08B6
    7962:	f0 91 b7 08 	lds	r31, 0x08B7
    7966:	82 e0       	ldi	r24, 0x02	; 2
    7968:	82 83       	std	Z+2, r24	; 0x02
    postNewThreadTask();
    796a:	0e 94 05 18 	call	0x300a	; 0x300a <postNewThreadTask>
}
    796e:	08 95       	ret

00007970 <reply_nodeRestart>:
}

//-------------------------------------------------------------------------
void reply_nodeRestart(uint8_t * receivebuffer)
{
    avr_resetNode();
    7970:	0e 94 69 02 	call	0x4d2	; 0x4d2 <avr_resetNode>
}
    7974:	08 95       	ret

00007976 <reply_formatSystem>:
}

//-------------------------------------------------------------------------
void reply_formatSystem(uint8_t * receivebuffer)
{
    formatSystem();
    7976:	0e 94 9a 20 	call	0x4134	; 0x4134 <formatSystem>
    buildRootNode();
    797a:	0e 94 a0 29 	call	0x5340	; 0x5340 <buildRootNode>
    
}
    797e:	08 95       	ret

00007980 <reply_search>:
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_search(uint8_t * receivebuffer)
{
    7980:	cf 92       	push	r12
    7982:	df 92       	push	r13
    7984:	ef 92       	push	r14
    7986:	ff 92       	push	r15
    7988:	0f 93       	push	r16
    798a:	1f 93       	push	r17
    798c:	df 93       	push	r29
    798e:	cf 93       	push	r28
    7990:	cd b7       	in	r28, 0x3d	; 61
    7992:	de b7       	in	r29, 0x3e	; 62
    7994:	a2 97       	sbiw	r28, 0x22	; 34
    7996:	0f b6       	in	r0, 0x3f	; 63
    7998:	f8 94       	cli
    799a:	de bf       	out	0x3e, r29	; 62
    799c:	0f be       	out	0x3f, r0	; 63
    799e:	cd bf       	out	0x3d, r28	; 61
    79a0:	8c 01       	movw	r16, r24
    char filename[13];
    uint8_t searchresults[20];
    uint8_t numofsearch;
    uint8_t i;

    mystrncpy(filename, (char *)&receivebuffer[3], receivebuffer[0] - 3);
    79a2:	f2 e0       	ldi	r31, 0x02	; 2
    79a4:	ef 2e       	mov	r14, r31
    79a6:	f1 2c       	mov	r15, r1
    79a8:	ec 0e       	add	r14, r28
    79aa:	fd 1e       	adc	r15, r29
    79ac:	bc 01       	movw	r22, r24
    79ae:	6d 5f       	subi	r22, 0xFD	; 253
    79b0:	7f 4f       	sbci	r23, 0xFF	; 255
    79b2:	fc 01       	movw	r30, r24
    79b4:	40 81       	ld	r20, Z
    79b6:	43 50       	subi	r20, 0x03	; 3
    79b8:	c7 01       	movw	r24, r14
    79ba:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
    filename[receivebuffer[0] - 3] = '\0';
    79be:	f8 01       	movw	r30, r16
    79c0:	80 81       	ld	r24, Z
    79c2:	fe 01       	movw	r30, r28
    79c4:	31 97       	sbiw	r30, 0x01	; 1
    79c6:	e8 0f       	add	r30, r24
    79c8:	f1 1d       	adc	r31, r1
    79ca:	10 82       	st	Z, r1
    fsearch(searchresults, &numofsearch, filename);
    79cc:	ef e0       	ldi	r30, 0x0F	; 15
    79ce:	ce 2e       	mov	r12, r30
    79d0:	d1 2c       	mov	r13, r1
    79d2:	cc 0e       	add	r12, r28
    79d4:	dd 1e       	adc	r13, r29
    79d6:	c6 01       	movw	r24, r12
    79d8:	be 01       	movw	r22, r28
    79da:	6f 5f       	subi	r22, 0xFF	; 255
    79dc:	7f 4f       	sbci	r23, 0xFF	; 255
    79de:	a7 01       	movw	r20, r14
    79e0:	0e 94 9d 20 	call	0x413a	; 0x413a <fsearch>
    for (i = 0; i < numofsearch; i++)
    79e4:	89 81       	ldd	r24, Y+1	; 0x01
    79e6:	88 23       	and	r24, r24
    79e8:	39 f1       	breq	.+78     	; 0x7a38 <reply_search+0xb8>
    79ea:	00 e0       	ldi	r16, 0x00	; 0
    {
        fdirnode((char *)&reply[3], 29, searchresults[i]);
        reply[0] = mystrlen((char *)&reply[3]) + 3;
        reply[1] = 221;
    79ec:	1d ed       	ldi	r17, 0xDD	; 221
    mystrncpy(filename, (char *)&receivebuffer[3], receivebuffer[0] - 3);
    filename[receivebuffer[0] - 3] = '\0';
    fsearch(searchresults, &numofsearch, filename);
    for (i = 0; i < numofsearch; i++)
    {
        fdirnode((char *)&reply[3], 29, searchresults[i]);
    79ee:	f6 01       	movw	r30, r12
    79f0:	e0 0f       	add	r30, r16
    79f2:	f1 1d       	adc	r31, r1
    79f4:	40 81       	ld	r20, Z
    79f6:	81 e5       	ldi	r24, 0x51	; 81
    79f8:	98 e0       	ldi	r25, 0x08	; 8
    79fa:	6d e1       	ldi	r22, 0x1D	; 29
    79fc:	70 e0       	ldi	r23, 0x00	; 0
    79fe:	50 e0       	ldi	r21, 0x00	; 0
    7a00:	0e 94 1a 20 	call	0x4034	; 0x4034 <fdirnode>
        reply[0] = mystrlen((char *)&reply[3]) + 3;
    7a04:	81 e5       	ldi	r24, 0x51	; 81
    7a06:	98 e0       	ldi	r25, 0x08	; 8
    7a08:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    7a0c:	8d 5f       	subi	r24, 0xFD	; 253
    7a0e:	80 93 4e 08 	sts	0x084E, r24
        reply[1] = 221;
    7a12:	10 93 4f 08 	sts	0x084F, r17
        reply[2] = nodeid;
    7a16:	80 91 b8 08 	lds	r24, 0x08B8
    7a1a:	80 93 50 08 	sts	0x0850, r24
        //printStringN(reply,32);       
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    7a1e:	8f ee       	ldi	r24, 0xEF	; 239
    7a20:	9f ee       	ldi	r25, 0xEF	; 239
    7a22:	6f ef       	ldi	r22, 0xFF	; 255
    7a24:	7f ef       	ldi	r23, 0xFF	; 255
    7a26:	40 e2       	ldi	r20, 0x20	; 32
    7a28:	2e e4       	ldi	r18, 0x4E	; 78
    7a2a:	38 e0       	ldi	r19, 0x08	; 8
    7a2c:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    uint8_t i;

    mystrncpy(filename, (char *)&receivebuffer[3], receivebuffer[0] - 3);
    filename[receivebuffer[0] - 3] = '\0';
    fsearch(searchresults, &numofsearch, filename);
    for (i = 0; i < numofsearch; i++)
    7a30:	0f 5f       	subi	r16, 0xFF	; 255
    7a32:	89 81       	ldd	r24, Y+1	; 0x01
    7a34:	08 17       	cp	r16, r24
    7a36:	d8 f2       	brcs	.-74     	; 0x79ee <reply_search+0x6e>
        reply[1] = 221;
        reply[2] = nodeid;
        //printStringN(reply,32);       
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
}
    7a38:	a2 96       	adiw	r28, 0x22	; 34
    7a3a:	0f b6       	in	r0, 0x3f	; 63
    7a3c:	f8 94       	cli
    7a3e:	de bf       	out	0x3e, r29	; 62
    7a40:	0f be       	out	0x3f, r0	; 63
    7a42:	cd bf       	out	0x3d, r28	; 61
    7a44:	cf 91       	pop	r28
    7a46:	df 91       	pop	r29
    7a48:	1f 91       	pop	r17
    7a4a:	0f 91       	pop	r16
    7a4c:	ff 90       	pop	r15
    7a4e:	ef 90       	pop	r14
    7a50:	df 90       	pop	r13
    7a52:	cf 90       	pop	r12
    7a54:	08 95       	ret

00007a56 <reply_ps>:
    fclose2(fp);
}

//-------------------------------------------------------------------------
void reply_ps(uint8_t * receivebuffer)
{
    7a56:	af 92       	push	r10
    7a58:	bf 92       	push	r11
    7a5a:	cf 92       	push	r12
    7a5c:	df 92       	push	r13
    7a5e:	ef 92       	push	r14
    7a60:	ff 92       	push	r15
    7a62:	0f 93       	push	r16
    7a64:	1f 93       	push	r17
    7a66:	cf 93       	push	r28
    7a68:	df 93       	push	r29
    uint8_t i, len;

    //reply[0] = 15;
    reply[1] = 171;
    7a6a:	8b ea       	ldi	r24, 0xAB	; 171
    7a6c:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    7a70:	80 91 b8 08 	lds	r24, 0x08B8
    7a74:	80 93 50 08 	sts	0x0850, r24
    7a78:	12 e6       	ldi	r17, 0x62	; 98
    7a7a:	c1 2e       	mov	r12, r17
    7a7c:	15 e0       	ldi	r17, 0x05	; 5
    7a7e:	d1 2e       	mov	r13, r17
    7a80:	c0 e0       	ldi	r28, 0x00	; 0
    7a82:	d0 e0       	ldi	r29, 0x00	; 0
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    7a84:	ce 01       	movw	r24, r28
    7a86:	88 0f       	add	r24, r24
    7a88:	99 1f       	adc	r25, r25
    7a8a:	88 0f       	add	r24, r24
    7a8c:	99 1f       	adc	r25, r25
    7a8e:	88 0f       	add	r24, r24
    7a90:	99 1f       	adc	r25, r25
    7a92:	bc 01       	movw	r22, r24
    7a94:	66 0f       	add	r22, r22
    7a96:	77 1f       	adc	r23, r23
    7a98:	66 0f       	add	r22, r22
    7a9a:	77 1f       	adc	r23, r23
    7a9c:	68 0f       	add	r22, r24
    7a9e:	79 1f       	adc	r23, r25
    7aa0:	6c 1b       	sub	r22, r28
    7aa2:	7d 0b       	sbc	r23, r29
    7aa4:	8b 01       	movw	r16, r22
    7aa6:	0e 59       	subi	r16, 0x9E	; 158
    7aa8:	1a 4f       	sbci	r17, 0xFA	; 250
    7aaa:	d8 01       	movw	r26, r16
    7aac:	12 96       	adiw	r26, 0x02	; 2
    7aae:	8c 91       	ld	r24, X
    7ab0:	88 23       	and	r24, r24
    7ab2:	99 f4       	brne	.+38     	; 0x7ada <reply_ps+0x84>
            else
            {
                mystrncpy((char *)&reply[4],
                          (char *)thread_table[i].threadName, len);
            }
            StandardSocketSend(0xefef, 0xffff, 32, reply);
    7ab4:	21 96       	adiw	r28, 0x01	; 1
    7ab6:	27 e2       	ldi	r18, 0x27	; 39
    7ab8:	30 e0       	ldi	r19, 0x00	; 0
    7aba:	c2 0e       	add	r12, r18
    7abc:	d3 1e       	adc	r13, r19
    uint8_t i, len;

    //reply[0] = 15;
    reply[1] = 171;
    reply[2] = nodeid;
    for (i = 0; i < LITE_MAX_THREADS; i++)
    7abe:	c2 30       	cpi	r28, 0x02	; 2
    7ac0:	d1 05       	cpc	r29, r1
    7ac2:	01 f7       	brne	.-64     	; 0x7a84 <reply_ps+0x2e>
                          (char *)thread_table[i].threadName, len);
            }
            StandardSocketSend(0xefef, 0xffff, 32, reply);
        }
    }
}
    7ac4:	df 91       	pop	r29
    7ac6:	cf 91       	pop	r28
    7ac8:	1f 91       	pop	r17
    7aca:	0f 91       	pop	r16
    7acc:	ff 90       	pop	r15
    7ace:	ef 90       	pop	r14
    7ad0:	df 90       	pop	r13
    7ad2:	cf 90       	pop	r12
    7ad4:	bf 90       	pop	r11
    7ad6:	af 90       	pop	r10
    7ad8:	08 95       	ret
    reply[2] = nodeid;
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            len = mystrlen((char *)thread_table[i].threadName);
    7ada:	7b 01       	movw	r14, r22
    7adc:	e7 e6       	ldi	r30, 0x67	; 103
    7ade:	f5 e0       	ldi	r31, 0x05	; 5
    7ae0:	ee 0e       	add	r14, r30
    7ae2:	ff 1e       	adc	r15, r31
    7ae4:	c7 01       	movw	r24, r14
    7ae6:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    7aea:	48 2f       	mov	r20, r24
            reply[0] = len + 4;
    7aec:	4c 5f       	subi	r20, 0xFC	; 252
    7aee:	40 93 4e 08 	sts	0x084E, r20
    7af2:	44 50       	subi	r20, 0x04	; 4
            reply[3] = thread_table[i].state;
    7af4:	d8 01       	movw	r26, r16
    7af6:	12 96       	adiw	r26, 0x02	; 2
    7af8:	8c 91       	ld	r24, X
    7afa:	80 93 51 08 	sts	0x0851, r24
            //if this is a break thread, then fetch the real number
            if (reply[3] == STATE_BREAK)
    7afe:	88 30       	cpi	r24, 0x08	; 8
    7b00:	79 f0       	breq	.+30     	; 0x7b20 <reply_ps+0xca>
                mystrncpy((char *)&reply[6],
                          (char *)thread_table[i].threadName, len);
            }
            else
            {
                mystrncpy((char *)&reply[4],
    7b02:	82 e5       	ldi	r24, 0x52	; 82
    7b04:	98 e0       	ldi	r25, 0x08	; 8
    7b06:	b7 01       	movw	r22, r14
    7b08:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
                          (char *)thread_table[i].threadName, len);
            }
            StandardSocketSend(0xefef, 0xffff, 32, reply);
    7b0c:	8f ee       	ldi	r24, 0xEF	; 239
    7b0e:	9f ee       	ldi	r25, 0xEF	; 239
    7b10:	6f ef       	ldi	r22, 0xFF	; 255
    7b12:	7f ef       	ldi	r23, 0xFF	; 255
    7b14:	40 e2       	ldi	r20, 0x20	; 32
    7b16:	2e e4       	ldi	r18, 0x4E	; 78
    7b18:	38 e0       	ldi	r19, 0x08	; 8
    7b1a:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    7b1e:	ca cf       	rjmp	.-108    	; 0x7ab4 <reply_ps+0x5e>
            reply[0] = len + 4;
            reply[3] = thread_table[i].state;
            //if this is a break thread, then fetch the real number
            if (reply[3] == STATE_BREAK)
            {
                uint8_t *tempptr = (uint8_t *) thread_table[i].sp + 47;
    7b20:	d6 01       	movw	r26, r12
    7b22:	ed 91       	ld	r30, X+
    7b24:	fc 91       	ld	r31, X
                uint16_t addr =
                    (((uint16_t) (*tempptr)) * 256 + *(tempptr + 1) - 3);
    7b26:	b7 a4       	ldd	r11, Z+47	; 0x2f
    7b28:	aa 24       	eor	r10, r10
    7b2a:	80 a9       	ldd	r24, Z+48	; 0x30
    7b2c:	f5 01       	movw	r30, r10
    7b2e:	e8 0f       	add	r30, r24
    7b30:	f1 1d       	adc	r31, r1
    7b32:	cf 01       	movw	r24, r30
    7b34:	03 97       	sbiw	r24, 0x03	; 3
                reply[4] = addr / 256;
    7b36:	90 93 52 08 	sts	0x0852, r25
                reply[5] = addr % 256;
    7b3a:	80 93 53 08 	sts	0x0853, r24
                reply[0] += 2;
    7b3e:	4a 5f       	subi	r20, 0xFA	; 250
    7b40:	40 93 4e 08 	sts	0x084E, r20
    7b44:	46 50       	subi	r20, 0x06	; 6
                mystrncpy((char *)&reply[6],
    7b46:	84 e5       	ldi	r24, 0x54	; 84
    7b48:	98 e0       	ldi	r25, 0x08	; 8
    7b4a:	b7 01       	movw	r22, r14
    7b4c:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
    7b50:	dd cf       	rjmp	.-70     	; 0x7b0c <reply_ps+0xb6>

00007b52 <reply_debugging_set>:
    //printStringN(reply,32); 
}

//this is the reply for the set command 
void reply_debugging_set(uint8_t * receivebuffer)
{
    7b52:	fc 01       	movw	r30, r24
    uint16_t addr;
    uint8_t size;
    uint8_t i;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    7b54:	93 81       	ldd	r25, Z+3	; 0x03
    7b56:	80 e0       	ldi	r24, 0x00	; 0
    7b58:	24 81       	ldd	r18, Z+4	; 0x04
    7b5a:	dc 01       	movw	r26, r24
    7b5c:	a2 0f       	add	r26, r18
    7b5e:	b1 1d       	adc	r27, r1
    size = receivebuffer[5];
    7b60:	55 81       	ldd	r21, Z+5	; 0x05
    for (i = 0; i < size; i++)
    7b62:	55 23       	and	r21, r21
    7b64:	41 f0       	breq	.+16     	; 0x7b76 <reply_debugging_set+0x24>
    7b66:	4e 2f       	mov	r20, r30
    {
        *((unsigned char *)(addr + i)) = receivebuffer[6 + i];
    7b68:	86 81       	ldd	r24, Z+6	; 0x06
    7b6a:	8d 93       	st	X+, r24
    7b6c:	31 96       	adiw	r30, 0x01	; 1
    uint8_t size;
    uint8_t i;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    size = receivebuffer[5];
    for (i = 0; i < size; i++)
    7b6e:	8e 2f       	mov	r24, r30
    7b70:	84 1b       	sub	r24, r20
    7b72:	85 17       	cp	r24, r21
    7b74:	c8 f3       	brcs	.-14     	; 0x7b68 <reply_debugging_set+0x16>
    {
        *((unsigned char *)(addr + i)) = receivebuffer[6 + i];
    }
    reply[0] = 3;
    7b76:	83 e0       	ldi	r24, 0x03	; 3
    7b78:	80 93 4e 08 	sts	0x084E, r24
    reply[1] = 96;
    7b7c:	80 e6       	ldi	r24, 0x60	; 96
    7b7e:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    7b82:	80 91 b8 08 	lds	r24, 0x08B8
    7b86:	80 93 50 08 	sts	0x0850, r24
    //mystrncpy(&reply[3], (unsigned char *)addr, size); 
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7b8a:	8f ee       	ldi	r24, 0xEF	; 239
    7b8c:	9f ee       	ldi	r25, 0xEF	; 239
    7b8e:	6f ef       	ldi	r22, 0xFF	; 255
    7b90:	7f ef       	ldi	r23, 0xFF	; 255
    7b92:	40 e2       	ldi	r20, 0x20	; 32
    7b94:	2e e4       	ldi	r18, 0x4E	; 78
    7b96:	38 e0       	ldi	r19, 0x08	; 8
    7b98:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    //printStringN(reply,32); 
}
    7b9c:	08 95       	ret

00007b9e <reply_debugging_print>:
 

//-------------------------------------------------------------------------
//Note that this function should consider splitting a message into multiple pieces, if the requested memory chunk is too large 
void reply_debugging_print(uint8_t * receivebuffer)
{
    7b9e:	cf 92       	push	r12
    7ba0:	df 92       	push	r13
    7ba2:	ef 92       	push	r14
    7ba4:	ff 92       	push	r15
    7ba6:	0f 93       	push	r16
    7ba8:	1f 93       	push	r17
    7baa:	cf 93       	push	r28
    7bac:	df 93       	push	r29
    7bae:	fc 01       	movw	r30, r24
    uint16_t addr;
    uint16_t size;
    uint8_t chunkindex;
    uint8_t numOfChunks;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    7bb0:	43 81       	ldd	r20, Z+3	; 0x03
    7bb2:	14 81       	ldd	r17, Z+4	; 0x04
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    7bb4:	95 81       	ldd	r25, Z+5	; 0x05
    7bb6:	80 e0       	ldi	r24, 0x00	; 0
    7bb8:	26 81       	ldd	r18, Z+6	; 0x06
    7bba:	bc 01       	movw	r22, r24
    7bbc:	62 0f       	add	r22, r18
    7bbe:	71 1d       	adc	r23, r1
    7bc0:	9b 01       	movw	r18, r22
    numOfChunks = size / 24 + 1;
    7bc2:	cb 01       	movw	r24, r22
    7bc4:	68 e1       	ldi	r22, 0x18	; 24
    7bc6:	70 e0       	ldi	r23, 0x00	; 0
    7bc8:	0e 94 96 55 	call	0xab2c	; 0xab2c <__udivmodhi4>
    7bcc:	06 2f       	mov	r16, r22
    7bce:	0f 5f       	subi	r16, 0xFF	; 255
    for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)
    7bd0:	69 f1       	breq	.+90     	; 0x7c2c <reply_debugging_print+0x8e>
    uint16_t addr;
    uint16_t size;
    uint8_t chunkindex;
    uint8_t numOfChunks;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    7bd2:	94 2f       	mov	r25, r20
    7bd4:	80 e0       	ldi	r24, 0x00	; 0
    7bd6:	ec 01       	movw	r28, r24
    7bd8:	c1 0f       	add	r28, r17
    7bda:	d1 1d       	adc	r29, r1
    7bdc:	e3 2e       	mov	r14, r19
    7bde:	f2 2e       	mov	r15, r18
    7be0:	10 e0       	ldi	r17, 0x00	; 0
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    numOfChunks = size / 24 + 1;
    for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)
    {
        reply[0] = 24 + 6;
    7be2:	9e e1       	ldi	r25, 0x1E	; 30
    7be4:	c9 2e       	mov	r12, r25
        reply[1] = 91;
    7be6:	8b e5       	ldi	r24, 0x5B	; 91
    7be8:	d8 2e       	mov	r13, r24
    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    numOfChunks = size / 24 + 1;
    for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)
    {
        reply[0] = 24 + 6;
    7bea:	c0 92 4e 08 	sts	0x084E, r12
        reply[1] = 91;
    7bee:	d0 92 4f 08 	sts	0x084F, r13
        reply[2] = nodeid;
    7bf2:	80 91 b8 08 	lds	r24, 0x08B8
    7bf6:	80 93 50 08 	sts	0x0850, r24
        reply[3] = chunkindex;
    7bfa:	10 93 51 08 	sts	0x0851, r17
        reply[4] = size / 256;
    7bfe:	e0 92 52 08 	sts	0x0852, r14
        reply[5] = size % 256;
    7c02:	f0 92 53 08 	sts	0x0853, r15
        //Note that this expose some piece of memory that is NOT part of the requested data 
        mystrncpy((char *)&reply[6], (char *)addr, 24);
    7c06:	84 e5       	ldi	r24, 0x54	; 84
    7c08:	98 e0       	ldi	r25, 0x08	; 8
    7c0a:	be 01       	movw	r22, r28
    7c0c:	48 e1       	ldi	r20, 0x18	; 24
    7c0e:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
        addr = addr + 24;
    7c12:	68 96       	adiw	r28, 0x18	; 24
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    7c14:	8f ee       	ldi	r24, 0xEF	; 239
    7c16:	9f ee       	ldi	r25, 0xEF	; 239
    7c18:	6f ef       	ldi	r22, 0xFF	; 255
    7c1a:	7f ef       	ldi	r23, 0xFF	; 255
    7c1c:	40 e2       	ldi	r20, 0x20	; 32
    7c1e:	2e e4       	ldi	r18, 0x4E	; 78
    7c20:	38 e0       	ldi	r19, 0x08	; 8
    7c22:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    uint8_t numOfChunks;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    numOfChunks = size / 24 + 1;
    for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)
    7c26:	1f 5f       	subi	r17, 0xFF	; 255
    7c28:	10 17       	cp	r17, r16
    7c2a:	f8 f2       	brcs	.-66     	; 0x7bea <reply_debugging_print+0x4c>
        mystrncpy((char *)&reply[6], (char *)addr, 24);
        addr = addr + 24;
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
    //printStringN(reply,32); 
}
    7c2c:	df 91       	pop	r29
    7c2e:	cf 91       	pop	r28
    7c30:	1f 91       	pop	r17
    7c32:	0f 91       	pop	r16
    7c34:	ff 90       	pop	r15
    7c36:	ef 90       	pop	r14
    7c38:	df 90       	pop	r13
    7c3a:	cf 90       	pop	r12
    7c3c:	08 95       	ret

00007c3e <reply_du>:
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_du(uint8_t * receivebuffer)
{
    7c3e:	1f 93       	push	r17
    int e1, e2, e3;

    e1 = fcheckFSAllocation();
    7c40:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <fcheckFSAllocation>
    7c44:	18 2f       	mov	r17, r24
    e2 = fcheckStorageAllocation();
    7c46:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <fcheckStorageAllocation>
    e3 = 0;
    if (e2 == 256)
    7c4a:	21 e0       	ldi	r18, 0x01	; 1
    7c4c:	80 30       	cpi	r24, 0x00	; 0
    7c4e:	92 07       	cpc	r25, r18
    7c50:	e9 f0       	breq	.+58     	; 0x7c8c <reply_du+0x4e>
    7c52:	98 2f       	mov	r25, r24
    7c54:	20 e0       	ldi	r18, 0x00	; 0
    {
        e2 = 128;
        e3 = 128;
    }
    reply[0] = 6;
    7c56:	86 e0       	ldi	r24, 0x06	; 6
    7c58:	80 93 4e 08 	sts	0x084E, r24
    reply[1] = 211;
    7c5c:	83 ed       	ldi	r24, 0xD3	; 211
    7c5e:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    7c62:	80 91 b8 08 	lds	r24, 0x08B8
    7c66:	80 93 50 08 	sts	0x0850, r24
    reply[3] = e1;
    7c6a:	10 93 51 08 	sts	0x0851, r17
    reply[4] = e2;
    7c6e:	90 93 52 08 	sts	0x0852, r25
    reply[5] = e3;
    7c72:	20 93 53 08 	sts	0x0853, r18
    //printStringN(reply,32);       
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7c76:	8f ee       	ldi	r24, 0xEF	; 239
    7c78:	9f ee       	ldi	r25, 0xEF	; 239
    7c7a:	6f ef       	ldi	r22, 0xFF	; 255
    7c7c:	7f ef       	ldi	r23, 0xFF	; 255
    7c7e:	40 e2       	ldi	r20, 0x20	; 32
    7c80:	2e e4       	ldi	r18, 0x4E	; 78
    7c82:	38 e0       	ldi	r19, 0x08	; 8
    7c84:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
}
    7c88:	1f 91       	pop	r17
    7c8a:	08 95       	ret
    int e1, e2, e3;

    e1 = fcheckFSAllocation();
    e2 = fcheckStorageAllocation();
    e3 = 0;
    if (e2 == 256)
    7c8c:	90 e8       	ldi	r25, 0x80	; 128
    7c8e:	20 e8       	ldi	r18, 0x80	; 128
    7c90:	e2 cf       	rjmp	.-60     	; 0x7c56 <reply_du+0x18>

00007c92 <reply_killthread>:
    }
}

//-------------------------------------------------------------------------
void reply_killthread(uint8_t * receivebuffer)
{
    7c92:	cf 92       	push	r12
    7c94:	df 92       	push	r13
    7c96:	ef 92       	push	r14
    7c98:	ff 92       	push	r15
    7c9a:	0f 93       	push	r16
    7c9c:	1f 93       	push	r17
    7c9e:	cf 93       	push	r28
    7ca0:	df 93       	push	r29
    7ca2:	ec 01       	movw	r28, r24
    uint8_t index;

    index = 0; 
    start = NULL;
    end = NULL;
    receivebuffer[receivebuffer[0]] = '\0';
    7ca4:	88 81       	ld	r24, Y
    7ca6:	fe 01       	movw	r30, r28
    7ca8:	e8 0f       	add	r30, r24
    7caa:	f1 1d       	adc	r31, r1
    7cac:	10 82       	st	Z, r1
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    7cae:	80 91 64 05 	lds	r24, 0x0564
    7cb2:	88 23       	and	r24, r24
    7cb4:	59 f5       	brne	.+86     	; 0x7d0c <reply_killthread+0x7a>
                 (char *)&receivebuffer[3]) == 0)
            {
                start = (uint8_t *) thread_table[i].ramstart;
                end = (uint8_t *) thread_table[i].ramend;
                index = i;
                thread_table[i].state = STATE_NULL;
    7cb6:	dd 24       	eor	r13, r13
    7cb8:	ee 24       	eor	r14, r14
    7cba:	ff 24       	eor	r15, r15
    7cbc:	00 e0       	ldi	r16, 0x00	; 0
    7cbe:	10 e0       	ldi	r17, 0x00	; 0
    start = NULL;
    end = NULL;
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    7cc0:	80 91 8b 05 	lds	r24, 0x058B
    7cc4:	88 23       	and	r24, r24
    7cc6:	d9 f5       	brne	.+118    	; 0x7d3e <reply_killthread+0xac>
                thread_table[i].state = STATE_NULL;
                testtrue = 1;
            }
        }
    }
    if (testtrue == 1)
    7cc8:	81 e0       	ldi	r24, 0x01	; 1
    7cca:	d8 16       	cp	r13, r24
    7ccc:	09 f4       	brne	.+2      	; 0x7cd0 <reply_killthread+0x3e>
    7cce:	81 c0       	rjmp	.+258    	; 0x7dd2 <reply_killthread+0x140>
           receivehandles[ i ].port = 0;     
           }
           }
         */
    }
    reply[0] = 4;
    7cd0:	84 e0       	ldi	r24, 0x04	; 4
    7cd2:	80 93 4e 08 	sts	0x084E, r24
    reply[1] = 232;
    7cd6:	88 ee       	ldi	r24, 0xE8	; 232
    7cd8:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    7cdc:	80 91 b8 08 	lds	r24, 0x08B8
    7ce0:	80 93 50 08 	sts	0x0850, r24
    reply[3] = testtrue;
    7ce4:	d0 92 51 08 	sts	0x0851, r13
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7ce8:	8f ee       	ldi	r24, 0xEF	; 239
    7cea:	9f ee       	ldi	r25, 0xEF	; 239
    7cec:	6f ef       	ldi	r22, 0xFF	; 255
    7cee:	7f ef       	ldi	r23, 0xFF	; 255
    7cf0:	40 e2       	ldi	r20, 0x20	; 32
    7cf2:	2e e4       	ldi	r18, 0x4E	; 78
    7cf4:	38 e0       	ldi	r19, 0x08	; 8
    7cf6:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
}
    7cfa:	df 91       	pop	r29
    7cfc:	cf 91       	pop	r28
    7cfe:	1f 91       	pop	r17
    7d00:	0f 91       	pop	r16
    7d02:	ff 90       	pop	r15
    7d04:	ef 90       	pop	r14
    7d06:	df 90       	pop	r13
    7d08:	cf 90       	pop	r12
    7d0a:	08 95       	ret
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    7d0c:	be 01       	movw	r22, r28
    7d0e:	6d 5f       	subi	r22, 0xFD	; 253
    7d10:	7f 4f       	sbci	r23, 0xFF	; 255
    7d12:	87 e6       	ldi	r24, 0x67	; 103
    7d14:	95 e0       	ldi	r25, 0x05	; 5
    7d16:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <superstring>
    7d1a:	89 2b       	or	r24, r25
    7d1c:	61 f6       	brne	.-104    	; 0x7cb6 <reply_killthread+0x24>
                ((char *)thread_table[i].threadName,
                 (char *)&receivebuffer[3]) == 0)
            {
                start = (uint8_t *) thread_table[i].ramstart;
    7d1e:	e0 90 73 05 	lds	r14, 0x0573
    7d22:	f0 90 74 05 	lds	r15, 0x0574
                end = (uint8_t *) thread_table[i].ramend;
    7d26:	00 91 75 05 	lds	r16, 0x0575
    7d2a:	10 91 76 05 	lds	r17, 0x0576
                index = i;
                thread_table[i].state = STATE_NULL;
    7d2e:	10 92 64 05 	sts	0x0564, r1
    7d32:	dd 24       	eor	r13, r13
    7d34:	d3 94       	inc	r13
    start = NULL;
    end = NULL;
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    7d36:	80 91 8b 05 	lds	r24, 0x058B
    7d3a:	88 23       	and	r24, r24
    7d3c:	29 f2       	breq	.-118    	; 0x7cc8 <reply_killthread+0x36>
        {
            if (superstring
    7d3e:	23 96       	adiw	r28, 0x03	; 3
    7d40:	8e e8       	ldi	r24, 0x8E	; 142
    7d42:	95 e0       	ldi	r25, 0x05	; 5
    7d44:	be 01       	movw	r22, r28
    7d46:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <superstring>
    7d4a:	89 2b       	or	r24, r25
    7d4c:	09 f0       	breq	.+2      	; 0x7d50 <reply_killthread+0xbe>
    7d4e:	bc cf       	rjmp	.-136    	; 0x7cc8 <reply_killthread+0x36>
                ((char *)thread_table[i].threadName,
                 (char *)&receivebuffer[3]) == 0)
            {
                start = (uint8_t *) thread_table[i].ramstart;
    7d50:	e0 90 9a 05 	lds	r14, 0x059A
    7d54:	f0 90 9b 05 	lds	r15, 0x059B
                end = (uint8_t *) thread_table[i].ramend;
    7d58:	00 91 9c 05 	lds	r16, 0x059C
    7d5c:	10 91 9d 05 	lds	r17, 0x059D
                index = i;
                thread_table[i].state = STATE_NULL;
    7d60:	10 92 8b 05 	sts	0x058B, r1
    7d64:	dd 24       	eor	r13, r13
    7d66:	d3 94       	inc	r13
    7d68:	cc 24       	eor	r12, r12
    7d6a:	c3 94       	inc	r12
            }
        }
    }
    if (testtrue == 1)
    {
        deleteThreadRegistrationInReceiverHandles(start, end);
    7d6c:	c7 01       	movw	r24, r14
    7d6e:	b8 01       	movw	r22, r16
    7d70:	0e 94 1f 0a 	call	0x143e	; 0x143e <deleteThreadRegistrationInReceiverHandles>
        if (thread_table[index].thread_clear_function != NULL)
    7d74:	0c 2d       	mov	r16, r12
    7d76:	10 e0       	ldi	r17, 0x00	; 0
    7d78:	c8 01       	movw	r24, r16
    7d7a:	88 0f       	add	r24, r24
    7d7c:	99 1f       	adc	r25, r25
    7d7e:	88 0f       	add	r24, r24
    7d80:	99 1f       	adc	r25, r25
    7d82:	88 0f       	add	r24, r24
    7d84:	99 1f       	adc	r25, r25
    7d86:	ec 01       	movw	r28, r24
    7d88:	cc 0f       	add	r28, r28
    7d8a:	dd 1f       	adc	r29, r29
    7d8c:	cc 0f       	add	r28, r28
    7d8e:	dd 1f       	adc	r29, r29
    7d90:	c8 0f       	add	r28, r24
    7d92:	d9 1f       	adc	r29, r25
    7d94:	c0 1b       	sub	r28, r16
    7d96:	d1 0b       	sbc	r29, r17
    7d98:	ce 59       	subi	r28, 0x9E	; 158
    7d9a:	da 4f       	sbci	r29, 0xFA	; 250
    7d9c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    7d9e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    7da0:	30 97       	sbiw	r30, 0x00	; 0
    7da2:	19 f0       	breq	.+6      	; 0x7daa <reply_killthread+0x118>
        {
            (*thread_table[index].thread_clear_function) ();
    7da4:	09 95       	icall
            thread_table[index].thread_clear_function = NULL;
    7da6:	1c 8e       	std	Y+28, r1	; 0x1c
    7da8:	1b 8e       	std	Y+27, r1	; 0x1b
        }
        cbi(MCUCR, SE);
    7daa:	85 b7       	in	r24, 0x35	; 53
    7dac:	8f 7d       	andi	r24, 0xDF	; 223
    7dae:	85 bf       	out	0x35, r24	; 53
        if (timercallback[index] != NULL)
    7db0:	f8 01       	movw	r30, r16
    7db2:	ee 0f       	add	r30, r30
    7db4:	ff 1f       	adc	r31, r31
    7db6:	eb 51       	subi	r30, 0x1B	; 27
    7db8:	fa 4f       	sbci	r31, 0xFA	; 250
    7dba:	80 81       	ld	r24, Z
    7dbc:	91 81       	ldd	r25, Z+1	; 0x01
    7dbe:	89 2b       	or	r24, r25
    7dc0:	09 f4       	brne	.+2      	; 0x7dc4 <reply_killthread+0x132>
    7dc2:	86 cf       	rjmp	.-244    	; 0x7cd0 <reply_killthread+0x3e>
        {
            timercallback[index] = NULL;
    7dc4:	11 82       	std	Z+1, r1	; 0x01
    7dc6:	10 82       	st	Z, r1
            GenericTimerStop(index + 12);
    7dc8:	8c 2d       	mov	r24, r12
    7dca:	84 5f       	subi	r24, 0xF4	; 244
    7dcc:	0e 94 48 37 	call	0x6e90	; 0x6e90 <GenericTimerStop>
    7dd0:	7f cf       	rjmp	.-258    	; 0x7cd0 <reply_killthread+0x3e>
                thread_table[i].state = STATE_NULL;
                testtrue = 1;
            }
        }
    }
    if (testtrue == 1)
    7dd2:	cc 24       	eor	r12, r12
    7dd4:	cb cf       	rjmp	.-106    	; 0x7d6c <reply_killthread+0xda>

00007dd6 <reply126>:

//-------------------------------------------------------------------------
//possible bug here 
void reply126(uint8_t * receivebuffer)
{
    fclose2(fp);
    7dd6:	80 91 16 08 	lds	r24, 0x0816
    7dda:	90 91 17 08 	lds	r25, 0x0817
    7dde:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <fclose2>
}
    7de2:	08 95       	ret

00007de4 <reply_cp_fromPCtoNode_type3>:
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type3()
{
    fclose2(openedfile);
    7de4:	80 91 18 08 	lds	r24, 0x0818
    7de8:	90 91 19 08 	lds	r25, 0x0819
    7dec:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <fclose2>
    // printStringN(reply,32);      
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7df0:	8f ee       	ldi	r24, 0xEF	; 239
    7df2:	9f ee       	ldi	r25, 0xEF	; 239
    7df4:	6f ef       	ldi	r22, 0xFF	; 255
    7df6:	7f ef       	ldi	r23, 0xFF	; 255
    7df8:	40 e2       	ldi	r20, 0x20	; 32
    7dfa:	2e e4       	ldi	r18, 0x4E	; 78
    7dfc:	38 e0       	ldi	r19, 0x08	; 8
    7dfe:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
}
    7e02:	08 95       	ret

00007e04 <reply_fromNodeToPC_type2>:
    //printStringN(reply,32);       
}

//get patch request
void reply_fromNodeToPC_type2(uint8_t * receivebuffer)
{
    7e04:	0f 93       	push	r16
    7e06:	1f 93       	push	r17
    7e08:	fc 01       	movw	r30, r24
    uint16_t pos;
    //disabletracingfunction();

    pos = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
    7e0a:	54 81       	ldd	r21, Z+4	; 0x04
    7e0c:	40 e0       	ldi	r20, 0x00	; 0
    7e0e:	85 81       	ldd	r24, Z+5	; 0x05
    7e10:	48 0f       	add	r20, r24
    7e12:	51 1d       	adc	r21, r1
    reply[0] = 26;
    7e14:	0e e4       	ldi	r16, 0x4E	; 78
    7e16:	18 e0       	ldi	r17, 0x08	; 8
    7e18:	8a e1       	ldi	r24, 0x1A	; 26
    7e1a:	80 93 4e 08 	sts	0x084E, r24
    reply[1] = 125;
    7e1e:	8d e7       	ldi	r24, 0x7D	; 125
    7e20:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    7e24:	80 91 b8 08 	lds	r24, 0x08B8
    7e28:	80 93 50 08 	sts	0x0850, r24
    reply[3] = pos / 256;
    7e2c:	50 93 51 08 	sts	0x0851, r21
    reply[4] = pos % 256;
    7e30:	40 93 52 08 	sts	0x0852, r20
    fseek2(fp, (int32_t) pos, 0);
    7e34:	60 e0       	ldi	r22, 0x00	; 0
    7e36:	70 e0       	ldi	r23, 0x00	; 0
    7e38:	80 91 16 08 	lds	r24, 0x0816
    7e3c:	90 91 17 08 	lds	r25, 0x0817
    7e40:	20 e0       	ldi	r18, 0x00	; 0
    7e42:	30 e0       	ldi	r19, 0x00	; 0
    7e44:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <fseek2>
    fread2(fp, &reply[6], 20);
    7e48:	b8 01       	movw	r22, r16
    7e4a:	6a 5f       	subi	r22, 0xFA	; 250
    7e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    7e4e:	80 91 16 08 	lds	r24, 0x0816
    7e52:	90 91 17 08 	lds	r25, 0x0817
    7e56:	44 e1       	ldi	r20, 0x14	; 20
    7e58:	50 e0       	ldi	r21, 0x00	; 0
    7e5a:	0e 94 cd 23 	call	0x479a	; 0x479a <fread2>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7e5e:	8f ee       	ldi	r24, 0xEF	; 239
    7e60:	9f ee       	ldi	r25, 0xEF	; 239
    7e62:	6f ef       	ldi	r22, 0xFF	; 255
    7e64:	7f ef       	ldi	r23, 0xFF	; 255
    7e66:	40 e2       	ldi	r20, 0x20	; 32
    7e68:	98 01       	movw	r18, r16
    7e6a:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    
   // enabletracingfunction();
}
    7e6e:	1f 91       	pop	r17
    7e70:	0f 91       	pop	r16
    7e72:	08 95       	ret

00007e74 <reply_rm>:
    //enabletracingfunction();
}

//-------------------------------------------------------------------------
void reply_rm(uint8_t * receivebuffer)
{
    7e74:	df 92       	push	r13
    7e76:	ef 92       	push	r14
    7e78:	ff 92       	push	r15
    7e7a:	0f 93       	push	r16
    7e7c:	1f 93       	push	r17
    7e7e:	df 93       	push	r29
    7e80:	cf 93       	push	r28
    7e82:	cd b7       	in	r28, 0x3d	; 61
    7e84:	de b7       	in	r29, 0x3e	; 62
    7e86:	2d 97       	sbiw	r28, 0x0d	; 13
    7e88:	0f b6       	in	r0, 0x3f	; 63
    7e8a:	f8 94       	cli
    7e8c:	de bf       	out	0x3e, r29	; 62
    7e8e:	0f be       	out	0x3f, r0	; 63
    7e90:	cd bf       	out	0x3d, r28	; 61
    7e92:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char filename[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    7e94:	fc 01       	movw	r30, r24
    7e96:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    7e98:	bc 01       	movw	r22, r24
    7e9a:	6c 5f       	subi	r22, 0xFC	; 252
    7e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    7e9e:	40 81       	ld	r20, Z
    7ea0:	44 50       	subi	r20, 0x04	; 4
    7ea2:	7e 01       	movw	r14, r28
    7ea4:	08 94       	sec
    7ea6:	e1 1c       	adc	r14, r1
    7ea8:	f1 1c       	adc	r15, r1
    7eaa:	c7 01       	movw	r24, r14
    7eac:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    7eb0:	f8 01       	movw	r30, r16
    7eb2:	80 81       	ld	r24, Z
    7eb4:	fe 01       	movw	r30, r28
    7eb6:	33 97       	sbiw	r30, 0x03	; 3
    7eb8:	e8 0f       	add	r30, r24
    7eba:	f1 1d       	adc	r31, r1
    7ebc:	10 82       	st	Z, r1
    newblockid = existBlockAddr(filename, (int)blockid);
    7ebe:	c7 01       	movw	r24, r14
    7ec0:	6d 2d       	mov	r22, r13
    7ec2:	70 e0       	ldi	r23, 0x00	; 0
    7ec4:	0e 94 87 2b 	call	0x570e	; 0x570e <existBlockAddr>
    7ec8:	08 2f       	mov	r16, r24
    if (newblockid > 0)
    7eca:	88 23       	and	r24, r24
    7ecc:	19 f0       	breq	.+6      	; 0x7ed4 <reply_rm+0x60>
    {
        deleteNode(newblockid);
    7ece:	90 e0       	ldi	r25, 0x00	; 0
    7ed0:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <deleteNode>
    }
    reply[0] = 4;
    7ed4:	84 e0       	ldi	r24, 0x04	; 4
    7ed6:	80 93 4e 08 	sts	0x084E, r24
    reply[1] = 161;
    7eda:	81 ea       	ldi	r24, 0xA1	; 161
    7edc:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    7ee0:	80 91 b8 08 	lds	r24, 0x08B8
    7ee4:	80 93 50 08 	sts	0x0850, r24
    reply[3] = newblockid;
    7ee8:	00 93 51 08 	sts	0x0851, r16
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7eec:	8f ee       	ldi	r24, 0xEF	; 239
    7eee:	9f ee       	ldi	r25, 0xEF	; 239
    7ef0:	6f ef       	ldi	r22, 0xFF	; 255
    7ef2:	7f ef       	ldi	r23, 0xFF	; 255
    7ef4:	40 e2       	ldi	r20, 0x20	; 32
    7ef6:	2e e4       	ldi	r18, 0x4E	; 78
    7ef8:	38 e0       	ldi	r19, 0x08	; 8
    7efa:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    //printStringN(reply,32);       
}
    7efe:	2d 96       	adiw	r28, 0x0d	; 13
    7f00:	0f b6       	in	r0, 0x3f	; 63
    7f02:	f8 94       	cli
    7f04:	de bf       	out	0x3e, r29	; 62
    7f06:	0f be       	out	0x3f, r0	; 63
    7f08:	cd bf       	out	0x3d, r28	; 61
    7f0a:	cf 91       	pop	r28
    7f0c:	df 91       	pop	r29
    7f0e:	1f 91       	pop	r17
    7f10:	0f 91       	pop	r16
    7f12:	ff 90       	pop	r15
    7f14:	ef 90       	pop	r14
    7f16:	df 90       	pop	r13
    7f18:	08 95       	ret

00007f1a <reply_fromNodeToPC_type1>:
    //printStringN(reply,32);       
}

//-------------------------------------------------------------------------
void reply_fromNodeToPC_type1(uint8_t * receivebuffer)
{
    7f1a:	9f 92       	push	r9
    7f1c:	af 92       	push	r10
    7f1e:	bf 92       	push	r11
    7f20:	cf 92       	push	r12
    7f22:	df 92       	push	r13
    7f24:	ef 92       	push	r14
    7f26:	ff 92       	push	r15
    7f28:	0f 93       	push	r16
    7f2a:	1f 93       	push	r17
    7f2c:	df 93       	push	r29
    7f2e:	cf 93       	push	r28
    7f30:	cd b7       	in	r28, 0x3d	; 61
    7f32:	de b7       	in	r29, 0x3e	; 62
    7f34:	2d 97       	sbiw	r28, 0x0d	; 13
    7f36:	0f b6       	in	r0, 0x3f	; 63
    7f38:	f8 94       	cli
    7f3a:	de bf       	out	0x3e, r29	; 62
    7f3c:	0f be       	out	0x3f, r0	; 63
    7f3e:	cd bf       	out	0x3d, r28	; 61
    7f40:	8c 01       	movw	r16, r24
    uint16_t remain;
    uint16_t i;
    uint8_t newblockid;
    uint8_t temp1, temp2;

    blockid = receivebuffer[3];
    7f42:	fc 01       	movw	r30, r24
    7f44:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    7f46:	bc 01       	movw	r22, r24
    7f48:	6c 5f       	subi	r22, 0xFC	; 252
    7f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    7f4c:	40 81       	ld	r20, Z
    7f4e:	44 50       	subi	r20, 0x04	; 4
    7f50:	7e 01       	movw	r14, r28
    7f52:	08 94       	sec
    7f54:	e1 1c       	adc	r14, r1
    7f56:	f1 1c       	adc	r15, r1
    7f58:	c7 01       	movw	r24, r14
    7f5a:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    7f5e:	f8 01       	movw	r30, r16
    7f60:	80 81       	ld	r24, Z
    7f62:	fe 01       	movw	r30, r28
    7f64:	33 97       	sbiw	r30, 0x03	; 3
    7f66:	e8 0f       	add	r30, r24
    7f68:	f1 1d       	adc	r31, r1
    7f6a:	10 82       	st	Z, r1
    newblockid = existBlockAddr(filename, (int)blockid);
    7f6c:	c7 01       	movw	r24, r14
    7f6e:	6d 2d       	mov	r22, r13
    7f70:	70 e0       	ldi	r23, 0x00	; 0
    7f72:	0e 94 87 2b 	call	0x570e	; 0x570e <existBlockAddr>
    7f76:	f8 2e       	mov	r15, r24
    reply[1] = 124;
    7f78:	8c e7       	ldi	r24, 0x7C	; 124
    7f7a:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    7f7e:	80 91 b8 08 	lds	r24, 0x08B8
    7f82:	80 93 50 08 	sts	0x0850, r24
    fid = getFreeFid();
    7f86:	0e 94 56 1f 	call	0x3eac	; 0x3eac <getFreeFid>
    7f8a:	18 2f       	mov	r17, r24
    7f8c:	09 2f       	mov	r16, r25
    openFile(newblockid, fid, 1);
    7f8e:	8f 2d       	mov	r24, r15
    7f90:	90 e0       	ldi	r25, 0x00	; 0
    7f92:	61 2f       	mov	r22, r17
    7f94:	70 2f       	mov	r23, r16
    7f96:	41 e0       	ldi	r20, 0x01	; 1
    7f98:	50 e0       	ldi	r21, 0x00	; 0
    7f9a:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <openFile>
    fp = &fidtable[fid];
    7f9e:	81 2f       	mov	r24, r17
    7fa0:	90 2f       	mov	r25, r16
    7fa2:	fc 01       	movw	r30, r24
    7fa4:	ee 0f       	add	r30, r30
    7fa6:	ff 1f       	adc	r31, r31
    7fa8:	ee 0f       	add	r30, r30
    7faa:	ff 1f       	adc	r31, r31
    7fac:	ee 0f       	add	r30, r30
    7fae:	ff 1f       	adc	r31, r31
    7fb0:	88 0f       	add	r24, r24
    7fb2:	99 1f       	adc	r25, r25
    7fb4:	e8 0f       	add	r30, r24
    7fb6:	f9 1f       	adc	r31, r25
    7fb8:	ea 54       	subi	r30, 0x4A	; 74
    7fba:	fa 4f       	sbci	r31, 0xFA	; 250
    7fbc:	f0 93 17 08 	sts	0x0817, r31
    7fc0:	e0 93 16 08 	sts	0x0816, r30
    filesize = fp->size;
    7fc4:	14 81       	ldd	r17, Z+4	; 0x04
    7fc6:	05 81       	ldd	r16, Z+5	; 0x05
    temp1 = filesize / 256;
    temp2 = filesize % 256;
    reply[3] = temp1;
    7fc8:	00 93 51 08 	sts	0x0851, r16
    reply[4] = temp2;
    7fcc:	10 93 52 08 	sts	0x0852, r17
    //disabletracingfunction();
    //send out the size 
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7fd0:	8f ee       	ldi	r24, 0xEF	; 239
    7fd2:	9f ee       	ldi	r25, 0xEF	; 239
    7fd4:	6f ef       	ldi	r22, 0xFF	; 255
    7fd6:	7f ef       	ldi	r23, 0xFF	; 255
    7fd8:	40 e2       	ldi	r20, 0x20	; 32
    7fda:	2e e4       	ldi	r18, 0x4E	; 78
    7fdc:	38 e0       	ldi	r19, 0x08	; 8
    7fde:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    
    //    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //sleepThread( 100 );
    reply[3] = newblockid;
    7fe2:	f0 92 51 08 	sts	0x0851, r15
    round = filesize / 20;
    7fe6:	81 2f       	mov	r24, r17
    7fe8:	90 2f       	mov	r25, r16
    7fea:	64 e1       	ldi	r22, 0x14	; 20
    7fec:	70 e0       	ldi	r23, 0x00	; 0
    7fee:	0e 94 96 55 	call	0xab2c	; 0xab2c <__udivmodhi4>
    7ff2:	7b 01       	movw	r14, r22
    7ff4:	5b 01       	movw	r10, r22
    remain = filesize % 20;
    7ff6:	81 2f       	mov	r24, r17
    7ff8:	90 2f       	mov	r25, r16
    7ffa:	64 e1       	ldi	r22, 0x14	; 20
    7ffc:	70 e0       	ldi	r23, 0x00	; 0
    7ffe:	0e 94 96 55 	call	0xab2c	; 0xab2c <__udivmodhi4>
    8002:	6c 01       	movw	r12, r24
    for (i = 0; i < round; i++)
    8004:	e1 14       	cp	r14, r1
    8006:	f1 04       	cpc	r15, r1
    8008:	71 f1       	breq	.+92     	; 0x8066 <reply_fromNodeToPC_type1+0x14c>
    800a:	00 e0       	ldi	r16, 0x00	; 0
    800c:	10 e0       	ldi	r17, 0x00	; 0
    {
        fread2(fp, &reply[6], 20);
        fseek2(fp, 20, 1);
        reply[0] = 26;
    800e:	5a e1       	ldi	r21, 0x1A	; 26
    8010:	95 2e       	mov	r9, r21
    reply[3] = newblockid;
    round = filesize / 20;
    remain = filesize % 20;
    for (i = 0; i < round; i++)
    {
        fread2(fp, &reply[6], 20);
    8012:	80 91 16 08 	lds	r24, 0x0816
    8016:	90 91 17 08 	lds	r25, 0x0817
    801a:	64 e5       	ldi	r22, 0x54	; 84
    801c:	78 e0       	ldi	r23, 0x08	; 8
    801e:	44 e1       	ldi	r20, 0x14	; 20
    8020:	50 e0       	ldi	r21, 0x00	; 0
    8022:	0e 94 cd 23 	call	0x479a	; 0x479a <fread2>
        fseek2(fp, 20, 1);
    8026:	80 91 16 08 	lds	r24, 0x0816
    802a:	90 91 17 08 	lds	r25, 0x0817
    802e:	44 e1       	ldi	r20, 0x14	; 20
    8030:	50 e0       	ldi	r21, 0x00	; 0
    8032:	60 e0       	ldi	r22, 0x00	; 0
    8034:	70 e0       	ldi	r23, 0x00	; 0
    8036:	21 e0       	ldi	r18, 0x01	; 1
    8038:	30 e0       	ldi	r19, 0x00	; 0
    803a:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <fseek2>
        reply[0] = 26;
    803e:	90 92 4e 08 	sts	0x084E, r9
        temp1 = i / 256;
        temp2 = i % 256;
        reply[4] = temp1;
    8042:	10 93 52 08 	sts	0x0852, r17
        reply[5] = temp2;
    8046:	00 93 53 08 	sts	0x0853, r16
        //printStringN(reply,32);                   
        // sleepThread( 100 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    804a:	8f ee       	ldi	r24, 0xEF	; 239
    804c:	9f ee       	ldi	r25, 0xEF	; 239
    804e:	6f ef       	ldi	r22, 0xFF	; 255
    8050:	7f ef       	ldi	r23, 0xFF	; 255
    8052:	40 e2       	ldi	r20, 0x20	; 32
    8054:	2e e4       	ldi	r18, 0x4E	; 78
    8056:	38 e0       	ldi	r19, 0x08	; 8
    8058:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    //    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //sleepThread( 100 );
    reply[3] = newblockid;
    round = filesize / 20;
    remain = filesize % 20;
    for (i = 0; i < round; i++)
    805c:	0f 5f       	subi	r16, 0xFF	; 255
    805e:	1f 4f       	sbci	r17, 0xFF	; 255
    8060:	0e 15       	cp	r16, r14
    8062:	1f 05       	cpc	r17, r15
    8064:	b0 f2       	brcs	.-84     	; 0x8012 <reply_fromNodeToPC_type1+0xf8>
        reply[5] = temp2;
        //printStringN(reply,32);                   
        // sleepThread( 100 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
    if (remain > 0)
    8066:	c1 14       	cp	r12, r1
    8068:	d1 04       	cpc	r13, r1
    806a:	f1 f0       	breq	.+60     	; 0x80a8 <reply_fromNodeToPC_type1+0x18e>
    {
        fread2(fp, &reply[6], remain);
    806c:	80 91 16 08 	lds	r24, 0x0816
    8070:	90 91 17 08 	lds	r25, 0x0817
    8074:	64 e5       	ldi	r22, 0x54	; 84
    8076:	78 e0       	ldi	r23, 0x08	; 8
    8078:	a6 01       	movw	r20, r12
    807a:	0e 94 cd 23 	call	0x479a	; 0x479a <fread2>
        reply[0] = (uint8_t) remain + 6;
    807e:	8c 2d       	mov	r24, r12
    8080:	8a 5f       	subi	r24, 0xFA	; 250
    8082:	80 93 4e 08 	sts	0x084E, r24
        reply[4] = round / 256;
    8086:	f0 92 52 08 	sts	0x0852, r15
        reply[5] = round % 256;
    808a:	e0 92 53 08 	sts	0x0853, r14
        round++;
    808e:	57 01       	movw	r10, r14
    8090:	08 94       	sec
    8092:	a1 1c       	adc	r10, r1
    8094:	b1 1c       	adc	r11, r1
        //printStringN(reply,32);
        //sleepThread( 25 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    8096:	8f ee       	ldi	r24, 0xEF	; 239
    8098:	9f ee       	ldi	r25, 0xEF	; 239
    809a:	6f ef       	ldi	r22, 0xFF	; 255
    809c:	7f ef       	ldi	r23, 0xFF	; 255
    809e:	40 e2       	ldi	r20, 0x20	; 32
    80a0:	2e e4       	ldi	r18, 0x4E	; 78
    80a2:	38 e0       	ldi	r19, 0x08	; 8
    80a4:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    }
    temp1 = round / 256;
    temp2 = round % 256;
    //terminate signal  is here!
    reply[0] = 7;
    80a8:	87 e0       	ldi	r24, 0x07	; 7
    80aa:	80 93 4e 08 	sts	0x084E, r24
    reply[3] = 0xef;
    80ae:	8f ee       	ldi	r24, 0xEF	; 239
    80b0:	80 93 51 08 	sts	0x0851, r24
    reply[4] = 0xef;
    80b4:	80 93 52 08 	sts	0x0852, r24
    reply[5] = temp1;
    80b8:	b0 92 53 08 	sts	0x0853, r11
    reply[6] = temp2;
    80bc:	a0 92 54 08 	sts	0x0854, r10
    //ephread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    80c0:	8f ee       	ldi	r24, 0xEF	; 239
    80c2:	9f ee       	ldi	r25, 0xEF	; 239
    80c4:	6f ef       	ldi	r22, 0xFF	; 255
    80c6:	7f ef       	ldi	r23, 0xFF	; 255
    80c8:	40 e2       	ldi	r20, 0x20	; 32
    80ca:	2e e4       	ldi	r18, 0x4E	; 78
    80cc:	38 e0       	ldi	r19, 0x08	; 8
    80ce:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    80d2:	8f ee       	ldi	r24, 0xEF	; 239
    80d4:	9f ee       	ldi	r25, 0xEF	; 239
    80d6:	6f ef       	ldi	r22, 0xFF	; 255
    80d8:	7f ef       	ldi	r23, 0xFF	; 255
    80da:	40 e2       	ldi	r20, 0x20	; 32
    80dc:	2e e4       	ldi	r18, 0x4E	; 78
    80de:	38 e0       	ldi	r19, 0x08	; 8
    80e0:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    80e4:	8f ee       	ldi	r24, 0xEF	; 239
    80e6:	9f ee       	ldi	r25, 0xEF	; 239
    80e8:	6f ef       	ldi	r22, 0xFF	; 255
    80ea:	7f ef       	ldi	r23, 0xFF	; 255
    80ec:	40 e2       	ldi	r20, 0x20	; 32
    80ee:	2e e4       	ldi	r18, 0x4E	; 78
    80f0:	38 e0       	ldi	r19, 0x08	; 8
    80f2:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    80f6:	8f ee       	ldi	r24, 0xEF	; 239
    80f8:	9f ee       	ldi	r25, 0xEF	; 239
    80fa:	6f ef       	ldi	r22, 0xFF	; 255
    80fc:	7f ef       	ldi	r23, 0xFF	; 255
    80fe:	40 e2       	ldi	r20, 0x20	; 32
    8100:	2e e4       	ldi	r18, 0x4E	; 78
    8102:	38 e0       	ldi	r19, 0x08	; 8
    8104:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    //do not close now!
    //       fclose2(fp); 
    
    //enabletracingfunction();
}
    8108:	2d 96       	adiw	r28, 0x0d	; 13
    810a:	0f b6       	in	r0, 0x3f	; 63
    810c:	f8 94       	cli
    810e:	de bf       	out	0x3e, r29	; 62
    8110:	0f be       	out	0x3f, r0	; 63
    8112:	cd bf       	out	0x3d, r28	; 61
    8114:	cf 91       	pop	r28
    8116:	df 91       	pop	r29
    8118:	1f 91       	pop	r17
    811a:	0f 91       	pop	r16
    811c:	ff 90       	pop	r15
    811e:	ef 90       	pop	r14
    8120:	df 90       	pop	r13
    8122:	cf 90       	pop	r12
    8124:	bf 90       	pop	r11
    8126:	af 90       	pop	r10
    8128:	9f 90       	pop	r9
    812a:	08 95       	ret

0000812c <reply_touch>:
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_touch(uint8_t * receivebuffer)
{
    812c:	df 92       	push	r13
    812e:	ef 92       	push	r14
    8130:	ff 92       	push	r15
    8132:	0f 93       	push	r16
    8134:	1f 93       	push	r17
    8136:	df 93       	push	r29
    8138:	cf 93       	push	r28
    813a:	cd b7       	in	r28, 0x3d	; 61
    813c:	de b7       	in	r29, 0x3e	; 62
    813e:	2d 97       	sbiw	r28, 0x0d	; 13
    8140:	0f b6       	in	r0, 0x3f	; 63
    8142:	f8 94       	cli
    8144:	de bf       	out	0x3e, r29	; 62
    8146:	0f be       	out	0x3f, r0	; 63
    8148:	cd bf       	out	0x3d, r28	; 61
    814a:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char filename[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    814c:	fc 01       	movw	r30, r24
    814e:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    8150:	bc 01       	movw	r22, r24
    8152:	6c 5f       	subi	r22, 0xFC	; 252
    8154:	7f 4f       	sbci	r23, 0xFF	; 255
    8156:	40 81       	ld	r20, Z
    8158:	44 50       	subi	r20, 0x04	; 4
    815a:	7e 01       	movw	r14, r28
    815c:	08 94       	sec
    815e:	e1 1c       	adc	r14, r1
    8160:	f1 1c       	adc	r15, r1
    8162:	c7 01       	movw	r24, r14
    8164:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    8168:	f8 01       	movw	r30, r16
    816a:	80 81       	ld	r24, Z
    816c:	fe 01       	movw	r30, r28
    816e:	33 97       	sbiw	r30, 0x03	; 3
    8170:	e8 0f       	add	r30, r24
    8172:	f1 1d       	adc	r31, r1
    8174:	10 82       	st	Z, r1
    newblockid = createFileFromDirectory(filename, (int)blockid);
    8176:	c7 01       	movw	r24, r14
    8178:	6d 2d       	mov	r22, r13
    817a:	70 e0       	ldi	r23, 0x00	; 0
    817c:	0e 94 bb 2b 	call	0x5776	; 0x5776 <createFileFromDirectory>
    reply[0] = 4;
    8180:	94 e0       	ldi	r25, 0x04	; 4
    8182:	90 93 4e 08 	sts	0x084E, r25
    reply[1] = 151;
    8186:	97 e9       	ldi	r25, 0x97	; 151
    8188:	90 93 4f 08 	sts	0x084F, r25
    reply[2] = nodeid;
    818c:	90 91 b8 08 	lds	r25, 0x08B8
    8190:	90 93 50 08 	sts	0x0850, r25
    reply[3] = newblockid;
    8194:	80 93 51 08 	sts	0x0851, r24
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8198:	8f ee       	ldi	r24, 0xEF	; 239
    819a:	9f ee       	ldi	r25, 0xEF	; 239
    819c:	6f ef       	ldi	r22, 0xFF	; 255
    819e:	7f ef       	ldi	r23, 0xFF	; 255
    81a0:	40 e2       	ldi	r20, 0x20	; 32
    81a2:	2e e4       	ldi	r18, 0x4E	; 78
    81a4:	38 e0       	ldi	r19, 0x08	; 8
    81a6:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    //printStringN(reply,32);       
}
    81aa:	2d 96       	adiw	r28, 0x0d	; 13
    81ac:	0f b6       	in	r0, 0x3f	; 63
    81ae:	f8 94       	cli
    81b0:	de bf       	out	0x3e, r29	; 62
    81b2:	0f be       	out	0x3f, r0	; 63
    81b4:	cd bf       	out	0x3d, r28	; 61
    81b6:	cf 91       	pop	r28
    81b8:	df 91       	pop	r29
    81ba:	1f 91       	pop	r17
    81bc:	0f 91       	pop	r16
    81be:	ff 90       	pop	r15
    81c0:	ef 90       	pop	r14
    81c2:	df 90       	pop	r13
    81c4:	08 95       	ret

000081c6 <reply_cp_fromPCtoNode_type2>:
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type2(uint8_t * receivebuffer)
{
    81c6:	cf 93       	push	r28
    81c8:	df 93       	push	r29
    81ca:	ec 01       	movw	r28, r24
    uint16_t SyncNum;

    if (receivebuffer[3] == 0xff)
    81cc:	8b 81       	ldd	r24, Y+3	; 0x03
    81ce:	8f 3f       	cpi	r24, 0xFF	; 255
    81d0:	a1 f0       	breq	.+40     	; 0x81fa <reply_cp_fromPCtoNode_type2+0x34>
            reply[6] = 0;
            StandardSocketSend(0xefef, 0xffff, 32, reply);
        }
        return;
    }
    chunksequencenum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
    81d2:	9c 81       	ldd	r25, Y+4	; 0x04
    81d4:	80 e0       	ldi	r24, 0x00	; 0
    81d6:	2d 81       	ldd	r18, Y+5	; 0x05
    81d8:	82 0f       	add	r24, r18
    81da:	91 1d       	adc	r25, r1
    81dc:	90 93 71 08 	sts	0x0871, r25
    81e0:	80 93 70 08 	sts	0x0870, r24
    if (chunksequencenum != expectNextNum)
    81e4:	20 91 6e 08 	lds	r18, 0x086E
    81e8:	30 91 6f 08 	lds	r19, 0x086F
    81ec:	82 17       	cp	r24, r18
    81ee:	93 07       	cpc	r25, r19
    81f0:	09 f4       	brne	.+2      	; 0x81f4 <reply_cp_fromPCtoNode_type2+0x2e>
    81f2:	47 c0       	rjmp	.+142    	; 0x8282 <reply_cp_fromPCtoNode_type2+0xbc>
    fwrite2(openedfile, &receivebuffer[7], receivebuffer[6]);
    fseek2(openedfile, receivebuffer[6], 1);
    expectNextNum++;
    // printStringN(reply,32);      
    //StandardSocketSend(0xefef, 0xffff, 32, reply);
}
    81f4:	df 91       	pop	r29
    81f6:	cf 91       	pop	r28
    81f8:	08 95       	ret

    if (receivebuffer[3] == 0xff)
    {
        //now this is a sync
        SyncNum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
        if (SyncNum > expectNextNum - 1)
    81fa:	60 91 6e 08 	lds	r22, 0x086E
    81fe:	70 91 6f 08 	lds	r23, 0x086F
    8202:	ab 01       	movw	r20, r22
    8204:	41 50       	subi	r20, 0x01	; 1
    8206:	50 40       	sbci	r21, 0x00	; 0
    8208:	9c 81       	ldd	r25, Y+4	; 0x04
    820a:	80 e0       	ldi	r24, 0x00	; 0
    820c:	2d 81       	ldd	r18, Y+5	; 0x05
    820e:	82 0f       	add	r24, r18
    8210:	91 1d       	adc	r25, r1
    8212:	48 17       	cp	r20, r24
    8214:	59 07       	cpc	r21, r25
    8216:	f8 f0       	brcs	.+62     	; 0x8256 <reply_cp_fromPCtoNode_type2+0x90>
            reply[6] = (expectNextNum - 1) % 256;
            StandardSocketSend(0xefef, 0xffff, 32, reply);
        }
        else
        {
            reply[0] = 7;
    8218:	87 e0       	ldi	r24, 0x07	; 7
    821a:	80 93 4e 08 	sts	0x084E, r24
            reply[1] = 122;
    821e:	8a e7       	ldi	r24, 0x7A	; 122
    8220:	80 93 4f 08 	sts	0x084F, r24
            reply[2] = nodeid;
    8224:	80 91 b8 08 	lds	r24, 0x08B8
    8228:	80 93 50 08 	sts	0x0850, r24
            reply[3] = 15;
    822c:	8f e0       	ldi	r24, 0x0F	; 15
    822e:	80 93 51 08 	sts	0x0851, r24
            reply[4] = 15;
    8232:	80 93 52 08 	sts	0x0852, r24
            reply[5] = 0;
    8236:	10 92 53 08 	sts	0x0853, r1
            reply[6] = 0;
    823a:	10 92 54 08 	sts	0x0854, r1
            StandardSocketSend(0xefef, 0xffff, 32, reply);
    823e:	8f ee       	ldi	r24, 0xEF	; 239
    8240:	9f ee       	ldi	r25, 0xEF	; 239
    8242:	6f ef       	ldi	r22, 0xFF	; 255
    8244:	7f ef       	ldi	r23, 0xFF	; 255
    8246:	40 e2       	ldi	r20, 0x20	; 32
    8248:	2e e4       	ldi	r18, 0x4E	; 78
    824a:	38 e0       	ldi	r19, 0x08	; 8
    824c:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    fwrite2(openedfile, &receivebuffer[7], receivebuffer[6]);
    fseek2(openedfile, receivebuffer[6], 1);
    expectNextNum++;
    // printStringN(reply,32);      
    //StandardSocketSend(0xefef, 0xffff, 32, reply);
}
    8250:	df 91       	pop	r29
    8252:	cf 91       	pop	r28
    8254:	08 95       	ret
    {
        //now this is a sync
        SyncNum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
        if (SyncNum > expectNextNum - 1)
        {
            reply[0] = 7;
    8256:	87 e0       	ldi	r24, 0x07	; 7
    8258:	80 93 4e 08 	sts	0x084E, r24
            reply[1] = 122;
    825c:	8a e7       	ldi	r24, 0x7A	; 122
    825e:	80 93 4f 08 	sts	0x084F, r24
            reply[2] = nodeid;
    8262:	80 91 b8 08 	lds	r24, 0x08B8
    8266:	80 93 50 08 	sts	0x0850, r24
            reply[3] = 15;
    826a:	8f e0       	ldi	r24, 0x0F	; 15
    826c:	80 93 51 08 	sts	0x0851, r24
            reply[4] = 15;
    8270:	80 93 52 08 	sts	0x0852, r24
            reply[5] = (expectNextNum - 1) / 256;
    8274:	50 93 53 08 	sts	0x0853, r21
            reply[6] = (expectNextNum - 1) % 256;
    8278:	86 2f       	mov	r24, r22
    827a:	81 50       	subi	r24, 0x01	; 1
    827c:	80 93 54 08 	sts	0x0854, r24
    8280:	de cf       	rjmp	.-68     	; 0x823e <reply_cp_fromPCtoNode_type2+0x78>
    chunksequencenum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
    if (chunksequencenum != expectNextNum)
    {
        return;
    }
    fwrite2(openedfile, &receivebuffer[7], receivebuffer[6]);
    8282:	be 01       	movw	r22, r28
    8284:	69 5f       	subi	r22, 0xF9	; 249
    8286:	7f 4f       	sbci	r23, 0xFF	; 255
    8288:	4e 81       	ldd	r20, Y+6	; 0x06
    828a:	80 91 18 08 	lds	r24, 0x0818
    828e:	90 91 19 08 	lds	r25, 0x0819
    8292:	50 e0       	ldi	r21, 0x00	; 0
    8294:	0e 94 8e 22 	call	0x451c	; 0x451c <fwrite2>
    fseek2(openedfile, receivebuffer[6], 1);
    8298:	4e 81       	ldd	r20, Y+6	; 0x06
    829a:	50 e0       	ldi	r21, 0x00	; 0
    829c:	60 e0       	ldi	r22, 0x00	; 0
    829e:	70 e0       	ldi	r23, 0x00	; 0
    82a0:	80 91 18 08 	lds	r24, 0x0818
    82a4:	90 91 19 08 	lds	r25, 0x0819
    82a8:	21 e0       	ldi	r18, 0x01	; 1
    82aa:	30 e0       	ldi	r19, 0x00	; 0
    82ac:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <fseek2>
    expectNextNum++;
    82b0:	80 91 6e 08 	lds	r24, 0x086E
    82b4:	90 91 6f 08 	lds	r25, 0x086F
    82b8:	01 96       	adiw	r24, 0x01	; 1
    82ba:	90 93 6f 08 	sts	0x086F, r25
    82be:	80 93 6e 08 	sts	0x086E, r24
    // printStringN(reply,32);      
    //StandardSocketSend(0xefef, 0xffff, 32, reply);
}
    82c2:	df 91       	pop	r29
    82c4:	cf 91       	pop	r28
    82c6:	08 95       	ret

000082c8 <reply_cp_fromPCtoNode_type1>:
    // printStringN(reply,32);      
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type1(uint8_t * receivebuffer)
{
    82c8:	df 92       	push	r13
    82ca:	ef 92       	push	r14
    82cc:	ff 92       	push	r15
    82ce:	0f 93       	push	r16
    82d0:	1f 93       	push	r17
    82d2:	df 93       	push	r29
    82d4:	cf 93       	push	r28
    82d6:	cd b7       	in	r28, 0x3d	; 61
    82d8:	de b7       	in	r29, 0x3e	; 62
    82da:	2d 97       	sbiw	r28, 0x0d	; 13
    82dc:	0f b6       	in	r0, 0x3f	; 63
    82de:	f8 94       	cli
    82e0:	de bf       	out	0x3e, r29	; 62
    82e2:	0f be       	out	0x3f, r0	; 63
    82e4:	cd bf       	out	0x3d, r28	; 61
    82e6:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char filename[13];
    int fid;
    uint8_t newblockid;
      
    releaseAllFid();
    82e8:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <releaseAllFid>
    blockid = receivebuffer[3];
    82ec:	f8 01       	movw	r30, r16
    82ee:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    82f0:	b8 01       	movw	r22, r16
    82f2:	6c 5f       	subi	r22, 0xFC	; 252
    82f4:	7f 4f       	sbci	r23, 0xFF	; 255
    82f6:	40 81       	ld	r20, Z
    82f8:	44 50       	subi	r20, 0x04	; 4
    82fa:	7e 01       	movw	r14, r28
    82fc:	08 94       	sec
    82fe:	e1 1c       	adc	r14, r1
    8300:	f1 1c       	adc	r15, r1
    8302:	c7 01       	movw	r24, r14
    8304:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    8308:	f8 01       	movw	r30, r16
    830a:	80 81       	ld	r24, Z
    830c:	fe 01       	movw	r30, r28
    830e:	33 97       	sbiw	r30, 0x03	; 3
    8310:	e8 0f       	add	r30, r24
    8312:	f1 1d       	adc	r31, r1
    8314:	10 82       	st	Z, r1
    newblockid = createFileFromDirectory(filename, (int)blockid);
    8316:	c7 01       	movw	r24, r14
    8318:	6d 2d       	mov	r22, r13
    831a:	70 e0       	ldi	r23, 0x00	; 0
    831c:	0e 94 bb 2b 	call	0x5776	; 0x5776 <createFileFromDirectory>
    8320:	f8 2e       	mov	r15, r24
    chunksequencenum = 0;
    8322:	10 92 71 08 	sts	0x0871, r1
    8326:	10 92 70 08 	sts	0x0870, r1
    expectNextNum = 1;
    832a:	81 e0       	ldi	r24, 0x01	; 1
    832c:	90 e0       	ldi	r25, 0x00	; 0
    832e:	90 93 6f 08 	sts	0x086F, r25
    8332:	80 93 6e 08 	sts	0x086E, r24
    reply[0] = 4;
    8336:	84 e0       	ldi	r24, 0x04	; 4
    8338:	80 93 4e 08 	sts	0x084E, r24
    reply[1] = 121;
    833c:	89 e7       	ldi	r24, 0x79	; 121
    833e:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    8342:	80 91 b8 08 	lds	r24, 0x08B8
    8346:	80 93 50 08 	sts	0x0850, r24
    reply[3] = newblockid;
    834a:	f0 92 51 08 	sts	0x0851, r15
    fid = getFreeFid();
    834e:	0e 94 56 1f 	call	0x3eac	; 0x3eac <getFreeFid>
    8352:	18 2f       	mov	r17, r24
    8354:	09 2f       	mov	r16, r25
    openFile(newblockid, fid, 2);
    8356:	8f 2d       	mov	r24, r15
    8358:	90 e0       	ldi	r25, 0x00	; 0
    835a:	61 2f       	mov	r22, r17
    835c:	70 2f       	mov	r23, r16
    835e:	42 e0       	ldi	r20, 0x02	; 2
    8360:	50 e0       	ldi	r21, 0x00	; 0
    8362:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <openFile>
    openedfile = &fidtable[fid];
    8366:	81 2f       	mov	r24, r17
    8368:	90 2f       	mov	r25, r16
    836a:	9c 01       	movw	r18, r24
    836c:	22 0f       	add	r18, r18
    836e:	33 1f       	adc	r19, r19
    8370:	22 0f       	add	r18, r18
    8372:	33 1f       	adc	r19, r19
    8374:	22 0f       	add	r18, r18
    8376:	33 1f       	adc	r19, r19
    8378:	88 0f       	add	r24, r24
    837a:	99 1f       	adc	r25, r25
    837c:	28 0f       	add	r18, r24
    837e:	39 1f       	adc	r19, r25
    8380:	2a 54       	subi	r18, 0x4A	; 74
    8382:	3a 4f       	sbci	r19, 0xFA	; 250
    8384:	30 93 19 08 	sts	0x0819, r19
    8388:	20 93 18 08 	sts	0x0818, r18
	 sleepThread(20);
    838c:	84 e1       	ldi	r24, 0x14	; 20
    838e:	90 e0       	ldi	r25, 0x00	; 0
    8390:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <sleepThread>
    // printStringN(reply,32);      
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8394:	8f ee       	ldi	r24, 0xEF	; 239
    8396:	9f ee       	ldi	r25, 0xEF	; 239
    8398:	6f ef       	ldi	r22, 0xFF	; 255
    839a:	7f ef       	ldi	r23, 0xFF	; 255
    839c:	40 e2       	ldi	r20, 0x20	; 32
    839e:	2e e4       	ldi	r18, 0x4E	; 78
    83a0:	38 e0       	ldi	r19, 0x08	; 8
    83a2:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
}
    83a6:	2d 96       	adiw	r28, 0x0d	; 13
    83a8:	0f b6       	in	r0, 0x3f	; 63
    83aa:	f8 94       	cli
    83ac:	de bf       	out	0x3e, r29	; 62
    83ae:	0f be       	out	0x3f, r0	; 63
    83b0:	cd bf       	out	0x3d, r28	; 61
    83b2:	cf 91       	pop	r28
    83b4:	df 91       	pop	r29
    83b6:	1f 91       	pop	r17
    83b8:	0f 91       	pop	r16
    83ba:	ff 90       	pop	r15
    83bc:	ef 90       	pop	r14
    83be:	df 90       	pop	r13
    83c0:	08 95       	ret

000083c2 <reply_mkdir>:
    }
}

//-------------------------------------------------------------------------
void reply_mkdir(uint8_t * receivebuffer)
{
    83c2:	df 92       	push	r13
    83c4:	ef 92       	push	r14
    83c6:	ff 92       	push	r15
    83c8:	0f 93       	push	r16
    83ca:	1f 93       	push	r17
    83cc:	df 93       	push	r29
    83ce:	cf 93       	push	r28
    83d0:	cd b7       	in	r28, 0x3d	; 61
    83d2:	de b7       	in	r29, 0x3e	; 62
    83d4:	2d 97       	sbiw	r28, 0x0d	; 13
    83d6:	0f b6       	in	r0, 0x3f	; 63
    83d8:	f8 94       	cli
    83da:	de bf       	out	0x3e, r29	; 62
    83dc:	0f be       	out	0x3f, r0	; 63
    83de:	cd bf       	out	0x3d, r28	; 61
    83e0:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char dirname[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    83e2:	fc 01       	movw	r30, r24
    83e4:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(dirname, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    83e6:	bc 01       	movw	r22, r24
    83e8:	6c 5f       	subi	r22, 0xFC	; 252
    83ea:	7f 4f       	sbci	r23, 0xFF	; 255
    83ec:	40 81       	ld	r20, Z
    83ee:	44 50       	subi	r20, 0x04	; 4
    83f0:	7e 01       	movw	r14, r28
    83f2:	08 94       	sec
    83f4:	e1 1c       	adc	r14, r1
    83f6:	f1 1c       	adc	r15, r1
    83f8:	c7 01       	movw	r24, r14
    83fa:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
    dirname[receivebuffer[0] - 4] = '\0';
    83fe:	f8 01       	movw	r30, r16
    8400:	80 81       	ld	r24, Z
    8402:	fe 01       	movw	r30, r28
    8404:	33 97       	sbiw	r30, 0x03	; 3
    8406:	e8 0f       	add	r30, r24
    8408:	f1 1d       	adc	r31, r1
    840a:	10 82       	st	Z, r1
    newblockid = createDir(dirname, (int)blockid);
    840c:	c7 01       	movw	r24, r14
    840e:	6d 2d       	mov	r22, r13
    8410:	70 e0       	ldi	r23, 0x00	; 0
    8412:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <createDir>
    reply[0] = 4;
    8416:	94 e0       	ldi	r25, 0x04	; 4
    8418:	90 93 4e 08 	sts	0x084E, r25
    reply[1] = 141;
    841c:	9d e8       	ldi	r25, 0x8D	; 141
    841e:	90 93 4f 08 	sts	0x084F, r25
    reply[2] = nodeid;
    8422:	90 91 b8 08 	lds	r25, 0x08B8
    8426:	90 93 50 08 	sts	0x0850, r25
    reply[3] = newblockid;
    842a:	80 93 51 08 	sts	0x0851, r24
	 sleepThread(20);
    842e:	84 e1       	ldi	r24, 0x14	; 20
    8430:	90 e0       	ldi	r25, 0x00	; 0
    8432:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <sleepThread>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8436:	8f ee       	ldi	r24, 0xEF	; 239
    8438:	9f ee       	ldi	r25, 0xEF	; 239
    843a:	6f ef       	ldi	r22, 0xFF	; 255
    843c:	7f ef       	ldi	r23, 0xFF	; 255
    843e:	40 e2       	ldi	r20, 0x20	; 32
    8440:	2e e4       	ldi	r18, 0x4E	; 78
    8442:	38 e0       	ldi	r19, 0x08	; 8
    8444:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    // printStringN(reply,32);      
}
    8448:	2d 96       	adiw	r28, 0x0d	; 13
    844a:	0f b6       	in	r0, 0x3f	; 63
    844c:	f8 94       	cli
    844e:	de bf       	out	0x3e, r29	; 62
    8450:	0f be       	out	0x3f, r0	; 63
    8452:	cd bf       	out	0x3d, r28	; 61
    8454:	cf 91       	pop	r28
    8456:	df 91       	pop	r29
    8458:	1f 91       	pop	r17
    845a:	0f 91       	pop	r16
    845c:	ff 90       	pop	r15
    845e:	ef 90       	pop	r14
    8460:	df 90       	pop	r13
    8462:	08 95       	ret

00008464 <reply_ls_long>:
    return;
}

//Get the block information of sub directory and files using long version 
void reply_ls_long(uint8_t block)
{
    8464:	ef 92       	push	r14
    8466:	ff 92       	push	r15
    8468:	0f 93       	push	r16
    846a:	1f 93       	push	r17
    846c:	cf 93       	push	r28
    846e:	df 93       	push	r29
    8470:	08 2f       	mov	r16, r24
    uint8_t blockindex;
    uint8_t childblock;
    uint8_t seq = 0;

    if (openedfile != NULL)
    8472:	80 91 18 08 	lds	r24, 0x0818
    8476:	90 91 19 08 	lds	r25, 0x0819
    847a:	89 2b       	or	r24, r25
    847c:	21 f0       	breq	.+8      	; 0x8486 <reply_ls_long+0x22>
    {
        //fclose2( openedfile );
        openedfile = NULL;
    847e:	10 92 19 08 	sts	0x0819, r1
    8482:	10 92 18 08 	sts	0x0818, r1
    8486:	10 e0       	ldi	r17, 0x00	; 0
    8488:	ce e0       	ldi	r28, 0x0E	; 14
    848a:	d0 e0       	ldi	r29, 0x00	; 0
        childblock = fsread8uint(block, DIR_ADDRSUBOFFSET + blockindex);
        if (childblock == 0)
        {
            continue;
        }
        reply[0] = 32;
    848c:	b0 e2       	ldi	r27, 0x20	; 32
    848e:	eb 2e       	mov	r14, r27
        reply[1] = 104;
    8490:	a8 e6       	ldi	r26, 0x68	; 104
    8492:	fa 2e       	mov	r15, r26
    8494:	04 c0       	rjmp	.+8      	; 0x849e <reply_ls_long+0x3a>
        reply[4] = seq;
        seq++;
        finfonode((char *)&reply[5], (int)childblock);
	    sleepThread(20);
	
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    8496:	21 96       	adiw	r28, 0x01	; 1
    if (openedfile != NULL)
    {
        //fclose2( openedfile );
        openedfile = NULL;
    }
    for (blockindex = 0; blockindex < 10; blockindex++)
    8498:	c8 31       	cpi	r28, 0x18	; 24
    849a:	d1 05       	cpc	r29, r1
    849c:	59 f1       	breq	.+86     	; 0x84f4 <reply_ls_long+0x90>
    {
        childblock = fsread8uint(block, DIR_ADDRSUBOFFSET + blockindex);
    849e:	80 2f       	mov	r24, r16
    84a0:	90 e0       	ldi	r25, 0x00	; 0
    84a2:	be 01       	movw	r22, r28
    84a4:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <fsread8uint>
    84a8:	68 2f       	mov	r22, r24
        if (childblock == 0)
    84aa:	88 23       	and	r24, r24
    84ac:	a1 f3       	breq	.-24     	; 0x8496 <reply_ls_long+0x32>
        {
            continue;
        }
        reply[0] = 32;
    84ae:	e0 92 4e 08 	sts	0x084E, r14
        reply[1] = 104;
    84b2:	f0 92 4f 08 	sts	0x084F, r15
        reply[2] = nodeid;
    84b6:	80 91 b8 08 	lds	r24, 0x08B8
    84ba:	80 93 50 08 	sts	0x0850, r24
        reply[3] = childblock;
    84be:	60 93 51 08 	sts	0x0851, r22
        reply[4] = seq;
    84c2:	10 93 52 08 	sts	0x0852, r17
        seq++;
    84c6:	1f 5f       	subi	r17, 0xFF	; 255
        finfonode((char *)&reply[5], (int)childblock);
    84c8:	83 e5       	ldi	r24, 0x53	; 83
    84ca:	98 e0       	ldi	r25, 0x08	; 8
    84cc:	70 e0       	ldi	r23, 0x00	; 0
    84ce:	0e 94 c6 20 	call	0x418c	; 0x418c <finfonode>
	    sleepThread(20);
    84d2:	84 e1       	ldi	r24, 0x14	; 20
    84d4:	90 e0       	ldi	r25, 0x00	; 0
    84d6:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <sleepThread>
	
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    84da:	8f ee       	ldi	r24, 0xEF	; 239
    84dc:	9f ee       	ldi	r25, 0xEF	; 239
    84de:	6f ef       	ldi	r22, 0xFF	; 255
    84e0:	7f ef       	ldi	r23, 0xFF	; 255
    84e2:	40 e2       	ldi	r20, 0x20	; 32
    84e4:	2e e4       	ldi	r18, 0x4E	; 78
    84e6:	38 e0       	ldi	r19, 0x08	; 8
    84e8:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    84ec:	21 96       	adiw	r28, 0x01	; 1
    if (openedfile != NULL)
    {
        //fclose2( openedfile );
        openedfile = NULL;
    }
    for (blockindex = 0; blockindex < 10; blockindex++)
    84ee:	c8 31       	cpi	r28, 0x18	; 24
    84f0:	d1 05       	cpc	r29, r1
    84f2:	a9 f6       	brne	.-86     	; 0x849e <reply_ls_long+0x3a>
	    sleepThread(20);
	
        StandardSocketSend(0xefef, 0xffff, 32, reply);
        //     printStringN(reply,32); 
    }
}
    84f4:	df 91       	pop	r29
    84f6:	cf 91       	pop	r28
    84f8:	1f 91       	pop	r17
    84fa:	0f 91       	pop	r16
    84fc:	ff 90       	pop	r15
    84fe:	ef 90       	pop	r14
    8500:	08 95       	ret

00008502 <reply_ls_nodename>:
    //printString("hello,reply2!\n\0");
}

//-------------------------------------------------------------------------
void reply_ls_nodename(uint8_t * receivebuffer)
{
    8502:	0f 93       	push	r16
    8504:	fc 01       	movw	r30, r24
    uint8_t temp = receivebuffer[0] - 3;
    uint16_t randomsleep;

    if (mystrncmp((char *)receivebuffer, 3, (char *)networkid, 0, temp) == 0)
    8506:	00 81       	ld	r16, Z
    8508:	03 50       	subi	r16, 0x03	; 3
    850a:	63 e0       	ldi	r22, 0x03	; 3
    850c:	46 e0       	ldi	r20, 0x06	; 6
    850e:	54 e0       	ldi	r21, 0x04	; 4
    8510:	20 e0       	ldi	r18, 0x00	; 0
    8512:	0e 94 92 3b 	call	0x7724	; 0x7724 <mystrncmp>
    8516:	89 2b       	or	r24, r25
    8518:	39 f5       	brne	.+78     	; 0x8568 <reply_ls_nodename+0x66>
    {
        temp = mystrlen(filenameid);
    851a:	83 ef       	ldi	r24, 0xF3	; 243
    851c:	93 e0       	ldi	r25, 0x03	; 3
    851e:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    8522:	48 2f       	mov	r20, r24
        reply[0] = temp + 3;
    8524:	4d 5f       	subi	r20, 0xFD	; 253
    8526:	40 93 4e 08 	sts	0x084E, r20
    852a:	43 50       	subi	r20, 0x03	; 3
        reply[1] = 102;
    852c:	86 e6       	ldi	r24, 0x66	; 102
    852e:	80 93 4f 08 	sts	0x084F, r24
        reply[2] = nodeid;
    8532:	80 91 b8 08 	lds	r24, 0x08B8
    8536:	80 93 50 08 	sts	0x0850, r24
        mystrncpy((char *)&reply[3], filenameid, temp);
    853a:	81 e5       	ldi	r24, 0x51	; 81
    853c:	98 e0       	ldi	r25, 0x08	; 8
    853e:	63 ef       	ldi	r22, 0xF3	; 243
    8540:	73 e0       	ldi	r23, 0x03	; 3
    8542:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
        randomsleep = getRandomNumber() % 400;
    8546:	0e 94 57 3c 	call	0x78ae	; 0x78ae <getRandomNumber>
        sleepThread(randomsleep);
    854a:	60 e9       	ldi	r22, 0x90	; 144
    854c:	71 e0       	ldi	r23, 0x01	; 1
    854e:	0e 94 96 55 	call	0xab2c	; 0xab2c <__udivmodhi4>
    8552:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <sleepThread>
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    8556:	8f ee       	ldi	r24, 0xEF	; 239
    8558:	9f ee       	ldi	r25, 0xEF	; 239
    855a:	6f ef       	ldi	r22, 0xFF	; 255
    855c:	7f ef       	ldi	r23, 0xFF	; 255
    855e:	40 e2       	ldi	r20, 0x20	; 32
    8560:	2e e4       	ldi	r18, 0x4E	; 78
    8562:	38 e0       	ldi	r19, 0x08	; 8
    8564:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
        //printStringN(reply,32); 
    }
}
    8568:	0f 91       	pop	r16
    856a:	08 95       	ret

0000856c <reply_ls_networkname>:
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_ls_networkname()
{
    856c:	ef 92       	push	r14
    856e:	ff 92       	push	r15
    8570:	0f 93       	push	r16
    8572:	1f 93       	push	r17
    //   uint16_t temp2; 
    uint8_t temp = mystrlen(networkid);
    8574:	06 e0       	ldi	r16, 0x06	; 6
    8576:	14 e0       	ldi	r17, 0x04	; 4
    8578:	c8 01       	movw	r24, r16
    857a:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    857e:	48 2f       	mov	r20, r24
    uint16_t randomsleep;

    reply[0] = temp + 3;
    8580:	8e e4       	ldi	r24, 0x4E	; 78
    8582:	e8 2e       	mov	r14, r24
    8584:	88 e0       	ldi	r24, 0x08	; 8
    8586:	f8 2e       	mov	r15, r24
    8588:	4d 5f       	subi	r20, 0xFD	; 253
    858a:	40 93 4e 08 	sts	0x084E, r20
    858e:	43 50       	subi	r20, 0x03	; 3
    reply[1] = 101;
    8590:	85 e6       	ldi	r24, 0x65	; 101
    8592:	80 93 4f 08 	sts	0x084F, r24
    //   foobar(); 
    reply[2] = nodeid;
    8596:	80 91 b8 08 	lds	r24, 0x08B8
    859a:	80 93 50 08 	sts	0x0850, r24
    mystrncpy((char *)&reply[3], networkid, temp);
    859e:	c7 01       	movw	r24, r14
    85a0:	03 96       	adiw	r24, 0x03	; 3
    85a2:	b8 01       	movw	r22, r16
    85a4:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
    randomsleep = getRandomNumber() % 400;
    85a8:	0e 94 57 3c 	call	0x78ae	; 0x78ae <getRandomNumber>
    sleepThread(randomsleep);
    85ac:	60 e9       	ldi	r22, 0x90	; 144
    85ae:	71 e0       	ldi	r23, 0x01	; 1
    85b0:	0e 94 96 55 	call	0xab2c	; 0xab2c <__udivmodhi4>
    85b4:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <sleepThread>
    // for (temp2=0;temp2<9000;temp2++)
    // {
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    85b8:	8f ee       	ldi	r24, 0xEF	; 239
    85ba:	9f ee       	ldi	r25, 0xEF	; 239
    85bc:	6f ef       	ldi	r22, 0xFF	; 255
    85be:	7f ef       	ldi	r23, 0xFF	; 255
    85c0:	40 e2       	ldi	r20, 0x20	; 32
    85c2:	97 01       	movw	r18, r14
    85c4:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    // sleepThread(20);
    // }
    //   printStringN(reply,32); 
    //printString("hello,reply2!\n\0");
}
    85c8:	1f 91       	pop	r17
    85ca:	0f 91       	pop	r16
    85cc:	ff 90       	pop	r15
    85ce:	ef 90       	pop	r14
    85d0:	08 95       	ret

000085d2 <reply_thread_state_restore_fromfile>:

//this should copy the thread information from the file to the thread
//the packet should ocntain the file name as well as the index of the thread to be restored
//note that it will check the file size to ensure that is sufficient information for the thread to be restored
void reply_thread_state_restore_fromfile(uint8_t * receivebuffer)
{
    85d2:	cf 92       	push	r12
    85d4:	df 92       	push	r13
    85d6:	ef 92       	push	r14
    85d8:	ff 92       	push	r15
    85da:	0f 93       	push	r16
    85dc:	1f 93       	push	r17
    85de:	cf 93       	push	r28
    85e0:	df 93       	push	r29
    85e2:	ec 01       	movw	r28, r24
    uint8_t i;
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    85e4:	88 81       	ld	r24, Y
    85e6:	fe 01       	movw	r30, r28
    85e8:	e8 0f       	add	r30, r24
    85ea:	f1 1d       	adc	r31, r1
    85ec:	10 82       	st	Z, r1
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    85ee:	80 91 64 05 	lds	r24, 0x0564
    85f2:	88 23       	and	r24, r24
    85f4:	41 f5       	brne	.+80     	; 0x8646 <reply_thread_state_restore_fromfile+0x74>
    85f6:	80 91 8b 05 	lds	r24, 0x058B
    85fa:	88 23       	and	r24, r24
    85fc:	89 f5       	brne	.+98     	; 0x8660 <reply_thread_state_restore_fromfile+0x8e>
                break;
            }
        }
    }
    i = receivebuffer[3];
    receivebuffer[5 + i] = '/';
    85fe:	8b 81       	ldd	r24, Y+3	; 0x03
    8600:	c8 0f       	add	r28, r24
    8602:	d1 1d       	adc	r29, r1
    8604:	8f e2       	ldi	r24, 0x2F	; 47
    8606:	8d 83       	std	Y+5, r24	; 0x05
    8608:	90 e0       	ldi	r25, 0x00	; 0
    if (testtrue != 0)
    {
        thread_state_restore(testtrue, (uint8_t *) & receivebuffer[5 + i]);
    }
    reply[0] = 4;
    860a:	84 e0       	ldi	r24, 0x04	; 4
    860c:	80 93 4e 08 	sts	0x084E, r24
    reply[1] = 95;
    8610:	8f e5       	ldi	r24, 0x5F	; 95
    8612:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    8616:	80 91 b8 08 	lds	r24, 0x08B8
    861a:	80 93 50 08 	sts	0x0850, r24
    reply[3] = testtrue;
    861e:	90 93 51 08 	sts	0x0851, r25
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8622:	8f ee       	ldi	r24, 0xEF	; 239
    8624:	9f ee       	ldi	r25, 0xEF	; 239
    8626:	6f ef       	ldi	r22, 0xFF	; 255
    8628:	7f ef       	ldi	r23, 0xFF	; 255
    862a:	40 e2       	ldi	r20, 0x20	; 32
    862c:	2e e4       	ldi	r18, 0x4E	; 78
    862e:	38 e0       	ldi	r19, 0x08	; 8
    8630:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
}
    8634:	df 91       	pop	r29
    8636:	cf 91       	pop	r28
    8638:	1f 91       	pop	r17
    863a:	0f 91       	pop	r16
    863c:	ff 90       	pop	r15
    863e:	ef 90       	pop	r14
    8640:	df 90       	pop	r13
    8642:	cf 90       	pop	r12
    8644:	08 95       	ret
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    8646:	be 01       	movw	r22, r28
    8648:	6b 5f       	subi	r22, 0xFB	; 251
    864a:	7f 4f       	sbci	r23, 0xFF	; 255
    864c:	87 e6       	ldi	r24, 0x67	; 103
    864e:	95 e0       	ldi	r25, 0x05	; 5
    8650:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <superstring>
    8654:	89 2b       	or	r24, r25
    8656:	99 f2       	breq	.-90     	; 0x85fe <reply_thread_state_restore_fromfile+0x2c>
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    8658:	80 91 8b 05 	lds	r24, 0x058B
    865c:	88 23       	and	r24, r24
    865e:	79 f2       	breq	.-98     	; 0x85fe <reply_thread_state_restore_fromfile+0x2c>
        {
            if (superstring
    8660:	be 01       	movw	r22, r28
    8662:	6b 5f       	subi	r22, 0xFB	; 251
    8664:	7f 4f       	sbci	r23, 0xFF	; 255
    8666:	8e e8       	ldi	r24, 0x8E	; 142
    8668:	95 e0       	ldi	r25, 0x05	; 5
    866a:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <superstring>
    866e:	89 2b       	or	r24, r25
    8670:	31 f6       	brne	.-116    	; 0x85fe <reply_thread_state_restore_fromfile+0x2c>
                break;
            }
        }
    }
    i = receivebuffer[3];
    receivebuffer[5 + i] = '/';
    8672:	eb 81       	ldd	r30, Y+3	; 0x03
    8674:	f0 e0       	ldi	r31, 0x00	; 0
    8676:	35 96       	adiw	r30, 0x05	; 5
    8678:	ec 0f       	add	r30, r28
    867a:	fd 1f       	adc	r31, r29
    867c:	8f e2       	ldi	r24, 0x2F	; 47
    867e:	80 83       	st	Z, r24
    MYFILE *fp;
    uint8_t threadsize;
    uint16_t threadramsize;
    uint8_t *internal_ram_start;
    threadsize = sizeof(struct thread);
    threadramsize =
    8680:	c0 90 9a 05 	lds	r12, 0x059A
    8684:	d0 90 9b 05 	lds	r13, 0x059B
    8688:	e0 90 9c 05 	lds	r14, 0x059C
    868c:	f0 90 9d 05 	lds	r15, 0x059D
    8690:	08 94       	sec
    8692:	e1 1c       	adc	r14, r1
    8694:	f1 1c       	adc	r15, r1
    8696:	ec 18       	sub	r14, r12
    8698:	fd 08       	sbc	r15, r13
        (uint16_t) ((uint8_t *) thread_table[index].ramend -
                    (uint8_t *) thread_table[index].ramstart + 1);
    internal_ram_start = (uint8_t *) thread_table[index].ramstart;
    fp = fopen2((char *)filename, "r");
    869a:	cf 01       	movw	r24, r30
    869c:	6c e3       	ldi	r22, 0x3C	; 60
    869e:	71 e0       	ldi	r23, 0x01	; 1
    86a0:	0e 94 42 25 	call	0x4a84	; 0x4a84 <fopen2>
    86a4:	8c 01       	movw	r16, r24
    fread2(fp, &thread_table[index], threadsize);
    86a6:	69 e8       	ldi	r22, 0x89	; 137
    86a8:	75 e0       	ldi	r23, 0x05	; 5
    86aa:	47 e2       	ldi	r20, 0x27	; 39
    86ac:	50 e0       	ldi	r21, 0x00	; 0
    86ae:	0e 94 cd 23 	call	0x479a	; 0x479a <fread2>
    fseek2(fp, threadsize, 1);
    86b2:	c8 01       	movw	r24, r16
    86b4:	47 e2       	ldi	r20, 0x27	; 39
    86b6:	50 e0       	ldi	r21, 0x00	; 0
    86b8:	60 e0       	ldi	r22, 0x00	; 0
    86ba:	70 e0       	ldi	r23, 0x00	; 0
    86bc:	21 e0       	ldi	r18, 0x01	; 1
    86be:	30 e0       	ldi	r19, 0x00	; 0
    86c0:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <fseek2>
    fread2(fp, internal_ram_start, threadramsize);
    86c4:	c8 01       	movw	r24, r16
    86c6:	b6 01       	movw	r22, r12
    86c8:	a7 01       	movw	r20, r14
    86ca:	0e 94 cd 23 	call	0x479a	; 0x479a <fread2>
    fclose2(fp);
    86ce:	c8 01       	movw	r24, r16
    86d0:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <fclose2>
    86d4:	91 e0       	ldi	r25, 0x01	; 1
    86d6:	99 cf       	rjmp	.-206    	; 0x860a <reply_thread_state_restore_fromfile+0x38>

000086d8 <reply_thread_state_snapshot_tofile>:
//this should copy the thread information into a file 
//The packet should contain the information regarding the user 
//THe packet should contain the index of the thread and the file name that will be written as the new file 
//the file name part requires careful debugging of the file system 
void reply_thread_state_snapshot_tofile(uint8_t * receivebuffer)
{
    86d8:	cf 92       	push	r12
    86da:	df 92       	push	r13
    86dc:	ef 92       	push	r14
    86de:	ff 92       	push	r15
    86e0:	0f 93       	push	r16
    86e2:	1f 93       	push	r17
    86e4:	cf 93       	push	r28
    86e6:	df 93       	push	r29
    86e8:	ec 01       	movw	r28, r24
    uint8_t i;
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    86ea:	88 81       	ld	r24, Y
    86ec:	fe 01       	movw	r30, r28
    86ee:	e8 0f       	add	r30, r24
    86f0:	f1 1d       	adc	r31, r1
    86f2:	10 82       	st	Z, r1
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    86f4:	80 91 64 05 	lds	r24, 0x0564
    86f8:	88 23       	and	r24, r24
    86fa:	09 f0       	breq	.+2      	; 0x86fe <reply_thread_state_snapshot_tofile+0x26>
    86fc:	62 c0       	rjmp	.+196    	; 0x87c2 <reply_thread_state_snapshot_tofile+0xea>
    86fe:	80 91 8b 05 	lds	r24, 0x058B
    8702:	88 23       	and	r24, r24
    8704:	f9 f4       	brne	.+62     	; 0x8744 <reply_thread_state_snapshot_tofile+0x6c>
    internal_ram_start = (uint8_t *) thread_table[index].ramstart;
    fp = fopen2((char *)filename, "w");
    fwrite2(fp, &thread_table[index], threadsize);
    fseek2(fp, threadsize, 1);
    fwrite2(fp, internal_ram_start, threadramsize);
    fclose2(fp);
    8706:	90 e0       	ldi	r25, 0x00	; 0
        receivebuffer[receivebuffer[3] + 5] = '/';
        thread_state_snapshot(testtrue,
                              (uint8_t *) & receivebuffer[receivebuffer[3] +
                                                          5]);
    }
    reply[0] = 4;
    8708:	84 e0       	ldi	r24, 0x04	; 4
    870a:	80 93 4e 08 	sts	0x084E, r24
    reply[1] = 94;
    870e:	8e e5       	ldi	r24, 0x5E	; 94
    8710:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    8714:	80 91 b8 08 	lds	r24, 0x08B8
    8718:	80 93 50 08 	sts	0x0850, r24
    reply[3] = testtrue;
    871c:	90 93 51 08 	sts	0x0851, r25
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8720:	8f ee       	ldi	r24, 0xEF	; 239
    8722:	9f ee       	ldi	r25, 0xEF	; 239
    8724:	6f ef       	ldi	r22, 0xFF	; 255
    8726:	7f ef       	ldi	r23, 0xFF	; 255
    8728:	40 e2       	ldi	r20, 0x20	; 32
    872a:	2e e4       	ldi	r18, 0x4E	; 78
    872c:	38 e0       	ldi	r19, 0x08	; 8
    872e:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
}
    8732:	df 91       	pop	r29
    8734:	cf 91       	pop	r28
    8736:	1f 91       	pop	r17
    8738:	0f 91       	pop	r16
    873a:	ff 90       	pop	r15
    873c:	ef 90       	pop	r14
    873e:	df 90       	pop	r13
    8740:	cf 90       	pop	r12
    8742:	08 95       	ret
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    8744:	be 01       	movw	r22, r28
    8746:	6b 5f       	subi	r22, 0xFB	; 251
    8748:	7f 4f       	sbci	r23, 0xFF	; 255
    874a:	8e e8       	ldi	r24, 0x8E	; 142
    874c:	95 e0       	ldi	r25, 0x05	; 5
    874e:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <superstring>
    8752:	89 2b       	or	r24, r25
    8754:	c1 f6       	brne	.-80     	; 0x8706 <reply_thread_state_snapshot_tofile+0x2e>
            }
        }
    }
    if (testtrue != 0)
    {
        receivebuffer[receivebuffer[3] + 5] = '/';
    8756:	8b 81       	ldd	r24, Y+3	; 0x03
    8758:	fe 01       	movw	r30, r28
    875a:	e8 0f       	add	r30, r24
    875c:	f1 1d       	adc	r31, r1
    875e:	8f e2       	ldi	r24, 0x2F	; 47
    8760:	85 83       	std	Z+5, r24	; 0x05
    MYFILE *fp;
    uint8_t threadsize;
    uint16_t threadramsize;
    uint8_t *internal_ram_start;
    threadsize = sizeof(struct thread);
    threadramsize =
    8762:	c0 90 9a 05 	lds	r12, 0x059A
    8766:	d0 90 9b 05 	lds	r13, 0x059B
    876a:	e0 90 9c 05 	lds	r14, 0x059C
    876e:	f0 90 9d 05 	lds	r15, 0x059D
    8772:	08 94       	sec
    8774:	e1 1c       	adc	r14, r1
    8776:	f1 1c       	adc	r15, r1
    8778:	ec 18       	sub	r14, r12
    877a:	fd 08       	sbc	r15, r13
        (uint16_t) ((uint8_t *) thread_table[index].ramend -
                    (uint8_t *) thread_table[index].ramstart + 1);
    internal_ram_start = (uint8_t *) thread_table[index].ramstart;
    fp = fopen2((char *)filename, "w");
    877c:	8b 81       	ldd	r24, Y+3	; 0x03
    877e:	90 e0       	ldi	r25, 0x00	; 0
    8780:	05 96       	adiw	r24, 0x05	; 5
    8782:	8c 0f       	add	r24, r28
    8784:	9d 1f       	adc	r25, r29
    8786:	6e e3       	ldi	r22, 0x3E	; 62
    8788:	71 e0       	ldi	r23, 0x01	; 1
    878a:	0e 94 42 25 	call	0x4a84	; 0x4a84 <fopen2>
    878e:	8c 01       	movw	r16, r24
    fwrite2(fp, &thread_table[index], threadsize);
    8790:	69 e8       	ldi	r22, 0x89	; 137
    8792:	75 e0       	ldi	r23, 0x05	; 5
    8794:	47 e2       	ldi	r20, 0x27	; 39
    8796:	50 e0       	ldi	r21, 0x00	; 0
    8798:	0e 94 8e 22 	call	0x451c	; 0x451c <fwrite2>
    fseek2(fp, threadsize, 1);
    879c:	c8 01       	movw	r24, r16
    879e:	47 e2       	ldi	r20, 0x27	; 39
    87a0:	50 e0       	ldi	r21, 0x00	; 0
    87a2:	60 e0       	ldi	r22, 0x00	; 0
    87a4:	70 e0       	ldi	r23, 0x00	; 0
    87a6:	21 e0       	ldi	r18, 0x01	; 1
    87a8:	30 e0       	ldi	r19, 0x00	; 0
    87aa:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <fseek2>
    fwrite2(fp, internal_ram_start, threadramsize);
    87ae:	c8 01       	movw	r24, r16
    87b0:	b6 01       	movw	r22, r12
    87b2:	a7 01       	movw	r20, r14
    87b4:	0e 94 8e 22 	call	0x451c	; 0x451c <fwrite2>
    fclose2(fp);
    87b8:	c8 01       	movw	r24, r16
    87ba:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <fclose2>
    87be:	91 e0       	ldi	r25, 0x01	; 1
    87c0:	a3 cf       	rjmp	.-186    	; 0x8708 <reply_thread_state_snapshot_tofile+0x30>
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    87c2:	be 01       	movw	r22, r28
    87c4:	6b 5f       	subi	r22, 0xFB	; 251
    87c6:	7f 4f       	sbci	r23, 0xFF	; 255
    87c8:	87 e6       	ldi	r24, 0x67	; 103
    87ca:	95 e0       	ldi	r25, 0x05	; 5
    87cc:	0e 94 6a 3b 	call	0x76d4	; 0x76d4 <superstring>
    87d0:	89 2b       	or	r24, r25
    87d2:	09 f0       	breq	.+2      	; 0x87d6 <reply_thread_state_snapshot_tofile+0xfe>
    87d4:	94 cf       	rjmp	.-216    	; 0x86fe <reply_thread_state_snapshot_tofile+0x26>
    87d6:	97 cf       	rjmp	.-210    	; 0x8706 <reply_thread_state_snapshot_tofile+0x2e>

000087d8 <reply_debugging_remove_avr_breakpoint>:
//And the thread dump and thread_state_restore should be the next task. 
//and this task should check the address to see which location is the address to be need. 
//use uint32_t because uint16_t is too small 
#ifdef PLATFORM_AVR
void reply_debugging_remove_avr_breakpoint(uint8_t * receivebuffer)
{
    87d8:	ef 92       	push	r14
    87da:	ff 92       	push	r15
    87dc:	0f 93       	push	r16
    87de:	1f 93       	push	r17
    87e0:	cf 93       	push	r28
    87e2:	df 93       	push	r29
    87e4:	ec 01       	movw	r28, r24
    uint16_t pagecount;
    uint8_t offset;
    uint8_t i;
    uint8_t breakpointfound = 0;

    addrbreakpoint = ((uint16_t) receivebuffer[3] * 256) + receivebuffer[4];
    87e6:	9b 81       	ldd	r25, Y+3	; 0x03
    87e8:	80 e0       	ldi	r24, 0x00	; 0
    87ea:	2c 81       	ldd	r18, Y+4	; 0x04
    87ec:	82 0f       	add	r24, r18
    87ee:	91 1d       	adc	r25, r1
    87f0:	7c 01       	movw	r14, r24
    87f2:	00 e0       	ldi	r16, 0x00	; 0
    87f4:	10 e0       	ldi	r17, 0x00	; 0
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state == STATE_BREAK)
    87f6:	80 91 64 05 	lds	r24, 0x0564
    87fa:	88 30       	cpi	r24, 0x08	; 8
    87fc:	d9 f1       	breq	.+118    	; 0x8874 <reply_debugging_remove_avr_breakpoint+0x9c>
    87fe:	80 91 8b 05 	lds	r24, 0x058B
    8802:	88 30       	cpi	r24, 0x08	; 8
    8804:	e9 f0       	breq	.+58     	; 0x8840 <reply_debugging_remove_avr_breakpoint+0x68>
    }
    if (i < LITE_MAX_THREADS)
    {
        pagecount = addrbreakpoint / 128;
        offset = addrbreakpoint * 2 % 256;
        boot_removeBreakPoint(pagecount, offset, &receivebuffer[5]);
    8806:	90 e0       	ldi	r25, 0x00	; 0
        breakpointfound = 1;
    }
    reply[0] = 5;
    8808:	85 e0       	ldi	r24, 0x05	; 5
    880a:	80 93 4e 08 	sts	0x084E, r24
    reply[1] = 93;
    880e:	8d e5       	ldi	r24, 0x5D	; 93
    8810:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    8814:	80 91 b8 08 	lds	r24, 0x08B8
    8818:	80 93 50 08 	sts	0x0850, r24
    reply[3] = breakpointfound;
    881c:	90 93 51 08 	sts	0x0851, r25
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8820:	8f ee       	ldi	r24, 0xEF	; 239
    8822:	9f ee       	ldi	r25, 0xEF	; 239
    8824:	6f ef       	ldi	r22, 0xFF	; 255
    8826:	7f ef       	ldi	r23, 0xFF	; 255
    8828:	40 e2       	ldi	r20, 0x20	; 32
    882a:	2e e4       	ldi	r18, 0x4E	; 78
    882c:	38 e0       	ldi	r19, 0x08	; 8
    882e:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
}
    8832:	df 91       	pop	r29
    8834:	cf 91       	pop	r28
    8836:	1f 91       	pop	r17
    8838:	0f 91       	pop	r16
    883a:	ff 90       	pop	r15
    883c:	ef 90       	pop	r14
    883e:	08 95       	ret
    addrbreakpoint = ((uint16_t) receivebuffer[3] * 256) + receivebuffer[4];
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state == STATE_BREAK)
        {
            uint8_t *tempptr = (uint8_t *) thread_table[i].sp + 47;
    8840:	e0 91 89 05 	lds	r30, 0x0589
    8844:	f0 91 8a 05 	lds	r31, 0x058A
    8848:	bf 01       	movw	r22, r30
    884a:	61 5d       	subi	r22, 0xD1	; 209
    884c:	7f 4f       	sbci	r23, 0xFF	; 255
            uint16_t addr =
                (((uint16_t) (*tempptr)) * 256 + *(tempptr + 1) - 3);
    884e:	af 01       	movw	r20, r30
    8850:	40 5d       	subi	r20, 0xD0	; 208
    8852:	5f 4f       	sbci	r21, 0xFF	; 255
            if (addr == addrbreakpoint)
    8854:	97 a5       	ldd	r25, Z+47	; 0x2f
    8856:	80 e0       	ldi	r24, 0x00	; 0
    8858:	20 a9       	ldd	r18, Z+48	; 0x30
    885a:	82 0f       	add	r24, r18
    885c:	91 1d       	adc	r25, r1
    885e:	03 97       	sbiw	r24, 0x03	; 3
    8860:	a0 e0       	ldi	r26, 0x00	; 0
    8862:	b0 e0       	ldi	r27, 0x00	; 0
    8864:	8e 15       	cp	r24, r14
    8866:	9f 05       	cpc	r25, r15
    8868:	a0 07       	cpc	r26, r16
    886a:	b1 07       	cpc	r27, r17
    886c:	61 f6       	brne	.-104    	; 0x8806 <reply_debugging_remove_avr_breakpoint+0x2e>
    886e:	21 e0       	ldi	r18, 0x01	; 1
    8870:	30 e0       	ldi	r19, 0x00	; 0
    8872:	1a c0       	rjmp	.+52     	; 0x88a8 <reply_debugging_remove_avr_breakpoint+0xd0>
    addrbreakpoint = ((uint16_t) receivebuffer[3] * 256) + receivebuffer[4];
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state == STATE_BREAK)
        {
            uint8_t *tempptr = (uint8_t *) thread_table[i].sp + 47;
    8874:	e0 91 62 05 	lds	r30, 0x0562
    8878:	f0 91 63 05 	lds	r31, 0x0563
    887c:	bf 01       	movw	r22, r30
    887e:	61 5d       	subi	r22, 0xD1	; 209
    8880:	7f 4f       	sbci	r23, 0xFF	; 255
            uint16_t addr =
                (((uint16_t) (*tempptr)) * 256 + *(tempptr + 1) - 3);
    8882:	af 01       	movw	r20, r30
    8884:	40 5d       	subi	r20, 0xD0	; 208
    8886:	5f 4f       	sbci	r21, 0xFF	; 255
            if (addr == addrbreakpoint)
    8888:	20 a9       	ldd	r18, Z+48	; 0x30
    888a:	97 a5       	ldd	r25, Z+47	; 0x2f
    888c:	80 e0       	ldi	r24, 0x00	; 0
    888e:	82 0f       	add	r24, r18
    8890:	91 1d       	adc	r25, r1
    8892:	03 97       	sbiw	r24, 0x03	; 3
    8894:	a0 e0       	ldi	r26, 0x00	; 0
    8896:	b0 e0       	ldi	r27, 0x00	; 0
    8898:	8e 15       	cp	r24, r14
    889a:	9f 05       	cpc	r25, r15
    889c:	a0 07       	cpc	r26, r16
    889e:	b1 07       	cpc	r27, r17
    88a0:	09 f0       	breq	.+2      	; 0x88a4 <reply_debugging_remove_avr_breakpoint+0xcc>
    88a2:	ad cf       	rjmp	.-166    	; 0x87fe <reply_debugging_remove_avr_breakpoint+0x26>
    88a4:	20 e0       	ldi	r18, 0x00	; 0
    88a6:	30 e0       	ldi	r19, 0x00	; 0
            {
                thread_table[i].state = STATE_ACTIVE;
    88a8:	f9 01       	movw	r30, r18
    88aa:	ee 0f       	add	r30, r30
    88ac:	ff 1f       	adc	r31, r31
    88ae:	ee 0f       	add	r30, r30
    88b0:	ff 1f       	adc	r31, r31
    88b2:	ee 0f       	add	r30, r30
    88b4:	ff 1f       	adc	r31, r31
    88b6:	cf 01       	movw	r24, r30
    88b8:	88 0f       	add	r24, r24
    88ba:	99 1f       	adc	r25, r25
    88bc:	88 0f       	add	r24, r24
    88be:	99 1f       	adc	r25, r25
    88c0:	e8 0f       	add	r30, r24
    88c2:	f9 1f       	adc	r31, r25
    88c4:	e2 1b       	sub	r30, r18
    88c6:	f3 0b       	sbc	r31, r19
    88c8:	ee 59       	subi	r30, 0x9E	; 158
    88ca:	fa 4f       	sbci	r31, 0xFA	; 250
    88cc:	82 e0       	ldi	r24, 0x02	; 2
    88ce:	82 83       	std	Z+2, r24	; 0x02
                *tempptr = addrbreakpoint / 256;
    88d0:	bb 27       	eor	r27, r27
    88d2:	a1 2f       	mov	r26, r17
    88d4:	90 2f       	mov	r25, r16
    88d6:	8f 2d       	mov	r24, r15
    88d8:	fb 01       	movw	r30, r22
    88da:	80 83       	st	Z, r24
                *(tempptr + 1) = addrbreakpoint % 256;
    88dc:	fa 01       	movw	r30, r20
    88de:	e0 82       	st	Z, r14
    }
    if (i < LITE_MAX_THREADS)
    {
        pagecount = addrbreakpoint / 128;
        offset = addrbreakpoint * 2 % 256;
        boot_removeBreakPoint(pagecount, offset, &receivebuffer[5]);
    88e0:	a8 01       	movw	r20, r16
    88e2:	97 01       	movw	r18, r14
    88e4:	22 0f       	add	r18, r18
    88e6:	33 1f       	adc	r19, r19
    88e8:	44 1f       	adc	r20, r20
    88ea:	55 1f       	adc	r21, r21
    88ec:	25 96       	adiw	r28, 0x05	; 5
    88ee:	97 e0       	ldi	r25, 0x07	; 7
    88f0:	16 95       	lsr	r17
    88f2:	07 95       	ror	r16
    88f4:	f7 94       	ror	r15
    88f6:	e7 94       	ror	r14
    88f8:	9a 95       	dec	r25
    88fa:	d1 f7       	brne	.-12     	; 0x88f0 <reply_debugging_remove_avr_breakpoint+0x118>
    88fc:	c7 01       	movw	r24, r14
    88fe:	62 2f       	mov	r22, r18
    8900:	ae 01       	movw	r20, r28
    8902:	0e 94 c6 f2 	call	0x1e58c	; 0x1e58c <boot_removeBreakPoint>
    8906:	91 e0       	ldi	r25, 0x01	; 1
    8908:	7f cf       	rjmp	.-258    	; 0x8808 <reply_debugging_remove_avr_breakpoint+0x30>

0000890a <reply_debugging_insert_avr_breakpoint>:
    //printStringN(reply,32); 
}

//-------------------------------------------------------------------------
void reply_debugging_insert_avr_breakpoint(uint8_t * receivebuffer)
{
    890a:	7f 92       	push	r7
    890c:	8f 92       	push	r8
    890e:	9f 92       	push	r9
    8910:	af 92       	push	r10
    8912:	bf 92       	push	r11
    8914:	cf 92       	push	r12
    8916:	df 92       	push	r13
    8918:	ef 92       	push	r14
    891a:	ff 92       	push	r15
    891c:	0f 93       	push	r16
    891e:	1f 93       	push	r17
    8920:	df 93       	push	r29
    8922:	cf 93       	push	r28
    8924:	00 d0       	rcall	.+0      	; 0x8926 <reply_debugging_insert_avr_breakpoint+0x1c>
    8926:	00 d0       	rcall	.+0      	; 0x8928 <reply_debugging_insert_avr_breakpoint+0x1e>
    8928:	00 d0       	rcall	.+0      	; 0x892a <reply_debugging_insert_avr_breakpoint+0x20>
    892a:	cd b7       	in	r28, 0x3d	; 61
    892c:	de b7       	in	r29, 0x3e	; 62
    892e:	5c 01       	movw	r10, r24
    uint8_t offset;
    uint8_t instructions[6];
    uint32_t temp; 
    uint8_t index; 
    
    pagecount = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    8930:	dc 01       	movw	r26, r24
    8932:	13 96       	adiw	r26, 0x03	; 3
    8934:	dc 90       	ld	r13, X
    8936:	13 97       	sbiw	r26, 0x03	; 3
    8938:	cc 24       	eor	r12, r12
    893a:	14 96       	adiw	r26, 0x04	; 4
    893c:	8c 91       	ld	r24, X
    893e:	14 97       	sbiw	r26, 0x04	; 4
    8940:	c8 0e       	add	r12, r24
    8942:	d1 1c       	adc	r13, r1
    offset = receivebuffer[5];
    8944:	15 96       	adiw	r26, 0x05	; 5
    8946:	7c 90       	ld	r7, X
    
    temp = (uint32_t)pagecount * 256 + (uint32_t)offset; 
    8948:	76 01       	movw	r14, r12
    894a:	00 e0       	ldi	r16, 0x00	; 0
    894c:	10 e0       	ldi	r17, 0x00	; 0
    894e:	10 2f       	mov	r17, r16
    8950:	0f 2d       	mov	r16, r15
    8952:	fe 2c       	mov	r15, r14
    8954:	ee 24       	eor	r14, r14
    8956:	e7 0c       	add	r14, r7
    8958:	f1 1c       	adc	r15, r1
    895a:	01 1d       	adc	r16, r1
    895c:	11 1d       	adc	r17, r1
    temp = temp/2; 
    
    index = get_breakpoint_index();
    895e:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <get_breakpoint_index>
    br_state[index].addr = temp;
    8962:	90 e0       	ldi	r25, 0x00	; 0
    8964:	4c 01       	movw	r8, r24
    8966:	88 0c       	add	r8, r8
    8968:	99 1c       	adc	r9, r9
    896a:	88 0c       	add	r8, r8
    896c:	99 1c       	adc	r9, r9
    896e:	88 0c       	add	r8, r8
    8970:	99 1c       	adc	r9, r9
    8972:	88 0e       	add	r8, r24
    8974:	99 1e       	adc	r9, r25
    8976:	f4 01       	movw	r30, r8
    8978:	e6 5e       	subi	r30, 0xE6	; 230
    897a:	f7 4f       	sbci	r31, 0xF7	; 247
    897c:	16 95       	lsr	r17
    897e:	07 95       	ror	r16
    8980:	f7 94       	ror	r15
    8982:	e7 94       	ror	r14
    8984:	f1 82       	std	Z+1, r15	; 0x01
    8986:	e0 82       	st	Z, r14
    
    boot_insertBreakPoint(pagecount, offset, instructions);
    8988:	c6 01       	movw	r24, r12
    898a:	67 2d       	mov	r22, r7
    898c:	8e 01       	movw	r16, r28
    898e:	0f 5f       	subi	r16, 0xFF	; 255
    8990:	1f 4f       	sbci	r17, 0xFF	; 255
    8992:	a8 01       	movw	r20, r16
    8994:	0e 94 90 f4 	call	0x1e920	; 0x1e920 <boot_insertBreakPoint>
    reply[0] = 12;
    8998:	8c e0       	ldi	r24, 0x0C	; 12
    899a:	80 93 4e 08 	sts	0x084E, r24
    reply[1] = 92;
    899e:	8c e5       	ldi	r24, 0x5C	; 92
    89a0:	80 93 4f 08 	sts	0x084F, r24
    reply[2] = nodeid;
    89a4:	80 91 b8 08 	lds	r24, 0x08B8
    89a8:	80 93 50 08 	sts	0x0850, r24
    reply[3] = receivebuffer[3];
    89ac:	f5 01       	movw	r30, r10
    89ae:	83 81       	ldd	r24, Z+3	; 0x03
    89b0:	80 93 51 08 	sts	0x0851, r24
    reply[4] = receivebuffer[4];
    89b4:	84 81       	ldd	r24, Z+4	; 0x04
    89b6:	80 93 52 08 	sts	0x0852, r24
    reply[5] = receivebuffer[5];
    89ba:	85 81       	ldd	r24, Z+5	; 0x05
    89bc:	80 93 53 08 	sts	0x0853, r24
    89c0:	f8 01       	movw	r30, r16
    89c2:	24 e5       	ldi	r18, 0x54	; 84
    89c4:	38 e0       	ldi	r19, 0x08	; 8
    89c6:	b4 01       	movw	r22, r8
    89c8:	64 5e       	subi	r22, 0xE4	; 228
    89ca:	77 4f       	sbci	r23, 0xF7	; 247
    89cc:	ae 01       	movw	r20, r28
    89ce:	49 5f       	subi	r20, 0xF9	; 249
    89d0:	5f 4f       	sbci	r21, 0xFF	; 255
    for (offset = 0; offset < 6; offset++)
    {
        reply[6 + offset] = instructions[offset];
    89d2:	81 91       	ld	r24, Z+
    89d4:	d9 01       	movw	r26, r18
    89d6:	8d 93       	st	X+, r24
    89d8:	9d 01       	movw	r18, r26
         br_state[index].breakpointinstructions[offset] = instructions[offset]; 
    89da:	db 01       	movw	r26, r22
    89dc:	8d 93       	st	X+, r24
    89de:	bd 01       	movw	r22, r26
    reply[1] = 92;
    reply[2] = nodeid;
    reply[3] = receivebuffer[3];
    reply[4] = receivebuffer[4];
    reply[5] = receivebuffer[5];
    for (offset = 0; offset < 6; offset++)
    89e0:	e4 17       	cp	r30, r20
    89e2:	f5 07       	cpc	r31, r21
    89e4:	b1 f7       	brne	.-20     	; 0x89d2 <reply_debugging_insert_avr_breakpoint+0xc8>
    {
        reply[6 + offset] = instructions[offset];
         br_state[index].breakpointinstructions[offset] = instructions[offset]; 
    }
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    89e6:	8f ee       	ldi	r24, 0xEF	; 239
    89e8:	9f ee       	ldi	r25, 0xEF	; 239
    89ea:	6f ef       	ldi	r22, 0xFF	; 255
    89ec:	7f ef       	ldi	r23, 0xFF	; 255
    89ee:	40 e2       	ldi	r20, 0x20	; 32
    89f0:	2e e4       	ldi	r18, 0x4E	; 78
    89f2:	38 e0       	ldi	r19, 0x08	; 8
    89f4:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    89f8:	8f ee       	ldi	r24, 0xEF	; 239
    89fa:	9f ee       	ldi	r25, 0xEF	; 239
    89fc:	6f ef       	ldi	r22, 0xFF	; 255
    89fe:	7f ef       	ldi	r23, 0xFF	; 255
    8a00:	40 e2       	ldi	r20, 0x20	; 32
    8a02:	2e e4       	ldi	r18, 0x4E	; 78
    8a04:	38 e0       	ldi	r19, 0x08	; 8
    8a06:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8a0a:	8f ee       	ldi	r24, 0xEF	; 239
    8a0c:	9f ee       	ldi	r25, 0xEF	; 239
    8a0e:	6f ef       	ldi	r22, 0xFF	; 255
    8a10:	7f ef       	ldi	r23, 0xFF	; 255
    8a12:	40 e2       	ldi	r20, 0x20	; 32
    8a14:	2e e4       	ldi	r18, 0x4E	; 78
    8a16:	38 e0       	ldi	r19, 0x08	; 8
    8a18:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <StandardSocketSend>
}
    8a1c:	26 96       	adiw	r28, 0x06	; 6
    8a1e:	0f b6       	in	r0, 0x3f	; 63
    8a20:	f8 94       	cli
    8a22:	de bf       	out	0x3e, r29	; 62
    8a24:	0f be       	out	0x3f, r0	; 63
    8a26:	cd bf       	out	0x3d, r28	; 61
    8a28:	cf 91       	pop	r28
    8a2a:	df 91       	pop	r29
    8a2c:	1f 91       	pop	r17
    8a2e:	0f 91       	pop	r16
    8a30:	ff 90       	pop	r15
    8a32:	ef 90       	pop	r14
    8a34:	df 90       	pop	r13
    8a36:	cf 90       	pop	r12
    8a38:	bf 90       	pop	r11
    8a3a:	af 90       	pop	r10
    8a3c:	9f 90       	pop	r9
    8a3e:	8f 90       	pop	r8
    8a40:	7f 90       	pop	r7
    8a42:	08 95       	ret

00008a44 <commandHandle>:
    }
}

//-------------------------------------------------------------------------
void commandHandle(uint8_t * receivebuffer, uint8_t total)
{
    8a44:	cf 93       	push	r28
    8a46:	df 93       	push	r29
    8a48:	ec 01       	movw	r28, r24
    uint8_t commandtype;

    if (!((receivebuffer[2] == 0) || (receivebuffer[2] == nodeid)))
    8a4a:	2a 81       	ldd	r18, Y+2	; 0x02
    8a4c:	22 23       	and	r18, r18
    8a4e:	59 f0       	breq	.+22     	; 0x8a66 <commandHandle+0x22>
    8a50:	30 e0       	ldi	r19, 0x00	; 0
    8a52:	80 91 b8 08 	lds	r24, 0x08B8
    8a56:	90 91 b9 08 	lds	r25, 0x08B9
    8a5a:	28 17       	cp	r18, r24
    8a5c:	39 07       	cpc	r19, r25
    8a5e:	19 f0       	breq	.+6      	; 0x8a66 <commandHandle+0x22>
        break;
    case 242:
        reply_nodeRestart(receivebuffer);
        break;
    }
}
    8a60:	df 91       	pop	r29
    8a62:	cf 91       	pop	r28
    8a64:	08 95       	ret
    if (!((receivebuffer[2] == 0) || (receivebuffer[2] == nodeid)))
    {
        return;
    }
    commandtype = receivebuffer[1];
    switch (commandtype)
    8a66:	89 81       	ldd	r24, Y+1	; 0x01
    8a68:	90 e0       	ldi	r25, 0x00	; 0
    8a6a:	fc 01       	movw	r30, r24
    8a6c:	eb 55       	subi	r30, 0x5B	; 91
    8a6e:	f0 40       	sbci	r31, 0x00	; 0
    8a70:	e8 39       	cpi	r30, 0x98	; 152
    8a72:	f1 05       	cpc	r31, r1
    8a74:	a8 f7       	brcc	.-22     	; 0x8a60 <commandHandle+0x1c>
    8a76:	ea 5b       	subi	r30, 0xBA	; 186
    8a78:	ff 4f       	sbci	r31, 0xFF	; 255
    8a7a:	ee 0f       	add	r30, r30
    8a7c:	ff 1f       	adc	r31, r31
    8a7e:	05 90       	lpm	r0, Z+
    8a80:	f4 91       	lpm	r31, Z+
    8a82:	e0 2d       	mov	r30, r0
    8a84:	09 94       	ijmp
        break;
    case 103:
        reply_ls_long(receivebuffer[3]);
        break;
    case 104:
        reply_ls_long(receivebuffer[3]);
    8a86:	8b 81       	ldd	r24, Y+3	; 0x03
    8a88:	0e 94 32 42 	call	0x8464	; 0x8464 <reply_ls_long>
    8a8c:	e9 cf       	rjmp	.-46     	; 0x8a60 <commandHandle+0x1c>
        break;
    case 101:
        reply_ls_networkname();
        break;
    case 102:
        reply_ls_nodename(receivebuffer);
    8a8e:	ce 01       	movw	r24, r28
    8a90:	0e 94 81 42 	call	0x8502	; 0x8502 <reply_ls_nodename>
    8a94:	e5 cf       	rjmp	.-54     	; 0x8a60 <commandHandle+0x1c>
        break;
    case 104:
        reply_ls_long(receivebuffer[3]);
        break;
    case 121:
        reply_cp_fromPCtoNode_type1(receivebuffer);
    8a96:	ce 01       	movw	r24, r28
    8a98:	0e 94 64 41 	call	0x82c8	; 0x82c8 <reply_cp_fromPCtoNode_type1>
    8a9c:	e1 cf       	rjmp	.-62     	; 0x8a60 <commandHandle+0x1c>
        break;
    case 122:
        reply_cp_fromPCtoNode_type2(receivebuffer);
    8a9e:	ce 01       	movw	r24, r28
    8aa0:	0e 94 e3 40 	call	0x81c6	; 0x81c6 <reply_cp_fromPCtoNode_type2>
    8aa4:	dd cf       	rjmp	.-70     	; 0x8a60 <commandHandle+0x1c>
        break;
    case 123:
        reply_cp_fromPCtoNode_type3();
    8aa6:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <reply_cp_fromPCtoNode_type3>
    8aaa:	da cf       	rjmp	.-76     	; 0x8a60 <commandHandle+0x1c>
        break;
    case 124:
        reply_fromNodeToPC_type1(receivebuffer);
    8aac:	ce 01       	movw	r24, r28
    8aae:	0e 94 8d 3f 	call	0x7f1a	; 0x7f1a <reply_fromNodeToPC_type1>
    8ab2:	d6 cf       	rjmp	.-84     	; 0x8a60 <commandHandle+0x1c>
        break;
    case 125:
        reply_fromNodeToPC_type2(receivebuffer);
    8ab4:	ce 01       	movw	r24, r28
    8ab6:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <reply_fromNodeToPC_type2>
    8aba:	d2 cf       	rjmp	.-92     	; 0x8a60 <commandHandle+0x1c>
        break;
    case 141:
        reply_mkdir(receivebuffer);
    8abc:	ce 01       	movw	r24, r28
    8abe:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <reply_mkdir>
    8ac2:	ce cf       	rjmp	.-100    	; 0x8a60 <commandHandle+0x1c>
        break;
    case 151:
        reply_touch(receivebuffer);
    8ac4:	ce 01       	movw	r24, r28
    8ac6:	0e 94 96 40 	call	0x812c	; 0x812c <reply_touch>
    8aca:	ca cf       	rjmp	.-108    	; 0x8a60 <commandHandle+0x1c>
        break;
    case 161:
        reply_rm(receivebuffer);
    8acc:	ce 01       	movw	r24, r28
    8ace:	0e 94 3a 3f 	call	0x7e74	; 0x7e74 <reply_rm>
    8ad2:	c6 cf       	rjmp	.-116    	; 0x8a60 <commandHandle+0x1c>
        break;
    case 171:
        reply_ps(receivebuffer);
    8ad4:	ce 01       	movw	r24, r28
    8ad6:	0e 94 2b 3d 	call	0x7a56	; 0x7a56 <reply_ps>
    8ada:	c2 cf       	rjmp	.-124    	; 0x8a60 <commandHandle+0x1c>
        break;
    
    case 211:
        reply_du(receivebuffer);
    8adc:	ce 01       	movw	r24, r28
    8ade:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <reply_du>
    8ae2:	be cf       	rjmp	.-132    	; 0x8a60 <commandHandle+0x1c>
        break;
    case 221:
        reply_search(receivebuffer);
    8ae4:	ce 01       	movw	r24, r28
    8ae6:	0e 94 c0 3c 	call	0x7980	; 0x7980 <reply_search>
    8aea:	ba cf       	rjmp	.-140    	; 0x8a60 <commandHandle+0x1c>
        break;
    
    case 233:
        reply_formatSystem(receivebuffer);
    8aec:	ce 01       	movw	r24, r28
    8aee:	0e 94 bb 3c 	call	0x7976	; 0x7976 <reply_formatSystem>
    8af2:	b6 cf       	rjmp	.-148    	; 0x8a60 <commandHandle+0x1c>
}

//-------------------------------------------------------------------------
void reply_nodeRestart(uint8_t * receivebuffer)
{
    avr_resetNode();
    8af4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <avr_resetNode>
    8af8:	b3 cf       	rjmp	.-154    	; 0x8a60 <commandHandle+0x1c>
    switch (commandtype)
    {
        //reply_devicehandling handles the device driver issues 
    
    case 91:
        reply_debugging_print(receivebuffer);
    8afa:	ce 01       	movw	r24, r28
    8afc:	0e 94 cf 3d 	call	0x7b9e	; 0x7b9e <reply_debugging_print>
    8b00:	af cf       	rjmp	.-162    	; 0x8a60 <commandHandle+0x1c>
        break;
#ifdef PLATFORM_AVR
    case 92:
        reply_debugging_insert_avr_breakpoint(receivebuffer);
    8b02:	ce 01       	movw	r24, r28
    8b04:	0e 94 85 44 	call	0x890a	; 0x890a <reply_debugging_insert_avr_breakpoint>
    8b08:	ab cf       	rjmp	.-170    	; 0x8a60 <commandHandle+0x1c>
        break;
    case 93:
        reply_debugging_remove_avr_breakpoint(receivebuffer);
    8b0a:	ce 01       	movw	r24, r28
    8b0c:	0e 94 ec 43 	call	0x87d8	; 0x87d8 <reply_debugging_remove_avr_breakpoint>
    8b10:	a7 cf       	rjmp	.-178    	; 0x8a60 <commandHandle+0x1c>
        break;
#endif
    case 94:
        reply_thread_state_snapshot_tofile(receivebuffer);
    8b12:	ce 01       	movw	r24, r28
    8b14:	0e 94 6c 43 	call	0x86d8	; 0x86d8 <reply_thread_state_snapshot_tofile>
    8b18:	a3 cf       	rjmp	.-186    	; 0x8a60 <commandHandle+0x1c>
        break;
    case 95:
        reply_thread_state_restore_fromfile(receivebuffer);
    8b1a:	ce 01       	movw	r24, r28
    8b1c:	0e 94 e9 42 	call	0x85d2	; 0x85d2 <reply_thread_state_restore_fromfile>
    8b20:	9f cf       	rjmp	.-194    	; 0x8a60 <commandHandle+0x1c>
        break;
    case 96:
        reply_debugging_set(receivebuffer);
    8b22:	ce 01       	movw	r24, r28
    8b24:	0e 94 a9 3d 	call	0x7b52	; 0x7b52 <reply_debugging_set>
    8b28:	9b cf       	rjmp	.-202    	; 0x8a60 <commandHandle+0x1c>
        break;
    case 101:
        reply_ls_networkname();
    8b2a:	0e 94 b6 42 	call	0x856c	; 0x856c <reply_ls_networkname>
    8b2e:	98 cf       	rjmp	.-208    	; 0x8a60 <commandHandle+0x1c>

00008b30 <ShellThread>:
    init_breakpoint_table();
}

//This is the stub function of the shell thread that is used to handle incoming packets 
void ShellThread()
{
    8b30:	1f 93       	push	r17
            commandHandle(IncomingMsg, IncomingLength);
            IncomingLength = 0;
        }
        else
        {
            current_thread->state = STATE_SLEEP;
    8b32:	15 e0       	ldi	r17, 0x05	; 5
//This is the stub function of the shell thread that is used to handle incoming packets 
void ShellThread()
{
    while (1)
    {
        if (IncomingLength > 0)
    8b34:	60 91 73 08 	lds	r22, 0x0873
    8b38:	66 23       	and	r22, r22
    8b3a:	79 f4       	brne	.+30     	; 0x8b5a <ShellThread+0x2a>
            commandHandle(IncomingMsg, IncomingLength);
            IncomingLength = 0;
        }
        else
        {
            current_thread->state = STATE_SLEEP;
    8b3c:	e0 91 60 05 	lds	r30, 0x0560
    8b40:	f0 91 61 05 	lds	r31, 0x0561
    8b44:	12 83       	std	Z+2, r17	; 0x02
            thisthread = current_thread;
    8b46:	f0 93 b7 08 	sts	0x08B7, r31
    8b4a:	e0 93 b6 08 	sts	0x08B6, r30
            thread_yield();
    8b4e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <thread_yield>
//This is the stub function of the shell thread that is used to handle incoming packets 
void ShellThread()
{
    while (1)
    {
        if (IncomingLength > 0)
    8b52:	60 91 73 08 	lds	r22, 0x0873
    8b56:	66 23       	and	r22, r22
    8b58:	89 f3       	breq	.-30     	; 0x8b3c <ShellThread+0xc>
        {
            commandHandle(IncomingMsg, IncomingLength);
    8b5a:	84 e7       	ldi	r24, 0x74	; 116
    8b5c:	98 e0       	ldi	r25, 0x08	; 8
    8b5e:	0e 94 22 45 	call	0x8a44	; 0x8a44 <commandHandle>
            IncomingLength = 0;
    8b62:	10 92 73 08 	sts	0x0873, r1
    8b66:	e6 cf       	rjmp	.-52     	; 0x8b34 <ShellThread+0x4>

00008b68 <StandardSocketSend>:
{   
//    #ifdef PLATFORM_AVR_IRIS
//     sleepThread(20);
//    #endif 

    radiosocketdata.socket_port = port;
    8b68:	90 93 bb 08 	sts	0x08BB, r25
    8b6c:	80 93 ba 08 	sts	0x08BA, r24
    radiosocketdata.socket_addr = address;
    8b70:	70 93 bd 08 	sts	0x08BD, r23
    8b74:	60 93 bc 08 	sts	0x08BC, r22
    radiosocketdata.socket_msg_len = msglength;
    8b78:	40 93 be 08 	sts	0x08BE, r20
    radiosocketdata.socket_msg = msg;
    8b7c:	30 93 c0 08 	sts	0x08C0, r19
    8b80:	20 93 bf 08 	sts	0x08BF, r18
    postTask(send_task, 9);
    8b84:	8e ec       	ldi	r24, 0xCE	; 206
    8b86:	95 e4       	ldi	r25, 0x45	; 69
    8b88:	69 e0       	ldi	r22, 0x09	; 9
    8b8a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    sleepThread(20);
    8b8e:	84 e1       	ldi	r24, 0x14	; 20
    8b90:	90 e0       	ldi	r25, 0x00	; 0
    8b92:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <sleepThread>
    restoreRadioState();
    8b96:	0e 94 cc 08 	call	0x1198	; 0x1198 <restoreRadioState>
    return;
}
    8b9a:	08 95       	ret

00008b9c <send_task>:
    struct msgData *dataPayloadPtr_currentMsg;

  
	 
    dataPayloadPtr_currentMsg = (struct msgData *)currentMsg.data;
    if (radiosocketdata.socket_msg_len == 0)
    8b9c:	40 91 be 08 	lds	r20, 0x08BE
    8ba0:	44 23       	and	r20, r20
    8ba2:	99 f1       	breq	.+102    	; 0x8c0a <send_task+0x6e>
    {
        radiosocketdata.socket_msg_len = mystrlen((char *)radiosocketdata.socket_msg);
    }
    mystrncpy((char *)dataPayloadPtr_currentMsg, (char *)radiosocketdata.socket_msg,
    8ba4:	60 91 bf 08 	lds	r22, 0x08BF
    8ba8:	70 91 c0 08 	lds	r23, 0x08C0
    8bac:	8b ec       	ldi	r24, 0xCB	; 203
    8bae:	98 e0       	ldi	r25, 0x08	; 8
    8bb0:	0e 94 0a 3b 	call	0x7614	; 0x7614 <mystrncpy>
              radiosocketdata.socket_msg_len);


  
    if (radiosocketdata.socket_addr != 0)
    8bb4:	60 91 bc 08 	lds	r22, 0x08BC
    8bb8:	70 91 bd 08 	lds	r23, 0x08BD
    8bbc:	61 15       	cp	r22, r1
    8bbe:	71 05       	cpc	r23, r1
    8bc0:	c9 f4       	brne	.+50     	; 0x8bf4 <send_task+0x58>
    {
        AMStandard_SendMsg_send(radiosocketdata.socket_port, radiosocketdata.socket_addr, radiosocketdata.socket_msg_len, &currentMsg);
    }
    else
    {
        currentMsg.length = radiosocketdata.socket_msg_len;
    8bc2:	80 91 be 08 	lds	r24, 0x08BE
    8bc6:	80 93 c1 08 	sts	0x08C1, r24
        currentMsg.addr = radiosocketdata.socket_addr;
    8bca:	10 92 c8 08 	sts	0x08C8, r1
    8bce:	10 92 c7 08 	sts	0x08C7, r1
        currentMsg.port = radiosocketdata.socket_port;
    8bd2:	80 91 ba 08 	lds	r24, 0x08BA
    8bd6:	90 91 bb 08 	lds	r25, 0x08BB
    8bda:	90 93 ca 08 	sts	0x08CA, r25
    8bde:	80 93 c9 08 	sts	0x08C9, r24
        currentMsg.strength = 0;
    8be2:	10 92 2f 09 	sts	0x092F, r1
        currentMsg.lqi = 0; 
    8be6:	10 92 30 09 	sts	0x0930, r1
        Standard_Receive_Packet(radiosocketdata.socket_port, &currentMsg);
    8bea:	61 ec       	ldi	r22, 0xC1	; 193
    8bec:	78 e0       	ldi	r23, 0x08	; 8
    8bee:	0e 94 37 0a 	call	0x146e	; 0x146e <Standard_Receive_Packet>
    8bf2:	08 95       	ret


  
    if (radiosocketdata.socket_addr != 0)
    {
        AMStandard_SendMsg_send(radiosocketdata.socket_port, radiosocketdata.socket_addr, radiosocketdata.socket_msg_len, &currentMsg);
    8bf4:	80 91 ba 08 	lds	r24, 0x08BA
    8bf8:	90 91 bb 08 	lds	r25, 0x08BB
    8bfc:	40 91 be 08 	lds	r20, 0x08BE
    8c00:	21 ec       	ldi	r18, 0xC1	; 193
    8c02:	38 e0       	ldi	r19, 0x08	; 8
    8c04:	0e 94 05 09 	call	0x120a	; 0x120a <AMStandard_SendMsg_send>
    8c08:	08 95       	ret
  
	 
    dataPayloadPtr_currentMsg = (struct msgData *)currentMsg.data;
    if (radiosocketdata.socket_msg_len == 0)
    {
        radiosocketdata.socket_msg_len = mystrlen((char *)radiosocketdata.socket_msg);
    8c0a:	80 91 bf 08 	lds	r24, 0x08BF
    8c0e:	90 91 c0 08 	lds	r25, 0x08C0
    8c12:	0e 94 c3 3b 	call	0x7786	; 0x7786 <mystrlen>
    8c16:	48 2f       	mov	r20, r24
    8c18:	80 93 be 08 	sts	0x08BE, r24
    8c1c:	c3 cf       	rjmp	.-122    	; 0x8ba4 <send_task+0x8>

00008c1e <ADCAccY>:
//-------------------------------------------------------------------------
void ADCAccY()
{
    int temp;

    temp = get_accy();
    8c1e:	0e 94 55 1c 	call	0x38aa	; 0x38aa <get_accy>
    current_thread->data.adcstate.adcreading = temp;
    8c22:	e0 91 60 05 	lds	r30, 0x0560
    8c26:	f0 91 61 05 	lds	r31, 0x0561
    8c2a:	96 8f       	std	Z+30, r25	; 0x1e
    8c2c:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8c2e:	08 95       	ret

00008c30 <ADCAccX>:
//-------------------------------------------------------------------------
void ADCAccX()
{
    int temp;

    temp = get_accx();
    8c30:	0e 94 4c 1c 	call	0x3898	; 0x3898 <get_accx>
    current_thread->data.adcstate.adcreading = temp;
    8c34:	e0 91 60 05 	lds	r30, 0x0560
    8c38:	f0 91 61 05 	lds	r31, 0x0561
    8c3c:	96 8f       	std	Z+30, r25	; 0x1e
    8c3e:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8c40:	08 95       	ret

00008c42 <ADCMagY>:
//-------------------------------------------------------------------------
void ADCMagY()
{
    int temp;

    temp = get_magy();
    8c42:	0e 94 43 1c 	call	0x3886	; 0x3886 <get_magy>
    current_thread->data.adcstate.adcreading = temp;
    8c46:	e0 91 60 05 	lds	r30, 0x0560
    8c4a:	f0 91 61 05 	lds	r31, 0x0561
    8c4e:	96 8f       	std	Z+30, r25	; 0x1e
    8c50:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8c52:	08 95       	ret

00008c54 <ADCMagX>:
//-------------------------------------------------------------------------
void ADCMagX()
{
    int temp;

    temp = get_magx();
    8c54:	0e 94 3a 1c 	call	0x3874	; 0x3874 <get_magx>
    current_thread->data.adcstate.adcreading = temp;
    8c58:	e0 91 60 05 	lds	r30, 0x0560
    8c5c:	f0 91 61 05 	lds	r31, 0x0561
    8c60:	96 8f       	std	Z+30, r25	; 0x1e
    8c62:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8c64:	08 95       	ret

00008c66 <ADCTemp>:
//-------------------------------------------------------------------------
void ADCTemp()
{
    int temp;

    temp = get_temp();
    8c66:	0e 94 2f 1c 	call	0x385e	; 0x385e <get_temp>
    current_thread->data.adcstate.adcreading = temp;
    8c6a:	e0 91 60 05 	lds	r30, 0x0560
    8c6e:	f0 91 61 05 	lds	r31, 0x0561
    8c72:	96 8f       	std	Z+30, r25	; 0x1e
    8c74:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8c76:	08 95       	ret

00008c78 <ADCLight>:

/** \brief the thread handle of the current thread */
void ADCLight()
{
    int temp;
    temp = get_light();
    8c78:	0e 94 24 1c 	call	0x3848	; 0x3848 <get_light>
    current_thread->data.adcstate.adcreading = temp;
    8c7c:	e0 91 60 05 	lds	r30, 0x0560
    8c80:	f0 91 61 05 	lds	r31, 0x0561
    8c84:	96 8f       	std	Z+30, r25	; 0x1e
    8c86:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8c88:	08 95       	ret

00008c8a <getGenericStorageNodeAddress>:
static genericByteStorageTaskNode storageTask;

void *getGenericStorageNodeAddress()
{
    return (void *)&storageTask;
}
    8c8a:	83 eb       	ldi	r24, 0xB3	; 179
    8c8c:	93 e0       	ldi	r25, 0x03	; 3
    8c8e:	08 95       	ret

00008c90 <genericWriteTask>:
}

//-------------------------------------------------------------------------
void genericWriteTask()
{
    genericwriteBytes(storageTask.addr, storageTask.nBytes, (void *)
    8c90:	60 91 b5 03 	lds	r22, 0x03B5
    8c94:	70 91 b6 03 	lds	r23, 0x03B6
    8c98:	40 91 b7 03 	lds	r20, 0x03B7
    8c9c:	50 91 b8 03 	lds	r21, 0x03B8
    8ca0:	80 91 b3 03 	lds	r24, 0x03B3
    8ca4:	90 91 b4 03 	lds	r25, 0x03B4
    8ca8:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <genericwriteBytes>
                      storageTask.buffer);
}
    8cac:	08 95       	ret

00008cae <genericReadTask>:
}

//-------------------------------------------------------------------------
void genericReadTask()
{
    genericreadBytes(storageTask.addr, storageTask.nBytes, (void *)
    8cae:	60 91 b5 03 	lds	r22, 0x03B5
    8cb2:	70 91 b6 03 	lds	r23, 0x03B6
    8cb6:	40 91 b7 03 	lds	r20, 0x03B7
    8cba:	50 91 b8 03 	lds	r21, 0x03B8
    8cbe:	80 91 b3 03 	lds	r24, 0x03B3
    8cc2:	90 91 b4 03 	lds	r25, 0x03B4
    8cc6:	0e 94 66 1d 	call	0x3acc	; 0x3acc <genericreadBytes>
                     storageTask.buffer);
}
    8cca:	08 95       	ret

00008ccc <getFilePathAddress>:
//-------------------------------------------------------------------------
//Get the file path address
void *getFilePathAddress()
{
    return (void *)filepathaddr;
}
    8ccc:	82 e4       	ldi	r24, 0x42	; 66
    8cce:	99 e0       	ldi	r25, 0x09	; 9
    8cd0:	08 95       	ret

00008cd2 <getFileModeAddress>:
//-------------------------------------------------------------------------
//Get the file mode address
void *getFileModeAddress()
{
    return (void *)filemodeaddr;
}
    8cd2:	89 e3       	ldi	r24, 0x39	; 57
    8cd4:	99 e0       	ldi	r25, 0x09	; 9
    8cd6:	08 95       	ret

00008cd8 <seekFileTask>:
}

//-------------------------------------------------------------------------
void seekFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.fileseekstate.fileptr;
    8cd8:	e0 91 60 05 	lds	r30, 0x0560
    8cdc:	f0 91 61 05 	lds	r31, 0x0561
    8ce0:	a1 a1       	ldd	r26, Z+33	; 0x21
    8ce2:	b2 a1       	ldd	r27, Z+34	; 0x22
    8ce4:	a0 93 37 09 	sts	0x0937, r26
    8ce8:	b0 93 38 09 	sts	0x0938, r27
    offset = current_thread->filedata.fileseekstate.offset;
    8cec:	43 a1       	ldd	r20, Z+35	; 0x23
    8cee:	54 a1       	ldd	r21, Z+36	; 0x24
    8cf0:	50 93 58 09 	sts	0x0958, r21
    8cf4:	40 93 57 09 	sts	0x0957, r20
    position = current_thread->filedata.fileseekstate.position;
    8cf8:	25 a1       	ldd	r18, Z+37	; 0x25
    8cfa:	36 a1       	ldd	r19, Z+38	; 0x26
    8cfc:	30 93 36 09 	sts	0x0936, r19
    8d00:	20 93 35 09 	sts	0x0935, r18
    fseek2(filehandle, (int32_t) offset, position);
    8d04:	66 27       	eor	r22, r22
    8d06:	57 fd       	sbrc	r21, 7
    8d08:	60 95       	com	r22
    8d0a:	76 2f       	mov	r23, r22
    8d0c:	cd 01       	movw	r24, r26
    8d0e:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <fseek2>
    return;
}
    8d12:	08 95       	ret

00008d14 <writeFileTask>:
}

//-------------------------------------------------------------------------
void writeFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
    8d14:	e0 91 60 05 	lds	r30, 0x0560
    8d18:	f0 91 61 05 	lds	r31, 0x0561
    8d1c:	81 a1       	ldd	r24, Z+33	; 0x21
    8d1e:	92 a1       	ldd	r25, Z+34	; 0x22
    8d20:	90 93 38 09 	sts	0x0938, r25
    8d24:	80 93 37 09 	sts	0x0937, r24
    databuffer = current_thread->filedata.filestate.bufferptr;
    8d28:	83 a1       	ldd	r24, Z+35	; 0x23
    8d2a:	94 a1       	ldd	r25, Z+36	; 0x24
    8d2c:	90 93 5a 09 	sts	0x095A, r25
    8d30:	80 93 59 09 	sts	0x0959, r24
    nBytes = current_thread->filedata.filestate.bytes;
    8d34:	85 a1       	ldd	r24, Z+37	; 0x25
    8d36:	96 a1       	ldd	r25, Z+38	; 0x26
    8d38:	90 93 3f 09 	sts	0x093F, r25
    8d3c:	80 93 3e 09 	sts	0x093E, r24
    postTask(writefile_task, 5);
    8d40:	80 ee       	ldi	r24, 0xE0	; 224
    8d42:	96 e4       	ldi	r25, 0x46	; 70
    8d44:	65 e0       	ldi	r22, 0x05	; 5
    8d46:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
}
    8d4a:	08 95       	ret

00008d4c <readFileTask>:
}

//-------------------------------------------------------------------------
void readFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
    8d4c:	e0 91 60 05 	lds	r30, 0x0560
    8d50:	f0 91 61 05 	lds	r31, 0x0561
    8d54:	81 a1       	ldd	r24, Z+33	; 0x21
    8d56:	92 a1       	ldd	r25, Z+34	; 0x22
    8d58:	90 93 38 09 	sts	0x0938, r25
    8d5c:	80 93 37 09 	sts	0x0937, r24
    databuffer = current_thread->filedata.filestate.bufferptr;
    8d60:	83 a1       	ldd	r24, Z+35	; 0x23
    8d62:	94 a1       	ldd	r25, Z+36	; 0x24
    8d64:	90 93 5a 09 	sts	0x095A, r25
    8d68:	80 93 59 09 	sts	0x0959, r24
    nBytes = current_thread->filedata.filestate.bytes;
    8d6c:	85 a1       	ldd	r24, Z+37	; 0x25
    8d6e:	96 a1       	ldd	r25, Z+38	; 0x26
    8d70:	90 93 3f 09 	sts	0x093F, r25
    8d74:	80 93 3e 09 	sts	0x093E, r24
    postTask(readfile_task, 5);
    8d78:	83 ef       	ldi	r24, 0xF3	; 243
    8d7a:	96 e4       	ldi	r25, 0x46	; 70
    8d7c:	65 e0       	ldi	r22, 0x05	; 5
    8d7e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
}
    8d82:	08 95       	ret

00008d84 <closeFileTask>:
}

//-------------------------------------------------------------------------
void closeFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
    8d84:	e0 91 60 05 	lds	r30, 0x0560
    8d88:	f0 91 61 05 	lds	r31, 0x0561
    8d8c:	81 a1       	ldd	r24, Z+33	; 0x21
    8d8e:	92 a1       	ldd	r25, Z+34	; 0x22
    8d90:	90 93 38 09 	sts	0x0938, r25
    8d94:	80 93 37 09 	sts	0x0937, r24
    postTask(closefile_task, 5);
    8d98:	86 e0       	ldi	r24, 0x06	; 6
    8d9a:	97 e4       	ldi	r25, 0x47	; 71
    8d9c:	65 e0       	ldi	r22, 0x05	; 5
    8d9e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
}
    8da2:	08 95       	ret

00008da4 <openFileTask>:
}

//-------------------------------------------------------------------------
void openFileTask()
{
    openthread = current_thread;
    8da4:	80 91 60 05 	lds	r24, 0x0560
    8da8:	90 91 61 05 	lds	r25, 0x0561
    8dac:	90 93 41 09 	sts	0x0941, r25
    8db0:	80 93 40 09 	sts	0x0940, r24
    postTask(openfile_task, 5);
    8db4:	81 e1       	ldi	r24, 0x11	; 17
    8db6:	97 e4       	ldi	r25, 0x47	; 71
    8db8:	65 e0       	ldi	r22, 0x05	; 5
    8dba:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    return;
}
    8dbe:	08 95       	ret

00008dc0 <writefile_task>:
}

//-------------------------------------------------------------------------
void writefile_task()
{
    fwrite2(filehandle, databuffer, nBytes);
    8dc0:	60 91 59 09 	lds	r22, 0x0959
    8dc4:	70 91 5a 09 	lds	r23, 0x095A
    8dc8:	40 91 3e 09 	lds	r20, 0x093E
    8dcc:	50 91 3f 09 	lds	r21, 0x093F
    8dd0:	80 91 37 09 	lds	r24, 0x0937
    8dd4:	90 91 38 09 	lds	r25, 0x0938
    8dd8:	0e 94 8e 22 	call	0x451c	; 0x451c <fwrite2>
	barrier_unblock(7, 4);
    8ddc:	87 e0       	ldi	r24, 0x07	; 7
    8dde:	64 e0       	ldi	r22, 0x04	; 4
    8de0:	0e 94 b8 1b 	call	0x3770	; 0x3770 <barrier_unblock>
     
}
    8de4:	08 95       	ret

00008de6 <readfile_task>:
}

//-------------------------------------------------------------------------
void readfile_task()
{
    fread2(filehandle, databuffer, nBytes);
    8de6:	60 91 59 09 	lds	r22, 0x0959
    8dea:	70 91 5a 09 	lds	r23, 0x095A
    8dee:	40 91 3e 09 	lds	r20, 0x093E
    8df2:	50 91 3f 09 	lds	r21, 0x093F
    8df6:	80 91 37 09 	lds	r24, 0x0937
    8dfa:	90 91 38 09 	lds	r25, 0x0938
    8dfe:	0e 94 cd 23 	call	0x479a	; 0x479a <fread2>
	barrier_unblock(7, 3);
    8e02:	87 e0       	ldi	r24, 0x07	; 7
    8e04:	63 e0       	ldi	r22, 0x03	; 3
    8e06:	0e 94 b8 1b 	call	0x3770	; 0x3770 <barrier_unblock>
}
    8e0a:	08 95       	ret

00008e0c <closefile_task>:
}

//-------------------------------------------------------------------------
void closefile_task()
{
    fclose2(filehandle);
    8e0c:	80 91 37 09 	lds	r24, 0x0937
    8e10:	90 91 38 09 	lds	r25, 0x0938
    8e14:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <fclose2>
	barrier_unblock(7, 2);
    8e18:	87 e0       	ldi	r24, 0x07	; 7
    8e1a:	62 e0       	ldi	r22, 0x02	; 2
    8e1c:	0e 94 b8 1b 	call	0x3770	; 0x3770 <barrier_unblock>
}
    8e20:	08 95       	ret

00008e22 <openfile_task>:
}

//-------------------------------------------------------------------------
void openfile_task()
{
    MYFILE *temp = fopen2(filepathaddr, filemodeaddr);
    8e22:	82 e4       	ldi	r24, 0x42	; 66
    8e24:	99 e0       	ldi	r25, 0x09	; 9
    8e26:	69 e3       	ldi	r22, 0x39	; 57
    8e28:	79 e0       	ldi	r23, 0x09	; 9
    8e2a:	0e 94 42 25 	call	0x4a84	; 0x4a84 <fopen2>

    openthread->filedata.filestate.fileptr = (uint8_t *) temp;
    8e2e:	e0 91 40 09 	lds	r30, 0x0940
    8e32:	f0 91 41 09 	lds	r31, 0x0941
    8e36:	92 a3       	std	Z+34, r25	; 0x22
    8e38:	81 a3       	std	Z+33, r24	; 0x21
    
	 barrier_unblock(7, 1);
    8e3a:	87 e0       	ldi	r24, 0x07	; 7
    8e3c:	61 e0       	ldi	r22, 0x01	; 1
    8e3e:	0e 94 b8 1b 	call	0x3770	; 0x3770 <barrier_unblock>

     return;

}
    8e42:	08 95       	ret

00008e44 <getRadioSendingBufferAddr>:
void *getRadioSendingBufferAddr()
{
    return (void *)&radiosocketdata;
    //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
    // asm volatile("ret"::); 
}
    8e44:	8a eb       	ldi	r24, 0xBA	; 186
    8e46:	98 e0       	ldi	r25, 0x08	; 8
    8e48:	08 95       	ret

00008e4a <getRadioReceivingBufferAddr>:
void *getRadioReceivingBufferAddr()
{
    return (void *)&radio_buf;
    //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
    // asm volatile("ret"::); 
}
    8e4a:	8b e5       	ldi	r24, 0x5B	; 91
    8e4c:	99 e0       	ldi	r25, 0x09	; 9
    8e4e:	08 95       	ret

00008e50 <registerReceiverHandle_syscall>:
 
 
 
//system call interface for registering an event 
void registerReceiverHandle_syscall()
{
    8e50:	ef 92       	push	r14
    8e52:	ff 92       	push	r15
    8e54:	0f 93       	push	r16
    8e56:	1f 93       	push	r17
    registerEvent(radio_buf.port, radio_buf.maxLength, radio_buf.dataReady,
    8e58:	40 91 5e 09 	lds	r20, 0x095E
    8e5c:	50 91 5f 09 	lds	r21, 0x095F
    8e60:	20 91 60 09 	lds	r18, 0x0960
    8e64:	30 91 61 09 	lds	r19, 0x0961
    8e68:	00 91 62 09 	lds	r16, 0x0962
    8e6c:	10 91 63 09 	lds	r17, 0x0963
    8e70:	e0 90 65 09 	lds	r14, 0x0965
    8e74:	f0 90 66 09 	lds	r15, 0x0966
    8e78:	80 91 5b 09 	lds	r24, 0x095B
    8e7c:	90 91 5c 09 	lds	r25, 0x095C
    8e80:	60 91 5d 09 	lds	r22, 0x095D
    8e84:	0e 94 b6 09 	call	0x136c	; 0x136c <registerEvent>
                  radio_buf.data, radio_buf.packetinfo,
                  radio_buf.handlefunc);
}
    8e88:	1f 91       	pop	r17
    8e8a:	0f 91       	pop	r16
    8e8c:	ff 90       	pop	r15
    8e8e:	ef 90       	pop	r14
    8e90:	08 95       	ret

00008e92 <SocketRadioSend>:
void SocketRadioSend()
{
   	//debugrf230
    //Leds_redToggle(); 

    postTask(send_task, 9);
    8e92:	8e ec       	ldi	r24, 0xCE	; 206
    8e94:	95 e4       	ldi	r25, 0x45	; 69
    8e96:	69 e0       	ldi	r22, 0x09	; 9
    8e98:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
    //After it is woken up, return
    return;
}
    8e9c:	08 95       	ret

00008e9e <setRadioPowerTask>:
    return;
}

//-------------------------------------------------------------------------
void setRadioPowerTask()
{
    8e9e:	df 93       	push	r29
    8ea0:	cf 93       	push	r28
    8ea2:	00 d0       	rcall	.+0      	; 0x8ea4 <setRadioPowerTask+0x6>
    8ea4:	cd b7       	in	r28, 0x3d	; 61
    8ea6:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t powerlevel;
    asm volatile ("mov  %A0, r20" "\n\t" "mov  %B0, r21"
    8ea8:	84 2f       	mov	r24, r20
    8eaa:	95 2f       	mov	r25, r21
    8eac:	9a 83       	std	Y+2, r25	; 0x02
    8eae:	89 83       	std	Y+1, r24	; 0x01
                  "\n\t":"=r" (powerlevel):);
    cc2420controlm_CC2420Control_TunePower(powerlevel);
    8eb0:	89 81       	ldd	r24, Y+1	; 0x01
    8eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    8eb4:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <cc2420controlm_CC2420Control_TunePower>
    return;
}
    8eb8:	0f 90       	pop	r0
    8eba:	0f 90       	pop	r0
    8ebc:	cf 91       	pop	r28
    8ebe:	df 91       	pop	r29
    8ec0:	08 95       	ret

00008ec2 <setRadioChannelTask>:
    return;
}

//-------------------------------------------------------------------------
void setRadioChannelTask()
{
    8ec2:	df 93       	push	r29
    8ec4:	cf 93       	push	r28
    8ec6:	00 d0       	rcall	.+0      	; 0x8ec8 <setRadioChannelTask+0x6>
    8ec8:	cd b7       	in	r28, 0x3d	; 61
    8eca:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t freq;
    asm volatile ("mov  %A0, r20" "\n\t" "mov  %B0, r21" "\n\t":"=r" (freq):);
    8ecc:	84 2f       	mov	r24, r20
    8ece:	95 2f       	mov	r25, r21
    8ed0:	9a 83       	std	Y+2, r25	; 0x02
    8ed2:	89 83       	std	Y+1, r24	; 0x01

    cc2420controlm_CC2420Control_TuneChannel(freq);
    8ed4:	89 81       	ldd	r24, Y+1	; 0x01
    8ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    8ed8:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <cc2420controlm_CC2420Control_TuneChannel>
    return;
}
    8edc:	0f 90       	pop	r0
    8ede:	0f 90       	pop	r0
    8ee0:	cf 91       	pop	r28
    8ee2:	df 91       	pop	r29
    8ee4:	08 95       	ret

00008ee6 <setRadioFrequencyTask>:
 
radio_receiving_buffer radio_buf;

//-------------------------------------------------------------------------
void setRadioFrequencyTask()
{
    8ee6:	df 93       	push	r29
    8ee8:	cf 93       	push	r28
    8eea:	00 d0       	rcall	.+0      	; 0x8eec <setRadioFrequencyTask+0x6>
    8eec:	cd b7       	in	r28, 0x3d	; 61
    8eee:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t freq;
    asm volatile ("mov  %A0, r20" "\n\t" "mov  %B0, r21" "\n\t":"=r" (freq):);
    8ef0:	84 2f       	mov	r24, r20
    8ef2:	95 2f       	mov	r25, r21
    8ef4:	9a 83       	std	Y+2, r25	; 0x02
    8ef6:	89 83       	std	Y+1, r24	; 0x01

    cc2420controlm_CC2420Control_TuneManual(freq);
    8ef8:	89 81       	ldd	r24, Y+1	; 0x01
    8efa:	9a 81       	ldd	r25, Y+2	; 0x02
    8efc:	0e 94 8d 0b 	call	0x171a	; 0x171a <cc2420controlm_CC2420Control_TuneManual>
    return;
}
    8f00:	0f 90       	pop	r0
    8f02:	0f 90       	pop	r0
    8f04:	cf 91       	pop	r28
    8f06:	df 91       	pop	r29
    8f08:	08 95       	ret

00008f0a <getNodeIdTask>:
//Node operations including reading and setting node ID and name, random number generator 
//-----------------------------------------------------------------------------

//-------------------------------------------------------------------------
void getNodeIdTask()
{
    8f0a:	df 93       	push	r29
    8f0c:	cf 93       	push	r28
    8f0e:	00 d0       	rcall	.+0      	; 0x8f10 <getNodeIdTask+0x6>
    8f10:	cd b7       	in	r28, 0x3d	; 61
    8f12:	de b7       	in	r29, 0x3e	; 62
    uint16_t nodeid;

    nodeid = node_readnodeid();
    8f14:	0e 94 4b 02 	call	0x496	; 0x496 <node_readnodeid>
    8f18:	9a 83       	std	Y+2, r25	; 0x02
    8f1a:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (nodeid));
    8f1c:	89 81       	ldd	r24, Y+1	; 0x01
    8f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    8f20:	48 2f       	mov	r20, r24
    8f22:	59 2f       	mov	r21, r25
}
    8f24:	0f 90       	pop	r0
    8f26:	0f 90       	pop	r0
    8f28:	cf 91       	pop	r28
    8f2a:	df 91       	pop	r29
    8f2c:	08 95       	ret

00008f2e <getNodeIdTask_Logger>:

//-------------------------------------------------------------------------

void getNodeIdTask_Logger()
{
    8f2e:	df 93       	push	r29
    8f30:	cf 93       	push	r28
    8f32:	00 d0       	rcall	.+0      	; 0x8f34 <getNodeIdTask_Logger+0x6>
    8f34:	cd b7       	in	r28, 0x3d	; 61
    8f36:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8f38:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    8f3c:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    8f3e:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    8f42:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    8f44:	89 81       	ldd	r24, Y+1	; 0x01
    8f46:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETNODEID, currentindex);
    8f4a:	85 e6       	ldi	r24, 0x65	; 101
    8f4c:	90 e0       	ldi	r25, 0x00	; 0
    8f4e:	6a 81       	ldd	r22, Y+2	; 0x02
    8f50:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    getNodeIdTask();
    8f54:	0e 94 85 47 	call	0x8f0a	; 0x8f0a <getNodeIdTask>
}
    8f58:	0f 90       	pop	r0
    8f5a:	0f 90       	pop	r0
    8f5c:	cf 91       	pop	r28
    8f5e:	df 91       	pop	r29
    8f60:	08 95       	ret

00008f62 <setNodeIdTask>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void setNodeIdTask()
{
    8f62:	df 93       	push	r29
    8f64:	cf 93       	push	r28
    8f66:	00 d0       	rcall	.+0      	; 0x8f68 <setNodeIdTask+0x6>
    8f68:	cd b7       	in	r28, 0x3d	; 61
    8f6a:	de b7       	in	r29, 0x3e	; 62
    uint16_t nodeid;
    asm volatile ("mov %A0, r20" "\n\t" "mov %B0, r21" "\n\t":"=r" (nodeid):);
    8f6c:	84 2f       	mov	r24, r20
    8f6e:	95 2f       	mov	r25, r21
    8f70:	9a 83       	std	Y+2, r25	; 0x02
    8f72:	89 83       	std	Y+1, r24	; 0x01

    node_writenodeid(nodeid);
    8f74:	89 81       	ldd	r24, Y+1	; 0x01
    8f76:	9a 81       	ldd	r25, Y+2	; 0x02
    8f78:	0e 94 50 02 	call	0x4a0	; 0x4a0 <node_writenodeid>
}
    8f7c:	0f 90       	pop	r0
    8f7e:	0f 90       	pop	r0
    8f80:	cf 91       	pop	r28
    8f82:	df 91       	pop	r29
    8f84:	08 95       	ret

00008f86 <setNodeIdTask_Logger>:

//-------------------------------------------------------------------------
void setNodeIdTask_Logger()
{
    8f86:	df 93       	push	r29
    8f88:	cf 93       	push	r28
    8f8a:	00 d0       	rcall	.+0      	; 0x8f8c <setNodeIdTask_Logger+0x6>
    8f8c:	cd b7       	in	r28, 0x3d	; 61
    8f8e:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8f90:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    8f94:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    8f96:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    8f9a:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    8f9c:	89 81       	ldd	r24, Y+1	; 0x01
    8f9e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETNODEID, currentindex);
    8fa2:	86 e6       	ldi	r24, 0x66	; 102
    8fa4:	90 e0       	ldi	r25, 0x00	; 0
    8fa6:	6a 81       	ldd	r22, Y+2	; 0x02
    8fa8:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    setNodeIdTask();
    8fac:	0e 94 b1 47 	call	0x8f62	; 0x8f62 <setNodeIdTask>
}
    8fb0:	0f 90       	pop	r0
    8fb2:	0f 90       	pop	r0
    8fb4:	cf 91       	pop	r28
    8fb6:	df 91       	pop	r29
    8fb8:	08 95       	ret

00008fba <getRandomTask>:



//-------------------------------------------------------------------------
void getRandomTask()
{
    8fba:	df 93       	push	r29
    8fbc:	cf 93       	push	r28
    8fbe:	00 d0       	rcall	.+0      	; 0x8fc0 <getRandomTask+0x6>
    8fc0:	cd b7       	in	r28, 0x3d	; 61
    8fc2:	de b7       	in	r29, 0x3e	; 62
    uint16_t num;

    num = getRandomNumber();
    8fc4:	0e 94 57 3c 	call	0x78ae	; 0x78ae <getRandomNumber>
    8fc8:	9a 83       	std	Y+2, r25	; 0x02
    8fca:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (num));
    8fcc:	89 81       	ldd	r24, Y+1	; 0x01
    8fce:	9a 81       	ldd	r25, Y+2	; 0x02
    8fd0:	48 2f       	mov	r20, r24
    8fd2:	59 2f       	mov	r21, r25
}
    8fd4:	0f 90       	pop	r0
    8fd6:	0f 90       	pop	r0
    8fd8:	cf 91       	pop	r28
    8fda:	df 91       	pop	r29
    8fdc:	08 95       	ret

00008fde <getRandomTask_Logger>:

//-------------------------------------------------------------------------

void getRandomTask_Logger()
{
    8fde:	df 93       	push	r29
    8fe0:	cf 93       	push	r28
    8fe2:	00 d0       	rcall	.+0      	; 0x8fe4 <getRandomTask_Logger+0x6>
    8fe4:	cd b7       	in	r28, 0x3d	; 61
    8fe6:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8fe8:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    8fec:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    8fee:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    8ff2:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    8ff4:	89 81       	ldd	r24, Y+1	; 0x01
    8ff6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETRANDOMNUMBER, currentindex);
    8ffa:	87 e6       	ldi	r24, 0x67	; 103
    8ffc:	90 e0       	ldi	r25, 0x00	; 0
    8ffe:	6a 81       	ldd	r22, Y+2	; 0x02
    9000:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    getRandomTask();
    9004:	0e 94 dd 47 	call	0x8fba	; 0x8fba <getRandomTask>
}
    9008:	0f 90       	pop	r0
    900a:	0f 90       	pop	r0
    900c:	cf 91       	pop	r28
    900e:	df 91       	pop	r29
    9010:	08 95       	ret

00009012 <getCurrentThreadAddress_avr>:
///////////////////////////////////////////////////////////////////////////////
//Get the address of the currentthread pointer. Its address, not content. 

//-------------------------------------------------------------------------
void getCurrentThreadAddress_avr()
{
    9012:	df 93       	push	r29
    9014:	cf 93       	push	r28
    9016:	00 d0       	rcall	.+0      	; 0x9018 <getCurrentThreadAddress_avr+0x6>
    9018:	cd b7       	in	r28, 0x3d	; 61
    901a:	de b7       	in	r29, 0x3e	; 62
    thread **returnthreadaddr;

    returnthreadaddr = getCurrentThreadAddress();
    901c:	0e 94 1c 4d 	call	0x9a38	; 0x9a38 <getCurrentThreadAddress>
    9020:	9a 83       	std	Y+2, r25	; 0x02
    9022:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    9024:	89 81       	ldd	r24, Y+1	; 0x01
    9026:	9a 81       	ldd	r25, Y+2	; 0x02
    9028:	48 2f       	mov	r20, r24
    902a:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (returnthreadaddr));
}
    902c:	0f 90       	pop	r0
    902e:	0f 90       	pop	r0
    9030:	cf 91       	pop	r28
    9032:	df 91       	pop	r29
    9034:	08 95       	ret

00009036 <getCurrentThreadAddress_Logger>:

//-------------------------------------------------------------------------
void getCurrentThreadAddress_Logger()
{
    9036:	df 93       	push	r29
    9038:	cf 93       	push	r28
    903a:	00 d0       	rcall	.+0      	; 0x903c <getCurrentThreadAddress_Logger+0x6>
    903c:	cd b7       	in	r28, 0x3d	; 61
    903e:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9040:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9044:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9046:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    904a:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    904c:	89 81       	ldd	r24, Y+1	; 0x01
    904e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTTHREADADDRESS, currentindex);
    9052:	89 ec       	ldi	r24, 0xC9	; 201
    9054:	90 e0       	ldi	r25, 0x00	; 0
    9056:	6a 81       	ldd	r22, Y+2	; 0x02
    9058:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    getCurrentThreadAddress_avr();
    905c:	0e 94 09 48 	call	0x9012	; 0x9012 <getCurrentThreadAddress_avr>
}
    9060:	0f 90       	pop	r0
    9062:	0f 90       	pop	r0
    9064:	cf 91       	pop	r28
    9066:	df 91       	pop	r29
    9068:	08 95       	ret

0000906a <getThreadIndexAddress_avr>:
///////////////////////////////////////////////////////////////////////////////


//-------------------------------------------------------------------------
void getThreadIndexAddress_avr()
{
    906a:	df 93       	push	r29
    906c:	cf 93       	push	r28
    906e:	00 d0       	rcall	.+0      	; 0x9070 <getThreadIndexAddress_avr+0x6>
    9070:	cd b7       	in	r28, 0x3d	; 61
    9072:	de b7       	in	r29, 0x3e	; 62
    int index;

    index = getThreadIndexAddress();
    9074:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9078:	9a 83       	std	Y+2, r25	; 0x02
    907a:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (index));
    907c:	89 81       	ldd	r24, Y+1	; 0x01
    907e:	9a 81       	ldd	r25, Y+2	; 0x02
    9080:	48 2f       	mov	r20, r24
    9082:	59 2f       	mov	r21, r25
}
    9084:	0f 90       	pop	r0
    9086:	0f 90       	pop	r0
    9088:	cf 91       	pop	r28
    908a:	df 91       	pop	r29
    908c:	08 95       	ret

0000908e <getThreadIndexAddress_Logger>:

//-------------------------------------------------------------------------
void getThreadIndexAddress_Logger()
{
    908e:	df 93       	push	r29
    9090:	cf 93       	push	r28
    9092:	00 d0       	rcall	.+0      	; 0x9094 <getThreadIndexAddress_Logger+0x6>
    9094:	cd b7       	in	r28, 0x3d	; 61
    9096:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9098:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    909c:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    909e:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    90a2:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    90a4:	89 81       	ldd	r24, Y+1	; 0x01
    90a6:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTTHREADINDEX, currentindex);
    90aa:	8a ec       	ldi	r24, 0xCA	; 202
    90ac:	90 e0       	ldi	r25, 0x00	; 0
    90ae:	6a 81       	ldd	r22, Y+2	; 0x02
    90b0:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    getThreadIndexAddress_avr();
    90b4:	0e 94 35 48 	call	0x906a	; 0x906a <getThreadIndexAddress_avr>
}
    90b8:	0f 90       	pop	r0
    90ba:	0f 90       	pop	r0
    90bc:	cf 91       	pop	r28
    90be:	df 91       	pop	r29
    90c0:	08 95       	ret

000090c2 <getThreadTableStart_avr>:



//-------------------------------------------------------------------------
void getThreadTableStart_avr()
{
    90c2:	df 93       	push	r29
    90c4:	cf 93       	push	r28
    90c6:	00 d0       	rcall	.+0      	; 0x90c8 <getThreadTableStart_avr+0x6>
    90c8:	cd b7       	in	r28, 0x3d	; 61
    90ca:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getThreadTableStart();
    90cc:	0e 94 1f 4d 	call	0x9a3e	; 0x9a3e <getThreadTableStart>
    90d0:	9a 83       	std	Y+2, r25	; 0x02
    90d2:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    90d4:	89 81       	ldd	r24, Y+1	; 0x01
    90d6:	9a 81       	ldd	r25, Y+2	; 0x02
    90d8:	48 2f       	mov	r20, r24
    90da:	59 2f       	mov	r21, r25
}
    90dc:	0f 90       	pop	r0
    90de:	0f 90       	pop	r0
    90e0:	cf 91       	pop	r28
    90e2:	df 91       	pop	r29
    90e4:	08 95       	ret

000090e6 <getThreadTableStart_Logger>:


 
//-------------------------------------------------------------------------
void getThreadTableStart_Logger()
{
    90e6:	df 93       	push	r29
    90e8:	cf 93       	push	r28
    90ea:	00 d0       	rcall	.+0      	; 0x90ec <getThreadTableStart_Logger+0x6>
    90ec:	cd b7       	in	r28, 0x3d	; 61
    90ee:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    90f0:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    90f4:	89 83       	std	Y+1, r24	; 0x01
    currentindex = getThreadIndexAddress();
    90f6:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    90fa:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    90fc:	89 81       	ldd	r24, Y+1	; 0x01
    90fe:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETTHREADTABLESTART, currentindex);
    9102:	8f ec       	ldi	r24, 0xCF	; 207
    9104:	90 e0       	ldi	r25, 0x00	; 0
    9106:	6a 81       	ldd	r22, Y+2	; 0x02
    9108:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    getThreadTableStart_avr();
    910c:	0e 94 61 48 	call	0x90c2	; 0x90c2 <getThreadTableStart_avr>
}
    9110:	0f 90       	pop	r0
    9112:	0f 90       	pop	r0
    9114:	cf 91       	pop	r28
    9116:	df 91       	pop	r29
    9118:	08 95       	ret

0000911a <thread_yield_logger>:
}

//////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void thread_yield_logger()
{
    911a:	df 93       	push	r29
    911c:	cf 93       	push	r28
    911e:	00 d0       	rcall	.+0      	; 0x9120 <thread_yield_logger+0x6>
    9120:	cd b7       	in	r28, 0x3d	; 61
    9122:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9124:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9128:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    912a:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    912e:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9130:	89 81       	ldd	r24, Y+1	; 0x01
    9132:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_YIELDFUNCTION, currentindex);
    9136:	8c ec       	ldi	r24, 0xCC	; 204
    9138:	90 e0       	ldi	r25, 0x00	; 0
    913a:	6a 81       	ldd	r22, Y+2	; 0x02
    913c:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    thread_yield();
    9140:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <thread_yield>
}
    9144:	0f 90       	pop	r0
    9146:	0f 90       	pop	r0
    9148:	cf 91       	pop	r28
    914a:	df 91       	pop	r29
    914c:	08 95       	ret

0000914e <postNewThreadTask_Logger>:
}


//-------------------------------------------------------------------------
void postNewThreadTask_Logger()
{
    914e:	df 93       	push	r29
    9150:	cf 93       	push	r28
    9152:	00 d0       	rcall	.+0      	; 0x9154 <postNewThreadTask_Logger+0x6>
    9154:	cd b7       	in	r28, 0x3d	; 61
    9156:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9158:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    915c:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    915e:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9162:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9164:	89 81       	ldd	r24, Y+1	; 0x01
    9166:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_POSTTHREADTASK, currentindex);
    916a:	8d ec       	ldi	r24, 0xCD	; 205
    916c:	90 e0       	ldi	r25, 0x00	; 0
    916e:	6a 81       	ldd	r22, Y+2	; 0x02
    9170:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    postNewThreadTask();
    9174:	0e 94 05 18 	call	0x300a	; 0x300a <postNewThreadTask>
}
    9178:	0f 90       	pop	r0
    917a:	0f 90       	pop	r0
    917c:	cf 91       	pop	r28
    917e:	df 91       	pop	r29
    9180:	08 95       	ret

00009182 <break_point_function_Logger>:




void break_point_function_Logger()
{
    9182:	df 93       	push	r29
    9184:	cf 93       	push	r28
    9186:	00 d0       	rcall	.+0      	; 0x9188 <break_point_function_Logger+0x6>
    9188:	cd b7       	in	r28, 0x3d	; 61
    918a:	de b7       	in	r29, 0x3e	; 62
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    918c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9190:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    9192:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9196:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    9198:	89 81       	ldd	r24, Y+1	; 0x01
    919a:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
 addTrace(TRACE_SYSCALL_BREAKPOINTYIELD, currentindex);
    919e:	80 ed       	ldi	r24, 0xD0	; 208
    91a0:	90 e0       	ldi	r25, 0x00	; 0
    91a2:	6a 81       	ldd	r22, Y+2	; 0x02
    91a4:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
  break_point_function(); 
    91a8:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <break_point_function>
}
    91ac:	0f 90       	pop	r0
    91ae:	0f 90       	pop	r0
    91b0:	cf 91       	pop	r28
    91b2:	df 91       	pop	r29
    91b4:	08 95       	ret

000091b6 <postNewTask_avr>:
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------
void postNewTask_avr()
{
    91b6:	df 93       	push	r29
    91b8:	cf 93       	push	r28
    91ba:	00 d0       	rcall	.+0      	; 0x91bc <postNewTask_avr+0x6>
    91bc:	00 d0       	rcall	.+0      	; 0x91be <postNewTask_avr+0x8>
    91be:	cd b7       	in	r28, 0x3d	; 61
    91c0:	de b7       	in	r29, 0x3e	; 62
    void (*fp) (void);
    uint16_t priority;
    asm volatile ("mov %A0, r20" "\n\t" "mov %B0, r21" "\n\t":"=r" (fp):);
    91c2:	84 2f       	mov	r24, r20
    91c4:	95 2f       	mov	r25, r21
    91c6:	9c 83       	std	Y+4, r25	; 0x04
    91c8:	8b 83       	std	Y+3, r24	; 0x03
    asm volatile ("mov %A0, r22" "\n\t" "mov %B0, r23"
    91ca:	86 2f       	mov	r24, r22
    91cc:	97 2f       	mov	r25, r23
    91ce:	9a 83       	std	Y+2, r25	; 0x02
    91d0:	89 83       	std	Y+1, r24	; 0x01
                  "\n\t":"=r" (priority):);
    postTask(fp, priority);
    91d2:	29 81       	ldd	r18, Y+1	; 0x01
    91d4:	8b 81       	ldd	r24, Y+3	; 0x03
    91d6:	9c 81       	ldd	r25, Y+4	; 0x04
    91d8:	62 2f       	mov	r22, r18
    91da:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <postTask>
}
    91de:	0f 90       	pop	r0
    91e0:	0f 90       	pop	r0
    91e2:	0f 90       	pop	r0
    91e4:	0f 90       	pop	r0
    91e6:	cf 91       	pop	r28
    91e8:	df 91       	pop	r29
    91ea:	08 95       	ret

000091ec <postNewTask_Logger>:

//-------------------------------------------------------------------------
void postNewTask_Logger()
{
    91ec:	df 93       	push	r29
    91ee:	cf 93       	push	r28
    91f0:	00 d0       	rcall	.+0      	; 0x91f2 <postNewTask_Logger+0x6>
    91f2:	cd b7       	in	r28, 0x3d	; 61
    91f4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    91f6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    91fa:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    91fc:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9200:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9202:	89 81       	ldd	r24, Y+1	; 0x01
    9204:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_POSTTASKSYSCALL, currentindex);
    9208:	8d e2       	ldi	r24, 0x2D	; 45
    920a:	91 e0       	ldi	r25, 0x01	; 1
    920c:	6a 81       	ldd	r22, Y+2	; 0x02
    920e:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    postNewTask_avr();
    9212:	0e 94 db 48 	call	0x91b6	; 0x91b6 <postNewTask_avr>
}
    9216:	0f 90       	pop	r0
    9218:	0f 90       	pop	r0
    921a:	cf 91       	pop	r28
    921c:	df 91       	pop	r29
    921e:	08 95       	ret

00009220 <getStackPtrTask>:



//-------------------------------------------------------------------------
void getStackPtrTask()
{
    9220:	df 93       	push	r29
    9222:	cf 93       	push	r28
    9224:	00 d0       	rcall	.+0      	; 0x9226 <getStackPtrTask+0x6>
    9226:	cd b7       	in	r28, 0x3d	; 61
    9228:	de b7       	in	r29, 0x3e	; 62
    void **returnthreadaddr;

    returnthreadaddr = getKernelStackAddress();
    922a:	0e 94 9a 1b 	call	0x3734	; 0x3734 <getKernelStackAddress>
    922e:	9a 83       	std	Y+2, r25	; 0x02
    9230:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    9232:	89 81       	ldd	r24, Y+1	; 0x01
    9234:	9a 81       	ldd	r25, Y+2	; 0x02
    9236:	48 2f       	mov	r20, r24
    9238:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (returnthreadaddr));
}
    923a:	0f 90       	pop	r0
    923c:	0f 90       	pop	r0
    923e:	cf 91       	pop	r28
    9240:	df 91       	pop	r29
    9242:	08 95       	ret

00009244 <getStackPtrTask_Logger>:

void getStackPtrTask_Logger()
{
    9244:	df 93       	push	r29
    9246:	cf 93       	push	r28
    9248:	00 d0       	rcall	.+0      	; 0x924a <getStackPtrTask_Logger+0x6>
    924a:	cd b7       	in	r28, 0x3d	; 61
    924c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    924e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9252:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9254:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9258:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    925a:	89 81       	ldd	r24, Y+1	; 0x01
    925c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_KERNELSTACK, currentindex);
    9260:	83 e9       	ldi	r24, 0x93	; 147
    9262:	91 e0       	ldi	r25, 0x01	; 1
    9264:	6a 81       	ldd	r22, Y+2	; 0x02
    9266:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    getStackPtrTask();
    926a:	0e 94 10 49 	call	0x9220	; 0x9220 <getStackPtrTask>
}
    926e:	0f 90       	pop	r0
    9270:	0f 90       	pop	r0
    9272:	cf 91       	pop	r28
    9274:	df 91       	pop	r29
    9276:	08 95       	ret

00009278 <setRadioFrequencyTask_Logger>:



//because this system call directly links into the radio module, therefore, we do not need to consider the problem of directly using registers. 
void setRadioFrequencyTask_Logger()
{
    9278:	df 93       	push	r29
    927a:	cf 93       	push	r28
    927c:	00 d0       	rcall	.+0      	; 0x927e <setRadioFrequencyTask_Logger+0x6>
    927e:	cd b7       	in	r28, 0x3d	; 61
    9280:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9282:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9286:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9288:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    928c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    928e:	89 81       	ldd	r24, Y+1	; 0x01
    9290:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETRADIOFREQUENCY, currentindex);
    9294:	85 ef       	ldi	r24, 0xF5	; 245
    9296:	91 e0       	ldi	r25, 0x01	; 1
    9298:	6a 81       	ldd	r22, Y+2	; 0x02
    929a:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
#ifdef RADIO_CC2420
    setRadioFrequencyTask();
    929e:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <setRadioFrequencyTask>
#endif
}
    92a2:	0f 90       	pop	r0
    92a4:	0f 90       	pop	r0
    92a6:	cf 91       	pop	r28
    92a8:	df 91       	pop	r29
    92aa:	08 95       	ret

000092ac <setRadioChannelTask_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void setRadioChannelTask_Logger()
{
    92ac:	df 93       	push	r29
    92ae:	cf 93       	push	r28
    92b0:	00 d0       	rcall	.+0      	; 0x92b2 <setRadioChannelTask_Logger+0x6>
    92b2:	cd b7       	in	r28, 0x3d	; 61
    92b4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    92b6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    92ba:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    92bc:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    92c0:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    92c2:	89 81       	ldd	r24, Y+1	; 0x01
    92c4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETRADIOCHANNEL, currentindex);
    92c8:	86 ef       	ldi	r24, 0xF6	; 246
    92ca:	91 e0       	ldi	r25, 0x01	; 1
    92cc:	6a 81       	ldd	r22, Y+2	; 0x02
    92ce:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
#ifdef RADIO_CC2420
    setRadioChannelTask();
    92d2:	0e 94 61 47 	call	0x8ec2	; 0x8ec2 <setRadioChannelTask>
#endif
}
    92d6:	0f 90       	pop	r0
    92d8:	0f 90       	pop	r0
    92da:	cf 91       	pop	r28
    92dc:	df 91       	pop	r29
    92de:	08 95       	ret

000092e0 <setRadioPowerTask_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void setRadioPowerTask_Logger()
{
    92e0:	df 93       	push	r29
    92e2:	cf 93       	push	r28
    92e4:	00 d0       	rcall	.+0      	; 0x92e6 <setRadioPowerTask_Logger+0x6>
    92e6:	cd b7       	in	r28, 0x3d	; 61
    92e8:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    92ea:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    92ee:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    92f0:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    92f4:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    92f6:	89 81       	ldd	r24, Y+1	; 0x01
    92f8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETRADIOPOWER, currentindex);
    92fc:	87 ef       	ldi	r24, 0xF7	; 247
    92fe:	91 e0       	ldi	r25, 0x01	; 1
    9300:	6a 81       	ldd	r22, Y+2	; 0x02
    9302:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
#ifdef RADIO_CC2420
    setRadioPowerTask();
    9306:	0e 94 4f 47 	call	0x8e9e	; 0x8e9e <setRadioPowerTask>
#endif
}
    930a:	0f 90       	pop	r0
    930c:	0f 90       	pop	r0
    930e:	cf 91       	pop	r28
    9310:	df 91       	pop	r29
    9312:	08 95       	ret

00009314 <getRadioSendingBuffer_avr>:



//-------------------------------------------------------------------------
void getRadioSendingBuffer_avr()
{
    9314:	df 93       	push	r29
    9316:	cf 93       	push	r28
    9318:	00 d0       	rcall	.+0      	; 0x931a <getRadioSendingBuffer_avr+0x6>
    931a:	cd b7       	in	r28, 0x3d	; 61
    931c:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getRadioSendingBufferAddr();
    931e:	0e 94 22 47 	call	0x8e44	; 0x8e44 <getRadioSendingBufferAddr>
    9322:	9a 83       	std	Y+2, r25	; 0x02
    9324:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    9326:	89 81       	ldd	r24, Y+1	; 0x01
    9328:	9a 81       	ldd	r25, Y+2	; 0x02
    932a:	48 2f       	mov	r20, r24
    932c:	59 2f       	mov	r21, r25
}
    932e:	0f 90       	pop	r0
    9330:	0f 90       	pop	r0
    9332:	cf 91       	pop	r28
    9334:	df 91       	pop	r29
    9336:	08 95       	ret

00009338 <getRadioSendingBuffer_Logger>:

//-------------------------------------------------------------------------
void getRadioSendingBuffer_Logger()
{
    9338:	df 93       	push	r29
    933a:	cf 93       	push	r28
    933c:	00 d0       	rcall	.+0      	; 0x933e <getRadioSendingBuffer_Logger+0x6>
    933e:	cd b7       	in	r28, 0x3d	; 61
    9340:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9342:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9346:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9348:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    934c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    934e:	89 81       	ldd	r24, Y+1	; 0x01
    9350:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTRADIOINFOADDRESS, currentindex);
    9354:	8a ef       	ldi	r24, 0xFA	; 250
    9356:	91 e0       	ldi	r25, 0x01	; 1
    9358:	6a 81       	ldd	r22, Y+2	; 0x02
    935a:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    getRadioSendingBuffer_avr();
    935e:	0e 94 8a 49 	call	0x9314	; 0x9314 <getRadioSendingBuffer_avr>
}
    9362:	0f 90       	pop	r0
    9364:	0f 90       	pop	r0
    9366:	cf 91       	pop	r28
    9368:	df 91       	pop	r29
    936a:	08 95       	ret

0000936c <SocketRadioSend_Logger>:



//-------------------------------------------------------------------------
void SocketRadioSend_Logger()
{
    936c:	df 93       	push	r29
    936e:	cf 93       	push	r28
    9370:	00 d0       	rcall	.+0      	; 0x9372 <SocketRadioSend_Logger+0x6>
    9372:	cd b7       	in	r28, 0x3d	; 61
    9374:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9376:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    937a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    937c:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9380:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9382:	89 81       	ldd	r24, Y+1	; 0x01
    9384:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETRADIOSENDFUNCTION, currentindex);
    9388:	88 ef       	ldi	r24, 0xF8	; 248
    938a:	91 e0       	ldi	r25, 0x01	; 1
    938c:	6a 81       	ldd	r22, Y+2	; 0x02
    938e:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    SocketRadioSend();
    9392:	0e 94 49 47 	call	0x8e92	; 0x8e92 <SocketRadioSend>
}
    9396:	0f 90       	pop	r0
    9398:	0f 90       	pop	r0
    939a:	cf 91       	pop	r28
    939c:	df 91       	pop	r29
    939e:	08 95       	ret

000093a0 <getReceiverBuffer_avr>:

//following are receiving

//-------------------------------------------------------------------------
void getReceiverBuffer_avr()
{
    93a0:	df 93       	push	r29
    93a2:	cf 93       	push	r28
    93a4:	00 d0       	rcall	.+0      	; 0x93a6 <getReceiverBuffer_avr+0x6>
    93a6:	cd b7       	in	r28, 0x3d	; 61
    93a8:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getRadioReceivingBufferAddr();
    93aa:	0e 94 25 47 	call	0x8e4a	; 0x8e4a <getRadioReceivingBufferAddr>
    93ae:	9a 83       	std	Y+2, r25	; 0x02
    93b0:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    93b2:	89 81       	ldd	r24, Y+1	; 0x01
    93b4:	9a 81       	ldd	r25, Y+2	; 0x02
    93b6:	48 2f       	mov	r20, r24
    93b8:	59 2f       	mov	r21, r25
}
    93ba:	0f 90       	pop	r0
    93bc:	0f 90       	pop	r0
    93be:	cf 91       	pop	r28
    93c0:	df 91       	pop	r29
    93c2:	08 95       	ret

000093c4 <getReceiverBuffer_Logger>:

//-------------------------------------------------------------------------
void getReceiverBuffer_Logger()
{
    93c4:	df 93       	push	r29
    93c6:	cf 93       	push	r28
    93c8:	00 d0       	rcall	.+0      	; 0x93ca <getReceiverBuffer_Logger+0x6>
    93ca:	cd b7       	in	r28, 0x3d	; 61
    93cc:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    93ce:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    93d2:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    93d4:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    93d8:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    93da:	89 81       	ldd	r24, Y+1	; 0x01
    93dc:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTRADIORECEIVERHANDLEADDRESS, currentindex);
    93e0:	8b ef       	ldi	r24, 0xFB	; 251
    93e2:	91 e0       	ldi	r25, 0x01	; 1
    93e4:	6a 81       	ldd	r22, Y+2	; 0x02
    93e6:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    getReceiverBuffer_avr();
    93ea:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <getReceiverBuffer_avr>
}
    93ee:	0f 90       	pop	r0
    93f0:	0f 90       	pop	r0
    93f2:	cf 91       	pop	r28
    93f4:	df 91       	pop	r29
    93f6:	08 95       	ret

000093f8 <syscall_registerEvent_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void syscall_registerEvent_Logger()
{
    93f8:	df 93       	push	r29
    93fa:	cf 93       	push	r28
    93fc:	00 d0       	rcall	.+0      	; 0x93fe <syscall_registerEvent_Logger+0x6>
    93fe:	cd b7       	in	r28, 0x3d	; 61
    9400:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9402:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9406:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9408:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    940c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    940e:	89 81       	ldd	r24, Y+1	; 0x01
    9410:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETCURRENTRADIOHANDLE, currentindex);
    9414:	89 ef       	ldi	r24, 0xF9	; 249
    9416:	91 e0       	ldi	r25, 0x01	; 1
    9418:	6a 81       	ldd	r22, Y+2	; 0x02
    941a:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    registerReceiverHandle_syscall();
    941e:	0e 94 28 47 	call	0x8e50	; 0x8e50 <registerReceiverHandle_syscall>
}
    9422:	0f 90       	pop	r0
    9424:	0f 90       	pop	r0
    9426:	cf 91       	pop	r28
    9428:	df 91       	pop	r29
    942a:	08 95       	ret

0000942c <Leds_redToggle_Logger>:

//-------------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void Leds_redToggle_Logger()
{
    942c:	df 93       	push	r29
    942e:	cf 93       	push	r28
    9430:	00 d0       	rcall	.+0      	; 0x9432 <Leds_redToggle_Logger+0x6>
    9432:	cd b7       	in	r28, 0x3d	; 61
    9434:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9436:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    943a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    943c:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9440:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9442:	89 81       	ldd	r24, Y+1	; 0x01
    9444:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_REDTOGGLEFUNCTION, currentindex);
    9448:	89 e5       	ldi	r24, 0x59	; 89
    944a:	92 e0       	ldi	r25, 0x02	; 2
    944c:	6a 81       	ldd	r22, Y+2	; 0x02
    944e:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    Leds_redToggle();
    9452:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <Leds_redToggle>
}
    9456:	0f 90       	pop	r0
    9458:	0f 90       	pop	r0
    945a:	cf 91       	pop	r28
    945c:	df 91       	pop	r29
    945e:	08 95       	ret

00009460 <Leds_yellowToggle_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_yellowToggle_Logger()
{
    9460:	df 93       	push	r29
    9462:	cf 93       	push	r28
    9464:	00 d0       	rcall	.+0      	; 0x9466 <Leds_yellowToggle_Logger+0x6>
    9466:	cd b7       	in	r28, 0x3d	; 61
    9468:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    946a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    946e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9470:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9474:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9476:	89 81       	ldd	r24, Y+1	; 0x01
    9478:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_YELLOWTOGGLEFUNCTION, currentindex);
    947c:	8a e5       	ldi	r24, 0x5A	; 90
    947e:	92 e0       	ldi	r25, 0x02	; 2
    9480:	6a 81       	ldd	r22, Y+2	; 0x02
    9482:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    Leds_yellowToggle();
    9486:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <Leds_yellowToggle>
}
    948a:	0f 90       	pop	r0
    948c:	0f 90       	pop	r0
    948e:	cf 91       	pop	r28
    9490:	df 91       	pop	r29
    9492:	08 95       	ret

00009494 <Leds_greenToggle_Logger>:

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
void Leds_greenToggle_Logger()
{
    9494:	df 93       	push	r29
    9496:	cf 93       	push	r28
    9498:	00 d0       	rcall	.+0      	; 0x949a <Leds_greenToggle_Logger+0x6>
    949a:	cd b7       	in	r28, 0x3d	; 61
    949c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    949e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    94a2:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    94a4:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    94a8:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    94aa:	89 81       	ldd	r24, Y+1	; 0x01
    94ac:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GREENTOGGLEFUNCTION, currentindex);
    94b0:	8b e5       	ldi	r24, 0x5B	; 91
    94b2:	92 e0       	ldi	r25, 0x02	; 2
    94b4:	6a 81       	ldd	r22, Y+2	; 0x02
    94b6:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    Leds_greenToggle();
    94ba:	0e 94 b4 1c 	call	0x3968	; 0x3968 <Leds_greenToggle>
}
    94be:	0f 90       	pop	r0
    94c0:	0f 90       	pop	r0
    94c2:	cf 91       	pop	r28
    94c4:	df 91       	pop	r29
    94c6:	08 95       	ret

000094c8 <Leds_redOn_Logger>:



//-------------------------------------------------------------------------
void Leds_redOn_Logger()
{
    94c8:	df 93       	push	r29
    94ca:	cf 93       	push	r28
    94cc:	00 d0       	rcall	.+0      	; 0x94ce <Leds_redOn_Logger+0x6>
    94ce:	cd b7       	in	r28, 0x3d	; 61
    94d0:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    94d2:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    94d6:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    94d8:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    94dc:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    94de:	89 81       	ldd	r24, Y+1	; 0x01
    94e0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_REDONFUNCTION, currentindex);
    94e4:	8c e5       	ldi	r24, 0x5C	; 92
    94e6:	92 e0       	ldi	r25, 0x02	; 2
    94e8:	6a 81       	ldd	r22, Y+2	; 0x02
    94ea:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    Leds_redOn();
    94ee:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <Leds_redOn>
}
    94f2:	0f 90       	pop	r0
    94f4:	0f 90       	pop	r0
    94f6:	cf 91       	pop	r28
    94f8:	df 91       	pop	r29
    94fa:	08 95       	ret

000094fc <Leds_redOff_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_redOff_Logger()
{
    94fc:	df 93       	push	r29
    94fe:	cf 93       	push	r28
    9500:	00 d0       	rcall	.+0      	; 0x9502 <Leds_redOff_Logger+0x6>
    9502:	cd b7       	in	r28, 0x3d	; 61
    9504:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9506:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    950a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    950c:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9510:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9512:	89 81       	ldd	r24, Y+1	; 0x01
    9514:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_REDOFFFUNCTION, currentindex);
    9518:	8d e5       	ldi	r24, 0x5D	; 93
    951a:	92 e0       	ldi	r25, 0x02	; 2
    951c:	6a 81       	ldd	r22, Y+2	; 0x02
    951e:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    Leds_redOff();
    9522:	0e 94 ca 1c 	call	0x3994	; 0x3994 <Leds_redOff>
}
    9526:	0f 90       	pop	r0
    9528:	0f 90       	pop	r0
    952a:	cf 91       	pop	r28
    952c:	df 91       	pop	r29
    952e:	08 95       	ret

00009530 <Leds_yellowOn_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_yellowOn_Logger()
{
    9530:	df 93       	push	r29
    9532:	cf 93       	push	r28
    9534:	00 d0       	rcall	.+0      	; 0x9536 <Leds_yellowOn_Logger+0x6>
    9536:	cd b7       	in	r28, 0x3d	; 61
    9538:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    953a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    953e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9540:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9544:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9546:	89 81       	ldd	r24, Y+1	; 0x01
    9548:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_YELLOWONFUNCTION, currentindex);
    954c:	8e e5       	ldi	r24, 0x5E	; 94
    954e:	92 e0       	ldi	r25, 0x02	; 2
    9550:	6a 81       	ldd	r22, Y+2	; 0x02
    9552:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    Leds_yellowOn();
    9556:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <Leds_yellowOn>
}
    955a:	0f 90       	pop	r0
    955c:	0f 90       	pop	r0
    955e:	cf 91       	pop	r28
    9560:	df 91       	pop	r29
    9562:	08 95       	ret

00009564 <Leds_yellowOff_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_yellowOff_Logger()
{
    9564:	df 93       	push	r29
    9566:	cf 93       	push	r28
    9568:	00 d0       	rcall	.+0      	; 0x956a <Leds_yellowOff_Logger+0x6>
    956a:	cd b7       	in	r28, 0x3d	; 61
    956c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    956e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9572:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9574:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9578:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    957a:	89 81       	ldd	r24, Y+1	; 0x01
    957c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_YELLOWOFFFUNCTION, currentindex);
    9580:	8f e5       	ldi	r24, 0x5F	; 95
    9582:	92 e0       	ldi	r25, 0x02	; 2
    9584:	6a 81       	ldd	r22, Y+2	; 0x02
    9586:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    Leds_yellowOff();
    958a:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <Leds_yellowOff>
}
    958e:	0f 90       	pop	r0
    9590:	0f 90       	pop	r0
    9592:	cf 91       	pop	r28
    9594:	df 91       	pop	r29
    9596:	08 95       	ret

00009598 <Leds_greenOn_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_greenOn_Logger()
{
    9598:	df 93       	push	r29
    959a:	cf 93       	push	r28
    959c:	00 d0       	rcall	.+0      	; 0x959e <Leds_greenOn_Logger+0x6>
    959e:	cd b7       	in	r28, 0x3d	; 61
    95a0:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    95a2:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    95a6:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    95a8:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    95ac:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    95ae:	89 81       	ldd	r24, Y+1	; 0x01
    95b0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GREENONFUNCTION, currentindex);
    95b4:	80 e6       	ldi	r24, 0x60	; 96
    95b6:	92 e0       	ldi	r25, 0x02	; 2
    95b8:	6a 81       	ldd	r22, Y+2	; 0x02
    95ba:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    Leds_greenOn();
    95be:	0e 94 a4 1c 	call	0x3948	; 0x3948 <Leds_greenOn>
}
    95c2:	0f 90       	pop	r0
    95c4:	0f 90       	pop	r0
    95c6:	cf 91       	pop	r28
    95c8:	df 91       	pop	r29
    95ca:	08 95       	ret

000095cc <Leds_greenOff_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_greenOff_Logger()
{
    95cc:	df 93       	push	r29
    95ce:	cf 93       	push	r28
    95d0:	00 d0       	rcall	.+0      	; 0x95d2 <Leds_greenOff_Logger+0x6>
    95d2:	cd b7       	in	r28, 0x3d	; 61
    95d4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    95d6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    95da:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    95dc:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    95e0:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    95e2:	89 81       	ldd	r24, Y+1	; 0x01
    95e4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GREENOFFFUNCTION, currentindex);
    95e8:	81 e6       	ldi	r24, 0x61	; 97
    95ea:	92 e0       	ldi	r25, 0x02	; 2
    95ec:	6a 81       	ldd	r22, Y+2	; 0x02
    95ee:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    Leds_greenOff();
    95f2:	0e 94 94 1c 	call	0x3928	; 0x3928 <Leds_greenOff>
}
    95f6:	0f 90       	pop	r0
    95f8:	0f 90       	pop	r0
    95fa:	cf 91       	pop	r28
    95fc:	df 91       	pop	r29
    95fe:	08 95       	ret

00009600 <ADCLight_Logger>:
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------
void ADCLight_Logger()
{
    9600:	df 93       	push	r29
    9602:	cf 93       	push	r28
    9604:	00 d0       	rcall	.+0      	; 0x9606 <ADCLight_Logger+0x6>
    9606:	cd b7       	in	r28, 0x3d	; 61
    9608:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    960a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    960e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9610:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9614:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9616:	89 81       	ldd	r24, Y+1	; 0x01
    9618:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCLIGHTSYSCALL, currentindex);
    961c:	8d eb       	ldi	r24, 0xBD	; 189
    961e:	92 e0       	ldi	r25, 0x02	; 2
    9620:	6a 81       	ldd	r22, Y+2	; 0x02
    9622:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    ADCLight();
    9626:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <ADCLight>
}
    962a:	0f 90       	pop	r0
    962c:	0f 90       	pop	r0
    962e:	cf 91       	pop	r28
    9630:	df 91       	pop	r29
    9632:	08 95       	ret

00009634 <ADCTemp_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCTemp_Logger()
{
    9634:	df 93       	push	r29
    9636:	cf 93       	push	r28
    9638:	00 d0       	rcall	.+0      	; 0x963a <ADCTemp_Logger+0x6>
    963a:	cd b7       	in	r28, 0x3d	; 61
    963c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    963e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9642:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9644:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9648:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    964a:	89 81       	ldd	r24, Y+1	; 0x01
    964c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCTEMPSYSCALL, currentindex);
    9650:	8e eb       	ldi	r24, 0xBE	; 190
    9652:	92 e0       	ldi	r25, 0x02	; 2
    9654:	6a 81       	ldd	r22, Y+2	; 0x02
    9656:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    ADCTemp();
    965a:	0e 94 33 46 	call	0x8c66	; 0x8c66 <ADCTemp>
}
    965e:	0f 90       	pop	r0
    9660:	0f 90       	pop	r0
    9662:	cf 91       	pop	r28
    9664:	df 91       	pop	r29
    9666:	08 95       	ret

00009668 <ADCMagX_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCMagX_Logger()
{
    9668:	df 93       	push	r29
    966a:	cf 93       	push	r28
    966c:	00 d0       	rcall	.+0      	; 0x966e <ADCMagX_Logger+0x6>
    966e:	cd b7       	in	r28, 0x3d	; 61
    9670:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9672:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9676:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9678:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    967c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    967e:	89 81       	ldd	r24, Y+1	; 0x01
    9680:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCMAGXSYSCALL, currentindex);
    9684:	8f eb       	ldi	r24, 0xBF	; 191
    9686:	92 e0       	ldi	r25, 0x02	; 2
    9688:	6a 81       	ldd	r22, Y+2	; 0x02
    968a:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    ADCMagX();
    968e:	0e 94 2a 46 	call	0x8c54	; 0x8c54 <ADCMagX>
}
    9692:	0f 90       	pop	r0
    9694:	0f 90       	pop	r0
    9696:	cf 91       	pop	r28
    9698:	df 91       	pop	r29
    969a:	08 95       	ret

0000969c <ADCMagY_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCMagY_Logger()
{
    969c:	df 93       	push	r29
    969e:	cf 93       	push	r28
    96a0:	00 d0       	rcall	.+0      	; 0x96a2 <ADCMagY_Logger+0x6>
    96a2:	cd b7       	in	r28, 0x3d	; 61
    96a4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    96a6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    96aa:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    96ac:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    96b0:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    96b2:	89 81       	ldd	r24, Y+1	; 0x01
    96b4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCMAGYSYSCALL, currentindex);
    96b8:	80 ec       	ldi	r24, 0xC0	; 192
    96ba:	92 e0       	ldi	r25, 0x02	; 2
    96bc:	6a 81       	ldd	r22, Y+2	; 0x02
    96be:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    ADCMagY();
    96c2:	0e 94 21 46 	call	0x8c42	; 0x8c42 <ADCMagY>
}
    96c6:	0f 90       	pop	r0
    96c8:	0f 90       	pop	r0
    96ca:	cf 91       	pop	r28
    96cc:	df 91       	pop	r29
    96ce:	08 95       	ret

000096d0 <ADCAccX_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCAccX_Logger()
{
    96d0:	df 93       	push	r29
    96d2:	cf 93       	push	r28
    96d4:	00 d0       	rcall	.+0      	; 0x96d6 <ADCAccX_Logger+0x6>
    96d6:	cd b7       	in	r28, 0x3d	; 61
    96d8:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    96da:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    96de:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    96e0:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    96e4:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    96e6:	89 81       	ldd	r24, Y+1	; 0x01
    96e8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCACCXSYSCALL, currentindex);
    96ec:	81 ec       	ldi	r24, 0xC1	; 193
    96ee:	92 e0       	ldi	r25, 0x02	; 2
    96f0:	6a 81       	ldd	r22, Y+2	; 0x02
    96f2:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    ADCAccX();
    96f6:	0e 94 18 46 	call	0x8c30	; 0x8c30 <ADCAccX>
}
    96fa:	0f 90       	pop	r0
    96fc:	0f 90       	pop	r0
    96fe:	cf 91       	pop	r28
    9700:	df 91       	pop	r29
    9702:	08 95       	ret

00009704 <ADCAccY_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCAccY_Logger()
{
    9704:	df 93       	push	r29
    9706:	cf 93       	push	r28
    9708:	00 d0       	rcall	.+0      	; 0x970a <ADCAccY_Logger+0x6>
    970a:	cd b7       	in	r28, 0x3d	; 61
    970c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    970e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9712:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9714:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9718:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    971a:	89 81       	ldd	r24, Y+1	; 0x01
    971c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCACCYSYSCALL, currentindex);
    9720:	82 ec       	ldi	r24, 0xC2	; 194
    9722:	92 e0       	ldi	r25, 0x02	; 2
    9724:	6a 81       	ldd	r22, Y+2	; 0x02
    9726:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    ADCAccY();
    972a:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ADCAccY>
}
    972e:	0f 90       	pop	r0
    9730:	0f 90       	pop	r0
    9732:	cf 91       	pop	r28
    9734:	df 91       	pop	r29
    9736:	08 95       	ret

00009738 <sounderOn_Logger>:
}


/* added by Qi Mi (qm8e@virginia.edu) */
void sounderOn_Logger()
{
    9738:	df 93       	push	r29
    973a:	cf 93       	push	r28
    973c:	00 d0       	rcall	.+0      	; 0x973e <sounderOn_Logger+0x6>
    973e:	cd b7       	in	r28, 0x3d	; 61
    9740:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9742:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9746:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9748:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    974c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    974e:	89 81       	ldd	r24, Y+1	; 0x01
    9750:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_SOUNDERONFUNCTION, currentindex);
    9754:	83 ec       	ldi	r24, 0xC3	; 195
    9756:	92 e0       	ldi	r25, 0x02	; 2
    9758:	6a 81       	ldd	r22, Y+2	; 0x02
    975a:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    sounderOn();
    975e:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <sounderOn>
}
    9762:	0f 90       	pop	r0
    9764:	0f 90       	pop	r0
    9766:	cf 91       	pop	r28
    9768:	df 91       	pop	r29
    976a:	08 95       	ret

0000976c <sounderOff_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void sounderOff_Logger()
{
    976c:	df 93       	push	r29
    976e:	cf 93       	push	r28
    9770:	00 d0       	rcall	.+0      	; 0x9772 <sounderOff_Logger+0x6>
    9772:	cd b7       	in	r28, 0x3d	; 61
    9774:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9776:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    977a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    977c:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9780:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9782:	89 81       	ldd	r24, Y+1	; 0x01
    9784:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_SOUNDEROFFFUNCTION, currentindex);
    9788:	84 ec       	ldi	r24, 0xC4	; 196
    978a:	92 e0       	ldi	r25, 0x02	; 2
    978c:	6a 81       	ldd	r22, Y+2	; 0x02
    978e:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    sounderOff();
    9792:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <sounderOff>
}
    9796:	0f 90       	pop	r0
    9798:	0f 90       	pop	r0
    979a:	cf 91       	pop	r28
    979c:	df 91       	pop	r29
    979e:	08 95       	ret

000097a0 <getEEPROMHandleInfo>:

  

//-------------------------------------------------------------------------
void getEEPROMHandleInfo()
{
    97a0:	df 93       	push	r29
    97a2:	cf 93       	push	r28
    97a4:	00 d0       	rcall	.+0      	; 0x97a6 <getEEPROMHandleInfo+0x6>
    97a6:	cd b7       	in	r28, 0x3d	; 61
    97a8:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getGenericStorageNodeAddress();
    97aa:	0e 94 45 46 	call	0x8c8a	; 0x8c8a <getGenericStorageNodeAddress>
    97ae:	9a 83       	std	Y+2, r25	; 0x02
    97b0:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    97b2:	89 81       	ldd	r24, Y+1	; 0x01
    97b4:	9a 81       	ldd	r25, Y+2	; 0x02
    97b6:	48 2f       	mov	r20, r24
    97b8:	59 2f       	mov	r21, r25
}
    97ba:	0f 90       	pop	r0
    97bc:	0f 90       	pop	r0
    97be:	cf 91       	pop	r28
    97c0:	df 91       	pop	r29
    97c2:	08 95       	ret

000097c4 <getEEPROMHandleInfo_Logger>:

//-------------------------------------------------------------------------
void getEEPROMHandleInfo_Logger()
{
    97c4:	df 93       	push	r29
    97c6:	cf 93       	push	r28
    97c8:	00 d0       	rcall	.+0      	; 0x97ca <getEEPROMHandleInfo_Logger+0x6>
    97ca:	cd b7       	in	r28, 0x3d	; 61
    97cc:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    97ce:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    97d2:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    97d4:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    97d8:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    97da:	89 81       	ldd	r24, Y+1	; 0x01
    97dc:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTEEPROMHANDLEADDRESS, currentindex);
    97e0:	85 ec       	ldi	r24, 0xC5	; 197
    97e2:	92 e0       	ldi	r25, 0x02	; 2
    97e4:	6a 81       	ldd	r22, Y+2	; 0x02
    97e6:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    getEEPROMHandleInfo();
    97ea:	0e 94 d0 4b 	call	0x97a0	; 0x97a0 <getEEPROMHandleInfo>
}
    97ee:	0f 90       	pop	r0
    97f0:	0f 90       	pop	r0
    97f2:	cf 91       	pop	r28
    97f4:	df 91       	pop	r29
    97f6:	08 95       	ret

000097f8 <readEEPROMTask>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void readEEPROMTask()
{
    97f8:	df 93       	push	r29
    97fa:	cf 93       	push	r28
    97fc:	cd b7       	in	r28, 0x3d	; 61
    97fe:	de b7       	in	r29, 0x3e	; 62
    genericReadTask();
    9800:	0e 94 57 46 	call	0x8cae	; 0x8cae <genericReadTask>
}
    9804:	cf 91       	pop	r28
    9806:	df 91       	pop	r29
    9808:	08 95       	ret

0000980a <readEEPROMTask_Logger>:

//-------------------------------------------------------------------------
void readEEPROMTask_Logger()
{
    980a:	df 93       	push	r29
    980c:	cf 93       	push	r28
    980e:	00 d0       	rcall	.+0      	; 0x9810 <readEEPROMTask_Logger+0x6>
    9810:	cd b7       	in	r28, 0x3d	; 61
    9812:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9814:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9818:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    981a:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    981e:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9820:	89 81       	ldd	r24, Y+1	; 0x01
    9822:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_READFROMEEPROM, currentindex);
    9826:	86 ec       	ldi	r24, 0xC6	; 198
    9828:	92 e0       	ldi	r25, 0x02	; 2
    982a:	6a 81       	ldd	r22, Y+2	; 0x02
    982c:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    readEEPROMTask();
    9830:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <readEEPROMTask>
}
    9834:	0f 90       	pop	r0
    9836:	0f 90       	pop	r0
    9838:	cf 91       	pop	r28
    983a:	df 91       	pop	r29
    983c:	08 95       	ret

0000983e <writeEEPROMTask>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void writeEEPROMTask()
{
    983e:	df 93       	push	r29
    9840:	cf 93       	push	r28
    9842:	cd b7       	in	r28, 0x3d	; 61
    9844:	de b7       	in	r29, 0x3e	; 62
    genericWriteTask();
    9846:	0e 94 48 46 	call	0x8c90	; 0x8c90 <genericWriteTask>
}
    984a:	cf 91       	pop	r28
    984c:	df 91       	pop	r29
    984e:	08 95       	ret

00009850 <writeEEPROMTask_Logger>:

//-------------------------------------------------------------------------
void writeEEPROMTask_Logger()
{
    9850:	df 93       	push	r29
    9852:	cf 93       	push	r28
    9854:	00 d0       	rcall	.+0      	; 0x9856 <writeEEPROMTask_Logger+0x6>
    9856:	cd b7       	in	r28, 0x3d	; 61
    9858:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    985a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    985e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9860:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9864:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9866:	89 81       	ldd	r24, Y+1	; 0x01
    9868:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_WRITETOEEPROM, currentindex);
    986c:	87 ec       	ldi	r24, 0xC7	; 199
    986e:	92 e0       	ldi	r25, 0x02	; 2
    9870:	6a 81       	ldd	r22, Y+2	; 0x02
    9872:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    writeEEPROMTask();
    9876:	0e 94 1f 4c 	call	0x983e	; 0x983e <writeEEPROMTask>
}
    987a:	0f 90       	pop	r0
    987c:	0f 90       	pop	r0
    987e:	cf 91       	pop	r28
    9880:	df 91       	pop	r29
    9882:	08 95       	ret

00009884 <getFilePathAddress_avr>:
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------
void getFilePathAddress_avr()
{
    9884:	df 93       	push	r29
    9886:	cf 93       	push	r28
    9888:	00 d0       	rcall	.+0      	; 0x988a <getFilePathAddress_avr+0x6>
    988a:	cd b7       	in	r28, 0x3d	; 61
    988c:	de b7       	in	r29, 0x3e	; 62
    void *filepathaddr;

    filepathaddr = getFilePathAddress();
    988e:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <getFilePathAddress>
    9892:	9a 83       	std	Y+2, r25	; 0x02
    9894:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    9896:	89 81       	ldd	r24, Y+1	; 0x01
    9898:	9a 81       	ldd	r25, Y+2	; 0x02
    989a:	48 2f       	mov	r20, r24
    989c:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (filepathaddr));
}
    989e:	0f 90       	pop	r0
    98a0:	0f 90       	pop	r0
    98a2:	cf 91       	pop	r28
    98a4:	df 91       	pop	r29
    98a6:	08 95       	ret

000098a8 <getFilePathAddress_Logger>:

//-------------------------------------------------------------------------
void getFilePathAddress_Logger()
{
    98a8:	df 93       	push	r29
    98aa:	cf 93       	push	r28
    98ac:	00 d0       	rcall	.+0      	; 0x98ae <getFilePathAddress_Logger+0x6>
    98ae:	cd b7       	in	r28, 0x3d	; 61
    98b0:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    98b2:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    98b6:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    98b8:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    98bc:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    98be:	89 81       	ldd	r24, Y+1	; 0x01
    98c0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETFILEPATHADDR, currentindex);
    98c4:	81 e2       	ldi	r24, 0x21	; 33
    98c6:	93 e0       	ldi	r25, 0x03	; 3
    98c8:	6a 81       	ldd	r22, Y+2	; 0x02
    98ca:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    getFilePathAddress_avr();
    98ce:	0e 94 42 4c 	call	0x9884	; 0x9884 <getFilePathAddress_avr>
}
    98d2:	0f 90       	pop	r0
    98d4:	0f 90       	pop	r0
    98d6:	cf 91       	pop	r28
    98d8:	df 91       	pop	r29
    98da:	08 95       	ret

000098dc <getFileModeAddress_avr>:
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
void getFileModeAddress_avr()
{
    98dc:	df 93       	push	r29
    98de:	cf 93       	push	r28
    98e0:	00 d0       	rcall	.+0      	; 0x98e2 <getFileModeAddress_avr+0x6>
    98e2:	cd b7       	in	r28, 0x3d	; 61
    98e4:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getFileModeAddress();
    98e6:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <getFileModeAddress>
    98ea:	9a 83       	std	Y+2, r25	; 0x02
    98ec:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    98ee:	89 81       	ldd	r24, Y+1	; 0x01
    98f0:	9a 81       	ldd	r25, Y+2	; 0x02
    98f2:	48 2f       	mov	r20, r24
    98f4:	59 2f       	mov	r21, r25
}
    98f6:	0f 90       	pop	r0
    98f8:	0f 90       	pop	r0
    98fa:	cf 91       	pop	r28
    98fc:	df 91       	pop	r29
    98fe:	08 95       	ret

00009900 <getFileModeAddress_Logger>:

//-------------------------------------------------------------------------
void getFileModeAddress_Logger()
{
    9900:	df 93       	push	r29
    9902:	cf 93       	push	r28
    9904:	00 d0       	rcall	.+0      	; 0x9906 <getFileModeAddress_Logger+0x6>
    9906:	cd b7       	in	r28, 0x3d	; 61
    9908:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    990a:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    990e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9910:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9914:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9916:	89 81       	ldd	r24, Y+1	; 0x01
    9918:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETFILEMODEADDR, currentindex);
    991c:	82 e2       	ldi	r24, 0x22	; 34
    991e:	93 e0       	ldi	r25, 0x03	; 3
    9920:	6a 81       	ldd	r22, Y+2	; 0x02
    9922:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    getFileModeAddress_avr();
    9926:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <getFileModeAddress_avr>
}
    992a:	0f 90       	pop	r0
    992c:	0f 90       	pop	r0
    992e:	cf 91       	pop	r28
    9930:	df 91       	pop	r29
    9932:	08 95       	ret

00009934 <openFileTask_Logger>:
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
void openFileTask_Logger()
{
    9934:	df 93       	push	r29
    9936:	cf 93       	push	r28
    9938:	00 d0       	rcall	.+0      	; 0x993a <openFileTask_Logger+0x6>
    993a:	cd b7       	in	r28, 0x3d	; 61
    993c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    993e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9942:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9944:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9948:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    994a:	89 81       	ldd	r24, Y+1	; 0x01
    994c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_OPENFILESYSCALL, currentindex);
    9950:	83 e2       	ldi	r24, 0x23	; 35
    9952:	93 e0       	ldi	r25, 0x03	; 3
    9954:	6a 81       	ldd	r22, Y+2	; 0x02
    9956:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    openFileTask();
    995a:	0e 94 d2 46 	call	0x8da4	; 0x8da4 <openFileTask>
}
    995e:	0f 90       	pop	r0
    9960:	0f 90       	pop	r0
    9962:	cf 91       	pop	r28
    9964:	df 91       	pop	r29
    9966:	08 95       	ret

00009968 <closeFileTask_Logger>:



//-------------------------------------------------------------------------
void closeFileTask_Logger()
{
    9968:	df 93       	push	r29
    996a:	cf 93       	push	r28
    996c:	00 d0       	rcall	.+0      	; 0x996e <closeFileTask_Logger+0x6>
    996e:	cd b7       	in	r28, 0x3d	; 61
    9970:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9972:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9976:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9978:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    997c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    997e:	89 81       	ldd	r24, Y+1	; 0x01
    9980:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_CLOSEFILESYSCALL, currentindex);
    9984:	84 e2       	ldi	r24, 0x24	; 36
    9986:	93 e0       	ldi	r25, 0x03	; 3
    9988:	6a 81       	ldd	r22, Y+2	; 0x02
    998a:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    closeFileTask();
    998e:	0e 94 c2 46 	call	0x8d84	; 0x8d84 <closeFileTask>
}
    9992:	0f 90       	pop	r0
    9994:	0f 90       	pop	r0
    9996:	cf 91       	pop	r28
    9998:	df 91       	pop	r29
    999a:	08 95       	ret

0000999c <readFileTask_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void readFileTask_Logger()
{
    999c:	df 93       	push	r29
    999e:	cf 93       	push	r28
    99a0:	00 d0       	rcall	.+0      	; 0x99a2 <readFileTask_Logger+0x6>
    99a2:	cd b7       	in	r28, 0x3d	; 61
    99a4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    99a6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    99aa:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    99ac:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    99b0:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    99b2:	89 81       	ldd	r24, Y+1	; 0x01
    99b4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_READFILESYSCALL, currentindex);
    99b8:	85 e2       	ldi	r24, 0x25	; 37
    99ba:	93 e0       	ldi	r25, 0x03	; 3
    99bc:	6a 81       	ldd	r22, Y+2	; 0x02
    99be:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    readFileTask();
    99c2:	0e 94 a6 46 	call	0x8d4c	; 0x8d4c <readFileTask>
}
    99c6:	0f 90       	pop	r0
    99c8:	0f 90       	pop	r0
    99ca:	cf 91       	pop	r28
    99cc:	df 91       	pop	r29
    99ce:	08 95       	ret

000099d0 <writeFileTask_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void writeFileTask_Logger()
{
    99d0:	df 93       	push	r29
    99d2:	cf 93       	push	r28
    99d4:	00 d0       	rcall	.+0      	; 0x99d6 <writeFileTask_Logger+0x6>
    99d6:	cd b7       	in	r28, 0x3d	; 61
    99d8:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    99da:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    99de:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    99e0:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    99e4:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    99e6:	89 81       	ldd	r24, Y+1	; 0x01
    99e8:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_WRITEFILESYSCALL, currentindex);
    99ec:	86 e2       	ldi	r24, 0x26	; 38
    99ee:	93 e0       	ldi	r25, 0x03	; 3
    99f0:	6a 81       	ldd	r22, Y+2	; 0x02
    99f2:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    writeFileTask();
    99f6:	0e 94 8a 46 	call	0x8d14	; 0x8d14 <writeFileTask>
}
    99fa:	0f 90       	pop	r0
    99fc:	0f 90       	pop	r0
    99fe:	cf 91       	pop	r28
    9a00:	df 91       	pop	r29
    9a02:	08 95       	ret

00009a04 <seekFileTask_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void seekFileTask_Logger()
{
    9a04:	df 93       	push	r29
    9a06:	cf 93       	push	r28
    9a08:	00 d0       	rcall	.+0      	; 0x9a0a <seekFileTask_Logger+0x6>
    9a0a:	cd b7       	in	r28, 0x3d	; 61
    9a0c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9a0e:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9a12:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9a14:	0e 94 9d 1b 	call	0x373a	; 0x373a <getThreadIndexAddress>
    9a18:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9a1a:	89 81       	ldd	r24, Y+1	; 0x01
    9a1c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    addTrace(TRACE_SYSCALL_SEEKFILESYSCALL, currentindex);
    9a20:	87 e2       	ldi	r24, 0x27	; 39
    9a22:	93 e0       	ldi	r25, 0x03	; 3
    9a24:	6a 81       	ldd	r22, Y+2	; 0x02
    9a26:	0e 94 46 4d 	call	0x9a8c	; 0x9a8c <addTrace>
    seekFileTask();
    9a2a:	0e 94 6c 46 	call	0x8cd8	; 0x8cd8 <seekFileTask>
}
    9a2e:	0f 90       	pop	r0
    9a30:	0f 90       	pop	r0
    9a32:	cf 91       	pop	r28
    9a34:	df 91       	pop	r29
    9a36:	08 95       	ret

00009a38 <getCurrentThreadAddress>:

  addr = (thread **) &current_thread;
  return addr;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
  // asm volatile("ret"::); 
}
    9a38:	80 e6       	ldi	r24, 0x60	; 96
    9a3a:	95 e0       	ldi	r25, 0x05	; 5
    9a3c:	08 95       	ret

00009a3e <getThreadTableStart>:
  addr = &thread_table[0];
  
  return addr;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
  // asm volatile("ret"::); 
}
    9a3e:	82 e6       	ldi	r24, 0x62	; 98
    9a40:	95 e0       	ldi	r25, 0x05	; 5
    9a42:	08 95       	ret

00009a44 <enabletracingfunction>:
uint32_t timestamp; 


void enabletracingfunction()
{
    enabletracing = 1;
    9a44:	81 e0       	ldi	r24, 0x01	; 1
    9a46:	80 93 76 09 	sts	0x0976, r24
}
    9a4a:	08 95       	ret

00009a4c <disabletracingfunction>:

//-------------------------------------------------------------------------
void disabletracingfunction()
{
    enabletracing = 0;
    9a4c:	10 92 76 09 	sts	0x0976, r1
}
    9a50:	08 95       	ret

00009a52 <initTrace>:

//-------------------------------------------------------------------------
void initTrace()
{
    internaltracingblock.externaladdtracefp = NULL;
    9a52:	10 92 73 09 	sts	0x0973, r1
    9a56:	10 92 72 09 	sts	0x0972, r1
    internaltracingblock.externalapptracefp = NULL;
    9a5a:	10 92 75 09 	sts	0x0975, r1
    9a5e:	10 92 74 09 	sts	0x0974, r1
    enabletracing = 0;
    9a62:	10 92 76 09 	sts	0x0976, r1
}
    9a66:	08 95       	ret

00009a68 <apptracepointfunction>:
}

void apptracepointfunction() __attribute__ ((naked));
void apptracepointfunction()
{
    asm volatile ("push r24"::);
    9a68:	8f 93       	push	r24
    asm volatile ("push r25"::);
    9a6a:	9f 93       	push	r25
    asm volatile ("push r28"::);
    9a6c:	cf 93       	push	r28
    asm volatile ("push r29"::);
    9a6e:	df 93       	push	r29

    if ((internaltracingblock.externalapptracefp != NULL) && (enabletracing
    9a70:	e0 91 74 09 	lds	r30, 0x0974
    9a74:	f0 91 75 09 	lds	r31, 0x0975
    9a78:	30 97       	sbiw	r30, 0x00	; 0
    9a7a:	21 f0       	breq	.+8      	; 0x9a84 <apptracepointfunction+0x1c>
    9a7c:	80 91 76 09 	lds	r24, 0x0976
    9a80:	81 30       	cpi	r24, 0x01	; 1
    9a82:	01 f0       	breq	.+0      	; 0x9a84 <apptracepointfunction+0x1c>
                                                              == 1))
    {
        internaltracingblock.externalapptracefp();
    9a84:	09 95       	icall

00009a86 <getTracingBlockAddress>:

//-------------------------------------------------------------------------
void *getTracingBlockAddress()
{
    return (void *)&internaltracingblock;
}
    9a86:	8b e6       	ldi	r24, 0x6B	; 107
    9a88:	99 e0       	ldi	r25, 0x09	; 9
    9a8a:	08 95       	ret

00009a8c <addTrace>:
    enabletracing = 0;
}


void addTrace(uint16_t traceid, uint8_t threadid)
{
    9a8c:	1f 93       	push	r17
    9a8e:	cf 93       	push	r28
    9a90:	df 93       	push	r29
    9a92:	ec 01       	movw	r28, r24
    9a94:	16 2f       	mov	r17, r22
	



    
	  if (threadid==1)
    9a96:	61 30       	cpi	r22, 0x01	; 1
    9a98:	11 f1       	breq	.+68     	; 0x9ade <addTrace+0x52>
	   return; 
	  timestamp = getCurrentResolution();
    9a9a:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <getCurrentResolution>
    9a9e:	60 93 67 09 	sts	0x0967, r22
    9aa2:	70 93 68 09 	sts	0x0968, r23
    9aa6:	80 93 69 09 	sts	0x0969, r24
    9aaa:	90 93 6a 09 	sts	0x096A, r25
    internaltracingblock.internaleventid = traceid;
    9aae:	d0 93 6c 09 	sts	0x096C, r29
    9ab2:	c0 93 6b 09 	sts	0x096B, r28
    internaltracingblock.threadid = threadid;
    9ab6:	10 93 6d 09 	sts	0x096D, r17
    internaltracingblock.timestamp = timestamp; 
    9aba:	60 93 6e 09 	sts	0x096E, r22
    9abe:	70 93 6f 09 	sts	0x096F, r23
    9ac2:	80 93 70 09 	sts	0x0970, r24
    9ac6:	90 93 71 09 	sts	0x0971, r25
    if ((internaltracingblock.externaladdtracefp != NULL) && (enabletracing
    9aca:	e0 91 72 09 	lds	r30, 0x0972
    9ace:	f0 91 73 09 	lds	r31, 0x0973
    9ad2:	30 97       	sbiw	r30, 0x00	; 0
    9ad4:	21 f0       	breq	.+8      	; 0x9ade <addTrace+0x52>
    9ad6:	80 91 76 09 	lds	r24, 0x0976
    9ada:	81 30       	cpi	r24, 0x01	; 1
    9adc:	21 f0       	breq	.+8      	; 0x9ae6 <addTrace+0x5a>
    	  	  
	  //lib_printf_uinteger32(traceid);
	  //lib_printf_uinteger32(threadid);
    internaltracingblock.externaladdtracefp();
    }
}
    9ade:	df 91       	pop	r29
    9ae0:	cf 91       	pop	r28
    9ae2:	1f 91       	pop	r17
    9ae4:	08 95       	ret
    {
    	
    	  	  
	  //lib_printf_uinteger32(traceid);
	  //lib_printf_uinteger32(threadid);
    internaltracingblock.externaladdtracefp();
    9ae6:	09 95       	icall
    9ae8:	fa cf       	rjmp	.-12     	; 0x9ade <addTrace+0x52>

00009aea <lib_get_accy>:
   return (*current_thread)->data.adcstate.adcreading;  
}


int lib_get_accy()
{
    9aea:	0f 93       	push	r16
    9aec:	1f 93       	push	r17
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_ACCY;
   current_thread = lib_get_current_thread();    
    9aee:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9af2:	8c 01       	movw	r16, r24
   fp(); 
    9af4:	e4 e1       	ldi	r30, 0x14	; 20
    9af6:	fd ee       	ldi	r31, 0xED	; 237
    9af8:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    9afa:	d8 01       	movw	r26, r16
    9afc:	ed 91       	ld	r30, X+
    9afe:	fc 91       	ld	r31, X
    9b00:	25 8d       	ldd	r18, Z+29	; 0x1d
    9b02:	36 8d       	ldd	r19, Z+30	; 0x1e
}
    9b04:	c9 01       	movw	r24, r18
    9b06:	1f 91       	pop	r17
    9b08:	0f 91       	pop	r16
    9b0a:	08 95       	ret

00009b0c <lib_get_accx>:
   return (*current_thread)->data.adcstate.adcreading;  
}


int lib_get_accx()
{
    9b0c:	0f 93       	push	r16
    9b0e:	1f 93       	push	r17
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_ACCX;
   current_thread = lib_get_current_thread();    
    9b10:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9b14:	8c 01       	movw	r16, r24
   fp(); 
    9b16:	e0 e1       	ldi	r30, 0x10	; 16
    9b18:	fd ee       	ldi	r31, 0xED	; 237
    9b1a:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    9b1c:	d8 01       	movw	r26, r16
    9b1e:	ed 91       	ld	r30, X+
    9b20:	fc 91       	ld	r31, X
    9b22:	25 8d       	ldd	r18, Z+29	; 0x1d
    9b24:	36 8d       	ldd	r19, Z+30	; 0x1e
}
    9b26:	c9 01       	movw	r24, r18
    9b28:	1f 91       	pop	r17
    9b2a:	0f 91       	pop	r16
    9b2c:	08 95       	ret

00009b2e <lib_get_temp>:
  
}


int lib_get_temp()
{
    9b2e:	0f 93       	push	r16
    9b30:	1f 93       	push	r17
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_TEMP;
   current_thread = lib_get_current_thread();    
    9b32:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9b36:	8c 01       	movw	r16, r24
   fp(); 
    9b38:	e4 e0       	ldi	r30, 0x04	; 4
    9b3a:	fd ee       	ldi	r31, 0xED	; 237
    9b3c:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    9b3e:	d8 01       	movw	r26, r16
    9b40:	ed 91       	ld	r30, X+
    9b42:	fc 91       	ld	r31, X
    9b44:	25 8d       	ldd	r18, Z+29	; 0x1d
    9b46:	36 8d       	ldd	r19, Z+30	; 0x1e

}
    9b48:	c9 01       	movw	r24, r18
    9b4a:	1f 91       	pop	r17
    9b4c:	0f 91       	pop	r16
    9b4e:	08 95       	ret

00009b50 <lib_get_light>:
#include "libthread.h"
#include "libsystem.h"
#include "../types/types.h"

int lib_get_light()
{
    9b50:	0f 93       	push	r16
    9b52:	1f 93       	push	r17
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_LIGHT;
   current_thread = lib_get_current_thread();    
    9b54:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9b58:	8c 01       	movw	r16, r24
   fp(); 
    9b5a:	e0 e0       	ldi	r30, 0x00	; 0
    9b5c:	fd ee       	ldi	r31, 0xED	; 237
    9b5e:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    9b60:	d8 01       	movw	r26, r16
    9b62:	ed 91       	ld	r30, X+
    9b64:	fc 91       	ld	r31, X
    9b66:	25 8d       	ldd	r18, Z+29	; 0x1d
    9b68:	36 8d       	ldd	r19, Z+30	; 0x1e
  
}
    9b6a:	c9 01       	movw	r24, r18
    9b6c:	1f 91       	pop	r17
    9b6e:	0f 91       	pop	r16
    9b70:	08 95       	ret

00009b72 <lib_get_magy>:

}


int lib_get_magy()
{
    9b72:	ff 92       	push	r15
    9b74:	0f 93       	push	r16
    9b76:	1f 93       	push	r17
   lib_thread** current_thread; 
  {_atomic_t test = _atomic_start();
    9b78:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9b7c:	f8 2e       	mov	r15, r24
   void (*fp)() = (void (*)(void))ADC_READ_MAGY;
   current_thread = lib_get_current_thread();    
    9b7e:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9b82:	8c 01       	movw	r16, r24
   fp(); 
    9b84:	ec e0       	ldi	r30, 0x0C	; 12
    9b86:	fd ee       	ldi	r31, 0xED	; 237
    9b88:	09 95       	icall
   
      
   _atomic_end(test);
    9b8a:	8f 2d       	mov	r24, r15
    9b8c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
  }
   return (*current_thread)->data.adcstate.adcreading;  
    9b90:	d8 01       	movw	r26, r16
    9b92:	ed 91       	ld	r30, X+
    9b94:	fc 91       	ld	r31, X
    9b96:	25 8d       	ldd	r18, Z+29	; 0x1d
    9b98:	36 8d       	ldd	r19, Z+30	; 0x1e
}
    9b9a:	c9 01       	movw	r24, r18
    9b9c:	1f 91       	pop	r17
    9b9e:	0f 91       	pop	r16
    9ba0:	ff 90       	pop	r15
    9ba2:	08 95       	ret

00009ba4 <lib_get_magx>:

}


int lib_get_magx()
{
    9ba4:	ff 92       	push	r15
    9ba6:	0f 93       	push	r16
    9ba8:	1f 93       	push	r17
   lib_thread** current_thread; 
   
   {_atomic_t test = _atomic_start();
    9baa:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9bae:	f8 2e       	mov	r15, r24
   
   void (*fp)() = (void (*)(void))ADC_READ_MAGX;
   current_thread = lib_get_current_thread();    
    9bb0:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9bb4:	8c 01       	movw	r16, r24
   fp(); 
    9bb6:	e8 e0       	ldi	r30, 0x08	; 8
    9bb8:	fd ee       	ldi	r31, 0xED	; 237
    9bba:	09 95       	icall
   
   _atomic_end(test);
    9bbc:	8f 2d       	mov	r24, r15
    9bbe:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
  }
   return (*current_thread)->data.adcstate.adcreading;  
    9bc2:	d8 01       	movw	r26, r16
    9bc4:	ed 91       	ld	r30, X+
    9bc6:	fc 91       	ld	r31, X
    9bc8:	25 8d       	ldd	r18, Z+29	; 0x1d
    9bca:	36 8d       	ldd	r19, Z+30	; 0x1e

}
    9bcc:	c9 01       	movw	r24, r18
    9bce:	1f 91       	pop	r17
    9bd0:	0f 91       	pop	r16
    9bd2:	ff 90       	pop	r15
    9bd4:	08 95       	ret

00009bd6 <getCurrentEEPROMInfo>:
{
   genericByteStorageHandle *currenteeprominfoaddr;

   void (*getaddrfp)(void) = (void (*)(void))GET_EEPROM_STRUCTURE_HANDLE;

   asm volatile("push r20" "\n\t"
    9bd6:	4f 93       	push	r20
    9bd8:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9bda:	e0 e8       	ldi	r30, 0x80	; 128
    9bdc:	fd ee       	ldi	r31, 0xED	; 237
    9bde:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9be0:	24 2f       	mov	r18, r20
    9be2:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (currenteeprominfoaddr)
				 :
                );
    asm volatile("pop r21" "\n\t"
    9be4:	5f 91       	pop	r21
    9be6:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currenteeprominfoaddr;
}
    9be8:	c9 01       	movw	r24, r18
    9bea:	08 95       	ret

00009bec <lib_writeToEEPROM>:


//Turn off the interrupt, access the location, and use system call to implement poll based implementation provided by avr libc

void lib_writeToEEPROM(uint16_t addr, uint16_t nBytes, uint8_t *buffer)
{
    9bec:	bf 92       	push	r11
    9bee:	cf 92       	push	r12
    9bf0:	df 92       	push	r13
    9bf2:	ef 92       	push	r14
    9bf4:	ff 92       	push	r15
    9bf6:	0f 93       	push	r16
    9bf8:	1f 93       	push	r17
    9bfa:	8c 01       	movw	r16, r24
    9bfc:	7b 01       	movw	r14, r22
    9bfe:	6a 01       	movw	r12, r20

	_atomic_t currentatomic;

	currentatomic = _atomic_start();
    9c00:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9c04:	b8 2e       	mov	r11, r24

    genericByteStorageHandle *eeprominfoaddr;
    eeprominfoaddr = getCurrentEEPROMInfo();
    9c06:	0e 94 eb 4d 	call	0x9bd6	; 0x9bd6 <getCurrentEEPROMInfo>
    9c0a:	fc 01       	movw	r30, r24

	void (*getaddrfp)(void) = (void (*)(void))WRITE_EEPROM_TASK;

    eeprominfoaddr-> addr = addr;
    9c0c:	11 83       	std	Z+1, r17	; 0x01
    9c0e:	00 83       	st	Z, r16
	  eeprominfoaddr-> nBytes = nBytes;
    9c10:	f3 82       	std	Z+3, r15	; 0x03
    9c12:	e2 82       	std	Z+2, r14	; 0x02
	  eeprominfoaddr-> buffer = buffer;
    9c14:	d5 82       	std	Z+5, r13	; 0x05
    9c16:	c4 82       	std	Z+4, r12	; 0x04


    getaddrfp();
    9c18:	e8 e8       	ldi	r30, 0x88	; 136
    9c1a:	fd ee       	ldi	r31, 0xED	; 237
    9c1c:	09 95       	icall

	_atomic_end(currentatomic);
    9c1e:	8b 2d       	mov	r24, r11
    9c20:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>


}
    9c24:	1f 91       	pop	r17
    9c26:	0f 91       	pop	r16
    9c28:	ff 90       	pop	r15
    9c2a:	ef 90       	pop	r14
    9c2c:	df 90       	pop	r13
    9c2e:	cf 90       	pop	r12
    9c30:	bf 90       	pop	r11
    9c32:	08 95       	ret

00009c34 <lib_read_from_eeprom>:


//Turn off the interrupt, access the location, and use system call to implement poll based imlementation provided by avr libc

void lib_read_from_eeprom(uint16_t addr, uint16_t nBytes, uint8_t *buffer)
{
    9c34:	bf 92       	push	r11
    9c36:	cf 92       	push	r12
    9c38:	df 92       	push	r13
    9c3a:	ef 92       	push	r14
    9c3c:	ff 92       	push	r15
    9c3e:	0f 93       	push	r16
    9c40:	1f 93       	push	r17
    9c42:	8c 01       	movw	r16, r24
    9c44:	7b 01       	movw	r14, r22
    9c46:	6a 01       	movw	r12, r20


	_atomic_t currentatomic;

	currentatomic = _atomic_start();
    9c48:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9c4c:	b8 2e       	mov	r11, r24


    genericByteStorageHandle *eeprominfoaddr;
    eeprominfoaddr = getCurrentEEPROMInfo();
    9c4e:	0e 94 eb 4d 	call	0x9bd6	; 0x9bd6 <getCurrentEEPROMInfo>
    9c52:	fc 01       	movw	r30, r24

	void (*getaddrfp)(void) = (void (*)(void))READ_EEPROM_TASK;

    eeprominfoaddr-> addr = addr;
    9c54:	11 83       	std	Z+1, r17	; 0x01
    9c56:	00 83       	st	Z, r16
   	eeprominfoaddr-> nBytes = nBytes;
    9c58:	f3 82       	std	Z+3, r15	; 0x03
    9c5a:	e2 82       	std	Z+2, r14	; 0x02
   	eeprominfoaddr-> buffer = buffer;
    9c5c:	d5 82       	std	Z+5, r13	; 0x05
    9c5e:	c4 82       	std	Z+4, r12	; 0x04


    getaddrfp();
    9c60:	e4 e8       	ldi	r30, 0x84	; 132
    9c62:	fd ee       	ldi	r31, 0xED	; 237
    9c64:	09 95       	icall

	_atomic_end(currentatomic);
    9c66:	8b 2d       	mov	r24, r11
    9c68:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    9c6c:	1f 91       	pop	r17
    9c6e:	0f 91       	pop	r16
    9c70:	ff 90       	pop	r15
    9c72:	ef 90       	pop	r14
    9c74:	df 90       	pop	r13
    9c76:	cf 90       	pop	r12
    9c78:	bf 90       	pop	r11
    9c7a:	08 95       	ret

00009c7c <lib_get_file_path_address>:

char *lib_get_file_path_address()
{
   char *pathaddr;
   void (*getaddrfp)(void) = (void (*)(void))GET_FILE_PATH_ADDRESS;
   asm volatile("push r20" "\n\t"
    9c7c:	4f 93       	push	r20
    9c7e:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9c80:	e0 e0       	ldi	r30, 0x00	; 0
    9c82:	fe ee       	ldi	r31, 0xEE	; 238
    9c84:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9c86:	24 2f       	mov	r18, r20
    9c88:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (pathaddr)
				 :);
    asm volatile("pop r21" "\n\t"
    9c8a:	5f 91       	pop	r21
    9c8c:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
    return pathaddr;
}
    9c8e:	c9 01       	movw	r24, r18
    9c90:	08 95       	ret

00009c92 <lib_get_file_mode_address>:
char *lib_get_file_mode_address()

{
   char *modeaddr;
   void (*getaddrfp)(void) = (void (*)(void))GET_FILE_MODE_ADDRESS;
   asm volatile("push r20" "\n\t"
    9c92:	4f 93       	push	r20
    9c94:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9c96:	e4 e0       	ldi	r30, 0x04	; 4
    9c98:	fe ee       	ldi	r31, 0xEE	; 238
    9c9a:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9c9c:	24 2f       	mov	r18, r20
    9c9e:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (modeaddr)
				 :);
    asm volatile("pop r21" "\n\t"
    9ca0:	5f 91       	pop	r21
    9ca2:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
    return modeaddr;
}
    9ca4:	c9 01       	movw	r24, r18
    9ca6:	08 95       	ret

00009ca8 <lib_open_file_syscall>:


void lib_open_file_syscall()
{
 void (*filefp)() = (void (*)(void))OPEN_FILE_SYSCALL;
 filefp();
    9ca8:	e8 e0       	ldi	r30, 0x08	; 8
    9caa:	fe ee       	ldi	r31, 0xEE	; 238
    9cac:	09 95       	icall
}
    9cae:	08 95       	ret

00009cb0 <lib_close_file_syscall>:


void lib_close_file_syscall()
{
 void (*filefp)() = (void (*)(void))CLOSE_FILE_SYSCALL;
 filefp();
    9cb0:	ec e0       	ldi	r30, 0x0C	; 12
    9cb2:	fe ee       	ldi	r31, 0xEE	; 238
    9cb4:	09 95       	icall
}
    9cb6:	08 95       	ret

00009cb8 <lib_read_file_syscall>:


void lib_read_file_syscall()
{
 void (*filefp)() = (void (*)(void))READ_FILE_SYSCALL;
 filefp();
    9cb8:	e0 e1       	ldi	r30, 0x10	; 16
    9cba:	fe ee       	ldi	r31, 0xEE	; 238
    9cbc:	09 95       	icall
}
    9cbe:	08 95       	ret

00009cc0 <lib_write_file_syscall>:


void lib_write_file_syscall()
{
 void (*filefp)() = (void (*)(void))WRITE_FILE_SYSCALL;
 filefp();
    9cc0:	e4 e1       	ldi	r30, 0x14	; 20
    9cc2:	fe ee       	ldi	r31, 0xEE	; 238
    9cc4:	09 95       	icall
}
    9cc6:	08 95       	ret

00009cc8 <lib_seek_file_syscall>:


void lib_seek_file_syscall()
{
 void (*filefp)() = (void (*)(void))SEEK_FILE_SYSCALL;
 filefp();
    9cc8:	e8 e1       	ldi	r30, 0x18	; 24
    9cca:	fe ee       	ldi	r31, 0xEE	; 238
    9ccc:	09 95       	icall
}
    9cce:	08 95       	ret

00009cd0 <lib_mfseek>:




void lib_mfseek(LIB_MYFILE *fp, int offset, int position)
{
    9cd0:	af 92       	push	r10
    9cd2:	bf 92       	push	r11
    9cd4:	cf 92       	push	r12
    9cd6:	df 92       	push	r13
    9cd8:	ef 92       	push	r14
    9cda:	ff 92       	push	r15
    9cdc:	0f 93       	push	r16
    9cde:	1f 93       	push	r17
    9ce0:	b8 2e       	mov	r11, r24
    9ce2:	a9 2e       	mov	r10, r25
    9ce4:	7b 01       	movw	r14, r22
    9ce6:	6a 01       	movw	r12, r20
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    9ce8:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9cec:	8c 01       	movw	r16, r24
   currentthreadindex = lib_get_current_thread_index();
    9cee:	0e 94 92 54 	call	0xa924	; 0xa924 <lib_get_current_thread_index>

   (*current_thread)->filedata.fileseekstate.fileptr = (uint8_t*)fp;
    9cf2:	d8 01       	movw	r26, r16
    9cf4:	ed 91       	ld	r30, X+
    9cf6:	fc 91       	ld	r31, X
    9cf8:	11 97       	sbiw	r26, 0x01	; 1
    9cfa:	8b 2d       	mov	r24, r11
    9cfc:	9a 2d       	mov	r25, r10
    9cfe:	92 a3       	std	Z+34, r25	; 0x22
    9d00:	81 a3       	std	Z+33, r24	; 0x21
   (*current_thread)->filedata.fileseekstate.offset = offset;
    9d02:	ed 91       	ld	r30, X+
    9d04:	fc 91       	ld	r31, X
    9d06:	11 97       	sbiw	r26, 0x01	; 1
    9d08:	f4 a2       	std	Z+36, r15	; 0x24
    9d0a:	e3 a2       	std	Z+35, r14	; 0x23
   (*current_thread)->filedata.fileseekstate.position = position;
    9d0c:	ed 91       	ld	r30, X+
    9d0e:	fc 91       	ld	r31, X
    9d10:	d6 a2       	std	Z+38, r13	; 0x26
    9d12:	c5 a2       	std	Z+37, r12	; 0x25


void lib_seek_file_syscall()
{
 void (*filefp)() = (void (*)(void))SEEK_FILE_SYSCALL;
 filefp();
    9d14:	e8 e1       	ldi	r30, 0x18	; 24
    9d16:	fe ee       	ldi	r31, 0xEE	; 238
    9d18:	09 95       	icall

   return;



}
    9d1a:	1f 91       	pop	r17
    9d1c:	0f 91       	pop	r16
    9d1e:	ff 90       	pop	r15
    9d20:	ef 90       	pop	r14
    9d22:	df 90       	pop	r13
    9d24:	cf 90       	pop	r12
    9d26:	bf 90       	pop	r11
    9d28:	af 90       	pop	r10
    9d2a:	08 95       	ret

00009d2c <lib_mfwrite>:
}



void lib_mfwrite(LIB_MYFILE *fp, void *buffer, int nBytes)
{
    9d2c:	af 92       	push	r10
    9d2e:	bf 92       	push	r11
    9d30:	cf 92       	push	r12
    9d32:	df 92       	push	r13
    9d34:	ef 92       	push	r14
    9d36:	ff 92       	push	r15
    9d38:	0f 93       	push	r16
    9d3a:	1f 93       	push	r17
    9d3c:	f8 2e       	mov	r15, r24
    9d3e:	e9 2e       	mov	r14, r25
    9d40:	d6 2e       	mov	r13, r22
    9d42:	c7 2e       	mov	r12, r23
    9d44:	b4 2e       	mov	r11, r20
    9d46:	a5 2e       	mov	r10, r21
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    9d48:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9d4c:	8c 01       	movw	r16, r24
   currentthreadindex = lib_get_current_thread_index();
    9d4e:	0e 94 92 54 	call	0xa924	; 0xa924 <lib_get_current_thread_index>
  
     
  


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
    9d52:	d8 01       	movw	r26, r16
    9d54:	ed 91       	ld	r30, X+
    9d56:	fc 91       	ld	r31, X
    9d58:	11 97       	sbiw	r26, 0x01	; 1
    9d5a:	8f 2d       	mov	r24, r15
    9d5c:	9e 2d       	mov	r25, r14
    9d5e:	92 a3       	std	Z+34, r25	; 0x22
    9d60:	81 a3       	std	Z+33, r24	; 0x21
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
    9d62:	ed 91       	ld	r30, X+
    9d64:	fc 91       	ld	r31, X
    9d66:	11 97       	sbiw	r26, 0x01	; 1
    9d68:	8d 2d       	mov	r24, r13
    9d6a:	9c 2d       	mov	r25, r12
    9d6c:	94 a3       	std	Z+36, r25	; 0x24
    9d6e:	83 a3       	std	Z+35, r24	; 0x23
   (*current_thread)->filedata.filestate.bytes = nBytes;
    9d70:	ed 91       	ld	r30, X+
    9d72:	fc 91       	ld	r31, X
    9d74:	8b 2d       	mov	r24, r11
    9d76:	9a 2d       	mov	r25, r10
    9d78:	96 a3       	std	Z+38, r25	; 0x26
    9d7a:	85 a3       	std	Z+37, r24	; 0x25


void lib_write_file_syscall()
{
 void (*filefp)() = (void (*)(void))WRITE_FILE_SYSCALL;
 filefp();
    9d7c:	e4 e1       	ldi	r30, 0x14	; 20
    9d7e:	fe ee       	ldi	r31, 0xEE	; 238
    9d80:	09 95       	icall
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
   (*current_thread)->filedata.filestate.bytes = nBytes;

   lib_write_file_syscall();

   lib_file_barrier_block(7, 4);
    9d82:	87 e0       	ldi	r24, 0x07	; 7
    9d84:	64 e0       	ldi	r22, 0x04	; 4
    9d86:	0e 94 f2 54 	call	0xa9e4	; 0xa9e4 <lib_file_barrier_block>
   
   
 

   return;
}
    9d8a:	1f 91       	pop	r17
    9d8c:	0f 91       	pop	r16
    9d8e:	ff 90       	pop	r15
    9d90:	ef 90       	pop	r14
    9d92:	df 90       	pop	r13
    9d94:	cf 90       	pop	r12
    9d96:	bf 90       	pop	r11
    9d98:	af 90       	pop	r10
    9d9a:	08 95       	ret

00009d9c <lib_mfwrite_withoutlength>:


void lib_mfwrite_withoutlength(LIB_MYFILE *fp, void *buffer)
{
    9d9c:	ef 92       	push	r14
    9d9e:	ff 92       	push	r15
    9da0:	0f 93       	push	r16
    9da2:	1f 93       	push	r17
    9da4:	8c 01       	movw	r16, r24
    9da6:	7b 01       	movw	r14, r22


   uint8_t length;

   length = (uint8_t)lib_string_length((char*)buffer);
    9da8:	cb 01       	movw	r24, r22
    9daa:	0e 94 49 53 	call	0xa692	; 0xa692 <lib_string_length>
    9dae:	48 2f       	mov	r20, r24

   lib_mfwrite(fp, buffer, length);
    9db0:	c8 01       	movw	r24, r16
    9db2:	b7 01       	movw	r22, r14
    9db4:	50 e0       	ldi	r21, 0x00	; 0
    9db6:	0e 94 96 4e 	call	0x9d2c	; 0x9d2c <lib_mfwrite>

   return;
}
    9dba:	1f 91       	pop	r17
    9dbc:	0f 91       	pop	r16
    9dbe:	ff 90       	pop	r15
    9dc0:	ef 90       	pop	r14
    9dc2:	08 95       	ret

00009dc4 <lib_mfread>:
   return;

}

void lib_mfread(LIB_MYFILE *fp, void *buffer, int nBytes)
{
    9dc4:	af 92       	push	r10
    9dc6:	bf 92       	push	r11
    9dc8:	cf 92       	push	r12
    9dca:	df 92       	push	r13
    9dcc:	ef 92       	push	r14
    9dce:	ff 92       	push	r15
    9dd0:	0f 93       	push	r16
    9dd2:	1f 93       	push	r17
    9dd4:	f8 2e       	mov	r15, r24
    9dd6:	e9 2e       	mov	r14, r25
    9dd8:	d6 2e       	mov	r13, r22
    9dda:	c7 2e       	mov	r12, r23
    9ddc:	b4 2e       	mov	r11, r20
    9dde:	a5 2e       	mov	r10, r21
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    9de0:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9de4:	8c 01       	movw	r16, r24
   currentthreadindex = lib_get_current_thread_index();
    9de6:	0e 94 92 54 	call	0xa924	; 0xa924 <lib_get_current_thread_index>


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
    9dea:	d8 01       	movw	r26, r16
    9dec:	ed 91       	ld	r30, X+
    9dee:	fc 91       	ld	r31, X
    9df0:	11 97       	sbiw	r26, 0x01	; 1
    9df2:	8f 2d       	mov	r24, r15
    9df4:	9e 2d       	mov	r25, r14
    9df6:	92 a3       	std	Z+34, r25	; 0x22
    9df8:	81 a3       	std	Z+33, r24	; 0x21
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
    9dfa:	ed 91       	ld	r30, X+
    9dfc:	fc 91       	ld	r31, X
    9dfe:	11 97       	sbiw	r26, 0x01	; 1
    9e00:	8d 2d       	mov	r24, r13
    9e02:	9c 2d       	mov	r25, r12
    9e04:	94 a3       	std	Z+36, r25	; 0x24
    9e06:	83 a3       	std	Z+35, r24	; 0x23
   (*current_thread)->filedata.filestate.bytes = nBytes;
    9e08:	ed 91       	ld	r30, X+
    9e0a:	fc 91       	ld	r31, X
    9e0c:	8b 2d       	mov	r24, r11
    9e0e:	9a 2d       	mov	r25, r10
    9e10:	96 a3       	std	Z+38, r25	; 0x26
    9e12:	85 a3       	std	Z+37, r24	; 0x25


void lib_read_file_syscall()
{
 void (*filefp)() = (void (*)(void))READ_FILE_SYSCALL;
 filefp();
    9e14:	e0 e1       	ldi	r30, 0x10	; 16
    9e16:	fe ee       	ldi	r31, 0xEE	; 238
    9e18:	09 95       	icall
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
   (*current_thread)->filedata.filestate.bytes = nBytes;

   lib_read_file_syscall();

   lib_file_barrier_block(7, 3);
    9e1a:	87 e0       	ldi	r24, 0x07	; 7
    9e1c:	63 e0       	ldi	r22, 0x03	; 3
    9e1e:	0e 94 f2 54 	call	0xa9e4	; 0xa9e4 <lib_file_barrier_block>

   return;

}
    9e22:	1f 91       	pop	r17
    9e24:	0f 91       	pop	r16
    9e26:	ff 90       	pop	r15
    9e28:	ef 90       	pop	r14
    9e2a:	df 90       	pop	r13
    9e2c:	cf 90       	pop	r12
    9e2e:	bf 90       	pop	r11
    9e30:	af 90       	pop	r10
    9e32:	08 95       	ret

00009e34 <lib_mfclose>:
}



void lib_mfclose(LIB_MYFILE *fp)
{
    9e34:	ef 92       	push	r14
    9e36:	ff 92       	push	r15
    9e38:	0f 93       	push	r16
    9e3a:	1f 93       	push	r17
    9e3c:	f8 2e       	mov	r15, r24
    9e3e:	e9 2e       	mov	r14, r25
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    9e40:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9e44:	8c 01       	movw	r16, r24
   currentthreadindex = lib_get_current_thread_index();
    9e46:	0e 94 92 54 	call	0xa924	; 0xa924 <lib_get_current_thread_index>


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
    9e4a:	d8 01       	movw	r26, r16
    9e4c:	ed 91       	ld	r30, X+
    9e4e:	fc 91       	ld	r31, X
    9e50:	8f 2d       	mov	r24, r15
    9e52:	9e 2d       	mov	r25, r14
    9e54:	92 a3       	std	Z+34, r25	; 0x22
    9e56:	81 a3       	std	Z+33, r24	; 0x21


void lib_close_file_syscall()
{
 void (*filefp)() = (void (*)(void))CLOSE_FILE_SYSCALL;
 filefp();
    9e58:	ec e0       	ldi	r30, 0x0C	; 12
    9e5a:	fe ee       	ldi	r31, 0xEE	; 238
    9e5c:	09 95       	icall


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
   lib_close_file_syscall();

   lib_file_barrier_block(7, 2);
    9e5e:	87 e0       	ldi	r24, 0x07	; 7
    9e60:	62 e0       	ldi	r22, 0x02	; 2
    9e62:	0e 94 f2 54 	call	0xa9e4	; 0xa9e4 <lib_file_barrier_block>

   return;

}
    9e66:	1f 91       	pop	r17
    9e68:	0f 91       	pop	r16
    9e6a:	ff 90       	pop	r15
    9e6c:	ef 90       	pop	r14
    9e6e:	08 95       	ret

00009e70 <lib_mfopen>:




LIB_MYFILE *lib_mfopen(const char *pathname, const char *mode)
{
    9e70:	8f 92       	push	r8
    9e72:	9f 92       	push	r9
    9e74:	af 92       	push	r10
    9e76:	bf 92       	push	r11
    9e78:	cf 92       	push	r12
    9e7a:	df 92       	push	r13
    9e7c:	ef 92       	push	r14
    9e7e:	ff 92       	push	r15
    9e80:	0f 93       	push	r16
    9e82:	1f 93       	push	r17
    9e84:	6c 01       	movw	r12, r24
    9e86:	5b 01       	movw	r10, r22
   uint8_t currentthreadindex;

   lib_thread** current_thread;


   current_thread = lib_get_current_thread();
    9e88:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9e8c:	4c 01       	movw	r8, r24

   currentthreadindex = lib_get_current_thread_index();
    9e8e:	0e 94 92 54 	call	0xa924	; 0xa924 <lib_get_current_thread_index>

   commonpathnameaddr =  lib_get_file_path_address();
    9e92:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <lib_get_file_path_address>
    9e96:	8c 01       	movw	r16, r24

   commonmodeaddr = lib_get_file_mode_address();
    9e98:	0e 94 49 4e 	call	0x9c92	; 0x9c92 <lib_get_file_mode_address>
    9e9c:	7c 01       	movw	r14, r24


   lib_mystrcpy(commonpathnameaddr, pathname);
    9e9e:	c8 01       	movw	r24, r16
    9ea0:	b6 01       	movw	r22, r12
    9ea2:	0e 94 74 53 	call	0xa6e8	; 0xa6e8 <lib_mystrcpy>
   lib_mystrcpy(commonmodeaddr, mode);
    9ea6:	c7 01       	movw	r24, r14
    9ea8:	b5 01       	movw	r22, r10
    9eaa:	0e 94 74 53 	call	0xa6e8	; 0xa6e8 <lib_mystrcpy>


void lib_open_file_syscall()
{
 void (*filefp)() = (void (*)(void))OPEN_FILE_SYSCALL;
 filefp();
    9eae:	e8 e0       	ldi	r30, 0x08	; 8
    9eb0:	fe ee       	ldi	r31, 0xEE	; 238
    9eb2:	09 95       	icall
   lib_mystrcpy(commonpathnameaddr, pathname);
   lib_mystrcpy(commonmodeaddr, mode);

   lib_open_file_syscall();

   lib_file_barrier_block(7, 1);
    9eb4:	87 e0       	ldi	r24, 0x07	; 7
    9eb6:	61 e0       	ldi	r22, 0x01	; 1
    9eb8:	0e 94 f2 54 	call	0xa9e4	; 0xa9e4 <lib_file_barrier_block>

   return (LIB_MYFILE *)((*current_thread)->filedata.filestate.fileptr);
    9ebc:	d4 01       	movw	r26, r8
    9ebe:	ed 91       	ld	r30, X+
    9ec0:	fc 91       	ld	r31, X
    9ec2:	21 a1       	ldd	r18, Z+33	; 0x21
    9ec4:	32 a1       	ldd	r19, Z+34	; 0x22
}
    9ec6:	c9 01       	movw	r24, r18
    9ec8:	1f 91       	pop	r17
    9eca:	0f 91       	pop	r16
    9ecc:	ff 90       	pop	r15
    9ece:	ef 90       	pop	r14
    9ed0:	df 90       	pop	r13
    9ed2:	cf 90       	pop	r12
    9ed4:	bf 90       	pop	r11
    9ed6:	af 90       	pop	r10
    9ed8:	9f 90       	pop	r9
    9eda:	8f 90       	pop	r8
    9edc:	08 95       	ret

00009ede <lib_green_toggle>:
#include "liteoscommon.h"
#include "../types/types.h"
void lib_green_toggle()
{
 void (*greenfp)() = (void (*)(void))GREEN_LED_TOGGLE_FUNCTION; 
 greenfp();                              
    9ede:	e8 e8       	ldi	r30, 0x88	; 136
    9ee0:	fc ee       	ldi	r31, 0xEC	; 236
    9ee2:	09 95       	icall



}
    9ee4:	08 95       	ret

00009ee6 <lib_red_toggle>:

void lib_red_toggle()
{
                          
  void (*redfp)() = (void (*)(void))RED_LED_TOGGLE_FUNCTION; 
  redfp();    
    9ee6:	e0 e8       	ldi	r30, 0x80	; 128
    9ee8:	fc ee       	ldi	r31, 0xEC	; 236
    9eea:	09 95       	icall
}
    9eec:	08 95       	ret

00009eee <lib_yellow_toggle>:

void lib_yellow_toggle()
{
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_TOGGLE_FUNCTION; 
  yellowfp();    
    9eee:	e4 e8       	ldi	r30, 0x84	; 132
    9ef0:	fc ee       	ldi	r31, 0xEC	; 236
    9ef2:	09 95       	icall
}
    9ef4:	08 95       	ret

00009ef6 <lib_red_on>:

void lib_red_on()
{
                          
  void (*redfp)() = (void (*)(void))RED_ON_FUNCTION; 
  redfp();    
    9ef6:	ec e8       	ldi	r30, 0x8C	; 140
    9ef8:	fc ee       	ldi	r31, 0xEC	; 236
    9efa:	09 95       	icall
}
    9efc:	08 95       	ret

00009efe <lib_red_off>:

void lib_red_off()
{
                          
  void (*redfp)() = (void (*)(void))RED_OFF_FUNCTION; 
  redfp();    
    9efe:	e0 e9       	ldi	r30, 0x90	; 144
    9f00:	fc ee       	ldi	r31, 0xEC	; 236
    9f02:	09 95       	icall
}
    9f04:	08 95       	ret

00009f06 <lib_green_on>:

void lib_green_on()
{
                          
  void (*greenfp)() = (void (*)(void))GREEN_ON_FUNCTION; 
  greenfp();    
    9f06:	ec e9       	ldi	r30, 0x9C	; 156
    9f08:	fc ee       	ldi	r31, 0xEC	; 236
    9f0a:	09 95       	icall
}
    9f0c:	08 95       	ret

00009f0e <lib_green_off>:

void lib_green_off()
{
                          
  void (*greenfp)() = (void (*)(void))GREEN_OFF_FUNCTION; 
  greenfp();    
    9f0e:	e0 ea       	ldi	r30, 0xA0	; 160
    9f10:	fc ee       	ldi	r31, 0xEC	; 236
    9f12:	09 95       	icall
}
    9f14:	08 95       	ret

00009f16 <lib_yellow_on>:

void lib_yellow_on()
{
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_ON_FUNCTION; 
  yellowfp();    
    9f16:	e4 e9       	ldi	r30, 0x94	; 148
    9f18:	fc ee       	ldi	r31, 0xEC	; 236
    9f1a:	09 95       	icall
}
    9f1c:	08 95       	ret

00009f1e <lib_yellow_off>:

void lib_yellow_off()
{
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_OFF_FUNCTION; 
  yellowfp();    
    9f1e:	e8 e9       	ldi	r30, 0x98	; 152
    9f20:	fc ee       	ldi	r31, 0xEC	; 236
    9f22:	09 95       	icall
}
    9f24:	08 95       	ret

00009f26 <lib_radio_send_msg_syscall>:
lib_thread* mythread;

void lib_radio_send_msg_syscall()
{
 void (*radiosendfp)() = (void (*)(void))SOCKET_RADIO_SEND_FUNCTION;
 radiosendfp();
    9f26:	e0 e1       	ldi	r30, 0x10	; 16
    9f28:	fc ee       	ldi	r31, 0xEC	; 236
    9f2a:	09 95       	icall
}
    9f2c:	08 95       	ret

00009f2e <lib_get_current_radio_receive_handle_addr>:
{
   radiohandletype *currentradioinfo;

   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_RADIO_RECEIVER_BUFFER;

   asm volatile("push r20" "\n\t"
    9f2e:	4f 93       	push	r20
    9f30:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9f32:	e4 e1       	ldi	r30, 0x14	; 20
    9f34:	fc ee       	ldi	r31, 0xEC	; 236
    9f36:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9f38:	24 2f       	mov	r18, r20
    9f3a:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (currentradioinfo)
				 :
                );
    asm volatile("pop r21" "\n\t"
    9f3c:	5f 91       	pop	r21
    9f3e:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currentradioinfo;
}
    9f40:	c9 01       	movw	r24, r18
    9f42:	08 95       	ret

00009f44 <lib_radio_set_freq>:
void lib_radio_set_freq(uint16_t freq)
{

   void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_FREQ_FUNCTION;

   asm volatile("push r20" "\n\t"
    9f44:	4f 93       	push	r20
    9f46:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);

   asm volatile(" mov r20, %A0" "\n\t"
    9f48:	48 2f       	mov	r20, r24
    9f4a:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (freq)
                );
   getaddrfp();
    9f4c:	e0 e0       	ldi	r30, 0x00	; 0
    9f4e:	fc ee       	ldi	r31, 0xEC	; 236
    9f50:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    9f52:	5f 91       	pop	r21
    9f54:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    9f56:	08 95       	ret

00009f58 <lib_radio_set_channel>:

  uint16_t maskchannel = channel;

  void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_CHANNEL_FUNCTION;

  asm volatile("push r20" "\n\t"
    9f58:	4f 93       	push	r20
    9f5a:	5f 93       	push	r21
               "push r21" "\n\t"
               ::);

  asm volatile(" mov r20, %A0" "\n\t"
    9f5c:	90 e0       	ldi	r25, 0x00	; 0
    9f5e:	48 2f       	mov	r20, r24
    9f60:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (maskchannel)
                );
   getaddrfp();
    9f62:	e4 e0       	ldi	r30, 0x04	; 4
    9f64:	fc ee       	ldi	r31, 0xEC	; 236
    9f66:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    9f68:	5f 91       	pop	r21
    9f6a:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    9f6c:	08 95       	ret

00009f6e <lib_radio_set_power>:

  uint16_t maskchannel = power;

  void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_POWER_FUNCTION;

  asm volatile("push r20" "\n\t"
    9f6e:	4f 93       	push	r20
    9f70:	5f 93       	push	r21
               "push r21" "\n\t"
               ::);

  asm volatile(" mov r20, %A0" "\n\t"
    9f72:	90 e0       	ldi	r25, 0x00	; 0
    9f74:	48 2f       	mov	r20, r24
    9f76:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (maskchannel)
                );
   getaddrfp();
    9f78:	e8 e0       	ldi	r30, 0x08	; 8
    9f7a:	fc ee       	ldi	r31, 0xEC	; 236
    9f7c:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    9f7e:	5f 91       	pop	r21
    9f80:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    9f82:	08 95       	ret

00009f84 <lib_get_current_radio_send_addr>:

radioinfotype *lib_get_current_radio_send_addr()
{
   radioinfotype *currentradioinfo;
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_RADIO_SENDER_BUFFER;
   asm volatile("push r20" "\n\t"
    9f84:	4f 93       	push	r20
    9f86:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9f88:	ec e0       	ldi	r30, 0x0C	; 12
    9f8a:	fc ee       	ldi	r31, 0xEC	; 236
    9f8c:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9f8e:	24 2f       	mov	r18, r20
    9f90:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (currentradioinfo)
				 :
                );
    asm volatile("pop r21" "\n\t"
    9f92:	5f 91       	pop	r21
    9f94:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currentradioinfo;
}
    9f96:	c9 01       	movw	r24, r18
    9f98:	08 95       	ret

00009f9a <lib_radio_send_energy_wrapper>:
void lib_radio_send_energy_wrapper(uint16_t port, uint16_t address, uint8_t length, uint8_t *msg){
	 
	  
	    lib_thread** current_thread;
	  
      current_thread = lib_get_current_thread();      
    9f9a:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
     // }
      
    
    
    // radioSend(port, address, length, msg); 
}
    9f9e:	08 95       	ret

00009fa0 <lib_radio_receive_timed>:
{
   return lib_radio_receive_timed(port, maxlength, msg, 0);
}

int lib_radio_receive_timed(uint16_t port, uint8_t maxlength, uint8_t *msg, uint16_t time)
{
    9fa0:	af 92       	push	r10
    9fa2:	bf 92       	push	r11
    9fa4:	df 92       	push	r13
    9fa6:	ef 92       	push	r14
    9fa8:	ff 92       	push	r15
    9faa:	0f 93       	push	r16
    9fac:	1f 93       	push	r17
    9fae:	cf 93       	push	r28
    9fb0:	df 93       	push	r29
    9fb2:	8c 01       	movw	r16, r24
    9fb4:	d6 2e       	mov	r13, r22
    9fb6:	ea 01       	movw	r28, r20
    9fb8:	59 01       	movw	r10, r18
   _atomic_t currentatomic;
   
   void (*radio_register_function_pointer)(void) = (void (*)(void))REGISTER_RADIO_RECEIVE_EVENT;
   lib_thread** current_thread = lib_get_current_thread();
    9fba:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    9fbe:	7c 01       	movw	r14, r24
   radiohandletype *radiohandleaddr = lib_get_current_radio_receive_handle_addr();
    9fc0:	0e 94 97 4f 	call	0x9f2e	; 0x9f2e <lib_get_current_radio_receive_handle_addr>
    9fc4:	fc 01       	movw	r30, r24

   //set up the radiohandleaddr data structures

   radiohandleaddr->port = port;
    9fc6:	11 83       	std	Z+1, r17	; 0x01
    9fc8:	00 83       	st	Z, r16
   radiohandleaddr->maxLength = 32;
    9fca:	80 e2       	ldi	r24, 0x20	; 32
    9fcc:	82 83       	std	Z+2, r24	; 0x02
   radiohandleaddr->dataReady = &radioReceiveDataReady;
    9fce:	89 e7       	ldi	r24, 0x79	; 121
    9fd0:	99 e0       	ldi	r25, 0x09	; 9
    9fd2:	94 83       	std	Z+4, r25	; 0x04
    9fd4:	83 83       	std	Z+3, r24	; 0x03
   radiohandleaddr->data = buffer;
    9fd6:	89 eb       	ldi	r24, 0xB9	; 185
    9fd8:	93 e0       	ldi	r25, 0x03	; 3
    9fda:	96 83       	std	Z+6, r25	; 0x06
    9fdc:	85 83       	std	Z+5, r24	; 0x05
   radiohandleaddr->packetinfo = radioReceivePacketInfo;
    9fde:	8a e7       	ldi	r24, 0x7A	; 122
    9fe0:	99 e0       	ldi	r25, 0x09	; 9
    9fe2:	90 87       	std	Z+8, r25	; 0x08
    9fe4:	87 83       	std	Z+7, r24	; 0x07
   radiohandleaddr->handlefunc = lib_wakeup_mythread;
    9fe6:	86 e7       	ldi	r24, 0x76	; 118
    9fe8:	90 e5       	ldi	r25, 0x50	; 80
    9fea:	93 87       	std	Z+11, r25	; 0x0b
    9fec:	82 87       	std	Z+10, r24	; 0x0a

	//close the interrupt
	currentatomic = _atomic_start();
    9fee:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    9ff2:	18 2f       	mov	r17, r24
	
	//call the radio handle set to store the data structure into the handle vectors
	radio_register_function_pointer();
    9ff4:	e8 e1       	ldi	r30, 0x18	; 24
    9ff6:	fc ee       	ldi	r31, 0xEC	; 236
    9ff8:	09 95       	icall

	//set up the current thread into sleep mode
   (*current_thread)->state = STATE_SLEEP;
    9ffa:	d7 01       	movw	r26, r14
    9ffc:	ed 91       	ld	r30, X+
    9ffe:	fc 91       	ld	r31, X
    a000:	11 97       	sbiw	r26, 0x01	; 1
    a002:	85 e0       	ldi	r24, 0x05	; 5
    a004:	82 83       	std	Z+2, r24	; 0x02

	//set up mythread so that later can wake up this thread
	mythread = *current_thread;
    a006:	8d 91       	ld	r24, X+
    a008:	9c 91       	ld	r25, X
    a00a:	90 93 78 09 	sts	0x0978, r25
    a00e:	80 93 77 09 	sts	0x0977, r24

	//open the interrupt
	_atomic_end(currentatomic);
    a012:	81 2f       	mov	r24, r17
    a014:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>

	if (time == 0)
    a018:	a1 14       	cp	r10, r1
    a01a:	b1 04       	cpc	r11, r1
    a01c:	29 f5       	brne	.+74     	; 0xa068 <lib_radio_receive_timed+0xc8>
		lib_yield();
    a01e:	0e 94 c8 54 	call	0xa990	; 0xa990 <lib_yield>
	else
		lib_sleep_thread(time);
	
	uint8_t i;
	for (i = 0; i < maxlength && i < 32; i++)
    a022:	dd 20       	and	r13, r13
    a024:	a1 f0       	breq	.+40     	; 0xa04e <lib_radio_receive_timed+0xae>
    a026:	20 e0       	ldi	r18, 0x00	; 0
    a028:	30 e0       	ldi	r19, 0x00	; 0
    a02a:	05 c0       	rjmp	.+10     	; 0xa036 <lib_radio_receive_timed+0x96>
    a02c:	2f 5f       	subi	r18, 0xFF	; 255
    a02e:	3f 4f       	sbci	r19, 0xFF	; 255
    a030:	20 32       	cpi	r18, 0x20	; 32
    a032:	31 05       	cpc	r19, r1
    a034:	61 f0       	breq	.+24     	; 0xa04e <lib_radio_receive_timed+0xae>
		msg[i] = buffer[i];
    a036:	de 01       	movw	r26, r28
    a038:	a2 0f       	add	r26, r18
    a03a:	b3 1f       	adc	r27, r19
    a03c:	f9 01       	movw	r30, r18
    a03e:	e7 54       	subi	r30, 0x47	; 71
    a040:	fc 4f       	sbci	r31, 0xFC	; 252
    a042:	80 81       	ld	r24, Z
    a044:	8c 93       	st	X, r24
		lib_yield();
	else
		lib_sleep_thread(time);
	
	uint8_t i;
	for (i = 0; i < maxlength && i < 32; i++)
    a046:	82 2f       	mov	r24, r18
    a048:	8f 5f       	subi	r24, 0xFF	; 255
    a04a:	8d 15       	cp	r24, r13
    a04c:	78 f3       	brcs	.-34     	; 0xa02c <lib_radio_receive_timed+0x8c>
		msg[i] = buffer[i];

	return radioReceiveDataReady;
}
    a04e:	80 91 79 09 	lds	r24, 0x0979
    a052:	90 e0       	ldi	r25, 0x00	; 0
    a054:	df 91       	pop	r29
    a056:	cf 91       	pop	r28
    a058:	1f 91       	pop	r17
    a05a:	0f 91       	pop	r16
    a05c:	ff 90       	pop	r15
    a05e:	ef 90       	pop	r14
    a060:	df 90       	pop	r13
    a062:	bf 90       	pop	r11
    a064:	af 90       	pop	r10
    a066:	08 95       	ret
	_atomic_end(currentatomic);

	if (time == 0)
		lib_yield();
	else
		lib_sleep_thread(time);
    a068:	c5 01       	movw	r24, r10
    a06a:	0e 94 a7 54 	call	0xa94e	; 0xa94e <lib_sleep_thread>
    a06e:	d9 cf       	rjmp	.-78     	; 0xa022 <lib_radio_receive_timed+0x82>

0000a070 <lib_radio_receive>:
  syscall_post_thread_task();
}

int lib_radio_receive(uint16_t port, uint8_t maxlength, uint8_t *msg)
{
   return lib_radio_receive_timed(port, maxlength, msg, 0);
    a070:	20 e0       	ldi	r18, 0x00	; 0
    a072:	30 e0       	ldi	r19, 0x00	; 0
    a074:	0e 94 d0 4f 	call	0x9fa0	; 0x9fa0 <lib_radio_receive_timed>
}
    a078:	08 95       	ret

0000a07a <lib_radio_send_msg>:




void lib_radio_send_msg(uint16_t port, uint16_t address, uint8_t length, uint8_t *msg)
{
    a07a:	bf 92       	push	r11
    a07c:	cf 92       	push	r12
    a07e:	df 92       	push	r13
    a080:	ef 92       	push	r14
    a082:	ff 92       	push	r15
    a084:	0f 93       	push	r16
    a086:	1f 93       	push	r17
    a088:	8c 01       	movw	r16, r24
    a08a:	7b 01       	movw	r14, r22
    a08c:	b4 2e       	mov	r11, r20
    a08e:	69 01       	movw	r12, r18
   lib_thread** current_thread;
   radioinfotype *radioinfoaddr;



   current_thread = lib_get_current_thread();
    a090:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
   radioinfoaddr = lib_get_current_radio_send_addr();
    a094:	0e 94 c2 4f 	call	0x9f84	; 0x9f84 <lib_get_current_radio_send_addr>
    a098:	fc 01       	movw	r30, r24


   radioinfoaddr-> socket_port = port;
    a09a:	11 83       	std	Z+1, r17	; 0x01
    a09c:	00 83       	st	Z, r16
   radioinfoaddr->socket_addr = address;
    a09e:	f3 82       	std	Z+3, r15	; 0x03
    a0a0:	e2 82       	std	Z+2, r14	; 0x02
   radioinfoaddr->socket_msg_len  = length;
    a0a2:	b4 82       	std	Z+4, r11	; 0x04
   radioinfoaddr->socket_msg  = msg;
    a0a4:	d6 82       	std	Z+6, r13	; 0x06
    a0a6:	c5 82       	std	Z+5, r12	; 0x05
lib_thread* mythread;

void lib_radio_send_msg_syscall()
{
 void (*radiosendfp)() = (void (*)(void))SOCKET_RADIO_SEND_FUNCTION;
 radiosendfp();
    a0a8:	e0 e1       	ldi	r30, 0x10	; 16
    a0aa:	fc ee       	ldi	r31, 0xEC	; 236
    a0ac:	09 95       	icall
   radioinfoaddr->socket_addr = address;
   radioinfoaddr->socket_msg_len  = length;
   radioinfoaddr->socket_msg  = msg;
   lib_radio_send_msg_syscall();

   lib_sleep_thread(20);
    a0ae:	84 e1       	ldi	r24, 0x14	; 20
    a0b0:	90 e0       	ldi	r25, 0x00	; 0
    a0b2:	0e 94 a7 54 	call	0xa94e	; 0xa94e <lib_sleep_thread>

 

   return;
}
    a0b6:	1f 91       	pop	r17
    a0b8:	0f 91       	pop	r16
    a0ba:	ff 90       	pop	r15
    a0bc:	ef 90       	pop	r14
    a0be:	df 90       	pop	r13
    a0c0:	cf 90       	pop	r12
    a0c2:	bf 90       	pop	r11
    a0c4:	08 95       	ret

0000a0c6 <lib_radio_send_integer_u16>:
{
  uint8_t temp1,temp2;
  temp1 = (uint8_t) (value >> 8);
  temp2 = (uint8_t) (value & 0x00ff);

  buffer[0] = temp1;
    a0c6:	90 93 b9 03 	sts	0x03B9, r25
  buffer[1] = temp2;
    a0ca:	80 93 ba 03 	sts	0x03BA, r24
  buffer[2] = buffer[3] = 0xee;
    a0ce:	8e ee       	ldi	r24, 0xEE	; 238
    a0d0:	80 93 bc 03 	sts	0x03BC, r24
    a0d4:	80 93 bb 03 	sts	0x03BB, r24

  return lib_radio_send_msg(12, 0xffff, 16, buffer);
    a0d8:	8c e0       	ldi	r24, 0x0C	; 12
    a0da:	90 e0       	ldi	r25, 0x00	; 0
    a0dc:	6f ef       	ldi	r22, 0xFF	; 255
    a0de:	7f ef       	ldi	r23, 0xFF	; 255
    a0e0:	40 e1       	ldi	r20, 0x10	; 16
    a0e2:	29 eb       	ldi	r18, 0xB9	; 185
    a0e4:	33 e0       	ldi	r19, 0x03	; 3
    a0e6:	0e 94 3d 50 	call	0xa07a	; 0xa07a <lib_radio_send_msg>
}
    a0ea:	08 95       	ret

0000a0ec <lib_wakeup_mythread>:

//wakeup the current thread once an incoming packet arrives

void lib_wakeup_mythread()
{
  mythread->state = STATE_ACTIVE;
    a0ec:	e0 91 77 09 	lds	r30, 0x0977
    a0f0:	f0 91 78 09 	lds	r31, 0x0978
    a0f4:	82 e0       	ldi	r24, 0x02	; 2
    a0f6:	82 83       	std	Z+2, r24	; 0x02
  syscall_post_thread_task();
    a0f8:	0e 94 cc 54 	call	0xa998	; 0xa998 <syscall_post_thread_task>
}
    a0fc:	08 95       	ret

0000a0fe <lib_radio_send_string>:
}

//This function sends out a string

void lib_radio_send_string(uint8_t *msg)
{
    a0fe:	0f 93       	push	r16
    a100:	1f 93       	push	r17
    a102:	8c 01       	movw	r16, r24
    uint8_t temp = (uint8_t)lib_string_length((char *)msg);
    a104:	0e 94 49 53 	call	0xa692	; 0xa692 <lib_string_length>
    a108:	48 2f       	mov	r20, r24
 #ifdef ENERGY_INSTRUMENTATION
 return lib_radio_send_energy_wrapper(1, 0xffff, temp, msg);
 #else
	return lib_radio_send_msg(1, 0xffff, temp, msg);
    a10a:	81 e0       	ldi	r24, 0x01	; 1
    a10c:	90 e0       	ldi	r25, 0x00	; 0
    a10e:	6f ef       	ldi	r22, 0xFF	; 255
    a110:	7f ef       	ldi	r23, 0xFF	; 255
    a112:	98 01       	movw	r18, r16
    a114:	0e 94 3d 50 	call	0xa07a	; 0xa07a <lib_radio_send_msg>
 #endif
}
    a118:	1f 91       	pop	r17
    a11a:	0f 91       	pop	r16
    a11c:	08 95       	ret

0000a11e <itoa>:

static uint8_t localbuffer[16];


uint8_t itoa(uint16_t value, char*  str, int radix)
{
    a11e:	6f 92       	push	r6
    a120:	7f 92       	push	r7
    a122:	8f 92       	push	r8
    a124:	9f 92       	push	r9
    a126:	af 92       	push	r10
    a128:	bf 92       	push	r11
    a12a:	cf 92       	push	r12
    a12c:	df 92       	push	r13
    a12e:	ef 92       	push	r14
    a130:	ff 92       	push	r15
    a132:	0f 93       	push	r16
    a134:	1f 93       	push	r17
    a136:	cf 93       	push	r28
    a138:	df 93       	push	r29
    a13a:	6c 01       	movw	r12, r24
    a13c:	4b 01       	movw	r8, r22
    a13e:	5a 01       	movw	r10, r20
    a140:	3a 01       	movw	r6, r20
    a142:	eb 01       	movw	r28, r22
    a144:	7b 01       	movw	r14, r22
    a146:	41 e2       	ldi	r20, 0x21	; 33
    a148:	01 e0       	ldi	r16, 0x01	; 1
    a14a:	10 e0       	ldi	r17, 0x00	; 0
    a14c:	0c c0       	rjmp	.+24     	; 0xa166 <itoa+0x48>
                        ch ='f' ;
                        break;
                }
            }
        }
        if( '!' == ch )
    a14e:	41 32       	cpi	r20, 0x21	; 33
    a150:	79 f1       	breq	.+94     	; 0xa1b0 <itoa+0x92>
        {
            str[pos++] = (char) ( rem + 0x30 );
        }
        else
        {
            str[pos++] = ch ;
    a152:	d7 01       	movw	r26, r14
    a154:	4c 93       	st	X, r20
    a156:	98 01       	movw	r18, r16
    a158:	0f 5f       	subi	r16, 0xFF	; 255
    a15a:	1f 4f       	sbci	r17, 0xFF	; 255
    a15c:	08 94       	sec
    a15e:	e1 1c       	adc	r14, r1
    a160:	f1 1c       	adc	r15, r1
        }
    }while( value != 0 );
    a162:	ef 2b       	or	r30, r31
    a164:	89 f1       	breq	.+98     	; 0xa1c8 <itoa+0xaa>
    int  pos = 0;
    char ch  = '!' ;
    int i; 
    do
    {
        rem    = value % radix ;
    a166:	c6 01       	movw	r24, r12
    a168:	b3 01       	movw	r22, r6
    a16a:	0e 94 96 55 	call	0xab2c	; 0xab2c <__udivmodhi4>
    a16e:	9c 01       	movw	r18, r24
        value /= radix;
    a170:	c6 01       	movw	r24, r12
    a172:	b3 01       	movw	r22, r6
    a174:	0e 94 96 55 	call	0xab2c	; 0xab2c <__udivmodhi4>
    a178:	fb 01       	movw	r30, r22
    a17a:	6b 01       	movw	r12, r22
        if ( 16 == radix )
    a17c:	80 e1       	ldi	r24, 0x10	; 16
    a17e:	a8 16       	cp	r10, r24
    a180:	b1 04       	cpc	r11, r1
    a182:	29 f7       	brne	.-54     	; 0xa14e <itoa+0x30>
        {
            if( rem >= 10 && rem <= 15 )
    a184:	c9 01       	movw	r24, r18
    a186:	0a 97       	sbiw	r24, 0x0a	; 10
    a188:	06 97       	sbiw	r24, 0x06	; 6
    a18a:	08 f7       	brcc	.-62     	; 0xa14e <itoa+0x30>
            {
                switch( rem )
    a18c:	2c 30       	cpi	r18, 0x0C	; 12
    a18e:	31 05       	cpc	r19, r1
    a190:	09 f4       	brne	.+2      	; 0xa194 <itoa+0x76>
    a192:	56 c0       	rjmp	.+172    	; 0xa240 <itoa+0x122>
    a194:	2d 30       	cpi	r18, 0x0D	; 13
    a196:	31 05       	cpc	r19, r1
    a198:	0c f4       	brge	.+2      	; 0xa19c <itoa+0x7e>
    a19a:	43 c0       	rjmp	.+134    	; 0xa222 <itoa+0x104>
    a19c:	2e 30       	cpi	r18, 0x0E	; 14
    a19e:	31 05       	cpc	r19, r1
    a1a0:	09 f4       	brne	.+2      	; 0xa1a4 <itoa+0x86>
    a1a2:	50 c0       	rjmp	.+160    	; 0xa244 <itoa+0x126>
    a1a4:	2e 30       	cpi	r18, 0x0E	; 14
    a1a6:	31 05       	cpc	r19, r1
    a1a8:	0c f0       	brlt	.+2      	; 0xa1ac <itoa+0x8e>
    a1aa:	44 c0       	rjmp	.+136    	; 0xa234 <itoa+0x116>
                    case 11:
                        ch ='b' ;
                        break;
                    case 12:
                        ch = 'c' ;
                        break;
    a1ac:	44 e6       	ldi	r20, 0x64	; 100
    a1ae:	d1 cf       	rjmp	.-94     	; 0xa152 <itoa+0x34>
                }
            }
        }
        if( '!' == ch )
        {
            str[pos++] = (char) ( rem + 0x30 );
    a1b0:	82 2f       	mov	r24, r18
    a1b2:	80 5d       	subi	r24, 0xD0	; 208
    a1b4:	d7 01       	movw	r26, r14
    a1b6:	8c 93       	st	X, r24
    a1b8:	98 01       	movw	r18, r16
        }
        else
        {
            str[pos++] = ch ;
    a1ba:	0f 5f       	subi	r16, 0xFF	; 255
    a1bc:	1f 4f       	sbci	r17, 0xFF	; 255
    a1be:	08 94       	sec
    a1c0:	e1 1c       	adc	r14, r1
    a1c2:	f1 1c       	adc	r15, r1
        }
    }while( value != 0 );
    a1c4:	ef 2b       	or	r30, r31
    a1c6:	79 f6       	brne	.-98     	; 0xa166 <itoa+0x48>
   // str[pos] = '\0' ;
    
    i=0; 
    
    while (i<pos/2)
    a1c8:	b9 01       	movw	r22, r18
    a1ca:	75 95       	asr	r23
    a1cc:	67 95       	ror	r22
    a1ce:	16 16       	cp	r1, r22
    a1d0:	17 06       	cpc	r1, r23
    a1d2:	e4 f5       	brge	.+120    	; 0xa24c <itoa+0x12e>

static uint8_t localbuffer[16];


uint8_t itoa(uint16_t value, char*  str, int radix)
{
    a1d4:	21 50       	subi	r18, 0x01	; 1
    a1d6:	30 40       	sbci	r19, 0x00	; 0
    a1d8:	f4 01       	movw	r30, r8
    a1da:	e2 0f       	add	r30, r18
    a1dc:	f3 1f       	adc	r31, r19
    a1de:	2f 5f       	subi	r18, 0xFF	; 255
    a1e0:	3f 4f       	sbci	r19, 0xFF	; 255
    a1e2:	d4 01       	movw	r26, r8
    a1e4:	a2 0f       	add	r26, r18
    a1e6:	b3 1f       	adc	r27, r19
    a1e8:	68 0d       	add	r22, r8
    a1ea:	79 1d       	adc	r23, r9
    
    i=0; 
    
    while (i<pos/2)
    {
        *(str+pos) = *(str+i);       //uses the null character as the temporary storage.
    a1ec:	88 81       	ld	r24, Y
    a1ee:	8c 93       	st	X, r24
        *(str+i) = *(str + pos - i -1);
    a1f0:	80 81       	ld	r24, Z
    a1f2:	89 93       	st	Y+, r24
        *(str+pos-i-1) = *(str+pos);
    a1f4:	8c 91       	ld	r24, X
    a1f6:	80 83       	st	Z, r24
    a1f8:	31 97       	sbiw	r30, 0x01	; 1
    }while( value != 0 );
   // str[pos] = '\0' ;
    
    i=0; 
    
    while (i<pos/2)
    a1fa:	c6 17       	cp	r28, r22
    a1fc:	d7 07       	cpc	r29, r23
    a1fe:	b1 f7       	brne	.-20     	; 0xa1ec <itoa+0xce>
        *(str+i) = *(str + pos - i -1);
        *(str+pos-i-1) = *(str+pos);
        i++;
    }
   
    *(str+pos) = '\0';
    a200:	1c 92       	st	X, r1
    return pos;
}
    a202:	82 2f       	mov	r24, r18
    a204:	df 91       	pop	r29
    a206:	cf 91       	pop	r28
    a208:	1f 91       	pop	r17
    a20a:	0f 91       	pop	r16
    a20c:	ff 90       	pop	r15
    a20e:	ef 90       	pop	r14
    a210:	df 90       	pop	r13
    a212:	cf 90       	pop	r12
    a214:	bf 90       	pop	r11
    a216:	af 90       	pop	r10
    a218:	9f 90       	pop	r9
    a21a:	8f 90       	pop	r8
    a21c:	7f 90       	pop	r7
    a21e:	6f 90       	pop	r6
    a220:	08 95       	ret
        value /= radix;
        if ( 16 == radix )
        {
            if( rem >= 10 && rem <= 15 )
            {
                switch( rem )
    a222:	2a 30       	cpi	r18, 0x0A	; 10
    a224:	31 05       	cpc	r19, r1
    a226:	81 f0       	breq	.+32     	; 0xa248 <itoa+0x12a>
    a228:	2b 30       	cpi	r18, 0x0B	; 11
    a22a:	31 05       	cpc	r19, r1
    a22c:	09 f0       	breq	.+2      	; 0xa230 <itoa+0x112>
    a22e:	8f cf       	rjmp	.-226    	; 0xa14e <itoa+0x30>
    a230:	42 e6       	ldi	r20, 0x62	; 98
    a232:	8f cf       	rjmp	.-226    	; 0xa152 <itoa+0x34>
    a234:	2f 30       	cpi	r18, 0x0F	; 15
    a236:	31 05       	cpc	r19, r1
    a238:	09 f0       	breq	.+2      	; 0xa23c <itoa+0x11e>
    a23a:	89 cf       	rjmp	.-238    	; 0xa14e <itoa+0x30>
                    case 13:
                        ch ='d' ;
                        break;
                    case 14:
                        ch = 'e' ;
                        break;
    a23c:	46 e6       	ldi	r20, 0x66	; 102
    a23e:	89 cf       	rjmp	.-238    	; 0xa152 <itoa+0x34>
        value /= radix;
        if ( 16 == radix )
        {
            if( rem >= 10 && rem <= 15 )
            {
                switch( rem )
    a240:	43 e6       	ldi	r20, 0x63	; 99
    a242:	87 cf       	rjmp	.-242    	; 0xa152 <itoa+0x34>
                    case 12:
                        ch = 'c' ;
                        break;
                    case 13:
                        ch ='d' ;
                        break;
    a244:	45 e6       	ldi	r20, 0x65	; 101
    a246:	85 cf       	rjmp	.-246    	; 0xa152 <itoa+0x34>
        *(str+i) = *(str + pos - i -1);
        *(str+pos-i-1) = *(str+pos);
        i++;
    }
   
    *(str+pos) = '\0';
    a248:	41 e6       	ldi	r20, 0x61	; 97
    a24a:	83 cf       	rjmp	.-250    	; 0xa152 <itoa+0x34>
    a24c:	d4 01       	movw	r26, r8
    a24e:	a2 0f       	add	r26, r18
    a250:	b3 1f       	adc	r27, r19
    a252:	d6 cf       	rjmp	.-84     	; 0xa200 <itoa+0xe2>

0000a254 <lib_init_usart>:

//No need to be called from main 
//This function is called when the system is being initilized and prints system start 
void lib_init_usart()
{
    UBRR0H = 0;
    a254:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 15;
    a258:	8f e0       	ldi	r24, 0x0F	; 15
    a25a:	89 b9       	out	0x09, r24	; 9
    UCSR0A |= _BV(U2X0);        // double speed
    a25c:	59 9a       	sbi	0x0b, 1	; 11
    UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);        // 8 data-bits, 1 stop-bit
    a25e:	e5 e9       	ldi	r30, 0x95	; 149
    a260:	f0 e0       	ldi	r31, 0x00	; 0
    a262:	80 81       	ld	r24, Z
    a264:	86 60       	ori	r24, 0x06	; 6
    a266:	80 83       	st	Z, r24
    UCSR0B |= _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
    a268:	8a b1       	in	r24, 0x0a	; 10
    a26a:	88 69       	ori	r24, 0x98	; 152
    a26c:	8a b9       	out	0x0a, r24	; 10
    // Enable recieve/transmit/interrupts
    cFlag = 1;
    a26e:	81 e0       	ldi	r24, 0x01	; 1
    a270:	80 93 d9 03 	sts	0x03D9, r24
    previous = 0;
    a274:	10 92 da 03 	sts	0x03DA, r1
    status = 0;
    a278:	10 92 db 03 	sts	0x03DB, r1
}
    a27c:	08 95       	ret

0000a27e <lib_print_usart>:

//-------------------------------------------------------------------------
void lib_print_usart(uint8_t c)
{
    a27e:	1f 93       	push	r17
    a280:	18 2f       	mov	r17, r24

   flag = _atomic_start();
    a282:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a286:	80 93 7e 09 	sts	0x097E, r24
     

    if (cFlag == 0)
    a28a:	80 91 d9 03 	lds	r24, 0x03D9
    a28e:	88 23       	and	r24, r24
    a290:	49 f0       	breq	.+18     	; 0xa2a4 <lib_print_usart+0x26>
    {
        lib_init_usart();
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
    a292:	5d 9b       	sbis	0x0b, 5	; 11
    a294:	fe cf       	rjmp	.-4      	; 0xa292 <lib_print_usart+0x14>
        ;
    UDR0 = c;
    a296:	1c b9       	out	0x0c, r17	; 12
	
    _atomic_end(flag);
    a298:	80 91 7e 09 	lds	r24, 0x097E
    a29c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    a2a0:	1f 91       	pop	r17
    a2a2:	08 95       	ret
   flag = _atomic_start();
     

    if (cFlag == 0)
    {
        lib_init_usart();
    a2a4:	0e 94 2a 51 	call	0xa254	; 0xa254 <lib_init_usart>
    a2a8:	f4 cf       	rjmp	.-24     	; 0xa292 <lib_print_usart+0x14>

0000a2aa <lib_printf_ln>:



//-------------------------------------------------------------------------
void lib_printf_ln()
{
    a2aa:	1f 93       	push	r17
#ifdef PLATFORM_AVR
    _atomic_t currentatomic;
    currentatomic = _atomic_start();
    a2ac:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a2b0:	18 2f       	mov	r17, r24
    lib_print_usart(0xFC);
    a2b2:	8c ef       	ldi	r24, 0xFC	; 252
    a2b4:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    lib_print_usart(0x6D);
    a2b8:	8d e6       	ldi	r24, 0x6D	; 109
    a2ba:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    lib_print_usart(0x6D);
    a2be:	8d e6       	ldi	r24, 0x6D	; 109
    a2c0:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    lib_print_usart(0x6D);
    a2c4:	8d e6       	ldi	r24, 0x6D	; 109
    a2c6:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    lib_print_usart(0xFC);
    a2ca:	8c ef       	ldi	r24, 0xFC	; 252
    a2cc:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
	_atomic_end(currentatomic);
    a2d0:	81 2f       	mov	r24, r17
    a2d2:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
    
#endif
}
    a2d6:	1f 91       	pop	r17
    a2d8:	08 95       	ret

0000a2da <lib_usart_put_long>:
	_atomic_end(flag);
}

//-------------------------------------------------------------------------
void lib_usart_put_long(uint32_t l)
{
    a2da:	df 93       	push	r29
    a2dc:	cf 93       	push	r28
    a2de:	00 d0       	rcall	.+0      	; 0xa2e0 <lib_usart_put_long+0x6>
    a2e0:	00 d0       	rcall	.+0      	; 0xa2e2 <lib_usart_put_long+0x8>
    a2e2:	cd b7       	in	r28, 0x3d	; 61
    a2e4:	de b7       	in	r29, 0x3e	; 62
    a2e6:	69 83       	std	Y+1, r22	; 0x01
    a2e8:	7a 83       	std	Y+2, r23	; 0x02
    a2ea:	8b 83       	std	Y+3, r24	; 0x03
    a2ec:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

   flag = _atomic_start();
    a2ee:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a2f2:	80 93 7e 09 	sts	0x097E, r24
    
    lib_print_usart(*pcByte);
    a2f6:	8c 81       	ldd	r24, Y+4	; 0x04
    a2f8:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    pcByte--;
    lib_print_usart(*pcByte);
    a2fc:	8b 81       	ldd	r24, Y+3	; 0x03
    a2fe:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    pcByte--;
    lib_print_usart(*pcByte);
    a302:	8a 81       	ldd	r24, Y+2	; 0x02
    a304:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    pcByte--;
    lib_print_usart(*pcByte);
    a308:	89 81       	ldd	r24, Y+1	; 0x01
    a30a:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
   _atomic_end(flag);
    a30e:	80 91 7e 09 	lds	r24, 0x097E
    a312:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
	
} 
    a316:	0f 90       	pop	r0
    a318:	0f 90       	pop	r0
    a31a:	0f 90       	pop	r0
    a31c:	0f 90       	pop	r0
    a31e:	cf 91       	pop	r28
    a320:	df 91       	pop	r29
    a322:	08 95       	ret

0000a324 <lib_print_integer>:

//-------------------------------------------------------------------------
void lib_print_integer(int32_t a, int32_t b, int32_t c, int32_t d)
{
    a324:	af 92       	push	r10
    a326:	bf 92       	push	r11
    a328:	cf 92       	push	r12
    a32a:	df 92       	push	r13
    a32c:	ef 92       	push	r14
    a32e:	ff 92       	push	r15
    a330:	0f 93       	push	r16
    a332:	1f 93       	push	r17
    a334:	df 93       	push	r29
    a336:	cf 93       	push	r28
    a338:	cd b7       	in	r28, 0x3d	; 61
    a33a:	de b7       	in	r29, 0x3e	; 62
    a33c:	60 97       	sbiw	r28, 0x10	; 16
    a33e:	0f b6       	in	r0, 0x3f	; 63
    a340:	f8 94       	cli
    a342:	de bf       	out	0x3e, r29	; 62
    a344:	0f be       	out	0x3f, r0	; 63
    a346:	cd bf       	out	0x3d, r28	; 61
    a348:	69 83       	std	Y+1, r22	; 0x01
    a34a:	7a 83       	std	Y+2, r23	; 0x02
    a34c:	8b 83       	std	Y+3, r24	; 0x03
    a34e:	9c 83       	std	Y+4, r25	; 0x04
    a350:	2d 83       	std	Y+5, r18	; 0x05
    a352:	3e 83       	std	Y+6, r19	; 0x06
    a354:	4f 83       	std	Y+7, r20	; 0x07
    a356:	58 87       	std	Y+8, r21	; 0x08
    a358:	e9 86       	std	Y+9, r14	; 0x09
    a35a:	fa 86       	std	Y+10, r15	; 0x0a
    a35c:	0b 87       	std	Y+11, r16	; 0x0b
    a35e:	1c 87       	std	Y+12, r17	; 0x0c
    a360:	ad 86       	std	Y+13, r10	; 0x0d
    a362:	be 86       	std	Y+14, r11	; 0x0e
    a364:	cf 86       	std	Y+15, r12	; 0x0f
    a366:	d8 8a       	std	Y+16, r13	; 0x10
 
   flag = _atomic_start();
    a368:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a36c:	80 93 7e 09 	sts	0x097E, r24
  
    lib_print_usart(1);
    a370:	81 e0       	ldi	r24, 0x01	; 1
    a372:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    lib_usart_put_long(*(uint32_t *) (&a));
    a376:	69 81       	ldd	r22, Y+1	; 0x01
    a378:	7a 81       	ldd	r23, Y+2	; 0x02
    a37a:	8b 81       	ldd	r24, Y+3	; 0x03
    a37c:	9c 81       	ldd	r25, Y+4	; 0x04
    a37e:	0e 94 6d 51 	call	0xa2da	; 0xa2da <lib_usart_put_long>
    lib_usart_put_long(*(uint32_t *) (&b));
    a382:	6d 81       	ldd	r22, Y+5	; 0x05
    a384:	7e 81       	ldd	r23, Y+6	; 0x06
    a386:	8f 81       	ldd	r24, Y+7	; 0x07
    a388:	98 85       	ldd	r25, Y+8	; 0x08
    a38a:	0e 94 6d 51 	call	0xa2da	; 0xa2da <lib_usart_put_long>
    lib_usart_put_long(*(uint32_t *) (&c));
    a38e:	69 85       	ldd	r22, Y+9	; 0x09
    a390:	7a 85       	ldd	r23, Y+10	; 0x0a
    a392:	8b 85       	ldd	r24, Y+11	; 0x0b
    a394:	9c 85       	ldd	r25, Y+12	; 0x0c
    a396:	0e 94 6d 51 	call	0xa2da	; 0xa2da <lib_usart_put_long>
    lib_usart_put_long(*(uint32_t *) (&d));
    a39a:	6d 85       	ldd	r22, Y+13	; 0x0d
    a39c:	7e 85       	ldd	r23, Y+14	; 0x0e
    a39e:	8f 85       	ldd	r24, Y+15	; 0x0f
    a3a0:	98 89       	ldd	r25, Y+16	; 0x10
    a3a2:	0e 94 6d 51 	call	0xa2da	; 0xa2da <lib_usart_put_long>

  _atomic_end(flag);	
    a3a6:	80 91 7e 09 	lds	r24, 0x097E
    a3aa:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    a3ae:	60 96       	adiw	r28, 0x10	; 16
    a3b0:	0f b6       	in	r0, 0x3f	; 63
    a3b2:	f8 94       	cli
    a3b4:	de bf       	out	0x3e, r29	; 62
    a3b6:	0f be       	out	0x3f, r0	; 63
    a3b8:	cd bf       	out	0x3d, r28	; 61
    a3ba:	cf 91       	pop	r28
    a3bc:	df 91       	pop	r29
    a3be:	1f 91       	pop	r17
    a3c0:	0f 91       	pop	r16
    a3c2:	ff 90       	pop	r15
    a3c4:	ef 90       	pop	r14
    a3c6:	df 90       	pop	r13
    a3c8:	cf 90       	pop	r12
    a3ca:	bf 90       	pop	r11
    a3cc:	af 90       	pop	r10
    a3ce:	08 95       	ret

0000a3d0 <lib_usart_put_chip_hex>:
 
 

//-------------------------------------------------------------------------
void lib_usart_put_chip_hex(uint8_t cChip)
{
    a3d0:	1f 93       	push	r17
    a3d2:	18 2f       	mov	r17, r24
  
   flag = _atomic_start();
    a3d4:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a3d8:	80 93 7e 09 	sts	0x097E, r24
   
    if (cChip > 9)
    a3dc:	1a 30       	cpi	r17, 0x0A	; 10
    a3de:	50 f4       	brcc	.+20     	; 0xa3f4 <lib_usart_put_chip_hex+0x24>
    {
        lib_print_usart('a' + cChip - 10);
    }
    else
    {
        lib_print_usart('0' + cChip);
    a3e0:	81 2f       	mov	r24, r17
    a3e2:	80 5d       	subi	r24, 0xD0	; 208
    a3e4:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    }
	
	 _atomic_end(flag);
    a3e8:	80 91 7e 09 	lds	r24, 0x097E
    a3ec:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    a3f0:	1f 91       	pop	r17
    a3f2:	08 95       	ret
  
   flag = _atomic_start();
   
    if (cChip > 9)
    {
        lib_print_usart('a' + cChip - 10);
    a3f4:	81 2f       	mov	r24, r17
    a3f6:	89 5a       	subi	r24, 0xA9	; 169
    a3f8:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    else
    {
        lib_print_usart('0' + cChip);
    }
	
	 _atomic_end(flag);
    a3fc:	80 91 7e 09 	lds	r24, 0x097E
    a400:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    a404:	1f 91       	pop	r17
    a406:	08 95       	ret

0000a408 <lib_usart_put_hex>:

 

//-------------------------------------------------------------------------
void lib_usart_put_hex(uint8_t c)
{ 
    a408:	1f 93       	push	r17
    a40a:	18 2f       	mov	r17, r24
   
   flag = _atomic_start();
    a40c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a410:	80 93 7e 09 	sts	0x097E, r24
   
    lib_usart_put_chip_hex(c >> 4);
    a414:	81 2f       	mov	r24, r17
    a416:	82 95       	swap	r24
    a418:	8f 70       	andi	r24, 0x0F	; 15
    a41a:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <lib_usart_put_chip_hex>
    lib_usart_put_chip_hex(c & 0xf);
    a41e:	81 2f       	mov	r24, r17
    a420:	8f 70       	andi	r24, 0x0F	; 15
    a422:	0e 94 e8 51 	call	0xa3d0	; 0xa3d0 <lib_usart_put_chip_hex>
	
	 _atomic_end(flag);
    a426:	80 91 7e 09 	lds	r24, 0x097E
    a42a:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    a42e:	1f 91       	pop	r17
    a430:	08 95       	ret

0000a432 <lib_print_usart_string>:
}


//-------------------------------------------------------------------------
void lib_print_usart_string(char *p)
{
    a432:	cf 93       	push	r28
    a434:	df 93       	push	r29
    a436:	ec 01       	movw	r28, r24
   
   flag = _atomic_start();
    a438:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a43c:	80 93 7e 09 	sts	0x097E, r24
   
    lib_print_usart(0xFC);
    a440:	8c ef       	ldi	r24, 0xFC	; 252
    a442:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    while ((*p) != '\0')
    a446:	88 81       	ld	r24, Y
    a448:	88 23       	and	r24, r24
    a44a:	31 f0       	breq	.+12     	; 0xa458 <lib_print_usart_string+0x26>
    {
        lib_print_usart(*p);
    a44c:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
        p++;
    a450:	21 96       	adiw	r28, 0x01	; 1
{
   
   flag = _atomic_start();
   
    lib_print_usart(0xFC);
    while ((*p) != '\0')
    a452:	88 81       	ld	r24, Y
    a454:	88 23       	and	r24, r24
    a456:	d1 f7       	brne	.-12     	; 0xa44c <lib_print_usart_string+0x1a>
    {
        lib_print_usart(*p);
        p++;
    }
    lib_print_usart(0xFC);
    a458:	8c ef       	ldi	r24, 0xFC	; 252
    a45a:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
  
    _atomic_end(flag);
    a45e:	80 91 7e 09 	lds	r24, 0x097E
    a462:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
	
}
    a466:	df 91       	pop	r29
    a468:	cf 91       	pop	r28
    a46a:	08 95       	ret

0000a46c <lib_print_string_lengthN>:
}
      

//-------------------------------------------------------------------------
void lib_print_string_lengthN(char *p, uint8_t n)
{
    a46c:	ff 92       	push	r15
    a46e:	0f 93       	push	r16
    a470:	1f 93       	push	r17
    a472:	cf 93       	push	r28
    a474:	df 93       	push	r29
    a476:	08 2f       	mov	r16, r24
    a478:	f9 2e       	mov	r15, r25
    a47a:	16 2f       	mov	r17, r22
    uint8_t i;
    
   flag = _atomic_start();
    a47c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a480:	80 93 7e 09 	sts	0x097E, r24
    
    lib_print_usart(0xFA);
    a484:	8a ef       	ldi	r24, 0xFA	; 250
    a486:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    lib_print_usart(n); 
    a48a:	81 2f       	mov	r24, r17
    a48c:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    for (i = 0; i < n; i++)
    a490:	11 23       	and	r17, r17
    a492:	59 f0       	breq	.+22     	; 0xa4aa <lib_print_string_lengthN+0x3e>
    a494:	80 2f       	mov	r24, r16
    a496:	9f 2d       	mov	r25, r15
    a498:	9c 01       	movw	r18, r24
    a49a:	e9 01       	movw	r28, r18
    {
        lib_print_usart(*p);
    a49c:	89 91       	ld	r24, Y+
    a49e:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    
   flag = _atomic_start();
    
    lib_print_usart(0xFA);
    lib_print_usart(n); 
    for (i = 0; i < n; i++)
    a4a2:	9e 01       	movw	r18, r28
    a4a4:	20 1b       	sub	r18, r16
    a4a6:	21 17       	cp	r18, r17
    a4a8:	c8 f3       	brcs	.-14     	; 0xa49c <lib_print_string_lengthN+0x30>
    {
        lib_print_usart(*p);
        p++;
    }
  //  usartPrint(0xFA);
	  lib_print_usart(0xFC);
    a4aa:	8c ef       	ldi	r24, 0xFC	; 252
    a4ac:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    lib_print_usart_string("\n"); 
    a4b0:	80 e4       	ldi	r24, 0x40	; 64
    a4b2:	91 e0       	ldi	r25, 0x01	; 1
    a4b4:	0e 94 19 52 	call	0xa432	; 0xa432 <lib_print_usart_string>
    lib_print_usart(0xFC);
    a4b8:	8c ef       	ldi	r24, 0xFC	; 252
    a4ba:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    
	_atomic_end(flag);
    a4be:	80 91 7e 09 	lds	r24, 0x097E
    a4c2:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    a4c6:	df 91       	pop	r29
    a4c8:	cf 91       	pop	r28
    a4ca:	1f 91       	pop	r17
    a4cc:	0f 91       	pop	r16
    a4ce:	ff 90       	pop	r15
    a4d0:	08 95       	ret

0000a4d2 <lib_print_usart_8bit>:
 



void lib_print_usart_8bit(uint8_t c)
{
    a4d2:	1f 93       	push	r17
    a4d4:	18 2f       	mov	r17, r24
  
   flag = _atomic_start();
    a4d6:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a4da:	80 93 7e 09 	sts	0x097E, r24
   
	
   lib_print_usart(0xFA);
    a4de:	8a ef       	ldi	r24, 0xFA	; 250
    a4e0:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
   lib_print_usart(c);
    a4e4:	81 2f       	mov	r24, r17
    a4e6:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
   lib_print_usart(0xFA);
    a4ea:	8a ef       	ldi	r24, 0xFA	; 250
    a4ec:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
   
    _atomic_end(flag);
    a4f0:	80 91 7e 09 	lds	r24, 0x097E
    a4f4:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    a4f8:	1f 91       	pop	r17
    a4fa:	08 95       	ret

0000a4fc <lib_printf_uinteger32>:
	_atomic_end(flag);
}

//-------------------------------------------------------------------------
void lib_printf_uinteger32(uint32_t l)
{
    a4fc:	cf 92       	push	r12
    a4fe:	df 92       	push	r13
    a500:	ef 92       	push	r14
    a502:	ff 92       	push	r15
    a504:	0f 93       	push	r16
    a506:	1f 93       	push	r17
    a508:	6b 01       	movw	r12, r22
    a50a:	7c 01       	movw	r14, r24
   flag = _atomic_start();
    a50c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a510:	80 93 7e 09 	sts	0x097E, r24
   
    itoa(lib_get_node_id(), (char *)localbuffer, 10);
    a514:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <lib_get_node_id>
    a518:	0c ed       	ldi	r16, 0xDC	; 220
    a51a:	13 e0       	ldi	r17, 0x03	; 3
    a51c:	b8 01       	movw	r22, r16
    a51e:	4a e0       	ldi	r20, 0x0A	; 10
    a520:	50 e0       	ldi	r21, 0x00	; 0
    a522:	0e 94 8f 50 	call	0xa11e	; 0xa11e <itoa>
    lib_print_usart_string((char *)localbuffer);
    a526:	c8 01       	movw	r24, r16
    a528:	0e 94 19 52 	call	0xa432	; 0xa432 <lib_print_usart_string>
    lib_print_usart_string(": ");		
    a52c:	82 e4       	ldi	r24, 0x42	; 66
    a52e:	91 e0       	ldi	r25, 0x01	; 1
    a530:	0e 94 19 52 	call	0xa432	; 0xa432 <lib_print_usart_string>
    
    lib_print_usart(0xFE);
    a534:	8e ef       	ldi	r24, 0xFE	; 254
    a536:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    lib_usart_put_long(l);
    a53a:	c7 01       	movw	r24, r14
    a53c:	b6 01       	movw	r22, r12
    a53e:	0e 94 6d 51 	call	0xa2da	; 0xa2da <lib_usart_put_long>
    lib_print_usart(0xFE);
    a542:	8e ef       	ldi	r24, 0xFE	; 254
    a544:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
	
	_atomic_end(flag);
    a548:	80 91 7e 09 	lds	r24, 0x097E
    a54c:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    a550:	1f 91       	pop	r17
    a552:	0f 91       	pop	r16
    a554:	ff 90       	pop	r15
    a556:	ef 90       	pop	r14
    a558:	df 90       	pop	r13
    a55a:	cf 90       	pop	r12
    a55c:	08 95       	ret

0000a55e <lib_printf_integer_u32ln>:
#endif
}

//-------------------------------------------------------------------------
void lib_printf_integer_u32ln(uint32_t val)
{
    a55e:	df 92       	push	r13
    a560:	ef 92       	push	r14
    a562:	ff 92       	push	r15
    a564:	0f 93       	push	r16
    a566:	1f 93       	push	r17
    a568:	7b 01       	movw	r14, r22
    a56a:	8c 01       	movw	r16, r24
#ifdef PLATFORM_AVR
    _atomic_t currentatomic;
    currentatomic = _atomic_start();
    a56c:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a570:	d8 2e       	mov	r13, r24
     lib_printf_uinteger32(val);
    a572:	c8 01       	movw	r24, r16
    a574:	b7 01       	movw	r22, r14
    a576:	0e 94 7e 52 	call	0xa4fc	; 0xa4fc <lib_printf_uinteger32>
     lib_print_usart_string("\n"); 
    a57a:	80 e4       	ldi	r24, 0x40	; 64
    a57c:	91 e0       	ldi	r25, 0x01	; 1
    a57e:	0e 94 19 52 	call	0xa432	; 0xa432 <lib_print_usart_string>
	_atomic_end(currentatomic);
    a582:	8d 2d       	mov	r24, r13
    a584:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
   
#endif
}
    a588:	1f 91       	pop	r17
    a58a:	0f 91       	pop	r16
    a58c:	ff 90       	pop	r15
    a58e:	ef 90       	pop	r14
    a590:	df 90       	pop	r13
    a592:	08 95       	ret

0000a594 <lib_printf_integer32>:
	 _atomic_end(flag);
}

//-------------------------------------------------------------------------
void lib_printf_integer32(int32_t a)
{
    a594:	0f 93       	push	r16
    a596:	1f 93       	push	r17
    a598:	df 93       	push	r29
    a59a:	cf 93       	push	r28
    a59c:	00 d0       	rcall	.+0      	; 0xa59e <lib_printf_integer32+0xa>
    a59e:	00 d0       	rcall	.+0      	; 0xa5a0 <lib_printf_integer32+0xc>
    a5a0:	cd b7       	in	r28, 0x3d	; 61
    a5a2:	de b7       	in	r29, 0x3e	; 62
    a5a4:	69 83       	std	Y+1, r22	; 0x01
    a5a6:	7a 83       	std	Y+2, r23	; 0x02
    a5a8:	8b 83       	std	Y+3, r24	; 0x03
    a5aa:	9c 83       	std	Y+4, r25	; 0x04
   
   flag = _atomic_start();
    a5ac:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a5b0:	80 93 7e 09 	sts	0x097E, r24
  
	   
    itoa(lib_get_node_id(), (char *)localbuffer, 10);
    a5b4:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <lib_get_node_id>
    a5b8:	0c ed       	ldi	r16, 0xDC	; 220
    a5ba:	13 e0       	ldi	r17, 0x03	; 3
    a5bc:	b8 01       	movw	r22, r16
    a5be:	4a e0       	ldi	r20, 0x0A	; 10
    a5c0:	50 e0       	ldi	r21, 0x00	; 0
    a5c2:	0e 94 8f 50 	call	0xa11e	; 0xa11e <itoa>
    lib_print_usart_string((char *)localbuffer);
    a5c6:	c8 01       	movw	r24, r16
    a5c8:	0e 94 19 52 	call	0xa432	; 0xa432 <lib_print_usart_string>
    lib_print_usart_string(": ");	
    a5cc:	82 e4       	ldi	r24, 0x42	; 66
    a5ce:	91 e0       	ldi	r25, 0x01	; 1
    a5d0:	0e 94 19 52 	call	0xa432	; 0xa432 <lib_print_usart_string>
    lib_print_usart(0xFD);
    a5d4:	8d ef       	ldi	r24, 0xFD	; 253
    a5d6:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
    lib_usart_put_long(*(uint32_t *) (&a));
    a5da:	69 81       	ldd	r22, Y+1	; 0x01
    a5dc:	7a 81       	ldd	r23, Y+2	; 0x02
    a5de:	8b 81       	ldd	r24, Y+3	; 0x03
    a5e0:	9c 81       	ldd	r25, Y+4	; 0x04
    a5e2:	0e 94 6d 51 	call	0xa2da	; 0xa2da <lib_usart_put_long>
    lib_print_usart(0xFD);
    a5e6:	8d ef       	ldi	r24, 0xFD	; 253
    a5e8:	0e 94 3f 51 	call	0xa27e	; 0xa27e <lib_print_usart>
	
	_atomic_end(flag);
    a5ec:	80 91 7e 09 	lds	r24, 0x097E
    a5f0:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    a5f4:	0f 90       	pop	r0
    a5f6:	0f 90       	pop	r0
    a5f8:	0f 90       	pop	r0
    a5fa:	0f 90       	pop	r0
    a5fc:	cf 91       	pop	r28
    a5fe:	df 91       	pop	r29
    a600:	1f 91       	pop	r17
    a602:	0f 91       	pop	r16
    a604:	08 95       	ret

0000a606 <lib_printf_string_with_id>:
	
}


void lib_printf_string_with_id(char *p)
{     
    a606:	ef 92       	push	r14
    a608:	ff 92       	push	r15
    a60a:	0f 93       	push	r16
    a60c:	1f 93       	push	r17
    a60e:	7c 01       	movw	r14, r24
      
	  itoa(lib_get_node_id(), (char *)localbuffer, 10);
    a610:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <lib_get_node_id>
    a614:	0c ed       	ldi	r16, 0xDC	; 220
    a616:	13 e0       	ldi	r17, 0x03	; 3
    a618:	b8 01       	movw	r22, r16
    a61a:	4a e0       	ldi	r20, 0x0A	; 10
    a61c:	50 e0       	ldi	r21, 0x00	; 0
    a61e:	0e 94 8f 50 	call	0xa11e	; 0xa11e <itoa>
    lib_print_usart_string((char *)localbuffer);
    a622:	c8 01       	movw	r24, r16
    a624:	0e 94 19 52 	call	0xa432	; 0xa432 <lib_print_usart_string>
	  lib_print_usart_string(": ");	
    a628:	82 e4       	ldi	r24, 0x42	; 66
    a62a:	91 e0       	ldi	r25, 0x01	; 1
    a62c:	0e 94 19 52 	call	0xa432	; 0xa432 <lib_print_usart_string>
	  lib_print_usart_string(p); 
    a630:	c7 01       	movw	r24, r14
    a632:	0e 94 19 52 	call	0xa432	; 0xa432 <lib_print_usart_string>
	
}
    a636:	1f 91       	pop	r17
    a638:	0f 91       	pop	r16
    a63a:	ff 90       	pop	r15
    a63c:	ef 90       	pop	r14
    a63e:	08 95       	ret

0000a640 <lib_printf_string_energy_wrapper>:



void lib_printf_string_energy_wrapper(char *p)
{
    a640:	0f 93       	push	r16
    a642:	1f 93       	push	r17
    a644:	8c 01       	movw	r16, r24
     lib_thread** current_thread;
	   uint8_t length;
	   
	   length = lib_string_length(p);
    a646:	0e 94 49 53 	call	0xa692	; 0xa692 <lib_string_length>
	   
     current_thread = lib_get_current_thread();      
    a64a:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>

  	 //(*current_thread)->ecbptr->remainenergy -= (uint16_t)SERIAL_SEND * (uint16_t)length;           
      
         		 
     lib_printf_string_with_id(p);
    a64e:	c8 01       	movw	r24, r16
    a650:	0e 94 03 53 	call	0xa606	; 0xa606 <lib_printf_string_with_id>
     
}
    a654:	1f 91       	pop	r17
    a656:	0f 91       	pop	r16
    a658:	08 95       	ret

0000a65a <lib_sounder_on>:
#include "../types/types.h"
void lib_sounder_on()
{
                          
  void (*sounderfp)() = (void (*)(void))SOUNDER_ON_FUNCTION; 
  sounderfp();    
    a65a:	e8 e1       	ldi	r30, 0x18	; 24
    a65c:	fd ee       	ldi	r31, 0xED	; 237
    a65e:	09 95       	icall
}
    a660:	08 95       	ret

0000a662 <lib_sounder_off>:

void lib_sounder_off()
{
                          
  void (*sounderfp)() = (void (*)(void))SOUNDER_OFF_FUNCTION; 
  sounderfp();    
    a662:	ec e1       	ldi	r30, 0x1C	; 28
    a664:	fd ee       	ldi	r31, 0xED	; 237
    a666:	09 95       	icall
}
    a668:	08 95       	ret

0000a66a <lib_hex2value>:
#include "libstring.h"
#include "../types/types.h"


uint16_t lib_hex2value(uint8_t hex)
{
    a66a:	98 2f       	mov	r25, r24
  char a = (char)hex;
  uint16_t high;

  if ((a>='0')&&(a<='9'))
    a66c:	80 53       	subi	r24, 0x30	; 48
    a66e:	8a 30       	cpi	r24, 0x0A	; 10
    a670:	40 f0       	brcs	.+16     	; 0xa682 <lib_hex2value+0x18>
	     high = a-'0';
  else
		 high = a-'A'+ 10;
    a672:	29 2f       	mov	r18, r25
    a674:	33 27       	eor	r19, r19
    a676:	27 fd       	sbrc	r18, 7
    a678:	30 95       	com	r19
    a67a:	27 53       	subi	r18, 0x37	; 55
    a67c:	30 40       	sbci	r19, 0x00	; 0
  return high;

}
    a67e:	c9 01       	movw	r24, r18
    a680:	08 95       	ret
{
  char a = (char)hex;
  uint16_t high;

  if ((a>='0')&&(a<='9'))
	     high = a-'0';
    a682:	29 2f       	mov	r18, r25
    a684:	33 27       	eor	r19, r19
    a686:	27 fd       	sbrc	r18, 7
    a688:	30 95       	com	r19
    a68a:	20 53       	subi	r18, 0x30	; 48
    a68c:	30 40       	sbci	r19, 0x00	; 0
  else
		 high = a-'A'+ 10;
  return high;

}
    a68e:	c9 01       	movw	r24, r18
    a690:	08 95       	ret

0000a692 <lib_string_length>:


int lib_string_length(char* s) {
    a692:	dc 01       	movw	r26, r24
	int count=0;
	while(s[count] != '\0')
    a694:	8c 91       	ld	r24, X
    a696:	88 23       	and	r24, r24
    a698:	61 f0       	breq	.+24     	; 0xa6b2 <lib_string_length+0x20>
    a69a:	20 e0       	ldi	r18, 0x00	; 0
    a69c:	30 e0       	ldi	r19, 0x00	; 0
		count++;
    a69e:	2f 5f       	subi	r18, 0xFF	; 255
    a6a0:	3f 4f       	sbci	r19, 0xFF	; 255
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a6a2:	fd 01       	movw	r30, r26
    a6a4:	e2 0f       	add	r30, r18
    a6a6:	f3 1f       	adc	r31, r19
    a6a8:	80 81       	ld	r24, Z
    a6aa:	88 23       	and	r24, r24
    a6ac:	c1 f7       	brne	.-16     	; 0xa69e <lib_string_length+0xc>
		count++;
	return count;
}
    a6ae:	c9 01       	movw	r24, r18
    a6b0:	08 95       	ret
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a6b2:	20 e0       	ldi	r18, 0x00	; 0
    a6b4:	30 e0       	ldi	r19, 0x00	; 0
    a6b6:	fb cf       	rjmp	.-10     	; 0xa6ae <lib_string_length+0x1c>

0000a6b8 <lib_mystrncpy>:




void lib_mystrncpy(char *dest, const char *src, uint16_t n)
{
    a6b8:	cf 93       	push	r28
    a6ba:	df 93       	push	r29
    a6bc:	ec 01       	movw	r28, r24
	uint16_t i;
	for (i=0;i<n;i++)
    a6be:	41 15       	cp	r20, r1
    a6c0:	51 05       	cpc	r21, r1
    a6c2:	79 f0       	breq	.+30     	; 0xa6e2 <lib_mystrncpy+0x2a>
    a6c4:	20 e0       	ldi	r18, 0x00	; 0
    a6c6:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    a6c8:	fe 01       	movw	r30, r28
    a6ca:	e2 0f       	add	r30, r18
    a6cc:	f3 1f       	adc	r31, r19
    a6ce:	db 01       	movw	r26, r22
    a6d0:	a2 0f       	add	r26, r18
    a6d2:	b3 1f       	adc	r27, r19
    a6d4:	8c 91       	ld	r24, X
    a6d6:	80 83       	st	Z, r24


void lib_mystrncpy(char *dest, const char *src, uint16_t n)
{
	uint16_t i;
	for (i=0;i<n;i++)
    a6d8:	2f 5f       	subi	r18, 0xFF	; 255
    a6da:	3f 4f       	sbci	r19, 0xFF	; 255
    a6dc:	24 17       	cp	r18, r20
    a6de:	35 07       	cpc	r19, r21
    a6e0:	98 f3       	brcs	.-26     	; 0xa6c8 <lib_mystrncpy+0x10>
		dest[i] = src[i];
}
    a6e2:	df 91       	pop	r29
    a6e4:	cf 91       	pop	r28
    a6e6:	08 95       	ret

0000a6e8 <lib_mystrcpy>:


void lib_mystrcpy(char *dest, const char *src)
{
    a6e8:	cf 93       	push	r28
    a6ea:	df 93       	push	r29
    a6ec:	eb 01       	movw	r28, r22
	int i;
	i = 0;
	while (src[i]!='\0')
    a6ee:	e8 81       	ld	r30, Y
    a6f0:	ee 23       	and	r30, r30
    a6f2:	b1 f0       	breq	.+44     	; 0xa720 <lib_mystrcpy+0x38>
    a6f4:	20 e0       	ldi	r18, 0x00	; 0
    a6f6:	30 e0       	ldi	r19, 0x00	; 0
    a6f8:	a0 e0       	ldi	r26, 0x00	; 0
    a6fa:	b0 e0       	ldi	r27, 0x00	; 0
	{ dest[i] = src[i];
    a6fc:	a8 0f       	add	r26, r24
    a6fe:	b9 1f       	adc	r27, r25
    a700:	ec 93       	st	X, r30
	i++;
    a702:	2f 5f       	subi	r18, 0xFF	; 255
    a704:	3f 4f       	sbci	r19, 0xFF	; 255
    a706:	d9 01       	movw	r26, r18

void lib_mystrcpy(char *dest, const char *src)
{
	int i;
	i = 0;
	while (src[i]!='\0')
    a708:	fe 01       	movw	r30, r28
    a70a:	e2 0f       	add	r30, r18
    a70c:	f3 1f       	adc	r31, r19
    a70e:	e0 81       	ld	r30, Z
    a710:	ee 23       	and	r30, r30
    a712:	a1 f7       	brne	.-24     	; 0xa6fc <lib_mystrcpy+0x14>
	{ dest[i] = src[i];
	i++;
	}
	dest[i] = '\0';
    a714:	a8 0f       	add	r26, r24
    a716:	b9 1f       	adc	r27, r25
    a718:	1c 92       	st	X, r1
}
    a71a:	df 91       	pop	r29
    a71c:	cf 91       	pop	r28
    a71e:	08 95       	ret

void lib_mystrcpy(char *dest, const char *src)
{
	int i;
	i = 0;
	while (src[i]!='\0')
    a720:	a0 e0       	ldi	r26, 0x00	; 0
    a722:	b0 e0       	ldi	r27, 0x00	; 0
    a724:	f7 cf       	rjmp	.-18     	; 0xa714 <lib_mystrcpy+0x2c>

0000a726 <lib_dec2char>:
}


char lib_dec2char(uint8_t value) {

	if (/*value >= 0) &&*/(value <=9))
    a726:	8a 30       	cpi	r24, 0x0A	; 10
    a728:	10 f4       	brcc	.+4      	; 0xa72e <lib_dec2char+0x8>
		return (char) (value + 0x30);
    a72a:	80 5d       	subi	r24, 0xD0	; 208
	else
		return 0;
}
    a72c:	08 95       	ret
}


char lib_dec2char(uint8_t value) {

	if (/*value >= 0) &&*/(value <=9))
    a72e:	80 e0       	ldi	r24, 0x00	; 0
    a730:	08 95       	ret

0000a732 <lib_string_int_to_string>:
		return 0;
}


char *lib_string_int_to_string(int num)
{
    a732:	cf 93       	push	r28
    a734:	df 93       	push	r29
    a736:	ec 01       	movw	r28, r24
    a738:	9c 01       	movw	r18, r24
    a73a:	97 fd       	sbrc	r25, 7
    a73c:	41 c0       	rjmp	.+130    	; 0xa7c0 <lib_string_int_to_string+0x8e>
	if (num <0)
		internal = -num;
	else
		internal = num;

	temp[6] = '\0';
    a73e:	10 92 f2 03 	sts	0x03F2, r1
    a742:	45 e0       	ldi	r20, 0x05	; 5
    a744:	10 c0       	rjmp	.+32     	; 0xa766 <lib_string_int_to_string+0x34>
}


char lib_dec2char(uint8_t value) {

	if (/*value >= 0) &&*/(value <=9))
    a746:	80 e0       	ldi	r24, 0x00	; 0
	temp[6] = '\0';

	do
	{
		remainder = internal%10;
		temp[offset]= lib_dec2char(remainder);
    a748:	e4 2f       	mov	r30, r20
    a74a:	f0 e0       	ldi	r31, 0x00	; 0
    a74c:	e4 51       	subi	r30, 0x14	; 20
    a74e:	fc 4f       	sbci	r31, 0xFC	; 252
    a750:	80 83       	st	Z, r24
		internal = internal/10;
    a752:	c9 01       	movw	r24, r18
    a754:	6a e0       	ldi	r22, 0x0A	; 10
    a756:	70 e0       	ldi	r23, 0x00	; 0
    a758:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
    a75c:	9b 01       	movw	r18, r22
		offset--;
    a75e:	41 50       	subi	r20, 0x01	; 1
	}
	while (internal!=0);
    a760:	61 15       	cp	r22, r1
    a762:	71 05       	cpc	r23, r1
    a764:	49 f0       	breq	.+18     	; 0xa778 <lib_string_int_to_string+0x46>

	temp[6] = '\0';

	do
	{
		remainder = internal%10;
    a766:	c9 01       	movw	r24, r18
    a768:	6a e0       	ldi	r22, 0x0A	; 10
    a76a:	70 e0       	ldi	r23, 0x00	; 0
    a76c:	0e 94 aa 55 	call	0xab54	; 0xab54 <__divmodhi4>
}


char lib_dec2char(uint8_t value) {

	if (/*value >= 0) &&*/(value <=9))
    a770:	8a 30       	cpi	r24, 0x0A	; 10
    a772:	48 f7       	brcc	.-46     	; 0xa746 <lib_string_int_to_string+0x14>
		return (char) (value + 0x30);
    a774:	80 5d       	subi	r24, 0xD0	; 208
    a776:	e8 cf       	rjmp	.-48     	; 0xa748 <lib_string_int_to_string+0x16>
		internal = internal/10;
		offset--;
	}
	while (internal!=0);

	if (num<0)
    a778:	d7 fd       	sbrc	r29, 7
    a77a:	18 c0       	rjmp	.+48     	; 0xa7ac <lib_string_int_to_string+0x7a>




	{
		length = 7-offset-1;
    a77c:	86 e0       	ldi	r24, 0x06	; 6
    a77e:	84 1b       	sub	r24, r20
		for (i=0;i<length;i++)
    a780:	81 f0       	breq	.+32     	; 0xa7a2 <lib_string_int_to_string+0x70>
    a782:	e4 2f       	mov	r30, r20
    a784:	f0 e0       	ldi	r31, 0x00	; 0
    a786:	e3 51       	subi	r30, 0x13	; 19
    a788:	fc 4f       	sbci	r31, 0xFC	; 252
    a78a:	ac ee       	ldi	r26, 0xEC	; 236
    a78c:	b3 e0       	ldi	r27, 0x03	; 3
    a78e:	81 50       	subi	r24, 0x01	; 1
    a790:	28 2f       	mov	r18, r24
    a792:	30 e0       	ldi	r19, 0x00	; 0
    a794:	23 51       	subi	r18, 0x13	; 19
    a796:	3c 4f       	sbci	r19, 0xFC	; 252
			temp[i] = temp[i+offset+1];
    a798:	81 91       	ld	r24, Z+
    a79a:	8d 93       	st	X+, r24



	{
		length = 7-offset-1;
		for (i=0;i<length;i++)
    a79c:	a2 17       	cp	r26, r18
    a79e:	b3 07       	cpc	r27, r19
    a7a0:	d9 f7       	brne	.-10     	; 0xa798 <lib_string_int_to_string+0x66>
			temp[i] = temp[i+offset+1];
	}
	return temp;
}
    a7a2:	8c ee       	ldi	r24, 0xEC	; 236
    a7a4:	93 e0       	ldi	r25, 0x03	; 3
    a7a6:	df 91       	pop	r29
    a7a8:	cf 91       	pop	r28
    a7aa:	08 95       	ret
		offset--;
	}
	while (internal!=0);

	if (num<0)
	{temp[offset] = '-';
    a7ac:	e4 2f       	mov	r30, r20
    a7ae:	f0 e0       	ldi	r31, 0x00	; 0
    a7b0:	e4 51       	subi	r30, 0x14	; 20
    a7b2:	fc 4f       	sbci	r31, 0xFC	; 252
    a7b4:	8d e2       	ldi	r24, 0x2D	; 45
    a7b6:	80 83       	st	Z, r24
	 if (offset ==0)
    a7b8:	44 23       	and	r20, r20
    a7ba:	99 f3       	breq	.-26     	; 0xa7a2 <lib_string_int_to_string+0x70>
		 return temp;
	 else
		 offset--;
    a7bc:	41 50       	subi	r20, 0x01	; 1
    a7be:	de cf       	rjmp	.-68     	; 0xa77c <lib_string_int_to_string+0x4a>
		return 0;
}


char *lib_string_int_to_string(int num)
{
    a7c0:	22 27       	eor	r18, r18
    a7c2:	33 27       	eor	r19, r19
    a7c4:	28 1b       	sub	r18, r24
    a7c6:	39 0b       	sbc	r19, r25
    a7c8:	ba cf       	rjmp	.-140    	; 0xa73e <lib_string_int_to_string+0xc>

0000a7ca <lib_string_append>:
	}
	return temp;
}

void lib_string_append(char *base, char *string)
{
    a7ca:	0f 93       	push	r16
    a7cc:	1f 93       	push	r17
    a7ce:	cf 93       	push	r28
    a7d0:	df 93       	push	r29
    a7d2:	8c 01       	movw	r16, r24
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a7d4:	fc 01       	movw	r30, r24
    a7d6:	80 81       	ld	r24, Z
    a7d8:	88 23       	and	r24, r24
    a7da:	c1 f1       	breq	.+112    	; 0xa84c <lib_string_append+0x82>
    a7dc:	40 e0       	ldi	r20, 0x00	; 0
    a7de:	50 e0       	ldi	r21, 0x00	; 0
		count++;
    a7e0:	4f 5f       	subi	r20, 0xFF	; 255
    a7e2:	5f 4f       	sbci	r21, 0xFF	; 255
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a7e4:	e8 01       	movw	r28, r16
    a7e6:	c4 0f       	add	r28, r20
    a7e8:	d5 1f       	adc	r29, r21
    a7ea:	88 81       	ld	r24, Y
    a7ec:	88 23       	and	r24, r24
    a7ee:	c1 f7       	brne	.-16     	; 0xa7e0 <lib_string_append+0x16>
		count++;
    a7f0:	fb 01       	movw	r30, r22
    a7f2:	80 81       	ld	r24, Z
    a7f4:	88 23       	and	r24, r24
    a7f6:	69 f1       	breq	.+90     	; 0xa852 <lib_string_append+0x88>
    a7f8:	20 e0       	ldi	r18, 0x00	; 0
    a7fa:	30 e0       	ldi	r19, 0x00	; 0
    a7fc:	2f 5f       	subi	r18, 0xFF	; 255
    a7fe:	3f 4f       	sbci	r19, 0xFF	; 255
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a800:	fb 01       	movw	r30, r22
    a802:	e2 0f       	add	r30, r18
    a804:	f3 1f       	adc	r31, r19
    a806:	80 81       	ld	r24, Z
    a808:	88 23       	and	r24, r24
    a80a:	c1 f7       	brne	.-16     	; 0xa7fc <lib_string_append+0x32>
    a80c:	90 e0       	ldi	r25, 0x00	; 0
    a80e:	a0 e0       	ldi	r26, 0x00	; 0
    a810:	b0 e0       	ldi	r27, 0x00	; 0
    a812:	e8 01       	movw	r28, r16
    a814:	c4 0f       	add	r28, r20
    a816:	d5 1f       	adc	r29, r21
    a818:	e0 e0       	ldi	r30, 0x00	; 0
    a81a:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t i;
	length1 = lib_string_length(base);
	length2 = lib_string_length(string);
	for (i=0;i<length2;i++)
	{
		base[i+length1] = string[i];
    a81c:	ac 0f       	add	r26, r28
    a81e:	bd 1f       	adc	r27, r29
    a820:	e6 0f       	add	r30, r22
    a822:	f7 1f       	adc	r31, r23
    a824:	80 81       	ld	r24, Z
    a826:	8c 93       	st	X, r24
{
	int length1, length2;
	uint8_t i;
	length1 = lib_string_length(base);
	length2 = lib_string_length(string);
	for (i=0;i<length2;i++)
    a828:	9f 5f       	subi	r25, 0xFF	; 255
    a82a:	e9 2f       	mov	r30, r25
    a82c:	f0 e0       	ldi	r31, 0x00	; 0
    a82e:	df 01       	movw	r26, r30
    a830:	e2 17       	cp	r30, r18
    a832:	f3 07       	cpc	r31, r19
    a834:	9c f3       	brlt	.-26     	; 0xa81c <lib_string_append+0x52>
	{
		base[i+length1] = string[i];

	}
	base[length1+length2] = '\0';
    a836:	20 0f       	add	r18, r16
    a838:	31 1f       	adc	r19, r17
    a83a:	42 0f       	add	r20, r18
    a83c:	53 1f       	adc	r21, r19
    a83e:	fa 01       	movw	r30, r20
    a840:	10 82       	st	Z, r1
}
    a842:	df 91       	pop	r29
    a844:	cf 91       	pop	r28
    a846:	1f 91       	pop	r17
    a848:	0f 91       	pop	r16
    a84a:	08 95       	ret
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a84c:	40 e0       	ldi	r20, 0x00	; 0
    a84e:	50 e0       	ldi	r21, 0x00	; 0
    a850:	cf cf       	rjmp	.-98     	; 0xa7f0 <lib_string_append+0x26>
    a852:	20 e0       	ldi	r18, 0x00	; 0
    a854:	30 e0       	ldi	r19, 0x00	; 0
    a856:	ef cf       	rjmp	.-34     	; 0xa836 <lib_string_append+0x6c>

0000a858 <lib_string_split>:
	}
	base[length1+length2] = '\0';
}

char* lib_string_split(char ** string, char delimiter)
{
    a858:	cf 93       	push	r28
    a85a:	df 93       	push	r29
    a85c:	ec 01       	movw	r28, r24
	uint16_t i;
	char* output = (*string);
    a85e:	a8 81       	ld	r26, Y
    a860:	b9 81       	ldd	r27, Y+1	; 0x01

	for (i = 0; output[i] != 0; i++) 
    a862:	8c 91       	ld	r24, X
    a864:	88 23       	and	r24, r24
    a866:	11 f1       	breq	.+68     	; 0xa8ac <lib_string_split+0x54>
		if (output[i] == delimiter) {
    a868:	86 17       	cp	r24, r22
    a86a:	11 f1       	breq	.+68     	; 0xa8b0 <lib_string_split+0x58>
			output[i] = 0;
			*string = output + i + 1;
			return output;
    a86c:	ad 01       	movw	r20, r26
    a86e:	4f 5f       	subi	r20, 0xFF	; 255
    a870:	5f 4f       	sbci	r21, 0xFF	; 255
    a872:	80 e0       	ldi	r24, 0x00	; 0
    a874:	90 e0       	ldi	r25, 0x00	; 0
    a876:	05 c0       	rjmp	.+10     	; 0xa882 <lib_string_split+0x2a>
{
	uint16_t i;
	char* output = (*string);

	for (i = 0; output[i] != 0; i++) 
		if (output[i] == delimiter) {
    a878:	af 01       	movw	r20, r30
    a87a:	4f 5f       	subi	r20, 0xFF	; 255
    a87c:	5f 4f       	sbci	r21, 0xFF	; 255
    a87e:	26 17       	cp	r18, r22
    a880:	59 f0       	breq	.+22     	; 0xa898 <lib_string_split+0x40>
char* lib_string_split(char ** string, char delimiter)
{
	uint16_t i;
	char* output = (*string);

	for (i = 0; output[i] != 0; i++) 
    a882:	01 96       	adiw	r24, 0x01	; 1
    a884:	fa 01       	movw	r30, r20
    a886:	20 81       	ld	r18, Z
    a888:	22 23       	and	r18, r18
    a88a:	b1 f7       	brne	.-20     	; 0xa878 <lib_string_split+0x20>
			output[i] = 0;
			*string = output + i + 1;
			return output;
		}

	*string = output + i;
    a88c:	f9 83       	std	Y+1, r31	; 0x01
    a88e:	e8 83       	st	Y, r30
	return output;
}
    a890:	cd 01       	movw	r24, r26
    a892:	df 91       	pop	r29
    a894:	cf 91       	pop	r28
    a896:	08 95       	ret
{
	uint16_t i;
	char* output = (*string);

	for (i = 0; output[i] != 0; i++) 
		if (output[i] == delimiter) {
    a898:	01 96       	adiw	r24, 0x01	; 1
			output[i] = 0;
    a89a:	10 82       	st	Z, r1
			*string = output + i + 1;
    a89c:	8a 0f       	add	r24, r26
    a89e:	9b 1f       	adc	r25, r27
    a8a0:	99 83       	std	Y+1, r25	; 0x01
    a8a2:	88 83       	st	Y, r24
			return output;
		}

	*string = output + i;
	return output;
}
    a8a4:	cd 01       	movw	r24, r26
    a8a6:	df 91       	pop	r29
    a8a8:	cf 91       	pop	r28
    a8aa:	08 95       	ret
char* lib_string_split(char ** string, char delimiter)
{
	uint16_t i;
	char* output = (*string);

	for (i = 0; output[i] != 0; i++) 
    a8ac:	fd 01       	movw	r30, r26
    a8ae:	ee cf       	rjmp	.-36     	; 0xa88c <lib_string_split+0x34>
		if (output[i] == delimiter) {
    a8b0:	fd 01       	movw	r30, r26
    a8b2:	81 e0       	ldi	r24, 0x01	; 1
    a8b4:	90 e0       	ldi	r25, 0x00	; 0
    a8b6:	f1 cf       	rjmp	.-30     	; 0xa89a <lib_string_split+0x42>

0000a8b8 <lib_random>:
int lib_random()
{

	 int ret;
   void (*getrandomfp)(void) = (void (*)(void))GET_RANDOM_NUMBER_FUNCTION;
   asm volatile("push r20" "\n\t"
    a8b8:	4f 93       	push	r20
    a8ba:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getrandomfp();
    a8bc:	e8 e0       	ldi	r30, 0x08	; 8
    a8be:	fa ee       	ldi	r31, 0xEA	; 234
    a8c0:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a8c2:	24 2f       	mov	r18, r20
    a8c4:	35 2f       	mov	r19, r21
	              "mov %B0, r21" "\n\t"
				 :"=r" (ret)
				 :
                );
   asm volatile("pop r21" "\n\t"
    a8c6:	5f 91       	pop	r21
    a8c8:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return ret;

}
    a8ca:	c9 01       	movw	r24, r18
    a8cc:	08 95       	ret

0000a8ce <lib_get_node_id>:
uint16_t lib_get_node_id()
	{

	   int ret;
	   void (*fp)(void) = (void (*)(void))GET_NODE_ID_FUNCTION;
	   asm volatile("push r20" "\n\t"
    a8ce:	4f 93       	push	r20
    a8d0:	5f 93       	push	r21
					"push r21" "\n\t"
					::);
	   fp();
    a8d2:	e0 e0       	ldi	r30, 0x00	; 0
    a8d4:	fa ee       	ldi	r31, 0xEA	; 234
    a8d6:	09 95       	icall
	   asm volatile(" mov %A0, r20" "\n\t"
    a8d8:	24 2f       	mov	r18, r20
    a8da:	35 2f       	mov	r19, r21
					  "mov %B0, r21" "\n\t"
					 :"=r" (ret)
					 :
					);
	   asm volatile("pop r21" "\n\t"
    a8dc:	5f 91       	pop	r21
    a8de:	4f 91       	pop	r20
					 "pop r20" "\n\t"
					  ::);
	   return ret;

	}
    a8e0:	c9 01       	movw	r24, r18
    a8e2:	08 95       	ret

0000a8e4 <lib_set_node_id>:
	{



	   void (*fp)(void) = (void (*)(void))SET_NODE_ID_FUNCTION;
	   asm volatile("push r20" "\n\t"
    a8e4:	4f 93       	push	r20
    a8e6:	5f 93       	push	r21
					"push r21" "\n\t"
					::);

	   asm volatile(" mov r20, %A0" "\n\t"
    a8e8:	48 2f       	mov	r20, r24
    a8ea:	59 2f       	mov	r21, r25
					  "mov r21, %B0" "\n\t"
					 :
					 :"r" (nodeid)
					);
	   fp();
    a8ec:	e4 e0       	ldi	r30, 0x04	; 4
    a8ee:	fa ee       	ldi	r31, 0xEA	; 234
    a8f0:	09 95       	icall
	   asm volatile("pop r21" "\n\t"
    a8f2:	5f 91       	pop	r21
    a8f4:	4f 91       	pop	r20
					 "pop r20" "\n\t"
					  ::);
	   return;

	}
    a8f6:	08 95       	ret

0000a8f8 <lib_get_current_thread>:

lib_thread **lib_get_current_thread()
{
   lib_thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
    a8f8:	4f 93       	push	r20
    a8fa:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    a8fc:	e0 e8       	ldi	r30, 0x80	; 128
    a8fe:	fa ee       	ldi	r31, 0xEA	; 234
    a900:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a902:	24 2f       	mov	r18, r20
    a904:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
    a906:	5f 91       	pop	r21
    a908:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return current_thread; 
}
    a90a:	c9 01       	movw	r24, r18
    a90c:	08 95       	ret

0000a90e <lib_get_kernel_stack_ptr>:

void **lib_get_kernel_stack_ptr()
	{
   void **ptr;
   void (*getaddrfp)(void) = (void (*)(void))GET_KERNEL_STACK_PTR_ADDRESS; 
   asm volatile("push r20" "\n\t"
    a90e:	4f 93       	push	r20
    a910:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    a912:	e0 e8       	ldi	r30, 0x80	; 128
    a914:	fb ee       	ldi	r31, 0xEB	; 235
    a916:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a918:	24 2f       	mov	r18, r20
    a91a:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (ptr)
				 :
                );
    asm volatile("pop r21" "\n\t"
    a91c:	5f 91       	pop	r21
    a91e:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return ptr; 
}
    a920:	c9 01       	movw	r24, r18
    a922:	08 95       	ret

0000a924 <lib_get_current_thread_index>:
uint8_t lib_get_current_thread_index()
{
   
   uint16_t index; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_INDEX_FUNCTION; 
   asm volatile("push r20" "\n\t"
    a924:	4f 93       	push	r20
    a926:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    a928:	e4 e8       	ldi	r30, 0x84	; 132
    a92a:	fa ee       	ldi	r31, 0xEA	; 234
    a92c:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a92e:	84 2f       	mov	r24, r20
    a930:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (index)
				 :
                );
    asm volatile("pop r21" "\n\t"
    a932:	5f 91       	pop	r21
    a934:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return (uint8_t)index; 
}
    a936:	08 95       	ret

0000a938 <lib_get_thread_table_start>:
lib_thread *lib_get_thread_table_start()
{
	 lib_thread *fp;
	 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_TABLE_START; 
   asm volatile("push r20" "\n\t"
    a938:	4f 93       	push	r20
    a93a:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    a93c:	e8 e8       	ldi	r30, 0x88	; 136
    a93e:	fa ee       	ldi	r31, 0xEA	; 234
    a940:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a942:	24 2f       	mov	r18, r20
    a944:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (fp)
				 :
                );
    asm volatile("pop r21" "\n\t"
    a946:	5f 91       	pop	r21
    a948:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return fp; 
	
}
    a94a:	c9 01       	movw	r24, r18
    a94c:	08 95       	ret

0000a94e <lib_sleep_thread>:

void lib_sleep_thread(uint16_t milliseconds)
{
    a94e:	0f 93       	push	r16
    a950:	1f 93       	push	r17
    a952:	8c 01       	movw	r16, r24
	             "pop r25" "\n\t"
	              ::);
 */
 
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
    a954:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    a958:	dc 01       	movw	r26, r24
     
   (*current_thread)->state = 4;
    a95a:	ed 91       	ld	r30, X+
    a95c:	fc 91       	ld	r31, X
    a95e:	11 97       	sbiw	r26, 0x01	; 1
    a960:	84 e0       	ldi	r24, 0x04	; 4
    a962:	82 83       	std	Z+2, r24	; 0x02
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
    a964:	ed 91       	ld	r30, X+
    a966:	fc 91       	ld	r31, X
    a968:	16 8f       	std	Z+30, r17	; 0x1e
    a96a:	05 8f       	std	Z+29, r16	; 0x1d


void lib_yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    a96c:	ec e8       	ldi	r30, 0x8C	; 140
    a96e:	fa ee       	ldi	r31, 0xEA	; 234
    a970:	09 95       	icall
     
   (*current_thread)->state = 4;
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
   
   lib_yield(); 
}
    a972:	1f 91       	pop	r17
    a974:	0f 91       	pop	r16
    a976:	08 95       	ret

0000a978 <lib_hibernate_thread>:

void lib_hibernate_thread()
{
 
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
    a978:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    a97c:	fc 01       	movw	r30, r24
     
   (*current_thread)->state = 5; 
    a97e:	01 90       	ld	r0, Z+
    a980:	f0 81       	ld	r31, Z
    a982:	e0 2d       	mov	r30, r0
    a984:	85 e0       	ldi	r24, 0x05	; 5
    a986:	82 83       	std	Z+2, r24	; 0x02


void lib_yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    a988:	ec e8       	ldi	r30, 0x8C	; 140
    a98a:	fa ee       	ldi	r31, 0xEA	; 234
    a98c:	09 95       	icall
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
     
   (*current_thread)->state = 5; 
   lib_yield(); 
}
    a98e:	08 95       	ret

0000a990 <lib_yield>:


void lib_yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    a990:	ec e8       	ldi	r30, 0x8C	; 140
    a992:	fa ee       	ldi	r31, 0xEA	; 234
    a994:	09 95       	icall
}
    a996:	08 95       	ret

0000a998 <syscall_post_thread_task>:


void syscall_post_thread_task()
{
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK; 
 postthreadfp();                              
    a998:	e0 e9       	ldi	r30, 0x90	; 144
    a99a:	fa ee       	ldi	r31, 0xEA	; 234
    a99c:	09 95       	icall
}
    a99e:	08 95       	ret

0000a9a0 <lib_post_new_task>:


void lib_post_new_task(void (*tp) (void), uint16_t priority)
{
   void (*fp)(void) = (void (*)(void))POST_TASK_SYSCALL; 
   asm volatile("push r20" "\n\t"
    a9a0:	4f 93       	push	r20
    a9a2:	5f 93       	push	r21
    a9a4:	6f 93       	push	r22
    a9a6:	7f 93       	push	r23
                "push r21" "\n\t"
				"push r22" "\n\t"
				"push r23" "\n\t"
                ::);
   
   asm volatile(" mov r20, %A0" "\n\t"
    a9a8:	48 2f       	mov	r20, r24
    a9aa:	59 2f       	mov	r21, r25
				 :
				 :"r" (tp)
                );


   asm volatile(" mov r22, %A0" "\n\t"
    a9ac:	66 2f       	mov	r22, r22
    a9ae:	77 2f       	mov	r23, r23
	             "mov r23, %B0" "\n\t"
				 :
				 :"r" (priority)
                );

  fp(); 
    a9b0:	e0 e0       	ldi	r30, 0x00	; 0
    a9b2:	fb ee       	ldi	r31, 0xEB	; 235
    a9b4:	09 95       	icall

  asm volatile("pop r23" "\n\t"
    a9b6:	7f 91       	pop	r23
    a9b8:	6f 91       	pop	r22
	           "pop r22" "\n\t"
	              ::);

  asm volatile("pop r21" "\n\t"
    a9ba:	5f 91       	pop	r21
    a9bc:	4f 91       	pop	r20
	           "pop r20" "\n\t"
	              ::);
  return; 


}
    a9be:	08 95       	ret

0000a9c0 <syscall_post_thread_task_no_logging>:


void syscall_post_thread_task_no_logging()
{
	void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK_NOLOG; 
  postthreadfp();  
    a9c0:	e4 e9       	ldi	r30, 0x94	; 148
    a9c2:	fa ee       	ldi	r31, 0xEA	; 234
    a9c4:	09 95       	icall
	
}
    a9c6:	08 95       	ret

0000a9c8 <lib_set_thread_termination_handler>:


 

void lib_set_thread_termination_handler(void (*tp) (void))
{
    a9c8:	0f 93       	push	r16
    a9ca:	1f 93       	push	r17
    a9cc:	8c 01       	movw	r16, r24
   
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
    a9ce:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    a9d2:	fc 01       	movw	r30, r24
     
   (*current_thread)->thread_clear_function = tp; 
    a9d4:	01 90       	ld	r0, Z+
    a9d6:	f0 81       	ld	r31, Z
    a9d8:	e0 2d       	mov	r30, r0
    a9da:	14 8f       	std	Z+28, r17	; 0x1c
    a9dc:	03 8f       	std	Z+27, r16	; 0x1b
   return; 
}
    a9de:	1f 91       	pop	r17
    a9e0:	0f 91       	pop	r16
    a9e2:	08 95       	ret

0000a9e4 <lib_file_barrier_block>:





void lib_file_barrier_block(uint8_t type, uint8_t id){
    a9e4:	df 92       	push	r13
    a9e6:	ef 92       	push	r14
    a9e8:	ff 92       	push	r15
    a9ea:	0f 93       	push	r16
    a9ec:	1f 93       	push	r17
    a9ee:	e8 2e       	mov	r14, r24
    a9f0:	d6 2e       	mov	r13, r22
   
    _atomic_t currentatomic;
	lib_thread **current_thread; 

     
	current_thread = lib_get_current_thread(); 
    a9f2:	0e 94 7c 54 	call	0xa8f8	; 0xa8f8 <lib_get_current_thread>
    a9f6:	8c 01       	movw	r16, r24

    currentatomic = _atomic_start();
    a9f8:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_atomic_start>
    a9fc:	f8 2e       	mov	r15, r24
    
      (*current_thread)->state = STATE_IO;
    a9fe:	d8 01       	movw	r26, r16
    aa00:	ed 91       	ld	r30, X+
    aa02:	fc 91       	ld	r31, X
    aa04:	11 97       	sbiw	r26, 0x01	; 1
    aa06:	86 e0       	ldi	r24, 0x06	; 6
    aa08:	82 83       	std	Z+2, r24	; 0x02
      (*current_thread)->data.iostate.type = type;
    aa0a:	ed 91       	ld	r30, X+
    aa0c:	fc 91       	ld	r31, X
    aa0e:	11 97       	sbiw	r26, 0x01	; 1
    aa10:	e5 8e       	std	Z+29, r14	; 0x1d
      (*current_thread)->data.iostate.id = id;
    aa12:	ed 91       	ld	r30, X+
    aa14:	fc 91       	ld	r31, X
    aa16:	d6 8e       	std	Z+30, r13	; 0x1e
      lib_yield();
    aa18:	0e 94 c8 54 	call	0xa990	; 0xa990 <lib_yield>
    
    _atomic_end(currentatomic);
    aa1c:	8f 2d       	mov	r24, r15
    aa1e:	0e 94 51 3c 	call	0x78a2	; 0x78a2 <_atomic_end>
}
    aa22:	1f 91       	pop	r17
    aa24:	0f 91       	pop	r16
    aa26:	ff 90       	pop	r15
    aa28:	ef 90       	pop	r14
    aa2a:	df 90       	pop	r13
    aa2c:	08 95       	ret

0000aa2e <blink>:
uint16_t counter; 

uint16_t addr; 

void blink()
{
    aa2e:	cf 93       	push	r28
    aa30:	df 93       	push	r29

   char *str = "hello,world"; 
   uint8_t *addrptr; 
   
   addr = 256; 
    aa32:	80 e0       	ldi	r24, 0x00	; 0
    aa34:	91 e0       	ldi	r25, 0x01	; 1
    aa36:	90 93 1c 0a 	sts	0x0A1C, r25
    aa3a:	80 93 1b 0a 	sts	0x0A1B, r24
   lib_mfseek(filefp, 10, 1);
}
   lib_mfclose(filefp); 
*/
	 
   for (counter=0; counter<3000; counter++)
    aa3e:	10 92 1a 0a 	sts	0x0A1A, r1
    aa42:	10 92 19 0a 	sts	0x0A19, r1
    aa46:	80 e0       	ldi	r24, 0x00	; 0
    aa48:	90 e0       	ldi	r25, 0x00	; 0
    aa4a:	c1 e0       	ldi	r28, 0x01	; 1
    aa4c:	d0 e0       	ldi	r29, 0x00	; 0
   	{
   	 if (counter<1000)
    aa4e:	23 e0       	ldi	r18, 0x03	; 3
    aa50:	88 3e       	cpi	r24, 0xE8	; 232
    aa52:	92 07       	cpc	r25, r18
    aa54:	b0 f1       	brcs	.+108    	; 0xaac2 <blink+0x94>
	   lib_red_toggle();   
     else if (counter <2000)
    aa56:	80 5d       	subi	r24, 0xD0	; 208
    aa58:	97 40       	sbci	r25, 0x07	; 7
    aa5a:	80 f5       	brcc	.+96     	; 0xaabc <blink+0x8e>
	    lib_yellow_toggle();
    aa5c:	0e 94 77 4f 	call	0x9eee	; 0x9eee <lib_yellow_toggle>
		else
		 lib_green_toggle();

     addrptr = (uint8_t*)addr; 
    aa60:	20 91 1b 0a 	lds	r18, 0x0A1B
    aa64:	30 91 1c 0a 	lds	r19, 0x0A1C
     
   	 if (addr<4000)
    aa68:	8f e0       	ldi	r24, 0x0F	; 15
    aa6a:	20 3a       	cpi	r18, 0xA0	; 160
    aa6c:	38 07       	cpc	r19, r24
    aa6e:	98 f1       	brcs	.+102    	; 0xaad6 <blink+0xa8>
   	 lib_radio_send_msg(12, 0xFFFF, 50, (uint8_t*)addrptr);
   	 
   	 addr+=80; 
    aa70:	c9 01       	movw	r24, r18
    aa72:	80 5b       	subi	r24, 0xB0	; 176
    aa74:	9f 4f       	sbci	r25, 0xFF	; 255
    aa76:	90 93 1c 0a 	sts	0x0A1C, r25
    aa7a:	80 93 1b 0a 	sts	0x0A1B, r24
     
     if (addr >4000)
    aa7e:	81 5a       	subi	r24, 0xA1	; 161
    aa80:	9f 40       	sbci	r25, 0x0F	; 15
    aa82:	20 f0       	brcs	.+8      	; 0xaa8c <blink+0x5e>
     	addr = 0;
    aa84:	10 92 1c 0a 	sts	0x0A1C, r1
    aa88:	10 92 1b 0a 	sts	0x0A1B, r1
     lib_sleep_thread(1000);
    aa8c:	88 ee       	ldi	r24, 0xE8	; 232
    aa8e:	93 e0       	ldi	r25, 0x03	; 3
    aa90:	0e 94 a7 54 	call	0xa94e	; 0xa94e <lib_sleep_thread>
     if (counter == 2999)
    aa94:	80 91 19 0a 	lds	r24, 0x0A19
    aa98:	90 91 1a 0a 	lds	r25, 0x0A1A
    aa9c:	2b e0       	ldi	r18, 0x0B	; 11
    aa9e:	87 3b       	cpi	r24, 0xB7	; 183
    aaa0:	92 07       	cpc	r25, r18
    aaa2:	91 f0       	breq	.+36     	; 0xaac8 <blink+0x9a>
   lib_mfseek(filefp, 10, 1);
}
   lib_mfclose(filefp); 
*/
	 
   for (counter=0; counter<3000; counter++)
    aaa4:	01 96       	adiw	r24, 0x01	; 1
    aaa6:	90 93 1a 0a 	sts	0x0A1A, r25
    aaaa:	80 93 19 0a 	sts	0x0A19, r24
    aaae:	2b e0       	ldi	r18, 0x0B	; 11
    aab0:	88 3b       	cpi	r24, 0xB8	; 184
    aab2:	92 07       	cpc	r25, r18
    aab4:	60 f2       	brcs	.-104    	; 0xaa4e <blink+0x20>
     lib_sleep_thread(1000);
     if (counter == 2999)
     	counter = 0; 
	   }
  	return; 
}
    aab6:	df 91       	pop	r29
    aab8:	cf 91       	pop	r28
    aaba:	08 95       	ret
   	 if (counter<1000)
	   lib_red_toggle();   
     else if (counter <2000)
	    lib_yellow_toggle();
		else
		 lib_green_toggle();
    aabc:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <lib_green_toggle>
    aac0:	cf cf       	rjmp	.-98     	; 0xaa60 <blink+0x32>
*/
	 
   for (counter=0; counter<3000; counter++)
   	{
   	 if (counter<1000)
	   lib_red_toggle();   
    aac2:	0e 94 73 4f 	call	0x9ee6	; 0x9ee6 <lib_red_toggle>
    aac6:	cc cf       	rjmp	.-104    	; 0xaa60 <blink+0x32>
   lib_mfseek(filefp, 10, 1);
}
   lib_mfclose(filefp); 
*/
	 
   for (counter=0; counter<3000; counter++)
    aac8:	81 e0       	ldi	r24, 0x01	; 1
    aaca:	90 e0       	ldi	r25, 0x00	; 0
    aacc:	d0 93 1a 0a 	sts	0x0A1A, r29
    aad0:	c0 93 19 0a 	sts	0x0A19, r28
    aad4:	bc cf       	rjmp	.-136    	; 0xaa4e <blink+0x20>
		 lib_green_toggle();

     addrptr = (uint8_t*)addr; 
     
   	 if (addr<4000)
   	 lib_radio_send_msg(12, 0xFFFF, 50, (uint8_t*)addrptr);
    aad6:	8c e0       	ldi	r24, 0x0C	; 12
    aad8:	90 e0       	ldi	r25, 0x00	; 0
    aada:	6f ef       	ldi	r22, 0xFF	; 255
    aadc:	7f ef       	ldi	r23, 0xFF	; 255
    aade:	42 e3       	ldi	r20, 0x32	; 50
    aae0:	0e 94 3d 50 	call	0xa07a	; 0xa07a <lib_radio_send_msg>
    aae4:	20 91 1b 0a 	lds	r18, 0x0A1B
    aae8:	30 91 1c 0a 	lds	r19, 0x0A1C
    aaec:	c1 cf       	rjmp	.-126    	; 0xaa70 <blink+0x42>

0000aaee <__mulsi3>:
    aaee:	62 9f       	mul	r22, r18
    aaf0:	d0 01       	movw	r26, r0
    aaf2:	73 9f       	mul	r23, r19
    aaf4:	f0 01       	movw	r30, r0
    aaf6:	82 9f       	mul	r24, r18
    aaf8:	e0 0d       	add	r30, r0
    aafa:	f1 1d       	adc	r31, r1
    aafc:	64 9f       	mul	r22, r20
    aafe:	e0 0d       	add	r30, r0
    ab00:	f1 1d       	adc	r31, r1
    ab02:	92 9f       	mul	r25, r18
    ab04:	f0 0d       	add	r31, r0
    ab06:	83 9f       	mul	r24, r19
    ab08:	f0 0d       	add	r31, r0
    ab0a:	74 9f       	mul	r23, r20
    ab0c:	f0 0d       	add	r31, r0
    ab0e:	65 9f       	mul	r22, r21
    ab10:	f0 0d       	add	r31, r0
    ab12:	99 27       	eor	r25, r25
    ab14:	72 9f       	mul	r23, r18
    ab16:	b0 0d       	add	r27, r0
    ab18:	e1 1d       	adc	r30, r1
    ab1a:	f9 1f       	adc	r31, r25
    ab1c:	63 9f       	mul	r22, r19
    ab1e:	b0 0d       	add	r27, r0
    ab20:	e1 1d       	adc	r30, r1
    ab22:	f9 1f       	adc	r31, r25
    ab24:	bd 01       	movw	r22, r26
    ab26:	cf 01       	movw	r24, r30
    ab28:	11 24       	eor	r1, r1
    ab2a:	08 95       	ret

0000ab2c <__udivmodhi4>:
    ab2c:	aa 1b       	sub	r26, r26
    ab2e:	bb 1b       	sub	r27, r27
    ab30:	51 e1       	ldi	r21, 0x11	; 17
    ab32:	07 c0       	rjmp	.+14     	; 0xab42 <__udivmodhi4_ep>

0000ab34 <__udivmodhi4_loop>:
    ab34:	aa 1f       	adc	r26, r26
    ab36:	bb 1f       	adc	r27, r27
    ab38:	a6 17       	cp	r26, r22
    ab3a:	b7 07       	cpc	r27, r23
    ab3c:	10 f0       	brcs	.+4      	; 0xab42 <__udivmodhi4_ep>
    ab3e:	a6 1b       	sub	r26, r22
    ab40:	b7 0b       	sbc	r27, r23

0000ab42 <__udivmodhi4_ep>:
    ab42:	88 1f       	adc	r24, r24
    ab44:	99 1f       	adc	r25, r25
    ab46:	5a 95       	dec	r21
    ab48:	a9 f7       	brne	.-22     	; 0xab34 <__udivmodhi4_loop>
    ab4a:	80 95       	com	r24
    ab4c:	90 95       	com	r25
    ab4e:	bc 01       	movw	r22, r24
    ab50:	cd 01       	movw	r24, r26
    ab52:	08 95       	ret

0000ab54 <__divmodhi4>:
    ab54:	97 fb       	bst	r25, 7
    ab56:	09 2e       	mov	r0, r25
    ab58:	07 26       	eor	r0, r23
    ab5a:	0a d0       	rcall	.+20     	; 0xab70 <__divmodhi4_neg1>
    ab5c:	77 fd       	sbrc	r23, 7
    ab5e:	04 d0       	rcall	.+8      	; 0xab68 <__divmodhi4_neg2>
    ab60:	e5 df       	rcall	.-54     	; 0xab2c <__udivmodhi4>
    ab62:	06 d0       	rcall	.+12     	; 0xab70 <__divmodhi4_neg1>
    ab64:	00 20       	and	r0, r0
    ab66:	1a f4       	brpl	.+6      	; 0xab6e <__divmodhi4_exit>

0000ab68 <__divmodhi4_neg2>:
    ab68:	70 95       	com	r23
    ab6a:	61 95       	neg	r22
    ab6c:	7f 4f       	sbci	r23, 0xFF	; 255

0000ab6e <__divmodhi4_exit>:
    ab6e:	08 95       	ret

0000ab70 <__divmodhi4_neg1>:
    ab70:	f6 f7       	brtc	.-4      	; 0xab6e <__divmodhi4_exit>
    ab72:	90 95       	com	r25
    ab74:	81 95       	neg	r24
    ab76:	9f 4f       	sbci	r25, 0xFF	; 255
    ab78:	08 95       	ret

0000ab7a <__udivmodsi4>:
    ab7a:	a1 e2       	ldi	r26, 0x21	; 33
    ab7c:	1a 2e       	mov	r1, r26
    ab7e:	aa 1b       	sub	r26, r26
    ab80:	bb 1b       	sub	r27, r27
    ab82:	fd 01       	movw	r30, r26
    ab84:	0d c0       	rjmp	.+26     	; 0xaba0 <__udivmodsi4_ep>

0000ab86 <__udivmodsi4_loop>:
    ab86:	aa 1f       	adc	r26, r26
    ab88:	bb 1f       	adc	r27, r27
    ab8a:	ee 1f       	adc	r30, r30
    ab8c:	ff 1f       	adc	r31, r31
    ab8e:	a2 17       	cp	r26, r18
    ab90:	b3 07       	cpc	r27, r19
    ab92:	e4 07       	cpc	r30, r20
    ab94:	f5 07       	cpc	r31, r21
    ab96:	20 f0       	brcs	.+8      	; 0xaba0 <__udivmodsi4_ep>
    ab98:	a2 1b       	sub	r26, r18
    ab9a:	b3 0b       	sbc	r27, r19
    ab9c:	e4 0b       	sbc	r30, r20
    ab9e:	f5 0b       	sbc	r31, r21

0000aba0 <__udivmodsi4_ep>:
    aba0:	66 1f       	adc	r22, r22
    aba2:	77 1f       	adc	r23, r23
    aba4:	88 1f       	adc	r24, r24
    aba6:	99 1f       	adc	r25, r25
    aba8:	1a 94       	dec	r1
    abaa:	69 f7       	brne	.-38     	; 0xab86 <__udivmodsi4_loop>
    abac:	60 95       	com	r22
    abae:	70 95       	com	r23
    abb0:	80 95       	com	r24
    abb2:	90 95       	com	r25
    abb4:	9b 01       	movw	r18, r22
    abb6:	ac 01       	movw	r20, r24
    abb8:	bd 01       	movw	r22, r26
    abba:	cf 01       	movw	r24, r30
    abbc:	08 95       	ret

0000abbe <__divmodsi4>:
    abbe:	97 fb       	bst	r25, 7
    abc0:	09 2e       	mov	r0, r25
    abc2:	05 26       	eor	r0, r21
    abc4:	0e d0       	rcall	.+28     	; 0xabe2 <__divmodsi4_neg1>
    abc6:	57 fd       	sbrc	r21, 7
    abc8:	04 d0       	rcall	.+8      	; 0xabd2 <__divmodsi4_neg2>
    abca:	d7 df       	rcall	.-82     	; 0xab7a <__udivmodsi4>
    abcc:	0a d0       	rcall	.+20     	; 0xabe2 <__divmodsi4_neg1>
    abce:	00 1c       	adc	r0, r0
    abd0:	38 f4       	brcc	.+14     	; 0xabe0 <__divmodsi4_exit>

0000abd2 <__divmodsi4_neg2>:
    abd2:	50 95       	com	r21
    abd4:	40 95       	com	r20
    abd6:	30 95       	com	r19
    abd8:	21 95       	neg	r18
    abda:	3f 4f       	sbci	r19, 0xFF	; 255
    abdc:	4f 4f       	sbci	r20, 0xFF	; 255
    abde:	5f 4f       	sbci	r21, 0xFF	; 255

0000abe0 <__divmodsi4_exit>:
    abe0:	08 95       	ret

0000abe2 <__divmodsi4_neg1>:
    abe2:	f6 f7       	brtc	.-4      	; 0xabe0 <__divmodsi4_exit>
    abe4:	90 95       	com	r25
    abe6:	80 95       	com	r24
    abe8:	70 95       	com	r23
    abea:	61 95       	neg	r22
    abec:	7f 4f       	sbci	r23, 0xFF	; 255
    abee:	8f 4f       	sbci	r24, 0xFF	; 255
    abf0:	9f 4f       	sbci	r25, 0xFF	; 255
    abf2:	08 95       	ret

0000abf4 <do_rand>:
    abf4:	af 92       	push	r10
    abf6:	bf 92       	push	r11
    abf8:	cf 92       	push	r12
    abfa:	df 92       	push	r13
    abfc:	ef 92       	push	r14
    abfe:	ff 92       	push	r15
    ac00:	0f 93       	push	r16
    ac02:	1f 93       	push	r17
    ac04:	cf 93       	push	r28
    ac06:	df 93       	push	r29
    ac08:	ec 01       	movw	r28, r24
    ac0a:	a8 80       	ld	r10, Y
    ac0c:	b9 80       	ldd	r11, Y+1	; 0x01
    ac0e:	ca 80       	ldd	r12, Y+2	; 0x02
    ac10:	db 80       	ldd	r13, Y+3	; 0x03
    ac12:	a1 14       	cp	r10, r1
    ac14:	b1 04       	cpc	r11, r1
    ac16:	c1 04       	cpc	r12, r1
    ac18:	d1 04       	cpc	r13, r1
    ac1a:	41 f4       	brne	.+16     	; 0xac2c <do_rand+0x38>
    ac1c:	84 e2       	ldi	r24, 0x24	; 36
    ac1e:	a8 2e       	mov	r10, r24
    ac20:	89 ed       	ldi	r24, 0xD9	; 217
    ac22:	b8 2e       	mov	r11, r24
    ac24:	8b e5       	ldi	r24, 0x5B	; 91
    ac26:	c8 2e       	mov	r12, r24
    ac28:	87 e0       	ldi	r24, 0x07	; 7
    ac2a:	d8 2e       	mov	r13, r24
    ac2c:	c6 01       	movw	r24, r12
    ac2e:	b5 01       	movw	r22, r10
    ac30:	2d e1       	ldi	r18, 0x1D	; 29
    ac32:	33 ef       	ldi	r19, 0xF3	; 243
    ac34:	41 e0       	ldi	r20, 0x01	; 1
    ac36:	50 e0       	ldi	r21, 0x00	; 0
    ac38:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    ac3c:	27 ea       	ldi	r18, 0xA7	; 167
    ac3e:	31 e4       	ldi	r19, 0x41	; 65
    ac40:	40 e0       	ldi	r20, 0x00	; 0
    ac42:	50 e0       	ldi	r21, 0x00	; 0
    ac44:	0e 94 77 55 	call	0xaaee	; 0xaaee <__mulsi3>
    ac48:	7b 01       	movw	r14, r22
    ac4a:	8c 01       	movw	r16, r24
    ac4c:	c6 01       	movw	r24, r12
    ac4e:	b5 01       	movw	r22, r10
    ac50:	2d e1       	ldi	r18, 0x1D	; 29
    ac52:	33 ef       	ldi	r19, 0xF3	; 243
    ac54:	41 e0       	ldi	r20, 0x01	; 1
    ac56:	50 e0       	ldi	r21, 0x00	; 0
    ac58:	0e 94 df 55 	call	0xabbe	; 0xabbe <__divmodsi4>
    ac5c:	ca 01       	movw	r24, r20
    ac5e:	b9 01       	movw	r22, r18
    ac60:	2c ee       	ldi	r18, 0xEC	; 236
    ac62:	34 ef       	ldi	r19, 0xF4	; 244
    ac64:	4f ef       	ldi	r20, 0xFF	; 255
    ac66:	5f ef       	ldi	r21, 0xFF	; 255
    ac68:	0e 94 77 55 	call	0xaaee	; 0xaaee <__mulsi3>
    ac6c:	6e 0d       	add	r22, r14
    ac6e:	7f 1d       	adc	r23, r15
    ac70:	80 1f       	adc	r24, r16
    ac72:	91 1f       	adc	r25, r17
    ac74:	97 ff       	sbrs	r25, 7
    ac76:	04 c0       	rjmp	.+8      	; 0xac80 <do_rand+0x8c>
    ac78:	61 50       	subi	r22, 0x01	; 1
    ac7a:	70 40       	sbci	r23, 0x00	; 0
    ac7c:	80 40       	sbci	r24, 0x00	; 0
    ac7e:	90 48       	sbci	r25, 0x80	; 128
    ac80:	68 83       	st	Y, r22
    ac82:	79 83       	std	Y+1, r23	; 0x01
    ac84:	8a 83       	std	Y+2, r24	; 0x02
    ac86:	9b 83       	std	Y+3, r25	; 0x03
    ac88:	9b 01       	movw	r18, r22
    ac8a:	3f 77       	andi	r19, 0x7F	; 127
    ac8c:	c9 01       	movw	r24, r18
    ac8e:	df 91       	pop	r29
    ac90:	cf 91       	pop	r28
    ac92:	1f 91       	pop	r17
    ac94:	0f 91       	pop	r16
    ac96:	ff 90       	pop	r15
    ac98:	ef 90       	pop	r14
    ac9a:	df 90       	pop	r13
    ac9c:	cf 90       	pop	r12
    ac9e:	bf 90       	pop	r11
    aca0:	af 90       	pop	r10
    aca2:	08 95       	ret

0000aca4 <rand_r>:
    aca4:	0e 94 fa 55 	call	0xabf4	; 0xabf4 <do_rand>
    aca8:	08 95       	ret

0000acaa <rand>:
    acaa:	85 e4       	ldi	r24, 0x45	; 69
    acac:	91 e0       	ldi	r25, 0x01	; 1
    acae:	0e 94 fa 55 	call	0xabf4	; 0xabf4 <do_rand>
    acb2:	08 95       	ret

0000acb4 <srand>:
    acb4:	a0 e0       	ldi	r26, 0x00	; 0
    acb6:	b0 e0       	ldi	r27, 0x00	; 0
    acb8:	80 93 45 01 	sts	0x0145, r24
    acbc:	90 93 46 01 	sts	0x0146, r25
    acc0:	a0 93 47 01 	sts	0x0147, r26
    acc4:	b0 93 48 01 	sts	0x0148, r27
    acc8:	08 95       	ret

0000acca <__eerd_block_m128>:
    acca:	dc 01       	movw	r26, r24
    accc:	cb 01       	movw	r24, r22

0000acce <__eerd_blraw_m128>:
    acce:	fc 01       	movw	r30, r24
    acd0:	e1 99       	sbic	0x1c, 1	; 28
    acd2:	fe cf       	rjmp	.-4      	; 0xacd0 <__eerd_blraw_m128+0x2>
    acd4:	06 c0       	rjmp	.+12     	; 0xace2 <__eerd_blraw_m128+0x14>
    acd6:	ff bb       	out	0x1f, r31	; 31
    acd8:	ee bb       	out	0x1e, r30	; 30
    acda:	e0 9a       	sbi	0x1c, 0	; 28
    acdc:	31 96       	adiw	r30, 0x01	; 1
    acde:	0d b2       	in	r0, 0x1d	; 29
    ace0:	0d 92       	st	X+, r0
    ace2:	41 50       	subi	r20, 0x01	; 1
    ace4:	50 40       	sbci	r21, 0x00	; 0
    ace6:	b8 f7       	brcc	.-18     	; 0xacd6 <__eerd_blraw_m128+0x8>
    ace8:	08 95       	ret

0000acea <__eerd_byte_m128>:
    acea:	e1 99       	sbic	0x1c, 1	; 28
    acec:	fe cf       	rjmp	.-4      	; 0xacea <__eerd_byte_m128>
    acee:	9f bb       	out	0x1f, r25	; 31
    acf0:	8e bb       	out	0x1e, r24	; 30
    acf2:	e0 9a       	sbi	0x1c, 0	; 28
    acf4:	99 27       	eor	r25, r25
    acf6:	8d b3       	in	r24, 0x1d	; 29
    acf8:	08 95       	ret

0000acfa <__eerd_word_m128>:
    acfa:	a8 e1       	ldi	r26, 0x18	; 24
    acfc:	b0 e0       	ldi	r27, 0x00	; 0
    acfe:	42 e0       	ldi	r20, 0x02	; 2
    ad00:	50 e0       	ldi	r21, 0x00	; 0
    ad02:	0c 94 67 56 	jmp	0xacce	; 0xacce <__eerd_blraw_m128>

0000ad06 <__eewr_block_m128>:
    ad06:	dc 01       	movw	r26, r24
    ad08:	cb 01       	movw	r24, r22
    ad0a:	03 c0       	rjmp	.+6      	; 0xad12 <__eewr_block_m128+0xc>
    ad0c:	2d 91       	ld	r18, X+
    ad0e:	0e 94 8e 56 	call	0xad1c	; 0xad1c <__eewr_r18_m128>
    ad12:	41 50       	subi	r20, 0x01	; 1
    ad14:	50 40       	sbci	r21, 0x00	; 0
    ad16:	d0 f7       	brcc	.-12     	; 0xad0c <__eewr_block_m128+0x6>
    ad18:	08 95       	ret

0000ad1a <__eewr_byte_m128>:
    ad1a:	26 2f       	mov	r18, r22

0000ad1c <__eewr_r18_m128>:
    ad1c:	e1 99       	sbic	0x1c, 1	; 28
    ad1e:	fe cf       	rjmp	.-4      	; 0xad1c <__eewr_r18_m128>
    ad20:	9f bb       	out	0x1f, r25	; 31
    ad22:	8e bb       	out	0x1e, r24	; 30
    ad24:	2d bb       	out	0x1d, r18	; 29
    ad26:	0f b6       	in	r0, 0x3f	; 63
    ad28:	f8 94       	cli
    ad2a:	e2 9a       	sbi	0x1c, 2	; 28
    ad2c:	e1 9a       	sbi	0x1c, 1	; 28
    ad2e:	0f be       	out	0x3f, r0	; 63
    ad30:	01 96       	adiw	r24, 0x01	; 1
    ad32:	08 95       	ret

0000ad34 <__eewr_word_m128>:
    ad34:	0e 94 8d 56 	call	0xad1a	; 0xad1a <__eewr_byte_m128>
    ad38:	27 2f       	mov	r18, r23
    ad3a:	0c 94 8e 56 	jmp	0xad1c	; 0xad1c <__eewr_r18_m128>

0000ad3e <_exit>:
    ad3e:	f8 94       	cli

0000ad40 <__stop_program>:
    ad40:	ff cf       	rjmp	.-2      	; 0xad40 <__stop_program>

Disassembly of section .bootloader:

0001e000 <ProgramSetPage>:
    0xEF, 0x93, 0xFF, 0x93, 0xE4, 0xEF, 0xFA, 0xEE, 0x09, 0x95, 0xFF, 0x91,
        0xEF,
    0x91, 0xFF, 0xFF
};
void __attribute__ ((section(".bootloader"))) ProgramSetPage(uint16_t pageno)
{
   1e000:	ee e4       	ldi	r30, 0x4E	; 78
   1e002:	f1 e0       	ldi	r31, 0x01	; 1
    int i;

    for (i = 0; i < 512; i++)
    {
        pagebuffer[i] = 0;
   1e004:	11 92       	st	Z+, r1
};
void __attribute__ ((section(".bootloader"))) ProgramSetPage(uint16_t pageno)
{
    int i;

    for (i = 0; i < 512; i++)
   1e006:	23 e0       	ldi	r18, 0x03	; 3
   1e008:	ee 34       	cpi	r30, 0x4E	; 78
   1e00a:	f2 07       	cpc	r31, r18
   1e00c:	d9 f7       	brne	.-10     	; 0x1e004 <ProgramSetPage+0x4>
    {
        pagebuffer[i] = 0;
    }
    pageindex = pageno;
   1e00e:	90 93 4d 01 	sts	0x014D, r25
   1e012:	80 93 4c 01 	sts	0x014C, r24
    currentpageindex = 0;
   1e016:	10 92 4f 03 	sts	0x034F, r1
   1e01a:	10 92 4e 03 	sts	0x034E, r1
}
   1e01e:	08 95       	ret

0001e020 <boot_program_page>:
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) boot_program_page(uint32_t page,
                                                                uint8_t * buf)
{
   1e020:	af 92       	push	r10
   1e022:	bf 92       	push	r11
   1e024:	cf 92       	push	r12
   1e026:	df 92       	push	r13
   1e028:	ef 92       	push	r14
   1e02a:	ff 92       	push	r15
   1e02c:	0f 93       	push	r16
   1e02e:	1f 93       	push	r17
   1e030:	cf 93       	push	r28
   1e032:	df 93       	push	r29
   1e034:	5b 01       	movw	r10, r22
   1e036:	6c 01       	movw	r12, r24
   1e038:	ea 01       	movw	r28, r20
    uint16_t i;
    uint8_t sreg;

    // Disable interrupts.
    sreg = SREG;
   1e03a:	7f b7       	in	r23, 0x3f	; 63
    cli();
   1e03c:	f8 94       	cli
    eeprom_busy_wait();
   1e03e:	e1 99       	sbic	0x1c, 1	; 28
   1e040:	fe cf       	rjmp	.-4      	; 0x1e03e <boot_program_page+0x1e>
    boot_page_erase(page);
   1e042:	83 e0       	ldi	r24, 0x03	; 3
   1e044:	f5 01       	movw	r30, r10
   1e046:	c0 92 5b 00 	sts	0x005B, r12
   1e04a:	80 93 68 00 	sts	0x0068, r24
   1e04e:	e8 95       	spm
    boot_spm_busy_wait();       // Wait until the memory is erased.
   1e050:	80 91 68 00 	lds	r24, 0x0068
   1e054:	80 fd       	sbrc	r24, 0
   1e056:	fc cf       	rjmp	.-8      	; 0x1e050 <boot_program_page+0x30>
   1e058:	ee 24       	eor	r14, r14
   1e05a:	ff 24       	eor	r15, r15
   1e05c:	87 01       	movw	r16, r14
    {
        // Set up little-endian word.
        uint16_t w = *buf++;

        w += (*buf++) << 8;
        boot_page_fill(page + i, w);
   1e05e:	61 e0       	ldi	r22, 0x01	; 1
    boot_page_erase(page);
    boot_spm_busy_wait();       // Wait until the memory is erased.
    for (i = 0; i < SPM_PAGESIZE; i += 2)
    {
        // Set up little-endian word.
        uint16_t w = *buf++;
   1e060:	88 81       	ld	r24, Y

        w += (*buf++) << 8;
   1e062:	59 81       	ldd	r21, Y+1	; 0x01
   1e064:	40 e0       	ldi	r20, 0x00	; 0
   1e066:	9a 01       	movw	r18, r20
   1e068:	28 0f       	add	r18, r24
   1e06a:	31 1d       	adc	r19, r1
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) boot_program_page(uint32_t page,
                                                                uint8_t * buf)
{
   1e06c:	22 96       	adiw	r28, 0x02	; 2
    {
        // Set up little-endian word.
        uint16_t w = *buf++;

        w += (*buf++) << 8;
        boot_page_fill(page + i, w);
   1e06e:	d8 01       	movw	r26, r16
   1e070:	c7 01       	movw	r24, r14
   1e072:	8a 0d       	add	r24, r10
   1e074:	9b 1d       	adc	r25, r11
   1e076:	ac 1d       	adc	r26, r12
   1e078:	bd 1d       	adc	r27, r13
   1e07a:	09 01       	movw	r0, r18
   1e07c:	fc 01       	movw	r30, r24
   1e07e:	a0 93 5b 00 	sts	0x005B, r26
   1e082:	60 93 68 00 	sts	0x0068, r22
   1e086:	e8 95       	spm
   1e088:	11 24       	eor	r1, r1
   1e08a:	82 e0       	ldi	r24, 0x02	; 2
   1e08c:	90 e0       	ldi	r25, 0x00	; 0
   1e08e:	a0 e0       	ldi	r26, 0x00	; 0
   1e090:	b0 e0       	ldi	r27, 0x00	; 0
   1e092:	e8 0e       	add	r14, r24
   1e094:	f9 1e       	adc	r15, r25
   1e096:	0a 1f       	adc	r16, r26
   1e098:	1b 1f       	adc	r17, r27
    sreg = SREG;
    cli();
    eeprom_busy_wait();
    boot_page_erase(page);
    boot_spm_busy_wait();       // Wait until the memory is erased.
    for (i = 0; i < SPM_PAGESIZE; i += 2)
   1e09a:	90 e0       	ldi	r25, 0x00	; 0
   1e09c:	e9 16       	cp	r14, r25
   1e09e:	91 e0       	ldi	r25, 0x01	; 1
   1e0a0:	f9 06       	cpc	r15, r25
   1e0a2:	90 e0       	ldi	r25, 0x00	; 0
   1e0a4:	09 07       	cpc	r16, r25
   1e0a6:	90 e0       	ldi	r25, 0x00	; 0
   1e0a8:	19 07       	cpc	r17, r25
   1e0aa:	d1 f6       	brne	.-76     	; 0x1e060 <boot_program_page+0x40>
        uint16_t w = *buf++;

        w += (*buf++) << 8;
        boot_page_fill(page + i, w);
    }
    boot_spm_busy_wait();
   1e0ac:	80 91 68 00 	lds	r24, 0x0068
   1e0b0:	80 fd       	sbrc	r24, 0
   1e0b2:	fc cf       	rjmp	.-8      	; 0x1e0ac <boot_program_page+0x8c>
    boot_page_write(page);      // Store buffer in flash page.
   1e0b4:	85 e0       	ldi	r24, 0x05	; 5
   1e0b6:	f5 01       	movw	r30, r10
   1e0b8:	c0 92 5b 00 	sts	0x005B, r12
   1e0bc:	80 93 68 00 	sts	0x0068, r24
   1e0c0:	e8 95       	spm
    boot_spm_busy_wait();       // Wait until the memory is written.
   1e0c2:	80 91 68 00 	lds	r24, 0x0068
   1e0c6:	80 fd       	sbrc	r24, 0
   1e0c8:	fc cf       	rjmp	.-8      	; 0x1e0c2 <boot_program_page+0xa2>
    // Reenable RWW-section again. We need this if we want to jump back
    // to the application after bootloading.
    boot_rww_enable();
   1e0ca:	81 e1       	ldi	r24, 0x11	; 17
   1e0cc:	80 93 68 00 	sts	0x0068, r24
   1e0d0:	e8 95       	spm
    // Re-enable interrupts (if they were ever enabled).
    SREG = sreg;
   1e0d2:	7f bf       	out	0x3f, r23	; 63
}
   1e0d4:	df 91       	pop	r29
   1e0d6:	cf 91       	pop	r28
   1e0d8:	1f 91       	pop	r17
   1e0da:	0f 91       	pop	r16
   1e0dc:	ff 90       	pop	r15
   1e0de:	ef 90       	pop	r14
   1e0e0:	df 90       	pop	r13
   1e0e2:	cf 90       	pop	r12
   1e0e4:	bf 90       	pop	r11
   1e0e6:	af 90       	pop	r10
   1e0e8:	08 95       	ret

0001e0ea <reprogram>:
}

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
   1e0ea:	ac 01       	movw	r20, r24
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e0ec:	80 e0       	ldi	r24, 0x00	; 0
   1e0ee:	90 e0       	ldi	r25, 0x00	; 0
   1e0f0:	98 2f       	mov	r25, r24
   1e0f2:	87 2f       	mov	r24, r23
   1e0f4:	76 2f       	mov	r23, r22
   1e0f6:	66 27       	eor	r22, r22
   1e0f8:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    return 0;
}
   1e0fc:	80 e0       	ldi	r24, 0x00	; 0
   1e0fe:	90 e0       	ldi	r25, 0x00	; 0
   1e100:	08 95       	ret

0001e102 <reprogramall>:
}

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogramall(unsigned char
                                                          *program)
{
   1e102:	0f 93       	push	r16
   1e104:	1f 93       	push	r17
   1e106:	cf 93       	push	r28
   1e108:	df 93       	push	r29
   1e10a:	ec 01       	movw	r28, r24
   1e10c:	dc 01       	movw	r26, r24
   1e10e:	60 e0       	ldi	r22, 0x00	; 0
   1e110:	70 e0       	ldi	r23, 0x00	; 0
   1e112:	1f c0       	rjmp	.+62     	; 0x1e152 <reprogramall+0x50>
    {
        a = program[j * 2];
        b = program[j * 2 + 1];
        if ((a >= '0') && (a <= '9'))
        {
            high = a - '0';
   1e114:	42 2f       	mov	r20, r18
   1e116:	50 e0       	ldi	r21, 0x00	; 0
   1e118:	40 53       	subi	r20, 0x30	; 48
   1e11a:	50 40       	sbci	r21, 0x00	; 0
        }
        else
        {
            high = a - 'A' + 10;
        }
        if ((b >= '0') && (b <= '9'))
   1e11c:	83 2f       	mov	r24, r19
   1e11e:	80 53       	subi	r24, 0x30	; 48
   1e120:	8a 30       	cpi	r24, 0x0A	; 10
   1e122:	38 f5       	brcc	.+78     	; 0x1e172 <reprogramall+0x70>
        {
            low = b - '0';
   1e124:	23 2f       	mov	r18, r19
   1e126:	30 e0       	ldi	r19, 0x00	; 0
   1e128:	20 53       	subi	r18, 0x30	; 48
   1e12a:	30 40       	sbci	r19, 0x00	; 0
            low = b - 'A' + 10;
        }

        all = high * 16 + low;
        //This might introduce bugs.
        program[j] = (unsigned char)all;
   1e12c:	fe 01       	movw	r30, r28
   1e12e:	e6 0f       	add	r30, r22
   1e130:	f7 1f       	adc	r31, r23
   1e132:	42 95       	swap	r20
   1e134:	52 95       	swap	r21
   1e136:	50 7f       	andi	r21, 0xF0	; 240
   1e138:	54 27       	eor	r21, r20
   1e13a:	40 7f       	andi	r20, 0xF0	; 240
   1e13c:	54 27       	eor	r21, r20
   1e13e:	24 0f       	add	r18, r20
   1e140:	35 1f       	adc	r19, r21
   1e142:	20 83       	st	Z, r18
    //unsigned char buffer[256];
    unsigned char a, b;
    int j;
    int high, low, all;

    for (j = 0; j < 256; j++)
   1e144:	6f 5f       	subi	r22, 0xFF	; 255
   1e146:	7f 4f       	sbci	r23, 0xFF	; 255
   1e148:	12 96       	adiw	r26, 0x02	; 2
   1e14a:	81 e0       	ldi	r24, 0x01	; 1
   1e14c:	60 30       	cpi	r22, 0x00	; 0
   1e14e:	78 07       	cpc	r23, r24
   1e150:	a9 f0       	breq	.+42     	; 0x1e17c <reprogramall+0x7a>
    {
        a = program[j * 2];
   1e152:	2c 91       	ld	r18, X
        b = program[j * 2 + 1];
   1e154:	11 96       	adiw	r26, 0x01	; 1
   1e156:	3c 91       	ld	r19, X
   1e158:	11 97       	sbiw	r26, 0x01	; 1
        if ((a >= '0') && (a <= '9'))
   1e15a:	82 2f       	mov	r24, r18
   1e15c:	80 53       	subi	r24, 0x30	; 48
   1e15e:	8a 30       	cpi	r24, 0x0A	; 10
   1e160:	c8 f2       	brcs	.-78     	; 0x1e114 <reprogramall+0x12>
        {
            high = a - '0';
        }
        else
        {
            high = a - 'A' + 10;
   1e162:	42 2f       	mov	r20, r18
   1e164:	50 e0       	ldi	r21, 0x00	; 0
   1e166:	47 53       	subi	r20, 0x37	; 55
   1e168:	50 40       	sbci	r21, 0x00	; 0
        }
        if ((b >= '0') && (b <= '9'))
   1e16a:	83 2f       	mov	r24, r19
   1e16c:	80 53       	subi	r24, 0x30	; 48
   1e16e:	8a 30       	cpi	r24, 0x0A	; 10
   1e170:	c8 f2       	brcs	.-78     	; 0x1e124 <reprogramall+0x22>
        {
            low = b - '0';
        }
        else
        {
            low = b - 'A' + 10;
   1e172:	23 2f       	mov	r18, r19
   1e174:	30 e0       	ldi	r19, 0x00	; 0
   1e176:	27 53       	subi	r18, 0x37	; 55
   1e178:	30 40       	sbci	r19, 0x00	; 0
   1e17a:	d8 cf       	rjmp	.-80     	; 0x1e12c <reprogramall+0x2a>

        all = high * 16 + low;
        //This might introduce bugs.
        program[j] = (unsigned char)all;
    }
    reprogram(program, pageindex);
   1e17c:	00 91 4c 01 	lds	r16, 0x014C
   1e180:	10 91 4d 01 	lds	r17, 0x014D
   1e184:	ce 01       	movw	r24, r28
   1e186:	b8 01       	movw	r22, r16
   1e188:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
    pageindex++;
   1e18c:	0f 5f       	subi	r16, 0xFF	; 255
   1e18e:	1f 4f       	sbci	r17, 0xFF	; 255
   1e190:	10 93 4d 01 	sts	0x014D, r17
   1e194:	00 93 4c 01 	sts	0x014C, r16
    return 0;
}
   1e198:	80 e0       	ldi	r24, 0x00	; 0
   1e19a:	90 e0       	ldi	r25, 0x00	; 0
   1e19c:	df 91       	pop	r29
   1e19e:	cf 91       	pop	r28
   1e1a0:	1f 91       	pop	r17
   1e1a2:	0f 91       	pop	r16
   1e1a4:	08 95       	ret

0001e1a6 <ProgramLastString>:
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramLastString(char *buffer,
                                                                uint8_t length)
{
   1e1a6:	ac 01       	movw	r20, r24
    int i;

    for (i = 0; i < length; i++)
   1e1a8:	70 e0       	ldi	r23, 0x00	; 0
   1e1aa:	61 15       	cp	r22, r1
   1e1ac:	71 05       	cpc	r23, r1
   1e1ae:	91 f0       	breq	.+36     	; 0x1e1d4 <ProgramLastString+0x2e>
   1e1b0:	a0 91 4e 03 	lds	r26, 0x034E
   1e1b4:	b0 91 4f 03 	lds	r27, 0x034F
   1e1b8:	a2 5b       	subi	r26, 0xB2	; 178
   1e1ba:	be 4f       	sbci	r27, 0xFE	; 254
   1e1bc:	20 e0       	ldi	r18, 0x00	; 0
   1e1be:	30 e0       	ldi	r19, 0x00	; 0
    {
        pagebuffer[currentpageindex + i] = buffer[i];
   1e1c0:	fa 01       	movw	r30, r20
   1e1c2:	e2 0f       	add	r30, r18
   1e1c4:	f3 1f       	adc	r31, r19
   1e1c6:	80 81       	ld	r24, Z
   1e1c8:	8d 93       	st	X+, r24
void __attribute__ ((section(".bootloader"))) ProgramLastString(char *buffer,
                                                                uint8_t length)
{
    int i;

    for (i = 0; i < length; i++)
   1e1ca:	2f 5f       	subi	r18, 0xFF	; 255
   1e1cc:	3f 4f       	sbci	r19, 0xFF	; 255
   1e1ce:	26 17       	cp	r18, r22
   1e1d0:	37 07       	cpc	r19, r23
   1e1d2:	b4 f3       	brlt	.-20     	; 0x1e1c0 <ProgramLastString+0x1a>
    {
        pagebuffer[currentpageindex + i] = buffer[i];
    }
    reprogramall(pagebuffer);
   1e1d4:	8e e4       	ldi	r24, 0x4E	; 78
   1e1d6:	91 e0       	ldi	r25, 0x01	; 1
   1e1d8:	0e 94 81 f0 	call	0x1e102	; 0x1e102 <reprogramall>
    currentpageindex = 0;
   1e1dc:	10 92 4f 03 	sts	0x034F, r1
   1e1e0:	10 92 4e 03 	sts	0x034E, r1
}
   1e1e4:	08 95       	ret

0001e1e6 <ProgramRemains>:
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramRemains()
{
    if (currentpageindex != 0)
   1e1e6:	80 91 4e 03 	lds	r24, 0x034E
   1e1ea:	90 91 4f 03 	lds	r25, 0x034F
   1e1ee:	89 2b       	or	r24, r25
   1e1f0:	09 f4       	brne	.+2      	; 0x1e1f4 <ProgramRemains+0xe>
   1e1f2:	08 95       	ret
    {
        reprogramall(pagebuffer);
   1e1f4:	8e e4       	ldi	r24, 0x4E	; 78
   1e1f6:	91 e0       	ldi	r25, 0x01	; 1
   1e1f8:	0e 94 81 f0 	call	0x1e102	; 0x1e102 <reprogramall>
   1e1fc:	08 95       	ret

0001e1fe <ProgramString>:
    currentpageindex = 0;
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramString(char *buffer)
{
   1e1fe:	ac 01       	movw	r20, r24
    int i;

    for (i = 0; i < 16; i++)
    {
        pagebuffer[currentpageindex + i] = buffer[i];
   1e200:	60 91 4e 03 	lds	r22, 0x034E
   1e204:	70 91 4f 03 	lds	r23, 0x034F
   1e208:	db 01       	movw	r26, r22
   1e20a:	a2 5b       	subi	r26, 0xB2	; 178
   1e20c:	be 4f       	sbci	r27, 0xFE	; 254
   1e20e:	20 e0       	ldi	r18, 0x00	; 0
   1e210:	30 e0       	ldi	r19, 0x00	; 0
   1e212:	fa 01       	movw	r30, r20
   1e214:	e2 0f       	add	r30, r18
   1e216:	f3 1f       	adc	r31, r19
   1e218:	80 81       	ld	r24, Z
   1e21a:	8d 93       	st	X+, r24
//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramString(char *buffer)
{
    int i;

    for (i = 0; i < 16; i++)
   1e21c:	2f 5f       	subi	r18, 0xFF	; 255
   1e21e:	3f 4f       	sbci	r19, 0xFF	; 255
   1e220:	20 31       	cpi	r18, 0x10	; 16
   1e222:	31 05       	cpc	r19, r1
   1e224:	b1 f7       	brne	.-20     	; 0x1e212 <ProgramString+0x14>
    {
        pagebuffer[currentpageindex + i] = buffer[i];
    }
    currentpageindex += 16;
   1e226:	cb 01       	movw	r24, r22
   1e228:	40 96       	adiw	r24, 0x10	; 16
   1e22a:	90 93 4f 03 	sts	0x034F, r25
   1e22e:	80 93 4e 03 	sts	0x034E, r24
    if (currentpageindex == 512)
   1e232:	80 50       	subi	r24, 0x00	; 0
   1e234:	92 40       	sbci	r25, 0x02	; 2
   1e236:	09 f0       	breq	.+2      	; 0x1e23a <ProgramString+0x3c>
   1e238:	08 95       	ret
    {
        reprogramall(pagebuffer);
   1e23a:	8e e4       	ldi	r24, 0x4E	; 78
   1e23c:	91 e0       	ldi	r25, 0x01	; 1
   1e23e:	0e 94 81 f0 	call	0x1e102	; 0x1e102 <reprogramall>
        currentpageindex = 0;
   1e242:	10 92 4f 03 	sts	0x034F, r1
   1e246:	10 92 4e 03 	sts	0x034E, r1
   1e24a:	08 95       	ret

0001e24c <boot_removeTracePointLong>:

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_removeTracePointLong(uint16_t pagenum, uint8_t pageoffset,
                          uint8_t * buffer)
{
   1e24c:	2f 92       	push	r2
   1e24e:	3f 92       	push	r3
   1e250:	4f 92       	push	r4
   1e252:	5f 92       	push	r5
   1e254:	6f 92       	push	r6
   1e256:	7f 92       	push	r7
   1e258:	8f 92       	push	r8
   1e25a:	9f 92       	push	r9
   1e25c:	af 92       	push	r10
   1e25e:	bf 92       	push	r11
   1e260:	cf 92       	push	r12
   1e262:	df 92       	push	r13
   1e264:	ef 92       	push	r14
   1e266:	ff 92       	push	r15
   1e268:	0f 93       	push	r16
   1e26a:	1f 93       	push	r17
   1e26c:	df 93       	push	r29
   1e26e:	cf 93       	push	r28
   1e270:	00 d0       	rcall	.+0      	; 0x1e272 <boot_removeTracePointLong+0x26>
   1e272:	00 d0       	rcall	.+0      	; 0x1e274 <boot_removeTracePointLong+0x28>
   1e274:	cd b7       	in	r28, 0x3d	; 61
   1e276:	de b7       	in	r29, 0x3e	; 62
   1e278:	6c 01       	movw	r12, r24
   1e27a:	36 2e       	mov	r3, r22
   1e27c:	2a 01       	movw	r4, r20
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e27e:	a0 e0       	ldi	r26, 0x00	; 0
   1e280:	b0 e0       	ldi	r27, 0x00	; 0
   1e282:	ee 24       	eor	r14, r14
   1e284:	f8 2e       	mov	r15, r24
   1e286:	09 2f       	mov	r16, r25
   1e288:	1a 2f       	mov	r17, r26
   1e28a:	2e e4       	ldi	r18, 0x4E	; 78
   1e28c:	62 2e       	mov	r6, r18
   1e28e:	21 e0       	ldi	r18, 0x01	; 1
   1e290:	72 2e       	mov	r7, r18
   1e292:	53 01       	movw	r10, r6
   1e294:	15 c0       	rjmp	.+42     	; 0x1e2c0 <boot_removeTracePointLong+0x74>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e296:	d5 01       	movw	r26, r10
   1e298:	8c 92       	st	X, r8
            pagebuffer[i * 2 + 1] = data / 256;
   1e29a:	11 96       	adiw	r26, 0x01	; 1
   1e29c:	9c 92       	st	X, r9
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e29e:	82 e0       	ldi	r24, 0x02	; 2
   1e2a0:	90 e0       	ldi	r25, 0x00	; 0
   1e2a2:	a0 e0       	ldi	r26, 0x00	; 0
   1e2a4:	b0 e0       	ldi	r27, 0x00	; 0
   1e2a6:	e8 0e       	add	r14, r24
   1e2a8:	f9 1e       	adc	r15, r25
   1e2aa:	0a 1f       	adc	r16, r26
   1e2ac:	1b 1f       	adc	r17, r27
   1e2ae:	a2 e0       	ldi	r26, 0x02	; 2
   1e2b0:	b0 e0       	ldi	r27, 0x00	; 0
   1e2b2:	aa 0e       	add	r10, r26
   1e2b4:	bb 1e       	adc	r11, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e2b6:	be e4       	ldi	r27, 0x4E	; 78
   1e2b8:	ab 16       	cp	r10, r27
   1e2ba:	b2 e0       	ldi	r27, 0x02	; 2
   1e2bc:	bb 06       	cpc	r11, r27
   1e2be:	61 f0       	breq	.+24     	; 0x1e2d8 <boot_removeTracePointLong+0x8c>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e2c0:	0b bf       	out	0x3b, r16	; 59
   1e2c2:	f7 01       	movw	r30, r14
   1e2c4:	87 90       	elpm	r8, Z+
   1e2c6:	96 90       	elpm	r9, Z+
        if (is_host_lsb())
   1e2c8:	0e 94 a3 3a 	call	0x7546	; 0x7546 <is_host_lsb>
   1e2cc:	89 2b       	or	r24, r25
   1e2ce:	19 f7       	brne	.-58     	; 0x1e296 <boot_removeTracePointLong+0x4a>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e2d0:	f5 01       	movw	r30, r10
   1e2d2:	81 82       	std	Z+1, r8	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e2d4:	90 82       	st	Z, r9
   1e2d6:	e3 cf       	rjmp	.-58     	; 0x1e29e <boot_removeTracePointLong+0x52>
    }
    //assuming that the index as 228 or smaller, then enough for the 28 bytes othersise not 
    //say 234, then it is 22 bytes 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
   1e2d8:	e0 ef       	ldi	r30, 0xF0	; 240
   1e2da:	e3 15       	cp	r30, r3
   1e2dc:	08 f4       	brcc	.+2      	; 0x1e2e0 <boot_removeTracePointLong+0x94>
   1e2de:	7f c0       	rjmp	.+254    	; 0x1e3de <boot_removeTracePointLong+0x192>
   1e2e0:	10 e0       	ldi	r17, 0x00	; 0
   1e2e2:	90 e1       	ldi	r25, 0x10	; 16
   1e2e4:	29 2e       	mov	r2, r25
   1e2e6:	80 e1       	ldi	r24, 0x10	; 16
   1e2e8:	88 2e       	mov	r8, r24
   1e2ea:	91 2c       	mov	r9, r1
   1e2ec:	a3 2d       	mov	r26, r3
   1e2ee:	b0 e0       	ldi	r27, 0x00	; 0
   1e2f0:	a2 5b       	subi	r26, 0xB2	; 178
   1e2f2:	be 4f       	sbci	r27, 0xFE	; 254
   1e2f4:	20 e0       	ldi	r18, 0x00	; 0
   1e2f6:	30 e0       	ldi	r19, 0x00	; 0
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
   1e2f8:	f2 01       	movw	r30, r4
   1e2fa:	e2 0f       	add	r30, r18
   1e2fc:	f3 1f       	adc	r31, r19
   1e2fe:	80 81       	ld	r24, Z
   1e300:	8d 93       	st	X+, r24
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e302:	2f 5f       	subi	r18, 0xFF	; 255
   1e304:	3f 4f       	sbci	r19, 0xFF	; 255
   1e306:	28 15       	cp	r18, r8
   1e308:	39 05       	cpc	r19, r9
   1e30a:	b4 f3       	brlt	.-20     	; 0x1e2f8 <boot_removeTracePointLong+0xac>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
    }
    reprogram(pagebuffer, pagenum);
   1e30c:	8e e4       	ldi	r24, 0x4E	; 78
   1e30e:	91 e0       	ldi	r25, 0x01	; 1
   1e310:	b6 01       	movw	r22, r12
   1e312:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
    if (programmore == 0)
   1e316:	11 23       	and	r17, r17
   1e318:	09 f4       	brne	.+2      	; 0x1e31c <boot_removeTracePointLong+0xd0>
   1e31a:	4a c0       	rjmp	.+148    	; 0x1e3b0 <boot_removeTracePointLong+0x164>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e31c:	96 01       	movw	r18, r12
   1e31e:	2f 5f       	subi	r18, 0xFF	; 255
   1e320:	3f 4f       	sbci	r19, 0xFF	; 255
   1e322:	3a 83       	std	Y+2, r19	; 0x02
   1e324:	29 83       	std	Y+1, r18	; 0x01
   1e326:	c9 01       	movw	r24, r18
   1e328:	a0 e0       	ldi	r26, 0x00	; 0
   1e32a:	b0 e0       	ldi	r27, 0x00	; 0
   1e32c:	ee 24       	eor	r14, r14
   1e32e:	f8 2e       	mov	r15, r24
   1e330:	09 2f       	mov	r16, r25
   1e332:	1a 2f       	mov	r17, r26
   1e334:	8e e4       	ldi	r24, 0x4E	; 78
   1e336:	91 e0       	ldi	r25, 0x01	; 1
   1e338:	9c 83       	std	Y+4, r25	; 0x04
   1e33a:	8b 83       	std	Y+3, r24	; 0x03
   1e33c:	15 c0       	rjmp	.+42     	; 0x1e368 <boot_removeTracePointLong+0x11c>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e33e:	ab 81       	ldd	r26, Y+3	; 0x03
   1e340:	bc 81       	ldd	r27, Y+4	; 0x04
   1e342:	cc 92       	st	X, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e344:	11 96       	adiw	r26, 0x01	; 1
   1e346:	dc 92       	st	X, r13
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e348:	82 e0       	ldi	r24, 0x02	; 2
   1e34a:	90 e0       	ldi	r25, 0x00	; 0
   1e34c:	a0 e0       	ldi	r26, 0x00	; 0
   1e34e:	b0 e0       	ldi	r27, 0x00	; 0
   1e350:	e8 0e       	add	r14, r24
   1e352:	f9 1e       	adc	r15, r25
   1e354:	0a 1f       	adc	r16, r26
   1e356:	1b 1f       	adc	r17, r27
   1e358:	ab 81       	ldd	r26, Y+3	; 0x03
   1e35a:	bc 81       	ldd	r27, Y+4	; 0x04
   1e35c:	12 96       	adiw	r26, 0x02	; 2
   1e35e:	bc 83       	std	Y+4, r27	; 0x04
   1e360:	ab 83       	std	Y+3, r26	; 0x03
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e362:	aa 16       	cp	r10, r26
   1e364:	bb 06       	cpc	r11, r27
   1e366:	69 f0       	breq	.+26     	; 0x1e382 <boot_removeTracePointLong+0x136>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e368:	0b bf       	out	0x3b, r16	; 59
   1e36a:	f7 01       	movw	r30, r14
   1e36c:	c7 90       	elpm	r12, Z+
   1e36e:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e370:	0e 94 a3 3a 	call	0x7546	; 0x7546 <is_host_lsb>
   1e374:	89 2b       	or	r24, r25
   1e376:	19 f7       	brne	.-58     	; 0x1e33e <boot_removeTracePointLong+0xf2>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e378:	eb 81       	ldd	r30, Y+3	; 0x03
   1e37a:	fc 81       	ldd	r31, Y+4	; 0x04
   1e37c:	c1 82       	std	Z+1, r12	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e37e:	d0 82       	st	Z, r13
   1e380:	e3 cf       	rjmp	.-58     	; 0x1e348 <boot_removeTracePointLong+0xfc>
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
   1e382:	80 e1       	ldi	r24, 0x10	; 16
   1e384:	82 19       	sub	r24, r2
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e386:	71 f0       	breq	.+28     	; 0x1e3a4 <boot_removeTracePointLong+0x158>
   1e388:	f2 01       	movw	r30, r4
   1e38a:	e8 0d       	add	r30, r8
   1e38c:	f9 1d       	adc	r31, r9
   1e38e:	28 2f       	mov	r18, r24
   1e390:	30 e0       	ldi	r19, 0x00	; 0
   1e392:	22 5b       	subi	r18, 0xB2	; 178
   1e394:	3e 4f       	sbci	r19, 0xFE	; 254
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
   1e396:	81 91       	ld	r24, Z+
   1e398:	d3 01       	movw	r26, r6
   1e39a:	8d 93       	st	X+, r24
   1e39c:	3d 01       	movw	r6, r26
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e39e:	a2 17       	cp	r26, r18
   1e3a0:	b3 07       	cpc	r27, r19
   1e3a2:	c9 f7       	brne	.-14     	; 0x1e396 <boot_removeTracePointLong+0x14a>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
    }
    reprogram(pagebuffer, pagenum + 1);
   1e3a4:	8e e4       	ldi	r24, 0x4E	; 78
   1e3a6:	91 e0       	ldi	r25, 0x01	; 1
   1e3a8:	69 81       	ldd	r22, Y+1	; 0x01
   1e3aa:	7a 81       	ldd	r23, Y+2	; 0x02
   1e3ac:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e3b0:	0f 90       	pop	r0
   1e3b2:	0f 90       	pop	r0
   1e3b4:	0f 90       	pop	r0
   1e3b6:	0f 90       	pop	r0
   1e3b8:	cf 91       	pop	r28
   1e3ba:	df 91       	pop	r29
   1e3bc:	1f 91       	pop	r17
   1e3be:	0f 91       	pop	r16
   1e3c0:	ff 90       	pop	r15
   1e3c2:	ef 90       	pop	r14
   1e3c4:	df 90       	pop	r13
   1e3c6:	cf 90       	pop	r12
   1e3c8:	bf 90       	pop	r11
   1e3ca:	af 90       	pop	r10
   1e3cc:	9f 90       	pop	r9
   1e3ce:	8f 90       	pop	r8
   1e3d0:	7f 90       	pop	r7
   1e3d2:	6f 90       	pop	r6
   1e3d4:	5f 90       	pop	r5
   1e3d6:	4f 90       	pop	r4
   1e3d8:	3f 90       	pop	r3
   1e3da:	2f 90       	pop	r2
   1e3dc:	08 95       	ret
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e3de:	23 2c       	mov	r2, r3
   1e3e0:	21 94       	neg	r2
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e3e2:	82 2c       	mov	r8, r2
   1e3e4:	99 24       	eor	r9, r9
   1e3e6:	11 e0       	ldi	r17, 0x01	; 1
   1e3e8:	81 cf       	rjmp	.-254    	; 0x1e2ec <boot_removeTracePointLong+0xa0>

0001e3ea <boot_removeTracePoint>:
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    buffer)
{
   1e3ea:	2f 92       	push	r2
   1e3ec:	3f 92       	push	r3
   1e3ee:	4f 92       	push	r4
   1e3f0:	5f 92       	push	r5
   1e3f2:	6f 92       	push	r6
   1e3f4:	7f 92       	push	r7
   1e3f6:	8f 92       	push	r8
   1e3f8:	9f 92       	push	r9
   1e3fa:	af 92       	push	r10
   1e3fc:	bf 92       	push	r11
   1e3fe:	cf 92       	push	r12
   1e400:	df 92       	push	r13
   1e402:	ef 92       	push	r14
   1e404:	ff 92       	push	r15
   1e406:	0f 93       	push	r16
   1e408:	1f 93       	push	r17
   1e40a:	df 93       	push	r29
   1e40c:	cf 93       	push	r28
   1e40e:	00 d0       	rcall	.+0      	; 0x1e410 <boot_removeTracePoint+0x26>
   1e410:	0f 92       	push	r0
   1e412:	cd b7       	in	r28, 0x3d	; 61
   1e414:	de b7       	in	r29, 0x3e	; 62
   1e416:	1c 01       	movw	r2, r24
   1e418:	d6 2e       	mov	r13, r22
   1e41a:	2a 01       	movw	r4, r20
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e41c:	a0 e0       	ldi	r26, 0x00	; 0
   1e41e:	b0 e0       	ldi	r27, 0x00	; 0
   1e420:	ee 24       	eor	r14, r14
   1e422:	f8 2e       	mov	r15, r24
   1e424:	09 2f       	mov	r16, r25
   1e426:	1a 2f       	mov	r17, r26
   1e428:	6e e4       	ldi	r22, 0x4E	; 78
   1e42a:	66 2e       	mov	r6, r22
   1e42c:	61 e0       	ldi	r22, 0x01	; 1
   1e42e:	76 2e       	mov	r7, r22
   1e430:	53 01       	movw	r10, r6
   1e432:	15 c0       	rjmp	.+42     	; 0x1e45e <boot_removeTracePoint+0x74>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e434:	d5 01       	movw	r26, r10
   1e436:	8c 92       	st	X, r8
            pagebuffer[i * 2 + 1] = data / 256;
   1e438:	11 96       	adiw	r26, 0x01	; 1
   1e43a:	9c 92       	st	X, r9
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e43c:	82 e0       	ldi	r24, 0x02	; 2
   1e43e:	90 e0       	ldi	r25, 0x00	; 0
   1e440:	a0 e0       	ldi	r26, 0x00	; 0
   1e442:	b0 e0       	ldi	r27, 0x00	; 0
   1e444:	e8 0e       	add	r14, r24
   1e446:	f9 1e       	adc	r15, r25
   1e448:	0a 1f       	adc	r16, r26
   1e44a:	1b 1f       	adc	r17, r27
   1e44c:	a2 e0       	ldi	r26, 0x02	; 2
   1e44e:	b0 e0       	ldi	r27, 0x00	; 0
   1e450:	aa 0e       	add	r10, r26
   1e452:	bb 1e       	adc	r11, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e454:	be e4       	ldi	r27, 0x4E	; 78
   1e456:	ab 16       	cp	r10, r27
   1e458:	b2 e0       	ldi	r27, 0x02	; 2
   1e45a:	bb 06       	cpc	r11, r27
   1e45c:	61 f0       	breq	.+24     	; 0x1e476 <boot_removeTracePoint+0x8c>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e45e:	0b bf       	out	0x3b, r16	; 59
   1e460:	f7 01       	movw	r30, r14
   1e462:	87 90       	elpm	r8, Z+
   1e464:	96 90       	elpm	r9, Z+
        if (is_host_lsb())
   1e466:	0e 94 a3 3a 	call	0x7546	; 0x7546 <is_host_lsb>
   1e46a:	89 2b       	or	r24, r25
   1e46c:	19 f7       	brne	.-58     	; 0x1e434 <boot_removeTracePoint+0x4a>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e46e:	f5 01       	movw	r30, r10
   1e470:	81 82       	std	Z+1, r8	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e472:	90 82       	st	Z, r9
   1e474:	e3 cf       	rjmp	.-58     	; 0x1e43c <boot_removeTracePoint+0x52>
    //say 234, then it is 22 bytes 
    //Now this part needs to be changed to 16 bytes
    //index is 242, then 14 bytes. 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
   1e476:	e2 ef       	ldi	r30, 0xF2	; 242
   1e478:	ed 15       	cp	r30, r13
   1e47a:	08 f4       	brcc	.+2      	; 0x1e47e <boot_removeTracePoint+0x94>
   1e47c:	80 c0       	rjmp	.+256    	; 0x1e57e <boot_removeTracePoint+0x194>
   1e47e:	10 e0       	ldi	r17, 0x00	; 0
   1e480:	fe e0       	ldi	r31, 0x0E	; 14
   1e482:	f9 83       	std	Y+1, r31	; 0x01
   1e484:	5e e0       	ldi	r21, 0x0E	; 14
   1e486:	85 2e       	mov	r8, r21
   1e488:	91 2c       	mov	r9, r1
   1e48a:	ad 2d       	mov	r26, r13
   1e48c:	b0 e0       	ldi	r27, 0x00	; 0
   1e48e:	a2 5b       	subi	r26, 0xB2	; 178
   1e490:	be 4f       	sbci	r27, 0xFE	; 254
   1e492:	20 e0       	ldi	r18, 0x00	; 0
   1e494:	30 e0       	ldi	r19, 0x00	; 0
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
   1e496:	f2 01       	movw	r30, r4
   1e498:	e2 0f       	add	r30, r18
   1e49a:	f3 1f       	adc	r31, r19
   1e49c:	80 81       	ld	r24, Z
   1e49e:	8d 93       	st	X+, r24
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e4a0:	2f 5f       	subi	r18, 0xFF	; 255
   1e4a2:	3f 4f       	sbci	r19, 0xFF	; 255
   1e4a4:	28 15       	cp	r18, r8
   1e4a6:	39 05       	cpc	r19, r9
   1e4a8:	b4 f3       	brlt	.-20     	; 0x1e496 <boot_removeTracePoint+0xac>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
    }
    reprogram(pagebuffer, pagenum);
   1e4aa:	8e e4       	ldi	r24, 0x4E	; 78
   1e4ac:	91 e0       	ldi	r25, 0x01	; 1
   1e4ae:	b1 01       	movw	r22, r2
   1e4b0:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
    if (programmore == 0)
   1e4b4:	11 23       	and	r17, r17
   1e4b6:	09 f4       	brne	.+2      	; 0x1e4ba <boot_removeTracePoint+0xd0>
   1e4b8:	4c c0       	rjmp	.+152    	; 0x1e552 <boot_removeTracePoint+0x168>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e4ba:	08 94       	sec
   1e4bc:	21 1c       	adc	r2, r1
   1e4be:	31 1c       	adc	r3, r1
   1e4c0:	c1 01       	movw	r24, r2
   1e4c2:	a0 e0       	ldi	r26, 0x00	; 0
   1e4c4:	b0 e0       	ldi	r27, 0x00	; 0
   1e4c6:	08 94       	sec
   1e4c8:	21 08       	sbc	r2, r1
   1e4ca:	31 08       	sbc	r3, r1
   1e4cc:	ee 24       	eor	r14, r14
   1e4ce:	f8 2e       	mov	r15, r24
   1e4d0:	09 2f       	mov	r16, r25
   1e4d2:	1a 2f       	mov	r17, r26
   1e4d4:	ae e4       	ldi	r26, 0x4E	; 78
   1e4d6:	b1 e0       	ldi	r27, 0x01	; 1
   1e4d8:	bb 83       	std	Y+3, r27	; 0x03
   1e4da:	aa 83       	std	Y+2, r26	; 0x02
   1e4dc:	14 c0       	rjmp	.+40     	; 0x1e506 <boot_removeTracePoint+0x11c>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e4de:	ea 81       	ldd	r30, Y+2	; 0x02
   1e4e0:	fb 81       	ldd	r31, Y+3	; 0x03
   1e4e2:	c0 82       	st	Z, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e4e4:	d1 82       	std	Z+1, r13	; 0x01
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e4e6:	82 e0       	ldi	r24, 0x02	; 2
   1e4e8:	90 e0       	ldi	r25, 0x00	; 0
   1e4ea:	a0 e0       	ldi	r26, 0x00	; 0
   1e4ec:	b0 e0       	ldi	r27, 0x00	; 0
   1e4ee:	e8 0e       	add	r14, r24
   1e4f0:	f9 1e       	adc	r15, r25
   1e4f2:	0a 1f       	adc	r16, r26
   1e4f4:	1b 1f       	adc	r17, r27
   1e4f6:	aa 81       	ldd	r26, Y+2	; 0x02
   1e4f8:	bb 81       	ldd	r27, Y+3	; 0x03
   1e4fa:	12 96       	adiw	r26, 0x02	; 2
   1e4fc:	bb 83       	std	Y+3, r27	; 0x03
   1e4fe:	aa 83       	std	Y+2, r26	; 0x02
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e500:	aa 16       	cp	r10, r26
   1e502:	bb 06       	cpc	r11, r27
   1e504:	79 f0       	breq	.+30     	; 0x1e524 <boot_removeTracePoint+0x13a>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e506:	0b bf       	out	0x3b, r16	; 59
   1e508:	f7 01       	movw	r30, r14
   1e50a:	c7 90       	elpm	r12, Z+
   1e50c:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e50e:	0e 94 a3 3a 	call	0x7546	; 0x7546 <is_host_lsb>
   1e512:	89 2b       	or	r24, r25
   1e514:	21 f7       	brne	.-56     	; 0x1e4de <boot_removeTracePoint+0xf4>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e516:	aa 81       	ldd	r26, Y+2	; 0x02
   1e518:	bb 81       	ldd	r27, Y+3	; 0x03
   1e51a:	11 96       	adiw	r26, 0x01	; 1
   1e51c:	cc 92       	st	X, r12
   1e51e:	11 97       	sbiw	r26, 0x01	; 1
            pagebuffer[i * 2] = data / 256;
   1e520:	dc 92       	st	X, r13
   1e522:	e1 cf       	rjmp	.-62     	; 0x1e4e6 <boot_removeTracePoint+0xfc>
        }
    }
    endindex2 = 14 - endindex;
   1e524:	8e e0       	ldi	r24, 0x0E	; 14
   1e526:	b9 81       	ldd	r27, Y+1	; 0x01
   1e528:	8b 1b       	sub	r24, r27
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e52a:	71 f0       	breq	.+28     	; 0x1e548 <boot_removeTracePoint+0x15e>
   1e52c:	f2 01       	movw	r30, r4
   1e52e:	e8 0d       	add	r30, r8
   1e530:	f9 1d       	adc	r31, r9
   1e532:	28 2f       	mov	r18, r24
   1e534:	30 e0       	ldi	r19, 0x00	; 0
   1e536:	22 5b       	subi	r18, 0xB2	; 178
   1e538:	3e 4f       	sbci	r19, 0xFE	; 254
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
   1e53a:	81 91       	ld	r24, Z+
   1e53c:	d3 01       	movw	r26, r6
   1e53e:	8d 93       	st	X+, r24
   1e540:	3d 01       	movw	r6, r26
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e542:	a2 17       	cp	r26, r18
   1e544:	b3 07       	cpc	r27, r19
   1e546:	c9 f7       	brne	.-14     	; 0x1e53a <boot_removeTracePoint+0x150>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
    }
    reprogram(pagebuffer, pagenum);
   1e548:	8e e4       	ldi	r24, 0x4E	; 78
   1e54a:	91 e0       	ldi	r25, 0x01	; 1
   1e54c:	b1 01       	movw	r22, r2
   1e54e:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e552:	0f 90       	pop	r0
   1e554:	0f 90       	pop	r0
   1e556:	0f 90       	pop	r0
   1e558:	cf 91       	pop	r28
   1e55a:	df 91       	pop	r29
   1e55c:	1f 91       	pop	r17
   1e55e:	0f 91       	pop	r16
   1e560:	ff 90       	pop	r15
   1e562:	ef 90       	pop	r14
   1e564:	df 90       	pop	r13
   1e566:	cf 90       	pop	r12
   1e568:	bf 90       	pop	r11
   1e56a:	af 90       	pop	r10
   1e56c:	9f 90       	pop	r9
   1e56e:	8f 90       	pop	r8
   1e570:	7f 90       	pop	r7
   1e572:	6f 90       	pop	r6
   1e574:	5f 90       	pop	r5
   1e576:	4f 90       	pop	r4
   1e578:	3f 90       	pop	r3
   1e57a:	2f 90       	pop	r2
   1e57c:	08 95       	ret
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e57e:	8d 2d       	mov	r24, r13
   1e580:	81 95       	neg	r24
   1e582:	89 83       	std	Y+1, r24	; 0x01
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e584:	88 2e       	mov	r8, r24
   1e586:	99 24       	eor	r9, r9
   1e588:	11 e0       	ldi	r17, 0x01	; 1
   1e58a:	7f cf       	rjmp	.-258    	; 0x1e48a <boot_removeTracePoint+0xa0>

0001e58c <boot_removeBreakPoint>:
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    instructions)
{
   1e58c:	7f 92       	push	r7
   1e58e:	8f 92       	push	r8
   1e590:	9f 92       	push	r9
   1e592:	af 92       	push	r10
   1e594:	bf 92       	push	r11
   1e596:	cf 92       	push	r12
   1e598:	df 92       	push	r13
   1e59a:	ef 92       	push	r14
   1e59c:	ff 92       	push	r15
   1e59e:	0f 93       	push	r16
   1e5a0:	1f 93       	push	r17
   1e5a2:	cf 93       	push	r28
   1e5a4:	df 93       	push	r29
   1e5a6:	5c 01       	movw	r10, r24
   1e5a8:	76 2e       	mov	r7, r22
   1e5aa:	94 2e       	mov	r9, r20
   1e5ac:	85 2e       	mov	r8, r21
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e5ae:	a0 e0       	ldi	r26, 0x00	; 0
   1e5b0:	b0 e0       	ldi	r27, 0x00	; 0
   1e5b2:	ee 24       	eor	r14, r14
   1e5b4:	f8 2e       	mov	r15, r24
   1e5b6:	09 2f       	mov	r16, r25
   1e5b8:	1a 2f       	mov	r17, r26
   1e5ba:	ce e4       	ldi	r28, 0x4E	; 78
   1e5bc:	d1 e0       	ldi	r29, 0x01	; 1
   1e5be:	0f c0       	rjmp	.+30     	; 0x1e5de <boot_removeBreakPoint+0x52>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e5c0:	c8 82       	st	Y, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e5c2:	d9 82       	std	Y+1, r13	; 0x01
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e5c4:	82 e0       	ldi	r24, 0x02	; 2
   1e5c6:	90 e0       	ldi	r25, 0x00	; 0
   1e5c8:	a0 e0       	ldi	r26, 0x00	; 0
   1e5ca:	b0 e0       	ldi	r27, 0x00	; 0
   1e5cc:	e8 0e       	add	r14, r24
   1e5ce:	f9 1e       	adc	r15, r25
   1e5d0:	0a 1f       	adc	r16, r26
   1e5d2:	1b 1f       	adc	r17, r27
   1e5d4:	22 96       	adiw	r28, 0x02	; 2
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
   1e5d6:	92 e0       	ldi	r25, 0x02	; 2
   1e5d8:	ce 34       	cpi	r28, 0x4E	; 78
   1e5da:	d9 07       	cpc	r29, r25
   1e5dc:	59 f0       	breq	.+22     	; 0x1e5f4 <boot_removeBreakPoint+0x68>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e5de:	0b bf       	out	0x3b, r16	; 59
   1e5e0:	f7 01       	movw	r30, r14
   1e5e2:	c7 90       	elpm	r12, Z+
   1e5e4:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e5e6:	0e 94 a3 3a 	call	0x7546	; 0x7546 <is_host_lsb>
   1e5ea:	89 2b       	or	r24, r25
   1e5ec:	49 f7       	brne	.-46     	; 0x1e5c0 <boot_removeBreakPoint+0x34>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e5ee:	c9 82       	std	Y+1, r12	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e5f0:	d8 82       	st	Y, r13
   1e5f2:	e8 cf       	rjmp	.-48     	; 0x1e5c4 <boot_removeBreakPoint+0x38>
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
   1e5f4:	29 2d       	mov	r18, r9
   1e5f6:	38 2d       	mov	r19, r8
   1e5f8:	c9 01       	movw	r24, r18
   1e5fa:	dc 01       	movw	r26, r24
   1e5fc:	87 2d       	mov	r24, r7
   1e5fe:	90 e0       	ldi	r25, 0x00	; 0
   1e600:	fc 01       	movw	r30, r24
   1e602:	e2 5b       	subi	r30, 0xB2	; 178
   1e604:	fe 4f       	sbci	r31, 0xFE	; 254
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
   1e606:	bc 01       	movw	r22, r24
   1e608:	6c 5a       	subi	r22, 0xAC	; 172
   1e60a:	7e 4f       	sbci	r23, 0xFE	; 254
    {
        pagebuffer[index + i] = instructions[i];
   1e60c:	8d 91       	ld	r24, X+
   1e60e:	81 93       	st	Z+, r24
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
   1e610:	e6 17       	cp	r30, r22
   1e612:	f7 07       	cpc	r31, r23
   1e614:	d9 f7       	brne	.-10     	; 0x1e60c <boot_removeBreakPoint+0x80>
    {
        pagebuffer[index + i] = instructions[i];
    }
    reprogram(pagebuffer, pagenum);
   1e616:	8e e4       	ldi	r24, 0x4E	; 78
   1e618:	91 e0       	ldi	r25, 0x01	; 1
   1e61a:	b5 01       	movw	r22, r10
   1e61c:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e620:	df 91       	pop	r29
   1e622:	cf 91       	pop	r28
   1e624:	1f 91       	pop	r17
   1e626:	0f 91       	pop	r16
   1e628:	ff 90       	pop	r15
   1e62a:	ef 90       	pop	r14
   1e62c:	df 90       	pop	r13
   1e62e:	cf 90       	pop	r12
   1e630:	bf 90       	pop	r11
   1e632:	af 90       	pop	r10
   1e634:	9f 90       	pop	r9
   1e636:	8f 90       	pop	r8
   1e638:	7f 90       	pop	r7
   1e63a:	08 95       	ret

0001e63c <boot_insertTracePointLong>:
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_insertTracePointLong(uint16_t pagenum, uint8_t pageoffset)
{
   1e63c:	2f 92       	push	r2
   1e63e:	3f 92       	push	r3
   1e640:	4f 92       	push	r4
   1e642:	5f 92       	push	r5
   1e644:	6f 92       	push	r6
   1e646:	7f 92       	push	r7
   1e648:	8f 92       	push	r8
   1e64a:	9f 92       	push	r9
   1e64c:	af 92       	push	r10
   1e64e:	bf 92       	push	r11
   1e650:	cf 92       	push	r12
   1e652:	df 92       	push	r13
   1e654:	ef 92       	push	r14
   1e656:	ff 92       	push	r15
   1e658:	0f 93       	push	r16
   1e65a:	1f 93       	push	r17
   1e65c:	cf 93       	push	r28
   1e65e:	df 93       	push	r29
   1e660:	6c 01       	movw	r12, r24
   1e662:	56 2e       	mov	r5, r22
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e664:	a0 e0       	ldi	r26, 0x00	; 0
   1e666:	b0 e0       	ldi	r27, 0x00	; 0
   1e668:	ee 24       	eor	r14, r14
   1e66a:	f8 2e       	mov	r15, r24
   1e66c:	09 2f       	mov	r16, r25
   1e66e:	1a 2f       	mov	r17, r26
   1e670:	8e e4       	ldi	r24, 0x4E	; 78
   1e672:	68 2e       	mov	r6, r24
   1e674:	81 e0       	ldi	r24, 0x01	; 1
   1e676:	78 2e       	mov	r7, r24
   1e678:	53 01       	movw	r10, r6
   1e67a:	15 c0       	rjmp	.+42     	; 0x1e6a6 <boot_insertTracePointLong+0x6a>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e67c:	d5 01       	movw	r26, r10
   1e67e:	cc 93       	st	X, r28
            pagebuffer[i * 2 + 1] = data / 256;
   1e680:	11 96       	adiw	r26, 0x01	; 1
   1e682:	dc 93       	st	X, r29
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e684:	82 e0       	ldi	r24, 0x02	; 2
   1e686:	90 e0       	ldi	r25, 0x00	; 0
   1e688:	a0 e0       	ldi	r26, 0x00	; 0
   1e68a:	b0 e0       	ldi	r27, 0x00	; 0
   1e68c:	e8 0e       	add	r14, r24
   1e68e:	f9 1e       	adc	r15, r25
   1e690:	0a 1f       	adc	r16, r26
   1e692:	1b 1f       	adc	r17, r27
   1e694:	a2 e0       	ldi	r26, 0x02	; 2
   1e696:	b0 e0       	ldi	r27, 0x00	; 0
   1e698:	aa 0e       	add	r10, r26
   1e69a:	bb 1e       	adc	r11, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e69c:	be e4       	ldi	r27, 0x4E	; 78
   1e69e:	ab 16       	cp	r10, r27
   1e6a0:	b2 e0       	ldi	r27, 0x02	; 2
   1e6a2:	bb 06       	cpc	r11, r27
   1e6a4:	61 f0       	breq	.+24     	; 0x1e6be <boot_insertTracePointLong+0x82>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e6a6:	0b bf       	out	0x3b, r16	; 59
   1e6a8:	f7 01       	movw	r30, r14
   1e6aa:	c7 91       	elpm	r28, Z+
   1e6ac:	d6 91       	elpm	r29, Z+
        if (is_host_lsb())
   1e6ae:	0e 94 a3 3a 	call	0x7546	; 0x7546 <is_host_lsb>
   1e6b2:	89 2b       	or	r24, r25
   1e6b4:	19 f7       	brne	.-58     	; 0x1e67c <boot_insertTracePointLong+0x40>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e6b6:	f5 01       	movw	r30, r10
   1e6b8:	c1 83       	std	Z+1, r28	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e6ba:	d0 83       	st	Z, r29
   1e6bc:	e3 cf       	rjmp	.-58     	; 0x1e684 <boot_insertTracePointLong+0x48>
    }
    //assuming that the index as 228 or smaller, then enough for the 28 bytes othersise not 
    //say 234, then it is 22 bytes 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
   1e6be:	e0 ef       	ldi	r30, 0xF0	; 240
   1e6c0:	e5 15       	cp	r30, r5
   1e6c2:	08 f4       	brcc	.+2      	; 0x1e6c6 <boot_insertTracePointLong+0x8a>
   1e6c4:	6e c0       	rjmp	.+220    	; 0x1e7a2 <boot_insertTracePointLong+0x166>
   1e6c6:	10 e0       	ldi	r17, 0x00	; 0
   1e6c8:	b0 e1       	ldi	r27, 0x10	; 16
   1e6ca:	4b 2e       	mov	r4, r27
   1e6cc:	a0 e1       	ldi	r26, 0x10	; 16
   1e6ce:	8a 2e       	mov	r8, r26
   1e6d0:	91 2c       	mov	r9, r1
   1e6d2:	a5 2d       	mov	r26, r5
   1e6d4:	b0 e0       	ldi	r27, 0x00	; 0
   1e6d6:	a2 5b       	subi	r26, 0xB2	; 178
   1e6d8:	be 4f       	sbci	r27, 0xFE	; 254
   1e6da:	20 e0       	ldi	r18, 0x00	; 0
   1e6dc:	30 e0       	ldi	r19, 0x00	; 0
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
   1e6de:	f9 01       	movw	r30, r18
   1e6e0:	e4 5e       	subi	r30, 0xE4	; 228
   1e6e2:	fe 4f       	sbci	r31, 0xFE	; 254
   1e6e4:	80 81       	ld	r24, Z
   1e6e6:	8d 93       	st	X+, r24
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e6e8:	2f 5f       	subi	r18, 0xFF	; 255
   1e6ea:	3f 4f       	sbci	r19, 0xFF	; 255
   1e6ec:	28 15       	cp	r18, r8
   1e6ee:	39 05       	cpc	r19, r9
   1e6f0:	b4 f3       	brlt	.-20     	; 0x1e6de <boot_insertTracePointLong+0xa2>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
    }
    reprogram(pagebuffer, pagenum);
   1e6f2:	8e e4       	ldi	r24, 0x4E	; 78
   1e6f4:	91 e0       	ldi	r25, 0x01	; 1
   1e6f6:	b6 01       	movw	r22, r12
   1e6f8:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
    if (programmore == 0)
   1e6fc:	11 23       	and	r17, r17
   1e6fe:	09 f4       	brne	.+2      	; 0x1e702 <boot_insertTracePointLong+0xc6>
   1e700:	3d c0       	rjmp	.+122    	; 0x1e77c <boot_insertTracePointLong+0x140>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e702:	16 01       	movw	r2, r12
   1e704:	08 94       	sec
   1e706:	21 1c       	adc	r2, r1
   1e708:	31 1c       	adc	r3, r1
   1e70a:	c1 01       	movw	r24, r2
   1e70c:	a0 e0       	ldi	r26, 0x00	; 0
   1e70e:	b0 e0       	ldi	r27, 0x00	; 0
   1e710:	ee 24       	eor	r14, r14
   1e712:	f8 2e       	mov	r15, r24
   1e714:	09 2f       	mov	r16, r25
   1e716:	1a 2f       	mov	r17, r26
   1e718:	ce e4       	ldi	r28, 0x4E	; 78
   1e71a:	d1 e0       	ldi	r29, 0x01	; 1
   1e71c:	0e c0       	rjmp	.+28     	; 0x1e73a <boot_insertTracePointLong+0xfe>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e71e:	c8 82       	st	Y, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e720:	d9 82       	std	Y+1, r13	; 0x01
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e722:	82 e0       	ldi	r24, 0x02	; 2
   1e724:	90 e0       	ldi	r25, 0x00	; 0
   1e726:	a0 e0       	ldi	r26, 0x00	; 0
   1e728:	b0 e0       	ldi	r27, 0x00	; 0
   1e72a:	e8 0e       	add	r14, r24
   1e72c:	f9 1e       	adc	r15, r25
   1e72e:	0a 1f       	adc	r16, r26
   1e730:	1b 1f       	adc	r17, r27
   1e732:	22 96       	adiw	r28, 0x02	; 2
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e734:	ac 16       	cp	r10, r28
   1e736:	bd 06       	cpc	r11, r29
   1e738:	59 f0       	breq	.+22     	; 0x1e750 <boot_insertTracePointLong+0x114>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e73a:	0b bf       	out	0x3b, r16	; 59
   1e73c:	f7 01       	movw	r30, r14
   1e73e:	c7 90       	elpm	r12, Z+
   1e740:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e742:	0e 94 a3 3a 	call	0x7546	; 0x7546 <is_host_lsb>
   1e746:	89 2b       	or	r24, r25
   1e748:	51 f7       	brne	.-44     	; 0x1e71e <boot_insertTracePointLong+0xe2>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e74a:	c9 82       	std	Y+1, r12	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e74c:	d8 82       	st	Y, r13
   1e74e:	e9 cf       	rjmp	.-46     	; 0x1e722 <boot_insertTracePointLong+0xe6>
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
   1e750:	80 e1       	ldi	r24, 0x10	; 16
   1e752:	84 19       	sub	r24, r4
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e754:	71 f0       	breq	.+28     	; 0x1e772 <boot_insertTracePointLong+0x136>
   1e756:	f4 01       	movw	r30, r8
   1e758:	e4 5e       	subi	r30, 0xE4	; 228
   1e75a:	fe 4f       	sbci	r31, 0xFE	; 254
   1e75c:	28 2f       	mov	r18, r24
   1e75e:	30 e0       	ldi	r19, 0x00	; 0
   1e760:	22 5b       	subi	r18, 0xB2	; 178
   1e762:	3e 4f       	sbci	r19, 0xFE	; 254
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
   1e764:	81 91       	ld	r24, Z+
   1e766:	d3 01       	movw	r26, r6
   1e768:	8d 93       	st	X+, r24
   1e76a:	3d 01       	movw	r6, r26
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e76c:	a2 17       	cp	r26, r18
   1e76e:	b3 07       	cpc	r27, r19
   1e770:	c9 f7       	brne	.-14     	; 0x1e764 <boot_insertTracePointLong+0x128>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
    }
    reprogram(pagebuffer, pagenum + 1);
   1e772:	8e e4       	ldi	r24, 0x4E	; 78
   1e774:	91 e0       	ldi	r25, 0x01	; 1
   1e776:	b1 01       	movw	r22, r2
   1e778:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e77c:	df 91       	pop	r29
   1e77e:	cf 91       	pop	r28
   1e780:	1f 91       	pop	r17
   1e782:	0f 91       	pop	r16
   1e784:	ff 90       	pop	r15
   1e786:	ef 90       	pop	r14
   1e788:	df 90       	pop	r13
   1e78a:	cf 90       	pop	r12
   1e78c:	bf 90       	pop	r11
   1e78e:	af 90       	pop	r10
   1e790:	9f 90       	pop	r9
   1e792:	8f 90       	pop	r8
   1e794:	7f 90       	pop	r7
   1e796:	6f 90       	pop	r6
   1e798:	5f 90       	pop	r5
   1e79a:	4f 90       	pop	r4
   1e79c:	3f 90       	pop	r3
   1e79e:	2f 90       	pop	r2
   1e7a0:	08 95       	ret
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e7a2:	45 2c       	mov	r4, r5
   1e7a4:	41 94       	neg	r4
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e7a6:	84 2c       	mov	r8, r4
   1e7a8:	99 24       	eor	r9, r9
   1e7aa:	11 e0       	ldi	r17, 0x01	; 1
   1e7ac:	92 cf       	rjmp	.-220    	; 0x1e6d2 <boot_insertTracePointLong+0x96>

0001e7ae <boot_insertTracePoint>:
//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader"))) boot_insertTracePoint(uint16_t
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset)
{
   1e7ae:	2f 92       	push	r2
   1e7b0:	3f 92       	push	r3
   1e7b2:	4f 92       	push	r4
   1e7b4:	5f 92       	push	r5
   1e7b6:	6f 92       	push	r6
   1e7b8:	7f 92       	push	r7
   1e7ba:	8f 92       	push	r8
   1e7bc:	9f 92       	push	r9
   1e7be:	af 92       	push	r10
   1e7c0:	bf 92       	push	r11
   1e7c2:	cf 92       	push	r12
   1e7c4:	df 92       	push	r13
   1e7c6:	ef 92       	push	r14
   1e7c8:	ff 92       	push	r15
   1e7ca:	0f 93       	push	r16
   1e7cc:	1f 93       	push	r17
   1e7ce:	cf 93       	push	r28
   1e7d0:	df 93       	push	r29
   1e7d2:	6c 01       	movw	r12, r24
   1e7d4:	56 2e       	mov	r5, r22
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e7d6:	a0 e0       	ldi	r26, 0x00	; 0
   1e7d8:	b0 e0       	ldi	r27, 0x00	; 0
   1e7da:	ee 24       	eor	r14, r14
   1e7dc:	f8 2e       	mov	r15, r24
   1e7de:	09 2f       	mov	r16, r25
   1e7e0:	1a 2f       	mov	r17, r26
   1e7e2:	6e e4       	ldi	r22, 0x4E	; 78
   1e7e4:	66 2e       	mov	r6, r22
   1e7e6:	61 e0       	ldi	r22, 0x01	; 1
   1e7e8:	76 2e       	mov	r7, r22
   1e7ea:	53 01       	movw	r10, r6
   1e7ec:	15 c0       	rjmp	.+42     	; 0x1e818 <boot_insertTracePoint+0x6a>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e7ee:	d5 01       	movw	r26, r10
   1e7f0:	cc 93       	st	X, r28
            pagebuffer[i * 2 + 1] = data / 256;
   1e7f2:	11 96       	adiw	r26, 0x01	; 1
   1e7f4:	dc 93       	st	X, r29
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e7f6:	82 e0       	ldi	r24, 0x02	; 2
   1e7f8:	90 e0       	ldi	r25, 0x00	; 0
   1e7fa:	a0 e0       	ldi	r26, 0x00	; 0
   1e7fc:	b0 e0       	ldi	r27, 0x00	; 0
   1e7fe:	e8 0e       	add	r14, r24
   1e800:	f9 1e       	adc	r15, r25
   1e802:	0a 1f       	adc	r16, r26
   1e804:	1b 1f       	adc	r17, r27
   1e806:	a2 e0       	ldi	r26, 0x02	; 2
   1e808:	b0 e0       	ldi	r27, 0x00	; 0
   1e80a:	aa 0e       	add	r10, r26
   1e80c:	bb 1e       	adc	r11, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e80e:	be e4       	ldi	r27, 0x4E	; 78
   1e810:	ab 16       	cp	r10, r27
   1e812:	b2 e0       	ldi	r27, 0x02	; 2
   1e814:	bb 06       	cpc	r11, r27
   1e816:	61 f0       	breq	.+24     	; 0x1e830 <boot_insertTracePoint+0x82>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e818:	0b bf       	out	0x3b, r16	; 59
   1e81a:	f7 01       	movw	r30, r14
   1e81c:	c7 91       	elpm	r28, Z+
   1e81e:	d6 91       	elpm	r29, Z+
        if (is_host_lsb())
   1e820:	0e 94 a3 3a 	call	0x7546	; 0x7546 <is_host_lsb>
   1e824:	89 2b       	or	r24, r25
   1e826:	19 f7       	brne	.-58     	; 0x1e7ee <boot_insertTracePoint+0x40>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e828:	f5 01       	movw	r30, r10
   1e82a:	c1 83       	std	Z+1, r28	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e82c:	d0 83       	st	Z, r29
   1e82e:	e3 cf       	rjmp	.-58     	; 0x1e7f6 <boot_insertTracePoint+0x48>
    //say 234, then it is 22 bytes 
    //Now this part needs to be changed to 16 bytes
    //index is 242, then 14 bytes. 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
   1e830:	e2 ef       	ldi	r30, 0xF2	; 242
   1e832:	e5 15       	cp	r30, r5
   1e834:	08 f4       	brcc	.+2      	; 0x1e838 <boot_insertTracePoint+0x8a>
   1e836:	6e c0       	rjmp	.+220    	; 0x1e914 <boot_insertTracePoint+0x166>
   1e838:	10 e0       	ldi	r17, 0x00	; 0
   1e83a:	5e e0       	ldi	r21, 0x0E	; 14
   1e83c:	45 2e       	mov	r4, r21
   1e83e:	4e e0       	ldi	r20, 0x0E	; 14
   1e840:	84 2e       	mov	r8, r20
   1e842:	91 2c       	mov	r9, r1
   1e844:	a5 2d       	mov	r26, r5
   1e846:	b0 e0       	ldi	r27, 0x00	; 0
   1e848:	a2 5b       	subi	r26, 0xB2	; 178
   1e84a:	be 4f       	sbci	r27, 0xFE	; 254
   1e84c:	20 e0       	ldi	r18, 0x00	; 0
   1e84e:	30 e0       	ldi	r19, 0x00	; 0
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
   1e850:	f9 01       	movw	r30, r18
   1e852:	e4 5e       	subi	r30, 0xE4	; 228
   1e854:	fe 4f       	sbci	r31, 0xFE	; 254
   1e856:	80 81       	ld	r24, Z
   1e858:	8d 93       	st	X+, r24
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e85a:	2f 5f       	subi	r18, 0xFF	; 255
   1e85c:	3f 4f       	sbci	r19, 0xFF	; 255
   1e85e:	28 15       	cp	r18, r8
   1e860:	39 05       	cpc	r19, r9
   1e862:	b4 f3       	brlt	.-20     	; 0x1e850 <boot_insertTracePoint+0xa2>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
    }
    reprogram(pagebuffer, pagenum);
   1e864:	8e e4       	ldi	r24, 0x4E	; 78
   1e866:	91 e0       	ldi	r25, 0x01	; 1
   1e868:	b6 01       	movw	r22, r12
   1e86a:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
    if (programmore == 0)
   1e86e:	11 23       	and	r17, r17
   1e870:	09 f4       	brne	.+2      	; 0x1e874 <boot_insertTracePoint+0xc6>
   1e872:	3d c0       	rjmp	.+122    	; 0x1e8ee <boot_insertTracePoint+0x140>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e874:	16 01       	movw	r2, r12
   1e876:	08 94       	sec
   1e878:	21 1c       	adc	r2, r1
   1e87a:	31 1c       	adc	r3, r1
   1e87c:	c1 01       	movw	r24, r2
   1e87e:	a0 e0       	ldi	r26, 0x00	; 0
   1e880:	b0 e0       	ldi	r27, 0x00	; 0
   1e882:	ee 24       	eor	r14, r14
   1e884:	f8 2e       	mov	r15, r24
   1e886:	09 2f       	mov	r16, r25
   1e888:	1a 2f       	mov	r17, r26
   1e88a:	ce e4       	ldi	r28, 0x4E	; 78
   1e88c:	d1 e0       	ldi	r29, 0x01	; 1
   1e88e:	0e c0       	rjmp	.+28     	; 0x1e8ac <boot_insertTracePoint+0xfe>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e890:	c8 82       	st	Y, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e892:	d9 82       	std	Y+1, r13	; 0x01
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e894:	82 e0       	ldi	r24, 0x02	; 2
   1e896:	90 e0       	ldi	r25, 0x00	; 0
   1e898:	a0 e0       	ldi	r26, 0x00	; 0
   1e89a:	b0 e0       	ldi	r27, 0x00	; 0
   1e89c:	e8 0e       	add	r14, r24
   1e89e:	f9 1e       	adc	r15, r25
   1e8a0:	0a 1f       	adc	r16, r26
   1e8a2:	1b 1f       	adc	r17, r27
   1e8a4:	22 96       	adiw	r28, 0x02	; 2
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e8a6:	ac 16       	cp	r10, r28
   1e8a8:	bd 06       	cpc	r11, r29
   1e8aa:	59 f0       	breq	.+22     	; 0x1e8c2 <boot_insertTracePoint+0x114>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e8ac:	0b bf       	out	0x3b, r16	; 59
   1e8ae:	f7 01       	movw	r30, r14
   1e8b0:	c7 90       	elpm	r12, Z+
   1e8b2:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e8b4:	0e 94 a3 3a 	call	0x7546	; 0x7546 <is_host_lsb>
   1e8b8:	89 2b       	or	r24, r25
   1e8ba:	51 f7       	brne	.-44     	; 0x1e890 <boot_insertTracePoint+0xe2>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e8bc:	c9 82       	std	Y+1, r12	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e8be:	d8 82       	st	Y, r13
   1e8c0:	e9 cf       	rjmp	.-46     	; 0x1e894 <boot_insertTracePoint+0xe6>
        }
    }
    endindex2 = 14 - endindex;
   1e8c2:	8e e0       	ldi	r24, 0x0E	; 14
   1e8c4:	84 19       	sub	r24, r4
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e8c6:	71 f0       	breq	.+28     	; 0x1e8e4 <boot_insertTracePoint+0x136>
   1e8c8:	f4 01       	movw	r30, r8
   1e8ca:	e4 5e       	subi	r30, 0xE4	; 228
   1e8cc:	fe 4f       	sbci	r31, 0xFE	; 254
   1e8ce:	28 2f       	mov	r18, r24
   1e8d0:	30 e0       	ldi	r19, 0x00	; 0
   1e8d2:	22 5b       	subi	r18, 0xB2	; 178
   1e8d4:	3e 4f       	sbci	r19, 0xFE	; 254
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
   1e8d6:	81 91       	ld	r24, Z+
   1e8d8:	d3 01       	movw	r26, r6
   1e8da:	8d 93       	st	X+, r24
   1e8dc:	3d 01       	movw	r6, r26
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e8de:	a2 17       	cp	r26, r18
   1e8e0:	b3 07       	cpc	r27, r19
   1e8e2:	c9 f7       	brne	.-14     	; 0x1e8d6 <boot_insertTracePoint+0x128>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
    }
    reprogram(pagebuffer, pagenum + 1);
   1e8e4:	8e e4       	ldi	r24, 0x4E	; 78
   1e8e6:	91 e0       	ldi	r25, 0x01	; 1
   1e8e8:	b1 01       	movw	r22, r2
   1e8ea:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e8ee:	df 91       	pop	r29
   1e8f0:	cf 91       	pop	r28
   1e8f2:	1f 91       	pop	r17
   1e8f4:	0f 91       	pop	r16
   1e8f6:	ff 90       	pop	r15
   1e8f8:	ef 90       	pop	r14
   1e8fa:	df 90       	pop	r13
   1e8fc:	cf 90       	pop	r12
   1e8fe:	bf 90       	pop	r11
   1e900:	af 90       	pop	r10
   1e902:	9f 90       	pop	r9
   1e904:	8f 90       	pop	r8
   1e906:	7f 90       	pop	r7
   1e908:	6f 90       	pop	r6
   1e90a:	5f 90       	pop	r5
   1e90c:	4f 90       	pop	r4
   1e90e:	3f 90       	pop	r3
   1e910:	2f 90       	pop	r2
   1e912:	08 95       	ret
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e914:	45 2c       	mov	r4, r5
   1e916:	41 94       	neg	r4
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e918:	84 2c       	mov	r8, r4
   1e91a:	99 24       	eor	r9, r9
   1e91c:	11 e0       	ldi	r17, 0x01	; 1
   1e91e:	92 cf       	rjmp	.-220    	; 0x1e844 <boot_insertTracePoint+0x96>

0001e920 <boot_insertBreakPoint>:
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    instructions)
{
   1e920:	7f 92       	push	r7
   1e922:	8f 92       	push	r8
   1e924:	9f 92       	push	r9
   1e926:	af 92       	push	r10
   1e928:	bf 92       	push	r11
   1e92a:	cf 92       	push	r12
   1e92c:	df 92       	push	r13
   1e92e:	ef 92       	push	r14
   1e930:	ff 92       	push	r15
   1e932:	0f 93       	push	r16
   1e934:	1f 93       	push	r17
   1e936:	cf 93       	push	r28
   1e938:	df 93       	push	r29
   1e93a:	4c 01       	movw	r8, r24
   1e93c:	76 2e       	mov	r7, r22
   1e93e:	5a 01       	movw	r10, r20
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e940:	a0 e0       	ldi	r26, 0x00	; 0
   1e942:	b0 e0       	ldi	r27, 0x00	; 0
   1e944:	ee 24       	eor	r14, r14
   1e946:	f8 2e       	mov	r15, r24
   1e948:	09 2f       	mov	r16, r25
   1e94a:	1a 2f       	mov	r17, r26
   1e94c:	ce e4       	ldi	r28, 0x4E	; 78
   1e94e:	d1 e0       	ldi	r29, 0x01	; 1
   1e950:	0f c0       	rjmp	.+30     	; 0x1e970 <boot_insertBreakPoint+0x50>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e952:	c8 82       	st	Y, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e954:	d9 82       	std	Y+1, r13	; 0x01
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e956:	82 e0       	ldi	r24, 0x02	; 2
   1e958:	90 e0       	ldi	r25, 0x00	; 0
   1e95a:	a0 e0       	ldi	r26, 0x00	; 0
   1e95c:	b0 e0       	ldi	r27, 0x00	; 0
   1e95e:	e8 0e       	add	r14, r24
   1e960:	f9 1e       	adc	r15, r25
   1e962:	0a 1f       	adc	r16, r26
   1e964:	1b 1f       	adc	r17, r27
   1e966:	22 96       	adiw	r28, 0x02	; 2
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
   1e968:	92 e0       	ldi	r25, 0x02	; 2
   1e96a:	ce 34       	cpi	r28, 0x4E	; 78
   1e96c:	d9 07       	cpc	r29, r25
   1e96e:	59 f0       	breq	.+22     	; 0x1e986 <boot_insertBreakPoint+0x66>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e970:	0b bf       	out	0x3b, r16	; 59
   1e972:	f7 01       	movw	r30, r14
   1e974:	c7 90       	elpm	r12, Z+
   1e976:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e978:	0e 94 a3 3a 	call	0x7546	; 0x7546 <is_host_lsb>
   1e97c:	89 2b       	or	r24, r25
   1e97e:	49 f7       	brne	.-46     	; 0x1e952 <boot_insertBreakPoint+0x32>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e980:	c9 82       	std	Y+1, r12	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e982:	d8 82       	st	Y, r13
   1e984:	e8 cf       	rjmp	.-48     	; 0x1e956 <boot_insertBreakPoint+0x36>
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
   1e986:	a7 2d       	mov	r26, r7
   1e988:	b0 e0       	ldi	r27, 0x00	; 0
   1e98a:	a2 5b       	subi	r26, 0xB2	; 178
   1e98c:	be 4f       	sbci	r27, 0xFE	; 254
   1e98e:	20 e0       	ldi	r18, 0x00	; 0
   1e990:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
    {
        instructions[i] = pagebuffer[index + i];
   1e992:	f5 01       	movw	r30, r10
   1e994:	e2 0f       	add	r30, r18
   1e996:	f3 1f       	adc	r31, r19
   1e998:	8c 91       	ld	r24, X
   1e99a:	80 83       	st	Z, r24
        pagebuffer[index + i] = breakpointstring[i];
   1e99c:	f9 01       	movw	r30, r18
   1e99e:	e4 5d       	subi	r30, 0xD4	; 212
   1e9a0:	fe 4f       	sbci	r31, 0xFE	; 254
   1e9a2:	80 81       	ld	r24, Z
   1e9a4:	8d 93       	st	X+, r24
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
   1e9a6:	2f 5f       	subi	r18, 0xFF	; 255
   1e9a8:	3f 4f       	sbci	r19, 0xFF	; 255
   1e9aa:	26 30       	cpi	r18, 0x06	; 6
   1e9ac:	31 05       	cpc	r19, r1
   1e9ae:	89 f7       	brne	.-30     	; 0x1e992 <boot_insertBreakPoint+0x72>
    {
        instructions[i] = pagebuffer[index + i];
        pagebuffer[index + i] = breakpointstring[i];
    }
    reprogram(pagebuffer, pagenum);
   1e9b0:	8e e4       	ldi	r24, 0x4E	; 78
   1e9b2:	91 e0       	ldi	r25, 0x01	; 1
   1e9b4:	b4 01       	movw	r22, r8
   1e9b6:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e9ba:	df 91       	pop	r29
   1e9bc:	cf 91       	pop	r28
   1e9be:	1f 91       	pop	r17
   1e9c0:	0f 91       	pop	r16
   1e9c2:	ff 90       	pop	r15
   1e9c4:	ef 90       	pop	r14
   1e9c6:	df 90       	pop	r13
   1e9c8:	cf 90       	pop	r12
   1e9ca:	bf 90       	pop	r11
   1e9cc:	af 90       	pop	r10
   1e9ce:	9f 90       	pop	r9
   1e9d0:	8f 90       	pop	r8
   1e9d2:	7f 90       	pop	r7
   1e9d4:	08 95       	ret

Disassembly of section .systemcall.1:

0001d400 <getNodeID>:
    __attribute__ ((naked));
void getNodeID()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETNODEID
    getNodeIdTask_Logger();
   1d400:	0e 94 97 47 	call	0x8f2e	; 0x8f2e <getNodeIdTask_Logger>
#endif
#else
    getNodeIdTask();
#endif
    asm volatile ("nop"::);
   1d404:	00 00       	nop
    asm volatile ("ret"::);
   1d406:	08 95       	ret

0001d408 <setNodeID>:
    __attribute__ ((naked));
void setNodeID()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETNODEID
    setNodeIdTask_Logger();
   1d408:	0e 94 c3 47 	call	0x8f86	; 0x8f86 <setNodeIdTask_Logger>
#endif
#else
    setNodeIdTask();
#endif
    asm volatile ("nop"::);
   1d40c:	00 00       	nop
    asm volatile ("ret"::);
   1d40e:	08 95       	ret

0001d410 <getRandomNumberSyscall>:
    __attribute__ ((naked));
void getRandomNumberSyscall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETRANDOMNUMBER
    getRandomTask_Logger();
   1d410:	0e 94 ef 47 	call	0x8fde	; 0x8fde <getRandomTask_Logger>
#endif
#else
    getRandomTask();
#endif
    asm volatile ("nop"::);
   1d414:	00 00       	nop
    asm volatile ("ret"::);
   1d416:	08 95       	ret

Disassembly of section .systemcall.2:

0001d500 <getCurrentThreadAddressSyscall>:
    __attribute__ ((naked));
void getCurrentThreadAddressSyscall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTTHREADADDRESS
    getCurrentThreadAddress_Logger();
   1d500:	0e 94 1b 48 	call	0x9036	; 0x9036 <getCurrentThreadAddress_Logger>
#endif
#else
    getCurrentThreadAddress_avr();
#endif
    asm volatile ("nop"::);
   1d504:	00 00       	nop
    asm volatile ("ret"::);
   1d506:	08 95       	ret

0001d508 <getCurrentThreadIndex>:
    __attribute__ ((naked));
void getCurrentThreadIndex()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTTHREADINDEX
    getThreadIndexAddress_Logger();
   1d508:	0e 94 47 48 	call	0x908e	; 0x908e <getThreadIndexAddress_Logger>
#endif
#else
    getThreadIndexAddress_avr();
#endif
    asm volatile ("nop"::);
   1d50c:	00 00       	nop
    asm volatile ("ret"::);
   1d50e:	08 95       	ret

0001d510 <getThreadTableStartSyscall>:
    __attribute__ ((naked));
void getThreadTableStartSyscall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETTHREADTABLESTART
    getThreadTableStart_Logger();
   1d510:	0e 94 73 48 	call	0x90e6	; 0x90e6 <getThreadTableStart_Logger>
#endif
#else
    getThreadTableStart_avr();
#endif
    asm volatile ("nop"::);
   1d514:	00 00       	nop
    asm volatile ("ret"::);
   1d516:	08 95       	ret

0001d518 <yieldfunction>:
    __attribute__ ((naked));
void yieldfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YIELDFUNCTION
    thread_yield_logger();
   1d518:	0e 94 8d 48 	call	0x911a	; 0x911a <thread_yield_logger>
#endif
#else
    thread_yield();
#endif
    asm volatile ("nop"::);
   1d51c:	00 00       	nop
    asm volatile ("ret"::);
   1d51e:	08 95       	ret

0001d520 <postThreadTask>:
    __attribute__ ((naked));
void postThreadTask()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_POSTTHREADTASK
    postNewThreadTask_Logger();
   1d520:	0e 94 a7 48 	call	0x914e	; 0x914e <postNewThreadTask_Logger>
#endif
#else
    postNewThreadTask();
#endif
    asm volatile ("nop"::);
   1d524:	00 00       	nop
    asm volatile ("ret"::);
   1d526:	08 95       	ret

0001d528 <postThreadTaskNoLog>:
void postThreadTaskNoLog() __attribute__ ((section(".systemcall.2")))
    __attribute__ ((naked));
void postThreadTaskNoLog()
{

    postNewThreadTask();
   1d528:	0e 94 05 18 	call	0x300a	; 0x300a <postNewThreadTask>

    asm volatile ("nop"::);
   1d52c:	00 00       	nop
    asm volatile ("ret"::);
   1d52e:	08 95       	ret

0001d530 <breakfunction>:
    __attribute__ ((naked));
void breakfunction(){

  #ifdef TRACE_ENABLE_SYSCALLEVENT
  #ifdef TRACE_ENABLE_SYSCALL_BREAKPOINTYIELD
   break_point_function_Logger();
   1d530:	0e 94 c1 48 	call	0x9182	; 0x9182 <break_point_function_Logger>
  #endif
  #else
   break_point_function();   
  #endif
   asm volatile( "nop":: );
   1d534:	00 00       	nop
   asm volatile( "ret":: );
   1d536:	08 95       	ret

Disassembly of section .systemcall.3:

0001d600 <postTaskSysCall>:
    __attribute__ ((naked));
void postTaskSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_POSTTASKSYSCALL
    postNewTask_Logger();
   1d600:	0e 94 f6 48 	call	0x91ec	; 0x91ec <postNewTask_Logger>
#endif
#else
    postNewTask_avr();
#endif
    asm volatile ("nop"::);
   1d604:	00 00       	nop
    asm volatile ("ret"::);
   1d606:	08 95       	ret

Disassembly of section .systemcall.4:

0001d700 <getStackPtr>:
	#ifdef TRACE_ENABLE_SYSCALL
  #ifdef TRACE_ENABLE_SYSCALL_KERNELSTACK
    getStackPtrTask_Logger();
  #endif
  #else 
    getStackPtrTask();
   1d700:	0e 94 10 49 	call	0x9220	; 0x9220 <getStackPtrTask>
  #endif
    asm volatile ("nop"::);
   1d704:	00 00       	nop
    asm volatile ("ret"::);
   1d706:	08 95       	ret

Disassembly of section .systemcall.5:

0001d800 <setRadioFrequency>:
    ((naked));
void setRadioFrequency()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETRADIOFREQUENCY
    setRadioFrequencyTask_Logger();
   1d800:	0e 94 3c 49 	call	0x9278	; 0x9278 <setRadioFrequencyTask_Logger>
#else
#ifdef RADIO_CC2420
    setRadioFrequencyTask();
#endif
#endif
    asm volatile ("nop"::);
   1d804:	00 00       	nop
    asm volatile ("ret"::);
   1d806:	08 95       	ret

0001d808 <setRadioChannel>:
    __attribute__ ((naked));
void setRadioChannel()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETRADIOCHANNEL
    setRadioChannelTask_Logger();
   1d808:	0e 94 56 49 	call	0x92ac	; 0x92ac <setRadioChannelTask_Logger>
#else
#ifdef RADIO_CC2420
    setRadioChannelTask();
#endif
#endif
    asm volatile ("nop"::);
   1d80c:	00 00       	nop
    asm volatile ("ret"::);
   1d80e:	08 95       	ret

0001d810 <setRadioPower>:
    __attribute__ ((naked));
void setRadioPower()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETRADIOPOWER
    setRadioPowerTask_Logger();
   1d810:	0e 94 70 49 	call	0x92e0	; 0x92e0 <setRadioPowerTask_Logger>
#else
#ifdef RADIO_CC2420
    setRadioPowerTask();
#endif
#endif
    asm volatile ("nop"::);
   1d814:	00 00       	nop
    asm volatile ("ret"::);
   1d816:	08 95       	ret

0001d818 <getRadioSendingBuffer>:
    __attribute__ ((naked));
void getRadioSendingBuffer()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTRADIOINFOADDRESS
    getRadioSendingBuffer_Logger();
   1d818:	0e 94 9c 49 	call	0x9338	; 0x9338 <getRadioSendingBuffer_Logger>
#endif
#else
    getRadioSendingBuffer_avr();
#endif
    asm volatile ("nop"::);
   1d81c:	00 00       	nop
    asm volatile ("ret"::);
   1d81e:	08 95       	ret

0001d820 <invokeSocketRadioSend>:
    __attribute__ ((naked));
void invokeSocketRadioSend()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETRADIOSENDFUNCTION
    SocketRadioSend_Logger();
   1d820:	0e 94 b6 49 	call	0x936c	; 0x936c <SocketRadioSend_Logger>
#endif
#else
    SocketRadioSend();
#endif
    asm volatile ("nop"::);
   1d824:	00 00       	nop
    asm volatile ("ret"::);
   1d826:	08 95       	ret

0001d828 <getRadioReceivingBuffer>:
void getRadioReceivingBuffer()

{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTRADIORECEIVERHANDLEADDRESS
    getReceiverBuffer_Logger();
   1d828:	0e 94 e2 49 	call	0x93c4	; 0x93c4 <getReceiverBuffer_Logger>
#endif
#else
    getReceiverBuffer_avr();
#endif
    asm volatile ("nop"::);
   1d82c:	00 00       	nop
    asm volatile ("ret"::);
   1d82e:	08 95       	ret

0001d830 <setCurrentRadioHandle>:
    __attribute__ ((naked));
void setCurrentRadioHandle()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETCURRENTRADIOHANDLE
    syscall_registerEvent_Logger();
   1d830:	0e 94 fc 49 	call	0x93f8	; 0x93f8 <syscall_registerEvent_Logger>
#endif
#else 
    registerReceiverHandle_syscall();
#endif
    asm volatile ("nop"::);
   1d834:	00 00       	nop
    asm volatile ("ret"::);
   1d836:	08 95       	ret

Disassembly of section .systemcall.6:

0001d900 <redtogglefunction>:
    ((naked));
void redtogglefunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_REDTOGGLEFUNCTION
    Leds_redToggle_Logger();
   1d900:	0e 94 16 4a 	call	0x942c	; 0x942c <Leds_redToggle_Logger>
#endif
#else
    Leds_redToggle();
#endif
    asm volatile ("nop"::);
   1d904:	00 00       	nop
    asm volatile ("ret"::);
   1d906:	08 95       	ret

0001d908 <yellowtogglefunction>:
    __attribute__ ((naked));
void yellowtogglefunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YELLOWTOGGLEFUNCTION
    Leds_yellowToggle_Logger();
   1d908:	0e 94 30 4a 	call	0x9460	; 0x9460 <Leds_yellowToggle_Logger>
#endif
#else
    Leds_yellowToggle();
#endif
    asm volatile ("nop"::);
   1d90c:	00 00       	nop
    asm volatile ("ret"::);
   1d90e:	08 95       	ret

0001d910 <greentogglefunction>:
    __attribute__ ((naked));
void greentogglefunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GREENTOGGLEFUNCTION
    Leds_greenToggle_Logger();
   1d910:	0e 94 4a 4a 	call	0x9494	; 0x9494 <Leds_greenToggle_Logger>
#endif
#else
    Leds_greenToggle();
#endif
    asm volatile ("nop"::);
   1d914:	00 00       	nop
    asm volatile ("ret"::);
   1d916:	08 95       	ret

0001d918 <redonfunction>:
    __attribute__ ((naked));
void redonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_REDONFUNCTION
    Leds_redOn_Logger();
   1d918:	0e 94 64 4a 	call	0x94c8	; 0x94c8 <Leds_redOn_Logger>
#endif
#else
    Leds_redOn();
#endif
    asm volatile ("nop"::);
   1d91c:	00 00       	nop
    asm volatile ("ret"::);
   1d91e:	08 95       	ret

0001d920 <redofffunction>:
    __attribute__ ((naked));
void redofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_REDOFFFUNCTION
    Leds_redOff_Logger();
   1d920:	0e 94 7e 4a 	call	0x94fc	; 0x94fc <Leds_redOff_Logger>
#endif
#else
    Leds_redOff();
#endif
    asm volatile ("nop"::);
   1d924:	00 00       	nop
    asm volatile ("ret"::);
   1d926:	08 95       	ret

0001d928 <yellowonfunction>:
    __attribute__ ((naked));
void yellowonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YELLOWONFUNCTION
    Leds_yellowOn_Logger();
   1d928:	0e 94 98 4a 	call	0x9530	; 0x9530 <Leds_yellowOn_Logger>
#endif
#else
    Leds_yellowOn();
#endif
    asm volatile ("nop"::);
   1d92c:	00 00       	nop
    asm volatile ("ret"::);
   1d92e:	08 95       	ret

0001d930 <yellowofffunction>:
    ((naked));
void yellowofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YELLOWOFFFUNCTION
    Leds_yellowOff_Logger();
   1d930:	0e 94 b2 4a 	call	0x9564	; 0x9564 <Leds_yellowOff_Logger>
#endif
#else
    Leds_yellowOff();
#endif
    asm volatile ("nop"::);
   1d934:	00 00       	nop
    asm volatile ("ret"::);
   1d936:	08 95       	ret

0001d938 <greenonfunction>:
    __attribute__ ((naked));
void greenonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GREENONFUNCTION
    Leds_greenOn_Logger();
   1d938:	0e 94 cc 4a 	call	0x9598	; 0x9598 <Leds_greenOn_Logger>
#endif
#else
    Leds_greenOn();
#endif
    asm volatile ("nop"::);
   1d93c:	00 00       	nop
    asm volatile ("ret"::);
   1d93e:	08 95       	ret

0001d940 <greenofffunction>:
    __attribute__ ((naked));
void greenofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GREENOFFFUNCTION
    Leds_greenOff_Logger();
   1d940:	0e 94 e6 4a 	call	0x95cc	; 0x95cc <Leds_greenOff_Logger>
#endif
#else
    Leds_greenOff();
#endif
    asm volatile ("nop"::);
   1d944:	00 00       	nop
    asm volatile ("ret"::);
   1d946:	08 95       	ret

Disassembly of section .systemcall.7:

0001da00 <ADCLightSysCall>:
    __attribute__ ((naked));
void ADCLightSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCLIGHTSYSCALL
    ADCLight_Logger();
   1da00:	0e 94 00 4b 	call	0x9600	; 0x9600 <ADCLight_Logger>
#endif
#else
    ADCLight();
#endif
    asm volatile ("nop"::);
   1da04:	00 00       	nop
    asm volatile ("ret"::);
   1da06:	08 95       	ret

0001da08 <ADCTempSysCall>:
    __attribute__ ((naked));
void ADCTempSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCTEMPSYSCALL
    ADCTemp_Logger();
   1da08:	0e 94 1a 4b 	call	0x9634	; 0x9634 <ADCTemp_Logger>
#endif
#else
    ADCTemp();
#endif
    asm volatile ("nop"::);
   1da0c:	00 00       	nop
    asm volatile ("ret"::);
   1da0e:	08 95       	ret

0001da10 <ADCMagXSysCall>:
    __attribute__ ((naked));
void ADCMagXSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCMAGXSYSCALL
    ADCMagX_Logger();
   1da10:	0e 94 34 4b 	call	0x9668	; 0x9668 <ADCMagX_Logger>
#endif
#else
    ADCMagX();
#endif
    asm volatile ("nop"::);
   1da14:	00 00       	nop
    asm volatile ("ret"::);
   1da16:	08 95       	ret

0001da18 <ADCMagYSysCall>:
    __attribute__ ((naked));
void ADCMagYSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCMAGYSYSCALL
    ADCMagY_Logger();
   1da18:	0e 94 4e 4b 	call	0x969c	; 0x969c <ADCMagY_Logger>
#endif
#else
    ADCMagY();
#endif
    asm volatile ("nop"::);
   1da1c:	00 00       	nop
    asm volatile ("ret"::);
   1da1e:	08 95       	ret

0001da20 <ADCAccXSysCall>:
    __attribute__ ((naked));
void ADCAccXSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCACCXSYSCALL
    ADCAccX_Logger();
   1da20:	0e 94 68 4b 	call	0x96d0	; 0x96d0 <ADCAccX_Logger>
#endif
#else
    ADCAccX();
#endif
    asm volatile ("nop"::);
   1da24:	00 00       	nop
    asm volatile ("ret"::);
   1da26:	08 95       	ret

0001da28 <ADCAccYSysCall>:
    __attribute__ ((naked));
void ADCAccYSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCACCYSYSCALL
    ADCAccY_Logger();
   1da28:	0e 94 82 4b 	call	0x9704	; 0x9704 <ADCAccY_Logger>
#endif
#else
    ADCAccY();
#endif
    asm volatile ("nop"::);
   1da2c:	00 00       	nop
    asm volatile ("ret"::);
   1da2e:	08 95       	ret

0001da30 <sounderonfunction>:
    ((naked));
void sounderonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SOUNDERONFUNCTION
    sounderOn_Logger();         //defined in avr\syscall.c
   1da30:	0e 94 9c 4b 	call	0x9738	; 0x9738 <sounderOn_Logger>
#endif
#else
    sounder_init();
    sounderOn();          //defined in micaz\sounder.c
#endif
    asm volatile ("nop"::);
   1da34:	00 00       	nop
    asm volatile ("ret"::);
   1da36:	08 95       	ret

0001da38 <sounderofffunction>:
    __attribute__ ((naked));
void sounderofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SOUNDEROFFFUNCTION
    sounderOff_Logger();        //defined in avr\syscall.c
   1da38:	0e 94 b6 4b 	call	0x976c	; 0x976c <sounderOff_Logger>
#endif
#else
    sounder_init();
    sounderOff();         //defined in micaz\sounder.c
#endif
    asm volatile ("nop"::);
   1da3c:	00 00       	nop
    asm volatile ("ret"::);
   1da3e:	08 95       	ret

Disassembly of section .systemcall.8:

0001db00 <getCurrentEEPROMHandleAddress>:
    __attribute__ ((naked));
void getCurrentEEPROMHandleAddress()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTEEPROMHANDLEADDRESS
    getEEPROMHandleInfo_Logger();
   1db00:	0e 94 e2 4b 	call	0x97c4	; 0x97c4 <getEEPROMHandleInfo_Logger>
#endif
#else
    getEEPROMHandleInfo();
#endif
    asm volatile ("nop"::);
   1db04:	00 00       	nop
    asm volatile ("ret"::);
   1db06:	08 95       	ret

0001db08 <readFromEEPROM>:
    __attribute__ ((naked));
void readFromEEPROM()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_READFROMEEPROM
    readEEPROMTask_Logger();
   1db08:	0e 94 05 4c 	call	0x980a	; 0x980a <readEEPROMTask_Logger>
#endif
#else
    readEEPROMTask();
#endif
    asm volatile ("nop"::);
   1db0c:	00 00       	nop
    asm volatile ("ret"::);
   1db0e:	08 95       	ret

0001db10 <writeToEEPROM>:
    __attribute__ ((naked));
void writeToEEPROM()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_WRITETOEEPROM
    writeEEPROMTask_Logger();
   1db10:	0e 94 28 4c 	call	0x9850	; 0x9850 <writeEEPROMTask_Logger>
#endif
#else
    writeEEPROMTask();
#endif
    asm volatile ("nop"::);
   1db14:	00 00       	nop
    asm volatile ("ret"::);
   1db16:	08 95       	ret

Disassembly of section .systemcall.9:

0001dc00 <getFilePathAddr>:
    __attribute__ ((naked));
void getFilePathAddr()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETFILEPATHADDR
    getFilePathAddress_Logger();
   1dc00:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <getFilePathAddress_Logger>
#endif
#else
    getFilePathAddress_avr();
#endif
    asm volatile ("nop"::);
   1dc04:	00 00       	nop
    asm volatile ("ret"::);
   1dc06:	08 95       	ret

0001dc08 <getFileModeAddr>:
    __attribute__ ((naked));
void getFileModeAddr()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETFILEMODEADDR
    getFileModeAddress_Logger();
   1dc08:	0e 94 80 4c 	call	0x9900	; 0x9900 <getFileModeAddress_Logger>
#endif
#else
    getFileModeAddress_avr();
#endif
    asm volatile ("nop"::);
   1dc0c:	00 00       	nop
    asm volatile ("ret"::);
   1dc0e:	08 95       	ret

0001dc10 <openFileSysCall>:
    __attribute__ ((naked));
void openFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_OPENFILESYSCALL
    openFileTask_Logger();
   1dc10:	0e 94 9a 4c 	call	0x9934	; 0x9934 <openFileTask_Logger>
#endif
#else
    openFileTask();
#endif
    asm volatile ("nop"::);
   1dc14:	00 00       	nop
    asm volatile ("ret"::);
   1dc16:	08 95       	ret

0001dc18 <closeFileSysCall>:
    __attribute__ ((naked));
void closeFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_CLOSEFILESYSCALL
    closeFileTask_Logger();
   1dc18:	0e 94 b4 4c 	call	0x9968	; 0x9968 <closeFileTask_Logger>
#endif
#else
    closeFileTask();
#endif
    asm volatile ("nop"::);
   1dc1c:	00 00       	nop
    asm volatile ("ret"::);
   1dc1e:	08 95       	ret

0001dc20 <readFileSysCall>:
    __attribute__ ((naked));
void readFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_READFILESYSCALL
    readFileTask_Logger();
   1dc20:	0e 94 ce 4c 	call	0x999c	; 0x999c <readFileTask_Logger>
#endif
#else
    readFileTask();
#endif
    asm volatile ("nop"::);
   1dc24:	00 00       	nop
    asm volatile ("ret"::);
   1dc26:	08 95       	ret

0001dc28 <writeFileSysCall>:
    __attribute__ ((naked));
void writeFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_WRITEFILESYSCALL
    writeFileTask_Logger();
   1dc28:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <writeFileTask_Logger>
#endif
#else
    writeFileTask();
#endif
    asm volatile ("nop"::);
   1dc2c:	00 00       	nop
    asm volatile ("ret"::);
   1dc2e:	08 95       	ret

0001dc30 <seekFileSysCall>:
    __attribute__ ((naked));
void seekFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SEEKFILESYSCALL
    seekFileTask_Logger();
   1dc30:	0e 94 02 4d 	call	0x9a04	; 0x9a04 <seekFileTask_Logger>
#endif
#else
    seekFileTask();
#endif
    asm volatile ("nop"::);
   1dc34:	00 00       	nop
    asm volatile ("ret"::);
   1dc36:	08 95       	ret
