
LiteOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  0000af1e  0000b0f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000af1e  00000000  00000000  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   000009d6  0001e000  0001e000  0000b2b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .systemcall.1 00000018  0001d400  0001d400  0000b144  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .systemcall.2 00000038  0001d500  0001d500  0000b15c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .systemcall.3 00000008  0001d600  0001d600  0000b194  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .systemcall.4 00000008  0001d700  0001d700  0000b19c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .systemcall.5 00000038  0001d800  0001d800  0000b1a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .systemcall.6 00000048  0001d900  0001d900  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .systemcall.7 00000040  0001da00  0001da00  0000b224  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .systemcall.8 00000018  0001db00  0001db00  0000b264  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .systemcall.9 00000038  0001dc00  0001dc00  0000b27c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .bss          00000b0c  00800152  00800152  0000bc8a  2**0
                  ALLOC
 13 .debug_aranges 000009d0  00000000  00000000  0000bc8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubnames 000068f3  00000000  00000000  0000c65a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_info   00014bc8  00000000  00000000  00012f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 000056c6  00000000  00000000  00027b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd29  00000000  00000000  0002d1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  00003ed0  00000000  00000000  0003cf04  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007540  00000000  00000000  00040dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000912e  00000000  00000000  00048314  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00000af8  00000000  00000000  00051442  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      10:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      14:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      18:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      1c:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__vector_7>
      20:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      2c:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__vector_11>
      30:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__vector_12>
      34:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      38:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      3c:	0c 94 7e 36 	jmp	0x6cfc	; 0x6cfc <__vector_15>
      40:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      44:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      48:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__vector_18>
      4c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      50:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      54:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__vector_21>
      58:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      5c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      60:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      64:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      68:	0c 94 15 36 	jmp	0x6c2a	; 0x6c2a <__vector_26>
      6c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      70:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      78:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      7c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      80:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      84:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      8c:	05 46       	sbci	r16, 0x65	; 101
      8e:	09 46       	sbci	r16, 0x69	; 105
      90:	0d 46       	sbci	r16, 0x6D	; 109
      92:	11 46       	sbci	r17, 0x61	; 97
      94:	15 46       	sbci	r17, 0x65	; 101
      96:	19 46       	sbci	r17, 0x69	; 105
      98:	b8 45       	sbci	r27, 0x58	; 88
      9a:	b8 45       	sbci	r27, 0x58	; 88
      9c:	b8 45       	sbci	r27, 0x58	; 88
      9e:	b8 45       	sbci	r27, 0x58	; 88
      a0:	1d 46       	sbci	r17, 0x6D	; 109
      a2:	cf 45       	sbci	r28, 0x5F	; 95
      a4:	cb 45       	sbci	r28, 0x5B	; 91
      a6:	cb 45       	sbci	r28, 0x5B	; 91
      a8:	b8 45       	sbci	r27, 0x58	; 88
      aa:	b8 45       	sbci	r27, 0x58	; 88
      ac:	b8 45       	sbci	r27, 0x58	; 88
      ae:	b8 45       	sbci	r27, 0x58	; 88
      b0:	b8 45       	sbci	r27, 0x58	; 88
      b2:	b8 45       	sbci	r27, 0x58	; 88
      b4:	b8 45       	sbci	r27, 0x58	; 88
      b6:	b8 45       	sbci	r27, 0x58	; 88
      b8:	b8 45       	sbci	r27, 0x58	; 88
      ba:	b8 45       	sbci	r27, 0x58	; 88
      bc:	b8 45       	sbci	r27, 0x58	; 88
      be:	b8 45       	sbci	r27, 0x58	; 88
      c0:	b8 45       	sbci	r27, 0x58	; 88
      c2:	b8 45       	sbci	r27, 0x58	; 88
      c4:	b8 45       	sbci	r27, 0x58	; 88
      c6:	b8 45       	sbci	r27, 0x58	; 88
      c8:	d3 45       	sbci	r29, 0x53	; 83
      ca:	d7 45       	sbci	r29, 0x57	; 87
      cc:	db 45       	sbci	r29, 0x5B	; 91
      ce:	de 45       	sbci	r29, 0x5E	; 94
      d0:	e2 45       	sbci	r30, 0x52	; 82
      d2:	b8 45       	sbci	r27, 0x58	; 88
      d4:	b8 45       	sbci	r27, 0x58	; 88
      d6:	b8 45       	sbci	r27, 0x58	; 88
      d8:	b8 45       	sbci	r27, 0x58	; 88
      da:	b8 45       	sbci	r27, 0x58	; 88
      dc:	b8 45       	sbci	r27, 0x58	; 88
      de:	b8 45       	sbci	r27, 0x58	; 88
      e0:	b8 45       	sbci	r27, 0x58	; 88
      e2:	b8 45       	sbci	r27, 0x58	; 88
      e4:	b8 45       	sbci	r27, 0x58	; 88
      e6:	b8 45       	sbci	r27, 0x58	; 88
      e8:	b8 45       	sbci	r27, 0x58	; 88
      ea:	b8 45       	sbci	r27, 0x58	; 88
      ec:	b8 45       	sbci	r27, 0x58	; 88
      ee:	b8 45       	sbci	r27, 0x58	; 88
      f0:	e6 45       	sbci	r30, 0x56	; 86
      f2:	b8 45       	sbci	r27, 0x58	; 88
      f4:	b8 45       	sbci	r27, 0x58	; 88
      f6:	b8 45       	sbci	r27, 0x58	; 88
      f8:	b8 45       	sbci	r27, 0x58	; 88
      fa:	b8 45       	sbci	r27, 0x58	; 88
      fc:	b8 45       	sbci	r27, 0x58	; 88
      fe:	b8 45       	sbci	r27, 0x58	; 88
     100:	b8 45       	sbci	r27, 0x58	; 88
     102:	b8 45       	sbci	r27, 0x58	; 88
     104:	ea 45       	sbci	r30, 0x5A	; 90
     106:	b8 45       	sbci	r27, 0x58	; 88
     108:	b8 45       	sbci	r27, 0x58	; 88
     10a:	b8 45       	sbci	r27, 0x58	; 88
     10c:	b8 45       	sbci	r27, 0x58	; 88
     10e:	b8 45       	sbci	r27, 0x58	; 88
     110:	b8 45       	sbci	r27, 0x58	; 88
     112:	b8 45       	sbci	r27, 0x58	; 88
     114:	b8 45       	sbci	r27, 0x58	; 88
     116:	b8 45       	sbci	r27, 0x58	; 88
     118:	ee 45       	sbci	r30, 0x5E	; 94
     11a:	b8 45       	sbci	r27, 0x58	; 88
     11c:	b8 45       	sbci	r27, 0x58	; 88
     11e:	b8 45       	sbci	r27, 0x58	; 88
     120:	b8 45       	sbci	r27, 0x58	; 88
     122:	b8 45       	sbci	r27, 0x58	; 88
     124:	b8 45       	sbci	r27, 0x58	; 88
     126:	b8 45       	sbci	r27, 0x58	; 88
     128:	b8 45       	sbci	r27, 0x58	; 88
     12a:	b8 45       	sbci	r27, 0x58	; 88
     12c:	f2 45       	sbci	r31, 0x52	; 82
     12e:	b8 45       	sbci	r27, 0x58	; 88
     130:	b8 45       	sbci	r27, 0x58	; 88
     132:	b8 45       	sbci	r27, 0x58	; 88
     134:	b8 45       	sbci	r27, 0x58	; 88
     136:	b8 45       	sbci	r27, 0x58	; 88
     138:	b8 45       	sbci	r27, 0x58	; 88
     13a:	b8 45       	sbci	r27, 0x58	; 88
     13c:	b8 45       	sbci	r27, 0x58	; 88
     13e:	b8 45       	sbci	r27, 0x58	; 88
     140:	b8 45       	sbci	r27, 0x58	; 88
     142:	b8 45       	sbci	r27, 0x58	; 88
     144:	b8 45       	sbci	r27, 0x58	; 88
     146:	b8 45       	sbci	r27, 0x58	; 88
     148:	b8 45       	sbci	r27, 0x58	; 88
     14a:	b8 45       	sbci	r27, 0x58	; 88
     14c:	b8 45       	sbci	r27, 0x58	; 88
     14e:	b8 45       	sbci	r27, 0x58	; 88
     150:	b8 45       	sbci	r27, 0x58	; 88
     152:	b8 45       	sbci	r27, 0x58	; 88
     154:	b8 45       	sbci	r27, 0x58	; 88
     156:	b8 45       	sbci	r27, 0x58	; 88
     158:	b8 45       	sbci	r27, 0x58	; 88
     15a:	b8 45       	sbci	r27, 0x58	; 88
     15c:	b8 45       	sbci	r27, 0x58	; 88
     15e:	b8 45       	sbci	r27, 0x58	; 88
     160:	b8 45       	sbci	r27, 0x58	; 88
     162:	b8 45       	sbci	r27, 0x58	; 88
     164:	b8 45       	sbci	r27, 0x58	; 88
     166:	b8 45       	sbci	r27, 0x58	; 88
     168:	b8 45       	sbci	r27, 0x58	; 88
     16a:	b8 45       	sbci	r27, 0x58	; 88
     16c:	b8 45       	sbci	r27, 0x58	; 88
     16e:	b8 45       	sbci	r27, 0x58	; 88
     170:	b8 45       	sbci	r27, 0x58	; 88
     172:	b8 45       	sbci	r27, 0x58	; 88
     174:	b8 45       	sbci	r27, 0x58	; 88
     176:	b8 45       	sbci	r27, 0x58	; 88
     178:	b8 45       	sbci	r27, 0x58	; 88
     17a:	b8 45       	sbci	r27, 0x58	; 88
     17c:	f6 45       	sbci	r31, 0x56	; 86
     17e:	b8 45       	sbci	r27, 0x58	; 88
     180:	b8 45       	sbci	r27, 0x58	; 88
     182:	b8 45       	sbci	r27, 0x58	; 88
     184:	b8 45       	sbci	r27, 0x58	; 88
     186:	b8 45       	sbci	r27, 0x58	; 88
     188:	b8 45       	sbci	r27, 0x58	; 88
     18a:	b8 45       	sbci	r27, 0x58	; 88
     18c:	b8 45       	sbci	r27, 0x58	; 88
     18e:	b8 45       	sbci	r27, 0x58	; 88
     190:	fa 45       	sbci	r31, 0x5A	; 90
     192:	b8 45       	sbci	r27, 0x58	; 88
     194:	b8 45       	sbci	r27, 0x58	; 88
     196:	b8 45       	sbci	r27, 0x58	; 88
     198:	b8 45       	sbci	r27, 0x58	; 88
     19a:	b8 45       	sbci	r27, 0x58	; 88
     19c:	b8 45       	sbci	r27, 0x58	; 88
     19e:	b8 45       	sbci	r27, 0x58	; 88
     1a0:	b8 45       	sbci	r27, 0x58	; 88
     1a2:	b8 45       	sbci	r27, 0x58	; 88
     1a4:	b8 45       	sbci	r27, 0x58	; 88
     1a6:	b8 45       	sbci	r27, 0x58	; 88
     1a8:	fe 45       	sbci	r31, 0x5E	; 94
     1aa:	b8 45       	sbci	r27, 0x58	; 88
     1ac:	b8 45       	sbci	r27, 0x58	; 88
     1ae:	b8 45       	sbci	r27, 0x58	; 88
     1b0:	b8 45       	sbci	r27, 0x58	; 88
     1b2:	b8 45       	sbci	r27, 0x58	; 88
     1b4:	b8 45       	sbci	r27, 0x58	; 88
     1b6:	b8 45       	sbci	r27, 0x58	; 88
     1b8:	b8 45       	sbci	r27, 0x58	; 88
     1ba:	02 46       	sbci	r16, 0x62	; 98

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	d0 e1       	ldi	r29, 0x10	; 16
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
     1c8:	11 e0       	ldi	r17, 0x01	; 1
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	ee e1       	ldi	r30, 0x1E	; 30
     1d0:	ff ea       	ldi	r31, 0xAF	; 175
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	a2 35       	cpi	r26, 0x52	; 82
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	1c e0       	ldi	r17, 0x0C	; 12
     1e4:	a2 e5       	ldi	r26, 0x52	; 82
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	ae 35       	cpi	r26, 0x5E	; 94
     1ee:	b1 07       	cpc	r27, r17
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
     1f6:	0c 94 8d 57 	jmp	0xaf1a	; 0xaf1a <_exit>

000001fa <__bad_interrupt>:
     1fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fe <main>:
//The platform specific entry point. This is the place where the program gets executed. 
//Every time the system gets compiled, there should be at most one such entry point. 


int main()
{
     1fe:	af 92       	push	r10
     200:	bf 92       	push	r11
     202:	cf 92       	push	r12
     204:	df 92       	push	r13
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
	 
    //micaz specific initilizations
    //hardware ini
    LITE_SET_PIN_DIRECTIONS();
     20c:	0e 94 49 05 	call	0xa92	; 0xa92 <LITE_SET_PIN_DIRECTIONS>
    
    //sensors
    adcdriver_init_adc();
     210:	0e 94 49 1c 	call	0x3892	; 0x3892 <adcdriver_init_adc>

    //kernels 
    initScheduling();
     214:	0e 94 56 16 	call	0x2cac	; 0x2cac <initScheduling>
    thread_init();
     218:	0e 94 f6 19 	call	0x33ec	; 0x33ec <thread_init>
    
    //printing
    initUSART();
     21c:	0e 94 37 06 	call	0xc6e	; 0xc6e <initUSART>
    
    
 // printfstr("System booted!\n");

    //for the following, read from else section, which defaults to the 0xff as the MicaZ is first initied by reprogramming
    if (node_readinitstatus() == MICAZCONFIGMESSAGERECEIVED)
     220:	0e 94 3a 02 	call	0x474	; 0x474 <node_readinitstatus>
     224:	8a 30       	cpi	r24, 0x0A	; 10
     226:	09 f4       	brne	.+2      	; 0x22a <main+0x2c>
     228:	84 c0       	rjmp	.+264    	; 0x332 <main+0x134>
        Leds_greenToggle();
        Leds_yellowToggle();
        // node_setinitstatus(MICAZ_INIT_READY); 
        node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
    }
    else if (node_readinitstatus() == MICAZ_INIT_READY)
     22a:	0e 94 3a 02 	call	0x474	; 0x474 <node_readinitstatus>
     22e:	8b 30       	cpi	r24, 0x0B	; 11
     230:	09 f4       	brne	.+2      	; 0x234 <main+0x36>
     232:	b7 c0       	rjmp	.+366    	; 0x3a2 <main+0x1a4>
        /* The following is for debugging the kernel , where no reprogramming overboard is used 
         */
        
		if (JTAG_TOGGLE == 1)
		{
        Leds_redToggle();
     234:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <Leds_redToggle>
        Leds_greenToggle();
     238:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <Leds_greenToggle>
        Leds_yellowToggle();
     23c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <Leds_yellowToggle>
        mystrncpy(networkid, "sn01\0", 5);
     240:	84 e3       	ldi	r24, 0x34	; 52
     242:	94 e0       	ldi	r25, 0x04	; 4
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	71 e0       	ldi	r23, 0x01	; 1
     248:	45 e0       	ldi	r20, 0x05	; 5
     24a:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
        mystrncpy(filenameid, "nodeK\0", 6);
     24e:	81 e2       	ldi	r24, 0x21	; 33
     250:	94 e0       	ldi	r25, 0x04	; 4
     252:	66 e0       	ldi	r22, 0x06	; 6
     254:	71 e0       	ldi	r23, 0x01	; 1
     256:	46 e0       	ldi	r20, 0x06	; 6
     258:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>


        CURRENT_NODE_ID = 1;
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	90 93 33 04 	sts	0x0433, r25
     264:	80 93 32 04 	sts	0x0432, r24
        nodeid = CURRENT_NODE_ID;
     268:	90 93 53 01 	sts	0x0153, r25
     26c:	80 93 52 01 	sts	0x0152, r24
        srand(nodeid);
     270:	0e 94 48 57 	call	0xae90	; 0xae90 <srand>
        formatSystem();
     274:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <formatSystem>
        buildRootNode();
     278:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <buildRootNode>
        genericwriteBytes(NETWORKNAMEOFFSET, 16, networkid);
     27c:	80 e2       	ldi	r24, 0x20	; 32
     27e:	9c e0       	ldi	r25, 0x0C	; 12
     280:	60 e1       	ldi	r22, 0x10	; 16
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	44 e3       	ldi	r20, 0x34	; 52
     286:	54 e0       	ldi	r21, 0x04	; 4
     288:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <genericwriteBytes>
        genericwriteBytes(NODEFILENAMEOFFSET, 16, filenameid);
     28c:	85 e3       	ldi	r24, 0x35	; 53
     28e:	9c e0       	ldi	r25, 0x0C	; 12
     290:	60 e1       	ldi	r22, 0x10	; 16
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	41 e2       	ldi	r20, 0x21	; 33
     296:	54 e0       	ldi	r21, 0x04	; 4
     298:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <genericwriteBytes>
        node_writenodeid(nodeid);
     29c:	80 91 52 01 	lds	r24, 0x0152
     2a0:	90 91 53 01 	lds	r25, 0x0153
     2a4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <node_writenodeid>
        node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
     2a8:	8a e0       	ldi	r24, 0x0A	; 10
     2aa:	0e 94 45 02 	call	0x48a	; 0x48a <node_setinitstatus>
        node_setradiochannel(21);
     2ae:	85 e1       	ldi	r24, 0x15	; 21
     2b0:	0e 94 3f 02 	call	0x47e	; 0x47e <node_setradiochannel>
        Leds_redToggle();
     2b4:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <Leds_redToggle>
        Leds_greenToggle();
     2b8:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <Leds_greenToggle>
        Leds_yellowToggle();
     2bc:	0e 94 c0 1c 	call	0x3980	; 0x3980 <Leds_yellowToggle>

   
  

    //timer and radio 
    GenericTimerInit();
     2c0:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <GenericTimerInit>
    //for global timing purpose use
    GenericTimingStart(); 
     2c4:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <GenericTimingStart>
     
    AMStandard_Control_init();
     2c8:	0e 94 45 09 	call	0x128a	; 0x128a <AMStandard_Control_init>
    AMStandard_Control_start();
     2cc:	0e 94 40 09 	call	0x1280	; 0x1280 <AMStandard_Control_start>
    
    initRadioHandle();
     2d0:	0e 94 a3 09 	call	0x1346	; 0x1346 <initRadioHandle>
    
    InitShell();
     2d4:	0e 94 c4 3c 	call	0x7988	; 0x7988 <InitShell>
    
    {
        uint8_t currentchannel;
         
         
        currentchannel = node_getradiochannel();
     2d8:	0e 94 35 02 	call	0x46a	; 0x46a <node_getradiochannel>
#ifdef RADIO_CC2420
				
        cc2420controlm_CC2420Control_TuneChannel(currentchannel);
     2dc:	0e 94 c9 0b 	call	0x1792	; 0x1792 <cc2420controlm_CC2420Control_TuneChannel>
       
#endif
#ifdef RADIO_CC2420
        cc2420controlm_CC2420Control_TunePower(31);
     2e0:	8f e1       	ldi	r24, 0x1F	; 31
     2e2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <cc2420controlm_CC2420Control_TunePower>
//    

    //threadsequencelogging
    //eeprom_chunk_init();

    create_thread(ShellThread, (uint16_t *) shellbuffer,
     2e6:	80 e2       	ldi	r24, 0x20	; 32
     2e8:	96 e4       	ldi	r25, 0x46	; 70
     2ea:	60 e9       	ldi	r22, 0x90	; 144
     2ec:	77 e0       	ldi	r23, 0x07	; 7
     2ee:	4e e8       	ldi	r20, 0x8E	; 142
     2f0:	58 e0       	ldi	r21, 0x08	; 8
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	0f e0       	ldi	r16, 0x0F	; 15
     2f8:	fd e0       	ldi	r31, 0x0D	; 13
     2fa:	ef 2e       	mov	r14, r31
     2fc:	f1 e0       	ldi	r31, 0x01	; 1
     2fe:	ff 2e       	mov	r15, r31
     300:	cc 24       	eor	r12, r12
     302:	dd 24       	eor	r13, r13
     304:	aa 24       	eor	r10, r10
     306:	bb 24       	eor	r11, r11
     308:	0e 94 31 19 	call	0x3262	; 0x3262 <create_thread>

    //trace program must be thread 1 to enable the tracing functionality. 
    //create_thread(tracemain, (uint16_t *) tracebuffer,
      //           STACK_TOP(tracebuffer), 0, 15, "trace", 0, 0);
    
	  create_thread(blink, (uint16_t *) blinkbuffer,
     30c:	8d e0       	ldi	r24, 0x0D	; 13
     30e:	96 e5       	ldi	r25, 0x56	; 86
     310:	60 ec       	ldi	r22, 0xC0	; 192
     312:	7b e0       	ldi	r23, 0x0B	; 11
     314:	44 e5       	ldi	r20, 0x54	; 84
     316:	5c e0       	ldi	r21, 0x0C	; 12
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	e6 e1       	ldi	r30, 0x16	; 22
     31e:	ee 2e       	mov	r14, r30
     320:	e1 e0       	ldi	r30, 0x01	; 1
     322:	fe 2e       	mov	r15, r30
     324:	0e 94 31 19 	call	0x3262	; 0x3262 <create_thread>
    // sbi(MCUCR, SE);
   
    //GenericTimerStart(15, TIMER_REPEAT, 100); 


    _avr_enable_interrupt();
     328:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_avr_enable_interrupt>

    while (1)
    {
        runNextTask();
     32c:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <runNextTask>
     330:	fd cf       	rjmp	.-6      	; 0x32c <main+0x12e>

    //for the following, read from else section, which defaults to the 0xff as the MicaZ is first initied by reprogramming
    if (node_readinitstatus() == MICAZCONFIGMESSAGERECEIVED)
    {
        //current_node_id is expected to be platform independent variable 
        CURRENT_NODE_ID = node_readnodeid();
     332:	0e 94 4b 02 	call	0x496	; 0x496 <node_readnodeid>
     336:	90 93 33 04 	sts	0x0433, r25
     33a:	80 93 32 04 	sts	0x0432, r24
        srand(CURRENT_NODE_ID);
     33e:	0e 94 48 57 	call	0xae90	; 0xae90 <srand>
        genericreadBytes(NETWORKNAMEOFFSET, 16, networkid);
     342:	80 e2       	ldi	r24, 0x20	; 32
     344:	9c e0       	ldi	r25, 0x0C	; 12
     346:	60 e1       	ldi	r22, 0x10	; 16
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	44 e3       	ldi	r20, 0x34	; 52
     34c:	54 e0       	ldi	r21, 0x04	; 4
     34e:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <genericreadBytes>
        genericreadBytes(NODEFILENAMEOFFSET, 16, filenameid);
     352:	85 e3       	ldi	r24, 0x35	; 53
     354:	9c e0       	ldi	r25, 0x0C	; 12
     356:	60 e1       	ldi	r22, 0x10	; 16
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	41 e2       	ldi	r20, 0x21	; 33
     35c:	54 e0       	ldi	r21, 0x04	; 4
     35e:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <genericreadBytes>
        nodeid = CURRENT_NODE_ID;
     362:	80 91 32 04 	lds	r24, 0x0432
     366:	90 91 33 04 	lds	r25, 0x0433
     36a:	90 93 53 01 	sts	0x0153, r25
     36e:	80 93 52 01 	sts	0x0152, r24
        networkid[16] = '\0';
     372:	10 92 44 04 	sts	0x0444, r1
        filenameid[16] = '\0';
     376:	10 92 31 04 	sts	0x0431, r1
        Leds_redToggle();
     37a:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <Leds_redToggle>
        Leds_greenToggle();
     37e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <Leds_greenToggle>
        Leds_yellowToggle();
     382:	0e 94 c0 1c 	call	0x3980	; 0x3980 <Leds_yellowToggle>
        formatSystem();
     386:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <formatSystem>
        buildRootNode();
     38a:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <buildRootNode>
        Leds_redToggle();
     38e:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <Leds_redToggle>
        Leds_greenToggle();
     392:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <Leds_greenToggle>
        Leds_yellowToggle();
     396:	0e 94 c0 1c 	call	0x3980	; 0x3980 <Leds_yellowToggle>
        // node_setinitstatus(MICAZ_INIT_READY); 
        node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
     39a:	8a e0       	ldi	r24, 0x0A	; 10
     39c:	0e 94 45 02 	call	0x48a	; 0x48a <node_setinitstatus>
     3a0:	8f cf       	rjmp	.-226    	; 0x2c0 <main+0xc2>
    }
    else if (node_readinitstatus() == MICAZ_INIT_READY)
    {
        CURRENT_NODE_ID = node_readnodeid();
     3a2:	0e 94 4b 02 	call	0x496	; 0x496 <node_readnodeid>
     3a6:	90 93 33 04 	sts	0x0433, r25
     3aa:	80 93 32 04 	sts	0x0432, r24
        srand(CURRENT_NODE_ID);
     3ae:	0e 94 48 57 	call	0xae90	; 0xae90 <srand>
        genericreadBytes(NETWORKNAMEOFFSET, 16, networkid);
     3b2:	80 e2       	ldi	r24, 0x20	; 32
     3b4:	9c e0       	ldi	r25, 0x0C	; 12
     3b6:	60 e1       	ldi	r22, 0x10	; 16
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	44 e3       	ldi	r20, 0x34	; 52
     3bc:	54 e0       	ldi	r21, 0x04	; 4
     3be:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <genericreadBytes>
        genericreadBytes(NODEFILENAMEOFFSET, 16, filenameid);
     3c2:	85 e3       	ldi	r24, 0x35	; 53
     3c4:	9c e0       	ldi	r25, 0x0C	; 12
     3c6:	60 e1       	ldi	r22, 0x10	; 16
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	41 e2       	ldi	r20, 0x21	; 33
     3cc:	54 e0       	ldi	r21, 0x04	; 4
     3ce:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <genericreadBytes>
        nodeid = CURRENT_NODE_ID;
     3d2:	80 91 32 04 	lds	r24, 0x0432
     3d6:	90 91 33 04 	lds	r25, 0x0433
     3da:	90 93 53 01 	sts	0x0153, r25
     3de:	80 93 52 01 	sts	0x0152, r24
        networkid[16] = '\0';
     3e2:	10 92 44 04 	sts	0x0444, r1
        filenameid[16] = '\0';
     3e6:	10 92 31 04 	sts	0x0431, r1
        Leds_redToggle();
     3ea:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <Leds_redToggle>
        Leds_greenToggle();
     3ee:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <Leds_greenToggle>
        Leds_yellowToggle();
     3f2:	0e 94 c0 1c 	call	0x3980	; 0x3980 <Leds_yellowToggle>
        //formatSystem();
        //buildRootNode();
        //buildDeviceDirectory();
        readVectorFlashFromExternalStorage();
     3f6:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <readVectorFlashFromExternalStorage>
        readVectorNodeFromExternalStorage();
     3fa:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <readVectorNodeFromExternalStorage>
        Leds_redToggle();
     3fe:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <Leds_redToggle>
        Leds_greenToggle();
     402:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <Leds_greenToggle>
        Leds_yellowToggle();
     406:	0e 94 c0 1c 	call	0x3980	; 0x3980 <Leds_yellowToggle>
     40a:	5a cf       	rjmp	.-332    	; 0x2c0 <main+0xc2>

0000040c <initCommandReceived>:

//This function receives init command in MicaZ installation task, and sets up the node status for reboot, so that the fiel system will
//be reformatted 

void initCommandReceived(uint8_t * receivebuffer)
{
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	8c 01       	movw	r16, r24
    uint8_t i;

    genericwriteBytes(NETWORKNAMEOFFSET, 16, &receivebuffer[0]);
     412:	80 e2       	ldi	r24, 0x20	; 32
     414:	9c e0       	ldi	r25, 0x0C	; 12
     416:	60 e1       	ldi	r22, 0x10	; 16
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	a8 01       	movw	r20, r16
     41c:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <genericwriteBytes>
    genericwriteBytes(NODEFILENAMEOFFSET, 15, &receivebuffer[16]);
     420:	a8 01       	movw	r20, r16
     422:	40 5f       	subi	r20, 0xF0	; 240
     424:	5f 4f       	sbci	r21, 0xFF	; 255
     426:	85 e3       	ldi	r24, 0x35	; 53
     428:	9c e0       	ldi	r25, 0x0C	; 12
     42a:	6f e0       	ldi	r22, 0x0F	; 15
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <genericwriteBytes>
    node_setradiochannel(receivebuffer[31]);
     432:	f8 01       	movw	r30, r16
     434:	87 8d       	ldd	r24, Z+31	; 0x1f
     436:	0e 94 3f 02 	call	0x47e	; 0x47e <node_setradiochannel>
    node_writenodeid(receivebuffer[32]);
     43a:	f8 01       	movw	r30, r16
     43c:	80 a1       	ldd	r24, Z+32	; 0x20
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 50 02 	call	0x4a0	; 0x4a0 <node_writenodeid>
    node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
     444:	8a e0       	ldi	r24, 0x0A	; 10
     446:	0e 94 45 02 	call	0x48a	; 0x48a <node_setinitstatus>
     44a:	00 e0       	ldi	r16, 0x00	; 0
    for (i = 0; i < 32; i++)
    {
        printfstr('\0');
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <printfstr>
    genericwriteBytes(NETWORKNAMEOFFSET, 16, &receivebuffer[0]);
    genericwriteBytes(NODEFILENAMEOFFSET, 15, &receivebuffer[16]);
    node_setradiochannel(receivebuffer[31]);
    node_writenodeid(receivebuffer[32]);
    node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
    for (i = 0; i < 32; i++)
     454:	0f 5f       	subi	r16, 0xFF	; 255
     456:	00 32       	cpi	r16, 0x20	; 32
     458:	c9 f7       	brne	.-14     	; 0x44c <initCommandReceived+0x40>
    {
        printfstr('\0');
    }
    avr_resetNode();
     45a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <avr_resetNode>
}
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	08 95       	ret

00000464 <node_readnodestring>:


char *node_readnodestring()
{
  return filenameid; 	
}
     464:	81 e2       	ldi	r24, 0x21	; 33
     466:	94 e0       	ldi	r25, 0x04	; 4
     468:	08 95       	ret

0000046a <node_getradiochannel>:
}

//-------------------------------------------------------------------------
uint8_t node_getradiochannel()
{
    return read8uint(NODECHANNELOFFSET);
     46a:	84 e5       	ldi	r24, 0x54	; 84
     46c:	9c e0       	ldi	r25, 0x0C	; 12
     46e:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <read8uint>
}
     472:	08 95       	ret

00000474 <node_readinitstatus>:
}

//-------------------------------------------------------------------------
uint8_t node_readinitstatus()
{
    return read8uint(NODESTATUSOFFSET);
     474:	82 e5       	ldi	r24, 0x52	; 82
     476:	9c e0       	ldi	r25, 0x0C	; 12
     478:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <read8uint>
}
     47c:	08 95       	ret

0000047e <node_setradiochannel>:

//-------------------------------------------------------------------------
void node_setradiochannel(uint8_t channel)
{
     47e:	68 2f       	mov	r22, r24
    write8uint(NODECHANNELOFFSET, channel);
     480:	84 e5       	ldi	r24, 0x54	; 84
     482:	9c e0       	ldi	r25, 0x0C	; 12
     484:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <write8uint>
}
     488:	08 95       	ret

0000048a <node_setinitstatus>:
    return read16uint(NODEIDOFFSET);
}

//-------------------------------------------------------------------------
void node_setinitstatus(uint8_t status)
{
     48a:	68 2f       	mov	r22, r24
    write8uint(NODESTATUSOFFSET, status);
     48c:	82 e5       	ldi	r24, 0x52	; 82
     48e:	9c e0       	ldi	r25, 0x0C	; 12
     490:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <write8uint>
}
     494:	08 95       	ret

00000496 <node_readnodeid>:
}

//-------------------------------------------------------------------------
uint16_t node_readnodeid()
{
    return read16uint(NODEIDOFFSET);
     496:	8e e4       	ldi	r24, 0x4E	; 78
     498:	9c e0       	ldi	r25, 0x0C	; 12
     49a:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <read16uint>
}
     49e:	08 95       	ret

000004a0 <node_writenodeid>:
  return filenameid; 	
}


void node_writenodeid(uint16_t nodeid)
{
     4a0:	bc 01       	movw	r22, r24
    write16uint(NODEIDOFFSET, nodeid);
     4a2:	8e e4       	ldi	r24, 0x4E	; 78
     4a4:	9c e0       	ldi	r25, 0x0C	; 12
     4a6:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <write16uint>
}
     4aa:	08 95       	ret

000004ac <wait_cycle>:
#include "avrhardware.h"
void wait_cycle()
{
    asm volatile ("nop");
     4ac:	00 00       	nop
    asm volatile ("nop");
     4ae:	00 00       	nop
}
     4b0:	08 95       	ret

000004b2 <_atomic_sleep>:

//-------------------------------------------------------------------------
inline void _atomic_sleep()
{
    /* Atomically enable interrupts and sleep */
    sei();                      // Make sure interrupts are on, so we can wake up!
     4b2:	78 94       	sei
    asm volatile ("sleep");
     4b4:	88 95       	sleep
#include "avrhardware.h"
void wait_cycle()
{
    asm volatile ("nop");
     4b6:	00 00       	nop
    asm volatile ("nop");
     4b8:	00 00       	nop
    /* Atomically enable interrupts and sleep */
    sei();                      // Make sure interrupts are on, so we can wake up!
    asm volatile ("sleep");

    wait_cycle();
}
     4ba:	08 95       	ret

000004bc <_avr_sleep>:

//-------------------------------------------------------------------------
inline void _avr_sleep()
{
    asm volatile ("sleep");
     4bc:	88 95       	sleep
}
     4be:	08 95       	ret

000004c0 <_avr_enable_interrupt>:

//-------------------------------------------------------------------------
inline void _avr_enable_interrupt()
{
    sei();
     4c0:	78 94       	sei
}
     4c2:	08 95       	ret

000004c4 <_avr_disable_interrupt>:

//-------------------------------------------------------------------------
inline void _avr_disable_interrupt()
{
    cli();
     4c4:	f8 94       	cli
}
     4c6:	08 95       	ret

000004c8 <_atomic_start_avr>:

//-------------------------------------------------------------------------
_atomic_t _atomic_start_avr(void)
{
    _atomic_t result = inp(SREG);
     4c8:	8f b7       	in	r24, 0x3f	; 63

    cli();
     4ca:	f8 94       	cli
    return result;
}
     4cc:	08 95       	ret

000004ce <_atomic_end_avr>:

//-------------------------------------------------------------------------
void _atomic_end_avr(_atomic_t oldSreg)
{
    outp(oldSreg, SREG);
     4ce:	8f bf       	out	0x3f, r24	; 63
}
     4d0:	08 95       	ret

000004d2 <avr_resetNode>:
{
  //  asm volatile ("ldi	r30, 0x00"::);
  //  asm volatile ("ldi	r31, 0x00"::);
  //  asm volatile ("icall"::);
  
    __asm__ __volatile__("ldi	r30, 0x98" ::); 
     4d2:	e8 e9       	ldi	r30, 0x98	; 152
    __asm__ __volatile__("ldi	r31, 0xEA" ::);
     4d4:	fa ee       	ldi	r31, 0xEA	; 234
    __asm__ __volatile__("icall" ::);
     4d6:	09 95       	icall
}
     4d8:	08 95       	ret

000004da <LITE_wait_250ns>:



void inline LITE_wait_250ns()
{
    asm volatile ("nop"::);
     4da:	00 00       	nop
    asm volatile ("nop"::);
     4dc:	00 00       	nop
}
     4de:	08 95       	ret

000004e0 <LITE_uwait>:

//-------------------------------------------------------------------------
void inline LITE_uwait(int u_sec)
{
    while (u_sec > 0)
     4e0:	18 16       	cp	r1, r24
     4e2:	19 06       	cpc	r1, r25
     4e4:	64 f4       	brge	.+24     	; 0x4fe <LITE_uwait+0x1e>
	...
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);

        u_sec--;
     4f6:	01 97       	sbiw	r24, 0x01	; 1
}

//-------------------------------------------------------------------------
void inline LITE_uwait(int u_sec)
{
    while (u_sec > 0)
     4f8:	18 16       	cp	r1, r24
     4fa:	19 06       	cpc	r1, r25
     4fc:	a4 f3       	brlt	.-24     	; 0x4e6 <LITE_uwait+0x6>
     4fe:	08 95       	ret

00000500 <LITE_SET_RED_LED_PIN>:
        u_sec--;
    }
}

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
     500:	da 9a       	sbi	0x1b, 2	; 27
     502:	08 95       	ret

00000504 <LITE_CLR_RED_LED_PIN>:
     504:	da 98       	cbi	0x1b, 2	; 27
     506:	08 95       	ret

00000508 <LITE_READ_RED_LED_PIN>:
     508:	29 b3       	in	r18, 0x19	; 25
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	36 95       	lsr	r19
     50e:	27 95       	ror	r18
     510:	36 95       	lsr	r19
     512:	27 95       	ror	r18
     514:	21 70       	andi	r18, 0x01	; 1
     516:	30 70       	andi	r19, 0x00	; 0
     518:	c9 01       	movw	r24, r18
     51a:	08 95       	ret

0000051c <LITE_MAKE_RED_LED_OUTPUT>:
     51c:	d2 9a       	sbi	0x1a, 2	; 26
     51e:	08 95       	ret

00000520 <LITE_MAKE_RED_LED_INPUT>:
     520:	d2 98       	cbi	0x1a, 2	; 26
     522:	08 95       	ret

00000524 <LITE_SET_GREEN_LED_PIN>:
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
     524:	d9 9a       	sbi	0x1b, 1	; 27
     526:	08 95       	ret

00000528 <LITE_CLR_GREEN_LED_PIN>:
     528:	d9 98       	cbi	0x1b, 1	; 27
     52a:	08 95       	ret

0000052c <LITE_READ_GREEN_LED_PIN>:
     52c:	29 b3       	in	r18, 0x19	; 25
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	36 95       	lsr	r19
     532:	27 95       	ror	r18
     534:	21 70       	andi	r18, 0x01	; 1
     536:	30 70       	andi	r19, 0x00	; 0
     538:	c9 01       	movw	r24, r18
     53a:	08 95       	ret

0000053c <LITE_MAKE_GREEN_LED_OUTPUT>:
     53c:	d1 9a       	sbi	0x1a, 1	; 26
     53e:	08 95       	ret

00000540 <LITE_MAKE_GREEN_LED_INPUT>:
     540:	d1 98       	cbi	0x1a, 1	; 26
     542:	08 95       	ret

00000544 <LITE_SET_YELLOW_LED_PIN>:
LITE_ASSIGN_PIN(YELLOW_LED, A, 0);
     544:	d8 9a       	sbi	0x1b, 0	; 27
     546:	08 95       	ret

00000548 <LITE_CLR_YELLOW_LED_PIN>:
     548:	d8 98       	cbi	0x1b, 0	; 27
     54a:	08 95       	ret

0000054c <LITE_READ_YELLOW_LED_PIN>:
     54c:	29 b3       	in	r18, 0x19	; 25
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	21 70       	andi	r18, 0x01	; 1
     552:	30 70       	andi	r19, 0x00	; 0
     554:	c9 01       	movw	r24, r18
     556:	08 95       	ret

00000558 <LITE_MAKE_YELLOW_LED_OUTPUT>:
     558:	d0 9a       	sbi	0x1a, 0	; 26
     55a:	08 95       	ret

0000055c <LITE_MAKE_YELLOW_LED_INPUT>:
     55c:	d0 98       	cbi	0x1a, 0	; 26
     55e:	08 95       	ret

00000560 <LITE_SET_SERIAL_ID_PIN>:
LITE_ASSIGN_PIN(SERIAL_ID, A, 4);
     560:	dc 9a       	sbi	0x1b, 4	; 27
     562:	08 95       	ret

00000564 <LITE_CLR_SERIAL_ID_PIN>:
     564:	dc 98       	cbi	0x1b, 4	; 27
     566:	08 95       	ret

00000568 <LITE_READ_SERIAL_ID_PIN>:
     568:	29 b3       	in	r18, 0x19	; 25
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	32 95       	swap	r19
     56e:	22 95       	swap	r18
     570:	2f 70       	andi	r18, 0x0F	; 15
     572:	23 27       	eor	r18, r19
     574:	3f 70       	andi	r19, 0x0F	; 15
     576:	23 27       	eor	r18, r19
     578:	21 70       	andi	r18, 0x01	; 1
     57a:	30 70       	andi	r19, 0x00	; 0
     57c:	c9 01       	movw	r24, r18
     57e:	08 95       	ret

00000580 <LITE_MAKE_SERIAL_ID_OUTPUT>:
     580:	d4 9a       	sbi	0x1a, 4	; 26
     582:	08 95       	ret

00000584 <LITE_MAKE_SERIAL_ID_INPUT>:
     584:	d4 98       	cbi	0x1a, 4	; 26
     586:	08 95       	ret

00000588 <LITE_SET_BAT_MON_PIN>:
LITE_ASSIGN_PIN(BAT_MON, A, 5);
     588:	dd 9a       	sbi	0x1b, 5	; 27
     58a:	08 95       	ret

0000058c <LITE_CLR_BAT_MON_PIN>:
     58c:	dd 98       	cbi	0x1b, 5	; 27
     58e:	08 95       	ret

00000590 <LITE_READ_BAT_MON_PIN>:
     590:	29 b3       	in	r18, 0x19	; 25
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	36 95       	lsr	r19
     596:	27 95       	ror	r18
     598:	32 95       	swap	r19
     59a:	22 95       	swap	r18
     59c:	2f 70       	andi	r18, 0x0F	; 15
     59e:	23 27       	eor	r18, r19
     5a0:	3f 70       	andi	r19, 0x0F	; 15
     5a2:	23 27       	eor	r18, r19
     5a4:	21 70       	andi	r18, 0x01	; 1
     5a6:	30 70       	andi	r19, 0x00	; 0
     5a8:	c9 01       	movw	r24, r18
     5aa:	08 95       	ret

000005ac <LITE_MAKE_BAT_MON_OUTPUT>:
     5ac:	d5 9a       	sbi	0x1a, 5	; 26
     5ae:	08 95       	ret

000005b0 <LITE_MAKE_BAT_MON_INPUT>:
     5b0:	d5 98       	cbi	0x1a, 5	; 26
     5b2:	08 95       	ret

000005b4 <LITE_SET_THERM_PWR_PIN>:
LITE_ASSIGN_PIN(THERM_PWR, A, 7);
     5b4:	df 9a       	sbi	0x1b, 7	; 27
     5b6:	08 95       	ret

000005b8 <LITE_CLR_THERM_PWR_PIN>:
     5b8:	df 98       	cbi	0x1b, 7	; 27
     5ba:	08 95       	ret

000005bc <LITE_READ_THERM_PWR_PIN>:
     5bc:	29 b3       	in	r18, 0x19	; 25
     5be:	33 27       	eor	r19, r19
     5c0:	27 fd       	sbrc	r18, 7
     5c2:	30 95       	com	r19
     5c4:	22 27       	eor	r18, r18
     5c6:	33 0f       	add	r19, r19
     5c8:	22 1f       	adc	r18, r18
     5ca:	33 27       	eor	r19, r19
     5cc:	c9 01       	movw	r24, r18
     5ce:	08 95       	ret

000005d0 <LITE_MAKE_THERM_PWR_OUTPUT>:
     5d0:	d7 9a       	sbi	0x1a, 7	; 26
     5d2:	08 95       	ret

000005d4 <LITE_MAKE_THERM_PWR_INPUT>:
     5d4:	d7 98       	cbi	0x1a, 7	; 26
     5d6:	08 95       	ret

000005d8 <LITE_SET_FLASH_SELECT_PIN>:


// Flash assignments
LITE_ASSIGN_PIN(FLASH_SELECT, A, 3);
     5d8:	db 9a       	sbi	0x1b, 3	; 27
     5da:	08 95       	ret

000005dc <LITE_CLR_FLASH_SELECT_PIN>:
     5dc:	db 98       	cbi	0x1b, 3	; 27
     5de:	08 95       	ret

000005e0 <LITE_READ_FLASH_SELECT_PIN>:
     5e0:	29 b3       	in	r18, 0x19	; 25
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	36 95       	lsr	r19
     5e6:	27 95       	ror	r18
     5e8:	36 95       	lsr	r19
     5ea:	27 95       	ror	r18
     5ec:	36 95       	lsr	r19
     5ee:	27 95       	ror	r18
     5f0:	21 70       	andi	r18, 0x01	; 1
     5f2:	30 70       	andi	r19, 0x00	; 0
     5f4:	c9 01       	movw	r24, r18
     5f6:	08 95       	ret

000005f8 <LITE_MAKE_FLASH_SELECT_OUTPUT>:
     5f8:	d3 9a       	sbi	0x1a, 3	; 26
     5fa:	08 95       	ret

000005fc <LITE_MAKE_FLASH_SELECT_INPUT>:
     5fc:	d3 98       	cbi	0x1a, 3	; 26
     5fe:	08 95       	ret

00000600 <LITE_SET_FLASH_CLK_PIN>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
     600:	95 9a       	sbi	0x12, 5	; 18
     602:	08 95       	ret

00000604 <LITE_CLR_FLASH_CLK_PIN>:
     604:	95 98       	cbi	0x12, 5	; 18
     606:	08 95       	ret

00000608 <LITE_READ_FLASH_CLK_PIN>:
     608:	20 b3       	in	r18, 0x10	; 16
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	36 95       	lsr	r19
     60e:	27 95       	ror	r18
     610:	32 95       	swap	r19
     612:	22 95       	swap	r18
     614:	2f 70       	andi	r18, 0x0F	; 15
     616:	23 27       	eor	r18, r19
     618:	3f 70       	andi	r19, 0x0F	; 15
     61a:	23 27       	eor	r18, r19
     61c:	21 70       	andi	r18, 0x01	; 1
     61e:	30 70       	andi	r19, 0x00	; 0
     620:	c9 01       	movw	r24, r18
     622:	08 95       	ret

00000624 <LITE_MAKE_FLASH_CLK_OUTPUT>:
     624:	8d 9a       	sbi	0x11, 5	; 17
     626:	08 95       	ret

00000628 <LITE_MAKE_FLASH_CLK_INPUT>:
     628:	8d 98       	cbi	0x11, 5	; 17
     62a:	08 95       	ret

0000062c <LITE_SET_FLASH_OUT_PIN>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
     62c:	93 9a       	sbi	0x12, 3	; 18
     62e:	08 95       	ret

00000630 <LITE_CLR_FLASH_OUT_PIN>:
     630:	93 98       	cbi	0x12, 3	; 18
     632:	08 95       	ret

00000634 <LITE_READ_FLASH_OUT_PIN>:
     634:	20 b3       	in	r18, 0x10	; 16
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	36 95       	lsr	r19
     63a:	27 95       	ror	r18
     63c:	36 95       	lsr	r19
     63e:	27 95       	ror	r18
     640:	36 95       	lsr	r19
     642:	27 95       	ror	r18
     644:	21 70       	andi	r18, 0x01	; 1
     646:	30 70       	andi	r19, 0x00	; 0
     648:	c9 01       	movw	r24, r18
     64a:	08 95       	ret

0000064c <LITE_MAKE_FLASH_OUT_OUTPUT>:
     64c:	8b 9a       	sbi	0x11, 3	; 17
     64e:	08 95       	ret

00000650 <LITE_MAKE_FLASH_OUT_INPUT>:
     650:	8b 98       	cbi	0x11, 3	; 17
     652:	08 95       	ret

00000654 <LITE_SET_FLASH_IN_PIN>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
     654:	92 9a       	sbi	0x12, 2	; 18
     656:	08 95       	ret

00000658 <LITE_CLR_FLASH_IN_PIN>:
     658:	92 98       	cbi	0x12, 2	; 18
     65a:	08 95       	ret

0000065c <LITE_READ_FLASH_IN_PIN>:
     65c:	20 b3       	in	r18, 0x10	; 16
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	36 95       	lsr	r19
     662:	27 95       	ror	r18
     664:	36 95       	lsr	r19
     666:	27 95       	ror	r18
     668:	21 70       	andi	r18, 0x01	; 1
     66a:	30 70       	andi	r19, 0x00	; 0
     66c:	c9 01       	movw	r24, r18
     66e:	08 95       	ret

00000670 <LITE_MAKE_FLASH_IN_OUTPUT>:
     670:	8a 9a       	sbi	0x11, 2	; 17
     672:	08 95       	ret

00000674 <LITE_MAKE_FLASH_IN_INPUT>:
     674:	8a 98       	cbi	0x11, 2	; 17
     676:	08 95       	ret

00000678 <LITE_SET_INT0_PIN>:
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
     678:	1c 9a       	sbi	0x03, 4	; 3
     67a:	08 95       	ret

0000067c <LITE_CLR_INT0_PIN>:
     67c:	1c 98       	cbi	0x03, 4	; 3
     67e:	08 95       	ret

00000680 <LITE_READ_INT0_PIN>:
     680:	21 b1       	in	r18, 0x01	; 1
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	32 95       	swap	r19
     686:	22 95       	swap	r18
     688:	2f 70       	andi	r18, 0x0F	; 15
     68a:	23 27       	eor	r18, r19
     68c:	3f 70       	andi	r19, 0x0F	; 15
     68e:	23 27       	eor	r18, r19
     690:	21 70       	andi	r18, 0x01	; 1
     692:	30 70       	andi	r19, 0x00	; 0
     694:	c9 01       	movw	r24, r18
     696:	08 95       	ret

00000698 <LITE_MAKE_INT0_OUTPUT>:
     698:	14 9a       	sbi	0x02, 4	; 2
     69a:	08 95       	ret

0000069c <LITE_MAKE_INT0_INPUT>:
     69c:	14 98       	cbi	0x02, 4	; 2
     69e:	08 95       	ret

000006a0 <LITE_SET_INT1_PIN>:
LITE_ASSIGN_PIN(INT1, E, 5);
     6a0:	1d 9a       	sbi	0x03, 5	; 3
     6a2:	08 95       	ret

000006a4 <LITE_CLR_INT1_PIN>:
     6a4:	1d 98       	cbi	0x03, 5	; 3
     6a6:	08 95       	ret

000006a8 <LITE_READ_INT1_PIN>:
     6a8:	21 b1       	in	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	36 95       	lsr	r19
     6ae:	27 95       	ror	r18
     6b0:	32 95       	swap	r19
     6b2:	22 95       	swap	r18
     6b4:	2f 70       	andi	r18, 0x0F	; 15
     6b6:	23 27       	eor	r18, r19
     6b8:	3f 70       	andi	r19, 0x0F	; 15
     6ba:	23 27       	eor	r18, r19
     6bc:	21 70       	andi	r18, 0x01	; 1
     6be:	30 70       	andi	r19, 0x00	; 0
     6c0:	c9 01       	movw	r24, r18
     6c2:	08 95       	ret

000006c4 <LITE_MAKE_INT1_OUTPUT>:
     6c4:	15 9a       	sbi	0x02, 5	; 2
     6c6:	08 95       	ret

000006c8 <LITE_MAKE_INT1_INPUT>:
     6c8:	15 98       	cbi	0x02, 5	; 2
     6ca:	08 95       	ret

000006cc <LITE_SET_INT2_PIN>:
LITE_ASSIGN_PIN(INT2, E, 6);
     6cc:	1e 9a       	sbi	0x03, 6	; 3
     6ce:	08 95       	ret

000006d0 <LITE_CLR_INT2_PIN>:
     6d0:	1e 98       	cbi	0x03, 6	; 3
     6d2:	08 95       	ret

000006d4 <LITE_READ_INT2_PIN>:
     6d4:	21 b1       	in	r18, 0x01	; 1
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	00 24       	eor	r0, r0
     6da:	22 0f       	add	r18, r18
     6dc:	33 1f       	adc	r19, r19
     6de:	00 1c       	adc	r0, r0
     6e0:	22 0f       	add	r18, r18
     6e2:	33 1f       	adc	r19, r19
     6e4:	00 1c       	adc	r0, r0
     6e6:	23 2f       	mov	r18, r19
     6e8:	30 2d       	mov	r19, r0
     6ea:	21 70       	andi	r18, 0x01	; 1
     6ec:	30 70       	andi	r19, 0x00	; 0
     6ee:	c9 01       	movw	r24, r18
     6f0:	08 95       	ret

000006f2 <LITE_MAKE_INT2_OUTPUT>:
     6f2:	16 9a       	sbi	0x02, 6	; 2
     6f4:	08 95       	ret

000006f6 <LITE_MAKE_INT2_INPUT>:
     6f6:	16 98       	cbi	0x02, 6	; 2
     6f8:	08 95       	ret

000006fa <LITE_SET_INT3_PIN>:
LITE_ASSIGN_PIN(INT3, E, 7);
     6fa:	1f 9a       	sbi	0x03, 7	; 3
     6fc:	08 95       	ret

000006fe <LITE_CLR_INT3_PIN>:
     6fe:	1f 98       	cbi	0x03, 7	; 3
     700:	08 95       	ret

00000702 <LITE_READ_INT3_PIN>:
     702:	21 b1       	in	r18, 0x01	; 1
     704:	33 27       	eor	r19, r19
     706:	27 fd       	sbrc	r18, 7
     708:	30 95       	com	r19
     70a:	22 27       	eor	r18, r18
     70c:	33 0f       	add	r19, r19
     70e:	22 1f       	adc	r18, r18
     710:	33 27       	eor	r19, r19
     712:	c9 01       	movw	r24, r18
     714:	08 95       	ret

00000716 <LITE_MAKE_INT3_OUTPUT>:
     716:	17 9a       	sbi	0x02, 7	; 2
     718:	08 95       	ret

0000071a <LITE_MAKE_INT3_INPUT>:
     71a:	17 98       	cbi	0x02, 7	; 2
     71c:	08 95       	ret

0000071e <LITE_SET_MOSI_PIN>:
// spibus assignments 
LITE_ASSIGN_PIN(MOSI, B, 2);
     71e:	c2 9a       	sbi	0x18, 2	; 24
     720:	08 95       	ret

00000722 <LITE_CLR_MOSI_PIN>:
     722:	c2 98       	cbi	0x18, 2	; 24
     724:	08 95       	ret

00000726 <LITE_READ_MOSI_PIN>:
     726:	26 b3       	in	r18, 0x16	; 22
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	36 95       	lsr	r19
     72c:	27 95       	ror	r18
     72e:	36 95       	lsr	r19
     730:	27 95       	ror	r18
     732:	21 70       	andi	r18, 0x01	; 1
     734:	30 70       	andi	r19, 0x00	; 0
     736:	c9 01       	movw	r24, r18
     738:	08 95       	ret

0000073a <LITE_MAKE_MOSI_OUTPUT>:
     73a:	ba 9a       	sbi	0x17, 2	; 23
     73c:	08 95       	ret

0000073e <LITE_MAKE_MOSI_INPUT>:
     73e:	ba 98       	cbi	0x17, 2	; 23
     740:	08 95       	ret

00000742 <LITE_SET_MISO_PIN>:
LITE_ASSIGN_PIN(MISO, B, 3);
     742:	c3 9a       	sbi	0x18, 3	; 24
     744:	08 95       	ret

00000746 <LITE_CLR_MISO_PIN>:
     746:	c3 98       	cbi	0x18, 3	; 24
     748:	08 95       	ret

0000074a <LITE_READ_MISO_PIN>:
     74a:	26 b3       	in	r18, 0x16	; 22
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	36 95       	lsr	r19
     750:	27 95       	ror	r18
     752:	36 95       	lsr	r19
     754:	27 95       	ror	r18
     756:	36 95       	lsr	r19
     758:	27 95       	ror	r18
     75a:	21 70       	andi	r18, 0x01	; 1
     75c:	30 70       	andi	r19, 0x00	; 0
     75e:	c9 01       	movw	r24, r18
     760:	08 95       	ret

00000762 <LITE_MAKE_MISO_OUTPUT>:
     762:	bb 9a       	sbi	0x17, 3	; 23
     764:	08 95       	ret

00000766 <LITE_MAKE_MISO_INPUT>:
     766:	bb 98       	cbi	0x17, 3	; 23
     768:	08 95       	ret

0000076a <LITE_SET_SPI_SCK_PIN>:
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
     76a:	c1 9a       	sbi	0x18, 1	; 24
     76c:	08 95       	ret

0000076e <LITE_CLR_SPI_SCK_PIN>:
     76e:	c1 98       	cbi	0x18, 1	; 24
     770:	08 95       	ret

00000772 <LITE_READ_SPI_SCK_PIN>:
     772:	26 b3       	in	r18, 0x16	; 22
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	36 95       	lsr	r19
     778:	27 95       	ror	r18
     77a:	21 70       	andi	r18, 0x01	; 1
     77c:	30 70       	andi	r19, 0x00	; 0
     77e:	c9 01       	movw	r24, r18
     780:	08 95       	ret

00000782 <LITE_MAKE_SPI_SCK_OUTPUT>:
     782:	b9 9a       	sbi	0x17, 1	; 23
     784:	08 95       	ret

00000786 <LITE_MAKE_SPI_SCK_INPUT>:
     786:	b9 98       	cbi	0x17, 1	; 23
     788:	08 95       	ret

0000078a <LITE_SET_PW0_PIN>:
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
     78a:	a8 9a       	sbi	0x15, 0	; 21
     78c:	08 95       	ret

0000078e <LITE_CLR_PW0_PIN>:
     78e:	a8 98       	cbi	0x15, 0	; 21
     790:	08 95       	ret

00000792 <LITE_READ_PW0_PIN>:
     792:	23 b3       	in	r18, 0x13	; 19
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	21 70       	andi	r18, 0x01	; 1
     798:	30 70       	andi	r19, 0x00	; 0
     79a:	c9 01       	movw	r24, r18
     79c:	08 95       	ret

0000079e <LITE_MAKE_PW0_OUTPUT>:
     79e:	a0 9a       	sbi	0x14, 0	; 20
     7a0:	08 95       	ret

000007a2 <LITE_MAKE_PW0_INPUT>:
     7a2:	a0 98       	cbi	0x14, 0	; 20
     7a4:	08 95       	ret

000007a6 <LITE_SET_PW1_PIN>:
LITE_ASSIGN_PIN(PW1, C, 1);
     7a6:	a9 9a       	sbi	0x15, 1	; 21
     7a8:	08 95       	ret

000007aa <LITE_CLR_PW1_PIN>:
     7aa:	a9 98       	cbi	0x15, 1	; 21
     7ac:	08 95       	ret

000007ae <LITE_READ_PW1_PIN>:
     7ae:	23 b3       	in	r18, 0x13	; 19
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	36 95       	lsr	r19
     7b4:	27 95       	ror	r18
     7b6:	21 70       	andi	r18, 0x01	; 1
     7b8:	30 70       	andi	r19, 0x00	; 0
     7ba:	c9 01       	movw	r24, r18
     7bc:	08 95       	ret

000007be <LITE_MAKE_PW1_OUTPUT>:
     7be:	a1 9a       	sbi	0x14, 1	; 20
     7c0:	08 95       	ret

000007c2 <LITE_MAKE_PW1_INPUT>:
     7c2:	a1 98       	cbi	0x14, 1	; 20
     7c4:	08 95       	ret

000007c6 <LITE_SET_PW2_PIN>:
LITE_ASSIGN_PIN(PW2, C, 2);
     7c6:	aa 9a       	sbi	0x15, 2	; 21
     7c8:	08 95       	ret

000007ca <LITE_CLR_PW2_PIN>:
     7ca:	aa 98       	cbi	0x15, 2	; 21
     7cc:	08 95       	ret

000007ce <LITE_READ_PW2_PIN>:
     7ce:	23 b3       	in	r18, 0x13	; 19
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	36 95       	lsr	r19
     7d4:	27 95       	ror	r18
     7d6:	36 95       	lsr	r19
     7d8:	27 95       	ror	r18
     7da:	21 70       	andi	r18, 0x01	; 1
     7dc:	30 70       	andi	r19, 0x00	; 0
     7de:	c9 01       	movw	r24, r18
     7e0:	08 95       	ret

000007e2 <LITE_MAKE_PW2_OUTPUT>:
     7e2:	a2 9a       	sbi	0x14, 2	; 20
     7e4:	08 95       	ret

000007e6 <LITE_MAKE_PW2_INPUT>:
     7e6:	a2 98       	cbi	0x14, 2	; 20
     7e8:	08 95       	ret

000007ea <LITE_SET_PW3_PIN>:
LITE_ASSIGN_PIN(PW3, C, 3);
     7ea:	ab 9a       	sbi	0x15, 3	; 21
     7ec:	08 95       	ret

000007ee <LITE_CLR_PW3_PIN>:
     7ee:	ab 98       	cbi	0x15, 3	; 21
     7f0:	08 95       	ret

000007f2 <LITE_READ_PW3_PIN>:
     7f2:	23 b3       	in	r18, 0x13	; 19
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	36 95       	lsr	r19
     7f8:	27 95       	ror	r18
     7fa:	36 95       	lsr	r19
     7fc:	27 95       	ror	r18
     7fe:	36 95       	lsr	r19
     800:	27 95       	ror	r18
     802:	21 70       	andi	r18, 0x01	; 1
     804:	30 70       	andi	r19, 0x00	; 0
     806:	c9 01       	movw	r24, r18
     808:	08 95       	ret

0000080a <LITE_MAKE_PW3_OUTPUT>:
     80a:	a3 9a       	sbi	0x14, 3	; 20
     80c:	08 95       	ret

0000080e <LITE_MAKE_PW3_INPUT>:
     80e:	a3 98       	cbi	0x14, 3	; 20
     810:	08 95       	ret

00000812 <LITE_SET_PW4_PIN>:
LITE_ASSIGN_PIN(PW4, C, 4);
     812:	ac 9a       	sbi	0x15, 4	; 21
     814:	08 95       	ret

00000816 <LITE_CLR_PW4_PIN>:
     816:	ac 98       	cbi	0x15, 4	; 21
     818:	08 95       	ret

0000081a <LITE_READ_PW4_PIN>:
     81a:	23 b3       	in	r18, 0x13	; 19
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	32 95       	swap	r19
     820:	22 95       	swap	r18
     822:	2f 70       	andi	r18, 0x0F	; 15
     824:	23 27       	eor	r18, r19
     826:	3f 70       	andi	r19, 0x0F	; 15
     828:	23 27       	eor	r18, r19
     82a:	21 70       	andi	r18, 0x01	; 1
     82c:	30 70       	andi	r19, 0x00	; 0
     82e:	c9 01       	movw	r24, r18
     830:	08 95       	ret

00000832 <LITE_MAKE_PW4_OUTPUT>:
     832:	a4 9a       	sbi	0x14, 4	; 20
     834:	08 95       	ret

00000836 <LITE_MAKE_PW4_INPUT>:
     836:	a4 98       	cbi	0x14, 4	; 20
     838:	08 95       	ret

0000083a <LITE_SET_PW5_PIN>:
LITE_ASSIGN_PIN(PW5, C, 5);
     83a:	ad 9a       	sbi	0x15, 5	; 21
     83c:	08 95       	ret

0000083e <LITE_CLR_PW5_PIN>:
     83e:	ad 98       	cbi	0x15, 5	; 21
     840:	08 95       	ret

00000842 <LITE_READ_PW5_PIN>:
     842:	23 b3       	in	r18, 0x13	; 19
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	36 95       	lsr	r19
     848:	27 95       	ror	r18
     84a:	32 95       	swap	r19
     84c:	22 95       	swap	r18
     84e:	2f 70       	andi	r18, 0x0F	; 15
     850:	23 27       	eor	r18, r19
     852:	3f 70       	andi	r19, 0x0F	; 15
     854:	23 27       	eor	r18, r19
     856:	21 70       	andi	r18, 0x01	; 1
     858:	30 70       	andi	r19, 0x00	; 0
     85a:	c9 01       	movw	r24, r18
     85c:	08 95       	ret

0000085e <LITE_MAKE_PW5_OUTPUT>:
     85e:	a5 9a       	sbi	0x14, 5	; 20
     860:	08 95       	ret

00000862 <LITE_MAKE_PW5_INPUT>:
     862:	a5 98       	cbi	0x14, 5	; 20
     864:	08 95       	ret

00000866 <LITE_SET_PW6_PIN>:
LITE_ASSIGN_PIN(PW6, C, 6);
     866:	ae 9a       	sbi	0x15, 6	; 21
     868:	08 95       	ret

0000086a <LITE_CLR_PW6_PIN>:
     86a:	ae 98       	cbi	0x15, 6	; 21
     86c:	08 95       	ret

0000086e <LITE_READ_PW6_PIN>:
     86e:	23 b3       	in	r18, 0x13	; 19
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	00 24       	eor	r0, r0
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
     878:	00 1c       	adc	r0, r0
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	00 1c       	adc	r0, r0
     880:	23 2f       	mov	r18, r19
     882:	30 2d       	mov	r19, r0
     884:	21 70       	andi	r18, 0x01	; 1
     886:	30 70       	andi	r19, 0x00	; 0
     888:	c9 01       	movw	r24, r18
     88a:	08 95       	ret

0000088c <LITE_MAKE_PW6_OUTPUT>:
     88c:	a6 9a       	sbi	0x14, 6	; 20
     88e:	08 95       	ret

00000890 <LITE_MAKE_PW6_INPUT>:
     890:	a6 98       	cbi	0x14, 6	; 20
     892:	08 95       	ret

00000894 <LITE_SET_PW7_PIN>:
LITE_ASSIGN_PIN(PW7, C, 7);
     894:	af 9a       	sbi	0x15, 7	; 21
     896:	08 95       	ret

00000898 <LITE_CLR_PW7_PIN>:
     898:	af 98       	cbi	0x15, 7	; 21
     89a:	08 95       	ret

0000089c <LITE_READ_PW7_PIN>:
     89c:	23 b3       	in	r18, 0x13	; 19
     89e:	33 27       	eor	r19, r19
     8a0:	27 fd       	sbrc	r18, 7
     8a2:	30 95       	com	r19
     8a4:	22 27       	eor	r18, r18
     8a6:	33 0f       	add	r19, r19
     8a8:	22 1f       	adc	r18, r18
     8aa:	33 27       	eor	r19, r19
     8ac:	c9 01       	movw	r24, r18
     8ae:	08 95       	ret

000008b0 <LITE_MAKE_PW7_OUTPUT>:
     8b0:	a7 9a       	sbi	0x14, 7	; 20
     8b2:	08 95       	ret

000008b4 <LITE_MAKE_PW7_INPUT>:
     8b4:	a7 98       	cbi	0x14, 7	; 20
     8b6:	08 95       	ret

000008b8 <LITE_SET_I2C_BUS1_SCL_PIN>:
// i2c bus assignments
LITE_ASSIGN_PIN(I2C_BUS1_SCL, D, 0);
     8b8:	90 9a       	sbi	0x12, 0	; 18
     8ba:	08 95       	ret

000008bc <LITE_CLR_I2C_BUS1_SCL_PIN>:
     8bc:	90 98       	cbi	0x12, 0	; 18
     8be:	08 95       	ret

000008c0 <LITE_READ_I2C_BUS1_SCL_PIN>:
     8c0:	20 b3       	in	r18, 0x10	; 16
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	21 70       	andi	r18, 0x01	; 1
     8c6:	30 70       	andi	r19, 0x00	; 0
     8c8:	c9 01       	movw	r24, r18
     8ca:	08 95       	ret

000008cc <LITE_MAKE_I2C_BUS1_SCL_OUTPUT>:
     8cc:	88 9a       	sbi	0x11, 0	; 17
     8ce:	08 95       	ret

000008d0 <LITE_MAKE_I2C_BUS1_SCL_INPUT>:
     8d0:	88 98       	cbi	0x11, 0	; 17
     8d2:	08 95       	ret

000008d4 <LITE_SET_I2C_BUS1_SDA_PIN>:
LITE_ASSIGN_PIN(I2C_BUS1_SDA, D, 1);
     8d4:	91 9a       	sbi	0x12, 1	; 18
     8d6:	08 95       	ret

000008d8 <LITE_CLR_I2C_BUS1_SDA_PIN>:
     8d8:	91 98       	cbi	0x12, 1	; 18
     8da:	08 95       	ret

000008dc <LITE_READ_I2C_BUS1_SDA_PIN>:
     8dc:	20 b3       	in	r18, 0x10	; 16
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	36 95       	lsr	r19
     8e2:	27 95       	ror	r18
     8e4:	21 70       	andi	r18, 0x01	; 1
     8e6:	30 70       	andi	r19, 0x00	; 0
     8e8:	c9 01       	movw	r24, r18
     8ea:	08 95       	ret

000008ec <LITE_MAKE_I2C_BUS1_SDA_OUTPUT>:
     8ec:	89 9a       	sbi	0x11, 1	; 17
     8ee:	08 95       	ret

000008f0 <LITE_MAKE_I2C_BUS1_SDA_INPUT>:
     8f0:	89 98       	cbi	0x11, 1	; 17
     8f2:	08 95       	ret

000008f4 <LITE_SET_UART_RXD0_PIN>:
// uart assignments
LITE_ASSIGN_PIN(UART_RXD0, E, 0);
     8f4:	18 9a       	sbi	0x03, 0	; 3
     8f6:	08 95       	ret

000008f8 <LITE_CLR_UART_RXD0_PIN>:
     8f8:	18 98       	cbi	0x03, 0	; 3
     8fa:	08 95       	ret

000008fc <LITE_READ_UART_RXD0_PIN>:
     8fc:	21 b1       	in	r18, 0x01	; 1
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	21 70       	andi	r18, 0x01	; 1
     902:	30 70       	andi	r19, 0x00	; 0
     904:	c9 01       	movw	r24, r18
     906:	08 95       	ret

00000908 <LITE_MAKE_UART_RXD0_OUTPUT>:
     908:	10 9a       	sbi	0x02, 0	; 2
     90a:	08 95       	ret

0000090c <LITE_MAKE_UART_RXD0_INPUT>:
     90c:	10 98       	cbi	0x02, 0	; 2
     90e:	08 95       	ret

00000910 <LITE_SET_UART_TXD0_PIN>:
LITE_ASSIGN_PIN(UART_TXD0, E, 1);
     910:	19 9a       	sbi	0x03, 1	; 3
     912:	08 95       	ret

00000914 <LITE_CLR_UART_TXD0_PIN>:
     914:	19 98       	cbi	0x03, 1	; 3
     916:	08 95       	ret

00000918 <LITE_READ_UART_TXD0_PIN>:
     918:	21 b1       	in	r18, 0x01	; 1
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	36 95       	lsr	r19
     91e:	27 95       	ror	r18
     920:	21 70       	andi	r18, 0x01	; 1
     922:	30 70       	andi	r19, 0x00	; 0
     924:	c9 01       	movw	r24, r18
     926:	08 95       	ret

00000928 <LITE_MAKE_UART_TXD0_OUTPUT>:
     928:	11 9a       	sbi	0x02, 1	; 2
     92a:	08 95       	ret

0000092c <LITE_MAKE_UART_TXD0_INPUT>:
     92c:	11 98       	cbi	0x02, 1	; 2
     92e:	08 95       	ret

00000930 <LITE_SET_UART_XCK0_PIN>:
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
     930:	1a 9a       	sbi	0x03, 2	; 3
     932:	08 95       	ret

00000934 <LITE_CLR_UART_XCK0_PIN>:
     934:	1a 98       	cbi	0x03, 2	; 3
     936:	08 95       	ret

00000938 <LITE_READ_UART_XCK0_PIN>:
     938:	21 b1       	in	r18, 0x01	; 1
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	36 95       	lsr	r19
     93e:	27 95       	ror	r18
     940:	36 95       	lsr	r19
     942:	27 95       	ror	r18
     944:	21 70       	andi	r18, 0x01	; 1
     946:	30 70       	andi	r19, 0x00	; 0
     948:	c9 01       	movw	r24, r18
     94a:	08 95       	ret

0000094c <LITE_MAKE_UART_XCK0_OUTPUT>:
     94c:	12 9a       	sbi	0x02, 2	; 2
     94e:	08 95       	ret

00000950 <LITE_MAKE_UART_XCK0_INPUT>:
     950:	12 98       	cbi	0x02, 2	; 2
     952:	08 95       	ret

00000954 <LITE_SET_AC_NEG_PIN>:
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
     954:	1b 9a       	sbi	0x03, 3	; 3
     956:	08 95       	ret

00000958 <LITE_CLR_AC_NEG_PIN>:
     958:	1b 98       	cbi	0x03, 3	; 3
     95a:	08 95       	ret

0000095c <LITE_READ_AC_NEG_PIN>:
     95c:	21 b1       	in	r18, 0x01	; 1
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	36 95       	lsr	r19
     962:	27 95       	ror	r18
     964:	36 95       	lsr	r19
     966:	27 95       	ror	r18
     968:	36 95       	lsr	r19
     96a:	27 95       	ror	r18
     96c:	21 70       	andi	r18, 0x01	; 1
     96e:	30 70       	andi	r19, 0x00	; 0
     970:	c9 01       	movw	r24, r18
     972:	08 95       	ret

00000974 <LITE_MAKE_AC_NEG_OUTPUT>:
     974:	13 9a       	sbi	0x02, 3	; 2
     976:	08 95       	ret

00000978 <LITE_MAKE_AC_NEG_INPUT>:
     978:	13 98       	cbi	0x02, 3	; 2
     97a:	08 95       	ret

0000097c <LITE_SET_UART_RXD1_PIN>:
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
     97c:	92 9a       	sbi	0x12, 2	; 18
     97e:	08 95       	ret

00000980 <LITE_CLR_UART_RXD1_PIN>:
     980:	92 98       	cbi	0x12, 2	; 18
     982:	08 95       	ret

00000984 <LITE_READ_UART_RXD1_PIN>:
     984:	20 b3       	in	r18, 0x10	; 16
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	36 95       	lsr	r19
     98a:	27 95       	ror	r18
     98c:	36 95       	lsr	r19
     98e:	27 95       	ror	r18
     990:	21 70       	andi	r18, 0x01	; 1
     992:	30 70       	andi	r19, 0x00	; 0
     994:	c9 01       	movw	r24, r18
     996:	08 95       	ret

00000998 <LITE_MAKE_UART_RXD1_OUTPUT>:
     998:	8a 9a       	sbi	0x11, 2	; 17
     99a:	08 95       	ret

0000099c <LITE_MAKE_UART_RXD1_INPUT>:
     99c:	8a 98       	cbi	0x11, 2	; 17
     99e:	08 95       	ret

000009a0 <LITE_SET_UART_TXD1_PIN>:
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
     9a0:	93 9a       	sbi	0x12, 3	; 18
     9a2:	08 95       	ret

000009a4 <LITE_CLR_UART_TXD1_PIN>:
     9a4:	93 98       	cbi	0x12, 3	; 18
     9a6:	08 95       	ret

000009a8 <LITE_READ_UART_TXD1_PIN>:
     9a8:	20 b3       	in	r18, 0x10	; 16
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	36 95       	lsr	r19
     9ae:	27 95       	ror	r18
     9b0:	36 95       	lsr	r19
     9b2:	27 95       	ror	r18
     9b4:	36 95       	lsr	r19
     9b6:	27 95       	ror	r18
     9b8:	21 70       	andi	r18, 0x01	; 1
     9ba:	30 70       	andi	r19, 0x00	; 0
     9bc:	c9 01       	movw	r24, r18
     9be:	08 95       	ret

000009c0 <LITE_MAKE_UART_TXD1_OUTPUT>:
     9c0:	8b 9a       	sbi	0x11, 3	; 17
     9c2:	08 95       	ret

000009c4 <LITE_MAKE_UART_TXD1_INPUT>:
     9c4:	8b 98       	cbi	0x11, 3	; 17
     9c6:	08 95       	ret

000009c8 <LITE_SET_UART_XCK1_PIN>:
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
     9c8:	95 9a       	sbi	0x12, 5	; 18
     9ca:	08 95       	ret

000009cc <LITE_CLR_UART_XCK1_PIN>:
     9cc:	95 98       	cbi	0x12, 5	; 18
     9ce:	08 95       	ret

000009d0 <LITE_READ_UART_XCK1_PIN>:
     9d0:	20 b3       	in	r18, 0x10	; 16
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	36 95       	lsr	r19
     9d6:	27 95       	ror	r18
     9d8:	32 95       	swap	r19
     9da:	22 95       	swap	r18
     9dc:	2f 70       	andi	r18, 0x0F	; 15
     9de:	23 27       	eor	r18, r19
     9e0:	3f 70       	andi	r19, 0x0F	; 15
     9e2:	23 27       	eor	r18, r19
     9e4:	21 70       	andi	r18, 0x01	; 1
     9e6:	30 70       	andi	r19, 0x00	; 0
     9e8:	c9 01       	movw	r24, r18
     9ea:	08 95       	ret

000009ec <LITE_MAKE_UART_XCK1_OUTPUT>:
     9ec:	8d 9a       	sbi	0x11, 5	; 17
     9ee:	08 95       	ret

000009f0 <LITE_MAKE_UART_XCK1_INPUT>:
     9f0:	8d 98       	cbi	0x11, 5	; 17
     9f2:	08 95       	ret

000009f4 <LITE_SET_TONE_DECODE_SIGNAL_PIN>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
LITE_ASSIGN_PIN(INT3, E, 7);
     9f4:	1f 9a       	sbi	0x03, 7	; 3
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     9f6:	08 95       	ret

000009f8 <LITE_CLR_TONE_DECODE_SIGNAL_PIN>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
LITE_ASSIGN_PIN(INT3, E, 7);
     9f8:	1f 98       	cbi	0x03, 7	; 3
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     9fa:	08 95       	ret

000009fc <LITE_READ_TONE_DECODE_SIGNAL_PIN>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
LITE_ASSIGN_PIN(INT3, E, 7);
     9fc:	81 b1       	in	r24, 0x01	; 1
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     9fe:	88 1f       	adc	r24, r24
     a00:	88 27       	eor	r24, r24
     a02:	88 1f       	adc	r24, r24
     a04:	08 95       	ret

00000a06 <LITE_MAKE_TONE_DECODE_SIGNAL_OUTPUT>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
LITE_ASSIGN_PIN(INT3, E, 7);
     a06:	17 9a       	sbi	0x02, 7	; 2
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     a08:	08 95       	ret

00000a0a <LITE_MAKE_TONE_DECODE_SIGNAL_INPUT>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
LITE_ASSIGN_PIN(INT3, E, 7);
     a0a:	17 98       	cbi	0x02, 7	; 2
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     a0c:	08 95       	ret

00000a0e <LITE_SET_PHOTO_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
     a0e:	1d 9a       	sbi	0x03, 5	; 3
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     a10:	08 95       	ret

00000a12 <LITE_CLR_PHOTO_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
     a12:	1d 98       	cbi	0x03, 5	; 3
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     a14:	08 95       	ret

00000a16 <LITE_READ_PHOTO_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
     a16:	81 b1       	in	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	96 95       	lsr	r25
     a1c:	87 95       	ror	r24
     a1e:	92 95       	swap	r25
     a20:	82 95       	swap	r24
     a22:	8f 70       	andi	r24, 0x0F	; 15
     a24:	89 27       	eor	r24, r25
     a26:	9f 70       	andi	r25, 0x0F	; 15
     a28:	89 27       	eor	r24, r25
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     a2a:	81 70       	andi	r24, 0x01	; 1
     a2c:	08 95       	ret

00000a2e <LITE_MAKE_PHOTO_CTL_OUTPUT>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
     a2e:	15 9a       	sbi	0x02, 5	; 2
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     a30:	08 95       	ret

00000a32 <LITE_MAKE_PHOTO_CTL_INPUT>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
     a32:	15 98       	cbi	0x02, 5	; 2
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     a34:	08 95       	ret

00000a36 <LITE_SET_TEMP_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
     a36:	1e 9a       	sbi	0x03, 6	; 3
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     a38:	08 95       	ret

00000a3a <LITE_CLR_TEMP_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
     a3a:	1e 98       	cbi	0x03, 6	; 3
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     a3c:	08 95       	ret

00000a3e <LITE_READ_TEMP_CTL_PIN>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
     a3e:	81 b1       	in	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	00 24       	eor	r0, r0
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	00 1c       	adc	r0, r0
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	00 1c       	adc	r0, r0
     a50:	89 2f       	mov	r24, r25
     a52:	90 2d       	mov	r25, r0
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     a54:	81 70       	andi	r24, 0x01	; 1
     a56:	08 95       	ret

00000a58 <LITE_MAKE_TEMP_CTL_OUTPUT>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
     a58:	16 9a       	sbi	0x02, 6	; 2
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     a5a:	08 95       	ret

00000a5c <LITE_MAKE_TEMP_CTL_INPUT>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
LITE_ASSIGN_PIN(INT1, E, 5);
LITE_ASSIGN_PIN(INT2, E, 6);
     a5c:	16 98       	cbi	0x02, 6	; 2
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     a5e:	08 95       	ret

00000a60 <LITE_SET_MIC_CTL_PIN>:
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
     a60:	ab 9a       	sbi	0x15, 3	; 21
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
     a62:	08 95       	ret

00000a64 <LITE_CLR_MIC_CTL_PIN>:
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
     a64:	ab 98       	cbi	0x15, 3	; 21
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
     a66:	08 95       	ret

00000a68 <LITE_MAKE_MIC_CTL_OUTPUT>:
     a68:	08 95       	ret

00000a6a <LITE_SET_SOUNDER_CTL_PIN>:
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
     a6a:	aa 9a       	sbi	0x15, 2	; 21
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
     a6c:	08 95       	ret

00000a6e <LITE_CLR_SOUNDER_CTL_PIN>:
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
     a6e:	aa 98       	cbi	0x15, 2	; 21
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
     a70:	08 95       	ret

00000a72 <LITE_MAKE_SOUNDER_CTL_OUTPUT>:
     a72:	08 95       	ret

00000a74 <LITE_SET_ACCEL_CTL_PIN>:
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
     a74:	ac 9a       	sbi	0x15, 4	; 21
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
     a76:	08 95       	ret

00000a78 <LITE_CLR_ACCEL_CTL_PIN>:
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
     a78:	ac 98       	cbi	0x15, 4	; 21
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
     a7a:	08 95       	ret

00000a7c <LITE_MAKE_ACCEL_CTL_OUTPUT>:
     a7c:	08 95       	ret

00000a7e <LITE_SET_MAG_CTL_PIN>:
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
     a7e:	ad 9a       	sbi	0x15, 5	; 21
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
LITE_ALIAS_OUTPUT_ONLY_PIN(MAG_CTL, PW5);
     a80:	08 95       	ret

00000a82 <LITE_CLR_MAG_CTL_PIN>:
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
     a82:	ad 98       	cbi	0x15, 5	; 21
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
LITE_ALIAS_OUTPUT_ONLY_PIN(MAG_CTL, PW5);
     a84:	08 95       	ret

00000a86 <LITE_MAKE_MAG_CTL_OUTPUT>:
     a86:	08 95       	ret

00000a88 <LITE_SET_MIC_MUX_SEL_PIN>:
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
LITE_ASSIGN_PIN(PW6, C, 6);
     a88:	ae 9a       	sbi	0x15, 6	; 21
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
LITE_ALIAS_OUTPUT_ONLY_PIN(MAG_CTL, PW5);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_MUX_SEL, PW6);
     a8a:	08 95       	ret

00000a8c <LITE_CLR_MIC_MUX_SEL_PIN>:
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
LITE_ASSIGN_PIN(PW6, C, 6);
     a8c:	ae 98       	cbi	0x15, 6	; 21
LITE_ALIAS_PIN(TEMP_CTL, INT2);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
LITE_ALIAS_OUTPUT_ONLY_PIN(MAG_CTL, PW5);
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_MUX_SEL, PW6);
     a8e:	08 95       	ret

00000a90 <LITE_MAKE_MIC_MUX_SEL_OUTPUT>:
     a90:	08 95       	ret

00000a92 <LITE_SET_PIN_DIRECTIONS>:
        u_sec--;
    }
}

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
     a92:	d2 9a       	sbi	0x1a, 2	; 26
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
LITE_ASSIGN_PIN(YELLOW_LED, A, 0);
     a94:	d0 9a       	sbi	0x1a, 0	; 26
    }
}

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
     a96:	d1 9a       	sbi	0x1a, 1	; 26
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
LITE_ASSIGN_PIN(PW6, C, 6);
LITE_ASSIGN_PIN(PW7, C, 7);
     a98:	a7 9a       	sbi	0x14, 7	; 20
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
LITE_ASSIGN_PIN(PW6, C, 6);
     a9a:	a6 9a       	sbi	0x14, 6	; 20
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
LITE_ASSIGN_PIN(PW5, C, 5);
     a9c:	a5 9a       	sbi	0x14, 5	; 20
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
LITE_ASSIGN_PIN(PW4, C, 4);
     a9e:	a4 9a       	sbi	0x14, 4	; 20
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
LITE_ASSIGN_PIN(PW3, C, 3);
     aa0:	a3 9a       	sbi	0x14, 3	; 20
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
LITE_ASSIGN_PIN(PW2, C, 2);
     aa2:	a2 9a       	sbi	0x14, 2	; 20
LITE_ASSIGN_PIN(MISO, B, 3);
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
LITE_ASSIGN_PIN(PW1, C, 1);
     aa4:	a1 9a       	sbi	0x14, 1	; 20
LITE_ASSIGN_PIN(MOSI, B, 2);
LITE_ASSIGN_PIN(MISO, B, 3);
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
     aa6:	a0 9a       	sbi	0x14, 0	; 20

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
LITE_ASSIGN_PIN(YELLOW_LED, A, 0);
LITE_ASSIGN_PIN(SERIAL_ID, A, 4);
     aa8:	d4 98       	cbi	0x1a, 4	; 26
LITE_ASSIGN_PIN(BAT_MON, A, 5);
LITE_ASSIGN_PIN(THERM_PWR, A, 7);


// Flash assignments
LITE_ASSIGN_PIN(FLASH_SELECT, A, 3);
     aaa:	dc 98       	cbi	0x1b, 4	; 27
     aac:	d3 9a       	sbi	0x1a, 3	; 26
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
     aae:	8b 9a       	sbi	0x11, 3	; 17
LITE_ASSIGN_PIN(THERM_PWR, A, 7);


// Flash assignments
LITE_ASSIGN_PIN(FLASH_SELECT, A, 3);
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
     ab0:	8d 9a       	sbi	0x11, 5	; 17
LITE_ASSIGN_PIN(BAT_MON, A, 5);
LITE_ASSIGN_PIN(THERM_PWR, A, 7);


// Flash assignments
LITE_ASSIGN_PIN(FLASH_SELECT, A, 3);
     ab2:	db 9a       	sbi	0x1b, 3	; 27
        u_sec--;
    }
}

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
     ab4:	da 9a       	sbi	0x1b, 2	; 27
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
LITE_ASSIGN_PIN(YELLOW_LED, A, 0);
     ab6:	d8 9a       	sbi	0x1b, 0	; 27
    }
}

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
     ab8:	d9 9a       	sbi	0x1b, 1	; 27
    LITE_MAKE_FLASH_CLK_OUTPUT();
    LITE_SET_FLASH_SELECT_PIN();
    LITE_SET_RED_LED_PIN();
    LITE_SET_YELLOW_LED_PIN();
    LITE_SET_GREEN_LED_PIN();
}
     aba:	08 95       	ret

00000abc <CC2420_FIFOP_INT_MODE>:
#include "micazhardware.h"

void inline CC2420_FIFOP_INT_MODE(bool LowToHigh)
{
    sbi(EICRB, ISC61);          // edge mode
     abc:	9a b7       	in	r25, 0x3a	; 58
     abe:	90 62       	ori	r25, 0x20	; 32
     ac0:	9a bf       	out	0x3a, r25	; 58
    if (LowToHigh)
     ac2:	88 23       	and	r24, r24
     ac4:	21 f4       	brne	.+8      	; 0xace <CC2420_FIFOP_INT_MODE+0x12>
    {
        sbi(EICRB, ISC60);
    }                           //trigger on rising level
    else
    {
        cbi(EICRB, ISC60);
     ac6:	8a b7       	in	r24, 0x3a	; 58
     ac8:	8f 7e       	andi	r24, 0xEF	; 239
     aca:	8a bf       	out	0x3a, r24	; 58
     acc:	08 95       	ret
void inline CC2420_FIFOP_INT_MODE(bool LowToHigh)
{
    sbi(EICRB, ISC61);          // edge mode
    if (LowToHigh)
    {
        sbi(EICRB, ISC60);
     ace:	8a b7       	in	r24, 0x3a	; 58
     ad0:	80 61       	ori	r24, 0x10	; 16
     ad2:	8a bf       	out	0x3a, r24	; 58
     ad4:	08 95       	ret

00000ad6 <LITE_SET_CC_RSTN_PIN>:




//-------------------------------------------------------------------------
LITE_ASSIGN_PIN(CC_RSTN, A, 6); // chipcon reset
     ad6:	de 9a       	sbi	0x1b, 6	; 27
     ad8:	08 95       	ret

00000ada <LITE_CLR_CC_RSTN_PIN>:
     ada:	de 98       	cbi	0x1b, 6	; 27
     adc:	08 95       	ret

00000ade <LITE_READ_CC_RSTN_PIN>:
     ade:	29 b3       	in	r18, 0x19	; 25
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	00 24       	eor	r0, r0
     ae4:	22 0f       	add	r18, r18
     ae6:	33 1f       	adc	r19, r19
     ae8:	00 1c       	adc	r0, r0
     aea:	22 0f       	add	r18, r18
     aec:	33 1f       	adc	r19, r19
     aee:	00 1c       	adc	r0, r0
     af0:	23 2f       	mov	r18, r19
     af2:	30 2d       	mov	r19, r0
     af4:	21 70       	andi	r18, 0x01	; 1
     af6:	30 70       	andi	r19, 0x00	; 0
     af8:	c9 01       	movw	r24, r18
     afa:	08 95       	ret

00000afc <LITE_MAKE_CC_RSTN_OUTPUT>:
     afc:	d6 9a       	sbi	0x1a, 6	; 26
     afe:	08 95       	ret

00000b00 <LITE_MAKE_CC_RSTN_INPUT>:
     b00:	d6 98       	cbi	0x1a, 6	; 26
     b02:	08 95       	ret

00000b04 <LITE_SET_CC_VREN_PIN>:
LITE_ASSIGN_PIN(CC_VREN, A, 5); // chipcon power enable
     b04:	dd 9a       	sbi	0x1b, 5	; 27
     b06:	08 95       	ret

00000b08 <LITE_CLR_CC_VREN_PIN>:
     b08:	dd 98       	cbi	0x1b, 5	; 27
     b0a:	08 95       	ret

00000b0c <LITE_READ_CC_VREN_PIN>:
     b0c:	29 b3       	in	r18, 0x19	; 25
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	36 95       	lsr	r19
     b12:	27 95       	ror	r18
     b14:	32 95       	swap	r19
     b16:	22 95       	swap	r18
     b18:	2f 70       	andi	r18, 0x0F	; 15
     b1a:	23 27       	eor	r18, r19
     b1c:	3f 70       	andi	r19, 0x0F	; 15
     b1e:	23 27       	eor	r18, r19
     b20:	21 70       	andi	r18, 0x01	; 1
     b22:	30 70       	andi	r19, 0x00	; 0
     b24:	c9 01       	movw	r24, r18
     b26:	08 95       	ret

00000b28 <LITE_MAKE_CC_VREN_OUTPUT>:
     b28:	d5 9a       	sbi	0x1a, 5	; 26
     b2a:	08 95       	ret

00000b2c <LITE_MAKE_CC_VREN_INPUT>:
     b2c:	d5 98       	cbi	0x1a, 5	; 26
     b2e:	08 95       	ret

00000b30 <LITE_SET_CC_FIFOP_PIN>:
//LITE_ASSIGN_PIN(CC_FIFOP1, D, 7);  // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP, E, 6);        // fifo interrupt
     b30:	1e 9a       	sbi	0x03, 6	; 3
     b32:	08 95       	ret

00000b34 <LITE_CLR_CC_FIFOP_PIN>:
     b34:	1e 98       	cbi	0x03, 6	; 3
     b36:	08 95       	ret

00000b38 <LITE_READ_CC_FIFOP_PIN>:
     b38:	21 b1       	in	r18, 0x01	; 1
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	00 24       	eor	r0, r0
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	00 1c       	adc	r0, r0
     b44:	22 0f       	add	r18, r18
     b46:	33 1f       	adc	r19, r19
     b48:	00 1c       	adc	r0, r0
     b4a:	23 2f       	mov	r18, r19
     b4c:	30 2d       	mov	r19, r0
     b4e:	21 70       	andi	r18, 0x01	; 1
     b50:	30 70       	andi	r19, 0x00	; 0
     b52:	c9 01       	movw	r24, r18
     b54:	08 95       	ret

00000b56 <LITE_MAKE_CC_FIFOP_OUTPUT>:
     b56:	16 9a       	sbi	0x02, 6	; 2
     b58:	08 95       	ret

00000b5a <LITE_MAKE_CC_FIFOP_INPUT>:
     b5a:	16 98       	cbi	0x02, 6	; 2
     b5c:	08 95       	ret

00000b5e <LITE_SET_CC_FIFOP1_PIN>:
LITE_ASSIGN_PIN(CC_FIFOP1, E, 6);       // fifo interrupt
     b5e:	1e 9a       	sbi	0x03, 6	; 3
     b60:	08 95       	ret

00000b62 <LITE_CLR_CC_FIFOP1_PIN>:
     b62:	1e 98       	cbi	0x03, 6	; 3
     b64:	08 95       	ret

00000b66 <LITE_READ_CC_FIFOP1_PIN>:
     b66:	21 b1       	in	r18, 0x01	; 1
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	00 24       	eor	r0, r0
     b6c:	22 0f       	add	r18, r18
     b6e:	33 1f       	adc	r19, r19
     b70:	00 1c       	adc	r0, r0
     b72:	22 0f       	add	r18, r18
     b74:	33 1f       	adc	r19, r19
     b76:	00 1c       	adc	r0, r0
     b78:	23 2f       	mov	r18, r19
     b7a:	30 2d       	mov	r19, r0
     b7c:	21 70       	andi	r18, 0x01	; 1
     b7e:	30 70       	andi	r19, 0x00	; 0
     b80:	c9 01       	movw	r24, r18
     b82:	08 95       	ret

00000b84 <LITE_MAKE_CC_FIFOP1_OUTPUT>:
     b84:	16 9a       	sbi	0x02, 6	; 2
     b86:	08 95       	ret

00000b88 <LITE_MAKE_CC_FIFOP1_INPUT>:
     b88:	16 98       	cbi	0x02, 6	; 2
     b8a:	08 95       	ret

00000b8c <LITE_SET_CC_CCA_PIN>:
LITE_ASSIGN_PIN(CC_CCA, D, 6);  // 
     b8c:	96 9a       	sbi	0x12, 6	; 18
     b8e:	08 95       	ret

00000b90 <LITE_CLR_CC_CCA_PIN>:
     b90:	96 98       	cbi	0x12, 6	; 18
     b92:	08 95       	ret

00000b94 <LITE_READ_CC_CCA_PIN>:
     b94:	20 b3       	in	r18, 0x10	; 16
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	00 24       	eor	r0, r0
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	00 1c       	adc	r0, r0
     ba0:	22 0f       	add	r18, r18
     ba2:	33 1f       	adc	r19, r19
     ba4:	00 1c       	adc	r0, r0
     ba6:	23 2f       	mov	r18, r19
     ba8:	30 2d       	mov	r19, r0
     baa:	21 70       	andi	r18, 0x01	; 1
     bac:	30 70       	andi	r19, 0x00	; 0
     bae:	c9 01       	movw	r24, r18
     bb0:	08 95       	ret

00000bb2 <LITE_MAKE_CC_CCA_OUTPUT>:
     bb2:	8e 9a       	sbi	0x11, 6	; 17
     bb4:	08 95       	ret

00000bb6 <LITE_MAKE_CC_CCA_INPUT>:
     bb6:	8e 98       	cbi	0x11, 6	; 17
     bb8:	08 95       	ret

00000bba <LITE_SET_CC_SFD_PIN>:
LITE_ASSIGN_PIN(CC_SFD, D, 4);  // chipcon packet arrival
     bba:	94 9a       	sbi	0x12, 4	; 18
     bbc:	08 95       	ret

00000bbe <LITE_CLR_CC_SFD_PIN>:
     bbe:	94 98       	cbi	0x12, 4	; 18
     bc0:	08 95       	ret

00000bc2 <LITE_READ_CC_SFD_PIN>:
     bc2:	20 b3       	in	r18, 0x10	; 16
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	32 95       	swap	r19
     bc8:	22 95       	swap	r18
     bca:	2f 70       	andi	r18, 0x0F	; 15
     bcc:	23 27       	eor	r18, r19
     bce:	3f 70       	andi	r19, 0x0F	; 15
     bd0:	23 27       	eor	r18, r19
     bd2:	21 70       	andi	r18, 0x01	; 1
     bd4:	30 70       	andi	r19, 0x00	; 0
     bd6:	c9 01       	movw	r24, r18
     bd8:	08 95       	ret

00000bda <LITE_MAKE_CC_SFD_OUTPUT>:
     bda:	8c 9a       	sbi	0x11, 4	; 17
     bdc:	08 95       	ret

00000bde <LITE_MAKE_CC_SFD_INPUT>:
     bde:	8c 98       	cbi	0x11, 4	; 17
     be0:	08 95       	ret

00000be2 <LITE_SET_CC_CS_PIN>:
LITE_ASSIGN_PIN(CC_CS, B, 0);   // chipcon enable
     be2:	c0 9a       	sbi	0x18, 0	; 24
     be4:	08 95       	ret

00000be6 <LITE_CLR_CC_CS_PIN>:
     be6:	c0 98       	cbi	0x18, 0	; 24
     be8:	08 95       	ret

00000bea <LITE_READ_CC_CS_PIN>:
     bea:	26 b3       	in	r18, 0x16	; 22
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	21 70       	andi	r18, 0x01	; 1
     bf0:	30 70       	andi	r19, 0x00	; 0
     bf2:	c9 01       	movw	r24, r18
     bf4:	08 95       	ret

00000bf6 <LITE_MAKE_CC_CS_OUTPUT>:
     bf6:	b8 9a       	sbi	0x17, 0	; 23
     bf8:	08 95       	ret

00000bfa <LITE_MAKE_CC_CS_INPUT>:
     bfa:	b8 98       	cbi	0x17, 0	; 23
     bfc:	08 95       	ret

00000bfe <LITE_SET_CC_FIFO_PIN>:
LITE_ASSIGN_PIN(CC_FIFO, B, 7); // chipcon fifo
     bfe:	c7 9a       	sbi	0x18, 7	; 24
     c00:	08 95       	ret

00000c02 <LITE_CLR_CC_FIFO_PIN>:
     c02:	c7 98       	cbi	0x18, 7	; 24
     c04:	08 95       	ret

00000c06 <LITE_READ_CC_FIFO_PIN>:
     c06:	26 b3       	in	r18, 0x16	; 22
     c08:	33 27       	eor	r19, r19
     c0a:	27 fd       	sbrc	r18, 7
     c0c:	30 95       	com	r19
     c0e:	22 27       	eor	r18, r18
     c10:	33 0f       	add	r19, r19
     c12:	22 1f       	adc	r18, r18
     c14:	33 27       	eor	r19, r19
     c16:	c9 01       	movw	r24, r18
     c18:	08 95       	ret

00000c1a <LITE_MAKE_CC_FIFO_OUTPUT>:
     c1a:	bf 9a       	sbi	0x17, 7	; 23
     c1c:	08 95       	ret

00000c1e <LITE_MAKE_CC_FIFO_INPUT>:
     c1e:	bf 98       	cbi	0x17, 7	; 23
     c20:	08 95       	ret

00000c22 <LITE_SET_RADIO_CCA_PIN>:
LITE_ASSIGN_PIN(RADIO_CCA, D, 6);       // 
     c22:	96 9a       	sbi	0x12, 6	; 18
     c24:	08 95       	ret

00000c26 <LITE_CLR_RADIO_CCA_PIN>:
     c26:	96 98       	cbi	0x12, 6	; 18
     c28:	08 95       	ret

00000c2a <LITE_READ_RADIO_CCA_PIN>:
     c2a:	20 b3       	in	r18, 0x10	; 16
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	00 24       	eor	r0, r0
     c30:	22 0f       	add	r18, r18
     c32:	33 1f       	adc	r19, r19
     c34:	00 1c       	adc	r0, r0
     c36:	22 0f       	add	r18, r18
     c38:	33 1f       	adc	r19, r19
     c3a:	00 1c       	adc	r0, r0
     c3c:	23 2f       	mov	r18, r19
     c3e:	30 2d       	mov	r19, r0
     c40:	21 70       	andi	r18, 0x01	; 1
     c42:	30 70       	andi	r19, 0x00	; 0
     c44:	c9 01       	movw	r24, r18
     c46:	08 95       	ret

00000c48 <LITE_MAKE_RADIO_CCA_OUTPUT>:
     c48:	8e 9a       	sbi	0x11, 6	; 17
     c4a:	08 95       	ret

00000c4c <LITE_MAKE_RADIO_CCA_INPUT>:
     c4c:	8e 98       	cbi	0x11, 6	; 17
     c4e:	08 95       	ret

00000c50 <setCC2420Pins>:

 
void setCC2420Pins(){
 //CC2420 pins  
    LITE_MAKE_MISO_INPUT();
     c50:	0e 94 b3 03 	call	0x766	; 0x766 <LITE_MAKE_MISO_INPUT>
    LITE_MAKE_MOSI_OUTPUT();
     c54:	0e 94 9d 03 	call	0x73a	; 0x73a <LITE_MAKE_MOSI_OUTPUT>
    LITE_MAKE_SPI_SCK_OUTPUT();
     c58:	0e 94 c1 03 	call	0x782	; 0x782 <LITE_MAKE_SPI_SCK_OUTPUT>




//-------------------------------------------------------------------------
LITE_ASSIGN_PIN(CC_RSTN, A, 6); // chipcon reset
     c5c:	d6 9a       	sbi	0x1a, 6	; 26
LITE_ASSIGN_PIN(CC_VREN, A, 5); // chipcon power enable
     c5e:	d5 9a       	sbi	0x1a, 5	; 26
//LITE_ASSIGN_PIN(CC_FIFOP1, D, 7);  // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP, E, 6);        // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP1, E, 6);       // fifo interrupt
LITE_ASSIGN_PIN(CC_CCA, D, 6);  // 
LITE_ASSIGN_PIN(CC_SFD, D, 4);  // chipcon packet arrival
LITE_ASSIGN_PIN(CC_CS, B, 0);   // chipcon enable
     c60:	b8 98       	cbi	0x17, 0	; 23
//-------------------------------------------------------------------------
LITE_ASSIGN_PIN(CC_RSTN, A, 6); // chipcon reset
LITE_ASSIGN_PIN(CC_VREN, A, 5); // chipcon power enable
//LITE_ASSIGN_PIN(CC_FIFOP1, D, 7);  // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP, E, 6);        // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP1, E, 6);       // fifo interrupt
     c62:	16 98       	cbi	0x02, 6	; 2
LITE_ASSIGN_PIN(CC_CCA, D, 6);  // 
     c64:	8e 98       	cbi	0x11, 6	; 17
LITE_ASSIGN_PIN(CC_SFD, D, 4);  // chipcon packet arrival
     c66:	8c 98       	cbi	0x11, 4	; 17
LITE_ASSIGN_PIN(CC_CS, B, 0);   // chipcon enable
LITE_ASSIGN_PIN(CC_FIFO, B, 7); // chipcon fifo
     c68:	bf 98       	cbi	0x17, 7	; 23
LITE_ASSIGN_PIN(RADIO_CCA, D, 6);       // 
     c6a:	8e 98       	cbi	0x11, 6	; 17
    LITE_MAKE_CC_CCA_INPUT();
    LITE_MAKE_CC_SFD_INPUT();
    LITE_MAKE_CC_FIFO_INPUT();
    LITE_MAKE_RADIO_CCA_INPUT();
   
  }
     c6c:	08 95       	ret

00000c6e <initUSART>:

//No need to be called from main 
//This function is called when the system is being initilized and prints system start 
void initUSART()
{
    UBRR0H = 0;
     c6e:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 15;
     c72:	8f e0       	ldi	r24, 0x0F	; 15
     c74:	89 b9       	out	0x09, r24	; 9
    UCSR0A |= _BV(U2X0);        // double speed
     c76:	59 9a       	sbi	0x0b, 1	; 11
    UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);        // 8 data-bits, 1 stop-bit
     c78:	e5 e9       	ldi	r30, 0x95	; 149
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	86 60       	ori	r24, 0x06	; 6
     c80:	80 83       	st	Z, r24
    UCSR0B |= _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
     c82:	8a b1       	in	r24, 0x0a	; 10
     c84:	88 69       	ori	r24, 0x98	; 152
     c86:	8a b9       	out	0x0a, r24	; 10
    // Enable recieve/transmit/interrupts
    cFlag = 1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	80 93 58 03 	sts	0x0358, r24
    previous = 0;
     c8e:	10 92 7a 03 	sts	0x037A, r1
    status = 0;
     c92:	10 92 7b 03 	sts	0x037B, r1
}
     c96:	08 95       	ret

00000c98 <usartPrint>:

//-------------------------------------------------------------------------
void usartPrint(uint8_t c)
{
     c98:	1f 93       	push	r17
     c9a:	18 2f       	mov	r17, r24
    if (cFlag == 0)
     c9c:	80 91 58 03 	lds	r24, 0x0358
     ca0:	88 23       	and	r24, r24
     ca2:	29 f0       	breq	.+10     	; 0xcae <usartPrint+0x16>
    {
        initUSART();
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
     ca4:	5d 9b       	sbis	0x0b, 5	; 11
     ca6:	fe cf       	rjmp	.-4      	; 0xca4 <usartPrint+0xc>
        ;
    UDR0 = c;
     ca8:	1c b9       	out	0x0c, r17	; 12
}
     caa:	1f 91       	pop	r17
     cac:	08 95       	ret
//-------------------------------------------------------------------------
void usartPrint(uint8_t c)
{
    if (cFlag == 0)
    {
        initUSART();
     cae:	0e 94 37 06 	call	0xc6e	; 0xc6e <initUSART>
     cb2:	f8 cf       	rjmp	.-16     	; 0xca4 <usartPrint+0xc>

00000cb4 <usartPrint_base>:
        ;
    UDR0 = c;
}

void usartPrint_base(uint8_t c)
{
     cb4:	1f 93       	push	r17
     cb6:	18 2f       	mov	r17, r24
    if (cFlag == 0)
     cb8:	80 91 58 03 	lds	r24, 0x0358
     cbc:	88 23       	and	r24, r24
     cbe:	29 f0       	breq	.+10     	; 0xcca <usartPrint_base+0x16>
    {
        initUSART();
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
     cc0:	5d 9b       	sbis	0x0b, 5	; 11
     cc2:	fe cf       	rjmp	.-4      	; 0xcc0 <usartPrint_base+0xc>
        ;
    UDR0 = c;
     cc4:	1c b9       	out	0x0c, r17	; 12
}
     cc6:	1f 91       	pop	r17
     cc8:	08 95       	ret

void usartPrint_base(uint8_t c)
{
    if (cFlag == 0)
    {
        initUSART();
     cca:	0e 94 37 06 	call	0xc6e	; 0xc6e <initUSART>
     cce:	f8 cf       	rjmp	.-16     	; 0xcc0 <usartPrint_base+0xc>

00000cd0 <printString>:



//-------------------------------------------------------------------------
void printString(char *p)
{
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	ec 01       	movw	r28, r24
    usartPrint(0xFC);
     cd6:	8c ef       	ldi	r24, 0xFC	; 252
     cd8:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    while ((*p) != '\0')
     cdc:	88 81       	ld	r24, Y
     cde:	88 23       	and	r24, r24
     ce0:	31 f0       	breq	.+12     	; 0xcee <printString+0x1e>
    {
        usartPrint(*p);
     ce2:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
        p++;
     ce6:	21 96       	adiw	r28, 0x01	; 1

//-------------------------------------------------------------------------
void printString(char *p)
{
    usartPrint(0xFC);
    while ((*p) != '\0')
     ce8:	88 81       	ld	r24, Y
     cea:	88 23       	and	r24, r24
     cec:	d1 f7       	brne	.-12     	; 0xce2 <printString+0x12>
    {
        usartPrint(*p);
        p++;
    }
    usartPrint(0xFC);
     cee:	8c ef       	ldi	r24, 0xFC	; 252
     cf0:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <printStringN>:

//-------------------------------------------------------------------------
void printStringN(char *p, uint8_t n)
{
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	08 2f       	mov	r16, r24
     d06:	f9 2e       	mov	r15, r25
     d08:	16 2f       	mov	r17, r22
    uint8_t i;

    usartPrint(0xFC);
     d0a:	8c ef       	ldi	r24, 0xFC	; 252
     d0c:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    for (i = 0; i < n; i++)
     d10:	11 23       	and	r17, r17
     d12:	59 f0       	breq	.+22     	; 0xd2a <printStringN+0x30>
     d14:	80 2f       	mov	r24, r16
     d16:	9f 2d       	mov	r25, r15
     d18:	9c 01       	movw	r18, r24
     d1a:	e9 01       	movw	r28, r18
    {
        usartPrint(*p);
     d1c:	89 91       	ld	r24, Y+
     d1e:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
void printStringN(char *p, uint8_t n)
{
    uint8_t i;

    usartPrint(0xFC);
    for (i = 0; i < n; i++)
     d22:	9e 01       	movw	r18, r28
     d24:	20 1b       	sub	r18, r16
     d26:	21 17       	cp	r18, r17
     d28:	c8 f3       	brcs	.-14     	; 0xd1c <printStringN+0x22>
    {
        usartPrint(*p);
        p++;
    }
    usartPrint(0xFC);
     d2a:	8c ef       	ldi	r24, 0xFC	; 252
     d2c:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
}
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	08 95       	ret

00000d3c <printStringN_base>:


//-------------------------------------------------------------------------
void printStringN_base(char *p, uint8_t n)
{
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	08 2f       	mov	r16, r24
     d46:	16 2f       	mov	r17, r22
    uint8_t i;

    //usartPrint(0xFC);
    for (i = 0; i < n; i++)
     d48:	66 23       	and	r22, r22
     d4a:	49 f0       	breq	.+18     	; 0xd5e <printStringN_base+0x22>
     d4c:	9c 01       	movw	r18, r24
     d4e:	e9 01       	movw	r28, r18
    {
        usartPrint_base(*p);
     d50:	89 91       	ld	r24, Y+
     d52:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <usartPrint_base>
void printStringN_base(char *p, uint8_t n)
{
    uint8_t i;

    //usartPrint(0xFC);
    for (i = 0; i < n; i++)
     d56:	9e 01       	movw	r18, r28
     d58:	20 1b       	sub	r18, r16
     d5a:	21 17       	cp	r18, r17
     d5c:	c8 f3       	brcs	.-14     	; 0xd50 <printStringN_base+0x14>
    {
        usartPrint_base(*p);
        p++;
    }
    //usartPrint(0xFC);
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	08 95       	ret

00000d68 <usartPutChipHex>:


//-------------------------------------------------------------------------
void usartPutChipHex(uint8_t cChip)
{
    if (cChip > 9)
     d68:	8a 30       	cpi	r24, 0x0A	; 10
     d6a:	20 f4       	brcc	.+8      	; 0xd74 <usartPutChipHex+0xc>
    {
        usartPrint('a' + cChip - 10);
    }
    else
    {
        usartPrint('0' + cChip);
     d6c:	80 5d       	subi	r24, 0xD0	; 208
     d6e:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
     d72:	08 95       	ret
//-------------------------------------------------------------------------
void usartPutChipHex(uint8_t cChip)
{
    if (cChip > 9)
    {
        usartPrint('a' + cChip - 10);
     d74:	89 5a       	subi	r24, 0xA9	; 169
     d76:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
     d7a:	08 95       	ret

00000d7c <usartPutLong2>:
    }
}

//-------------------------------------------------------------------------
void usartPutLong2(uint32_t l)
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <usartPutLong2+0x6>
     d82:	00 d0       	rcall	.+0      	; 0xd84 <usartPutLong2+0x8>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	69 83       	std	Y+1, r22	; 0x01
     d8a:	7a 83       	std	Y+2, r23	; 0x02
     d8c:	8b 83       	std	Y+3, r24	; 0x03
     d8e:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

    usartPrint(*pcByte);
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
     d92:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <usartPutHex>:

//-------------------------------------------------------------------------
void usartPutHex(uint8_t c)
{
     db6:	1f 93       	push	r17
     db8:	18 2f       	mov	r17, r24
    usartPutChipHex(c >> 4);
     dba:	82 95       	swap	r24
     dbc:	8f 70       	andi	r24, 0x0F	; 15
     dbe:	0e 94 b4 06 	call	0xd68	; 0xd68 <usartPutChipHex>
    usartPutChipHex(c & 0xf);
     dc2:	81 2f       	mov	r24, r17
     dc4:	8f 70       	andi	r24, 0x0F	; 15
     dc6:	0e 94 b4 06 	call	0xd68	; 0xd68 <usartPutChipHex>
}
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <printInteger32>:

//-------------------------------------------------------------------------
void printInteger32(int32_t a)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <printInteger32+0x6>
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <printInteger32+0x8>
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	69 83       	std	Y+1, r22	; 0x01
     ddc:	7a 83       	std	Y+2, r23	; 0x02
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	9c 83       	std	Y+4, r25	; 0x04
    usartPrint(0xFD);
     de2:	8d ef       	ldi	r24, 0xFD	; 253
     de4:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPutLong2(*(uint32_t *) (&a));
     de8:	69 81       	ldd	r22, Y+1	; 0x01
     dea:	7a 81       	ldd	r23, Y+2	; 0x02
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	0e 94 be 06 	call	0xd7c	; 0xd7c <usartPutLong2>
    usartPrint(0xFD);
     df4:	8d ef       	ldi	r24, 0xFD	; 253
     df6:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
}
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <printIntegerU32>:

//-------------------------------------------------------------------------
void printIntegerU32(uint32_t l)
{
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	7b 01       	movw	r14, r22
     e12:	8c 01       	movw	r16, r24
    usartPrint(0xFE);
     e14:	8e ef       	ldi	r24, 0xFE	; 254
     e16:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPutLong2(l);
     e1a:	c8 01       	movw	r24, r16
     e1c:	b7 01       	movw	r22, r14
     e1e:	0e 94 be 06 	call	0xd7c	; 0xd7c <usartPutLong2>
    usartPrint(0xFE);
     e22:	8e ef       	ldi	r24, 0xFE	; 254
     e24:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
}
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	08 95       	ret

00000e32 <printStringLn>:


void printStringLn()
{
	  usartPrint(0xFC);
     e32:	8c ef       	ldi	r24, 0xFC	; 252
     e34:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPrint(0x6D);
     e38:	8d e6       	ldi	r24, 0x6D	; 109
     e3a:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPrint(0x6D);
     e3e:	8d e6       	ldi	r24, 0x6D	; 109
     e40:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPrint(0x6D);
     e44:	8d e6       	ldi	r24, 0x6D	; 109
     e46:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPrint(0xFC);
     e4a:	8c ef       	ldi	r24, 0xFC	; 252
     e4c:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    
}
     e50:	08 95       	ret

00000e52 <usartPutLong>:
//-------------------------------------------------------------------------
void usartPutLong(uint32_t l)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <usartPutLong+0x6>
     e58:	00 d0       	rcall	.+0      	; 0xe5a <usartPutLong+0x8>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	69 83       	std	Y+1, r22	; 0x01
     e60:	7a 83       	std	Y+2, r23	; 0x02
     e62:	8b 83       	std	Y+3, r24	; 0x03
     e64:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

    usartPrint('0');
     e66:	80 e3       	ldi	r24, 0x30	; 48
     e68:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPrint('x');
     e6c:	88 e7       	ldi	r24, 0x78	; 120
     e6e:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPutHex(*pcByte);
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	0e 94 db 06 	call	0xdb6	; 0xdb6 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	0e 94 db 06 	call	0xdb6	; 0xdb6 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	0e 94 db 06 	call	0xdb6	; 0xdb6 <usartPutHex>
}
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <printInteger>:

//-------------------------------------------------------------------------
void printInteger(int32_t a, int32_t b, int32_t c, int32_t d)
{
     e98:	af 92       	push	r10
     e9a:	bf 92       	push	r11
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	0f 93       	push	r16
     ea6:	1f 93       	push	r17
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	60 97       	sbiw	r28, 0x10	; 16
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	69 83       	std	Y+1, r22	; 0x01
     ebe:	7a 83       	std	Y+2, r23	; 0x02
     ec0:	8b 83       	std	Y+3, r24	; 0x03
     ec2:	9c 83       	std	Y+4, r25	; 0x04
     ec4:	2d 83       	std	Y+5, r18	; 0x05
     ec6:	3e 83       	std	Y+6, r19	; 0x06
     ec8:	4f 83       	std	Y+7, r20	; 0x07
     eca:	58 87       	std	Y+8, r21	; 0x08
     ecc:	e9 86       	std	Y+9, r14	; 0x09
     ece:	fa 86       	std	Y+10, r15	; 0x0a
     ed0:	0b 87       	std	Y+11, r16	; 0x0b
     ed2:	1c 87       	std	Y+12, r17	; 0x0c
     ed4:	ad 86       	std	Y+13, r10	; 0x0d
     ed6:	be 86       	std	Y+14, r11	; 0x0e
     ed8:	cf 86       	std	Y+15, r12	; 0x0f
     eda:	d8 8a       	std	Y+16, r13	; 0x10
    usartPrint(1);
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
    usartPutLong(*(uint32_t *) (&a));
     ee2:	69 81       	ldd	r22, Y+1	; 0x01
     ee4:	7a 81       	ldd	r23, Y+2	; 0x02
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	9c 81       	ldd	r25, Y+4	; 0x04
     eea:	0e 94 29 07 	call	0xe52	; 0xe52 <usartPutLong>
    usartPutLong(*(uint32_t *) (&b));
     eee:	6d 81       	ldd	r22, Y+5	; 0x05
     ef0:	7e 81       	ldd	r23, Y+6	; 0x06
     ef2:	8f 81       	ldd	r24, Y+7	; 0x07
     ef4:	98 85       	ldd	r25, Y+8	; 0x08
     ef6:	0e 94 29 07 	call	0xe52	; 0xe52 <usartPutLong>
    usartPutLong(*(uint32_t *) (&c));
     efa:	69 85       	ldd	r22, Y+9	; 0x09
     efc:	7a 85       	ldd	r23, Y+10	; 0x0a
     efe:	8b 85       	ldd	r24, Y+11	; 0x0b
     f00:	9c 85       	ldd	r25, Y+12	; 0x0c
     f02:	0e 94 29 07 	call	0xe52	; 0xe52 <usartPutLong>
    usartPutLong(*(uint32_t *) (&d));
     f06:	6d 85       	ldd	r22, Y+13	; 0x0d
     f08:	7e 85       	ldd	r23, Y+14	; 0x0e
     f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0c:	98 89       	ldd	r25, Y+16	; 0x10
     f0e:	0e 94 29 07 	call	0xe52	; 0xe52 <usartPutLong>
}
     f12:	60 96       	adiw	r28, 0x10	; 16
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	bf 90       	pop	r11
     f30:	af 90       	pop	r10
     f32:	08 95       	ret

00000f34 <__vector_18>:


SIGNAL(USART0_RX_vect)
{
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	0b b6       	in	r0, 0x3b	; 59
     f3e:	0f 92       	push	r0
     f40:	11 24       	eor	r1, r1
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
    uint8_t dummy = UDR0;
     f68:	0c b1       	in	r16, 0x0c	; 12
    uint8_t i;
    uint8_t isthreadtrue;
    _atomic_t _atomic;

    isthreadtrue = 0;
    _atomic = _atomic_start();
     f6a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
     f6e:	18 2f       	mov	r17, r24
    if (is_thread())
     f70:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <is_thread>
     f74:	88 23       	and	r24, r24
     f76:	b9 f5       	brne	.+110    	; 0xfe6 <__vector_18+0xb2>
     f78:	19 82       	std	Y+1, r1	; 0x01
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
     f7a:	81 2f       	mov	r24, r17
     f7c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    if (dummy == 'a')
     f80:	01 36       	cpi	r16, 0x61	; 97
     f82:	09 f4       	brne	.+2      	; 0xf86 <__vector_18+0x52>
     f84:	44 c0       	rjmp	.+136    	; 0x100e <__vector_18+0xda>
        //initCommandReceived(receivebuffer); 
        //serialDeliverPacket(((uint16_t) portnum), ((uint8_t) length),
                            //&receivebuffer[0]);
        currentindex = 0;
    }
    else if (dummy == 'z')
     f86:	0a 37       	cpi	r16, 0x7A	; 122
     f88:	09 f4       	brne	.+2      	; 0xf8c <__vector_18+0x58>
     f8a:	5e c0       	rjmp	.+188    	; 0x1048 <__vector_18+0x114>
        }
        _atomic_end(_atomic);
        initCommandReceived(receivebuffer);
        currentindex = 0;
    }
    _atomic = _atomic_start();
     f8c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
     f90:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	61 f4       	brne	.+24     	; 0xfb0 <__vector_18+0x7c>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
     f98:	8d b7       	in	r24, 0x3d	; 61
     f9a:	9e b7       	in	r25, 0x3e	; 62
     f9c:	90 93 8b 05 	sts	0x058B, r25
     fa0:	80 93 8a 05 	sts	0x058A, r24
     fa4:	80 91 2b 06 	lds	r24, 0x062B
     fa8:	90 91 2c 06 	lds	r25, 0x062C
     fac:	9e bf       	out	0x3e, r25	; 62
     fae:	8d bf       	out	0x3d, r24	; 61
        //thread_yield();   
    }
    _atomic_end(_atomic);
     fb0:	82 2f       	mov	r24, r18
     fb2:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    // if (is_thread())
    // {
    //   SWAP_STACK_PTR( old_stack_ptr, stackinterrupt_ptr);
    //  thread_yield();   
    // }
}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	ff 91       	pop	r31
     fbe:	ef 91       	pop	r30
     fc0:	bf 91       	pop	r27
     fc2:	af 91       	pop	r26
     fc4:	9f 91       	pop	r25
     fc6:	8f 91       	pop	r24
     fc8:	7f 91       	pop	r23
     fca:	6f 91       	pop	r22
     fcc:	5f 91       	pop	r21
     fce:	4f 91       	pop	r20
     fd0:	3f 91       	pop	r19
     fd2:	2f 91       	pop	r18
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	0f 90       	pop	r0
     fda:	0b be       	out	0x3b, r0	; 59
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	0f 90       	pop	r0
     fe2:	1f 90       	pop	r1
     fe4:	18 95       	reti
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
     fe6:	8d b7       	in	r24, 0x3d	; 61
     fe8:	9e b7       	in	r25, 0x3e	; 62
     fea:	90 93 2c 06 	sts	0x062C, r25
     fee:	80 93 2b 06 	sts	0x062B, r24
     ff2:	80 91 8a 05 	lds	r24, 0x058A
     ff6:	90 91 8b 05 	lds	r25, 0x058B
     ffa:	9e bf       	out	0x3e, r25	; 62
     ffc:	8d bf       	out	0x3d, r24	; 61
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
    }
    _atomic_end(_atomic);
    1002:	81 2f       	mov	r24, r17
    1004:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    if (dummy == 'a')
    1008:	01 36       	cpi	r16, 0x61	; 97
    100a:	09 f0       	breq	.+2      	; 0x100e <__vector_18+0xda>
    100c:	bc cf       	rjmp	.-136    	; 0xf86 <__vector_18+0x52>
    {
        _atomic_t _atomic = _atomic_start();
    100e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    1012:	98 2f       	mov	r25, r24

        while (!(UCSR0A & (1 << RXC0)))
    1014:	5f 9b       	sbis	0x0b, 7	; 11
    1016:	fe cf       	rjmp	.-4      	; 0x1014 <__vector_18+0xe0>
            ;
        portnum = UDR0;
    1018:	8c b1       	in	r24, 0x0c	; 12
        portnum = portnum - 48;
        while (!(UCSR0A & (1 << RXC0)))
    101a:	5f 9b       	sbis	0x0b, 7	; 11
    101c:	fe cf       	rjmp	.-4      	; 0x101a <__vector_18+0xe6>
            ;
        length = UDR0;
    101e:	8c b1       	in	r24, 0x0c	; 12
        length = length - 48;
        for (i = 0; i < length; i++)
    1020:	80 33       	cpi	r24, 0x30	; 48
    1022:	71 f0       	breq	.+28     	; 0x1040 <__vector_18+0x10c>
    1024:	e9 e5       	ldi	r30, 0x59	; 89
    1026:	f3 e0       	ldi	r31, 0x03	; 3
    1028:	81 53       	subi	r24, 0x31	; 49
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	26 5a       	subi	r18, 0xA6	; 166
    1030:	3c 4f       	sbci	r19, 0xFC	; 252
        {
            while (!(UCSR0A & (1 << RXC0)))
    1032:	5f 9b       	sbis	0x0b, 7	; 11
    1034:	fe cf       	rjmp	.-4      	; 0x1032 <__vector_18+0xfe>
                ;
            receivebuffer[currentindex++] = UDR0;
    1036:	8c b1       	in	r24, 0x0c	; 12
    1038:	81 93       	st	Z+, r24
        portnum = portnum - 48;
        while (!(UCSR0A & (1 << RXC0)))
            ;
        length = UDR0;
        length = length - 48;
        for (i = 0; i < length; i++)
    103a:	e2 17       	cp	r30, r18
    103c:	f3 07       	cpc	r31, r19
    103e:	c9 f7       	brne	.-14     	; 0x1032 <__vector_18+0xfe>
        {
            while (!(UCSR0A & (1 << RXC0)))
                ;
            receivebuffer[currentindex++] = UDR0;
        }
        _atomic_end(_atomic);
    1040:	89 2f       	mov	r24, r25
    1042:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    1046:	a2 cf       	rjmp	.-188    	; 0xf8c <__vector_18+0x58>
                            //&receivebuffer[0]);
        currentindex = 0;
    }
    else if (dummy == 'z')
    {
        _atomic_t _atomic = _atomic_start();
    1048:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    104c:	98 2f       	mov	r25, r24
    104e:	09 e5       	ldi	r16, 0x59	; 89
    1050:	13 e0       	ldi	r17, 0x03	; 3

        for (i = 0; i < 33; i++)
        {
            while (!(UCSR0A & (1 << RXC0)))
    1052:	5f 9b       	sbis	0x0b, 7	; 11
    1054:	fe cf       	rjmp	.-4      	; 0x1052 <__vector_18+0x11e>
                ;
            receivebuffer[currentindex++] = UDR0;
    1056:	8c b1       	in	r24, 0x0c	; 12
    1058:	f8 01       	movw	r30, r16
    105a:	81 93       	st	Z+, r24
    105c:	8f 01       	movw	r16, r30
    }
    else if (dummy == 'z')
    {
        _atomic_t _atomic = _atomic_start();

        for (i = 0; i < 33; i++)
    105e:	f3 e0       	ldi	r31, 0x03	; 3
    1060:	0a 37       	cpi	r16, 0x7A	; 122
    1062:	1f 07       	cpc	r17, r31
    1064:	b1 f7       	brne	.-20     	; 0x1052 <__vector_18+0x11e>
        {
            while (!(UCSR0A & (1 << RXC0)))
                ;
            receivebuffer[currentindex++] = UDR0;
        }
        _atomic_end(_atomic);
    1066:	89 2f       	mov	r24, r25
    1068:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
        initCommandReceived(receivebuffer);
    106c:	c8 01       	movw	r24, r16
    106e:	81 97       	sbiw	r24, 0x21	; 33
    1070:	0e 94 06 02 	call	0x40c	; 0x40c <initCommandReceived>
    1074:	8b cf       	rjmp	.-234    	; 0xf8c <__vector_18+0x58>

00001076 <printfintegeru32>:
   _atomic_end(currentatomic); 
}

//-------------------------------------------------------------------------
void printfintegeru32(uint32_t val)
{
    1076:	df 92       	push	r13
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	7b 01       	movw	r14, r22
    1082:	8c 01       	movw	r16, r24
	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    1084:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    1088:	d8 2e       	mov	r13, r24
    
#ifdef PLATFORM_AVR
  #ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
    108a:	0e 94 32 02 	call	0x464	; 0x464 <node_readnodestring>
    108e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  printString(": ");
    1092:	84 e3       	ldi	r24, 0x34	; 52
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	#endif
    printIntegerU32(val);
    109a:	c8 01       	movw	r24, r16
    109c:	b7 01       	movw	r22, r14
    109e:	0e 94 04 07 	call	0xe08	; 0xe08 <printIntegerU32>
#endif
_atomic_end(currentatomic); 
    10a2:	8d 2d       	mov	r24, r13
    10a4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	08 95       	ret

000010b4 <printfstr>:
#include "../avrserial/serialprint.h"
#endif


void printfstr(char *str)
{
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	8c 01       	movw	r16, r24
	
	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    10bc:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    10c0:	f8 2e       	mov	r15, r24
#ifdef PLATFORM_AVR
		#ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
    10c2:	0e 94 32 02 	call	0x464	; 0x464 <node_readnodestring>
    10c6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  printString(": ");
    10ca:	84 e3       	ldi	r24, 0x34	; 52
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  #endif
    printString(str);
    10d2:	c8 01       	movw	r24, r16
    10d4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
#endif
  _atomic_end(currentatomic);
    10d8:	8f 2d       	mov	r24, r15
    10da:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	08 95       	ret

000010e6 <printfinteger32>:
#endif
}

//-------------------------------------------------------------------------
void printfinteger32(int32_t val)
{
    10e6:	df 92       	push	r13
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	7b 01       	movw	r14, r22
    10f2:	8c 01       	movw	r16, r24
	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    10f4:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    10f8:	d8 2e       	mov	r13, r24
#ifdef PLATFORM_AVR
	#ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
    10fa:	0e 94 32 02 	call	0x464	; 0x464 <node_readnodestring>
    10fe:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  printString(": ");
    1102:	84 e3       	ldi	r24, 0x34	; 52
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	#endif
    printInteger32(val);
    110a:	c8 01       	movw	r24, r16
    110c:	b7 01       	movw	r22, r14
    110e:	0e 94 e7 06 	call	0xdce	; 0xdce <printInteger32>
#endif
   _atomic_end(currentatomic); 
    1112:	8d 2d       	mov	r24, r13
    1114:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	08 95       	ret

00001124 <printfval>:

//-------------------------------------------------------------------------
void printfval(uint8_t val)
{
#ifdef PLATFORM_AVR
    usartPrint(val);
    1124:	0e 94 4c 06 	call	0xc98	; 0xc98 <usartPrint>
#endif
}
    1128:	08 95       	ret

0000112a <printfstrlen_base>:
}

void printfstrlen_base(char *str, uint8_t len)
{
#ifdef PLATFORM_AVR
    printStringN_base(str, len);
    112a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <printStringN_base>
#endif
}
    112e:	08 95       	ret

00001130 <printfstrlen>:
  
 }

//-------------------------------------------------------------------------
void printfstrlen(char *str, uint8_t len)
{
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	8c 01       	movw	r16, r24
    1138:	f6 2e       	mov	r15, r22
#ifdef PLATFORM_AVR
    #ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
    113a:	0e 94 32 02 	call	0x464	; 0x464 <node_readnodestring>
    113e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  printString(": ");
    1142:	84 e3       	ldi	r24, 0x34	; 52
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	0e 94 68 06 	call	0xcd0	; 0xcd0 <printString>
	  #endif
    printStringN(str, len);
    114a:	c8 01       	movw	r24, r16
    114c:	6f 2d       	mov	r22, r15
    114e:	0e 94 7d 06 	call	0xcfa	; 0xcfa <printStringN>
#endif
}
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	08 95       	ret

0000115a <printfstrln>:
#endif
  _atomic_end(currentatomic);
}

void printfstrln()
 {
    115a:	1f 93       	push	r17
 	_atomic_t currentatomic;

    currentatomic = _atomic_start();
    115c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    1160:	18 2f       	mov	r17, r24
  #ifdef PLATFORM_AVR
     printStringLn();
    1162:	0e 94 19 07 	call	0xe32	; 0xe32 <printStringLn>
  #endif
  _atomic_end(currentatomic);
    1166:	81 2f       	mov	r24, r17
    1168:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
  
 }
    116c:	1f 91       	pop	r17
    116e:	08 95       	ret

00001170 <AMStandard_SendMsg_default_sendDone>:
//-------------------------------------------------------------------------
inline result_t AMStandard_SendMsg_default_sendDone(uint8_t id, Radio_MsgPtr
                                                    msg, result_t success)
{
    return SUCCESS;
}
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	08 95       	ret

00001174 <AMStandard_SendMsg_sendDone>:
inline result_t AMStandard_SendMsg_sendDone(uint16_t arg_0xa3b8f90,
                                            Radio_MsgPtr arg_0xa31a0a0,
                                            result_t arg_0xa31a1f0)
{
    return 0;
}
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	08 95       	ret

00001178 <AMStandard_default_sendDone>:

//-------------------------------------------------------------------------
inline result_t AMStandard_default_sendDone(void)
{
    return SUCCESS;
}
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	08 95       	ret

0000117c <AMStandard_sendDone>:
{
    unsigned char result;

    result = AMStandard_default_sendDone();
    return result;
}
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	08 95       	ret

00001180 <AMStandard_ReceiveMsg_default_receive>:

//-------------------------------------------------------------------------
inline Radio_MsgPtr AMStandard_ReceiveMsg_default_receive(uint8_t id,
                                                          Radio_MsgPtr msg)
{
    1180:	cb 01       	movw	r24, r22
    return msg;
}
    1182:	08 95       	ret

00001184 <AMStandard_ReceiveMsg_receive>:

//Another critical function that bridges to the application 
inline Radio_MsgPtr AMStandard_ReceiveMsg_receive(uint16_t port, Radio_MsgPtr
                                                  msg)
{
    1184:	cb 01       	movw	r24, r22
    return msg;
}
    1186:	08 95       	ret

00001188 <AMStandard_RadioSend_sendDone>:
}

//-------------------------------------------------------------------------
result_t AMStandard_reportSendDone(Radio_MsgPtr msg, result_t success)
{
    AMStandard_state = FALSE;
    1188:	10 92 45 04 	sts	0x0445, r1
//-------------------------------------------------------------------------
inline result_t AMStandard_RadioSend_sendDone(Radio_MsgPtr msg, result_t
                                              success)
{
    return AMStandard_reportSendDone(msg, success);
}
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	08 95       	ret

00001190 <AMStandard_reportSendDone>:

//-------------------------------------------------------------------------
result_t AMStandard_reportSendDone(Radio_MsgPtr msg, result_t success)
{
    AMStandard_state = FALSE;
    1190:	10 92 45 04 	sts	0x0445, r1
    //  AMStandard_SendMsg_sendDone(msg->port, msg, success);
    //  AMStandard_sendDone();
    return SUCCESS;
}
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	08 95       	ret

00001198 <restoreRadioState>:

//-------------------------------------------------------------------------
inline void restoreRadioState()
{
    AMStandard_state = FALSE;
    1198:	10 92 45 04 	sts	0x0445, r1
#if defined(PLATFORM_AVR) && defined (RADIO_CC2420)
    restorecc2420state();
    119c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <restorecc2420state>
#endif
}
    11a0:	08 95       	ret

000011a2 <received>:
//Basically it returns a radio message pointer that must be reused 
//and the content of the packet is the correct packet parsed, and is useful 
//The content starts with a length that is the actual payload length and all information are correct
//Must copy this content to the user supplied buffer, put the user action into a task, and then return this buffer to the recevie module 
Radio_MsgPtr received(Radio_MsgPtr packet)
{
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
    uint16_t addr = CURRENT_NODE_ID;
    11a8:	20 91 32 04 	lds	r18, 0x0432
    11ac:	30 91 33 04 	lds	r19, 0x0433
#ifdef TRACE_ENABLE
#ifdef TRACE_ENABLE_RADIOEVENT
    addTrace(TRACE_RADIOEVENT_RECEIVEPACKET, 100);
#endif
#endif
    AMStandard_counter++;
    11b0:	80 91 46 04 	lds	r24, 0x0446
    11b4:	90 91 47 04 	lds	r25, 0x0447
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	90 93 47 04 	sts	0x0447, r25
    11be:	80 93 46 04 	sts	0x0446, r24
    if (packet->crc == 1 && (packet->addr == BCAST_ADDRESS || packet->addr ==
    11c2:	c0 59       	subi	r28, 0x90	; 144
    11c4:	df 4f       	sbci	r29, 0xFF	; 255
    11c6:	88 81       	ld	r24, Y
    11c8:	c0 57       	subi	r28, 0x70	; 112
    11ca:	d0 40       	sbci	r29, 0x00	; 0
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	21 f0       	breq	.+8      	; 0x11d8 <received+0x36>
        {
            packet = tmp;
        }
    }
    return packet;
}
    11d0:	ce 01       	movw	r24, r28
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret
#ifdef TRACE_ENABLE_RADIOEVENT
    addTrace(TRACE_RADIOEVENT_RECEIVEPACKET, 100);
#endif
#endif
    AMStandard_counter++;
    if (packet->crc == 1 && (packet->addr == BCAST_ADDRESS || packet->addr ==
    11d8:	8e 81       	ldd	r24, Y+6	; 0x06
    11da:	9f 81       	ldd	r25, Y+7	; 0x07
    11dc:	4f ef       	ldi	r20, 0xFF	; 255
    11de:	8f 3f       	cpi	r24, 0xFF	; 255
    11e0:	94 07       	cpc	r25, r20
    11e2:	19 f0       	breq	.+6      	; 0x11ea <received+0x48>
    11e4:	28 17       	cp	r18, r24
    11e6:	39 07       	cpc	r19, r25
    11e8:	99 f7       	brne	.-26     	; 0x11d0 <received+0x2e>
                             addr))
    {
        uint16_t port = packet->port;
        Radio_MsgPtr tmp;

        tmp = Standard_Receive_Packet(port, packet);
    11ea:	88 85       	ldd	r24, Y+8	; 0x08
    11ec:	99 85       	ldd	r25, Y+9	; 0x09
    11ee:	be 01       	movw	r22, r28
    11f0:	0e 94 2f 0a 	call	0x145e	; 0x145e <Standard_Receive_Packet>
        if (tmp)
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	61 f3       	breq	.-40     	; 0x11d0 <received+0x2e>
    11f8:	ec 01       	movw	r28, r24
        {
            packet = tmp;
        }
    }
    return packet;
}
    11fa:	ce 01       	movw	r24, r28
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <AMStandard_SendMsg_send>:

//addr means the current broadcast address, et. id is the port 
//Send out a message and takes a while to complete 
result_t AMStandard_SendMsg_send(uint16_t port, uint16_t addr, uint8_t length,
                                 Radio_MsgPtr data)
{
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	7c 01       	movw	r14, r24
    1212:	8b 01       	movw	r16, r22
    1214:	d4 2e       	mov	r13, r20
    1216:	e9 01       	movw	r28, r18
#ifdef TRACE_ENABLE
#ifdef TRACE_ENABLE_RADIOEVENT
    addTrace(TRACE_RADIOEVENT_SENDPACKET, 100);
#endif
#endif
    if (!AMStandard_state)
    1218:	80 91 45 04 	lds	r24, 0x0445
    121c:	88 23       	and	r24, r24
    121e:	41 f4       	brne	.+16     	; 0x1230 <AMStandard_SendMsg_send+0x2e>
    {
        AMStandard_state = TRUE;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	80 93 45 04 	sts	0x0445, r24
        if (length > DATA_LENGTH)
    1226:	84 e6       	ldi	r24, 0x64	; 100
    1228:	84 17       	cp	r24, r20
    122a:	58 f4       	brcc	.+22     	; 0x1242 <AMStandard_SendMsg_send+0x40>
        {
            AMStandard_state = FALSE;
    122c:	10 92 45 04 	sts	0x0445, r1
    1230:	80 e0       	ldi	r24, 0x00	; 0
            data->port = port;
        }
        return SUCCESS;
    }
    return FAIL;
}
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	08 95       	ret
        if (length > DATA_LENGTH)
        {
            AMStandard_state = FALSE;
            return FAIL;
        }
        if (!postTask(AMStandard_sendTask, 20))
    1242:	8f e5       	ldi	r24, 0x5F	; 95
    1244:	99 e0       	ldi	r25, 0x09	; 9
    1246:	64 e1       	ldi	r22, 0x14	; 20
    1248:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    124c:	88 23       	and	r24, r24
    124e:	91 f0       	breq	.+36     	; 0x1274 <AMStandard_SendMsg_send+0x72>
        {
            //length is the first one that means the actual data length
            //adr is the next hop id
            //type is the port
            //group is manmade result 
            AMStandard_buffer = data;
    1250:	d0 93 4b 04 	sts	0x044B, r29
    1254:	c0 93 4a 04 	sts	0x044A, r28
            data->length = length;
    1258:	d8 82       	st	Y, r13
            data->addr = addr;
    125a:	1f 83       	std	Y+7, r17	; 0x07
    125c:	0e 83       	std	Y+6, r16	; 0x06
            data->port = port;
    125e:	f9 86       	std	Y+9, r15	; 0x09
    1260:	e8 86       	std	Y+8, r14	; 0x08
    1262:	81 e0       	ldi	r24, 0x01	; 1
        }
        return SUCCESS;
    }
    return FAIL;
}
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	df 90       	pop	r13
    1272:	08 95       	ret
        if (!postTask(AMStandard_sendTask, 20))
        {
            {
            }
            ;
            AMStandard_state = FALSE;
    1274:	10 92 45 04 	sts	0x0445, r1
    1278:	dc cf       	rjmp	.-72     	; 0x1232 <AMStandard_SendMsg_send+0x30>

0000127a <AMStandard_RadioControl_start>:
{
    unsigned char result;
	result = 0; 

#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    result = cc2420radiom_StdControl_start();
    127a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <cc2420radiom_StdControl_start>
#endif
    return result;
}
    127e:	08 95       	ret

00001280 <AMStandard_Control_start>:
{
    unsigned char result;
	result = 0; 

#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    result = cc2420radiom_StdControl_start();
    1280:	0e 94 56 0d 	call	0x1aac	; 0x1aac <cc2420radiom_StdControl_start>
//-------------------------------------------------------------------------
inline bool AMStandard_Control_start(void)
{
    result_t ok2 = AMStandard_RadioControl_start();

    AMStandard_state = FALSE;
    1284:	10 92 45 04 	sts	0x0445, r1
    return ok2;
}
    1288:	08 95       	ret

0000128a <AMStandard_Control_init>:
    result_t ok2;
	ok2 = 0; 


#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    ok2 = cc2420radiom_SplitControl_init();
    128a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <cc2420radiom_SplitControl_init>

#if defined(PLATFORM_AVR) && defined(RADIO_RF230)
    ok2 = trx_init();
#endif 

    AMStandard_state = FALSE;
    128e:	10 92 45 04 	sts	0x0445, r1
    AMStandard_lastCount = 0;
    1292:	10 92 49 04 	sts	0x0449, r1
    1296:	10 92 48 04 	sts	0x0448, r1
    AMStandard_counter = 0;
    129a:	10 92 47 04 	sts	0x0447, r1
    129e:	10 92 46 04 	sts	0x0446, r1
    return ok2;
}
    12a2:	08 95       	ret

000012a4 <AMStandard_RadioSend_send>:
    return ok2;
}

//-------------------------------------------------------------------------
inline result_t AMStandard_RadioSend_send(Radio_MsgPtr arg_0xa3c31f8)
{
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	8c 01       	movw	r16, r24
}

//-------------------------------------------------------------------------
inline void restoreRadioState()
{
    AMStandard_state = FALSE;
    12aa:	10 92 45 04 	sts	0x0445, r1
#if defined(PLATFORM_AVR) && defined (RADIO_CC2420)
    restorecc2420state();
    12ae:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <restorecc2420state>
    //Every time send, restore first. 
    
    restoreRadioState();
    
#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    result = cc2420radiom_Send_send(arg_0xa3c31f8);
    12b2:	c8 01       	movw	r24, r16
    12b4:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <cc2420radiom_Send_send>
   trx_init();
   result = rf230radio_Send_send(arg_0xa3c31f8);
#endif

    return result;
}
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <AMStandard_sendTask>:

//-------------------------------------------------------------------------
inline void AMStandard_sendTask(void)
{
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    result_t ok;
    Radio_MsgPtr buf;

    buf = AMStandard_buffer;
    12c2:	00 91 4a 04 	lds	r16, 0x044A
    12c6:	10 91 4b 04 	lds	r17, 0x044B
}

//-------------------------------------------------------------------------
inline void restoreRadioState()
{
    AMStandard_state = FALSE;
    12ca:	10 92 45 04 	sts	0x0445, r1
#if defined(PLATFORM_AVR) && defined (RADIO_CC2420)
    restorecc2420state();
    12ce:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <restorecc2420state>
    //Every time send, restore first. 
    
    restoreRadioState();
    
#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    result = cc2420radiom_Send_send(arg_0xa3c31f8);
    12d2:	c8 01       	movw	r24, r16
    12d4:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <cc2420radiom_Send_send>
    result_t ok;
    Radio_MsgPtr buf;

    buf = AMStandard_buffer;
    ok = AMStandard_RadioSend_send(buf);
    if (ok == FAIL)
    12d8:	88 23       	and	r24, r24
    12da:	11 f4       	brne	.+4      	; 0x12e0 <AMStandard_sendTask+0x22>
}

//-------------------------------------------------------------------------
result_t AMStandard_reportSendDone(Radio_MsgPtr msg, result_t success)
{
    AMStandard_state = FALSE;
    12dc:	10 92 45 04 	sts	0x0445, r1
    ok = AMStandard_RadioSend_send(buf);
    if (ok == FAIL)
    {
        AMStandard_reportSendDone(AMStandard_buffer, FAIL);
    }
}
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <AMStandard_RadioReceive_receive>:



//-------------------------------------------------------------------------
inline Radio_MsgPtr AMStandard_RadioReceive_receive(Radio_MsgPtr packet)
{
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	ec 01       	movw	r28, r24
//and the content of the packet is the correct packet parsed, and is useful 
//The content starts with a length that is the actual payload length and all information are correct
//Must copy this content to the user supplied buffer, put the user action into a task, and then return this buffer to the recevie module 
Radio_MsgPtr received(Radio_MsgPtr packet)
{
    uint16_t addr = CURRENT_NODE_ID;
    12ec:	20 91 32 04 	lds	r18, 0x0432
    12f0:	30 91 33 04 	lds	r19, 0x0433
#ifdef TRACE_ENABLE
#ifdef TRACE_ENABLE_RADIOEVENT
    addTrace(TRACE_RADIOEVENT_RECEIVEPACKET, 100);
#endif
#endif
    AMStandard_counter++;
    12f4:	80 91 46 04 	lds	r24, 0x0446
    12f8:	90 91 47 04 	lds	r25, 0x0447
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	90 93 47 04 	sts	0x0447, r25
    1302:	80 93 46 04 	sts	0x0446, r24
    if (packet->crc == 1 && (packet->addr == BCAST_ADDRESS || packet->addr ==
    1306:	c0 59       	subi	r28, 0x90	; 144
    1308:	df 4f       	sbci	r29, 0xFF	; 255
    130a:	88 81       	ld	r24, Y
    130c:	c0 57       	subi	r28, 0x70	; 112
    130e:	d0 40       	sbci	r29, 0x00	; 0
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	21 f0       	breq	.+8      	; 0x131c <AMStandard_RadioReceive_receive+0x36>
   #if defined(PLATFORM_AVR) && defined(RADIO_RF230)
   return received_iris( packet );
   #endif

     
}
    1314:	ce 01       	movw	r24, r28
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	08 95       	ret
#ifdef TRACE_ENABLE_RADIOEVENT
    addTrace(TRACE_RADIOEVENT_RECEIVEPACKET, 100);
#endif
#endif
    AMStandard_counter++;
    if (packet->crc == 1 && (packet->addr == BCAST_ADDRESS || packet->addr ==
    131c:	8e 81       	ldd	r24, Y+6	; 0x06
    131e:	9f 81       	ldd	r25, Y+7	; 0x07
    1320:	4f ef       	ldi	r20, 0xFF	; 255
    1322:	8f 3f       	cpi	r24, 0xFF	; 255
    1324:	94 07       	cpc	r25, r20
    1326:	19 f0       	breq	.+6      	; 0x132e <AMStandard_RadioReceive_receive+0x48>
    1328:	28 17       	cp	r18, r24
    132a:	39 07       	cpc	r19, r25
    132c:	99 f7       	brne	.-26     	; 0x1314 <AMStandard_RadioReceive_receive+0x2e>
                             addr))
    {
        uint16_t port = packet->port;
        Radio_MsgPtr tmp;

        tmp = Standard_Receive_Packet(port, packet);
    132e:	88 85       	ldd	r24, Y+8	; 0x08
    1330:	99 85       	ldd	r25, Y+9	; 0x09
    1332:	be 01       	movw	r22, r28
    1334:	0e 94 2f 0a 	call	0x145e	; 0x145e <Standard_Receive_Packet>
        if (tmp)
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	61 f3       	breq	.-40     	; 0x1314 <AMStandard_RadioReceive_receive+0x2e>
    133c:	ec 01       	movw	r28, r24
   #if defined(PLATFORM_AVR) && defined(RADIO_RF230)
   return received_iris( packet );
   #endif

     
}
    133e:	ce 01       	movw	r24, r28
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <initRadioHandle>:
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        receivehandles[i].handlevalid = 0;
    1346:	10 92 57 04 	sts	0x0457, r1
    134a:	10 92 63 04 	sts	0x0463, r1
    134e:	10 92 6f 04 	sts	0x046F, r1
    1352:	10 92 7b 04 	sts	0x047B, r1
    1356:	10 92 87 04 	sts	0x0487, r1
    }
	 
}
    135a:	08 95       	ret

0000135c <registerEvent>:
//packetinfo for storing the received packet info on rssi and lqi 
//handle function to be posted 
void registerEvent(uint16_t port, uint8_t maxLength, uint8_t * dataReady,
                   uint8_t * data, uint8_t * packetinfo,
                   void (*handlefunc) (void))
{
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	ec 01       	movw	r28, r24
    136a:	e7 e5       	ldi	r30, 0x57	; 87
    136c:	f4 e0       	ldi	r31, 0x04	; 4
    136e:	a0 e0       	ldi	r26, 0x00	; 0
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
        if (receivehandles[i].handlevalid == 0)
    1372:	80 81       	ld	r24, Z
    1374:	88 23       	and	r24, r24
    1376:	61 f0       	breq	.+24     	; 0x1390 <registerEvent+0x34>
            receivehandles[i].dataReady = dataReady;
            receivehandles[i].data = data;
            receivehandles[i].packetinfo = packetinfo;
            receivehandles[i].handlefunc = handlefunc;
            receivehandles[i].handlevalid = 1;
            return;
    1378:	11 96       	adiw	r26, 0x01	; 1
    137a:	3c 96       	adiw	r30, 0x0c	; 12
                   uint8_t * data, uint8_t * packetinfo,
                   void (*handlefunc) (void))
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    137c:	a5 30       	cpi	r26, 0x05	; 5
    137e:	b1 05       	cpc	r27, r1
    1380:	c1 f7       	brne	.-16     	; 0x1372 <registerEvent+0x16>
            receivehandles[i].packetinfo = packetinfo;
            receivehandles[i].handlefunc = handlefunc;
            receivehandles[i].handlevalid = 1;
            return;
        }
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	08 95       	ret
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
        if (receivehandles[i].handlevalid == 0)
        {
            receivehandles[i].port = port;
    1390:	fd 01       	movw	r30, r26
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	ea 0f       	add	r30, r26
    1398:	fb 1f       	adc	r31, r27
    139a:	ee 0f       	add	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31
    13a2:	df 01       	movw	r26, r30
    13a4:	a2 5b       	subi	r26, 0xB2	; 178
    13a6:	bb 4f       	sbci	r27, 0xFB	; 251
    13a8:	11 96       	adiw	r26, 0x01	; 1
    13aa:	dc 93       	st	X, r29
    13ac:	ce 93       	st	-X, r28
            receivehandles[i].maxLength = maxLength;
    13ae:	e0 5b       	subi	r30, 0xB0	; 176
    13b0:	fb 4f       	sbci	r31, 0xFB	; 251
    13b2:	60 83       	st	Z, r22
            receivehandles[i].dataReady = dataReady;
    13b4:	14 96       	adiw	r26, 0x04	; 4
    13b6:	5c 93       	st	X, r21
    13b8:	4e 93       	st	-X, r20
    13ba:	13 97       	sbiw	r26, 0x03	; 3
            receivehandles[i].data = data;
    13bc:	16 96       	adiw	r26, 0x06	; 6
    13be:	3c 93       	st	X, r19
    13c0:	2e 93       	st	-X, r18
    13c2:	15 97       	sbiw	r26, 0x05	; 5
            receivehandles[i].packetinfo = packetinfo;
    13c4:	18 96       	adiw	r26, 0x08	; 8
    13c6:	1c 93       	st	X, r17
    13c8:	0e 93       	st	-X, r16
    13ca:	17 97       	sbiw	r26, 0x07	; 7
            receivehandles[i].handlefunc = handlefunc;
    13cc:	1b 96       	adiw	r26, 0x0b	; 11
    13ce:	fc 92       	st	X, r15
    13d0:	ee 92       	st	-X, r14
    13d2:	1a 97       	sbiw	r26, 0x0a	; 10
            receivehandles[i].handlevalid = 1;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	19 96       	adiw	r26, 0x09	; 9
    13d8:	8c 93       	st	X, r24
            return;
        }
}
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	ff 90       	pop	r15
    13e4:	ef 90       	pop	r14
    13e6:	08 95       	ret

000013e8 <deRegisterEvent>:

//-------------------------------------------------------------------------
void deRegisterEvent(uint16_t port)
{
    13e8:	ac 01       	movw	r20, r24
    13ea:	ee e4       	ldi	r30, 0x4E	; 78
    13ec:	f4 e0       	ldi	r31, 0x04	; 4
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
        if ((receivehandles[i].handlevalid == 1) && (receivehandles[i].port
    13f2:	81 85       	ldd	r24, Z+9	; 0x09
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	39 f0       	breq	.+14     	; 0x1406 <deRegisterEvent+0x1e>
                                                     == port))
        {
            receivehandles[i].handlevalid = 0;
            receivehandles[i].port = 0;
            return;
    13f8:	2f 5f       	subi	r18, 0xFF	; 255
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	3c 96       	adiw	r30, 0x0c	; 12
//-------------------------------------------------------------------------
void deRegisterEvent(uint16_t port)
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    13fe:	25 30       	cpi	r18, 0x05	; 5
    1400:	31 05       	cpc	r19, r1
    1402:	b9 f7       	brne	.-18     	; 0x13f2 <deRegisterEvent+0xa>
    1404:	08 95       	ret
        if ((receivehandles[i].handlevalid == 1) && (receivehandles[i].port
    1406:	80 81       	ld	r24, Z
    1408:	91 81       	ldd	r25, Z+1	; 0x01
    140a:	84 17       	cp	r24, r20
    140c:	95 07       	cpc	r25, r21
    140e:	a1 f7       	brne	.-24     	; 0x13f8 <deRegisterEvent+0x10>
                                                     == port))
        {
            receivehandles[i].handlevalid = 0;
    1410:	f9 01       	movw	r30, r18
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	e2 0f       	add	r30, r18
    1418:	f3 1f       	adc	r31, r19
    141a:	ee 0f       	add	r30, r30
    141c:	ff 1f       	adc	r31, r31
    141e:	ee 0f       	add	r30, r30
    1420:	ff 1f       	adc	r31, r31
    1422:	e2 5b       	subi	r30, 0xB2	; 178
    1424:	fb 4f       	sbci	r31, 0xFB	; 251
    1426:	11 86       	std	Z+9, r1	; 0x09
            receivehandles[i].port = 0;
    1428:	11 82       	std	Z+1, r1	; 0x01
    142a:	10 82       	st	Z, r1
    142c:	08 95       	ret

0000142e <deleteThreadRegistrationInReceiverHandles>:
    return packet;
}

//-------------------------------------------------------------------------
void deleteThreadRegistrationInReceiverHandles(uint8_t * start, uint8_t * end)
{
    142e:	ac 01       	movw	r20, r24
    1430:	ee e4       	ldi	r30, 0x4E	; 78
    1432:	f4 e0       	ldi	r31, 0x04	; 4
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].handlevalid == 1)
    1434:	81 85       	ldd	r24, Z+9	; 0x09
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	31 f0       	breq	.+12     	; 0x1446 <deleteThreadRegistrationInReceiverHandles+0x18>
            && (receivehandles[i].dataReady <= end)
            && (receivehandles[i].dataReady >= start))
        {
            receivehandles[i].handlevalid = 0;
            receivehandles[i].port = 0;
    143a:	3c 96       	adiw	r30, 0x0c	; 12
//-------------------------------------------------------------------------
void deleteThreadRegistrationInReceiverHandles(uint8_t * start, uint8_t * end)
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    143c:	84 e0       	ldi	r24, 0x04	; 4
    143e:	ea 38       	cpi	r30, 0x8A	; 138
    1440:	f8 07       	cpc	r31, r24
    1442:	c1 f7       	brne	.-16     	; 0x1434 <deleteThreadRegistrationInReceiverHandles+0x6>
        {
            receivehandles[i].handlevalid = 0;
            receivehandles[i].port = 0;
        }
    }
}
    1444:	08 95       	ret
{
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].handlevalid == 1)
    1446:	23 81       	ldd	r18, Z+3	; 0x03
    1448:	34 81       	ldd	r19, Z+4	; 0x04
    144a:	62 17       	cp	r22, r18
    144c:	73 07       	cpc	r23, r19
    144e:	a8 f3       	brcs	.-22     	; 0x143a <deleteThreadRegistrationInReceiverHandles+0xc>
    1450:	24 17       	cp	r18, r20
    1452:	35 07       	cpc	r19, r21
    1454:	90 f3       	brcs	.-28     	; 0x143a <deleteThreadRegistrationInReceiverHandles+0xc>
            && (receivehandles[i].dataReady <= end)
            && (receivehandles[i].dataReady >= start))
        {
            receivehandles[i].handlevalid = 0;
    1456:	11 86       	std	Z+9, r1	; 0x09
            receivehandles[i].port = 0;
    1458:	11 82       	std	Z+1, r1	; 0x01
    145a:	10 82       	st	Z, r1
    145c:	ee cf       	rjmp	.-36     	; 0x143a <deleteThreadRegistrationInReceiverHandles+0xc>

0000145e <Standard_Receive_Packet>:
 


//Now this OS has a new packet, needs to deliver it to the correct thread for processing, and return the packet as soon as possible 
Radio_MsgPtr Standard_Receive_Packet(uint16_t port, Radio_MsgPtr packet)
{
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	9c 01       	movw	r18, r24
    146e:	8b 01       	movw	r16, r22
    uint8_t i;

    tmp = packet; 
    1470:	70 93 4d 04 	sts	0x044D, r23
    1474:	60 93 4c 04 	sts	0x044C, r22
    1478:	ee e4       	ldi	r30, 0x4E	; 78
    147a:	f4 e0       	ldi	r31, 0x04	; 4
    147c:	c0 e0       	ldi	r28, 0x00	; 0
    147e:	d0 e0       	ldi	r29, 0x00	; 0
		 
    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].port == port)
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	82 17       	cp	r24, r18
    1486:	93 07       	cpc	r25, r19
    1488:	71 f0       	breq	.+28     	; 0x14a6 <Standard_Receive_Packet+0x48>
            {
                postTask(receivehandles[i].handlefunc, 6);
            }
            //if (*(receivehandles[i].dataReady) == 0) 
            *(receivehandles[i].dataReady) = temp;
            return packet;
    148a:	21 96       	adiw	r28, 0x01	; 1
    148c:	3c 96       	adiw	r30, 0x0c	; 12
{
    uint8_t i;

    tmp = packet; 
		 
    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    148e:	c5 30       	cpi	r28, 0x05	; 5
    1490:	d1 05       	cpc	r29, r1
    1492:	b1 f7       	brne	.-20     	; 0x1480 <Standard_Receive_Packet+0x22>
            *(receivehandles[i].dataReady) = temp;
            return packet;
        }
    }
    return packet;
}
    1494:	c8 01       	movw	r24, r16
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	08 95       	ret

    tmp = packet; 
		 
    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].port == port)
    14a6:	81 85       	ldd	r24, Z+9	; 0x09
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	79 f7       	brne	.-34     	; 0x148a <Standard_Receive_Packet+0x2c>
        {
            uint8_t temp;
            uint8_t j;
            uint8_t *buf;

            buf = (uint8_t *) receivehandles[i].data;
    14ac:	6e 01       	movw	r12, r28
    14ae:	cc 0c       	add	r12, r12
    14b0:	dd 1c       	adc	r13, r13
    14b2:	f6 01       	movw	r30, r12
    14b4:	ec 0f       	add	r30, r28
    14b6:	fd 1f       	adc	r31, r29
    14b8:	ee 0f       	add	r30, r30
    14ba:	ff 1f       	adc	r31, r31
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	df 01       	movw	r26, r30
    14c2:	a2 5b       	subi	r26, 0xB2	; 178
    14c4:	bb 4f       	sbci	r27, 0xFB	; 251
    14c6:	15 96       	adiw	r26, 0x05	; 5
    14c8:	4c 91       	ld	r20, X
    14ca:	15 97       	sbiw	r26, 0x05	; 5
    14cc:	16 96       	adiw	r26, 0x06	; 6
    14ce:	2c 91       	ld	r18, X
            temp =
    14d0:	e0 5b       	subi	r30, 0xB0	; 176
    14d2:	fb 4f       	sbci	r31, 0xFB	; 251
    14d4:	d8 01       	movw	r26, r16
    14d6:	8c 91       	ld	r24, X
    14d8:	f0 80       	ld	r15, Z
    14da:	8f 15       	cp	r24, r15
    14dc:	08 f4       	brcc	.+2      	; 0x14e0 <Standard_Receive_Packet+0x82>
    14de:	44 c0       	rjmp	.+136    	; 0x1568 <Standard_Receive_Packet+0x10a>
                (packet->length >
                 (receivehandles[i].maxLength) ? (receivehandles[i].
                                                  maxLength) : packet->length);
            for (j = 0; j < temp; j++)
    14e0:	ff 20       	and	r15, r15
    14e2:	71 f0       	breq	.+28     	; 0x1500 <Standard_Receive_Packet+0xa2>
    14e4:	d8 01       	movw	r26, r16
    14e6:	84 2f       	mov	r24, r20
    14e8:	92 2f       	mov	r25, r18
    14ea:	9c 01       	movw	r18, r24
    14ec:	f9 01       	movw	r30, r18
            {
                *buf = packet->data[j];
    14ee:	1a 96       	adiw	r26, 0x0a	; 10
    14f0:	8c 91       	ld	r24, X
    14f2:	1a 97       	sbiw	r26, 0x0a	; 10
    14f4:	81 93       	st	Z+, r24
                buf++;
    14f6:	11 96       	adiw	r26, 0x01	; 1
            buf = (uint8_t *) receivehandles[i].data;
            temp =
                (packet->length >
                 (receivehandles[i].maxLength) ? (receivehandles[i].
                                                  maxLength) : packet->length);
            for (j = 0; j < temp; j++)
    14f8:	8e 2f       	mov	r24, r30
    14fa:	84 1b       	sub	r24, r20
    14fc:	8f 15       	cp	r24, r15
    14fe:	b8 f3       	brcs	.-18     	; 0x14ee <Standard_Receive_Packet+0x90>
            {
                *buf = packet->data[j];
                buf++;
            }
            if (receivehandles[i].packetinfo != NULL)
    1500:	f6 01       	movw	r30, r12
    1502:	ec 0f       	add	r30, r28
    1504:	fd 1f       	adc	r31, r29
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	e2 5b       	subi	r30, 0xB2	; 178
    1510:	fb 4f       	sbci	r31, 0xFB	; 251
    1512:	07 80       	ldd	r0, Z+7	; 0x07
    1514:	f0 85       	ldd	r31, Z+8	; 0x08
    1516:	e0 2d       	mov	r30, r0
    1518:	30 97       	sbiw	r30, 0x00	; 0
    151a:	51 f0       	breq	.+20     	; 0x1530 <Standard_Receive_Packet+0xd2>
            {
                buf = (uint8_t *) receivehandles[i].packetinfo;
                *buf = packet->strength;
    151c:	02 59       	subi	r16, 0x92	; 146
    151e:	1f 4f       	sbci	r17, 0xFF	; 255
    1520:	d8 01       	movw	r26, r16
    1522:	8d 91       	ld	r24, X+
    1524:	8d 01       	movw	r16, r26
    1526:	80 83       	st	Z, r24
                buf++;
                *buf = packet->lqi;
    1528:	8c 91       	ld	r24, X
    152a:	0f 56       	subi	r16, 0x6F	; 111
    152c:	10 40       	sbci	r17, 0x00	; 0
    152e:	81 83       	std	Z+1, r24	; 0x01
            }
            if (receivehandles[i].handlefunc != NULL)
    1530:	f6 01       	movw	r30, r12
    1532:	ec 0f       	add	r30, r28
    1534:	fd 1f       	adc	r31, r29
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	e2 5b       	subi	r30, 0xB2	; 178
    1540:	fb 4f       	sbci	r31, 0xFB	; 251
    1542:	82 85       	ldd	r24, Z+10	; 0x0a
    1544:	93 85       	ldd	r25, Z+11	; 0x0b
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	19 f0       	breq	.+6      	; 0x1550 <Standard_Receive_Packet+0xf2>
            {
                postTask(receivehandles[i].handlefunc, 6);
    154a:	66 e0       	ldi	r22, 0x06	; 6
    154c:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
            }
            //if (*(receivehandles[i].dataReady) == 0) 
            *(receivehandles[i].dataReady) = temp;
    1550:	cc 0d       	add	r28, r12
    1552:	dd 1d       	adc	r29, r13
    1554:	cc 0f       	add	r28, r28
    1556:	dd 1f       	adc	r29, r29
    1558:	cc 0f       	add	r28, r28
    155a:	dd 1f       	adc	r29, r29
    155c:	c2 5b       	subi	r28, 0xB2	; 178
    155e:	db 4f       	sbci	r29, 0xFB	; 251
    1560:	eb 81       	ldd	r30, Y+3	; 0x03
    1562:	fc 81       	ldd	r31, Y+4	; 0x04
    1564:	f0 82       	st	Z, r15
    1566:	96 cf       	rjmp	.-212    	; 0x1494 <Standard_Receive_Packet+0x36>
            uint8_t temp;
            uint8_t j;
            uint8_t *buf;

            buf = (uint8_t *) receivehandles[i].data;
            temp =
    1568:	f8 2e       	mov	r15, r24
    156a:	ba cf       	rjmp	.-140    	; 0x14e0 <Standard_Receive_Packet+0x82>

0000156c <cc2420controlm_HPLChipconRAM_writeDone>:
inline result_t cc2420controlm_HPLChipconRAM_writeDone(uint16_t addr, uint8_t
                                                       length,
                                                       uint8_t * buffer)
{
    return SUCCESS;
}
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	08 95       	ret

00001570 <cc2420controlm_HPLChipconControl_init>:
    return FAIL;
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_init(void)
{
    1570:	1f 93       	push	r17
    unsigned char result;

    result = HPLCC2420M_StdControl_init();
    1572:	0e 94 8f 14 	call	0x291e	; 0x291e <HPLCC2420M_StdControl_init>
    1576:	18 2f       	mov	r17, r24
    result = rcombine(result, HPLTimer1M_StdControl_init());
    1578:	0e 94 89 15 	call	0x2b12	; 0x2b12 <HPLTimer1M_StdControl_init>
    157c:	68 2f       	mov	r22, r24
    157e:	81 2f       	mov	r24, r17
    1580:	0e 94 66 3c 	call	0x78cc	; 0x78cc <rcombine>
    return result;
}
    1584:	1f 91       	pop	r17
    1586:	08 95       	ret

00001588 <cc2420controlm_HPLChipcon_read>:
//-------------------------------------------------------------------------
inline uint16_t cc2420controlm_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1588:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
    return result;
}
    158c:	08 95       	ret

0000158e <cc2420controlm_HPLChipconRAM_write>:
                                                   uint8_t arg_0xa45ae80,
                                                   uint8_t * arg_0xa45afe0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420RAM_write(arg_0xa45ad38, arg_0xa45ae80,
    158e:	0e 94 22 14 	call	0x2844	; 0x2844 <HPLCC2420M_HPLCC2420RAM_write>
                                           arg_0xa45afe0);
    return result;
}
    1592:	08 95       	ret

00001594 <cc2420controlm_CC2420Control_setShortAddress>:

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_setShortAddress(uint16_t addr)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <cc2420controlm_CC2420Control_setShortAddress+0x6>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    addr = toLSB16(addr);
    15a2:	0e 94 01 3b 	call	0x7602	; 0x7602 <toLSB16>
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	89 83       	std	Y+1, r24	; 0x01
                                                   uint8_t arg_0xa45ae80,
                                                   uint8_t * arg_0xa45afe0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420RAM_write(arg_0xa45ad38, arg_0xa45ae80,
    15aa:	8a e6       	ldi	r24, 0x6A	; 106
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	62 e0       	ldi	r22, 0x02	; 2
    15b0:	ae 01       	movw	r20, r28
    15b2:	4f 5f       	subi	r20, 0xFF	; 255
    15b4:	5f 4f       	sbci	r21, 0xFF	; 255
    15b6:	0e 94 22 14 	call	0x2844	; 0x2844 <HPLCC2420M_HPLCC2420RAM_write>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_setShortAddress(uint16_t addr)
{
    addr = toLSB16(addr);
    return cc2420controlm_HPLChipconRAM_write(0x16A, 2, (uint8_t *) & addr);
}
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <cc2420controlm_SplitControl_startDone>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_startDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_startDone();
    15c4:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <cc2420radiom_CC2420SplitControl_startDone>
    return result;
}
    15c8:	08 95       	ret

000015ca <cc2420controlm_HPLChipconControl_start>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_start(void)
{
    unsigned char result;

    result = HPLTimer1M_StdControl_start();
    15ca:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <HPLTimer1M_StdControl_start>
    return result;
}
    15ce:	08 95       	ret

000015d0 <cc2420controlm_HPLChipcon_write>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    15d0:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    return result;
}
    15d4:	08 95       	ret

000015d6 <cc2420controlm_CCA_fired>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    15d6:	8d e1       	ldi	r24, 0x1D	; 29
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_fired(void)
{
    cc2420controlm_HPLChipcon_write(0x1D, 0);
    postTask(cc2420controlm_PostOscillatorOn, 5);
    15e0:	86 ea       	ldi	r24, 0xA6	; 166
    15e2:	9c e0       	ldi	r25, 0x0C	; 12
    15e4:	65 e0       	ldi	r22, 0x05	; 5
    15e6:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    return FAIL;
}
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	08 95       	ret

000015ee <cc2420controlm_HPLChipcon_cmd>:
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    15ee:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    return result;
}
    15f2:	08 95       	ret

000015f4 <cc2420controlm_SetRegs>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    15f4:	60 91 8c 04 	lds	r22, 0x048C
    15f8:	70 91 8d 04 	lds	r23, 0x048D
    15fc:	80 e1       	ldi	r24, 0x10	; 16
    15fe:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline uint16_t cc2420controlm_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1602:	60 91 8e 04 	lds	r22, 0x048E
    1606:	70 91 8f 04 	lds	r23, 0x048F
    160a:	81 e1       	ldi	r24, 0x11	; 17
    160c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1610:	81 e1       	ldi	r24, 0x11	; 17
    1612:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
                                    [CP_MAIN]);
    cc2420controlm_HPLChipcon_write(0x11,
                                    cc2420controlm_gCurrentParameters
                                    [CP_MDMCTRL0]);
    data = cc2420controlm_HPLChipcon_read(0x11);
    if (data != cc2420controlm_gCurrentParameters[CP_MDMCTRL0])
    1616:	20 91 8e 04 	lds	r18, 0x048E
    161a:	30 91 8f 04 	lds	r19, 0x048F
    161e:	28 17       	cp	r18, r24
    1620:	39 07       	cpc	r19, r25
    1622:	11 f0       	breq	.+4      	; 0x1628 <cc2420controlm_SetRegs+0x34>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	08 95       	ret
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1628:	60 91 90 04 	lds	r22, 0x0490
    162c:	70 91 91 04 	lds	r23, 0x0491
    1630:	82 e1       	ldi	r24, 0x12	; 18
    1632:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1636:	60 91 92 04 	lds	r22, 0x0492
    163a:	70 91 93 04 	lds	r23, 0x0493
    163e:	83 e1       	ldi	r24, 0x13	; 19
    1640:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1644:	60 91 94 04 	lds	r22, 0x0494
    1648:	70 91 95 04 	lds	r23, 0x0495
    164c:	84 e1       	ldi	r24, 0x14	; 20
    164e:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1652:	60 91 96 04 	lds	r22, 0x0496
    1656:	70 91 97 04 	lds	r23, 0x0497
    165a:	85 e1       	ldi	r24, 0x15	; 21
    165c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1660:	60 91 98 04 	lds	r22, 0x0498
    1664:	70 91 99 04 	lds	r23, 0x0499
    1668:	86 e1       	ldi	r24, 0x16	; 22
    166a:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    166e:	60 91 9a 04 	lds	r22, 0x049A
    1672:	70 91 9b 04 	lds	r23, 0x049B
    1676:	87 e1       	ldi	r24, 0x17	; 23
    1678:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    167c:	60 91 9c 04 	lds	r22, 0x049C
    1680:	70 91 9d 04 	lds	r23, 0x049D
    1684:	88 e1       	ldi	r24, 0x18	; 24
    1686:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    168a:	60 91 9e 04 	lds	r22, 0x049E
    168e:	70 91 9f 04 	lds	r23, 0x049F
    1692:	89 e1       	ldi	r24, 0x19	; 25
    1694:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1698:	60 91 a0 04 	lds	r22, 0x04A0
    169c:	70 91 a1 04 	lds	r23, 0x04A1
    16a0:	8a e1       	ldi	r24, 0x1A	; 26
    16a2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    16a6:	60 91 a4 04 	lds	r22, 0x04A4
    16aa:	70 91 a5 04 	lds	r23, 0x04A5
    16ae:	8c e1       	ldi	r24, 0x1C	; 28
    16b0:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    16b4:	60 91 a6 04 	lds	r22, 0x04A6
    16b8:	70 91 a7 04 	lds	r23, 0x04A7
    16bc:	8d e1       	ldi	r24, 0x1D	; 29
    16be:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    16c2:	89 e0       	ldi	r24, 0x09	; 9
    16c4:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
                                    cc2420controlm_gCurrentParameters
                                    [CP_IOCFG1]);
    cc2420controlm_HPLChipcon_cmd(0x09);
    cc2420controlm_HPLChipcon_cmd(0x08);
    return TRUE;
}
    16c8:	88 e0       	ldi	r24, 0x08	; 8
    16ca:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	08 95       	ret

000016d2 <cc2420controlm_CC2420Control_TunePower>:
inline result_t cc2420controlm_CC2420Control_TunePower(uint8_t powerlevel)
{
    uint8_t status;

    //  cc2420controlm_gCurrentParameters[CP_FSCTRL] = (cc2420controlm_gCurrentParameters[CP_FSCTRL] & 0xfc00) | (fsctrl << 0);
    cc2420controlm_gCurrentParameters[CP_TXCTRL] =
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	8f 71       	andi	r24, 0x1F	; 31
    16d6:	90 70       	andi	r25, 0x00	; 0
    16d8:	20 91 96 04 	lds	r18, 0x0496
    16dc:	30 91 97 04 	lds	r19, 0x0497
    16e0:	20 7e       	andi	r18, 0xE0	; 224
    16e2:	82 2b       	or	r24, r18
    16e4:	93 2b       	or	r25, r19
    16e6:	90 93 97 04 	sts	0x0497, r25
    16ea:	80 93 96 04 	sts	0x0496, r24
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    16ee:	60 91 9c 04 	lds	r22, 0x049C
    16f2:	70 91 9d 04 	lds	r23, 0x049D
    16f6:	85 e1       	ldi	r24, 0x15	; 21
    16f8:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
        cc2420controlm_HPLChipcon_write(0x15,
                                        cc2420controlm_gCurrentParameters
                                        [CP_FSCTRL]);
    //IF THE oscillator is running, turn on the rx mode 
    // STATUS bit 06 means that the oscillator is running or not 
    if (status & (1 << 6))
    16fc:	86 ff       	sbrs	r24, 6
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <cc2420controlm_CC2420Control_TunePower+0x34>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    if (status & (1 << 6))
    {
        cc2420controlm_HPLChipcon_cmd(0x03);
    }
    return SUCCESS;
}
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	08 95       	ret

0000170a <cc2420controlm_CC2420Control_TuneManual>:
{
    int fsctrl;
    uint8_t status;

    fsctrl = DesiredFreq - 2048;
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
    170a:	bc 01       	movw	r22, r24
    170c:	60 50       	subi	r22, 0x00	; 0
    170e:	78 40       	sbci	r23, 0x08	; 8
    1710:	80 91 9c 04 	lds	r24, 0x049C
    1714:	90 91 9d 04 	lds	r25, 0x049D
    1718:	80 70       	andi	r24, 0x00	; 0
    171a:	9c 7f       	andi	r25, 0xFC	; 252
    171c:	68 2b       	or	r22, r24
    171e:	79 2b       	or	r23, r25
    1720:	70 93 9d 04 	sts	0x049D, r23
    1724:	60 93 9c 04 	sts	0x049C, r22
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1728:	88 e1       	ldi	r24, 0x18	; 24
    172a:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
        cc2420controlm_HPLChipcon_write(0x18,
                                        cc2420controlm_gCurrentParameters
                                        [CP_FSCTRL]);
    //IF THE oscillator is running, turn on the rx mode 
    // STATUS bit 06 means that the oscillator is running or not 
    if (status & (1 << 6))
    172e:	86 ff       	sbrs	r24, 6
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <cc2420controlm_CC2420Control_TuneManual+0x2e>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1732:	83 e0       	ldi	r24, 0x03	; 3
    1734:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    if (status & (1 << 6))
    {
        cc2420controlm_HPLChipcon_cmd(0x03);
    }
    return SUCCESS;
}
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	08 95       	ret

0000173c <cc2420controlm_CC2420Control_RxMode>:
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_RxMode(void)
{
    cc2420controlm_HPLChipcon_cmd(0x03);
    return SUCCESS;
}
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	08 95       	ret

00001746 <cc2420controlm_SplitControl_initDone>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_initDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_initDone();
    1746:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <cc2420radiom_CC2420SplitControl_initDone>
    return result;
}
    174a:	08 95       	ret

0000174c <cc2420controlm_taskInitDone>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_initDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_initDone();
    174c:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <cc2420radiom_CC2420SplitControl_initDone>

//-------------------------------------------------------------------------
inline void cc2420controlm_taskInitDone(void)
{
    cc2420controlm_SplitControl_initDone();
}
    1750:	08 95       	ret

00001752 <cc2420controlm_CC2420Control_VREFOff>:
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_VREFOff(void)
{
    LITE_CLR_CC_VREN_PIN();
    1752:	0e 94 84 05 	call	0xb08	; 0xb08 <LITE_CLR_CC_VREN_PIN>
    LITE_uwait(600);
    1756:	88 e5       	ldi	r24, 0x58	; 88
    1758:	92 e0       	ldi	r25, 0x02	; 2
    175a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LITE_uwait>
    return SUCCESS;
}
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	08 95       	ret

00001762 <cc2420controlm_CC2420Control_VREFOn>:
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_VREFOn(void)
{
    LITE_SET_CC_VREN_PIN();
    1762:	0e 94 82 05 	call	0xb04	; 0xb04 <LITE_SET_CC_VREN_PIN>
    LITE_uwait(600);
    1766:	88 e5       	ldi	r24, 0x58	; 88
    1768:	92 e0       	ldi	r25, 0x02	; 2
    176a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LITE_uwait>
    return SUCCESS;
}
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	08 95       	ret

00001772 <cc2420controlm_CCA_startWait>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_CCA_startWait(arg_0xa422588);
    1772:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <hplcc2420interruptm_CCA_startWait>
    return result;
}
    1776:	08 95       	ret

00001778 <cc2420controlm_CC2420Control_OscillatorOn>:
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1778:	8d e1       	ldi	r24, 0x1D	; 29
    177a:	68 e1       	ldi	r22, 0x18	; 24
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_CCA_startWait(arg_0xa422588);
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <hplcc2420interruptm_CCA_startWait>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    i = 0;
    cc2420controlm_HPLChipcon_write(0x1D, 24);
    cc2420controlm_CCA_startWait(TRUE);
    status = cc2420controlm_HPLChipcon_cmd(0x01);
    return SUCCESS;
}
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	08 95       	ret

00001792 <cc2420controlm_CC2420Control_TuneChannel>:
{
    int fsctrl;
    uint8_t status;

    fsctrl = DesiredFreq - 2048;
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
    1792:	95 e0       	ldi	r25, 0x05	; 5
    1794:	89 9f       	mul	r24, r25
    1796:	b0 01       	movw	r22, r0
    1798:	11 24       	eor	r1, r1
    179a:	62 5d       	subi	r22, 0xD2	; 210
    179c:	7e 4f       	sbci	r23, 0xFE	; 254
    179e:	80 91 9c 04 	lds	r24, 0x049C
    17a2:	90 91 9d 04 	lds	r25, 0x049D
    17a6:	80 70       	andi	r24, 0x00	; 0
    17a8:	9c 7f       	andi	r25, 0xFC	; 252
    17aa:	68 2b       	or	r22, r24
    17ac:	79 2b       	or	r23, r25
    17ae:	70 93 9d 04 	sts	0x049D, r23
    17b2:	60 93 9c 04 	sts	0x049C, r22
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    17b6:	88 e1       	ldi	r24, 0x18	; 24
    17b8:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
        cc2420controlm_HPLChipcon_write(0x18,
                                        cc2420controlm_gCurrentParameters
                                        [CP_FSCTRL]);
    //IF THE oscillator is running, turn on the rx mode 
    // STATUS bit 06 means that the oscillator is running or not 
    if (status & (1 << 6))
    17bc:	86 ff       	sbrs	r24, 6
    17be:	03 c0       	rjmp	.+6      	; 0x17c6 <cc2420controlm_CC2420Control_TuneChannel+0x34>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    uint16_t freq;

    freq = 2405 + 5 * (channel - 11);
    cc2420controlm_CC2420Control_TuneManual(freq);
    return SUCCESS;
}
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	08 95       	ret

000017ca <cc2420controlm_SplitControl_start>:
{
    result_t status;
    uint8_t _state = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    17ca:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    17ce:	98 2f       	mov	r25, r24

        {
            if (cc2420controlm_state == cc2420controlm_INIT_STATE_DONE)
    17d0:	80 91 8a 04 	lds	r24, 0x048A
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	29 f0       	breq	.+10     	; 0x17e2 <cc2420controlm_SplitControl_start+0x18>
            {
                cc2420controlm_state = cc2420controlm_START_STATE;
                _state = TRUE;
            }
        }
        _atomic_end(_atomic);
    17d8:	89 2f       	mov	r24, r25
    17da:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    wait_cycle();
    LITE_SET_CC_RSTN_PIN();
    wait_cycle();
    status = cc2420controlm_CC2420Control_OscillatorOn();
    return status;
}
    17e0:	08 95       	ret
        _atomic_t _atomic = _atomic_start();

        {
            if (cc2420controlm_state == cc2420controlm_INIT_STATE_DONE)
            {
                cc2420controlm_state = cc2420controlm_START_STATE;
    17e2:	83 e0       	ldi	r24, 0x03	; 3
    17e4:	80 93 8a 04 	sts	0x048A, r24
                _state = TRUE;
            }
        }
        _atomic_end(_atomic);
    17e8:	89 2f       	mov	r24, r25
    17ea:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_start(void)
{
    unsigned char result;

    result = HPLTimer1M_StdControl_start();
    17ee:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <HPLTimer1M_StdControl_start>
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_VREFOn(void)
{
    LITE_SET_CC_VREN_PIN();
    17f2:	0e 94 82 05 	call	0xb04	; 0xb04 <LITE_SET_CC_VREN_PIN>
    LITE_uwait(600);
    17f6:	88 e5       	ldi	r24, 0x58	; 88
    17f8:	92 e0       	ldi	r25, 0x02	; 2
    17fa:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LITE_uwait>
    {
        return FAIL;
    }
    cc2420controlm_HPLChipconControl_start();
    cc2420controlm_CC2420Control_VREFOn();
    LITE_CLR_CC_RSTN_PIN();
    17fe:	0e 94 6d 05 	call	0xada	; 0xada <LITE_CLR_CC_RSTN_PIN>
    wait_cycle();
    1802:	0e 94 56 02 	call	0x4ac	; 0x4ac <wait_cycle>
    LITE_SET_CC_RSTN_PIN();
    1806:	0e 94 6b 05 	call	0xad6	; 0xad6 <LITE_SET_CC_RSTN_PIN>
    wait_cycle();
    180a:	0e 94 56 02 	call	0x4ac	; 0x4ac <wait_cycle>
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    180e:	8d e1       	ldi	r24, 0x1D	; 29
    1810:	68 e1       	ldi	r22, 0x18	; 24
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_CCA_startWait(arg_0xa422588);
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <hplcc2420interruptm_CCA_startWait>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	08 95       	ret

00001828 <cc2420controlm_SplitControl_init>:
uint8_t CC2420_CHANNEL;
uint8_t CC2420_RFPOWER;
uint8_t cc2420controlm_state;
uint16_t cc2420controlm_gCurrentParameters[14];
inline result_t cc2420controlm_SplitControl_init(void)
{
    1828:	1f 93       	push	r17
    uint8_t _state = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    182a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    182e:	98 2f       	mov	r25, r24

        {
            if (cc2420controlm_state == cc2420controlm_IDLE_STATE)
    1830:	80 91 8a 04 	lds	r24, 0x048A
    1834:	88 23       	and	r24, r24
    1836:	09 f0       	breq	.+2      	; 0x183a <cc2420controlm_SplitControl_init+0x12>
    1838:	7b c0       	rjmp	.+246    	; 0x1930 <cc2420controlm_SplitControl_init+0x108>
                _state = TRUE;
            }
        }
        //Qing Revision
        //IDLE state
        cc2420controlm_state = cc2420controlm_IDLE_STATE;
    183a:	10 92 8a 04 	sts	0x048A, r1
        CC2420_CHANNEL = CC2420_DEF_CHANNEL;
    183e:	8b e0       	ldi	r24, 0x0B	; 11
    1840:	80 93 a8 04 	sts	0x04A8, r24
        CC2420_RFPOWER = CC2420_DEF_RFPOWER;
    1844:	8f e1       	ldi	r24, 0x1F	; 31
    1846:	80 93 8b 04 	sts	0x048B, r24
        _atomic_end(_atomic);
    184a:	89 2f       	mov	r24, r25
    184c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_init(void)
{
    unsigned char result;

    result = HPLCC2420M_StdControl_init();
    1850:	0e 94 8f 14 	call	0x291e	; 0x291e <HPLCC2420M_StdControl_init>
    1854:	18 2f       	mov	r17, r24
    result = rcombine(result, HPLTimer1M_StdControl_init());
    1856:	0e 94 89 15 	call	0x2b12	; 0x2b12 <HPLTimer1M_StdControl_init>
    185a:	68 2f       	mov	r22, r24
    185c:	81 2f       	mov	r24, r17
    185e:	0e 94 66 3c 	call	0x78cc	; 0x78cc <rcombine>
    {
        return FAIL;
    }
    cc2420controlm_HPLChipconControl_init();
    //Basically, reset everything page 64
    cc2420controlm_gCurrentParameters[CP_MAIN] = 0xf800;
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	98 ef       	ldi	r25, 0xF8	; 248
    1866:	90 93 8d 04 	sts	0x048D, r25
    186a:	80 93 8c 04 	sts	0x048C, r24
    //Basically, check page 65. Very easy 
    cc2420controlm_gCurrentParameters[CP_MDMCTRL0] =
    186e:	82 ee       	ldi	r24, 0xE2	; 226
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	90 93 8f 04 	sts	0x048F, r25
    1876:	80 93 8e 04 	sts	0x048E, r24
        ((((0 << 11) | (2 << 8)) | (3 << 6)) | (1 << 5)) | (2 << 0);
    //Page 66
    cc2420controlm_gCurrentParameters[CP_MDMCTRL1] = 20 << 6;
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	95 e0       	ldi	r25, 0x05	; 5
    187e:	90 93 91 04 	sts	0x0491, r25
    1882:	80 93 90 04 	sts	0x0490, r24
    //reset values
    cc2420controlm_gCurrentParameters[CP_RSSI] = 0xE080;
    1886:	80 e8       	ldi	r24, 0x80	; 128
    1888:	90 ee       	ldi	r25, 0xE0	; 224
    188a:	90 93 93 04 	sts	0x0493, r25
    188e:	80 93 92 04 	sts	0x0492, r24
    //reset
    cc2420controlm_gCurrentParameters[CP_SYNCWORD] = 0xA70F;
    1892:	8f e0       	ldi	r24, 0x0F	; 15
    1894:	97 ea       	ldi	r25, 0xA7	; 167
    1896:	90 93 95 04 	sts	0x0495, r25
    189a:	80 93 94 04 	sts	0x0494, r24
    //the last one, according to page 52 of the data sheet and page 67, default to output 0dbm 
    cc2420controlm_gCurrentParameters[CP_TXCTRL] =
    189e:	80 91 8b 04 	lds	r24, 0x048B
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	80 6e       	ori	r24, 0xE0	; 224
    18a6:	90 66       	ori	r25, 0x60	; 96
    18a8:	90 93 97 04 	sts	0x0497, r25
    18ac:	80 93 96 04 	sts	0x0496, r24
        ((((1 << 14) | (1 << 13)) | (3 << 6)) | (1 << 5)) | (CC2420_RFPOWER <<
                                                             0);
    cc2420controlm_gCurrentParameters[CP_RXCTRL0] =
    18b0:	85 ee       	ldi	r24, 0xE5	; 229
    18b2:	92 e1       	ldi	r25, 0x12	; 18
    18b4:	90 93 99 04 	sts	0x0499, r25
    18b8:	80 93 98 04 	sts	0x0498, r24
        (((((1 << 12) | (2 << 8)) | (3 << 6)) | (2 << 4)) | (1 << 2)) | (1 <<
                                                                         0);
    cc2420controlm_gCurrentParameters[CP_RXCTRL1] =
    18bc:	86 e5       	ldi	r24, 0x56	; 86
    18be:	9a e0       	ldi	r25, 0x0A	; 10
    18c0:	90 93 9b 04 	sts	0x049B, r25
    18c4:	80 93 9a 04 	sts	0x049A, r24
        (((((1 << 11) | (1 << 9)) | (1 << 6)) | (1 << 4)) | (1 << 2)) | (2 <<
                                                                         0);
    //PAGE 51 of the manual 
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
    18c8:	80 91 a8 04 	lds	r24, 0x04A8
    18cc:	25 e0       	ldi	r18, 0x05	; 5
    18ce:	82 9f       	mul	r24, r18
    18d0:	c0 01       	movw	r24, r0
    18d2:	11 24       	eor	r1, r1
    18d4:	82 5d       	subi	r24, 0xD2	; 210
    18d6:	9e 4f       	sbci	r25, 0xFE	; 254
    18d8:	90 64       	ori	r25, 0x40	; 64
    18da:	90 93 9d 04 	sts	0x049D, r25
    18de:	80 93 9c 04 	sts	0x049C, r24
        (1 << 14) | ((357 + 5 * (CC2420_CHANNEL - 11)) << 0);
    cc2420controlm_gCurrentParameters[CP_SECCTRL0] =
    18e2:	84 ec       	ldi	r24, 0xC4	; 196
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	90 93 9f 04 	sts	0x049F, r25
    18ea:	80 93 9e 04 	sts	0x049E, r24
        (((1 << 8) | (1 << 7)) | (1 << 6)) | (1 << 2);
    cc2420controlm_gCurrentParameters[CP_SECCTRL1] = 0;
    18ee:	10 92 a1 04 	sts	0x04A1, r1
    18f2:	10 92 a0 04 	sts	0x04A0, r1
    cc2420controlm_gCurrentParameters[CP_BATTMON] = 0;
    18f6:	10 92 a3 04 	sts	0x04A3, r1
    18fa:	10 92 a2 04 	sts	0x04A2, r1
    //fifop and cca polarity are inversed
    cc2420controlm_gCurrentParameters[CP_IOCFG0] = (127 << 0) | (1 << 9);
    18fe:	8f e7       	ldi	r24, 0x7F	; 127
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	90 93 a5 04 	sts	0x04A5, r25
    1906:	80 93 a4 04 	sts	0x04A4, r24
    cc2420controlm_gCurrentParameters[CP_IOCFG1] = 0;
    190a:	10 92 a7 04 	sts	0x04A7, r1
    190e:	10 92 a6 04 	sts	0x04A6, r1
    {
        _atomic_t _atomic = _atomic_start();
    1912:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420controlm_state = cc2420controlm_INIT_STATE_DONE;
    1916:	92 e0       	ldi	r25, 0x02	; 2
    1918:	90 93 8a 04 	sts	0x048A, r25
        _atomic_end(_atomic);
    191c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    postTask(cc2420controlm_taskInitDone, 5);
    1920:	86 ea       	ldi	r24, 0xA6	; 166
    1922:	9b e0       	ldi	r25, 0x0B	; 11
    1924:	65 e0       	ldi	r22, 0x05	; 5
    1926:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    return SUCCESS;
}
    192c:	1f 91       	pop	r17
    192e:	08 95       	ret
                _state = TRUE;
            }
        }
        //Qing Revision
        //IDLE state
        cc2420controlm_state = cc2420controlm_IDLE_STATE;
    1930:	10 92 8a 04 	sts	0x048A, r1
        CC2420_CHANNEL = CC2420_DEF_CHANNEL;
    1934:	8b e0       	ldi	r24, 0x0B	; 11
    1936:	80 93 a8 04 	sts	0x04A8, r24
        CC2420_RFPOWER = CC2420_DEF_RFPOWER;
    193a:	8f e1       	ldi	r24, 0x1F	; 31
    193c:	80 93 8b 04 	sts	0x048B, r24
        _atomic_end(_atomic);
    1940:	89 2f       	mov	r24, r25
    1942:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    1946:	80 e0       	ldi	r24, 0x00	; 0
        cc2420controlm_state = cc2420controlm_INIT_STATE_DONE;
        _atomic_end(_atomic);
    }
    postTask(cc2420controlm_taskInitDone, 5);
    return SUCCESS;
}
    1948:	1f 91       	pop	r17
    194a:	08 95       	ret

0000194c <cc2420controlm_PostOscillatorOn>:
    return TRUE;
}

//-------------------------------------------------------------------------
inline void cc2420controlm_PostOscillatorOn(void)
{
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	00 d0       	rcall	.+0      	; 0x1952 <cc2420controlm_PostOscillatorOn+0x6>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    1956:	60 91 8c 04 	lds	r22, 0x048C
    195a:	70 91 8d 04 	lds	r23, 0x048D
    195e:	80 e1       	ldi	r24, 0x10	; 16
    1960:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline uint16_t cc2420controlm_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1964:	60 91 8e 04 	lds	r22, 0x048E
    1968:	70 91 8f 04 	lds	r23, 0x048F
    196c:	81 e1       	ldi	r24, 0x11	; 17
    196e:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1972:	81 e1       	ldi	r24, 0x11	; 17
    1974:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
                                    [CP_MAIN]);
    cc2420controlm_HPLChipcon_write(0x11,
                                    cc2420controlm_gCurrentParameters
                                    [CP_MDMCTRL0]);
    data = cc2420controlm_HPLChipcon_read(0x11);
    if (data != cc2420controlm_gCurrentParameters[CP_MDMCTRL0])
    1978:	20 91 8e 04 	lds	r18, 0x048E
    197c:	30 91 8f 04 	lds	r19, 0x048F
    1980:	82 17       	cp	r24, r18
    1982:	93 07       	cpc	r25, r19
    1984:	89 f1       	breq	.+98     	; 0x19e8 <cc2420controlm_PostOscillatorOn+0x9c>
inline void cc2420controlm_PostOscillatorOn(void)
{
    //This fucntion sets up all the registers of the radio module 
    cc2420controlm_SetRegs();
    //This function sets up the short address of the node, and therefore, if the mac frame includes a short address, it should be matched
    cc2420controlm_CC2420Control_setShortAddress(CURRENT_NODE_ID);
    1986:	80 91 32 04 	lds	r24, 0x0432
    198a:	90 91 33 04 	lds	r25, 0x0433
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_setShortAddress(uint16_t addr)
{
    addr = toLSB16(addr);
    1992:	0e 94 01 3b 	call	0x7602	; 0x7602 <toLSB16>
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01
                                                   uint8_t arg_0xa45ae80,
                                                   uint8_t * arg_0xa45afe0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420RAM_write(arg_0xa45ad38, arg_0xa45ae80,
    199a:	8a e6       	ldi	r24, 0x6A	; 106
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	62 e0       	ldi	r22, 0x02	; 2
    19a0:	ae 01       	movw	r20, r28
    19a2:	4f 5f       	subi	r20, 0xFF	; 255
    19a4:	5f 4f       	sbci	r21, 0xFF	; 255
    19a6:	0e 94 22 14 	call	0x2844	; 0x2844 <HPLCC2420M_HPLCC2420RAM_write>
    //This fucntion sets up all the registers of the radio module 
    cc2420controlm_SetRegs();
    //This function sets up the short address of the node, and therefore, if the mac frame includes a short address, it should be matched
    cc2420controlm_CC2420Control_setShortAddress(CURRENT_NODE_ID);
    //tHIS TURNS THE CHANELL
    cc2420controlm_CC2420Control_TuneManual(((cc2420controlm_gCurrentParameters
    19aa:	60 91 9c 04 	lds	r22, 0x049C
    19ae:	70 91 9d 04 	lds	r23, 0x049D
{
    int fsctrl;
    uint8_t status;

    fsctrl = DesiredFreq - 2048;
    cc2420controlm_gCurrentParameters[CP_FSCTRL] =
    19b2:	7d 7f       	andi	r23, 0xFD	; 253
    19b4:	70 93 9d 04 	sts	0x049D, r23
    19b8:	60 93 9c 04 	sts	0x049C, r22
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    19bc:	88 e1       	ldi	r24, 0x18	; 24
    19be:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
        cc2420controlm_HPLChipcon_write(0x18,
                                        cc2420controlm_gCurrentParameters
                                        [CP_FSCTRL]);
    //IF THE oscillator is running, turn on the rx mode 
    // STATUS bit 06 means that the oscillator is running or not 
    if (status & (1 << 6))
    19c2:	86 ff       	sbrs	r24, 6
    19c4:	03 c0       	rjmp	.+6      	; 0x19cc <cc2420controlm_PostOscillatorOn+0x80>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    //tHIS TURNS THE CHANELL
    cc2420controlm_CC2420Control_TuneManual(((cc2420controlm_gCurrentParameters
                                              [CP_FSCTRL] << 0) & 0x1FF) +
                                            2048);
    {
        _atomic_t _atomic = _atomic_start();
    19cc:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420controlm_state = cc2420controlm_START_STATE_DONE;
    19d0:	94 e0       	ldi	r25, 0x04	; 4
    19d2:	90 93 8a 04 	sts	0x048A, r25
        _atomic_end(_atomic);
    19d6:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_startDone(void)
{
    unsigned char result;

    result = cc2420radiom_CC2420SplitControl_startDone();
    19da:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <cc2420radiom_CC2420SplitControl_startDone>

        cc2420controlm_state = cc2420controlm_START_STATE_DONE;
        _atomic_end(_atomic);
    }
    cc2420controlm_SplitControl_startDone();
}
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret
inline uint8_t cc2420controlm_HPLChipcon_write(uint8_t arg_0xa403d80, uint16_t
                                               arg_0xa403ed0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_write(arg_0xa403d80, arg_0xa403ed0);
    19e8:	60 91 90 04 	lds	r22, 0x0490
    19ec:	70 91 91 04 	lds	r23, 0x0491
    19f0:	82 e1       	ldi	r24, 0x12	; 18
    19f2:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    19f6:	60 91 92 04 	lds	r22, 0x0492
    19fa:	70 91 93 04 	lds	r23, 0x0493
    19fe:	83 e1       	ldi	r24, 0x13	; 19
    1a00:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1a04:	60 91 94 04 	lds	r22, 0x0494
    1a08:	70 91 95 04 	lds	r23, 0x0495
    1a0c:	84 e1       	ldi	r24, 0x14	; 20
    1a0e:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1a12:	60 91 96 04 	lds	r22, 0x0496
    1a16:	70 91 97 04 	lds	r23, 0x0497
    1a1a:	85 e1       	ldi	r24, 0x15	; 21
    1a1c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1a20:	60 91 98 04 	lds	r22, 0x0498
    1a24:	70 91 99 04 	lds	r23, 0x0499
    1a28:	86 e1       	ldi	r24, 0x16	; 22
    1a2a:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1a2e:	60 91 9a 04 	lds	r22, 0x049A
    1a32:	70 91 9b 04 	lds	r23, 0x049B
    1a36:	87 e1       	ldi	r24, 0x17	; 23
    1a38:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1a3c:	60 91 9c 04 	lds	r22, 0x049C
    1a40:	70 91 9d 04 	lds	r23, 0x049D
    1a44:	88 e1       	ldi	r24, 0x18	; 24
    1a46:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1a4a:	60 91 9e 04 	lds	r22, 0x049E
    1a4e:	70 91 9f 04 	lds	r23, 0x049F
    1a52:	89 e1       	ldi	r24, 0x19	; 25
    1a54:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1a58:	60 91 a0 04 	lds	r22, 0x04A0
    1a5c:	70 91 a1 04 	lds	r23, 0x04A1
    1a60:	8a e1       	ldi	r24, 0x1A	; 26
    1a62:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1a66:	60 91 a4 04 	lds	r22, 0x04A4
    1a6a:	70 91 a5 04 	lds	r23, 0x04A5
    1a6e:	8c e1       	ldi	r24, 0x1C	; 28
    1a70:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1a74:	60 91 a6 04 	lds	r22, 0x04A6
    1a78:	70 91 a7 04 	lds	r23, 0x04A7
    1a7c:	8d e1       	ldi	r24, 0x1D	; 29
    1a7e:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HPLCC2420M_HPLCC2420_write>
    1a82:	89 e0       	ldi	r24, 0x09	; 9
    1a84:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    1a88:	88 e0       	ldi	r24, 0x08	; 8
    1a8a:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    1a8e:	7b cf       	rjmp	.-266    	; 0x1986 <cc2420controlm_PostOscillatorOn+0x3a>

00001a90 <cc2420radiom_SplitControl_default_initDone>:
   volatile uint16_t cc2420radiom_LocalAddr;
 */
inline result_t cc2420radiom_SplitControl_default_initDone(void)
{
    return SUCCESS;
}
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	08 95       	ret

00001a94 <cc2420radiom_CC2420SplitControl_initDone>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_initDone(void)
{
    return cc2420radiom_SplitControl_initDone();
}
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	08 95       	ret

00001a98 <cc2420radiom_SplitControl_default_startDone>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_default_startDone(void)
{
    return SUCCESS;
}
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	08 95       	ret

00001a9c <cc2420radiom_SplitControl_startDone>:
{
    unsigned char result;

    result = cc2420radiom_SplitControl_default_startDone();
    return result;
}
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	08 95       	ret

00001aa0 <cc2420radiom_SplitControl_initDone>:
{
    unsigned char result;

    result = cc2420radiom_SplitControl_default_initDone();
    return result;
}
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	08 95       	ret

00001aa4 <restorecc2420state>:

//-------------------------------------------------------------------------
inline void restorecc2420state()
{
    cc2420radiom_stateRadio = 2;
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	80 93 27 05 	sts	0x0527, r24
}
    1aaa:	08 95       	ret

00001aac <cc2420radiom_StdControl_start>:
    }
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_StdControl_start(void)
{
    1aac:	0f 93       	push	r16
    1aae:	1f 93       	push	r17
    result_t success = FAIL;

    {
        _atomic_t _atomic = _atomic_start();
    1ab0:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    1ab4:	08 2f       	mov	r16, r24

        {
            if (cc2420radiom_stateRadio == cc2420radiom_DISABLED_STATE)
    1ab6:	80 91 27 05 	lds	r24, 0x0527
    1aba:	88 23       	and	r24, r24
    1abc:	41 f0       	breq	.+16     	; 0x1ace <cc2420radiom_StdControl_start+0x22>
            {
                if (postTask(cc2420radiom_startRadio, 5))
                {
                    success = SUCCESS;
                    cc2420radiom_stateRadio =
    1abe:	10 e0       	ldi	r17, 0x00	; 0
                        cc2420radiom_DISABLED_STATE_STARTTASK;
                }
            }
        }
        _atomic_end(_atomic);
    1ac0:	80 2f       	mov	r24, r16
    1ac2:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return success;
}
    1ac6:	81 2f       	mov	r24, r17
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	08 95       	ret
        _atomic_t _atomic = _atomic_start();

        {
            if (cc2420radiom_stateRadio == cc2420radiom_DISABLED_STATE)
            {
                if (postTask(cc2420radiom_startRadio, 5))
    1ace:	8d e0       	ldi	r24, 0x0D	; 13
    1ad0:	9f e0       	ldi	r25, 0x0F	; 15
    1ad2:	65 e0       	ldi	r22, 0x05	; 5
    1ad4:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    1ad8:	88 23       	and	r24, r24
    1ada:	89 f3       	breq	.-30     	; 0x1abe <cc2420radiom_StdControl_start+0x12>
                {
                    success = SUCCESS;
                    cc2420radiom_stateRadio =
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	80 93 27 05 	sts	0x0527, r24
    1ae2:	11 e0       	ldi	r17, 0x01	; 1
                        cc2420radiom_DISABLED_STATE_STARTTASK;
                }
            }
        }
        _atomic_end(_atomic);
    1ae4:	80 2f       	mov	r24, r16
    1ae6:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return success;
}
    1aea:	81 2f       	mov	r24, r17
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

00001af2 <cc2420radiom_SFD_disable>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_disable();
    1af2:	0e 94 af 12 	call	0x255e	; 0x255e <hplcc2420interruptm_SFD_disable>
    return result;
}
    1af6:	08 95       	ret

00001af8 <cc2420radiom_Send_sendDone>:
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1af8:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
    return result;
}
    1afc:	08 95       	ret

00001afe <cc2420radiom_sendFailed>:

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1afe:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1b02:	92 e0       	ldi	r25, 0x02	; 2
    1b04:	90 93 27 05 	sts	0x0527, r25
        _atomic_end(_atomic);
    1b08:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1b0c:	e0 91 25 05 	lds	r30, 0x0525
    1b10:	f0 91 26 05 	lds	r31, 0x0526
    1b14:	80 81       	ld	r24, Z
    1b16:	8b 50       	subi	r24, 0x0B	; 11
    1b18:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1b1a:	cf 01       	movw	r24, r30
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
        _atomic_end(_atomic);
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
        MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    cc2420radiom_Send_sendDone(cc2420radiom_txbufptr, FAIL);
}
    1b22:	08 95       	ret

00001b24 <cc2420radiom_PacketSent>:
    return result;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_PacketSent(void)
{
    1b24:	0f 93       	push	r16
    1b26:	1f 93       	push	r17
    Radio_MsgPtr pBuf;

    {
        _atomic_t _atomic = _atomic_start();
    1b28:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1b2c:	92 e0       	ldi	r25, 0x02	; 2
    1b2e:	90 93 27 05 	sts	0x0527, r25
            pBuf = cc2420radiom_txbufptr;
    1b32:	00 91 25 05 	lds	r16, 0x0525
    1b36:	10 91 26 05 	lds	r17, 0x0526
            pBuf->length = pBuf->length - MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	90 81       	ld	r25, Z
    1b3e:	9b 50       	subi	r25, 0x0B	; 11
    1b40:	90 83       	st	Z, r25
        }
        _atomic_end(_atomic);
    1b42:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1b46:	c8 01       	movw	r24, r16
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
            pBuf->length = pBuf->length - MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
        }
        _atomic_end(_atomic);
    }
    cc2420radiom_Send_sendDone(pBuf, SUCCESS);
}
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	08 95       	ret

00001b54 <cc2420radiom_HPLChipconFIFO_readRXFIFO>:
inline result_t cc2420radiom_HPLChipconFIFO_readRXFIFO(uint8_t arg_0xa4118a0,
                                                       uint8_t * arg_0xa411a00)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(arg_0xa4118a0,
    1b54:	0e 94 91 11 	call	0x2322	; 0x2322 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
                                                     arg_0xa411a00);
    return result;
}
    1b58:	08 95       	ret

00001b5a <cc2420radiom_Receive_receive>:
//-------------------------------------------------------------------------
inline Radio_MsgPtr cc2420radiom_Receive_receive(Radio_MsgPtr arg_0xa31b650)
{
    struct Radio_Msg *result;

    result = AMStandard_RadioReceive_receive(arg_0xa31b650);
    1b5a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <AMStandard_RadioReceive_receive>
    return result;
}
    1b5e:	08 95       	ret

00001b60 <cc2420radiom_PacketRcvd>:

//-------------------------------------------------------------------------
inline void cc2420radiom_PacketRcvd(void)
{
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    Radio_MsgPtr pBuf;

    {
        _atomic_t _atomic = _atomic_start();
    1b68:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            pBuf = cc2420radiom_rxbufptr;
    1b6c:	00 91 a9 04 	lds	r16, 0x04A9
    1b70:	10 91 aa 04 	lds	r17, 0x04AA
        } _atomic_end(_atomic);
    1b74:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline Radio_MsgPtr cc2420radiom_Receive_receive(Radio_MsgPtr arg_0xa31b650)
{
    struct Radio_Msg *result;

    result = AMStandard_RadioReceive_receive(arg_0xa31b650);
    1b78:	c8 01       	movw	r24, r16
    1b7a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <AMStandard_RadioReceive_receive>
    1b7e:	ec 01       	movw	r28, r24
            pBuf = cc2420radiom_rxbufptr;
        } _atomic_end(_atomic);
    }
    pBuf = cc2420radiom_Receive_receive((Radio_MsgPtr) pBuf);
    {
        _atomic_t _atomic = _atomic_start();
    1b80:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            if (pBuf)
    1b84:	20 97       	sbiw	r28, 0x00	; 0
    1b86:	21 f0       	breq	.+8      	; 0x1b90 <cc2420radiom_PacketRcvd+0x30>
            {
                cc2420radiom_rxbufptr = pBuf;
    1b88:	d0 93 aa 04 	sts	0x04AA, r29
    1b8c:	c0 93 a9 04 	sts	0x04A9, r28
            }
            cc2420radiom_rxbufptr->length = 0;
    1b90:	e0 91 a9 04 	lds	r30, 0x04A9
    1b94:	f0 91 aa 04 	lds	r31, 0x04AA
    1b98:	10 82       	st	Z, r1
            cc2420radiom_bPacketReceiving = FALSE;
    1b9a:	10 92 ac 04 	sts	0x04AC, r1
        }
        _atomic_end(_atomic);
    1b9e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
}
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	08 95       	ret

00001bac <cc2420radiom_FIFOP_disable>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    1bac:	0e 94 9d 12 	call	0x253a	; 0x253a <hplcc2420interruptm_FIFOP_disable>
    return result;
}
    1bb0:	08 95       	ret

00001bb2 <cc2420radiom_HPLChipcon_read>:
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1bb2:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
    return result;
}
    1bb6:	08 95       	ret

00001bb8 <cc2420radiom_CC2420Control_RxMode>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420Control_RxMode(void)
{
    unsigned char result;

    result = cc2420controlm_CC2420Control_RxMode();
    1bb8:	0e 94 9e 0b 	call	0x173c	; 0x173c <cc2420controlm_CC2420Control_RxMode>
    return result;
}
    1bbc:	08 95       	ret

00001bbe <cc2420radiom_FIFOP_startWait>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1bbe:	0e 94 43 13 	call	0x2686	; 0x2686 <hplcc2420interruptm_FIFOP_startWait>
    return result;
}
    1bc2:	08 95       	ret

00001bc4 <cc2420radiom_HPLChipconFIFO_writeTXFIFO>:
                                                        uint8_t *
                                                        arg_0xa40c170)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO(arg_0xa40c010,
    1bc4:	0e 94 09 12 	call	0x2412	; 0x2412 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>
                                                      arg_0xa40c170);
    return result;
}
    1bc8:	08 95       	ret

00001bca <cc2420radiom_HPLChipcon_cmd>:
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1bca:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    return result;
}
    1bce:	08 95       	ret

00001bd0 <cc2420radiom_flushRXFIFO>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    1bd0:	0e 94 9d 12 	call	0x253a	; 0x253a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1bd4:	8f e3       	ldi	r24, 0x3F	; 63
    1bd6:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1bda:	88 e0       	ldi	r24, 0x08	; 8
    1bdc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    1be0:	88 e0       	ldi	r24, 0x08	; 8
    1be2:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    1be6:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    1bea:	10 92 ac 04 	sts	0x04AC, r1
        _atomic_end(_atomic);
    1bee:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	0e 94 43 13 	call	0x2686	; 0x2686 <hplcc2420interruptm_FIFOP_startWait>

        cc2420radiom_bPacketReceiving = FALSE;
        _atomic_end(_atomic);
    }
    cc2420radiom_FIFOP_startWait(FALSE);
}
    1bf8:	08 95       	ret

00001bfa <cc2420radiom_SFD_enableCapture>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1bfa:	0e 94 cb 12 	call	0x2596	; 0x2596 <hplcc2420interruptm_SFD_enableCapture>
    return result;
}
    1bfe:	08 95       	ret

00001c00 <cc2420radiom_CC2420SplitControl_startDone>:
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_startDone(void)
{
    1c00:	1f 93       	push	r17
    uint8_t chkstateRadio;

    {
        _atomic_t _atomic = _atomic_start();
    1c02:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        chkstateRadio = cc2420radiom_stateRadio;
    1c06:	10 91 27 05 	lds	r17, 0x0527
        _atomic_end(_atomic);
    1c0a:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    if (chkstateRadio == cc2420radiom_WARMUP_STATE)
    1c0e:	1a 30       	cpi	r17, 0x0A	; 10
    1c10:	19 f0       	breq	.+6      	; 0x1c18 <cc2420radiom_CC2420SplitControl_startDone+0x18>
            _atomic_end(_atomic);
        }
    }
    cc2420radiom_SplitControl_startDone();
    return SUCCESS;
}
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	1f 91       	pop	r17
    1c16:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420Control_RxMode(void)
{
    unsigned char result;

    result = cc2420controlm_CC2420Control_RxMode();
    1c18:	0e 94 9e 0b 	call	0x173c	; 0x173c <cc2420controlm_CC2420Control_RxMode>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	0e 94 43 13 	call	0x2686	; 0x2686 <hplcc2420interruptm_FIFOP_startWait>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	0e 94 cb 12 	call	0x2596	; 0x2596 <hplcc2420interruptm_SFD_enableCapture>
    {
        cc2420radiom_CC2420Control_RxMode();
        cc2420radiom_FIFOP_startWait(FALSE);
        cc2420radiom_SFD_enableCapture(TRUE);
        {
            _atomic_t _atomic = _atomic_start();
    1c28:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

            cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1c2c:	92 e0       	ldi	r25, 0x02	; 2
    1c2e:	90 93 27 05 	sts	0x0527, r25
            _atomic_end(_atomic);
    1c32:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
        }
    }
    cc2420radiom_SplitControl_startDone();
    return SUCCESS;
}
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	1f 91       	pop	r17
    1c3a:	08 95       	ret

00001c3c <cc2420radiom_CC2420SplitControl_start>:
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_start(void)
{
    unsigned char result;

    result = cc2420controlm_SplitControl_start();
    1c3c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <cc2420controlm_SplitControl_start>
    return result;
}
    1c40:	08 95       	ret

00001c42 <cc2420radiom_SplitControl_start>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_start(void)
{
    1c42:	1f 93       	push	r17
    uint8_t chkstateRadio;

    {
        _atomic_t _atomic = _atomic_start();
    1c44:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        chkstateRadio = cc2420radiom_stateRadio;
    1c48:	10 91 27 05 	lds	r17, 0x0527
        _atomic_end(_atomic);
    1c4c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    if (chkstateRadio == cc2420radiom_DISABLED_STATE)
    1c50:	11 23       	and	r17, r17
    1c52:	19 f0       	breq	.+6      	; 0x1c5a <cc2420radiom_SplitControl_start+0x18>
    1c54:	80 e0       	ldi	r24, 0x00	; 0
            _atomic_end(_atomic);
        }
        return cc2420radiom_CC2420SplitControl_start();
    }
    return FAIL;
}
    1c56:	1f 91       	pop	r17
    1c58:	08 95       	ret
        _atomic_end(_atomic);
    }
    if (chkstateRadio == cc2420radiom_DISABLED_STATE)
    {
        {
            _atomic_t _atomic = _atomic_start();
    1c5a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

            {
                cc2420radiom_stateRadio = cc2420radiom_WARMUP_STATE;
    1c5e:	9a e0       	ldi	r25, 0x0A	; 10
    1c60:	90 93 27 05 	sts	0x0527, r25
                cc2420radiom_countRetry = 0;
    1c64:	10 92 22 05 	sts	0x0522, r1
                cc2420radiom_rxbufptr->length = 0;
    1c68:	e0 91 a9 04 	lds	r30, 0x04A9
    1c6c:	f0 91 aa 04 	lds	r31, 0x04AA
    1c70:	10 82       	st	Z, r1
            }
            _atomic_end(_atomic);
    1c72:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_start(void)
{
    unsigned char result;

    result = cc2420controlm_SplitControl_start();
    1c76:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <cc2420controlm_SplitControl_start>
            _atomic_end(_atomic);
        }
        return cc2420radiom_CC2420SplitControl_start();
    }
    return FAIL;
}
    1c7a:	1f 91       	pop	r17
    1c7c:	08 95       	ret

00001c7e <cc2420radiom_SplitControl_init>:

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_init(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1c7e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
    1c82:	10 92 27 05 	sts	0x0527, r1
            cc2420radiom_currentDSN = 0;
    1c86:	10 92 ab 04 	sts	0x04AB, r1
            cc2420radiom_bAckEnable = FALSE;
    1c8a:	10 92 21 05 	sts	0x0521, r1
            cc2420radiom_bPacketReceiving = FALSE;
    1c8e:	10 92 ac 04 	sts	0x04AC, r1
            cc2420radiom_rxbufptr = &cc2420radiom_RxBuf;
    1c92:	2d ea       	ldi	r18, 0xAD	; 173
    1c94:	34 e0       	ldi	r19, 0x04	; 4
    1c96:	30 93 aa 04 	sts	0x04AA, r19
    1c9a:	20 93 a9 04 	sts	0x04A9, r18
            cc2420radiom_rxbufptr->length = 0;
    1c9e:	10 92 ad 04 	sts	0x04AD, r1
        }
        _atomic_end(_atomic);
    1ca2:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    cc2420radiom_LocalAddr = CURRENT_NODE_ID;
    1ca6:	80 91 32 04 	lds	r24, 0x0432
    1caa:	90 91 33 04 	lds	r25, 0x0433
    1cae:	90 93 24 05 	sts	0x0524, r25
    1cb2:	80 93 23 05 	sts	0x0523, r24
    return cc2420controlm_SplitControl_init();
    1cb6:	0e 94 14 0c 	call	0x1828	; 0x1828 <cc2420controlm_SplitControl_init>
}
    1cba:	08 95       	ret

00001cbc <cc2420radiom_sendPacket>:
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1cbc:	85 e0       	ldi	r24, 0x05	; 5
    1cbe:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
{
    uint8_t status;

    cc2420radiom_HPLChipcon_cmd(0x05);
    status = cc2420radiom_HPLChipcon_cmd(0x00);
    if ((status >> 3) & 0x01)
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    1cc8:	86 95       	lsr	r24
    1cca:	86 95       	lsr	r24
    1ccc:	86 95       	lsr	r24
    1cce:	80 fd       	sbrc	r24, 0
    1cd0:	13 c0       	rjmp	.+38     	; 0x1cf8 <cc2420radiom_sendPacket+0x3c>

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1cd2:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1cd6:	92 e0       	ldi	r25, 0x02	; 2
    1cd8:	90 93 27 05 	sts	0x0527, r25
        _atomic_end(_atomic);
    1cdc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1ce0:	e0 91 25 05 	lds	r30, 0x0525
    1ce4:	f0 91 26 05 	lds	r31, 0x0526
    1ce8:	80 81       	ld	r24, Z
    1cea:	8b 50       	subi	r24, 0x0B	; 11
    1cec:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1cee:	cf 01       	movw	r24, r30
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
    1cf6:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	0e 94 cb 12 	call	0x2596	; 0x2596 <hplcc2420interruptm_SFD_enableCapture>
    1cfe:	08 95       	ret

00001d00 <cc2420radiom_SFD_captured>:
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_captured(uint16_t time)
{
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	ec 01       	movw	r28, r24
    switch (cc2420radiom_stateRadio)
    1d06:	80 91 27 05 	lds	r24, 0x0527
    1d0a:	83 30       	cpi	r24, 0x03	; 3
    1d0c:	c9 f1       	breq	.+114    	; 0x1d80 <cc2420radiom_SFD_captured+0x80>
    1d0e:	84 30       	cpi	r24, 0x04	; 4
    1d10:	91 f0       	breq	.+36     	; 0x1d36 <cc2420radiom_SFD_captured+0x36>
        break;
    default:
        ;
    }
    return SUCCESS;
}
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_disable();
    1d1a:	0e 94 af 12 	call	0x255e	; 0x255e <hplcc2420interruptm_SFD_disable>
        }
        else
        {
            cc2420radiom_stateRadio = cc2420radiom_TX_WAIT;
        }
        cc2420radiom_txbufptr->time = time;
    1d1e:	e0 91 25 05 	lds	r30, 0x0525
    1d22:	f0 91 26 05 	lds	r31, 0x0526
    1d26:	ee 58       	subi	r30, 0x8E	; 142
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	d1 83       	std	Z+1, r29	; 0x01
    1d2c:	c0 83       	st	Z, r28
        if (cc2420radiom_stateRadio == cc2420radiom_TX_WAIT)
    1d2e:	80 91 27 05 	lds	r24, 0x0527
    1d32:	84 30       	cpi	r24, 0x04	; 4
    1d34:	71 f3       	breq	.-36     	; 0x1d12 <cc2420radiom_SFD_captured+0x12>
        {
            break;
        }
    case cc2420radiom_TX_WAIT:
        cc2420radiom_stateRadio = cc2420radiom_POST_TX_STATE;
    1d36:	86 e0       	ldi	r24, 0x06	; 6
    1d38:	80 93 27 05 	sts	0x0527, r24
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_disable();
    1d3c:	0e 94 af 12 	call	0x255e	; 0x255e <hplcc2420interruptm_SFD_disable>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	0e 94 cb 12 	call	0x2596	; 0x2596 <hplcc2420interruptm_SFD_enableCapture>
        }
    case cc2420radiom_TX_WAIT:
        cc2420radiom_stateRadio = cc2420radiom_POST_TX_STATE;
        cc2420radiom_SFD_disable();
        cc2420radiom_SFD_enableCapture(TRUE);
        if (!postTask(cc2420radiom_PacketSent, 5))
    1d46:	82 e9       	ldi	r24, 0x92	; 146
    1d48:	9d e0       	ldi	r25, 0x0D	; 13
    1d4a:	65 e0       	ldi	r22, 0x05	; 5
    1d4c:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    1d50:	88 23       	and	r24, r24
    1d52:	f9 f6       	brne	.-66     	; 0x1d12 <cc2420radiom_SFD_captured+0x12>

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1d54:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1d58:	92 e0       	ldi	r25, 0x02	; 2
    1d5a:	90 93 27 05 	sts	0x0527, r25
        _atomic_end(_atomic);
    1d5e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1d62:	e0 91 25 05 	lds	r30, 0x0525
    1d66:	f0 91 26 05 	lds	r31, 0x0526
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8b 50       	subi	r24, 0x0B	; 11
    1d6e:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1d70:	cf 01       	movw	r24, r30
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
        break;
    default:
        ;
    }
    return SUCCESS;
}
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	0e 94 cb 12 	call	0x2596	; 0x2596 <hplcc2420interruptm_SFD_enableCapture>
{
    switch (cc2420radiom_stateRadio)
    {
    case cc2420radiom_TX_STATE:
        cc2420radiom_SFD_enableCapture(FALSE);
        if (!LITE_READ_CC_SFD_PIN())
    1d86:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <LITE_READ_CC_SFD_PIN>
    1d8a:	89 2b       	or	r24, r25
    1d8c:	31 f2       	breq	.-116    	; 0x1d1a <cc2420radiom_SFD_captured+0x1a>
        {
            cc2420radiom_SFD_disable();
        }
        else
        {
            cc2420radiom_stateRadio = cc2420radiom_TX_WAIT;
    1d8e:	84 e0       	ldi	r24, 0x04	; 4
    1d90:	80 93 27 05 	sts	0x0527, r24
        }
        cc2420radiom_txbufptr->time = time;
    1d94:	e0 91 25 05 	lds	r30, 0x0525
    1d98:	f0 91 26 05 	lds	r31, 0x0526
    1d9c:	ee 58       	subi	r30, 0x8E	; 142
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	d1 83       	std	Z+1, r29	; 0x01
    1da2:	c0 83       	st	Z, r28
        break;
    default:
        ;
    }
    return SUCCESS;
}
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <cc2420radiom_startSend>:
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1dac:	89 e0       	ldi	r24, 0x09	; 9
    1dae:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
}

//-------------------------------------------------------------------------
inline void cc2420radiom_startSend(void)
{
    if (!cc2420radiom_HPLChipcon_cmd(0x09))
    1db2:	88 23       	and	r24, r24
    1db4:	61 f0       	breq	.+24     	; 0x1dce <cc2420radiom_startSend+0x22>
                                                        uint8_t *
                                                        arg_0xa40c170)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO(arg_0xa40c010,
    1db6:	80 91 28 05 	lds	r24, 0x0528
    1dba:	60 91 25 05 	lds	r22, 0x0525
    1dbe:	70 91 26 05 	lds	r23, 0x0526
    1dc2:	8f 5f       	subi	r24, 0xFF	; 255
    1dc4:	0e 94 09 12 	call	0x2412	; 0x2412 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>
    if (!cc2420radiom_HPLChipcon_cmd(0x09))
    {
        cc2420radiom_sendFailed();
        return;
    }
    if (!cc2420radiom_HPLChipconFIFO_writeTXFIFO(cc2420radiom_txlength + 1,
    1dc8:	88 23       	and	r24, r24
    1dca:	a1 f0       	breq	.+40     	; 0x1df4 <cc2420radiom_startSend+0x48>
    1dcc:	08 95       	ret

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1dce:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1dd2:	92 e0       	ldi	r25, 0x02	; 2
    1dd4:	90 93 27 05 	sts	0x0527, r25
        _atomic_end(_atomic);
    1dd8:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1ddc:	e0 91 25 05 	lds	r30, 0x0525
    1de0:	f0 91 26 05 	lds	r31, 0x0526
    1de4:	80 81       	ld	r24, Z
    1de6:	8b 50       	subi	r24, 0x0B	; 11
    1de8:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1dea:	cf 01       	movw	r24, r30
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
    1df2:	08 95       	ret

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1df4:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1df8:	92 e0       	ldi	r25, 0x02	; 2
    1dfa:	90 93 27 05 	sts	0x0527, r25
        _atomic_end(_atomic);
    1dfe:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1e02:	e0 91 25 05 	lds	r30, 0x0525
    1e06:	f0 91 26 05 	lds	r31, 0x0526
    1e0a:	80 81       	ld	r24, Z
    1e0c:	8b 50       	subi	r24, 0x0B	; 11
    1e0e:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1e10:	cf 01       	movw	r24, r30
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
    1e18:	08 95       	ret

00001e1a <cc2420radiom_startRadio>:
    return FAIL;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_startRadio(void)
{
    1e1a:	1f 93       	push	r17
    result_t success = FAIL;

    {
        _atomic_t _atomic = _atomic_start();
    1e1c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    1e20:	98 2f       	mov	r25, r24

        {
            if (cc2420radiom_stateRadio ==
    1e22:	80 91 27 05 	lds	r24, 0x0527
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	29 f0       	breq	.+10     	; 0x1e34 <cc2420radiom_startRadio+0x1a>
            {
                cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
                success = SUCCESS;
            }
        }
        _atomic_end(_atomic);
    1e2a:	89 2f       	mov	r24, r25
    1e2c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    if (success == SUCCESS)
    {
        cc2420radiom_SplitControl_start();
    }
}
    1e30:	1f 91       	pop	r17
    1e32:	08 95       	ret

        {
            if (cc2420radiom_stateRadio ==
                cc2420radiom_DISABLED_STATE_STARTTASK)
            {
                cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
    1e34:	10 92 27 05 	sts	0x0527, r1
                success = SUCCESS;
            }
        }
        _atomic_end(_atomic);
    1e38:	89 2f       	mov	r24, r25
    1e3a:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
inline result_t cc2420radiom_SplitControl_start(void)
{
    uint8_t chkstateRadio;

    {
        _atomic_t _atomic = _atomic_start();
    1e3e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        chkstateRadio = cc2420radiom_stateRadio;
    1e42:	10 91 27 05 	lds	r17, 0x0527
        _atomic_end(_atomic);
    1e46:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    if (chkstateRadio == cc2420radiom_DISABLED_STATE)
    1e4a:	11 23       	and	r17, r17
    1e4c:	89 f7       	brne	.-30     	; 0x1e30 <cc2420radiom_startRadio+0x16>
    {
        {
            _atomic_t _atomic = _atomic_start();
    1e4e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

            {
                cc2420radiom_stateRadio = cc2420radiom_WARMUP_STATE;
    1e52:	9a e0       	ldi	r25, 0x0A	; 10
    1e54:	90 93 27 05 	sts	0x0527, r25
                cc2420radiom_countRetry = 0;
    1e58:	10 92 22 05 	sts	0x0522, r1
                cc2420radiom_rxbufptr->length = 0;
    1e5c:	e0 91 a9 04 	lds	r30, 0x04A9
    1e60:	f0 91 aa 04 	lds	r31, 0x04AA
    1e64:	10 82       	st	Z, r1
            }
            _atomic_end(_atomic);
    1e66:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_start(void)
{
    unsigned char result;

    result = cc2420controlm_SplitControl_start();
    1e6a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <cc2420controlm_SplitControl_start>
    1e6e:	e0 cf       	rjmp	.-64     	; 0x1e30 <cc2420radiom_startRadio+0x16>

00001e70 <cc2420radiom_Send_send>:
    }
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_Send_send(Radio_MsgPtr pMsg)
{
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	ec 01       	movw	r28, r24
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();
    1e78:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        currentstate = cc2420radiom_stateRadio;
    1e7c:	10 91 27 05 	lds	r17, 0x0527
        _atomic_end(_atomic);
    1e80:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    if (currentstate == cc2420radiom_IDLE_STATE)
    1e84:	12 30       	cpi	r17, 0x02	; 2
    1e86:	29 f0       	breq	.+10     	; 0x1e92 <cc2420radiom_Send_send+0x22>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
            cc2420radiom_sendFailed();
        }
        return SUCCESS;
    }
    return FAIL;
}
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	1f 91       	pop	r17
    1e90:	08 95       	ret
        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_IDLE_STATE)
    {
        pMsg->fcflo = 0x08;
    1e92:	88 e0       	ldi	r24, 0x08	; 8
    1e94:	8a 83       	std	Y+2, r24	; 0x02
        if (cc2420radiom_bAckEnable)
    1e96:	80 91 21 05 	lds	r24, 0x0521
    1e9a:	88 23       	and	r24, r24
    1e9c:	c9 f5       	brne	.+114    	; 0x1f10 <cc2420radiom_Send_send+0xa0>
        {
            pMsg->fcfhi = 0x21;
        }
        else
        {
            pMsg->fcfhi = 0x01;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	89 83       	std	Y+1, r24	; 0x01
        }
        pMsg->destpan = BCAST_ADDRESS;
    1ea2:	8f ef       	ldi	r24, 0xFF	; 255
    1ea4:	9f ef       	ldi	r25, 0xFF	; 255
    1ea6:	9d 83       	std	Y+5, r25	; 0x05
    1ea8:	8c 83       	std	Y+4, r24	; 0x04
        //don't understand why it has to be LSB. Must check later. 
        pMsg->addr = toLSB16(pMsg->addr);
    1eaa:	8e 81       	ldd	r24, Y+6	; 0x06
    1eac:	9f 81       	ldd	r25, Y+7	; 0x07
    1eae:	0e 94 01 3b 	call	0x7602	; 0x7602 <toLSB16>
    1eb2:	9f 83       	std	Y+7, r25	; 0x07
    1eb4:	8e 83       	std	Y+6, r24	; 0x06
        //The length now includes both the 
        pMsg->length = pMsg->length + MSG_HEADER_SIZE + MSG_FOOTER_SIZE;
    1eb6:	88 81       	ld	r24, Y
    1eb8:	85 5f       	subi	r24, 0xF5	; 245
    1eba:	88 83       	st	Y, r24
        pMsg->dsn = ++cc2420radiom_currentDSN;
    1ebc:	80 91 ab 04 	lds	r24, 0x04AB
    1ec0:	8f 5f       	subi	r24, 0xFF	; 255
    1ec2:	80 93 ab 04 	sts	0x04AB, r24
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
        pMsg->time = 0;
    1ec8:	ce 58       	subi	r28, 0x8E	; 142
    1eca:	df 4f       	sbci	r29, 0xFF	; 255
    1ecc:	19 82       	std	Y+1, r1	; 0x01
    1ece:	18 82       	st	Y, r1
    1ed0:	c2 57       	subi	r28, 0x72	; 114
    1ed2:	d0 40       	sbci	r29, 0x00	; 0
        cc2420radiom_txlength = pMsg->length - MSG_FOOTER_SIZE;
    1ed4:	88 81       	ld	r24, Y
    1ed6:	82 50       	subi	r24, 0x02	; 2
    1ed8:	80 93 28 05 	sts	0x0528, r24
        cc2420radiom_txbufptr = pMsg;
    1edc:	d0 93 26 05 	sts	0x0526, r29
    1ee0:	c0 93 25 05 	sts	0x0525, r28
        cc2420radiom_countRetry = 8;
    1ee4:	88 e0       	ldi	r24, 0x08	; 8
    1ee6:	80 93 22 05 	sts	0x0522, r24
        {
            _atomic_t _atomic = _atomic_start();
    1eea:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

            cc2420radiom_stateRadio = cc2420radiom_PRE_TX_STATE;
    1eee:	95 e0       	ldi	r25, 0x05	; 5
    1ef0:	90 93 27 05 	sts	0x0527, r25
            _atomic_end(_atomic);
    1ef4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
        }
        if (!postTask(cc2420radiom_startSend, 5))
    1ef8:	86 ed       	ldi	r24, 0xD6	; 214
    1efa:	9e e0       	ldi	r25, 0x0E	; 14
    1efc:	65 e0       	ldi	r22, 0x05	; 5
    1efe:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    1f02:	88 23       	and	r24, r24
    1f04:	41 f0       	breq	.+16     	; 0x1f16 <cc2420radiom_Send_send+0xa6>
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1f06:	81 e0       	ldi	r24, 0x01	; 1
            cc2420radiom_sendFailed();
        }
        return SUCCESS;
    }
    return FAIL;
}
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	08 95       	ret
    if (currentstate == cc2420radiom_IDLE_STATE)
    {
        pMsg->fcflo = 0x08;
        if (cc2420radiom_bAckEnable)
        {
            pMsg->fcfhi = 0x21;
    1f10:	81 e2       	ldi	r24, 0x21	; 33
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	c6 cf       	rjmp	.-116    	; 0x1ea2 <cc2420radiom_Send_send+0x32>

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    1f16:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    1f1a:	92 e0       	ldi	r25, 0x02	; 2
    1f1c:	90 93 27 05 	sts	0x0527, r25
        _atomic_end(_atomic);
    1f20:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
    1f24:	e0 91 25 05 	lds	r30, 0x0525
    1f28:	f0 91 26 05 	lds	r31, 0x0526
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8b 50       	subi	r24, 0x0B	; 11
    1f30:	80 83       	st	Z, r24
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    1f32:	cf 01       	movw	r24, r30
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	0e 94 c4 08 	call	0x1188	; 0x1188 <AMStandard_RadioSend_sendDone>
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	e5 cf       	rjmp	.-54     	; 0x1f08 <cc2420radiom_Send_send+0x98>

00001f3e <cc2420radiom_tryToSend>:
    }
}

//-------------------------------------------------------------------------
inline void cc2420radiom_tryToSend(void)
{
    1f3e:	1f 93       	push	r17
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();
    1f40:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        currentstate = cc2420radiom_stateRadio;
    1f44:	10 91 27 05 	lds	r17, 0x0527
        _atomic_end(_atomic);
    1f48:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    1f4c:	15 30       	cpi	r17, 0x05	; 5
    1f4e:	b1 f0       	breq	.+44     	; 0x1f7c <cc2420radiom_tryToSend+0x3e>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    1f50:	0e 94 9d 12 	call	0x253a	; 0x253a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1f54:	8f e3       	ldi	r24, 0x3F	; 63
    1f56:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1f5a:	88 e0       	ldi	r24, 0x08	; 8
    1f5c:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    1f60:	88 e0       	ldi	r24, 0x08	; 8
    1f62:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    1f66:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    1f6a:	10 92 ac 04 	sts	0x04AC, r1
        _atomic_end(_atomic);
    1f6e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	0e 94 43 13 	call	0x2686	; 0x2686 <hplcc2420interruptm_FIFOP_startWait>
    }
    else
    {
        cc2420radiom_flushRXFIFO();
    }
}
    1f78:	1f 91       	pop	r17
    1f7a:	08 95       	ret
        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    {
        if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    1f7c:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    1f80:	89 2b       	or	r24, r25
    1f82:	71 f0       	breq	.+28     	; 0x1fa0 <cc2420radiom_tryToSend+0x62>
        {
            cc2420radiom_flushRXFIFO();
        }
        if (LITE_READ_RADIO_CCA_PIN())
    1f84:	0e 94 15 06 	call	0xc2a	; 0xc2a <LITE_READ_RADIO_CCA_PIN>
    1f88:	89 2b       	or	r24, r25
    1f8a:	b1 f3       	breq	.-20     	; 0x1f78 <cc2420radiom_tryToSend+0x3a>
        {
            {
                _atomic_t _atomic = _atomic_start();
    1f8c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

                cc2420radiom_stateRadio = cc2420radiom_TX_STATE;
    1f90:	93 e0       	ldi	r25, 0x03	; 3
    1f92:	90 93 27 05 	sts	0x0527, r25
                _atomic_end(_atomic);
    1f96:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
            }
            cc2420radiom_sendPacket();
    1f9a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <cc2420radiom_sendPacket>
    1f9e:	ec cf       	rjmp	.-40     	; 0x1f78 <cc2420radiom_tryToSend+0x3a>
        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    {
        if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    1fa0:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    1fa4:	89 2b       	or	r24, r25
    1fa6:	71 f7       	brne	.-36     	; 0x1f84 <cc2420radiom_tryToSend+0x46>
        {
            cc2420radiom_flushRXFIFO();
    1fa8:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <cc2420radiom_flushRXFIFO>
    1fac:	eb cf       	rjmp	.-42     	; 0x1f84 <cc2420radiom_tryToSend+0x46>

00001fae <cc2420radiom_HPLChipconFIFO_TXFIFODone>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_HPLChipconFIFO_TXFIFODone(uint8_t length,
                                                       uint8_t * data)
{
    1fae:	1f 93       	push	r17
inline void cc2420radiom_tryToSend(void)
{
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();
    1fb0:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        currentstate = cc2420radiom_stateRadio;
    1fb4:	10 91 27 05 	lds	r17, 0x0527
        _atomic_end(_atomic);
    1fb8:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    1fbc:	15 30       	cpi	r17, 0x05	; 5
    1fbe:	b9 f0       	breq	.+46     	; 0x1fee <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x40>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    1fc0:	0e 94 9d 12 	call	0x253a	; 0x253a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    1fc4:	8f e3       	ldi	r24, 0x3F	; 63
    1fc6:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    1fca:	88 e0       	ldi	r24, 0x08	; 8
    1fcc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    1fd0:	88 e0       	ldi	r24, 0x08	; 8
    1fd2:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    1fd6:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    1fda:	10 92 ac 04 	sts	0x04AC, r1
        _atomic_end(_atomic);
    1fde:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	0e 94 43 13 	call	0x2686	; 0x2686 <hplcc2420interruptm_FIFOP_startWait>
inline result_t cc2420radiom_HPLChipconFIFO_TXFIFODone(uint8_t length,
                                                       uint8_t * data)
{
    cc2420radiom_tryToSend();
    return SUCCESS;
}
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	1f 91       	pop	r17
    1fec:	08 95       	ret
        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    {
        if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    1fee:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    1ff2:	89 2b       	or	r24, r25
    1ff4:	71 f0       	breq	.+28     	; 0x2012 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x64>
        {
            cc2420radiom_flushRXFIFO();
        }
        if (LITE_READ_RADIO_CCA_PIN())
    1ff6:	0e 94 15 06 	call	0xc2a	; 0xc2a <LITE_READ_RADIO_CCA_PIN>
    1ffa:	89 2b       	or	r24, r25
    1ffc:	a9 f3       	breq	.-22     	; 0x1fe8 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x3a>
        {
            {
                _atomic_t _atomic = _atomic_start();
    1ffe:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

                cc2420radiom_stateRadio = cc2420radiom_TX_STATE;
    2002:	93 e0       	ldi	r25, 0x03	; 3
    2004:	90 93 27 05 	sts	0x0527, r25
                _atomic_end(_atomic);
    2008:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
            }
            cc2420radiom_sendPacket();
    200c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <cc2420radiom_sendPacket>
    2010:	eb cf       	rjmp	.-42     	; 0x1fe8 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x3a>
        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    {
        if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    2012:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    2016:	89 2b       	or	r24, r25
    2018:	71 f7       	brne	.-36     	; 0x1ff6 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x48>
        {
            cc2420radiom_flushRXFIFO();
    201a:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <cc2420radiom_flushRXFIFO>
    201e:	eb cf       	rjmp	.-42     	; 0x1ff6 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x48>

00002020 <cc2420radiom_FIFOP_fired>:
    cc2420radiom_delayedRXFIFO();
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_fired(void)
{
    2020:	1f 93       	push	r17
    if (!LITE_READ_CC_FIFO_PIN())
    2022:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    2026:	89 2b       	or	r24, r25
    2028:	39 f1       	breq	.+78     	; 0x2078 <cc2420radiom_FIFOP_fired+0x58>
    {
        cc2420radiom_flushRXFIFO();
        return SUCCESS;
    }
    {
        _atomic_t _atomic = _atomic_start();
    202a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    202e:	18 2f       	mov	r17, r24

        {
            if (postTask(cc2420radiom_delayedRXFIFOtask, 5))
    2030:	8e e3       	ldi	r24, 0x3E	; 62
    2032:	91 e1       	ldi	r25, 0x11	; 17
    2034:	65 e0       	ldi	r22, 0x05	; 5
    2036:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    203a:	88 23       	and	r24, r24
    203c:	d1 f4       	brne	.+52     	; 0x2072 <cc2420radiom_FIFOP_fired+0x52>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    203e:	0e 94 9d 12 	call	0x253a	; 0x253a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    2042:	8f e3       	ldi	r24, 0x3F	; 63
    2044:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    2048:	88 e0       	ldi	r24, 0x08	; 8
    204a:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    204e:	88 e0       	ldi	r24, 0x08	; 8
    2050:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    2054:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    2058:	10 92 ac 04 	sts	0x04AC, r1
        _atomic_end(_atomic);
    205c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	0e 94 43 13 	call	0x2686	; 0x2686 <hplcc2420interruptm_FIFOP_startWait>
            else
            {
                cc2420radiom_flushRXFIFO();
            }
        }
        _atomic_end(_atomic);
    2066:	81 2f       	mov	r24, r17
    2068:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return SUCCESS;
}
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	1f 91       	pop	r17
    2070:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    2072:	0e 94 9d 12 	call	0x253a	; 0x253a <hplcc2420interruptm_FIFOP_disable>
    2076:	f7 cf       	rjmp	.-18     	; 0x2066 <cc2420radiom_FIFOP_fired+0x46>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    2078:	0e 94 9d 12 	call	0x253a	; 0x253a <hplcc2420interruptm_FIFOP_disable>
    207c:	8f e3       	ldi	r24, 0x3F	; 63
    207e:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    2082:	88 e0       	ldi	r24, 0x08	; 8
    2084:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    2088:	88 e0       	ldi	r24, 0x08	; 8
    208a:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    208e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    2092:	10 92 ac 04 	sts	0x04AC, r1
        _atomic_end(_atomic);
    2096:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	0e 94 43 13 	call	0x2686	; 0x2686 <hplcc2420interruptm_FIFOP_startWait>
            }
        }
        _atomic_end(_atomic);
    }
    return SUCCESS;
}
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	1f 91       	pop	r17
    20a4:	08 95       	ret

000020a6 <cc2420radiom_HPLChipconFIFO_RXFIFODone>:
}

//ALL THE DATA IN LENGTH IS THE CORRECT FRAME 
inline result_t cc2420radiom_HPLChipconFIFO_RXFIFODone(uint8_t length,
                                                       uint8_t * data)
{
    20a6:	1f 93       	push	r17
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	18 2f       	mov	r17, r24
    20ae:	eb 01       	movw	r28, r22
    //The data now contains the full packet, starting with a packet length which is the remaining part of the packet, not including itself
    //The length, however, includes everything 
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();
    20b0:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            currentstate = cc2420radiom_stateRadio;
        }
        _atomic_end(_atomic);
    20b4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    if (((!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN()) || length
    20b8:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    20bc:	89 2b       	or	r24, r25
    20be:	71 f1       	breq	.+92     	; 0x211c <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x76>
    20c0:	11 23       	and	r17, r17
    20c2:	69 f0       	breq	.+26     	; 0x20de <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
    20c4:	11 37       	cpi	r17, 0x71	; 113
    20c6:	58 f4       	brcc	.+22     	; 0x20de <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
            cc2420radiom_bPacketReceiving = FALSE;
            _atomic_end(_atomic);
        }
        return SUCCESS;
    }
    cc2420radiom_rxbufptr = (Radio_MsgPtr) data;
    20c8:	d0 93 aa 04 	sts	0x04AA, r29
    20cc:	c0 93 a9 04 	sts	0x04A9, r28
    if ((cc2420radiom_rxbufptr->fcfhi & 0x07) != 0x01
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	87 70       	andi	r24, 0x07	; 7
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	19 f4       	brne	.+6      	; 0x20de <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	88 30       	cpi	r24, 0x08	; 8
    20dc:	21 f1       	breq	.+72     	; 0x2126 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x80>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    20de:	0e 94 9d 12 	call	0x253a	; 0x253a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    20e2:	8f e3       	ldi	r24, 0x3F	; 63
    20e4:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    20e8:	88 e0       	ldi	r24, 0x08	; 8
    20ea:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    20ee:	88 e0       	ldi	r24, 0x08	; 8
    20f0:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    20f4:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    20f8:	10 92 ac 04 	sts	0x04AC, r1
        _atomic_end(_atomic);
    20fc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	0e 94 43 13 	call	0x2686	; 0x2686 <hplcc2420interruptm_FIFOP_startWait>
    if ((cc2420radiom_rxbufptr->fcfhi & 0x07) != 0x01
        || cc2420radiom_rxbufptr->fcflo != 0x08)
    {
        cc2420radiom_flushRXFIFO();
        {
            _atomic_t _atomic = _atomic_start();
    2106:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

            cc2420radiom_bPacketReceiving = FALSE;
    210a:	10 92 ac 04 	sts	0x04AC, r1
            _atomic_end(_atomic);
    210e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
            return SUCCESS;
        }
    }
    cc2420radiom_flushRXFIFO();
    return SUCCESS;
}
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	08 95       	ret
        {
            currentstate = cc2420radiom_stateRadio;
        }
        _atomic_end(_atomic);
    }
    if (((!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN()) || length
    211c:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    2120:	89 2b       	or	r24, r25
    2122:	71 f6       	brne	.-100    	; 0x20c0 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1a>
    2124:	dc cf       	rjmp	.-72     	; 0x20de <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
            _atomic_end(_atomic);
        }
        return SUCCESS;
    }
    //Now modifies the length such that it only points to the actual payload defined by the user 
    cc2420radiom_rxbufptr->length = cc2420radiom_rxbufptr->length -
    2126:	88 81       	ld	r24, Y
    2128:	8b 50       	subi	r24, 0x0B	; 11
    212a:	88 83       	st	Y, r24
        MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    //Revised by Qing, from 29 to PAYLOAD_LENGTH 
    if (cc2420radiom_rxbufptr->length > PAYLOAD_LENGTH)
    212c:	85 36       	cpi	r24, 0x65	; 101
    212e:	08 f0       	brcs	.+2      	; 0x2132 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x8c>
    2130:	49 c0       	rjmp	.+146    	; 0x21c4 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x11e>
            cc2420radiom_bPacketReceiving = FALSE;
            _atomic_end(_atomic);
        }
        return SUCCESS;
    }
    cc2420radiom_rxbufptr->addr = fromLSB16(cc2420radiom_rxbufptr->addr);
    2132:	8e 81       	ldd	r24, Y+6	; 0x06
    2134:	9f 81       	ldd	r25, Y+7	; 0x07
    2136:	0e 94 17 3b 	call	0x762e	; 0x762e <fromLSB16>
    213a:	9f 83       	std	Y+7, r25	; 0x07
    213c:	8e 83       	std	Y+6, r24	; 0x06
    //CRC and LQI share the information 
    cc2420radiom_rxbufptr->crc = data[length - 1] >> 7;
    213e:	e0 91 a9 04 	lds	r30, 0x04A9
    2142:	f0 91 aa 04 	lds	r31, 0x04AA
    2146:	21 2f       	mov	r18, r17
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	21 50       	subi	r18, 0x01	; 1
    214c:	30 40       	sbci	r19, 0x00	; 0
    214e:	de 01       	movw	r26, r28
    2150:	a2 0f       	add	r26, r18
    2152:	b3 1f       	adc	r27, r19
    2154:	2f 5f       	subi	r18, 0xFF	; 255
    2156:	3f 4f       	sbci	r19, 0xFF	; 255
    2158:	e0 59       	subi	r30, 0x90	; 144
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	8c 91       	ld	r24, X
    215e:	88 1f       	adc	r24, r24
    2160:	88 27       	eor	r24, r24
    2162:	88 1f       	adc	r24, r24
    2164:	80 83       	st	Z, r24
    cc2420radiom_rxbufptr->strength = data[length - 2];
    2166:	32 97       	sbiw	r30, 0x02	; 2
    2168:	c2 0f       	add	r28, r18
    216a:	d3 1f       	adc	r29, r19
    216c:	22 97       	sbiw	r28, 0x02	; 2
    216e:	88 81       	ld	r24, Y
    2170:	81 93       	st	Z+, r24
    cc2420radiom_rxbufptr->lqi = data[length - 1] & 0x7F;
    2172:	8c 91       	ld	r24, X
    2174:	8f 77       	andi	r24, 0x7F	; 127
    2176:	80 83       	st	Z, r24
    {
        _atomic_t _atomic = _atomic_start();
    2178:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    217c:	18 2f       	mov	r17, r24

        {
            if (!postTask(cc2420radiom_PacketRcvd, 5))
    217e:	80 eb       	ldi	r24, 0xB0	; 176
    2180:	9d e0       	ldi	r25, 0x0D	; 13
    2182:	65 e0       	ldi	r22, 0x05	; 5
    2184:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    2188:	88 23       	and	r24, r24
    218a:	11 f4       	brne	.+4      	; 0x2190 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0xea>
            {
                cc2420radiom_bPacketReceiving = FALSE;
    218c:	10 92 ac 04 	sts	0x04AC, r1
            }
        }
        _atomic_end(_atomic);
    2190:	81 2f       	mov	r24, r17
    2192:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    2196:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    219a:	89 2b       	or	r24, r25
    219c:	21 f4       	brne	.+8      	; 0x21a6 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x100>
    219e:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    21a2:	89 2b       	or	r24, r25
    21a4:	61 f0       	breq	.+24     	; 0x21be <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x118>
    {
        cc2420radiom_flushRXFIFO();
        return SUCCESS;
    }
    if (!LITE_READ_CC_FIFOP_PIN())
    21a6:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    21aa:	89 2b       	or	r24, r25
    21ac:	41 f4       	brne	.+16     	; 0x21be <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x118>
    {
        if (postTask(cc2420radiom_delayedRXFIFOtask, 5))
    21ae:	8e e3       	ldi	r24, 0x3E	; 62
    21b0:	91 e1       	ldi	r25, 0x11	; 17
    21b2:	65 e0       	ldi	r22, 0x05	; 5
    21b4:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    21b8:	88 23       	and	r24, r24
    21ba:	09 f0       	breq	.+2      	; 0x21be <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x118>
    21bc:	aa cf       	rjmp	.-172    	; 0x2112 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x6c>
        {
            return SUCCESS;
        }
    }
    cc2420radiom_flushRXFIFO();
    21be:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <cc2420radiom_flushRXFIFO>
    21c2:	a7 cf       	rjmp	.-178    	; 0x2112 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x6c>
    cc2420radiom_rxbufptr->length = cc2420radiom_rxbufptr->length -
        MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    //Revised by Qing, from 29 to PAYLOAD_LENGTH 
    if (cc2420radiom_rxbufptr->length > PAYLOAD_LENGTH)
    {
        cc2420radiom_flushRXFIFO();
    21c4:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <cc2420radiom_flushRXFIFO>
        {
            _atomic_t _atomic = _atomic_start();
    21c8:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

            cc2420radiom_bPacketReceiving = FALSE;
    21cc:	10 92 ac 04 	sts	0x04AC, r1
            _atomic_end(_atomic);
    21d0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    21d4:	9e cf       	rjmp	.-196    	; 0x2112 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x6c>

000021d6 <cc2420radiom_delayedRXFIFO>:
    cc2420radiom_FIFOP_startWait(FALSE);
}

//-------------------------------------------------------------------------
void cc2420radiom_delayedRXFIFO(void)
{
    21d6:	1f 93       	push	r17
    //The MSG_DATA_SIZE is defined such that it contains the total length of data plus 2 bytes of the RSSI and LQI 
    uint8_t len = MSG_DATA_SIZE;
    uint8_t _bPacketReceiving;

    if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    21d8:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    21dc:	89 2b       	or	r24, r25
    21de:	21 f4       	brne	.+8      	; 0x21e8 <cc2420radiom_delayedRXFIFO+0x12>
    21e0:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    21e4:	89 2b       	or	r24, r25
    21e6:	b1 f0       	breq	.+44     	; 0x2214 <cc2420radiom_delayedRXFIFO+0x3e>
    {
        cc2420radiom_flushRXFIFO();
        return;
    }
    {
        _atomic_t _atomic = _atomic_start();
    21e8:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    21ec:	18 2f       	mov	r17, r24

        {
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
    21ee:	80 91 ac 04 	lds	r24, 0x04AC
    21f2:	88 23       	and	r24, r24
    21f4:	29 f5       	brne	.+74     	; 0x2240 <cc2420radiom_delayedRXFIFO+0x6a>
                    cc2420radiom_flushRXFIFO();
                }
            }
            else
            {
                cc2420radiom_bPacketReceiving = TRUE;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	80 93 ac 04 	sts	0x04AC, r24
            }
        }
        _atomic_end(_atomic);
    21fc:	81 2f       	mov	r24, r17
    21fe:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
inline result_t cc2420radiom_HPLChipconFIFO_readRXFIFO(uint8_t arg_0xa4118a0,
                                                       uint8_t * arg_0xa411a00)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(arg_0xa4118a0,
    2202:	60 91 a9 04 	lds	r22, 0x04A9
    2206:	70 91 aa 04 	lds	r23, 0x04AA
    220a:	80 e7       	ldi	r24, 0x70	; 112
    220c:	0e 94 91 11 	call	0x2322	; 0x2322 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
        _atomic_end(_atomic);
    }
    //Now read the RX to get the data 
    if (!_bPacketReceiving)
    {
        if (!cc2420radiom_HPLChipconFIFO_readRXFIFO(len, (uint8_t *)
    2210:	88 23       	and	r24, r24
    2212:	09 f1       	breq	.+66     	; 0x2256 <cc2420radiom_delayedRXFIFO+0x80>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    2214:	0e 94 9d 12 	call	0x253a	; 0x253a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    2218:	8f e3       	ldi	r24, 0x3F	; 63
    221a:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    221e:	88 e0       	ldi	r24, 0x08	; 8
    2220:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    2224:	88 e0       	ldi	r24, 0x08	; 8
    2226:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    222a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    222e:	10 92 ac 04 	sts	0x04AC, r1
        _atomic_end(_atomic);
    2232:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	0e 94 43 13 	call	0x2686	; 0x2686 <hplcc2420interruptm_FIFOP_startWait>
            }
            return;
        }
    }
    cc2420radiom_flushRXFIFO();
}
    223c:	1f 91       	pop	r17
    223e:	08 95       	ret

        {
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
            {
                if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
    2240:	8e e3       	ldi	r24, 0x3E	; 62
    2242:	91 e1       	ldi	r25, 0x11	; 17
    2244:	65 e0       	ldi	r22, 0x05	; 5
    2246:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    224a:	88 23       	and	r24, r24
    224c:	a1 f0       	breq	.+40     	; 0x2276 <cc2420radiom_delayedRXFIFO+0xa0>
            else
            {
                cc2420radiom_bPacketReceiving = TRUE;
            }
        }
        _atomic_end(_atomic);
    224e:	81 2f       	mov	r24, r17
    2250:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    2254:	df cf       	rjmp	.-66     	; 0x2214 <cc2420radiom_delayedRXFIFO+0x3e>
    {
        if (!cc2420radiom_HPLChipconFIFO_readRXFIFO(len, (uint8_t *)
                                                    cc2420radiom_rxbufptr))
        {
            {
                _atomic_t _atomic = _atomic_start();
    2256:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

                cc2420radiom_bPacketReceiving = FALSE;
    225a:	10 92 ac 04 	sts	0x04AC, r1
                _atomic_end(_atomic);
    225e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
            }
            if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
    2262:	8e e3       	ldi	r24, 0x3E	; 62
    2264:	91 e1       	ldi	r25, 0x11	; 17
    2266:	65 e0       	ldi	r22, 0x05	; 5
    2268:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    226c:	88 23       	and	r24, r24
    226e:	31 f7       	brne	.-52     	; 0x223c <cc2420radiom_delayedRXFIFO+0x66>
            {
                cc2420radiom_flushRXFIFO();
    2270:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <cc2420radiom_flushRXFIFO>
    2274:	e3 cf       	rjmp	.-58     	; 0x223c <cc2420radiom_delayedRXFIFO+0x66>
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
            {
                if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
                {
                    cc2420radiom_flushRXFIFO();
    2276:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <cc2420radiom_flushRXFIFO>
    227a:	e9 cf       	rjmp	.-46     	; 0x224e <cc2420radiom_delayedRXFIFO+0x78>

0000227c <cc2420radiom_delayedRXFIFOtask>:
    return result;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_delayedRXFIFOtask(void)
{
    227c:	1f 93       	push	r17
{
    //The MSG_DATA_SIZE is defined such that it contains the total length of data plus 2 bytes of the RSSI and LQI 
    uint8_t len = MSG_DATA_SIZE;
    uint8_t _bPacketReceiving;

    if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    227e:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    2282:	89 2b       	or	r24, r25
    2284:	21 f4       	brne	.+8      	; 0x228e <cc2420radiom_delayedRXFIFOtask+0x12>
    2286:	0e 94 9c 05 	call	0xb38	; 0xb38 <LITE_READ_CC_FIFOP_PIN>
    228a:	89 2b       	or	r24, r25
    228c:	b1 f0       	breq	.+44     	; 0x22ba <cc2420radiom_delayedRXFIFOtask+0x3e>
    {
        cc2420radiom_flushRXFIFO();
        return;
    }
    {
        _atomic_t _atomic = _atomic_start();
    228e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2292:	18 2f       	mov	r17, r24

        {
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
    2294:	80 91 ac 04 	lds	r24, 0x04AC
    2298:	88 23       	and	r24, r24
    229a:	29 f5       	brne	.+74     	; 0x22e6 <cc2420radiom_delayedRXFIFOtask+0x6a>
                    cc2420radiom_flushRXFIFO();
                }
            }
            else
            {
                cc2420radiom_bPacketReceiving = TRUE;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	80 93 ac 04 	sts	0x04AC, r24
            }
        }
        _atomic_end(_atomic);
    22a2:	81 2f       	mov	r24, r17
    22a4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
inline result_t cc2420radiom_HPLChipconFIFO_readRXFIFO(uint8_t arg_0xa4118a0,
                                                       uint8_t * arg_0xa411a00)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(arg_0xa4118a0,
    22a8:	60 91 a9 04 	lds	r22, 0x04A9
    22ac:	70 91 aa 04 	lds	r23, 0x04AA
    22b0:	80 e7       	ldi	r24, 0x70	; 112
    22b2:	0e 94 91 11 	call	0x2322	; 0x2322 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
        _atomic_end(_atomic);
    }
    //Now read the RX to get the data 
    if (!_bPacketReceiving)
    {
        if (!cc2420radiom_HPLChipconFIFO_readRXFIFO(len, (uint8_t *)
    22b6:	88 23       	and	r24, r24
    22b8:	09 f1       	breq	.+66     	; 0x22fc <cc2420radiom_delayedRXFIFOtask+0x80>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    22ba:	0e 94 9d 12 	call	0x253a	; 0x253a <hplcc2420interruptm_FIFOP_disable>
//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    22be:	8f e3       	ldi	r24, 0x3F	; 63
    22c0:	0e 94 b7 13 	call	0x276e	; 0x276e <HPLCC2420M_HPLCC2420_read>
//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    22c4:	88 e0       	ldi	r24, 0x08	; 8
    22c6:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();
    22ca:	88 e0       	ldi	r24, 0x08	; 8
    22cc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <HPLCC2420M_HPLCC2420_cmd>
    22d0:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        cc2420radiom_bPacketReceiving = FALSE;
    22d4:	10 92 ac 04 	sts	0x04AC, r1
        _atomic_end(_atomic);
    22d8:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	0e 94 43 13 	call	0x2686	; 0x2686 <hplcc2420interruptm_FIFOP_startWait>

//-------------------------------------------------------------------------
inline void cc2420radiom_delayedRXFIFOtask(void)
{
    cc2420radiom_delayedRXFIFO();
}
    22e2:	1f 91       	pop	r17
    22e4:	08 95       	ret

        {
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
            {
                if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
    22e6:	8e e3       	ldi	r24, 0x3E	; 62
    22e8:	91 e1       	ldi	r25, 0x11	; 17
    22ea:	65 e0       	ldi	r22, 0x05	; 5
    22ec:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    22f0:	88 23       	and	r24, r24
    22f2:	a1 f0       	breq	.+40     	; 0x231c <cc2420radiom_delayedRXFIFOtask+0xa0>
            else
            {
                cc2420radiom_bPacketReceiving = TRUE;
            }
        }
        _atomic_end(_atomic);
    22f4:	81 2f       	mov	r24, r17
    22f6:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    22fa:	df cf       	rjmp	.-66     	; 0x22ba <cc2420radiom_delayedRXFIFOtask+0x3e>
    {
        if (!cc2420radiom_HPLChipconFIFO_readRXFIFO(len, (uint8_t *)
                                                    cc2420radiom_rxbufptr))
        {
            {
                _atomic_t _atomic = _atomic_start();
    22fc:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

                cc2420radiom_bPacketReceiving = FALSE;
    2300:	10 92 ac 04 	sts	0x04AC, r1
                _atomic_end(_atomic);
    2304:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
            }
            if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
    2308:	8e e3       	ldi	r24, 0x3E	; 62
    230a:	91 e1       	ldi	r25, 0x11	; 17
    230c:	65 e0       	ldi	r22, 0x05	; 5
    230e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    2312:	88 23       	and	r24, r24
    2314:	31 f7       	brne	.-52     	; 0x22e2 <cc2420radiom_delayedRXFIFOtask+0x66>
            {
                cc2420radiom_flushRXFIFO();
    2316:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <cc2420radiom_flushRXFIFO>
    231a:	e3 cf       	rjmp	.-58     	; 0x22e2 <cc2420radiom_delayedRXFIFOtask+0x66>
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
            {
                if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
                {
                    cc2420radiom_flushRXFIFO();
    231c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <cc2420radiom_flushRXFIFO>
    2320:	e9 cf       	rjmp	.-46     	; 0x22f4 <cc2420radiom_delayedRXFIFOtask+0x78>

00002322 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>:
inline
    //Seems that the transmitted len is the actual length over the air 
    //The first number in the frame is the remaining part 
    result_t hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(uint8_t len,
                                                     uint8_t * msg)
{
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	18 2f       	mov	r17, r24
    232c:	eb 01       	movw	r28, r22
    uint8_t status;
    uint8_t i;
    bool returnFail = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    232e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2332:	98 2f       	mov	r25, r24

        {
            if (hplcc2420fifom_rxbufBusy)
    2334:	80 91 30 05 	lds	r24, 0x0530
    2338:	88 23       	and	r24, r24
    233a:	09 f0       	breq	.+2      	; 0x233e <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x1c>
    233c:	55 c0       	rjmp	.+170    	; 0x23e8 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xc6>
            {
                returnFail = TRUE;
            }
            else
            {
                hplcc2420fifom_rxbufBusy = TRUE;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	80 93 30 05 	sts	0x0530, r24
            }
        }
        _atomic_end(_atomic);
    2344:	89 2f       	mov	r24, r25
    2346:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    if (returnFail)
    {
        return FAIL;
    }
    {
        _atomic_t _atomic = _atomic_start();
    234a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    234e:	08 2f       	mov	r16, r24

        {
            hplcc2420fifom_bSpiAvail = FALSE;
    2350:	10 92 2a 05 	sts	0x052A, r1
            hplcc2420fifom_rxbuf = msg;
    2354:	d0 93 2c 05 	sts	0x052C, r29
    2358:	c0 93 2b 05 	sts	0x052B, r28
            LITE_CLR_CC_CS_PIN();
    235c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(CC2420_RXFIFO | 0x40, SPDR);   //output Rxfifo address
    2360:	8f e7       	ldi	r24, 0x7F	; 127
    2362:	8f b9       	out	0x0f, r24	; 15
            while (!(inp(SPSR) & 0x80))
    2364:	77 9b       	sbis	0x0e, 7	; 14
    2366:	fe cf       	rjmp	.-4      	; 0x2364 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x42>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    2368:	8f b1       	in	r24, 0x0f	; 15
            outp(0, SPDR);
    236a:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    236c:	77 9b       	sbis	0x0e, 7	; 14
    236e:	fe cf       	rjmp	.-4      	; 0x236c <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x4a>
            {
            }
            ;                   //wait for spi xfr to complete
            hplcc2420fifom_rxlength = inp(SPDR);
    2370:	8f b1       	in	r24, 0x0f	; 15
    2372:	80 93 31 05 	sts	0x0531, r24
            //My revise
            //The first byte, however, only contains a part of the whole, which needs to add 1 to mean that it is the total to be read 
            //and this also defaults to len, which is the MSG_DATA_SIZE
            if (hplcc2420fifom_rxlength > 0)
    2376:	88 23       	and	r24, r24
    2378:	11 f1       	breq	.+68     	; 0x23be <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x9c>
            {
                hplcc2420fifom_rxbuf[0] = hplcc2420fifom_rxlength;
    237a:	e0 91 2b 05 	lds	r30, 0x052B
    237e:	f0 91 2c 05 	lds	r31, 0x052C
    2382:	80 83       	st	Z, r24
                hplcc2420fifom_rxlength++;
    2384:	80 91 31 05 	lds	r24, 0x0531
    2388:	8f 5f       	subi	r24, 0xFF	; 255
    238a:	80 93 31 05 	sts	0x0531, r24
                if (hplcc2420fifom_rxlength > len)
    238e:	18 17       	cp	r17, r24
    2390:	18 f4       	brcc	.+6      	; 0x2398 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x76>
                {
                    hplcc2420fifom_rxlength = len;
    2392:	10 93 31 05 	sts	0x0531, r17
    2396:	81 2f       	mov	r24, r17
                }
                for (i = 1; i < hplcc2420fifom_rxlength; i++)
    2398:	82 30       	cpi	r24, 0x02	; 2
    239a:	88 f0       	brcs	.+34     	; 0x23be <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x9c>
    239c:	91 e0       	ldi	r25, 0x01	; 1
                {
                    outp(0, SPDR);
    239e:	1f b8       	out	0x0f, r1	; 15
                    while (!(inp(SPSR) & 0x80))
    23a0:	77 9b       	sbis	0x0e, 7	; 14
    23a2:	fe cf       	rjmp	.-4      	; 0x23a0 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x7e>
                    {
                    }
                    ;           //wait for spi xfr to complete
                    hplcc2420fifom_rxbuf[i] = inp(SPDR);
    23a4:	8f b1       	in	r24, 0x0f	; 15
    23a6:	e0 91 2b 05 	lds	r30, 0x052B
    23aa:	f0 91 2c 05 	lds	r31, 0x052C
    23ae:	e9 0f       	add	r30, r25
    23b0:	f1 1d       	adc	r31, r1
    23b2:	80 83       	st	Z, r24
                hplcc2420fifom_rxlength++;
                if (hplcc2420fifom_rxlength > len)
                {
                    hplcc2420fifom_rxlength = len;
                }
                for (i = 1; i < hplcc2420fifom_rxlength; i++)
    23b4:	9f 5f       	subi	r25, 0xFF	; 255
    23b6:	80 91 31 05 	lds	r24, 0x0531
    23ba:	98 17       	cp	r25, r24
    23bc:	80 f3       	brcs	.-32     	; 0x239e <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x7c>
                    }
                    ;           //wait for spi xfr to complete
                    hplcc2420fifom_rxbuf[i] = inp(SPDR);
                }
            }
            hplcc2420fifom_bSpiAvail = TRUE;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	80 93 2a 05 	sts	0x052A, r24
        }
        _atomic_end(_atomic);
    23c4:	80 2f       	mov	r24, r16
    23c6:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();
    23ca:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LITE_SET_CC_CS_PIN>
    if (postTask(hplcc2420fifom_signalRXdone, 5) == FAIL)
    23ce:	8c e6       	ldi	r24, 0x6C	; 108
    23d0:	92 e1       	ldi	r25, 0x12	; 18
    23d2:	65 e0       	ldi	r22, 0x05	; 5
    23d4:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    23d8:	88 23       	and	r24, r24
    23da:	79 f0       	breq	.+30     	; 0x23fa <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xd8>
    23dc:	81 e0       	ldi	r24, 0x01	; 1
            _atomic_end(_atomic);
        }
        return FAIL;
    }
    return SUCCESS;
}
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	08 95       	ret
            else
            {
                hplcc2420fifom_rxbufBusy = TRUE;
            }
        }
        _atomic_end(_atomic);
    23e8:	89 2f       	mov	r24, r25
    23ea:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    23ee:	80 e0       	ldi	r24, 0x00	; 0
            _atomic_end(_atomic);
        }
        return FAIL;
    }
    return SUCCESS;
}
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	08 95       	ret
    }
    LITE_SET_CC_CS_PIN();
    if (postTask(hplcc2420fifom_signalRXdone, 5) == FAIL)
    {
        {
            _atomic_t _atomic = _atomic_start();
    23fa:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

            hplcc2420fifom_rxbufBusy = FALSE;
    23fe:	10 92 30 05 	sts	0x0530, r1
            _atomic_end(_atomic);
    2402:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    2406:	80 e0       	ldi	r24, 0x00	; 0
        }
        return FAIL;
    }
    return SUCCESS;
}
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	1f 91       	pop	r17
    240e:	0f 91       	pop	r16
    2410:	08 95       	ret

00002412 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO(uint8_t len, uint8_t *
                                                         msg)
{
    2412:	0f 93       	push	r16
    2414:	1f 93       	push	r17
    2416:	cf 93       	push	r28
    2418:	df 93       	push	r29
    241a:	18 2f       	mov	r17, r24
    241c:	eb 01       	movw	r28, r22
    uint8_t i = 0;
    uint8_t status;
    bool returnFail = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    241e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2422:	98 2f       	mov	r25, r24

        {
            if (hplcc2420fifom_txbufBusy)
    2424:	80 91 2d 05 	lds	r24, 0x052D
    2428:	88 23       	and	r24, r24
    242a:	09 f0       	breq	.+2      	; 0x242e <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x1c>
    242c:	48 c0       	rjmp	.+144    	; 0x24be <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0xac>
            {
                returnFail = TRUE;
            }
            else
            {
                hplcc2420fifom_txbufBusy = TRUE;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	80 93 2d 05 	sts	0x052D, r24
            }
        }
        _atomic_end(_atomic);
    2434:	89 2f       	mov	r24, r25
    2436:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    if (returnFail)
    {
        return FAIL;
    }
    {
        _atomic_t _atomic = _atomic_start();
    243a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    243e:	08 2f       	mov	r16, r24

        {
            hplcc2420fifom_bSpiAvail = FALSE;
    2440:	10 92 2a 05 	sts	0x052A, r1
            hplcc2420fifom_txlength = len;
    2444:	10 93 29 05 	sts	0x0529, r17
            hplcc2420fifom_txbuf = msg;
    2448:	d0 93 2f 05 	sts	0x052F, r29
    244c:	c0 93 2e 05 	sts	0x052E, r28
            LITE_CLR_CC_CS_PIN();
    2450:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(CC2420_TXFIFO, SPDR);
    2454:	8e e3       	ldi	r24, 0x3E	; 62
    2456:	8f b9       	out	0x0f, r24	; 15
            while (!(inp(SPSR) & 0x80))
    2458:	77 9b       	sbis	0x0e, 7	; 14
    245a:	fe cf       	rjmp	.-4      	; 0x2458 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x46>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    245c:	1f b1       	in	r17, 0x0f	; 15
            for (i = 0; i < hplcc2420fifom_txlength; i++)
    245e:	20 91 29 05 	lds	r18, 0x0529
    2462:	22 23       	and	r18, r18
    2464:	81 f0       	breq	.+32     	; 0x2486 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x74>
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	e0 91 2e 05 	lds	r30, 0x052E
    246c:	f0 91 2f 05 	lds	r31, 0x052F
            {
                outp(*hplcc2420fifom_txbuf, SPDR);
    2470:	81 91       	ld	r24, Z+
    2472:	8f b9       	out	0x0f, r24	; 15
                hplcc2420fifom_txbuf++;
    2474:	f0 93 2f 05 	sts	0x052F, r31
    2478:	e0 93 2e 05 	sts	0x052E, r30
                while (!(inp(SPSR) & 0x80))
    247c:	77 9b       	sbis	0x0e, 7	; 14
    247e:	fe cf       	rjmp	.-4      	; 0x247c <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x6a>
            while (!(inp(SPSR) & 0x80))
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
            for (i = 0; i < hplcc2420fifom_txlength; i++)
    2480:	9f 5f       	subi	r25, 0xFF	; 255
    2482:	92 17       	cp	r25, r18
    2484:	a8 f3       	brcs	.-22     	; 0x2470 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x5e>
                while (!(inp(SPSR) & 0x80))
                {
                }
                ;               //wait for spi xfr to complete
            }
            hplcc2420fifom_bSpiAvail = TRUE;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	80 93 2a 05 	sts	0x052A, r24
        }
        _atomic_end(_atomic);
    248c:	80 2f       	mov	r24, r16
    248e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();
    2492:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LITE_SET_CC_CS_PIN>
    if (postTask(hplcc2420fifom_signalTXdone, 5) == FAIL)
    2496:	86 e8       	ldi	r24, 0x86	; 134
    2498:	92 e1       	ldi	r25, 0x12	; 18
    249a:	65 e0       	ldi	r22, 0x05	; 5
    249c:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    24a0:	88 23       	and	r24, r24
    24a2:	89 f4       	brne	.+34     	; 0x24c6 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0xb4>
    {
        {
            _atomic_t _atomic = _atomic_start();
    24a4:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

            hplcc2420fifom_txbufBusy = FALSE;
    24a8:	10 92 2d 05 	sts	0x052D, r1
            _atomic_end(_atomic);
    24ac:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    24b0:	10 e0       	ldi	r17, 0x00	; 0
        }
        return FAIL;
    }
    return status;
}
    24b2:	81 2f       	mov	r24, r17
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	08 95       	ret
            else
            {
                hplcc2420fifom_txbufBusy = TRUE;
            }
        }
        _atomic_end(_atomic);
    24be:	89 2f       	mov	r24, r25
    24c0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    24c4:	10 e0       	ldi	r17, 0x00	; 0
            _atomic_end(_atomic);
        }
        return FAIL;
    }
    return status;
}
    24c6:	81 2f       	mov	r24, r17
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	08 95       	ret

000024d2 <hplcc2420fifom_HPLCC2420FIFO_RXFIFODone>:
                                                        uint8_t *
                                                        arg_0xa40c7f0)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_RXFIFODone(arg_0xa40c690,
    24d2:	0e 94 53 10 	call	0x20a6	; 0x20a6 <cc2420radiom_HPLChipconFIFO_RXFIFODone>
                                                    arg_0xa40c7f0);
    return result;
}
    24d6:	08 95       	ret

000024d8 <hplcc2420fifom_signalRXdone>:

//-------------------------------------------------------------------------
inline void hplcc2420fifom_signalRXdone(void)
{
    24d8:	ff 92       	push	r15
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    uint8_t _rxlen;
    uint8_t *_rxbuf;

    {
        _atomic_t _atomic = _atomic_start();
    24de:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            _rxlen = hplcc2420fifom_rxlength;
    24e2:	f0 90 31 05 	lds	r15, 0x0531
            _rxbuf = hplcc2420fifom_rxbuf;
    24e6:	00 91 2b 05 	lds	r16, 0x052B
    24ea:	10 91 2c 05 	lds	r17, 0x052C
            hplcc2420fifom_rxbufBusy = FALSE;
    24ee:	10 92 30 05 	sts	0x0530, r1
        }
        _atomic_end(_atomic);
    24f2:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
                                                        uint8_t *
                                                        arg_0xa40c7f0)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_RXFIFODone(arg_0xa40c690,
    24f6:	8f 2d       	mov	r24, r15
    24f8:	b8 01       	movw	r22, r16
    24fa:	0e 94 53 10 	call	0x20a6	; 0x20a6 <cc2420radiom_HPLChipconFIFO_RXFIFODone>
            hplcc2420fifom_rxbufBusy = FALSE;
        }
        _atomic_end(_atomic);
    }
    hplcc2420fifom_HPLCC2420FIFO_RXFIFODone(_rxlen, _rxbuf);
}
    24fe:	1f 91       	pop	r17
    2500:	0f 91       	pop	r16
    2502:	ff 90       	pop	r15
    2504:	08 95       	ret

00002506 <hplcc2420fifom_HPLCC2420FIFO_TXFIFODone>:
                                                        uint8_t *
                                                        arg_0xa40ce80)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_TXFIFODone(arg_0xa40cd20,
    2506:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <cc2420radiom_HPLChipconFIFO_TXFIFODone>
                                                    arg_0xa40ce80);
    return result;
}
    250a:	08 95       	ret

0000250c <hplcc2420fifom_signalTXdone>:

//-------------------------------------------------------------------------
inline void hplcc2420fifom_signalTXdone(void)
{
    250c:	ff 92       	push	r15
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    uint8_t _txlen;
    uint8_t *_txbuf;

    {
        _atomic_t _atomic = _atomic_start();
    2512:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            _txlen = hplcc2420fifom_txlength;
    2516:	f0 90 29 05 	lds	r15, 0x0529
            _txbuf = hplcc2420fifom_txbuf;
    251a:	00 91 2e 05 	lds	r16, 0x052E
    251e:	10 91 2f 05 	lds	r17, 0x052F
            hplcc2420fifom_txbufBusy = FALSE;
    2522:	10 92 2d 05 	sts	0x052D, r1
        }
        _atomic_end(_atomic);
    2526:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
                                                        uint8_t *
                                                        arg_0xa40ce80)
{
    unsigned char result;

    result = cc2420radiom_HPLChipconFIFO_TXFIFODone(arg_0xa40cd20,
    252a:	8f 2d       	mov	r24, r15
    252c:	b8 01       	movw	r22, r16
    252e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <cc2420radiom_HPLChipconFIFO_TXFIFODone>
            hplcc2420fifom_txbufBusy = FALSE;
        }
        _atomic_end(_atomic);
    }
    hplcc2420fifom_HPLCC2420FIFO_TXFIFODone(_txlen, _txbuf);
}
    2532:	1f 91       	pop	r17
    2534:	0f 91       	pop	r16
    2536:	ff 90       	pop	r15
    2538:	08 95       	ret

0000253a <hplcc2420interruptm_FIFOP_disable>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_disable(void)
{
    *(volatile unsigned char *)(unsigned int)&*(volatile unsigned char *)(0x39
    253a:	89 b7       	in	r24, 0x39	; 57
    253c:	8f 7b       	andi	r24, 0xBF	; 191
    253e:	89 bf       	out	0x39, r24	; 57
                                                                          +
                                                                          0x20)
        &= ~(1 << 6);
    return SUCCESS;
}
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	08 95       	ret

00002544 <hplcc2420interruptm_FIFO_default_fired>:

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFO_default_fired(void)
{
    return FAIL;
}
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	08 95       	ret

00002548 <hplcc2420interruptm_FIFO_fired>:
{
    unsigned char result;

    result = hplcc2420interruptm_FIFO_default_fired();
    return result;
}
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	08 95       	ret

0000254c <hplcc2420interruptm_SFDCapture_isOverflowPending>:
//-------------------------------------------------------------------------
inline bool hplcc2420interruptm_SFDCapture_isOverflowPending(void)
{
    unsigned char result;

    result = HPLTimer1M_CaptureT1_isOverflowPending();
    254c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <HPLTimer1M_CaptureT1_isOverflowPending>
    return result;
}
    2550:	08 95       	ret

00002552 <hplcc2420interruptm_SFD_captured>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_captured(uint16_t arg_0xa41e788)
{
    unsigned char result;

    result = cc2420radiom_SFD_captured(arg_0xa41e788);
    2552:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <cc2420radiom_SFD_captured>
    return result;
}
    2556:	08 95       	ret

00002558 <hplcc2420interruptm_SFDCapture_disableEvents>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    2558:	0e 94 cb 14 	call	0x2996	; 0x2996 <HPLTimer1M_CaptureT1_disableEvents>
}
    255c:	08 95       	ret

0000255e <hplcc2420interruptm_SFD_disable>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    255e:	0e 94 cb 14 	call	0x2996	; 0x2996 <HPLTimer1M_CaptureT1_disableEvents>
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_disable(void)
{
    hplcc2420interruptm_SFDCapture_disableEvents();
    return SUCCESS;
}
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	08 95       	ret

00002566 <hplcc2420interruptm_SFDCapture_setEdge>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_setEdge(uint8_t arg_0xa4c5e80)
{
    HPLTimer1M_CaptureT1_setEdge(arg_0xa4c5e80);
    2566:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <HPLTimer1M_CaptureT1_setEdge>
}
    256a:	08 95       	ret

0000256c <hplcc2420interruptm_SFDCapture_clearOverflow>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_clearOverflow(void)
{
    HPLTimer1M_CaptureT1_clearOverflow();
    256c:	0e 94 c7 14 	call	0x298e	; 0x298e <HPLTimer1M_CaptureT1_clearOverflow>
}
    2570:	08 95       	ret

00002572 <hplcc2420interruptm_SFDCapture_captured>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_captured(uint16_t arg_0xa41e788)
{
    unsigned char result;

    result = cc2420radiom_SFD_captured(arg_0xa41e788);
    2572:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <cc2420radiom_SFD_captured>
void hplcc2420interruptm_SFDCapture_captured(uint16_t time)
{
    result_t val = SUCCESS;

    val = hplcc2420interruptm_SFD_captured(time);
    if (val == FAIL)
    2576:	88 23       	and	r24, r24
    2578:	29 f0       	breq	.+10     	; 0x2584 <hplcc2420interruptm_SFDCapture_captured+0x12>
//-------------------------------------------------------------------------
inline bool hplcc2420interruptm_SFDCapture_isOverflowPending(void)
{
    unsigned char result;

    result = HPLTimer1M_CaptureT1_isOverflowPending();
    257a:	0e 94 d6 14 	call	0x29ac	; 0x29ac <HPLTimer1M_CaptureT1_isOverflowPending>
    {
        hplcc2420interruptm_SFDCapture_disableEvents();
    }
    else
    {
        if (hplcc2420interruptm_SFDCapture_isOverflowPending())
    257e:	88 23       	and	r24, r24
    2580:	21 f4       	brne	.+8      	; 0x258a <hplcc2420interruptm_SFDCapture_captured+0x18>
    2582:	08 95       	ret
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    2584:	0e 94 cb 14 	call	0x2996	; 0x2996 <HPLTimer1M_CaptureT1_disableEvents>
    2588:	08 95       	ret
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_clearOverflow(void)
{
    HPLTimer1M_CaptureT1_clearOverflow();
    258a:	0e 94 c7 14 	call	0x298e	; 0x298e <HPLTimer1M_CaptureT1_clearOverflow>
    258e:	08 95       	ret

00002590 <hplcc2420interruptm_SFDCapture_enableEvents>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_enableEvents(void)
{
    HPLTimer1M_CaptureT1_enableEvents();
    2590:	0e 94 bd 14 	call	0x297a	; 0x297a <HPLTimer1M_CaptureT1_enableEvents>
}
    2594:	08 95       	ret

00002596 <hplcc2420interruptm_SFD_enableCapture>:
    HPLTimer1M_CaptureT1_disableEvents();
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_enableCapture(bool low_to_high)
{
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	18 2f       	mov	r17, r24
    {
        _atomic_t _atomic = _atomic_start();
    259c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    25a0:	08 2f       	mov	r16, r24
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
    25a2:	0e 94 cb 14 	call	0x2996	; 0x2996 <HPLTimer1M_CaptureT1_disableEvents>
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_setEdge(uint8_t arg_0xa4c5e80)
{
    HPLTimer1M_CaptureT1_setEdge(arg_0xa4c5e80);
    25a6:	81 2f       	mov	r24, r17
    25a8:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <HPLTimer1M_CaptureT1_setEdge>
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_clearOverflow(void)
{
    HPLTimer1M_CaptureT1_clearOverflow();
    25ac:	0e 94 c7 14 	call	0x298e	; 0x298e <HPLTimer1M_CaptureT1_clearOverflow>
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_enableEvents(void)
{
    HPLTimer1M_CaptureT1_enableEvents();
    25b0:	0e 94 bd 14 	call	0x297a	; 0x297a <HPLTimer1M_CaptureT1_enableEvents>
            hplcc2420interruptm_SFDCapture_disableEvents();
            hplcc2420interruptm_SFDCapture_setEdge(low_to_high);
            hplcc2420interruptm_SFDCapture_clearOverflow();
            hplcc2420interruptm_SFDCapture_enableEvents();
        }
        _atomic_end(_atomic);
    25b4:	80 2f       	mov	r24, r16
    25b6:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return SUCCESS;
}
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	08 95       	ret

000025c2 <hplcc2420interruptm_CCATimer_start>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCATimer_start(char arg_0xa315138,
                                                   uint32_t arg_0xa315290)
{
    25c2:	98 2f       	mov	r25, r24
    25c4:	9a 01       	movw	r18, r20
    25c6:	ab 01       	movw	r20, r22
    unsigned char result;

    result = GenericTimerStart(11, arg_0xa315138, arg_0xa315290);
    25c8:	8b e0       	ldi	r24, 0x0B	; 11
    25ca:	69 2f       	mov	r22, r25
    25cc:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <GenericTimerStart>
    return result;
}
    25d0:	08 95       	ret

000025d2 <hplcc2420interruptm_FIFOTimer_start>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOTimer_start(char arg_0xa315138,
                                                    uint32_t arg_0xa315290)
{
    25d2:	98 2f       	mov	r25, r24
    25d4:	9a 01       	movw	r18, r20
    25d6:	ab 01       	movw	r20, r22
    unsigned char result;

    result = GenericTimerStart(10, arg_0xa315138, arg_0xa315290);
    25d8:	8a e0       	ldi	r24, 0x0A	; 10
    25da:	69 2f       	mov	r22, r25
    25dc:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <GenericTimerStart>
    return result;
}
    25e0:	08 95       	ret

000025e2 <hplcc2420interruptm_CCA_startWait>:
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_startWait(bool low_to_high)
{
    25e2:	1f 93       	push	r17
    25e4:	18 2f       	mov	r17, r24
    {
        _atomic_t _atomic = _atomic_start();
    25e6:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        hplcc2420interruptm_CCAWaitForState = low_to_high;
    25ea:	10 93 3b 05 	sts	0x053B, r17
        _atomic_end(_atomic);
    25ee:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    hplcc2420interruptm_CCALastState = LITE_READ_CC_CCA_PIN();
    25f2:	0e 94 ca 05 	call	0xb94	; 0xb94 <LITE_READ_CC_CCA_PIN>
    25f6:	80 93 3a 05 	sts	0x053A, r24
inline result_t hplcc2420interruptm_CCATimer_start(char arg_0xa315138,
                                                   uint32_t arg_0xa315290)
{
    unsigned char result;

    result = GenericTimerStart(11, arg_0xa315138, arg_0xa315290);
    25fa:	8b e0       	ldi	r24, 0x0B	; 11
    25fc:	61 e0       	ldi	r22, 0x01	; 1
    25fe:	21 e0       	ldi	r18, 0x01	; 1
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	50 e0       	ldi	r21, 0x00	; 0
    2606:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <GenericTimerStart>
        hplcc2420interruptm_CCAWaitForState = low_to_high;
        _atomic_end(_atomic);
    }
    hplcc2420interruptm_CCALastState = LITE_READ_CC_CCA_PIN();
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
}
    260a:	1f 91       	pop	r17
    260c:	08 95       	ret

0000260e <hplcc2420interruptm_CCA_fired>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_fired(void)
{
    unsigned char result;

    result = cc2420controlm_CCA_fired();
    260e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <cc2420controlm_CCA_fired>
    return result;
}
    2612:	08 95       	ret

00002614 <hplcc2420interruptm_CCATimer_fired>:

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCATimer_fired(void)
{
    2614:	1f 93       	push	r17
    uint8_t CCAState;
    result_t val = SUCCESS;

    CCAState = LITE_READ_CC_CCA_PIN();
    2616:	0e 94 ca 05 	call	0xb94	; 0xb94 <LITE_READ_CC_CCA_PIN>
    261a:	18 2f       	mov	r17, r24
    if (hplcc2420interruptm_CCALastState != hplcc2420interruptm_CCAWaitForState
    261c:	90 91 3b 05 	lds	r25, 0x053B
    2620:	80 91 3a 05 	lds	r24, 0x053A
    2624:	89 17       	cp	r24, r25
    2626:	11 f0       	breq	.+4      	; 0x262c <hplcc2420interruptm_CCATimer_fired+0x18>
    2628:	19 17       	cp	r17, r25
    262a:	61 f0       	breq	.+24     	; 0x2644 <hplcc2420interruptm_CCATimer_fired+0x30>
        if (val == FAIL)
        {
            return SUCCESS;
        }
    }
    hplcc2420interruptm_CCALastState = CCAState;
    262c:	10 93 3a 05 	sts	0x053A, r17
inline result_t hplcc2420interruptm_CCATimer_start(char arg_0xa315138,
                                                   uint32_t arg_0xa315290)
{
    unsigned char result;

    result = GenericTimerStart(11, arg_0xa315138, arg_0xa315290);
    2630:	8b e0       	ldi	r24, 0x0B	; 11
    2632:	61 e0       	ldi	r22, 0x01	; 1
    2634:	21 e0       	ldi	r18, 0x01	; 1
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	50 e0       	ldi	r21, 0x00	; 0
    263c:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <GenericTimerStart>
            return SUCCESS;
        }
    }
    hplcc2420interruptm_CCALastState = CCAState;
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
}
    2640:	1f 91       	pop	r17
    2642:	08 95       	ret
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_fired(void)
{
    unsigned char result;

    result = cc2420controlm_CCA_fired();
    2644:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <cc2420controlm_CCA_fired>
    CCAState = LITE_READ_CC_CCA_PIN();
    if (hplcc2420interruptm_CCALastState != hplcc2420interruptm_CCAWaitForState
        && CCAState == hplcc2420interruptm_CCAWaitForState)
    {
        val = hplcc2420interruptm_CCA_fired();
        if (val == FAIL)
    2648:	88 23       	and	r24, r24
    264a:	81 f7       	brne	.-32     	; 0x262c <hplcc2420interruptm_CCATimer_fired+0x18>
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	f8 cf       	rjmp	.-16     	; 0x2640 <hplcc2420interruptm_CCATimer_fired+0x2c>

00002650 <hplcc2420interruptm_FIFOTimer_fired>:
inline result_t hplcc2420interruptm_FIFOTimer_fired(void)
{
    uint8_t FIFOState;
    result_t val = SUCCESS;

    FIFOState = LITE_READ_CC_FIFO_PIN();
    2650:	0e 94 03 06 	call	0xc06	; 0xc06 <LITE_READ_CC_FIFO_PIN>
    2654:	28 2f       	mov	r18, r24
    if (hplcc2420interruptm_FIFOLastState !=
    2656:	90 91 32 05 	lds	r25, 0x0532
    265a:	80 91 39 05 	lds	r24, 0x0539
    265e:	89 17       	cp	r24, r25
    2660:	11 f0       	breq	.+4      	; 0x2666 <hplcc2420interruptm_FIFOTimer_fired+0x16>
    2662:	29 17       	cp	r18, r25
    2664:	59 f0       	breq	.+22     	; 0x267c <hplcc2420interruptm_FIFOTimer_fired+0x2c>
        if (val == FAIL)
        {
            return SUCCESS;
        }
    }
    hplcc2420interruptm_FIFOLastState = FIFOState;
    2666:	20 93 39 05 	sts	0x0539, r18
inline result_t hplcc2420interruptm_FIFOTimer_start(char arg_0xa315138,
                                                    uint32_t arg_0xa315290)
{
    unsigned char result;

    result = GenericTimerStart(10, arg_0xa315138, arg_0xa315290);
    266a:	8a e0       	ldi	r24, 0x0A	; 10
    266c:	61 e0       	ldi	r22, 0x01	; 1
    266e:	21 e0       	ldi	r18, 0x01	; 1
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <GenericTimerStart>
            return SUCCESS;
        }
    }
    hplcc2420interruptm_FIFOLastState = FIFOState;
    return hplcc2420interruptm_FIFOTimer_start(TIMER_ONE_SHOT, 1);
}
    267a:	08 95       	ret
{
    uint8_t FIFOState;
    result_t val = SUCCESS;

    FIFOState = LITE_READ_CC_FIFO_PIN();
    if (hplcc2420interruptm_FIFOLastState !=
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	08 95       	ret

00002680 <hplcc2420interruptm_FIFOP_fired>:
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_fired(void)
{
    unsigned char result;

    result = cc2420radiom_FIFOP_fired();
    2680:	0e 94 10 10 	call	0x2020	; 0x2020 <cc2420radiom_FIFOP_fired>
    return result;
}
    2684:	08 95       	ret

00002686 <hplcc2420interruptm_FIFOP_startWait>:
     
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_startWait(bool low_to_high)
{
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	18 2f       	mov	r17, r24
    {
        _atomic_t _atomic = _atomic_start();
    268c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2690:	08 2f       	mov	r16, r24

        {
            CC2420_FIFOP_INT_MODE(low_to_high);
    2692:	81 2f       	mov	r24, r17
    2694:	0e 94 5e 05 	call	0xabc	; 0xabc <CC2420_FIFOP_INT_MODE>
            *(volatile unsigned char *)(unsigned int)&*(volatile unsigned
    2698:	89 b7       	in	r24, 0x39	; 57
    269a:	80 64       	ori	r24, 0x40	; 64
    269c:	89 bf       	out	0x39, r24	; 57
                                                        char *)(0x39 + 0x20) |=
                1 << 6;
        }
        _atomic_end(_atomic);
    269e:	80 2f       	mov	r24, r16
    26a0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return SUCCESS;
}
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	1f 91       	pop	r17
    26a8:	0f 91       	pop	r16
    26aa:	08 95       	ret

000026ac <__vector_7>:
   volatile uint16_t ahcounter; 
   volatile uint32_t alcounter2; 
   volatile uint16_t ahcounter2; 

SIGNAL(INT6_vect)
{
    26ac:	1f 92       	push	r1
    26ae:	0f 92       	push	r0
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	0f 92       	push	r0
    26b4:	0b b6       	in	r0, 0x3b	; 59
    26b6:	0f 92       	push	r0
    26b8:	11 24       	eor	r1, r1
    26ba:	0f 93       	push	r16
    26bc:	1f 93       	push	r17
    26be:	2f 93       	push	r18
    26c0:	3f 93       	push	r19
    26c2:	4f 93       	push	r20
    26c4:	5f 93       	push	r21
    26c6:	6f 93       	push	r22
    26c8:	7f 93       	push	r23
    26ca:	8f 93       	push	r24
    26cc:	9f 93       	push	r25
    26ce:	af 93       	push	r26
    26d0:	bf 93       	push	r27
    26d2:	ef 93       	push	r30
    26d4:	ff 93       	push	r31
   }

   #endif
   
    isthreadtrue = 0;
    _atomic = _atomic_start();
    26d6:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    26da:	18 2f       	mov	r17, r24
    if (is_thread())
    26dc:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <is_thread>
    26e0:	88 23       	and	r24, r24
    26e2:	b9 f5       	brne	.+110    	; 0x2752 <__vector_7+0xa6>
    26e4:	00 e0       	ldi	r16, 0x00	; 0
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    26e6:	81 2f       	mov	r24, r17
    26e8:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_fired(void)
{
    unsigned char result;

    result = cc2420radiom_FIFOP_fired();
    26ec:	0e 94 10 10 	call	0x2020	; 0x2020 <cc2420radiom_FIFOP_fired>
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    val = hplcc2420interruptm_FIFOP_fired();
    if (val == FAIL)
    26f0:	88 23       	and	r24, r24
    26f2:	31 f4       	brne	.+12     	; 0x2700 <__vector_7+0x54>
    {
        *(volatile unsigned char *)(unsigned int)&*(volatile unsigned char *)
    26f4:	89 b7       	in	r24, 0x39	; 57
    26f6:	8f 7b       	andi	r24, 0xBF	; 191
    26f8:	89 bf       	out	0x39, r24	; 57
            (0x39 + 0x20) &= ~(1 << 6);
        *(volatile unsigned char *)(unsigned int)&*(volatile unsigned char *)
    26fa:	88 b7       	in	r24, 0x38	; 56
    26fc:	80 64       	ori	r24, 0x40	; 64
    26fe:	88 bf       	out	0x38, r24	; 56
            (0x38 + 0x20) |= 1 << 6;
    }
    _atomic = _atomic_start();
    2700:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2704:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
    2706:	01 30       	cpi	r16, 0x01	; 1
    2708:	61 f4       	brne	.+24     	; 0x2722 <__vector_7+0x76>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    270a:	8d b7       	in	r24, 0x3d	; 61
    270c:	9e b7       	in	r25, 0x3e	; 62
    270e:	90 93 8b 05 	sts	0x058B, r25
    2712:	80 93 8a 05 	sts	0x058A, r24
    2716:	80 91 2b 06 	lds	r24, 0x062B
    271a:	90 91 2c 06 	lds	r25, 0x062C
    271e:	9e bf       	out	0x3e, r25	; 62
    2720:	8d bf       	out	0x3d, r24	; 61
        //thread_yield();   
    }
    _atomic_end(_atomic);
    2722:	82 2f       	mov	r24, r18
    2724:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
       __asm__ __volatile__ ("cli" ::);
       }

  #endif       
     
}
    2728:	ff 91       	pop	r31
    272a:	ef 91       	pop	r30
    272c:	bf 91       	pop	r27
    272e:	af 91       	pop	r26
    2730:	9f 91       	pop	r25
    2732:	8f 91       	pop	r24
    2734:	7f 91       	pop	r23
    2736:	6f 91       	pop	r22
    2738:	5f 91       	pop	r21
    273a:	4f 91       	pop	r20
    273c:	3f 91       	pop	r19
    273e:	2f 91       	pop	r18
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	0f 90       	pop	r0
    2746:	0b be       	out	0x3b, r0	; 59
    2748:	0f 90       	pop	r0
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	0f 90       	pop	r0
    274e:	1f 90       	pop	r1
    2750:	18 95       	reti
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    2752:	8d b7       	in	r24, 0x3d	; 61
    2754:	9e b7       	in	r25, 0x3e	; 62
    2756:	90 93 2c 06 	sts	0x062C, r25
    275a:	80 93 2b 06 	sts	0x062B, r24
    275e:	80 91 8a 05 	lds	r24, 0x058A
    2762:	90 91 8b 05 	lds	r25, 0x058B
    2766:	9e bf       	out	0x3e, r25	; 62
    2768:	8d bf       	out	0x3d, r24	; 61
    276a:	01 e0       	ldi	r16, 0x01	; 1
    276c:	bc cf       	rjmp	.-136    	; 0x26e6 <__vector_7+0x3a>

0000276e <HPLCC2420M_HPLCC2420_read>:
    return status;
}

//-------------------------------------------------------------------------
inline uint16_t HPLCC2420M_HPLCC2420_read(uint8_t addr)
{
    276e:	ef 92       	push	r14
    2770:	ff 92       	push	r15
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	18 2f       	mov	r17, r24
    uint16_t data = 0;
    uint8_t status;

    {
        _atomic_t _atomic = _atomic_start();
    2778:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    277c:	f8 2e       	mov	r15, r24

        {
            HPLCC2420M_bSpiAvail = FALSE;
    277e:	10 92 45 05 	sts	0x0545, r1
            LITE_CLR_CC_CS_PIN();       //enable chip select
    2782:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(addr | 0x40, SPDR);
    2786:	10 64       	ori	r17, 0x40	; 64
    2788:	1f b9       	out	0x0f, r17	; 15
            while (!(inp(SPSR) & 0x80))
    278a:	77 9b       	sbis	0x0e, 7	; 14
    278c:	fe cf       	rjmp	.-4      	; 0x278a <HPLCC2420M_HPLCC2420_read+0x1c>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    278e:	8f b1       	in	r24, 0x0f	; 15
            outp(0, SPDR);
    2790:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    2792:	77 9b       	sbis	0x0e, 7	; 14
    2794:	fe cf       	rjmp	.-4      	; 0x2792 <HPLCC2420M_HPLCC2420_read+0x24>
            {
            }
            ;                   //wait for spi xfr to complete
            data = inp(SPDR);
    2796:	8f b1       	in	r24, 0x0f	; 15
            outp(0, SPDR);
    2798:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    279a:	77 9b       	sbis	0x0e, 7	; 14
    279c:	fe cf       	rjmp	.-4      	; 0x279a <HPLCC2420M_HPLCC2420_read+0x2c>
            {
            }
            ;                   //wait for spi xfr to complete
            data = (data << 8) | inp(SPDR);
    279e:	18 2f       	mov	r17, r24
    27a0:	00 e0       	ldi	r16, 0x00	; 0
    27a2:	ef b0       	in	r14, 0x0f	; 15
            LITE_SET_CC_CS_PIN();       //disable chip select
    27a4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LITE_SET_CC_CS_PIN>
            HPLCC2420M_bSpiAvail = TRUE;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	80 93 45 05 	sts	0x0545, r24
        }
        _atomic_end(_atomic);
    27ae:	8f 2d       	mov	r24, r15
    27b0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    27b4:	ff 24       	eor	r15, r15
    27b6:	e0 2a       	or	r14, r16
    27b8:	f1 2a       	or	r15, r17
    }
    return data;
}
    27ba:	c7 01       	movw	r24, r14
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	ff 90       	pop	r15
    27c2:	ef 90       	pop	r14
    27c4:	08 95       	ret

000027c6 <HPLCC2420M_HPLCC2420_cmd>:
    return status;
}

//-------------------------------------------------------------------------
inline uint8_t HPLCC2420M_HPLCC2420_cmd(uint8_t addr)
{
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	18 2f       	mov	r17, r24
    uint8_t status;

    {
        _atomic_t _atomic = _atomic_start();
    27cc:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    27d0:	08 2f       	mov	r16, r24

        {
            LITE_CLR_CC_CS_PIN();
    27d2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(addr, SPDR);
    27d6:	1f b9       	out	0x0f, r17	; 15
            while (!(inp(SPSR) & 0x80))
    27d8:	77 9b       	sbis	0x0e, 7	; 14
    27da:	fe cf       	rjmp	.-4      	; 0x27d8 <HPLCC2420M_HPLCC2420_cmd+0x12>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    27dc:	1f b1       	in	r17, 0x0f	; 15
        }
        _atomic_end(_atomic);
    27de:	80 2f       	mov	r24, r16
    27e0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();
    27e4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LITE_SET_CC_CS_PIN>
    return status;
}
    27e8:	81 2f       	mov	r24, r17
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	08 95       	ret

000027f0 <HPLCC2420M_HPLCC2420_write>:
    return postTask(HPLCC2420M_signalRAMWr, 5);
}

//-------------------------------------------------------------------------
inline result_t HPLCC2420M_HPLCC2420_write(uint8_t addr, uint16_t data)
{
    27f0:	df 92       	push	r13
    27f2:	ef 92       	push	r14
    27f4:	ff 92       	push	r15
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	18 2f       	mov	r17, r24
    27fc:	d6 2e       	mov	r13, r22
    27fe:	f7 2e       	mov	r15, r23
    uint8_t status;

    {
        _atomic_t _atomic = _atomic_start();
    2800:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2804:	e8 2e       	mov	r14, r24

        {
            HPLCC2420M_bSpiAvail = FALSE;
    2806:	10 92 45 05 	sts	0x0545, r1
            LITE_CLR_CC_CS_PIN();
    280a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(addr, SPDR);
    280e:	1f b9       	out	0x0f, r17	; 15
            while (!(inp(SPSR) & 0x80))
    2810:	77 9b       	sbis	0x0e, 7	; 14
    2812:	fe cf       	rjmp	.-4      	; 0x2810 <HPLCC2420M_HPLCC2420_write+0x20>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    2814:	0f b1       	in	r16, 0x0f	; 15
            if (addr > CC2420_SAES)
    2816:	1f 30       	cpi	r17, 0x0F	; 15
    2818:	30 f0       	brcs	.+12     	; 0x2826 <HPLCC2420M_HPLCC2420_write+0x36>
            {
                outp(data >> 8, SPDR);
    281a:	ff b8       	out	0x0f, r15	; 15
                while (!(inp(SPSR) & 0x80))
    281c:	77 9b       	sbis	0x0e, 7	; 14
    281e:	fe cf       	rjmp	.-4      	; 0x281c <HPLCC2420M_HPLCC2420_write+0x2c>
                {
                }
                ;               //wait for spi xfr to complete
                outp(data & 0xff, SPDR);
    2820:	df b8       	out	0x0f, r13	; 15
                while (!(inp(SPSR) & 0x80))
    2822:	77 9b       	sbis	0x0e, 7	; 14
    2824:	fe cf       	rjmp	.-4      	; 0x2822 <HPLCC2420M_HPLCC2420_write+0x32>
                {
                }
                ;               //wait for spi xfr to complete
            }
            HPLCC2420M_bSpiAvail = TRUE;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	80 93 45 05 	sts	0x0545, r24
        }
        _atomic_end(_atomic);
    282c:	8e 2d       	mov	r24, r14
    282e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();       //disable chip select
    2832:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LITE_SET_CC_CS_PIN>
    return status;
}
    2836:	80 2f       	mov	r24, r16
    2838:	1f 91       	pop	r17
    283a:	0f 91       	pop	r16
    283c:	ff 90       	pop	r15
    283e:	ef 90       	pop	r14
    2840:	df 90       	pop	r13
    2842:	08 95       	ret

00002844 <HPLCC2420M_HPLCC2420RAM_write>:
}

//-------------------------------------------------------------------------
inline result_t HPLCC2420M_HPLCC2420RAM_write(uint16_t addr, uint8_t length,
                                              uint8_t * buffer)
{
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	ec 01       	movw	r28, r24
    2852:	f6 2e       	mov	r15, r22
    2854:	8a 01       	movw	r16, r20
    uint8_t i = 0;
    uint8_t status;

    if (!HPLCC2420M_bSpiAvail)
    2856:	80 91 45 05 	lds	r24, 0x0545
    285a:	88 23       	and	r24, r24
    285c:	39 f4       	brne	.+14     	; 0x286c <HPLCC2420M_HPLCC2420RAM_write+0x28>
        }
        _atomic_end(_atomic);
    }
    HPLCC2420M_bSpiAvail = TRUE;
    return postTask(HPLCC2420M_signalRAMWr, 5);
}
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	1f 91       	pop	r17
    2864:	0f 91       	pop	r16
    2866:	ff 90       	pop	r15
    2868:	ef 90       	pop	r14
    286a:	08 95       	ret
    if (!HPLCC2420M_bSpiAvail)
    {
        return FALSE;
    }
    {
        _atomic_t _atomic = _atomic_start();
    286c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2870:	e8 2e       	mov	r14, r24

        {
            HPLCC2420M_bSpiAvail = FALSE;
    2872:	10 92 45 05 	sts	0x0545, r1
            HPLCC2420M_ramaddr = addr;
    2876:	d0 93 47 05 	sts	0x0547, r29
    287a:	c0 93 46 05 	sts	0x0546, r28
            HPLCC2420M_ramlen = length;
    287e:	f0 92 42 05 	sts	0x0542, r15
            HPLCC2420M_rambuf = buffer;
    2882:	10 93 44 05 	sts	0x0544, r17
    2886:	00 93 43 05 	sts	0x0543, r16
            LITE_CLR_CC_CS_PIN();
    288a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LITE_CLR_CC_CS_PIN>
            outp(((HPLCC2420M_ramaddr & 0x7F) | 0x80), SPDR);
    288e:	20 91 46 05 	lds	r18, 0x0546
    2892:	30 91 47 05 	lds	r19, 0x0547
    2896:	82 2f       	mov	r24, r18
    2898:	80 68       	ori	r24, 0x80	; 128
    289a:	8f b9       	out	0x0f, r24	; 15
            //ls address      and set RAM/Reg flagbit
            while (!(inp(SPSR) & 0x80))
    289c:	77 9b       	sbis	0x0e, 7	; 14
    289e:	fe cf       	rjmp	.-4      	; 0x289c <HPLCC2420M_HPLCC2420RAM_write+0x58>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    28a0:	8f b1       	in	r24, 0x0f	; 15
            outp(((HPLCC2420M_ramaddr >> 1) & 0xC0), SPDR);     //ms address
    28a2:	36 95       	lsr	r19
    28a4:	27 95       	ror	r18
    28a6:	82 2f       	mov	r24, r18
    28a8:	80 7c       	andi	r24, 0xC0	; 192
    28aa:	8f b9       	out	0x0f, r24	; 15
            while (!(inp(SPSR) & 0x80))
    28ac:	77 9b       	sbis	0x0e, 7	; 14
    28ae:	fe cf       	rjmp	.-4      	; 0x28ac <HPLCC2420M_HPLCC2420RAM_write+0x68>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    28b0:	8f b1       	in	r24, 0x0f	; 15
            for (i = 0; i < HPLCC2420M_ramlen; i++)
    28b2:	50 91 42 05 	lds	r21, 0x0542
    28b6:	55 23       	and	r21, r21
    28b8:	81 f0       	breq	.+32     	; 0x28da <HPLCC2420M_HPLCC2420RAM_write+0x96>
    28ba:	40 91 43 05 	lds	r20, 0x0543
    28be:	84 2f       	mov	r24, r20
    28c0:	90 91 44 05 	lds	r25, 0x0544
    28c4:	9c 01       	movw	r18, r24
    28c6:	f9 01       	movw	r30, r18
            {
                //buffer write
                outp(HPLCC2420M_rambuf[i], SPDR);
    28c8:	80 81       	ld	r24, Z
    28ca:	8f b9       	out	0x0f, r24	; 15
                //        call USARTControl.tx(rambuf[i]);
                while (!(inp(SPSR) & 0x80))
    28cc:	77 9b       	sbis	0x0e, 7	; 14
    28ce:	fe cf       	rjmp	.-4      	; 0x28cc <HPLCC2420M_HPLCC2420RAM_write+0x88>
    28d0:	31 96       	adiw	r30, 0x01	; 1
            while (!(inp(SPSR) & 0x80))
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
            for (i = 0; i < HPLCC2420M_ramlen; i++)
    28d2:	8e 2f       	mov	r24, r30
    28d4:	84 1b       	sub	r24, r20
    28d6:	85 17       	cp	r24, r21
    28d8:	b8 f3       	brcs	.-18     	; 0x28c8 <HPLCC2420M_HPLCC2420RAM_write+0x84>
                {
                }
                ;               //wait for spi xfr to complete
            }
        }
        _atomic_end(_atomic);
    28da:	8e 2d       	mov	r24, r14
    28dc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    HPLCC2420M_bSpiAvail = TRUE;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	80 93 45 05 	sts	0x0545, r24
    return postTask(HPLCC2420M_signalRAMWr, 5);
    28e6:	82 e8       	ldi	r24, 0x82	; 130
    28e8:	94 e1       	ldi	r25, 0x14	; 20
    28ea:	65 e0       	ldi	r22, 0x05	; 5
    28ec:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
}
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	08 95       	ret

000028fe <HPLCC2420M_HPLCC2420RAM_writeDone>:
                                                  uint8_t arg_0xa45b5a8,
                                                  uint8_t * arg_0xa45b708)
{
    unsigned char result;

    result = cc2420controlm_HPLChipconRAM_writeDone(arg_0xa45b460,
    28fe:	0e 94 b6 0a 	call	0x156c	; 0x156c <cc2420controlm_HPLChipconRAM_writeDone>
                                                    arg_0xa45b5a8,
                                                    arg_0xa45b708);
    return result;
}
    2902:	08 95       	ret

00002904 <HPLCC2420M_signalRAMWr>:
                                                  uint8_t arg_0xa45b5a8,
                                                  uint8_t * arg_0xa45b708)
{
    unsigned char result;

    result = cc2420controlm_HPLChipconRAM_writeDone(arg_0xa45b460,
    2904:	40 91 43 05 	lds	r20, 0x0543
    2908:	50 91 44 05 	lds	r21, 0x0544
    290c:	80 91 46 05 	lds	r24, 0x0546
    2910:	90 91 47 05 	lds	r25, 0x0547
    2914:	60 91 42 05 	lds	r22, 0x0542
    2918:	0e 94 b6 0a 	call	0x156c	; 0x156c <cc2420controlm_HPLChipconRAM_writeDone>
//-------------------------------------------------------------------------
inline void HPLCC2420M_signalRAMWr(void)
{
    HPLCC2420M_HPLCC2420RAM_writeDone(HPLCC2420M_ramaddr, HPLCC2420M_ramlen,
                                      HPLCC2420M_rambuf);
}
    291c:	08 95       	ret

0000291e <HPLCC2420M_StdControl_init>:
uint8_t HPLCC2420M_ramlen;
uint16_t HPLCC2420M_ramaddr;

//set up basic settings
inline result_t HPLCC2420M_StdControl_init(void)
{
    291e:	1f 93       	push	r17
    HPLCC2420M_bSpiAvail = TRUE;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	80 93 45 05 	sts	0x0545, r24
    LITE_MAKE_MISO_INPUT();
    2926:	0e 94 b3 03 	call	0x766	; 0x766 <LITE_MAKE_MISO_INPUT>
    LITE_MAKE_MOSI_OUTPUT();
    292a:	0e 94 9d 03 	call	0x73a	; 0x73a <LITE_MAKE_MOSI_OUTPUT>
    LITE_MAKE_SPI_SCK_OUTPUT();
    292e:	0e 94 c1 03 	call	0x782	; 0x782 <LITE_MAKE_SPI_SCK_OUTPUT>
    LITE_MAKE_CC_RSTN_OUTPUT();
    2932:	0e 94 7e 05 	call	0xafc	; 0xafc <LITE_MAKE_CC_RSTN_OUTPUT>
    LITE_MAKE_CC_VREN_OUTPUT();
    2936:	0e 94 94 05 	call	0xb28	; 0xb28 <LITE_MAKE_CC_VREN_OUTPUT>
    LITE_MAKE_CC_CS_OUTPUT();
    293a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <LITE_MAKE_CC_CS_OUTPUT>
    LITE_MAKE_CC_FIFOP1_INPUT();
    293e:	0e 94 c4 05 	call	0xb88	; 0xb88 <LITE_MAKE_CC_FIFOP1_INPUT>
    LITE_MAKE_CC_CCA_INPUT();
    2942:	0e 94 db 05 	call	0xbb6	; 0xbb6 <LITE_MAKE_CC_CCA_INPUT>
    LITE_MAKE_CC_SFD_INPUT();
    2946:	0e 94 ef 05 	call	0xbde	; 0xbde <LITE_MAKE_CC_SFD_INPUT>
    LITE_MAKE_CC_FIFO_INPUT();
    294a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <LITE_MAKE_CC_FIFO_INPUT>
    {
        _atomic_t _atomic = _atomic_start();
    294e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2952:	18 2f       	mov	r17, r24

        {
            LITE_MAKE_SPI_SCK_OUTPUT();
    2954:	0e 94 c1 03 	call	0x782	; 0x782 <LITE_MAKE_SPI_SCK_OUTPUT>
            LITE_MAKE_MISO_INPUT();
    2958:	0e 94 b3 03 	call	0x766	; 0x766 <LITE_MAKE_MISO_INPUT>
            LITE_MAKE_MOSI_OUTPUT();
    295c:	0e 94 9d 03 	call	0x73a	; 0x73a <LITE_MAKE_MOSI_OUTPUT>
            sbi(SPSR, SPI2X);   // Double speed spi clock
    2960:	70 9a       	sbi	0x0e, 0	; 14
            sbi(SPCR, MSTR);    // Set master mode
    2962:	6c 9a       	sbi	0x0d, 4	; 13
            cbi(SPCR, CPOL);    // Set proper polarity...
    2964:	6b 98       	cbi	0x0d, 3	; 13
            cbi(SPCR, CPHA);    // ...and phase
    2966:	6a 98       	cbi	0x0d, 2	; 13
            cbi(SPCR, SPR1);    // set clock, fosc/2 (~3.6 Mhz)
    2968:	69 98       	cbi	0x0d, 1	; 13
            cbi(SPCR, SPR0);
    296a:	68 98       	cbi	0x0d, 0	; 13
            //    sbi(SPCR, SPIE);             // enable spi port interrupt
            sbi(SPCR, SPE);     // enable spie port
    296c:	6e 9a       	sbi	0x0d, 6	; 13
        }
        _atomic_end(_atomic);
    296e:	81 2f       	mov	r24, r17
    2970:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return SUCCESS;
}
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	1f 91       	pop	r17
    2978:	08 95       	ret

0000297a <HPLTimer1M_CaptureT1_enableEvents>:
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_enableEvents(void)
{
    cbi(TCCR1B, WGM13);
    297a:	8e b5       	in	r24, 0x2e	; 46
    297c:	8f 7e       	andi	r24, 0xEF	; 239
    297e:	8e bd       	out	0x2e, r24	; 46
    cbi(TCCR1B, WGM12);
    2980:	8e b5       	in	r24, 0x2e	; 46
    2982:	87 7f       	andi	r24, 0xF7	; 247
    2984:	8e bd       	out	0x2e, r24	; 46
    sbi(TIMSK, TICIE1);
    2986:	87 b7       	in	r24, 0x37	; 55
    2988:	80 62       	ori	r24, 0x20	; 32
    298a:	87 bf       	out	0x37, r24	; 55
}
    298c:	08 95       	ret

0000298e <HPLTimer1M_CaptureT1_clearOverflow>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_clearOverflow(void)
{
    sbi(TIFR, TOV1);
    298e:	86 b7       	in	r24, 0x36	; 54
    2990:	84 60       	ori	r24, 0x04	; 4
    2992:	86 bf       	out	0x36, r24	; 54
    return;
}
    2994:	08 95       	ret

00002996 <HPLTimer1M_CaptureT1_disableEvents>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_disableEvents(void)
{
    cbi(TIMSK, TICIE1);         //disable
    2996:	87 b7       	in	r24, 0x37	; 55
    2998:	8f 7d       	andi	r24, 0xDF	; 223
    299a:	87 bf       	out	0x37, r24	; 55
    sbi(TIFR, ICF1);            //clear any pending interrupt}
    299c:	86 b7       	in	r24, 0x36	; 54
    299e:	80 62       	ori	r24, 0x20	; 32
    29a0:	86 bf       	out	0x36, r24	; 54
}
    29a2:	08 95       	ret

000029a4 <HPLTimer1M_Timer1_default_fire>:

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_Timer1_default_fire(void)
{
    return SUCCESS;
}
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	08 95       	ret

000029a8 <HPLTimer1M_Timer1_fire>:
{
    unsigned char result;

    result = HPLTimer1M_Timer1_default_fire();
    return result;
}
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	08 95       	ret

000029ac <HPLTimer1M_CaptureT1_isOverflowPending>:
}

//-------------------------------------------------------------------------
inline bool HPLTimer1M_CaptureT1_isOverflowPending(void)
{
    return (inp(TIFR) & TOV1);
    29ac:	86 b7       	in	r24, 0x36	; 54
}
    29ae:	82 70       	andi	r24, 0x02	; 2
    29b0:	08 95       	ret

000029b2 <HPLTimer1M_CaptureT1_setEdge>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_setEdge(uint8_t LowToHigh)
{
    if (LowToHigh)
    29b2:	88 23       	and	r24, r24
    29b4:	39 f4       	brne	.+14     	; 0x29c4 <HPLTimer1M_CaptureT1_setEdge+0x12>
        sbi(TCCR1B, ICES1);
    }
    //rising edge
    else
    {
        cbi(TCCR1B, ICES1);
    29b6:	8e b5       	in	r24, 0x2e	; 46
    29b8:	8f 7b       	andi	r24, 0xBF	; 191
    29ba:	8e bd       	out	0x2e, r24	; 46
    }
    //falling edge
    //Set InputCapture pin PortD pin4 as INPUT
    //  LITE_MAKE_CC_SFD_INPUT();
    sbi(TIFR, ICF1);            //clear any pending interrupt
    29bc:	86 b7       	in	r24, 0x36	; 54
    29be:	80 62       	ori	r24, 0x20	; 32
    29c0:	86 bf       	out	0x36, r24	; 54
    return;
}
    29c2:	08 95       	ret
//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_setEdge(uint8_t LowToHigh)
{
    if (LowToHigh)
    {
        sbi(TCCR1B, ICES1);
    29c4:	8e b5       	in	r24, 0x2e	; 46
    29c6:	80 64       	ori	r24, 0x40	; 64
    29c8:	8e bd       	out	0x2e, r24	; 46
        cbi(TCCR1B, ICES1);
    }
    //falling edge
    //Set InputCapture pin PortD pin4 as INPUT
    //  LITE_MAKE_CC_SFD_INPUT();
    sbi(TIFR, ICF1);            //clear any pending interrupt
    29ca:	86 b7       	in	r24, 0x36	; 54
    29cc:	80 62       	ori	r24, 0x20	; 32
    29ce:	86 bf       	out	0x36, r24	; 54
    return;
}
    29d0:	08 95       	ret

000029d2 <__vector_12>:

//void  __vector_12(void)  __attribute__((signal, used,   externally_visible)); 
//void __attribute((interrupt, used, externally_visible))  __vector_12(void)
ISR(TIMER1_COMPA_vect)
{
    29d2:	1f 92       	push	r1
    29d4:	0f 92       	push	r0
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	0f 92       	push	r0
    29da:	0b b6       	in	r0, 0x3b	; 59
    29dc:	0f 92       	push	r0
    29de:	11 24       	eor	r1, r1
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	2f 93       	push	r18
    29e6:	3f 93       	push	r19
    29e8:	4f 93       	push	r20
    29ea:	5f 93       	push	r21
    29ec:	6f 93       	push	r22
    29ee:	7f 93       	push	r23
    29f0:	8f 93       	push	r24
    29f2:	9f 93       	push	r25
    29f4:	af 93       	push	r26
    29f6:	bf 93       	push	r27
    29f8:	ef 93       	push	r30
    29fa:	ff 93       	push	r31
    /*   
       __asm__ __volatile__ ("sei" ::);
       SHOWME(int12 start\n);
     */
    isthreadtrue = 0;
    _atomic = _atomic_start();
    29fc:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2a00:	18 2f       	mov	r17, r24
    if (is_thread())
    2a02:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <is_thread>
    2a06:	88 23       	and	r24, r24
    2a08:	09 f0       	breq	.+2      	; 0x2a0c <__vector_12+0x3a>
    2a0a:	47 c0       	rjmp	.+142    	; 0x2a9a <__vector_12+0xc8>
    2a0c:	00 e0       	ldi	r16, 0x00	; 0
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    2a0e:	81 2f       	mov	r24, r17
    2a10:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    {
        _atomic_t _atomic = _atomic_start();
    2a14:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2a18:	28 2f       	mov	r18, r24

        {
            if (HPLTimer1M_set_flag)
    2a1a:	80 91 50 05 	lds	r24, 0x0550
    2a1e:	88 23       	and	r24, r24
    2a20:	81 f0       	breq	.+32     	; 0x2a42 <__vector_12+0x70>
            {
                HPLTimer1M_mscale = HPLTimer1M_nextScale;
    2a22:	80 91 55 05 	lds	r24, 0x0555
    2a26:	80 93 58 05 	sts	0x0558, r24
                HPLTimer1M_nextScale |= 0x8;
    2a2a:	88 60       	ori	r24, 0x08	; 8
    2a2c:	80 93 55 05 	sts	0x0555, r24
                outp(HPLTimer1M_nextScale, TCCR1B);     //update the clock scale
    2a30:	8e bd       	out	0x2e, r24	; 46
                outw(OCR1AL, HPLTimer1M_minterval);     //update the compare value
    2a32:	80 91 56 05 	lds	r24, 0x0556
    2a36:	90 91 57 05 	lds	r25, 0x0557
    2a3a:	9b bd       	out	0x2b, r25	; 43
    2a3c:	8a bd       	out	0x2a, r24	; 42
                HPLTimer1M_set_flag = 0;
    2a3e:	10 92 50 05 	sts	0x0550, r1
            }
        }
        _atomic_end(_atomic);
    2a42:	82 2f       	mov	r24, r18
    2a44:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    HPLTimer1M_Timer1_fire();
    _atomic = _atomic_start();
    2a48:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2a4c:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
    2a4e:	01 30       	cpi	r16, 0x01	; 1
    2a50:	61 f4       	brne	.+24     	; 0x2a6a <__vector_12+0x98>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    2a52:	8d b7       	in	r24, 0x3d	; 61
    2a54:	9e b7       	in	r25, 0x3e	; 62
    2a56:	90 93 8b 05 	sts	0x058B, r25
    2a5a:	80 93 8a 05 	sts	0x058A, r24
    2a5e:	80 91 2b 06 	lds	r24, 0x062B
    2a62:	90 91 2c 06 	lds	r25, 0x062C
    2a66:	9e bf       	out	0x3e, r25	; 62
    2a68:	8d bf       	out	0x3d, r24	; 61
        //  thread_yield();   
    }
    _atomic_end(_atomic);
    2a6a:	82 2f       	mov	r24, r18
    2a6c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    /*              
       SHOWME(int12 end\n);
       __asm__ __volatile__ ("cli" ::);     
     */
}
    2a70:	ff 91       	pop	r31
    2a72:	ef 91       	pop	r30
    2a74:	bf 91       	pop	r27
    2a76:	af 91       	pop	r26
    2a78:	9f 91       	pop	r25
    2a7a:	8f 91       	pop	r24
    2a7c:	7f 91       	pop	r23
    2a7e:	6f 91       	pop	r22
    2a80:	5f 91       	pop	r21
    2a82:	4f 91       	pop	r20
    2a84:	3f 91       	pop	r19
    2a86:	2f 91       	pop	r18
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	0f 90       	pop	r0
    2a8e:	0b be       	out	0x3b, r0	; 59
    2a90:	0f 90       	pop	r0
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	0f 90       	pop	r0
    2a96:	1f 90       	pop	r1
    2a98:	18 95       	reti
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    2a9a:	8d b7       	in	r24, 0x3d	; 61
    2a9c:	9e b7       	in	r25, 0x3e	; 62
    2a9e:	90 93 2c 06 	sts	0x062C, r25
    2aa2:	80 93 2b 06 	sts	0x062B, r24
    2aa6:	80 91 8a 05 	lds	r24, 0x058A
    2aaa:	90 91 8b 05 	lds	r25, 0x058B
    2aae:	9e bf       	out	0x3e, r25	; 62
    2ab0:	8d bf       	out	0x3d, r24	; 61
    2ab2:	01 e0       	ldi	r16, 0x01	; 1
    2ab4:	ac cf       	rjmp	.-168    	; 0x2a0e <__vector_12+0x3c>

00002ab6 <HPLTimer1M_CaptureT1_getEvent>:
    return result;
}

//-------------------------------------------------------------------------
inline uint16_t HPLTimer1M_CaptureT1_getEvent(void)
{
    2ab6:	0f 93       	push	r16
    2ab8:	1f 93       	push	r17
    uint16_t i;

    {
        _atomic_t _atomic = _atomic_start();
    2aba:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        i = inw(ICR1L);
    2abe:	06 b5       	in	r16, 0x26	; 38
    2ac0:	17 b5       	in	r17, 0x27	; 39
        _atomic_end(_atomic);
    2ac2:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return i;
}
    2ac6:	c8 01       	movw	r24, r16
    2ac8:	1f 91       	pop	r17
    2aca:	0f 91       	pop	r16
    2acc:	08 95       	ret

00002ace <HPLTimer1M_Timer1_setRate>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_Timer1_setRate(uint16_t interval, char scale)
{
    2ace:	ef 92       	push	r14
    2ad0:	ff 92       	push	r15
    2ad2:	1f 93       	push	r17
    2ad4:	7c 01       	movw	r14, r24
    2ad6:	16 2f       	mov	r17, r22
    scale &= 0x7;
    2ad8:	17 70       	andi	r17, 0x07	; 7
    scale |= 0x8;
    {
        _atomic_t _atomic = _atomic_start();
    2ada:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            outp(0, TCCR1A);    //stop the timer's clock
    2ade:	1f bc       	out	0x2f, r1	; 47
            cbi(TIMSK, OCIE1A); //disable output compare
    2ae0:	97 b7       	in	r25, 0x37	; 55
    2ae2:	9f 7e       	andi	r25, 0xEF	; 239
    2ae4:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TOIE1);  //disable Overflow interrupts
    2ae6:	97 b7       	in	r25, 0x37	; 55
    2ae8:	9b 7f       	andi	r25, 0xFB	; 251
    2aea:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TICIE1); //clear input capture
    2aec:	97 b7       	in	r25, 0x37	; 55
    2aee:	9f 7d       	andi	r25, 0xDF	; 223
    2af0:	97 bf       	out	0x37, r25	; 55
            outw(TCNT1L, 0);    //clear the 16bit count 
    2af2:	1d bc       	out	0x2d, r1	; 45
    2af4:	1c bc       	out	0x2c, r1	; 44
            outw(OCR1AL, interval);     //set the compare value
    2af6:	fb bc       	out	0x2b, r15	; 43
    2af8:	ea bc       	out	0x2a, r14	; 42
            sbi(TIFR, OCF1A);   //clear Timer1A OCF flag by writing 1
    2afa:	96 b7       	in	r25, 0x36	; 54
    2afc:	90 61       	ori	r25, 0x10	; 16
    2afe:	96 bf       	out	0x36, r25	; 54
            //              sbi(TIMSK, OCIE1A);       //enable OCIE1A interrupt
            outp(scale, TCCR1B);        //starts the timer with sc
    2b00:	18 60       	ori	r17, 0x08	; 8
    2b02:	1e bd       	out	0x2e, r17	; 46
        }
        _atomic_end(_atomic);
    2b04:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return SUCCESS;
}
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	1f 91       	pop	r17
    2b0c:	ff 90       	pop	r15
    2b0e:	ef 90       	pop	r14
    2b10:	08 95       	ret

00002b12 <HPLTimer1M_StdControl_init>:
uint8_t HPLTimer1M_nextScale;
uint16_t HPLTimer1M_minterval;
inline result_t HPLTimer1M_StdControl_init(void)
{
    {
        _atomic_t _atomic = _atomic_start();
    2b12:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            HPLTimer1M_mscale = TCLK_CPU_DIV256;
    2b16:	94 e0       	ldi	r25, 0x04	; 4
    2b18:	90 93 58 05 	sts	0x0558, r25
            HPLTimer1M_minterval = TIMER1_DEFAULT_INTERVAL;
    2b1c:	2f ef       	ldi	r18, 0xFF	; 255
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	30 93 57 05 	sts	0x0557, r19
    2b24:	20 93 56 05 	sts	0x0556, r18
        }
        _atomic_end(_atomic);
    2b28:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return SUCCESS;
}
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	08 95       	ret

00002b30 <HPLTimer1M_CaptureT1_captured>:
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_captured(uint16_t arg_0xa4d7ac0)
{
    hplcc2420interruptm_SFDCapture_captured(arg_0xa4d7ac0);
    2b30:	0e 94 b9 12 	call	0x2572	; 0x2572 <hplcc2420interruptm_SFDCapture_captured>
}
    2b34:	08 95       	ret

00002b36 <__vector_11>:

//void   __vector_11(void) __attribute__((signal, used,   externally_visible)); 
//void  __attribute((signal, used, externally_visible))   __vector_11(void) 
SIGNAL(TIMER1_CAPT_vect)
{
    2b36:	1f 92       	push	r1
    2b38:	0f 92       	push	r0
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	0f 92       	push	r0
    2b3e:	0b b6       	in	r0, 0x3b	; 59
    2b40:	0f 92       	push	r0
    2b42:	11 24       	eor	r1, r1
    2b44:	0f 93       	push	r16
    2b46:	1f 93       	push	r17
    2b48:	2f 93       	push	r18
    2b4a:	3f 93       	push	r19
    2b4c:	4f 93       	push	r20
    2b4e:	5f 93       	push	r21
    2b50:	6f 93       	push	r22
    2b52:	7f 93       	push	r23
    2b54:	8f 93       	push	r24
    2b56:	9f 93       	push	r25
    2b58:	af 93       	push	r26
    2b5a:	bf 93       	push	r27
    2b5c:	ef 93       	push	r30
    2b5e:	ff 93       	push	r31
       _atomic_end(_atomic); 
       }
    #endif
    
    isthreadtrue = 0;
    _atomic = _atomic_start();
    2b60:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2b64:	08 2f       	mov	r16, r24
    if (is_thread())
    2b66:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <is_thread>
    2b6a:	88 23       	and	r24, r24
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <__vector_11+0x3a>
    2b6e:	3f c0       	rjmp	.+126    	; 0x2bee <__vector_11+0xb8>
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    2b70:	8d b7       	in	r24, 0x3d	; 61
    2b72:	9e b7       	in	r25, 0x3e	; 62
    2b74:	90 93 2c 06 	sts	0x062C, r25
    2b78:	80 93 2b 06 	sts	0x062B, r24
    2b7c:	80 91 8a 05 	lds	r24, 0x058A
    2b80:	90 91 8b 05 	lds	r25, 0x058B
    2b84:	9e bf       	out	0x3e, r25	; 62
    2b86:	8d bf       	out	0x3d, r24	; 61
    }
    _atomic_end(_atomic);
    2b88:	80 2f       	mov	r24, r16
    2b8a:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
inline uint16_t HPLTimer1M_CaptureT1_getEvent(void)
{
    uint16_t i;

    {
        _atomic_t _atomic = _atomic_start();
    2b8e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        i = inw(ICR1L);
    2b92:	06 b5       	in	r16, 0x26	; 38
    2b94:	17 b5       	in	r17, 0x27	; 39
        _atomic_end(_atomic);
    2b96:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_captured(uint16_t arg_0xa4d7ac0)
{
    hplcc2420interruptm_SFDCapture_captured(arg_0xa4d7ac0);
    2b9a:	c8 01       	movw	r24, r16
    2b9c:	0e 94 b9 12 	call	0x2572	; 0x2572 <hplcc2420interruptm_SFDCapture_captured>
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    HPLTimer1M_CaptureT1_captured(HPLTimer1M_CaptureT1_getEvent());
    _atomic = _atomic_start();
    2ba0:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2ba4:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    2ba6:	8d b7       	in	r24, 0x3d	; 61
    2ba8:	9e b7       	in	r25, 0x3e	; 62
    2baa:	90 93 8b 05 	sts	0x058B, r25
    2bae:	80 93 8a 05 	sts	0x058A, r24
    2bb2:	80 91 2b 06 	lds	r24, 0x062B
    2bb6:	90 91 2c 06 	lds	r25, 0x062C
    2bba:	9e bf       	out	0x3e, r25	; 62
    2bbc:	8d bf       	out	0x3d, r24	; 61
        // thread_yield();   
    }
    _atomic_end(_atomic);
    2bbe:	82 2f       	mov	r24, r18
    2bc0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
       interruptcost += ((uint32_t)(hcounter2-hcounter))*50000*50000 + lcounter2 - lcounter; 
       _atomic_end(_atomic); 
       }
       __asm__ __volatile__ ("cli" ::);     
    #endif
}
    2bc4:	ff 91       	pop	r31
    2bc6:	ef 91       	pop	r30
    2bc8:	bf 91       	pop	r27
    2bca:	af 91       	pop	r26
    2bcc:	9f 91       	pop	r25
    2bce:	8f 91       	pop	r24
    2bd0:	7f 91       	pop	r23
    2bd2:	6f 91       	pop	r22
    2bd4:	5f 91       	pop	r21
    2bd6:	4f 91       	pop	r20
    2bd8:	3f 91       	pop	r19
    2bda:	2f 91       	pop	r18
    2bdc:	1f 91       	pop	r17
    2bde:	0f 91       	pop	r16
    2be0:	0f 90       	pop	r0
    2be2:	0b be       	out	0x3b, r0	; 59
    2be4:	0f 90       	pop	r0
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	0f 90       	pop	r0
    2bea:	1f 90       	pop	r1
    2bec:	18 95       	reti
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    2bee:	80 2f       	mov	r24, r16
    2bf0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
inline uint16_t HPLTimer1M_CaptureT1_getEvent(void)
{
    uint16_t i;

    {
        _atomic_t _atomic = _atomic_start();
    2bf4:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        i = inw(ICR1L);
    2bf8:	06 b5       	in	r16, 0x26	; 38
    2bfa:	17 b5       	in	r17, 0x27	; 39
        _atomic_end(_atomic);
    2bfc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_captured(uint16_t arg_0xa4d7ac0)
{
    hplcc2420interruptm_SFDCapture_captured(arg_0xa4d7ac0);
    2c00:	c8 01       	movw	r24, r16
    2c02:	0e 94 b9 12 	call	0x2572	; 0x2572 <hplcc2420interruptm_SFDCapture_captured>
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    HPLTimer1M_CaptureT1_captured(HPLTimer1M_CaptureT1_getEvent());
    _atomic = _atomic_start();
    2c06:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	d8 cf       	rjmp	.-80     	; 0x2bbe <__vector_11+0x88>

00002c0e <HPLTimer1M_StdControl_stop>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_StdControl_stop(void)
{
    2c0e:	0f 93       	push	r16
    2c10:	1f 93       	push	r17
    uint16_t mi;

    {
        _atomic_t _atomic = _atomic_start();
    2c12:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            mi = HPLTimer1M_minterval;
    2c16:	00 91 56 05 	lds	r16, 0x0556
    2c1a:	10 91 57 05 	lds	r17, 0x0557
        }
        _atomic_end(_atomic);
    2c1e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
inline result_t HPLTimer1M_Timer1_setRate(uint16_t interval, char scale)
{
    scale &= 0x7;
    scale |= 0x8;
    {
        _atomic_t _atomic = _atomic_start();
    2c22:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            outp(0, TCCR1A);    //stop the timer's clock
    2c26:	1f bc       	out	0x2f, r1	; 47
            cbi(TIMSK, OCIE1A); //disable output compare
    2c28:	97 b7       	in	r25, 0x37	; 55
    2c2a:	9f 7e       	andi	r25, 0xEF	; 239
    2c2c:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TOIE1);  //disable Overflow interrupts
    2c2e:	97 b7       	in	r25, 0x37	; 55
    2c30:	9b 7f       	andi	r25, 0xFB	; 251
    2c32:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TICIE1); //clear input capture
    2c34:	97 b7       	in	r25, 0x37	; 55
    2c36:	9f 7d       	andi	r25, 0xDF	; 223
    2c38:	97 bf       	out	0x37, r25	; 55
            outw(TCNT1L, 0);    //clear the 16bit count 
    2c3a:	1d bc       	out	0x2d, r1	; 45
    2c3c:	1c bc       	out	0x2c, r1	; 44
            outw(OCR1AL, interval);     //set the compare value
    2c3e:	1b bd       	out	0x2b, r17	; 43
    2c40:	0a bd       	out	0x2a, r16	; 42
            sbi(TIFR, OCF1A);   //clear Timer1A OCF flag by writing 1
    2c42:	96 b7       	in	r25, 0x36	; 54
    2c44:	90 61       	ori	r25, 0x10	; 16
    2c46:	96 bf       	out	0x36, r25	; 54
            //              sbi(TIMSK, OCIE1A);       //enable OCIE1A interrupt
            outp(scale, TCCR1B);        //starts the timer with sc
    2c48:	98 e0       	ldi	r25, 0x08	; 8
    2c4a:	9e bd       	out	0x2e, r25	; 46
        }
        _atomic_end(_atomic);
    2c4c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
        }
        _atomic_end(_atomic);
    }
    HPLTimer1M_Timer1_setRate(mi, 0);   //default scale=0=OFF
    return SUCCESS;
}
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	1f 91       	pop	r17
    2c54:	0f 91       	pop	r16
    2c56:	08 95       	ret

00002c58 <HPLTimer1M_StdControl_start>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_StdControl_start(void)
{
    2c58:	ef 92       	push	r14
    2c5a:	ff 92       	push	r15
    2c5c:	1f 93       	push	r17
    uint16_t mi;
    uint8_t ms;

    {
        _atomic_t _atomic = _atomic_start();
    2c5e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            mi = HPLTimer1M_minterval;
    2c62:	e0 90 56 05 	lds	r14, 0x0556
    2c66:	f0 90 57 05 	lds	r15, 0x0557
            ms = HPLTimer1M_mscale;
    2c6a:	10 91 58 05 	lds	r17, 0x0558
        }
        _atomic_end(_atomic);
    2c6e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_Timer1_setRate(uint16_t interval, char scale)
{
    scale &= 0x7;
    2c72:	17 70       	andi	r17, 0x07	; 7
    scale |= 0x8;
    {
        _atomic_t _atomic = _atomic_start();
    2c74:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            outp(0, TCCR1A);    //stop the timer's clock
    2c78:	1f bc       	out	0x2f, r1	; 47
            cbi(TIMSK, OCIE1A); //disable output compare
    2c7a:	97 b7       	in	r25, 0x37	; 55
    2c7c:	9f 7e       	andi	r25, 0xEF	; 239
    2c7e:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TOIE1);  //disable Overflow interrupts
    2c80:	97 b7       	in	r25, 0x37	; 55
    2c82:	9b 7f       	andi	r25, 0xFB	; 251
    2c84:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, TICIE1); //clear input capture
    2c86:	97 b7       	in	r25, 0x37	; 55
    2c88:	9f 7d       	andi	r25, 0xDF	; 223
    2c8a:	97 bf       	out	0x37, r25	; 55
            outw(TCNT1L, 0);    //clear the 16bit count 
    2c8c:	1d bc       	out	0x2d, r1	; 45
    2c8e:	1c bc       	out	0x2c, r1	; 44
            outw(OCR1AL, interval);     //set the compare value
    2c90:	fb bc       	out	0x2b, r15	; 43
    2c92:	ea bc       	out	0x2a, r14	; 42
            sbi(TIFR, OCF1A);   //clear Timer1A OCF flag by writing 1
    2c94:	96 b7       	in	r25, 0x36	; 54
    2c96:	90 61       	ori	r25, 0x10	; 16
    2c98:	96 bf       	out	0x36, r25	; 54
            //              sbi(TIMSK, OCIE1A);       //enable OCIE1A interrupt
            outp(scale, TCCR1B);        //starts the timer with sc
    2c9a:	18 60       	ori	r17, 0x08	; 8
    2c9c:	1e bd       	out	0x2e, r17	; 46
        }
        _atomic_end(_atomic);
    2c9e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
        }
        _atomic_end(_atomic);
    }
    HPLTimer1M_Timer1_setRate(mi, ms);
    return SUCCESS;
}
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	1f 91       	pop	r17
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	08 95       	ret

00002cac <initScheduling>:
#endif
void initScheduling(void)
{
    int i;

    LITE_sched_num = 0;
    2cac:	10 92 89 05 	sts	0x0589, r1
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    for (i = 0; i < LITE_MAX_TASKS; i++)
    {
        LITE_queue[i].tp = (void *)0;
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	ee 0f       	add	r30, r30
    2cb8:	ff 1f       	adc	r31, r31
    2cba:	e8 0f       	add	r30, r24
    2cbc:	f9 1f       	adc	r31, r25
    2cbe:	e7 5a       	subi	r30, 0xA7	; 167
    2cc0:	fa 4f       	sbci	r31, 0xFA	; 250
    2cc2:	11 82       	std	Z+1, r1	; 0x01
    2cc4:	10 82       	st	Z, r1
void initScheduling(void)
{
    int i;

    LITE_sched_num = 0;
    for (i = 0; i < LITE_MAX_TASKS; i++)
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	80 31       	cpi	r24, 0x10	; 16
    2cca:	91 05       	cpc	r25, r1
    2ccc:	99 f7       	brne	.-26     	; 0x2cb4 <initScheduling+0x8>
        LITE_queue[i].tp = (void *)0;
    }
#ifdef PLATFORM_CPU_MEASURE
    cpucounter = 0;
#endif
}
    2cce:	08 95       	ret

00002cd0 <postTask>:

//-------------------------------------------------------------------------
bool postTask(void (*tp) (void), uint8_t priority)
{
    2cd0:	1f 93       	push	r17
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	ec 01       	movw	r28, r24
    2cd8:	16 2f       	mov	r17, r22
    _atomic_t fInterruptFlags;
    uint8_t tmp;

    fInterruptFlags = _atomic_start();
    2cda:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2cde:	48 2f       	mov	r20, r24
    if (LITE_sched_num == LITE_MAX_TASKS)
    2ce0:	80 91 89 05 	lds	r24, 0x0589
    2ce4:	80 31       	cpi	r24, 0x10	; 16
    2ce6:	91 f0       	breq	.+36     	; 0x2d0c <postTask+0x3c>
    {
        _atomic_end(fInterruptFlags);
        return FALSE;
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    {
        if (LITE_queue[tmp].tp == NULL)
    2cec:	f9 01       	movw	r30, r18
    2cee:	ee 0f       	add	r30, r30
    2cf0:	ff 1f       	adc	r31, r31
    2cf2:	e2 0f       	add	r30, r18
    2cf4:	f3 1f       	adc	r31, r19
    2cf6:	e7 5a       	subi	r30, 0xA7	; 167
    2cf8:	fa 4f       	sbci	r31, 0xFA	; 250
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	89 2b       	or	r24, r25
    2d00:	69 f0       	breq	.+26     	; 0x2d1c <postTask+0x4c>
        {
            LITE_queue[tmp].tp = tp;
            LITE_queue[tmp].priority = priority;
            LITE_sched_num++;
            _atomic_end(fInterruptFlags);
            return TRUE;
    2d02:	2f 5f       	subi	r18, 0xFF	; 255
    2d04:	3f 4f       	sbci	r19, 0xFF	; 255
    if (LITE_sched_num == LITE_MAX_TASKS)
    {
        _atomic_end(fInterruptFlags);
        return FALSE;
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    2d06:	20 31       	cpi	r18, 0x10	; 16
    2d08:	31 05       	cpc	r19, r1
    2d0a:	81 f7       	brne	.-32     	; 0x2cec <postTask+0x1c>
            LITE_sched_num++;
            _atomic_end(fInterruptFlags);
            return TRUE;
        }
    }
    _atomic_end(fInterruptFlags);
    2d0c:	84 2f       	mov	r24, r20
    2d0e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    return FALSE;
}
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	1f 91       	pop	r17
    2d1a:	08 95       	ret
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    {
        if (LITE_queue[tmp].tp == NULL)
        {
            LITE_queue[tmp].tp = tp;
    2d1c:	d1 83       	std	Z+1, r29	; 0x01
    2d1e:	c0 83       	st	Z, r28
            LITE_queue[tmp].priority = priority;
    2d20:	12 83       	std	Z+2, r17	; 0x02
            LITE_sched_num++;
    2d22:	80 91 89 05 	lds	r24, 0x0589
    2d26:	8f 5f       	subi	r24, 0xFF	; 255
    2d28:	80 93 89 05 	sts	0x0589, r24
            _atomic_end(fInterruptFlags);
    2d2c:	84 2f       	mov	r24, r20
    2d2e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    2d32:	81 e0       	ldi	r24, 0x01	; 1
            return TRUE;
        }
    }
    _atomic_end(fInterruptFlags);
    return FALSE;
}
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	1f 91       	pop	r17
    2d3a:	08 95       	ret

00002d3c <runNextTask>:

//-------------------------------------------------------------------------
bool runNextTask()
{
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    uint8_t tmp;
    uint8_t reserved;
    void (*func) (void);

    reserved = 0;
    fInterruptFlags = _atomic_start();
    2d40:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    2d44:	68 2f       	mov	r22, r24
    currentpriority = 0;
    func = NULL;
    if (LITE_sched_num == 0)
    2d46:	80 91 89 05 	lds	r24, 0x0589
    2d4a:	88 23       	and	r24, r24
    2d4c:	c1 f1       	breq	.+112    	; 0x2dbe <runNextTask+0x82>
        cpucounter++;
#else
        _avr_sleep();
        //   printfstr("ABOUT TO SLEEP!!\n");
#endif
        return FALSE;
    2d4e:	c0 e0       	ldi	r28, 0x00	; 0
    2d50:	d0 e0       	ldi	r29, 0x00	; 0
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	50 e0       	ldi	r21, 0x00	; 0
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    {
        if ((LITE_queue[tmp].tp != NULL) && (LITE_queue[tmp].priority >
    2d5a:	f9 01       	movw	r30, r18
    2d5c:	ee 0f       	add	r30, r30
    2d5e:	ff 1f       	adc	r31, r31
    2d60:	e2 0f       	add	r30, r18
    2d62:	f3 1f       	adc	r31, r19
    2d64:	e7 5a       	subi	r30, 0xA7	; 167
    2d66:	fa 4f       	sbci	r31, 0xFA	; 250
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	89 2b       	or	r24, r25
    2d6e:	39 f0       	breq	.+14     	; 0x2d7e <runNextTask+0x42>
    2d70:	82 81       	ldd	r24, Z+2	; 0x02
    2d72:	48 17       	cp	r20, r24
    2d74:	20 f4       	brcc	.+8      	; 0x2d7e <runNextTask+0x42>
                                             currentpriority))
        {
            func = LITE_queue[tmp].tp;
    2d76:	c0 81       	ld	r28, Z
    2d78:	d1 81       	ldd	r29, Z+1	; 0x01
            reserved = tmp;
            currentpriority = LITE_queue[tmp].priority;
    2d7a:	42 81       	ldd	r20, Z+2	; 0x02
    2d7c:	52 2f       	mov	r21, r18
    2d7e:	2f 5f       	subi	r18, 0xFF	; 255
    2d80:	3f 4f       	sbci	r19, 0xFF	; 255
        _avr_sleep();
        //   printfstr("ABOUT TO SLEEP!!\n");
#endif
        return FALSE;
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    2d82:	20 31       	cpi	r18, 0x10	; 16
    2d84:	31 05       	cpc	r19, r1
    2d86:	49 f7       	brne	.-46     	; 0x2d5a <runNextTask+0x1e>
            func = LITE_queue[tmp].tp;
            reserved = tmp;
            currentpriority = LITE_queue[tmp].priority;
        }
    }
    if (func != NULL)
    2d88:	20 97       	sbiw	r28, 0x00	; 0
    2d8a:	21 f1       	breq	.+72     	; 0x2dd4 <runNextTask+0x98>
    {
        LITE_sched_num--;
    2d8c:	80 91 89 05 	lds	r24, 0x0589
    2d90:	81 50       	subi	r24, 0x01	; 1
    2d92:	80 93 89 05 	sts	0x0589, r24
        LITE_queue[reserved].tp = NULL;
    2d96:	85 2f       	mov	r24, r21
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	ee 0f       	add	r30, r30
    2d9e:	ff 1f       	adc	r31, r31
    2da0:	e8 0f       	add	r30, r24
    2da2:	f9 1f       	adc	r31, r25
    2da4:	e7 5a       	subi	r30, 0xA7	; 167
    2da6:	fa 4f       	sbci	r31, 0xFA	; 250
    2da8:	11 82       	std	Z+1, r1	; 0x01
    2daa:	10 82       	st	Z, r1
    }
    _atomic_end(fInterruptFlags);
    2dac:	86 2f       	mov	r24, r22
    2dae:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    if (func != NULL)
    {
        func();
    2db2:	fe 01       	movw	r30, r28
    2db4:	09 95       	icall
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    }
    return TRUE;
}
    2db8:	df 91       	pop	r29
    2dba:	cf 91       	pop	r28
    2dbc:	08 95       	ret
    fInterruptFlags = _atomic_start();
    currentpriority = 0;
    func = NULL;
    if (LITE_sched_num == 0)
    {
        _atomic_end(fInterruptFlags);
    2dbe:	86 2f       	mov	r24, r22
    2dc0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
        _avr_enable_interrupt();
    2dc4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_avr_enable_interrupt>
#ifdef PLATFORM_CPU_MEASURE
        cpucounter++;
#else
        _avr_sleep();
    2dc8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_avr_sleep>
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    if (func != NULL)
    {
        func();
    }
    return TRUE;
}
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	08 95       	ret
    if (func != NULL)
    {
        LITE_sched_num--;
        LITE_queue[reserved].tp = NULL;
    }
    _atomic_end(fInterruptFlags);
    2dd4:	86 2f       	mov	r24, r22
    2dd6:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    if (func != NULL)
    {
        func();
    }
    return TRUE;
}
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	08 95       	ret

00002de2 <call_fcn_ptr>:
   along with LiteOS.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "threaddata.h"
void call_fcn_ptr(void (*tp) ())
{
    (*tp) ();
    2de2:	fc 01       	movw	r30, r24
    2de4:	09 95       	icall
}
    2de6:	08 95       	ret

00002de8 <is_thread>:
//--------------------------------------------------------------------------
//this is still working as it checks if the upperfound of threads are larger than the spvalue or not. 
uint8_t is_thread()
{
  uint16_t SPvalue;
  asm volatile("in %A0, 0x3d""\n\t""in %B0, 0x3e""\n\t": "=r"(SPvalue): );
    2de8:	2d b7       	in	r18, 0x3d	; 61
    2dea:	3e b7       	in	r19, 0x3e	; 62
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	80 91 2d 06 	lds	r24, 0x062D
    2df2:	90 91 2e 06 	lds	r25, 0x062E
    2df6:	82 17       	cp	r24, r18
    2df8:	93 07       	cpc	r25, r19
    2dfa:	08 f0       	brcs	.+2      	; 0x2dfe <is_thread+0x16>
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
  }
  else
  {
    return 1;
  }
}
    2dfe:	84 2f       	mov	r24, r20
    2e00:	08 95       	ret

00002e02 <setThreadTerminateFunction>:


/* Set up the destroy thread function call */
void setThreadTerminateFunction(uint8_t currentindex, void(*fp)())
{
  thread_table[currentindex].thread_clear_function = fp;
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	fc 01       	movw	r30, r24
    2e06:	ee 0f       	add	r30, r30
    2e08:	ff 1f       	adc	r31, r31
    2e0a:	ee 0f       	add	r30, r30
    2e0c:	ff 1f       	adc	r31, r31
    2e0e:	ee 0f       	add	r30, r30
    2e10:	ff 1f       	adc	r31, r31
    2e12:	9f 01       	movw	r18, r30
    2e14:	22 0f       	add	r18, r18
    2e16:	33 1f       	adc	r19, r19
    2e18:	22 0f       	add	r18, r18
    2e1a:	33 1f       	adc	r19, r19
    2e1c:	e2 0f       	add	r30, r18
    2e1e:	f3 1f       	adc	r31, r19
    2e20:	e8 1b       	sub	r30, r24
    2e22:	f9 0b       	sbc	r31, r25
    2e24:	e2 57       	subi	r30, 0x72	; 114
    2e26:	fa 4f       	sbci	r31, 0xFA	; 250
    2e28:	74 8f       	std	Z+28, r23	; 0x1c
    2e2a:	63 8f       	std	Z+27, r22	; 0x1b
}
    2e2c:	08 95       	ret

00002e2e <lite_switch_to_user_thread>:
    #endif 
  #endif 
  
   //printfstr("Now switching to user.  \n"); 
  #ifdef PLATFORM_AVR
    PUSH_REG_STATUS();
    2e2e:	ff 93       	push	r31
    2e30:	ff b7       	in	r31, 0x3f	; 63
    2e32:	ff 93       	push	r31
    PUSH_GPR();
    2e34:	0f 92       	push	r0
    2e36:	1f 92       	push	r1
    2e38:	2f 92       	push	r2
    2e3a:	3f 92       	push	r3
    2e3c:	4f 92       	push	r4
    2e3e:	5f 92       	push	r5
    2e40:	6f 92       	push	r6
    2e42:	7f 92       	push	r7
    2e44:	8f 92       	push	r8
    2e46:	9f 92       	push	r9
    2e48:	af 92       	push	r10
    2e4a:	bf 92       	push	r11
    2e4c:	cf 92       	push	r12
    2e4e:	df 92       	push	r13
    2e50:	ef 92       	push	r14
    2e52:	ff 92       	push	r15
    2e54:	0f 93       	push	r16
    2e56:	1f 93       	push	r17
    2e58:	2f 93       	push	r18
    2e5a:	3f 93       	push	r19
    2e5c:	4f 93       	push	r20
    2e5e:	5f 93       	push	r21
    2e60:	6f 93       	push	r22
    2e62:	7f 93       	push	r23
    2e64:	8f 93       	push	r24
    2e66:	9f 93       	push	r25
    2e68:	af 93       	push	r26
    2e6a:	bf 93       	push	r27
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	ef 93       	push	r30
    2e72:	ff 93       	push	r31
    SWAP_STACK_PTR(old_stack_ptr, current_thread->sp);
    2e74:	8d b7       	in	r24, 0x3d	; 61
    2e76:	9e b7       	in	r25, 0x3e	; 62
    2e78:	90 93 8b 05 	sts	0x058B, r25
    2e7c:	80 93 8a 05 	sts	0x058A, r24
    2e80:	e0 91 8c 05 	lds	r30, 0x058C
    2e84:	f0 91 8d 05 	lds	r31, 0x058D
    2e88:	80 81       	ld	r24, Z
    2e8a:	91 81       	ldd	r25, Z+1	; 0x01
    2e8c:	9e bf       	out	0x3e, r25	; 62
    2e8e:	8d bf       	out	0x3d, r24	; 61
    POP_GPR();
    2e90:	ff 91       	pop	r31
    2e92:	ef 91       	pop	r30
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	bf 91       	pop	r27
    2e9a:	af 91       	pop	r26
    2e9c:	9f 91       	pop	r25
    2e9e:	8f 91       	pop	r24
    2ea0:	7f 91       	pop	r23
    2ea2:	6f 91       	pop	r22
    2ea4:	5f 91       	pop	r21
    2ea6:	4f 91       	pop	r20
    2ea8:	3f 91       	pop	r19
    2eaa:	2f 91       	pop	r18
    2eac:	1f 91       	pop	r17
    2eae:	0f 91       	pop	r16
    2eb0:	ff 90       	pop	r15
    2eb2:	ef 90       	pop	r14
    2eb4:	df 90       	pop	r13
    2eb6:	cf 90       	pop	r12
    2eb8:	bf 90       	pop	r11
    2eba:	af 90       	pop	r10
    2ebc:	9f 90       	pop	r9
    2ebe:	8f 90       	pop	r8
    2ec0:	7f 90       	pop	r7
    2ec2:	6f 90       	pop	r6
    2ec4:	5f 90       	pop	r5
    2ec6:	4f 90       	pop	r4
    2ec8:	3f 90       	pop	r3
    2eca:	2f 90       	pop	r2
    2ecc:	1f 90       	pop	r1
    2ece:	0f 90       	pop	r0
    POP_REG_STATUS();
    2ed0:	ff 91       	pop	r31
    2ed2:	ff bf       	out	0x3f, r31	; 63
    2ed4:	ff 91       	pop	r31
  #endif 
  
  //_avr_enable_interrupt(); 
  return ;
}
    2ed6:	08 95       	ret

00002ed8 <thread_yield>:

//-------------------------------------------------------------------------
void __attribute__((noinline))thread_yield() /* __attribute__((noinline)) */
{
  #ifdef PLATFORM_AVR
    PUSH_REG_STATUS();
    2ed8:	ff 93       	push	r31
    2eda:	ff b7       	in	r31, 0x3f	; 63
    2edc:	ff 93       	push	r31
    PUSH_GPR();
    2ede:	0f 92       	push	r0
    2ee0:	1f 92       	push	r1
    2ee2:	2f 92       	push	r2
    2ee4:	3f 92       	push	r3
    2ee6:	4f 92       	push	r4
    2ee8:	5f 92       	push	r5
    2eea:	6f 92       	push	r6
    2eec:	7f 92       	push	r7
    2eee:	8f 92       	push	r8
    2ef0:	9f 92       	push	r9
    2ef2:	af 92       	push	r10
    2ef4:	bf 92       	push	r11
    2ef6:	cf 92       	push	r12
    2ef8:	df 92       	push	r13
    2efa:	ef 92       	push	r14
    2efc:	ff 92       	push	r15
    2efe:	0f 93       	push	r16
    2f00:	1f 93       	push	r17
    2f02:	2f 93       	push	r18
    2f04:	3f 93       	push	r19
    2f06:	4f 93       	push	r20
    2f08:	5f 93       	push	r21
    2f0a:	6f 93       	push	r22
    2f0c:	7f 93       	push	r23
    2f0e:	8f 93       	push	r24
    2f10:	9f 93       	push	r25
    2f12:	af 93       	push	r26
    2f14:	bf 93       	push	r27
    2f16:	cf 93       	push	r28
    2f18:	df 93       	push	r29
    2f1a:	ef 93       	push	r30
    2f1c:	ff 93       	push	r31
    //Now swap the stacks back
    SWAP_STACK_PTR(current_thread->sp, old_stack_ptr);
    2f1e:	e0 91 8c 05 	lds	r30, 0x058C
    2f22:	f0 91 8d 05 	lds	r31, 0x058D
    2f26:	8d b7       	in	r24, 0x3d	; 61
    2f28:	9e b7       	in	r25, 0x3e	; 62
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
    2f2e:	80 91 8a 05 	lds	r24, 0x058A
    2f32:	90 91 8b 05 	lds	r25, 0x058B
    2f36:	9e bf       	out	0x3e, r25	; 62
    2f38:	8d bf       	out	0x3d, r24	; 61
    POP_GPR();
    2f3a:	ff 91       	pop	r31
    2f3c:	ef 91       	pop	r30
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	bf 91       	pop	r27
    2f44:	af 91       	pop	r26
    2f46:	9f 91       	pop	r25
    2f48:	8f 91       	pop	r24
    2f4a:	7f 91       	pop	r23
    2f4c:	6f 91       	pop	r22
    2f4e:	5f 91       	pop	r21
    2f50:	4f 91       	pop	r20
    2f52:	3f 91       	pop	r19
    2f54:	2f 91       	pop	r18
    2f56:	1f 91       	pop	r17
    2f58:	0f 91       	pop	r16
    2f5a:	ff 90       	pop	r15
    2f5c:	ef 90       	pop	r14
    2f5e:	df 90       	pop	r13
    2f60:	cf 90       	pop	r12
    2f62:	bf 90       	pop	r11
    2f64:	af 90       	pop	r10
    2f66:	9f 90       	pop	r9
    2f68:	8f 90       	pop	r8
    2f6a:	7f 90       	pop	r7
    2f6c:	6f 90       	pop	r6
    2f6e:	5f 90       	pop	r5
    2f70:	4f 90       	pop	r4
    2f72:	3f 90       	pop	r3
    2f74:	2f 90       	pop	r2
    2f76:	1f 90       	pop	r1
    2f78:	0f 90       	pop	r0
    POP_REG_STATUS();
    2f7a:	ff 91       	pop	r31
    2f7c:	ff bf       	out	0x3f, r31	; 63
    2f7e:	ff 91       	pop	r31
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_CONTEXTSWITCH
      addTrace(TRACE_CONTEXTSWITCHFROMUSERTHREAD, 100);
    #endif 
  #endif 
}
    2f80:	08 95       	ret

00002f82 <sleepThread>:
/* thread_sleep
 * This routine puts the current thread into a sleeping state.
 * It will not ever wake up until another task or thread wakes it up
 */
void sleepThread(uint16_t milli)
{
    2f82:	ac 01       	movw	r20, r24
//--------------------------------------------------------------------------
//this is still working as it checks if the upperfound of threads are larger than the spvalue or not. 
uint8_t is_thread()
{
  uint16_t SPvalue;
  asm volatile("in %A0, 0x3d""\n\t""in %B0, 0x3e""\n\t": "=r"(SPvalue): );
    2f84:	2d b7       	in	r18, 0x3d	; 61
    2f86:	3e b7       	in	r19, 0x3e	; 62

  if (SPvalue > (uint16_t)maxthreadrambound)
    2f88:	80 91 2d 06 	lds	r24, 0x062D
    2f8c:	90 91 2e 06 	lds	r25, 0x062E
    2f90:	82 17       	cp	r24, r18
    2f92:	93 07       	cpc	r25, r19
    2f94:	50 f0       	brcs	.+20     	; 0x2faa <sleepThread+0x28>
  if (!is_thread())
  {
    return ;
  }
  //this is insid the thread!
  current_thread->state = STATE_PRESLEEP;
    2f96:	e0 91 8c 05 	lds	r30, 0x058C
    2f9a:	f0 91 8d 05 	lds	r31, 0x058D
    2f9e:	84 e0       	ldi	r24, 0x04	; 4
    2fa0:	82 83       	std	Z+2, r24	; 0x02
  current_thread->data.sleepstate.sleeptime = milli;
    2fa2:	56 8f       	std	Z+30, r21	; 0x1e
    2fa4:	45 8f       	std	Z+29, r20	; 0x1d
  thread_yield();
    2fa6:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <thread_yield>
    2faa:	08 95       	ret

00002fac <break_point_function>:
void break_point_function() {
   int i;
   uint16_t index;
   index = 0;
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
      if ( current_thread == & ( thread_table[ i ] )) {
    2fac:	40 91 8c 05 	lds	r20, 0x058C
    2fb0:	50 91 8d 05 	lds	r21, 0x058D
    2fb4:	8e e8       	ldi	r24, 0x8E	; 142
    2fb6:	95 e0       	ldi	r25, 0x05	; 5
    2fb8:	e0 e0       	ldi	r30, 0x00	; 0
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	9f 01       	movw	r18, r30
    2fbe:	48 17       	cp	r20, r24
    2fc0:	59 07       	cpc	r21, r25
    2fc2:	39 f0       	breq	.+14     	; 0x2fd2 <break_point_function+0x26>
//-------------------------------------------------------------------------
void break_point_function() {
   int i;
   uint16_t index;
   index = 0;
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
    2fc4:	31 96       	adiw	r30, 0x01	; 1
    2fc6:	87 96       	adiw	r24, 0x27	; 39
    2fc8:	e4 30       	cpi	r30, 0x04	; 4
    2fca:	f1 05       	cpc	r31, r1
    2fcc:	b9 f7       	brne	.-18     	; 0x2fbc <break_point_function+0x10>
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
      if ( current_thread == & ( thread_table[ i ] )) {
         index = i;
         break;
      }
   }
   thread_table[ index ].state = STATE_BREAK;
    2fd2:	f9 01       	movw	r30, r18
    2fd4:	ee 0f       	add	r30, r30
    2fd6:	ff 1f       	adc	r31, r31
    2fd8:	ee 0f       	add	r30, r30
    2fda:	ff 1f       	adc	r31, r31
    2fdc:	ee 0f       	add	r30, r30
    2fde:	ff 1f       	adc	r31, r31
    2fe0:	cf 01       	movw	r24, r30
    2fe2:	88 0f       	add	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	e8 0f       	add	r30, r24
    2fec:	f9 1f       	adc	r31, r25
    2fee:	e2 1b       	sub	r30, r18
    2ff0:	f3 0b       	sbc	r31, r19
    2ff2:	e2 57       	subi	r30, 0x72	; 114
    2ff4:	fa 4f       	sbci	r31, 0xFA	; 250
    2ff6:	88 e0       	ldi	r24, 0x08	; 8
    2ff8:	82 83       	std	Z+2, r24	; 0x02
   thread_yield();
    2ffa:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <thread_yield>
   //asm volatile("ret"::); 
}
    2ffe:	08 95       	ret

00003000 <postNewThreadTask>:


//-------------------------------------------------------------------------
void postNewThreadTask()
{
  if (thread_task_active == 0)
    3000:	80 91 2a 06 	lds	r24, 0x062A
    3004:	81 11       	cpse	r24, r1
    3006:	08 95       	ret
  {
    postTask(thread_task, 2);
    3008:	89 e1       	ldi	r24, 0x19	; 25
    300a:	9a e1       	ldi	r25, 0x1A	; 26
    300c:	62 e0       	ldi	r22, 0x02	; 2
    300e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    thread_task_active = 1; 
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	80 93 2a 06 	sts	0x062A, r24
    3018:	08 95       	ret

0000301a <thread_wakeup>:
/* thread_wakeup
 * This routine wakes up a thread that was put to sleep.
 */
void thread_wakeup(uint8_t id)
{
  if (id >= LITE_MAX_THREADS)
    301a:	84 30       	cpi	r24, 0x04	; 4
    301c:	c8 f4       	brcc	.+50     	; 0x3050 <thread_wakeup+0x36>
  {
    return ;
  }
  if (thread_table[id].state == STATE_SLEEP)
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	9c 01       	movw	r18, r24
    3022:	22 0f       	add	r18, r18
    3024:	33 1f       	adc	r19, r19
    3026:	22 0f       	add	r18, r18
    3028:	33 1f       	adc	r19, r19
    302a:	22 0f       	add	r18, r18
    302c:	33 1f       	adc	r19, r19
    302e:	f9 01       	movw	r30, r18
    3030:	ee 0f       	add	r30, r30
    3032:	ff 1f       	adc	r31, r31
    3034:	ee 0f       	add	r30, r30
    3036:	ff 1f       	adc	r31, r31
    3038:	e2 0f       	add	r30, r18
    303a:	f3 1f       	adc	r31, r19
    303c:	e8 1b       	sub	r30, r24
    303e:	f9 0b       	sbc	r31, r25
    3040:	e2 57       	subi	r30, 0x72	; 114
    3042:	fa 4f       	sbci	r31, 0xFA	; 250
    3044:	82 81       	ldd	r24, Z+2	; 0x02
    3046:	85 30       	cpi	r24, 0x05	; 5
    3048:	69 f0       	breq	.+26     	; 0x3064 <thread_wakeup+0x4a>
  {
    thread_table[id].state = STATE_ACTIVE;
  }
  if (thread_task_active == 0)
    304a:	80 91 2a 06 	lds	r24, 0x062A
    304e:	81 11       	cpse	r24, r1
    3050:	08 95       	ret
  {
    postTask(thread_task, 2);
    3052:	89 e1       	ldi	r24, 0x19	; 25
    3054:	9a e1       	ldi	r25, 0x1A	; 26
    3056:	62 e0       	ldi	r22, 0x02	; 2
    3058:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    thread_task_active = 1; 
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	80 93 2a 06 	sts	0x062A, r24
    3062:	08 95       	ret
  {
    return ;
  }
  if (thread_table[id].state == STATE_SLEEP)
  {
    thread_table[id].state = STATE_ACTIVE;
    3064:	82 e0       	ldi	r24, 0x02	; 2
    3066:	82 83       	std	Z+2, r24	; 0x02
  }
  if (thread_task_active == 0)
    3068:	80 91 2a 06 	lds	r24, 0x062A
    306c:	88 23       	and	r24, r24
    306e:	81 f7       	brne	.-32     	; 0x3050 <thread_wakeup+0x36>
    3070:	f0 cf       	rjmp	.-32     	; 0x3052 <thread_wakeup+0x38>

00003072 <thread_get_next>:



//This function uses the remaining credits to find out the appropriate next thread and returns it 
inline int thread_get_next()
{
    3072:	0f 93       	push	r16
    3074:	1f 93       	push	r17
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
  int currentcandidate;
  _atomic_t currentatomic;

  currentcandidate =  - 1;
  credits =  - 1;
  currentatomic = _atomic_start();
    307a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    307e:	48 2f       	mov	r20, r24
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	cf ef       	ldi	r28, 0xFF	; 255
    3086:	df ef       	ldi	r29, 0xFF	; 255
    3088:	0f ef       	ldi	r16, 0xFF	; 255
    308a:	1f ef       	ldi	r17, 0xFF	; 255
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_ACTIVE)
    308c:	c9 01       	movw	r24, r18
    308e:	88 0f       	add	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	88 0f       	add	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	88 0f       	add	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	fc 01       	movw	r30, r24
    309c:	ee 0f       	add	r30, r30
    309e:	ff 1f       	adc	r31, r31
    30a0:	ee 0f       	add	r30, r30
    30a2:	ff 1f       	adc	r31, r31
    30a4:	e8 0f       	add	r30, r24
    30a6:	f9 1f       	adc	r31, r25
    30a8:	e2 1b       	sub	r30, r18
    30aa:	f3 0b       	sbc	r31, r19
    30ac:	e2 57       	subi	r30, 0x72	; 114
    30ae:	fa 4f       	sbci	r31, 0xFA	; 250
    30b0:	82 81       	ldd	r24, Z+2	; 0x02
    30b2:	82 30       	cpi	r24, 0x02	; 2
    30b4:	71 f1       	breq	.+92     	; 0x3112 <thread_get_next+0xa0>
  _atomic_t currentatomic;

  currentcandidate =  - 1;
  credits =  - 1;
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
    30b6:	2f 5f       	subi	r18, 0xFF	; 255
    30b8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ba:	24 30       	cpi	r18, 0x04	; 4
    30bc:	31 05       	cpc	r19, r1
    30be:	31 f7       	brne	.-52     	; 0x308c <thread_get_next+0x1a>
        credits = thread_table[i].remaincredits;
        currentcandidate = i;
      }
    }
  }
  if (credits < 0)
    30c0:	8f ef       	ldi	r24, 0xFF	; 255
    30c2:	cf 3f       	cpi	r28, 0xFF	; 255
    30c4:	d8 07       	cpc	r29, r24
    30c6:	09 f4       	brne	.+2      	; 0x30ca <thread_get_next+0x58>
    30c8:	61 c0       	rjmp	.+194    	; 0x318c <thread_get_next+0x11a>
  {
    thread_task_active = 0;
  }
  _atomic_end(currentatomic);
    30ca:	84 2f       	mov	r24, r20
    30cc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
  if (credits > 0)
    30d0:	cd 2b       	or	r28, r29
    30d2:	49 f1       	breq	.+82     	; 0x3126 <thread_get_next+0xb4>
  {
    currentatomic = _atomic_start();
    30d4:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    thread_table[currentcandidate].remaincredits--;
    30d8:	98 01       	movw	r18, r16
    30da:	22 0f       	add	r18, r18
    30dc:	33 1f       	adc	r19, r19
    30de:	22 0f       	add	r18, r18
    30e0:	33 1f       	adc	r19, r19
    30e2:	22 0f       	add	r18, r18
    30e4:	33 1f       	adc	r19, r19
    30e6:	f9 01       	movw	r30, r18
    30e8:	ee 0f       	add	r30, r30
    30ea:	ff 1f       	adc	r31, r31
    30ec:	ee 0f       	add	r30, r30
    30ee:	ff 1f       	adc	r31, r31
    30f0:	e2 0f       	add	r30, r18
    30f2:	f3 1f       	adc	r31, r19
    30f4:	e0 1b       	sub	r30, r16
    30f6:	f1 0b       	sbc	r31, r17
    30f8:	e2 57       	subi	r30, 0x72	; 114
    30fa:	fa 4f       	sbci	r31, 0xFA	; 250
    30fc:	94 81       	ldd	r25, Z+4	; 0x04
    30fe:	91 50       	subi	r25, 0x01	; 1
    3100:	94 83       	std	Z+4, r25	; 0x04
    _atomic_end(currentatomic);
    3102:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
  else if (credits < 0)
  {
    return  - 1;
  }
  return 0;
}
    3106:	c8 01       	movw	r24, r16
    3108:	df 91       	pop	r29
    310a:	cf 91       	pop	r28
    310c:	1f 91       	pop	r17
    310e:	0f 91       	pop	r16
    3110:	08 95       	ret
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_ACTIVE)
    {
      if (credits < thread_table[i].remaincredits)
    3112:	84 81       	ldd	r24, Z+4	; 0x04
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	c8 17       	cp	r28, r24
    3118:	d9 07       	cpc	r29, r25
    311a:	6c f6       	brge	.-102    	; 0x30b6 <thread_get_next+0x44>
      {
        credits = thread_table[i].remaincredits;
    311c:	84 81       	ldd	r24, Z+4	; 0x04
    311e:	c8 2f       	mov	r28, r24
    3120:	d0 e0       	ldi	r29, 0x00	; 0
    3122:	89 01       	movw	r16, r18
    3124:	c8 cf       	rjmp	.-112    	; 0x30b6 <thread_get_next+0x44>
    _atomic_end(currentatomic);
    return currentcandidate;
  }
  else if (credits == 0)
  {
    currentatomic = _atomic_start();
    3126:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    312a:	28 2f       	mov	r18, r24
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
    312c:	80 91 90 05 	lds	r24, 0x0590
    3130:	82 30       	cpi	r24, 0x02	; 2
    3132:	c9 f1       	breq	.+114    	; 0x31a6 <thread_get_next+0x134>
    3134:	80 91 b7 05 	lds	r24, 0x05B7
    3138:	82 30       	cpi	r24, 0x02	; 2
    313a:	e9 f1       	breq	.+122    	; 0x31b6 <thread_get_next+0x144>
    313c:	80 91 de 05 	lds	r24, 0x05DE
    3140:	82 30       	cpi	r24, 0x02	; 2
    3142:	09 f4       	brne	.+2      	; 0x3146 <thread_get_next+0xd4>
    3144:	41 c0       	rjmp	.+130    	; 0x31c8 <thread_get_next+0x156>
    3146:	80 91 05 06 	lds	r24, 0x0605
    314a:	82 30       	cpi	r24, 0x02	; 2
    314c:	09 f4       	brne	.+2      	; 0x3150 <thread_get_next+0xde>
    314e:	45 c0       	rjmp	.+138    	; 0x31da <thread_get_next+0x168>
      {
        thread_table[i].remaincredits = thread_table[i].priority;
      }
    }
    thread_table[currentcandidate].remaincredits--;
    3150:	c8 01       	movw	r24, r16
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	fc 01       	movw	r30, r24
    3160:	ee 0f       	add	r30, r30
    3162:	ff 1f       	adc	r31, r31
    3164:	ee 0f       	add	r30, r30
    3166:	ff 1f       	adc	r31, r31
    3168:	e8 0f       	add	r30, r24
    316a:	f9 1f       	adc	r31, r25
    316c:	e0 1b       	sub	r30, r16
    316e:	f1 0b       	sbc	r31, r17
    3170:	e2 57       	subi	r30, 0x72	; 114
    3172:	fa 4f       	sbci	r31, 0xFA	; 250
    3174:	84 81       	ldd	r24, Z+4	; 0x04
    3176:	81 50       	subi	r24, 0x01	; 1
    3178:	84 83       	std	Z+4, r24	; 0x04
    _atomic_end(currentatomic);
    317a:	82 2f       	mov	r24, r18
    317c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
  else if (credits < 0)
  {
    return  - 1;
  }
  return 0;
}
    3180:	c8 01       	movw	r24, r16
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	1f 91       	pop	r17
    3188:	0f 91       	pop	r16
    318a:	08 95       	ret
      }
    }
  }
  if (credits < 0)
  {
    thread_task_active = 0;
    318c:	10 92 2a 06 	sts	0x062A, r1
  }
  _atomic_end(currentatomic);
    3190:	84 2f       	mov	r24, r20
    3192:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    3196:	0f ef       	ldi	r16, 0xFF	; 255
    3198:	1f ef       	ldi	r17, 0xFF	; 255
  else if (credits < 0)
  {
    return  - 1;
  }
  return 0;
}
    319a:	c8 01       	movw	r24, r16
    319c:	df 91       	pop	r29
    319e:	cf 91       	pop	r28
    31a0:	1f 91       	pop	r17
    31a2:	0f 91       	pop	r16
    31a4:	08 95       	ret
    currentatomic = _atomic_start();
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
      {
        thread_table[i].remaincredits = thread_table[i].priority;
    31a6:	80 91 91 05 	lds	r24, 0x0591
    31aa:	80 93 92 05 	sts	0x0592, r24
  else if (credits == 0)
  {
    currentatomic = _atomic_start();
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
    31ae:	80 91 b7 05 	lds	r24, 0x05B7
    31b2:	82 30       	cpi	r24, 0x02	; 2
    31b4:	19 f6       	brne	.-122    	; 0x313c <thread_get_next+0xca>
      {
        thread_table[i].remaincredits = thread_table[i].priority;
    31b6:	80 91 b8 05 	lds	r24, 0x05B8
    31ba:	80 93 b9 05 	sts	0x05B9, r24
  else if (credits == 0)
  {
    currentatomic = _atomic_start();
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
    31be:	80 91 de 05 	lds	r24, 0x05DE
    31c2:	82 30       	cpi	r24, 0x02	; 2
    31c4:	09 f0       	breq	.+2      	; 0x31c8 <thread_get_next+0x156>
    31c6:	bf cf       	rjmp	.-130    	; 0x3146 <thread_get_next+0xd4>
      {
        thread_table[i].remaincredits = thread_table[i].priority;
    31c8:	80 91 df 05 	lds	r24, 0x05DF
    31cc:	80 93 e0 05 	sts	0x05E0, r24
  else if (credits == 0)
  {
    currentatomic = _atomic_start();
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
    31d0:	80 91 05 06 	lds	r24, 0x0605
    31d4:	82 30       	cpi	r24, 0x02	; 2
    31d6:	09 f0       	breq	.+2      	; 0x31da <thread_get_next+0x168>
    31d8:	bb cf       	rjmp	.-138    	; 0x3150 <thread_get_next+0xde>
      {
        thread_table[i].remaincredits = thread_table[i].priority;
    31da:	80 91 06 06 	lds	r24, 0x0606
    31de:	80 93 07 06 	sts	0x0607, r24
    31e2:	b6 cf       	rjmp	.-148    	; 0x3150 <thread_get_next+0xde>

000031e4 <destroy_user_thread>:
/* destroy_user_thread
 * This routine is only called when a users thread returns.
 * It removes it from the thread table.
 */
void destroy_user_thread()
{
    31e4:	1f 93       	push	r17
    31e6:	cf 93       	push	r28
    31e8:	df 93       	push	r29
  uint8_t *start,  *end;
  _atomic_t currentatomic;
  int indexofthread;

  currentatomic = _atomic_start();
    31ea:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    31ee:	18 2f       	mov	r17, r24
  current_thread->state = STATE_NULL;
    31f0:	e0 91 8c 05 	lds	r30, 0x058C
    31f4:	f0 91 8d 05 	lds	r31, 0x058D
    31f8:	12 82       	std	Z+2, r1	; 0x02
  start = (uint8_t*)current_thread->ramstart;
    31fa:	81 89       	ldd	r24, Z+17	; 0x11
    31fc:	92 89       	ldd	r25, Z+18	; 0x12
  end = (uint8_t*)current_thread->ramend;
    31fe:	63 89       	ldd	r22, Z+19	; 0x13
    3200:	74 89       	ldd	r23, Z+20	; 0x14
  deleteThreadRegistrationInReceiverHandles(start, end);
    3202:	0e 94 17 0a 	call	0x142e	; 0x142e <deleteThreadRegistrationInReceiverHandles>
  
  indexofthread = getThreadIndexAddress();
    3206:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
  
  
  if (thread_table[indexofthread].thread_clear_function != NULL)
    320a:	9c 01       	movw	r18, r24
    320c:	22 0f       	add	r18, r18
    320e:	33 1f       	adc	r19, r19
    3210:	22 0f       	add	r18, r18
    3212:	33 1f       	adc	r19, r19
    3214:	22 0f       	add	r18, r18
    3216:	33 1f       	adc	r19, r19
    3218:	e9 01       	movw	r28, r18
    321a:	cc 0f       	add	r28, r28
    321c:	dd 1f       	adc	r29, r29
    321e:	cc 0f       	add	r28, r28
    3220:	dd 1f       	adc	r29, r29
    3222:	c2 0f       	add	r28, r18
    3224:	d3 1f       	adc	r29, r19
    3226:	c8 1b       	sub	r28, r24
    3228:	d9 0b       	sbc	r29, r25
    322a:	c2 57       	subi	r28, 0x72	; 114
    322c:	da 4f       	sbci	r29, 0xFA	; 250
    322e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3230:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3232:	30 97       	sbiw	r30, 0x00	; 0
    3234:	19 f0       	breq	.+6      	; 0x323c <destroy_user_thread+0x58>
  {
    (*thread_table[indexofthread].thread_clear_function)();
    3236:	09 95       	icall
    thread_table[indexofthread].thread_clear_function = NULL;
    3238:	1c 8e       	std	Y+28, r1	; 0x1c
    323a:	1b 8e       	std	Y+27, r1	; 0x1b
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_THREADDESTROY
      addTrace(TRACE_THREADDESTROY, 100);
    #endif 
  #endif 
  thread_yield();
    323c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <thread_yield>
  _atomic_end(currentatomic);
    3240:	81 2f       	mov	r24, r17
    3242:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    3246:	df 91       	pop	r29
    3248:	cf 91       	pop	r28
    324a:	1f 91       	pop	r17
    324c:	08 95       	ret

0000324e <thread_func_dispatcher>:
// also make sure no functions are called with attributes
void thread_func_dispatcher()__attribute__((naked));
void thread_func_dispatcher()
{
  //    (*current_thread->data.tp)();
  call_fcn_ptr(current_thread->data.tp);
    324e:	e0 91 8c 05 	lds	r30, 0x058C
    3252:	f0 91 8d 05 	lds	r31, 0x058D
    3256:	85 8d       	ldd	r24, Z+29	; 0x1d
    3258:	96 8d       	ldd	r25, Z+30	; 0x1e
    325a:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <call_fcn_ptr>
  destroy_user_thread();
    325e:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <destroy_user_thread>

00003262 <create_thread>:


int create_thread(void(*fcn)(), uint16_t *ram_start, uint16_t *stack_ptr,
  uint16_t staticdatasize, uint8_t priority, char *threadName, uint16_t
  romstart, uint16_t romsize)
{
    3262:	2f 92       	push	r2
    3264:	3f 92       	push	r3
    3266:	4f 92       	push	r4
    3268:	5f 92       	push	r5
    326a:	6f 92       	push	r6
    326c:	7f 92       	push	r7
    326e:	8f 92       	push	r8
    3270:	9f 92       	push	r9
    3272:	af 92       	push	r10
    3274:	bf 92       	push	r11
    3276:	cf 92       	push	r12
    3278:	df 92       	push	r13
    327a:	ef 92       	push	r14
    327c:	ff 92       	push	r15
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	3c 01       	movw	r6, r24
    3288:	1b 01       	movw	r2, r22
    328a:	4a 01       	movw	r8, r20
    328c:	29 01       	movw	r4, r18
//--------------------------------------------------------------------------
//this is still working as it checks if the upperfound of threads are larger than the spvalue or not. 
uint8_t is_thread()
{
  uint16_t SPvalue;
  asm volatile("in %A0, 0x3d""\n\t""in %B0, 0x3e""\n\t": "=r"(SPvalue): );
    328e:	8d b7       	in	r24, 0x3d	; 61
    3290:	9e b7       	in	r25, 0x3e	; 62

  if (SPvalue > (uint16_t)maxthreadrambound)
    3292:	20 91 2d 06 	lds	r18, 0x062D
    3296:	30 91 2e 06 	lds	r19, 0x062E
    329a:	28 17       	cp	r18, r24
    329c:	39 07       	cpc	r19, r25
    329e:	f8 f4       	brcc	.+62     	; 0x32de <create_thread+0x7c>
  //we do not allow threads context to create new threads
  if (is_thread())
  {
    return (0);
  }
  if (stack_ptr > maxthreadrambound)
    32a0:	24 17       	cp	r18, r20
    32a2:	35 07       	cpc	r19, r21
    32a4:	90 f1       	brcs	.+100    	; 0x330a <create_thread+0xa8>
  {
    maxthreadrambound = stack_ptr;
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	30 e0       	ldi	r19, 0x00	; 0
  }
  //First loop all the way through the table and find an empty slot 
  //computation time for space here 
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_NULL)
    32aa:	c9 01       	movw	r24, r18
    32ac:	88 0f       	add	r24, r24
    32ae:	99 1f       	adc	r25, r25
    32b0:	88 0f       	add	r24, r24
    32b2:	99 1f       	adc	r25, r25
    32b4:	88 0f       	add	r24, r24
    32b6:	99 1f       	adc	r25, r25
    32b8:	ec 01       	movw	r28, r24
    32ba:	cc 0f       	add	r28, r28
    32bc:	dd 1f       	adc	r29, r29
    32be:	cc 0f       	add	r28, r28
    32c0:	dd 1f       	adc	r29, r29
    32c2:	c8 0f       	add	r28, r24
    32c4:	d9 1f       	adc	r29, r25
    32c6:	c2 1b       	sub	r28, r18
    32c8:	d3 0b       	sbc	r29, r19
    32ca:	c2 57       	subi	r28, 0x72	; 114
    32cc:	da 4f       	sbci	r29, 0xFA	; 250
    32ce:	8a 81       	ldd	r24, Y+2	; 0x02
    32d0:	88 23       	and	r24, r24
    32d2:	01 f1       	breq	.+64     	; 0x3314 <create_thread+0xb2>
  {
    maxthreadrambound = stack_ptr;
  }
  //First loop all the way through the table and find an empty slot 
  //computation time for space here 
  for (i = 0; i < LITE_MAX_THREADS; i++)
    32d4:	2f 5f       	subi	r18, 0xFF	; 255
    32d6:	3f 4f       	sbci	r19, 0xFF	; 255
    32d8:	24 30       	cpi	r18, 0x04	; 4
    32da:	31 05       	cpc	r19, r1
    32dc:	31 f7       	brne	.-52     	; 0x32aa <create_thread+0x48>
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_THREADCREATE
      addTrace(TRACE_THREADCREATE, 100);
    #endif 
  #endif 
  return (1);
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
}
    32e2:	c9 01       	movw	r24, r18
    32e4:	df 91       	pop	r29
    32e6:	cf 91       	pop	r28
    32e8:	1f 91       	pop	r17
    32ea:	0f 91       	pop	r16
    32ec:	ff 90       	pop	r15
    32ee:	ef 90       	pop	r14
    32f0:	df 90       	pop	r13
    32f2:	cf 90       	pop	r12
    32f4:	bf 90       	pop	r11
    32f6:	af 90       	pop	r10
    32f8:	9f 90       	pop	r9
    32fa:	8f 90       	pop	r8
    32fc:	7f 90       	pop	r7
    32fe:	6f 90       	pop	r6
    3300:	5f 90       	pop	r5
    3302:	4f 90       	pop	r4
    3304:	3f 90       	pop	r3
    3306:	2f 90       	pop	r2
    3308:	08 95       	ret
  {
    return (0);
  }
  if (stack_ptr > maxthreadrambound)
  {
    maxthreadrambound = stack_ptr;
    330a:	50 93 2e 06 	sts	0x062E, r21
    330e:	40 93 2d 06 	sts	0x062D, r20
    3312:	c9 cf       	rjmp	.-110    	; 0x32a6 <create_thread+0x44>
  if (i == LITE_MAX_THREADS)
  {
    return (0);
  }
  //Add the thread
  currentatomic = _atomic_start();
    3314:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3318:	18 2f       	mov	r17, r24
  //Populate the thread table
  current_thread = &thread_table[i];
    331a:	d0 93 8d 05 	sts	0x058D, r29
    331e:	c0 93 8c 05 	sts	0x058C, r28
  current_thread->sp = stack_ptr;
    3322:	99 82       	std	Y+1, r9	; 0x01
    3324:	88 82       	st	Y, r8
  current_thread->state = STATE_ACTIVE;
    3326:	82 e0       	ldi	r24, 0x02	; 2
    3328:	8a 83       	std	Y+2, r24	; 0x02
  current_thread->data.tp = fcn;
    332a:	7e 8e       	std	Y+30, r7	; 0x1e
    332c:	6d 8e       	std	Y+29, r6	; 0x1d
  current_thread->priority = priority;
    332e:	0b 83       	std	Y+3, r16	; 0x03
  current_thread->remaincredits = priority;
    3330:	0c 83       	std	Y+4, r16	; 0x04
  current_thread->ramstart = ram_start;
    3332:	3a 8a       	std	Y+18, r3	; 0x12
    3334:	29 8a       	std	Y+17, r2	; 0x11
  current_thread->ramend = stack_ptr;
    3336:	9c 8a       	std	Y+20, r9	; 0x14
    3338:	8b 8a       	std	Y+19, r8	; 0x13
  current_thread->thread_clear_function = NULL; 
    333a:	1c 8e       	std	Y+28, r1	; 0x1c
    333c:	1b 8e       	std	Y+27, r1	; 0x1b

  //if the thread is created by the kernel directly, then the following are all 0. 
  current_thread->sizeofBss = staticdatasize;
    333e:	5e 8a       	std	Y+22, r5	; 0x16
    3340:	4d 8a       	std	Y+21, r4	; 0x15
  current_thread->romstart = romstart;
    3342:	d8 8e       	std	Y+24, r13	; 0x18
    3344:	cf 8a       	std	Y+23, r12	; 0x17
  current_thread->romsize = romsize;
    3346:	ba 8e       	std	Y+26, r11	; 0x1a
    3348:	a9 8e       	std	Y+25, r10	; 0x19

 //COPY file name 
  {
    uint8_t templen;

    templen = mystrlen(threadName);
    334a:	c7 01       	movw	r24, r14
    334c:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    mystrncpy((char*)current_thread->threadName, (char*)threadName, templen + 1)
    3350:	20 91 8c 05 	lds	r18, 0x058C
    3354:	30 91 8d 05 	lds	r19, 0x058D
    3358:	48 2f       	mov	r20, r24
    335a:	4f 5f       	subi	r20, 0xFF	; 255
    335c:	c9 01       	movw	r24, r18
    335e:	05 96       	adiw	r24, 0x05	; 5
    3360:	b7 01       	movw	r22, r14
    3362:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
      ;
  }
  
  //set up the corruption detection 
  
  kernelptr = (uint16_t*)((uint8_t*)ram_start + staticdatasize);
    3366:	f1 01       	movw	r30, r2
    3368:	e4 0d       	add	r30, r4
    336a:	f5 1d       	adc	r31, r5
  *kernelptr = 0xeeff;
    336c:	8f ef       	ldi	r24, 0xFF	; 255
    336e:	9e ee       	ldi	r25, 0xEE	; 238
    3370:	91 83       	std	Z+1, r25	; 0x01
    3372:	80 83       	st	Z, r24
  *(kernelptr + 1) = 0xeeff;
    3374:	93 83       	std	Z+3, r25	; 0x03
    3376:	82 83       	std	Z+2, r24	; 0x02
  
  #ifdef PLATFORM_AVR
    //Prepare the fcn pointer on the new stack, so it can be 
    //prepare set the beginning as the function then registers as 0. 
    PREPARE_REG_FOR_STACK();
    3378:	8d b7       	in	r24, 0x3d	; 61
    337a:	9e b7       	in	r25, 0x3e	; 62
    337c:	90 93 8b 05 	sts	0x058B, r25
    3380:	80 93 8a 05 	sts	0x058A, r24
    3384:	e0 91 8c 05 	lds	r30, 0x058C
    3388:	f0 91 8d 05 	lds	r31, 0x058D
    338c:	80 81       	ld	r24, Z
    338e:	91 81       	ldd	r25, Z+1	; 0x01
    3390:	9e bf       	out	0x3e, r25	; 62
    3392:	8d bf       	out	0x3d, r24	; 61
    3394:	87 e2       	ldi	r24, 0x27	; 39
    3396:	99 e1       	ldi	r25, 0x19	; 25
    3398:	8f 93       	push	r24
    339a:	9f 93       	push	r25
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	1f 92       	push	r1
    33a2:	01 96       	adiw	r24, 0x01	; 1
    33a4:	82 32       	cpi	r24, 0x22	; 34
    33a6:	91 05       	cpc	r25, r1
    33a8:	d9 f7       	brne	.-10     	; 0x33a0 <create_thread+0x13e>
    33aa:	8d b7       	in	r24, 0x3d	; 61
    33ac:	9e b7       	in	r25, 0x3e	; 62
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	80 83       	st	Z, r24
    33b2:	80 91 8a 05 	lds	r24, 0x058A
    33b6:	90 91 8b 05 	lds	r25, 0x058B
    33ba:	9e bf       	out	0x3e, r25	; 62
    33bc:	8d bf       	out	0x3d, r24	; 61
  #endif 
  
  
  current_thread = 0;
    33be:	10 92 8d 05 	sts	0x058D, r1
    33c2:	10 92 8c 05 	sts	0x058C, r1
  if (!thread_task_active)
    33c6:	80 91 2a 06 	lds	r24, 0x062A
    33ca:	88 23       	and	r24, r24
    33cc:	31 f0       	breq	.+12     	; 0x33da <create_thread+0x178>
  {
    postTask(thread_task, 2);
    thread_task_active = 1;
  }
  _atomic_end(currentatomic);
    33ce:	81 2f       	mov	r24, r17
    33d0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    33d4:	21 e0       	ldi	r18, 0x01	; 1
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	84 cf       	rjmp	.-248    	; 0x32e2 <create_thread+0x80>
  
  
  current_thread = 0;
  if (!thread_task_active)
  {
    postTask(thread_task, 2);
    33da:	89 e1       	ldi	r24, 0x19	; 25
    33dc:	9a e1       	ldi	r25, 0x1A	; 26
    33de:	62 e0       	ldi	r22, 0x02	; 2
    33e0:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    thread_task_active = 1;
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	80 93 2a 06 	sts	0x062A, r24
    33ea:	f1 cf       	rjmp	.-30     	; 0x33ce <create_thread+0x16c>

000033ec <thread_init>:
 


//-------------------------------------------------------------------------
void thread_init()
{
    33ec:	1f 93       	push	r17
 
  _atomic_t currentatomic;

  currentatomic = _atomic_start();
    33ee:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    33f2:	18 2f       	mov	r17, r24
  
  //initilize the thread table
  nmemset(thread_table, 0, sizeof(thread) *LITE_MAX_THREADS);
    33f4:	8e e8       	ldi	r24, 0x8E	; 142
    33f6:	95 e0       	ldi	r25, 0x05	; 5
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	70 e0       	ldi	r23, 0x00	; 0
    33fc:	4c e9       	ldi	r20, 0x9C	; 156
    33fe:	50 e0       	ldi	r21, 0x00	; 0
    3400:	0e 94 85 3c 	call	0x790a	; 0x790a <nmemset>
    
  //init all the variables 
  current_thread = 0;
    3404:	10 92 8d 05 	sts	0x058D, r1
    3408:	10 92 8c 05 	sts	0x058C, r1
  old_stack_ptr = 0;
    340c:	10 92 8b 05 	sts	0x058B, r1
    3410:	10 92 8a 05 	sts	0x058A, r1
  stackinterrupt_ptr = 0;
    3414:	10 92 2c 06 	sts	0x062C, r1
    3418:	10 92 2b 06 	sts	0x062B, r1
  thread_task_active = 0;
    341c:	10 92 2a 06 	sts	0x062A, r1
  maxthreadrambound = 0;
    3420:	10 92 2e 06 	sts	0x062E, r1
    3424:	10 92 2d 06 	sts	0x062D, r1
  _atomic_end(currentatomic);
    3428:	81 2f       	mov	r24, r17
    342a:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
  //    TimerM_Timer_start(9, TIMER_REPEAT, 1000);
}
    342e:	1f 91       	pop	r17
    3430:	08 95       	ret

00003432 <thread_task>:



//-------------------------------------------------------------------------
void thread_task()
{
    3432:	df 92       	push	r13
    3434:	ef 92       	push	r14
    3436:	ff 92       	push	r15
    3438:	0f 93       	push	r16
    343a:	1f 93       	push	r17
    343c:	cf 93       	push	r28
    343e:	df 93       	push	r29
  int i;
  uint8_t thread_presleep;
  _atomic_t currentatomic;
   

  currentatomic = _atomic_start();
    3440:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3444:	d8 2e       	mov	r13, r24
    3446:	00 e0       	ldi	r16, 0x00	; 0
    3448:	10 e0       	ldi	r17, 0x00	; 0
  thread_presleep = 0;

  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_PRESLEEP)
    344a:	c8 01       	movw	r24, r16
    344c:	88 0f       	add	r24, r24
    344e:	99 1f       	adc	r25, r25
    3450:	88 0f       	add	r24, r24
    3452:	99 1f       	adc	r25, r25
    3454:	88 0f       	add	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	ec 01       	movw	r28, r24
    345a:	cc 0f       	add	r28, r28
    345c:	dd 1f       	adc	r29, r29
    345e:	cc 0f       	add	r28, r28
    3460:	dd 1f       	adc	r29, r29
    3462:	c8 0f       	add	r28, r24
    3464:	d9 1f       	adc	r29, r25
    3466:	c0 1b       	sub	r28, r16
    3468:	d1 0b       	sbc	r29, r17
    346a:	c2 57       	subi	r28, 0x72	; 114
    346c:	da 4f       	sbci	r29, 0xFA	; 250
    346e:	f2 e0       	ldi	r31, 0x02	; 2
    3470:	ef 2e       	mov	r14, r31
    3472:	f1 2c       	mov	r15, r1
    3474:	ec 0e       	add	r14, r28
    3476:	fd 1e       	adc	r15, r29
    3478:	8a 81       	ldd	r24, Y+2	; 0x02
    347a:	84 30       	cpi	r24, 0x04	; 4
    347c:	09 f4       	brne	.+2      	; 0x3480 <thread_task+0x4e>
    347e:	bd c0       	rjmp	.+378    	; 0x35fa <thread_task+0x1c8>
   

  currentatomic = _atomic_start();
  thread_presleep = 0;

  for (i = 0; i < LITE_MAX_THREADS; i++)
    3480:	0f 5f       	subi	r16, 0xFF	; 255
    3482:	1f 4f       	sbci	r17, 0xFF	; 255
    3484:	04 30       	cpi	r16, 0x04	; 4
    3486:	11 05       	cpc	r17, r1
    3488:	01 f7       	brne	.-64     	; 0x344a <thread_task+0x18>
    
    thread_presleep = 0;
    return ;
  }
  
  _atomic_end(currentatomic);
    348a:	8d 2d       	mov	r24, r13
    348c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
  int currentcandidate;
  _atomic_t currentatomic;

  currentcandidate =  - 1;
  credits =  - 1;
  currentatomic = _atomic_start();
    3490:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3494:	48 2f       	mov	r20, r24
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	cf ef       	ldi	r28, 0xFF	; 255
    349c:	df ef       	ldi	r29, 0xFF	; 255
    349e:	0f ef       	ldi	r16, 0xFF	; 255
    34a0:	1f ef       	ldi	r17, 0xFF	; 255
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_ACTIVE)
    34a2:	c9 01       	movw	r24, r18
    34a4:	88 0f       	add	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	88 0f       	add	r24, r24
    34aa:	99 1f       	adc	r25, r25
    34ac:	88 0f       	add	r24, r24
    34ae:	99 1f       	adc	r25, r25
    34b0:	fc 01       	movw	r30, r24
    34b2:	ee 0f       	add	r30, r30
    34b4:	ff 1f       	adc	r31, r31
    34b6:	ee 0f       	add	r30, r30
    34b8:	ff 1f       	adc	r31, r31
    34ba:	e8 0f       	add	r30, r24
    34bc:	f9 1f       	adc	r31, r25
    34be:	e2 1b       	sub	r30, r18
    34c0:	f3 0b       	sbc	r31, r19
    34c2:	e2 57       	subi	r30, 0x72	; 114
    34c4:	fa 4f       	sbci	r31, 0xFA	; 250
    34c6:	82 81       	ldd	r24, Z+2	; 0x02
    34c8:	82 30       	cpi	r24, 0x02	; 2
    34ca:	09 f4       	brne	.+2      	; 0x34ce <thread_task+0x9c>
    34cc:	5b c0       	rjmp	.+182    	; 0x3584 <thread_task+0x152>
  _atomic_t currentatomic;

  currentcandidate =  - 1;
  credits =  - 1;
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
    34ce:	2f 5f       	subi	r18, 0xFF	; 255
    34d0:	3f 4f       	sbci	r19, 0xFF	; 255
    34d2:	24 30       	cpi	r18, 0x04	; 4
    34d4:	31 05       	cpc	r19, r1
    34d6:	29 f7       	brne	.-54     	; 0x34a2 <thread_task+0x70>
        credits = thread_table[i].remaincredits;
        currentcandidate = i;
      }
    }
  }
  if (credits < 0)
    34d8:	ff ef       	ldi	r31, 0xFF	; 255
    34da:	cf 3f       	cpi	r28, 0xFF	; 255
    34dc:	df 07       	cpc	r29, r31
    34de:	09 f4       	brne	.+2      	; 0x34e2 <thread_task+0xb0>
    34e0:	a7 c0       	rjmp	.+334    	; 0x3630 <thread_task+0x1fe>
  {
    thread_task_active = 0;
  }
  _atomic_end(currentatomic);
    34e2:	84 2f       	mov	r24, r20
    34e4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
  if (credits > 0)
    34e8:	cd 2b       	or	r28, r29
    34ea:	09 f4       	brne	.+2      	; 0x34ee <thread_task+0xbc>
    34ec:	56 c0       	rjmp	.+172    	; 0x359a <thread_task+0x168>
  {
    currentatomic = _atomic_start();
    34ee:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    thread_table[currentcandidate].remaincredits--;
    34f2:	98 01       	movw	r18, r16
    34f4:	22 0f       	add	r18, r18
    34f6:	33 1f       	adc	r19, r19
    34f8:	22 0f       	add	r18, r18
    34fa:	33 1f       	adc	r19, r19
    34fc:	22 0f       	add	r18, r18
    34fe:	33 1f       	adc	r19, r19
    3500:	f9 01       	movw	r30, r18
    3502:	ee 0f       	add	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	ee 0f       	add	r30, r30
    3508:	ff 1f       	adc	r31, r31
    350a:	e2 0f       	add	r30, r18
    350c:	f3 1f       	adc	r31, r19
    350e:	e0 1b       	sub	r30, r16
    3510:	f1 0b       	sbc	r31, r17
    3512:	e2 57       	subi	r30, 0x72	; 114
    3514:	fa 4f       	sbci	r31, 0xFA	; 250
    3516:	94 81       	ldd	r25, Z+4	; 0x04
    3518:	91 50       	subi	r25, 0x01	; 1
    351a:	94 83       	std	Z+4, r25	; 0x04
    _atomic_end(currentatomic);
    351c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
  }
  
  _atomic_end(currentatomic);
  
  i = thread_get_next();
  if (i < 0)
    3520:	8f ef       	ldi	r24, 0xFF	; 255
    3522:	0f 3f       	cpi	r16, 0xFF	; 255
    3524:	18 07       	cpc	r17, r24
    3526:	31 f1       	breq	.+76     	; 0x3574 <thread_task+0x142>
  {
    //here is the exit      
    return ;
  }
  postTask(thread_task, 3);
    3528:	89 e1       	ldi	r24, 0x19	; 25
    352a:	9a e1       	ldi	r25, 0x1A	; 26
    352c:	63 e0       	ldi	r22, 0x03	; 3
    352e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
  
  i = check_for_memory_corrupt(i);
    3532:	c8 01       	movw	r24, r16
    3534:	0e 94 99 1b 	call	0x3732	; 0x3732 <check_for_memory_corrupt>
    3538:	ac 01       	movw	r20, r24
  if (i < 0)
    353a:	97 fd       	sbrc	r25, 7
    353c:	1b c0       	rjmp	.+54     	; 0x3574 <thread_task+0x142>
  if (nextwriteaddr == 3001)
   nextwriteaddr = 2701; 
  write8uint(nextwriteaddr, 0xFF); 
   */

  current_thread = &(thread_table[i]);
    353e:	88 0f       	add	r24, r24
    3540:	99 1f       	adc	r25, r25
    3542:	88 0f       	add	r24, r24
    3544:	99 1f       	adc	r25, r25
    3546:	88 0f       	add	r24, r24
    3548:	99 1f       	adc	r25, r25
    354a:	9c 01       	movw	r18, r24
    354c:	22 0f       	add	r18, r18
    354e:	33 1f       	adc	r19, r19
    3550:	22 0f       	add	r18, r18
    3552:	33 1f       	adc	r19, r19
    3554:	82 0f       	add	r24, r18
    3556:	93 1f       	adc	r25, r19
    3558:	84 1b       	sub	r24, r20
    355a:	95 0b       	sbc	r25, r21
    355c:	82 57       	subi	r24, 0x72	; 114
    355e:	9a 4f       	sbci	r25, 0xFA	; 250
    3560:	90 93 8d 05 	sts	0x058D, r25
    3564:	80 93 8c 05 	sts	0x058C, r24
  
  //printfintegeru32(i);
  //printfstr(" thread index\n");
  
  lite_switch_to_user_thread();    
    3568:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <lite_switch_to_user_thread>
 
  //printfstr("now switching out\n");
 
  current_thread = 0;
    356c:	10 92 8d 05 	sts	0x058D, r1
    3570:	10 92 8c 05 	sts	0x058C, r1
  
  
  return ;
}
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	1f 91       	pop	r17
    357a:	0f 91       	pop	r16
    357c:	ff 90       	pop	r15
    357e:	ef 90       	pop	r14
    3580:	df 90       	pop	r13
    3582:	08 95       	ret
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_ACTIVE)
    {
      if (credits < thread_table[i].remaincredits)
    3584:	84 81       	ldd	r24, Z+4	; 0x04
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	c8 17       	cp	r28, r24
    358a:	d9 07       	cpc	r29, r25
    358c:	0c f0       	brlt	.+2      	; 0x3590 <thread_task+0x15e>
    358e:	9f cf       	rjmp	.-194    	; 0x34ce <thread_task+0x9c>
      {
        credits = thread_table[i].remaincredits;
    3590:	84 81       	ldd	r24, Z+4	; 0x04
    3592:	c8 2f       	mov	r28, r24
    3594:	d0 e0       	ldi	r29, 0x00	; 0
    3596:	89 01       	movw	r16, r18
    3598:	9a cf       	rjmp	.-204    	; 0x34ce <thread_task+0x9c>
    _atomic_end(currentatomic);
    return currentcandidate;
  }
  else if (credits == 0)
  {
    currentatomic = _atomic_start();
    359a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    359e:	28 2f       	mov	r18, r24
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
    35a0:	80 91 90 05 	lds	r24, 0x0590
    35a4:	82 30       	cpi	r24, 0x02	; 2
    35a6:	09 f4       	brne	.+2      	; 0x35aa <thread_task+0x178>
    35a8:	5f c0       	rjmp	.+190    	; 0x3668 <thread_task+0x236>
    35aa:	80 91 b7 05 	lds	r24, 0x05B7
    35ae:	82 30       	cpi	r24, 0x02	; 2
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <thread_task+0x182>
    35b2:	55 c0       	rjmp	.+170    	; 0x365e <thread_task+0x22c>
    35b4:	80 91 de 05 	lds	r24, 0x05DE
    35b8:	82 30       	cpi	r24, 0x02	; 2
    35ba:	09 f4       	brne	.+2      	; 0x35be <thread_task+0x18c>
    35bc:	4b c0       	rjmp	.+150    	; 0x3654 <thread_task+0x222>
    35be:	80 91 05 06 	lds	r24, 0x0605
    35c2:	82 30       	cpi	r24, 0x02	; 2
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <thread_task+0x196>
    35c6:	41 c0       	rjmp	.+130    	; 0x364a <thread_task+0x218>
      {
        thread_table[i].remaincredits = thread_table[i].priority;
      }
    }
    thread_table[currentcandidate].remaincredits--;
    35c8:	c8 01       	movw	r24, r16
    35ca:	88 0f       	add	r24, r24
    35cc:	99 1f       	adc	r25, r25
    35ce:	88 0f       	add	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	88 0f       	add	r24, r24
    35d4:	99 1f       	adc	r25, r25
    35d6:	fc 01       	movw	r30, r24
    35d8:	ee 0f       	add	r30, r30
    35da:	ff 1f       	adc	r31, r31
    35dc:	ee 0f       	add	r30, r30
    35de:	ff 1f       	adc	r31, r31
    35e0:	e8 0f       	add	r30, r24
    35e2:	f9 1f       	adc	r31, r25
    35e4:	e0 1b       	sub	r30, r16
    35e6:	f1 0b       	sbc	r31, r17
    35e8:	e2 57       	subi	r30, 0x72	; 114
    35ea:	fa 4f       	sbci	r31, 0xFA	; 250
    35ec:	84 81       	ldd	r24, Z+4	; 0x04
    35ee:	81 50       	subi	r24, 0x01	; 1
    35f0:	84 83       	std	Z+4, r24	; 0x04
    _atomic_end(currentatomic);
    35f2:	82 2f       	mov	r24, r18
    35f4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    35f8:	93 cf       	rjmp	.-218    	; 0x3520 <thread_task+0xee>
  }
  thread_presleep = (i != LITE_MAX_THREADS);

  if (thread_presleep)
  {
    postTask(thread_task, 3);
    35fa:	89 e1       	ldi	r24, 0x19	; 25
    35fc:	9a e1       	ldi	r25, 0x1A	; 26
    35fe:	63 e0       	ldi	r22, 0x03	; 3
    3600:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    
    thread_table[i].state = STATE_SLEEP;
    3604:	85 e0       	ldi	r24, 0x05	; 5
    3606:	f7 01       	movw	r30, r14
    3608:	80 83       	st	Z, r24
    
    _atomic_end(currentatomic);
    360a:	8d 2d       	mov	r24, r13
    360c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    // TimerM_Timer_start( i, TIMER_ONE_SHOT, thread_table[ i ].data.sleepstate.sleeptime );
    GenericTimerStart(i, TIMER_ONE_SHOT,
    3610:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3612:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3614:	40 e0       	ldi	r20, 0x00	; 0
    3616:	50 e0       	ldi	r21, 0x00	; 0
    3618:	80 2f       	mov	r24, r16
    361a:	61 e0       	ldi	r22, 0x01	; 1
    361c:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <GenericTimerStart>
 
  current_thread = 0;
  
  
  return ;
}
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
    3628:	ff 90       	pop	r15
    362a:	ef 90       	pop	r14
    362c:	df 90       	pop	r13
    362e:	08 95       	ret
      }
    }
  }
  if (credits < 0)
  {
    thread_task_active = 0;
    3630:	10 92 2a 06 	sts	0x062A, r1
  }
  _atomic_end(currentatomic);
    3634:	84 2f       	mov	r24, r20
    3636:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
 
  current_thread = 0;
  
  
  return ;
}
    363a:	df 91       	pop	r29
    363c:	cf 91       	pop	r28
    363e:	1f 91       	pop	r17
    3640:	0f 91       	pop	r16
    3642:	ff 90       	pop	r15
    3644:	ef 90       	pop	r14
    3646:	df 90       	pop	r13
    3648:	08 95       	ret
    currentatomic = _atomic_start();
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
      {
        thread_table[i].remaincredits = thread_table[i].priority;
    364a:	80 91 06 06 	lds	r24, 0x0606
    364e:	80 93 07 06 	sts	0x0607, r24
    3652:	ba cf       	rjmp	.-140    	; 0x35c8 <thread_task+0x196>
    3654:	80 91 df 05 	lds	r24, 0x05DF
    3658:	80 93 e0 05 	sts	0x05E0, r24
    365c:	b0 cf       	rjmp	.-160    	; 0x35be <thread_task+0x18c>
    365e:	80 91 b8 05 	lds	r24, 0x05B8
    3662:	80 93 b9 05 	sts	0x05B9, r24
    3666:	a6 cf       	rjmp	.-180    	; 0x35b4 <thread_task+0x182>
    3668:	80 91 91 05 	lds	r24, 0x0591
    366c:	80 93 92 05 	sts	0x0592, r24
    3670:	9c cf       	rjmp	.-200    	; 0x35aa <thread_task+0x178>

00003672 <memory_conflict_detect>:


//-------------------------------------------------------------------------
uint8_t memory_conflict_detect(uint16_t createflashromstart, uint16_t
  createflashromsize, uint16_t ramstackstart, uint16_t ramstackend)
{
    3672:	af 92       	push	r10
    3674:	bf 92       	push	r11
    3676:	cf 92       	push	r12
    3678:	df 92       	push	r13
    367a:	ef 92       	push	r14
    367c:	ff 92       	push	r15
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	7c 01       	movw	r14, r24
    3688:	8b 01       	movw	r16, r22
    368a:	6a 01       	movw	r12, r20
    368c:	59 01       	movw	r10, r18
      }
      userthreadromstart = thread_table[i].romstart;
      userthreadromend = thread_table[i].romsize / 2+userthreadromstart;
      userthreadramstart = (uint16_t)thread_table[i].ramstart;
      userthreadramend = (uint16_t)thread_table[i].ramend;
      if (!((createflashromstart > userthreadromend + 2) || 
    368e:	16 95       	lsr	r17
    3690:	07 95       	ror	r16
    3692:	08 0f       	add	r16, r24
    3694:	19 1f       	adc	r17, r25
    3696:	cf e9       	ldi	r28, 0x9F	; 159
    3698:	d5 e0       	ldi	r29, 0x05	; 5
    369a:	a0 e0       	ldi	r26, 0x00	; 0
    369c:	b0 e0       	ldi	r27, 0x00	; 0
  uint16_t userthreadramstart;
  uint16_t userthreadramend;

  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state != STATE_NULL)
    369e:	fd 01       	movw	r30, r26
    36a0:	ee 0f       	add	r30, r30
    36a2:	ff 1f       	adc	r31, r31
    36a4:	ee 0f       	add	r30, r30
    36a6:	ff 1f       	adc	r31, r31
    36a8:	ee 0f       	add	r30, r30
    36aa:	ff 1f       	adc	r31, r31
    36ac:	cf 01       	movw	r24, r30
    36ae:	88 0f       	add	r24, r24
    36b0:	99 1f       	adc	r25, r25
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	e8 0f       	add	r30, r24
    36b8:	f9 1f       	adc	r31, r25
    36ba:	ea 1b       	sub	r30, r26
    36bc:	fb 0b       	sbc	r31, r27
    36be:	e2 57       	subi	r30, 0x72	; 114
    36c0:	fa 4f       	sbci	r31, 0xFA	; 250
    36c2:	82 81       	ldd	r24, Z+2	; 0x02
    36c4:	88 23       	and	r24, r24
    36c6:	11 f1       	breq	.+68     	; 0x370c <memory_conflict_detect+0x9a>
    {
      if (thread_table[i].romstart == 0)
    36c8:	ee 81       	ldd	r30, Y+6	; 0x06
    36ca:	ff 81       	ldd	r31, Y+7	; 0x07
    36cc:	30 97       	sbiw	r30, 0x00	; 0
    36ce:	f1 f0       	breq	.+60     	; 0x370c <memory_conflict_detect+0x9a>
      {
        continue;
      }
      userthreadromstart = thread_table[i].romstart;
      userthreadromend = thread_table[i].romsize / 2+userthreadromstart;
      userthreadramstart = (uint16_t)thread_table[i].ramstart;
    36d0:	68 81       	ld	r22, Y
    36d2:	79 81       	ldd	r23, Y+1	; 0x01
      userthreadramend = (uint16_t)thread_table[i].ramend;
    36d4:	4a 81       	ldd	r20, Y+2	; 0x02
    36d6:	5b 81       	ldd	r21, Y+3	; 0x03
      if (!((createflashromstart > userthreadromend + 2) || 
    36d8:	9f 01       	movw	r18, r30
    36da:	2e 5f       	subi	r18, 0xFE	; 254
    36dc:	3f 4f       	sbci	r19, 0xFF	; 255
    36de:	88 85       	ldd	r24, Y+8	; 0x08
    36e0:	99 85       	ldd	r25, Y+9	; 0x09
    36e2:	96 95       	lsr	r25
    36e4:	87 95       	ror	r24
    36e6:	28 0f       	add	r18, r24
    36e8:	39 1f       	adc	r19, r25
    36ea:	2e 15       	cp	r18, r14
    36ec:	3f 05       	cpc	r19, r15
    36ee:	20 f0       	brcs	.+8      	; 0x36f8 <memory_conflict_detect+0x86>
    36f0:	32 97       	sbiw	r30, 0x02	; 2
    36f2:	0e 17       	cp	r16, r30
    36f4:	1f 07       	cpc	r17, r31
    36f6:	d8 f4       	brcc	.+54     	; 0x372e <memory_conflict_detect+0xbc>
        (createflashromstart + createflashromsize / 2 < userthreadromstart - 2))
        )
      {
        return 1;
      }
      if (!((ramstackstart > userthreadramend + 1) || (ramstackend <
    36f8:	4f 5f       	subi	r20, 0xFF	; 255
    36fa:	5f 4f       	sbci	r21, 0xFF	; 255
    36fc:	4c 15       	cp	r20, r12
    36fe:	5d 05       	cpc	r21, r13
    3700:	28 f0       	brcs	.+10     	; 0x370c <memory_conflict_detect+0x9a>
    3702:	61 50       	subi	r22, 0x01	; 1
    3704:	70 40       	sbci	r23, 0x00	; 0
    3706:	a6 16       	cp	r10, r22
    3708:	b7 06       	cpc	r11, r23
    370a:	88 f4       	brcc	.+34     	; 0x372e <memory_conflict_detect+0xbc>
    370c:	11 96       	adiw	r26, 0x01	; 1
    370e:	a7 96       	adiw	r28, 0x27	; 39
  uint16_t userthreadromstart;
  uint16_t userthreadromend;
  uint16_t userthreadramstart;
  uint16_t userthreadramend;

  for (i = 0; i < LITE_MAX_THREADS; i++)
    3710:	a4 30       	cpi	r26, 0x04	; 4
    3712:	b1 05       	cpc	r27, r1
    3714:	21 f6       	brne	.-120    	; 0x369e <memory_conflict_detect+0x2c>
    3716:	80 e0       	ldi	r24, 0x00	; 0
        return 1;
      }
    }
  }
  return 0;
}
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	df 90       	pop	r13
    3726:	cf 90       	pop	r12
    3728:	bf 90       	pop	r11
    372a:	af 90       	pop	r10
    372c:	08 95       	ret
  uint16_t userthreadromstart;
  uint16_t userthreadromend;
  uint16_t userthreadramstart;
  uint16_t userthreadramend;

  for (i = 0; i < LITE_MAX_THREADS; i++)
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	f3 cf       	rjmp	.-26     	; 0x3718 <memory_conflict_detect+0xa6>

00003732 <check_for_memory_corrupt>:


/* thread_task
 */
int check_for_memory_corrupt(int i)
{
    3732:	9c 01       	movw	r18, r24
  uint16_t sizeofBss;

  ram_start = thread_table[i].ramstart;
  ram_end = thread_table[i].ramend;
  sizeofBss = thread_table[i].sizeofBss;
  kernelptr = (uint16_t*)((uint8_t*)ram_start + sizeofBss);
    3734:	ac 01       	movw	r20, r24
    3736:	44 0f       	add	r20, r20
    3738:	55 1f       	adc	r21, r21
    373a:	44 0f       	add	r20, r20
    373c:	55 1f       	adc	r21, r21
    373e:	44 0f       	add	r20, r20
    3740:	55 1f       	adc	r21, r21
    3742:	fa 01       	movw	r30, r20
    3744:	ee 0f       	add	r30, r30
    3746:	ff 1f       	adc	r31, r31
    3748:	ee 0f       	add	r30, r30
    374a:	ff 1f       	adc	r31, r31
    374c:	e4 0f       	add	r30, r20
    374e:	f5 1f       	adc	r31, r21
    3750:	e8 1b       	sub	r30, r24
    3752:	f9 0b       	sbc	r31, r25
    3754:	e2 57       	subi	r30, 0x72	; 114
    3756:	fa 4f       	sbci	r31, 0xFA	; 250
    3758:	a1 89       	ldd	r26, Z+17	; 0x11
    375a:	b2 89       	ldd	r27, Z+18	; 0x12
    375c:	85 89       	ldd	r24, Z+21	; 0x15
    375e:	96 89       	ldd	r25, Z+22	; 0x16
    3760:	a8 0f       	add	r26, r24
    3762:	b9 1f       	adc	r27, r25
  if ((*kernelptr != 0xeeff) || (*(kernelptr + 1) != 0xeeff))
    3764:	8d 91       	ld	r24, X+
    3766:	9c 91       	ld	r25, X
    3768:	11 97       	sbiw	r26, 0x01	; 1
    376a:	8f 5f       	subi	r24, 0xFF	; 255
    376c:	9e 4e       	sbci	r25, 0xEE	; 238
    376e:	39 f4       	brne	.+14     	; 0x377e <check_for_memory_corrupt+0x4c>
    3770:	12 96       	adiw	r26, 0x02	; 2
    3772:	8d 91       	ld	r24, X+
    3774:	9c 91       	ld	r25, X
    3776:	13 97       	sbiw	r26, 0x03	; 3
    3778:	8f 5f       	subi	r24, 0xFF	; 255
    377a:	9e 4e       	sbci	r25, 0xEE	; 238
    377c:	79 f0       	breq	.+30     	; 0x379c <check_for_memory_corrupt+0x6a>
  {
    thread_table[i].state = STATE_MEM_ERROR;
    377e:	fa 01       	movw	r30, r20
    3780:	ee 0f       	add	r30, r30
    3782:	ff 1f       	adc	r31, r31
    3784:	ee 0f       	add	r30, r30
    3786:	ff 1f       	adc	r31, r31
    3788:	e4 0f       	add	r30, r20
    378a:	f5 1f       	adc	r31, r21
    378c:	e2 1b       	sub	r30, r18
    378e:	f3 0b       	sbc	r31, r19
    3790:	e2 57       	subi	r30, 0x72	; 114
    3792:	fa 4f       	sbci	r31, 0xFA	; 250
    3794:	89 e0       	ldi	r24, 0x09	; 9
    3796:	82 83       	std	Z+2, r24	; 0x02
    3798:	2f ef       	ldi	r18, 0xFF	; 255
    379a:	3f ef       	ldi	r19, 0xFF	; 255
    return  - 1;
  }
  return i;
  
}
    379c:	c9 01       	movw	r24, r18
    379e:	08 95       	ret

000037a0 <getKernelStackAddress>:
  void **addr;

  addr = (void **) &old_stack_ptr;

  return addr;
}
    37a0:	8a e8       	ldi	r24, 0x8A	; 138
    37a2:	95 e0       	ldi	r25, 0x05	; 5
    37a4:	08 95       	ret

000037a6 <getThreadIndexAddress>:
//void getThreadIndexAddress() __attribute__((naked));
int getThreadIndexAddress()
{
  int i;
  uint16_t index;
  asm volatile("push r20""\n\t""push r21""\n\t"::);
    37a6:	4f 93       	push	r20
    37a8:	5f 93       	push	r21

  index = 0;
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (current_thread ==  &(thread_table[i]))
    37aa:	40 91 8c 05 	lds	r20, 0x058C
    37ae:	50 91 8d 05 	lds	r21, 0x058D
    37b2:	2e e8       	ldi	r18, 0x8E	; 142
    37b4:	35 e0       	ldi	r19, 0x05	; 5
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	42 17       	cp	r20, r18
    37bc:	53 07       	cpc	r21, r19
    37be:	61 f0       	breq	.+24     	; 0x37d8 <getThreadIndexAddress+0x32>
  int i;
  uint16_t index;
  asm volatile("push r20""\n\t""push r21""\n\t"::);

  index = 0;
  for (i = 0; i < LITE_MAX_THREADS; i++)
    37c0:	01 96       	adiw	r24, 0x01	; 1
    37c2:	29 5d       	subi	r18, 0xD9	; 217
    37c4:	3f 4f       	sbci	r19, 0xFF	; 255
    37c6:	84 30       	cpi	r24, 0x04	; 4
    37c8:	91 05       	cpc	r25, r1
    37ca:	b9 f7       	brne	.-18     	; 0x37ba <getThreadIndexAddress+0x14>
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    {
      index = i;
      break;
    }
  }
  asm volatile("pop r21""\n\t""pop r20""\n\t"::);
    37d0:	5f 91       	pop	r21
    37d2:	4f 91       	pop	r20

  return index;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( index ) );
  //asm volatile("ret"::); 
}
    37d4:	c9 01       	movw	r24, r18
    37d6:	08 95       	ret
  asm volatile("push r20""\n\t""push r21""\n\t"::);

  index = 0;
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (current_thread ==  &(thread_table[i]))
    37d8:	9c 01       	movw	r18, r24
    {
      index = i;
      break;
    }
  }
  asm volatile("pop r21""\n\t""pop r20""\n\t"::);
    37da:	5f 91       	pop	r21
    37dc:	4f 91       	pop	r20

  return index;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( index ) );
  //asm volatile("ret"::); 
}
    37de:	c9 01       	movw	r24, r18
    37e0:	08 95       	ret

000037e2 <barrier_unblock>:

/* This unblocks an IO bound thread.
 * This routine can be called from any context.
 */
void barrier_unblock(uint8_t type, uint8_t id)
{
    37e2:	ef 92       	push	r14
    37e4:	ff 92       	push	r15
    37e6:	0f 93       	push	r16
    37e8:	1f 93       	push	r17
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	18 2f       	mov	r17, r24
    37f0:	f6 2e       	mov	r15, r22
  uint8_t i;
  _atomic_t currentatomic;

  currentatomic = _atomic_start();
    37f2:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    37f6:	08 2f       	mov	r16, r24
    37f8:	c0 e0       	ldi	r28, 0x00	; 0
    37fa:	d0 e0       	ldi	r29, 0x00	; 0
    if ((thread_table[i].state == STATE_IO) && 
      (thread_table[i].data.iostate.type == type) && 
      (thread_table[i].data.iostate.id == id))
    {
      //Mark that thread as active
      thread_table[i].state = STATE_ACTIVE;
    37fc:	82 e0       	ldi	r24, 0x02	; 2
    37fe:	e8 2e       	mov	r14, r24

  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    //Look for a thread waiting on this IO
    if ((thread_table[i].state == STATE_IO) && 
    3800:	ce 01       	movw	r24, r28
    3802:	88 0f       	add	r24, r24
    3804:	99 1f       	adc	r25, r25
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	88 0f       	add	r24, r24
    380c:	99 1f       	adc	r25, r25
    380e:	fc 01       	movw	r30, r24
    3810:	ee 0f       	add	r30, r30
    3812:	ff 1f       	adc	r31, r31
    3814:	ee 0f       	add	r30, r30
    3816:	ff 1f       	adc	r31, r31
    3818:	e8 0f       	add	r30, r24
    381a:	f9 1f       	adc	r31, r25
    381c:	ec 1b       	sub	r30, r28
    381e:	fd 0b       	sbc	r31, r29
    3820:	e2 57       	subi	r30, 0x72	; 114
    3822:	fa 4f       	sbci	r31, 0xFA	; 250
    3824:	82 81       	ldd	r24, Z+2	; 0x02
    3826:	86 30       	cpi	r24, 0x06	; 6
    3828:	71 f0       	breq	.+28     	; 0x3846 <barrier_unblock+0x64>
      (thread_table[i].data.iostate.type == type) && 
      (thread_table[i].data.iostate.id == id))
    {
      //Mark that thread as active
      thread_table[i].state = STATE_ACTIVE;
      postNewThreadTask();
    382a:	21 96       	adiw	r28, 0x01	; 1
{
  uint8_t i;
  _atomic_t currentatomic;

  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
    382c:	c4 30       	cpi	r28, 0x04	; 4
    382e:	d1 05       	cpc	r29, r1
    3830:	39 f7       	brne	.-50     	; 0x3800 <barrier_unblock+0x1e>
      //Mark that thread as active
      thread_table[i].state = STATE_ACTIVE;
      postNewThreadTask();
    }
  }
  _atomic_end(currentatomic);
    3832:	80 2f       	mov	r24, r16
    3834:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    3838:	df 91       	pop	r29
    383a:	cf 91       	pop	r28
    383c:	1f 91       	pop	r17
    383e:	0f 91       	pop	r16
    3840:	ff 90       	pop	r15
    3842:	ef 90       	pop	r14
    3844:	08 95       	ret

  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    //Look for a thread waiting on this IO
    if ((thread_table[i].state == STATE_IO) && 
    3846:	85 8d       	ldd	r24, Z+29	; 0x1d
    3848:	81 17       	cp	r24, r17
    384a:	79 f7       	brne	.-34     	; 0x382a <barrier_unblock+0x48>
    384c:	86 8d       	ldd	r24, Z+30	; 0x1e
    384e:	8f 15       	cp	r24, r15
    3850:	61 f7       	brne	.-40     	; 0x382a <barrier_unblock+0x48>
      (thread_table[i].data.iostate.type == type) && 
      (thread_table[i].data.iostate.id == id))
    {
      //Mark that thread as active
      thread_table[i].state = STATE_ACTIVE;
    3852:	e2 82       	std	Z+2, r14	; 0x02
      postNewThreadTask();
    3854:	0e 94 00 18 	call	0x3000	; 0x3000 <postNewThreadTask>
    3858:	e8 cf       	rjmp	.-48     	; 0x382a <barrier_unblock+0x48>

0000385a <ServiceTimerFired>:


//-------------------------------------------------------------------------
void ServiceTimerFired(uint8_t id)
{
  if (id == 9)
    385a:	89 30       	cpi	r24, 0x09	; 9
    385c:	29 f4       	brne	.+10     	; 0x3868 <ServiceTimerFired+0xe>
  {
    if (thread_task_active == 0)
    385e:	80 91 2a 06 	lds	r24, 0x062A
    3862:	88 23       	and	r24, r24
    3864:	21 f0       	breq	.+8      	; 0x386e <ServiceTimerFired+0x14>
    3866:	08 95       	ret
      postTask(thread_task, 2);
    }
  }
  else
  {
    thread_wakeup(id);
    3868:	0e 94 0d 18 	call	0x301a	; 0x301a <thread_wakeup>
    386c:	08 95       	ret
{
  if (id == 9)
  {
    if (thread_task_active == 0)
    {
      postTask(thread_task, 2);
    386e:	89 e1       	ldi	r24, 0x19	; 25
    3870:	9a e1       	ldi	r25, 0x1A	; 26
    3872:	62 e0       	ldi	r22, 0x02	; 2
    3874:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    3878:	08 95       	ret

0000387a <__vector_21>:
#define adc_off() ADCSRA &= ~(1 << ADEN)


//The critical ISR function to come back when the interrupt of ADC finishes 
ISR(ADC_vect)
{
    387a:	1f 92       	push	r1
    387c:	0f 92       	push	r0
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	0f 92       	push	r0
    3882:	11 24       	eor	r1, r1
    ADCSRA |= _BV(ADIF);
    3884:	34 9a       	sbi	0x06, 4	; 6
    ADCSRA &= ~_BV(ADEN);       // disable interrupt
    3886:	37 98       	cbi	0x06, 7	; 6
    //   flag = 1;
}
    3888:	0f 90       	pop	r0
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	0f 90       	pop	r0
    388e:	1f 90       	pop	r1
    3890:	18 95       	reti

00003892 <adcdriver_init_adc>:

//-------------------------------------------------------------------------
void adcdriver_init_adc()
{
    ADMUX = 0;
    3892:	17 b8       	out	0x07, r1	; 7
    ADCSRA = _BV(ADIE) | 6;
    3894:	8e e0       	ldi	r24, 0x0E	; 14
    3896:	86 b9       	out	0x06, r24	; 6
    // does not enable interrupt and set prescaler to 64
}
    3898:	08 95       	ret

0000389a <get_adc>:
//poll based approach. After all, requrieing another adc thread is just too expensive!
uint16_t get_adc(int channel)
{
    uint16_t reading;

    ADMUX = 0;
    389a:	17 b8       	out	0x07, r1	; 7
    ADMUX |= (channel & 0x1F);
    389c:	97 b1       	in	r25, 0x07	; 7
    389e:	8f 71       	andi	r24, 0x1F	; 31
    38a0:	89 2b       	or	r24, r25
    38a2:	87 b9       	out	0x07, r24	; 7
    ADCSRA &= ~(1 << ADIE);
    38a4:	33 98       	cbi	0x06, 3	; 6
    ADCSRA |= (1 << ADIF);
    38a6:	34 9a       	sbi	0x06, 4	; 6
    ADCSRA |= (1 << ADEN) | (1 << ADSC);
    38a8:	86 b1       	in	r24, 0x06	; 6
    38aa:	80 6c       	ori	r24, 0xC0	; 192
    38ac:	86 b9       	out	0x06, r24	; 6
    // start conversion
    while (ADCSRA & (1 << ADSC))
    38ae:	36 99       	sbic	0x06, 6	; 6
    38b0:	fe cf       	rjmp	.-4      	; 0x38ae <get_adc+0x14>
        ;
    //the interrupt based adc is currently not used. 
    //while (flag == 0); 
    //flag = 0; 
    reading = ADCL;
    38b2:	84 b1       	in	r24, 0x04	; 4
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    reading |= (ADCH & 3) << 8;
    38b6:	25 b1       	in	r18, 0x05	; 5
    ADCSRA &= ~_BV(ADEN);
    38b8:	37 98       	cbi	0x06, 7	; 6
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	23 70       	andi	r18, 0x03	; 3
    38be:	30 70       	andi	r19, 0x00	; 0
    38c0:	32 2f       	mov	r19, r18
    38c2:	22 27       	eor	r18, r18
    38c4:	28 2b       	or	r18, r24
    38c6:	39 2b       	or	r19, r25
    return reading;
}
    38c8:	c9 01       	movw	r24, r18
    38ca:	08 95       	ret

000038cc <get_light>:
//-------------------------------------------------------------------------
uint16_t get_light()
{
    uint16_t reading;

    PORTE &= ~_BV(6);
    38cc:	1e 98       	cbi	0x03, 6	; 3
    DDRE &= ~_BV(6);
    38ce:	16 98       	cbi	0x02, 6	; 2
    PORTE |= _BV(5);
    38d0:	1d 9a       	sbi	0x03, 5	; 3
    DDRE |= _BV(5);
    38d2:	15 9a       	sbi	0x02, 5	; 2
    reading = get_adc(LIGHT_CHANNEL);
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	0e 94 4d 1c 	call	0x389a	; 0x389a <get_adc>
    PORTE &= ~_BV(5);
    38dc:	1d 98       	cbi	0x03, 5	; 3
    DDRE &= ~_BV(5);
    38de:	15 98       	cbi	0x02, 5	; 2
    return reading;
}
    38e0:	08 95       	ret

000038e2 <get_temp>:
//-------------------------------------------------------------------------
uint16_t get_temp()
{
    uint16_t reading;

    PORTE &= ~_BV(5);
    38e2:	1d 98       	cbi	0x03, 5	; 3
    DDRE &= ~_BV(5);
    38e4:	15 98       	cbi	0x02, 5	; 2
    PORTE |= _BV(6);
    38e6:	1e 9a       	sbi	0x03, 6	; 3
    DDRE |= _BV(6);
    38e8:	16 9a       	sbi	0x02, 6	; 2
    reading = get_adc(TEMP_CHANNEL);
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	0e 94 4d 1c 	call	0x389a	; 0x389a <get_adc>
    PORTE &= ~_BV(6);
    38f2:	1e 98       	cbi	0x03, 6	; 3
    DDRE &= ~_BV(6);
    38f4:	16 98       	cbi	0x02, 6	; 2
    return reading;
}
    38f6:	08 95       	ret

000038f8 <get_magx>:
//-------------------------------------------------------------------------
uint16_t get_magx()
{
    uint16_t reading;

    DDRC |= _BV(5);
    38f8:	a5 9a       	sbi	0x14, 5	; 20
    PORTC |= _BV(5);
    38fa:	ad 9a       	sbi	0x15, 5	; 21
    reading = get_adc(MAGX_CHANNEL);
    38fc:	85 e0       	ldi	r24, 0x05	; 5
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	0e 94 4d 1c 	call	0x389a	; 0x389a <get_adc>
    DDRC &= ~_BV(5);
    3904:	a5 98       	cbi	0x14, 5	; 20
    PORTC &= ~_BV(5);
    3906:	ad 98       	cbi	0x15, 5	; 21
    return reading;
}
    3908:	08 95       	ret

0000390a <get_magy>:
//-------------------------------------------------------------------------
uint16_t get_magy()
{
    uint16_t reading;

    DDRC |= _BV(5);
    390a:	a5 9a       	sbi	0x14, 5	; 20
    PORTC |= _BV(5);
    390c:	ad 9a       	sbi	0x15, 5	; 21
    reading = get_adc(MAGY_CHANNEL);
    390e:	86 e0       	ldi	r24, 0x06	; 6
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	0e 94 4d 1c 	call	0x389a	; 0x389a <get_adc>
    DDRC &= ~_BV(5);
    3916:	a5 98       	cbi	0x14, 5	; 20
    PORTC &= ~_BV(5);
    3918:	ad 98       	cbi	0x15, 5	; 21
    return reading;
}
    391a:	08 95       	ret

0000391c <get_accx>:
//-------------------------------------------------------------------------
uint16_t get_accx()
{
    uint16_t reading;

    DDRC |= _BV(4);
    391c:	a4 9a       	sbi	0x14, 4	; 20
    PORTC |= _BV(4);
    391e:	ac 9a       	sbi	0x15, 4	; 21
    reading = get_adc(ACCX_CHANNEL);
    3920:	83 e0       	ldi	r24, 0x03	; 3
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	0e 94 4d 1c 	call	0x389a	; 0x389a <get_adc>
    DDRC &= ~_BV(4);
    3928:	a4 98       	cbi	0x14, 4	; 20
    PORTC &= ~_BV(4);
    392a:	ac 98       	cbi	0x15, 4	; 21
    return reading;
}
    392c:	08 95       	ret

0000392e <get_accy>:
//-------------------------------------------------------------------------
uint16_t get_accy()
{
    uint16_t reading;

    DDRC |= _BV(4);
    392e:	a4 9a       	sbi	0x14, 4	; 20
    PORTC |= _BV(4);
    3930:	ac 9a       	sbi	0x15, 4	; 21
    reading = get_adc(ACCY_CHANNEL);
    3932:	84 e0       	ldi	r24, 0x04	; 4
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	0e 94 4d 1c 	call	0x389a	; 0x389a <get_adc>
    DDRC &= ~_BV(4);
    393a:	a4 98       	cbi	0x14, 4	; 20
    PORTC &= ~_BV(4);
    393c:	ac 98       	cbi	0x15, 4	; 21
    return reading;
}
    393e:	08 95       	ret

00003940 <Leds_yellowOff>:
    return;
}

//-------------------------------------------------------------------------
void Leds_yellowOff()
{
    3940:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3942:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3946:	18 2f       	mov	r17, r24

        LITE_SET_YELLOW_LED_PIN();
    3948:	0e 94 a2 02 	call	0x544	; 0x544 <LITE_SET_YELLOW_LED_PIN>
        Leds_ledsOn &= ~Leds_YELLOW_BIT;
    394c:	80 91 2f 06 	lds	r24, 0x062F
    3950:	8b 7f       	andi	r24, 0xFB	; 251
    3952:	80 93 2f 06 	sts	0x062F, r24
        _atomic_end(_atomic);
    3956:	81 2f       	mov	r24, r17
    3958:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    395c:	1f 91       	pop	r17
    395e:	08 95       	ret

00003960 <Leds_yellowOn>:
    return;
}

//-------------------------------------------------------------------------
void Leds_yellowOn()
{
    3960:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3962:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3966:	18 2f       	mov	r17, r24

        LITE_CLR_YELLOW_LED_PIN();
    3968:	0e 94 a4 02 	call	0x548	; 0x548 <LITE_CLR_YELLOW_LED_PIN>
        Leds_ledsOn |= Leds_YELLOW_BIT;
    396c:	80 91 2f 06 	lds	r24, 0x062F
    3970:	84 60       	ori	r24, 0x04	; 4
    3972:	80 93 2f 06 	sts	0x062F, r24
        _atomic_end(_atomic);
    3976:	81 2f       	mov	r24, r17
    3978:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    397c:	1f 91       	pop	r17
    397e:	08 95       	ret

00003980 <Leds_yellowToggle>:
    return;
}

//-------------------------------------------------------------------------
void Leds_yellowToggle()
{
    3980:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3982:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3986:	18 2f       	mov	r17, r24

        if (Leds_ledsOn & Leds_YELLOW_BIT)
    3988:	80 91 2f 06 	lds	r24, 0x062F
    398c:	82 fd       	sbrc	r24, 2
    398e:	07 c0       	rjmp	.+14     	; 0x399e <Leds_yellowToggle+0x1e>
        {
            Leds_yellowOff();
        }
        else
        {
            Leds_yellowOn();
    3990:	0e 94 b0 1c 	call	0x3960	; 0x3960 <Leds_yellowOn>
        }
        _atomic_end(_atomic);
    3994:	81 2f       	mov	r24, r17
    3996:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    399a:	1f 91       	pop	r17
    399c:	08 95       	ret
    {
        _atomic_t _atomic = _atomic_start();

        if (Leds_ledsOn & Leds_YELLOW_BIT)
        {
            Leds_yellowOff();
    399e:	0e 94 a0 1c 	call	0x3940	; 0x3940 <Leds_yellowOff>
        }
        else
        {
            Leds_yellowOn();
        }
        _atomic_end(_atomic);
    39a2:	81 2f       	mov	r24, r17
    39a4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    39a8:	1f 91       	pop	r17
    39aa:	08 95       	ret

000039ac <Leds_greenOff>:
    return;
}

//-------------------------------------------------------------------------
void Leds_greenOff()
{
    39ac:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    39ae:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    39b2:	18 2f       	mov	r17, r24

        LITE_SET_GREEN_LED_PIN();
    39b4:	0e 94 92 02 	call	0x524	; 0x524 <LITE_SET_GREEN_LED_PIN>
        Leds_ledsOn &= ~Leds_GREEN_BIT;
    39b8:	80 91 2f 06 	lds	r24, 0x062F
    39bc:	8d 7f       	andi	r24, 0xFD	; 253
    39be:	80 93 2f 06 	sts	0x062F, r24
        _atomic_end(_atomic);
    39c2:	81 2f       	mov	r24, r17
    39c4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    39c8:	1f 91       	pop	r17
    39ca:	08 95       	ret

000039cc <Leds_greenOn>:
    return;
}

//-------------------------------------------------------------------------
void Leds_greenOn()
{
    39cc:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    39ce:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    39d2:	18 2f       	mov	r17, r24

        LITE_CLR_GREEN_LED_PIN();
    39d4:	0e 94 94 02 	call	0x528	; 0x528 <LITE_CLR_GREEN_LED_PIN>
        Leds_ledsOn |= Leds_GREEN_BIT;
    39d8:	80 91 2f 06 	lds	r24, 0x062F
    39dc:	82 60       	ori	r24, 0x02	; 2
    39de:	80 93 2f 06 	sts	0x062F, r24
        _atomic_end(_atomic);
    39e2:	81 2f       	mov	r24, r17
    39e4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    39e8:	1f 91       	pop	r17
    39ea:	08 95       	ret

000039ec <Leds_greenToggle>:
    return;
}

//-------------------------------------------------------------------------
void Leds_greenToggle()
{
    39ec:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    39ee:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    39f2:	18 2f       	mov	r17, r24

        if (Leds_ledsOn & Leds_GREEN_BIT)
    39f4:	80 91 2f 06 	lds	r24, 0x062F
    39f8:	81 fd       	sbrc	r24, 1
    39fa:	07 c0       	rjmp	.+14     	; 0x3a0a <Leds_greenToggle+0x1e>
        {
            Leds_greenOff();
        }
        else
        {
            Leds_greenOn();
    39fc:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <Leds_greenOn>
        }
        _atomic_end(_atomic);
    3a00:	81 2f       	mov	r24, r17
    3a02:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    3a06:	1f 91       	pop	r17
    3a08:	08 95       	ret
    {
        _atomic_t _atomic = _atomic_start();

        if (Leds_ledsOn & Leds_GREEN_BIT)
        {
            Leds_greenOff();
    3a0a:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <Leds_greenOff>
        }
        else
        {
            Leds_greenOn();
        }
        _atomic_end(_atomic);
    3a0e:	81 2f       	mov	r24, r17
    3a10:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    3a14:	1f 91       	pop	r17
    3a16:	08 95       	ret

00003a18 <Leds_redOff>:
    return;
}

//-------------------------------------------------------------------------
void Leds_redOff()
{
    3a18:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3a1a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3a1e:	18 2f       	mov	r17, r24

        LITE_SET_RED_LED_PIN();
    3a20:	0e 94 80 02 	call	0x500	; 0x500 <LITE_SET_RED_LED_PIN>
        Leds_ledsOn &= ~Leds_RED_BIT;
    3a24:	80 91 2f 06 	lds	r24, 0x062F
    3a28:	8e 7f       	andi	r24, 0xFE	; 254
    3a2a:	80 93 2f 06 	sts	0x062F, r24
        _atomic_end(_atomic);
    3a2e:	81 2f       	mov	r24, r17
    3a30:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    3a34:	1f 91       	pop	r17
    3a36:	08 95       	ret

00003a38 <Leds_redOn>:
    }
}

//-------------------------------------------------------------------------
void Leds_redOn()
{
    3a38:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3a3a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3a3e:	18 2f       	mov	r17, r24

        LITE_CLR_RED_LED_PIN();
    3a40:	0e 94 82 02 	call	0x504	; 0x504 <LITE_CLR_RED_LED_PIN>
        Leds_ledsOn |= Leds_RED_BIT;
    3a44:	80 91 2f 06 	lds	r24, 0x062F
    3a48:	81 60       	ori	r24, 0x01	; 1
    3a4a:	80 93 2f 06 	sts	0x062F, r24
        _atomic_end(_atomic);
    3a4e:	81 2f       	mov	r24, r17
    3a50:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    3a54:	1f 91       	pop	r17
    3a56:	08 95       	ret

00003a58 <Leds_redToggle>:
    return;
}

//-------------------------------------------------------------------------
void Leds_redToggle()
{
    3a58:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3a5a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3a5e:	18 2f       	mov	r17, r24

        if (Leds_ledsOn & Leds_RED_BIT)
    3a60:	80 91 2f 06 	lds	r24, 0x062F
    3a64:	80 fd       	sbrc	r24, 0
    3a66:	07 c0       	rjmp	.+14     	; 0x3a76 <Leds_redToggle+0x1e>
        {
            Leds_redOff();
        }
        else
        {
            Leds_redOn();
    3a68:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Leds_redOn>
        }
        _atomic_end(_atomic);
    3a6c:	81 2f       	mov	r24, r17
    3a6e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
#ifdef TRACE_ENABLE_LEDEVENT
    addTrace(TRACE_LEDEVENT_REDTOGGLE, 100);
#endif
#endif
    return;
}
    3a72:	1f 91       	pop	r17
    3a74:	08 95       	ret
    {
        _atomic_t _atomic = _atomic_start();

        if (Leds_ledsOn & Leds_RED_BIT)
        {
            Leds_redOff();
    3a76:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <Leds_redOff>
        }
        else
        {
            Leds_redOn();
        }
        _atomic_end(_atomic);
    3a7a:	81 2f       	mov	r24, r17
    3a7c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
#ifdef TRACE_ENABLE_LEDEVENT
    addTrace(TRACE_LEDEVENT_REDTOGGLE, 100);
#endif
#endif
    return;
}
    3a80:	1f 91       	pop	r17
    3a82:	08 95       	ret

00003a84 <Leds_Leds>:
enum
{
    Leds_RED_BIT = 1, Leds_GREEN_BIT = 2, Leds_YELLOW_BIT = 4
};
void Leds_Leds()
{
    3a84:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3a86:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3a8a:	18 2f       	mov	r17, r24

        Leds_ledsOn = 0;
    3a8c:	10 92 2f 06 	sts	0x062F, r1
        LITE_MAKE_RED_LED_OUTPUT();
    3a90:	0e 94 8e 02 	call	0x51c	; 0x51c <LITE_MAKE_RED_LED_OUTPUT>
        LITE_MAKE_YELLOW_LED_OUTPUT();
    3a94:	0e 94 ac 02 	call	0x558	; 0x558 <LITE_MAKE_YELLOW_LED_OUTPUT>
        LITE_MAKE_GREEN_LED_OUTPUT();
    3a98:	0e 94 9e 02 	call	0x53c	; 0x53c <LITE_MAKE_GREEN_LED_OUTPUT>
        LITE_SET_RED_LED_PIN();
    3a9c:	0e 94 80 02 	call	0x500	; 0x500 <LITE_SET_RED_LED_PIN>
        LITE_SET_YELLOW_LED_PIN();
    3aa0:	0e 94 a2 02 	call	0x544	; 0x544 <LITE_SET_YELLOW_LED_PIN>
        LITE_SET_GREEN_LED_PIN();
    3aa4:	0e 94 92 02 	call	0x524	; 0x524 <LITE_SET_GREEN_LED_PIN>
        _atomic_end(_atomic);
    3aa8:	81 2f       	mov	r24, r17
    3aaa:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
}
    3aae:	1f 91       	pop	r17
    3ab0:	08 95       	ret

00003ab2 <sounder_init>:

#include "../hardware/avrhardware.h"
#include "sounder.h"
//--------------------------------------
void sounder_init()
{
    3ab2:	1f 93       	push	r17
    //activate the sounder
    {
        _atomic_t _atomic = _atomic_start();
    3ab4:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3ab8:	18 2f       	mov	r17, r24

        LITE_MAKE_PW2_OUTPUT();
    3aba:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LITE_MAKE_PW2_OUTPUT>
        _atomic_end(_atomic);
    3abe:	81 2f       	mov	r24, r17
    3ac0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
}
    3ac4:	1f 91       	pop	r17
    3ac6:	08 95       	ret

00003ac8 <sounderOff>:
    return;
}

//--------------------------------------
void sounderOff()
{
    3ac8:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3aca:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3ace:	18 2f       	mov	r17, r24

        sounder_init();
    3ad0:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <sounder_init>
        LITE_CLR_PW2_PIN();
    3ad4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LITE_CLR_PW2_PIN>
        _atomic_end(_atomic);
    3ad8:	81 2f       	mov	r24, r17
    3ada:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    3ade:	1f 91       	pop	r17
    3ae0:	08 95       	ret

00003ae2 <sounderOn>:
    }
}

//--------------------------------------
void sounderOn()
{
    3ae2:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3ae4:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3ae8:	18 2f       	mov	r17, r24

        sounder_init();
    3aea:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <sounder_init>
        LITE_SET_PW2_PIN();
    3aee:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LITE_SET_PW2_PIN>
        _atomic_end(_atomic);
    3af2:	81 2f       	mov	r24, r17
    3af4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return;
}
    3af8:	1f 91       	pop	r17
    3afa:	08 95       	ret

00003afc <write32int>:
}

//-------------------------------------------------------------------------
void write32int(uint16_t addr, int32_t value)
{
    eeprom_write32int(addr, value);
    3afc:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <eeprom_write32int>
}
    3b00:	08 95       	ret

00003b02 <write32uint>:
}

//-------------------------------------------------------------------------
void write32uint(uint16_t addr, uint32_t value)
{
    eeprom_write32uint(addr, value);
    3b02:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <eeprom_write32uint>
}
    3b06:	08 95       	ret

00003b08 <write16int>:
}

//-------------------------------------------------------------------------
void write16int(uint16_t addr, int16_t value)
{
    eeprom_write16int(addr, value);
    3b08:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <eeprom_write16int>
}
    3b0c:	08 95       	ret

00003b0e <write16uint>:
}

//-------------------------------------------------------------------------
void write16uint(uint16_t addr, uint16_t value)
{
    eeprom_write16uint(addr, value);
    3b0e:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <eeprom_write16uint>
}
    3b12:	08 95       	ret

00003b14 <write8int>:
}

//-------------------------------------------------------------------------
void write8int(uint16_t addr, int8_t value)
{
    eeprom_write8int(addr, value);
    3b14:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <eeprom_write8int>
}
    3b18:	08 95       	ret

00003b1a <write8uint>:
}

//-------------------------------------------------------------------------
void write8uint(uint16_t addr, uint8_t value)
{
    eeprom_write8uint(addr, value);
    3b1a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <eeprom_write8uint>
}
    3b1e:	08 95       	ret

00003b20 <read32int>:
}

//-------------------------------------------------------------------------
int32_t read32int(uint16_t addr)
{
    return eeprom_read32int(addr);
    3b20:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <eeprom_read32int>
}
    3b24:	08 95       	ret

00003b26 <read32uint>:
}

//-------------------------------------------------------------------------
uint32_t read32uint(uint16_t addr)
{
    return eeprom_read32uint(addr);
    3b26:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <eeprom_read32uint>
}
    3b2a:	08 95       	ret

00003b2c <read16int>:

//-------------------------------------------------------------------------

int16_t read16int(uint16_t addr)
{
    return eeprom_read16int(addr);
    3b2c:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <eeprom_read16int>
}
    3b30:	08 95       	ret

00003b32 <read16uint>:
}

//-------------------------------------------------------------------------
uint16_t read16uint(uint16_t addr)
{
    return eeprom_read16uint(addr);
    3b32:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <eeprom_read16uint>
}
    3b36:	08 95       	ret

00003b38 <read8int>:
}

//-------------------------------------------------------------------------
int8_t read8int(uint16_t addr)
{
    return eeprom_read8int(addr);
    3b38:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <eeprom_read8int>
}
    3b3c:	08 95       	ret

00003b3e <read8uint>:
}

//-------------------------------------------------------------------------
uint8_t read8uint(uint16_t addr)
{
    return eeprom_read8uint(addr);
    3b3e:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <eeprom_read8uint>
}
    3b42:	08 95       	ret

00003b44 <initBytes>:
}

//-------------------------------------------------------------------------
void initBytes(uint16_t addr, int nBytes, uint8_t value)
{
    eeprom_initBytes(addr, nBytes, value);
    3b44:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <eeprom_initBytes>
}
    3b48:	08 95       	ret

00003b4a <genericwriteBytes>:
}

//-------------------------------------------------------------------------
void genericwriteBytes(uint16_t addr, int nBytes, void *buffer)
{
    eeprom_writeBytes(addr, nBytes, buffer);
    3b4a:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <eeprom_writeBytes>
}
    3b4e:	08 95       	ret

00003b50 <genericreadBytes>:
//-------------------------------------------------------------------------
#ifdef PLATFORM_AVR
#include "../eeprom/ioeeprom.h"
void genericreadBytes(uint16_t addr, int nBytes, void *buffer)
{
    eeprom_readBytes(addr, nBytes, buffer);
    3b50:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <eeprom_readBytes>
}
    3b54:	08 95       	ret

00003b56 <eeprom_write32int>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_write32int(uint16_t addr, int32_t value)
{
    3b56:	bf 92       	push	r11
    3b58:	cf 92       	push	r12
    3b5a:	df 92       	push	r13
    3b5c:	ef 92       	push	r14
    3b5e:	ff 92       	push	r15
    3b60:	0f 93       	push	r16
    3b62:	1f 93       	push	r17
    3b64:	df 93       	push	r29
    3b66:	cf 93       	push	r28
    3b68:	00 d0       	rcall	.+0      	; 0x3b6a <eeprom_write32int+0x14>
    3b6a:	00 d0       	rcall	.+0      	; 0x3b6c <eeprom_write32int+0x16>
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    3b70:	6c 01       	movw	r12, r24
    3b72:	49 83       	std	Y+1, r20	; 0x01
    3b74:	5a 83       	std	Y+2, r21	; 0x02
    3b76:	6b 83       	std	Y+3, r22	; 0x03
    3b78:	7c 83       	std	Y+4, r23	; 0x04
    uint16_t value1;
    uint32_t value2;
    _atomic_t _atomic = _atomic_start();
    3b7a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3b7e:	b8 2e       	mov	r11, r24

    value1 = (uint16_t) ((*(uint32_t *) & value) >> 16);
    3b80:	e9 80       	ldd	r14, Y+1	; 0x01
    3b82:	fa 80       	ldd	r15, Y+2	; 0x02
    3b84:	0b 81       	ldd	r16, Y+3	; 0x03
    3b86:	1c 81       	ldd	r17, Y+4	; 0x04
    value2 = (uint16_t) ((*(uint32_t *) & value) & 0x0000ffff);
    eeprom_busy_wait();
    3b88:	e1 99       	sbic	0x1c, 1	; 28
    3b8a:	fe cf       	rjmp	.-4      	; 0x3b88 <eeprom_write32int+0x32>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value2);
    3b8c:	c6 01       	movw	r24, r12
    3b8e:	b7 01       	movw	r22, r14
    3b90:	0e 94 88 57 	call	0xaf10	; 0xaf10 <__eewr_word_m128>
    addr = addr + 2;
    eeprom_busy_wait();
    3b94:	e1 99       	sbic	0x1c, 1	; 28
    3b96:	fe cf       	rjmp	.-4      	; 0x3b94 <eeprom_write32int+0x3e>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value1);
    3b98:	98 01       	movw	r18, r16
    3b9a:	44 27       	eor	r20, r20
    3b9c:	55 27       	eor	r21, r21
    3b9e:	c6 01       	movw	r24, r12
    3ba0:	02 96       	adiw	r24, 0x02	; 2
    3ba2:	b9 01       	movw	r22, r18
    3ba4:	0e 94 88 57 	call	0xaf10	; 0xaf10 <__eewr_word_m128>
    _atomic_end(_atomic);
    3ba8:	8b 2d       	mov	r24, r11
    3baa:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    return;
}
    3bae:	0f 90       	pop	r0
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	cf 91       	pop	r28
    3bb8:	df 91       	pop	r29
    3bba:	1f 91       	pop	r17
    3bbc:	0f 91       	pop	r16
    3bbe:	ff 90       	pop	r15
    3bc0:	ef 90       	pop	r14
    3bc2:	df 90       	pop	r13
    3bc4:	cf 90       	pop	r12
    3bc6:	bf 90       	pop	r11
    3bc8:	08 95       	ret

00003bca <eeprom_write32uint>:
    return *(int32_t *) & returnvalue;
}

//-------------------------------------------------------------------------
void eeprom_write32uint(uint16_t addr, uint32_t value)
{
    3bca:	df 92       	push	r13
    3bcc:	ef 92       	push	r14
    3bce:	ff 92       	push	r15
    3bd0:	0f 93       	push	r16
    3bd2:	1f 93       	push	r17
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	ec 01       	movw	r28, r24
    3bda:	7a 01       	movw	r14, r20
    3bdc:	8b 01       	movw	r16, r22
    uint16_t value1;
    uint16_t value2;
    _atomic_t _atomic = _atomic_start();
    3bde:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3be2:	d8 2e       	mov	r13, r24

    value1 = (uint16_t) (value >> 16);
    value2 = (uint16_t) (value & 0x0000ffff);
    eeprom_busy_wait();
    3be4:	e1 99       	sbic	0x1c, 1	; 28
    3be6:	fe cf       	rjmp	.-4      	; 0x3be4 <eeprom_write32uint+0x1a>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value2);
    3be8:	ce 01       	movw	r24, r28
    3bea:	b7 01       	movw	r22, r14
    3bec:	0e 94 88 57 	call	0xaf10	; 0xaf10 <__eewr_word_m128>
    addr = addr + 2;
    eeprom_busy_wait();
    3bf0:	e1 99       	sbic	0x1c, 1	; 28
    3bf2:	fe cf       	rjmp	.-4      	; 0x3bf0 <eeprom_write32uint+0x26>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value1);
    3bf4:	98 01       	movw	r18, r16
    3bf6:	44 27       	eor	r20, r20
    3bf8:	55 27       	eor	r21, r21
    3bfa:	ce 01       	movw	r24, r28
    3bfc:	02 96       	adiw	r24, 0x02	; 2
    3bfe:	b9 01       	movw	r22, r18
    3c00:	0e 94 88 57 	call	0xaf10	; 0xaf10 <__eewr_word_m128>
    _atomic_end(_atomic);
    3c04:	8d 2d       	mov	r24, r13
    3c06:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    return;
}
    3c0a:	df 91       	pop	r29
    3c0c:	cf 91       	pop	r28
    3c0e:	1f 91       	pop	r17
    3c10:	0f 91       	pop	r16
    3c12:	ff 90       	pop	r15
    3c14:	ef 90       	pop	r14
    3c16:	df 90       	pop	r13
    3c18:	08 95       	ret

00003c1a <eeprom_write16int>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_write16int(uint16_t addr, int16_t value)
{
    3c1a:	ff 92       	push	r15
    3c1c:	0f 93       	push	r16
    3c1e:	1f 93       	push	r17
    3c20:	df 93       	push	r29
    3c22:	cf 93       	push	r28
    3c24:	00 d0       	rcall	.+0      	; 0x3c26 <eeprom_write16int+0xc>
    3c26:	cd b7       	in	r28, 0x3d	; 61
    3c28:	de b7       	in	r29, 0x3e	; 62
    3c2a:	8c 01       	movw	r16, r24
    3c2c:	7a 83       	std	Y+2, r23	; 0x02
    3c2e:	69 83       	std	Y+1, r22	; 0x01
    uint16_t value2;
    _atomic_t _atomic = _atomic_start();
    3c30:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3c34:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3c36:	e1 99       	sbic	0x1c, 1	; 28
    3c38:	fe cf       	rjmp	.-4      	; 0x3c36 <eeprom_write16int+0x1c>
    value2 = *(uint16_t *) & value;
    eeprom_write_word((uint16_t *) addr, value2);
    3c3a:	69 81       	ldd	r22, Y+1	; 0x01
    3c3c:	7a 81       	ldd	r23, Y+2	; 0x02
    3c3e:	c8 01       	movw	r24, r16
    3c40:	0e 94 88 57 	call	0xaf10	; 0xaf10 <__eewr_word_m128>
    _atomic_end(_atomic);
    3c44:	8f 2d       	mov	r24, r15
    3c46:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    return;
}
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	cf 91       	pop	r28
    3c50:	df 91       	pop	r29
    3c52:	1f 91       	pop	r17
    3c54:	0f 91       	pop	r16
    3c56:	ff 90       	pop	r15
    3c58:	08 95       	ret

00003c5a <eeprom_write16uint>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_write16uint(uint16_t addr, uint16_t value)
{
    3c5a:	ff 92       	push	r15
    3c5c:	0f 93       	push	r16
    3c5e:	1f 93       	push	r17
    3c60:	cf 93       	push	r28
    3c62:	df 93       	push	r29
    3c64:	ec 01       	movw	r28, r24
    3c66:	8b 01       	movw	r16, r22
    _atomic_t _atomic = _atomic_start();
    3c68:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3c6c:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3c6e:	e1 99       	sbic	0x1c, 1	; 28
    3c70:	fe cf       	rjmp	.-4      	; 0x3c6e <eeprom_write16uint+0x14>
    eeprom_write_word((uint16_t *) addr, value);
    3c72:	ce 01       	movw	r24, r28
    3c74:	b8 01       	movw	r22, r16
    3c76:	0e 94 88 57 	call	0xaf10	; 0xaf10 <__eewr_word_m128>
    _atomic_end(_atomic);
    3c7a:	8f 2d       	mov	r24, r15
    3c7c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    return;
}
    3c80:	df 91       	pop	r29
    3c82:	cf 91       	pop	r28
    3c84:	1f 91       	pop	r17
    3c86:	0f 91       	pop	r16
    3c88:	ff 90       	pop	r15
    3c8a:	08 95       	ret

00003c8c <eeprom_read32int>:
    return (((uint32_t) value2) << 16) + (uint32_t) value1;
}

//-------------------------------------------------------------------------
int32_t eeprom_read32int(uint16_t addr)
{
    3c8c:	df 92       	push	r13
    3c8e:	ef 92       	push	r14
    3c90:	ff 92       	push	r15
    3c92:	0f 93       	push	r16
    3c94:	1f 93       	push	r17
    3c96:	df 93       	push	r29
    3c98:	cf 93       	push	r28
    3c9a:	00 d0       	rcall	.+0      	; 0x3c9c <eeprom_read32int+0x10>
    3c9c:	00 d0       	rcall	.+0      	; 0x3c9e <eeprom_read32int+0x12>
    3c9e:	cd b7       	in	r28, 0x3d	; 61
    3ca0:	de b7       	in	r29, 0x3e	; 62
    3ca2:	8c 01       	movw	r16, r24
    uint16_t value1;
    uint16_t value2;
    uint32_t returnvalue;
    _atomic_t _atomic = _atomic_start();
    3ca4:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3ca8:	d8 2e       	mov	r13, r24

    eeprom_busy_wait();
    3caa:	e1 99       	sbic	0x1c, 1	; 28
    3cac:	fe cf       	rjmp	.-4      	; 0x3caa <eeprom_read32int+0x1e>
    value1 = eeprom_read_word((uint16_t *) addr);
    3cae:	c8 01       	movw	r24, r16
    3cb0:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__eerd_word_m128>
    3cb4:	7c 01       	movw	r14, r24
    eeprom_busy_wait();
    3cb6:	e1 99       	sbic	0x1c, 1	; 28
    3cb8:	fe cf       	rjmp	.-4      	; 0x3cb6 <eeprom_read32int+0x2a>
    value2 = eeprom_read_word((uint16_t *) (addr + 2));
    3cba:	c8 01       	movw	r24, r16
    3cbc:	02 96       	adiw	r24, 0x02	; 2
    3cbe:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__eerd_word_m128>
    returnvalue = ((((uint32_t) value2) << 16) + (uint32_t) value1);
    3cc2:	a0 e0       	ldi	r26, 0x00	; 0
    3cc4:	b0 e0       	ldi	r27, 0x00	; 0
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	99 27       	eor	r25, r25
    3cca:	88 27       	eor	r24, r24
    3ccc:	97 01       	movw	r18, r14
    3cce:	40 e0       	ldi	r20, 0x00	; 0
    3cd0:	50 e0       	ldi	r21, 0x00	; 0
    3cd2:	82 0f       	add	r24, r18
    3cd4:	93 1f       	adc	r25, r19
    3cd6:	a4 1f       	adc	r26, r20
    3cd8:	b5 1f       	adc	r27, r21
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	9a 83       	std	Y+2, r25	; 0x02
    3cde:	ab 83       	std	Y+3, r26	; 0x03
    3ce0:	bc 83       	std	Y+4, r27	; 0x04
    _atomic_end(_atomic);
    3ce2:	8d 2d       	mov	r24, r13
    3ce4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    3ce8:	69 81       	ldd	r22, Y+1	; 0x01
    3cea:	7a 81       	ldd	r23, Y+2	; 0x02
    return *(int32_t *) & returnvalue;
}
    3cec:	8b 81       	ldd	r24, Y+3	; 0x03
    3cee:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	cf 91       	pop	r28
    3cfa:	df 91       	pop	r29
    3cfc:	1f 91       	pop	r17
    3cfe:	0f 91       	pop	r16
    3d00:	ff 90       	pop	r15
    3d02:	ef 90       	pop	r14
    3d04:	df 90       	pop	r13
    3d06:	08 95       	ret

00003d08 <eeprom_read32uint>:
    return;
}

//-------------------------------------------------------------------------
uint32_t eeprom_read32uint(uint16_t addr)
{
    3d08:	cf 92       	push	r12
    3d0a:	df 92       	push	r13
    3d0c:	ef 92       	push	r14
    3d0e:	ff 92       	push	r15
    3d10:	0f 93       	push	r16
    3d12:	1f 93       	push	r17
    3d14:	cf 93       	push	r28
    3d16:	df 93       	push	r29
    3d18:	ec 01       	movw	r28, r24
    uint16_t value1;
    uint16_t value2;
    _atomic_t _atomic = _atomic_start();
    3d1a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3d1e:	18 2f       	mov	r17, r24

    eeprom_busy_wait();
    3d20:	e1 99       	sbic	0x1c, 1	; 28
    3d22:	fe cf       	rjmp	.-4      	; 0x3d20 <eeprom_read32uint+0x18>
    value1 = eeprom_read_word((uint16_t *) addr);
    3d24:	ce 01       	movw	r24, r28
    3d26:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__eerd_word_m128>
    3d2a:	6c 01       	movw	r12, r24
    eeprom_busy_wait();
    3d2c:	e1 99       	sbic	0x1c, 1	; 28
    3d2e:	fe cf       	rjmp	.-4      	; 0x3d2c <eeprom_read32uint+0x24>
    value2 = eeprom_read_word((uint16_t *) (addr + 2));
    3d30:	ce 01       	movw	r24, r28
    3d32:	02 96       	adiw	r24, 0x02	; 2
    3d34:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__eerd_word_m128>
    3d38:	7c 01       	movw	r14, r24
    _atomic_end(_atomic);
    3d3a:	81 2f       	mov	r24, r17
    3d3c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    3d40:	00 e0       	ldi	r16, 0x00	; 0
    3d42:	10 e0       	ldi	r17, 0x00	; 0
    3d44:	87 01       	movw	r16, r14
    3d46:	ff 24       	eor	r15, r15
    3d48:	ee 24       	eor	r14, r14
    3d4a:	c6 01       	movw	r24, r12
    3d4c:	a0 e0       	ldi	r26, 0x00	; 0
    3d4e:	b0 e0       	ldi	r27, 0x00	; 0
    3d50:	e8 0e       	add	r14, r24
    3d52:	f9 1e       	adc	r15, r25
    3d54:	0a 1f       	adc	r16, r26
    3d56:	1b 1f       	adc	r17, r27
    return (((uint32_t) value2) << 16) + (uint32_t) value1;
}
    3d58:	b7 01       	movw	r22, r14
    3d5a:	c8 01       	movw	r24, r16
    3d5c:	df 91       	pop	r29
    3d5e:	cf 91       	pop	r28
    3d60:	1f 91       	pop	r17
    3d62:	0f 91       	pop	r16
    3d64:	ff 90       	pop	r15
    3d66:	ef 90       	pop	r14
    3d68:	df 90       	pop	r13
    3d6a:	cf 90       	pop	r12
    3d6c:	08 95       	ret

00003d6e <eeprom_read16int>:
    return value;
}

//-------------------------------------------------------------------------
int16_t eeprom_read16int(uint16_t addr)
{
    3d6e:	ff 92       	push	r15
    3d70:	0f 93       	push	r16
    3d72:	1f 93       	push	r17
    3d74:	df 93       	push	r29
    3d76:	cf 93       	push	r28
    3d78:	00 d0       	rcall	.+0      	; 0x3d7a <eeprom_read16int+0xc>
    3d7a:	cd b7       	in	r28, 0x3d	; 61
    3d7c:	de b7       	in	r29, 0x3e	; 62
    3d7e:	8c 01       	movw	r16, r24
    uint16_t value;
    _atomic_t _atomic = _atomic_start();
    3d80:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3d84:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3d86:	e1 99       	sbic	0x1c, 1	; 28
    3d88:	fe cf       	rjmp	.-4      	; 0x3d86 <eeprom_read16int+0x18>
    value = eeprom_read_word((uint16_t *) addr);
    3d8a:	c8 01       	movw	r24, r16
    3d8c:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__eerd_word_m128>
    3d90:	9a 83       	std	Y+2, r25	; 0x02
    3d92:	89 83       	std	Y+1, r24	; 0x01
    _atomic_end(_atomic);
    3d94:	8f 2d       	mov	r24, r15
    3d96:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    return *(int16_t *) & value;
}
    3d9a:	89 81       	ldd	r24, Y+1	; 0x01
    3d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	cf 91       	pop	r28
    3da4:	df 91       	pop	r29
    3da6:	1f 91       	pop	r17
    3da8:	0f 91       	pop	r16
    3daa:	ff 90       	pop	r15
    3dac:	08 95       	ret

00003dae <eeprom_read16uint>:
    return *(int8_t *) & value;
}

//-------------------------------------------------------------------------
uint16_t eeprom_read16uint(uint16_t addr)
{
    3dae:	ff 92       	push	r15
    3db0:	0f 93       	push	r16
    3db2:	1f 93       	push	r17
    3db4:	8c 01       	movw	r16, r24
    uint16_t value;
    _atomic_t _atomic = _atomic_start();
    3db6:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3dba:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3dbc:	e1 99       	sbic	0x1c, 1	; 28
    3dbe:	fe cf       	rjmp	.-4      	; 0x3dbc <eeprom_read16uint+0xe>
    value = eeprom_read_word((uint16_t *) addr);
    3dc0:	c8 01       	movw	r24, r16
    3dc2:	0e 94 6b 57 	call	0xaed6	; 0xaed6 <__eerd_word_m128>
    3dc6:	18 2f       	mov	r17, r24
    3dc8:	09 2f       	mov	r16, r25
    _atomic_end(_atomic);
    3dca:	8f 2d       	mov	r24, r15
    3dcc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    return value;
}
    3dd0:	81 2f       	mov	r24, r17
    3dd2:	90 2f       	mov	r25, r16
    3dd4:	1f 91       	pop	r17
    3dd6:	0f 91       	pop	r16
    3dd8:	ff 90       	pop	r15
    3dda:	08 95       	ret

00003ddc <eeprom_write8int>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_write8int(uint16_t addr, int8_t value)
{
    3ddc:	ff 92       	push	r15
    3dde:	0f 93       	push	r16
    3de0:	1f 93       	push	r17
    3de2:	df 93       	push	r29
    3de4:	cf 93       	push	r28
    3de6:	0f 92       	push	r0
    3de8:	cd b7       	in	r28, 0x3d	; 61
    3dea:	de b7       	in	r29, 0x3e	; 62
    3dec:	8c 01       	movw	r16, r24
    3dee:	69 83       	std	Y+1, r22	; 0x01
    uint8_t value2;
    _atomic_t _atomic = _atomic_start();
    3df0:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3df4:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3df6:	e1 99       	sbic	0x1c, 1	; 28
    3df8:	fe cf       	rjmp	.-4      	; 0x3df6 <eeprom_write8int+0x1a>
    value2 = *(uint8_t *) & value;
    eeprom_write_byte((uint8_t *) addr, value2);
    3dfa:	c8 01       	movw	r24, r16
    3dfc:	69 81       	ldd	r22, Y+1	; 0x01
    3dfe:	0e 94 7b 57 	call	0xaef6	; 0xaef6 <__eewr_byte_m128>
    _atomic_end(_atomic);
    3e02:	8f 2d       	mov	r24, r15
    3e04:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    return;
}
    3e08:	0f 90       	pop	r0
    3e0a:	cf 91       	pop	r28
    3e0c:	df 91       	pop	r29
    3e0e:	1f 91       	pop	r17
    3e10:	0f 91       	pop	r16
    3e12:	ff 90       	pop	r15
    3e14:	08 95       	ret

00003e16 <eeprom_write8uint>:
    return *(int16_t *) & value;
}

//-------------------------------------------------------------------------
void eeprom_write8uint(uint16_t addr, uint8_t value)
{
    3e16:	0f 93       	push	r16
    3e18:	1f 93       	push	r17
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	ec 01       	movw	r28, r24
    3e20:	06 2f       	mov	r16, r22
    _atomic_t _atomic = _atomic_start();
    3e22:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3e26:	18 2f       	mov	r17, r24

    eeprom_busy_wait();
    3e28:	e1 99       	sbic	0x1c, 1	; 28
    3e2a:	fe cf       	rjmp	.-4      	; 0x3e28 <eeprom_write8uint+0x12>
    eeprom_write_byte((uint8_t *) addr, value);
    3e2c:	ce 01       	movw	r24, r28
    3e2e:	60 2f       	mov	r22, r16
    3e30:	0e 94 7b 57 	call	0xaef6	; 0xaef6 <__eewr_byte_m128>
    _atomic_end(_atomic);
    3e34:	81 2f       	mov	r24, r17
    3e36:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    return;
}
    3e3a:	df 91       	pop	r29
    3e3c:	cf 91       	pop	r28
    3e3e:	1f 91       	pop	r17
    3e40:	0f 91       	pop	r16
    3e42:	08 95       	ret

00003e44 <eeprom_initBytes>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_initBytes(uint16_t addr, int nBytes, uint8_t value)
{
    3e44:	cf 92       	push	r12
    3e46:	df 92       	push	r13
    3e48:	ef 92       	push	r14
    3e4a:	ff 92       	push	r15
    3e4c:	0f 93       	push	r16
    3e4e:	1f 93       	push	r17
    3e50:	cf 93       	push	r28
    3e52:	df 93       	push	r29
    3e54:	7c 01       	movw	r14, r24
    3e56:	8b 01       	movw	r16, r22
    3e58:	d4 2e       	mov	r13, r20
    int i;
    _atomic_t _atomic = _atomic_start();
    3e5a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3e5e:	c8 2e       	mov	r12, r24

    for (i = 0; i < nBytes; i++)
    3e60:	10 16       	cp	r1, r16
    3e62:	11 06       	cpc	r1, r17
    3e64:	64 f4       	brge	.+24     	; 0x3e7e <eeprom_initBytes+0x3a>
    3e66:	c0 e0       	ldi	r28, 0x00	; 0
    3e68:	d0 e0       	ldi	r29, 0x00	; 0
    {
        eeprom_write8uint(addr + i, value);
    3e6a:	ce 01       	movw	r24, r28
    3e6c:	8e 0d       	add	r24, r14
    3e6e:	9f 1d       	adc	r25, r15
    3e70:	6d 2d       	mov	r22, r13
    3e72:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <eeprom_write8uint>
void eeprom_initBytes(uint16_t addr, int nBytes, uint8_t value)
{
    int i;
    _atomic_t _atomic = _atomic_start();

    for (i = 0; i < nBytes; i++)
    3e76:	21 96       	adiw	r28, 0x01	; 1
    3e78:	c0 17       	cp	r28, r16
    3e7a:	d1 07       	cpc	r29, r17
    3e7c:	b4 f3       	brlt	.-20     	; 0x3e6a <eeprom_initBytes+0x26>
    {
        eeprom_write8uint(addr + i, value);
    }
    _atomic_end(_atomic);
    3e7e:	8c 2d       	mov	r24, r12
    3e80:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	1f 91       	pop	r17
    3e8a:	0f 91       	pop	r16
    3e8c:	ff 90       	pop	r15
    3e8e:	ef 90       	pop	r14
    3e90:	df 90       	pop	r13
    3e92:	cf 90       	pop	r12
    3e94:	08 95       	ret

00003e96 <eeprom_read8int>:
    return ret;
}

//-------------------------------------------------------------------------
int8_t eeprom_read8int(uint16_t addr)
{
    3e96:	ff 92       	push	r15
    3e98:	0f 93       	push	r16
    3e9a:	1f 93       	push	r17
    3e9c:	df 93       	push	r29
    3e9e:	cf 93       	push	r28
    3ea0:	0f 92       	push	r0
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	8c 01       	movw	r16, r24
    uint8_t value;
    _atomic_t _atomic = _atomic_start();
    3ea8:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3eac:	f8 2e       	mov	r15, r24

    eeprom_busy_wait();
    3eae:	e1 99       	sbic	0x1c, 1	; 28
    3eb0:	fe cf       	rjmp	.-4      	; 0x3eae <eeprom_read8int+0x18>
    value = eeprom_read_byte((uint8_t *) addr);
    3eb2:	c8 01       	movw	r24, r16
    3eb4:	0e 94 63 57 	call	0xaec6	; 0xaec6 <__eerd_byte_m128>
    3eb8:	89 83       	std	Y+1, r24	; 0x01
    _atomic_end(_atomic);
    3eba:	8f 2d       	mov	r24, r15
    3ebc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    return *(int8_t *) & value;
}
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
    3ec2:	0f 90       	pop	r0
    3ec4:	cf 91       	pop	r28
    3ec6:	df 91       	pop	r29
    3ec8:	1f 91       	pop	r17
    3eca:	0f 91       	pop	r16
    3ecc:	ff 90       	pop	r15
    3ece:	08 95       	ret

00003ed0 <eeprom_read8uint>:
    return;
}

//-------------------------------------------------------------------------
uint8_t eeprom_read8uint(uint16_t addr)
{
    3ed0:	0f 93       	push	r16
    3ed2:	1f 93       	push	r17
    3ed4:	cf 93       	push	r28
    3ed6:	df 93       	push	r29
    3ed8:	ec 01       	movw	r28, r24
    uint8_t ret;
    _atomic_t _atomic = _atomic_start();
    3eda:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    3ede:	08 2f       	mov	r16, r24

    eeprom_busy_wait();
    3ee0:	e1 99       	sbic	0x1c, 1	; 28
    3ee2:	fe cf       	rjmp	.-4      	; 0x3ee0 <eeprom_read8uint+0x10>
    ret = eeprom_read_byte((uint8_t *) addr);
    3ee4:	ce 01       	movw	r24, r28
    3ee6:	0e 94 63 57 	call	0xaec6	; 0xaec6 <__eerd_byte_m128>
    3eea:	18 2f       	mov	r17, r24
    _atomic_end(_atomic);
    3eec:	80 2f       	mov	r24, r16
    3eee:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    return ret;
}
    3ef2:	81 2f       	mov	r24, r17
    3ef4:	df 91       	pop	r29
    3ef6:	cf 91       	pop	r28
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
    3efc:	08 95       	ret

00003efe <eeprom_writeBytes>:
    return;
}

//-------------------------------------------------------------------------
void eeprom_writeBytes(uint16_t addr, int nBytes, void *buffer)
{
    3efe:	9c 01       	movw	r18, r24
    3f00:	fb 01       	movw	r30, r22
    eeprom_busy_wait();
    3f02:	e1 99       	sbic	0x1c, 1	; 28
    3f04:	fe cf       	rjmp	.-4      	; 0x3f02 <eeprom_writeBytes+0x4>
    eeprom_write_block(buffer, (void *)addr, nBytes);
    3f06:	ca 01       	movw	r24, r20
    3f08:	b9 01       	movw	r22, r18
    3f0a:	af 01       	movw	r20, r30
    3f0c:	0e 94 71 57 	call	0xaee2	; 0xaee2 <__eewr_block_m128>
    return;
}
    3f10:	08 95       	ret

00003f12 <eeprom_readBytes>:
#include "ioeeprom.h"
#include "../../hardware/avrhardware.h"
#include <avr/eeprom.h>
//-------------------------------------------------------------------------
void eeprom_readBytes(uint16_t addr, int nBytes, void *buffer)
{
    3f12:	9c 01       	movw	r18, r24
    3f14:	fb 01       	movw	r30, r22
    eeprom_busy_wait();
    3f16:	e1 99       	sbic	0x1c, 1	; 28
    3f18:	fe cf       	rjmp	.-4      	; 0x3f16 <eeprom_readBytes+0x4>
    eeprom_read_block(buffer, (void *)addr, nBytes);
    3f1a:	ca 01       	movw	r24, r20
    3f1c:	b9 01       	movw	r22, r18
    3f1e:	af 01       	movw	r20, r30
    3f20:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__eerd_block_m128>
    return;
}
    3f24:	08 95       	ret

00003f26 <initFidTable>:
void initFidTable()
{
   int i;
   for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   {
      fidtable[ i ].valid = 0;
    3f26:	10 92 30 06 	sts	0x0630, r1
    3f2a:	10 92 3a 06 	sts	0x063A, r1
   }
}
    3f2e:	08 95       	ret

00003f30 <getFreeFid>:
int getFreeFid()
{
   int i;
   for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   {
      if ( fidtable[ i ].valid == 0 )
    3f30:	80 91 30 06 	lds	r24, 0x0630
    3f34:	88 23       	and	r24, r24
    3f36:	81 f1       	breq	.+96     	; 0x3f98 <getFreeFid+0x68>
    3f38:	80 91 3a 06 	lds	r24, 0x063A
    3f3c:	88 23       	and	r24, r24
    3f3e:	79 f1       	breq	.+94     	; 0x3f9e <getFreeFid+0x6e>
      {
         break;
    3f40:	42 e0       	ldi	r20, 0x02	; 2
    3f42:	50 e0       	ldi	r21, 0x00	; 0
      }
   }
   fidtable[ i ].valid = 1;
    3f44:	9a 01       	movw	r18, r20
    3f46:	22 0f       	add	r18, r18
    3f48:	33 1f       	adc	r19, r19
    3f4a:	ca 01       	movw	r24, r20
    3f4c:	88 0f       	add	r24, r24
    3f4e:	99 1f       	adc	r25, r25
    3f50:	88 0f       	add	r24, r24
    3f52:	99 1f       	adc	r25, r25
    3f54:	88 0f       	add	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	28 0f       	add	r18, r24
    3f5a:	39 1f       	adc	r19, r25
    3f5c:	20 5d       	subi	r18, 0xD0	; 208
    3f5e:	39 4f       	sbci	r19, 0xF9	; 249
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	f9 01       	movw	r30, r18
    3f64:	80 83       	st	Z, r24
   fidtable[ i ].index = i;
    3f66:	41 83       	std	Z+1, r20	; 0x01
   fidtable[ i ].addr = fidtable[ i ].mode = 0;
    3f68:	13 82       	std	Z+3, r1	; 0x03
    3f6a:	fa 01       	movw	r30, r20
    3f6c:	ee 0f       	add	r30, r30
    3f6e:	ff 1f       	adc	r31, r31
    3f70:	ee 0f       	add	r30, r30
    3f72:	ff 1f       	adc	r31, r31
    3f74:	e4 0f       	add	r30, r20
    3f76:	f5 1f       	adc	r31, r21
    3f78:	ee 0f       	add	r30, r30
    3f7a:	ff 1f       	adc	r31, r31
    3f7c:	ee 5c       	subi	r30, 0xCE	; 206
    3f7e:	f9 4f       	sbci	r31, 0xF9	; 249
    3f80:	10 82       	st	Z, r1
   fidtable[ i ].fpos =  - 1;
    3f82:	8f ef       	ldi	r24, 0xFF	; 255
    3f84:	9f ef       	ldi	r25, 0xFF	; 255
    3f86:	af ef       	ldi	r26, 0xFF	; 255
    3f88:	bf ef       	ldi	r27, 0xFF	; 255
    3f8a:	f9 01       	movw	r30, r18
    3f8c:	86 83       	std	Z+6, r24	; 0x06
    3f8e:	97 83       	std	Z+7, r25	; 0x07
    3f90:	a0 87       	std	Z+8, r26	; 0x08
    3f92:	b1 87       	std	Z+9, r27	; 0x09
   return i;
}
    3f94:	ca 01       	movw	r24, r20
    3f96:	08 95       	ret
int getFreeFid()
{
   int i;
   for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   {
      if ( fidtable[ i ].valid == 0 )
    3f98:	40 e0       	ldi	r20, 0x00	; 0
    3f9a:	50 e0       	ldi	r21, 0x00	; 0
    3f9c:	d3 cf       	rjmp	.-90     	; 0x3f44 <getFreeFid+0x14>
      {
         break;
    3f9e:	41 e0       	ldi	r20, 0x01	; 1
    3fa0:	50 e0       	ldi	r21, 0x00	; 0
    3fa2:	d0 cf       	rjmp	.-96     	; 0x3f44 <getFreeFid+0x14>

00003fa4 <releaseFid>:
}

//-------------------------------------------------------------------------
void releaseFid( int fid )
{
   fidtable[ fid ].valid = 0;
    3fa4:	9c 01       	movw	r18, r24
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	ee 0f       	add	r30, r30
    3faa:	ff 1f       	adc	r31, r31
    3fac:	ee 0f       	add	r30, r30
    3fae:	ff 1f       	adc	r31, r31
    3fb0:	ee 0f       	add	r30, r30
    3fb2:	ff 1f       	adc	r31, r31
    3fb4:	22 0f       	add	r18, r18
    3fb6:	33 1f       	adc	r19, r19
    3fb8:	e2 0f       	add	r30, r18
    3fba:	f3 1f       	adc	r31, r19
    3fbc:	e0 5d       	subi	r30, 0xD0	; 208
    3fbe:	f9 4f       	sbci	r31, 0xF9	; 249
    3fc0:	10 82       	st	Z, r1
}
    3fc2:	08 95       	ret

00003fc4 <releaseAllFid>:
//-------------------------------------------------------------------------
void releaseAllFid()
{
  int i;
  for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   fidtable[ i ].valid = 0;
    3fc4:	10 92 30 06 	sts	0x0630, r1
    3fc8:	10 92 3a 06 	sts	0x063A, r1
}
    3fcc:	08 95       	ret

00003fce <checkFsValid>:
fid fidtable[ MAX_FILE_TABLE_SIZE ];

//-------------------------------------------------------------------------
int checkFsValid()
{
   if ( checkNodeValid( FSROOTNODE ) == DIRNODE )
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <checkNodeValid>
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	11 f0       	breq	.+4      	; 0x3fe2 <checkFsValid+0x14>
   }
   else
   {
      return 0;
   }
}
    3fde:	c9 01       	movw	r24, r18
    3fe0:	08 95       	ret
fid fidtable[ MAX_FILE_TABLE_SIZE ];

//-------------------------------------------------------------------------
int checkFsValid()
{
   if ( checkNodeValid( FSROOTNODE ) == DIRNODE )
    3fe2:	21 e0       	ldi	r18, 0x01	; 1
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
   }
   else
   {
      return 0;
   }
}
    3fe6:	c9 01       	movw	r24, r18
    3fe8:	08 95       	ret

00003fea <fseek2>:
    return;
}

//-------------------------------------------------------------------------
int fseek2(MYFILE * fp, int32_t offset, int position)
{
    3fea:	cf 92       	push	r12
    3fec:	df 92       	push	r13
    3fee:	ef 92       	push	r14
    3ff0:	ff 92       	push	r15
    3ff2:	0f 93       	push	r16
    3ff4:	1f 93       	push	r17
    3ff6:	cf 93       	push	r28
    3ff8:	df 93       	push	r29
    3ffa:	ec 01       	movw	r28, r24
    3ffc:	7a 01       	movw	r14, r20
    3ffe:	8b 01       	movw	r16, r22
    4000:	f9 01       	movw	r30, r18
    int temp;

    if (position == 0)
    4002:	21 15       	cp	r18, r1
    4004:	31 05       	cpc	r19, r1
    4006:	09 f4       	brne	.+2      	; 0x400a <fseek2+0x20>
    4008:	47 c0       	rjmp	.+142    	; 0x4098 <fseek2+0xae>
            return -1;
        }
        fp->fpos = offset;
        return 0;
    }
    temp = fp->fpos;
    400a:	2e 81       	ldd	r18, Y+6	; 0x06
    400c:	3f 81       	ldd	r19, Y+7	; 0x07
    400e:	48 85       	ldd	r20, Y+8	; 0x08
    4010:	59 85       	ldd	r21, Y+9	; 0x09
    4012:	69 01       	movw	r12, r18
    if (position == 1)
    4014:	e1 30       	cpi	r30, 0x01	; 1
    4016:	f1 05       	cpc	r31, r1
    4018:	b1 f1       	breq	.+108    	; 0x4086 <fseek2+0x9c>
    {
        fp->fpos = fp->fpos + offset;
    }
    if ((fp->fpos < 0) || (fp->fpos > fp->size))
    401a:	57 fd       	sbrc	r21, 7
    401c:	1f c0       	rjmp	.+62     	; 0x405c <fseek2+0x72>
    401e:	8c 81       	ldd	r24, Y+4	; 0x04
    4020:	9d 81       	ldd	r25, Y+5	; 0x05
    4022:	a0 e0       	ldi	r26, 0x00	; 0
    4024:	b0 e0       	ldi	r27, 0x00	; 0
    4026:	82 17       	cp	r24, r18
    4028:	93 07       	cpc	r25, r19
    402a:	a4 07       	cpc	r26, r20
    402c:	b5 07       	cpc	r27, r21
    402e:	b4 f0       	brlt	.+44     	; 0x405c <fseek2+0x72>
    {
        fp->fpos = temp;
        return -1;
    }
    if (position == 2)
    4030:	32 97       	sbiw	r30, 0x02	; 2
    4032:	19 f0       	breq	.+6      	; 0x403a <fseek2+0x50>
        fp->fpos = fp->size + offset;
    }
    if ((fp->fpos < 0) || (fp->fpos > fp->size))
    {
        fp->fpos = temp;
        return -1;
    4034:	20 e0       	ldi	r18, 0x00	; 0
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	1c c0       	rjmp	.+56     	; 0x4072 <fseek2+0x88>
        fp->fpos = temp;
        return -1;
    }
    if (position == 2)
    {
        fp->fpos = fp->size + offset;
    403a:	b8 01       	movw	r22, r16
    403c:	a7 01       	movw	r20, r14
    403e:	48 0f       	add	r20, r24
    4040:	59 1f       	adc	r21, r25
    4042:	6a 1f       	adc	r22, r26
    4044:	7b 1f       	adc	r23, r27
    4046:	4e 83       	std	Y+6, r20	; 0x06
    4048:	5f 83       	std	Y+7, r21	; 0x07
    404a:	68 87       	std	Y+8, r22	; 0x08
    404c:	79 87       	std	Y+9, r23	; 0x09
    }
    if ((fp->fpos < 0) || (fp->fpos > fp->size))
    404e:	77 fd       	sbrc	r23, 7
    4050:	05 c0       	rjmp	.+10     	; 0x405c <fseek2+0x72>
    4052:	84 17       	cp	r24, r20
    4054:	95 07       	cpc	r25, r21
    4056:	a6 07       	cpc	r26, r22
    4058:	b7 07       	cpc	r27, r23
    405a:	64 f7       	brge	.-40     	; 0x4034 <fseek2+0x4a>
    {
        fp->fpos = temp;
    405c:	c6 01       	movw	r24, r12
    405e:	aa 27       	eor	r26, r26
    4060:	97 fd       	sbrc	r25, 7
    4062:	a0 95       	com	r26
    4064:	ba 2f       	mov	r27, r26
    4066:	8e 83       	std	Y+6, r24	; 0x06
    4068:	9f 83       	std	Y+7, r25	; 0x07
    406a:	a8 87       	std	Y+8, r26	; 0x08
    406c:	b9 87       	std	Y+9, r27	; 0x09
    406e:	2f ef       	ldi	r18, 0xFF	; 255
    4070:	3f ef       	ldi	r19, 0xFF	; 255
        return -1;
    }
    return 0;
}
    4072:	c9 01       	movw	r24, r18
    4074:	df 91       	pop	r29
    4076:	cf 91       	pop	r28
    4078:	1f 91       	pop	r17
    407a:	0f 91       	pop	r16
    407c:	ff 90       	pop	r15
    407e:	ef 90       	pop	r14
    4080:	df 90       	pop	r13
    4082:	cf 90       	pop	r12
    4084:	08 95       	ret
        return 0;
    }
    temp = fp->fpos;
    if (position == 1)
    {
        fp->fpos = fp->fpos + offset;
    4086:	2e 0d       	add	r18, r14
    4088:	3f 1d       	adc	r19, r15
    408a:	40 1f       	adc	r20, r16
    408c:	51 1f       	adc	r21, r17
    408e:	2e 83       	std	Y+6, r18	; 0x06
    4090:	3f 83       	std	Y+7, r19	; 0x07
    4092:	48 87       	std	Y+8, r20	; 0x08
    4094:	59 87       	std	Y+9, r21	; 0x09
    4096:	c1 cf       	rjmp	.-126    	; 0x401a <fseek2+0x30>
{
    int temp;

    if (position == 0)
    {
        if (offset > fp->size)
    4098:	8c 81       	ldd	r24, Y+4	; 0x04
    409a:	9d 81       	ldd	r25, Y+5	; 0x05
    409c:	a0 e0       	ldi	r26, 0x00	; 0
    409e:	b0 e0       	ldi	r27, 0x00	; 0
    40a0:	84 17       	cp	r24, r20
    40a2:	95 07       	cpc	r25, r21
    40a4:	a6 07       	cpc	r26, r22
    40a6:	b7 07       	cpc	r27, r23
    40a8:	14 f3       	brlt	.-60     	; 0x406e <fseek2+0x84>
        {
            return -1;
        }
        fp->fpos = offset;
    40aa:	4e 83       	std	Y+6, r20	; 0x06
    40ac:	5f 83       	std	Y+7, r21	; 0x07
    40ae:	68 87       	std	Y+8, r22	; 0x08
    40b0:	79 87       	std	Y+9, r23	; 0x09
    40b2:	20 e0       	ldi	r18, 0x00	; 0
    40b4:	30 e0       	ldi	r19, 0x00	; 0
    40b6:	dd cf       	rjmp	.-70     	; 0x4072 <fseek2+0x88>

000040b8 <fdirnode>:
    formatFS();
}

//-------------------------------------------------------------------------
void fdirnode(char *buffer, int size, int addr)
{
    40b8:	5f 92       	push	r5
    40ba:	6f 92       	push	r6
    40bc:	7f 92       	push	r7
    40be:	8f 92       	push	r8
    40c0:	9f 92       	push	r9
    40c2:	af 92       	push	r10
    40c4:	bf 92       	push	r11
    40c6:	cf 92       	push	r12
    40c8:	df 92       	push	r13
    40ca:	ef 92       	push	r14
    40cc:	ff 92       	push	r15
    40ce:	0f 93       	push	r16
    40d0:	1f 93       	push	r17
    40d2:	df 93       	push	r29
    40d4:	cf 93       	push	r28
    40d6:	cd b7       	in	r28, 0x3d	; 61
    40d8:	de b7       	in	r29, 0x3e	; 62
    40da:	2d 97       	sbiw	r28, 0x0d	; 13
    40dc:	0f b6       	in	r0, 0x3f	; 63
    40de:	f8 94       	cli
    40e0:	de bf       	out	0x3e, r29	; 62
    40e2:	0f be       	out	0x3f, r0	; 63
    40e4:	cd bf       	out	0x3d, r28	; 61
    40e6:	3c 01       	movw	r6, r24
    40e8:	4b 01       	movw	r8, r22
    int len;
    char namebuffer[13];
    int i;
    char *q;

    p = buffer + size - 1;
    40ea:	08 94       	sec
    40ec:	81 08       	sbc	r8, r1
    40ee:	91 08       	sbc	r9, r1
    40f0:	88 0e       	add	r8, r24
    40f2:	99 1e       	adc	r9, r25
    *p = '\0';
    40f4:	d4 01       	movw	r26, r8
    40f6:	1c 92       	st	X, r1
    p--;
    40f8:	74 01       	movw	r14, r8
    40fa:	08 94       	sec
    40fc:	e1 08       	sbc	r14, r1
    40fe:	f1 08       	sbc	r15, r1
    4100:	6a 01       	movw	r12, r20
    4102:	5e 01       	movw	r10, r28
    4104:	08 94       	sec
    4106:	a1 1c       	adc	r10, r1
    4108:	b1 1c       	adc	r11, r1
    while (1)
    {
        getName(namebuffer, currentP);
        len = mystrlen(namebuffer);
        mystrncpy(p - len, namebuffer, len);
        *p = '/';
    410a:	8f e2       	ldi	r24, 0x2F	; 47
    410c:	58 2e       	mov	r5, r24
    *p = '\0';
    p--;
    currentP = addr;
    while (1)
    {
        getName(namebuffer, currentP);
    410e:	c5 01       	movw	r24, r10
    4110:	b6 01       	movw	r22, r12
    4112:	0e 94 38 2a 	call	0x5470	; 0x5470 <getName>
        len = mystrlen(namebuffer);
    4116:	c5 01       	movw	r24, r10
    4118:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    411c:	48 2f       	mov	r20, r24
        mystrncpy(p - len, namebuffer, len);
    411e:	08 2f       	mov	r16, r24
    4120:	19 2f       	mov	r17, r25
    4122:	c7 01       	movw	r24, r14
    4124:	80 1b       	sub	r24, r16
    4126:	91 0b       	sbc	r25, r17
    4128:	b5 01       	movw	r22, r10
    412a:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
        *p = '/';
    412e:	f7 01       	movw	r30, r14
    4130:	50 82       	st	Z, r5
        p = p - len - 1;
    4132:	00 95       	com	r16
    4134:	10 95       	com	r17
    4136:	e0 0e       	add	r14, r16
    4138:	f1 1e       	adc	r15, r17
        currentP = fsread8uint(currentP, 31);
    413a:	c6 01       	movw	r24, r12
    413c:	6f e1       	ldi	r22, 0x1F	; 31
    413e:	70 e0       	ldi	r23, 0x00	; 0
    4140:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    4144:	c8 2e       	mov	r12, r24
    4146:	dd 24       	eor	r13, r13
        if (currentP == 0)
    4148:	c1 14       	cp	r12, r1
    414a:	d1 04       	cpc	r13, r1
    414c:	01 f7       	brne	.-64     	; 0x410e <fdirnode+0x56>
        {
            break;
        }
    }
    *p = '/';
    414e:	d7 01       	movw	r26, r14
    4150:	5c 92       	st	X, r5
    len = buffer + size - 1 - p;
    4152:	b4 01       	movw	r22, r8
    4154:	6e 19       	sub	r22, r14
    4156:	7f 09       	sbc	r23, r15
    q = buffer;
    for (i = 0; i < len; i++)
    4158:	16 16       	cp	r1, r22
    415a:	17 06       	cpc	r1, r23
    415c:	5c f5       	brge	.+86     	; 0x41b4 <fdirnode+0xfc>
    415e:	f3 01       	movw	r30, r6
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	4f e2       	ldi	r20, 0x2F	; 47
    4166:	05 c0       	rjmp	.+10     	; 0x4172 <fdirnode+0xba>
    {
        *q++ = *p++;
    4168:	08 94       	sec
    416a:	e1 1c       	adc	r14, r1
    416c:	f1 1c       	adc	r15, r1
    416e:	d7 01       	movw	r26, r14
    4170:	4c 91       	ld	r20, X
    4172:	41 93       	st	Z+, r20
        }
    }
    *p = '/';
    len = buffer + size - 1 - p;
    q = buffer;
    for (i = 0; i < len; i++)
    4174:	2f 5f       	subi	r18, 0xFF	; 255
    4176:	3f 4f       	sbci	r19, 0xFF	; 255
    4178:	26 17       	cp	r18, r22
    417a:	37 07       	cpc	r19, r23
    417c:	ac f3       	brlt	.-22     	; 0x4168 <fdirnode+0xb0>
    {
        *q++ = *p++;
    417e:	f3 01       	movw	r30, r6
    4180:	e6 0f       	add	r30, r22
    4182:	f7 1f       	adc	r31, r23
    }

    q--;
    *q = '\0';
    4184:	31 97       	sbiw	r30, 0x01	; 1
    4186:	10 82       	st	Z, r1
    return;
}
    4188:	2d 96       	adiw	r28, 0x0d	; 13
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	f8 94       	cli
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	cf 91       	pop	r28
    4196:	df 91       	pop	r29
    4198:	1f 91       	pop	r17
    419a:	0f 91       	pop	r16
    419c:	ff 90       	pop	r15
    419e:	ef 90       	pop	r14
    41a0:	df 90       	pop	r13
    41a2:	cf 90       	pop	r12
    41a4:	bf 90       	pop	r11
    41a6:	af 90       	pop	r10
    41a8:	9f 90       	pop	r9
    41aa:	8f 90       	pop	r8
    41ac:	7f 90       	pop	r7
    41ae:	6f 90       	pop	r6
    41b0:	5f 90       	pop	r5
    41b2:	08 95       	ret
        }
    }
    *p = '/';
    len = buffer + size - 1 - p;
    q = buffer;
    for (i = 0; i < len; i++)
    41b4:	f3 01       	movw	r30, r6
    41b6:	e6 cf       	rjmp	.-52     	; 0x4184 <fdirnode+0xcc>

000041b8 <formatSystem>:
}

//-------------------------------------------------------------------------
void formatSystem()
{
    formatFS();
    41b8:	0e 94 33 29 	call	0x5266	; 0x5266 <formatFS>
}
    41bc:	08 95       	ret

000041be <fsearch>:
    buffer[14] = fsread8uint(addr, 30);
}

//-------------------------------------------------------------------------
void fsearch(uint8_t * addrlist, uint8_t * size, char *string)
{
    41be:	cf 92       	push	r12
    41c0:	df 92       	push	r13
    41c2:	ef 92       	push	r14
    41c4:	ff 92       	push	r15
    41c6:	1f 93       	push	r17
    41c8:	cf 93       	push	r28
    41ca:	df 93       	push	r29
    41cc:	6c 01       	movw	r12, r24
    41ce:	eb 01       	movw	r28, r22
    41d0:	7a 01       	movw	r14, r20
    uint8_t i;
    uint8_t *p;

    p = addrlist;
    *size = 0;
    41d2:	18 82       	st	Y, r1
    41d4:	11 e0       	ldi	r17, 0x01	; 1
    41d6:	03 c0       	rjmp	.+6      	; 0x41de <fsearch+0x20>
    for (i = 1; i <= INODENUM; i++)
    41d8:	1f 5f       	subi	r17, 0xFF	; 255
    41da:	11 36       	cpi	r17, 0x61	; 97
    41dc:	89 f0       	breq	.+34     	; 0x4200 <fsearch+0x42>
    {
        if (inodeMatch(i, string) == 1)
    41de:	81 2f       	mov	r24, r17
    41e0:	b7 01       	movw	r22, r14
    41e2:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <inodeMatch>
    41e6:	01 97       	sbiw	r24, 0x01	; 1
    41e8:	b9 f7       	brne	.-18     	; 0x41d8 <fsearch+0x1a>
        {
            p[*size] = i;
    41ea:	88 81       	ld	r24, Y
    41ec:	f6 01       	movw	r30, r12
    41ee:	e8 0f       	add	r30, r24
    41f0:	f1 1d       	adc	r31, r1
    41f2:	10 83       	st	Z, r17
            (*size)++;
    41f4:	88 81       	ld	r24, Y
    41f6:	8f 5f       	subi	r24, 0xFF	; 255
    41f8:	88 83       	st	Y, r24
    uint8_t i;
    uint8_t *p;

    p = addrlist;
    *size = 0;
    for (i = 1; i <= INODENUM; i++)
    41fa:	1f 5f       	subi	r17, 0xFF	; 255
    41fc:	11 36       	cpi	r17, 0x61	; 97
    41fe:	79 f7       	brne	.-34     	; 0x41de <fsearch+0x20>
            p[*size] = i;
            (*size)++;
        }
    }
    return;
}
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	1f 91       	pop	r17
    4206:	ff 90       	pop	r15
    4208:	ef 90       	pop	r14
    420a:	df 90       	pop	r13
    420c:	cf 90       	pop	r12
    420e:	08 95       	ret

00004210 <finfonode>:
    return;
}

//-------------------------------------------------------------------------
void finfonode(char *buffer, int addr)
{
    4210:	ef 92       	push	r14
    4212:	ff 92       	push	r15
    4214:	0f 93       	push	r16
    4216:	1f 93       	push	r17
    4218:	7c 01       	movw	r14, r24
    421a:	8b 01       	movw	r16, r22
    fsreadBytes(addr, FILENAMEOFFSET, 12, buffer);
    421c:	cb 01       	movw	r24, r22
    421e:	60 e0       	ldi	r22, 0x00	; 0
    4220:	70 e0       	ldi	r23, 0x00	; 0
    4222:	4c e0       	ldi	r20, 0x0C	; 12
    4224:	50 e0       	ldi	r21, 0x00	; 0
    4226:	97 01       	movw	r18, r14
    4228:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <fsreadBytes>
    buffer[12] = fsread8uint(addr, TYPEOFFSET);
    422c:	c8 01       	movw	r24, r16
    422e:	6c e0       	ldi	r22, 0x0C	; 12
    4230:	70 e0       	ldi	r23, 0x00	; 0
    4232:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    4236:	f7 01       	movw	r30, r14
    4238:	84 87       	std	Z+12, r24	; 0x0c
    buffer[13] = fsread8uint(addr, 29);
    423a:	c8 01       	movw	r24, r16
    423c:	6d e1       	ldi	r22, 0x1D	; 29
    423e:	70 e0       	ldi	r23, 0x00	; 0
    4240:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    4244:	f7 01       	movw	r30, r14
    4246:	85 87       	std	Z+13, r24	; 0x0d
    buffer[14] = fsread8uint(addr, 30);
    4248:	c8 01       	movw	r24, r16
    424a:	6e e1       	ldi	r22, 0x1E	; 30
    424c:	70 e0       	ldi	r23, 0x00	; 0
    424e:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    4252:	f7 01       	movw	r30, r14
    4254:	86 87       	std	Z+14, r24	; 0x0e
}
    4256:	1f 91       	pop	r17
    4258:	0f 91       	pop	r16
    425a:	ff 90       	pop	r15
    425c:	ef 90       	pop	r14
    425e:	08 95       	ret

00004260 <fcurrentdir>:
    return;
}

//-------------------------------------------------------------------------
void fcurrentdir(char *buffer, int size)
{
    4260:	5f 92       	push	r5
    4262:	6f 92       	push	r6
    4264:	7f 92       	push	r7
    4266:	8f 92       	push	r8
    4268:	9f 92       	push	r9
    426a:	af 92       	push	r10
    426c:	bf 92       	push	r11
    426e:	cf 92       	push	r12
    4270:	df 92       	push	r13
    4272:	ef 92       	push	r14
    4274:	ff 92       	push	r15
    4276:	0f 93       	push	r16
    4278:	1f 93       	push	r17
    427a:	df 93       	push	r29
    427c:	cf 93       	push	r28
    427e:	cd b7       	in	r28, 0x3d	; 61
    4280:	de b7       	in	r29, 0x3e	; 62
    4282:	2d 97       	sbiw	r28, 0x0d	; 13
    4284:	0f b6       	in	r0, 0x3f	; 63
    4286:	f8 94       	cli
    4288:	de bf       	out	0x3e, r29	; 62
    428a:	0f be       	out	0x3f, r0	; 63
    428c:	cd bf       	out	0x3d, r28	; 61
    428e:	3c 01       	movw	r6, r24
    4290:	4b 01       	movw	r8, r22
    int len;
    char namebuffer[13];
    int i;
    char *q;

    p = buffer + size - 1;
    4292:	08 94       	sec
    4294:	81 08       	sbc	r8, r1
    4296:	91 08       	sbc	r9, r1
    4298:	88 0e       	add	r8, r24
    429a:	99 1e       	adc	r9, r25
    *p = '\0';
    429c:	d4 01       	movw	r26, r8
    429e:	1c 92       	st	X, r1
    p--;
    42a0:	74 01       	movw	r14, r8
    42a2:	08 94       	sec
    42a4:	e1 08       	sbc	r14, r1
    42a6:	f1 08       	sbc	r15, r1
    currentP = getPwd();
    42a8:	0e 94 ee 29 	call	0x53dc	; 0x53dc <getPwd>
    42ac:	6c 01       	movw	r12, r24
    42ae:	5e 01       	movw	r10, r28
    42b0:	08 94       	sec
    42b2:	a1 1c       	adc	r10, r1
    42b4:	b1 1c       	adc	r11, r1
    while (1)
    {
        getName(namebuffer, currentP);
        len = mystrlen(namebuffer);
        mystrncpy(p - len, namebuffer, len);
        *p = '/';
    42b6:	9f e2       	ldi	r25, 0x2F	; 47
    42b8:	59 2e       	mov	r5, r25
    *p = '\0';
    p--;
    currentP = getPwd();
    while (1)
    {
        getName(namebuffer, currentP);
    42ba:	c5 01       	movw	r24, r10
    42bc:	b6 01       	movw	r22, r12
    42be:	0e 94 38 2a 	call	0x5470	; 0x5470 <getName>
        len = mystrlen(namebuffer);
    42c2:	c5 01       	movw	r24, r10
    42c4:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    42c8:	48 2f       	mov	r20, r24
        mystrncpy(p - len, namebuffer, len);
    42ca:	08 2f       	mov	r16, r24
    42cc:	19 2f       	mov	r17, r25
    42ce:	c7 01       	movw	r24, r14
    42d0:	80 1b       	sub	r24, r16
    42d2:	91 0b       	sbc	r25, r17
    42d4:	b5 01       	movw	r22, r10
    42d6:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
        *p = '/';
    42da:	f7 01       	movw	r30, r14
    42dc:	50 82       	st	Z, r5
        p = p - len - 1;
    42de:	00 95       	com	r16
    42e0:	10 95       	com	r17
    42e2:	e0 0e       	add	r14, r16
    42e4:	f1 1e       	adc	r15, r17
        currentP = fsread8uint(currentP, 31);
    42e6:	c6 01       	movw	r24, r12
    42e8:	6f e1       	ldi	r22, 0x1F	; 31
    42ea:	70 e0       	ldi	r23, 0x00	; 0
    42ec:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    42f0:	c8 2e       	mov	r12, r24
    42f2:	dd 24       	eor	r13, r13
        if (currentP == 0)
    42f4:	c1 14       	cp	r12, r1
    42f6:	d1 04       	cpc	r13, r1
    42f8:	01 f7       	brne	.-64     	; 0x42ba <fcurrentdir+0x5a>
        {
            break;
        }
    }
    *p = '/';
    42fa:	d7 01       	movw	r26, r14
    42fc:	5c 92       	st	X, r5
    len = buffer + size - 1 - p;
    42fe:	b4 01       	movw	r22, r8
    4300:	6e 19       	sub	r22, r14
    4302:	7f 09       	sbc	r23, r15
    q = buffer;
    for (i = 0; i < len; i++)
    4304:	16 16       	cp	r1, r22
    4306:	17 06       	cpc	r1, r23
    4308:	5c f5       	brge	.+86     	; 0x4360 <fcurrentdir+0x100>
    430a:	f3 01       	movw	r30, r6
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	4f e2       	ldi	r20, 0x2F	; 47
    4312:	05 c0       	rjmp	.+10     	; 0x431e <fcurrentdir+0xbe>
    {
        *q++ = *p++;
    4314:	08 94       	sec
    4316:	e1 1c       	adc	r14, r1
    4318:	f1 1c       	adc	r15, r1
    431a:	d7 01       	movw	r26, r14
    431c:	4c 91       	ld	r20, X
    431e:	41 93       	st	Z+, r20
        }
    }
    *p = '/';
    len = buffer + size - 1 - p;
    q = buffer;
    for (i = 0; i < len; i++)
    4320:	2f 5f       	subi	r18, 0xFF	; 255
    4322:	3f 4f       	sbci	r19, 0xFF	; 255
    4324:	26 17       	cp	r18, r22
    4326:	37 07       	cpc	r19, r23
    4328:	ac f3       	brlt	.-22     	; 0x4314 <fcurrentdir+0xb4>
    {
        *q++ = *p++;
    432a:	f3 01       	movw	r30, r6
    432c:	e6 0f       	add	r30, r22
    432e:	f7 1f       	adc	r31, r23
    }

    q--;
    *q = '\0';
    4330:	31 97       	sbiw	r30, 0x01	; 1
    4332:	10 82       	st	Z, r1
    return;
}
    4334:	2d 96       	adiw	r28, 0x0d	; 13
    4336:	0f b6       	in	r0, 0x3f	; 63
    4338:	f8 94       	cli
    433a:	de bf       	out	0x3e, r29	; 62
    433c:	0f be       	out	0x3f, r0	; 63
    433e:	cd bf       	out	0x3d, r28	; 61
    4340:	cf 91       	pop	r28
    4342:	df 91       	pop	r29
    4344:	1f 91       	pop	r17
    4346:	0f 91       	pop	r16
    4348:	ff 90       	pop	r15
    434a:	ef 90       	pop	r14
    434c:	df 90       	pop	r13
    434e:	cf 90       	pop	r12
    4350:	bf 90       	pop	r11
    4352:	af 90       	pop	r10
    4354:	9f 90       	pop	r9
    4356:	8f 90       	pop	r8
    4358:	7f 90       	pop	r7
    435a:	6f 90       	pop	r6
    435c:	5f 90       	pop	r5
    435e:	08 95       	ret
        }
    }
    *p = '/';
    len = buffer + size - 1 - p;
    q = buffer;
    for (i = 0; i < len; i++)
    4360:	f3 01       	movw	r30, r6
    4362:	e6 cf       	rjmp	.-52     	; 0x4330 <fcurrentdir+0xd0>

00004364 <fexist2>:
    return 0;
}

//-------------------------------------------------------------------------
int fexist2(char *pathname)
{
    4364:	df 93       	push	r29
    4366:	cf 93       	push	r28
    4368:	00 d0       	rcall	.+0      	; 0x436a <fexist2+0x6>
    436a:	cd b7       	in	r28, 0x3d	; 61
    436c:	de b7       	in	r29, 0x3e	; 62
    int retaddr, state;

    retaddr = locateFileName(pathname, &state);
    436e:	be 01       	movw	r22, r28
    4370:	6f 5f       	subi	r22, 0xFF	; 255
    4372:	7f 4f       	sbci	r23, 0xFF	; 255
    4374:	0e 94 b3 2c 	call	0x5966	; 0x5966 <locateFileName>
    4378:	9c 01       	movw	r18, r24
    if ((retaddr == -1) || (state == 0))
    437a:	8f ef       	ldi	r24, 0xFF	; 255
    437c:	2f 3f       	cpi	r18, 0xFF	; 255
    437e:	38 07       	cpc	r19, r24
    4380:	31 f4       	brne	.+12     	; 0x438e <fexist2+0x2a>
    }
    else
    {
        return retaddr;
    }
}
    4382:	c9 01       	movw	r24, r18
    4384:	0f 90       	pop	r0
    4386:	0f 90       	pop	r0
    4388:	cf 91       	pop	r28
    438a:	df 91       	pop	r29
    438c:	08 95       	ret
int fexist2(char *pathname)
{
    int retaddr, state;

    retaddr = locateFileName(pathname, &state);
    if ((retaddr == -1) || (state == 0))
    438e:	89 81       	ldd	r24, Y+1	; 0x01
    4390:	9a 81       	ldd	r25, Y+2	; 0x02
    4392:	89 2b       	or	r24, r25
    4394:	b1 f7       	brne	.-20     	; 0x4382 <fexist2+0x1e>
    4396:	2f ef       	ldi	r18, 0xFF	; 255
    4398:	3f ef       	ldi	r19, 0xFF	; 255
    439a:	f3 cf       	rjmp	.-26     	; 0x4382 <fexist2+0x1e>

0000439c <fchangedir>:
    return 0;
}

//-------------------------------------------------------------------------
void fchangedir(char *path)
{
    439c:	df 93       	push	r29
    439e:	cf 93       	push	r28
    43a0:	00 d0       	rcall	.+0      	; 0x43a2 <fchangedir+0x6>
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
    int ret, state;

    ret = locateFileName(path, &state);
    43a6:	be 01       	movw	r22, r28
    43a8:	6f 5f       	subi	r22, 0xFF	; 255
    43aa:	7f 4f       	sbci	r23, 0xFF	; 255
    43ac:	0e 94 b3 2c 	call	0x5966	; 0x5966 <locateFileName>
    setPwd(ret);
    43b0:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <setPwd>
    return;
}
    43b4:	0f 90       	pop	r0
    43b6:	0f 90       	pop	r0
    43b8:	cf 91       	pop	r28
    43ba:	df 91       	pop	r29
    43bc:	08 95       	ret

000043be <fcopy>:
    return 0;
}

//-------------------------------------------------------------------------
int fcopy(char *source, char *target)
{
    43be:	6f 92       	push	r6
    43c0:	7f 92       	push	r7
    43c2:	8f 92       	push	r8
    43c4:	9f 92       	push	r9
    43c6:	af 92       	push	r10
    43c8:	bf 92       	push	r11
    43ca:	cf 92       	push	r12
    43cc:	df 92       	push	r13
    43ce:	ef 92       	push	r14
    43d0:	ff 92       	push	r15
    43d2:	0f 93       	push	r16
    43d4:	1f 93       	push	r17
    43d6:	df 93       	push	r29
    43d8:	cf 93       	push	r28
    43da:	00 d0       	rcall	.+0      	; 0x43dc <fcopy+0x1e>
    43dc:	00 d0       	rcall	.+0      	; 0x43de <fcopy+0x20>
    43de:	cd b7       	in	r28, 0x3d	; 61
    43e0:	de b7       	in	r29, 0x3e	; 62
    43e2:	7c 01       	movw	r14, r24
    43e4:	8b 01       	movw	r16, r22
    char *p;
    char *q;
    int NewNode;
    uint8_t namelength;

    p = extractLastName(target);
    43e6:	cb 01       	movw	r24, r22
    43e8:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <extractLastName>
    43ec:	b8 2e       	mov	r11, r24
    43ee:	a9 2e       	mov	r10, r25
    q = target + mystrlen(target);
    43f0:	c8 01       	movw	r24, r16
    43f2:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    43f6:	6c 01       	movw	r12, r24
    namelength = q - p;
    ret1 = locateFileName(source, &state1);
    43f8:	c7 01       	movw	r24, r14
    43fa:	be 01       	movw	r22, r28
    43fc:	6f 5f       	subi	r22, 0xFF	; 255
    43fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4400:	0e 94 b3 2c 	call	0x5966	; 0x5966 <locateFileName>
    4404:	4c 01       	movw	r8, r24
    ret2 = locateFileName(target, &state2);
    4406:	c8 01       	movw	r24, r16
    4408:	be 01       	movw	r22, r28
    440a:	6d 5f       	subi	r22, 0xFD	; 253
    440c:	7f 4f       	sbci	r23, 0xFF	; 255
    440e:	0e 94 b3 2c 	call	0x5966	; 0x5966 <locateFileName>
    4412:	f8 2e       	mov	r15, r24
    NewNode = getVectorNode();
    4414:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <getVectorNode>
    4418:	78 2e       	mov	r7, r24
    441a:	69 2e       	mov	r6, r25
    copyVectorNode(ret1, NewNode);
    441c:	c4 01       	movw	r24, r8
    441e:	67 2d       	mov	r22, r7
    4420:	76 2d       	mov	r23, r6
    4422:	0e 94 22 28 	call	0x5044	; 0x5044 <copyVectorNode>
    fswriteBytes(NewNode, FILENAMEOFFSET, namelength, p);
    4426:	0c 0d       	add	r16, r12
    4428:	1d 1d       	adc	r17, r13
    442a:	0b 19       	sub	r16, r11
    442c:	87 2d       	mov	r24, r7
    442e:	96 2d       	mov	r25, r6
    4430:	60 e0       	ldi	r22, 0x00	; 0
    4432:	70 e0       	ldi	r23, 0x00	; 0
    4434:	40 2f       	mov	r20, r16
    4436:	50 e0       	ldi	r21, 0x00	; 0
    4438:	2b 2d       	mov	r18, r11
    443a:	3a 2d       	mov	r19, r10
    443c:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <fswriteBytes>
    fswrite8uint(NewNode, FILENAMEOFFSET + namelength, 0);
    4440:	87 2d       	mov	r24, r7
    4442:	96 2d       	mov	r25, r6
    4444:	60 2f       	mov	r22, r16
    4446:	70 e0       	ldi	r23, 0x00	; 0
    4448:	40 e0       	ldi	r20, 0x00	; 0
    444a:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
    fswrite8uint(NewNode, FILE_PARENTOFFSET, ret2);
    444e:	87 2d       	mov	r24, r7
    4450:	96 2d       	mov	r25, r6
    4452:	6f e1       	ldi	r22, 0x1F	; 31
    4454:	70 e0       	ldi	r23, 0x00	; 0
    4456:	4f 2d       	mov	r20, r15
    4458:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
    addChildNode(ret2, NewNode);
    445c:	8f 2d       	mov	r24, r15
    445e:	67 2d       	mov	r22, r7
    4460:	0e 94 93 2a 	call	0x5526	; 0x5526 <addChildNode>
    4464:	2e e0       	ldi	r18, 0x0E	; 14
    4466:	e2 2e       	mov	r14, r18
    4468:	f1 2c       	mov	r15, r1
    446a:	07 c0       	rjmp	.+14     	; 0x447a <fcopy+0xbc>
        temp = fsread8uint(ret1, FILE_ADDRPAGEOFFSET + i);
        if (temp > 0)
        {
            temp1 = getFlashPage();
            fswrite8uint(NewNode, FILE_ADDRPAGEOFFSET + i, temp1);
            copyVectorPage(temp, temp1);
    446c:	08 94       	sec
    446e:	e1 1c       	adc	r14, r1
    4470:	f1 1c       	adc	r15, r1
    copyVectorNode(ret1, NewNode);
    fswriteBytes(NewNode, FILENAMEOFFSET, namelength, p);
    fswrite8uint(NewNode, FILENAMEOFFSET + namelength, 0);
    fswrite8uint(NewNode, FILE_PARENTOFFSET, ret2);
    addChildNode(ret2, NewNode);
    for (i = 0; i < 8; i++)
    4472:	86 e1       	ldi	r24, 0x16	; 22
    4474:	e8 16       	cp	r14, r24
    4476:	f1 04       	cpc	r15, r1
    4478:	e9 f0       	breq	.+58     	; 0x44b4 <fcopy+0xf6>
    {
        uint8_t temp, temp1;

        temp = fsread8uint(ret1, FILE_ADDRPAGEOFFSET + i);
    447a:	c4 01       	movw	r24, r8
    447c:	b7 01       	movw	r22, r14
    447e:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    4482:	08 2f       	mov	r16, r24
        if (temp > 0)
    4484:	88 23       	and	r24, r24
    4486:	91 f3       	breq	.-28     	; 0x446c <fcopy+0xae>
        {
            temp1 = getFlashPage();
    4488:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <getFlashPage>
    448c:	18 2f       	mov	r17, r24
            fswrite8uint(NewNode, FILE_ADDRPAGEOFFSET + i, temp1);
    448e:	87 2d       	mov	r24, r7
    4490:	96 2d       	mov	r25, r6
    4492:	b7 01       	movw	r22, r14
    4494:	41 2f       	mov	r20, r17
    4496:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
            copyVectorPage(temp, temp1);
    449a:	80 2f       	mov	r24, r16
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	61 2f       	mov	r22, r17
    44a0:	70 e0       	ldi	r23, 0x00	; 0
    44a2:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <copyVectorPage>
    44a6:	08 94       	sec
    44a8:	e1 1c       	adc	r14, r1
    44aa:	f1 1c       	adc	r15, r1
    copyVectorNode(ret1, NewNode);
    fswriteBytes(NewNode, FILENAMEOFFSET, namelength, p);
    fswrite8uint(NewNode, FILENAMEOFFSET + namelength, 0);
    fswrite8uint(NewNode, FILE_PARENTOFFSET, ret2);
    addChildNode(ret2, NewNode);
    for (i = 0; i < 8; i++)
    44ac:	86 e1       	ldi	r24, 0x16	; 22
    44ae:	e8 16       	cp	r14, r24
    44b0:	f1 04       	cpc	r15, r1
    44b2:	19 f7       	brne	.-58     	; 0x447a <fcopy+0xbc>
            fswrite8uint(NewNode, FILE_ADDRPAGEOFFSET + i, temp1);
            copyVectorPage(temp, temp1);
        }
    }
    return 0;
}
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0f 90       	pop	r0
    44ba:	0f 90       	pop	r0
    44bc:	0f 90       	pop	r0
    44be:	0f 90       	pop	r0
    44c0:	cf 91       	pop	r28
    44c2:	df 91       	pop	r29
    44c4:	1f 91       	pop	r17
    44c6:	0f 91       	pop	r16
    44c8:	ff 90       	pop	r15
    44ca:	ef 90       	pop	r14
    44cc:	df 90       	pop	r13
    44ce:	cf 90       	pop	r12
    44d0:	bf 90       	pop	r11
    44d2:	af 90       	pop	r10
    44d4:	9f 90       	pop	r9
    44d6:	8f 90       	pop	r8
    44d8:	7f 90       	pop	r7
    44da:	6f 90       	pop	r6
    44dc:	08 95       	ret

000044de <fmove>:
    return 0;
}

//-------------------------------------------------------------------------
int fmove(char *source, char *target)
{
    44de:	9f 92       	push	r9
    44e0:	af 92       	push	r10
    44e2:	bf 92       	push	r11
    44e4:	cf 92       	push	r12
    44e6:	df 92       	push	r13
    44e8:	ef 92       	push	r14
    44ea:	ff 92       	push	r15
    44ec:	0f 93       	push	r16
    44ee:	1f 93       	push	r17
    44f0:	df 93       	push	r29
    44f2:	cf 93       	push	r28
    44f4:	00 d0       	rcall	.+0      	; 0x44f6 <fmove+0x18>
    44f6:	00 d0       	rcall	.+0      	; 0x44f8 <fmove+0x1a>
    44f8:	cd b7       	in	r28, 0x3d	; 61
    44fa:	de b7       	in	r29, 0x3e	; 62
    44fc:	7c 01       	movw	r14, r24
    44fe:	8b 01       	movw	r16, r22
    int state1, state2;
    uint8_t parent;
    char *p, *q;
    uint8_t namelength;

    p = extractLastName(target);
    4500:	cb 01       	movw	r24, r22
    4502:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <extractLastName>
    4506:	a8 2e       	mov	r10, r24
    4508:	99 2e       	mov	r9, r25
    q = target + mystrlen(target);
    450a:	c8 01       	movw	r24, r16
    450c:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    4510:	6c 01       	movw	r12, r24
    namelength = q - p;
    ret1 = locateFileName(source, &state1);
    4512:	c7 01       	movw	r24, r14
    4514:	be 01       	movw	r22, r28
    4516:	6f 5f       	subi	r22, 0xFF	; 255
    4518:	7f 4f       	sbci	r23, 0xFF	; 255
    451a:	0e 94 b3 2c 	call	0x5966	; 0x5966 <locateFileName>
    451e:	f8 2e       	mov	r15, r24
    4520:	e9 2e       	mov	r14, r25
    parent = fsread8uint(ret1, FILE_PARENTOFFSET);
    4522:	6f e1       	ldi	r22, 0x1F	; 31
    4524:	70 e0       	ldi	r23, 0x00	; 0
    4526:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    removeChildNode(parent, ret1);
    452a:	6f 2d       	mov	r22, r15
    452c:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <removeChildNode>
    ret2 = locateFileName(target, &state2);
    4530:	c8 01       	movw	r24, r16
    4532:	be 01       	movw	r22, r28
    4534:	6d 5f       	subi	r22, 0xFD	; 253
    4536:	7f 4f       	sbci	r23, 0xFF	; 255
    4538:	0e 94 b3 2c 	call	0x5966	; 0x5966 <locateFileName>
    453c:	b8 2e       	mov	r11, r24
    fswrite8uint(ret1, FILE_PARENTOFFSET, ret2);
    453e:	8f 2d       	mov	r24, r15
    4540:	9e 2d       	mov	r25, r14
    4542:	6f e1       	ldi	r22, 0x1F	; 31
    4544:	70 e0       	ldi	r23, 0x00	; 0
    4546:	4b 2d       	mov	r20, r11
    4548:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
    fswriteBytes(ret1, FILENAMEOFFSET, namelength, p);
    454c:	0c 0d       	add	r16, r12
    454e:	1d 1d       	adc	r17, r13
    4550:	0a 19       	sub	r16, r10
    4552:	8f 2d       	mov	r24, r15
    4554:	9e 2d       	mov	r25, r14
    4556:	60 e0       	ldi	r22, 0x00	; 0
    4558:	70 e0       	ldi	r23, 0x00	; 0
    455a:	40 2f       	mov	r20, r16
    455c:	50 e0       	ldi	r21, 0x00	; 0
    455e:	2a 2d       	mov	r18, r10
    4560:	39 2d       	mov	r19, r9
    4562:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <fswriteBytes>
    fswrite8uint(ret1, FILENAMEOFFSET + namelength, 0);
    4566:	8f 2d       	mov	r24, r15
    4568:	9e 2d       	mov	r25, r14
    456a:	60 2f       	mov	r22, r16
    456c:	70 e0       	ldi	r23, 0x00	; 0
    456e:	40 e0       	ldi	r20, 0x00	; 0
    4570:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
    addChildNode(ret2, ret1);
    4574:	8b 2d       	mov	r24, r11
    4576:	6f 2d       	mov	r22, r15
    4578:	0e 94 93 2a 	call	0x5526	; 0x5526 <addChildNode>
    return 0;
}
    457c:	80 e0       	ldi	r24, 0x00	; 0
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	0f 90       	pop	r0
    4582:	0f 90       	pop	r0
    4584:	0f 90       	pop	r0
    4586:	0f 90       	pop	r0
    4588:	cf 91       	pop	r28
    458a:	df 91       	pop	r29
    458c:	1f 91       	pop	r17
    458e:	0f 91       	pop	r16
    4590:	ff 90       	pop	r15
    4592:	ef 90       	pop	r14
    4594:	df 90       	pop	r13
    4596:	cf 90       	pop	r12
    4598:	bf 90       	pop	r11
    459a:	af 90       	pop	r10
    459c:	9f 90       	pop	r9
    459e:	08 95       	ret

000045a0 <fwrite2>:
    return 0;
}

//-------------------------------------------------------------------------
int fwrite2(MYFILE * fp, void *buffer, int nBytes)
{
    45a0:	2f 92       	push	r2
    45a2:	3f 92       	push	r3
    45a4:	4f 92       	push	r4
    45a6:	5f 92       	push	r5
    45a8:	6f 92       	push	r6
    45aa:	7f 92       	push	r7
    45ac:	8f 92       	push	r8
    45ae:	9f 92       	push	r9
    45b0:	af 92       	push	r10
    45b2:	bf 92       	push	r11
    45b4:	cf 92       	push	r12
    45b6:	df 92       	push	r13
    45b8:	ef 92       	push	r14
    45ba:	ff 92       	push	r15
    45bc:	0f 93       	push	r16
    45be:	1f 93       	push	r17
    45c0:	cf 93       	push	r28
    45c2:	df 93       	push	r29
    45c4:	ec 01       	movw	r28, r24
    45c6:	2b 01       	movw	r4, r22
    45c8:	3a 01       	movw	r6, r20
    uint8_t realsector;
    int readbytes;
    int pagenum, blockoffset, pageoffset;

    //first it checks whether there is enough space for the writing to take place, then it does the actual writing in the same way as above 
    if (fp->fpos + nBytes <= fp->size)
    45ca:	ee 80       	ldd	r14, Y+6	; 0x06
    45cc:	ff 80       	ldd	r15, Y+7	; 0x07
    45ce:	08 85       	ldd	r16, Y+8	; 0x08
    45d0:	19 85       	ldd	r17, Y+9	; 0x09
    45d2:	5a 01       	movw	r10, r20
    45d4:	cc 24       	eor	r12, r12
    45d6:	b7 fc       	sbrc	r11, 7
    45d8:	c0 94       	com	r12
    45da:	dc 2c       	mov	r13, r12
    45dc:	a6 01       	movw	r20, r12
    45de:	95 01       	movw	r18, r10
    45e0:	2e 0d       	add	r18, r14
    45e2:	3f 1d       	adc	r19, r15
    45e4:	40 1f       	adc	r20, r16
    45e6:	51 1f       	adc	r21, r17
    45e8:	6c 81       	ldd	r22, Y+4	; 0x04
    45ea:	7d 81       	ldd	r23, Y+5	; 0x05
    45ec:	cb 01       	movw	r24, r22
    45ee:	a0 e0       	ldi	r26, 0x00	; 0
    45f0:	b0 e0       	ldi	r27, 0x00	; 0
    45f2:	82 17       	cp	r24, r18
    45f4:	93 07       	cpc	r25, r19
    45f6:	a4 07       	cpc	r26, r20
    45f8:	b5 07       	cpc	r27, r21
    45fa:	ec f4       	brge	.+58     	; 0x4636 <fwrite2+0x96>
    }
    else
    {
        uint16_t allocate;

        allocate = (fp->size / 2048) * 2048;
    45fc:	97 2f       	mov	r25, r23
    45fe:	98 7f       	andi	r25, 0xF8	; 248
    4600:	80 e0       	ldi	r24, 0x00	; 0
        if (fp->size % 2048 > 0)
    4602:	77 70       	andi	r23, 0x07	; 7
    4604:	67 2b       	or	r22, r23
    4606:	11 f0       	breq	.+4      	; 0x460c <fwrite2+0x6c>
        {
            allocate += 2048;
    4608:	80 50       	subi	r24, 0x00	; 0
    460a:	98 4f       	sbci	r25, 0xF8	; 248
        }
        //     if ((allocate == 32768)&&(fp->fpos + nBytes > 32768))
        //         foobar(); 
        if (fp->fpos + nBytes > allocate)
    460c:	a0 e0       	ldi	r26, 0x00	; 0
    460e:	b0 e0       	ldi	r27, 0x00	; 0
    4610:	82 17       	cp	r24, r18
    4612:	93 07       	cpc	r25, r19
    4614:	a4 07       	cpc	r26, r20
    4616:	b5 07       	cpc	r27, r21
    4618:	0c f4       	brge	.+2      	; 0x461c <fwrite2+0x7c>
    461a:	ae c0       	rjmp	.+348    	; 0x4778 <fwrite2+0x1d8>
            newSector(fp->addr);
        }

        if (fp->fpos + nBytes > fp->size)
        {
            fp->size = fp->fpos + nBytes;
    461c:	a3 01       	movw	r20, r6
    461e:	4e 0d       	add	r20, r14
    4620:	5f 1d       	adc	r21, r15
    4622:	5d 83       	std	Y+5, r21	; 0x05
    4624:	4c 83       	std	Y+4, r20	; 0x04
            fswrite16uint(fp->addr, FILE_SIZEOFFSET, fp->size);
    4626:	8a 81       	ldd	r24, Y+2	; 0x02
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	6d e1       	ldi	r22, 0x1D	; 29
    462c:	70 e0       	ldi	r23, 0x00	; 0
    462e:	0e 94 48 26 	call	0x4c90	; 0x4c90 <fswrite16uint>
    4632:	6c 81       	ldd	r22, Y+4	; 0x04
    4634:	7d 81       	ldd	r23, Y+5	; 0x05
        }
    }
    
    //avoid flash overflow
    if (fp->size > 64000)
    4636:	61 50       	subi	r22, 0x01	; 1
    4638:	7a 4f       	sbci	r23, 0xFA	; 250
    463a:	08 f0       	brcs	.+2      	; 0x463e <fwrite2+0x9e>
    463c:	9a c0       	rjmp	.+308    	; 0x4772 <fwrite2+0x1d2>
    	return 2; 
    	 
    startsector = fp->fpos / 2048;
    463e:	ee 80       	ldd	r14, Y+6	; 0x06
    4640:	ff 80       	ldd	r15, Y+7	; 0x07
    4642:	08 85       	ldd	r16, Y+8	; 0x08
    4644:	19 85       	ldd	r17, Y+9	; 0x09
    4646:	c8 01       	movw	r24, r16
    4648:	b7 01       	movw	r22, r14
    464a:	20 e0       	ldi	r18, 0x00	; 0
    464c:	38 e0       	ldi	r19, 0x08	; 8
    464e:	40 e0       	ldi	r20, 0x00	; 0
    4650:	50 e0       	ldi	r21, 0x00	; 0
    4652:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    4656:	49 01       	movw	r8, r18
    endsector = (fp->fpos + nBytes - 1) / 2048;
    4658:	c8 01       	movw	r24, r16
    465a:	b7 01       	movw	r22, r14
    465c:	61 50       	subi	r22, 0x01	; 1
    465e:	70 40       	sbci	r23, 0x00	; 0
    4660:	80 40       	sbci	r24, 0x00	; 0
    4662:	90 40       	sbci	r25, 0x00	; 0
    4664:	6a 0d       	add	r22, r10
    4666:	7b 1d       	adc	r23, r11
    4668:	8c 1d       	adc	r24, r12
    466a:	9d 1d       	adc	r25, r13
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	38 e0       	ldi	r19, 0x08	; 8
    4670:	40 e0       	ldi	r20, 0x00	; 0
    4672:	50 e0       	ldi	r21, 0x00	; 0
    4674:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    4678:	19 01       	movw	r2, r18
    if (startsector == endsector)
    467a:	82 16       	cp	r8, r18
    467c:	93 06       	cpc	r9, r19
    467e:	09 f4       	brne	.+2      	; 0x4682 <fwrite2+0xe2>
    4680:	95 c0       	rjmp	.+298    	; 0x47ac <fwrite2+0x20c>
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, nBytes);
    }
    else
    {
        blockoffset = fp->fpos % 2048;
    4682:	c8 01       	movw	r24, r16
    4684:	b7 01       	movw	r22, r14
    4686:	20 e0       	ldi	r18, 0x00	; 0
    4688:	38 e0       	ldi	r19, 0x08	; 8
    468a:	40 e0       	ldi	r20, 0x00	; 0
    468c:	50 e0       	ldi	r21, 0x00	; 0
    468e:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    4692:	46 2f       	mov	r20, r22
    4694:	e7 2f       	mov	r30, r23
        pageoffset = blockoffset % 256;
    4696:	86 2f       	mov	r24, r22
    4698:	9e 2f       	mov	r25, r30
    469a:	60 e0       	ldi	r22, 0x00	; 0
    469c:	71 e0       	ldi	r23, 0x01	; 1
    469e:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    46a2:	7c 01       	movw	r14, r24
        pagenum = blockoffset / 256;
    46a4:	24 2f       	mov	r18, r20
    46a6:	3e 2f       	mov	r19, r30
    46a8:	c9 01       	movw	r24, r18
    46aa:	97 fd       	sbrc	r25, 7
    46ac:	b2 c0       	rjmp	.+356    	; 0x4812 <fwrite2+0x272>
    46ae:	09 2f       	mov	r16, r25
    46b0:	11 27       	eor	r17, r17
    46b2:	07 fd       	sbrc	r16, 7
    46b4:	1a 95       	dec	r17
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    46b6:	8a 81       	ldd	r24, Y+2	; 0x02
    46b8:	68 2d       	mov	r22, r8
    46ba:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = 256 - pageoffset;
    46be:	81 2c       	mov	r8, r1
    46c0:	61 e0       	ldi	r22, 0x01	; 1
    46c2:	96 2e       	mov	r9, r22
    46c4:	8e 18       	sub	r8, r14
    46c6:	9f 08       	sbc	r9, r15
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, readbytes);
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	01 97       	sbiw	r24, 0x01	; 1
    46cc:	88 0f       	add	r24, r24
    46ce:	99 1f       	adc	r25, r25
    46d0:	88 0f       	add	r24, r24
    46d2:	99 1f       	adc	r25, r25
    46d4:	88 0f       	add	r24, r24
    46d6:	99 1f       	adc	r25, r25
    46d8:	80 0f       	add	r24, r16
    46da:	91 1f       	adc	r25, r17
    46dc:	6e 2d       	mov	r22, r14
    46de:	a2 01       	movw	r20, r4
    46e0:	94 01       	movw	r18, r8
    46e2:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <writepagestorage>
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    46e6:	6e 81       	ldd	r22, Y+6	; 0x06
    46e8:	7f 81       	ldd	r23, Y+7	; 0x07
    46ea:	88 85       	ldd	r24, Y+8	; 0x08
    46ec:	99 85       	ldd	r25, Y+9	; 0x09
    46ee:	61 50       	subi	r22, 0x01	; 1
    46f0:	70 40       	sbci	r23, 0x00	; 0
    46f2:	80 40       	sbci	r24, 0x00	; 0
    46f4:	90 40       	sbci	r25, 0x00	; 0
    46f6:	6a 0d       	add	r22, r10
    46f8:	7b 1d       	adc	r23, r11
    46fa:	8c 1d       	adc	r24, r12
    46fc:	9d 1d       	adc	r25, r13
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	38 e0       	ldi	r19, 0x08	; 8
    4702:	40 e0       	ldi	r20, 0x00	; 0
    4704:	50 e0       	ldi	r21, 0x00	; 0
    4706:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    470a:	cb 01       	movw	r24, r22
    470c:	77 fd       	sbrc	r23, 7
    470e:	7e c0       	rjmp	.+252    	; 0x480c <fwrite2+0x26c>
    4710:	09 2f       	mov	r16, r25
    4712:	11 27       	eor	r17, r17
    4714:	07 fd       	sbrc	r16, 7
    4716:	1a 95       	dec	r17
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, endsector);
    4718:	8a 81       	ldd	r24, Y+2	; 0x02
    471a:	62 2d       	mov	r22, r2
    471c:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = nBytes - readbytes;
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, 0, buffer, readbytes);
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	01 97       	sbiw	r24, 0x01	; 1
    4724:	88 0f       	add	r24, r24
    4726:	99 1f       	adc	r25, r25
    4728:	88 0f       	add	r24, r24
    472a:	99 1f       	adc	r25, r25
    472c:	88 0f       	add	r24, r24
    472e:	99 1f       	adc	r25, r25
    4730:	48 0c       	add	r4, r8
    4732:	59 1c       	adc	r5, r9
    4734:	68 18       	sub	r6, r8
    4736:	79 08       	sbc	r7, r9
    4738:	80 0f       	add	r24, r16
    473a:	91 1f       	adc	r25, r17
    473c:	60 e0       	ldi	r22, 0x00	; 0
    473e:	a2 01       	movw	r20, r4
    4740:	93 01       	movw	r18, r6
    4742:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <writepagestorage>
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    }
    return 0;
}
    474a:	c9 01       	movw	r24, r18
    474c:	df 91       	pop	r29
    474e:	cf 91       	pop	r28
    4750:	1f 91       	pop	r17
    4752:	0f 91       	pop	r16
    4754:	ff 90       	pop	r15
    4756:	ef 90       	pop	r14
    4758:	df 90       	pop	r13
    475a:	cf 90       	pop	r12
    475c:	bf 90       	pop	r11
    475e:	af 90       	pop	r10
    4760:	9f 90       	pop	r9
    4762:	8f 90       	pop	r8
    4764:	7f 90       	pop	r7
    4766:	6f 90       	pop	r6
    4768:	5f 90       	pop	r5
    476a:	4f 90       	pop	r4
    476c:	3f 90       	pop	r3
    476e:	2f 90       	pop	r2
    4770:	08 95       	ret
            fswrite16uint(fp->addr, FILE_SIZEOFFSET, fp->size);
        }
    }
    
    //avoid flash overflow
    if (fp->size > 64000)
    4772:	22 e0       	ldi	r18, 0x02	; 2
    4774:	30 e0       	ldi	r19, 0x00	; 0
    4776:	e9 cf       	rjmp	.-46     	; 0x474a <fwrite2+0x1aa>
        }
        //     if ((allocate == 32768)&&(fp->fpos + nBytes > 32768))
        //         foobar(); 
        if (fp->fpos + nBytes > allocate)
        {
            newSector(fp->addr);
    4778:	8a 81       	ldd	r24, Y+2	; 0x02
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	0e 94 b6 2a 	call	0x556c	; 0x556c <newSector>
        }

        if (fp->fpos + nBytes > fp->size)
    4780:	ee 80       	ldd	r14, Y+6	; 0x06
    4782:	ff 80       	ldd	r15, Y+7	; 0x07
    4784:	08 85       	ldd	r16, Y+8	; 0x08
    4786:	19 85       	ldd	r17, Y+9	; 0x09
    4788:	6c 81       	ldd	r22, Y+4	; 0x04
    478a:	7d 81       	ldd	r23, Y+5	; 0x05
    478c:	a6 01       	movw	r20, r12
    478e:	95 01       	movw	r18, r10
    4790:	2e 0d       	add	r18, r14
    4792:	3f 1d       	adc	r19, r15
    4794:	40 1f       	adc	r20, r16
    4796:	51 1f       	adc	r21, r17
    4798:	cb 01       	movw	r24, r22
    479a:	a0 e0       	ldi	r26, 0x00	; 0
    479c:	b0 e0       	ldi	r27, 0x00	; 0
    479e:	82 17       	cp	r24, r18
    47a0:	93 07       	cpc	r25, r19
    47a2:	a4 07       	cpc	r26, r20
    47a4:	b5 07       	cpc	r27, r21
    47a6:	0c f0       	brlt	.+2      	; 0x47aa <fwrite2+0x20a>
    47a8:	46 cf       	rjmp	.-372    	; 0x4636 <fwrite2+0x96>
    47aa:	38 cf       	rjmp	.-400    	; 0x461c <fwrite2+0x7c>
    	 
    startsector = fp->fpos / 2048;
    endsector = (fp->fpos + nBytes - 1) / 2048;
    if (startsector == endsector)
    {
        blockoffset = fp->fpos % 2048;
    47ac:	c8 01       	movw	r24, r16
    47ae:	b7 01       	movw	r22, r14
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	38 e0       	ldi	r19, 0x08	; 8
    47b4:	40 e0       	ldi	r20, 0x00	; 0
    47b6:	50 e0       	ldi	r21, 0x00	; 0
    47b8:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    47bc:	f6 2e       	mov	r15, r22
    47be:	e7 2e       	mov	r14, r23
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    47c0:	cb 01       	movw	r24, r22
    47c2:	77 fd       	sbrc	r23, 7
    47c4:	29 c0       	rjmp	.+82     	; 0x4818 <fwrite2+0x278>
    47c6:	09 2f       	mov	r16, r25
    47c8:	11 27       	eor	r17, r17
    47ca:	07 fd       	sbrc	r16, 7
    47cc:	1a 95       	dec	r17
        //      realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    47ce:	8a 81       	ldd	r24, Y+2	; 0x02
    47d0:	68 2d       	mov	r22, r8
    47d2:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, nBytes);
    47d6:	28 2f       	mov	r18, r24
    47d8:	30 e0       	ldi	r19, 0x00	; 0
    47da:	21 50       	subi	r18, 0x01	; 1
    47dc:	30 40       	sbci	r19, 0x00	; 0
    47de:	22 0f       	add	r18, r18
    47e0:	33 1f       	adc	r19, r19
    47e2:	22 0f       	add	r18, r18
    47e4:	33 1f       	adc	r19, r19
    47e6:	22 0f       	add	r18, r18
    47e8:	33 1f       	adc	r19, r19
    47ea:	8f 2d       	mov	r24, r15
    47ec:	9e 2d       	mov	r25, r14
    47ee:	60 e0       	ldi	r22, 0x00	; 0
    47f0:	71 e0       	ldi	r23, 0x01	; 1
    47f2:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    47f6:	68 2f       	mov	r22, r24
    47f8:	c9 01       	movw	r24, r18
    47fa:	80 0f       	add	r24, r16
    47fc:	91 1f       	adc	r25, r17
    47fe:	a2 01       	movw	r20, r4
    4800:	93 01       	movw	r18, r6
    4802:	0e 94 70 35 	call	0x6ae0	; 0x6ae0 <writepagestorage>
    4806:	20 e0       	ldi	r18, 0x00	; 0
    4808:	30 e0       	ldi	r19, 0x00	; 0
    480a:	9f cf       	rjmp	.-194    	; 0x474a <fwrite2+0x1aa>
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, readbytes);
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    480c:	81 50       	subi	r24, 0x01	; 1
    480e:	9f 4f       	sbci	r25, 0xFF	; 255
    4810:	7f cf       	rjmp	.-258    	; 0x4710 <fwrite2+0x170>
    }
    else
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    4812:	81 50       	subi	r24, 0x01	; 1
    4814:	9f 4f       	sbci	r25, 0xFF	; 255
    4816:	4b cf       	rjmp	.-362    	; 0x46ae <fwrite2+0x10e>
    endsector = (fp->fpos + nBytes - 1) / 2048;
    if (startsector == endsector)
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    4818:	81 50       	subi	r24, 0x01	; 1
    481a:	9f 4f       	sbci	r25, 0xFF	; 255
    481c:	d4 cf       	rjmp	.-88     	; 0x47c6 <fwrite2+0x226>

0000481e <fread2>:
    }
}

//-------------------------------------------------------------------------
int fread2(MYFILE * fp, void *buffer, int nBytes)
{
    481e:	2f 92       	push	r2
    4820:	3f 92       	push	r3
    4822:	4f 92       	push	r4
    4824:	5f 92       	push	r5
    4826:	6f 92       	push	r6
    4828:	7f 92       	push	r7
    482a:	8f 92       	push	r8
    482c:	9f 92       	push	r9
    482e:	af 92       	push	r10
    4830:	bf 92       	push	r11
    4832:	cf 92       	push	r12
    4834:	df 92       	push	r13
    4836:	ef 92       	push	r14
    4838:	ff 92       	push	r15
    483a:	0f 93       	push	r16
    483c:	1f 93       	push	r17
    483e:	df 93       	push	r29
    4840:	cf 93       	push	r28
    4842:	00 d0       	rcall	.+0      	; 0x4844 <fread2+0x26>
    4844:	00 d0       	rcall	.+0      	; 0x4846 <fread2+0x28>
    4846:	00 d0       	rcall	.+0      	; 0x4848 <fread2+0x2a>
    4848:	cd b7       	in	r28, 0x3d	; 61
    484a:	de b7       	in	r29, 0x3e	; 62
    484c:	4c 01       	movw	r8, r24
    484e:	7c 83       	std	Y+4, r23	; 0x04
    4850:	6b 83       	std	Y+3, r22	; 0x03
    4852:	1a 01       	movw	r2, r20
    int endsector;
    uint8_t realsector;
    int readbytes;
    int pagenum, blockoffset, pageoffset;

    if (fp->fpos + nBytes > fp->size)
    4854:	fc 01       	movw	r30, r24
    4856:	a6 80       	ldd	r10, Z+6	; 0x06
    4858:	b7 80       	ldd	r11, Z+7	; 0x07
    485a:	c0 84       	ldd	r12, Z+8	; 0x08
    485c:	d1 84       	ldd	r13, Z+9	; 0x09
    485e:	2a 01       	movw	r4, r20
    4860:	66 24       	eor	r6, r6
    4862:	57 fc       	sbrc	r5, 7
    4864:	60 94       	com	r6
    4866:	76 2c       	mov	r7, r6
    4868:	83 01       	movw	r16, r6
    486a:	72 01       	movw	r14, r4
    486c:	ea 0c       	add	r14, r10
    486e:	fb 1c       	adc	r15, r11
    4870:	0c 1d       	adc	r16, r12
    4872:	1d 1d       	adc	r17, r13
    4874:	84 81       	ldd	r24, Z+4	; 0x04
    4876:	95 81       	ldd	r25, Z+5	; 0x05
    4878:	a0 e0       	ldi	r26, 0x00	; 0
    487a:	b0 e0       	ldi	r27, 0x00	; 0
    487c:	8e 15       	cp	r24, r14
    487e:	9f 05       	cpc	r25, r15
    4880:	a0 07       	cpc	r26, r16
    4882:	b1 07       	cpc	r27, r17
    4884:	0c f4       	brge	.+2      	; 0x4888 <fread2+0x6a>
    4886:	a5 c0       	rjmp	.+330    	; 0x49d2 <fread2+0x1b4>
    {
        return -1;
    }
    startsector = fp->fpos / 2048;
    4888:	c6 01       	movw	r24, r12
    488a:	b5 01       	movw	r22, r10
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	38 e0       	ldi	r19, 0x08	; 8
    4890:	40 e0       	ldi	r20, 0x00	; 0
    4892:	50 e0       	ldi	r21, 0x00	; 0
    4894:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    4898:	3e 83       	std	Y+6, r19	; 0x06
    489a:	2d 83       	std	Y+5, r18	; 0x05
    endsector = (fp->fpos + nBytes - 1) / 2048;
    489c:	08 94       	sec
    489e:	e1 08       	sbc	r14, r1
    48a0:	f1 08       	sbc	r15, r1
    48a2:	01 09       	sbc	r16, r1
    48a4:	11 09       	sbc	r17, r1
    48a6:	c8 01       	movw	r24, r16
    48a8:	b7 01       	movw	r22, r14
    48aa:	20 e0       	ldi	r18, 0x00	; 0
    48ac:	38 e0       	ldi	r19, 0x08	; 8
    48ae:	40 e0       	ldi	r20, 0x00	; 0
    48b0:	50 e0       	ldi	r21, 0x00	; 0
    48b2:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    48b6:	3a 83       	std	Y+2, r19	; 0x02
    48b8:	29 83       	std	Y+1, r18	; 0x01
    if (startsector == endsector)
    48ba:	8d 81       	ldd	r24, Y+5	; 0x05
    48bc:	9e 81       	ldd	r25, Y+6	; 0x06
    48be:	82 17       	cp	r24, r18
    48c0:	93 07       	cpc	r25, r19
    48c2:	09 f4       	brne	.+2      	; 0x48c6 <fread2+0xa8>
    48c4:	89 c0       	rjmp	.+274    	; 0x49d8 <fread2+0x1ba>
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, nBytes);
    }
    else
    {
        blockoffset = fp->fpos % 2048;
    48c6:	c6 01       	movw	r24, r12
    48c8:	b5 01       	movw	r22, r10
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	38 e0       	ldi	r19, 0x08	; 8
    48ce:	40 e0       	ldi	r20, 0x00	; 0
    48d0:	50 e0       	ldi	r21, 0x00	; 0
    48d2:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    48d6:	46 2f       	mov	r20, r22
    48d8:	e7 2f       	mov	r30, r23
        pageoffset = blockoffset % 256;
    48da:	86 2f       	mov	r24, r22
    48dc:	9e 2f       	mov	r25, r30
    48de:	60 e0       	ldi	r22, 0x00	; 0
    48e0:	71 e0       	ldi	r23, 0x01	; 1
    48e2:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    48e6:	7c 01       	movw	r14, r24
        pagenum = blockoffset / 256;
    48e8:	24 2f       	mov	r18, r20
    48ea:	3e 2f       	mov	r19, r30
    48ec:	c9 01       	movw	r24, r18
    48ee:	97 fd       	sbrc	r25, 7
    48f0:	a8 c0       	rjmp	.+336    	; 0x4a42 <fread2+0x224>
    48f2:	09 2f       	mov	r16, r25
    48f4:	11 27       	eor	r17, r17
    48f6:	07 fd       	sbrc	r16, 7
    48f8:	1a 95       	dec	r17
        //      realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    48fa:	f4 01       	movw	r30, r8
    48fc:	82 81       	ldd	r24, Z+2	; 0x02
    48fe:	6d 81       	ldd	r22, Y+5	; 0x05
    4900:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = 256 - pageoffset;
    4904:	c1 2c       	mov	r12, r1
    4906:	31 e0       	ldi	r19, 0x01	; 1
    4908:	d3 2e       	mov	r13, r19
    490a:	ce 18       	sub	r12, r14
    490c:	df 08       	sbc	r13, r15
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, readbytes);
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	01 97       	sbiw	r24, 0x01	; 1
    4912:	88 0f       	add	r24, r24
    4914:	99 1f       	adc	r25, r25
    4916:	88 0f       	add	r24, r24
    4918:	99 1f       	adc	r25, r25
    491a:	88 0f       	add	r24, r24
    491c:	99 1f       	adc	r25, r25
    491e:	80 0f       	add	r24, r16
    4920:	91 1f       	adc	r25, r17
    4922:	6e 2d       	mov	r22, r14
    4924:	4b 81       	ldd	r20, Y+3	; 0x03
    4926:	5c 81       	ldd	r21, Y+4	; 0x04
    4928:	96 01       	movw	r18, r12
    492a:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <readpagestorage>
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    492e:	f4 01       	movw	r30, r8
    4930:	66 81       	ldd	r22, Z+6	; 0x06
    4932:	77 81       	ldd	r23, Z+7	; 0x07
    4934:	80 85       	ldd	r24, Z+8	; 0x08
    4936:	91 85       	ldd	r25, Z+9	; 0x09
    4938:	61 50       	subi	r22, 0x01	; 1
    493a:	70 40       	sbci	r23, 0x00	; 0
    493c:	80 40       	sbci	r24, 0x00	; 0
    493e:	90 40       	sbci	r25, 0x00	; 0
    4940:	64 0d       	add	r22, r4
    4942:	75 1d       	adc	r23, r5
    4944:	86 1d       	adc	r24, r6
    4946:	97 1d       	adc	r25, r7
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	38 e0       	ldi	r19, 0x08	; 8
    494c:	40 e0       	ldi	r20, 0x00	; 0
    494e:	50 e0       	ldi	r21, 0x00	; 0
    4950:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    4954:	cb 01       	movw	r24, r22
    4956:	77 fd       	sbrc	r23, 7
    4958:	71 c0       	rjmp	.+226    	; 0x4a3c <fread2+0x21e>
    495a:	09 2f       	mov	r16, r25
    495c:	11 27       	eor	r17, r17
    495e:	07 fd       	sbrc	r16, 7
    4960:	1a 95       	dec	r17
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, endsector);
    4962:	f4 01       	movw	r30, r8
    4964:	82 81       	ldd	r24, Z+2	; 0x02
    4966:	69 81       	ldd	r22, Y+1	; 0x01
    4968:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = nBytes - readbytes;
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, 0, buffer, readbytes);
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	01 97       	sbiw	r24, 0x01	; 1
    4970:	88 0f       	add	r24, r24
    4972:	99 1f       	adc	r25, r25
    4974:	88 0f       	add	r24, r24
    4976:	99 1f       	adc	r25, r25
    4978:	88 0f       	add	r24, r24
    497a:	99 1f       	adc	r25, r25
    497c:	2b 81       	ldd	r18, Y+3	; 0x03
    497e:	3c 81       	ldd	r19, Y+4	; 0x04
    4980:	2c 0d       	add	r18, r12
    4982:	3d 1d       	adc	r19, r13
    4984:	3c 83       	std	Y+4, r19	; 0x04
    4986:	2b 83       	std	Y+3, r18	; 0x03
    4988:	2c 18       	sub	r2, r12
    498a:	3d 08       	sbc	r3, r13
    498c:	80 0f       	add	r24, r16
    498e:	91 1f       	adc	r25, r17
    4990:	60 e0       	ldi	r22, 0x00	; 0
    4992:	a9 01       	movw	r20, r18
    4994:	91 01       	movw	r18, r2
    4996:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <readpagestorage>
    499a:	20 e0       	ldi	r18, 0x00	; 0
    499c:	30 e0       	ldi	r19, 0x00	; 0
    }
    return 0;
}
    499e:	c9 01       	movw	r24, r18
    49a0:	26 96       	adiw	r28, 0x06	; 6
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	f8 94       	cli
    49a6:	de bf       	out	0x3e, r29	; 62
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	cd bf       	out	0x3d, r28	; 61
    49ac:	cf 91       	pop	r28
    49ae:	df 91       	pop	r29
    49b0:	1f 91       	pop	r17
    49b2:	0f 91       	pop	r16
    49b4:	ff 90       	pop	r15
    49b6:	ef 90       	pop	r14
    49b8:	df 90       	pop	r13
    49ba:	cf 90       	pop	r12
    49bc:	bf 90       	pop	r11
    49be:	af 90       	pop	r10
    49c0:	9f 90       	pop	r9
    49c2:	8f 90       	pop	r8
    49c4:	7f 90       	pop	r7
    49c6:	6f 90       	pop	r6
    49c8:	5f 90       	pop	r5
    49ca:	4f 90       	pop	r4
    49cc:	3f 90       	pop	r3
    49ce:	2f 90       	pop	r2
    49d0:	08 95       	ret
    int endsector;
    uint8_t realsector;
    int readbytes;
    int pagenum, blockoffset, pageoffset;

    if (fp->fpos + nBytes > fp->size)
    49d2:	2f ef       	ldi	r18, 0xFF	; 255
    49d4:	3f ef       	ldi	r19, 0xFF	; 255
    49d6:	e3 cf       	rjmp	.-58     	; 0x499e <fread2+0x180>
    }
    startsector = fp->fpos / 2048;
    endsector = (fp->fpos + nBytes - 1) / 2048;
    if (startsector == endsector)
    {
        blockoffset = fp->fpos % 2048;
    49d8:	c6 01       	movw	r24, r12
    49da:	b5 01       	movw	r22, r10
    49dc:	20 e0       	ldi	r18, 0x00	; 0
    49de:	38 e0       	ldi	r19, 0x08	; 8
    49e0:	40 e0       	ldi	r20, 0x00	; 0
    49e2:	50 e0       	ldi	r21, 0x00	; 0
    49e4:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    49e8:	f6 2e       	mov	r15, r22
    49ea:	e7 2e       	mov	r14, r23
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    49ec:	cb 01       	movw	r24, r22
    49ee:	77 fd       	sbrc	r23, 7
    49f0:	2b c0       	rjmp	.+86     	; 0x4a48 <fread2+0x22a>
    49f2:	09 2f       	mov	r16, r25
    49f4:	11 27       	eor	r17, r17
    49f6:	07 fd       	sbrc	r16, 7
    49f8:	1a 95       	dec	r17
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //  realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
    49fa:	f4 01       	movw	r30, r8
    49fc:	82 81       	ldd	r24, Z+2	; 0x02
    49fe:	6d 81       	ldd	r22, Y+5	; 0x05
    4a00:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <getRealSector>
        pagenum = pagenum + (realsector - 1) * 8;
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, nBytes);
    4a04:	28 2f       	mov	r18, r24
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	21 50       	subi	r18, 0x01	; 1
    4a0a:	30 40       	sbci	r19, 0x00	; 0
    4a0c:	22 0f       	add	r18, r18
    4a0e:	33 1f       	adc	r19, r19
    4a10:	22 0f       	add	r18, r18
    4a12:	33 1f       	adc	r19, r19
    4a14:	22 0f       	add	r18, r18
    4a16:	33 1f       	adc	r19, r19
    4a18:	8f 2d       	mov	r24, r15
    4a1a:	9e 2d       	mov	r25, r14
    4a1c:	60 e0       	ldi	r22, 0x00	; 0
    4a1e:	71 e0       	ldi	r23, 0x01	; 1
    4a20:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    4a24:	68 2f       	mov	r22, r24
    4a26:	c9 01       	movw	r24, r18
    4a28:	80 0f       	add	r24, r16
    4a2a:	91 1f       	adc	r25, r17
    4a2c:	4b 81       	ldd	r20, Y+3	; 0x03
    4a2e:	5c 81       	ldd	r21, Y+4	; 0x04
    4a30:	91 01       	movw	r18, r2
    4a32:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <readpagestorage>
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	b1 cf       	rjmp	.-158    	; 0x499e <fread2+0x180>
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, readbytes);
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    4a3c:	81 50       	subi	r24, 0x01	; 1
    4a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a40:	8c cf       	rjmp	.-232    	; 0x495a <fread2+0x13c>
    }
    else
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    4a42:	81 50       	subi	r24, 0x01	; 1
    4a44:	9f 4f       	sbci	r25, 0xFF	; 255
    4a46:	55 cf       	rjmp	.-342    	; 0x48f2 <fread2+0xd4>
    endsector = (fp->fpos + nBytes - 1) / 2048;
    if (startsector == endsector)
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
    4a48:	81 50       	subi	r24, 0x01	; 1
    4a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a4c:	d2 cf       	rjmp	.-92     	; 0x49f2 <fread2+0x1d4>

00004a4e <fsprintall>:


//-------------------------------------------------------------------------
//vs patch used for debugging only 
void fsprintall()
{
    4a4e:	cf 93       	push	r28
    4a50:	df 93       	push	r29
    4a52:	c0 e0       	ldi	r28, 0x00	; 0
    4a54:	d0 e0       	ldi	r29, 0x00	; 0
    int i;

    //  printf("*****************************************************************\n");
    for (i = 0; i <= 96; i++)
    {
        if (checkNodeValid(i) > 0)
    4a56:	ce 01       	movw	r24, r28
    4a58:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <checkNodeValid>
    4a5c:	18 16       	cp	r1, r24
    4a5e:	19 06       	cpc	r1, r25
    4a60:	1c f4       	brge	.+6      	; 0x4a68 <fsprintall+0x1a>
        {
            printNode(i);
    4a62:	ce 01       	movw	r24, r28
    4a64:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <printNode>
void fsprintall()
{
    int i;

    //  printf("*****************************************************************\n");
    for (i = 0; i <= 96; i++)
    4a68:	21 96       	adiw	r28, 0x01	; 1
    4a6a:	c1 36       	cpi	r28, 0x61	; 97
    4a6c:	d1 05       	cpc	r29, r1
    4a6e:	99 f7       	brne	.-26     	; 0x4a56 <fsprintall+0x8>
        if (checkNodeValid(i) > 0)
        {
            printNode(i);
        }
    }
}
    4a70:	df 91       	pop	r29
    4a72:	cf 91       	pop	r28
    4a74:	08 95       	ret

00004a76 <fcheckStorageAllocation>:
}

//-------------------------------------------------------------------------
int fcheckStorageAllocation()
{
    return countVectorFlash();
    4a76:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <countVectorFlash>
}
    4a7a:	08 95       	ret

00004a7c <fcheckFSAllocation>:
}

//-------------------------------------------------------------------------
int fcheckFSAllocation()
{
    return countVectorNode();
    4a7c:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <countVectorNode>
}
    4a80:	08 95       	ret

00004a82 <fdelete2>:
//-------------------------------------------------------------------------
int fdelete2(char *pathname)
{
    int ret;

    if ((ret = fexist2(pathname)) == -1)
    4a82:	0e 94 b2 21 	call	0x4364	; 0x4364 <fexist2>
    4a86:	2f ef       	ldi	r18, 0xFF	; 255
    4a88:	8f 3f       	cpi	r24, 0xFF	; 255
    4a8a:	92 07       	cpc	r25, r18
    4a8c:	31 f0       	breq	.+12     	; 0x4a9a <fdelete2+0x18>
    {
        return -1;
    }
    else
    {
        deleteNode(ret);
    4a8e:	0e 94 40 28 	call	0x5080	; 0x5080 <deleteNode>
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	30 e0       	ldi	r19, 0x00	; 0
        return 0;
    }
}
    4a96:	c9 01       	movw	r24, r18
    4a98:	08 95       	ret
//-------------------------------------------------------------------------
int fdelete2(char *pathname)
{
    int ret;

    if ((ret = fexist2(pathname)) == -1)
    4a9a:	2f ef       	ldi	r18, 0xFF	; 255
    4a9c:	3f ef       	ldi	r19, 0xFF	; 255
    else
    {
        deleteNode(ret);
        return 0;
    }
}
    4a9e:	c9 01       	movw	r24, r18
    4aa0:	08 95       	ret

00004aa2 <fcreatedir2>:
    }
}

//-------------------------------------------------------------------------
int fcreatedir2(char *pathname)
{
    4aa2:	ef 92       	push	r14
    4aa4:	ff 92       	push	r15
    4aa6:	0f 93       	push	r16
    4aa8:	1f 93       	push	r17
    4aaa:	df 93       	push	r29
    4aac:	cf 93       	push	r28
    4aae:	00 d0       	rcall	.+0      	; 0x4ab0 <fcreatedir2+0xe>
    4ab0:	cd b7       	in	r28, 0x3d	; 61
    4ab2:	de b7       	in	r29, 0x3e	; 62
    4ab4:	7c 01       	movw	r14, r24
    int retaddr, state;

    retaddr = locateFileName(pathname, &state);
    4ab6:	be 01       	movw	r22, r28
    4ab8:	6f 5f       	subi	r22, 0xFF	; 255
    4aba:	7f 4f       	sbci	r23, 0xFF	; 255
    4abc:	0e 94 b3 2c 	call	0x5966	; 0x5966 <locateFileName>
    4ac0:	8c 01       	movw	r16, r24
    if (retaddr == -1)
    4ac2:	8f ef       	ldi	r24, 0xFF	; 255
    4ac4:	0f 3f       	cpi	r16, 0xFF	; 255
    4ac6:	18 07       	cpc	r17, r24
    4ac8:	61 f4       	brne	.+24     	; 0x4ae2 <fcreatedir2+0x40>
    }
    //first, file does not exist
    if (state == 0)
    {
        createDir(extractLastName(pathname), retaddr);
        return 0;
    4aca:	2f ef       	ldi	r18, 0xFF	; 255
    4acc:	3f ef       	ldi	r19, 0xFF	; 255
    }
    return -1;
}
    4ace:	c9 01       	movw	r24, r18
    4ad0:	0f 90       	pop	r0
    4ad2:	0f 90       	pop	r0
    4ad4:	cf 91       	pop	r28
    4ad6:	df 91       	pop	r29
    4ad8:	1f 91       	pop	r17
    4ada:	0f 91       	pop	r16
    4adc:	ff 90       	pop	r15
    4ade:	ef 90       	pop	r14
    4ae0:	08 95       	ret
    if (retaddr == -1)
    {
        return -1;
    }
    //first, file does not exist
    if (state == 0)
    4ae2:	89 81       	ldd	r24, Y+1	; 0x01
    4ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae6:	89 2b       	or	r24, r25
    4ae8:	81 f7       	brne	.-32     	; 0x4aca <fcreatedir2+0x28>
    {
        createDir(extractLastName(pathname), retaddr);
    4aea:	c7 01       	movw	r24, r14
    4aec:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <extractLastName>
    4af0:	b8 01       	movw	r22, r16
    4af2:	0e 94 2b 2c 	call	0x5856	; 0x5856 <createDir>
    4af6:	20 e0       	ldi	r18, 0x00	; 0
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	e9 cf       	rjmp	.-46     	; 0x4ace <fcreatedir2+0x2c>

00004afc <fclose2>:
}

//-------------------------------------------------------------------------
void fclose2(MYFILE * fp)
{
    releaseFid(fp->index);
    4afc:	fc 01       	movw	r30, r24
    4afe:	81 81       	ldd	r24, Z+1	; 0x01
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <releaseFid>
    fp = NULL;
    return;
}
    4b06:	08 95       	ret

00004b08 <fopen2>:

extern fid fidtable[MAX_FILE_TABLE_SIZE];

//-------------------------------------------------------------------------
MYFILE *fopen2(char *pathname, char *mode)
{
    4b08:	af 92       	push	r10
    4b0a:	bf 92       	push	r11
    4b0c:	cf 92       	push	r12
    4b0e:	df 92       	push	r13
    4b10:	ef 92       	push	r14
    4b12:	ff 92       	push	r15
    4b14:	0f 93       	push	r16
    4b16:	1f 93       	push	r17
    4b18:	df 93       	push	r29
    4b1a:	cf 93       	push	r28
    4b1c:	00 d0       	rcall	.+0      	; 0x4b1e <fopen2+0x16>
    4b1e:	cd b7       	in	r28, 0x3d	; 61
    4b20:	de b7       	in	r29, 0x3e	; 62
    4b22:	6c 01       	movw	r12, r24
    4b24:	8b 01       	movw	r16, r22
    int retaddr, state;
    int openmode;

    retaddr = locateFileName(pathname, &state);
    4b26:	be 01       	movw	r22, r28
    4b28:	6f 5f       	subi	r22, 0xFF	; 255
    4b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b2c:	0e 94 b3 2c 	call	0x5966	; 0x5966 <locateFileName>
    4b30:	5c 01       	movw	r10, r24
    openmode = fileMode(mode);
    4b32:	c8 01       	movw	r24, r16
    4b34:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <fileMode>
    4b38:	7c 01       	movw	r14, r24
    //ERROR in open mode 
    if (openmode == 0)
    4b3a:	00 97       	sbiw	r24, 0x00	; 0
    4b3c:	81 f4       	brne	.+32     	; 0x4b5e <fopen2+0x56>
    {
        int fid;

        fid = getFreeFid();
        openFile(retaddr, fid, openmode);
        return &fidtable[fid];
    4b3e:	20 e0       	ldi	r18, 0x00	; 0
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    }
}
    4b42:	c9 01       	movw	r24, r18
    4b44:	0f 90       	pop	r0
    4b46:	0f 90       	pop	r0
    4b48:	cf 91       	pop	r28
    4b4a:	df 91       	pop	r29
    4b4c:	1f 91       	pop	r17
    4b4e:	0f 91       	pop	r16
    4b50:	ff 90       	pop	r15
    4b52:	ef 90       	pop	r14
    4b54:	df 90       	pop	r13
    4b56:	cf 90       	pop	r12
    4b58:	bf 90       	pop	r11
    4b5a:	af 90       	pop	r10
    4b5c:	08 95       	ret
    if (openmode == 0)
    {
        return NULL;
    }
    //If the file location fails, return -1 
    if (retaddr == -1)
    4b5e:	8f ef       	ldi	r24, 0xFF	; 255
    4b60:	a8 16       	cp	r10, r24
    4b62:	8f ef       	ldi	r24, 0xFF	; 255
    4b64:	b8 06       	cpc	r11, r24
    4b66:	59 f3       	breq	.-42     	; 0x4b3e <fopen2+0x36>
    {
        return NULL;
    }
    //first, file does not exist
    if (state == 0)
    4b68:	89 81       	ldd	r24, Y+1	; 0x01
    4b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b6c:	00 97       	sbiw	r24, 0x00	; 0
    4b6e:	39 f5       	brne	.+78     	; 0x4bbe <fopen2+0xb6>
    {
        if (openmode == 2)
    4b70:	82 e0       	ldi	r24, 0x02	; 2
    4b72:	e8 16       	cp	r14, r24
    4b74:	f1 04       	cpc	r15, r1
    4b76:	19 f7       	brne	.-58     	; 0x4b3e <fopen2+0x36>
        {
            int blockaddr;
            int fid;
            char *temp;

            temp = extractLastName(pathname);
    4b78:	c6 01       	movw	r24, r12
    4b7a:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <extractLastName>
            blockaddr = createFileFromDirectory(temp, retaddr);
    4b7e:	b5 01       	movw	r22, r10
    4b80:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <createFileFromDirectory>
    4b84:	18 2f       	mov	r17, r24
            fid = getFreeFid();
    4b86:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <getFreeFid>
    4b8a:	08 2f       	mov	r16, r24
    4b8c:	f9 2e       	mov	r15, r25
            openFile(blockaddr, fid, openmode);
    4b8e:	81 2f       	mov	r24, r17
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	60 2f       	mov	r22, r16
    4b94:	7f 2d       	mov	r23, r15
    4b96:	42 e0       	ldi	r20, 0x02	; 2
    4b98:	50 e0       	ldi	r21, 0x00	; 0
    4b9a:	0e 94 19 2b 	call	0x5632	; 0x5632 <openFile>
            return &fidtable[fid];
    4b9e:	80 2f       	mov	r24, r16
    4ba0:	9f 2d       	mov	r25, r15
    {
        int fid;

        fid = getFreeFid();
        openFile(retaddr, fid, openmode);
        return &fidtable[fid];
    4ba2:	9c 01       	movw	r18, r24
    4ba4:	22 0f       	add	r18, r18
    4ba6:	33 1f       	adc	r19, r19
    4ba8:	22 0f       	add	r18, r18
    4baa:	33 1f       	adc	r19, r19
    4bac:	22 0f       	add	r18, r18
    4bae:	33 1f       	adc	r19, r19
    4bb0:	88 0f       	add	r24, r24
    4bb2:	99 1f       	adc	r25, r25
    4bb4:	28 0f       	add	r18, r24
    4bb6:	39 1f       	adc	r19, r25
    4bb8:	20 5d       	subi	r18, 0xD0	; 208
    4bba:	39 4f       	sbci	r19, 0xF9	; 249
    4bbc:	c2 cf       	rjmp	.-124    	; 0x4b42 <fopen2+0x3a>
        else
        {
            return NULL;
        }
    }
    if (state != FILENODE)
    4bbe:	02 97       	sbiw	r24, 0x02	; 2
    4bc0:	09 f0       	breq	.+2      	; 0x4bc4 <fopen2+0xbc>
    4bc2:	bd cf       	rjmp	.-134    	; 0x4b3e <fopen2+0x36>
        return NULL;
    }
    {
        int fid;

        fid = getFreeFid();
    4bc4:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <getFreeFid>
    4bc8:	18 2f       	mov	r17, r24
    4bca:	09 2f       	mov	r16, r25
        openFile(retaddr, fid, openmode);
    4bcc:	c5 01       	movw	r24, r10
    4bce:	61 2f       	mov	r22, r17
    4bd0:	70 2f       	mov	r23, r16
    4bd2:	a7 01       	movw	r20, r14
    4bd4:	0e 94 19 2b 	call	0x5632	; 0x5632 <openFile>
        return &fidtable[fid];
    4bd8:	81 2f       	mov	r24, r17
    4bda:	90 2f       	mov	r25, r16
    4bdc:	e2 cf       	rjmp	.-60     	; 0x4ba2 <fopen2+0x9a>

00004bde <fsinitBytes>:
void fsinitBytes(int inode, int offset, int nBytes, uint8_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    initBytes(addr, nBytes, value);
    4bde:	88 0f       	add	r24, r24
    4be0:	99 1f       	adc	r25, r25
    4be2:	82 95       	swap	r24
    4be4:	92 95       	swap	r25
    4be6:	90 7f       	andi	r25, 0xF0	; 240
    4be8:	98 27       	eor	r25, r24
    4bea:	80 7f       	andi	r24, 0xF0	; 240
    4bec:	98 27       	eor	r25, r24
    4bee:	86 0f       	add	r24, r22
    4bf0:	97 1f       	adc	r25, r23
    4bf2:	ba 01       	movw	r22, r20
    4bf4:	42 2f       	mov	r20, r18
    4bf6:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <initBytes>
}
    4bfa:	08 95       	ret

00004bfc <fswriteBytes>:
void fswriteBytes(int inode, int offset, int nBytes, void *buffer)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    genericwriteBytes(addr, nBytes, buffer);
    4bfc:	88 0f       	add	r24, r24
    4bfe:	99 1f       	adc	r25, r25
    4c00:	82 95       	swap	r24
    4c02:	92 95       	swap	r25
    4c04:	90 7f       	andi	r25, 0xF0	; 240
    4c06:	98 27       	eor	r25, r24
    4c08:	80 7f       	andi	r24, 0xF0	; 240
    4c0a:	98 27       	eor	r25, r24
    4c0c:	86 0f       	add	r24, r22
    4c0e:	97 1f       	adc	r25, r23
    4c10:	ba 01       	movw	r22, r20
    4c12:	a9 01       	movw	r20, r18
    4c14:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <genericwriteBytes>
}
    4c18:	08 95       	ret

00004c1a <fsreadBytes>:
void fsreadBytes(int inode, int offset, int nBytes, void *buffer)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    genericreadBytes(addr, nBytes, buffer);
    4c1a:	88 0f       	add	r24, r24
    4c1c:	99 1f       	adc	r25, r25
    4c1e:	82 95       	swap	r24
    4c20:	92 95       	swap	r25
    4c22:	90 7f       	andi	r25, 0xF0	; 240
    4c24:	98 27       	eor	r25, r24
    4c26:	80 7f       	andi	r24, 0xF0	; 240
    4c28:	98 27       	eor	r25, r24
    4c2a:	86 0f       	add	r24, r22
    4c2c:	97 1f       	adc	r25, r23
    4c2e:	ba 01       	movw	r22, r20
    4c30:	a9 01       	movw	r20, r18
    4c32:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <genericreadBytes>
}
    4c36:	08 95       	ret

00004c38 <fswrite32int>:
void fswrite32int(int inode, int offset, int32_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write32uint(addr, value);
    4c38:	88 0f       	add	r24, r24
    4c3a:	99 1f       	adc	r25, r25
    4c3c:	82 95       	swap	r24
    4c3e:	92 95       	swap	r25
    4c40:	90 7f       	andi	r25, 0xF0	; 240
    4c42:	98 27       	eor	r25, r24
    4c44:	80 7f       	andi	r24, 0xF0	; 240
    4c46:	98 27       	eor	r25, r24
    4c48:	86 0f       	add	r24, r22
    4c4a:	97 1f       	adc	r25, r23
    4c4c:	ba 01       	movw	r22, r20
    4c4e:	a9 01       	movw	r20, r18
    4c50:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <write32uint>
}
    4c54:	08 95       	ret

00004c56 <fswrite32uint>:
void fswrite32uint(int inode, int offset, uint32_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write32uint(addr, value);
    4c56:	88 0f       	add	r24, r24
    4c58:	99 1f       	adc	r25, r25
    4c5a:	82 95       	swap	r24
    4c5c:	92 95       	swap	r25
    4c5e:	90 7f       	andi	r25, 0xF0	; 240
    4c60:	98 27       	eor	r25, r24
    4c62:	80 7f       	andi	r24, 0xF0	; 240
    4c64:	98 27       	eor	r25, r24
    4c66:	86 0f       	add	r24, r22
    4c68:	97 1f       	adc	r25, r23
    4c6a:	ba 01       	movw	r22, r20
    4c6c:	a9 01       	movw	r20, r18
    4c6e:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <write32uint>
}
    4c72:	08 95       	ret

00004c74 <fswrite16int>:
void fswrite16int(int inode, int offset, int16_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write16int(addr, value);
    4c74:	88 0f       	add	r24, r24
    4c76:	99 1f       	adc	r25, r25
    4c78:	82 95       	swap	r24
    4c7a:	92 95       	swap	r25
    4c7c:	90 7f       	andi	r25, 0xF0	; 240
    4c7e:	98 27       	eor	r25, r24
    4c80:	80 7f       	andi	r24, 0xF0	; 240
    4c82:	98 27       	eor	r25, r24
    4c84:	86 0f       	add	r24, r22
    4c86:	97 1f       	adc	r25, r23
    4c88:	ba 01       	movw	r22, r20
    4c8a:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <write16int>
}
    4c8e:	08 95       	ret

00004c90 <fswrite16uint>:
void fswrite16uint(int inode, int offset, uint16_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write16uint(addr, value);
    4c90:	88 0f       	add	r24, r24
    4c92:	99 1f       	adc	r25, r25
    4c94:	82 95       	swap	r24
    4c96:	92 95       	swap	r25
    4c98:	90 7f       	andi	r25, 0xF0	; 240
    4c9a:	98 27       	eor	r25, r24
    4c9c:	80 7f       	andi	r24, 0xF0	; 240
    4c9e:	98 27       	eor	r25, r24
    4ca0:	86 0f       	add	r24, r22
    4ca2:	97 1f       	adc	r25, r23
    4ca4:	ba 01       	movw	r22, r20
    4ca6:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <write16uint>
}
    4caa:	08 95       	ret

00004cac <fswrite8int>:
void fswrite8int(int inode, int offset, int8_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write8int(addr, value);
    4cac:	88 0f       	add	r24, r24
    4cae:	99 1f       	adc	r25, r25
    4cb0:	82 95       	swap	r24
    4cb2:	92 95       	swap	r25
    4cb4:	90 7f       	andi	r25, 0xF0	; 240
    4cb6:	98 27       	eor	r25, r24
    4cb8:	80 7f       	andi	r24, 0xF0	; 240
    4cba:	98 27       	eor	r25, r24
    4cbc:	86 0f       	add	r24, r22
    4cbe:	97 1f       	adc	r25, r23
    4cc0:	64 2f       	mov	r22, r20
    4cc2:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <write8int>
}
    4cc6:	08 95       	ret

00004cc8 <fswrite8uint>:
void fswrite8uint(int inode, int offset, uint8_t value)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    write8uint(addr, value);
    4cc8:	88 0f       	add	r24, r24
    4cca:	99 1f       	adc	r25, r25
    4ccc:	82 95       	swap	r24
    4cce:	92 95       	swap	r25
    4cd0:	90 7f       	andi	r25, 0xF0	; 240
    4cd2:	98 27       	eor	r25, r24
    4cd4:	80 7f       	andi	r24, 0xF0	; 240
    4cd6:	98 27       	eor	r25, r24
    4cd8:	86 0f       	add	r24, r22
    4cda:	97 1f       	adc	r25, r23
    4cdc:	64 2f       	mov	r22, r20
    4cde:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <write8uint>
}
    4ce2:	08 95       	ret

00004ce4 <fsread32int>:
int32_t fsread32int(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read32int(addr);
    4ce4:	88 0f       	add	r24, r24
    4ce6:	99 1f       	adc	r25, r25
    4ce8:	82 95       	swap	r24
    4cea:	92 95       	swap	r25
    4cec:	90 7f       	andi	r25, 0xF0	; 240
    4cee:	98 27       	eor	r25, r24
    4cf0:	80 7f       	andi	r24, 0xF0	; 240
    4cf2:	98 27       	eor	r25, r24
    4cf4:	86 0f       	add	r24, r22
    4cf6:	97 1f       	adc	r25, r23
    4cf8:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <read32int>
}
    4cfc:	08 95       	ret

00004cfe <fsread32uint>:
uint32_t fsread32uint(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read32uint(addr);
    4cfe:	88 0f       	add	r24, r24
    4d00:	99 1f       	adc	r25, r25
    4d02:	82 95       	swap	r24
    4d04:	92 95       	swap	r25
    4d06:	90 7f       	andi	r25, 0xF0	; 240
    4d08:	98 27       	eor	r25, r24
    4d0a:	80 7f       	andi	r24, 0xF0	; 240
    4d0c:	98 27       	eor	r25, r24
    4d0e:	86 0f       	add	r24, r22
    4d10:	97 1f       	adc	r25, r23
    4d12:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <read32uint>
}
    4d16:	08 95       	ret

00004d18 <fsread16int>:
int16_t fsread16int(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read16int(addr);
    4d18:	88 0f       	add	r24, r24
    4d1a:	99 1f       	adc	r25, r25
    4d1c:	82 95       	swap	r24
    4d1e:	92 95       	swap	r25
    4d20:	90 7f       	andi	r25, 0xF0	; 240
    4d22:	98 27       	eor	r25, r24
    4d24:	80 7f       	andi	r24, 0xF0	; 240
    4d26:	98 27       	eor	r25, r24
    4d28:	86 0f       	add	r24, r22
    4d2a:	97 1f       	adc	r25, r23
    4d2c:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <read16int>
}
    4d30:	08 95       	ret

00004d32 <fsread16uint>:
uint16_t fsread16uint(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read16uint(addr);
    4d32:	88 0f       	add	r24, r24
    4d34:	99 1f       	adc	r25, r25
    4d36:	82 95       	swap	r24
    4d38:	92 95       	swap	r25
    4d3a:	90 7f       	andi	r25, 0xF0	; 240
    4d3c:	98 27       	eor	r25, r24
    4d3e:	80 7f       	andi	r24, 0xF0	; 240
    4d40:	98 27       	eor	r25, r24
    4d42:	86 0f       	add	r24, r22
    4d44:	97 1f       	adc	r25, r23
    4d46:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <read16uint>
}
    4d4a:	08 95       	ret

00004d4c <fsread8int>:
int8_t fsread8int(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read8int(addr);
    4d4c:	88 0f       	add	r24, r24
    4d4e:	99 1f       	adc	r25, r25
    4d50:	82 95       	swap	r24
    4d52:	92 95       	swap	r25
    4d54:	90 7f       	andi	r25, 0xF0	; 240
    4d56:	98 27       	eor	r25, r24
    4d58:	80 7f       	andi	r24, 0xF0	; 240
    4d5a:	98 27       	eor	r25, r24
    4d5c:	86 0f       	add	r24, r22
    4d5e:	97 1f       	adc	r25, r23
    4d60:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <read8int>
}
    4d64:	08 95       	ret

00004d66 <fsread8uint>:
uint8_t fsread8uint(int inode, int offset)
{
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    return read8uint(addr);
    4d66:	88 0f       	add	r24, r24
    4d68:	99 1f       	adc	r25, r25
    4d6a:	82 95       	swap	r24
    4d6c:	92 95       	swap	r25
    4d6e:	90 7f       	andi	r25, 0xF0	; 240
    4d70:	98 27       	eor	r25, r24
    4d72:	80 7f       	andi	r24, 0xF0	; 240
    4d74:	98 27       	eor	r25, r24
    4d76:	86 0f       	add	r24, r22
    4d78:	97 1f       	adc	r25, r23
    4d7a:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <read8uint>
}
    4d7e:	08 95       	ret

00004d80 <extractString>:
#include "fsstring.h"
#include "../../types/types.h"
#include "../../types/string.h"
char *extractString(char *start, char *buffer)
{
    4d80:	fc 01       	movw	r30, r24
    char *p, *q;

    q = buffer;
    p = start;
    if (*p == '/')
    4d82:	40 81       	ld	r20, Z
    4d84:	4f 32       	cpi	r20, 0x2F	; 47
    4d86:	b9 f0       	breq	.+46     	; 0x4db6 <extractString+0x36>
    4d88:	dc 01       	movw	r26, r24
    {
        p++;
    4d8a:	fb 01       	movw	r30, r22
    4d8c:	03 c0       	rjmp	.+6      	; 0x4d94 <extractString+0x14>
    }
    while ((isLetter(*p)) || (*p == '_') || (*p == '.') || (isDigit(*p)))
    {
        *q++ = *p++;
    4d8e:	41 93       	st	Z+, r20
    4d90:	11 96       	adiw	r26, 0x01	; 1
    4d92:	4c 91       	ld	r20, X
    p = start;
    if (*p == '/')
    {
        p++;
    }
    while ((isLetter(*p)) || (*p == '_') || (*p == '.') || (isDigit(*p)))
    4d94:	84 2f       	mov	r24, r20
    4d96:	81 56       	subi	r24, 0x61	; 97
    4d98:	8a 31       	cpi	r24, 0x1A	; 26
    4d9a:	c8 f3       	brcs	.-14     	; 0x4d8e <extractString+0xe>
    4d9c:	80 5e       	subi	r24, 0xE0	; 224
    4d9e:	8a 31       	cpi	r24, 0x1A	; 26
    4da0:	b0 f3       	brcs	.-20     	; 0x4d8e <extractString+0xe>
    4da2:	4f 35       	cpi	r20, 0x5F	; 95
    4da4:	a1 f3       	breq	.-24     	; 0x4d8e <extractString+0xe>
    4da6:	4e 32       	cpi	r20, 0x2E	; 46
    4da8:	91 f3       	breq	.-28     	; 0x4d8e <extractString+0xe>
    4daa:	8f 5e       	subi	r24, 0xEF	; 239
    4dac:	8a 30       	cpi	r24, 0x0A	; 10
    4dae:	78 f3       	brcs	.-34     	; 0x4d8e <extractString+0xe>
    {
        *q++ = *p++;
    }

    *q = '\0';
    4db0:	10 82       	st	Z, r1
    return p;
}
    4db2:	cd 01       	movw	r24, r26
    4db4:	08 95       	ret

    q = buffer;
    p = start;
    if (*p == '/')
    {
        p++;
    4db6:	dc 01       	movw	r26, r24
    4db8:	11 96       	adiw	r26, 0x01	; 1
    4dba:	41 81       	ldd	r20, Z+1	; 0x01
    4dbc:	e6 cf       	rjmp	.-52     	; 0x4d8a <extractString+0xa>

00004dbe <fileMode>:
    }
}

//-------------------------------------------------------------------------
int fileMode(char *s)
{
    4dbe:	cf 93       	push	r28
    4dc0:	df 93       	push	r29
    4dc2:	ec 01       	movw	r28, r24
    if (mystrlen(s) == 1)
    4dc4:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    4dc8:	01 97       	sbiw	r24, 0x01	; 1
    4dca:	89 f0       	breq	.+34     	; 0x4dee <fileMode+0x30>
        if (s[0] == 't')
        {
            return 4;
        }
    }
    else if (mystrlen(s) == 2)
    4dcc:	ce 01       	movw	r24, r28
    4dce:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    4dd2:	02 97       	sbiw	r24, 0x02	; 2
    4dd4:	31 f0       	breq	.+12     	; 0x4de2 <fileMode+0x24>
    4dd6:	20 e0       	ldi	r18, 0x00	; 0
    4dd8:	30 e0       	ldi	r19, 0x00	; 0
    else
    {
        return 0;
    }
    return 0;
}
    4dda:	c9 01       	movw	r24, r18
    4ddc:	df 91       	pop	r29
    4dde:	cf 91       	pop	r28
    4de0:	08 95       	ret
        if (s[0] == 't')
        {
            return 4;
        }
    }
    else if (mystrlen(s) == 2)
    4de2:	25 e0       	ldi	r18, 0x05	; 5
    4de4:	30 e0       	ldi	r19, 0x00	; 0
    else
    {
        return 0;
    }
    return 0;
}
    4de6:	c9 01       	movw	r24, r18
    4de8:	df 91       	pop	r29
    4dea:	cf 91       	pop	r28
    4dec:	08 95       	ret
//-------------------------------------------------------------------------
int fileMode(char *s)
{
    if (mystrlen(s) == 1)
    {
        if (s[0] == 'r')
    4dee:	88 81       	ld	r24, Y
    4df0:	82 37       	cpi	r24, 0x72	; 114
    4df2:	49 f0       	breq	.+18     	; 0x4e06 <fileMode+0x48>
        {
            return 1;
        }

        if (s[0] == 'w')
    4df4:	87 37       	cpi	r24, 0x77	; 119
    4df6:	69 f0       	breq	.+26     	; 0x4e12 <fileMode+0x54>
        {
            return 2;
        }

        if (s[0] == 'a')
    4df8:	81 36       	cpi	r24, 0x61	; 97
    4dfa:	41 f0       	breq	.+16     	; 0x4e0c <fileMode+0x4e>
        {
            return 3;
        }

        if (s[0] == 't')
    4dfc:	84 37       	cpi	r24, 0x74	; 116
    4dfe:	59 f7       	brne	.-42     	; 0x4dd6 <fileMode+0x18>
    4e00:	24 e0       	ldi	r18, 0x04	; 4
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	ea cf       	rjmp	.-44     	; 0x4dda <fileMode+0x1c>
//-------------------------------------------------------------------------
int fileMode(char *s)
{
    if (mystrlen(s) == 1)
    {
        if (s[0] == 'r')
    4e06:	21 e0       	ldi	r18, 0x01	; 1
    4e08:	30 e0       	ldi	r19, 0x00	; 0
    4e0a:	e7 cf       	rjmp	.-50     	; 0x4dda <fileMode+0x1c>
        if (s[0] == 'w')
        {
            return 2;
        }

        if (s[0] == 'a')
    4e0c:	23 e0       	ldi	r18, 0x03	; 3
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	e4 cf       	rjmp	.-56     	; 0x4dda <fileMode+0x1c>
        if (s[0] == 'r')
        {
            return 1;
        }

        if (s[0] == 'w')
    4e12:	22 e0       	ldi	r18, 0x02	; 2
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	e1 cf       	rjmp	.-62     	; 0x4dda <fileMode+0x1c>

00004e18 <extractLastName>:
    return p;
}

//-------------------------------------------------------------------------
char *extractLastName(char *pathname)
{
    4e18:	cf 93       	push	r28
    4e1a:	df 93       	push	r29
    4e1c:	ec 01       	movw	r28, r24
    char *p, *start;
    int length;

    length = mystrlen(pathname);
    4e1e:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    p = pathname + (length - 1);
    4e22:	fc 01       	movw	r30, r24
    4e24:	31 97       	sbiw	r30, 0x01	; 1
    4e26:	ec 0f       	add	r30, r28
    4e28:	fd 1f       	adc	r31, r29
    start = pathname;
    while ((*p != '/') && (p != start))
    4e2a:	80 81       	ld	r24, Z
    4e2c:	8f 32       	cpi	r24, 0x2F	; 47
    4e2e:	21 f4       	brne	.+8      	; 0x4e38 <extractLastName+0x20>
    4e30:	08 c0       	rjmp	.+16     	; 0x4e42 <extractLastName+0x2a>
    4e32:	82 91       	ld	r24, -Z
    4e34:	8f 32       	cpi	r24, 0x2F	; 47
    4e36:	29 f0       	breq	.+10     	; 0x4e42 <extractLastName+0x2a>
    4e38:	ce 17       	cp	r28, r30
    4e3a:	df 07       	cpc	r29, r31
    4e3c:	d1 f7       	brne	.-12     	; 0x4e32 <extractLastName+0x1a>
    {
        return p;
    }
    else
    {
        return ++p;
    4e3e:	fe 01       	movw	r30, r28
    4e40:	04 c0       	rjmp	.+8      	; 0x4e4a <extractLastName+0x32>
    while ((*p != '/') && (p != start))
    {
        p--;
    }

    if ((p == start) && ((*start) != '/'))
    4e42:	ec 17       	cp	r30, r28
    4e44:	fd 07       	cpc	r31, r29
    4e46:	29 f0       	breq	.+10     	; 0x4e52 <extractLastName+0x3a>
    {
        return p;
    }
    else
    {
        return ++p;
    4e48:	31 96       	adiw	r30, 0x01	; 1
    }
}
    4e4a:	cf 01       	movw	r24, r30
    4e4c:	df 91       	pop	r29
    4e4e:	cf 91       	pop	r28
    4e50:	08 95       	ret
    while ((*p != '/') && (p != start))
    {
        p--;
    }

    if ((p == start) && ((*start) != '/'))
    4e52:	8f 32       	cpi	r24, 0x2F	; 47
    4e54:	c9 f3       	breq	.-14     	; 0x4e48 <extractLastName+0x30>
    4e56:	f9 cf       	rjmp	.-14     	; 0x4e4a <extractLastName+0x32>

00004e58 <checkNodeValid>:




int checkNodeValid(int nodeaddr)
{
    4e58:	ff 92       	push	r15
    4e5a:	0f 93       	push	r16
    4e5c:	1f 93       	push	r17
    4e5e:	8c 01       	movw	r16, r24
    uint8_t validness;
    uint8_t nodetype;

    validness = fsread8uint(nodeaddr, VALIDOFFSET);
    4e60:	6d e0       	ldi	r22, 0x0D	; 13
    4e62:	70 e0       	ldi	r23, 0x00	; 0
    4e64:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    4e68:	f8 2e       	mov	r15, r24
    nodetype = fsread8uint(nodeaddr, TYPEOFFSET);
    4e6a:	c8 01       	movw	r24, r16
    4e6c:	6c e0       	ldi	r22, 0x0C	; 12
    4e6e:	70 e0       	ldi	r23, 0x00	; 0
    4e70:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    if (validness == 0)
    4e74:	ff 20       	and	r15, r15
    4e76:	39 f0       	breq	.+14     	; 0x4e86 <checkNodeValid+0x2e>
    {
        return 0;
    }
    else
    {
        return (int)nodetype;
    4e78:	28 2f       	mov	r18, r24
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    }
}
    4e7c:	c9 01       	movw	r24, r18
    4e7e:	1f 91       	pop	r17
    4e80:	0f 91       	pop	r16
    4e82:	ff 90       	pop	r15
    4e84:	08 95       	ret
    uint8_t validness;
    uint8_t nodetype;

    validness = fsread8uint(nodeaddr, VALIDOFFSET);
    nodetype = fsread8uint(nodeaddr, TYPEOFFSET);
    if (validness == 0)
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	30 e0       	ldi	r19, 0x00	; 0
    }
    else
    {
        return (int)nodetype;
    }
}
    4e8a:	c9 01       	movw	r24, r18
    4e8c:	1f 91       	pop	r17
    4e8e:	0f 91       	pop	r16
    4e90:	ff 90       	pop	r15
    4e92:	08 95       	ret

00004e94 <printNode>:
    return;
}

//-------------------------------------------------------------------------
void printNode(int addr)
{
    4e94:	ef 92       	push	r14
    4e96:	ff 92       	push	r15
    4e98:	0f 93       	push	r16
    4e9a:	1f 93       	push	r17
    4e9c:	df 93       	push	r29
    4e9e:	cf 93       	push	r28
    4ea0:	cd b7       	in	r28, 0x3d	; 61
    4ea2:	de b7       	in	r29, 0x3e	; 62
    4ea4:	2d 97       	sbiw	r28, 0x0d	; 13
    4ea6:	0f b6       	in	r0, 0x3f	; 63
    4ea8:	f8 94       	cli
    4eaa:	de bf       	out	0x3e, r29	; 62
    4eac:	0f be       	out	0x3f, r0	; 63
    4eae:	cd bf       	out	0x3d, r28	; 61
    4eb0:	7c 01       	movw	r14, r24
    uint8_t uid, parent, type, valid;
    uint8_t subdirectory[10];
    int i;
    uint8_t flashdirectory[8];

    filename[12] = '\0';
    4eb2:	1d 86       	std	Y+13, r1	; 0x0d
    fsreadBytes(addr, FILENAMEOFFSET, 12, filename);
    4eb4:	60 e0       	ldi	r22, 0x00	; 0
    4eb6:	70 e0       	ldi	r23, 0x00	; 0
    4eb8:	4c e0       	ldi	r20, 0x0C	; 12
    4eba:	50 e0       	ldi	r21, 0x00	; 0
    4ebc:	9e 01       	movw	r18, r28
    4ebe:	2f 5f       	subi	r18, 0xFF	; 255
    4ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec2:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <fsreadBytes>
    type = fsread8uint(addr, TYPEOFFSET);
    4ec6:	c7 01       	movw	r24, r14
    4ec8:	6c e0       	ldi	r22, 0x0C	; 12
    4eca:	70 e0       	ldi	r23, 0x00	; 0
    4ecc:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    4ed0:	18 2f       	mov	r17, r24
    valid = fsread8uint(addr, VALIDOFFSET);
    4ed2:	c7 01       	movw	r24, r14
    4ed4:	6d e0       	ldi	r22, 0x0D	; 13
    4ed6:	70 e0       	ldi	r23, 0x00	; 0
    4ed8:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    if ((valid > 0) && (type == DIRNODE))
    4edc:	88 23       	and	r24, r24
    4ede:	79 f0       	breq	.+30     	; 0x4efe <printNode+0x6a>
    4ee0:	11 30       	cpi	r17, 0x01	; 1
    4ee2:	21 f1       	breq	.+72     	; 0x4f2c <printNode+0x98>
        for (i = 0; i < 10; i++)
        {
            subdirectory[i] = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        }
    }
    if ((valid > 0) && (type == FILENODE))
    4ee4:	12 30       	cpi	r17, 0x02	; 2
    4ee6:	59 f4       	brne	.+22     	; 0x4efe <printNode+0x6a>
    fsreadBytes(addr, FILENAMEOFFSET, 12, filename);
    type = fsread8uint(addr, TYPEOFFSET);
    valid = fsread8uint(addr, VALIDOFFSET);
    if ((valid > 0) && (type == DIRNODE))
    {
        for (i = 0; i < 10; i++)
    4ee8:	0e e0       	ldi	r16, 0x0E	; 14
    4eea:	10 e0       	ldi	r17, 0x00	; 0
    }
    if ((valid > 0) && (type == FILENODE))
    {
        for (i = 0; i < 8; i++)
        {
            flashdirectory[i] = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    4eec:	c7 01       	movw	r24, r14
    4eee:	b8 01       	movw	r22, r16
    4ef0:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    4ef4:	0f 5f       	subi	r16, 0xFF	; 255
    4ef6:	1f 4f       	sbci	r17, 0xFF	; 255
            subdirectory[i] = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        }
    }
    if ((valid > 0) && (type == FILENODE))
    {
        for (i = 0; i < 8; i++)
    4ef8:	06 31       	cpi	r16, 0x16	; 22
    4efa:	11 05       	cpc	r17, r1
    4efc:	b9 f7       	brne	.-18     	; 0x4eec <printNode+0x58>
        {
            flashdirectory[i] = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
        }
    }
    uid = fsread8uint(addr, 28);
    4efe:	c7 01       	movw	r24, r14
    4f00:	6c e1       	ldi	r22, 0x1C	; 28
    4f02:	70 e0       	ldi	r23, 0x00	; 0
    4f04:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    parent = fsread8uint(addr, 31);
    4f08:	c7 01       	movw	r24, r14
    4f0a:	6f e1       	ldi	r22, 0x1F	; 31
    4f0c:	70 e0       	ldi	r23, 0x00	; 0
    4f0e:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
        //                        printf("The %d sub flash is %d\n", i, flashdirectory[i]);
    }
    //        printf("The node parent is %d\n", parent);
    //        printf("*************************\n");
    return;
}
    4f12:	2d 96       	adiw	r28, 0x0d	; 13
    4f14:	0f b6       	in	r0, 0x3f	; 63
    4f16:	f8 94       	cli
    4f18:	de bf       	out	0x3e, r29	; 62
    4f1a:	0f be       	out	0x3f, r0	; 63
    4f1c:	cd bf       	out	0x3d, r28	; 61
    4f1e:	cf 91       	pop	r28
    4f20:	df 91       	pop	r29
    4f22:	1f 91       	pop	r17
    4f24:	0f 91       	pop	r16
    4f26:	ff 90       	pop	r15
    4f28:	ef 90       	pop	r14
    4f2a:	08 95       	ret

    filename[12] = '\0';
    fsreadBytes(addr, FILENAMEOFFSET, 12, filename);
    type = fsread8uint(addr, TYPEOFFSET);
    valid = fsread8uint(addr, VALIDOFFSET);
    if ((valid > 0) && (type == DIRNODE))
    4f2c:	0e e0       	ldi	r16, 0x0E	; 14
    4f2e:	10 e0       	ldi	r17, 0x00	; 0
    {
        for (i = 0; i < 10; i++)
        {
            subdirectory[i] = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    4f30:	c7 01       	movw	r24, r14
    4f32:	b8 01       	movw	r22, r16
    4f34:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    4f38:	0f 5f       	subi	r16, 0xFF	; 255
    4f3a:	1f 4f       	sbci	r17, 0xFF	; 255
    fsreadBytes(addr, FILENAMEOFFSET, 12, filename);
    type = fsread8uint(addr, TYPEOFFSET);
    valid = fsread8uint(addr, VALIDOFFSET);
    if ((valid > 0) && (type == DIRNODE))
    {
        for (i = 0; i < 10; i++)
    4f3c:	08 31       	cpi	r16, 0x18	; 24
    4f3e:	11 05       	cpc	r17, r1
    4f40:	b9 f7       	brne	.-18     	; 0x4f30 <printNode+0x9c>
    4f42:	dd cf       	rjmp	.-70     	; 0x4efe <printNode+0x6a>

00004f44 <inodeMatch>:
    return;
}

//-------------------------------------------------------------------------
int inodeMatch(uint8_t addr, char *string)
{
    4f44:	af 92       	push	r10
    4f46:	bf 92       	push	r11
    4f48:	df 92       	push	r13
    4f4a:	ef 92       	push	r14
    4f4c:	ff 92       	push	r15
    4f4e:	0f 93       	push	r16
    4f50:	1f 93       	push	r17
    4f52:	df 93       	push	r29
    4f54:	cf 93       	push	r28
    4f56:	cd b7       	in	r28, 0x3d	; 61
    4f58:	de b7       	in	r29, 0x3e	; 62
    4f5a:	2d 97       	sbiw	r28, 0x0d	; 13
    4f5c:	0f b6       	in	r0, 0x3f	; 63
    4f5e:	f8 94       	cli
    4f60:	de bf       	out	0x3e, r29	; 62
    4f62:	0f be       	out	0x3f, r0	; 63
    4f64:	cd bf       	out	0x3d, r28	; 61
    4f66:	18 2f       	mov	r17, r24
    4f68:	5b 01       	movw	r10, r22
    char temp[13];
    uint8_t length;
    uint8_t i;
    uint8_t valid;

    valid = fsread8uint(addr, VALIDOFFSET);
    4f6a:	90 e0       	ldi	r25, 0x00	; 0
    4f6c:	6d e0       	ldi	r22, 0x0D	; 13
    4f6e:	70 e0       	ldi	r23, 0x00	; 0
    4f70:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    if (valid == 0)
    4f74:	88 23       	and	r24, r24
    4f76:	99 f4       	brne	.+38     	; 0x4f9e <inodeMatch+0x5a>
        return 0;
    }
    fsreadBytes(addr, FILENAMEOFFSET, 12, temp);
    temp[12] = '\0';
    length = mystrlen(temp);
    for (i = 0; i < length; i++)
    4f78:	20 e0       	ldi	r18, 0x00	; 0
    4f7a:	30 e0       	ldi	r19, 0x00	; 0
        {
            return 1;
        }
    }
    return 0;
}
    4f7c:	c9 01       	movw	r24, r18
    4f7e:	2d 96       	adiw	r28, 0x0d	; 13
    4f80:	0f b6       	in	r0, 0x3f	; 63
    4f82:	f8 94       	cli
    4f84:	de bf       	out	0x3e, r29	; 62
    4f86:	0f be       	out	0x3f, r0	; 63
    4f88:	cd bf       	out	0x3d, r28	; 61
    4f8a:	cf 91       	pop	r28
    4f8c:	df 91       	pop	r29
    4f8e:	1f 91       	pop	r17
    4f90:	0f 91       	pop	r16
    4f92:	ff 90       	pop	r15
    4f94:	ef 90       	pop	r14
    4f96:	df 90       	pop	r13
    4f98:	bf 90       	pop	r11
    4f9a:	af 90       	pop	r10
    4f9c:	08 95       	ret
    valid = fsread8uint(addr, VALIDOFFSET);
    if (valid == 0)
    {
        return 0;
    }
    fsreadBytes(addr, FILENAMEOFFSET, 12, temp);
    4f9e:	81 2f       	mov	r24, r17
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	60 e0       	ldi	r22, 0x00	; 0
    4fa4:	70 e0       	ldi	r23, 0x00	; 0
    4fa6:	4c e0       	ldi	r20, 0x0C	; 12
    4fa8:	50 e0       	ldi	r21, 0x00	; 0
    4faa:	7e 01       	movw	r14, r28
    4fac:	08 94       	sec
    4fae:	e1 1c       	adc	r14, r1
    4fb0:	f1 1c       	adc	r15, r1
    4fb2:	97 01       	movw	r18, r14
    4fb4:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <fsreadBytes>
    temp[12] = '\0';
    4fb8:	1d 86       	std	Y+13, r1	; 0x0d
    length = mystrlen(temp);
    4fba:	c7 01       	movw	r24, r14
    4fbc:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    4fc0:	d8 2e       	mov	r13, r24
    for (i = 0; i < length; i++)
    4fc2:	88 23       	and	r24, r24
    4fc4:	c9 f2       	breq	.-78     	; 0x4f78 <inodeMatch+0x34>
    4fc6:	87 01       	movw	r16, r14
    4fc8:	06 c0       	rjmp	.+12     	; 0x4fd6 <inodeMatch+0x92>
    {
        if (superstring(temp + i, string) == 0)
    4fca:	0f 5f       	subi	r16, 0xFF	; 255
    4fcc:	1f 4f       	sbci	r17, 0xFF	; 255
        return 0;
    }
    fsreadBytes(addr, FILENAMEOFFSET, 12, temp);
    temp[12] = '\0';
    length = mystrlen(temp);
    for (i = 0; i < length; i++)
    4fce:	80 2f       	mov	r24, r16
    4fd0:	8e 19       	sub	r24, r14
    4fd2:	8d 15       	cp	r24, r13
    4fd4:	88 f6       	brcc	.-94     	; 0x4f78 <inodeMatch+0x34>
    {
        if (superstring(temp + i, string) == 0)
    4fd6:	c8 01       	movw	r24, r16
    4fd8:	b5 01       	movw	r22, r10
    4fda:	0e 94 ac 3b 	call	0x7758	; 0x7758 <superstring>
    4fde:	89 2b       	or	r24, r25
    4fe0:	a1 f7       	brne	.-24     	; 0x4fca <inodeMatch+0x86>
    4fe2:	21 e0       	ldi	r18, 0x01	; 1
    4fe4:	30 e0       	ldi	r19, 0x00	; 0
    4fe6:	ca cf       	rjmp	.-108    	; 0x4f7c <inodeMatch+0x38>

00004fe8 <copyVectorPage>:
    }
}

//-------------------------------------------------------------------------
void copyVectorPage(int from, int to)
{
    4fe8:	ef 92       	push	r14
    4fea:	ff 92       	push	r15
    4fec:	0f 93       	push	r16
    4fee:	1f 93       	push	r17
    4ff0:	cf 93       	push	r28
    4ff2:	df 93       	push	r29
    4ff4:	8b 01       	movw	r16, r22
    4ff6:	7c 01       	movw	r14, r24
    4ff8:	08 94       	sec
    4ffa:	e1 08       	sbc	r14, r1
    4ffc:	f1 08       	sbc	r15, r1
    4ffe:	ee 0c       	add	r14, r14
    5000:	ff 1c       	adc	r15, r15
    5002:	ee 0c       	add	r14, r14
    5004:	ff 1c       	adc	r15, r15
    5006:	ee 0c       	add	r14, r14
    5008:	ff 1c       	adc	r15, r15
    500a:	01 50       	subi	r16, 0x01	; 1
    500c:	10 40       	sbci	r17, 0x00	; 0
    500e:	00 0f       	add	r16, r16
    5010:	11 1f       	adc	r17, r17
    5012:	00 0f       	add	r16, r16
    5014:	11 1f       	adc	r17, r17
    5016:	00 0f       	add	r16, r16
    5018:	11 1f       	adc	r17, r17
    501a:	c0 e0       	ldi	r28, 0x00	; 0
    501c:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 8; i++)
    {
        pagefrom = i + (from - 1) * 8;
        pageto = i + (to - 1) * 8;
        copyPage(pagefrom, pageto);
    501e:	be 01       	movw	r22, r28
    5020:	60 0f       	add	r22, r16
    5022:	71 1f       	adc	r23, r17
    5024:	ce 01       	movw	r24, r28
    5026:	8e 0d       	add	r24, r14
    5028:	9f 1d       	adc	r25, r15
    502a:	0e 94 6d 35 	call	0x6ada	; 0x6ada <copyPage>
void copyVectorPage(int from, int to)
{
    int i;
    int pagefrom, pageto;

    for (i = 0; i < 8; i++)
    502e:	21 96       	adiw	r28, 0x01	; 1
    5030:	c8 30       	cpi	r28, 0x08	; 8
    5032:	d1 05       	cpc	r29, r1
    5034:	a1 f7       	brne	.-24     	; 0x501e <copyVectorPage+0x36>
        pagefrom = i + (from - 1) * 8;
        pageto = i + (to - 1) * 8;
        copyPage(pagefrom, pageto);
    }
    return;
}
    5036:	df 91       	pop	r29
    5038:	cf 91       	pop	r28
    503a:	1f 91       	pop	r17
    503c:	0f 91       	pop	r16
    503e:	ff 90       	pop	r15
    5040:	ef 90       	pop	r14
    5042:	08 95       	ret

00005044 <copyVectorNode>:
    buildNewNode(FSROOTNODE, "root", 0, 0, DIRNODE);
}

//-------------------------------------------------------------------------
void copyVectorNode(int from, int to)
{
    5044:	ef 92       	push	r14
    5046:	ff 92       	push	r15
    5048:	0f 93       	push	r16
    504a:	1f 93       	push	r17
    504c:	cf 93       	push	r28
    504e:	df 93       	push	r29
    5050:	7c 01       	movw	r14, r24
    5052:	8b 01       	movw	r16, r22
    5054:	c0 e0       	ldi	r28, 0x00	; 0
    5056:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 32; i++)
    {
        uint8_t temp;

        temp = fsread8uint(from, i);
    5058:	c7 01       	movw	r24, r14
    505a:	be 01       	movw	r22, r28
    505c:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    5060:	48 2f       	mov	r20, r24
        fswrite8uint(to, i, temp);
    5062:	c8 01       	movw	r24, r16
    5064:	be 01       	movw	r22, r28
    5066:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
//-------------------------------------------------------------------------
void copyVectorNode(int from, int to)
{
    int i;

    for (i = 0; i < 32; i++)
    506a:	21 96       	adiw	r28, 0x01	; 1
    506c:	c0 32       	cpi	r28, 0x20	; 32
    506e:	d1 05       	cpc	r29, r1
    5070:	99 f7       	brne	.-26     	; 0x5058 <copyVectorNode+0x14>
        uint8_t temp;

        temp = fsread8uint(from, i);
        fswrite8uint(to, i, temp);
    }
}
    5072:	df 91       	pop	r29
    5074:	cf 91       	pop	r28
    5076:	1f 91       	pop	r17
    5078:	0f 91       	pop	r16
    507a:	ff 90       	pop	r15
    507c:	ef 90       	pop	r14
    507e:	08 95       	ret

00005080 <deleteNode>:
    initVectorNode();
}

//-------------------------------------------------------------------------
void deleteNode(int addr)
{
    5080:	ef 92       	push	r14
    5082:	ff 92       	push	r15
    5084:	0f 93       	push	r16
    5086:	1f 93       	push	r17
    5088:	cf 93       	push	r28
    508a:	df 93       	push	r29
    508c:	7c 01       	movw	r14, r24
    uint8_t type;
    uint8_t parent;

    type = fsread8uint(addr, TYPEOFFSET);
    508e:	6c e0       	ldi	r22, 0x0C	; 12
    5090:	70 e0       	ldi	r23, 0x00	; 0
    5092:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    5096:	18 2f       	mov	r17, r24
    parent = fsread8uint(addr, 31);
    5098:	c7 01       	movw	r24, r14
    509a:	6f e1       	ldi	r22, 0x1F	; 31
    509c:	70 e0       	ldi	r23, 0x00	; 0
    509e:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    50a2:	08 2f       	mov	r16, r24
    if (type == DIRNODE)
    50a4:	11 30       	cpi	r17, 0x01	; 1
    50a6:	99 f0       	breq	.+38     	; 0x50ce <deleteNode+0x4e>
                    break;
                }
            }
        }
    }
    else if (type == FILENODE)
    50a8:	12 30       	cpi	r17, 0x02	; 2
    50aa:	09 f4       	brne	.+2      	; 0x50ae <deleteNode+0x2e>
    50ac:	63 c0       	rjmp	.+198    	; 0x5174 <deleteNode+0xf4>
                    break;
                }
            }
        }
    }
    else if (type == DEVNODE)
    50ae:	13 30       	cpi	r17, 0x03	; 3
    50b0:	09 f4       	brne	.+2      	; 0x50b4 <deleteNode+0x34>
    50b2:	44 c0       	rjmp	.+136    	; 0x513c <deleteNode+0xbc>
                    break;
                }
            }
        }
    }
    else if (type == APPNODE)
    50b4:	14 30       	cpi	r17, 0x04	; 4
    50b6:	09 f4       	brne	.+2      	; 0x50ba <deleteNode+0x3a>
    50b8:	a6 c0       	rjmp	.+332    	; 0x5206 <deleteNode+0x186>
                    break;
                }
            }
        }
    }
    releaseVectorNode(addr);
    50ba:	c7 01       	movw	r24, r14
    50bc:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <releaseVectorNode>
}
    50c0:	df 91       	pop	r29
    50c2:	cf 91       	pop	r28
    50c4:	1f 91       	pop	r17
    50c6:	0f 91       	pop	r16
    50c8:	ff 90       	pop	r15
    50ca:	ef 90       	pop	r14
    50cc:	08 95       	ret
    uint8_t type;
    uint8_t parent;

    type = fsread8uint(addr, TYPEOFFSET);
    parent = fsread8uint(addr, 31);
    if (type == DIRNODE)
    50ce:	ce e0       	ldi	r28, 0x0E	; 14
    50d0:	d0 e0       	ldi	r29, 0x00	; 0
    50d2:	04 c0       	rjmp	.+8      	; 0x50dc <deleteNode+0x5c>
            uint8_t subaddr;

            subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
            if (subaddr > 0)
            {
                deleteNode(subaddr);
    50d4:	21 96       	adiw	r28, 0x01	; 1
    parent = fsread8uint(addr, 31);
    if (type == DIRNODE)
    {
        uint8_t i;

        for (i = 0; i < 10; i++)
    50d6:	c8 31       	cpi	r28, 0x18	; 24
    50d8:	d1 05       	cpc	r29, r1
    50da:	69 f0       	breq	.+26     	; 0x50f6 <deleteNode+0x76>
        {
            uint8_t subaddr;

            subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    50dc:	c7 01       	movw	r24, r14
    50de:	be 01       	movw	r22, r28
    50e0:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
            if (subaddr > 0)
    50e4:	88 23       	and	r24, r24
    50e6:	b1 f3       	breq	.-20     	; 0x50d4 <deleteNode+0x54>
            {
                deleteNode(subaddr);
    50e8:	90 e0       	ldi	r25, 0x00	; 0
    50ea:	0e 94 40 28 	call	0x5080	; 0x5080 <deleteNode>
    50ee:	21 96       	adiw	r28, 0x01	; 1
    parent = fsread8uint(addr, 31);
    if (type == DIRNODE)
    {
        uint8_t i;

        for (i = 0; i < 10; i++)
    50f0:	c8 31       	cpi	r28, 0x18	; 24
    50f2:	d1 05       	cpc	r29, r1
    50f4:	99 f7       	brne	.-26     	; 0x50dc <deleteNode+0x5c>
            if (subaddr > 0)
            {
                deleteNode(subaddr);
            }
        }
        fswrite8uint(addr, VALIDOFFSET, 0);
    50f6:	c7 01       	movw	r24, r14
    50f8:	6d e0       	ldi	r22, 0x0D	; 13
    50fa:	70 e0       	ldi	r23, 0x00	; 0
    50fc:	40 e0       	ldi	r20, 0x00	; 0
    50fe:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    5102:	e1 14       	cp	r14, r1
    5104:	f1 04       	cpc	r15, r1
    5106:	b9 f0       	breq	.+46     	; 0x5136 <deleteNode+0xb6>
    5108:	ce e0       	ldi	r28, 0x0E	; 14
    510a:	d0 e0       	ldi	r29, 0x00	; 0
    510c:	04 c0       	rjmp	.+8      	; 0x5116 <deleteNode+0x96>

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
    510e:	21 96       	adiw	r28, 0x01	; 1
        }
        else
        {
            uint8_t i;

            for (i = 0; i < 10; i++)
    5110:	c8 31       	cpi	r28, 0x18	; 24
    5112:	d1 05       	cpc	r29, r1
    5114:	91 f2       	breq	.-92     	; 0x50ba <deleteNode+0x3a>
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    5116:	80 2f       	mov	r24, r16
    5118:	90 e0       	ldi	r25, 0x00	; 0
    511a:	be 01       	movw	r22, r28
    511c:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
                if (subaddr == addr)
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	8e 15       	cp	r24, r14
    5124:	9f 05       	cpc	r25, r15
    5126:	99 f7       	brne	.-26     	; 0x510e <deleteNode+0x8e>
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
    5128:	80 2f       	mov	r24, r16
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	be 01       	movw	r22, r28
    512e:	40 e0       	ldi	r20, 0x00	; 0
    5130:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
    5134:	c2 cf       	rjmp	.-124    	; 0x50ba <deleteNode+0x3a>
            {
                deleteNode(subaddr);
            }
        }
        fswrite8uint(addr, VALIDOFFSET, 0);
        if ((addr == 0) && (parent == 0))
    5136:	00 23       	and	r16, r16
    5138:	39 f7       	brne	.-50     	; 0x5108 <deleteNode+0x88>
    513a:	bf cf       	rjmp	.-130    	; 0x50ba <deleteNode+0x3a>
            }
        }
    }
    else if (type == DEVNODE)
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
    513c:	c7 01       	movw	r24, r14
    513e:	6d e0       	ldi	r22, 0x0D	; 13
    5140:	70 e0       	ldi	r23, 0x00	; 0
    5142:	40 e0       	ldi	r20, 0x00	; 0
    5144:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    5148:	e1 14       	cp	r14, r1
    514a:	f1 04       	cpc	r15, r1
    514c:	09 f4       	brne	.+2      	; 0x5150 <deleteNode+0xd0>
    514e:	76 c0       	rjmp	.+236    	; 0x523c <deleteNode+0x1bc>
    5150:	ce e0       	ldi	r28, 0x0E	; 14
    5152:	d0 e0       	ldi	r29, 0x00	; 0
    5154:	05 c0       	rjmp	.+10     	; 0x5160 <deleteNode+0xe0>

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
    5156:	21 96       	adiw	r28, 0x01	; 1
        }
        else
        {
            int i;

            for (i = 0; i < 10; i++)
    5158:	c8 31       	cpi	r28, 0x18	; 24
    515a:	d1 05       	cpc	r29, r1
    515c:	09 f4       	brne	.+2      	; 0x5160 <deleteNode+0xe0>
    515e:	ad cf       	rjmp	.-166    	; 0x50ba <deleteNode+0x3a>
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    5160:	80 2f       	mov	r24, r16
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	be 01       	movw	r22, r28
    5166:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
                if (subaddr == addr)
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	8e 15       	cp	r24, r14
    516e:	9f 05       	cpc	r25, r15
    5170:	91 f7       	brne	.-28     	; 0x5156 <deleteNode+0xd6>
    5172:	da cf       	rjmp	.-76     	; 0x5128 <deleteNode+0xa8>
    else if (type == FILENODE)
    {
        char i;
        uint8_t readpage;

        fswrite8uint(addr, VALIDOFFSET, 0);
    5174:	c7 01       	movw	r24, r14
    5176:	6d e0       	ldi	r22, 0x0D	; 13
    5178:	70 e0       	ldi	r23, 0x00	; 0
    517a:	40 e0       	ldi	r20, 0x00	; 0
    517c:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    5180:	e1 14       	cp	r14, r1
    5182:	f1 04       	cpc	r15, r1
    5184:	11 f4       	brne	.+4      	; 0x518a <deleteNode+0x10a>
    5186:	00 23       	and	r16, r16
    5188:	81 f0       	breq	.+32     	; 0x51aa <deleteNode+0x12a>
    518a:	ce e0       	ldi	r28, 0x0E	; 14
    518c:	d0 e0       	ldi	r29, 0x00	; 0
        {
            for (i = 0; i < 10; i++)
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    518e:	80 2f       	mov	r24, r16
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	be 01       	movw	r22, r28
    5194:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
                if (subaddr == addr)
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	8e 15       	cp	r24, r14
    519c:	9f 05       	cpc	r25, r15
    519e:	09 f4       	brne	.+2      	; 0x51a2 <deleteNode+0x122>
    51a0:	54 c0       	rjmp	.+168    	; 0x524a <deleteNode+0x1ca>
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
    51a2:	21 96       	adiw	r28, 0x01	; 1
        if ((addr == 0) && (parent == 0))
        {
        }
        else
        {
            for (i = 0; i < 10; i++)
    51a4:	c8 31       	cpi	r28, 0x18	; 24
    51a6:	d1 05       	cpc	r29, r1
    51a8:	91 f7       	brne	.-28     	; 0x518e <deleteNode+0x10e>
    51aa:	ce e0       	ldi	r28, 0x0E	; 14
    51ac:	d0 e0       	ldi	r29, 0x00	; 0
                }
            }
        }
        for (i = 0; i < 8; i++)
        {
            readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    51ae:	c7 01       	movw	r24, r14
    51b0:	be 01       	movw	r22, r28
    51b2:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
            if (readpage == 0)
    51b6:	88 23       	and	r24, r24
    51b8:	39 f0       	breq	.+14     	; 0x51c8 <deleteNode+0x148>
            {
                break;
            }
            else
            {
                releaseFlashPage(readpage);
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <releaseFlashPage>
    51c0:	21 96       	adiw	r28, 0x01	; 1
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
                }
            }
        }
        for (i = 0; i < 8; i++)
    51c2:	c6 31       	cpi	r28, 0x16	; 22
    51c4:	d1 05       	cpc	r29, r1
    51c6:	99 f7       	brne	.-26     	; 0x51ae <deleteNode+0x12e>
            }
        }
        {
            uint8_t currentaddr;

            currentaddr = addr;
    51c8:	1e 2d       	mov	r17, r14
            while (1)
            {
                currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
    51ca:	81 2f       	mov	r24, r17
    51cc:	90 e0       	ldi	r25, 0x00	; 0
    51ce:	68 e1       	ldi	r22, 0x18	; 24
    51d0:	70 e0       	ldi	r23, 0x00	; 0
    51d2:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    51d6:	18 2f       	mov	r17, r24
                if (currentaddr > 0)
    51d8:	88 23       	and	r24, r24
    51da:	09 f4       	brne	.+2      	; 0x51de <deleteNode+0x15e>
    51dc:	6e cf       	rjmp	.-292    	; 0x50ba <deleteNode+0x3a>
                {
                    releaseVectorNode(currentaddr);
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <releaseVectorNode>
    51e4:	ce e0       	ldi	r28, 0x0E	; 14
    51e6:	d0 e0       	ldi	r29, 0x00	; 0
                    for (i = 0; i < 8; i++)
                    {
                        readpage =
    51e8:	81 2f       	mov	r24, r17
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	be 01       	movw	r22, r28
    51ee:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
                            fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + i);
                        if (readpage == 0)
    51f2:	88 23       	and	r24, r24
    51f4:	51 f3       	breq	.-44     	; 0x51ca <deleteNode+0x14a>
                        {
                            break;
                        }
                        else
                        {
                            releaseFlashPage(readpage);
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <releaseFlashPage>
    51fc:	21 96       	adiw	r28, 0x01	; 1
            {
                currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
                if (currentaddr > 0)
                {
                    releaseVectorNode(currentaddr);
                    for (i = 0; i < 8; i++)
    51fe:	c6 31       	cpi	r28, 0x16	; 22
    5200:	d1 05       	cpc	r29, r1
    5202:	91 f7       	brne	.-28     	; 0x51e8 <deleteNode+0x168>
    5204:	e2 cf       	rjmp	.-60     	; 0x51ca <deleteNode+0x14a>
            }
        }
    }
    else if (type == APPNODE)
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
    5206:	c7 01       	movw	r24, r14
    5208:	6d e0       	ldi	r22, 0x0D	; 13
    520a:	70 e0       	ldi	r23, 0x00	; 0
    520c:	40 e0       	ldi	r20, 0x00	; 0
    520e:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
        if ((addr == 0) && (parent == 0))
    5212:	e1 14       	cp	r14, r1
    5214:	f1 04       	cpc	r15, r1
    5216:	b1 f0       	breq	.+44     	; 0x5244 <deleteNode+0x1c4>
    5218:	ce e0       	ldi	r28, 0x0E	; 14
    521a:	d0 e0       	ldi	r29, 0x00	; 0
    521c:	05 c0       	rjmp	.+10     	; 0x5228 <deleteNode+0x1a8>

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
    521e:	21 96       	adiw	r28, 0x01	; 1
        }
        else
        {
            int i;

            for (i = 0; i < 10; i++)
    5220:	c8 31       	cpi	r28, 0x18	; 24
    5222:	d1 05       	cpc	r29, r1
    5224:	09 f4       	brne	.+2      	; 0x5228 <deleteNode+0x1a8>
    5226:	49 cf       	rjmp	.-366    	; 0x50ba <deleteNode+0x3a>
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    5228:	80 2f       	mov	r24, r16
    522a:	90 e0       	ldi	r25, 0x00	; 0
    522c:	be 01       	movw	r22, r28
    522e:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
                if (subaddr == addr)
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	8e 15       	cp	r24, r14
    5236:	9f 05       	cpc	r25, r15
    5238:	91 f7       	brne	.-28     	; 0x521e <deleteNode+0x19e>
    523a:	76 cf       	rjmp	.-276    	; 0x5128 <deleteNode+0xa8>
        }
    }
    else if (type == DEVNODE)
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
        if ((addr == 0) && (parent == 0))
    523c:	00 23       	and	r16, r16
    523e:	09 f0       	breq	.+2      	; 0x5242 <deleteNode+0x1c2>
    5240:	87 cf       	rjmp	.-242    	; 0x5150 <deleteNode+0xd0>
    5242:	3b cf       	rjmp	.-394    	; 0x50ba <deleteNode+0x3a>
        }
    }
    else if (type == APPNODE)
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
        if ((addr == 0) && (parent == 0))
    5244:	00 23       	and	r16, r16
    5246:	41 f7       	brne	.-48     	; 0x5218 <deleteNode+0x198>
    5248:	38 cf       	rjmp	.-400    	; 0x50ba <deleteNode+0x3a>
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
    524a:	80 2f       	mov	r24, r16
    524c:	90 e0       	ldi	r25, 0x00	; 0
    524e:	be 01       	movw	r22, r28
    5250:	40 e0       	ldi	r20, 0x00	; 0
    5252:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
    5256:	ce e0       	ldi	r28, 0x0E	; 14
    5258:	d0 e0       	ldi	r29, 0x00	; 0
    525a:	a9 cf       	rjmp	.-174    	; 0x51ae <deleteNode+0x12e>

0000525c <formatFSLite>:
}

//-------------------------------------------------------------------------
void formatFSLite()
{
    initVectorFlash();
    525c:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <initVectorFlash>
    initVectorNode();
    5260:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <initVectorNode>
}
    5264:	08 95       	ret

00005266 <formatFS>:
    return;
}

//-------------------------------------------------------------------------
void formatFS()
{
    5266:	cf 93       	push	r28
    5268:	df 93       	push	r29
    526a:	c0 e0       	ldi	r28, 0x00	; 0
    526c:	d0 e0       	ldi	r29, 0x00	; 0
    int i;

    for (i = 0; i <= FILE_SYS_RANGE; i++)
    {
        fsinitBytes(i, 0, 32, 0);
    526e:	ce 01       	movw	r24, r28
    5270:	60 e0       	ldi	r22, 0x00	; 0
    5272:	70 e0       	ldi	r23, 0x00	; 0
    5274:	40 e2       	ldi	r20, 0x20	; 32
    5276:	50 e0       	ldi	r21, 0x00	; 0
    5278:	20 e0       	ldi	r18, 0x00	; 0
    527a:	0e 94 ef 25 	call	0x4bde	; 0x4bde <fsinitBytes>
//-------------------------------------------------------------------------
void formatFS()
{
    int i;

    for (i = 0; i <= FILE_SYS_RANGE; i++)
    527e:	21 96       	adiw	r28, 0x01	; 1
    5280:	c1 32       	cpi	r28, 0x21	; 33
    5282:	d1 05       	cpc	r29, r1
    5284:	a1 f7       	brne	.-24     	; 0x526e <formatFS+0x8>
    {
        fsinitBytes(i, 0, 32, 0);
    }
    //  write8uint(i, VALIDOFFSET, 0); 
    initVectorFlash();
    5286:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <initVectorFlash>
    initVectorNode();
    528a:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <initVectorNode>
}
    528e:	df 91       	pop	r29
    5290:	cf 91       	pop	r28
    5292:	08 95       	ret

00005294 <buildNewNode>:
}

//-------------------------------------------------------------------------
void buildNewNode(int addr, char *name, uint8_t uid, uint8_t parent, uint8_t
                  type)
{
    5294:	df 92       	push	r13
    5296:	ef 92       	push	r14
    5298:	ff 92       	push	r15
    529a:	0f 93       	push	r16
    529c:	1f 93       	push	r17
    529e:	cf 93       	push	r28
    52a0:	df 93       	push	r29
    52a2:	7c 01       	movw	r14, r24
    52a4:	eb 01       	movw	r28, r22
    52a6:	d4 2e       	mov	r13, r20
    52a8:	12 2f       	mov	r17, r18
    uint8_t namelength;

    namelength = mystrlen(name);
    52aa:	cb 01       	movw	r24, r22
    52ac:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    52b0:	48 2f       	mov	r20, r24
    if (namelength < 12)
    52b2:	8c 30       	cpi	r24, 0x0C	; 12
    52b4:	08 f4       	brcc	.+2      	; 0x52b8 <buildNewNode+0x24>
    {
        namelength++;
    52b6:	4f 5f       	subi	r20, 0xFF	; 255
    }
    //consider several types of type
    if (type == DIRNODE)
    52b8:	01 30       	cpi	r16, 0x01	; 1
    52ba:	09 f4       	brne	.+2      	; 0x52be <buildNewNode+0x2a>
    52bc:	5f c0       	rjmp	.+190    	; 0x537c <buildNewNode+0xe8>
        fsinitBytes(addr, DIR_ADDRSUBOFFSET, 14, 0);
        fswrite8uint(addr, DIR_UIDOFFSET, uid);
        fswrite16uint(addr, DIR_SIZEOFFSET, 0);
        fswrite8uint(addr, DIR_PARENTOFFSET, parent);
    }
    else if (type == FILENODE)
    52be:	02 30       	cpi	r16, 0x02	; 2
    52c0:	09 f4       	brne	.+2      	; 0x52c4 <buildNewNode+0x30>
    52c2:	68 c0       	rjmp	.+208    	; 0x5394 <buildNewNode+0x100>
        fsinitBytes(addr, FILE_ADDRPAGEOFFSET, 14, 0);
        fswrite8uint(addr, FILE_UIDOFFSET, uid);
        fswrite16uint(addr, FILE_SIZEOFFSET, 0);
        fswrite8uint(addr, FILE_PARENTOFFSET, parent);
    }
    else if (type == DEVNODE)
    52c4:	03 30       	cpi	r16, 0x03	; 3
    52c6:	09 f4       	brne	.+2      	; 0x52ca <buildNewNode+0x36>
    52c8:	71 c0       	rjmp	.+226    	; 0x53ac <buildNewNode+0x118>
        fsinitBytes(addr, DEV_PROGRAMENTRYOFFSET, 14, 0);
        fswrite8uint(addr, DEV_UIDOFFSET, uid);
        fswrite16uint(addr, DEV_SIZEOFFSET, 0);
        fswrite8uint(addr, DEV_PARENTOFFSET, parent);
    }
    else if (type == APPNODE)
    52ca:	04 30       	cpi	r16, 0x04	; 4
    52cc:	41 f1       	breq	.+80     	; 0x531e <buildNewNode+0x8a>
        fsinitBytes(addr, APP_ENTRYOFFSET, 14, 0);
        fswrite8uint(addr, APP_UIDOFFSET, uid);
        fswrite16uint(addr, APP_SIZEOFFSET, 0);
        fswrite8uint(addr, APP_PARENTOFFSET, parent);
    }
    if ((addr == 0) && (parent == 0))
    52ce:	e1 14       	cp	r14, r1
    52d0:	f1 04       	cpc	r15, r1
    52d2:	11 f4       	brne	.+4      	; 0x52d8 <buildNewNode+0x44>
    52d4:	11 23       	and	r17, r17
    52d6:	69 f0       	breq	.+26     	; 0x52f2 <buildNewNode+0x5e>
    52d8:	ce e0       	ldi	r28, 0x0E	; 14
    52da:	d0 e0       	ldi	r29, 0x00	; 0

        for (i = 0; i < 10; i++)
        {
            uint8_t subaddr;

            subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
    52dc:	81 2f       	mov	r24, r17
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	be 01       	movw	r22, r28
    52e2:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
            if (subaddr == 0)
    52e6:	88 23       	and	r24, r24
    52e8:	61 f0       	breq	.+24     	; 0x5302 <buildNewNode+0x6e>
            {
                fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, addr);
                break;
    52ea:	21 96       	adiw	r28, 0x01	; 1
    }
    else
    {
        int i;

        for (i = 0; i < 10; i++)
    52ec:	c8 31       	cpi	r28, 0x18	; 24
    52ee:	d1 05       	cpc	r29, r1
    52f0:	a9 f7       	brne	.-22     	; 0x52dc <buildNewNode+0x48>
                break;
            }
        }
    }
    return;
}
    52f2:	df 91       	pop	r29
    52f4:	cf 91       	pop	r28
    52f6:	1f 91       	pop	r17
    52f8:	0f 91       	pop	r16
    52fa:	ff 90       	pop	r15
    52fc:	ef 90       	pop	r14
    52fe:	df 90       	pop	r13
    5300:	08 95       	ret
            uint8_t subaddr;

            subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
            if (subaddr == 0)
            {
                fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, addr);
    5302:	81 2f       	mov	r24, r17
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	be 01       	movw	r22, r28
    5308:	4e 2d       	mov	r20, r14
    530a:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
                break;
            }
        }
    }
    return;
}
    530e:	df 91       	pop	r29
    5310:	cf 91       	pop	r28
    5312:	1f 91       	pop	r17
    5314:	0f 91       	pop	r16
    5316:	ff 90       	pop	r15
    5318:	ef 90       	pop	r14
    531a:	df 90       	pop	r13
    531c:	08 95       	ret
        fswrite16uint(addr, DEV_SIZEOFFSET, 0);
        fswrite8uint(addr, DEV_PARENTOFFSET, parent);
    }
    else if (type == APPNODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    531e:	c7 01       	movw	r24, r14
    5320:	60 e0       	ldi	r22, 0x00	; 0
    5322:	70 e0       	ldi	r23, 0x00	; 0
    5324:	50 e0       	ldi	r21, 0x00	; 0
    5326:	9e 01       	movw	r18, r28
    5328:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    532c:	c7 01       	movw	r24, r14
    532e:	6c e0       	ldi	r22, 0x0C	; 12
    5330:	70 e0       	ldi	r23, 0x00	; 0
    5332:	44 e0       	ldi	r20, 0x04	; 4
    5334:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
        fswrite8uint(addr, VALIDOFFSET, 1);
    5338:	c7 01       	movw	r24, r14
    533a:	6d e0       	ldi	r22, 0x0D	; 13
    533c:	70 e0       	ldi	r23, 0x00	; 0
    533e:	41 e0       	ldi	r20, 0x01	; 1
    5340:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
        fsinitBytes(addr, APP_ENTRYOFFSET, 14, 0);
    5344:	c7 01       	movw	r24, r14
    5346:	6e e0       	ldi	r22, 0x0E	; 14
    5348:	70 e0       	ldi	r23, 0x00	; 0
    534a:	4e e0       	ldi	r20, 0x0E	; 14
    534c:	50 e0       	ldi	r21, 0x00	; 0
    534e:	20 e0       	ldi	r18, 0x00	; 0
    5350:	0e 94 ef 25 	call	0x4bde	; 0x4bde <fsinitBytes>
        fswrite8uint(addr, APP_UIDOFFSET, uid);
    5354:	c7 01       	movw	r24, r14
    5356:	6c e1       	ldi	r22, 0x1C	; 28
    5358:	70 e0       	ldi	r23, 0x00	; 0
    535a:	4d 2d       	mov	r20, r13
    535c:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
        fswrite16uint(addr, APP_SIZEOFFSET, 0);
    5360:	c7 01       	movw	r24, r14
    5362:	6d e1       	ldi	r22, 0x1D	; 29
    5364:	70 e0       	ldi	r23, 0x00	; 0
    5366:	40 e0       	ldi	r20, 0x00	; 0
    5368:	50 e0       	ldi	r21, 0x00	; 0
    536a:	0e 94 48 26 	call	0x4c90	; 0x4c90 <fswrite16uint>
        fswrite8uint(addr, APP_PARENTOFFSET, parent);
    536e:	c7 01       	movw	r24, r14
    5370:	6f e1       	ldi	r22, 0x1F	; 31
    5372:	70 e0       	ldi	r23, 0x00	; 0
    5374:	41 2f       	mov	r20, r17
    5376:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
    537a:	a9 cf       	rjmp	.-174    	; 0x52ce <buildNewNode+0x3a>
        namelength++;
    }
    //consider several types of type
    if (type == DIRNODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    537c:	c7 01       	movw	r24, r14
    537e:	60 e0       	ldi	r22, 0x00	; 0
    5380:	70 e0       	ldi	r23, 0x00	; 0
    5382:	50 e0       	ldi	r21, 0x00	; 0
    5384:	9e 01       	movw	r18, r28
    5386:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    538a:	c7 01       	movw	r24, r14
    538c:	6c e0       	ldi	r22, 0x0C	; 12
    538e:	70 e0       	ldi	r23, 0x00	; 0
    5390:	41 e0       	ldi	r20, 0x01	; 1
    5392:	d0 cf       	rjmp	.-96     	; 0x5334 <buildNewNode+0xa0>
        fswrite16uint(addr, DIR_SIZEOFFSET, 0);
        fswrite8uint(addr, DIR_PARENTOFFSET, parent);
    }
    else if (type == FILENODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    5394:	c7 01       	movw	r24, r14
    5396:	60 e0       	ldi	r22, 0x00	; 0
    5398:	70 e0       	ldi	r23, 0x00	; 0
    539a:	50 e0       	ldi	r21, 0x00	; 0
    539c:	9e 01       	movw	r18, r28
    539e:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    53a2:	c7 01       	movw	r24, r14
    53a4:	6c e0       	ldi	r22, 0x0C	; 12
    53a6:	70 e0       	ldi	r23, 0x00	; 0
    53a8:	42 e0       	ldi	r20, 0x02	; 2
    53aa:	c4 cf       	rjmp	.-120    	; 0x5334 <buildNewNode+0xa0>
        fswrite16uint(addr, FILE_SIZEOFFSET, 0);
        fswrite8uint(addr, FILE_PARENTOFFSET, parent);
    }
    else if (type == DEVNODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
    53ac:	c7 01       	movw	r24, r14
    53ae:	60 e0       	ldi	r22, 0x00	; 0
    53b0:	70 e0       	ldi	r23, 0x00	; 0
    53b2:	50 e0       	ldi	r21, 0x00	; 0
    53b4:	9e 01       	movw	r18, r28
    53b6:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <fswriteBytes>
        fswrite8uint(addr, TYPEOFFSET, type);
    53ba:	c7 01       	movw	r24, r14
    53bc:	6c e0       	ldi	r22, 0x0C	; 12
    53be:	70 e0       	ldi	r23, 0x00	; 0
    53c0:	43 e0       	ldi	r20, 0x03	; 3
    53c2:	b8 cf       	rjmp	.-144    	; 0x5334 <buildNewNode+0xa0>

000053c4 <buildRootNode>:
    releaseVectorNode(addr);
}

//-------------------------------------------------------------------------
void buildRootNode()
{
    53c4:	0f 93       	push	r16
    buildNewNode(FSROOTNODE, "root", 0, 0, DIRNODE);
    53c6:	80 e0       	ldi	r24, 0x00	; 0
    53c8:	90 e0       	ldi	r25, 0x00	; 0
    53ca:	67 e3       	ldi	r22, 0x37	; 55
    53cc:	71 e0       	ldi	r23, 0x01	; 1
    53ce:	40 e0       	ldi	r20, 0x00	; 0
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	01 e0       	ldi	r16, 0x01	; 1
    53d4:	0e 94 4a 29 	call	0x5294	; 0x5294 <buildNewNode>
}
    53d8:	0f 91       	pop	r16
    53da:	08 95       	ret

000053dc <getPwd>:

//return current directory
int getPwd()
{
    return currentdirectory;
}
    53dc:	80 91 7c 03 	lds	r24, 0x037C
    53e0:	90 91 7d 03 	lds	r25, 0x037D
    53e4:	08 95       	ret

000053e6 <setPwd>:

//set current directory 
void setPwd(int directory)
{
    currentdirectory = directory;
    53e6:	90 93 7d 03 	sts	0x037D, r25
    53ea:	80 93 7c 03 	sts	0x037C, r24
    return;
}
    53ee:	08 95       	ret

000053f0 <getRealSector>:
    }
}

//-------------------------------------------------------------------------
uint8_t getRealSector(uint8_t addr, uint8_t sectornum)
{
    53f0:	0f 93       	push	r16
    53f2:	1f 93       	push	r17
    53f4:	06 2f       	mov	r16, r22
    uint8_t currentaddr;

    currentaddr = addr;
    while (sectornum >= 8)
    53f6:	68 30       	cpi	r22, 0x08	; 8
    53f8:	50 f0       	brcs	.+20     	; 0x540e <getRealSector+0x1e>
    53fa:	16 2f       	mov	r17, r22
    {
        currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	68 e1       	ldi	r22, 0x18	; 24
    5400:	70 e0       	ldi	r23, 0x00	; 0
    5402:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
        sectornum -= 8;
    5406:	18 50       	subi	r17, 0x08	; 8
uint8_t getRealSector(uint8_t addr, uint8_t sectornum)
{
    uint8_t currentaddr;

    currentaddr = addr;
    while (sectornum >= 8)
    5408:	18 30       	cpi	r17, 0x08	; 8
    540a:	c0 f7       	brcc	.-16     	; 0x53fc <getRealSector+0xc>
    }
}

//-------------------------------------------------------------------------
uint8_t getRealSector(uint8_t addr, uint8_t sectornum)
{
    540c:	07 70       	andi	r16, 0x07	; 7
    while (sectornum >= 8)
    {
        currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
        sectornum -= 8;
    }
    return fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + sectornum);
    540e:	60 2f       	mov	r22, r16
    5410:	70 e0       	ldi	r23, 0x00	; 0
    5412:	62 5f       	subi	r22, 0xF2	; 242
    5414:	7f 4f       	sbci	r23, 0xFF	; 255
    5416:	90 e0       	ldi	r25, 0x00	; 0
    5418:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
}
    541c:	1f 91       	pop	r17
    541e:	0f 91       	pop	r16
    5420:	08 95       	ret

00005422 <emptyDirectory>:
}

//check directory empty
//returns 0 if it is empty. Returns 1 if otherwise 
int emptyDirectory(int directory)
{
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	cf 93       	push	r28
    5428:	df 93       	push	r29
    542a:	8c 01       	movw	r16, r24
    542c:	ce e0       	ldi	r28, 0x0E	; 14
    542e:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    5430:	c8 01       	movw	r24, r16
    5432:	be 01       	movw	r22, r28
    5434:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
        if (subaddr > 0)
    5438:	88 23       	and	r24, r24
    543a:	61 f4       	brne	.+24     	; 0x5454 <emptyDirectory+0x32>
    543c:	21 96       	adiw	r28, 0x01	; 1
//returns 0 if it is empty. Returns 1 if otherwise 
int emptyDirectory(int directory)
{
    int i;

    for (i = 0; i < 10; i++)
    543e:	c8 31       	cpi	r28, 0x18	; 24
    5440:	d1 05       	cpc	r29, r1
    5442:	b1 f7       	brne	.-20     	; 0x5430 <emptyDirectory+0xe>
    5444:	20 e0       	ldi	r18, 0x00	; 0
    5446:	30 e0       	ldi	r19, 0x00	; 0
        {
            return 1;
        }
    }
    return 0;
}
    5448:	c9 01       	movw	r24, r18
    544a:	df 91       	pop	r29
    544c:	cf 91       	pop	r28
    544e:	1f 91       	pop	r17
    5450:	0f 91       	pop	r16
    5452:	08 95       	ret
    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
        if (subaddr > 0)
    5454:	21 e0       	ldi	r18, 0x01	; 1
    5456:	30 e0       	ldi	r19, 0x00	; 0
        {
            return 1;
        }
    }
    return 0;
}
    5458:	c9 01       	movw	r24, r18
    545a:	df 91       	pop	r29
    545c:	cf 91       	pop	r28
    545e:	1f 91       	pop	r17
    5460:	0f 91       	pop	r16
    5462:	08 95       	ret

00005464 <getParentDirectory>:
//-------------------------------------------------------------------------
int getParentDirectory(int directory)
{
    uint8_t parentnode;

    parentnode = fsread8uint(directory, DIR_PARENTOFFSET);
    5464:	6f e1       	ldi	r22, 0x1F	; 31
    5466:	70 e0       	ldi	r23, 0x00	; 0
    5468:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    return parentnode;
}
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	08 95       	ret

00005470 <getName>:
    return 1;
}

//-------------------------------------------------------------------------
void getName(char *buffer, int addr)
{
    5470:	ef 92       	push	r14
    5472:	ff 92       	push	r15
    5474:	0f 93       	push	r16
    5476:	1f 93       	push	r17
    5478:	cf 93       	push	r28
    547a:	df 93       	push	r29
    547c:	7b 01       	movw	r14, r22
    547e:	8c 01       	movw	r16, r24
    5480:	c0 e0       	ldi	r28, 0x00	; 0
    5482:	d0 e0       	ldi	r29, 0x00	; 0
    char *p;

    p = buffer;
    for (i = 0; i < 12; i++)
    {
        *p = fsread8uint(addr, FILENAMEOFFSET + i);
    5484:	c7 01       	movw	r24, r14
    5486:	be 01       	movw	r22, r28
    5488:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    548c:	f8 01       	movw	r30, r16
    548e:	80 83       	st	Z, r24
        if ((*p) == '\0')
    5490:	88 23       	and	r24, r24
    5492:	31 f0       	breq	.+12     	; 0x54a0 <getName+0x30>
        {
            break;
        }

        p++;
    5494:	0f 5f       	subi	r16, 0xFF	; 255
    5496:	1f 4f       	sbci	r17, 0xFF	; 255
{
    int i;
    char *p;

    p = buffer;
    for (i = 0; i < 12; i++)
    5498:	21 96       	adiw	r28, 0x01	; 1
    549a:	cc 30       	cpi	r28, 0x0C	; 12
    549c:	d1 05       	cpc	r29, r1
    549e:	91 f7       	brne	.-28     	; 0x5484 <getName+0x14>
            break;
        }

        p++;
    }
    *p = '\0';
    54a0:	f8 01       	movw	r30, r16
    54a2:	10 82       	st	Z, r1
    return;
}
    54a4:	df 91       	pop	r29
    54a6:	cf 91       	pop	r28
    54a8:	1f 91       	pop	r17
    54aa:	0f 91       	pop	r16
    54ac:	ff 90       	pop	r15
    54ae:	ef 90       	pop	r14
    54b0:	08 95       	ret

000054b2 <fullBlock>:
    return 0;
}

//if the directory is full return 1 else return 0
uint8_t fullBlock(int directory)
{
    54b2:	0f 93       	push	r16
    54b4:	1f 93       	push	r17
    54b6:	cf 93       	push	r28
    54b8:	df 93       	push	r29
    54ba:	8c 01       	movw	r16, r24
    54bc:	ce e0       	ldi	r28, 0x0E	; 14
    54be:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    54c0:	c8 01       	movw	r24, r16
    54c2:	be 01       	movw	r22, r28
    54c4:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
        if (subaddr == 0)
    54c8:	88 23       	and	r24, r24
    54ca:	29 f0       	breq	.+10     	; 0x54d6 <fullBlock+0x24>
    54cc:	21 96       	adiw	r28, 0x01	; 1
//if the directory is full return 1 else return 0
uint8_t fullBlock(int directory)
{
    int i;

    for (i = 0; i < 10; i++)
    54ce:	c8 31       	cpi	r28, 0x18	; 24
    54d0:	d1 05       	cpc	r29, r1
    54d2:	b1 f7       	brne	.-20     	; 0x54c0 <fullBlock+0xe>
    54d4:	81 e0       	ldi	r24, 0x01	; 1
        {
            return 0;
        }
    }
    return 1;
}
    54d6:	df 91       	pop	r29
    54d8:	cf 91       	pop	r28
    54da:	1f 91       	pop	r17
    54dc:	0f 91       	pop	r16
    54de:	08 95       	ret

000054e0 <removeChildNode>:
    return;
}

//-------------------------------------------------------------------------
void removeChildNode(uint8_t addr, uint8_t child)
{
    54e0:	0f 93       	push	r16
    54e2:	1f 93       	push	r17
    54e4:	cf 93       	push	r28
    54e6:	df 93       	push	r29
    54e8:	08 2f       	mov	r16, r24
    54ea:	16 2f       	mov	r17, r22
    54ec:	ce e0       	ldi	r28, 0x0E	; 14
    54ee:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    54f0:	80 2f       	mov	r24, r16
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	be 01       	movw	r22, r28
    54f6:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
        if (subaddr == child)
    54fa:	81 17       	cp	r24, r17
    54fc:	49 f0       	breq	.+18     	; 0x5510 <removeChildNode+0x30>
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, 0);
            return;
    54fe:	21 96       	adiw	r28, 0x01	; 1
//-------------------------------------------------------------------------
void removeChildNode(uint8_t addr, uint8_t child)
{
    uint8_t i;

    for (i = 0; i < 10; i++)
    5500:	c8 31       	cpi	r28, 0x18	; 24
    5502:	d1 05       	cpc	r29, r1
    5504:	a9 f7       	brne	.-22     	; 0x54f0 <removeChildNode+0x10>
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, 0);
            return;
        }
    }
    return;
}
    5506:	df 91       	pop	r29
    5508:	cf 91       	pop	r28
    550a:	1f 91       	pop	r17
    550c:	0f 91       	pop	r16
    550e:	08 95       	ret
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        if (subaddr == child)
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, 0);
    5510:	80 2f       	mov	r24, r16
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	be 01       	movw	r22, r28
    5516:	40 e0       	ldi	r20, 0x00	; 0
    5518:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
            return;
        }
    }
    return;
}
    551c:	df 91       	pop	r29
    551e:	cf 91       	pop	r28
    5520:	1f 91       	pop	r17
    5522:	0f 91       	pop	r16
    5524:	08 95       	ret

00005526 <addChildNode>:
    }
}

//-------------------------------------------------------------------------
void addChildNode(uint8_t addr, uint8_t child)
{
    5526:	0f 93       	push	r16
    5528:	1f 93       	push	r17
    552a:	cf 93       	push	r28
    552c:	df 93       	push	r29
    552e:	18 2f       	mov	r17, r24
    5530:	06 2f       	mov	r16, r22
    5532:	ce e0       	ldi	r28, 0x0E	; 14
    5534:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    5536:	81 2f       	mov	r24, r17
    5538:	90 e0       	ldi	r25, 0x00	; 0
    553a:	be 01       	movw	r22, r28
    553c:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
        if (subaddr == 0)
    5540:	88 23       	and	r24, r24
    5542:	49 f0       	breq	.+18     	; 0x5556 <addChildNode+0x30>
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, child);
            return;
    5544:	21 96       	adiw	r28, 0x01	; 1
//-------------------------------------------------------------------------
void addChildNode(uint8_t addr, uint8_t child)
{
    uint8_t i;

    for (i = 0; i < 10; i++)
    5546:	c8 31       	cpi	r28, 0x18	; 24
    5548:	d1 05       	cpc	r29, r1
    554a:	a9 f7       	brne	.-22     	; 0x5536 <addChildNode+0x10>
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, child);
            return;
        }
    }
    return;
}
    554c:	df 91       	pop	r29
    554e:	cf 91       	pop	r28
    5550:	1f 91       	pop	r17
    5552:	0f 91       	pop	r16
    5554:	08 95       	ret
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        if (subaddr == 0)
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, child);
    5556:	81 2f       	mov	r24, r17
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	be 01       	movw	r22, r28
    555c:	40 2f       	mov	r20, r16
    555e:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
            return;
        }
    }
    return;
}
    5562:	df 91       	pop	r29
    5564:	cf 91       	pop	r28
    5566:	1f 91       	pop	r17
    5568:	0f 91       	pop	r16
    556a:	08 95       	ret

0000556c <newSector>:
    return fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + sectornum);
}

//-------------------------------------------------------------------------
void newSector(int addr)
{
    556c:	0f 93       	push	r16
    556e:	1f 93       	push	r17
    5570:	cf 93       	push	r28
    5572:	df 93       	push	r29
    5574:	18 2f       	mov	r17, r24
    uint8_t i, readpage;
    uint8_t next, currentaddr, getnode;

    currentaddr = addr;
    5576:	01 2f       	mov	r16, r17
    5578:	6e e0       	ldi	r22, 0x0E	; 14
    557a:	70 e0       	ldi	r23, 0x00	; 0
    557c:	eb 01       	movw	r28, r22
    // 3 get to the next addr and loop 
    while (1)
    {
        for (i = 0; i < 8; i++)
        {
            readpage = fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + i);
    557e:	81 2f       	mov	r24, r17
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
            if (readpage == 0)
    5586:	88 23       	and	r24, r24
    5588:	71 f1       	breq	.+92     	; 0x55e6 <newSector+0x7a>
            {
                break;
    558a:	9e 01       	movw	r18, r28
    558c:	2d 50       	subi	r18, 0x0D	; 13
    558e:	be 01       	movw	r22, r28
    5590:	6f 5f       	subi	r22, 0xFF	; 255
    5592:	7f 4f       	sbci	r23, 0xFF	; 255
    // 1 check whether the current 8 pages are occupied or not
    // 2 check the next field is ok or not
    // 3 get to the next addr and loop 
    while (1)
    {
        for (i = 0; i < 8; i++)
    5594:	66 31       	cpi	r22, 0x16	; 22
    5596:	71 05       	cpc	r23, r1
    5598:	89 f7       	brne	.-30     	; 0x557c <newSector+0x10>
            if (readpage == 0)
            {
                break;
            }
        }
        if (i < 8)
    559a:	28 30       	cpi	r18, 0x08	; 8
    559c:	08 f1       	brcs	.+66     	; 0x55e0 <newSector+0x74>
        {
            readpage = getFlashPage();
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET + i, readpage);
            return;
        }
        next = fsread8uint(currentaddr, FILE_NEXTOFFSET);
    559e:	81 2f       	mov	r24, r17
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	68 e1       	ldi	r22, 0x18	; 24
    55a4:	70 e0       	ldi	r23, 0x00	; 0
    55a6:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    55aa:	18 2f       	mov	r17, r24
        if (next == 0)
    55ac:	88 23       	and	r24, r24
    55ae:	19 f7       	brne	.-58     	; 0x5576 <newSector+0xa>
        {
            getnode = getVectorNode();
    55b0:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <getVectorNode>
    55b4:	18 2f       	mov	r17, r24
            fswrite8uint(currentaddr, FILE_NEXTOFFSET, getnode);
    55b6:	80 2f       	mov	r24, r16
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	68 e1       	ldi	r22, 0x18	; 24
    55bc:	70 e0       	ldi	r23, 0x00	; 0
    55be:	41 2f       	mov	r20, r17
    55c0:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
            currentaddr = getnode;
            readpage = getFlashPage();
    55c4:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <getFlashPage>
    55c8:	48 2f       	mov	r20, r24
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET, readpage);
    55ca:	81 2f       	mov	r24, r17
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	6e e0       	ldi	r22, 0x0E	; 14
    55d0:	70 e0       	ldi	r23, 0x00	; 0
    55d2:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
            return;
        }
        currentaddr = next;
    }
}
    55d6:	df 91       	pop	r29
    55d8:	cf 91       	pop	r28
    55da:	1f 91       	pop	r17
    55dc:	0f 91       	pop	r16
    55de:	08 95       	ret
            if (readpage == 0)
            {
                break;
            }
        }
        if (i < 8)
    55e0:	c2 2f       	mov	r28, r18
    55e2:	d0 e0       	ldi	r29, 0x00	; 0
    55e4:	2e 96       	adiw	r28, 0x0e	; 14
        {
            readpage = getFlashPage();
    55e6:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <getFlashPage>
    55ea:	48 2f       	mov	r20, r24
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET + i, readpage);
    55ec:	81 2f       	mov	r24, r17
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	be 01       	movw	r22, r28
    55f2:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <fswrite8uint>
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET, readpage);
            return;
        }
        currentaddr = next;
    }
}
    55f6:	df 91       	pop	r29
    55f8:	cf 91       	pop	r28
    55fa:	1f 91       	pop	r17
    55fc:	0f 91       	pop	r16
    55fe:	08 95       	ret

00005600 <freeBlocks>:
    }
}

//-------------------------------------------------------------------------
void freeBlocks(int addr)
{
    5600:	0f 93       	push	r16
    5602:	1f 93       	push	r17
    5604:	cf 93       	push	r28
    5606:	df 93       	push	r29
    5608:	8c 01       	movw	r16, r24
    560a:	ce e0       	ldi	r28, 0x0E	; 14
    560c:	d0 e0       	ldi	r29, 0x00	; 0
    int i;
    uint8_t readpage;

    for (i = 0; i < 8; i++)
    {
        readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    560e:	c8 01       	movw	r24, r16
    5610:	be 01       	movw	r22, r28
    5612:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
        if (readpage == 0)
    5616:	88 23       	and	r24, r24
    5618:	39 f0       	breq	.+14     	; 0x5628 <freeBlocks+0x28>
        {
            break;
        }
        else
        {
            releaseFlashPage(readpage);
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <releaseFlashPage>
    5620:	21 96       	adiw	r28, 0x01	; 1
void freeBlocks(int addr)
{
    int i;
    uint8_t readpage;

    for (i = 0; i < 8; i++)
    5622:	c6 31       	cpi	r28, 0x16	; 22
    5624:	d1 05       	cpc	r29, r1
    5626:	99 f7       	brne	.-26     	; 0x560e <freeBlocks+0xe>
        {
            releaseFlashPage(readpage);
        }
    }
    return;
}
    5628:	df 91       	pop	r29
    562a:	cf 91       	pop	r28
    562c:	1f 91       	pop	r17
    562e:	0f 91       	pop	r16
    5630:	08 95       	ret

00005632 <openFile>:

//open a file according to the mode and populate the fid section 
void openFile(int addr, int fid, int mode)
{
    5632:	af 92       	push	r10
    5634:	bf 92       	push	r11
    5636:	cf 92       	push	r12
    5638:	df 92       	push	r13
    563a:	ef 92       	push	r14
    563c:	ff 92       	push	r15
    563e:	0f 93       	push	r16
    5640:	1f 93       	push	r17
    5642:	cf 93       	push	r28
    5644:	df 93       	push	r29
    5646:	d8 2e       	mov	r13, r24
    5648:	c9 2e       	mov	r12, r25
    564a:	8a 01       	movw	r16, r20
    fidtable[fid].addr = (uint8_t) addr;
    564c:	fb 01       	movw	r30, r22
    564e:	ee 0f       	add	r30, r30
    5650:	ff 1f       	adc	r31, r31
    5652:	ee 0f       	add	r30, r30
    5654:	ff 1f       	adc	r31, r31
    5656:	e6 0f       	add	r30, r22
    5658:	f7 1f       	adc	r31, r23
    565a:	ee 0f       	add	r30, r30
    565c:	ff 1f       	adc	r31, r31
    565e:	ee 5c       	subi	r30, 0xCE	; 206
    5660:	f9 4f       	sbci	r31, 0xF9	; 249
    5662:	80 83       	st	Z, r24
    fidtable[fid].mode = (uint8_t) mode;
    5664:	5b 01       	movw	r10, r22
    5666:	aa 0c       	add	r10, r10
    5668:	bb 1c       	adc	r11, r11
    566a:	7b 01       	movw	r14, r22
    566c:	ee 0c       	add	r14, r14
    566e:	ff 1c       	adc	r15, r15
    5670:	ee 0c       	add	r14, r14
    5672:	ff 1c       	adc	r15, r15
    5674:	ee 0c       	add	r14, r14
    5676:	ff 1c       	adc	r15, r15
    5678:	e5 01       	movw	r28, r10
    567a:	ce 0d       	add	r28, r14
    567c:	df 1d       	adc	r29, r15
    567e:	c0 5d       	subi	r28, 0xD0	; 208
    5680:	d9 4f       	sbci	r29, 0xF9	; 249
    5682:	4b 83       	std	Y+3, r20	; 0x03
    fidtable[fid].size = fsread16uint(addr, 29);
    5684:	8d 2d       	mov	r24, r13
    5686:	9c 2d       	mov	r25, r12
    5688:	6d e1       	ldi	r22, 0x1D	; 29
    568a:	70 e0       	ldi	r23, 0x00	; 0
    568c:	0e 94 99 26 	call	0x4d32	; 0x4d32 <fsread16uint>
    5690:	9d 83       	std	Y+5, r25	; 0x05
    5692:	8c 83       	std	Y+4, r24	; 0x04
    //mode: 1 read 2 write 3 append 4 truncate 5 rw
    if (mode == 1)
    5694:	01 30       	cpi	r16, 0x01	; 1
    5696:	11 05       	cpc	r17, r1
    5698:	19 f1       	breq	.+70     	; 0x56e0 <openFile+0xae>
    {
        fidtable[fid].fpos = 0;
    }
    if (mode == 2)
    569a:	02 30       	cpi	r16, 0x02	; 2
    569c:	11 05       	cpc	r17, r1
    569e:	d9 f0       	breq	.+54     	; 0x56d6 <openFile+0xa4>
    {
        fidtable[fid].fpos = 0;
    }
    if (mode == 3)
    56a0:	03 30       	cpi	r16, 0x03	; 3
    56a2:	11 05       	cpc	r17, r1
    56a4:	89 f4       	brne	.+34     	; 0x56c8 <openFile+0x96>
    {
        fidtable[fid].fpos = fidtable[fid].size;
    56a6:	a0 e0       	ldi	r26, 0x00	; 0
    56a8:	b0 e0       	ldi	r27, 0x00	; 0
    56aa:	8e 83       	std	Y+6, r24	; 0x06
    56ac:	9f 83       	std	Y+7, r25	; 0x07
    56ae:	a8 87       	std	Y+8, r26	; 0x08
    56b0:	b9 87       	std	Y+9, r27	; 0x09
    }
    if (mode == 5)
    {
        fidtable[fid].fpos = 0;
    }
}
    56b2:	df 91       	pop	r29
    56b4:	cf 91       	pop	r28
    56b6:	1f 91       	pop	r17
    56b8:	0f 91       	pop	r16
    56ba:	ff 90       	pop	r15
    56bc:	ef 90       	pop	r14
    56be:	df 90       	pop	r13
    56c0:	cf 90       	pop	r12
    56c2:	bf 90       	pop	r11
    56c4:	af 90       	pop	r10
    56c6:	08 95       	ret
    }
    if (mode == 3)
    {
        fidtable[fid].fpos = fidtable[fid].size;
    }
    if (mode == 4)
    56c8:	04 30       	cpi	r16, 0x04	; 4
    56ca:	11 05       	cpc	r17, r1
    56cc:	69 f4       	brne	.+26     	; 0x56e8 <openFile+0xb6>
    {
        freeBlocks(addr);
    56ce:	8d 2d       	mov	r24, r13
    56d0:	9c 2d       	mov	r25, r12
    56d2:	0e 94 00 2b 	call	0x5600	; 0x5600 <freeBlocks>
        fidtable[fid].fpos = 0;
    56d6:	1e 82       	std	Y+6, r1	; 0x06
    56d8:	1f 82       	std	Y+7, r1	; 0x07
    56da:	18 86       	std	Y+8, r1	; 0x08
    56dc:	19 86       	std	Y+9, r1	; 0x09
    56de:	e9 cf       	rjmp	.-46     	; 0x56b2 <openFile+0x80>
    fidtable[fid].mode = (uint8_t) mode;
    fidtable[fid].size = fsread16uint(addr, 29);
    //mode: 1 read 2 write 3 append 4 truncate 5 rw
    if (mode == 1)
    {
        fidtable[fid].fpos = 0;
    56e0:	1e 82       	std	Y+6, r1	; 0x06
    56e2:	1f 82       	std	Y+7, r1	; 0x07
    56e4:	18 86       	std	Y+8, r1	; 0x08
    56e6:	19 86       	std	Y+9, r1	; 0x09
    if (mode == 4)
    {
        freeBlocks(addr);
        fidtable[fid].fpos = 0;
    }
    if (mode == 5)
    56e8:	05 30       	cpi	r16, 0x05	; 5
    56ea:	11 05       	cpc	r17, r1
    56ec:	11 f7       	brne	.-60     	; 0x56b2 <openFile+0x80>
    {
        fidtable[fid].fpos = 0;
    56ee:	ea 0c       	add	r14, r10
    56f0:	fb 1c       	adc	r15, r11
    56f2:	80 e3       	ldi	r24, 0x30	; 48
    56f4:	96 e0       	ldi	r25, 0x06	; 6
    56f6:	e8 0e       	add	r14, r24
    56f8:	f9 1e       	adc	r15, r25
    56fa:	f7 01       	movw	r30, r14
    56fc:	16 82       	std	Z+6, r1	; 0x06
    56fe:	17 82       	std	Z+7, r1	; 0x07
    5700:	10 86       	std	Z+8, r1	; 0x08
    5702:	11 86       	std	Z+9, r1	; 0x09
    5704:	d6 cf       	rjmp	.-84     	; 0x56b2 <openFile+0x80>

00005706 <isDirectory>:
}

//check if the addr block is a directory or not 
int isDirectory(int addr)
{
    if (checkNodeValid(addr) == DIRNODE)
    5706:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <checkNodeValid>
    570a:	20 e0       	ldi	r18, 0x00	; 0
    570c:	30 e0       	ldi	r19, 0x00	; 0
    570e:	01 97       	sbiw	r24, 0x01	; 1
    5710:	11 f0       	breq	.+4      	; 0x5716 <isDirectory+0x10>
    }
    else
    {
        return 0;
    }
}
    5712:	c9 01       	movw	r24, r18
    5714:	08 95       	ret
}

//check if the addr block is a directory or not 
int isDirectory(int addr)
{
    if (checkNodeValid(addr) == DIRNODE)
    5716:	21 e0       	ldi	r18, 0x01	; 1
    5718:	30 e0       	ldi	r19, 0x00	; 0
    }
    else
    {
        return 0;
    }
}
    571a:	c9 01       	movw	r24, r18
    571c:	08 95       	ret

0000571e <checkName>:
//filename should be no more than 12 bytes and must end with \0
//the checking goes as follows. It checks the bytes by bytes and make sure that 
//the string mathces. if not match then 1 if \0 and match then 0 otherwise proceeds 
//and the filename must be valid 
int checkName(char *filename, int addr)
{
    571e:	cf 92       	push	r12
    5720:	df 92       	push	r13
    5722:	ef 92       	push	r14
    5724:	ff 92       	push	r15
    5726:	1f 93       	push	r17
    5728:	cf 93       	push	r28
    572a:	df 93       	push	r29
    572c:	18 2f       	mov	r17, r24
    572e:	f9 2e       	mov	r15, r25
    5730:	6b 01       	movw	r12, r22
    char *p;
    int i;

    i = 0;
    if (mystrlen(filename) > 12)
    5732:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    5736:	0d 97       	sbiw	r24, 0x0d	; 13
    5738:	5c f0       	brlt	.+22     	; 0x5750 <checkName+0x32>
    }
    if (checkNodeValid(addr) == 0)
    {
        return 1;
    }
    for (i = 0; i < 12; i++)
    573a:	21 e0       	ldi	r18, 0x01	; 1
    573c:	30 e0       	ldi	r19, 0x00	; 0
                continue;
            }
        }
    }
    return 0;
}
    573e:	c9 01       	movw	r24, r18
    5740:	df 91       	pop	r29
    5742:	cf 91       	pop	r28
    5744:	1f 91       	pop	r17
    5746:	ff 90       	pop	r15
    5748:	ef 90       	pop	r14
    574a:	df 90       	pop	r13
    574c:	cf 90       	pop	r12
    574e:	08 95       	ret
    i = 0;
    if (mystrlen(filename) > 12)
    {
        return 1;
    }
    if (checkNodeValid(addr) == 0)
    5750:	c6 01       	movw	r24, r12
    5752:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <checkNodeValid>
    5756:	89 2b       	or	r24, r25
    5758:	81 f3       	breq	.-32     	; 0x573a <checkName+0x1c>
    575a:	81 2f       	mov	r24, r17
    575c:	9f 2d       	mov	r25, r15
    575e:	9c 01       	movw	r18, r24
    5760:	79 01       	movw	r14, r18
    5762:	c0 e0       	ldi	r28, 0x00	; 0
    5764:	d0 e0       	ldi	r29, 0x00	; 0
    }
    for (i = 0; i < 12; i++)
    {
        p = filename;
        p += i;
        if ((uint8_t) (*p) != fsread8uint(addr, FILENAMEOFFSET + i))
    5766:	f7 01       	movw	r30, r14
    5768:	10 81       	ld	r17, Z
    576a:	c6 01       	movw	r24, r12
    576c:	be 01       	movw	r22, r28
    576e:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    5772:	18 17       	cp	r17, r24
    5774:	11 f7       	brne	.-60     	; 0x573a <checkName+0x1c>
        {
            return 1;
        }
        else
        {
            if ((*p) == '\0')
    5776:	f7 01       	movw	r30, r14
    5778:	80 81       	ld	r24, Z
    577a:	88 23       	and	r24, r24
    577c:	39 f0       	breq	.+14     	; 0x578c <checkName+0x6e>
    }
    if (checkNodeValid(addr) == 0)
    {
        return 1;
    }
    for (i = 0; i < 12; i++)
    577e:	21 96       	adiw	r28, 0x01	; 1
    5780:	08 94       	sec
    5782:	e1 1c       	adc	r14, r1
    5784:	f1 1c       	adc	r15, r1
    5786:	cc 30       	cpi	r28, 0x0C	; 12
    5788:	d1 05       	cpc	r29, r1
    578a:	69 f7       	brne	.-38     	; 0x5766 <checkName+0x48>
    578c:	20 e0       	ldi	r18, 0x00	; 0
    578e:	30 e0       	ldi	r19, 0x00	; 0
    5790:	d6 cf       	rjmp	.-84     	; 0x573e <checkName+0x20>

00005792 <existBlockAddr>:
    return 0;
}

//check wehther a block exists. the filename must be single level 
int existBlockAddr(char *filename, int directory)
{
    5792:	af 92       	push	r10
    5794:	bf 92       	push	r11
    5796:	cf 92       	push	r12
    5798:	df 92       	push	r13
    579a:	ff 92       	push	r15
    579c:	0f 93       	push	r16
    579e:	1f 93       	push	r17
    57a0:	cf 93       	push	r28
    57a2:	df 93       	push	r29
    57a4:	5c 01       	movw	r10, r24
    57a6:	6b 01       	movw	r12, r22
    57a8:	ce e0       	ldi	r28, 0x0E	; 14
    57aa:	d0 e0       	ldi	r29, 0x00	; 0
    57ac:	04 c0       	rjmp	.+8      	; 0x57b6 <existBlockAddr+0x24>
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
        if (checkName(filename, subaddr) == 0)
        {
            if (((temp = checkNodeValid(subaddr)) > 0) && (subaddr > 0))
    57ae:	21 96       	adiw	r28, 0x01	; 1
int existBlockAddr(char *filename, int directory)
{
    int i;
    uint8_t temp;

    for (i = 0; i < 10; i++)
    57b0:	c8 31       	cpi	r28, 0x18	; 24
    57b2:	d1 05       	cpc	r29, r1
    57b4:	f9 f0       	breq	.+62     	; 0x57f4 <existBlockAddr+0x62>
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    57b6:	c6 01       	movw	r24, r12
    57b8:	be 01       	movw	r22, r28
    57ba:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    57be:	f8 2e       	mov	r15, r24
        if (checkName(filename, subaddr) == 0)
    57c0:	08 2f       	mov	r16, r24
    57c2:	10 e0       	ldi	r17, 0x00	; 0
    57c4:	c5 01       	movw	r24, r10
    57c6:	b8 01       	movw	r22, r16
    57c8:	0e 94 8f 2b 	call	0x571e	; 0x571e <checkName>
    57cc:	89 2b       	or	r24, r25
    57ce:	79 f7       	brne	.-34     	; 0x57ae <existBlockAddr+0x1c>
        {
            if (((temp = checkNodeValid(subaddr)) > 0) && (subaddr > 0))
    57d0:	c8 01       	movw	r24, r16
    57d2:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <checkNodeValid>
    57d6:	88 23       	and	r24, r24
    57d8:	51 f3       	breq	.-44     	; 0x57ae <existBlockAddr+0x1c>
    57da:	ff 20       	and	r15, r15
    57dc:	41 f3       	breq	.-48     	; 0x57ae <existBlockAddr+0x1c>
                continue;
            }
        }
    }
    return 0;
}
    57de:	c8 01       	movw	r24, r16
    57e0:	df 91       	pop	r29
    57e2:	cf 91       	pop	r28
    57e4:	1f 91       	pop	r17
    57e6:	0f 91       	pop	r16
    57e8:	ff 90       	pop	r15
    57ea:	df 90       	pop	r13
    57ec:	cf 90       	pop	r12
    57ee:	bf 90       	pop	r11
    57f0:	af 90       	pop	r10
    57f2:	08 95       	ret
int existBlockAddr(char *filename, int directory)
{
    int i;
    uint8_t temp;

    for (i = 0; i < 10; i++)
    57f4:	00 e0       	ldi	r16, 0x00	; 0
    57f6:	10 e0       	ldi	r17, 0x00	; 0
    57f8:	f2 cf       	rjmp	.-28     	; 0x57de <existBlockAddr+0x4c>

000057fa <createFileFromDirectory>:

//void foobar()
//{}
//create a file
uint8_t createFileFromDirectory(char *filename, int directory)
{
    57fa:	0f 93       	push	r16
    57fc:	1f 93       	push	r17
    57fe:	cf 93       	push	r28
    5800:	df 93       	push	r29
    5802:	ec 01       	movw	r28, r24
    5804:	8b 01       	movw	r16, r22
    //this part first inserts a directory and then creates a node 
    uint8_t getaddr;

    if (existBlockAddr(filename, directory) > 0)
    5806:	0e 94 c9 2b 	call	0x5792	; 0x5792 <existBlockAddr>
    580a:	18 16       	cp	r1, r24
    580c:	19 06       	cpc	r1, r25
    580e:	3c f4       	brge	.+14     	; 0x581e <createFileFromDirectory+0x24>
    5810:	10 e0       	ldi	r17, 0x00	; 0
        return 255;
    }
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, FILENODE);
    return getaddr;
}
    5812:	81 2f       	mov	r24, r17
    5814:	df 91       	pop	r29
    5816:	cf 91       	pop	r28
    5818:	1f 91       	pop	r17
    581a:	0f 91       	pop	r16
    581c:	08 95       	ret

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    581e:	c8 01       	movw	r24, r16
    5820:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <fullBlock>
    5824:	81 30       	cpi	r24, 0x01	; 1
    5826:	81 f0       	breq	.+32     	; 0x5848 <createFileFromDirectory+0x4e>
    {
        return 255;
    }
    getaddr = (uint8_t) getVectorNode();
    5828:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <getVectorNode>
    582c:	18 2f       	mov	r17, r24
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, FILENODE);
    582e:	90 e0       	ldi	r25, 0x00	; 0
    5830:	be 01       	movw	r22, r28
    5832:	40 e0       	ldi	r20, 0x00	; 0
    5834:	20 2f       	mov	r18, r16
    5836:	02 e0       	ldi	r16, 0x02	; 2
    5838:	0e 94 4a 29 	call	0x5294	; 0x5294 <buildNewNode>
    return getaddr;
}
    583c:	81 2f       	mov	r24, r17
    583e:	df 91       	pop	r29
    5840:	cf 91       	pop	r28
    5842:	1f 91       	pop	r17
    5844:	0f 91       	pop	r16
    5846:	08 95       	ret

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    5848:	1f ef       	ldi	r17, 0xFF	; 255
        return 255;
    }
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, FILENODE);
    return getaddr;
}
    584a:	81 2f       	mov	r24, r17
    584c:	df 91       	pop	r29
    584e:	cf 91       	pop	r28
    5850:	1f 91       	pop	r17
    5852:	0f 91       	pop	r16
    5854:	08 95       	ret

00005856 <createDir>:
    return 0;
}

//create a directory
uint8_t createDir(char *filename, int directory)
{
    5856:	0f 93       	push	r16
    5858:	1f 93       	push	r17
    585a:	cf 93       	push	r28
    585c:	df 93       	push	r29
    585e:	ec 01       	movw	r28, r24
    5860:	8b 01       	movw	r16, r22
    //fix: should first try to see if there is a directory with the same name
    uint8_t getaddr;

    if (existBlockAddr(filename, directory) > 0)
    5862:	0e 94 c9 2b 	call	0x5792	; 0x5792 <existBlockAddr>
    5866:	18 16       	cp	r1, r24
    5868:	19 06       	cpc	r1, r25
    586a:	3c f4       	brge	.+14     	; 0x587a <createDir+0x24>
    586c:	10 e0       	ldi	r17, 0x00	; 0
    }
    //this part first inserts a directory and then creates a node 
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, DIRNODE);
    return getaddr;
}
    586e:	81 2f       	mov	r24, r17
    5870:	df 91       	pop	r29
    5872:	cf 91       	pop	r28
    5874:	1f 91       	pop	r17
    5876:	0f 91       	pop	r16
    5878:	08 95       	ret

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    587a:	c8 01       	movw	r24, r16
    587c:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <fullBlock>
    5880:	81 30       	cpi	r24, 0x01	; 1
    5882:	81 f0       	breq	.+32     	; 0x58a4 <createDir+0x4e>
    {
        return 255;
    }
    //this part first inserts a directory and then creates a node 
    getaddr = (uint8_t) getVectorNode();
    5884:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <getVectorNode>
    5888:	18 2f       	mov	r17, r24
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, DIRNODE);
    588a:	90 e0       	ldi	r25, 0x00	; 0
    588c:	be 01       	movw	r22, r28
    588e:	40 e0       	ldi	r20, 0x00	; 0
    5890:	20 2f       	mov	r18, r16
    5892:	01 e0       	ldi	r16, 0x01	; 1
    5894:	0e 94 4a 29 	call	0x5294	; 0x5294 <buildNewNode>
    return getaddr;
}
    5898:	81 2f       	mov	r24, r17
    589a:	df 91       	pop	r29
    589c:	cf 91       	pop	r28
    589e:	1f 91       	pop	r17
    58a0:	0f 91       	pop	r16
    58a2:	08 95       	ret

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    58a4:	1f ef       	ldi	r17, 0xFF	; 255
    }
    //this part first inserts a directory and then creates a node 
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, DIRNODE);
    return getaddr;
}
    58a6:	81 2f       	mov	r24, r17
    58a8:	df 91       	pop	r29
    58aa:	cf 91       	pop	r28
    58ac:	1f 91       	pop	r17
    58ae:	0f 91       	pop	r16
    58b0:	08 95       	ret

000058b2 <existBlock>:
    return parentnode;
}

//check wehther a block exists. the filename must be single level 
int existBlock(char *filename, int directory)
{
    58b2:	cf 92       	push	r12
    58b4:	df 92       	push	r13
    58b6:	ef 92       	push	r14
    58b8:	ff 92       	push	r15
    58ba:	1f 93       	push	r17
    58bc:	cf 93       	push	r28
    58be:	df 93       	push	r29
    58c0:	6c 01       	movw	r12, r24
    58c2:	7b 01       	movw	r14, r22
    58c4:	ce e0       	ldi	r28, 0x0E	; 14
    58c6:	d0 e0       	ldi	r29, 0x00	; 0
    58c8:	04 c0       	rjmp	.+8      	; 0x58d2 <existBlock+0x20>
        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
        if (checkName(filename, subaddr) == 0)
        {
            if (((temp = checkNodeValid(subaddr)) > 0) && (subaddr > 0))
            {
                return temp;
    58ca:	21 96       	adiw	r28, 0x01	; 1
int existBlock(char *filename, int directory)
{
    int i;
    uint8_t temp;

    for (i = 0; i < 10; i++)
    58cc:	c8 31       	cpi	r28, 0x18	; 24
    58ce:	d1 05       	cpc	r29, r1
    58d0:	b9 f0       	breq	.+46     	; 0x5900 <existBlock+0x4e>
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    58d2:	c7 01       	movw	r24, r14
    58d4:	be 01       	movw	r22, r28
    58d6:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    58da:	18 2f       	mov	r17, r24
        if (checkName(filename, subaddr) == 0)
    58dc:	c6 01       	movw	r24, r12
    58de:	61 2f       	mov	r22, r17
    58e0:	70 e0       	ldi	r23, 0x00	; 0
    58e2:	0e 94 8f 2b 	call	0x571e	; 0x571e <checkName>
    58e6:	89 2b       	or	r24, r25
    58e8:	81 f7       	brne	.-32     	; 0x58ca <existBlock+0x18>
        {
            if (((temp = checkNodeValid(subaddr)) > 0) && (subaddr > 0))
    58ea:	81 2f       	mov	r24, r17
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <checkNodeValid>
    58f2:	88 23       	and	r24, r24
    58f4:	51 f3       	breq	.-44     	; 0x58ca <existBlock+0x18>
    58f6:	11 23       	and	r17, r17
    58f8:	41 f3       	breq	.-48     	; 0x58ca <existBlock+0x18>
            {
                return temp;
    58fa:	28 2f       	mov	r18, r24
    58fc:	30 e0       	ldi	r19, 0x00	; 0
    58fe:	02 c0       	rjmp	.+4      	; 0x5904 <existBlock+0x52>
int existBlock(char *filename, int directory)
{
    int i;
    uint8_t temp;

    for (i = 0; i < 10; i++)
    5900:	20 e0       	ldi	r18, 0x00	; 0
    5902:	30 e0       	ldi	r19, 0x00	; 0
                continue;
            }
        }
    }
    return 0;
}
    5904:	c9 01       	movw	r24, r18
    5906:	df 91       	pop	r29
    5908:	cf 91       	pop	r28
    590a:	1f 91       	pop	r17
    590c:	ff 90       	pop	r15
    590e:	ef 90       	pop	r14
    5910:	df 90       	pop	r13
    5912:	cf 90       	pop	r12
    5914:	08 95       	ret

00005916 <changeDirectory>:
    return;
}

//in this one, the directory is checked to see if the file is out there if not return -1 
int changeDirectory(char *filename, int directory)
{
    5916:	cf 92       	push	r12
    5918:	df 92       	push	r13
    591a:	ef 92       	push	r14
    591c:	ff 92       	push	r15
    591e:	0f 93       	push	r16
    5920:	1f 93       	push	r17
    5922:	cf 93       	push	r28
    5924:	df 93       	push	r29
    5926:	6c 01       	movw	r12, r24
    5928:	7b 01       	movw	r14, r22
    592a:	ce e0       	ldi	r28, 0x0E	; 14
    592c:	d0 e0       	ldi	r29, 0x00	; 0

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
    592e:	c7 01       	movw	r24, r14
    5930:	be 01       	movw	r22, r28
    5932:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
        if (checkName(filename, subaddr) == 0)
    5936:	08 2f       	mov	r16, r24
    5938:	10 e0       	ldi	r17, 0x00	; 0
    593a:	c6 01       	movw	r24, r12
    593c:	b8 01       	movw	r22, r16
    593e:	0e 94 8f 2b 	call	0x571e	; 0x571e <checkName>
    5942:	89 2b       	or	r24, r25
    5944:	31 f0       	breq	.+12     	; 0x5952 <changeDirectory+0x3c>
    5946:	21 96       	adiw	r28, 0x01	; 1
//in this one, the directory is checked to see if the file is out there if not return -1 
int changeDirectory(char *filename, int directory)
{
    int i;

    for (i = 0; i < 10; i++)
    5948:	c8 31       	cpi	r28, 0x18	; 24
    594a:	d1 05       	cpc	r29, r1
    594c:	81 f7       	brne	.-32     	; 0x592e <changeDirectory+0x18>
    594e:	0f ef       	ldi	r16, 0xFF	; 255
    5950:	1f ef       	ldi	r17, 0xFF	; 255
        {
            return subaddr;
        }
    }
    return -1;
}
    5952:	c8 01       	movw	r24, r16
    5954:	df 91       	pop	r29
    5956:	cf 91       	pop	r28
    5958:	1f 91       	pop	r17
    595a:	0f 91       	pop	r16
    595c:	ff 90       	pop	r15
    595e:	ef 90       	pop	r14
    5960:	df 90       	pop	r13
    5962:	cf 90       	pop	r12
    5964:	08 95       	ret

00005966 <locateFileName>:
//the pathname is organized as ../ or ./ or name/ or /something and does not end with / 
//sovled
//and the following are the functions this thing uses
//
int locateFileName(char *pathname, int *state)
{
    5966:	af 92       	push	r10
    5968:	bf 92       	push	r11
    596a:	cf 92       	push	r12
    596c:	df 92       	push	r13
    596e:	ef 92       	push	r14
    5970:	ff 92       	push	r15
    5972:	0f 93       	push	r16
    5974:	1f 93       	push	r17
    5976:	df 93       	push	r29
    5978:	cf 93       	push	r28
    597a:	cd b7       	in	r28, 0x3d	; 61
    597c:	de b7       	in	r29, 0x3e	; 62
    597e:	2d 97       	sbiw	r28, 0x0d	; 13
    5980:	0f b6       	in	r0, 0x3f	; 63
    5982:	f8 94       	cli
    5984:	de bf       	out	0x3e, r29	; 62
    5986:	0f be       	out	0x3f, r0	; 63
    5988:	cd bf       	out	0x3d, r28	; 61
    598a:	6c 01       	movw	r12, r24
    598c:	5b 01       	movw	r10, r22
    int addrTrack;
    char nextString[13];
    int ret;

    //first classify what type of pathname this is 
    p = pathname[0];
    598e:	fc 01       	movw	r30, r24
    5990:	91 91       	ld	r25, Z+
    5992:	8f 01       	movw	r16, r30
    q = pathname[1];
    5994:	f6 01       	movw	r30, r12
    5996:	81 81       	ldd	r24, Z+1	; 0x01
}

//return current directory
int getPwd()
{
    return currentdirectory;
    5998:	e0 90 7c 03 	lds	r14, 0x037C
    599c:	f0 90 7d 03 	lds	r15, 0x037D
    //first classify what type of pathname this is 
    p = pathname[0];
    q = pathname[1];
    relativestart = pathname;
    addrTrack = getPwd();
    if ((p == '.') && (q == '.'))
    59a0:	9e 32       	cpi	r25, 0x2E	; 46
    59a2:	09 f4       	brne	.+2      	; 0x59a6 <locateFileName+0x40>
    59a4:	56 c0       	rjmp	.+172    	; 0x5a52 <locateFileName+0xec>
    }
    else if ((p == '.') && (q == '/'))
    {
        relativestart = pathname + 1;
    }
    else if (p == '/')
    59a6:	9f 32       	cpi	r25, 0x2F	; 47
    59a8:	f1 f0       	breq	.+60     	; 0x59e6 <locateFileName+0x80>
    {
        addrTrack = FSROOTNODE;
        relativestart = pathname;
    }
    else if (isLetter(p) == 1)
    59aa:	89 2f       	mov	r24, r25
    59ac:	81 56       	subi	r24, 0x61	; 97
    59ae:	8a 31       	cpi	r24, 0x1A	; 26
    59b0:	08 f0       	brcs	.+2      	; 0x59b4 <locateFileName+0x4e>
    59b2:	5f c0       	rjmp	.+190    	; 0x5a72 <locateFileName+0x10c>
    {
        //this case is the "mnae" case, where there may or may not be further stuff behind 
        //buggy place 
        relativestart = extractString(relativestart, (char *)nextString);
    59b4:	c6 01       	movw	r24, r12
    59b6:	6e 01       	movw	r12, r28
    59b8:	08 94       	sec
    59ba:	c1 1c       	adc	r12, r1
    59bc:	d1 1c       	adc	r13, r1
    59be:	b6 01       	movw	r22, r12
    59c0:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <extractString>
    59c4:	8c 01       	movw	r16, r24
        if (relativestart == '\0')
    59c6:	00 97       	sbiw	r24, 0x00	; 0
    59c8:	09 f0       	breq	.+2      	; 0x59cc <locateFileName+0x66>
    59ca:	6d c0       	rjmp	.+218    	; 0x5aa6 <locateFileName+0x140>
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    59cc:	c6 01       	movw	r24, r12
    59ce:	b7 01       	movw	r22, r14
    59d0:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <existBlock>
    59d4:	00 97       	sbiw	r24, 0x00	; 0
    59d6:	09 f4       	brne	.+2      	; 0x59da <locateFileName+0x74>
    59d8:	48 c0       	rjmp	.+144    	; 0x5a6a <locateFileName+0x104>
                *state = 0;
                return addrTrack;
            }
            else
            {
                *state = ret;
    59da:	f5 01       	movw	r30, r10
    59dc:	91 83       	std	Z+1, r25	; 0x01
    59de:	80 83       	st	Z, r24
                ret = changeDirectory(nextString, addrTrack);
    59e0:	c6 01       	movw	r24, r12
    59e2:	b7 01       	movw	r22, r14
    59e4:	51 c0       	rjmp	.+162    	; 0x5a88 <locateFileName+0x122>
    }
    else if ((p == '.') && (q == '/'))
    {
        relativestart = pathname + 1;
    }
    else if (p == '/')
    59e6:	86 01       	movw	r16, r12
    59e8:	ee 24       	eor	r14, r14
    59ea:	ff 24       	eor	r15, r15
        //Now all cases have been uniform now. It is like /a/b/c type 
        if (isDirectory(addrTrack) == 0)
        {
            return -1;
        }
        relativestart = extractString(relativestart, nextString);
    59ec:	6e 01       	movw	r12, r28
    59ee:	08 94       	sec
    59f0:	c1 1c       	adc	r12, r1
    59f2:	d1 1c       	adc	r13, r1
    59f4:	14 c0       	rjmp	.+40     	; 0x5a1e <locateFileName+0xb8>
    59f6:	c8 01       	movw	r24, r16
    59f8:	b6 01       	movw	r22, r12
    59fa:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <extractString>
    59fe:	8c 01       	movw	r16, r24
        if (*relativestart == '\0')
    5a00:	fc 01       	movw	r30, r24
    5a02:	80 81       	ld	r24, Z
    5a04:	88 23       	and	r24, r24
    5a06:	59 f1       	breq	.+86     	; 0x5a5e <locateFileName+0xf8>
                return ret;
            }
        }
        else
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    5a08:	c6 01       	movw	r24, r12
    5a0a:	b7 01       	movw	r22, r14
    5a0c:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <existBlock>
    5a10:	89 2b       	or	r24, r25
    5a12:	51 f0       	breq	.+20     	; 0x5a28 <locateFileName+0xc2>
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
    5a14:	c6 01       	movw	r24, r12
    5a16:	b7 01       	movw	r22, r14
    5a18:	0e 94 8b 2c 	call	0x5916	; 0x5916 <changeDirectory>
    5a1c:	7c 01       	movw	r14, r24
        }
    }
    while (1)
    {
        //Now all cases have been uniform now. It is like /a/b/c type 
        if (isDirectory(addrTrack) == 0)
    5a1e:	c7 01       	movw	r24, r14
    5a20:	0e 94 83 2b 	call	0x5706	; 0x5706 <isDirectory>
    5a24:	89 2b       	or	r24, r25
    5a26:	39 f7       	brne	.-50     	; 0x59f6 <locateFileName+0x90>
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
            }
        }
    }
    5a28:	ee 24       	eor	r14, r14
    5a2a:	ea 94       	dec	r14
    5a2c:	fe 2c       	mov	r15, r14
}
    5a2e:	c7 01       	movw	r24, r14
    5a30:	2d 96       	adiw	r28, 0x0d	; 13
    5a32:	0f b6       	in	r0, 0x3f	; 63
    5a34:	f8 94       	cli
    5a36:	de bf       	out	0x3e, r29	; 62
    5a38:	0f be       	out	0x3f, r0	; 63
    5a3a:	cd bf       	out	0x3d, r28	; 61
    5a3c:	cf 91       	pop	r28
    5a3e:	df 91       	pop	r29
    5a40:	1f 91       	pop	r17
    5a42:	0f 91       	pop	r16
    5a44:	ff 90       	pop	r15
    5a46:	ef 90       	pop	r14
    5a48:	df 90       	pop	r13
    5a4a:	cf 90       	pop	r12
    5a4c:	bf 90       	pop	r11
    5a4e:	af 90       	pop	r10
    5a50:	08 95       	ret
    //first classify what type of pathname this is 
    p = pathname[0];
    q = pathname[1];
    relativestart = pathname;
    addrTrack = getPwd();
    if ((p == '.') && (q == '.'))
    5a52:	8e 32       	cpi	r24, 0x2E	; 46
    5a54:	e9 f0       	breq	.+58     	; 0x5a90 <locateFileName+0x12a>
    {
        addrTrack = getParentDirectory(addrTrack);
        relativestart = pathname + 2;
    }
    else if ((p == '.') && (q == '/'))
    5a56:	8f 32       	cpi	r24, 0x2F	; 47
    5a58:	49 f2       	breq	.-110    	; 0x59ec <locateFileName+0x86>
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
    5a5a:	86 01       	movw	r16, r12
    5a5c:	c7 cf       	rjmp	.-114    	; 0x59ec <locateFileName+0x86>
            return -1;
        }
        relativestart = extractString(relativestart, nextString);
        if (*relativestart == '\0')
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    5a5e:	c6 01       	movw	r24, r12
    5a60:	b7 01       	movw	r22, r14
    5a62:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <existBlock>
    5a66:	00 97       	sbiw	r24, 0x00	; 0
    5a68:	51 f4       	brne	.+20     	; 0x5a7e <locateFileName+0x118>
            {
                //ok there is only one string but no further strings after that. And this string does not exist 
                *state = 0;
    5a6a:	f5 01       	movw	r30, r10
    5a6c:	11 82       	std	Z+1, r1	; 0x01
    5a6e:	10 82       	st	Z, r1
    5a70:	de cf       	rjmp	.-68     	; 0x5a2e <locateFileName+0xc8>
    else if (p == '/')
    {
        addrTrack = FSROOTNODE;
        relativestart = pathname;
    }
    else if (isLetter(p) == 1)
    5a72:	91 54       	subi	r25, 0x41	; 65
    5a74:	9a 31       	cpi	r25, 0x1A	; 26
    5a76:	08 f4       	brcc	.+2      	; 0x5a7a <locateFileName+0x114>
    5a78:	9d cf       	rjmp	.-198    	; 0x59b4 <locateFileName+0x4e>
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
    5a7a:	86 01       	movw	r16, r12
    5a7c:	b7 cf       	rjmp	.-146    	; 0x59ec <locateFileName+0x86>
                *state = 0;
                return addrTrack;
            }
            else
            {
                *state = ret;
    5a7e:	f5 01       	movw	r30, r10
    5a80:	91 83       	std	Z+1, r25	; 0x01
    5a82:	80 83       	st	Z, r24
                ret = changeDirectory(nextString, addrTrack);
    5a84:	c6 01       	movw	r24, r12
    5a86:	b7 01       	movw	r22, r14
    5a88:	0e 94 8b 2c 	call	0x5916	; 0x5916 <changeDirectory>
    5a8c:	7c 01       	movw	r14, r24
    5a8e:	cf cf       	rjmp	.-98     	; 0x5a2e <locateFileName+0xc8>
//-------------------------------------------------------------------------
int getParentDirectory(int directory)
{
    uint8_t parentnode;

    parentnode = fsread8uint(directory, DIR_PARENTOFFSET);
    5a90:	c7 01       	movw	r24, r14
    5a92:	6f e1       	ldi	r22, 0x1F	; 31
    5a94:	70 e0       	ldi	r23, 0x00	; 0
    5a96:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    return parentnode;
    5a9a:	e8 2e       	mov	r14, r24
    5a9c:	ff 24       	eor	r15, r15
    relativestart = pathname;
    addrTrack = getPwd();
    if ((p == '.') && (q == '.'))
    {
        addrTrack = getParentDirectory(addrTrack);
        relativestart = pathname + 2;
    5a9e:	86 01       	movw	r16, r12
    5aa0:	0e 5f       	subi	r16, 0xFE	; 254
    5aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    5aa4:	a3 cf       	rjmp	.-186    	; 0x59ec <locateFileName+0x86>
                return ret;
            }
        }
        else
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
    5aa6:	c6 01       	movw	r24, r12
    5aa8:	b7 01       	movw	r22, r14
    5aaa:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <existBlock>
    5aae:	89 2b       	or	r24, r25
    5ab0:	09 f4       	brne	.+2      	; 0x5ab4 <locateFileName+0x14e>
    5ab2:	ba cf       	rjmp	.-140    	; 0x5a28 <locateFileName+0xc2>
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
    5ab4:	c6 01       	movw	r24, r12
    5ab6:	b7 01       	movw	r22, r14
    5ab8:	0e 94 8b 2c 	call	0x5916	; 0x5916 <changeDirectory>
    5abc:	7c 01       	movw	r14, r24
    5abe:	96 cf       	rjmp	.-212    	; 0x59ec <locateFileName+0x86>

00005ac0 <getbit>:
#endif
}

//-------------------------------------------------------------------------
static int getbit(char *set, int number)
{
    5ac0:	ac 01       	movw	r20, r24
    5ac2:	fb 01       	movw	r30, r22
    5ac4:	77 fd       	sbrc	r23, 7
    5ac6:	1a c0       	rjmp	.+52     	; 0x5afc <getbit+0x3c>
    5ac8:	f5 95       	asr	r31
    5aca:	e7 95       	ror	r30
    5acc:	f5 95       	asr	r31
    5ace:	e7 95       	ror	r30
    5ad0:	f5 95       	asr	r31
    5ad2:	e7 95       	ror	r30
    5ad4:	e4 0f       	add	r30, r20
    5ad6:	f5 1f       	adc	r31, r21
    5ad8:	20 81       	ld	r18, Z
    5ada:	33 27       	eor	r19, r19
    5adc:	27 fd       	sbrc	r18, 7
    5ade:	30 95       	com	r19
    5ae0:	cb 01       	movw	r24, r22
    5ae2:	68 e0       	ldi	r22, 0x08	; 8
    5ae4:	70 e0       	ldi	r23, 0x00	; 0
    5ae6:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    5aea:	02 c0       	rjmp	.+4      	; 0x5af0 <getbit+0x30>
    5aec:	35 95       	asr	r19
    5aee:	27 95       	ror	r18
    5af0:	8a 95       	dec	r24
    5af2:	e2 f7       	brpl	.-8      	; 0x5aec <getbit+0x2c>
    5af4:	21 70       	andi	r18, 0x01	; 1
    5af6:	30 70       	andi	r19, 0x00	; 0
    set += number / 8;
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
}
    5af8:	c9 01       	movw	r24, r18
    5afa:	08 95       	ret
#endif
}

//-------------------------------------------------------------------------
static int getbit(char *set, int number)
{
    5afc:	37 96       	adiw	r30, 0x07	; 7
    5afe:	e4 cf       	rjmp	.-56     	; 0x5ac8 <getbit+0x8>

00005b00 <setbit>:
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
}

//-------------------------------------------------------------------------
static void setbit(char *set, int number, int value)
{
    5b00:	dc 01       	movw	r26, r24
    set += number / 8;
    5b02:	9b 01       	movw	r18, r22
    5b04:	77 fd       	sbrc	r23, 7
    5b06:	2c c0       	rjmp	.+88     	; 0x5b60 <setbit+0x60>
    5b08:	f9 01       	movw	r30, r18
    5b0a:	f5 95       	asr	r31
    5b0c:	e7 95       	ror	r30
    5b0e:	f5 95       	asr	r31
    5b10:	e7 95       	ror	r30
    5b12:	f5 95       	asr	r31
    5b14:	e7 95       	ror	r30
    5b16:	ea 0f       	add	r30, r26
    5b18:	fb 1f       	adc	r31, r27
    if (value)
    5b1a:	45 2b       	or	r20, r21
    5b1c:	89 f4       	brne	.+34     	; 0x5b40 <setbit+0x40>
    {
        *set |= 1 << (number % 8);
    }                           /* set bit      */
    else
    {
        *set &= ~(1 << (number % 8));
    5b1e:	cb 01       	movw	r24, r22
    5b20:	68 e0       	ldi	r22, 0x08	; 8
    5b22:	70 e0       	ldi	r23, 0x00	; 0
    5b24:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    5b28:	21 e0       	ldi	r18, 0x01	; 1
    5b2a:	30 e0       	ldi	r19, 0x00	; 0
    5b2c:	02 c0       	rjmp	.+4      	; 0x5b32 <setbit+0x32>
    5b2e:	22 0f       	add	r18, r18
    5b30:	33 1f       	adc	r19, r19
    5b32:	8a 95       	dec	r24
    5b34:	e2 f7       	brpl	.-8      	; 0x5b2e <setbit+0x2e>
    5b36:	20 95       	com	r18
    5b38:	80 81       	ld	r24, Z
    5b3a:	82 23       	and	r24, r18
    5b3c:	80 83       	st	Z, r24
    5b3e:	08 95       	ret
static void setbit(char *set, int number, int value)
{
    set += number / 8;
    if (value)
    {
        *set |= 1 << (number % 8);
    5b40:	cb 01       	movw	r24, r22
    5b42:	68 e0       	ldi	r22, 0x08	; 8
    5b44:	70 e0       	ldi	r23, 0x00	; 0
    5b46:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    5b4a:	21 e0       	ldi	r18, 0x01	; 1
    5b4c:	30 e0       	ldi	r19, 0x00	; 0
    5b4e:	02 c0       	rjmp	.+4      	; 0x5b54 <setbit+0x54>
    5b50:	22 0f       	add	r18, r18
    5b52:	33 1f       	adc	r19, r19
    5b54:	8a 95       	dec	r24
    5b56:	e2 f7       	brpl	.-8      	; 0x5b50 <setbit+0x50>
    5b58:	80 81       	ld	r24, Z
    5b5a:	82 2b       	or	r24, r18
    5b5c:	80 83       	st	Z, r24
    5b5e:	08 95       	ret
}

//-------------------------------------------------------------------------
static void setbit(char *set, int number, int value)
{
    set += number / 8;
    5b60:	29 5f       	subi	r18, 0xF9	; 249
    5b62:	3f 4f       	sbci	r19, 0xFF	; 255
    5b64:	d1 cf       	rjmp	.-94     	; 0x5b08 <setbit+0x8>

00005b66 <initVectorFlash>:
    }                           /* clear bit    */
}

//-------------------------------------------------------------------------
void initVectorFlash()
{
    5b66:	ee e7       	ldi	r30, 0x7E	; 126
    5b68:	f3 e0       	ldi	r31, 0x03	; 3
    int i;

    for (i = 0; i < 32; i++)
    {
        vectorflash[i] = 0;
    5b6a:	11 92       	st	Z+, r1
//-------------------------------------------------------------------------
void initVectorFlash()
{
    int i;

    for (i = 0; i < 32; i++)
    5b6c:	83 e0       	ldi	r24, 0x03	; 3
    5b6e:	ee 39       	cpi	r30, 0x9E	; 158
    5b70:	f8 07       	cpc	r31, r24
    5b72:	d9 f7       	brne	.-10     	; 0x5b6a <initVectorFlash+0x4>
    {
        vectorflash[i] = 0;
    }
}
    5b74:	08 95       	ret

00005b76 <getFlashPage>:

//-------------------------------------------------------------------------
int getFlashPage()
{
    5b76:	cf 93       	push	r28
    5b78:	df 93       	push	r29
    5b7a:	c0 e0       	ldi	r28, 0x00	; 0
    5b7c:	d0 e0       	ldi	r29, 0x00	; 0
    5b7e:	05 c0       	rjmp	.+10     	; 0x5b8a <getFlashPage+0x14>
    int num;

    for (num = 0; num < 256; num++)
    5b80:	21 96       	adiw	r28, 0x01	; 1
    5b82:	81 e0       	ldi	r24, 0x01	; 1
    5b84:	c0 30       	cpi	r28, 0x00	; 0
    5b86:	d8 07       	cpc	r29, r24
    5b88:	a9 f0       	breq	.+42     	; 0x5bb4 <getFlashPage+0x3e>
    {
        if (getbit(vectorflash, num) == 0)
    5b8a:	8e e7       	ldi	r24, 0x7E	; 126
    5b8c:	93 e0       	ldi	r25, 0x03	; 3
    5b8e:	be 01       	movw	r22, r28
    5b90:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <getbit>
    5b94:	89 2b       	or	r24, r25
    5b96:	a1 f7       	brne	.-24     	; 0x5b80 <getFlashPage+0xa>
        {
            setbit(vectorflash, num, 1);
    5b98:	8e e7       	ldi	r24, 0x7E	; 126
    5b9a:	93 e0       	ldi	r25, 0x03	; 3
    5b9c:	be 01       	movw	r22, r28
    5b9e:	41 e0       	ldi	r20, 0x01	; 1
    5ba0:	50 e0       	ldi	r21, 0x00	; 0
    5ba2:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <setbit>
            return num + 1;
    5ba6:	be 01       	movw	r22, r28
    5ba8:	6f 5f       	subi	r22, 0xFF	; 255
    5baa:	7f 4f       	sbci	r23, 0xFF	; 255
        }
    }
    return -1;
}
    5bac:	cb 01       	movw	r24, r22
    5bae:	df 91       	pop	r29
    5bb0:	cf 91       	pop	r28
    5bb2:	08 95       	ret
//-------------------------------------------------------------------------
int getFlashPage()
{
    int num;

    for (num = 0; num < 256; num++)
    5bb4:	6f ef       	ldi	r22, 0xFF	; 255
    5bb6:	7f ef       	ldi	r23, 0xFF	; 255
            setbit(vectorflash, num, 1);
            return num + 1;
        }
    }
    return -1;
}
    5bb8:	cb 01       	movw	r24, r22
    5bba:	df 91       	pop	r29
    5bbc:	cf 91       	pop	r28
    5bbe:	08 95       	ret

00005bc0 <releaseFlashPage>:
}

//-------------------------------------------------------------------------
void releaseFlashPage(int num)
{
    setbit(vectorflash, num - 1, 0);
    5bc0:	bc 01       	movw	r22, r24
    5bc2:	61 50       	subi	r22, 0x01	; 1
    5bc4:	70 40       	sbci	r23, 0x00	; 0
    5bc6:	8e e7       	ldi	r24, 0x7E	; 126
    5bc8:	93 e0       	ldi	r25, 0x03	; 3
    5bca:	40 e0       	ldi	r20, 0x00	; 0
    5bcc:	50 e0       	ldi	r21, 0x00	; 0
    5bce:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <setbit>
}
    5bd2:	08 95       	ret

00005bd4 <countVectorFlash>:

//-------------------------------------------------------------------------
int countVectorFlash()
{
    5bd4:	0f 93       	push	r16
    5bd6:	1f 93       	push	r17
    5bd8:	cf 93       	push	r28
    5bda:	df 93       	push	r29
    5bdc:	00 e0       	ldi	r16, 0x00	; 0
    5bde:	10 e0       	ldi	r17, 0x00	; 0
    5be0:	c0 e0       	ldi	r28, 0x00	; 0
    5be2:	d0 e0       	ldi	r29, 0x00	; 0
    5be4:	05 c0       	rjmp	.+10     	; 0x5bf0 <countVectorFlash+0x1c>
    int count, num;

    count = 0;
    for (num = 0; num < 256; num++)
    5be6:	21 96       	adiw	r28, 0x01	; 1
    5be8:	81 e0       	ldi	r24, 0x01	; 1
    5bea:	c0 30       	cpi	r28, 0x00	; 0
    5bec:	d8 07       	cpc	r29, r24
    5bee:	71 f0       	breq	.+28     	; 0x5c0c <countVectorFlash+0x38>
    {
        if (getbit(vectorflash, num) == 1)
    5bf0:	8e e7       	ldi	r24, 0x7E	; 126
    5bf2:	93 e0       	ldi	r25, 0x03	; 3
    5bf4:	be 01       	movw	r22, r28
    5bf6:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <getbit>
    5bfa:	01 97       	sbiw	r24, 0x01	; 1
    5bfc:	a1 f7       	brne	.-24     	; 0x5be6 <countVectorFlash+0x12>
        {
            count++;
    5bfe:	0f 5f       	subi	r16, 0xFF	; 255
    5c00:	1f 4f       	sbci	r17, 0xFF	; 255
int countVectorFlash()
{
    int count, num;

    count = 0;
    for (num = 0; num < 256; num++)
    5c02:	21 96       	adiw	r28, 0x01	; 1
    5c04:	81 e0       	ldi	r24, 0x01	; 1
    5c06:	c0 30       	cpi	r28, 0x00	; 0
    5c08:	d8 07       	cpc	r29, r24
    5c0a:	91 f7       	brne	.-28     	; 0x5bf0 <countVectorFlash+0x1c>
    5c0c:	9e 01       	movw	r18, r28
    5c0e:	20 1b       	sub	r18, r16
    5c10:	31 0b       	sbc	r19, r17
        {
            count++;
        }
    }
    return 256 - count;
}
    5c12:	c9 01       	movw	r24, r18
    5c14:	df 91       	pop	r29
    5c16:	cf 91       	pop	r28
    5c18:	1f 91       	pop	r17
    5c1a:	0f 91       	pop	r16
    5c1c:	08 95       	ret

00005c1e <printVectorFlash>:
        else
        {
            data[i] = 1;
        }
    }
}
    5c1e:	08 95       	ret

00005c20 <scanVectorFlash>:
    return -1;
}

//-------------------------------------------------------------------------
void scanVectorFlash()
{
    5c20:	ef 92       	push	r14
    5c22:	ff 92       	push	r15
    5c24:	1f 93       	push	r17
    5c26:	cf 93       	push	r28
    5c28:	df 93       	push	r29
    5c2a:	80 e0       	ldi	r24, 0x00	; 0
    5c2c:	90 e0       	ldi	r25, 0x00	; 0
    5c2e:	04 c0       	rjmp	.+8      	; 0x5c38 <scanVectorFlash+0x18>
        type = fsread8uint(addr, TYPEOFFSET);
        if ((valid == 1) && (type == FILENODE))
        {
            char i;

            for (i = 0; i < 8; i++)
    5c30:	c7 01       	movw	r24, r14
    int num, addr;
    uint8_t valid;
    uint8_t type;
    uint8_t readpage;

    for (num = 0; num < 96; num++)
    5c32:	80 36       	cpi	r24, 0x60	; 96
    5c34:	91 05       	cpc	r25, r1
    5c36:	59 f1       	breq	.+86     	; 0x5c8e <scanVectorFlash+0x6e>
    {
        addr = num + 1;
    5c38:	7c 01       	movw	r14, r24
    5c3a:	08 94       	sec
    5c3c:	e1 1c       	adc	r14, r1
    5c3e:	f1 1c       	adc	r15, r1
        valid = fsread8uint(addr, VALIDOFFSET);
    5c40:	c7 01       	movw	r24, r14
    5c42:	6d e0       	ldi	r22, 0x0D	; 13
    5c44:	70 e0       	ldi	r23, 0x00	; 0
    5c46:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    5c4a:	18 2f       	mov	r17, r24
        type = fsread8uint(addr, TYPEOFFSET);
    5c4c:	c7 01       	movw	r24, r14
    5c4e:	6c e0       	ldi	r22, 0x0C	; 12
    5c50:	70 e0       	ldi	r23, 0x00	; 0
    5c52:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
        if ((valid == 1) && (type == FILENODE))
    5c56:	11 30       	cpi	r17, 0x01	; 1
    5c58:	59 f7       	brne	.-42     	; 0x5c30 <scanVectorFlash+0x10>
    5c5a:	82 30       	cpi	r24, 0x02	; 2
    5c5c:	49 f7       	brne	.-46     	; 0x5c30 <scanVectorFlash+0x10>
    5c5e:	ce e0       	ldi	r28, 0x0E	; 14
    5c60:	d0 e0       	ldi	r29, 0x00	; 0
    5c62:	04 c0       	rjmp	.+8      	; 0x5c6c <scanVectorFlash+0x4c>
            for (i = 0; i < 8; i++)
            {
                readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
                if (readpage > 0)
                {
                    setbit(vectorflash, readpage - 1, 1);
    5c64:	21 96       	adiw	r28, 0x01	; 1
        type = fsread8uint(addr, TYPEOFFSET);
        if ((valid == 1) && (type == FILENODE))
        {
            char i;

            for (i = 0; i < 8; i++)
    5c66:	c6 31       	cpi	r28, 0x16	; 22
    5c68:	d1 05       	cpc	r29, r1
    5c6a:	11 f3       	breq	.-60     	; 0x5c30 <scanVectorFlash+0x10>
            {
                readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    5c6c:	c7 01       	movw	r24, r14
    5c6e:	be 01       	movw	r22, r28
    5c70:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
                if (readpage > 0)
    5c74:	88 23       	and	r24, r24
    5c76:	b1 f3       	breq	.-20     	; 0x5c64 <scanVectorFlash+0x44>
                {
                    setbit(vectorflash, readpage - 1, 1);
    5c78:	68 2f       	mov	r22, r24
    5c7a:	70 e0       	ldi	r23, 0x00	; 0
    5c7c:	61 50       	subi	r22, 0x01	; 1
    5c7e:	70 40       	sbci	r23, 0x00	; 0
    5c80:	8e e7       	ldi	r24, 0x7E	; 126
    5c82:	93 e0       	ldi	r25, 0x03	; 3
    5c84:	41 e0       	ldi	r20, 0x01	; 1
    5c86:	50 e0       	ldi	r21, 0x00	; 0
    5c88:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <setbit>
    5c8c:	eb cf       	rjmp	.-42     	; 0x5c64 <scanVectorFlash+0x44>
                }
            }
        }
    }
}
    5c8e:	df 91       	pop	r29
    5c90:	cf 91       	pop	r28
    5c92:	1f 91       	pop	r17
    5c94:	ff 90       	pop	r15
    5c96:	ef 90       	pop	r14
    5c98:	08 95       	ret

00005c9a <readVectorFlashFromExternalStorage>:

//-------------------------------------------------------------------------
void readVectorFlashFromExternalStorage()
{
#ifdef PLATFORM_AVR
    genericreadBytes(FLASHVECTORSTART, 32, vectorflash);
    5c9a:	8e e4       	ldi	r24, 0x4E	; 78
    5c9c:	9c e0       	ldi	r25, 0x0C	; 12
    5c9e:	60 e2       	ldi	r22, 0x20	; 32
    5ca0:	70 e0       	ldi	r23, 0x00	; 0
    5ca2:	4e e7       	ldi	r20, 0x7E	; 126
    5ca4:	53 e0       	ldi	r21, 0x03	; 3
    5ca6:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <genericreadBytes>
#endif
}
    5caa:	08 95       	ret

00005cac <writeVectorFlashToExternalStorage>:
static char vectorflash[32];

void writeVectorFlashToExternalStorage()
{
#ifdef PLATFORM_AVR
    genericwriteBytes(FLASHVECTORSTART, 32, vectorflash);
    5cac:	8e e4       	ldi	r24, 0x4E	; 78
    5cae:	9c e0       	ldi	r25, 0x0C	; 12
    5cb0:	60 e2       	ldi	r22, 0x20	; 32
    5cb2:	70 e0       	ldi	r23, 0x00	; 0
    5cb4:	4e e7       	ldi	r20, 0x7E	; 126
    5cb6:	53 e0       	ldi	r21, 0x03	; 3
    5cb8:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <genericwriteBytes>
#endif
}
    5cbc:	08 95       	ret

00005cbe <getbit>:
    genericwriteBytes(EEPROMVECTORSTART, 12, vectornode);
}

//-------------------------------------------------------------------------
int getbit(char *set, int number)
{
    5cbe:	ac 01       	movw	r20, r24
    5cc0:	fb 01       	movw	r30, r22
    5cc2:	77 fd       	sbrc	r23, 7
    5cc4:	1a c0       	rjmp	.+52     	; 0x5cfa <getbit+0x3c>
    5cc6:	f5 95       	asr	r31
    5cc8:	e7 95       	ror	r30
    5cca:	f5 95       	asr	r31
    5ccc:	e7 95       	ror	r30
    5cce:	f5 95       	asr	r31
    5cd0:	e7 95       	ror	r30
    5cd2:	e4 0f       	add	r30, r20
    5cd4:	f5 1f       	adc	r31, r21
    5cd6:	20 81       	ld	r18, Z
    5cd8:	33 27       	eor	r19, r19
    5cda:	27 fd       	sbrc	r18, 7
    5cdc:	30 95       	com	r19
    5cde:	cb 01       	movw	r24, r22
    5ce0:	68 e0       	ldi	r22, 0x08	; 8
    5ce2:	70 e0       	ldi	r23, 0x00	; 0
    5ce4:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    5ce8:	02 c0       	rjmp	.+4      	; 0x5cee <getbit+0x30>
    5cea:	35 95       	asr	r19
    5cec:	27 95       	ror	r18
    5cee:	8a 95       	dec	r24
    5cf0:	e2 f7       	brpl	.-8      	; 0x5cea <getbit+0x2c>
    5cf2:	21 70       	andi	r18, 0x01	; 1
    5cf4:	30 70       	andi	r19, 0x00	; 0
    set += number / 8;
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
}
    5cf6:	c9 01       	movw	r24, r18
    5cf8:	08 95       	ret
    genericwriteBytes(EEPROMVECTORSTART, 12, vectornode);
}

//-------------------------------------------------------------------------
int getbit(char *set, int number)
{
    5cfa:	37 96       	adiw	r30, 0x07	; 7
    5cfc:	e4 cf       	rjmp	.-56     	; 0x5cc6 <getbit+0x8>

00005cfe <setbit>:
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
}

//-------------------------------------------------------------------------
void setbit(char *set, int number, int value)
{
    5cfe:	dc 01       	movw	r26, r24
    set += number / 8;
    5d00:	9b 01       	movw	r18, r22
    5d02:	77 fd       	sbrc	r23, 7
    5d04:	2c c0       	rjmp	.+88     	; 0x5d5e <setbit+0x60>
    5d06:	f9 01       	movw	r30, r18
    5d08:	f5 95       	asr	r31
    5d0a:	e7 95       	ror	r30
    5d0c:	f5 95       	asr	r31
    5d0e:	e7 95       	ror	r30
    5d10:	f5 95       	asr	r31
    5d12:	e7 95       	ror	r30
    5d14:	ea 0f       	add	r30, r26
    5d16:	fb 1f       	adc	r31, r27
    if (value)
    5d18:	45 2b       	or	r20, r21
    5d1a:	89 f4       	brne	.+34     	; 0x5d3e <setbit+0x40>
    {
        *set |= 1 << (number % 8);
    }                           /* set bit      */
    else
    {
        *set &= ~(1 << (number % 8));
    5d1c:	cb 01       	movw	r24, r22
    5d1e:	68 e0       	ldi	r22, 0x08	; 8
    5d20:	70 e0       	ldi	r23, 0x00	; 0
    5d22:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    5d26:	21 e0       	ldi	r18, 0x01	; 1
    5d28:	30 e0       	ldi	r19, 0x00	; 0
    5d2a:	02 c0       	rjmp	.+4      	; 0x5d30 <setbit+0x32>
    5d2c:	22 0f       	add	r18, r18
    5d2e:	33 1f       	adc	r19, r19
    5d30:	8a 95       	dec	r24
    5d32:	e2 f7       	brpl	.-8      	; 0x5d2c <setbit+0x2e>
    5d34:	20 95       	com	r18
    5d36:	80 81       	ld	r24, Z
    5d38:	82 23       	and	r24, r18
    5d3a:	80 83       	st	Z, r24
    5d3c:	08 95       	ret
void setbit(char *set, int number, int value)
{
    set += number / 8;
    if (value)
    {
        *set |= 1 << (number % 8);
    5d3e:	cb 01       	movw	r24, r22
    5d40:	68 e0       	ldi	r22, 0x08	; 8
    5d42:	70 e0       	ldi	r23, 0x00	; 0
    5d44:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    5d48:	21 e0       	ldi	r18, 0x01	; 1
    5d4a:	30 e0       	ldi	r19, 0x00	; 0
    5d4c:	02 c0       	rjmp	.+4      	; 0x5d52 <setbit+0x54>
    5d4e:	22 0f       	add	r18, r18
    5d50:	33 1f       	adc	r19, r19
    5d52:	8a 95       	dec	r24
    5d54:	e2 f7       	brpl	.-8      	; 0x5d4e <setbit+0x50>
    5d56:	80 81       	ld	r24, Z
    5d58:	82 2b       	or	r24, r18
    5d5a:	80 83       	st	Z, r24
    5d5c:	08 95       	ret
}

//-------------------------------------------------------------------------
void setbit(char *set, int number, int value)
{
    set += number / 8;
    5d5e:	29 5f       	subi	r18, 0xF9	; 249
    5d60:	3f 4f       	sbci	r19, 0xFF	; 255
    5d62:	d1 cf       	rjmp	.-94     	; 0x5d06 <setbit+0x8>

00005d64 <initVectorNode>:
    }                           /* clear bit    */
}

//-------------------------------------------------------------------------
void initVectorNode()
{
    5d64:	e4 e4       	ldi	r30, 0x44	; 68
    5d66:	f6 e0       	ldi	r31, 0x06	; 6
    int i;

    for (i = 0; i < 12; i++)
    {
        vectornode[i] = 0;
    5d68:	11 92       	st	Z+, r1
//-------------------------------------------------------------------------
void initVectorNode()
{
    int i;

    for (i = 0; i < 12; i++)
    5d6a:	86 e0       	ldi	r24, 0x06	; 6
    5d6c:	e0 35       	cpi	r30, 0x50	; 80
    5d6e:	f8 07       	cpc	r31, r24
    5d70:	d9 f7       	brne	.-10     	; 0x5d68 <initVectorNode+0x4>
    {
        vectornode[i] = 0;
    }
}
    5d72:	08 95       	ret

00005d74 <getVectorNode>:

//-------------------------------------------------------------------------
int getVectorNode()
{
    5d74:	cf 93       	push	r28
    5d76:	df 93       	push	r29
    5d78:	c0 e0       	ldi	r28, 0x00	; 0
    5d7a:	d0 e0       	ldi	r29, 0x00	; 0
    5d7c:	04 c0       	rjmp	.+8      	; 0x5d86 <getVectorNode+0x12>
    int num;

    for (num = 0; num < 96; num++)
    5d7e:	21 96       	adiw	r28, 0x01	; 1
    5d80:	c0 36       	cpi	r28, 0x60	; 96
    5d82:	d1 05       	cpc	r29, r1
    5d84:	a9 f0       	breq	.+42     	; 0x5db0 <getVectorNode+0x3c>
    {
        if (getbit(vectornode, num) == 0)
    5d86:	84 e4       	ldi	r24, 0x44	; 68
    5d88:	96 e0       	ldi	r25, 0x06	; 6
    5d8a:	be 01       	movw	r22, r28
    5d8c:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <getbit>
    5d90:	89 2b       	or	r24, r25
    5d92:	a9 f7       	brne	.-22     	; 0x5d7e <getVectorNode+0xa>
        {
            setbit(vectornode, num, 1);
    5d94:	84 e4       	ldi	r24, 0x44	; 68
    5d96:	96 e0       	ldi	r25, 0x06	; 6
    5d98:	be 01       	movw	r22, r28
    5d9a:	41 e0       	ldi	r20, 0x01	; 1
    5d9c:	50 e0       	ldi	r21, 0x00	; 0
    5d9e:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <setbit>
            return num + 1;
    5da2:	be 01       	movw	r22, r28
    5da4:	6f 5f       	subi	r22, 0xFF	; 255
    5da6:	7f 4f       	sbci	r23, 0xFF	; 255
        }
    }
    return -1;
}
    5da8:	cb 01       	movw	r24, r22
    5daa:	df 91       	pop	r29
    5dac:	cf 91       	pop	r28
    5dae:	08 95       	ret
//-------------------------------------------------------------------------
int getVectorNode()
{
    int num;

    for (num = 0; num < 96; num++)
    5db0:	6f ef       	ldi	r22, 0xFF	; 255
    5db2:	7f ef       	ldi	r23, 0xFF	; 255
            setbit(vectornode, num, 1);
            return num + 1;
        }
    }
    return -1;
}
    5db4:	cb 01       	movw	r24, r22
    5db6:	df 91       	pop	r29
    5db8:	cf 91       	pop	r28
    5dba:	08 95       	ret

00005dbc <releaseVectorNode>:
}

//-------------------------------------------------------------------------
void releaseVectorNode(int num)
{
    setbit(vectornode, num - 1, 0);
    5dbc:	bc 01       	movw	r22, r24
    5dbe:	61 50       	subi	r22, 0x01	; 1
    5dc0:	70 40       	sbci	r23, 0x00	; 0
    5dc2:	84 e4       	ldi	r24, 0x44	; 68
    5dc4:	96 e0       	ldi	r25, 0x06	; 6
    5dc6:	40 e0       	ldi	r20, 0x00	; 0
    5dc8:	50 e0       	ldi	r21, 0x00	; 0
    5dca:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <setbit>
}
    5dce:	08 95       	ret

00005dd0 <countVectorNode>:

//-------------------------------------------------------------------------
int countVectorNode()
{
    5dd0:	0f 93       	push	r16
    5dd2:	1f 93       	push	r17
    5dd4:	cf 93       	push	r28
    5dd6:	df 93       	push	r29
    5dd8:	c0 e0       	ldi	r28, 0x00	; 0
    5dda:	d0 e0       	ldi	r29, 0x00	; 0
    5ddc:	00 e0       	ldi	r16, 0x00	; 0
    5dde:	10 e0       	ldi	r17, 0x00	; 0
    5de0:	04 c0       	rjmp	.+8      	; 0x5dea <countVectorNode+0x1a>
    int num, count;

    count = 0;
    for (num = 0; num < 96; num++)
    5de2:	21 96       	adiw	r28, 0x01	; 1
    5de4:	c0 36       	cpi	r28, 0x60	; 96
    5de6:	d1 05       	cpc	r29, r1
    5de8:	69 f0       	breq	.+26     	; 0x5e04 <countVectorNode+0x34>
    {
        if (getbit(vectornode, num) == 1)
    5dea:	84 e4       	ldi	r24, 0x44	; 68
    5dec:	96 e0       	ldi	r25, 0x06	; 6
    5dee:	be 01       	movw	r22, r28
    5df0:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <getbit>
    5df4:	01 97       	sbiw	r24, 0x01	; 1
    5df6:	a9 f7       	brne	.-22     	; 0x5de2 <countVectorNode+0x12>
        {
            count++;
    5df8:	0f 5f       	subi	r16, 0xFF	; 255
    5dfa:	1f 4f       	sbci	r17, 0xFF	; 255
int countVectorNode()
{
    int num, count;

    count = 0;
    for (num = 0; num < 96; num++)
    5dfc:	21 96       	adiw	r28, 0x01	; 1
    5dfe:	c0 36       	cpi	r28, 0x60	; 96
    5e00:	d1 05       	cpc	r29, r1
    5e02:	99 f7       	brne	.-26     	; 0x5dea <countVectorNode+0x1a>
    5e04:	9e 01       	movw	r18, r28
    5e06:	20 1b       	sub	r18, r16
    5e08:	31 0b       	sbc	r19, r17
        {
            count++;
        }
    }
    return 96 - count;
}
    5e0a:	c9 01       	movw	r24, r18
    5e0c:	df 91       	pop	r29
    5e0e:	cf 91       	pop	r28
    5e10:	1f 91       	pop	r17
    5e12:	0f 91       	pop	r16
    5e14:	08 95       	ret

00005e16 <scanVectorNode>:
    return -1;
}

//-------------------------------------------------------------------------
void scanVectorNode()
{
    5e16:	0f 93       	push	r16
    5e18:	1f 93       	push	r17
    5e1a:	cf 93       	push	r28
    5e1c:	df 93       	push	r29
    5e1e:	c0 e0       	ldi	r28, 0x00	; 0
    5e20:	d0 e0       	ldi	r29, 0x00	; 0
    5e22:	0b c0       	rjmp	.+22     	; 0x5e3a <scanVectorNode+0x24>
    {
        addr = num + 1;
        valid = fsread8uint(addr, VALIDOFFSET);
        if (valid == 0)
        {
            setbit(vectornode, num, 0);
    5e24:	84 e4       	ldi	r24, 0x44	; 68
    5e26:	96 e0       	ldi	r25, 0x06	; 6
    5e28:	be 01       	movw	r22, r28
    5e2a:	40 e0       	ldi	r20, 0x00	; 0
    5e2c:	50 e0       	ldi	r21, 0x00	; 0
    5e2e:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <setbit>
        }
        else
        {
            setbit(vectornode, num, 1);
    5e32:	e8 01       	movw	r28, r16
void scanVectorNode()
{
    int num, addr;
    uint8_t valid;

    for (num = 0; num < 96; num++)
    5e34:	00 36       	cpi	r16, 0x60	; 96
    5e36:	11 05       	cpc	r17, r1
    5e38:	a9 f0       	breq	.+42     	; 0x5e64 <scanVectorNode+0x4e>
    {
        addr = num + 1;
    5e3a:	8e 01       	movw	r16, r28
    5e3c:	0f 5f       	subi	r16, 0xFF	; 255
    5e3e:	1f 4f       	sbci	r17, 0xFF	; 255
        valid = fsread8uint(addr, VALIDOFFSET);
    5e40:	c8 01       	movw	r24, r16
    5e42:	6d e0       	ldi	r22, 0x0D	; 13
    5e44:	70 e0       	ldi	r23, 0x00	; 0
    5e46:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
        if (valid == 0)
    5e4a:	88 23       	and	r24, r24
    5e4c:	59 f3       	breq	.-42     	; 0x5e24 <scanVectorNode+0xe>
        {
            setbit(vectornode, num, 0);
        }
        else
        {
            setbit(vectornode, num, 1);
    5e4e:	84 e4       	ldi	r24, 0x44	; 68
    5e50:	96 e0       	ldi	r25, 0x06	; 6
    5e52:	be 01       	movw	r22, r28
    5e54:	41 e0       	ldi	r20, 0x01	; 1
    5e56:	50 e0       	ldi	r21, 0x00	; 0
    5e58:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <setbit>
    5e5c:	e8 01       	movw	r28, r16
void scanVectorNode()
{
    int num, addr;
    uint8_t valid;

    for (num = 0; num < 96; num++)
    5e5e:	00 36       	cpi	r16, 0x60	; 96
    5e60:	11 05       	cpc	r17, r1
    5e62:	59 f7       	brne	.-42     	; 0x5e3a <scanVectorNode+0x24>
        else
        {
            setbit(vectornode, num, 1);
        }
    }
}
    5e64:	df 91       	pop	r29
    5e66:	cf 91       	pop	r28
    5e68:	1f 91       	pop	r17
    5e6a:	0f 91       	pop	r16
    5e6c:	08 95       	ret

00005e6e <readVectorNodeFromExternalStorage>:
}

//-------------------------------------------------------------------------
void readVectorNodeFromExternalStorage()
{
    genericwriteBytes(EEPROMVECTORSTART, 12, vectornode);
    5e6e:	82 e4       	ldi	r24, 0x42	; 66
    5e70:	9c e0       	ldi	r25, 0x0C	; 12
    5e72:	6c e0       	ldi	r22, 0x0C	; 12
    5e74:	70 e0       	ldi	r23, 0x00	; 0
    5e76:	44 e4       	ldi	r20, 0x44	; 68
    5e78:	56 e0       	ldi	r21, 0x06	; 6
    5e7a:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <genericwriteBytes>
}
    5e7e:	08 95       	ret

00005e80 <writeVectorNodeToExternalStorage>:
#include "storageconstants.h"

char vectornode[12];
void writeVectorNodeToExternalStorage()
{
    genericreadBytes(EEPROMVECTORSTART, 12, vectornode);
    5e80:	82 e4       	ldi	r24, 0x42	; 66
    5e82:	9c e0       	ldi	r25, 0x0C	; 12
    5e84:	6c e0       	ldi	r22, 0x0C	; 12
    5e86:	70 e0       	ldi	r23, 0x00	; 0
    5e88:	44 e4       	ldi	r20, 0x44	; 68
    5e8a:	56 e0       	ldi	r21, 0x06	; 6
    5e8c:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <genericreadBytes>
}
    5e90:	08 95       	ret

00005e92 <atmel_flash_init>:
/* device-specific functions */
void atmel_flash_init(void)
{
    uint8_t sreg;

    sreg = SREG;
    5e92:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5e94:	f8 94       	cli
    // set the flash select pin
    DDRA |= 1 << ATMEL_FLASH_SELECT_PIN;
    5e96:	d3 9a       	sbi	0x1a, 3	; 26
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    5e98:	db 9a       	sbi	0x1b, 3	; 27
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    5e9a:	95 98       	cbi	0x12, 5	; 18
    // set flash clock output direction
    ATMEL_FLASH_DIRE |= 1 << ATMEL_FLASH_CLK;
    5e9c:	8d 9a       	sbi	0x11, 5	; 17
    // clear flash out pin
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_OUT);
    5e9e:	92 98       	cbi	0x12, 2	; 18
    // set flash out pin direction
    ATMEL_FLASH_DIRE &= ~(1 << ATMEL_FLASH_OUT);
    5ea0:	8a 98       	cbi	0x11, 2	; 17
    // clear flash in pin
    ATMEL_FLASH_PORT |= 1 << ATMEL_FLASH_IN;
    5ea2:	93 9a       	sbi	0x12, 3	; 18
    // set flash in pin direction
    ATMEL_FLASH_DIRE |= 1 << ATMEL_FLASH_IN;
    5ea4:	8b 9a       	sbi	0x11, 3	; 17
    SREG = sreg;
    5ea6:	8f bf       	out	0x3f, r24	; 63
    atmel_flash_addr = 0;
    5ea8:	10 92 9e 03 	sts	0x039E, r1
    5eac:	10 92 9f 03 	sts	0x039F, r1
    5eb0:	10 92 a0 03 	sts	0x03A0, r1
    5eb4:	10 92 a1 03 	sts	0x03A1, r1
    cur_buff = ATMEL_FLASH_BUFFER_1;
    5eb8:	21 e0       	ldi	r18, 0x01	; 1
    5eba:	20 93 a2 03 	sts	0x03A2, r18
    cur_page = ATMEL_FLASH_MAX_PAGES;
    5ebe:	80 e0       	ldi	r24, 0x00	; 0
    5ec0:	98 e0       	ldi	r25, 0x08	; 8
    5ec2:	90 93 a4 03 	sts	0x03A4, r25
    5ec6:	80 93 a3 03 	sts	0x03A3, r24
    dirty = 0;
    5eca:	10 92 a5 03 	sts	0x03A5, r1
    initdone = 1;
    5ece:	20 93 a6 03 	sts	0x03A6, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5ed2:	80 e4       	ldi	r24, 0x40	; 64
    5ed4:	9c e9       	ldi	r25, 0x9C	; 156
    5ed6:	01 97       	sbiw	r24, 0x01	; 1
    5ed8:	f1 f7       	brne	.-4      	; 0x5ed6 <atmel_flash_init+0x44>
    _delay_ms(20);
}
    5eda:	08 95       	ret

00005edc <atmel_flash_get_byte>:
static uint8_t atmel_flash_get_byte(void)
{
    uint8_t spiIn = 0;
    uint8_t sreg;

    sreg = SREG;
    5edc:	2f b7       	in	r18, 0x3f	; 63
    cli();
    5ede:	f8 94       	cli
    BITINIT;
    5ee0:	92 b3       	in	r25, 0x12	; 18
    5ee2:	97 7d       	andi	r25, 0xD7	; 215
    READBIT(7);
    5ee4:	92 bb       	out	0x12, r25	; 18
    5ee6:	80 e0       	ldi	r24, 0x00	; 0
    5ee8:	95 9a       	sbi	0x12, 5	; 18
    5eea:	82 99       	sbic	0x10, 2	; 16
    5eec:	80 68       	ori	r24, 0x80	; 128
    READBIT(6);
    5eee:	92 bb       	out	0x12, r25	; 18
    5ef0:	95 9a       	sbi	0x12, 5	; 18
    5ef2:	82 99       	sbic	0x10, 2	; 16
    5ef4:	80 64       	ori	r24, 0x40	; 64
    READBIT(5);
    5ef6:	92 bb       	out	0x12, r25	; 18
    5ef8:	95 9a       	sbi	0x12, 5	; 18
    5efa:	82 99       	sbic	0x10, 2	; 16
    5efc:	80 62       	ori	r24, 0x20	; 32
    READBIT(4);
    5efe:	92 bb       	out	0x12, r25	; 18
    5f00:	95 9a       	sbi	0x12, 5	; 18
    5f02:	82 99       	sbic	0x10, 2	; 16
    5f04:	80 61       	ori	r24, 0x10	; 16
    READBIT(3);
    5f06:	92 bb       	out	0x12, r25	; 18
    5f08:	95 9a       	sbi	0x12, 5	; 18
    5f0a:	82 99       	sbic	0x10, 2	; 16
    5f0c:	88 60       	ori	r24, 0x08	; 8
    READBIT(2);
    5f0e:	92 bb       	out	0x12, r25	; 18
    5f10:	95 9a       	sbi	0x12, 5	; 18
    5f12:	82 99       	sbic	0x10, 2	; 16
    5f14:	84 60       	ori	r24, 0x04	; 4
    READBIT(1);
    5f16:	92 bb       	out	0x12, r25	; 18
    5f18:	95 9a       	sbi	0x12, 5	; 18
    5f1a:	82 99       	sbic	0x10, 2	; 16
    5f1c:	82 60       	ori	r24, 0x02	; 2
    READBIT(0);
    5f1e:	92 bb       	out	0x12, r25	; 18
    5f20:	95 9a       	sbi	0x12, 5	; 18
    5f22:	82 99       	sbic	0x10, 2	; 16
    5f24:	81 60       	ori	r24, 0x01	; 1
    SREG = sreg;
    5f26:	2f bf       	out	0x3f, r18	; 63
    return spiIn;
}
    5f28:	08 95       	ret

00005f2a <atmel_flash_send_byte>:

/** @brief Send 1 byte of data from the external flash.
*/
static uint8_t atmel_flash_send_byte(uint8_t spiOut)
{
    5f2a:	28 2f       	mov	r18, r24
    uint8_t spiIn = 0;
    uint8_t sreg;

    sreg = SREG;
    5f2c:	3f b7       	in	r19, 0x3f	; 63
    cli();
    5f2e:	f8 94       	cli
    BITINIT;
    5f30:	92 b3       	in	r25, 0x12	; 18
    5f32:	97 7d       	andi	r25, 0xD7	; 215
    WRITEBIT(7);
    5f34:	92 bb       	out	0x12, r25	; 18
    5f36:	80 e0       	ldi	r24, 0x00	; 0
    5f38:	27 fd       	sbrc	r18, 7
    5f3a:	93 9a       	sbi	0x12, 3	; 18
    5f3c:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(6);
    5f3e:	92 bb       	out	0x12, r25	; 18
    5f40:	26 fd       	sbrc	r18, 6
    5f42:	93 9a       	sbi	0x12, 3	; 18
    5f44:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(5);
    5f46:	92 bb       	out	0x12, r25	; 18
    5f48:	25 fd       	sbrc	r18, 5
    5f4a:	93 9a       	sbi	0x12, 3	; 18
    5f4c:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(4);
    5f4e:	92 bb       	out	0x12, r25	; 18
    5f50:	24 fd       	sbrc	r18, 4
    5f52:	93 9a       	sbi	0x12, 3	; 18
    5f54:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(3);
    5f56:	92 bb       	out	0x12, r25	; 18
    5f58:	23 fd       	sbrc	r18, 3
    5f5a:	93 9a       	sbi	0x12, 3	; 18
    5f5c:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(2);
    5f5e:	92 bb       	out	0x12, r25	; 18
    5f60:	22 fd       	sbrc	r18, 2
    5f62:	93 9a       	sbi	0x12, 3	; 18
    5f64:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(1);
    5f66:	92 bb       	out	0x12, r25	; 18
    5f68:	21 fd       	sbrc	r18, 1
    5f6a:	93 9a       	sbi	0x12, 3	; 18
    5f6c:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(0);
    5f6e:	92 bb       	out	0x12, r25	; 18
    5f70:	20 fd       	sbrc	r18, 0
    5f72:	93 9a       	sbi	0x12, 3	; 18
    5f74:	95 9a       	sbi	0x12, 5	; 18
    SREG = sreg;
    5f76:	3f bf       	out	0x3f, r19	; 63
    return spiIn;
}
    5f78:	08 95       	ret

00005f7a <atmel_flash_pagesize>:

//-------------------------------------------------------------------------
inline uint16_t atmel_flash_pagesize()
{
    return 256;
}
    5f7a:	80 e0       	ldi	r24, 0x00	; 0
    5f7c:	91 e0       	ldi	r25, 0x01	; 1
    5f7e:	08 95       	ret

00005f80 <atmel_flash_pagenumber>:

//-------------------------------------------------------------------------
inline uint16_t atmel_flash_pagenumber()
{
    return 2048;
}
    5f80:	80 e0       	ldi	r24, 0x00	; 0
    5f82:	98 e0       	ldi	r25, 0x08	; 8
    5f84:	08 95       	ret

00005f86 <atmel_flash_busy>:
* A little bit slower than simply holding the clk low, But
* easier
* @return TRUE if busy, else return FALSE
*/
static uint8_t atmel_flash_busy(void)
{
    5f86:	0f 93       	push	r16
    5f88:	1f 93       	push	r17
    uint8_t status;
    _atomic_t _atomic = _atomic_start();
    5f8a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    5f8e:	08 2f       	mov	r16, r24
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    5f90:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5f92:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    5f94:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    5f96:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    5f98:	8f bf       	out	0x3f, r24	; 63
{
    uint8_t status;
    _atomic_t _atomic = _atomic_start();

    atmel_flash_low();
    atmel_flash_send_byte(C_REQ_STATUS);
    5f9a:	87 ed       	ldi	r24, 0xD7	; 215
    5f9c:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <atmel_flash_send_byte>
    //SEND d7h, op code for register request
    status = atmel_flash_get_byte();
    5fa0:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <atmel_flash_get_byte>
    5fa4:	18 2f       	mov	r17, r24
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    5fa6:	db 9a       	sbi	0x1b, 3	; 27
    atmel_flash_send_byte(C_REQ_STATUS);
    //SEND d7h, op code for register request
    status = atmel_flash_get_byte();
    atmel_flash_high();
    status &= 0x80;
    _atomic_end(_atomic);
    5fa8:	80 2f       	mov	r24, r16
    5faa:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    5fae:	11 1f       	adc	r17, r17
    5fb0:	11 27       	eor	r17, r17
    5fb2:	11 1f       	adc	r17, r17
    {
        return TRUE;
    }

    return FALSE;
}
    5fb4:	81 e0       	ldi	r24, 0x01	; 1
    5fb6:	81 27       	eor	r24, r17
    5fb8:	1f 91       	pop	r17
    5fba:	0f 91       	pop	r16
    5fbc:	08 95       	ret

00005fbe <atmel_flash_write_buffer>:
* @param len Length of data
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_write_buffer(uint8_t selected, uint16_t offset,
                                        void *reqdata, uint16_t len)
{
    5fbe:	af 92       	push	r10
    5fc0:	bf 92       	push	r11
    5fc2:	cf 92       	push	r12
    5fc4:	df 92       	push	r13
    5fc6:	ef 92       	push	r14
    5fc8:	ff 92       	push	r15
    5fca:	0f 93       	push	r16
    5fcc:	1f 93       	push	r17
    5fce:	df 93       	push	r29
    5fd0:	cf 93       	push	r28
    5fd2:	00 d0       	rcall	.+0      	; 0x5fd4 <atmel_flash_write_buffer+0x16>
    5fd4:	00 d0       	rcall	.+0      	; 0x5fd6 <atmel_flash_write_buffer+0x18>
    5fd6:	cd b7       	in	r28, 0x3d	; 61
    5fd8:	de b7       	in	r29, 0x3e	; 62
    5fda:	5a 01       	movw	r10, r20
    5fdc:	69 01       	movw	r12, r18
    uint8_t cmd[4], *reqPtr;
    uint16_t i;

    if (selected == 1)
    5fde:	81 30       	cpi	r24, 0x01	; 1
    5fe0:	d9 f1       	breq	.+118    	; 0x6058 <atmel_flash_write_buffer+0x9a>
    {
        cmd[0] = C_WRITE_BUFFER1;
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_WRITE_BUFFER2;
    5fe2:	87 e8       	ldi	r24, 0x87	; 135
    5fe4:	89 83       	std	Y+1, r24	; 0x01
    }                           // 8 bit of op code
    cmd[1] = 0x00;              // 8 bit don't care code
    5fe6:	1a 82       	std	Y+2, r1	; 0x02
    cmd[2] = offset >> 8;       // 7 bit don't care code with 1 bit address
    5fe8:	7b 83       	std	Y+3, r23	; 0x03
    cmd[3] = offset;            // low-order 8 address bits
    5fea:	6c 83       	std	Y+4, r22	; 0x04
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    5fec:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5fee:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    5ff0:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    5ff2:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    5ff4:	8f bf       	out	0x3f, r24	; 63
    5ff6:	8e 01       	movw	r16, r28
    5ff8:	0f 5f       	subi	r16, 0xFF	; 255
    5ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    5ffc:	85 e0       	ldi	r24, 0x05	; 5
    5ffe:	e8 2e       	mov	r14, r24
    6000:	f1 2c       	mov	r15, r1
    6002:	ec 0e       	add	r14, r28
    6004:	fd 1e       	adc	r15, r29
    reqPtr = (uint8_t *) reqdata;
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    6006:	f8 01       	movw	r30, r16
    6008:	81 91       	ld	r24, Z+
    600a:	8f 01       	movw	r16, r30
    600c:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <atmel_flash_send_byte>
    cmd[2] = offset >> 8;       // 7 bit don't care code with 1 bit address
    cmd[3] = offset;            // low-order 8 address bits
    reqPtr = (uint8_t *) reqdata;
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    6010:	0e 15       	cp	r16, r14
    6012:	1f 05       	cpc	r17, r15
    6014:	c1 f7       	brne	.-16     	; 0x6006 <atmel_flash_write_buffer+0x48>
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    6016:	c1 14       	cp	r12, r1
    6018:	d1 04       	cpc	r13, r1
    601a:	69 f0       	breq	.+26     	; 0x6036 <atmel_flash_write_buffer+0x78>
    601c:	00 e0       	ldi	r16, 0x00	; 0
    601e:	10 e0       	ldi	r17, 0x00	; 0
    {
        atmel_flash_send_byte(reqPtr[i]);
    6020:	f5 01       	movw	r30, r10
    6022:	e0 0f       	add	r30, r16
    6024:	f1 1f       	adc	r31, r17
    6026:	80 81       	ld	r24, Z
    6028:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <atmel_flash_send_byte>
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    602c:	0f 5f       	subi	r16, 0xFF	; 255
    602e:	1f 4f       	sbci	r17, 0xFF	; 255
    6030:	0c 15       	cp	r16, r12
    6032:	1d 05       	cpc	r17, r13
    6034:	a8 f3       	brcs	.-22     	; 0x6020 <atmel_flash_write_buffer+0x62>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    6036:	db 9a       	sbi	0x1b, 3	; 27
    {
        atmel_flash_send_byte(reqPtr[i]);
    }
    atmel_flash_high();
    return TRUE;
}
    6038:	81 e0       	ldi	r24, 0x01	; 1
    603a:	0f 90       	pop	r0
    603c:	0f 90       	pop	r0
    603e:	0f 90       	pop	r0
    6040:	0f 90       	pop	r0
    6042:	cf 91       	pop	r28
    6044:	df 91       	pop	r29
    6046:	1f 91       	pop	r17
    6048:	0f 91       	pop	r16
    604a:	ff 90       	pop	r15
    604c:	ef 90       	pop	r14
    604e:	df 90       	pop	r13
    6050:	cf 90       	pop	r12
    6052:	bf 90       	pop	r11
    6054:	af 90       	pop	r10
    6056:	08 95       	ret
    uint8_t cmd[4], *reqPtr;
    uint16_t i;

    if (selected == 1)
    {
        cmd[0] = C_WRITE_BUFFER1;
    6058:	84 e8       	ldi	r24, 0x84	; 132
    605a:	89 83       	std	Y+1, r24	; 0x01
    605c:	c4 cf       	rjmp	.-120    	; 0x5fe6 <atmel_flash_write_buffer+0x28>

0000605e <atmel_flash_flush_buffer>:
* @param selected Flush buffer to select
* @param page Page to flush to
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_flush_buffer(uint8_t selected, uint16_t page)
{
    605e:	ef 92       	push	r14
    6060:	ff 92       	push	r15
    6062:	0f 93       	push	r16
    6064:	1f 93       	push	r17
    6066:	df 93       	push	r29
    6068:	cf 93       	push	r28
    606a:	00 d0       	rcall	.+0      	; 0x606c <atmel_flash_flush_buffer+0xe>
    606c:	00 d0       	rcall	.+0      	; 0x606e <atmel_flash_flush_buffer+0x10>
    606e:	cd b7       	in	r28, 0x3d	; 61
    6070:	de b7       	in	r29, 0x3e	; 62
    uint8_t i, cmd[4];

    if (selected == 1)
    6072:	81 30       	cpi	r24, 0x01	; 1
    6074:	79 f1       	breq	.+94     	; 0x60d4 <atmel_flash_flush_buffer+0x76>
    {
        cmd[0] = C_FLUSH_BUFFER1;
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_FLUSH_BUFFER2;
    6076:	86 e8       	ldi	r24, 0x86	; 134
    6078:	89 83       	std	Y+1, r24	; 0x01
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    607a:	cb 01       	movw	r24, r22
    607c:	88 0f       	add	r24, r24
    607e:	89 2f       	mov	r24, r25
    6080:	88 1f       	adc	r24, r24
    6082:	99 0b       	sbc	r25, r25
    6084:	91 95       	neg	r25
    6086:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    6088:	86 2f       	mov	r24, r22
    608a:	88 0f       	add	r24, r24
    608c:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    608e:	1c 82       	std	Y+4, r1	; 0x04
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    6090:	8f b7       	in	r24, 0x3f	; 63
    cli();
    6092:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    6094:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    6096:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    6098:	8f bf       	out	0x3f, r24	; 63
    609a:	8e 01       	movw	r16, r28
    609c:	0f 5f       	subi	r16, 0xFF	; 255
    609e:	1f 4f       	sbci	r17, 0xFF	; 255
    60a0:	95 e0       	ldi	r25, 0x05	; 5
    60a2:	e9 2e       	mov	r14, r25
    60a4:	f1 2c       	mov	r15, r1
    60a6:	ec 0e       	add	r14, r28
    60a8:	fd 1e       	adc	r15, r29
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    60aa:	f8 01       	movw	r30, r16
    60ac:	81 91       	ld	r24, Z+
    60ae:	8f 01       	movw	r16, r30
    60b0:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    60b4:	0e 15       	cp	r16, r14
    60b6:	1f 05       	cpc	r17, r15
    60b8:	c1 f7       	brne	.-16     	; 0x60aa <atmel_flash_flush_buffer+0x4c>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    60ba:	db 9a       	sbi	0x1b, 3	; 27
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    return TRUE;
}
    60bc:	81 e0       	ldi	r24, 0x01	; 1
    60be:	0f 90       	pop	r0
    60c0:	0f 90       	pop	r0
    60c2:	0f 90       	pop	r0
    60c4:	0f 90       	pop	r0
    60c6:	cf 91       	pop	r28
    60c8:	df 91       	pop	r29
    60ca:	1f 91       	pop	r17
    60cc:	0f 91       	pop	r16
    60ce:	ff 90       	pop	r15
    60d0:	ef 90       	pop	r14
    60d2:	08 95       	ret
{
    uint8_t i, cmd[4];

    if (selected == 1)
    {
        cmd[0] = C_FLUSH_BUFFER1;
    60d4:	83 e8       	ldi	r24, 0x83	; 131
    60d6:	89 83       	std	Y+1, r24	; 0x01
    60d8:	d0 cf       	rjmp	.-96     	; 0x607a <atmel_flash_flush_buffer+0x1c>

000060da <atmel_flash_crc>:
}

/** @brief Compute the crc from the current flash address, for count bytes
*/
uint16_t atmel_flash_crc(uint32_t count)
{
    60da:	6f 92       	push	r6
    60dc:	7f 92       	push	r7
    60de:	8f 92       	push	r8
    60e0:	9f 92       	push	r9
    60e2:	af 92       	push	r10
    60e4:	bf 92       	push	r11
    60e6:	cf 92       	push	r12
    60e8:	df 92       	push	r13
    60ea:	ef 92       	push	r14
    60ec:	ff 92       	push	r15
    60ee:	0f 93       	push	r16
    60f0:	1f 93       	push	r17
    60f2:	df 93       	push	r29
    60f4:	cf 93       	push	r28
    60f6:	cd b7       	in	r28, 0x3d	; 61
    60f8:	de b7       	in	r29, 0x3e	; 62
    60fa:	28 97       	sbiw	r28, 0x08	; 8
    60fc:	0f b6       	in	r0, 0x3f	; 63
    60fe:	f8 94       	cli
    6100:	de bf       	out	0x3e, r29	; 62
    6102:	0f be       	out	0x3f, r0	; 63
    6104:	cd bf       	out	0x3d, r28	; 61
    6106:	3b 01       	movw	r6, r22
    6108:	4c 01       	movw	r8, r24
    uint16_t page, offset, crc;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    610a:	e0 90 9e 03 	lds	r14, 0x039E
    610e:	f0 90 9f 03 	lds	r15, 0x039F
    6112:	00 91 a0 03 	lds	r16, 0x03A0
    6116:	10 91 a1 03 	lds	r17, 0x03A1
    611a:	c8 01       	movw	r24, r16
    611c:	b7 01       	movw	r22, r14
    611e:	28 e0       	ldi	r18, 0x08	; 8
    6120:	31 e0       	ldi	r19, 0x01	; 1
    6122:	40 e0       	ldi	r20, 0x00	; 0
    6124:	50 e0       	ldi	r21, 0x00	; 0
    6126:	0e 94 ab 56 	call	0xad56	; 0xad56 <__udivmodsi4>
    612a:	69 01       	movw	r12, r18
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    612c:	c8 01       	movw	r24, r16
    612e:	b7 01       	movw	r22, r14
    6130:	28 e0       	ldi	r18, 0x08	; 8
    6132:	31 e0       	ldi	r19, 0x01	; 1
    6134:	40 e0       	ldi	r20, 0x00	; 0
    6136:	50 e0       	ldi	r21, 0x00	; 0
    6138:	0e 94 ab 56 	call	0xad56	; 0xad56 <__udivmodsi4>
    613c:	8b 01       	movw	r16, r22
    if (dirty && page <= cur_page && page + (offset + count) /
    613e:	80 91 a5 03 	lds	r24, 0x03A5
    6142:	88 23       	and	r24, r24
    6144:	89 f1       	breq	.+98     	; 0x61a8 <atmel_flash_crc+0xce>
    6146:	e0 90 a3 03 	lds	r14, 0x03A3
    614a:	f0 90 a4 03 	lds	r15, 0x03A4
    614e:	ec 14       	cp	r14, r12
    6150:	fd 04       	cpc	r15, r13
    6152:	50 f1       	brcs	.+84     	; 0x61a8 <atmel_flash_crc+0xce>
    6154:	b8 01       	movw	r22, r16
    6156:	80 e0       	ldi	r24, 0x00	; 0
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	66 0d       	add	r22, r6
    615c:	77 1d       	adc	r23, r7
    615e:	88 1d       	adc	r24, r8
    6160:	99 1d       	adc	r25, r9
    6162:	28 e0       	ldi	r18, 0x08	; 8
    6164:	31 e0       	ldi	r19, 0x01	; 1
    6166:	40 e0       	ldi	r20, 0x00	; 0
    6168:	50 e0       	ldi	r21, 0x00	; 0
    616a:	0e 94 ab 56 	call	0xad56	; 0xad56 <__udivmodsi4>
    616e:	c6 01       	movw	r24, r12
    6170:	a0 e0       	ldi	r26, 0x00	; 0
    6172:	b0 e0       	ldi	r27, 0x00	; 0
    6174:	82 0f       	add	r24, r18
    6176:	93 1f       	adc	r25, r19
    6178:	a4 1f       	adc	r26, r20
    617a:	b5 1f       	adc	r27, r21
    617c:	97 01       	movw	r18, r14
    617e:	40 e0       	ldi	r20, 0x00	; 0
    6180:	50 e0       	ldi	r21, 0x00	; 0
    6182:	82 17       	cp	r24, r18
    6184:	93 07       	cpc	r25, r19
    6186:	a4 07       	cpc	r26, r20
    6188:	b5 07       	cpc	r27, r21
    618a:	70 f0       	brcs	.+28     	; 0x61a8 <atmel_flash_crc+0xce>
        ATMEL_FLASH_PAGE_SIZE >= cur_page)
    {
        while (atmel_flash_busy())
    618c:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6190:	88 23       	and	r24, r24
    6192:	e1 f7       	brne	.-8      	; 0x618c <atmel_flash_crc+0xb2>
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
    6194:	60 91 a3 03 	lds	r22, 0x03A3
    6198:	70 91 a4 03 	lds	r23, 0x03A4
    619c:	80 91 a2 03 	lds	r24, 0x03A2
    61a0:	0e 94 2f 30 	call	0x605e	; 0x605e <atmel_flash_flush_buffer>
        dirty = 0;
    61a4:	10 92 a5 03 	sts	0x03A5, r1
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
    61a8:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    61ac:	88 23       	and	r24, r24
    61ae:	e1 f7       	brne	.-8      	; 0x61a8 <atmel_flash_crc+0xce>
{
    uint8_t cmd[8];
    uint16_t crc;
    uint32_t i;

    cmd[0] = C_READ_THROUGH_MEMORY;     // 8 bit of op code
    61b0:	88 ee       	ldi	r24, 0xE8	; 232
    61b2:	89 83       	std	Y+1, r24	; 0x01
    cmd[1] = (page >> 7);       // 4 bit reserve and high 4 MSB
    61b4:	c6 01       	movw	r24, r12
    61b6:	88 0f       	add	r24, r24
    61b8:	89 2f       	mov	r24, r25
    61ba:	88 1f       	adc	r24, r24
    61bc:	99 0b       	sbc	r25, r25
    61be:	91 95       	neg	r25
    61c0:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = (page << 1) | offset >> 8; // 7 bit page and 1 bit offset MSB
    61c2:	8c 2d       	mov	r24, r12
    61c4:	88 0f       	add	r24, r24
    61c6:	81 2b       	or	r24, r17
    61c8:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = offset;            // low-order 8 address bits
    61ca:	0c 83       	std	Y+4, r16	; 0x04
    cmd[4] = 0x00;
    61cc:	1d 82       	std	Y+5, r1	; 0x05
    cmd[5] = 0x00;
    61ce:	1e 82       	std	Y+6, r1	; 0x06
    cmd[6] = 0x00;
    61d0:	1f 82       	std	Y+7, r1	; 0x07
    cmd[7] = 0x00;
    61d2:	18 86       	std	Y+8, r1	; 0x08
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    61d4:	8f b7       	in	r24, 0x3f	; 63
    cli();
    61d6:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    61d8:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    61da:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    61dc:	8f bf       	out	0x3f, r24	; 63
    61de:	8e 01       	movw	r16, r28
    61e0:	0f 5f       	subi	r16, 0xFF	; 255
    61e2:	1f 4f       	sbci	r17, 0xFF	; 255
    61e4:	e9 e0       	ldi	r30, 0x09	; 9
    61e6:	ee 2e       	mov	r14, r30
    61e8:	f1 2c       	mov	r15, r1
    61ea:	ec 0e       	add	r14, r28
    61ec:	fd 1e       	adc	r15, r29
    cmd[6] = 0x00;
    cmd[7] = 0x00;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    61ee:	f8 01       	movw	r30, r16
    61f0:	81 91       	ld	r24, Z+
    61f2:	8f 01       	movw	r16, r30
    61f4:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <atmel_flash_send_byte>
    cmd[4] = 0x00;
    cmd[5] = 0x00;
    cmd[6] = 0x00;
    cmd[7] = 0x00;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    61f8:	0e 15       	cp	r16, r14
    61fa:	1f 05       	cpc	r17, r15
    61fc:	c1 f7       	brne	.-16     	; 0x61ee <atmel_flash_crc+0x114>
    // The following code was adapted directly from crc.c
    {
        uint8_t v, xor_flag, byte, bit;

        crc = 0xFFFF /*INITIAL_VALUE */ ;
        for (i = 0; i < len; i++)
    61fe:	61 14       	cp	r6, r1
    6200:	71 04       	cpc	r7, r1
    6202:	81 04       	cpc	r8, r1
    6204:	91 04       	cpc	r9, r1
    6206:	09 f4       	brne	.+2      	; 0x620a <atmel_flash_crc+0x130>
    6208:	57 c0       	rjmp	.+174    	; 0x62b8 <atmel_flash_crc+0x1de>
    620a:	cc 24       	eor	r12, r12
    620c:	dd 24       	eor	r13, r13
    620e:	76 01       	movw	r14, r12
    6210:	0f ef       	ldi	r16, 0xFF	; 255
    6212:	1f ef       	ldi	r17, 0xFF	; 255
                    crc = crc + 1;
                }

                if (xor_flag)
                {
                    crc = crc ^ 0x1021 /*POLY*/;
    6214:	71 e2       	ldi	r23, 0x21	; 33
    6216:	a7 2e       	mov	r10, r23
    6218:	70 e1       	ldi	r23, 0x10	; 16
    621a:	b7 2e       	mov	r11, r23

        crc = 0xFFFF /*INITIAL_VALUE */ ;
        for (i = 0; i < len; i++)
        {
            // Read the current byte from flash
            byte = atmel_flash_get_byte();
    621c:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <atmel_flash_get_byte>
    6220:	58 2f       	mov	r21, r24
    6222:	40 e8       	ldi	r20, 0x80	; 128
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	05 c0       	rjmp	.+10     	; 0x6232 <atmel_flash_crc+0x158>
                if (byte & v)
                {
                    crc = crc + 1;
                }

                if (xor_flag)
    6228:	89 01       	movw	r16, r18
        for (i = 0; i < len; i++)
        {
            // Read the current byte from flash
            byte = atmel_flash_get_byte();
            v = 0x80;
            for (bit = 0; bit < 8; bit++)
    622a:	9f 5f       	subi	r25, 0xFF	; 255
    622c:	98 30       	cpi	r25, 0x08	; 8
    622e:	89 f0       	breq	.+34     	; 0x6252 <atmel_flash_crc+0x178>
                if (xor_flag)
                {
                    crc = crc ^ 0x1021 /*POLY*/;
                }

                v = v >> 1;
    6230:	46 95       	lsr	r20
                else
                {
                    xor_flag = 0;
                }

                crc = crc << 1;
    6232:	98 01       	movw	r18, r16
    6234:	22 0f       	add	r18, r18
    6236:	33 1f       	adc	r19, r19
                if (byte & v)
    6238:	84 2f       	mov	r24, r20
    623a:	85 23       	and	r24, r21
    623c:	11 f0       	breq	.+4      	; 0x6242 <atmel_flash_crc+0x168>
                {
                    crc = crc + 1;
    623e:	2f 5f       	subi	r18, 0xFF	; 255
    6240:	3f 4f       	sbci	r19, 0xFF	; 255
                }

                if (xor_flag)
    6242:	17 ff       	sbrs	r17, 7
    6244:	f1 cf       	rjmp	.-30     	; 0x6228 <atmel_flash_crc+0x14e>
                {
                    crc = crc ^ 0x1021 /*POLY*/;
    6246:	89 01       	movw	r16, r18
    6248:	0a 25       	eor	r16, r10
    624a:	1b 25       	eor	r17, r11
        for (i = 0; i < len; i++)
        {
            // Read the current byte from flash
            byte = atmel_flash_get_byte();
            v = 0x80;
            for (bit = 0; bit < 8; bit++)
    624c:	9f 5f       	subi	r25, 0xFF	; 255
    624e:	98 30       	cpi	r25, 0x08	; 8
    6250:	79 f7       	brne	.-34     	; 0x6230 <atmel_flash_crc+0x156>
    // The following code was adapted directly from crc.c
    {
        uint8_t v, xor_flag, byte, bit;

        crc = 0xFFFF /*INITIAL_VALUE */ ;
        for (i = 0; i < len; i++)
    6252:	08 94       	sec
    6254:	c1 1c       	adc	r12, r1
    6256:	d1 1c       	adc	r13, r1
    6258:	e1 1c       	adc	r14, r1
    625a:	f1 1c       	adc	r15, r1
    625c:	c6 14       	cp	r12, r6
    625e:	d7 04       	cpc	r13, r7
    6260:	e8 04       	cpc	r14, r8
    6262:	f9 04       	cpc	r15, r9
    6264:	d8 f2       	brcs	.-74     	; 0x621c <atmel_flash_crc+0x142>
    6266:	80 e0       	ldi	r24, 0x00	; 0
            }

            crc = crc << 1;
            if (xor_flag)
            {
                crc = crc ^ 0x1021 /*POLY*/;
    6268:	21 e2       	ldi	r18, 0x21	; 33
    626a:	30 e1       	ldi	r19, 0x10	; 16
    626c:	05 c0       	rjmp	.+10     	; 0x6278 <atmel_flash_crc+0x19e>
            else
            {
                xor_flag = 0;
            }

            crc = crc << 1;
    626e:	00 0f       	add	r16, r16
    6270:	11 1f       	adc	r17, r17
                }

                v = v >> 1;
            }
        }
        for (bit = 0; bit < 16; bit++)
    6272:	8f 5f       	subi	r24, 0xFF	; 255
    6274:	80 31       	cpi	r24, 0x10	; 16
    6276:	49 f0       	breq	.+18     	; 0x628a <atmel_flash_crc+0x1b0>
        {
            if (crc & 0x8000)
    6278:	17 ff       	sbrs	r17, 7
    627a:	f9 cf       	rjmp	.-14     	; 0x626e <atmel_flash_crc+0x194>
            else
            {
                xor_flag = 0;
            }

            crc = crc << 1;
    627c:	00 0f       	add	r16, r16
    627e:	11 1f       	adc	r17, r17
            if (xor_flag)
            {
                crc = crc ^ 0x1021 /*POLY*/;
    6280:	02 27       	eor	r16, r18
    6282:	13 27       	eor	r17, r19
                }

                v = v >> 1;
            }
        }
        for (bit = 0; bit < 16; bit++)
    6284:	8f 5f       	subi	r24, 0xFF	; 255
    6286:	80 31       	cpi	r24, 0x10	; 16
    6288:	b9 f7       	brne	.-18     	; 0x6278 <atmel_flash_crc+0x19e>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    628a:	db 9a       	sbi	0x1b, 3	; 27
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    crc = atmel_flash_crc_memory(page, offset, count);
    return crc;
}
    628c:	c8 01       	movw	r24, r16
    628e:	28 96       	adiw	r28, 0x08	; 8
    6290:	0f b6       	in	r0, 0x3f	; 63
    6292:	f8 94       	cli
    6294:	de bf       	out	0x3e, r29	; 62
    6296:	0f be       	out	0x3f, r0	; 63
    6298:	cd bf       	out	0x3d, r28	; 61
    629a:	cf 91       	pop	r28
    629c:	df 91       	pop	r29
    629e:	1f 91       	pop	r17
    62a0:	0f 91       	pop	r16
    62a2:	ff 90       	pop	r15
    62a4:	ef 90       	pop	r14
    62a6:	df 90       	pop	r13
    62a8:	cf 90       	pop	r12
    62aa:	bf 90       	pop	r11
    62ac:	af 90       	pop	r10
    62ae:	9f 90       	pop	r9
    62b0:	8f 90       	pop	r8
    62b2:	7f 90       	pop	r7
    62b4:	6f 90       	pop	r6
    62b6:	08 95       	ret
    // The following code was adapted directly from crc.c
    {
        uint8_t v, xor_flag, byte, bit;

        crc = 0xFFFF /*INITIAL_VALUE */ ;
        for (i = 0; i < len; i++)
    62b8:	0f ef       	ldi	r16, 0xFF	; 255
    62ba:	1f ef       	ldi	r17, 0xFF	; 255
    62bc:	d4 cf       	rjmp	.-88     	; 0x6266 <atmel_flash_crc+0x18c>

000062be <atmel_flash_fill_buffer>:
* @param selected Fill buffer to select
* @param page Page to fill from
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_fill_buffer(uint8_t selected, uint16_t page)
{
    62be:	ef 92       	push	r14
    62c0:	ff 92       	push	r15
    62c2:	0f 93       	push	r16
    62c4:	1f 93       	push	r17
    62c6:	df 93       	push	r29
    62c8:	cf 93       	push	r28
    62ca:	00 d0       	rcall	.+0      	; 0x62cc <atmel_flash_fill_buffer+0xe>
    62cc:	00 d0       	rcall	.+0      	; 0x62ce <atmel_flash_fill_buffer+0x10>
    62ce:	cd b7       	in	r28, 0x3d	; 61
    62d0:	de b7       	in	r29, 0x3e	; 62
    62d2:	f8 2e       	mov	r15, r24
    62d4:	8b 01       	movw	r16, r22
    uint8_t i, cmd[4];

    while (atmel_flash_busy())
    62d6:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    62da:	88 23       	and	r24, r24
    62dc:	e1 f7       	brne	.-8      	; 0x62d6 <atmel_flash_fill_buffer+0x18>
        ;
    atmel_flash_flush_buffer(cur_buff, cur_page);
    62de:	60 91 a3 03 	lds	r22, 0x03A3
    62e2:	70 91 a4 03 	lds	r23, 0x03A4
    62e6:	80 91 a2 03 	lds	r24, 0x03A2
    62ea:	0e 94 2f 30 	call	0x605e	; 0x605e <atmel_flash_flush_buffer>
    while (atmel_flash_busy())
    62ee:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    62f2:	88 23       	and	r24, r24
    62f4:	e1 f7       	brne	.-8      	; 0x62ee <atmel_flash_fill_buffer+0x30>
        ;
    if (selected == 1)
    62f6:	81 e0       	ldi	r24, 0x01	; 1
    62f8:	f8 16       	cp	r15, r24
    62fa:	79 f1       	breq	.+94     	; 0x635a <atmel_flash_fill_buffer+0x9c>
    {
        cmd[0] = C_FILL_BUFFER1;
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_FILL_BUFFER2;
    62fc:	85 e5       	ldi	r24, 0x55	; 85
    62fe:	89 83       	std	Y+1, r24	; 0x01
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    6300:	c8 01       	movw	r24, r16
    6302:	88 0f       	add	r24, r24
    6304:	89 2f       	mov	r24, r25
    6306:	88 1f       	adc	r24, r24
    6308:	99 0b       	sbc	r25, r25
    630a:	91 95       	neg	r25
    630c:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    630e:	80 2f       	mov	r24, r16
    6310:	88 0f       	add	r24, r24
    6312:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    6314:	1c 82       	std	Y+4, r1	; 0x04
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    6316:	8f b7       	in	r24, 0x3f	; 63
    cli();
    6318:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    631a:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    631c:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    631e:	8f bf       	out	0x3f, r24	; 63
    6320:	8e 01       	movw	r16, r28
    6322:	0f 5f       	subi	r16, 0xFF	; 255
    6324:	1f 4f       	sbci	r17, 0xFF	; 255
    6326:	a5 e0       	ldi	r26, 0x05	; 5
    6328:	ea 2e       	mov	r14, r26
    632a:	f1 2c       	mov	r15, r1
    632c:	ec 0e       	add	r14, r28
    632e:	fd 1e       	adc	r15, r29
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    6330:	f8 01       	movw	r30, r16
    6332:	81 91       	ld	r24, Z+
    6334:	8f 01       	movw	r16, r30
    6336:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    633a:	0e 15       	cp	r16, r14
    633c:	1f 05       	cpc	r17, r15
    633e:	c1 f7       	brne	.-16     	; 0x6330 <atmel_flash_fill_buffer+0x72>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    6340:	db 9a       	sbi	0x1b, 3	; 27
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    return TRUE;
}
    6342:	81 e0       	ldi	r24, 0x01	; 1
    6344:	0f 90       	pop	r0
    6346:	0f 90       	pop	r0
    6348:	0f 90       	pop	r0
    634a:	0f 90       	pop	r0
    634c:	cf 91       	pop	r28
    634e:	df 91       	pop	r29
    6350:	1f 91       	pop	r17
    6352:	0f 91       	pop	r16
    6354:	ff 90       	pop	r15
    6356:	ef 90       	pop	r14
    6358:	08 95       	ret
    atmel_flash_flush_buffer(cur_buff, cur_page);
    while (atmel_flash_busy())
        ;
    if (selected == 1)
    {
        cmd[0] = C_FILL_BUFFER1;
    635a:	83 e5       	ldi	r24, 0x53	; 83
    635c:	89 83       	std	Y+1, r24	; 0x01
    635e:	d0 cf       	rjmp	.-96     	; 0x6300 <atmel_flash_fill_buffer+0x42>

00006360 <atmel_flash_compare>:
}

/** @brief Compare buf to the current flash address, for count bytes
*/
uint8_t atmel_flash_compare(uint8_t * buf, uint16_t count)
{
    6360:	2f 92       	push	r2
    6362:	3f 92       	push	r3
    6364:	4f 92       	push	r4
    6366:	5f 92       	push	r5
    6368:	6f 92       	push	r6
    636a:	7f 92       	push	r7
    636c:	8f 92       	push	r8
    636e:	9f 92       	push	r9
    6370:	af 92       	push	r10
    6372:	bf 92       	push	r11
    6374:	cf 92       	push	r12
    6376:	df 92       	push	r13
    6378:	ef 92       	push	r14
    637a:	ff 92       	push	r15
    637c:	0f 93       	push	r16
    637e:	1f 93       	push	r17
    6380:	df 93       	push	r29
    6382:	cf 93       	push	r28
    6384:	00 d0       	rcall	.+0      	; 0x6386 <atmel_flash_compare+0x26>
    6386:	00 d0       	rcall	.+0      	; 0x6388 <atmel_flash_compare+0x28>
    6388:	cd b7       	in	r28, 0x3d	; 61
    638a:	de b7       	in	r29, 0x3e	; 62
    638c:	1c 01       	movw	r2, r24
    638e:	4b 01       	movw	r8, r22
    uint16_t page, offset, num_bytes;
    uint16_t index = 0;
    uint8_t compare = 0;

    if (dirty)
    6390:	80 91 a5 03 	lds	r24, 0x03A5
    6394:	88 23       	and	r24, r24
    6396:	71 f0       	breq	.+28     	; 0x63b4 <atmel_flash_compare+0x54>
    {
        while (atmel_flash_busy())
    6398:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    639c:	88 23       	and	r24, r24
    639e:	e1 f7       	brne	.-8      	; 0x6398 <atmel_flash_compare+0x38>
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
    63a0:	60 91 a3 03 	lds	r22, 0x03A3
    63a4:	70 91 a4 03 	lds	r23, 0x03A4
    63a8:	80 91 a2 03 	lds	r24, 0x03A2
    63ac:	0e 94 2f 30 	call	0x605e	; 0x605e <atmel_flash_flush_buffer>
        dirty = 0;
    63b0:	10 92 a5 03 	sts	0x03A5, r1
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
    63b4:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    63b8:	88 23       	and	r24, r24
    63ba:	e1 f7       	brne	.-8      	; 0x63b4 <atmel_flash_compare+0x54>
        ;
    while (count > 0)
    63bc:	81 14       	cp	r8, r1
    63be:	91 04       	cpc	r9, r1
    63c0:	09 f4       	brne	.+2      	; 0x63c4 <atmel_flash_compare+0x64>
    63c2:	96 c0       	rjmp	.+300    	; 0x64f0 <atmel_flash_compare+0x190>
    63c4:	66 24       	eor	r6, r6
    63c6:	77 24       	eor	r7, r7
    63c8:	e0 90 9e 03 	lds	r14, 0x039E
    63cc:	f0 90 9f 03 	lds	r15, 0x039F
    63d0:	00 91 a0 03 	lds	r16, 0x03A0
    63d4:	10 91 a1 03 	lds	r17, 0x03A1
    63d8:	95 e0       	ldi	r25, 0x05	; 5
    63da:	49 2e       	mov	r4, r25
    63dc:	51 2c       	mov	r5, r1
    63de:	4c 0e       	add	r4, r28
    63e0:	5d 1e       	adc	r5, r29
    {
        page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    63e2:	c8 01       	movw	r24, r16
    63e4:	b7 01       	movw	r22, r14
    63e6:	28 e0       	ldi	r18, 0x08	; 8
    63e8:	31 e0       	ldi	r19, 0x01	; 1
    63ea:	40 e0       	ldi	r20, 0x00	; 0
    63ec:	50 e0       	ldi	r21, 0x00	; 0
    63ee:	0e 94 ab 56 	call	0xad56	; 0xad56 <__udivmodsi4>
    63f2:	69 01       	movw	r12, r18
        offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    63f4:	c8 01       	movw	r24, r16
    63f6:	b7 01       	movw	r22, r14
    63f8:	28 e0       	ldi	r18, 0x08	; 8
    63fa:	31 e0       	ldi	r19, 0x01	; 1
    63fc:	40 e0       	ldi	r20, 0x00	; 0
    63fe:	50 e0       	ldi	r21, 0x00	; 0
    6400:	0e 94 ab 56 	call	0xad56	; 0xad56 <__udivmodsi4>
    6404:	8b 01       	movw	r16, r22
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
    6406:	c4 01       	movw	r24, r8
    6408:	80 0f       	add	r24, r16
    640a:	91 1f       	adc	r25, r17
    640c:	89 50       	subi	r24, 0x09	; 9
    640e:	91 40       	sbci	r25, 0x01	; 1
    6410:	08 f0       	brcs	.+2      	; 0x6414 <atmel_flash_compare+0xb4>
    6412:	59 c0       	rjmp	.+178    	; 0x64c6 <atmel_flash_compare+0x166>
    6414:	54 01       	movw	r10, r8
        else
        {
            num_bytes = count;
        }
        // Are we not comparing a whole page?
        if (num_bytes < ATMEL_FLASH_PAGE_SIZE)
    6416:	88 e0       	ldi	r24, 0x08	; 8
    6418:	a8 16       	cp	r10, r24
    641a:	81 e0       	ldi	r24, 0x01	; 1
    641c:	b8 06       	cpc	r11, r24
    641e:	08 f4       	brcc	.+2      	; 0x6422 <atmel_flash_compare+0xc2>
    6420:	5e c0       	rjmp	.+188    	; 0x64de <atmel_flash_compare+0x17e>
            atmel_flash_fill_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page);
            while (atmel_flash_busy())
                ;
        }
        // Write the data we want to compare to the buffer
        atmel_flash_write_buffer(ATMEL_FLASH_DEFAULT_BUFFER, offset,
    6422:	a1 01       	movw	r20, r2
    6424:	46 0d       	add	r20, r6
    6426:	57 1d       	adc	r21, r7
    6428:	81 e0       	ldi	r24, 0x01	; 1
    642a:	b8 01       	movw	r22, r16
    642c:	95 01       	movw	r18, r10
    642e:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <atmel_flash_write_buffer>
{
    uint8_t i, cmd[4], status;

    if (selected == 1)
    {
        cmd[0] = C_COMPARE_BUFFER1;
    6432:	e0 e6       	ldi	r30, 0x60	; 96
    6434:	e9 83       	std	Y+1, r30	; 0x01
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_COMPARE_BUFFER2;
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    6436:	c6 01       	movw	r24, r12
    6438:	88 0f       	add	r24, r24
    643a:	89 2f       	mov	r24, r25
    643c:	88 1f       	adc	r24, r24
    643e:	99 0b       	sbc	r25, r25
    6440:	91 95       	neg	r25
    6442:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    6444:	8c 2d       	mov	r24, r12
    6446:	88 0f       	add	r24, r24
    6448:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    644a:	1c 82       	std	Y+4, r1	; 0x04
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    644c:	8f b7       	in	r24, 0x3f	; 63
    cli();
    644e:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    6450:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    6452:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    6454:	8f bf       	out	0x3f, r24	; 63
    6456:	8e 01       	movw	r16, r28
    6458:	0f 5f       	subi	r16, 0xFF	; 255
    645a:	1f 4f       	sbci	r17, 0xFF	; 255
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    645c:	f8 01       	movw	r30, r16
    645e:	81 91       	ld	r24, Z+
    6460:	8f 01       	movw	r16, r30
    6462:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    6466:	04 15       	cp	r16, r4
    6468:	15 05       	cpc	r17, r5
    646a:	c1 f7       	brne	.-16     	; 0x645c <atmel_flash_compare+0xfc>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    646c:	db 9a       	sbi	0x1b, 3	; 27
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    646e:	8f b7       	in	r24, 0x3f	; 63
    cli();
    6470:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    6472:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    6474:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    6476:	8f bf       	out	0x3f, r24	; 63
    }
    atmel_flash_high();
    do
    {
        atmel_flash_low();
        atmel_flash_send_byte(C_REQ_STATUS);
    6478:	87 ed       	ldi	r24, 0xD7	; 215
    647a:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <atmel_flash_send_byte>
        //SEND d7h, op code for register request
        status = atmel_flash_get_byte();
    647e:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <atmel_flash_get_byte>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    6482:	db 9a       	sbi	0x1b, 3	; 27
        //SEND d7h, op code for register request
        status = atmel_flash_get_byte();
        atmel_flash_high();
    }

    while (status & 0x80);      // wait until comparison is complete
    6484:	87 fd       	sbrc	r24, 7
    6486:	f3 cf       	rjmp	.-26     	; 0x646e <atmel_flash_compare+0x10e>
        }
        // Write the data we want to compare to the buffer
        atmel_flash_write_buffer(ATMEL_FLASH_DEFAULT_BUFFER, offset,
                                 &buf[index], num_bytes);
        // Compare the buffer to main memory
        if (atmel_flash_compare_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page))
    6488:	86 fd       	sbrc	r24, 6
    648a:	62 c0       	rjmp	.+196    	; 0x6550 <atmel_flash_compare+0x1f0>
        {
            compare = 1;
            break;
        }
        index += num_bytes;
        atmel_flash_addr += num_bytes;
    648c:	c5 01       	movw	r24, r10
    648e:	a0 e0       	ldi	r26, 0x00	; 0
    6490:	b0 e0       	ldi	r27, 0x00	; 0
    6492:	e0 90 9e 03 	lds	r14, 0x039E
    6496:	f0 90 9f 03 	lds	r15, 0x039F
    649a:	00 91 a0 03 	lds	r16, 0x03A0
    649e:	10 91 a1 03 	lds	r17, 0x03A1
    64a2:	e8 0e       	add	r14, r24
    64a4:	f9 1e       	adc	r15, r25
    64a6:	0a 1f       	adc	r16, r26
    64a8:	1b 1f       	adc	r17, r27
    64aa:	e0 92 9e 03 	sts	0x039E, r14
    64ae:	f0 92 9f 03 	sts	0x039F, r15
    64b2:	00 93 a0 03 	sts	0x03A0, r16
    64b6:	10 93 a1 03 	sts	0x03A1, r17
        count -= num_bytes;
    64ba:	8a 18       	sub	r8, r10
    64bc:	9b 08       	sbc	r9, r11
        dirty = 0;
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    while (count > 0)
    64be:	01 f1       	breq	.+64     	; 0x6500 <atmel_flash_compare+0x1a0>
        if (atmel_flash_compare_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page))
        {
            compare = 1;
            break;
        }
        index += num_bytes;
    64c0:	6a 0c       	add	r6, r10
    64c2:	7b 1c       	adc	r7, r11
    64c4:	8e cf       	rjmp	.-228    	; 0x63e2 <atmel_flash_compare+0x82>
    {
        page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
        offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
        {
            num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
    64c6:	88 e0       	ldi	r24, 0x08	; 8
    64c8:	a8 2e       	mov	r10, r24
    64ca:	81 e0       	ldi	r24, 0x01	; 1
    64cc:	b8 2e       	mov	r11, r24
    64ce:	a0 1a       	sub	r10, r16
    64d0:	b1 0a       	sbc	r11, r17
        else
        {
            num_bytes = count;
        }
        // Are we not comparing a whole page?
        if (num_bytes < ATMEL_FLASH_PAGE_SIZE)
    64d2:	88 e0       	ldi	r24, 0x08	; 8
    64d4:	a8 16       	cp	r10, r24
    64d6:	81 e0       	ldi	r24, 0x01	; 1
    64d8:	b8 06       	cpc	r11, r24
    64da:	08 f0       	brcs	.+2      	; 0x64de <atmel_flash_compare+0x17e>
    64dc:	a2 cf       	rjmp	.-188    	; 0x6422 <atmel_flash_compare+0xc2>
        {
            atmel_flash_fill_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page);
    64de:	81 e0       	ldi	r24, 0x01	; 1
    64e0:	b6 01       	movw	r22, r12
    64e2:	0e 94 5f 31 	call	0x62be	; 0x62be <atmel_flash_fill_buffer>
            while (atmel_flash_busy())
    64e6:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    64ea:	88 23       	and	r24, r24
    64ec:	e1 f7       	brne	.-8      	; 0x64e6 <atmel_flash_compare+0x186>
    64ee:	99 cf       	rjmp	.-206    	; 0x6422 <atmel_flash_compare+0xc2>
    64f0:	e0 90 9e 03 	lds	r14, 0x039E
    64f4:	f0 90 9f 03 	lds	r15, 0x039F
    64f8:	00 91 a0 03 	lds	r16, 0x03A0
    64fc:	10 91 a1 03 	lds	r17, 0x03A1
        if (atmel_flash_compare_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page))
        {
            compare = 1;
            break;
        }
        index += num_bytes;
    6500:	20 e0       	ldi	r18, 0x00	; 0
        atmel_flash_addr += num_bytes;
        count -= num_bytes;
    }
    // In case we exited the loop early, act like we read the whole range
    atmel_flash_addr += count;
    6502:	c4 01       	movw	r24, r8
    6504:	a0 e0       	ldi	r26, 0x00	; 0
    6506:	b0 e0       	ldi	r27, 0x00	; 0
    6508:	e8 0e       	add	r14, r24
    650a:	f9 1e       	adc	r15, r25
    650c:	0a 1f       	adc	r16, r26
    650e:	1b 1f       	adc	r17, r27
    6510:	e0 92 9e 03 	sts	0x039E, r14
    6514:	f0 92 9f 03 	sts	0x039F, r15
    6518:	00 93 a0 03 	sts	0x03A0, r16
    651c:	10 93 a1 03 	sts	0x03A1, r17
    return compare;
}
    6520:	82 2f       	mov	r24, r18
    6522:	0f 90       	pop	r0
    6524:	0f 90       	pop	r0
    6526:	0f 90       	pop	r0
    6528:	0f 90       	pop	r0
    652a:	cf 91       	pop	r28
    652c:	df 91       	pop	r29
    652e:	1f 91       	pop	r17
    6530:	0f 91       	pop	r16
    6532:	ff 90       	pop	r15
    6534:	ef 90       	pop	r14
    6536:	df 90       	pop	r13
    6538:	cf 90       	pop	r12
    653a:	bf 90       	pop	r11
    653c:	af 90       	pop	r10
    653e:	9f 90       	pop	r9
    6540:	8f 90       	pop	r8
    6542:	7f 90       	pop	r7
    6544:	6f 90       	pop	r6
    6546:	5f 90       	pop	r5
    6548:	4f 90       	pop	r4
    654a:	3f 90       	pop	r3
    654c:	2f 90       	pop	r2
    654e:	08 95       	ret
        if (atmel_flash_compare_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page))
        {
            compare = 1;
            break;
        }
        index += num_bytes;
    6550:	21 e0       	ldi	r18, 0x01	; 1
    6552:	e0 90 9e 03 	lds	r14, 0x039E
    6556:	f0 90 9f 03 	lds	r15, 0x039F
    655a:	00 91 a0 03 	lds	r16, 0x03A0
    655e:	10 91 a1 03 	lds	r17, 0x03A1
    6562:	cf cf       	rjmp	.-98     	; 0x6502 <atmel_flash_compare+0x1a2>

00006564 <copyFlash>:
    return;
}

//-------------------------------------------------------------------------
void copyFlash(int sourcepage, int targetpage)
{
    6564:	0f 93       	push	r16
    6566:	1f 93       	push	r17
    6568:	cf 93       	push	r28
    656a:	df 93       	push	r29
    656c:	ec 01       	movw	r28, r24
    656e:	8b 01       	movw	r16, r22
    while (atmel_flash_busy())
    6570:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6574:	88 23       	and	r24, r24
    6576:	e1 f7       	brne	.-8      	; 0x6570 <copyFlash+0xc>
        ;
    atmel_flash_fill_buffer(1, sourcepage);
    6578:	81 e0       	ldi	r24, 0x01	; 1
    657a:	be 01       	movw	r22, r28
    657c:	0e 94 5f 31 	call	0x62be	; 0x62be <atmel_flash_fill_buffer>
    while (atmel_flash_busy())
    6580:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6584:	88 23       	and	r24, r24
    6586:	e1 f7       	brne	.-8      	; 0x6580 <copyFlash+0x1c>
        ;
    atmel_flash_flush_buffer(1, targetpage);
    6588:	81 e0       	ldi	r24, 0x01	; 1
    658a:	b8 01       	movw	r22, r16
    658c:	0e 94 2f 30 	call	0x605e	; 0x605e <atmel_flash_flush_buffer>
    while (atmel_flash_busy())
    6590:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6594:	88 23       	and	r24, r24
    6596:	e1 f7       	brne	.-8      	; 0x6590 <copyFlash+0x2c>
        ;
}
    6598:	df 91       	pop	r29
    659a:	cf 91       	pop	r28
    659c:	1f 91       	pop	r17
    659e:	0f 91       	pop	r16
    65a0:	08 95       	ret

000065a2 <dev_write_atmel_flash>:
}

/** @brief Write p into the current flash address, for count bytes
*/
static uint16_t dev_write_atmel_flash(const void *p, uint16_t count)
{
    65a2:	2f 92       	push	r2
    65a4:	3f 92       	push	r3
    65a6:	4f 92       	push	r4
    65a8:	5f 92       	push	r5
    65aa:	6f 92       	push	r6
    65ac:	7f 92       	push	r7
    65ae:	8f 92       	push	r8
    65b0:	9f 92       	push	r9
    65b2:	af 92       	push	r10
    65b4:	bf 92       	push	r11
    65b6:	cf 92       	push	r12
    65b8:	df 92       	push	r13
    65ba:	ef 92       	push	r14
    65bc:	ff 92       	push	r15
    65be:	0f 93       	push	r16
    65c0:	1f 93       	push	r17
    65c2:	df 93       	push	r29
    65c4:	cf 93       	push	r28
    65c6:	00 d0       	rcall	.+0      	; 0x65c8 <dev_write_atmel_flash+0x26>
    65c8:	00 d0       	rcall	.+0      	; 0x65ca <dev_write_atmel_flash+0x28>
    65ca:	cd b7       	in	r28, 0x3d	; 61
    65cc:	de b7       	in	r29, 0x3e	; 62
    65ce:	4b 01       	movw	r8, r22
    uint16_t page, offset, num_bytes;
    uint16_t index = 0;
    uint8_t *buf = (uint8_t *) p;
    65d0:	2c 01       	movw	r4, r24

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    65d2:	a0 90 9e 03 	lds	r10, 0x039E
    65d6:	b0 90 9f 03 	lds	r11, 0x039F
    65da:	c0 90 a0 03 	lds	r12, 0x03A0
    65de:	d0 90 a1 03 	lds	r13, 0x03A1
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    while (atmel_flash_busy())
    65e2:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    65e6:	88 23       	and	r24, r24
    65e8:	e1 f7       	brne	.-8      	; 0x65e2 <dev_write_atmel_flash+0x40>
        ;
    while (count > 0)
    65ea:	81 14       	cp	r8, r1
    65ec:	91 04       	cpc	r9, r1
    65ee:	09 f4       	brne	.+2      	; 0x65f2 <dev_write_atmel_flash+0x50>
    65f0:	ba c0       	rjmp	.+372    	; 0x6766 <dev_write_atmel_flash+0x1c4>
{
    uint16_t page, offset, num_bytes;
    uint16_t index = 0;
    uint8_t *buf = (uint8_t *) p;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    65f2:	c6 01       	movw	r24, r12
    65f4:	b5 01       	movw	r22, r10
    65f6:	28 e0       	ldi	r18, 0x08	; 8
    65f8:	31 e0       	ldi	r19, 0x01	; 1
    65fa:	40 e0       	ldi	r20, 0x00	; 0
    65fc:	50 e0       	ldi	r21, 0x00	; 0
    65fe:	0e 94 ab 56 	call	0xad56	; 0xad56 <__udivmodsi4>
    6602:	79 01       	movw	r14, r18
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    6604:	c6 01       	movw	r24, r12
    6606:	b5 01       	movw	r22, r10
    6608:	28 e0       	ldi	r18, 0x08	; 8
    660a:	31 e0       	ldi	r19, 0x01	; 1
    660c:	40 e0       	ldi	r20, 0x00	; 0
    660e:	50 e0       	ldi	r21, 0x00	; 0
    6610:	0e 94 ab 56 	call	0xad56	; 0xad56 <__udivmodsi4>
    6614:	5b 01       	movw	r10, r22
    6616:	66 24       	eor	r6, r6
    6618:	77 24       	eor	r7, r7
    661a:	45 e0       	ldi	r20, 0x05	; 5
    661c:	24 2e       	mov	r2, r20
    661e:	31 2c       	mov	r3, r1
    6620:	2c 0e       	add	r2, r28
    6622:	3d 1e       	adc	r3, r29
    while (atmel_flash_busy())
        ;
    while (count > 0)
    {
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
    6624:	c5 01       	movw	r24, r10
    6626:	88 0d       	add	r24, r8
    6628:	99 1d       	adc	r25, r9
    662a:	89 50       	subi	r24, 0x09	; 9
    662c:	91 40       	sbci	r25, 0x01	; 1
    662e:	08 f0       	brcs	.+2      	; 0x6632 <dev_write_atmel_flash+0x90>
    6630:	7e c0       	rjmp	.+252    	; 0x672e <dev_write_atmel_flash+0x18c>
    6632:	64 01       	movw	r12, r8
        }
        else
        {
            num_bytes = count;
        }
        if (page != cur_page)
    6634:	80 91 a3 03 	lds	r24, 0x03A3
    6638:	90 91 a4 03 	lds	r25, 0x03A4
    663c:	e8 16       	cp	r14, r24
    663e:	f9 06       	cpc	r15, r25
    6640:	09 f4       	brne	.+2      	; 0x6644 <dev_write_atmel_flash+0xa2>
    6642:	41 c0       	rjmp	.+130    	; 0x66c6 <dev_write_atmel_flash+0x124>
        {
            if (dirty)
    6644:	80 91 a5 03 	lds	r24, 0x03A5
    6648:	88 23       	and	r24, r24
    664a:	09 f0       	breq	.+2      	; 0x664e <dev_write_atmel_flash+0xac>
    664c:	77 c0       	rjmp	.+238    	; 0x673c <dev_write_atmel_flash+0x19a>
                while (atmel_flash_busy())
                    ;
                atmel_flash_flush_buffer(cur_buff, cur_page);
                dirty = 0;
            }
            cur_buff =
    664e:	80 91 a2 03 	lds	r24, 0x03A2
    6652:	81 30       	cpi	r24, 0x01	; 1
    6654:	09 f4       	brne	.+2      	; 0x6658 <dev_write_atmel_flash+0xb6>
    6656:	85 c0       	rjmp	.+266    	; 0x6762 <dev_write_atmel_flash+0x1c0>
    6658:	81 e0       	ldi	r24, 0x01	; 1
    665a:	80 93 a2 03 	sts	0x03A2, r24
                (cur_buff ==
                 ATMEL_FLASH_BUFFER_1 ? ATMEL_FLASH_BUFFER_2 :
                 ATMEL_FLASH_BUFFER_1);
            cur_page = page;
    665e:	f0 92 a4 03 	sts	0x03A4, r15
    6662:	e0 92 a3 03 	sts	0x03A3, r14
            if (num_bytes < ATMEL_FLASH_PAGE_SIZE)
    6666:	88 e0       	ldi	r24, 0x08	; 8
    6668:	c8 16       	cp	r12, r24
    666a:	81 e0       	ldi	r24, 0x01	; 1
    666c:	d8 06       	cpc	r13, r24
    666e:	48 f4       	brcc	.+18     	; 0x6682 <dev_write_atmel_flash+0xe0>
            {
                while (atmel_flash_busy())
    6670:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6674:	88 23       	and	r24, r24
    6676:	e1 f7       	brne	.-8      	; 0x6670 <dev_write_atmel_flash+0xce>
                    ;
                atmel_flash_fill_buffer(cur_buff, page);
    6678:	80 91 a2 03 	lds	r24, 0x03A2
    667c:	b7 01       	movw	r22, r14
    667e:	0e 94 5f 31 	call	0x62be	; 0x62be <atmel_flash_fill_buffer>
            }
            // Erase next page right now
            while (atmel_flash_busy())
    6682:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6686:	88 23       	and	r24, r24
    6688:	e1 f7       	brne	.-8      	; 0x6682 <dev_write_atmel_flash+0xe0>
*/
static uint8_t atmel_flash_erase_page(uint16_t page)
{
    uint8_t i, cmd[4];

    cmd[0] = C_ERASE_PAGE;      // 8 bit of op code
    668a:	e1 e8       	ldi	r30, 0x81	; 129
    668c:	e9 83       	std	Y+1, r30	; 0x01
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    668e:	c7 01       	movw	r24, r14
    6690:	88 0f       	add	r24, r24
    6692:	89 2f       	mov	r24, r25
    6694:	88 1f       	adc	r24, r24
    6696:	99 0b       	sbc	r25, r25
    6698:	91 95       	neg	r25
    669a:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    669c:	8e 2d       	mov	r24, r14
    669e:	88 0f       	add	r24, r24
    66a0:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = 0x00;              // 8 bit don't care code
    66a2:	1c 82       	std	Y+4, r1	; 0x04
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    66a4:	8f b7       	in	r24, 0x3f	; 63
    cli();
    66a6:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    66a8:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    66aa:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    66ac:	8f bf       	out	0x3f, r24	; 63
    66ae:	8e 01       	movw	r16, r28
    66b0:	0f 5f       	subi	r16, 0xFF	; 255
    66b2:	1f 4f       	sbci	r17, 0xFF	; 255
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    66b4:	f8 01       	movw	r30, r16
    66b6:	81 91       	ld	r24, Z+
    66b8:	8f 01       	movw	r16, r30
    66ba:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <atmel_flash_send_byte>
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    66be:	02 15       	cp	r16, r2
    66c0:	13 05       	cpc	r17, r3
    66c2:	c1 f7       	brne	.-16     	; 0x66b4 <dev_write_atmel_flash+0x112>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    66c4:	db 9a       	sbi	0x1b, 3	; 27
            // Erase next page right now
            while (atmel_flash_busy())
                ;
            atmel_flash_erase_page(page);
        }
        atmel_flash_write_buffer(cur_buff, offset, &buf[index], num_bytes);
    66c6:	a2 01       	movw	r20, r4
    66c8:	46 0d       	add	r20, r6
    66ca:	57 1d       	adc	r21, r7
    66cc:	80 91 a2 03 	lds	r24, 0x03A2
    66d0:	b5 01       	movw	r22, r10
    66d2:	96 01       	movw	r18, r12
    66d4:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <atmel_flash_write_buffer>
        dirty = 1;
    66d8:	f1 e0       	ldi	r31, 0x01	; 1
    66da:	f0 93 a5 03 	sts	0x03A5, r31
        index += num_bytes;
        atmel_flash_addr += num_bytes;
    66de:	96 01       	movw	r18, r12
    66e0:	40 e0       	ldi	r20, 0x00	; 0
    66e2:	50 e0       	ldi	r21, 0x00	; 0
    66e4:	80 91 9e 03 	lds	r24, 0x039E
    66e8:	90 91 9f 03 	lds	r25, 0x039F
    66ec:	a0 91 a0 03 	lds	r26, 0x03A0
    66f0:	b0 91 a1 03 	lds	r27, 0x03A1
    66f4:	82 0f       	add	r24, r18
    66f6:	93 1f       	adc	r25, r19
    66f8:	a4 1f       	adc	r26, r20
    66fa:	b5 1f       	adc	r27, r21
    66fc:	80 93 9e 03 	sts	0x039E, r24
    6700:	90 93 9f 03 	sts	0x039F, r25
    6704:	a0 93 a0 03 	sts	0x03A0, r26
    6708:	b0 93 a1 03 	sts	0x03A1, r27
        count -= num_bytes;
    670c:	8c 18       	sub	r8, r12
    670e:	9d 08       	sbc	r9, r13

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    while (atmel_flash_busy())
        ;
    while (count > 0)
    6710:	51 f1       	breq	.+84     	; 0x6766 <dev_write_atmel_flash+0x1c4>
                ;
            atmel_flash_erase_page(page);
        }
        atmel_flash_write_buffer(cur_buff, offset, &buf[index], num_bytes);
        dirty = 1;
        index += num_bytes;
    6712:	6c 0c       	add	r6, r12
    6714:	7d 1c       	adc	r7, r13
        atmel_flash_addr += num_bytes;
        count -= num_bytes;
        page++;
    6716:	08 94       	sec
    6718:	e1 1c       	adc	r14, r1
    671a:	f1 1c       	adc	r15, r1
    671c:	aa 24       	eor	r10, r10
    671e:	bb 24       	eor	r11, r11
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    while (atmel_flash_busy())
        ;
    while (count > 0)
    {
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
    6720:	c5 01       	movw	r24, r10
    6722:	88 0d       	add	r24, r8
    6724:	99 1d       	adc	r25, r9
    6726:	89 50       	subi	r24, 0x09	; 9
    6728:	91 40       	sbci	r25, 0x01	; 1
    672a:	08 f4       	brcc	.+2      	; 0x672e <dev_write_atmel_flash+0x18c>
    672c:	82 cf       	rjmp	.-252    	; 0x6632 <dev_write_atmel_flash+0x90>
        {
            num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
    672e:	38 e0       	ldi	r19, 0x08	; 8
    6730:	c3 2e       	mov	r12, r19
    6732:	31 e0       	ldi	r19, 0x01	; 1
    6734:	d3 2e       	mov	r13, r19
    6736:	ca 18       	sub	r12, r10
    6738:	db 08       	sbc	r13, r11
    673a:	7c cf       	rjmp	.-264    	; 0x6634 <dev_write_atmel_flash+0x92>
        }
        if (page != cur_page)
        {
            if (dirty)
            {
                while (atmel_flash_busy())
    673c:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6740:	88 23       	and	r24, r24
    6742:	e1 f7       	brne	.-8      	; 0x673c <dev_write_atmel_flash+0x19a>
                    ;
                atmel_flash_flush_buffer(cur_buff, cur_page);
    6744:	60 91 a3 03 	lds	r22, 0x03A3
    6748:	70 91 a4 03 	lds	r23, 0x03A4
    674c:	80 91 a2 03 	lds	r24, 0x03A2
    6750:	0e 94 2f 30 	call	0x605e	; 0x605e <atmel_flash_flush_buffer>
                dirty = 0;
    6754:	10 92 a5 03 	sts	0x03A5, r1
            }
            cur_buff =
    6758:	80 91 a2 03 	lds	r24, 0x03A2
    675c:	81 30       	cpi	r24, 0x01	; 1
    675e:	09 f0       	breq	.+2      	; 0x6762 <dev_write_atmel_flash+0x1c0>
    6760:	7b cf       	rjmp	.-266    	; 0x6658 <dev_write_atmel_flash+0xb6>
    6762:	82 e0       	ldi	r24, 0x02	; 2
    6764:	7a cf       	rjmp	.-268    	; 0x665a <dev_write_atmel_flash+0xb8>
        count -= num_bytes;
        page++;
        offset = 0;
    }
    return count;
}
    6766:	80 e0       	ldi	r24, 0x00	; 0
    6768:	90 e0       	ldi	r25, 0x00	; 0
    676a:	0f 90       	pop	r0
    676c:	0f 90       	pop	r0
    676e:	0f 90       	pop	r0
    6770:	0f 90       	pop	r0
    6772:	cf 91       	pop	r28
    6774:	df 91       	pop	r29
    6776:	1f 91       	pop	r17
    6778:	0f 91       	pop	r16
    677a:	ff 90       	pop	r15
    677c:	ef 90       	pop	r14
    677e:	df 90       	pop	r13
    6780:	cf 90       	pop	r12
    6782:	bf 90       	pop	r11
    6784:	af 90       	pop	r10
    6786:	9f 90       	pop	r9
    6788:	8f 90       	pop	r8
    678a:	7f 90       	pop	r7
    678c:	6f 90       	pop	r6
    678e:	5f 90       	pop	r5
    6790:	4f 90       	pop	r4
    6792:	3f 90       	pop	r3
    6794:	2f 90       	pop	r2
    6796:	08 95       	ret

00006798 <writeFlash>:
    return;
}

//-------------------------------------------------------------------------
void writeFlash(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
    6798:	af 92       	push	r10
    679a:	bf 92       	push	r11
    679c:	df 92       	push	r13
    679e:	ef 92       	push	r14
    67a0:	ff 92       	push	r15
    67a2:	0f 93       	push	r16
    67a4:	1f 93       	push	r17
    67a6:	cf 93       	push	r28
    67a8:	df 93       	push	r29
    67aa:	7c 01       	movw	r14, r24
    67ac:	d6 2e       	mov	r13, r22
    67ae:	5a 01       	movw	r10, r20
    67b0:	89 01       	movw	r16, r18
    uint16_t count;

    if (initdone == 0)
    67b2:	80 91 a6 03 	lds	r24, 0x03A6
    67b6:	88 23       	and	r24, r24
    67b8:	09 f4       	brne	.+2      	; 0x67bc <writeFlash+0x24>
    67ba:	69 c0       	rjmp	.+210    	; 0x688e <writeFlash+0xf6>
    {
        atmel_flash_init();
    }
    atmel_flash_addr = pagenum * 264 + offset;
    67bc:	6d 2d       	mov	r22, r13
    67be:	70 e0       	ldi	r23, 0x00	; 0
    67c0:	88 e0       	ldi	r24, 0x08	; 8
    67c2:	91 e0       	ldi	r25, 0x01	; 1
    67c4:	9c 01       	movw	r18, r24
    67c6:	e2 9e       	mul	r14, r18
    67c8:	c0 01       	movw	r24, r0
    67ca:	e3 9e       	mul	r14, r19
    67cc:	90 0d       	add	r25, r0
    67ce:	f2 9e       	mul	r15, r18
    67d0:	90 0d       	add	r25, r0
    67d2:	11 24       	eor	r1, r1
    67d4:	86 0f       	add	r24, r22
    67d6:	97 1f       	adc	r25, r23
    67d8:	aa 27       	eor	r26, r26
    67da:	97 fd       	sbrc	r25, 7
    67dc:	a0 95       	com	r26
    67de:	ba 2f       	mov	r27, r26
    67e0:	80 93 9e 03 	sts	0x039E, r24
    67e4:	90 93 9f 03 	sts	0x039F, r25
    67e8:	a0 93 a0 03 	sts	0x03A0, r26
    67ec:	b0 93 a1 03 	sts	0x03A1, r27
    if (offset + NumOfBytes > 256)
    67f0:	c8 01       	movw	r24, r16
    67f2:	86 0f       	add	r24, r22
    67f4:	97 1f       	adc	r25, r23
    67f6:	81 50       	subi	r24, 0x01	; 1
    67f8:	91 40       	sbci	r25, 0x01	; 1
    67fa:	0c f4       	brge	.+2      	; 0x67fe <writeFlash+0x66>
    67fc:	46 c0       	rjmp	.+140    	; 0x688a <writeFlash+0xf2>
    {
        count = 256 - offset;
    67fe:	c0 e0       	ldi	r28, 0x00	; 0
    6800:	d1 e0       	ldi	r29, 0x01	; 1
    6802:	c6 1b       	sub	r28, r22
    6804:	d7 0b       	sbc	r29, r23
    }
    else
    {
        count = NumOfBytes;
    }
    while (atmel_flash_busy())
    6806:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    680a:	88 23       	and	r24, r24
    680c:	e1 f7       	brne	.-8      	; 0x6806 <writeFlash+0x6e>
        ;
    dev_write_atmel_flash(buffer, count);
    680e:	c5 01       	movw	r24, r10
    6810:	be 01       	movw	r22, r28
    6812:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <dev_write_atmel_flash>
    while (atmel_flash_busy())
    6816:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    681a:	88 23       	and	r24, r24
    681c:	e1 f7       	brne	.-8      	; 0x6816 <writeFlash+0x7e>
        ;
    buffer = (void *)((char *)buffer + count);
    if (count < NumOfBytes)
    681e:	c0 17       	cp	r28, r16
    6820:	d1 07       	cpc	r29, r17
    6822:	48 f5       	brcc	.+82     	; 0x6876 <writeFlash+0xde>
    {
        atmel_flash_addr = (pagenum + 1) * 264;
    6824:	08 94       	sec
    6826:	e1 1c       	adc	r14, r1
    6828:	f1 1c       	adc	r15, r1
    682a:	88 e0       	ldi	r24, 0x08	; 8
    682c:	91 e0       	ldi	r25, 0x01	; 1
    682e:	9c 01       	movw	r18, r24
    6830:	e2 9e       	mul	r14, r18
    6832:	c0 01       	movw	r24, r0
    6834:	e3 9e       	mul	r14, r19
    6836:	90 0d       	add	r25, r0
    6838:	f2 9e       	mul	r15, r18
    683a:	90 0d       	add	r25, r0
    683c:	11 24       	eor	r1, r1
    683e:	aa 27       	eor	r26, r26
    6840:	97 fd       	sbrc	r25, 7
    6842:	a0 95       	com	r26
    6844:	ba 2f       	mov	r27, r26
    6846:	80 93 9e 03 	sts	0x039E, r24
    684a:	90 93 9f 03 	sts	0x039F, r25
    684e:	a0 93 a0 03 	sts	0x03A0, r26
    6852:	b0 93 a1 03 	sts	0x03A1, r27
        count = NumOfBytes - count;
        while (atmel_flash_busy())
    6856:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    685a:	88 23       	and	r24, r24
    685c:	e1 f7       	brne	.-8      	; 0x6856 <writeFlash+0xbe>
            ;
        dev_write_atmel_flash(buffer, count);
    685e:	0c 1b       	sub	r16, r28
    6860:	1d 0b       	sbc	r17, r29
    6862:	c5 01       	movw	r24, r10
    6864:	8c 0f       	add	r24, r28
    6866:	9d 1f       	adc	r25, r29
    6868:	b8 01       	movw	r22, r16
    686a:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <dev_write_atmel_flash>
        while (atmel_flash_busy())
    686e:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6872:	88 23       	and	r24, r24
    6874:	e1 f7       	brne	.-8      	; 0x686e <writeFlash+0xd6>
            ;
    }
    return;
}
    6876:	df 91       	pop	r29
    6878:	cf 91       	pop	r28
    687a:	1f 91       	pop	r17
    687c:	0f 91       	pop	r16
    687e:	ff 90       	pop	r15
    6880:	ef 90       	pop	r14
    6882:	df 90       	pop	r13
    6884:	bf 90       	pop	r11
    6886:	af 90       	pop	r10
    6888:	08 95       	ret
    {
        count = 256 - offset;
    }
    else
    {
        count = NumOfBytes;
    688a:	e8 01       	movw	r28, r16
    688c:	bc cf       	rjmp	.-136    	; 0x6806 <writeFlash+0x6e>
{
    uint16_t count;

    if (initdone == 0)
    {
        atmel_flash_init();
    688e:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <atmel_flash_init>
    6892:	94 cf       	rjmp	.-216    	; 0x67bc <writeFlash+0x24>

00006894 <dev_read_atmel_flash>:
}

/** @brief Read from the current flash address into p, for count bytes
*/
static uint16_t dev_read_atmel_flash(void *p, uint16_t count)
{
    6894:	8f 92       	push	r8
    6896:	9f 92       	push	r9
    6898:	af 92       	push	r10
    689a:	bf 92       	push	r11
    689c:	cf 92       	push	r12
    689e:	df 92       	push	r13
    68a0:	ef 92       	push	r14
    68a2:	ff 92       	push	r15
    68a4:	0f 93       	push	r16
    68a6:	1f 93       	push	r17
    68a8:	df 93       	push	r29
    68aa:	cf 93       	push	r28
    68ac:	cd b7       	in	r28, 0x3d	; 61
    68ae:	de b7       	in	r29, 0x3e	; 62
    68b0:	28 97       	sbiw	r28, 0x08	; 8
    68b2:	0f b6       	in	r0, 0x3f	; 63
    68b4:	f8 94       	cli
    68b6:	de bf       	out	0x3e, r29	; 62
    68b8:	0f be       	out	0x3f, r0	; 63
    68ba:	cd bf       	out	0x3d, r28	; 61
    68bc:	4c 01       	movw	r8, r24
    68be:	6b 01       	movw	r12, r22
    uint16_t page, offset;
    uint8_t *buf = (uint8_t *) p;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    68c0:	e0 90 9e 03 	lds	r14, 0x039E
    68c4:	f0 90 9f 03 	lds	r15, 0x039F
    68c8:	00 91 a0 03 	lds	r16, 0x03A0
    68cc:	10 91 a1 03 	lds	r17, 0x03A1
    68d0:	c8 01       	movw	r24, r16
    68d2:	b7 01       	movw	r22, r14
    68d4:	28 e0       	ldi	r18, 0x08	; 8
    68d6:	31 e0       	ldi	r19, 0x01	; 1
    68d8:	40 e0       	ldi	r20, 0x00	; 0
    68da:	50 e0       	ldi	r21, 0x00	; 0
    68dc:	0e 94 ab 56 	call	0xad56	; 0xad56 <__udivmodsi4>
    68e0:	59 01       	movw	r10, r18
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    68e2:	c8 01       	movw	r24, r16
    68e4:	b7 01       	movw	r22, r14
    68e6:	28 e0       	ldi	r18, 0x08	; 8
    68e8:	31 e0       	ldi	r19, 0x01	; 1
    68ea:	40 e0       	ldi	r20, 0x00	; 0
    68ec:	50 e0       	ldi	r21, 0x00	; 0
    68ee:	0e 94 ab 56 	call	0xad56	; 0xad56 <__udivmodsi4>
    68f2:	8b 01       	movw	r16, r22
    if (dirty && page <= cur_page && page + (offset + count) /
    68f4:	80 91 a5 03 	lds	r24, 0x03A5
    68f8:	88 23       	and	r24, r24
    68fa:	09 f1       	breq	.+66     	; 0x693e <dev_read_atmel_flash+0xaa>
    68fc:	20 91 a3 03 	lds	r18, 0x03A3
    6900:	30 91 a4 03 	lds	r19, 0x03A4
    6904:	2a 15       	cp	r18, r10
    6906:	3b 05       	cpc	r19, r11
    6908:	d0 f0       	brcs	.+52     	; 0x693e <dev_read_atmel_flash+0xaa>
    690a:	c6 01       	movw	r24, r12
    690c:	80 0f       	add	r24, r16
    690e:	91 1f       	adc	r25, r17
    6910:	68 e0       	ldi	r22, 0x08	; 8
    6912:	71 e0       	ldi	r23, 0x01	; 1
    6914:	0e 94 84 56 	call	0xad08	; 0xad08 <__udivmodhi4>
    6918:	6a 0d       	add	r22, r10
    691a:	7b 1d       	adc	r23, r11
    691c:	62 17       	cp	r22, r18
    691e:	73 07       	cpc	r23, r19
    6920:	70 f0       	brcs	.+28     	; 0x693e <dev_read_atmel_flash+0xaa>
        ATMEL_FLASH_PAGE_SIZE >= cur_page)
    {
        while (atmel_flash_busy())
    6922:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6926:	88 23       	and	r24, r24
    6928:	e1 f7       	brne	.-8      	; 0x6922 <dev_read_atmel_flash+0x8e>
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
    692a:	60 91 a3 03 	lds	r22, 0x03A3
    692e:	70 91 a4 03 	lds	r23, 0x03A4
    6932:	80 91 a2 03 	lds	r24, 0x03A2
    6936:	0e 94 2f 30 	call	0x605e	; 0x605e <atmel_flash_flush_buffer>
        dirty = 0;
    693a:	10 92 a5 03 	sts	0x03A5, r1
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
    693e:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6942:	88 23       	and	r24, r24
    6944:	e1 f7       	brne	.-8      	; 0x693e <dev_read_atmel_flash+0xaa>
                                    void *reqData, uint16_t len)
{
    uint8_t cmd[8], *reqPtr;
    uint16_t i;

    cmd[0] = C_READ_THROUGH_MEMORY;     // 8 bit of op code
    6946:	88 ee       	ldi	r24, 0xE8	; 232
    6948:	89 83       	std	Y+1, r24	; 0x01
    cmd[1] = (page >> 7);       // 4 bit reserve and high 4 MSB
    694a:	c5 01       	movw	r24, r10
    694c:	88 0f       	add	r24, r24
    694e:	89 2f       	mov	r24, r25
    6950:	88 1f       	adc	r24, r24
    6952:	99 0b       	sbc	r25, r25
    6954:	91 95       	neg	r25
    6956:	8a 83       	std	Y+2, r24	; 0x02
    cmd[2] = (page << 1) | offset >> 8; // 7 bit page and 1 bit offset MSB
    6958:	8a 2d       	mov	r24, r10
    695a:	88 0f       	add	r24, r24
    695c:	81 2b       	or	r24, r17
    695e:	8b 83       	std	Y+3, r24	; 0x03
    cmd[3] = offset;            // low-order 8 address bits
    6960:	0c 83       	std	Y+4, r16	; 0x04
    cmd[4] = 0x00;
    6962:	1d 82       	std	Y+5, r1	; 0x05
    cmd[5] = 0x00;
    6964:	1e 82       	std	Y+6, r1	; 0x06
    cmd[6] = 0x00;
    6966:	1f 82       	std	Y+7, r1	; 0x07
    cmd[7] = 0x00;
    6968:	18 86       	std	Y+8, r1	; 0x08
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    696a:	8f b7       	in	r24, 0x3f	; 63
    cli();
    696c:	f8 94       	cli
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    696e:	95 98       	cbi	0x12, 5	; 18
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    6970:	db 98       	cbi	0x1b, 3	; 27
    SREG = sreg;
    6972:	8f bf       	out	0x3f, r24	; 63
    6974:	8e 01       	movw	r16, r28
    6976:	0f 5f       	subi	r16, 0xFF	; 255
    6978:	1f 4f       	sbci	r17, 0xFF	; 255
    697a:	59 e0       	ldi	r21, 0x09	; 9
    697c:	e5 2e       	mov	r14, r21
    697e:	f1 2c       	mov	r15, r1
    6980:	ec 0e       	add	r14, r28
    6982:	fd 1e       	adc	r15, r29
    cmd[7] = 0x00;
    reqPtr = (uint8_t *) reqData;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    6984:	f8 01       	movw	r30, r16
    6986:	81 91       	ld	r24, Z+
    6988:	8f 01       	movw	r16, r30
    698a:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <atmel_flash_send_byte>
    cmd[5] = 0x00;
    cmd[6] = 0x00;
    cmd[7] = 0x00;
    reqPtr = (uint8_t *) reqData;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    698e:	0e 15       	cp	r16, r14
    6990:	1f 05       	cpc	r17, r15
    6992:	c1 f7       	brne	.-16     	; 0x6984 <dev_read_atmel_flash+0xf0>
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    6994:	c1 14       	cp	r12, r1
    6996:	d1 04       	cpc	r13, r1
    6998:	69 f0       	breq	.+26     	; 0x69b4 <dev_read_atmel_flash+0x120>
    699a:	00 e0       	ldi	r16, 0x00	; 0
    699c:	10 e0       	ldi	r17, 0x00	; 0
    {
        reqPtr[i] = atmel_flash_get_byte();
    699e:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <atmel_flash_get_byte>
    69a2:	f4 01       	movw	r30, r8
    69a4:	e0 0f       	add	r30, r16
    69a6:	f1 1f       	adc	r31, r17
    69a8:	80 83       	st	Z, r24
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    69aa:	0f 5f       	subi	r16, 0xFF	; 255
    69ac:	1f 4f       	sbci	r17, 0xFF	; 255
    69ae:	0c 15       	cp	r16, r12
    69b0:	1d 05       	cpc	r17, r13
    69b2:	a8 f3       	brcs	.-22     	; 0x699e <dev_read_atmel_flash+0x10a>
/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    69b4:	db 9a       	sbi	0x1b, 3	; 27
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    atmel_flash_read_memory(page, offset, buf, count);
    return count;
}
    69b6:	c6 01       	movw	r24, r12
    69b8:	28 96       	adiw	r28, 0x08	; 8
    69ba:	0f b6       	in	r0, 0x3f	; 63
    69bc:	f8 94       	cli
    69be:	de bf       	out	0x3e, r29	; 62
    69c0:	0f be       	out	0x3f, r0	; 63
    69c2:	cd bf       	out	0x3d, r28	; 61
    69c4:	cf 91       	pop	r28
    69c6:	df 91       	pop	r29
    69c8:	1f 91       	pop	r17
    69ca:	0f 91       	pop	r16
    69cc:	ff 90       	pop	r15
    69ce:	ef 90       	pop	r14
    69d0:	df 90       	pop	r13
    69d2:	cf 90       	pop	r12
    69d4:	bf 90       	pop	r11
    69d6:	af 90       	pop	r10
    69d8:	9f 90       	pop	r9
    69da:	8f 90       	pop	r8
    69dc:	08 95       	ret

000069de <readFlash>:
    _delay_ms(20);
}

//-------------------------------------------------------------------------
void readFlash(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
    69de:	af 92       	push	r10
    69e0:	bf 92       	push	r11
    69e2:	df 92       	push	r13
    69e4:	ef 92       	push	r14
    69e6:	ff 92       	push	r15
    69e8:	0f 93       	push	r16
    69ea:	1f 93       	push	r17
    69ec:	cf 93       	push	r28
    69ee:	df 93       	push	r29
    69f0:	7c 01       	movw	r14, r24
    69f2:	d6 2e       	mov	r13, r22
    69f4:	5a 01       	movw	r10, r20
    69f6:	89 01       	movw	r16, r18
    uint16_t count;

    if (initdone == 0)
    69f8:	80 91 a6 03 	lds	r24, 0x03A6
    69fc:	88 23       	and	r24, r24
    69fe:	09 f4       	brne	.+2      	; 0x6a02 <readFlash+0x24>
    6a00:	69 c0       	rjmp	.+210    	; 0x6ad4 <readFlash+0xf6>
    {
        atmel_flash_init();
    }
    atmel_flash_addr = pagenum * 264 + offset;
    6a02:	6d 2d       	mov	r22, r13
    6a04:	70 e0       	ldi	r23, 0x00	; 0
    6a06:	88 e0       	ldi	r24, 0x08	; 8
    6a08:	91 e0       	ldi	r25, 0x01	; 1
    6a0a:	9c 01       	movw	r18, r24
    6a0c:	e2 9e       	mul	r14, r18
    6a0e:	c0 01       	movw	r24, r0
    6a10:	e3 9e       	mul	r14, r19
    6a12:	90 0d       	add	r25, r0
    6a14:	f2 9e       	mul	r15, r18
    6a16:	90 0d       	add	r25, r0
    6a18:	11 24       	eor	r1, r1
    6a1a:	86 0f       	add	r24, r22
    6a1c:	97 1f       	adc	r25, r23
    6a1e:	aa 27       	eor	r26, r26
    6a20:	97 fd       	sbrc	r25, 7
    6a22:	a0 95       	com	r26
    6a24:	ba 2f       	mov	r27, r26
    6a26:	80 93 9e 03 	sts	0x039E, r24
    6a2a:	90 93 9f 03 	sts	0x039F, r25
    6a2e:	a0 93 a0 03 	sts	0x03A0, r26
    6a32:	b0 93 a1 03 	sts	0x03A1, r27
    if (offset + NumOfBytes > 256)
    6a36:	c8 01       	movw	r24, r16
    6a38:	86 0f       	add	r24, r22
    6a3a:	97 1f       	adc	r25, r23
    6a3c:	81 50       	subi	r24, 0x01	; 1
    6a3e:	91 40       	sbci	r25, 0x01	; 1
    6a40:	0c f4       	brge	.+2      	; 0x6a44 <readFlash+0x66>
    6a42:	46 c0       	rjmp	.+140    	; 0x6ad0 <readFlash+0xf2>
    {
        count = 256 - offset;
    6a44:	c0 e0       	ldi	r28, 0x00	; 0
    6a46:	d1 e0       	ldi	r29, 0x01	; 1
    6a48:	c6 1b       	sub	r28, r22
    6a4a:	d7 0b       	sbc	r29, r23
    }
    else
    {
        count = NumOfBytes;
    }
    while (atmel_flash_busy())
    6a4c:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6a50:	88 23       	and	r24, r24
    6a52:	e1 f7       	brne	.-8      	; 0x6a4c <readFlash+0x6e>
        ;
    dev_read_atmel_flash(buffer, count);
    6a54:	c5 01       	movw	r24, r10
    6a56:	be 01       	movw	r22, r28
    6a58:	0e 94 4a 34 	call	0x6894	; 0x6894 <dev_read_atmel_flash>
    while (atmel_flash_busy())
    6a5c:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6a60:	88 23       	and	r24, r24
    6a62:	e1 f7       	brne	.-8      	; 0x6a5c <readFlash+0x7e>
        ;
    buffer = (void *)((char *)buffer + count);
    if (count < NumOfBytes)
    6a64:	c0 17       	cp	r28, r16
    6a66:	d1 07       	cpc	r29, r17
    6a68:	48 f5       	brcc	.+82     	; 0x6abc <readFlash+0xde>
    {
        atmel_flash_addr = (pagenum + 1) * 264;
    6a6a:	08 94       	sec
    6a6c:	e1 1c       	adc	r14, r1
    6a6e:	f1 1c       	adc	r15, r1
    6a70:	88 e0       	ldi	r24, 0x08	; 8
    6a72:	91 e0       	ldi	r25, 0x01	; 1
    6a74:	9c 01       	movw	r18, r24
    6a76:	e2 9e       	mul	r14, r18
    6a78:	c0 01       	movw	r24, r0
    6a7a:	e3 9e       	mul	r14, r19
    6a7c:	90 0d       	add	r25, r0
    6a7e:	f2 9e       	mul	r15, r18
    6a80:	90 0d       	add	r25, r0
    6a82:	11 24       	eor	r1, r1
    6a84:	aa 27       	eor	r26, r26
    6a86:	97 fd       	sbrc	r25, 7
    6a88:	a0 95       	com	r26
    6a8a:	ba 2f       	mov	r27, r26
    6a8c:	80 93 9e 03 	sts	0x039E, r24
    6a90:	90 93 9f 03 	sts	0x039F, r25
    6a94:	a0 93 a0 03 	sts	0x03A0, r26
    6a98:	b0 93 a1 03 	sts	0x03A1, r27
        count = NumOfBytes - count;
        while (atmel_flash_busy())
    6a9c:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6aa0:	88 23       	and	r24, r24
    6aa2:	e1 f7       	brne	.-8      	; 0x6a9c <readFlash+0xbe>
            ;
        dev_read_atmel_flash(buffer, count);
    6aa4:	0c 1b       	sub	r16, r28
    6aa6:	1d 0b       	sbc	r17, r29
    6aa8:	c5 01       	movw	r24, r10
    6aaa:	8c 0f       	add	r24, r28
    6aac:	9d 1f       	adc	r25, r29
    6aae:	b8 01       	movw	r22, r16
    6ab0:	0e 94 4a 34 	call	0x6894	; 0x6894 <dev_read_atmel_flash>
        while (atmel_flash_busy())
    6ab4:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <atmel_flash_busy>
    6ab8:	88 23       	and	r24, r24
    6aba:	e1 f7       	brne	.-8      	; 0x6ab4 <readFlash+0xd6>
            ;
    }
    return;
}
    6abc:	df 91       	pop	r29
    6abe:	cf 91       	pop	r28
    6ac0:	1f 91       	pop	r17
    6ac2:	0f 91       	pop	r16
    6ac4:	ff 90       	pop	r15
    6ac6:	ef 90       	pop	r14
    6ac8:	df 90       	pop	r13
    6aca:	bf 90       	pop	r11
    6acc:	af 90       	pop	r10
    6ace:	08 95       	ret
    {
        count = 256 - offset;
    }
    else
    {
        count = NumOfBytes;
    6ad0:	e8 01       	movw	r28, r16
    6ad2:	bc cf       	rjmp	.-136    	; 0x6a4c <readFlash+0x6e>
{
    uint16_t count;

    if (initdone == 0)
    {
        atmel_flash_init();
    6ad4:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <atmel_flash_init>
    6ad8:	94 cf       	rjmp	.-216    	; 0x6a02 <readFlash+0x24>

00006ada <copyPage>:
    writeFlash(pagenum, offset, buffer, NumOfBytes);
}

void copyPage(int sourcepage, int targetpage)
{		
	   copyFlash(sourcepage, targetpage); 
    6ada:	0e 94 b2 32 	call	0x6564	; 0x6564 <copyFlash>
}
    6ade:	08 95       	ret

00006ae0 <writepagestorage>:

//Write to a page.  Intra-page only. 
void writepagestorage(int pagenum, uint8_t offset, void *buffer, int
                      NumOfBytes)
{
    writeFlash(pagenum, offset, buffer, NumOfBytes);
    6ae0:	0e 94 cc 33 	call	0x6798	; 0x6798 <writeFlash>
}
    6ae4:	08 95       	ret

00006ae6 <readpagestorage>:
}

//Read from a page. Intra-page only.
void readpagestorage(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
    readFlash(pagenum, offset, buffer, NumOfBytes);
    6ae6:	0e 94 ef 34 	call	0x69de	; 0x69de <readFlash>
}
    6aea:	08 95       	ret

00006aec <pagestorageinit>:
}

//Init the page storage
void pagestorageinit()
{
    atmel_flash_init();
    6aec:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <atmel_flash_init>
}
    6af0:	08 95       	ret

00006af2 <getpagenumber>:
}

//Get the total number of pages
uint16_t getpagenumber()
{
    return atmel_flash_pagenumber();
    6af2:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <atmel_flash_pagenumber>
}
    6af6:	08 95       	ret

00006af8 <getpagesize>:
#ifdef PLATFORM_AVR
#include "./atmelflash.h"
//Get the size of each page
uint16_t getpagesize()
{
    return atmel_flash_pagesize();
    6af8:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <atmel_flash_pagesize>
}
    6afc:	08 95       	ret

00006afe <HPLClock_Timer3_Start>:
void HPLClock_Timer3_Start()
{
    //Prescaler 0
    //TCCR1B |= (1 << 0); // Timer1 (Clock)
    //Set up the tccr to be driven by the clock with cycle wise driven 
    sbi(TCCR3B, CS30);
    6afe:	ea e8       	ldi	r30, 0x8A	; 138
    6b00:	f0 e0       	ldi	r31, 0x00	; 0
    6b02:	80 81       	ld	r24, Z
    6b04:	81 60       	ori	r24, 0x01	; 1
    6b06:	80 83       	st	Z, r24
    //Configure Timer1 to be CTC mode 
    sbi(TCCR3B, WGM32);
    6b08:	80 81       	ld	r24, Z
    6b0a:	88 60       	ori	r24, 0x08	; 8
    6b0c:	80 83       	st	Z, r24
    //Enable interrupt 
    sbi(ETIMSK, OCIE3A);
    6b0e:	ed e7       	ldi	r30, 0x7D	; 125
    6b10:	f0 e0       	ldi	r31, 0x00	; 0
    6b12:	80 81       	ld	r24, Z
    6b14:	80 61       	ori	r24, 0x10	; 16
    6b16:	80 83       	st	Z, r24

    sbi(ETIFR, OCF3A);
    6b18:	ec e7       	ldi	r30, 0x7C	; 124
    6b1a:	f0 e0       	ldi	r31, 0x00	; 0
    6b1c:	80 81       	ld	r24, Z
    6b1e:	80 61       	ori	r24, 0x10	; 16
    6b20:	80 83       	st	Z, r24
    //Once the 50000 compared, then itnerrupt 
    //So one interrupt every 50000 cpu cycles 
    OCR3A = 50000;
    6b22:	80 e5       	ldi	r24, 0x50	; 80
    6b24:	93 ec       	ldi	r25, 0xC3	; 195
    6b26:	90 93 87 00 	sts	0x0087, r25
    6b2a:	80 93 86 00 	sts	0x0086, r24
    //Counters 
    lowcounter = highcounter = 0;
    6b2e:	10 92 55 06 	sts	0x0655, r1
    6b32:	10 92 54 06 	sts	0x0654, r1
    6b36:	80 91 54 06 	lds	r24, 0x0654
    6b3a:	90 91 55 06 	lds	r25, 0x0655
    6b3e:	90 93 5b 06 	sts	0x065B, r25
    6b42:	80 93 5a 06 	sts	0x065A, r24
    //Zero timer
    TCNT3 = 0;
    6b46:	10 92 89 00 	sts	0x0089, r1
    6b4a:	10 92 88 00 	sts	0x0088, r1
	historyvalue = 0; 
    6b4e:	10 92 50 06 	sts	0x0650, r1
    6b52:	10 92 51 06 	sts	0x0651, r1
    6b56:	10 92 52 06 	sts	0x0652, r1
    6b5a:	10 92 53 06 	sts	0x0653, r1
}
    6b5e:	08 95       	ret

00006b60 <HPLClock_Timer3_Stop>:

//-------------------------------------------------------------------------
void HPLClock_Timer3_Stop()
{
    //stop the timer 
    cbi(TCCR3B, CS30);
    6b60:	ea e8       	ldi	r30, 0x8A	; 138
    6b62:	f0 e0       	ldi	r31, 0x00	; 0
    6b64:	80 81       	ld	r24, Z
    6b66:	8e 7f       	andi	r24, 0xFE	; 254
    6b68:	80 83       	st	Z, r24
}
    6b6a:	08 95       	ret

00006b6c <HPLClock_readTimeCounterHigh>:

//-------------------------------------------------------------------------
uint16_t HPLClock_readTimeCounterHigh()
{
    return highcounter;
    6b6c:	20 91 54 06 	lds	r18, 0x0654
    6b70:	30 91 55 06 	lds	r19, 0x0655
}
    6b74:	c9 01       	movw	r24, r18
    6b76:	08 95       	ret

00006b78 <HPLClock_readTimeCounterLow>:

//-------------------------------------------------------------------------
inline uint32_t HPLClock_readTimeCounterLow()
{
    6b78:	1f 93       	push	r17
    6b7a:	cf 93       	push	r28
    6b7c:	df 93       	push	r29
    uint16_t m;
    uint32_t retval;
    uint16_t tempcounter;
    unsigned char sreg;

    sreg = SREG;
    6b7e:	1f b7       	in	r17, 0x3f	; 63
    //Disable interrupt
    asm volatile ("cli");
    6b80:	f8 94       	cli

    temp = TCNT3;
    6b82:	c0 91 88 00 	lds	r28, 0x0088
    6b86:	d0 91 89 00 	lds	r29, 0x0089
    //check against the problem when the read of TCNT is not atomic 
    m = temp & 0xff;
    if ((m == 0xfe) || (m == 0xff))
    6b8a:	ce 01       	movw	r24, r28
    6b8c:	90 70       	andi	r25, 0x00	; 0
    6b8e:	8e 5f       	subi	r24, 0xFE	; 254
    6b90:	90 40       	sbci	r25, 0x00	; 0
    6b92:	02 97       	sbiw	r24, 0x02	; 2
    6b94:	c0 f1       	brcs	.+112    	; 0x6c06 <HPLClock_readTimeCounterLow+0x8e>
    {
        temp = temp - 0x100;
    }
    //Solve the problem that the counter might should have increased 
    if (temp <= 1)
    6b96:	c2 30       	cpi	r28, 0x02	; 2
    6b98:	d1 05       	cpc	r29, r1
    6b9a:	d0 f1       	brcs	.+116    	; 0x6c10 <HPLClock_readTimeCounterLow+0x98>
    {
        tempcounter = lowcounter + 1;
    }
    else
    {
        tempcounter = lowcounter;
    6b9c:	60 91 5a 06 	lds	r22, 0x065A
    6ba0:	70 91 5b 06 	lds	r23, 0x065B
    }
    //get the return value 
    retval = (((uint32_t) tempcounter) * 50000) + (uint32_t) temp;
    6ba4:	80 e0       	ldi	r24, 0x00	; 0
    6ba6:	90 e0       	ldi	r25, 0x00	; 0
    6ba8:	20 e5       	ldi	r18, 0x50	; 80
    6baa:	33 ec       	ldi	r19, 0xC3	; 195
    6bac:	40 e0       	ldi	r20, 0x00	; 0
    6bae:	50 e0       	ldi	r21, 0x00	; 0
    6bb0:	0e 94 65 56 	call	0xacca	; 0xacca <__mulsi3>
    6bb4:	9b 01       	movw	r18, r22
    6bb6:	ac 01       	movw	r20, r24
    6bb8:	ce 01       	movw	r24, r28
    6bba:	a0 e0       	ldi	r26, 0x00	; 0
    6bbc:	b0 e0       	ldi	r27, 0x00	; 0
    6bbe:	28 0f       	add	r18, r24
    6bc0:	39 1f       	adc	r19, r25
    6bc2:	4a 1f       	adc	r20, r26
    6bc4:	5b 1f       	adc	r21, r27
    //restore sreg
    SREG = sreg;
    6bc6:	1f bf       	out	0x3f, r17	; 63
    //return 
	if (historyvalue > retval)
    6bc8:	80 91 50 06 	lds	r24, 0x0650
    6bcc:	90 91 51 06 	lds	r25, 0x0651
    6bd0:	a0 91 52 06 	lds	r26, 0x0652
    6bd4:	b0 91 53 06 	lds	r27, 0x0653
    6bd8:	28 17       	cp	r18, r24
    6bda:	39 07       	cpc	r19, r25
    6bdc:	4a 07       	cpc	r20, r26
    6bde:	5b 07       	cpc	r21, r27
    6be0:	20 f4       	brcc	.+8      	; 0x6bea <HPLClock_readTimeCounterLow+0x72>
	 {
	  retval += 50000;
    6be2:	20 5b       	subi	r18, 0xB0	; 176
    6be4:	3c 43       	sbci	r19, 0x3C	; 60
    6be6:	4f 4f       	sbci	r20, 0xFF	; 255
    6be8:	5f 4f       	sbci	r21, 0xFF	; 255
	  
	 }

   historyvalue = retval; 
    6bea:	20 93 50 06 	sts	0x0650, r18
    6bee:	30 93 51 06 	sts	0x0651, r19
    6bf2:	40 93 52 06 	sts	0x0652, r20
    6bf6:	50 93 53 06 	sts	0x0653, r21
	 
    

    return retval;
}
    6bfa:	b9 01       	movw	r22, r18
    6bfc:	ca 01       	movw	r24, r20
    6bfe:	df 91       	pop	r29
    6c00:	cf 91       	pop	r28
    6c02:	1f 91       	pop	r17
    6c04:	08 95       	ret
    temp = TCNT3;
    //check against the problem when the read of TCNT is not atomic 
    m = temp & 0xff;
    if ((m == 0xfe) || (m == 0xff))
    {
        temp = temp - 0x100;
    6c06:	c0 50       	subi	r28, 0x00	; 0
    6c08:	d1 40       	sbci	r29, 0x01	; 1
    }
    //Solve the problem that the counter might should have increased 
    if (temp <= 1)
    6c0a:	c2 30       	cpi	r28, 0x02	; 2
    6c0c:	d1 05       	cpc	r29, r1
    6c0e:	30 f6       	brcc	.-116    	; 0x6b9c <HPLClock_readTimeCounterLow+0x24>
    {
        tempcounter = lowcounter + 1;
    6c10:	60 91 5a 06 	lds	r22, 0x065A
    6c14:	70 91 5b 06 	lds	r23, 0x065B
    6c18:	6f 5f       	subi	r22, 0xFF	; 255
    6c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c1c:	c3 cf       	rjmp	.-122    	; 0x6ba4 <HPLClock_readTimeCounterLow+0x2c>

00006c1e <HPLClock_Clock_readCounter>:
}

//-------------------------------------------------------------------------
inline uint8_t HPLClock_Clock_readCounter(void)
{
    return TCNT0;
    6c1e:	82 b7       	in	r24, 0x32	; 50
    //return * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x32 + 0x20);
}
    6c20:	08 95       	ret

00006c22 <HPLClock_Clock_getInterval>:

//-------------------------------------------------------------------------

inline uint8_t HPLClock_Clock_getInterval(void)
{
    return OCR0;
    6c22:	81 b7       	in	r24, 0x31	; 49
    //return * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20);
}
    6c24:	08 95       	ret

00006c26 <HPLClock_Clock_setInterval>:
}

//-------------------------------------------------------------------------
inline void HPLClock_Clock_setInterval(uint8_t value)
{
    OCR0 = value;
    6c26:	81 bf       	out	0x31, r24	; 49
    //* (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20) = value;
}
    6c28:	08 95       	ret

00006c2a <__vector_26>:

//_INTERRUPT(SIG_OUTPUT_COMPARE0)
//void __vector_15() __attribute__ ((interrupt, spontaneous, C))
//void __attribute((interrupt))   __vector_15(void)
ISR(TIMER3_COMPA_vect)
{
    6c2a:	1f 92       	push	r1
    6c2c:	0f 92       	push	r0
    6c2e:	0f b6       	in	r0, 0x3f	; 63
    6c30:	0f 92       	push	r0
    6c32:	0b b6       	in	r0, 0x3b	; 59
    6c34:	0f 92       	push	r0
    6c36:	11 24       	eor	r1, r1
    6c38:	2f 93       	push	r18
    6c3a:	3f 93       	push	r19
    6c3c:	4f 93       	push	r20
    6c3e:	5f 93       	push	r21
    6c40:	6f 93       	push	r22
    6c42:	7f 93       	push	r23
    6c44:	8f 93       	push	r24
    6c46:	9f 93       	push	r25
    6c48:	af 93       	push	r26
    6c4a:	bf 93       	push	r27
    6c4c:	ef 93       	push	r30
    6c4e:	ff 93       	push	r31
    _atomic_t _atomic;

    _atomic = _atomic_start_avr();
    6c50:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_atomic_start_avr>
    6c54:	28 2f       	mov	r18, r24
    lowcounter++;
    6c56:	80 91 5a 06 	lds	r24, 0x065A
    6c5a:	90 91 5b 06 	lds	r25, 0x065B
    6c5e:	01 96       	adiw	r24, 0x01	; 1
    6c60:	90 93 5b 06 	sts	0x065B, r25
    6c64:	80 93 5a 06 	sts	0x065A, r24
    if (lowcounter == 50000)
    6c68:	80 91 5a 06 	lds	r24, 0x065A
    6c6c:	90 91 5b 06 	lds	r25, 0x065B
    6c70:	80 55       	subi	r24, 0x50	; 80
    6c72:	93 4c       	sbci	r25, 0xC3	; 195
    6c74:	69 f4       	brne	.+26     	; 0x6c90 <__vector_26+0x66>
    {
        highcounter++;
    6c76:	80 91 54 06 	lds	r24, 0x0654
    6c7a:	90 91 55 06 	lds	r25, 0x0655
    6c7e:	01 96       	adiw	r24, 0x01	; 1
    6c80:	90 93 55 06 	sts	0x0655, r25
    6c84:	80 93 54 06 	sts	0x0654, r24
        lowcounter = 0;
    6c88:	10 92 5b 06 	sts	0x065B, r1
    6c8c:	10 92 5a 06 	sts	0x065A, r1
    }
    _atomic_end_avr(_atomic);
    6c90:	82 2f       	mov	r24, r18
    6c92:	0e 94 67 02 	call	0x4ce	; 0x4ce <_atomic_end_avr>
}
    6c96:	ff 91       	pop	r31
    6c98:	ef 91       	pop	r30
    6c9a:	bf 91       	pop	r27
    6c9c:	af 91       	pop	r26
    6c9e:	9f 91       	pop	r25
    6ca0:	8f 91       	pop	r24
    6ca2:	7f 91       	pop	r23
    6ca4:	6f 91       	pop	r22
    6ca6:	5f 91       	pop	r21
    6ca8:	4f 91       	pop	r20
    6caa:	3f 91       	pop	r19
    6cac:	2f 91       	pop	r18
    6cae:	0f 90       	pop	r0
    6cb0:	0b be       	out	0x3b, r0	; 59
    6cb2:	0f 90       	pop	r0
    6cb4:	0f be       	out	0x3f, r0	; 63
    6cb6:	0f 90       	pop	r0
    6cb8:	1f 90       	pop	r1
    6cba:	18 95       	reti

00006cbc <HPLClock_Clock_setRate>:
    //* (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20) = value;
}

//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_setRate(char interval, char scale)
{
    6cbc:	0f 93       	push	r16
    6cbe:	1f 93       	push	r17
    6cc0:	08 2f       	mov	r16, r24
    6cc2:	16 2f       	mov	r17, r22
    scale &= 0x7;
    6cc4:	17 70       	andi	r17, 0x07	; 7
    scale |= 0x8;
    //shoudl be 1011 here in scale 
    {
        _atomic_t _atomic = _atomic_start();
    6cc6:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            cbi(TIMSK, TOIE0);
    6cca:	97 b7       	in	r25, 0x37	; 55
    6ccc:	9e 7f       	andi	r25, 0xFE	; 254
    6cce:	97 bf       	out	0x37, r25	; 55
            cbi(TIMSK, OCIE0);  //Disable TC0 interrupt
    6cd0:	97 b7       	in	r25, 0x37	; 55
    6cd2:	9d 7f       	andi	r25, 0xFD	; 253
    6cd4:	97 bf       	out	0x37, r25	; 55
            sbi(ASSR, AS0);     //set Timer/Counter0 to be asynchronous
    6cd6:	90 b7       	in	r25, 0x30	; 48
    6cd8:	98 60       	ori	r25, 0x08	; 8
    6cda:	90 bf       	out	0x30, r25	; 48
            //from the CPU clock with a second external
            //clock(32,768kHz)driving it.
            outp(scale, TCCR0); //prescale the timer to be clock/128 to make it
    6cdc:	18 60       	ori	r17, 0x08	; 8
    6cde:	13 bf       	out	0x33, r17	; 51
            outp(0, TCNT0);
    6ce0:	12 be       	out	0x32, r1	; 50
            outp(interval, OCR0);
    6ce2:	01 bf       	out	0x31, r16	; 49
            sbi(TIMSK, OCIE0);
    6ce4:	97 b7       	in	r25, 0x37	; 55
    6ce6:	92 60       	ori	r25, 0x02	; 2
    6ce8:	97 bf       	out	0x37, r25	; 55
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x32 + 0x20) = 0;
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20) = interval;
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x37 + 0x20) |= 1 << 1;
             */
        }
        _atomic_end(_atomic);
    6cea:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return SUCCESS;
}
    6cee:	81 e0       	ldi	r24, 0x01	; 1
    6cf0:	1f 91       	pop	r17
    6cf2:	0f 91       	pop	r16
    6cf4:	08 95       	ret

00006cf6 <HPLClock_Clock_fire>:
//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_fire(void)
{
    unsigned char result;

    result = TimerM_Clock_fire();
    6cf6:	0e 94 54 38 	call	0x70a8	; 0x70a8 <TimerM_Clock_fire>
    return result;
}
    6cfa:	08 95       	ret

00006cfc <__vector_15>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
_INTERRUPT(SIG_OUTPUT_COMPARE0)
{
    6cfc:	78 94       	sei
    6cfe:	1f 92       	push	r1
    6d00:	0f 92       	push	r0
    6d02:	0f b6       	in	r0, 0x3f	; 63
    6d04:	0f 92       	push	r0
    6d06:	0b b6       	in	r0, 0x3b	; 59
    6d08:	0f 92       	push	r0
    6d0a:	11 24       	eor	r1, r1
    6d0c:	0f 93       	push	r16
    6d0e:	1f 93       	push	r17
    6d10:	2f 93       	push	r18
    6d12:	3f 93       	push	r19
    6d14:	4f 93       	push	r20
    6d16:	5f 93       	push	r21
    6d18:	6f 93       	push	r22
    6d1a:	7f 93       	push	r23
    6d1c:	8f 93       	push	r24
    6d1e:	9f 93       	push	r25
    6d20:	af 93       	push	r26
    6d22:	bf 93       	push	r27
    6d24:	ef 93       	push	r30
    6d26:	ff 93       	push	r31
    _atomic_t _atomic;
    uint8_t isthreadtrue;

    isthreadtrue = 0;
    _atomic = _atomic_start();
    6d28:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    6d2c:	18 2f       	mov	r17, r24
    if (is_thread())
    6d2e:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <is_thread>
    6d32:	88 23       	and	r24, r24
    6d34:	09 f0       	breq	.+2      	; 0x6d38 <__vector_15+0x3c>
    6d36:	46 c0       	rjmp	.+140    	; 0x6dc4 <__vector_15+0xc8>
    6d38:	00 e0       	ldi	r16, 0x00	; 0
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    6d3a:	81 2f       	mov	r24, r17
    6d3c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    {
        _atomic = _atomic_start();
    6d40:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    6d44:	98 2f       	mov	r25, r24
        {
            if (HPLClock_set_flag)
    6d46:	80 91 58 06 	lds	r24, 0x0658
    6d4a:	88 23       	and	r24, r24
    6d4c:	69 f0       	breq	.+26     	; 0x6d68 <__vector_15+0x6c>
            {
                HPLClock_mscale = HPLClock_nextScale;
    6d4e:	80 91 57 06 	lds	r24, 0x0657
    6d52:	80 93 56 06 	sts	0x0656, r24
                HPLClock_nextScale |= 0x8;
    6d56:	88 60       	ori	r24, 0x08	; 8
    6d58:	80 93 57 06 	sts	0x0657, r24
                outp(HPLClock_nextScale, TCCR0);
    6d5c:	83 bf       	out	0x33, r24	; 51
                outp(HPLClock_minterval, OCR0);
    6d5e:	80 91 59 06 	lds	r24, 0x0659
    6d62:	81 bf       	out	0x31, r24	; 49
                HPLClock_set_flag = 0;
    6d64:	10 92 58 06 	sts	0x0658, r1
            }
        }
        _atomic_end(_atomic);
    6d68:	89 2f       	mov	r24, r25
    6d6a:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_fire(void)
{
    unsigned char result;

    result = TimerM_Clock_fire();
    6d6e:	0e 94 54 38 	call	0x70a8	; 0x70a8 <TimerM_Clock_fire>
            }
        }
        _atomic_end(_atomic);
    }
    HPLClock_Clock_fire();
    _atomic = _atomic_start();
    6d72:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    6d76:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
    6d78:	01 30       	cpi	r16, 0x01	; 1
    6d7a:	61 f4       	brne	.+24     	; 0x6d94 <__vector_15+0x98>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    6d7c:	8d b7       	in	r24, 0x3d	; 61
    6d7e:	9e b7       	in	r25, 0x3e	; 62
    6d80:	90 93 8b 05 	sts	0x058B, r25
    6d84:	80 93 8a 05 	sts	0x058A, r24
    6d88:	80 91 2b 06 	lds	r24, 0x062B
    6d8c:	90 91 2c 06 	lds	r25, 0x062C
    6d90:	9e bf       	out	0x3e, r25	; 62
    6d92:	8d bf       	out	0x3d, r24	; 61
        //thread_yield();
    }
    _atomic_end(_atomic);
    6d94:	82 2f       	mov	r24, r18
    6d96:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    //SHOWME(timer 0 end\n);
}
    6d9a:	ff 91       	pop	r31
    6d9c:	ef 91       	pop	r30
    6d9e:	bf 91       	pop	r27
    6da0:	af 91       	pop	r26
    6da2:	9f 91       	pop	r25
    6da4:	8f 91       	pop	r24
    6da6:	7f 91       	pop	r23
    6da8:	6f 91       	pop	r22
    6daa:	5f 91       	pop	r21
    6dac:	4f 91       	pop	r20
    6dae:	3f 91       	pop	r19
    6db0:	2f 91       	pop	r18
    6db2:	1f 91       	pop	r17
    6db4:	0f 91       	pop	r16
    6db6:	0f 90       	pop	r0
    6db8:	0b be       	out	0x3b, r0	; 59
    6dba:	0f 90       	pop	r0
    6dbc:	0f be       	out	0x3f, r0	; 63
    6dbe:	0f 90       	pop	r0
    6dc0:	1f 90       	pop	r1
    6dc2:	18 95       	reti
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    6dc4:	8d b7       	in	r24, 0x3d	; 61
    6dc6:	9e b7       	in	r25, 0x3e	; 62
    6dc8:	90 93 2c 06 	sts	0x062C, r25
    6dcc:	80 93 2b 06 	sts	0x062B, r24
    6dd0:	80 91 8a 05 	lds	r24, 0x058A
    6dd4:	90 91 8b 05 	lds	r25, 0x058B
    6dd8:	9e bf       	out	0x3e, r25	; 62
    6dda:	8d bf       	out	0x3d, r24	; 61
    6ddc:	01 e0       	ldi	r16, 0x01	; 1
    6dde:	ad cf       	rjmp	.-166    	; 0x6d3a <__vector_15+0x3e>

00006de0 <timercallbackinvoke>:
//-------------------------------------------------------------------------
void timercallbackinvoke(uint8_t id)
{
    uint8_t index = id - 18;

    if (timercallback[index] != NULL)
    6de0:	e8 2f       	mov	r30, r24
    6de2:	e2 51       	subi	r30, 0x12	; 18
    6de4:	f0 e0       	ldi	r31, 0x00	; 0
    6de6:	ee 0f       	add	r30, r30
    6de8:	ff 1f       	adc	r31, r31
    6dea:	e1 5a       	subi	r30, 0xA1	; 161
    6dec:	f9 4f       	sbci	r31, 0xF9	; 249
    6dee:	01 90       	ld	r0, Z+
    6df0:	f0 81       	ld	r31, Z
    6df2:	e0 2d       	mov	r30, r0
    6df4:	30 97       	sbiw	r30, 0x00	; 0
    6df6:	09 f0       	breq	.+2      	; 0x6dfa <timercallbackinvoke+0x1a>
    {
        (*timercallback[index]) ();
    6df8:	09 95       	icall
    6dfa:	08 95       	ret

00006dfc <GenericTimerFired>:


    unsigned char result;
    
    //0, 1, 2 for threads
    switch (id)
    6dfc:	86 30       	cpi	r24, 0x06	; 6
    6dfe:	09 f4       	brne	.+2      	; 0x6e02 <GenericTimerFired+0x6>
    6e00:	6d c0       	rjmp	.+218    	; 0x6edc <GenericTimerFired+0xe0>
    6e02:	87 30       	cpi	r24, 0x07	; 7
    6e04:	70 f0       	brcs	.+28     	; 0x6e22 <GenericTimerFired+0x26>
    6e06:	8a 30       	cpi	r24, 0x0A	; 10
    6e08:	09 f4       	brne	.+2      	; 0x6e0c <GenericTimerFired+0x10>
    6e0a:	59 c0       	rjmp	.+178    	; 0x6ebe <GenericTimerFired+0xc2>
    6e0c:	8b 30       	cpi	r24, 0x0B	; 11
    6e0e:	b8 f4       	brcc	.+46     	; 0x6e3e <GenericTimerFired+0x42>
    6e10:	87 30       	cpi	r24, 0x07	; 7
    6e12:	09 f4       	brne	.+2      	; 0x6e16 <GenericTimerFired+0x1a>
    6e14:	50 c0       	rjmp	.+160    	; 0x6eb6 <GenericTimerFired+0xba>
    6e16:	89 30       	cpi	r24, 0x09	; 9
    6e18:	11 f0       	breq	.+4      	; 0x6e1e <GenericTimerFired+0x22>
	      		 enabled = false; 
	      }
       break; 
	
    default:
        timercallbackinvoke(id);
    6e1a:	0e 94 f0 36 	call	0x6de0	; 0x6de0 <timercallbackinvoke>
        result = SUCCESS;
    }
    return SUCCESS;
}
    6e1e:	81 e0       	ldi	r24, 0x01	; 1
    6e20:	08 95       	ret


    unsigned char result;
    
    //0, 1, 2 for threads
    switch (id)
    6e22:	82 30       	cpi	r24, 0x02	; 2
    6e24:	09 f4       	brne	.+2      	; 0x6e28 <GenericTimerFired+0x2c>
    6e26:	56 c0       	rjmp	.+172    	; 0x6ed4 <GenericTimerFired+0xd8>
    6e28:	83 30       	cpi	r24, 0x03	; 3
    6e2a:	a8 f1       	brcs	.+106    	; 0x6e96 <GenericTimerFired+0x9a>
    6e2c:	84 30       	cpi	r24, 0x04	; 4
    6e2e:	09 f4       	brne	.+2      	; 0x6e32 <GenericTimerFired+0x36>
    6e30:	49 c0       	rjmp	.+146    	; 0x6ec4 <GenericTimerFired+0xc8>
    6e32:	85 30       	cpi	r24, 0x05	; 5
    6e34:	c8 f1       	brcs	.+114    	; 0x6ea8 <GenericTimerFired+0xac>
        break;
    case 4:
        ServiceTimerFired(4);
        break;
    case 5:
        ServiceTimerFired(5);
    6e36:	85 e0       	ldi	r24, 0x05	; 5
    6e38:	0e 94 2d 1c 	call	0x385a	; 0x385a <ServiceTimerFired>
    6e3c:	f0 cf       	rjmp	.-32     	; 0x6e1e <GenericTimerFired+0x22>


    unsigned char result;
    
    //0, 1, 2 for threads
    switch (id)
    6e3e:	8c 30       	cpi	r24, 0x0C	; 12
    6e40:	71 f3       	breq	.-36     	; 0x6e1e <GenericTimerFired+0x22>
    6e42:	8c 30       	cpi	r24, 0x0C	; 12
    6e44:	a8 f1       	brcs	.+106    	; 0x6eb0 <GenericTimerFired+0xb4>
    6e46:	8f 30       	cpi	r24, 0x0F	; 15
    6e48:	41 f7       	brne	.-48     	; 0x6e1a <GenericTimerFired+0x1e>
	    //  #endif
	      
	      {
	      	
	      	datapayload *p = (datapayload *)datamsg.data; 
	      	p->index = currentcounter; 
    6e4a:	80 91 5d 06 	lds	r24, 0x065D
    6e4e:	90 91 5e 06 	lds	r25, 0x065E
    6e52:	90 93 7a 06 	sts	0x067A, r25
    6e56:	80 93 79 06 	sts	0x0679, r24
	      	p->power = currentpower;
    6e5a:	80 91 e3 06 	lds	r24, 0x06E3
    6e5e:	80 93 7b 06 	sts	0x067B, r24
            cc2420controlm_CC2420Control_TunePower(currentpower); 
    6e62:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <cc2420controlm_CC2420Control_TunePower>

	      	if (enabled == true)
    6e66:	80 91 5c 06 	lds	r24, 0x065C
    6e6a:	81 30       	cpi	r24, 0x01	; 1
    6e6c:	09 f4       	brne	.+2      	; 0x6e70 <GenericTimerFired+0x74>
    6e6e:	44 c0       	rjmp	.+136    	; 0x6ef8 <GenericTimerFired+0xfc>
	      	{	        
	        Leds_redToggle();
	        AMStandard_SendMsg_send(16, 0xFFFF, 10, &datamsg);
	        }
	      	currentcounter++;
    6e70:	80 91 5d 06 	lds	r24, 0x065D
    6e74:	90 91 5e 06 	lds	r25, 0x065E
    6e78:	01 96       	adiw	r24, 0x01	; 1
    6e7a:	90 93 5e 06 	sts	0x065E, r25
    6e7e:	80 93 5d 06 	sts	0x065D, r24
	      	if (currentcounter == 500)
    6e82:	84 5f       	subi	r24, 0xF4	; 244
    6e84:	91 40       	sbci	r25, 0x01	; 1
    6e86:	71 f1       	breq	.+92     	; 0x6ee4 <GenericTimerFired+0xe8>
    6e88:	80 91 e3 06 	lds	r24, 0x06E3
	      		 { currentcounter = 0;
	      		 	 currentpower+=3;
	      		 }
	      	if (currentpower == 21)
    6e8c:	85 31       	cpi	r24, 0x15	; 21
    6e8e:	39 f6       	brne	.-114    	; 0x6e1e <GenericTimerFired+0x22>
	      		 enabled = false; 
    6e90:	10 92 5c 06 	sts	0x065C, r1
    6e94:	c4 cf       	rjmp	.-120    	; 0x6e1e <GenericTimerFired+0x22>


    unsigned char result;
    
    //0, 1, 2 for threads
    switch (id)
    6e96:	88 23       	and	r24, r24
    6e98:	c9 f0       	breq	.+50     	; 0x6ecc <GenericTimerFired+0xd0>
    6e9a:	81 30       	cpi	r24, 0x01	; 1
    6e9c:	09 f0       	breq	.+2      	; 0x6ea0 <GenericTimerFired+0xa4>
    6e9e:	bd cf       	rjmp	.-134    	; 0x6e1a <GenericTimerFired+0x1e>
    {
    case 0:
        ServiceTimerFired(0);
        break;
    case 1:
        ServiceTimerFired(1);
    6ea0:	81 e0       	ldi	r24, 0x01	; 1
    6ea2:	0e 94 2d 1c 	call	0x385a	; 0x385a <ServiceTimerFired>
    6ea6:	bb cf       	rjmp	.-138    	; 0x6e1e <GenericTimerFired+0x22>
        break;
    case 2:
        ServiceTimerFired(2);
        break;
    case 3:
        ServiceTimerFired(3);
    6ea8:	83 e0       	ldi	r24, 0x03	; 3
    6eaa:	0e 94 2d 1c 	call	0x385a	; 0x385a <ServiceTimerFired>
    6eae:	b7 cf       	rjmp	.-146    	; 0x6e1e <GenericTimerFired+0x22>
#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    case 10:
        hplcc2420interruptm_FIFOTimer_fired();
        break;
    case 11:
        hplcc2420interruptm_CCATimer_fired();
    6eb0:	0e 94 0a 13 	call	0x2614	; 0x2614 <hplcc2420interruptm_CCATimer_fired>
    6eb4:	b4 cf       	rjmp	.-152    	; 0x6e1e <GenericTimerFired+0x22>
        break;
    case 6:
        ServiceTimerFired(6);
        break;
    case 7:
        ServiceTimerFired(7);
    6eb6:	87 e0       	ldi	r24, 0x07	; 7
    6eb8:	0e 94 2d 1c 	call	0x385a	; 0x385a <ServiceTimerFired>
    6ebc:	b0 cf       	rjmp	.-160    	; 0x6e1e <GenericTimerFired+0x22>
        }
#endif
        break;
#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    case 10:
        hplcc2420interruptm_FIFOTimer_fired();
    6ebe:	0e 94 28 13 	call	0x2650	; 0x2650 <hplcc2420interruptm_FIFOTimer_fired>
    6ec2:	ad cf       	rjmp	.-166    	; 0x6e1e <GenericTimerFired+0x22>
        break;
    case 3:
        ServiceTimerFired(3);
        break;
    case 4:
        ServiceTimerFired(4);
    6ec4:	84 e0       	ldi	r24, 0x04	; 4
    6ec6:	0e 94 2d 1c 	call	0x385a	; 0x385a <ServiceTimerFired>
    6eca:	a9 cf       	rjmp	.-174    	; 0x6e1e <GenericTimerFired+0x22>
    
    //0, 1, 2 for threads
    switch (id)
    {
    case 0:
        ServiceTimerFired(0);
    6ecc:	80 e0       	ldi	r24, 0x00	; 0
    6ece:	0e 94 2d 1c 	call	0x385a	; 0x385a <ServiceTimerFired>
    6ed2:	a5 cf       	rjmp	.-182    	; 0x6e1e <GenericTimerFired+0x22>
        break;
    case 1:
        ServiceTimerFired(1);
        break;
    case 2:
        ServiceTimerFired(2);
    6ed4:	82 e0       	ldi	r24, 0x02	; 2
    6ed6:	0e 94 2d 1c 	call	0x385a	; 0x385a <ServiceTimerFired>
    6eda:	a1 cf       	rjmp	.-190    	; 0x6e1e <GenericTimerFired+0x22>
        break;
    case 5:
        ServiceTimerFired(5);
        break;
    case 6:
        ServiceTimerFired(6);
    6edc:	86 e0       	ldi	r24, 0x06	; 6
    6ede:	0e 94 2d 1c 	call	0x385a	; 0x385a <ServiceTimerFired>
    6ee2:	9d cf       	rjmp	.-198    	; 0x6e1e <GenericTimerFired+0x22>
	        Leds_redToggle();
	        AMStandard_SendMsg_send(16, 0xFFFF, 10, &datamsg);
	        }
	      	currentcounter++;
	      	if (currentcounter == 500)
	      		 { currentcounter = 0;
    6ee4:	10 92 5e 06 	sts	0x065E, r1
    6ee8:	10 92 5d 06 	sts	0x065D, r1
	      		 	 currentpower+=3;
    6eec:	80 91 e3 06 	lds	r24, 0x06E3
    6ef0:	8d 5f       	subi	r24, 0xFD	; 253
    6ef2:	80 93 e3 06 	sts	0x06E3, r24
    6ef6:	ca cf       	rjmp	.-108    	; 0x6e8c <GenericTimerFired+0x90>
	      	p->power = currentpower;
            cc2420controlm_CC2420Control_TunePower(currentpower); 

	      	if (enabled == true)
	      	{	        
	        Leds_redToggle();
    6ef8:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <Leds_redToggle>
	        AMStandard_SendMsg_send(16, 0xFFFF, 10, &datamsg);
    6efc:	80 e1       	ldi	r24, 0x10	; 16
    6efe:	90 e0       	ldi	r25, 0x00	; 0
    6f00:	6f ef       	ldi	r22, 0xFF	; 255
    6f02:	7f ef       	ldi	r23, 0xFF	; 255
    6f04:	4a e0       	ldi	r20, 0x0A	; 10
    6f06:	29 e7       	ldi	r18, 0x79	; 121
    6f08:	36 e0       	ldi	r19, 0x06	; 6
    6f0a:	2a 50       	subi	r18, 0x0A	; 10
    6f0c:	30 40       	sbci	r19, 0x00	; 0
    6f0e:	0e 94 01 09 	call	0x1202	; 0x1202 <AMStandard_SendMsg_send>
    6f12:	ae cf       	rjmp	.-164    	; 0x6e70 <GenericTimerFired+0x74>

00006f14 <GenericTimerStop>:

//-------------------------------------------------------------------------
inline result_t GenericTimerStop(uint8_t id)
{
#ifdef PLATFORM_AVR
    return TimerM_Timer_stop(id);
    6f14:	0e 94 60 39 	call	0x72c0	; 0x72c0 <TimerM_Timer_stop>
#endif
}
    6f18:	08 95       	ret

00006f1a <GenericTimerStart>:

//-------------------------------------------------------------------------
inline result_t GenericTimerStart(uint8_t id, char type, uint32_t interval)
{
#ifdef PLATFORM_AVR
    return TimerM_Timer_start(id, type, interval);
    6f1a:	0e 94 ea 38 	call	0x71d4	; 0x71d4 <TimerM_Timer_start>
#endif
}
    6f1e:	08 95       	ret

00006f20 <setTimerCallBackFunction>:
}

//-------------------------------------------------------------------------
void setTimerCallBackFunction(uint8_t currentthreadindex, uint16_t period,
                              uint16_t type, void (*fp) ())
{
    6f20:	ef 92       	push	r14
    6f22:	ff 92       	push	r15
    6f24:	0f 93       	push	r16
    6f26:	1f 93       	push	r17
    6f28:	7b 01       	movw	r14, r22
    timercallback[currentthreadindex] = fp;
    6f2a:	e8 2f       	mov	r30, r24
    6f2c:	f0 e0       	ldi	r31, 0x00	; 0
    6f2e:	ee 0f       	add	r30, r30
    6f30:	ff 1f       	adc	r31, r31
    6f32:	e1 5a       	subi	r30, 0xA1	; 161
    6f34:	f9 4f       	sbci	r31, 0xF9	; 249
    6f36:	31 83       	std	Z+1, r19	; 0x01
    6f38:	20 83       	st	Z, r18

//-------------------------------------------------------------------------
inline result_t GenericTimerStart(uint8_t id, char type, uint32_t interval)
{
#ifdef PLATFORM_AVR
    return TimerM_Timer_start(id, type, interval);
    6f3a:	00 e0       	ldi	r16, 0x00	; 0
    6f3c:	10 e0       	ldi	r17, 0x00	; 0
    6f3e:	8e 5e       	subi	r24, 0xEE	; 238
    6f40:	64 2f       	mov	r22, r20
    6f42:	a8 01       	movw	r20, r16
    6f44:	97 01       	movw	r18, r14
    6f46:	0e 94 ea 38 	call	0x71d4	; 0x71d4 <TimerM_Timer_start>
void setTimerCallBackFunction(uint8_t currentthreadindex, uint16_t period,
                              uint16_t type, void (*fp) ())
{
    timercallback[currentthreadindex] = fp;
    GenericTimerStart(currentthreadindex + 18, type, period);
}
    6f4a:	1f 91       	pop	r17
    6f4c:	0f 91       	pop	r16
    6f4e:	ff 90       	pop	r15
    6f50:	ef 90       	pop	r14
    6f52:	08 95       	ret

00006f54 <GenericTimerInit>:

inline result_t GenericTimerInit(void)
{
    uint8_t i;

    currentcounter = 0;
    6f54:	10 92 5e 06 	sts	0x065E, r1
    6f58:	10 92 5d 06 	sts	0x065D, r1
   currentpower = 3; 
    6f5c:	83 e0       	ldi	r24, 0x03	; 3
    6f5e:	80 93 e3 06 	sts	0x06E3, r24
   enabled = true;
    6f62:	81 e0       	ldi	r24, 0x01	; 1
    6f64:	80 93 5c 06 	sts	0x065C, r24
    6f68:	ef e5       	ldi	r30, 0x5F	; 95
    6f6a:	f6 e0       	ldi	r31, 0x06	; 6
    for (i = 0; i < 8; i++)
    {
        timercallback[i] = NULL;
    6f6c:	11 92       	st	Z+, r1
    6f6e:	11 92       	st	Z+, r1
    uint8_t i;

    currentcounter = 0;
   currentpower = 3; 
   enabled = true;
    for (i = 0; i < 8; i++)
    6f70:	86 e0       	ldi	r24, 0x06	; 6
    6f72:	ef 36       	cpi	r30, 0x6F	; 111
    6f74:	f8 07       	cpc	r31, r24
    6f76:	d1 f7       	brne	.-12     	; 0x6f6c <GenericTimerInit+0x18>
    {
        timercallback[i] = NULL;
    }
#ifdef PLATFORM_AVR
    return TimerM_StdControl_init();
    6f78:	0e 94 c3 39 	call	0x7386	; 0x7386 <TimerM_StdControl_init>
#endif

    
}
    6f7c:	08 95       	ret

00006f7e <GenericTimingStop>:

//-------------------------------------------------------------------------
void GenericTimingStop()
{

    HPLClock_Timer3_Stop();
    6f7e:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <HPLClock_Timer3_Stop>

}
    6f82:	08 95       	ret

00006f84 <GenericTimingStart>:

//-------------------------------------------------------------------------
void GenericTimingStart()
{

    timeselect = 1;
    6f84:	81 e0       	ldi	r24, 0x01	; 1
    6f86:	80 93 b3 03 	sts	0x03B3, r24
    HPLClock_Timer3_Start();
    6f8a:	0e 94 7f 35 	call	0x6afe	; 0x6afe <HPLClock_Timer3_Start>

}
    6f8e:	08 95       	ret

00006f90 <getCurrentResolution>:
{

    uint32_t test;
    //printfstr("test0\n");
    
    test= HPLClock_readTimeCounterLow();
    6f90:	0e 94 bc 35 	call	0x6b78	; 0x6b78 <HPLClock_readTimeCounterLow>
    //printfintegeru32(test);
    return test;

}
}
    6f94:	08 95       	ret

00006f96 <getCurrentCounterHigh>:

//-------------------------------------------------------------------------
uint16_t getCurrentCounterHigh()
{

    return HPLClock_readTimeCounterHigh();
    6f96:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <HPLClock_readTimeCounterHigh>

}
    6f9a:	08 95       	ret

00006f9c <getCurrentTimeStamp>:

static currentTimeUnit internaltime1, internaltime2;
static uint8_t timeselect;

currentTimeUnit *getCurrentTimeStamp()
{
    6f9c:	ef 92       	push	r14
    6f9e:	ff 92       	push	r15
    6fa0:	0f 93       	push	r16
    6fa2:	1f 93       	push	r17
    6fa4:	cf 93       	push	r28
    6fa6:	df 93       	push	r29

    uint16_t counter1, counter2;
    uint32_t resolution;

    counter1 = HPLClock_readTimeCounterHigh();
    6fa8:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <HPLClock_readTimeCounterHigh>
    6fac:	ec 01       	movw	r28, r24
    resolution = HPLClock_readTimeCounterLow();
    6fae:	0e 94 bc 35 	call	0x6b78	; 0x6b78 <HPLClock_readTimeCounterLow>
    6fb2:	7b 01       	movw	r14, r22
    6fb4:	8c 01       	movw	r16, r24
    counter2 = HPLClock_readTimeCounterHigh();
    6fb6:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <HPLClock_readTimeCounterHigh>
    if (counter1 == counter2)
    6fba:	c8 17       	cp	r28, r24
    6fbc:	d9 07       	cpc	r29, r25
    6fbe:	49 f0       	breq	.+18     	; 0x6fd2 <getCurrentTimeStamp+0x36>
    {
    }
    else
    {
        counter1 = HPLClock_readTimeCounterHigh();
    6fc0:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <HPLClock_readTimeCounterHigh>
    6fc4:	ec 01       	movw	r28, r24
        resolution = HPLClock_readTimeCounterLow();
    6fc6:	0e 94 bc 35 	call	0x6b78	; 0x6b78 <HPLClock_readTimeCounterLow>
    6fca:	7b 01       	movw	r14, r22
    6fcc:	8c 01       	movw	r16, r24
        counter2 = HPLClock_readTimeCounterHigh();
    6fce:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <HPLClock_readTimeCounterHigh>
    }
    if (timeselect == 1)
    6fd2:	80 91 b3 03 	lds	r24, 0x03B3
    6fd6:	81 30       	cpi	r24, 0x01	; 1
    6fd8:	c9 f4       	brne	.+50     	; 0x700c <getCurrentTimeStamp+0x70>
    {
        internaltime1.counter = counter1;
    6fda:	d0 93 a8 03 	sts	0x03A8, r29
    6fde:	c0 93 a7 03 	sts	0x03A7, r28
        internaltime1.resolution = resolution;
    6fe2:	e0 92 a9 03 	sts	0x03A9, r14
    6fe6:	f0 92 aa 03 	sts	0x03AA, r15
    6fea:	00 93 ab 03 	sts	0x03AB, r16
    6fee:	10 93 ac 03 	sts	0x03AC, r17
        timeselect = 2;
    6ff2:	82 e0       	ldi	r24, 0x02	; 2
    6ff4:	80 93 b3 03 	sts	0x03B3, r24
    6ff8:	27 ea       	ldi	r18, 0xA7	; 167
    6ffa:	33 e0       	ldi	r19, 0x03	; 3
        internaltime2.resolution = resolution;
        return &internaltime2;
    }

    return NULL;
}
    6ffc:	c9 01       	movw	r24, r18
    6ffe:	df 91       	pop	r29
    7000:	cf 91       	pop	r28
    7002:	1f 91       	pop	r17
    7004:	0f 91       	pop	r16
    7006:	ff 90       	pop	r15
    7008:	ef 90       	pop	r14
    700a:	08 95       	ret
        internaltime1.counter = counter1;
        internaltime1.resolution = resolution;
        timeselect = 2;
        return &internaltime1;
    }
    if (timeselect == 2)
    700c:	82 30       	cpi	r24, 0x02	; 2
    700e:	19 f0       	breq	.+6      	; 0x7016 <getCurrentTimeStamp+0x7a>
    7010:	20 e0       	ldi	r18, 0x00	; 0
    7012:	30 e0       	ldi	r19, 0x00	; 0
    7014:	f3 cf       	rjmp	.-26     	; 0x6ffc <getCurrentTimeStamp+0x60>
    {
        timeselect = 1;
    7016:	81 e0       	ldi	r24, 0x01	; 1
    7018:	80 93 b3 03 	sts	0x03B3, r24
        internaltime2.counter = counter1;
    701c:	d0 93 ae 03 	sts	0x03AE, r29
    7020:	c0 93 ad 03 	sts	0x03AD, r28
        internaltime2.resolution = resolution;
    7024:	e0 92 af 03 	sts	0x03AF, r14
    7028:	f0 92 b0 03 	sts	0x03B0, r15
    702c:	00 93 b1 03 	sts	0x03B1, r16
    7030:	10 93 b2 03 	sts	0x03B2, r17
    7034:	2d ea       	ldi	r18, 0xAD	; 173
    7036:	33 e0       	ldi	r19, 0x03	; 3
    7038:	e1 cf       	rjmp	.-62     	; 0x6ffc <getCurrentTimeStamp+0x60>

0000703a <TimerM_enqueue>:
    }
}

//-------------------------------------------------------------------------
inline void TimerM_enqueue(uint8_t value)
{
    703a:	98 2f       	mov	r25, r24
    if (TimerM_queue_tail == NUM_TIMERS - 1)
    703c:	e0 91 e4 06 	lds	r30, 0x06E4
    7040:	ef 30       	cpi	r30, 0x0F	; 15
    7042:	09 f4       	brne	.+2      	; 0x7046 <TimerM_enqueue+0xc>
    7044:	ef ef       	ldi	r30, 0xFF	; 255
    {
        TimerM_queue_tail = -1;
    }
    TimerM_queue_tail++;
    7046:	ef 5f       	subi	r30, 0xFF	; 255
    7048:	e0 93 e4 06 	sts	0x06E4, r30
    TimerM_queue_size++;
    704c:	80 91 e9 06 	lds	r24, 0x06E9
    7050:	8f 5f       	subi	r24, 0xFF	; 255
    7052:	80 93 e9 06 	sts	0x06E9, r24
    TimerM_queue[(uint8_t) TimerM_queue_tail] = value;
    7056:	f0 e0       	ldi	r31, 0x00	; 0
    7058:	e3 51       	subi	r30, 0x13	; 19
    705a:	f9 4f       	sbci	r31, 0xF9	; 249
    705c:	90 83       	st	Z, r25
}
    705e:	08 95       	ret

00007060 <TimerM_Timer_default_fired>:

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_default_fired(uint8_t id)
{
    return SUCCESS;
}
    7060:	81 e0       	ldi	r24, 0x01	; 1
    7062:	08 95       	ret

00007064 <TimerM_dequeue>:
}

//-------------------------------------------------------------------------
inline uint8_t TimerM_dequeue(void)
{
    if (TimerM_queue_size == 0)
    7064:	80 91 e9 06 	lds	r24, 0x06E9
    7068:	88 23       	and	r24, r24
    706a:	79 f0       	breq	.+30     	; 0x708a <TimerM_dequeue+0x26>
    {
        return NUM_TIMERS;
    }
    if (TimerM_queue_head == NUM_TIMERS - 1)
    706c:	e0 91 ff 06 	lds	r30, 0x06FF
    7070:	ef 30       	cpi	r30, 0x0F	; 15
    7072:	69 f0       	breq	.+26     	; 0x708e <TimerM_dequeue+0x2a>
    {
        TimerM_queue_head = -1;
    }
    TimerM_queue_head++;
    7074:	ef 5f       	subi	r30, 0xFF	; 255
    7076:	e0 93 ff 06 	sts	0x06FF, r30
    TimerM_queue_size--;
    707a:	81 50       	subi	r24, 0x01	; 1
    707c:	80 93 e9 06 	sts	0x06E9, r24
    return TimerM_queue[(uint8_t) TimerM_queue_head];
    7080:	f0 e0       	ldi	r31, 0x00	; 0
    7082:	e3 51       	subi	r30, 0x13	; 19
    7084:	f9 4f       	sbci	r31, 0xF9	; 249
    7086:	80 81       	ld	r24, Z
}
    7088:	08 95       	ret
}

//-------------------------------------------------------------------------
inline uint8_t TimerM_dequeue(void)
{
    if (TimerM_queue_size == 0)
    708a:	80 e1       	ldi	r24, 0x10	; 16
    708c:	08 95       	ret
    708e:	ef ef       	ldi	r30, 0xFF	; 255
    7090:	f1 cf       	rjmp	.-30     	; 0x7074 <TimerM_dequeue+0x10>

00007092 <TimerM_StdControl_start>:

//-------------------------------------------------------------------------
inline result_t TimerM_StdControl_start(void)
{
    return SUCCESS;
}
    7092:	81 e0       	ldi	r24, 0x01	; 1
    7094:	08 95       	ret

00007096 <TimerM_Clock_setInterval>:
}

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t arg_0xa362928)
{
    HPLClock_Clock_setInterval(arg_0xa362928);
    7096:	0e 94 13 36 	call	0x6c26	; 0x6c26 <HPLClock_Clock_setInterval>
}
    709a:	08 95       	ret

0000709c <TimerM_Clock_getInterval>:
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_getInterval(void)
{
    unsigned char result;

    result = HPLClock_Clock_getInterval();
    709c:	0e 94 11 36 	call	0x6c22	; 0x6c22 <HPLClock_Clock_getInterval>
    return result;
}
    70a0:	08 95       	ret

000070a2 <TimerM_Clock_readCounter>:
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_readCounter(void)
{
    unsigned char result;

    result = HPLClock_Clock_readCounter();
    70a2:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <HPLClock_Clock_readCounter>
    return result;
}
    70a6:	08 95       	ret

000070a8 <TimerM_Clock_fire>:
    }
}

//-------------------------------------------------------------------------
inline result_t TimerM_Clock_fire(void)
{
    70a8:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    70aa:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    70ae:	18 2f       	mov	r17, r24

        {
            if (TimerM_interval_outstanding == 0)
    70b0:	80 91 fd 06 	lds	r24, 0x06FD
    70b4:	90 91 fe 06 	lds	r25, 0x06FE
    70b8:	89 2b       	or	r24, r25
    70ba:	29 f4       	brne	.+10     	; 0x70c6 <TimerM_Clock_fire+0x1e>
            {
                postTask(TimerM_HandleFire, 12);
    70bc:	8e ed       	ldi	r24, 0xDE	; 222
    70be:	99 e3       	ldi	r25, 0x39	; 57
    70c0:	6c e0       	ldi	r22, 0x0C	; 12
    70c2:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_getInterval(void)
{
    unsigned char result;

    result = HPLClock_Clock_getInterval();
    70c6:	0e 94 11 36 	call	0x6c22	; 0x6c22 <HPLClock_Clock_getInterval>
            }
            else
            {
            }
            ;
            TimerM_interval_outstanding += TimerM_Clock_getInterval() + 1;
    70ca:	20 91 fd 06 	lds	r18, 0x06FD
    70ce:	30 91 fe 06 	lds	r19, 0x06FE
    70d2:	2f 5f       	subi	r18, 0xFF	; 255
    70d4:	3f 4f       	sbci	r19, 0xFF	; 255
    70d6:	28 0f       	add	r18, r24
    70d8:	31 1d       	adc	r19, r1
    70da:	30 93 fe 06 	sts	0x06FE, r19
    70de:	20 93 fd 06 	sts	0x06FD, r18
        }
        _atomic_end(_atomic);
    70e2:	81 2f       	mov	r24, r17
    70e4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    return SUCCESS;
}
    70e8:	81 e0       	ldi	r24, 0x01	; 1
    70ea:	1f 91       	pop	r17
    70ec:	08 95       	ret

000070ee <TimerM_adjustInterval>:
    return result;
}

//-------------------------------------------------------------------------
void TimerM_adjustInterval(void)
{
    70ee:	9f 92       	push	r9
    70f0:	af 92       	push	r10
    70f2:	bf 92       	push	r11
    70f4:	cf 92       	push	r12
    70f6:	df 92       	push	r13
    70f8:	ef 92       	push	r14
    70fa:	ff 92       	push	r15
    70fc:	0f 93       	push	r16
    70fe:	1f 93       	push	r17
    uint8_t i;
    uint8_t val = TimerM_maxTimerInterval;

    if (TimerM_mState)
    7100:	e0 90 e5 06 	lds	r14, 0x06E5
    7104:	f0 90 e6 06 	lds	r15, 0x06E6
    7108:	00 91 e7 06 	lds	r16, 0x06E7
    710c:	10 91 e8 06 	lds	r17, 0x06E8
    7110:	e1 14       	cp	r14, r1
    7112:	f1 04       	cpc	r15, r1
    7114:	01 05       	cpc	r16, r1
    7116:	11 05       	cpc	r17, r1
    7118:	09 f4       	brne	.+2      	; 0x711c <TimerM_adjustInterval+0x2e>
    711a:	4e c0       	rjmp	.+156    	; 0x71b8 <TimerM_adjustInterval+0xca>
    711c:	e5 e0       	ldi	r30, 0x05	; 5
    711e:	f7 e0       	ldi	r31, 0x07	; 7
    7120:	96 ee       	ldi	r25, 0xE6	; 230
    7122:	99 2e       	mov	r9, r25
    7124:	20 e0       	ldi	r18, 0x00	; 0
    7126:	30 e0       	ldi	r19, 0x00	; 0
    {
        for (i = 0; i < NUM_TIMERS; i++)
        {
            if (TimerM_mState & (0x1L << i) && TimerM_mTimerList[i].ticksLeft
    7128:	81 e0       	ldi	r24, 0x01	; 1
    712a:	a8 2e       	mov	r10, r24
    712c:	b1 2c       	mov	r11, r1
    712e:	c1 2c       	mov	r12, r1
    7130:	d1 2c       	mov	r13, r1
    7132:	d6 01       	movw	r26, r12
    7134:	c5 01       	movw	r24, r10
    7136:	02 2e       	mov	r0, r18
    7138:	04 c0       	rjmp	.+8      	; 0x7142 <TimerM_adjustInterval+0x54>
    713a:	88 0f       	add	r24, r24
    713c:	99 1f       	adc	r25, r25
    713e:	aa 1f       	adc	r26, r26
    7140:	bb 1f       	adc	r27, r27
    7142:	0a 94       	dec	r0
    7144:	d2 f7       	brpl	.-12     	; 0x713a <TimerM_adjustInterval+0x4c>
    7146:	8e 21       	and	r24, r14
    7148:	9f 21       	and	r25, r15
    714a:	a0 23       	and	r26, r16
    714c:	b1 23       	and	r27, r17
    714e:	00 97       	sbiw	r24, 0x00	; 0
    7150:	a1 05       	cpc	r26, r1
    7152:	b1 05       	cpc	r27, r1
    7154:	71 f0       	breq	.+28     	; 0x7172 <TimerM_adjustInterval+0x84>
    7156:	40 81       	ld	r20, Z
    7158:	51 81       	ldd	r21, Z+1	; 0x01
    715a:	62 81       	ldd	r22, Z+2	; 0x02
    715c:	73 81       	ldd	r23, Z+3	; 0x03
    715e:	89 2d       	mov	r24, r9
    7160:	90 e0       	ldi	r25, 0x00	; 0
    7162:	a0 e0       	ldi	r26, 0x00	; 0
    7164:	b0 e0       	ldi	r27, 0x00	; 0
    7166:	48 17       	cp	r20, r24
    7168:	59 07       	cpc	r21, r25
    716a:	6a 07       	cpc	r22, r26
    716c:	7b 07       	cpc	r23, r27
    716e:	0c f4       	brge	.+2      	; 0x7172 <TimerM_adjustInterval+0x84>
                < val)
            {
                val = TimerM_mTimerList[i].ticksLeft;
    7170:	94 2e       	mov	r9, r20
    7172:	2f 5f       	subi	r18, 0xFF	; 255
    7174:	3f 4f       	sbci	r19, 0xFF	; 255
    7176:	39 96       	adiw	r30, 0x09	; 9
    uint8_t i;
    uint8_t val = TimerM_maxTimerInterval;

    if (TimerM_mState)
    {
        for (i = 0; i < NUM_TIMERS; i++)
    7178:	20 31       	cpi	r18, 0x10	; 16
    717a:	31 05       	cpc	r19, r1
    717c:	d1 f6       	brne	.-76     	; 0x7132 <TimerM_adjustInterval+0x44>
            {
                val = TimerM_mTimerList[i].ticksLeft;
            }
        }
        {
            _atomic_t _atomic = _atomic_start();
    717e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    7182:	18 2f       	mov	r17, r24
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_readCounter(void)
{
    unsigned char result;

    result = HPLClock_Clock_readCounter();
    7184:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <HPLClock_Clock_readCounter>
        }
        {
            _atomic_t _atomic = _atomic_start();

            {
                i = TimerM_Clock_readCounter() + 3;
    7188:	8d 5f       	subi	r24, 0xFD	; 253
                if (val < i)
    718a:	98 16       	cp	r9, r24
    718c:	08 f4       	brcc	.+2      	; 0x7190 <TimerM_adjustInterval+0xa2>
    718e:	98 2e       	mov	r9, r24
                {
                    val = i;
                }
                TimerM_mInterval = val;
    7190:	90 92 eb 06 	sts	0x06EB, r9
}

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t arg_0xa362928)
{
    HPLClock_Clock_setInterval(arg_0xa362928);
    7194:	89 2d       	mov	r24, r9
    7196:	0e 94 13 36 	call	0x6c26	; 0x6c26 <HPLClock_Clock_setInterval>
                {
                    val = i;
                }
                TimerM_mInterval = val;
                TimerM_Clock_setInterval(TimerM_mInterval);
                TimerM_setIntervalFlag = 0;
    719a:	10 92 ec 06 	sts	0x06EC, r1
            }
            _atomic_end(_atomic);
    719e:	81 2f       	mov	r24, r17
    71a0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
                TimerM_setIntervalFlag = 0;
            }
            _atomic_end(_atomic);
        }
    }
}
    71a4:	1f 91       	pop	r17
    71a6:	0f 91       	pop	r16
    71a8:	ff 90       	pop	r15
    71aa:	ef 90       	pop	r14
    71ac:	df 90       	pop	r13
    71ae:	cf 90       	pop	r12
    71b0:	bf 90       	pop	r11
    71b2:	af 90       	pop	r10
    71b4:	9f 90       	pop	r9
    71b6:	08 95       	ret
        }
    }
    else
    {
        {
            _atomic_t _atomic = _atomic_start();
    71b8:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    71bc:	18 2f       	mov	r17, r24

            {
                TimerM_mInterval = TimerM_maxTimerInterval;
    71be:	86 ee       	ldi	r24, 0xE6	; 230
    71c0:	80 93 eb 06 	sts	0x06EB, r24
}

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t arg_0xa362928)
{
    HPLClock_Clock_setInterval(arg_0xa362928);
    71c4:	0e 94 13 36 	call	0x6c26	; 0x6c26 <HPLClock_Clock_setInterval>
            _atomic_t _atomic = _atomic_start();

            {
                TimerM_mInterval = TimerM_maxTimerInterval;
                TimerM_Clock_setInterval(TimerM_mInterval);
                TimerM_setIntervalFlag = 0;
    71c8:	10 92 ec 06 	sts	0x06EC, r1
            }
            _atomic_end(_atomic);
    71cc:	81 2f       	mov	r24, r17
    71ce:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    71d2:	e8 cf       	rjmp	.-48     	; 0x71a4 <TimerM_adjustInterval+0xb6>

000071d4 <TimerM_Timer_start>:
    return FAIL;
}

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_start(uint8_t id, char type, uint32_t interval)
{
    71d4:	af 92       	push	r10
    71d6:	bf 92       	push	r11
    71d8:	cf 92       	push	r12
    71da:	df 92       	push	r13
    71dc:	ef 92       	push	r14
    71de:	ff 92       	push	r15
    71e0:	0f 93       	push	r16
    71e2:	1f 93       	push	r17
    71e4:	59 01       	movw	r10, r18
    71e6:	6a 01       	movw	r12, r20
    uint8_t diff;

    if (id >= NUM_TIMERS)
    71e8:	80 31       	cpi	r24, 0x10	; 16
    71ea:	10 f4       	brcc	.+4      	; 0x71f0 <TimerM_Timer_start+0x1c>
    {
        return FAIL;
    }
    if (type > TIMER_ONE_SHOT)
    71ec:	62 30       	cpi	r22, 0x02	; 2
    71ee:	54 f0       	brlt	.+20     	; 0x7204 <TimerM_Timer_start+0x30>
                TimerM_setIntervalFlag = 0;
            }
        }
        _atomic_end(_atomic);
    }
    return SUCCESS;
    71f0:	80 e0       	ldi	r24, 0x00	; 0
}
    71f2:	1f 91       	pop	r17
    71f4:	0f 91       	pop	r16
    71f6:	ff 90       	pop	r15
    71f8:	ef 90       	pop	r14
    71fa:	df 90       	pop	r13
    71fc:	cf 90       	pop	r12
    71fe:	bf 90       	pop	r11
    7200:	af 90       	pop	r10
    7202:	08 95       	ret
    }
    if (type > TIMER_ONE_SHOT)
    {
        return FAIL;
    }
    if (type == TIMER_REPEAT && interval <= 2)
    7204:	66 23       	and	r22, r22
    7206:	29 f4       	brne	.+10     	; 0x7212 <TimerM_Timer_start+0x3e>
    7208:	23 30       	cpi	r18, 0x03	; 3
    720a:	31 05       	cpc	r19, r1
    720c:	41 05       	cpc	r20, r1
    720e:	51 05       	cpc	r21, r1
    7210:	78 f3       	brcs	.-34     	; 0x71f0 <TimerM_Timer_start+0x1c>
    {
        return FAIL;
    }
    TimerM_mTimerList[id].ticks = interval;
    7212:	e8 2e       	mov	r14, r24
    7214:	ff 24       	eor	r15, r15
    7216:	87 01       	movw	r16, r14
    7218:	00 0f       	add	r16, r16
    721a:	11 1f       	adc	r17, r17
    721c:	00 0f       	add	r16, r16
    721e:	11 1f       	adc	r17, r17
    7220:	00 0f       	add	r16, r16
    7222:	11 1f       	adc	r17, r17
    7224:	0e 0d       	add	r16, r14
    7226:	1f 1d       	adc	r17, r15
    7228:	00 50       	subi	r16, 0x00	; 0
    722a:	19 4f       	sbci	r17, 0xF9	; 249
    722c:	f8 01       	movw	r30, r16
    722e:	a1 82       	std	Z+1, r10	; 0x01
    7230:	b2 82       	std	Z+2, r11	; 0x02
    7232:	c3 82       	std	Z+3, r12	; 0x03
    7234:	d4 82       	std	Z+4, r13	; 0x04
    TimerM_mTimerList[id].type = type;
    7236:	60 83       	st	Z, r22
    {
        _atomic_t _atomic = _atomic_start();
    7238:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    723c:	f8 2e       	mov	r15, r24
//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_readCounter(void)
{
    unsigned char result;

    result = HPLClock_Clock_readCounter();
    723e:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <HPLClock_Clock_readCounter>
    {
        _atomic_t _atomic = _atomic_start();

        {
            diff = TimerM_Clock_readCounter();
            interval += diff;
    7242:	a8 0e       	add	r10, r24
    7244:	b1 1c       	adc	r11, r1
    7246:	c1 1c       	adc	r12, r1
    7248:	d1 1c       	adc	r13, r1
            TimerM_mTimerList[id].ticksLeft = interval;
    724a:	f8 01       	movw	r30, r16
    724c:	a5 82       	std	Z+5, r10	; 0x05
    724e:	b6 82       	std	Z+6, r11	; 0x06
    7250:	c7 82       	std	Z+7, r12	; 0x07
    7252:	d0 86       	std	Z+8, r13	; 0x08
            TimerM_mState |= 0x1L << id;
    7254:	21 e0       	ldi	r18, 0x01	; 1
    7256:	30 e0       	ldi	r19, 0x00	; 0
    7258:	40 e0       	ldi	r20, 0x00	; 0
    725a:	50 e0       	ldi	r21, 0x00	; 0
    725c:	04 c0       	rjmp	.+8      	; 0x7266 <TimerM_Timer_start+0x92>
    725e:	22 0f       	add	r18, r18
    7260:	33 1f       	adc	r19, r19
    7262:	44 1f       	adc	r20, r20
    7264:	55 1f       	adc	r21, r21
    7266:	ea 94       	dec	r14
    7268:	d2 f7       	brpl	.-12     	; 0x725e <TimerM_Timer_start+0x8a>
    726a:	80 91 e5 06 	lds	r24, 0x06E5
    726e:	90 91 e6 06 	lds	r25, 0x06E6
    7272:	a0 91 e7 06 	lds	r26, 0x06E7
    7276:	b0 91 e8 06 	lds	r27, 0x06E8
    727a:	82 2b       	or	r24, r18
    727c:	93 2b       	or	r25, r19
    727e:	a4 2b       	or	r26, r20
    7280:	b5 2b       	or	r27, r21
    7282:	80 93 e5 06 	sts	0x06E5, r24
    7286:	90 93 e6 06 	sts	0x06E6, r25
    728a:	a0 93 e7 06 	sts	0x06E7, r26
    728e:	b0 93 e8 06 	sts	0x06E8, r27
            if (interval < TimerM_mInterval)
    7292:	80 91 eb 06 	lds	r24, 0x06EB
    7296:	90 e0       	ldi	r25, 0x00	; 0
    7298:	a0 e0       	ldi	r26, 0x00	; 0
    729a:	b0 e0       	ldi	r27, 0x00	; 0
    729c:	a8 16       	cp	r10, r24
    729e:	b9 06       	cpc	r11, r25
    72a0:	ca 06       	cpc	r12, r26
    72a2:	db 06       	cpc	r13, r27
    72a4:	28 f0       	brcs	.+10     	; 0x72b0 <TimerM_Timer_start+0xdc>
                TimerM_mInterval = interval;
                TimerM_Clock_setInterval(TimerM_mInterval);
                TimerM_setIntervalFlag = 0;
            }
        }
        _atomic_end(_atomic);
    72a6:	8f 2d       	mov	r24, r15
    72a8:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    72ac:	81 e0       	ldi	r24, 0x01	; 1
    72ae:	a1 cf       	rjmp	.-190    	; 0x71f2 <TimerM_Timer_start+0x1e>
            interval += diff;
            TimerM_mTimerList[id].ticksLeft = interval;
            TimerM_mState |= 0x1L << id;
            if (interval < TimerM_mInterval)
            {
                TimerM_mInterval = interval;
    72b0:	a0 92 eb 06 	sts	0x06EB, r10
}

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t arg_0xa362928)
{
    HPLClock_Clock_setInterval(arg_0xa362928);
    72b4:	8a 2d       	mov	r24, r10
    72b6:	0e 94 13 36 	call	0x6c26	; 0x6c26 <HPLClock_Clock_setInterval>
            TimerM_mState |= 0x1L << id;
            if (interval < TimerM_mInterval)
            {
                TimerM_mInterval = interval;
                TimerM_Clock_setInterval(TimerM_mInterval);
                TimerM_setIntervalFlag = 0;
    72ba:	10 92 ec 06 	sts	0x06EC, r1
    72be:	f3 cf       	rjmp	.-26     	; 0x72a6 <TimerM_Timer_start+0xd2>

000072c0 <TimerM_Timer_stop>:
    return TimerM_Clock_setRate(TimerM_mInterval, TimerM_mScale);
}

//-------------------------------------------------------------------------
inline uint8_t TimerM_Timer_stop(uint8_t id)
{
    72c0:	ef 92       	push	r14
    72c2:	ff 92       	push	r15
    72c4:	0f 93       	push	r16
    72c6:	1f 93       	push	r17
    if (id > NUM_TIMERS)
    72c8:	81 31       	cpi	r24, 0x11	; 17
    72ca:	e0 f4       	brcc	.+56     	; 0x7304 <TimerM_Timer_stop+0x44>
    {
        return FAIL;
    }
    if (TimerM_mState & (0x1L << id))
    72cc:	31 e0       	ldi	r19, 0x01	; 1
    72ce:	e3 2e       	mov	r14, r19
    72d0:	f1 2c       	mov	r15, r1
    72d2:	01 2d       	mov	r16, r1
    72d4:	11 2d       	mov	r17, r1
    72d6:	04 c0       	rjmp	.+8      	; 0x72e0 <TimerM_Timer_stop+0x20>
    72d8:	ee 0c       	add	r14, r14
    72da:	ff 1c       	adc	r15, r15
    72dc:	00 1f       	adc	r16, r16
    72de:	11 1f       	adc	r17, r17
    72e0:	8a 95       	dec	r24
    72e2:	d2 f7       	brpl	.-12     	; 0x72d8 <TimerM_Timer_stop+0x18>
    72e4:	80 91 e5 06 	lds	r24, 0x06E5
    72e8:	90 91 e6 06 	lds	r25, 0x06E6
    72ec:	a0 91 e7 06 	lds	r26, 0x06E7
    72f0:	b0 91 e8 06 	lds	r27, 0x06E8
    72f4:	8e 21       	and	r24, r14
    72f6:	9f 21       	and	r25, r15
    72f8:	a0 23       	and	r26, r16
    72fa:	b1 23       	and	r27, r17
    72fc:	00 97       	sbiw	r24, 0x00	; 0
    72fe:	a1 05       	cpc	r26, r1
    7300:	b1 05       	cpc	r27, r1
    7302:	31 f4       	brne	.+12     	; 0x7310 <TimerM_Timer_stop+0x50>

        TimerM_mState &= ~(0x1L << id);
        _atomic_end(_atomic);
        if (!TimerM_mState)
        {
            TimerM_setIntervalFlag = 1;
    7304:	80 e0       	ldi	r24, 0x00	; 0
        }
        return SUCCESS;
    }
    return FAIL;
}
    7306:	1f 91       	pop	r17
    7308:	0f 91       	pop	r16
    730a:	ff 90       	pop	r15
    730c:	ef 90       	pop	r14
    730e:	08 95       	ret
    {
        return FAIL;
    }
    if (TimerM_mState & (0x1L << id))
    {
        _atomic_t _atomic = _atomic_start();
    7310:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        TimerM_mState &= ~(0x1L << id);
    7314:	a8 01       	movw	r20, r16
    7316:	97 01       	movw	r18, r14
    7318:	20 95       	com	r18
    731a:	30 95       	com	r19
    731c:	40 95       	com	r20
    731e:	50 95       	com	r21
    7320:	e0 90 e5 06 	lds	r14, 0x06E5
    7324:	f0 90 e6 06 	lds	r15, 0x06E6
    7328:	00 91 e7 06 	lds	r16, 0x06E7
    732c:	10 91 e8 06 	lds	r17, 0x06E8
    7330:	e2 22       	and	r14, r18
    7332:	f3 22       	and	r15, r19
    7334:	04 23       	and	r16, r20
    7336:	15 23       	and	r17, r21
    7338:	e0 92 e5 06 	sts	0x06E5, r14
    733c:	f0 92 e6 06 	sts	0x06E6, r15
    7340:	00 93 e7 06 	sts	0x06E7, r16
    7344:	10 93 e8 06 	sts	0x06E8, r17
        _atomic_end(_atomic);
    7348:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
        if (!TimerM_mState)
    734c:	80 91 e5 06 	lds	r24, 0x06E5
    7350:	90 91 e6 06 	lds	r25, 0x06E6
    7354:	a0 91 e7 06 	lds	r26, 0x06E7
    7358:	b0 91 e8 06 	lds	r27, 0x06E8
    735c:	00 97       	sbiw	r24, 0x00	; 0
    735e:	a1 05       	cpc	r26, r1
    7360:	b1 05       	cpc	r27, r1
    7362:	41 f4       	brne	.+16     	; 0x7374 <TimerM_Timer_stop+0xb4>
        {
            TimerM_setIntervalFlag = 1;
    7364:	81 e0       	ldi	r24, 0x01	; 1
    7366:	80 93 ec 06 	sts	0x06EC, r24
        }
        return SUCCESS;
    }
    return FAIL;
}
    736a:	1f 91       	pop	r17
    736c:	0f 91       	pop	r16
    736e:	ff 90       	pop	r15
    7370:	ef 90       	pop	r14
    7372:	08 95       	ret
    {
        _atomic_t _atomic = _atomic_start();

        TimerM_mState &= ~(0x1L << id);
        _atomic_end(_atomic);
        if (!TimerM_mState)
    7374:	81 e0       	ldi	r24, 0x01	; 1
    7376:	c7 cf       	rjmp	.-114    	; 0x7306 <TimerM_Timer_stop+0x46>

00007378 <TimerM_Timer_fired>:
}

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_fired(uint8_t id)
{
    GenericTimerFired(id);
    7378:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <GenericTimerFired>
    return SUCCESS;
}
    737c:	81 e0       	ldi	r24, 0x01	; 1
    737e:	08 95       	ret

00007380 <TimerM_Clock_setRate>:
//-------------------------------------------------------------------------
inline result_t TimerM_Clock_setRate(char arg_0xa369e18, char arg_0xa369f58)
{
    unsigned char result;

    result = HPLClock_Clock_setRate(arg_0xa369e18, arg_0xa369f58);
    7380:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <HPLClock_Clock_setRate>
    return result;
}
    7384:	08 95       	ret

00007386 <TimerM_StdControl_init>:
{
    TimerM_maxTimerInterval = 230
};
inline result_t TimerM_StdControl_init(void)
{
    TimerM_mState = 0;
    7386:	10 92 e5 06 	sts	0x06E5, r1
    738a:	10 92 e6 06 	sts	0x06E6, r1
    738e:	10 92 e7 06 	sts	0x06E7, r1
    7392:	10 92 e8 06 	sts	0x06E8, r1
    TimerM_setIntervalFlag = 0;
    7396:	10 92 ec 06 	sts	0x06EC, r1
    TimerM_queue_head = TimerM_queue_tail = -1;
    739a:	8f ef       	ldi	r24, 0xFF	; 255
    739c:	80 93 e4 06 	sts	0x06E4, r24
    73a0:	80 93 ff 06 	sts	0x06FF, r24
    TimerM_queue_size = 0;
    73a4:	10 92 e9 06 	sts	0x06E9, r1
    TimerM_mScale = 3;
    73a8:	83 e0       	ldi	r24, 0x03	; 3
    73aa:	80 93 ea 06 	sts	0x06EA, r24
    TimerM_mInterval = TimerM_maxTimerInterval;
    73ae:	86 ee       	ldi	r24, 0xE6	; 230
    73b0:	80 93 eb 06 	sts	0x06EB, r24
//-------------------------------------------------------------------------
inline result_t TimerM_Clock_setRate(char arg_0xa369e18, char arg_0xa369f58)
{
    unsigned char result;

    result = HPLClock_Clock_setRate(arg_0xa369e18, arg_0xa369f58);
    73b4:	63 e0       	ldi	r22, 0x03	; 3
    73b6:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <HPLClock_Clock_setRate>
    TimerM_queue_head = TimerM_queue_tail = -1;
    TimerM_queue_size = 0;
    TimerM_mScale = 3;
    TimerM_mInterval = TimerM_maxTimerInterval;
    return TimerM_Clock_setRate(TimerM_mInterval, TimerM_mScale);
}
    73ba:	08 95       	ret

000073bc <TimerM_HandleFire>:
    }
}

//-------------------------------------------------------------------------
inline void TimerM_HandleFire(void)
{
    73bc:	3f 92       	push	r3
    73be:	4f 92       	push	r4
    73c0:	5f 92       	push	r5
    73c2:	6f 92       	push	r6
    73c4:	7f 92       	push	r7
    73c6:	8f 92       	push	r8
    73c8:	9f 92       	push	r9
    73ca:	af 92       	push	r10
    73cc:	bf 92       	push	r11
    73ce:	cf 92       	push	r12
    73d0:	df 92       	push	r13
    73d2:	ef 92       	push	r14
    73d4:	ff 92       	push	r15
    73d6:	0f 93       	push	r16
    73d8:	1f 93       	push	r17
    73da:	cf 93       	push	r28
    73dc:	df 93       	push	r29
    uint8_t i;
    uint16_t int_out;

    TimerM_setIntervalFlag = 1;
    73de:	81 e0       	ldi	r24, 0x01	; 1
    73e0:	80 93 ec 06 	sts	0x06EC, r24
    {
        _atomic_t _atomic = _atomic_start();
    73e4:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        {
            int_out = TimerM_interval_outstanding;
    73e8:	00 91 fd 06 	lds	r16, 0x06FD
    73ec:	10 91 fe 06 	lds	r17, 0x06FE
            TimerM_interval_outstanding = 0;
    73f0:	10 92 fe 06 	sts	0x06FE, r1
    73f4:	10 92 fd 06 	sts	0x06FD, r1
        }
        _atomic_end(_atomic);
    73f8:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    if (TimerM_mState)
    73fc:	20 91 e5 06 	lds	r18, 0x06E5
    7400:	30 91 e6 06 	lds	r19, 0x06E6
    7404:	40 91 e7 06 	lds	r20, 0x06E7
    7408:	50 91 e8 06 	lds	r21, 0x06E8
    740c:	21 15       	cp	r18, r1
    740e:	31 05       	cpc	r19, r1
    7410:	41 05       	cpc	r20, r1
    7412:	51 05       	cpc	r21, r1
    7414:	09 f4       	brne	.+2      	; 0x7418 <TimerM_HandleFire+0x5c>
    7416:	86 c0       	rjmp	.+268    	; 0x7524 <TimerM_HandleFire+0x168>
    7418:	70 e0       	ldi	r23, 0x00	; 0
    741a:	c7 2e       	mov	r12, r23
    741c:	77 e0       	ldi	r23, 0x07	; 7
    741e:	d7 2e       	mov	r13, r23
    7420:	c0 e0       	ldi	r28, 0x00	; 0
    7422:	d0 e0       	ldi	r29, 0x00	; 0
    {
        for (i = 0; i < NUM_TIMERS; i++)
        {
            if (TimerM_mState & (0x1L << i))
    7424:	61 e0       	ldi	r22, 0x01	; 1
    7426:	46 2e       	mov	r4, r22
    7428:	51 2c       	mov	r5, r1
    742a:	61 2c       	mov	r6, r1
    742c:	71 2c       	mov	r7, r1
            {
                TimerM_mTimerList[i].ticksLeft -= int_out;
    742e:	48 01       	movw	r8, r16
    7430:	aa 24       	eor	r10, r10
    7432:	bb 24       	eor	r11, r11
    7434:	11 c0       	rjmp	.+34     	; 0x7458 <TimerM_HandleFire+0x9c>
                    else
                    {
                        {
                        }
                        ;
                        TimerM_mTimerList[i].ticksLeft = TimerM_mInterval;
    7436:	21 96       	adiw	r28, 0x01	; 1
    7438:	89 e0       	ldi	r24, 0x09	; 9
    743a:	90 e0       	ldi	r25, 0x00	; 0
    743c:	c8 0e       	add	r12, r24
    743e:	d9 1e       	adc	r13, r25
        }
        _atomic_end(_atomic);
    }
    if (TimerM_mState)
    {
        for (i = 0; i < NUM_TIMERS; i++)
    7440:	c0 31       	cpi	r28, 0x10	; 16
    7442:	d1 05       	cpc	r29, r1
    7444:	09 f4       	brne	.+2      	; 0x7448 <TimerM_HandleFire+0x8c>
    7446:	6e c0       	rjmp	.+220    	; 0x7524 <TimerM_HandleFire+0x168>
    7448:	20 91 e5 06 	lds	r18, 0x06E5
    744c:	30 91 e6 06 	lds	r19, 0x06E6
    7450:	40 91 e7 06 	lds	r20, 0x06E7
    7454:	50 91 e8 06 	lds	r21, 0x06E8
            int_out = TimerM_interval_outstanding;
            TimerM_interval_outstanding = 0;
        }
        _atomic_end(_atomic);
    }
    if (TimerM_mState)
    7458:	3c 2e       	mov	r3, r28
    {
        for (i = 0; i < NUM_TIMERS; i++)
        {
            if (TimerM_mState & (0x1L << i))
    745a:	83 01       	movw	r16, r6
    745c:	72 01       	movw	r14, r4
    745e:	0c 2e       	mov	r0, r28
    7460:	04 c0       	rjmp	.+8      	; 0x746a <TimerM_HandleFire+0xae>
    7462:	ee 0c       	add	r14, r14
    7464:	ff 1c       	adc	r15, r15
    7466:	00 1f       	adc	r16, r16
    7468:	11 1f       	adc	r17, r17
    746a:	0a 94       	dec	r0
    746c:	d2 f7       	brpl	.-12     	; 0x7462 <TimerM_HandleFire+0xa6>
    746e:	2e 21       	and	r18, r14
    7470:	3f 21       	and	r19, r15
    7472:	40 23       	and	r20, r16
    7474:	51 23       	and	r21, r17
    7476:	21 15       	cp	r18, r1
    7478:	31 05       	cpc	r19, r1
    747a:	41 05       	cpc	r20, r1
    747c:	51 05       	cpc	r21, r1
    747e:	d9 f2       	breq	.-74     	; 0x7436 <TimerM_HandleFire+0x7a>
            {
                TimerM_mTimerList[i].ticksLeft -= int_out;
    7480:	f6 01       	movw	r30, r12
    7482:	85 81       	ldd	r24, Z+5	; 0x05
    7484:	96 81       	ldd	r25, Z+6	; 0x06
    7486:	a7 81       	ldd	r26, Z+7	; 0x07
    7488:	b0 85       	ldd	r27, Z+8	; 0x08
    748a:	88 19       	sub	r24, r8
    748c:	99 09       	sbc	r25, r9
    748e:	aa 09       	sbc	r26, r10
    7490:	bb 09       	sbc	r27, r11
    7492:	85 83       	std	Z+5, r24	; 0x05
    7494:	96 83       	std	Z+6, r25	; 0x06
    7496:	a7 83       	std	Z+7, r26	; 0x07
    7498:	b0 87       	std	Z+8, r27	; 0x08
                if (TimerM_mTimerList[i].ticksLeft <= 2)
    749a:	03 97       	sbiw	r24, 0x03	; 3
    749c:	a1 05       	cpc	r26, r1
    749e:	b1 05       	cpc	r27, r1
    74a0:	54 f6       	brge	.-108    	; 0x7436 <TimerM_HandleFire+0x7a>
                {
                    if (postTask(TimerM_signalOneTimer, 7))
    74a2:	8c ec       	ldi	r24, 0xCC	; 204
    74a4:	9a e3       	ldi	r25, 0x3A	; 58
    74a6:	67 e0       	ldi	r22, 0x07	; 7
    74a8:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    74ac:	88 23       	and	r24, r24
    74ae:	09 f4       	brne	.+2      	; 0x74b2 <TimerM_HandleFire+0xf6>
    74b0:	57 c0       	rjmp	.+174    	; 0x7560 <TimerM_HandleFire+0x1a4>
                    {
                        if (TimerM_mTimerList[i].type == TIMER_REPEAT)
    74b2:	f6 01       	movw	r30, r12
    74b4:	80 81       	ld	r24, Z
    74b6:	88 23       	and	r24, r24
    74b8:	09 f4       	brne	.+2      	; 0x74bc <TimerM_HandleFire+0x100>
    74ba:	5d c0       	rjmp	.+186    	; 0x7576 <TimerM_HandleFire+0x1ba>
                            TimerM_mTimerList[i].ticksLeft +=
                                TimerM_mTimerList[i].ticks;
                        }
                        else
                        {
                            TimerM_mState &= ~(0x1L << i);
    74bc:	d8 01       	movw	r26, r16
    74be:	c7 01       	movw	r24, r14
    74c0:	80 95       	com	r24
    74c2:	90 95       	com	r25
    74c4:	a0 95       	com	r26
    74c6:	b0 95       	com	r27
    74c8:	20 91 e5 06 	lds	r18, 0x06E5
    74cc:	30 91 e6 06 	lds	r19, 0x06E6
    74d0:	40 91 e7 06 	lds	r20, 0x06E7
    74d4:	50 91 e8 06 	lds	r21, 0x06E8
    74d8:	28 23       	and	r18, r24
    74da:	39 23       	and	r19, r25
    74dc:	4a 23       	and	r20, r26
    74de:	5b 23       	and	r21, r27
    74e0:	20 93 e5 06 	sts	0x06E5, r18
    74e4:	30 93 e6 06 	sts	0x06E6, r19
    74e8:	40 93 e7 06 	sts	0x06E7, r20
    74ec:	50 93 e8 06 	sts	0x06E8, r21
}

//-------------------------------------------------------------------------
inline void TimerM_enqueue(uint8_t value)
{
    if (TimerM_queue_tail == NUM_TIMERS - 1)
    74f0:	e0 91 e4 06 	lds	r30, 0x06E4
    74f4:	ef 30       	cpi	r30, 0x0F	; 15
    74f6:	09 f4       	brne	.+2      	; 0x74fa <TimerM_HandleFire+0x13e>
    74f8:	ef ef       	ldi	r30, 0xFF	; 255
    {
        TimerM_queue_tail = -1;
    }
    TimerM_queue_tail++;
    74fa:	ef 5f       	subi	r30, 0xFF	; 255
    74fc:	e0 93 e4 06 	sts	0x06E4, r30
    TimerM_queue_size++;
    7500:	80 91 e9 06 	lds	r24, 0x06E9
    7504:	8f 5f       	subi	r24, 0xFF	; 255
    7506:	80 93 e9 06 	sts	0x06E9, r24
    TimerM_queue[(uint8_t) TimerM_queue_tail] = value;
    750a:	f0 e0       	ldi	r31, 0x00	; 0
    750c:	e3 51       	subi	r30, 0x13	; 19
    750e:	f9 4f       	sbci	r31, 0xF9	; 249
    7510:	30 82       	st	Z, r3
                    else
                    {
                        {
                        }
                        ;
                        TimerM_mTimerList[i].ticksLeft = TimerM_mInterval;
    7512:	21 96       	adiw	r28, 0x01	; 1
    7514:	89 e0       	ldi	r24, 0x09	; 9
    7516:	90 e0       	ldi	r25, 0x00	; 0
    7518:	c8 0e       	add	r12, r24
    751a:	d9 1e       	adc	r13, r25
        }
        _atomic_end(_atomic);
    }
    if (TimerM_mState)
    {
        for (i = 0; i < NUM_TIMERS; i++)
    751c:	c0 31       	cpi	r28, 0x10	; 16
    751e:	d1 05       	cpc	r29, r1
    7520:	09 f0       	breq	.+2      	; 0x7524 <TimerM_HandleFire+0x168>
    7522:	92 cf       	rjmp	.-220    	; 0x7448 <TimerM_HandleFire+0x8c>
                }
            }
        }
    }
    {
        _atomic_t _atomic = _atomic_start();
    7524:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>

        int_out = TimerM_interval_outstanding;
    7528:	00 91 fd 06 	lds	r16, 0x06FD
    752c:	10 91 fe 06 	lds	r17, 0x06FE
        _atomic_end(_atomic);
    7530:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    }
    if (int_out == 0)
    7534:	01 2b       	or	r16, r17
    7536:	11 f4       	brne	.+4      	; 0x753c <TimerM_HandleFire+0x180>
    {
        TimerM_adjustInterval();
    7538:	0e 94 77 38 	call	0x70ee	; 0x70ee <TimerM_adjustInterval>
    }
}
    753c:	df 91       	pop	r29
    753e:	cf 91       	pop	r28
    7540:	1f 91       	pop	r17
    7542:	0f 91       	pop	r16
    7544:	ff 90       	pop	r15
    7546:	ef 90       	pop	r14
    7548:	df 90       	pop	r13
    754a:	cf 90       	pop	r12
    754c:	bf 90       	pop	r11
    754e:	af 90       	pop	r10
    7550:	9f 90       	pop	r9
    7552:	8f 90       	pop	r8
    7554:	7f 90       	pop	r7
    7556:	6f 90       	pop	r6
    7558:	5f 90       	pop	r5
    755a:	4f 90       	pop	r4
    755c:	3f 90       	pop	r3
    755e:	08 95       	ret
                    else
                    {
                        {
                        }
                        ;
                        TimerM_mTimerList[i].ticksLeft = TimerM_mInterval;
    7560:	80 91 eb 06 	lds	r24, 0x06EB
    7564:	90 e0       	ldi	r25, 0x00	; 0
    7566:	a0 e0       	ldi	r26, 0x00	; 0
    7568:	b0 e0       	ldi	r27, 0x00	; 0
    756a:	f6 01       	movw	r30, r12
    756c:	85 83       	std	Z+5, r24	; 0x05
    756e:	96 83       	std	Z+6, r25	; 0x06
    7570:	a7 83       	std	Z+7, r26	; 0x07
    7572:	b0 87       	std	Z+8, r27	; 0x08
    7574:	60 cf       	rjmp	.-320    	; 0x7436 <TimerM_HandleFire+0x7a>
                {
                    if (postTask(TimerM_signalOneTimer, 7))
                    {
                        if (TimerM_mTimerList[i].type == TIMER_REPEAT)
                        {
                            TimerM_mTimerList[i].ticksLeft +=
    7576:	85 81       	ldd	r24, Z+5	; 0x05
    7578:	96 81       	ldd	r25, Z+6	; 0x06
    757a:	a7 81       	ldd	r26, Z+7	; 0x07
    757c:	b0 85       	ldd	r27, Z+8	; 0x08
    757e:	21 81       	ldd	r18, Z+1	; 0x01
    7580:	32 81       	ldd	r19, Z+2	; 0x02
    7582:	43 81       	ldd	r20, Z+3	; 0x03
    7584:	54 81       	ldd	r21, Z+4	; 0x04
    7586:	82 0f       	add	r24, r18
    7588:	93 1f       	adc	r25, r19
    758a:	a4 1f       	adc	r26, r20
    758c:	b5 1f       	adc	r27, r21
    758e:	85 83       	std	Z+5, r24	; 0x05
    7590:	96 83       	std	Z+6, r25	; 0x06
    7592:	a7 83       	std	Z+7, r26	; 0x07
    7594:	b0 87       	std	Z+8, r27	; 0x08
    7596:	ac cf       	rjmp	.-168    	; 0x74f0 <TimerM_HandleFire+0x134>

00007598 <TimerM_signalOneTimer>:
}

//-------------------------------------------------------------------------
inline uint8_t TimerM_dequeue(void)
{
    if (TimerM_queue_size == 0)
    7598:	80 91 e9 06 	lds	r24, 0x06E9
    759c:	88 23       	and	r24, r24
    759e:	91 f0       	breq	.+36     	; 0x75c4 <TimerM_signalOneTimer+0x2c>
    {
        return NUM_TIMERS;
    }
    if (TimerM_queue_head == NUM_TIMERS - 1)
    75a0:	e0 91 ff 06 	lds	r30, 0x06FF
    75a4:	ef 30       	cpi	r30, 0x0F	; 15
    75a6:	79 f0       	breq	.+30     	; 0x75c6 <TimerM_signalOneTimer+0x2e>
    {
        TimerM_queue_head = -1;
    }
    TimerM_queue_head++;
    75a8:	ef 5f       	subi	r30, 0xFF	; 255
    75aa:	e0 93 ff 06 	sts	0x06FF, r30
    TimerM_queue_size--;
    75ae:	81 50       	subi	r24, 0x01	; 1
    75b0:	80 93 e9 06 	sts	0x06E9, r24
    return TimerM_queue[(uint8_t) TimerM_queue_head];
    75b4:	f0 e0       	ldi	r31, 0x00	; 0
    75b6:	e3 51       	subi	r30, 0x13	; 19
    75b8:	f9 4f       	sbci	r31, 0xF9	; 249
    75ba:	80 81       	ld	r24, Z
//-------------------------------------------------------------------------
inline void TimerM_signalOneTimer(void)
{
    uint8_t itimer = TimerM_dequeue();

    if (itimer < NUM_TIMERS)
    75bc:	80 31       	cpi	r24, 0x10	; 16
    75be:	10 f4       	brcc	.+4      	; 0x75c4 <TimerM_signalOneTimer+0x2c>
}

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_fired(uint8_t id)
{
    GenericTimerFired(id);
    75c0:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <GenericTimerFired>
    75c4:	08 95       	ret
    75c6:	ef ef       	ldi	r30, 0xFF	; 255
    75c8:	ef cf       	rjmp	.-34     	; 0x75a8 <TimerM_signalOneTimer+0x10>

000075ca <is_host_lsb>:
   along with LiteOS.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "byteorder.h"
//-------------------------------------------------------------------------
inline int is_host_lsb(void)
{
    75ca:	df 93       	push	r29
    75cc:	cf 93       	push	r28
    75ce:	00 d0       	rcall	.+0      	; 0x75d0 <is_host_lsb+0x6>
    75d0:	cd b7       	in	r28, 0x3d	; 61
    75d2:	de b7       	in	r29, 0x3e	; 62
    const uint8_t n[2] = {
        1, 0
    };
    75d4:	81 e0       	ldi	r24, 0x01	; 1
    75d6:	89 83       	std	Y+1, r24	; 0x01
    75d8:	1a 82       	std	Y+2, r1	; 0x02
    75da:	20 e0       	ldi	r18, 0x00	; 0
    75dc:	30 e0       	ldi	r19, 0x00	; 0
    75de:	89 81       	ldd	r24, Y+1	; 0x01
    75e0:	9a 81       	ldd	r25, Y+2	; 0x02
    75e2:	01 97       	sbiw	r24, 0x01	; 1
    75e4:	31 f0       	breq	.+12     	; 0x75f2 <is_host_lsb+0x28>
    return *(uint16_t *) n == 1;
}
    75e6:	c9 01       	movw	r24, r18
    75e8:	0f 90       	pop	r0
    75ea:	0f 90       	pop	r0
    75ec:	cf 91       	pop	r28
    75ee:	df 91       	pop	r29
    75f0:	08 95       	ret
//-------------------------------------------------------------------------
inline int is_host_lsb(void)
{
    const uint8_t n[2] = {
        1, 0
    };
    75f2:	21 e0       	ldi	r18, 0x01	; 1
    75f4:	30 e0       	ldi	r19, 0x00	; 0
    return *(uint16_t *) n == 1;
}
    75f6:	c9 01       	movw	r24, r18
    75f8:	0f 90       	pop	r0
    75fa:	0f 90       	pop	r0
    75fc:	cf 91       	pop	r28
    75fe:	df 91       	pop	r29
    7600:	08 95       	ret

00007602 <toLSB16>:

//-------------------------------------------------------------------------
inline uint16_t toLSB16(uint16_t a)
{
    7602:	df 93       	push	r29
    7604:	cf 93       	push	r28
    7606:	00 d0       	rcall	.+0      	; 0x7608 <toLSB16+0x6>
    7608:	cd b7       	in	r28, 0x3d	; 61
    760a:	de b7       	in	r29, 0x3e	; 62
    760c:	9c 01       	movw	r18, r24
//-------------------------------------------------------------------------
inline int is_host_lsb(void)
{
    const uint8_t n[2] = {
        1, 0
    };
    760e:	81 e0       	ldi	r24, 0x01	; 1
    7610:	89 83       	std	Y+1, r24	; 0x01
    7612:	1a 82       	std	Y+2, r1	; 0x02
}

//-------------------------------------------------------------------------
inline uint16_t toLSB16(uint16_t a)
{
    return is_host_lsb()? a : (a << 8) | (a >> 8);
    7614:	89 81       	ldd	r24, Y+1	; 0x01
    7616:	9a 81       	ldd	r25, Y+2	; 0x02
    7618:	01 97       	sbiw	r24, 0x01	; 1
    761a:	19 f0       	breq	.+6      	; 0x7622 <toLSB16+0x20>
    761c:	82 2f       	mov	r24, r18
    761e:	23 2f       	mov	r18, r19
    7620:	38 2f       	mov	r19, r24
}
    7622:	c9 01       	movw	r24, r18
    7624:	0f 90       	pop	r0
    7626:	0f 90       	pop	r0
    7628:	cf 91       	pop	r28
    762a:	df 91       	pop	r29
    762c:	08 95       	ret

0000762e <fromLSB16>:

//-------------------------------------------------------------------------
inline uint16_t fromLSB16(uint16_t a)
{
    762e:	df 93       	push	r29
    7630:	cf 93       	push	r28
    7632:	00 d0       	rcall	.+0      	; 0x7634 <fromLSB16+0x6>
    7634:	cd b7       	in	r28, 0x3d	; 61
    7636:	de b7       	in	r29, 0x3e	; 62
    7638:	9c 01       	movw	r18, r24
//-------------------------------------------------------------------------
inline int is_host_lsb(void)
{
    const uint8_t n[2] = {
        1, 0
    };
    763a:	81 e0       	ldi	r24, 0x01	; 1
    763c:	89 83       	std	Y+1, r24	; 0x01
    763e:	1a 82       	std	Y+2, r1	; 0x02
}

//-------------------------------------------------------------------------
inline uint16_t fromLSB16(uint16_t a)
{
    return is_host_lsb()? a : (a << 8) | (a >> 8);
    7640:	89 81       	ldd	r24, Y+1	; 0x01
    7642:	9a 81       	ldd	r25, Y+2	; 0x02
    7644:	01 97       	sbiw	r24, 0x01	; 1
    7646:	19 f0       	breq	.+6      	; 0x764e <fromLSB16+0x20>
    7648:	82 2f       	mov	r24, r18
    764a:	23 2f       	mov	r18, r19
    764c:	38 2f       	mov	r19, r24
}
    764e:	c9 01       	movw	r24, r18
    7650:	0f 90       	pop	r0
    7652:	0f 90       	pop	r0
    7654:	cf 91       	pop	r28
    7656:	df 91       	pop	r29
    7658:	08 95       	ret

0000765a <mystrcpy>:
   along with LiteOS.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "string.h"
//-------------------------------------------------------------------------
void mystrcpy(char *dest, const char *src)
{
    765a:	cf 93       	push	r28
    765c:	df 93       	push	r29
    765e:	eb 01       	movw	r28, r22
    int i;

    i = 0;
    while (src[i] != '\0')
    7660:	e8 81       	ld	r30, Y
    7662:	ee 23       	and	r30, r30
    7664:	b1 f0       	breq	.+44     	; 0x7692 <mystrcpy+0x38>
    7666:	20 e0       	ldi	r18, 0x00	; 0
    7668:	30 e0       	ldi	r19, 0x00	; 0
    766a:	a0 e0       	ldi	r26, 0x00	; 0
    766c:	b0 e0       	ldi	r27, 0x00	; 0
    {
        dest[i] = src[i];
    766e:	a8 0f       	add	r26, r24
    7670:	b9 1f       	adc	r27, r25
    7672:	ec 93       	st	X, r30
        i++;
    7674:	2f 5f       	subi	r18, 0xFF	; 255
    7676:	3f 4f       	sbci	r19, 0xFF	; 255
    7678:	d9 01       	movw	r26, r18
void mystrcpy(char *dest, const char *src)
{
    int i;

    i = 0;
    while (src[i] != '\0')
    767a:	fe 01       	movw	r30, r28
    767c:	e2 0f       	add	r30, r18
    767e:	f3 1f       	adc	r31, r19
    7680:	e0 81       	ld	r30, Z
    7682:	ee 23       	and	r30, r30
    7684:	a1 f7       	brne	.-24     	; 0x766e <mystrcpy+0x14>
    {
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';
    7686:	a8 0f       	add	r26, r24
    7688:	b9 1f       	adc	r27, r25
    768a:	1c 92       	st	X, r1
}
    768c:	df 91       	pop	r29
    768e:	cf 91       	pop	r28
    7690:	08 95       	ret
void mystrcpy(char *dest, const char *src)
{
    int i;

    i = 0;
    while (src[i] != '\0')
    7692:	a0 e0       	ldi	r26, 0x00	; 0
    7694:	b0 e0       	ldi	r27, 0x00	; 0
    7696:	f7 cf       	rjmp	.-18     	; 0x7686 <mystrcpy+0x2c>

00007698 <mystrncpy>:
    dest[i] = '\0';
}

//-------------------------------------------------------------------------
void mystrncpy(char *dest, const char *src, uint8_t n)
{
    7698:	cf 93       	push	r28
    769a:	df 93       	push	r29
    769c:	ec 01       	movw	r28, r24
    int i;

    for (i = 0; i < n; i++)
    769e:	50 e0       	ldi	r21, 0x00	; 0
    76a0:	41 15       	cp	r20, r1
    76a2:	51 05       	cpc	r21, r1
    76a4:	79 f0       	breq	.+30     	; 0x76c4 <mystrncpy+0x2c>
    76a6:	20 e0       	ldi	r18, 0x00	; 0
    76a8:	30 e0       	ldi	r19, 0x00	; 0
    {
        dest[i] = src[i];
    76aa:	fe 01       	movw	r30, r28
    76ac:	e2 0f       	add	r30, r18
    76ae:	f3 1f       	adc	r31, r19
    76b0:	db 01       	movw	r26, r22
    76b2:	a2 0f       	add	r26, r18
    76b4:	b3 1f       	adc	r27, r19
    76b6:	8c 91       	ld	r24, X
    76b8:	80 83       	st	Z, r24
//-------------------------------------------------------------------------
void mystrncpy(char *dest, const char *src, uint8_t n)
{
    int i;

    for (i = 0; i < n; i++)
    76ba:	2f 5f       	subi	r18, 0xFF	; 255
    76bc:	3f 4f       	sbci	r19, 0xFF	; 255
    76be:	24 17       	cp	r18, r20
    76c0:	35 07       	cpc	r19, r21
    76c2:	9c f3       	brlt	.-26     	; 0x76aa <mystrncpy+0x12>
    {
        dest[i] = src[i];
    }
}
    76c4:	df 91       	pop	r29
    76c6:	cf 91       	pop	r28
    76c8:	08 95       	ret

000076ca <strappend>:

//-------------------------------------------------------------------------
void strappend(char *base, char *string)
{
    76ca:	0f 93       	push	r16
    76cc:	1f 93       	push	r17
    76ce:	cf 93       	push	r28
    76d0:	df 93       	push	r29
    76d2:	8c 01       	movw	r16, r24
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    76d4:	fc 01       	movw	r30, r24
    76d6:	80 81       	ld	r24, Z
    76d8:	88 23       	and	r24, r24
    76da:	c1 f1       	breq	.+112    	; 0x774c <strappend+0x82>
    76dc:	40 e0       	ldi	r20, 0x00	; 0
    76de:	50 e0       	ldi	r21, 0x00	; 0
    {
        count++;
    76e0:	4f 5f       	subi	r20, 0xFF	; 255
    76e2:	5f 4f       	sbci	r21, 0xFF	; 255
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    76e4:	e8 01       	movw	r28, r16
    76e6:	c4 0f       	add	r28, r20
    76e8:	d5 1f       	adc	r29, r21
    76ea:	88 81       	ld	r24, Y
    76ec:	88 23       	and	r24, r24
    76ee:	c1 f7       	brne	.-16     	; 0x76e0 <strappend+0x16>
    {
        count++;
    76f0:	fb 01       	movw	r30, r22
    76f2:	80 81       	ld	r24, Z
    76f4:	88 23       	and	r24, r24
    76f6:	69 f1       	breq	.+90     	; 0x7752 <strappend+0x88>
    76f8:	20 e0       	ldi	r18, 0x00	; 0
    76fa:	30 e0       	ldi	r19, 0x00	; 0
    76fc:	2f 5f       	subi	r18, 0xFF	; 255
    76fe:	3f 4f       	sbci	r19, 0xFF	; 255
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    7700:	fb 01       	movw	r30, r22
    7702:	e2 0f       	add	r30, r18
    7704:	f3 1f       	adc	r31, r19
    7706:	80 81       	ld	r24, Z
    7708:	88 23       	and	r24, r24
    770a:	c1 f7       	brne	.-16     	; 0x76fc <strappend+0x32>
    770c:	90 e0       	ldi	r25, 0x00	; 0
    770e:	a0 e0       	ldi	r26, 0x00	; 0
    7710:	b0 e0       	ldi	r27, 0x00	; 0
    7712:	e8 01       	movw	r28, r16
    7714:	c4 0f       	add	r28, r20
    7716:	d5 1f       	adc	r29, r21
    7718:	e0 e0       	ldi	r30, 0x00	; 0
    771a:	f0 e0       	ldi	r31, 0x00	; 0

    length1 = mystrlen(base);
    length2 = mystrlen(string);
    for (i = 0; i < length2; i++)
    {
        base[i + length1] = string[i];
    771c:	ac 0f       	add	r26, r28
    771e:	bd 1f       	adc	r27, r29
    7720:	e6 0f       	add	r30, r22
    7722:	f7 1f       	adc	r31, r23
    7724:	80 81       	ld	r24, Z
    7726:	8c 93       	st	X, r24
    int length1, length2;
    uint8_t i;

    length1 = mystrlen(base);
    length2 = mystrlen(string);
    for (i = 0; i < length2; i++)
    7728:	9f 5f       	subi	r25, 0xFF	; 255
    772a:	e9 2f       	mov	r30, r25
    772c:	f0 e0       	ldi	r31, 0x00	; 0
    772e:	df 01       	movw	r26, r30
    7730:	e2 17       	cp	r30, r18
    7732:	f3 07       	cpc	r31, r19
    7734:	9c f3       	brlt	.-26     	; 0x771c <strappend+0x52>
    {
        base[i + length1] = string[i];
    }
    base[length1 + length2] = '\0';
    7736:	20 0f       	add	r18, r16
    7738:	31 1f       	adc	r19, r17
    773a:	42 0f       	add	r20, r18
    773c:	53 1f       	adc	r21, r19
    773e:	fa 01       	movw	r30, r20
    7740:	10 82       	st	Z, r1
}
    7742:	df 91       	pop	r29
    7744:	cf 91       	pop	r28
    7746:	1f 91       	pop	r17
    7748:	0f 91       	pop	r16
    774a:	08 95       	ret
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    774c:	40 e0       	ldi	r20, 0x00	; 0
    774e:	50 e0       	ldi	r21, 0x00	; 0
    7750:	cf cf       	rjmp	.-98     	; 0x76f0 <strappend+0x26>
    7752:	20 e0       	ldi	r18, 0x00	; 0
    7754:	30 e0       	ldi	r19, 0x00	; 0
    7756:	ef cf       	rjmp	.-34     	; 0x7736 <strappend+0x6c>

00007758 <superstring>:
    return temp;
}

//-------------------------------------------------------------------------
int superstring(char *string1, char *string2)
{
    7758:	cf 93       	push	r28
    775a:	df 93       	push	r29
    775c:	fc 01       	movw	r30, r24
    775e:	eb 01       	movw	r28, r22
    //else return 1
    char *p, *q;

    p = string1;
    q = string2;
    while ((*p == *q) && (*p != '\0'))
    7760:	80 81       	ld	r24, Z
    7762:	28 81       	ld	r18, Y
    7764:	82 17       	cp	r24, r18
    7766:	69 f4       	brne	.+26     	; 0x7782 <superstring+0x2a>
    7768:	88 23       	and	r24, r24
    776a:	c1 f0       	breq	.+48     	; 0x779c <superstring+0x44>
    776c:	df 01       	movw	r26, r30
    776e:	fb 01       	movw	r30, r22
    7770:	02 c0       	rjmp	.+4      	; 0x7776 <superstring+0x1e>
    7772:	88 23       	and	r24, r24
    7774:	99 f0       	breq	.+38     	; 0x779c <superstring+0x44>
    {
        p++;
    7776:	11 96       	adiw	r26, 0x01	; 1
        q++;
    7778:	31 96       	adiw	r30, 0x01	; 1
    //else return 1
    char *p, *q;

    p = string1;
    q = string2;
    while ((*p == *q) && (*p != '\0'))
    777a:	8c 91       	ld	r24, X
    777c:	20 81       	ld	r18, Z
    777e:	82 17       	cp	r24, r18
    7780:	c1 f3       	breq	.-16     	; 0x7772 <superstring+0x1a>
    7782:	90 e0       	ldi	r25, 0x00	; 0
    7784:	22 23       	and	r18, r18
    7786:	41 f0       	breq	.+16     	; 0x7798 <superstring+0x40>
    7788:	81 e0       	ldi	r24, 0x01	; 1
    778a:	98 27       	eor	r25, r24
    778c:	29 2f       	mov	r18, r25
    778e:	30 e0       	ldi	r19, 0x00	; 0
    {
        return 0;
    }

    return 1;
}
    7790:	c9 01       	movw	r24, r18
    7792:	df 91       	pop	r29
    7794:	cf 91       	pop	r28
    7796:	08 95       	ret
    //else return 1
    char *p, *q;

    p = string1;
    q = string2;
    while ((*p == *q) && (*p != '\0'))
    7798:	91 e0       	ldi	r25, 0x01	; 1
    779a:	f6 cf       	rjmp	.-20     	; 0x7788 <superstring+0x30>
    779c:	20 e0       	ldi	r18, 0x00	; 0
    779e:	30 e0       	ldi	r19, 0x00	; 0
    {
        return 0;
    }

    return 1;
}
    77a0:	c9 01       	movw	r24, r18
    77a2:	df 91       	pop	r29
    77a4:	cf 91       	pop	r28
    77a6:	08 95       	ret

000077a8 <mystrncmp>:

//-------------------------------------------------------------------------
int mystrncmp(char *s, uint8_t start1, char *t, uint8_t start2, uint8_t length)
{
    77a8:	0f 93       	push	r16
    77aa:	cf 93       	push	r28
    77ac:	df 93       	push	r29
    77ae:	ec 01       	movw	r28, r24
    uint8_t i;

    for (i = 0; i < length; i++)
    77b0:	00 23       	and	r16, r16
    77b2:	e9 f0       	breq	.+58     	; 0x77ee <mystrncmp+0x46>
    {
        if (s[i + start1] != t[i + start2])
    77b4:	70 e0       	ldi	r23, 0x00	; 0
    77b6:	30 e0       	ldi	r19, 0x00	; 0
    77b8:	fc 01       	movw	r30, r24
    77ba:	e6 0f       	add	r30, r22
    77bc:	f7 1f       	adc	r31, r23
    77be:	da 01       	movw	r26, r20
    77c0:	a2 0f       	add	r26, r18
    77c2:	b3 1f       	adc	r27, r19
    77c4:	90 81       	ld	r25, Z
    77c6:	8c 91       	ld	r24, X
    77c8:	98 17       	cp	r25, r24
    77ca:	c1 f4       	brne	.+48     	; 0x77fc <mystrncmp+0x54>
    77cc:	db 01       	movw	r26, r22
    77ce:	11 96       	adiw	r26, 0x01	; 1
    77d0:	ac 0f       	add	r26, r28
    77d2:	bd 1f       	adc	r27, r29
    77d4:	f9 01       	movw	r30, r18
    77d6:	31 96       	adiw	r30, 0x01	; 1
    77d8:	e4 0f       	add	r30, r20
    77da:	f5 1f       	adc	r31, r21
    77dc:	20 e0       	ldi	r18, 0x00	; 0
    77de:	04 c0       	rjmp	.+8      	; 0x77e8 <mystrncmp+0x40>
    77e0:	9d 91       	ld	r25, X+
    77e2:	81 91       	ld	r24, Z+
    77e4:	98 17       	cp	r25, r24
    77e6:	51 f4       	brne	.+20     	; 0x77fc <mystrncmp+0x54>
//-------------------------------------------------------------------------
int mystrncmp(char *s, uint8_t start1, char *t, uint8_t start2, uint8_t length)
{
    uint8_t i;

    for (i = 0; i < length; i++)
    77e8:	2f 5f       	subi	r18, 0xFF	; 255
    77ea:	20 17       	cp	r18, r16
    77ec:	c8 f3       	brcs	.-14     	; 0x77e0 <mystrncmp+0x38>
    77ee:	20 e0       	ldi	r18, 0x00	; 0
    77f0:	30 e0       	ldi	r19, 0x00	; 0
        {
            return 1;
        }
    }
    return 0;
}
    77f2:	c9 01       	movw	r24, r18
    77f4:	df 91       	pop	r29
    77f6:	cf 91       	pop	r28
    77f8:	0f 91       	pop	r16
    77fa:	08 95       	ret
//-------------------------------------------------------------------------
int mystrncmp(char *s, uint8_t start1, char *t, uint8_t start2, uint8_t length)
{
    uint8_t i;

    for (i = 0; i < length; i++)
    77fc:	21 e0       	ldi	r18, 0x01	; 1
    77fe:	30 e0       	ldi	r19, 0x00	; 0
        {
            return 1;
        }
    }
    return 0;
}
    7800:	c9 01       	movw	r24, r18
    7802:	df 91       	pop	r29
    7804:	cf 91       	pop	r28
    7806:	0f 91       	pop	r16
    7808:	08 95       	ret

0000780a <mystrlen>:

//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    780a:	dc 01       	movw	r26, r24
    int count = 0;

    while (s[count] != '\0')
    780c:	8c 91       	ld	r24, X
    780e:	88 23       	and	r24, r24
    7810:	61 f0       	breq	.+24     	; 0x782a <mystrlen+0x20>
    7812:	20 e0       	ldi	r18, 0x00	; 0
    7814:	30 e0       	ldi	r19, 0x00	; 0
    {
        count++;
    7816:	2f 5f       	subi	r18, 0xFF	; 255
    7818:	3f 4f       	sbci	r19, 0xFF	; 255
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    781a:	fd 01       	movw	r30, r26
    781c:	e2 0f       	add	r30, r18
    781e:	f3 1f       	adc	r31, r19
    7820:	80 81       	ld	r24, Z
    7822:	88 23       	and	r24, r24
    7824:	c1 f7       	brne	.-16     	; 0x7816 <mystrlen+0xc>
    {
        count++;
    }

    return count;
}
    7826:	c9 01       	movw	r24, r18
    7828:	08 95       	ret
//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    782a:	20 e0       	ldi	r18, 0x00	; 0
    782c:	30 e0       	ldi	r19, 0x00	; 0
    782e:	fb cf       	rjmp	.-10     	; 0x7826 <mystrlen+0x1c>

00007830 <str_from_integer>:
    base[length1 + length2] = '\0';
}

//-------------------------------------------------------------------------
char *str_from_integer(int num)
{
    7830:	ef 92       	push	r14
    7832:	ff 92       	push	r15
    7834:	1f 93       	push	r17
    7836:	cf 93       	push	r28
    7838:	df 93       	push	r29
    783a:	7c 01       	movw	r14, r24
    783c:	ec 01       	movw	r28, r24
    783e:	97 fd       	sbrc	r25, 7
    7840:	40 c0       	rjmp	.+128    	; 0x78c2 <str_from_integer+0x92>
    }
    else
    {
        internal = num;
    }
    temp[6] = '\0';
    7842:	10 92 ba 03 	sts	0x03BA, r1
    7846:	15 e0       	ldi	r17, 0x05	; 5
    do
    {
        remainder = internal % 10;
        temp[offset] = dec2asciichar(remainder);
    7848:	ce 01       	movw	r24, r28
    784a:	6a e0       	ldi	r22, 0x0A	; 10
    784c:	70 e0       	ldi	r23, 0x00	; 0
    784e:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    7852:	0e 94 7f 3c 	call	0x78fe	; 0x78fe <dec2asciichar>
    7856:	e1 2f       	mov	r30, r17
    7858:	f0 e0       	ldi	r31, 0x00	; 0
    785a:	ec 54       	subi	r30, 0x4C	; 76
    785c:	fc 4f       	sbci	r31, 0xFC	; 252
    785e:	80 83       	st	Z, r24
        internal = internal / 10;
    7860:	ce 01       	movw	r24, r28
    7862:	6a e0       	ldi	r22, 0x0A	; 10
    7864:	70 e0       	ldi	r23, 0x00	; 0
    7866:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    786a:	eb 01       	movw	r28, r22
        offset--;
    786c:	11 50       	subi	r17, 0x01	; 1
    }

    while (internal != 0);
    786e:	61 15       	cp	r22, r1
    7870:	71 05       	cpc	r23, r1
    7872:	51 f7       	brne	.-44     	; 0x7848 <str_from_integer+0x18>
    if (num < 0)
    7874:	f7 fc       	sbrc	r15, 7
    7876:	1b c0       	rjmp	.+54     	; 0x78ae <str_from_integer+0x7e>
        {
            offset--;
        }
    }
    {
        length = 7 - offset - 1;
    7878:	86 e0       	ldi	r24, 0x06	; 6
    787a:	81 1b       	sub	r24, r17
        for (i = 0; i < length; i++)
    787c:	81 f0       	breq	.+32     	; 0x789e <str_from_integer+0x6e>
    787e:	e1 2f       	mov	r30, r17
    7880:	f0 e0       	ldi	r31, 0x00	; 0
    7882:	eb 54       	subi	r30, 0x4B	; 75
    7884:	fc 4f       	sbci	r31, 0xFC	; 252
    7886:	a4 eb       	ldi	r26, 0xB4	; 180
    7888:	b3 e0       	ldi	r27, 0x03	; 3
    788a:	81 50       	subi	r24, 0x01	; 1
    788c:	28 2f       	mov	r18, r24
    788e:	30 e0       	ldi	r19, 0x00	; 0
    7890:	2b 54       	subi	r18, 0x4B	; 75
    7892:	3c 4f       	sbci	r19, 0xFC	; 252
        {
            temp[i] = temp[i + offset + 1];
    7894:	81 91       	ld	r24, Z+
    7896:	8d 93       	st	X+, r24
            offset--;
        }
    }
    {
        length = 7 - offset - 1;
        for (i = 0; i < length; i++)
    7898:	a2 17       	cp	r26, r18
    789a:	b3 07       	cpc	r27, r19
    789c:	d9 f7       	brne	.-10     	; 0x7894 <str_from_integer+0x64>
        {
            temp[i] = temp[i + offset + 1];
        }
    }
    return temp;
}
    789e:	84 eb       	ldi	r24, 0xB4	; 180
    78a0:	93 e0       	ldi	r25, 0x03	; 3
    78a2:	df 91       	pop	r29
    78a4:	cf 91       	pop	r28
    78a6:	1f 91       	pop	r17
    78a8:	ff 90       	pop	r15
    78aa:	ef 90       	pop	r14
    78ac:	08 95       	ret
    }

    while (internal != 0);
    if (num < 0)
    {
        temp[offset] = '-';
    78ae:	e1 2f       	mov	r30, r17
    78b0:	f0 e0       	ldi	r31, 0x00	; 0
    78b2:	ec 54       	subi	r30, 0x4C	; 76
    78b4:	fc 4f       	sbci	r31, 0xFC	; 252
    78b6:	8d e2       	ldi	r24, 0x2D	; 45
    78b8:	80 83       	st	Z, r24
        if (offset == 0)
    78ba:	11 23       	and	r17, r17
    78bc:	81 f3       	breq	.-32     	; 0x789e <str_from_integer+0x6e>
        {
            return temp;
        }
        else
        {
            offset--;
    78be:	11 50       	subi	r17, 0x01	; 1
    78c0:	db cf       	rjmp	.-74     	; 0x7878 <str_from_integer+0x48>
    base[length1 + length2] = '\0';
}

//-------------------------------------------------------------------------
char *str_from_integer(int num)
{
    78c2:	cc 27       	eor	r28, r28
    78c4:	dd 27       	eor	r29, r29
    78c6:	c8 1b       	sub	r28, r24
    78c8:	d9 0b       	sbc	r29, r25
    78ca:	bb cf       	rjmp	.-138    	; 0x7842 <str_from_integer+0x12>

000078cc <rcombine>:
#ifdef PLATFORM_AVR
#include "../hardware/avrhardware.h"
#endif
inline result_t rcombine(result_t r1, result_t r2)
{
    return r1 == FAIL ? FAIL : r2;
    78cc:	88 23       	and	r24, r24
    78ce:	09 f4       	brne	.+2      	; 0x78d2 <rcombine+0x6>
    78d0:	60 e0       	ldi	r22, 0x00	; 0
}
    78d2:	86 2f       	mov	r24, r22
    78d4:	08 95       	ret

000078d6 <hex2value>:

//-------------------------------------------------------------------------
uint16_t hex2value(uint8_t hex)
{
    78d6:	98 2f       	mov	r25, r24
    char a = (char)hex;
    uint16_t high;

    if ((a >= '0') && (a <= '9'))
    78d8:	80 53       	subi	r24, 0x30	; 48
    78da:	8a 30       	cpi	r24, 0x0A	; 10
    78dc:	40 f0       	brcs	.+16     	; 0x78ee <hex2value+0x18>
    {
        high = a - '0';
    }
    else
    {
        high = a - 'A' + 10;
    78de:	29 2f       	mov	r18, r25
    78e0:	33 27       	eor	r19, r19
    78e2:	27 fd       	sbrc	r18, 7
    78e4:	30 95       	com	r19
    78e6:	27 53       	subi	r18, 0x37	; 55
    78e8:	30 40       	sbci	r19, 0x00	; 0
    }

    return high;
}
    78ea:	c9 01       	movw	r24, r18
    78ec:	08 95       	ret
    char a = (char)hex;
    uint16_t high;

    if ((a >= '0') && (a <= '9'))
    {
        high = a - '0';
    78ee:	29 2f       	mov	r18, r25
    78f0:	33 27       	eor	r19, r19
    78f2:	27 fd       	sbrc	r18, 7
    78f4:	30 95       	com	r19
    78f6:	20 53       	subi	r18, 0x30	; 48
    78f8:	30 40       	sbci	r19, 0x00	; 0
    {
        high = a - 'A' + 10;
    }

    return high;
}
    78fa:	c9 01       	movw	r24, r18
    78fc:	08 95       	ret

000078fe <dec2asciichar>:

//-------------------------------------------------------------------------
char dec2asciichar(uint8_t value)
{
    if ( /*( value >= 0 ) && */ (value <= 9))
    78fe:	8a 30       	cpi	r24, 0x0A	; 10
    7900:	10 f4       	brcc	.+4      	; 0x7906 <dec2asciichar+0x8>
    {
        return (char)(value + 0x30);
    7902:	80 5d       	subi	r24, 0xD0	; 208
    }
    else
    {
        return 0;
    }
}
    7904:	08 95       	ret
}

//-------------------------------------------------------------------------
char dec2asciichar(uint8_t value)
{
    if ( /*( value >= 0 ) && */ (value <= 9))
    7906:	80 e0       	ldi	r24, 0x00	; 0
    7908:	08 95       	ret

0000790a <nmemset>:
#endif
}

//-------------------------------------------------------------------------
inline void *nmemset(void *to, int val, size_t n)
{
    790a:	78 2f       	mov	r23, r24
    790c:	a9 2f       	mov	r26, r25
    char *cto = to;

    while (n--)
    790e:	41 15       	cp	r20, r1
    7910:	51 05       	cpc	r21, r1
    7912:	31 f0       	breq	.+12     	; 0x7920 <nmemset+0x16>
}

//-------------------------------------------------------------------------
inline void *nmemset(void *to, int val, size_t n)
{
    char *cto = to;
    7914:	9c 01       	movw	r18, r24
    7916:	f9 01       	movw	r30, r18

    while (n--)
    {
        *cto++ = val;
    7918:	61 93       	st	Z+, r22
    791a:	41 50       	subi	r20, 0x01	; 1
    791c:	50 40       	sbci	r21, 0x00	; 0
//-------------------------------------------------------------------------
inline void *nmemset(void *to, int val, size_t n)
{
    char *cto = to;

    while (n--)
    791e:	e1 f7       	brne	.-8      	; 0x7918 <nmemset+0xe>
    {
        *cto++ = val;
    }

    return to;
}
    7920:	87 2f       	mov	r24, r23
    7922:	9a 2f       	mov	r25, r26
    7924:	08 95       	ret

00007926 <_atomic_end>:

//-------------------------------------------------------------------------
void _atomic_end(_atomic_t oldSreg)
{
#ifdef PLATFORM_AVR
    _atomic_end_avr(oldSreg);
    7926:	0e 94 67 02 	call	0x4ce	; 0x4ce <_atomic_end_avr>
#endif
}
    792a:	08 95       	ret

0000792c <_atomic_start>:

//-------------------------------------------------------------------------
_atomic_t _atomic_start(void)
{
#ifdef PLATFORM_AVR
    _atomic_t result = _atomic_start_avr();
    792c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_atomic_start_avr>
#endif
    return result;
}
    7930:	08 95       	ret

00007932 <getRandomNumber>:
uint16_t getRandomNumber()
{
    uint16_t ret;

#ifdef PLATFORM_AVR
    ret = rand();
    7932:	0e 94 43 57 	call	0xae86	; 0xae86 <rand>
#endif
    return ret;
}
    7936:	08 95       	ret

00007938 <init_breakpoint_table>:
} br_type;

br_type br_state[NUM_BREAKPOINTS];

void init_breakpoint_table()
{
    7938:	ec e9       	ldi	r30, 0x9C	; 156
    793a:	f8 e0       	ldi	r31, 0x08	; 8
   int i;
   for (i=0; i< NUM_BREAKPOINTS; i++)
     br_state[i].active = 0; 	
    793c:	10 82       	st	Z, r1
    793e:	39 96       	adiw	r30, 0x09	; 9
br_type br_state[NUM_BREAKPOINTS];

void init_breakpoint_table()
{
   int i;
   for (i=0; i< NUM_BREAKPOINTS; i++)
    7940:	88 e0       	ldi	r24, 0x08	; 8
    7942:	e4 3e       	cpi	r30, 0xE4	; 228
    7944:	f8 07       	cpc	r31, r24
    7946:	d1 f7       	brne	.-12     	; 0x793c <init_breakpoint_table+0x4>
     br_state[i].active = 0; 	
	
}
    7948:	08 95       	ret

0000794a <get_breakpoint_index>:


uint8_t get_breakpoint_index()
{
    794a:	ec e9       	ldi	r30, 0x9C	; 156
    794c:	f8 e0       	ldi	r31, 0x08	; 8
    794e:	20 e0       	ldi	r18, 0x00	; 0
    7950:	30 e0       	ldi	r19, 0x00	; 0
    int i; 	
	  for (i=0; i< NUM_BREAKPOINTS; i++)
     {
     	  if ( br_state[i].active == 0)
    7952:	80 81       	ld	r24, Z
    7954:	88 23       	and	r24, r24
    7956:	41 f0       	breq	.+16     	; 0x7968 <get_breakpoint_index+0x1e>


uint8_t get_breakpoint_index()
{
    int i; 	
	  for (i=0; i< NUM_BREAKPOINTS; i++)
    7958:	2f 5f       	subi	r18, 0xFF	; 255
    795a:	3f 4f       	sbci	r19, 0xFF	; 255
    795c:	39 96       	adiw	r30, 0x09	; 9
    795e:	28 30       	cpi	r18, 0x08	; 8
    7960:	31 05       	cpc	r19, r1
    7962:	b9 f7       	brne	.-18     	; 0x7952 <get_breakpoint_index+0x8>
    7964:	8f ef       	ldi	r24, 0xFF	; 255
     	  		 br_state[i].active = 1; 
     	  		 return i; 
     	    }
	   } 
	   return 255;  
}
    7966:	08 95       	ret
    int i; 	
	  for (i=0; i< NUM_BREAKPOINTS; i++)
     {
     	  if ( br_state[i].active == 0)
     	  	{
     	  		 br_state[i].active = 1; 
    7968:	f9 01       	movw	r30, r18
    796a:	ee 0f       	add	r30, r30
    796c:	ff 1f       	adc	r31, r31
    796e:	ee 0f       	add	r30, r30
    7970:	ff 1f       	adc	r31, r31
    7972:	ee 0f       	add	r30, r30
    7974:	ff 1f       	adc	r31, r31
    7976:	e2 0f       	add	r30, r18
    7978:	f3 1f       	adc	r31, r19
    797a:	ec 56       	subi	r30, 0x6C	; 108
    797c:	f7 4f       	sbci	r31, 0xF7	; 247
    797e:	81 e0       	ldi	r24, 0x01	; 1
    7980:	80 87       	std	Z+8, r24	; 0x08
     	  		 return i; 
    7982:	82 2f       	mov	r24, r18
    7984:	08 95       	ret

00007986 <reply_ls_short>:
//Get the block information of sub directory and files using simplfied version 
void reply_ls_short(uint8_t block)
{
    //Actually this is not used because to ensure that the system is simple, we only use the long version 
    return;
}
    7986:	08 95       	ret

00007988 <InitShell>:
    postNewThreadTask();
}

//-------------------------------------------------------------------------
void InitShell()
{
    7988:	ef 92       	push	r14
    798a:	ff 92       	push	r15
    798c:	0f 93       	push	r16
    798e:	1f 93       	push	r17
    IncomingLength = 0;
    7990:	10 92 1a 09 	sts	0x091A, r1
    nodeid = CURRENT_NODE_ID;
    7994:	80 91 32 04 	lds	r24, 0x0432
    7998:	90 91 33 04 	lds	r25, 0x0433
    799c:	90 93 60 09 	sts	0x0960, r25
    79a0:	80 93 5f 09 	sts	0x095F, r24
    registerEvent(0xfefe, 64, &IncomingLength, IncomingMsg, PacketInfo,
    79a4:	8e ef       	ldi	r24, 0xFE	; 254
    79a6:	9e ef       	ldi	r25, 0xFE	; 254
    79a8:	60 e4       	ldi	r22, 0x40	; 64
    79aa:	4a e1       	ldi	r20, 0x1A	; 26
    79ac:	59 e0       	ldi	r21, 0x09	; 9
    79ae:	2b e1       	ldi	r18, 0x1B	; 27
    79b0:	39 e0       	ldi	r19, 0x09	; 9
    79b2:	0b e5       	ldi	r16, 0x5B	; 91
    79b4:	19 e0       	ldi	r17, 0x09	; 9
    79b6:	7e ee       	ldi	r23, 0xEE	; 238
    79b8:	e7 2e       	mov	r14, r23
    79ba:	7c e3       	ldi	r23, 0x3C	; 60
    79bc:	f7 2e       	mov	r15, r23
    79be:	0e 94 ae 09 	call	0x135c	; 0x135c <registerEvent>
    79c2:	ec e9       	ldi	r30, 0x9C	; 156
    79c4:	f8 e0       	ldi	r31, 0x08	; 8

void init_breakpoint_table()
{
   int i;
   for (i=0; i< NUM_BREAKPOINTS; i++)
     br_state[i].active = 0; 	
    79c6:	10 82       	st	Z, r1
    79c8:	39 96       	adiw	r30, 0x09	; 9
br_type br_state[NUM_BREAKPOINTS];

void init_breakpoint_table()
{
   int i;
   for (i=0; i< NUM_BREAKPOINTS; i++)
    79ca:	88 e0       	ldi	r24, 0x08	; 8
    79cc:	e4 3e       	cpi	r30, 0xE4	; 228
    79ce:	f8 07       	cpc	r31, r24
    79d0:	d1 f7       	brne	.-12     	; 0x79c6 <InitShell+0x3e>
    IncomingLength = 0;
    nodeid = CURRENT_NODE_ID;
    registerEvent(0xfefe, 64, &IncomingLength, IncomingMsg, PacketInfo,
                  WakeupMe);
    init_breakpoint_table();
}
    79d2:	1f 91       	pop	r17
    79d4:	0f 91       	pop	r16
    79d6:	ff 90       	pop	r15
    79d8:	ef 90       	pop	r14
    79da:	08 95       	ret

000079dc <WakeupMe>:
}

//-------------------------------------------------------------------------
void WakeupMe()
{
    thisthread->state = STATE_ACTIVE;
    79dc:	e0 91 5d 09 	lds	r30, 0x095D
    79e0:	f0 91 5e 09 	lds	r31, 0x095E
    79e4:	82 e0       	ldi	r24, 0x02	; 2
    79e6:	82 83       	std	Z+2, r24	; 0x02
    postNewThreadTask();
    79e8:	0e 94 00 18 	call	0x3000	; 0x3000 <postNewThreadTask>
}
    79ec:	08 95       	ret

000079ee <reply_nodeRestart>:
}

//-------------------------------------------------------------------------
void reply_nodeRestart(uint8_t * receivebuffer)
{
    avr_resetNode();
    79ee:	0e 94 69 02 	call	0x4d2	; 0x4d2 <avr_resetNode>
}
    79f2:	08 95       	ret

000079f4 <reply_formatSystem>:
}

//-------------------------------------------------------------------------
void reply_formatSystem(uint8_t * receivebuffer)
{
    formatSystem();
    79f4:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <formatSystem>
    buildRootNode();
    79f8:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <buildRootNode>
    
}
    79fc:	08 95       	ret

000079fe <reply_search>:
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_search(uint8_t * receivebuffer)
{
    79fe:	cf 92       	push	r12
    7a00:	df 92       	push	r13
    7a02:	ef 92       	push	r14
    7a04:	ff 92       	push	r15
    7a06:	0f 93       	push	r16
    7a08:	1f 93       	push	r17
    7a0a:	df 93       	push	r29
    7a0c:	cf 93       	push	r28
    7a0e:	cd b7       	in	r28, 0x3d	; 61
    7a10:	de b7       	in	r29, 0x3e	; 62
    7a12:	a2 97       	sbiw	r28, 0x22	; 34
    7a14:	0f b6       	in	r0, 0x3f	; 63
    7a16:	f8 94       	cli
    7a18:	de bf       	out	0x3e, r29	; 62
    7a1a:	0f be       	out	0x3f, r0	; 63
    7a1c:	cd bf       	out	0x3d, r28	; 61
    7a1e:	8c 01       	movw	r16, r24
    char filename[13];
    uint8_t searchresults[20];
    uint8_t numofsearch;
    uint8_t i;

    mystrncpy(filename, (char *)&receivebuffer[3], receivebuffer[0] - 3);
    7a20:	f2 e0       	ldi	r31, 0x02	; 2
    7a22:	ef 2e       	mov	r14, r31
    7a24:	f1 2c       	mov	r15, r1
    7a26:	ec 0e       	add	r14, r28
    7a28:	fd 1e       	adc	r15, r29
    7a2a:	bc 01       	movw	r22, r24
    7a2c:	6d 5f       	subi	r22, 0xFD	; 253
    7a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a30:	fc 01       	movw	r30, r24
    7a32:	40 81       	ld	r20, Z
    7a34:	43 50       	subi	r20, 0x03	; 3
    7a36:	c7 01       	movw	r24, r14
    7a38:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
    filename[receivebuffer[0] - 3] = '\0';
    7a3c:	f8 01       	movw	r30, r16
    7a3e:	80 81       	ld	r24, Z
    7a40:	fe 01       	movw	r30, r28
    7a42:	31 97       	sbiw	r30, 0x01	; 1
    7a44:	e8 0f       	add	r30, r24
    7a46:	f1 1d       	adc	r31, r1
    7a48:	10 82       	st	Z, r1
    fsearch(searchresults, &numofsearch, filename);
    7a4a:	ef e0       	ldi	r30, 0x0F	; 15
    7a4c:	ce 2e       	mov	r12, r30
    7a4e:	d1 2c       	mov	r13, r1
    7a50:	cc 0e       	add	r12, r28
    7a52:	dd 1e       	adc	r13, r29
    7a54:	c6 01       	movw	r24, r12
    7a56:	be 01       	movw	r22, r28
    7a58:	6f 5f       	subi	r22, 0xFF	; 255
    7a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    7a5c:	a7 01       	movw	r20, r14
    7a5e:	0e 94 df 20 	call	0x41be	; 0x41be <fsearch>
    for (i = 0; i < numofsearch; i++)
    7a62:	89 81       	ldd	r24, Y+1	; 0x01
    7a64:	88 23       	and	r24, r24
    7a66:	39 f1       	breq	.+78     	; 0x7ab6 <reply_search+0xb8>
    7a68:	00 e0       	ldi	r16, 0x00	; 0
    {
        fdirnode((char *)&reply[3], 29, searchresults[i]);
        reply[0] = mystrlen((char *)&reply[3]) + 3;
        reply[1] = 221;
    7a6a:	1d ed       	ldi	r17, 0xDD	; 221
    mystrncpy(filename, (char *)&receivebuffer[3], receivebuffer[0] - 3);
    filename[receivebuffer[0] - 3] = '\0';
    fsearch(searchresults, &numofsearch, filename);
    for (i = 0; i < numofsearch; i++)
    {
        fdirnode((char *)&reply[3], 29, searchresults[i]);
    7a6c:	f6 01       	movw	r30, r12
    7a6e:	e0 0f       	add	r30, r16
    7a70:	f1 1d       	adc	r31, r1
    7a72:	40 81       	ld	r20, Z
    7a74:	88 ef       	ldi	r24, 0xF8	; 248
    7a76:	98 e0       	ldi	r25, 0x08	; 8
    7a78:	6d e1       	ldi	r22, 0x1D	; 29
    7a7a:	70 e0       	ldi	r23, 0x00	; 0
    7a7c:	50 e0       	ldi	r21, 0x00	; 0
    7a7e:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <fdirnode>
        reply[0] = mystrlen((char *)&reply[3]) + 3;
    7a82:	88 ef       	ldi	r24, 0xF8	; 248
    7a84:	98 e0       	ldi	r25, 0x08	; 8
    7a86:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    7a8a:	8d 5f       	subi	r24, 0xFD	; 253
    7a8c:	80 93 f5 08 	sts	0x08F5, r24
        reply[1] = 221;
    7a90:	10 93 f6 08 	sts	0x08F6, r17
        reply[2] = nodeid;
    7a94:	80 91 5f 09 	lds	r24, 0x095F
    7a98:	80 93 f7 08 	sts	0x08F7, r24
        //printStringN(reply,32);       
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    7a9c:	8f ee       	ldi	r24, 0xEF	; 239
    7a9e:	9f ee       	ldi	r25, 0xEF	; 239
    7aa0:	6f ef       	ldi	r22, 0xFF	; 255
    7aa2:	7f ef       	ldi	r23, 0xFF	; 255
    7aa4:	40 e2       	ldi	r20, 0x20	; 32
    7aa6:	25 ef       	ldi	r18, 0xF5	; 245
    7aa8:	38 e0       	ldi	r19, 0x08	; 8
    7aaa:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    uint8_t i;

    mystrncpy(filename, (char *)&receivebuffer[3], receivebuffer[0] - 3);
    filename[receivebuffer[0] - 3] = '\0';
    fsearch(searchresults, &numofsearch, filename);
    for (i = 0; i < numofsearch; i++)
    7aae:	0f 5f       	subi	r16, 0xFF	; 255
    7ab0:	89 81       	ldd	r24, Y+1	; 0x01
    7ab2:	08 17       	cp	r16, r24
    7ab4:	d8 f2       	brcs	.-74     	; 0x7a6c <reply_search+0x6e>
        reply[1] = 221;
        reply[2] = nodeid;
        //printStringN(reply,32);       
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
}
    7ab6:	a2 96       	adiw	r28, 0x22	; 34
    7ab8:	0f b6       	in	r0, 0x3f	; 63
    7aba:	f8 94       	cli
    7abc:	de bf       	out	0x3e, r29	; 62
    7abe:	0f be       	out	0x3f, r0	; 63
    7ac0:	cd bf       	out	0x3d, r28	; 61
    7ac2:	cf 91       	pop	r28
    7ac4:	df 91       	pop	r29
    7ac6:	1f 91       	pop	r17
    7ac8:	0f 91       	pop	r16
    7aca:	ff 90       	pop	r15
    7acc:	ef 90       	pop	r14
    7ace:	df 90       	pop	r13
    7ad0:	cf 90       	pop	r12
    7ad2:	08 95       	ret

00007ad4 <reply_ps>:
    fclose2(fp);
}

//-------------------------------------------------------------------------
void reply_ps(uint8_t * receivebuffer)
{
    7ad4:	af 92       	push	r10
    7ad6:	bf 92       	push	r11
    7ad8:	cf 92       	push	r12
    7ada:	df 92       	push	r13
    7adc:	ef 92       	push	r14
    7ade:	ff 92       	push	r15
    7ae0:	0f 93       	push	r16
    7ae2:	1f 93       	push	r17
    7ae4:	cf 93       	push	r28
    7ae6:	df 93       	push	r29
    uint8_t i, len;

    //reply[0] = 15;
    reply[1] = 171;
    7ae8:	8b ea       	ldi	r24, 0xAB	; 171
    7aea:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    7aee:	80 91 5f 09 	lds	r24, 0x095F
    7af2:	80 93 f7 08 	sts	0x08F7, r24
    7af6:	1e e8       	ldi	r17, 0x8E	; 142
    7af8:	c1 2e       	mov	r12, r17
    7afa:	15 e0       	ldi	r17, 0x05	; 5
    7afc:	d1 2e       	mov	r13, r17
    7afe:	c0 e0       	ldi	r28, 0x00	; 0
    7b00:	d0 e0       	ldi	r29, 0x00	; 0
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    7b02:	ce 01       	movw	r24, r28
    7b04:	88 0f       	add	r24, r24
    7b06:	99 1f       	adc	r25, r25
    7b08:	88 0f       	add	r24, r24
    7b0a:	99 1f       	adc	r25, r25
    7b0c:	88 0f       	add	r24, r24
    7b0e:	99 1f       	adc	r25, r25
    7b10:	bc 01       	movw	r22, r24
    7b12:	66 0f       	add	r22, r22
    7b14:	77 1f       	adc	r23, r23
    7b16:	66 0f       	add	r22, r22
    7b18:	77 1f       	adc	r23, r23
    7b1a:	68 0f       	add	r22, r24
    7b1c:	79 1f       	adc	r23, r25
    7b1e:	6c 1b       	sub	r22, r28
    7b20:	7d 0b       	sbc	r23, r29
    7b22:	8b 01       	movw	r16, r22
    7b24:	02 57       	subi	r16, 0x72	; 114
    7b26:	1a 4f       	sbci	r17, 0xFA	; 250
    7b28:	d8 01       	movw	r26, r16
    7b2a:	12 96       	adiw	r26, 0x02	; 2
    7b2c:	8c 91       	ld	r24, X
    7b2e:	88 23       	and	r24, r24
    7b30:	99 f4       	brne	.+38     	; 0x7b58 <reply_ps+0x84>
            else
            {
                mystrncpy((char *)&reply[4],
                          (char *)thread_table[i].threadName, len);
            }
            StandardSocketSend(0xefef, 0xffff, 32, reply);
    7b32:	21 96       	adiw	r28, 0x01	; 1
    7b34:	27 e2       	ldi	r18, 0x27	; 39
    7b36:	30 e0       	ldi	r19, 0x00	; 0
    7b38:	c2 0e       	add	r12, r18
    7b3a:	d3 1e       	adc	r13, r19
    uint8_t i, len;

    //reply[0] = 15;
    reply[1] = 171;
    reply[2] = nodeid;
    for (i = 0; i < LITE_MAX_THREADS; i++)
    7b3c:	c4 30       	cpi	r28, 0x04	; 4
    7b3e:	d1 05       	cpc	r29, r1
    7b40:	01 f7       	brne	.-64     	; 0x7b02 <reply_ps+0x2e>
                          (char *)thread_table[i].threadName, len);
            }
            StandardSocketSend(0xefef, 0xffff, 32, reply);
        }
    }
}
    7b42:	df 91       	pop	r29
    7b44:	cf 91       	pop	r28
    7b46:	1f 91       	pop	r17
    7b48:	0f 91       	pop	r16
    7b4a:	ff 90       	pop	r15
    7b4c:	ef 90       	pop	r14
    7b4e:	df 90       	pop	r13
    7b50:	cf 90       	pop	r12
    7b52:	bf 90       	pop	r11
    7b54:	af 90       	pop	r10
    7b56:	08 95       	ret
    reply[2] = nodeid;
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            len = mystrlen((char *)thread_table[i].threadName);
    7b58:	7b 01       	movw	r14, r22
    7b5a:	e3 e9       	ldi	r30, 0x93	; 147
    7b5c:	f5 e0       	ldi	r31, 0x05	; 5
    7b5e:	ee 0e       	add	r14, r30
    7b60:	ff 1e       	adc	r15, r31
    7b62:	c7 01       	movw	r24, r14
    7b64:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    7b68:	48 2f       	mov	r20, r24
            reply[0] = len + 4;
    7b6a:	4c 5f       	subi	r20, 0xFC	; 252
    7b6c:	40 93 f5 08 	sts	0x08F5, r20
    7b70:	44 50       	subi	r20, 0x04	; 4
            reply[3] = thread_table[i].state;
    7b72:	d8 01       	movw	r26, r16
    7b74:	12 96       	adiw	r26, 0x02	; 2
    7b76:	8c 91       	ld	r24, X
    7b78:	80 93 f8 08 	sts	0x08F8, r24
            //if this is a break thread, then fetch the real number
            if (reply[3] == STATE_BREAK)
    7b7c:	88 30       	cpi	r24, 0x08	; 8
    7b7e:	79 f0       	breq	.+30     	; 0x7b9e <reply_ps+0xca>
                mystrncpy((char *)&reply[6],
                          (char *)thread_table[i].threadName, len);
            }
            else
            {
                mystrncpy((char *)&reply[4],
    7b80:	89 ef       	ldi	r24, 0xF9	; 249
    7b82:	98 e0       	ldi	r25, 0x08	; 8
    7b84:	b7 01       	movw	r22, r14
    7b86:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
                          (char *)thread_table[i].threadName, len);
            }
            StandardSocketSend(0xefef, 0xffff, 32, reply);
    7b8a:	8f ee       	ldi	r24, 0xEF	; 239
    7b8c:	9f ee       	ldi	r25, 0xEF	; 239
    7b8e:	6f ef       	ldi	r22, 0xFF	; 255
    7b90:	7f ef       	ldi	r23, 0xFF	; 255
    7b92:	40 e2       	ldi	r20, 0x20	; 32
    7b94:	25 ef       	ldi	r18, 0xF5	; 245
    7b96:	38 e0       	ldi	r19, 0x08	; 8
    7b98:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    7b9c:	ca cf       	rjmp	.-108    	; 0x7b32 <reply_ps+0x5e>
            reply[0] = len + 4;
            reply[3] = thread_table[i].state;
            //if this is a break thread, then fetch the real number
            if (reply[3] == STATE_BREAK)
            {
                uint8_t *tempptr = (uint8_t *) thread_table[i].sp + 47;
    7b9e:	d6 01       	movw	r26, r12
    7ba0:	ed 91       	ld	r30, X+
    7ba2:	fc 91       	ld	r31, X
                uint16_t addr =
                    (((uint16_t) (*tempptr)) * 256 + *(tempptr + 1) - 3);
    7ba4:	b7 a4       	ldd	r11, Z+47	; 0x2f
    7ba6:	aa 24       	eor	r10, r10
    7ba8:	80 a9       	ldd	r24, Z+48	; 0x30
    7baa:	f5 01       	movw	r30, r10
    7bac:	e8 0f       	add	r30, r24
    7bae:	f1 1d       	adc	r31, r1
    7bb0:	cf 01       	movw	r24, r30
    7bb2:	03 97       	sbiw	r24, 0x03	; 3
                reply[4] = addr / 256;
    7bb4:	90 93 f9 08 	sts	0x08F9, r25
                reply[5] = addr % 256;
    7bb8:	80 93 fa 08 	sts	0x08FA, r24
                reply[0] += 2;
    7bbc:	4a 5f       	subi	r20, 0xFA	; 250
    7bbe:	40 93 f5 08 	sts	0x08F5, r20
    7bc2:	46 50       	subi	r20, 0x06	; 6
                mystrncpy((char *)&reply[6],
    7bc4:	8b ef       	ldi	r24, 0xFB	; 251
    7bc6:	98 e0       	ldi	r25, 0x08	; 8
    7bc8:	b7 01       	movw	r22, r14
    7bca:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
    7bce:	dd cf       	rjmp	.-70     	; 0x7b8a <reply_ps+0xb6>

00007bd0 <reply_debugging_set>:
    //printStringN(reply,32); 
}

//this is the reply for the set command 
void reply_debugging_set(uint8_t * receivebuffer)
{
    7bd0:	fc 01       	movw	r30, r24
    uint16_t addr;
    uint8_t size;
    uint8_t i;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    7bd2:	93 81       	ldd	r25, Z+3	; 0x03
    7bd4:	80 e0       	ldi	r24, 0x00	; 0
    7bd6:	24 81       	ldd	r18, Z+4	; 0x04
    7bd8:	dc 01       	movw	r26, r24
    7bda:	a2 0f       	add	r26, r18
    7bdc:	b1 1d       	adc	r27, r1
    size = receivebuffer[5];
    7bde:	55 81       	ldd	r21, Z+5	; 0x05
    for (i = 0; i < size; i++)
    7be0:	55 23       	and	r21, r21
    7be2:	41 f0       	breq	.+16     	; 0x7bf4 <reply_debugging_set+0x24>
    7be4:	4e 2f       	mov	r20, r30
    {
        *((unsigned char *)(addr + i)) = receivebuffer[6 + i];
    7be6:	86 81       	ldd	r24, Z+6	; 0x06
    7be8:	8d 93       	st	X+, r24
    7bea:	31 96       	adiw	r30, 0x01	; 1
    uint8_t size;
    uint8_t i;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    size = receivebuffer[5];
    for (i = 0; i < size; i++)
    7bec:	8e 2f       	mov	r24, r30
    7bee:	84 1b       	sub	r24, r20
    7bf0:	85 17       	cp	r24, r21
    7bf2:	c8 f3       	brcs	.-14     	; 0x7be6 <reply_debugging_set+0x16>
    {
        *((unsigned char *)(addr + i)) = receivebuffer[6 + i];
    }
    reply[0] = 3;
    7bf4:	83 e0       	ldi	r24, 0x03	; 3
    7bf6:	80 93 f5 08 	sts	0x08F5, r24
    reply[1] = 96;
    7bfa:	80 e6       	ldi	r24, 0x60	; 96
    7bfc:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    7c00:	80 91 5f 09 	lds	r24, 0x095F
    7c04:	80 93 f7 08 	sts	0x08F7, r24
    //mystrncpy(&reply[3], (unsigned char *)addr, size); 
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7c08:	8f ee       	ldi	r24, 0xEF	; 239
    7c0a:	9f ee       	ldi	r25, 0xEF	; 239
    7c0c:	6f ef       	ldi	r22, 0xFF	; 255
    7c0e:	7f ef       	ldi	r23, 0xFF	; 255
    7c10:	40 e2       	ldi	r20, 0x20	; 32
    7c12:	25 ef       	ldi	r18, 0xF5	; 245
    7c14:	38 e0       	ldi	r19, 0x08	; 8
    7c16:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    //printStringN(reply,32); 
}
    7c1a:	08 95       	ret

00007c1c <reply_debugging_print>:
 

//-------------------------------------------------------------------------
//Note that this function should consider splitting a message into multiple pieces, if the requested memory chunk is too large 
void reply_debugging_print(uint8_t * receivebuffer)
{
    7c1c:	cf 92       	push	r12
    7c1e:	df 92       	push	r13
    7c20:	ef 92       	push	r14
    7c22:	ff 92       	push	r15
    7c24:	0f 93       	push	r16
    7c26:	1f 93       	push	r17
    7c28:	cf 93       	push	r28
    7c2a:	df 93       	push	r29
    7c2c:	fc 01       	movw	r30, r24
    uint16_t addr;
    uint16_t size;
    uint8_t chunkindex;
    uint8_t numOfChunks;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    7c2e:	43 81       	ldd	r20, Z+3	; 0x03
    7c30:	14 81       	ldd	r17, Z+4	; 0x04
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    7c32:	95 81       	ldd	r25, Z+5	; 0x05
    7c34:	80 e0       	ldi	r24, 0x00	; 0
    7c36:	26 81       	ldd	r18, Z+6	; 0x06
    7c38:	bc 01       	movw	r22, r24
    7c3a:	62 0f       	add	r22, r18
    7c3c:	71 1d       	adc	r23, r1
    7c3e:	9b 01       	movw	r18, r22
    numOfChunks = size / 24 + 1;
    7c40:	cb 01       	movw	r24, r22
    7c42:	68 e1       	ldi	r22, 0x18	; 24
    7c44:	70 e0       	ldi	r23, 0x00	; 0
    7c46:	0e 94 84 56 	call	0xad08	; 0xad08 <__udivmodhi4>
    7c4a:	06 2f       	mov	r16, r22
    7c4c:	0f 5f       	subi	r16, 0xFF	; 255
    for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)
    7c4e:	69 f1       	breq	.+90     	; 0x7caa <reply_debugging_print+0x8e>
    uint16_t addr;
    uint16_t size;
    uint8_t chunkindex;
    uint8_t numOfChunks;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    7c50:	94 2f       	mov	r25, r20
    7c52:	80 e0       	ldi	r24, 0x00	; 0
    7c54:	ec 01       	movw	r28, r24
    7c56:	c1 0f       	add	r28, r17
    7c58:	d1 1d       	adc	r29, r1
    7c5a:	e3 2e       	mov	r14, r19
    7c5c:	f2 2e       	mov	r15, r18
    7c5e:	10 e0       	ldi	r17, 0x00	; 0
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    numOfChunks = size / 24 + 1;
    for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)
    {
        reply[0] = 24 + 6;
    7c60:	9e e1       	ldi	r25, 0x1E	; 30
    7c62:	c9 2e       	mov	r12, r25
        reply[1] = 91;
    7c64:	8b e5       	ldi	r24, 0x5B	; 91
    7c66:	d8 2e       	mov	r13, r24
    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    numOfChunks = size / 24 + 1;
    for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)
    {
        reply[0] = 24 + 6;
    7c68:	c0 92 f5 08 	sts	0x08F5, r12
        reply[1] = 91;
    7c6c:	d0 92 f6 08 	sts	0x08F6, r13
        reply[2] = nodeid;
    7c70:	80 91 5f 09 	lds	r24, 0x095F
    7c74:	80 93 f7 08 	sts	0x08F7, r24
        reply[3] = chunkindex;
    7c78:	10 93 f8 08 	sts	0x08F8, r17
        reply[4] = size / 256;
    7c7c:	e0 92 f9 08 	sts	0x08F9, r14
        reply[5] = size % 256;
    7c80:	f0 92 fa 08 	sts	0x08FA, r15
        //Note that this expose some piece of memory that is NOT part of the requested data 
        mystrncpy((char *)&reply[6], (char *)addr, 24);
    7c84:	8b ef       	ldi	r24, 0xFB	; 251
    7c86:	98 e0       	ldi	r25, 0x08	; 8
    7c88:	be 01       	movw	r22, r28
    7c8a:	48 e1       	ldi	r20, 0x18	; 24
    7c8c:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
        addr = addr + 24;
    7c90:	68 96       	adiw	r28, 0x18	; 24
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    7c92:	8f ee       	ldi	r24, 0xEF	; 239
    7c94:	9f ee       	ldi	r25, 0xEF	; 239
    7c96:	6f ef       	ldi	r22, 0xFF	; 255
    7c98:	7f ef       	ldi	r23, 0xFF	; 255
    7c9a:	40 e2       	ldi	r20, 0x20	; 32
    7c9c:	25 ef       	ldi	r18, 0xF5	; 245
    7c9e:	38 e0       	ldi	r19, 0x08	; 8
    7ca0:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    uint8_t numOfChunks;

    addr = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    size = (uint16_t) receivebuffer[5] * 256 + receivebuffer[6];
    numOfChunks = size / 24 + 1;
    for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)
    7ca4:	1f 5f       	subi	r17, 0xFF	; 255
    7ca6:	10 17       	cp	r17, r16
    7ca8:	f8 f2       	brcs	.-66     	; 0x7c68 <reply_debugging_print+0x4c>
        mystrncpy((char *)&reply[6], (char *)addr, 24);
        addr = addr + 24;
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
    //printStringN(reply,32); 
}
    7caa:	df 91       	pop	r29
    7cac:	cf 91       	pop	r28
    7cae:	1f 91       	pop	r17
    7cb0:	0f 91       	pop	r16
    7cb2:	ff 90       	pop	r15
    7cb4:	ef 90       	pop	r14
    7cb6:	df 90       	pop	r13
    7cb8:	cf 90       	pop	r12
    7cba:	08 95       	ret

00007cbc <reply_du>:
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_du(uint8_t * receivebuffer)
{
    7cbc:	1f 93       	push	r17
    int e1, e2, e3;

    e1 = fcheckFSAllocation();
    7cbe:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <fcheckFSAllocation>
    7cc2:	18 2f       	mov	r17, r24
    e2 = fcheckStorageAllocation();
    7cc4:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <fcheckStorageAllocation>
    e3 = 0;
    if (e2 == 256)
    7cc8:	21 e0       	ldi	r18, 0x01	; 1
    7cca:	80 30       	cpi	r24, 0x00	; 0
    7ccc:	92 07       	cpc	r25, r18
    7cce:	e9 f0       	breq	.+58     	; 0x7d0a <reply_du+0x4e>
    7cd0:	98 2f       	mov	r25, r24
    7cd2:	20 e0       	ldi	r18, 0x00	; 0
    {
        e2 = 128;
        e3 = 128;
    }
    reply[0] = 6;
    7cd4:	86 e0       	ldi	r24, 0x06	; 6
    7cd6:	80 93 f5 08 	sts	0x08F5, r24
    reply[1] = 211;
    7cda:	83 ed       	ldi	r24, 0xD3	; 211
    7cdc:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    7ce0:	80 91 5f 09 	lds	r24, 0x095F
    7ce4:	80 93 f7 08 	sts	0x08F7, r24
    reply[3] = e1;
    7ce8:	10 93 f8 08 	sts	0x08F8, r17
    reply[4] = e2;
    7cec:	90 93 f9 08 	sts	0x08F9, r25
    reply[5] = e3;
    7cf0:	20 93 fa 08 	sts	0x08FA, r18
    //printStringN(reply,32);       
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7cf4:	8f ee       	ldi	r24, 0xEF	; 239
    7cf6:	9f ee       	ldi	r25, 0xEF	; 239
    7cf8:	6f ef       	ldi	r22, 0xFF	; 255
    7cfa:	7f ef       	ldi	r23, 0xFF	; 255
    7cfc:	40 e2       	ldi	r20, 0x20	; 32
    7cfe:	25 ef       	ldi	r18, 0xF5	; 245
    7d00:	38 e0       	ldi	r19, 0x08	; 8
    7d02:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
}
    7d06:	1f 91       	pop	r17
    7d08:	08 95       	ret
    int e1, e2, e3;

    e1 = fcheckFSAllocation();
    e2 = fcheckStorageAllocation();
    e3 = 0;
    if (e2 == 256)
    7d0a:	90 e8       	ldi	r25, 0x80	; 128
    7d0c:	20 e8       	ldi	r18, 0x80	; 128
    7d0e:	e2 cf       	rjmp	.-60     	; 0x7cd4 <reply_du+0x18>

00007d10 <reply_killthread>:
    }
}

//-------------------------------------------------------------------------
void reply_killthread(uint8_t * receivebuffer)
{
    7d10:	6f 92       	push	r6
    7d12:	7f 92       	push	r7
    7d14:	8f 92       	push	r8
    7d16:	9f 92       	push	r9
    7d18:	af 92       	push	r10
    7d1a:	bf 92       	push	r11
    7d1c:	cf 92       	push	r12
    7d1e:	df 92       	push	r13
    7d20:	ef 92       	push	r14
    7d22:	ff 92       	push	r15
    7d24:	0f 93       	push	r16
    7d26:	1f 93       	push	r17
    7d28:	cf 93       	push	r28
    7d2a:	df 93       	push	r29
    7d2c:	dc 01       	movw	r26, r24
    uint8_t index;

    index = 0; 
    start = NULL;
    end = NULL;
    receivebuffer[receivebuffer[0]] = '\0';
    7d2e:	8c 91       	ld	r24, X
    7d30:	fd 01       	movw	r30, r26
    7d32:	e8 0f       	add	r30, r24
    7d34:	f1 1d       	adc	r31, r1
    7d36:	10 82       	st	Z, r1
    7d38:	ef e9       	ldi	r30, 0x9F	; 159
    7d3a:	ee 2e       	mov	r14, r30
    7d3c:	e5 e0       	ldi	r30, 0x05	; 5
    7d3e:	fe 2e       	mov	r15, r30
    7d40:	99 24       	eor	r9, r9
    7d42:	66 24       	eor	r6, r6
    7d44:	77 24       	eor	r7, r7
    7d46:	aa 24       	eor	r10, r10
    7d48:	bb 24       	eor	r11, r11
    7d4a:	88 24       	eor	r8, r8
    7d4c:	c0 e0       	ldi	r28, 0x00	; 0
    7d4e:	d0 e0       	ldi	r29, 0x00	; 0
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    7d50:	73 e0       	ldi	r23, 0x03	; 3
    7d52:	c7 2e       	mov	r12, r23
    7d54:	d1 2c       	mov	r13, r1
    7d56:	ca 0e       	add	r12, r26
    7d58:	db 1e       	adc	r13, r27
    start = NULL;
    end = NULL;
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    7d5a:	ce 01       	movw	r24, r28
    7d5c:	88 0f       	add	r24, r24
    7d5e:	99 1f       	adc	r25, r25
    7d60:	88 0f       	add	r24, r24
    7d62:	99 1f       	adc	r25, r25
    7d64:	88 0f       	add	r24, r24
    7d66:	99 1f       	adc	r25, r25
    7d68:	9c 01       	movw	r18, r24
    7d6a:	22 0f       	add	r18, r18
    7d6c:	33 1f       	adc	r19, r19
    7d6e:	22 0f       	add	r18, r18
    7d70:	33 1f       	adc	r19, r19
    7d72:	28 0f       	add	r18, r24
    7d74:	39 1f       	adc	r19, r25
    7d76:	2c 1b       	sub	r18, r28
    7d78:	3d 0b       	sbc	r19, r29
    7d7a:	89 01       	movw	r16, r18
    7d7c:	02 57       	subi	r16, 0x72	; 114
    7d7e:	1a 4f       	sbci	r17, 0xFA	; 250
    7d80:	f8 01       	movw	r30, r16
    7d82:	82 81       	ldd	r24, Z+2	; 0x02
    7d84:	88 23       	and	r24, r24
    7d86:	79 f5       	brne	.+94     	; 0x7de6 <reply_killthread+0xd6>
                 (char *)&receivebuffer[3]) == 0)
            {
                start = (uint8_t *) thread_table[i].ramstart;
                end = (uint8_t *) thread_table[i].ramend;
                index = i;
                thread_table[i].state = STATE_NULL;
    7d88:	21 96       	adiw	r28, 0x01	; 1
    7d8a:	87 e2       	ldi	r24, 0x27	; 39
    7d8c:	90 e0       	ldi	r25, 0x00	; 0
    7d8e:	e8 0e       	add	r14, r24
    7d90:	f9 1e       	adc	r15, r25

    index = 0; 
    start = NULL;
    end = NULL;
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    7d92:	c4 30       	cpi	r28, 0x04	; 4
    7d94:	d1 05       	cpc	r29, r1
    7d96:	09 f7       	brne	.-62     	; 0x7d5a <reply_killthread+0x4a>
                thread_table[i].state = STATE_NULL;
                testtrue = 1;
            }
        }
    }
    if (testtrue == 1)
    7d98:	91 e0       	ldi	r25, 0x01	; 1
    7d9a:	99 16       	cp	r9, r25
    7d9c:	b9 f1       	breq	.+110    	; 0x7e0c <reply_killthread+0xfc>
           receivehandles[ i ].port = 0;     
           }
           }
         */
    }
    reply[0] = 4;
    7d9e:	84 e0       	ldi	r24, 0x04	; 4
    7da0:	80 93 f5 08 	sts	0x08F5, r24
    reply[1] = 232;
    7da4:	88 ee       	ldi	r24, 0xE8	; 232
    7da6:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    7daa:	80 91 5f 09 	lds	r24, 0x095F
    7dae:	80 93 f7 08 	sts	0x08F7, r24
    reply[3] = testtrue;
    7db2:	90 92 f8 08 	sts	0x08F8, r9
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7db6:	8f ee       	ldi	r24, 0xEF	; 239
    7db8:	9f ee       	ldi	r25, 0xEF	; 239
    7dba:	6f ef       	ldi	r22, 0xFF	; 255
    7dbc:	7f ef       	ldi	r23, 0xFF	; 255
    7dbe:	40 e2       	ldi	r20, 0x20	; 32
    7dc0:	25 ef       	ldi	r18, 0xF5	; 245
    7dc2:	38 e0       	ldi	r19, 0x08	; 8
    7dc4:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
}
    7dc8:	df 91       	pop	r29
    7dca:	cf 91       	pop	r28
    7dcc:	1f 91       	pop	r17
    7dce:	0f 91       	pop	r16
    7dd0:	ff 90       	pop	r15
    7dd2:	ef 90       	pop	r14
    7dd4:	df 90       	pop	r13
    7dd6:	cf 90       	pop	r12
    7dd8:	bf 90       	pop	r11
    7dda:	af 90       	pop	r10
    7ddc:	9f 90       	pop	r9
    7dde:	8f 90       	pop	r8
    7de0:	7f 90       	pop	r7
    7de2:	6f 90       	pop	r6
    7de4:	08 95       	ret
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    7de6:	c9 01       	movw	r24, r18
    7de8:	8d 56       	subi	r24, 0x6D	; 109
    7dea:	9a 4f       	sbci	r25, 0xFA	; 250
    7dec:	b6 01       	movw	r22, r12
    7dee:	0e 94 ac 3b 	call	0x7758	; 0x7758 <superstring>
    7df2:	89 2b       	or	r24, r25
    7df4:	49 f6       	brne	.-110    	; 0x7d88 <reply_killthread+0x78>
                ((char *)thread_table[i].threadName,
                 (char *)&receivebuffer[3]) == 0)
            {
                start = (uint8_t *) thread_table[i].ramstart;
    7df6:	f7 01       	movw	r30, r14
    7df8:	60 80       	ld	r6, Z
    7dfa:	71 80       	ldd	r7, Z+1	; 0x01
                end = (uint8_t *) thread_table[i].ramend;
    7dfc:	a2 80       	ldd	r10, Z+2	; 0x02
    7dfe:	b3 80       	ldd	r11, Z+3	; 0x03
                index = i;
                thread_table[i].state = STATE_NULL;
    7e00:	f8 01       	movw	r30, r16
    7e02:	12 82       	std	Z+2, r1	; 0x02
    7e04:	8c 2e       	mov	r8, r28
    7e06:	99 24       	eor	r9, r9
    7e08:	93 94       	inc	r9
    7e0a:	be cf       	rjmp	.-132    	; 0x7d88 <reply_killthread+0x78>
            }
        }
    }
    if (testtrue == 1)
    {
        deleteThreadRegistrationInReceiverHandles(start, end);
    7e0c:	c3 01       	movw	r24, r6
    7e0e:	b5 01       	movw	r22, r10
    7e10:	0e 94 17 0a 	call	0x142e	; 0x142e <deleteThreadRegistrationInReceiverHandles>
        if (thread_table[index].thread_clear_function != NULL)
    7e14:	08 2d       	mov	r16, r8
    7e16:	10 e0       	ldi	r17, 0x00	; 0
    7e18:	c8 01       	movw	r24, r16
    7e1a:	88 0f       	add	r24, r24
    7e1c:	99 1f       	adc	r25, r25
    7e1e:	88 0f       	add	r24, r24
    7e20:	99 1f       	adc	r25, r25
    7e22:	88 0f       	add	r24, r24
    7e24:	99 1f       	adc	r25, r25
    7e26:	ec 01       	movw	r28, r24
    7e28:	cc 0f       	add	r28, r28
    7e2a:	dd 1f       	adc	r29, r29
    7e2c:	cc 0f       	add	r28, r28
    7e2e:	dd 1f       	adc	r29, r29
    7e30:	c8 0f       	add	r28, r24
    7e32:	d9 1f       	adc	r29, r25
    7e34:	c0 1b       	sub	r28, r16
    7e36:	d1 0b       	sbc	r29, r17
    7e38:	c2 57       	subi	r28, 0x72	; 114
    7e3a:	da 4f       	sbci	r29, 0xFA	; 250
    7e3c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    7e3e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    7e40:	30 97       	sbiw	r30, 0x00	; 0
    7e42:	19 f0       	breq	.+6      	; 0x7e4a <reply_killthread+0x13a>
        {
            (*thread_table[index].thread_clear_function) ();
    7e44:	09 95       	icall
            thread_table[index].thread_clear_function = NULL;
    7e46:	1c 8e       	std	Y+28, r1	; 0x1c
    7e48:	1b 8e       	std	Y+27, r1	; 0x1b
        }
        cbi(MCUCR, SE);
    7e4a:	85 b7       	in	r24, 0x35	; 53
    7e4c:	8f 7d       	andi	r24, 0xDF	; 223
    7e4e:	85 bf       	out	0x35, r24	; 53
        if (timercallback[index] != NULL)
    7e50:	f8 01       	movw	r30, r16
    7e52:	ee 0f       	add	r30, r30
    7e54:	ff 1f       	adc	r31, r31
    7e56:	e1 5a       	subi	r30, 0xA1	; 161
    7e58:	f9 4f       	sbci	r31, 0xF9	; 249
    7e5a:	80 81       	ld	r24, Z
    7e5c:	91 81       	ldd	r25, Z+1	; 0x01
    7e5e:	89 2b       	or	r24, r25
    7e60:	09 f4       	brne	.+2      	; 0x7e64 <reply_killthread+0x154>
    7e62:	9d cf       	rjmp	.-198    	; 0x7d9e <reply_killthread+0x8e>
        {
            timercallback[index] = NULL;
    7e64:	11 82       	std	Z+1, r1	; 0x01
    7e66:	10 82       	st	Z, r1
            GenericTimerStop(index + 12);
    7e68:	88 2d       	mov	r24, r8
    7e6a:	84 5f       	subi	r24, 0xF4	; 244
    7e6c:	0e 94 8a 37 	call	0x6f14	; 0x6f14 <GenericTimerStop>
    7e70:	96 cf       	rjmp	.-212    	; 0x7d9e <reply_killthread+0x8e>

00007e72 <reply126>:

//-------------------------------------------------------------------------
//possible bug here 
void reply126(uint8_t * receivebuffer)
{
    fclose2(fp);
    7e72:	80 91 90 08 	lds	r24, 0x0890
    7e76:	90 91 91 08 	lds	r25, 0x0891
    7e7a:	0e 94 7e 25 	call	0x4afc	; 0x4afc <fclose2>
}
    7e7e:	08 95       	ret

00007e80 <reply_cp_fromPCtoNode_type3>:
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type3()
{
    fclose2(openedfile);
    7e80:	80 91 92 08 	lds	r24, 0x0892
    7e84:	90 91 93 08 	lds	r25, 0x0893
    7e88:	0e 94 7e 25 	call	0x4afc	; 0x4afc <fclose2>
    // printStringN(reply,32);      
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7e8c:	8f ee       	ldi	r24, 0xEF	; 239
    7e8e:	9f ee       	ldi	r25, 0xEF	; 239
    7e90:	6f ef       	ldi	r22, 0xFF	; 255
    7e92:	7f ef       	ldi	r23, 0xFF	; 255
    7e94:	40 e2       	ldi	r20, 0x20	; 32
    7e96:	25 ef       	ldi	r18, 0xF5	; 245
    7e98:	38 e0       	ldi	r19, 0x08	; 8
    7e9a:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
}
    7e9e:	08 95       	ret

00007ea0 <reply_fromNodeToPC_type2>:
    //printStringN(reply,32);       
}

//get patch request
void reply_fromNodeToPC_type2(uint8_t * receivebuffer)
{
    7ea0:	0f 93       	push	r16
    7ea2:	1f 93       	push	r17
    7ea4:	fc 01       	movw	r30, r24
    uint16_t pos;
    //disabletracingfunction();

    pos = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
    7ea6:	54 81       	ldd	r21, Z+4	; 0x04
    7ea8:	40 e0       	ldi	r20, 0x00	; 0
    7eaa:	85 81       	ldd	r24, Z+5	; 0x05
    7eac:	48 0f       	add	r20, r24
    7eae:	51 1d       	adc	r21, r1
    reply[0] = 26;
    7eb0:	05 ef       	ldi	r16, 0xF5	; 245
    7eb2:	18 e0       	ldi	r17, 0x08	; 8
    7eb4:	8a e1       	ldi	r24, 0x1A	; 26
    7eb6:	80 93 f5 08 	sts	0x08F5, r24
    reply[1] = 125;
    7eba:	8d e7       	ldi	r24, 0x7D	; 125
    7ebc:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    7ec0:	80 91 5f 09 	lds	r24, 0x095F
    7ec4:	80 93 f7 08 	sts	0x08F7, r24
    reply[3] = pos / 256;
    7ec8:	50 93 f8 08 	sts	0x08F8, r21
    reply[4] = pos % 256;
    7ecc:	40 93 f9 08 	sts	0x08F9, r20
    fseek2(fp, (int32_t) pos, 0);
    7ed0:	60 e0       	ldi	r22, 0x00	; 0
    7ed2:	70 e0       	ldi	r23, 0x00	; 0
    7ed4:	80 91 90 08 	lds	r24, 0x0890
    7ed8:	90 91 91 08 	lds	r25, 0x0891
    7edc:	20 e0       	ldi	r18, 0x00	; 0
    7ede:	30 e0       	ldi	r19, 0x00	; 0
    7ee0:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <fseek2>
    fread2(fp, &reply[6], 20);
    7ee4:	b8 01       	movw	r22, r16
    7ee6:	6a 5f       	subi	r22, 0xFA	; 250
    7ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    7eea:	80 91 90 08 	lds	r24, 0x0890
    7eee:	90 91 91 08 	lds	r25, 0x0891
    7ef2:	44 e1       	ldi	r20, 0x14	; 20
    7ef4:	50 e0       	ldi	r21, 0x00	; 0
    7ef6:	0e 94 0f 24 	call	0x481e	; 0x481e <fread2>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7efa:	8f ee       	ldi	r24, 0xEF	; 239
    7efc:	9f ee       	ldi	r25, 0xEF	; 239
    7efe:	6f ef       	ldi	r22, 0xFF	; 255
    7f00:	7f ef       	ldi	r23, 0xFF	; 255
    7f02:	40 e2       	ldi	r20, 0x20	; 32
    7f04:	98 01       	movw	r18, r16
    7f06:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    
   // enabletracingfunction();
}
    7f0a:	1f 91       	pop	r17
    7f0c:	0f 91       	pop	r16
    7f0e:	08 95       	ret

00007f10 <reply_rm>:
    //enabletracingfunction();
}

//-------------------------------------------------------------------------
void reply_rm(uint8_t * receivebuffer)
{
    7f10:	df 92       	push	r13
    7f12:	ef 92       	push	r14
    7f14:	ff 92       	push	r15
    7f16:	0f 93       	push	r16
    7f18:	1f 93       	push	r17
    7f1a:	df 93       	push	r29
    7f1c:	cf 93       	push	r28
    7f1e:	cd b7       	in	r28, 0x3d	; 61
    7f20:	de b7       	in	r29, 0x3e	; 62
    7f22:	2d 97       	sbiw	r28, 0x0d	; 13
    7f24:	0f b6       	in	r0, 0x3f	; 63
    7f26:	f8 94       	cli
    7f28:	de bf       	out	0x3e, r29	; 62
    7f2a:	0f be       	out	0x3f, r0	; 63
    7f2c:	cd bf       	out	0x3d, r28	; 61
    7f2e:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char filename[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    7f30:	fc 01       	movw	r30, r24
    7f32:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    7f34:	bc 01       	movw	r22, r24
    7f36:	6c 5f       	subi	r22, 0xFC	; 252
    7f38:	7f 4f       	sbci	r23, 0xFF	; 255
    7f3a:	40 81       	ld	r20, Z
    7f3c:	44 50       	subi	r20, 0x04	; 4
    7f3e:	7e 01       	movw	r14, r28
    7f40:	08 94       	sec
    7f42:	e1 1c       	adc	r14, r1
    7f44:	f1 1c       	adc	r15, r1
    7f46:	c7 01       	movw	r24, r14
    7f48:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    7f4c:	f8 01       	movw	r30, r16
    7f4e:	80 81       	ld	r24, Z
    7f50:	fe 01       	movw	r30, r28
    7f52:	33 97       	sbiw	r30, 0x03	; 3
    7f54:	e8 0f       	add	r30, r24
    7f56:	f1 1d       	adc	r31, r1
    7f58:	10 82       	st	Z, r1
    newblockid = existBlockAddr(filename, (int)blockid);
    7f5a:	c7 01       	movw	r24, r14
    7f5c:	6d 2d       	mov	r22, r13
    7f5e:	70 e0       	ldi	r23, 0x00	; 0
    7f60:	0e 94 c9 2b 	call	0x5792	; 0x5792 <existBlockAddr>
    7f64:	08 2f       	mov	r16, r24
    if (newblockid > 0)
    7f66:	88 23       	and	r24, r24
    7f68:	19 f0       	breq	.+6      	; 0x7f70 <reply_rm+0x60>
    {
        deleteNode(newblockid);
    7f6a:	90 e0       	ldi	r25, 0x00	; 0
    7f6c:	0e 94 40 28 	call	0x5080	; 0x5080 <deleteNode>
    }
    reply[0] = 4;
    7f70:	84 e0       	ldi	r24, 0x04	; 4
    7f72:	80 93 f5 08 	sts	0x08F5, r24
    reply[1] = 161;
    7f76:	81 ea       	ldi	r24, 0xA1	; 161
    7f78:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    7f7c:	80 91 5f 09 	lds	r24, 0x095F
    7f80:	80 93 f7 08 	sts	0x08F7, r24
    reply[3] = newblockid;
    7f84:	00 93 f8 08 	sts	0x08F8, r16
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    7f88:	8f ee       	ldi	r24, 0xEF	; 239
    7f8a:	9f ee       	ldi	r25, 0xEF	; 239
    7f8c:	6f ef       	ldi	r22, 0xFF	; 255
    7f8e:	7f ef       	ldi	r23, 0xFF	; 255
    7f90:	40 e2       	ldi	r20, 0x20	; 32
    7f92:	25 ef       	ldi	r18, 0xF5	; 245
    7f94:	38 e0       	ldi	r19, 0x08	; 8
    7f96:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    //printStringN(reply,32);       
}
    7f9a:	2d 96       	adiw	r28, 0x0d	; 13
    7f9c:	0f b6       	in	r0, 0x3f	; 63
    7f9e:	f8 94       	cli
    7fa0:	de bf       	out	0x3e, r29	; 62
    7fa2:	0f be       	out	0x3f, r0	; 63
    7fa4:	cd bf       	out	0x3d, r28	; 61
    7fa6:	cf 91       	pop	r28
    7fa8:	df 91       	pop	r29
    7faa:	1f 91       	pop	r17
    7fac:	0f 91       	pop	r16
    7fae:	ff 90       	pop	r15
    7fb0:	ef 90       	pop	r14
    7fb2:	df 90       	pop	r13
    7fb4:	08 95       	ret

00007fb6 <reply_fromNodeToPC_type1>:
    //printStringN(reply,32);       
}

//-------------------------------------------------------------------------
void reply_fromNodeToPC_type1(uint8_t * receivebuffer)
{
    7fb6:	9f 92       	push	r9
    7fb8:	af 92       	push	r10
    7fba:	bf 92       	push	r11
    7fbc:	cf 92       	push	r12
    7fbe:	df 92       	push	r13
    7fc0:	ef 92       	push	r14
    7fc2:	ff 92       	push	r15
    7fc4:	0f 93       	push	r16
    7fc6:	1f 93       	push	r17
    7fc8:	df 93       	push	r29
    7fca:	cf 93       	push	r28
    7fcc:	cd b7       	in	r28, 0x3d	; 61
    7fce:	de b7       	in	r29, 0x3e	; 62
    7fd0:	2d 97       	sbiw	r28, 0x0d	; 13
    7fd2:	0f b6       	in	r0, 0x3f	; 63
    7fd4:	f8 94       	cli
    7fd6:	de bf       	out	0x3e, r29	; 62
    7fd8:	0f be       	out	0x3f, r0	; 63
    7fda:	cd bf       	out	0x3d, r28	; 61
    7fdc:	8c 01       	movw	r16, r24
    uint16_t remain;
    uint16_t i;
    uint8_t newblockid;
    uint8_t temp1, temp2;

    blockid = receivebuffer[3];
    7fde:	fc 01       	movw	r30, r24
    7fe0:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    7fe2:	bc 01       	movw	r22, r24
    7fe4:	6c 5f       	subi	r22, 0xFC	; 252
    7fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    7fe8:	40 81       	ld	r20, Z
    7fea:	44 50       	subi	r20, 0x04	; 4
    7fec:	7e 01       	movw	r14, r28
    7fee:	08 94       	sec
    7ff0:	e1 1c       	adc	r14, r1
    7ff2:	f1 1c       	adc	r15, r1
    7ff4:	c7 01       	movw	r24, r14
    7ff6:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    7ffa:	f8 01       	movw	r30, r16
    7ffc:	80 81       	ld	r24, Z
    7ffe:	fe 01       	movw	r30, r28
    8000:	33 97       	sbiw	r30, 0x03	; 3
    8002:	e8 0f       	add	r30, r24
    8004:	f1 1d       	adc	r31, r1
    8006:	10 82       	st	Z, r1
    newblockid = existBlockAddr(filename, (int)blockid);
    8008:	c7 01       	movw	r24, r14
    800a:	6d 2d       	mov	r22, r13
    800c:	70 e0       	ldi	r23, 0x00	; 0
    800e:	0e 94 c9 2b 	call	0x5792	; 0x5792 <existBlockAddr>
    8012:	f8 2e       	mov	r15, r24
    reply[1] = 124;
    8014:	8c e7       	ldi	r24, 0x7C	; 124
    8016:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    801a:	80 91 5f 09 	lds	r24, 0x095F
    801e:	80 93 f7 08 	sts	0x08F7, r24
    fid = getFreeFid();
    8022:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <getFreeFid>
    8026:	18 2f       	mov	r17, r24
    8028:	09 2f       	mov	r16, r25
    openFile(newblockid, fid, 1);
    802a:	8f 2d       	mov	r24, r15
    802c:	90 e0       	ldi	r25, 0x00	; 0
    802e:	61 2f       	mov	r22, r17
    8030:	70 2f       	mov	r23, r16
    8032:	41 e0       	ldi	r20, 0x01	; 1
    8034:	50 e0       	ldi	r21, 0x00	; 0
    8036:	0e 94 19 2b 	call	0x5632	; 0x5632 <openFile>
    fp = &fidtable[fid];
    803a:	81 2f       	mov	r24, r17
    803c:	90 2f       	mov	r25, r16
    803e:	fc 01       	movw	r30, r24
    8040:	ee 0f       	add	r30, r30
    8042:	ff 1f       	adc	r31, r31
    8044:	ee 0f       	add	r30, r30
    8046:	ff 1f       	adc	r31, r31
    8048:	ee 0f       	add	r30, r30
    804a:	ff 1f       	adc	r31, r31
    804c:	88 0f       	add	r24, r24
    804e:	99 1f       	adc	r25, r25
    8050:	e8 0f       	add	r30, r24
    8052:	f9 1f       	adc	r31, r25
    8054:	e0 5d       	subi	r30, 0xD0	; 208
    8056:	f9 4f       	sbci	r31, 0xF9	; 249
    8058:	f0 93 91 08 	sts	0x0891, r31
    805c:	e0 93 90 08 	sts	0x0890, r30
    filesize = fp->size;
    8060:	14 81       	ldd	r17, Z+4	; 0x04
    8062:	05 81       	ldd	r16, Z+5	; 0x05
    temp1 = filesize / 256;
    temp2 = filesize % 256;
    reply[3] = temp1;
    8064:	00 93 f8 08 	sts	0x08F8, r16
    reply[4] = temp2;
    8068:	10 93 f9 08 	sts	0x08F9, r17
    //disabletracingfunction();
    //send out the size 
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    806c:	8f ee       	ldi	r24, 0xEF	; 239
    806e:	9f ee       	ldi	r25, 0xEF	; 239
    8070:	6f ef       	ldi	r22, 0xFF	; 255
    8072:	7f ef       	ldi	r23, 0xFF	; 255
    8074:	40 e2       	ldi	r20, 0x20	; 32
    8076:	25 ef       	ldi	r18, 0xF5	; 245
    8078:	38 e0       	ldi	r19, 0x08	; 8
    807a:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    
    //    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //sleepThread( 100 );
    reply[3] = newblockid;
    807e:	f0 92 f8 08 	sts	0x08F8, r15
    round = filesize / 20;
    8082:	81 2f       	mov	r24, r17
    8084:	90 2f       	mov	r25, r16
    8086:	64 e1       	ldi	r22, 0x14	; 20
    8088:	70 e0       	ldi	r23, 0x00	; 0
    808a:	0e 94 84 56 	call	0xad08	; 0xad08 <__udivmodhi4>
    808e:	7b 01       	movw	r14, r22
    8090:	5b 01       	movw	r10, r22
    remain = filesize % 20;
    8092:	81 2f       	mov	r24, r17
    8094:	90 2f       	mov	r25, r16
    8096:	64 e1       	ldi	r22, 0x14	; 20
    8098:	70 e0       	ldi	r23, 0x00	; 0
    809a:	0e 94 84 56 	call	0xad08	; 0xad08 <__udivmodhi4>
    809e:	6c 01       	movw	r12, r24
    for (i = 0; i < round; i++)
    80a0:	e1 14       	cp	r14, r1
    80a2:	f1 04       	cpc	r15, r1
    80a4:	71 f1       	breq	.+92     	; 0x8102 <reply_fromNodeToPC_type1+0x14c>
    80a6:	00 e0       	ldi	r16, 0x00	; 0
    80a8:	10 e0       	ldi	r17, 0x00	; 0
    {
        fread2(fp, &reply[6], 20);
        fseek2(fp, 20, 1);
        reply[0] = 26;
    80aa:	fa e1       	ldi	r31, 0x1A	; 26
    80ac:	9f 2e       	mov	r9, r31
    reply[3] = newblockid;
    round = filesize / 20;
    remain = filesize % 20;
    for (i = 0; i < round; i++)
    {
        fread2(fp, &reply[6], 20);
    80ae:	80 91 90 08 	lds	r24, 0x0890
    80b2:	90 91 91 08 	lds	r25, 0x0891
    80b6:	6b ef       	ldi	r22, 0xFB	; 251
    80b8:	78 e0       	ldi	r23, 0x08	; 8
    80ba:	44 e1       	ldi	r20, 0x14	; 20
    80bc:	50 e0       	ldi	r21, 0x00	; 0
    80be:	0e 94 0f 24 	call	0x481e	; 0x481e <fread2>
        fseek2(fp, 20, 1);
    80c2:	80 91 90 08 	lds	r24, 0x0890
    80c6:	90 91 91 08 	lds	r25, 0x0891
    80ca:	44 e1       	ldi	r20, 0x14	; 20
    80cc:	50 e0       	ldi	r21, 0x00	; 0
    80ce:	60 e0       	ldi	r22, 0x00	; 0
    80d0:	70 e0       	ldi	r23, 0x00	; 0
    80d2:	21 e0       	ldi	r18, 0x01	; 1
    80d4:	30 e0       	ldi	r19, 0x00	; 0
    80d6:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <fseek2>
        reply[0] = 26;
    80da:	90 92 f5 08 	sts	0x08F5, r9
        temp1 = i / 256;
        temp2 = i % 256;
        reply[4] = temp1;
    80de:	10 93 f9 08 	sts	0x08F9, r17
        reply[5] = temp2;
    80e2:	00 93 fa 08 	sts	0x08FA, r16
        //printStringN(reply,32);                   
        // sleepThread( 100 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    80e6:	8f ee       	ldi	r24, 0xEF	; 239
    80e8:	9f ee       	ldi	r25, 0xEF	; 239
    80ea:	6f ef       	ldi	r22, 0xFF	; 255
    80ec:	7f ef       	ldi	r23, 0xFF	; 255
    80ee:	40 e2       	ldi	r20, 0x20	; 32
    80f0:	25 ef       	ldi	r18, 0xF5	; 245
    80f2:	38 e0       	ldi	r19, 0x08	; 8
    80f4:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    //    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //sleepThread( 100 );
    reply[3] = newblockid;
    round = filesize / 20;
    remain = filesize % 20;
    for (i = 0; i < round; i++)
    80f8:	0f 5f       	subi	r16, 0xFF	; 255
    80fa:	1f 4f       	sbci	r17, 0xFF	; 255
    80fc:	0e 15       	cp	r16, r14
    80fe:	1f 05       	cpc	r17, r15
    8100:	b0 f2       	brcs	.-84     	; 0x80ae <reply_fromNodeToPC_type1+0xf8>
        reply[5] = temp2;
        //printStringN(reply,32);                   
        // sleepThread( 100 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
    if (remain > 0)
    8102:	c1 14       	cp	r12, r1
    8104:	d1 04       	cpc	r13, r1
    8106:	f1 f0       	breq	.+60     	; 0x8144 <reply_fromNodeToPC_type1+0x18e>
    {
        fread2(fp, &reply[6], remain);
    8108:	80 91 90 08 	lds	r24, 0x0890
    810c:	90 91 91 08 	lds	r25, 0x0891
    8110:	6b ef       	ldi	r22, 0xFB	; 251
    8112:	78 e0       	ldi	r23, 0x08	; 8
    8114:	a6 01       	movw	r20, r12
    8116:	0e 94 0f 24 	call	0x481e	; 0x481e <fread2>
        reply[0] = (uint8_t) remain + 6;
    811a:	8c 2d       	mov	r24, r12
    811c:	8a 5f       	subi	r24, 0xFA	; 250
    811e:	80 93 f5 08 	sts	0x08F5, r24
        reply[4] = round / 256;
    8122:	f0 92 f9 08 	sts	0x08F9, r15
        reply[5] = round % 256;
    8126:	e0 92 fa 08 	sts	0x08FA, r14
        round++;
    812a:	57 01       	movw	r10, r14
    812c:	08 94       	sec
    812e:	a1 1c       	adc	r10, r1
    8130:	b1 1c       	adc	r11, r1
        //printStringN(reply,32);
        //sleepThread( 25 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    8132:	8f ee       	ldi	r24, 0xEF	; 239
    8134:	9f ee       	ldi	r25, 0xEF	; 239
    8136:	6f ef       	ldi	r22, 0xFF	; 255
    8138:	7f ef       	ldi	r23, 0xFF	; 255
    813a:	40 e2       	ldi	r20, 0x20	; 32
    813c:	25 ef       	ldi	r18, 0xF5	; 245
    813e:	38 e0       	ldi	r19, 0x08	; 8
    8140:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    }
    temp1 = round / 256;
    temp2 = round % 256;
    //terminate signal  is here!
    reply[0] = 7;
    8144:	87 e0       	ldi	r24, 0x07	; 7
    8146:	80 93 f5 08 	sts	0x08F5, r24
    reply[3] = 0xef;
    814a:	8f ee       	ldi	r24, 0xEF	; 239
    814c:	80 93 f8 08 	sts	0x08F8, r24
    reply[4] = 0xef;
    8150:	80 93 f9 08 	sts	0x08F9, r24
    reply[5] = temp1;
    8154:	b0 92 fa 08 	sts	0x08FA, r11
    reply[6] = temp2;
    8158:	a0 92 fb 08 	sts	0x08FB, r10
    //ephread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    815c:	8f ee       	ldi	r24, 0xEF	; 239
    815e:	9f ee       	ldi	r25, 0xEF	; 239
    8160:	6f ef       	ldi	r22, 0xFF	; 255
    8162:	7f ef       	ldi	r23, 0xFF	; 255
    8164:	40 e2       	ldi	r20, 0x20	; 32
    8166:	25 ef       	ldi	r18, 0xF5	; 245
    8168:	38 e0       	ldi	r19, 0x08	; 8
    816a:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    816e:	8f ee       	ldi	r24, 0xEF	; 239
    8170:	9f ee       	ldi	r25, 0xEF	; 239
    8172:	6f ef       	ldi	r22, 0xFF	; 255
    8174:	7f ef       	ldi	r23, 0xFF	; 255
    8176:	40 e2       	ldi	r20, 0x20	; 32
    8178:	25 ef       	ldi	r18, 0xF5	; 245
    817a:	38 e0       	ldi	r19, 0x08	; 8
    817c:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8180:	8f ee       	ldi	r24, 0xEF	; 239
    8182:	9f ee       	ldi	r25, 0xEF	; 239
    8184:	6f ef       	ldi	r22, 0xFF	; 255
    8186:	7f ef       	ldi	r23, 0xFF	; 255
    8188:	40 e2       	ldi	r20, 0x20	; 32
    818a:	25 ef       	ldi	r18, 0xF5	; 245
    818c:	38 e0       	ldi	r19, 0x08	; 8
    818e:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8192:	8f ee       	ldi	r24, 0xEF	; 239
    8194:	9f ee       	ldi	r25, 0xEF	; 239
    8196:	6f ef       	ldi	r22, 0xFF	; 255
    8198:	7f ef       	ldi	r23, 0xFF	; 255
    819a:	40 e2       	ldi	r20, 0x20	; 32
    819c:	25 ef       	ldi	r18, 0xF5	; 245
    819e:	38 e0       	ldi	r19, 0x08	; 8
    81a0:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    //do not close now!
    //       fclose2(fp); 
    
    //enabletracingfunction();
}
    81a4:	2d 96       	adiw	r28, 0x0d	; 13
    81a6:	0f b6       	in	r0, 0x3f	; 63
    81a8:	f8 94       	cli
    81aa:	de bf       	out	0x3e, r29	; 62
    81ac:	0f be       	out	0x3f, r0	; 63
    81ae:	cd bf       	out	0x3d, r28	; 61
    81b0:	cf 91       	pop	r28
    81b2:	df 91       	pop	r29
    81b4:	1f 91       	pop	r17
    81b6:	0f 91       	pop	r16
    81b8:	ff 90       	pop	r15
    81ba:	ef 90       	pop	r14
    81bc:	df 90       	pop	r13
    81be:	cf 90       	pop	r12
    81c0:	bf 90       	pop	r11
    81c2:	af 90       	pop	r10
    81c4:	9f 90       	pop	r9
    81c6:	08 95       	ret

000081c8 <reply_touch>:
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_touch(uint8_t * receivebuffer)
{
    81c8:	df 92       	push	r13
    81ca:	ef 92       	push	r14
    81cc:	ff 92       	push	r15
    81ce:	0f 93       	push	r16
    81d0:	1f 93       	push	r17
    81d2:	df 93       	push	r29
    81d4:	cf 93       	push	r28
    81d6:	cd b7       	in	r28, 0x3d	; 61
    81d8:	de b7       	in	r29, 0x3e	; 62
    81da:	2d 97       	sbiw	r28, 0x0d	; 13
    81dc:	0f b6       	in	r0, 0x3f	; 63
    81de:	f8 94       	cli
    81e0:	de bf       	out	0x3e, r29	; 62
    81e2:	0f be       	out	0x3f, r0	; 63
    81e4:	cd bf       	out	0x3d, r28	; 61
    81e6:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char filename[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    81e8:	fc 01       	movw	r30, r24
    81ea:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    81ec:	bc 01       	movw	r22, r24
    81ee:	6c 5f       	subi	r22, 0xFC	; 252
    81f0:	7f 4f       	sbci	r23, 0xFF	; 255
    81f2:	40 81       	ld	r20, Z
    81f4:	44 50       	subi	r20, 0x04	; 4
    81f6:	7e 01       	movw	r14, r28
    81f8:	08 94       	sec
    81fa:	e1 1c       	adc	r14, r1
    81fc:	f1 1c       	adc	r15, r1
    81fe:	c7 01       	movw	r24, r14
    8200:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    8204:	f8 01       	movw	r30, r16
    8206:	80 81       	ld	r24, Z
    8208:	fe 01       	movw	r30, r28
    820a:	33 97       	sbiw	r30, 0x03	; 3
    820c:	e8 0f       	add	r30, r24
    820e:	f1 1d       	adc	r31, r1
    8210:	10 82       	st	Z, r1
    newblockid = createFileFromDirectory(filename, (int)blockid);
    8212:	c7 01       	movw	r24, r14
    8214:	6d 2d       	mov	r22, r13
    8216:	70 e0       	ldi	r23, 0x00	; 0
    8218:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <createFileFromDirectory>
    reply[0] = 4;
    821c:	94 e0       	ldi	r25, 0x04	; 4
    821e:	90 93 f5 08 	sts	0x08F5, r25
    reply[1] = 151;
    8222:	97 e9       	ldi	r25, 0x97	; 151
    8224:	90 93 f6 08 	sts	0x08F6, r25
    reply[2] = nodeid;
    8228:	90 91 5f 09 	lds	r25, 0x095F
    822c:	90 93 f7 08 	sts	0x08F7, r25
    reply[3] = newblockid;
    8230:	80 93 f8 08 	sts	0x08F8, r24
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8234:	8f ee       	ldi	r24, 0xEF	; 239
    8236:	9f ee       	ldi	r25, 0xEF	; 239
    8238:	6f ef       	ldi	r22, 0xFF	; 255
    823a:	7f ef       	ldi	r23, 0xFF	; 255
    823c:	40 e2       	ldi	r20, 0x20	; 32
    823e:	25 ef       	ldi	r18, 0xF5	; 245
    8240:	38 e0       	ldi	r19, 0x08	; 8
    8242:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    //printStringN(reply,32);       
}
    8246:	2d 96       	adiw	r28, 0x0d	; 13
    8248:	0f b6       	in	r0, 0x3f	; 63
    824a:	f8 94       	cli
    824c:	de bf       	out	0x3e, r29	; 62
    824e:	0f be       	out	0x3f, r0	; 63
    8250:	cd bf       	out	0x3d, r28	; 61
    8252:	cf 91       	pop	r28
    8254:	df 91       	pop	r29
    8256:	1f 91       	pop	r17
    8258:	0f 91       	pop	r16
    825a:	ff 90       	pop	r15
    825c:	ef 90       	pop	r14
    825e:	df 90       	pop	r13
    8260:	08 95       	ret

00008262 <reply_cp_fromPCtoNode_type2>:
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type2(uint8_t * receivebuffer)
{
    8262:	cf 93       	push	r28
    8264:	df 93       	push	r29
    8266:	ec 01       	movw	r28, r24
    uint16_t SyncNum;

    if (receivebuffer[3] == 0xff)
    8268:	8b 81       	ldd	r24, Y+3	; 0x03
    826a:	8f 3f       	cpi	r24, 0xFF	; 255
    826c:	a1 f0       	breq	.+40     	; 0x8296 <reply_cp_fromPCtoNode_type2+0x34>
            reply[6] = 0;
            StandardSocketSend(0xefef, 0xffff, 32, reply);
        }
        return;
    }
    chunksequencenum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
    826e:	9c 81       	ldd	r25, Y+4	; 0x04
    8270:	80 e0       	ldi	r24, 0x00	; 0
    8272:	2d 81       	ldd	r18, Y+5	; 0x05
    8274:	82 0f       	add	r24, r18
    8276:	91 1d       	adc	r25, r1
    8278:	90 93 18 09 	sts	0x0918, r25
    827c:	80 93 17 09 	sts	0x0917, r24
    if (chunksequencenum != expectNextNum)
    8280:	20 91 15 09 	lds	r18, 0x0915
    8284:	30 91 16 09 	lds	r19, 0x0916
    8288:	82 17       	cp	r24, r18
    828a:	93 07       	cpc	r25, r19
    828c:	09 f4       	brne	.+2      	; 0x8290 <reply_cp_fromPCtoNode_type2+0x2e>
    828e:	47 c0       	rjmp	.+142    	; 0x831e <reply_cp_fromPCtoNode_type2+0xbc>
    fwrite2(openedfile, &receivebuffer[7], receivebuffer[6]);
    fseek2(openedfile, receivebuffer[6], 1);
    expectNextNum++;
    // printStringN(reply,32);      
    //StandardSocketSend(0xefef, 0xffff, 32, reply);
}
    8290:	df 91       	pop	r29
    8292:	cf 91       	pop	r28
    8294:	08 95       	ret

    if (receivebuffer[3] == 0xff)
    {
        //now this is a sync
        SyncNum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
        if (SyncNum > expectNextNum - 1)
    8296:	60 91 15 09 	lds	r22, 0x0915
    829a:	70 91 16 09 	lds	r23, 0x0916
    829e:	ab 01       	movw	r20, r22
    82a0:	41 50       	subi	r20, 0x01	; 1
    82a2:	50 40       	sbci	r21, 0x00	; 0
    82a4:	9c 81       	ldd	r25, Y+4	; 0x04
    82a6:	80 e0       	ldi	r24, 0x00	; 0
    82a8:	2d 81       	ldd	r18, Y+5	; 0x05
    82aa:	82 0f       	add	r24, r18
    82ac:	91 1d       	adc	r25, r1
    82ae:	48 17       	cp	r20, r24
    82b0:	59 07       	cpc	r21, r25
    82b2:	f8 f0       	brcs	.+62     	; 0x82f2 <reply_cp_fromPCtoNode_type2+0x90>
            reply[6] = (expectNextNum - 1) % 256;
            StandardSocketSend(0xefef, 0xffff, 32, reply);
        }
        else
        {
            reply[0] = 7;
    82b4:	87 e0       	ldi	r24, 0x07	; 7
    82b6:	80 93 f5 08 	sts	0x08F5, r24
            reply[1] = 122;
    82ba:	8a e7       	ldi	r24, 0x7A	; 122
    82bc:	80 93 f6 08 	sts	0x08F6, r24
            reply[2] = nodeid;
    82c0:	80 91 5f 09 	lds	r24, 0x095F
    82c4:	80 93 f7 08 	sts	0x08F7, r24
            reply[3] = 15;
    82c8:	8f e0       	ldi	r24, 0x0F	; 15
    82ca:	80 93 f8 08 	sts	0x08F8, r24
            reply[4] = 15;
    82ce:	80 93 f9 08 	sts	0x08F9, r24
            reply[5] = 0;
    82d2:	10 92 fa 08 	sts	0x08FA, r1
            reply[6] = 0;
    82d6:	10 92 fb 08 	sts	0x08FB, r1
            StandardSocketSend(0xefef, 0xffff, 32, reply);
    82da:	8f ee       	ldi	r24, 0xEF	; 239
    82dc:	9f ee       	ldi	r25, 0xEF	; 239
    82de:	6f ef       	ldi	r22, 0xFF	; 255
    82e0:	7f ef       	ldi	r23, 0xFF	; 255
    82e2:	40 e2       	ldi	r20, 0x20	; 32
    82e4:	25 ef       	ldi	r18, 0xF5	; 245
    82e6:	38 e0       	ldi	r19, 0x08	; 8
    82e8:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    fwrite2(openedfile, &receivebuffer[7], receivebuffer[6]);
    fseek2(openedfile, receivebuffer[6], 1);
    expectNextNum++;
    // printStringN(reply,32);      
    //StandardSocketSend(0xefef, 0xffff, 32, reply);
}
    82ec:	df 91       	pop	r29
    82ee:	cf 91       	pop	r28
    82f0:	08 95       	ret
    {
        //now this is a sync
        SyncNum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
        if (SyncNum > expectNextNum - 1)
        {
            reply[0] = 7;
    82f2:	87 e0       	ldi	r24, 0x07	; 7
    82f4:	80 93 f5 08 	sts	0x08F5, r24
            reply[1] = 122;
    82f8:	8a e7       	ldi	r24, 0x7A	; 122
    82fa:	80 93 f6 08 	sts	0x08F6, r24
            reply[2] = nodeid;
    82fe:	80 91 5f 09 	lds	r24, 0x095F
    8302:	80 93 f7 08 	sts	0x08F7, r24
            reply[3] = 15;
    8306:	8f e0       	ldi	r24, 0x0F	; 15
    8308:	80 93 f8 08 	sts	0x08F8, r24
            reply[4] = 15;
    830c:	80 93 f9 08 	sts	0x08F9, r24
            reply[5] = (expectNextNum - 1) / 256;
    8310:	50 93 fa 08 	sts	0x08FA, r21
            reply[6] = (expectNextNum - 1) % 256;
    8314:	86 2f       	mov	r24, r22
    8316:	81 50       	subi	r24, 0x01	; 1
    8318:	80 93 fb 08 	sts	0x08FB, r24
    831c:	de cf       	rjmp	.-68     	; 0x82da <reply_cp_fromPCtoNode_type2+0x78>
    chunksequencenum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
    if (chunksequencenum != expectNextNum)
    {
        return;
    }
    fwrite2(openedfile, &receivebuffer[7], receivebuffer[6]);
    831e:	be 01       	movw	r22, r28
    8320:	69 5f       	subi	r22, 0xF9	; 249
    8322:	7f 4f       	sbci	r23, 0xFF	; 255
    8324:	4e 81       	ldd	r20, Y+6	; 0x06
    8326:	80 91 92 08 	lds	r24, 0x0892
    832a:	90 91 93 08 	lds	r25, 0x0893
    832e:	50 e0       	ldi	r21, 0x00	; 0
    8330:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <fwrite2>
    fseek2(openedfile, receivebuffer[6], 1);
    8334:	4e 81       	ldd	r20, Y+6	; 0x06
    8336:	50 e0       	ldi	r21, 0x00	; 0
    8338:	60 e0       	ldi	r22, 0x00	; 0
    833a:	70 e0       	ldi	r23, 0x00	; 0
    833c:	80 91 92 08 	lds	r24, 0x0892
    8340:	90 91 93 08 	lds	r25, 0x0893
    8344:	21 e0       	ldi	r18, 0x01	; 1
    8346:	30 e0       	ldi	r19, 0x00	; 0
    8348:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <fseek2>
    expectNextNum++;
    834c:	80 91 15 09 	lds	r24, 0x0915
    8350:	90 91 16 09 	lds	r25, 0x0916
    8354:	01 96       	adiw	r24, 0x01	; 1
    8356:	90 93 16 09 	sts	0x0916, r25
    835a:	80 93 15 09 	sts	0x0915, r24
    // printStringN(reply,32);      
    //StandardSocketSend(0xefef, 0xffff, 32, reply);
}
    835e:	df 91       	pop	r29
    8360:	cf 91       	pop	r28
    8362:	08 95       	ret

00008364 <reply_cp_fromPCtoNode_type1>:
    // printStringN(reply,32);      
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type1(uint8_t * receivebuffer)
{
    8364:	df 92       	push	r13
    8366:	ef 92       	push	r14
    8368:	ff 92       	push	r15
    836a:	0f 93       	push	r16
    836c:	1f 93       	push	r17
    836e:	df 93       	push	r29
    8370:	cf 93       	push	r28
    8372:	cd b7       	in	r28, 0x3d	; 61
    8374:	de b7       	in	r29, 0x3e	; 62
    8376:	2d 97       	sbiw	r28, 0x0d	; 13
    8378:	0f b6       	in	r0, 0x3f	; 63
    837a:	f8 94       	cli
    837c:	de bf       	out	0x3e, r29	; 62
    837e:	0f be       	out	0x3f, r0	; 63
    8380:	cd bf       	out	0x3d, r28	; 61
    8382:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char filename[13];
    int fid;
    uint8_t newblockid;
      
    releaseAllFid();
    8384:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <releaseAllFid>
    blockid = receivebuffer[3];
    8388:	f8 01       	movw	r30, r16
    838a:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    838c:	b8 01       	movw	r22, r16
    838e:	6c 5f       	subi	r22, 0xFC	; 252
    8390:	7f 4f       	sbci	r23, 0xFF	; 255
    8392:	40 81       	ld	r20, Z
    8394:	44 50       	subi	r20, 0x04	; 4
    8396:	7e 01       	movw	r14, r28
    8398:	08 94       	sec
    839a:	e1 1c       	adc	r14, r1
    839c:	f1 1c       	adc	r15, r1
    839e:	c7 01       	movw	r24, r14
    83a0:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
    filename[receivebuffer[0] - 4] = '\0';
    83a4:	f8 01       	movw	r30, r16
    83a6:	80 81       	ld	r24, Z
    83a8:	fe 01       	movw	r30, r28
    83aa:	33 97       	sbiw	r30, 0x03	; 3
    83ac:	e8 0f       	add	r30, r24
    83ae:	f1 1d       	adc	r31, r1
    83b0:	10 82       	st	Z, r1
    newblockid = createFileFromDirectory(filename, (int)blockid);
    83b2:	c7 01       	movw	r24, r14
    83b4:	6d 2d       	mov	r22, r13
    83b6:	70 e0       	ldi	r23, 0x00	; 0
    83b8:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <createFileFromDirectory>
    83bc:	f8 2e       	mov	r15, r24
    chunksequencenum = 0;
    83be:	10 92 18 09 	sts	0x0918, r1
    83c2:	10 92 17 09 	sts	0x0917, r1
    expectNextNum = 1;
    83c6:	81 e0       	ldi	r24, 0x01	; 1
    83c8:	90 e0       	ldi	r25, 0x00	; 0
    83ca:	90 93 16 09 	sts	0x0916, r25
    83ce:	80 93 15 09 	sts	0x0915, r24
    reply[0] = 4;
    83d2:	84 e0       	ldi	r24, 0x04	; 4
    83d4:	80 93 f5 08 	sts	0x08F5, r24
    reply[1] = 121;
    83d8:	89 e7       	ldi	r24, 0x79	; 121
    83da:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    83de:	80 91 5f 09 	lds	r24, 0x095F
    83e2:	80 93 f7 08 	sts	0x08F7, r24
    reply[3] = newblockid;
    83e6:	f0 92 f8 08 	sts	0x08F8, r15
    fid = getFreeFid();
    83ea:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <getFreeFid>
    83ee:	18 2f       	mov	r17, r24
    83f0:	09 2f       	mov	r16, r25
    openFile(newblockid, fid, 2);
    83f2:	8f 2d       	mov	r24, r15
    83f4:	90 e0       	ldi	r25, 0x00	; 0
    83f6:	61 2f       	mov	r22, r17
    83f8:	70 2f       	mov	r23, r16
    83fa:	42 e0       	ldi	r20, 0x02	; 2
    83fc:	50 e0       	ldi	r21, 0x00	; 0
    83fe:	0e 94 19 2b 	call	0x5632	; 0x5632 <openFile>
    openedfile = &fidtable[fid];
    8402:	81 2f       	mov	r24, r17
    8404:	90 2f       	mov	r25, r16
    8406:	9c 01       	movw	r18, r24
    8408:	22 0f       	add	r18, r18
    840a:	33 1f       	adc	r19, r19
    840c:	22 0f       	add	r18, r18
    840e:	33 1f       	adc	r19, r19
    8410:	22 0f       	add	r18, r18
    8412:	33 1f       	adc	r19, r19
    8414:	88 0f       	add	r24, r24
    8416:	99 1f       	adc	r25, r25
    8418:	28 0f       	add	r18, r24
    841a:	39 1f       	adc	r19, r25
    841c:	20 5d       	subi	r18, 0xD0	; 208
    841e:	39 4f       	sbci	r19, 0xF9	; 249
    8420:	30 93 93 08 	sts	0x0893, r19
    8424:	20 93 92 08 	sts	0x0892, r18
	 sleepThread(20);
    8428:	84 e1       	ldi	r24, 0x14	; 20
    842a:	90 e0       	ldi	r25, 0x00	; 0
    842c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sleepThread>
    // printStringN(reply,32);      
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8430:	8f ee       	ldi	r24, 0xEF	; 239
    8432:	9f ee       	ldi	r25, 0xEF	; 239
    8434:	6f ef       	ldi	r22, 0xFF	; 255
    8436:	7f ef       	ldi	r23, 0xFF	; 255
    8438:	40 e2       	ldi	r20, 0x20	; 32
    843a:	25 ef       	ldi	r18, 0xF5	; 245
    843c:	38 e0       	ldi	r19, 0x08	; 8
    843e:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
}
    8442:	2d 96       	adiw	r28, 0x0d	; 13
    8444:	0f b6       	in	r0, 0x3f	; 63
    8446:	f8 94       	cli
    8448:	de bf       	out	0x3e, r29	; 62
    844a:	0f be       	out	0x3f, r0	; 63
    844c:	cd bf       	out	0x3d, r28	; 61
    844e:	cf 91       	pop	r28
    8450:	df 91       	pop	r29
    8452:	1f 91       	pop	r17
    8454:	0f 91       	pop	r16
    8456:	ff 90       	pop	r15
    8458:	ef 90       	pop	r14
    845a:	df 90       	pop	r13
    845c:	08 95       	ret

0000845e <reply_mkdir>:
    }
}

//-------------------------------------------------------------------------
void reply_mkdir(uint8_t * receivebuffer)
{
    845e:	df 92       	push	r13
    8460:	ef 92       	push	r14
    8462:	ff 92       	push	r15
    8464:	0f 93       	push	r16
    8466:	1f 93       	push	r17
    8468:	df 93       	push	r29
    846a:	cf 93       	push	r28
    846c:	cd b7       	in	r28, 0x3d	; 61
    846e:	de b7       	in	r29, 0x3e	; 62
    8470:	2d 97       	sbiw	r28, 0x0d	; 13
    8472:	0f b6       	in	r0, 0x3f	; 63
    8474:	f8 94       	cli
    8476:	de bf       	out	0x3e, r29	; 62
    8478:	0f be       	out	0x3f, r0	; 63
    847a:	cd bf       	out	0x3d, r28	; 61
    847c:	8c 01       	movw	r16, r24
    uint8_t blockid;
    char dirname[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    847e:	fc 01       	movw	r30, r24
    8480:	d3 80       	ldd	r13, Z+3	; 0x03
    mystrncpy(dirname, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    8482:	bc 01       	movw	r22, r24
    8484:	6c 5f       	subi	r22, 0xFC	; 252
    8486:	7f 4f       	sbci	r23, 0xFF	; 255
    8488:	40 81       	ld	r20, Z
    848a:	44 50       	subi	r20, 0x04	; 4
    848c:	7e 01       	movw	r14, r28
    848e:	08 94       	sec
    8490:	e1 1c       	adc	r14, r1
    8492:	f1 1c       	adc	r15, r1
    8494:	c7 01       	movw	r24, r14
    8496:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
    dirname[receivebuffer[0] - 4] = '\0';
    849a:	f8 01       	movw	r30, r16
    849c:	80 81       	ld	r24, Z
    849e:	fe 01       	movw	r30, r28
    84a0:	33 97       	sbiw	r30, 0x03	; 3
    84a2:	e8 0f       	add	r30, r24
    84a4:	f1 1d       	adc	r31, r1
    84a6:	10 82       	st	Z, r1
    newblockid = createDir(dirname, (int)blockid);
    84a8:	c7 01       	movw	r24, r14
    84aa:	6d 2d       	mov	r22, r13
    84ac:	70 e0       	ldi	r23, 0x00	; 0
    84ae:	0e 94 2b 2c 	call	0x5856	; 0x5856 <createDir>
    reply[0] = 4;
    84b2:	94 e0       	ldi	r25, 0x04	; 4
    84b4:	90 93 f5 08 	sts	0x08F5, r25
    reply[1] = 141;
    84b8:	9d e8       	ldi	r25, 0x8D	; 141
    84ba:	90 93 f6 08 	sts	0x08F6, r25
    reply[2] = nodeid;
    84be:	90 91 5f 09 	lds	r25, 0x095F
    84c2:	90 93 f7 08 	sts	0x08F7, r25
    reply[3] = newblockid;
    84c6:	80 93 f8 08 	sts	0x08F8, r24
	 sleepThread(20);
    84ca:	84 e1       	ldi	r24, 0x14	; 20
    84cc:	90 e0       	ldi	r25, 0x00	; 0
    84ce:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sleepThread>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    84d2:	8f ee       	ldi	r24, 0xEF	; 239
    84d4:	9f ee       	ldi	r25, 0xEF	; 239
    84d6:	6f ef       	ldi	r22, 0xFF	; 255
    84d8:	7f ef       	ldi	r23, 0xFF	; 255
    84da:	40 e2       	ldi	r20, 0x20	; 32
    84dc:	25 ef       	ldi	r18, 0xF5	; 245
    84de:	38 e0       	ldi	r19, 0x08	; 8
    84e0:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    // printStringN(reply,32);      
}
    84e4:	2d 96       	adiw	r28, 0x0d	; 13
    84e6:	0f b6       	in	r0, 0x3f	; 63
    84e8:	f8 94       	cli
    84ea:	de bf       	out	0x3e, r29	; 62
    84ec:	0f be       	out	0x3f, r0	; 63
    84ee:	cd bf       	out	0x3d, r28	; 61
    84f0:	cf 91       	pop	r28
    84f2:	df 91       	pop	r29
    84f4:	1f 91       	pop	r17
    84f6:	0f 91       	pop	r16
    84f8:	ff 90       	pop	r15
    84fa:	ef 90       	pop	r14
    84fc:	df 90       	pop	r13
    84fe:	08 95       	ret

00008500 <reply_ls_long>:
    return;
}

//Get the block information of sub directory and files using long version 
void reply_ls_long(uint8_t block)
{
    8500:	ef 92       	push	r14
    8502:	ff 92       	push	r15
    8504:	0f 93       	push	r16
    8506:	1f 93       	push	r17
    8508:	cf 93       	push	r28
    850a:	df 93       	push	r29
    850c:	08 2f       	mov	r16, r24
    uint8_t blockindex;
    uint8_t childblock;
    uint8_t seq = 0;

    if (openedfile != NULL)
    850e:	80 91 92 08 	lds	r24, 0x0892
    8512:	90 91 93 08 	lds	r25, 0x0893
    8516:	89 2b       	or	r24, r25
    8518:	21 f0       	breq	.+8      	; 0x8522 <reply_ls_long+0x22>
    {
        //fclose2( openedfile );
        openedfile = NULL;
    851a:	10 92 93 08 	sts	0x0893, r1
    851e:	10 92 92 08 	sts	0x0892, r1
    8522:	10 e0       	ldi	r17, 0x00	; 0
    8524:	ce e0       	ldi	r28, 0x0E	; 14
    8526:	d0 e0       	ldi	r29, 0x00	; 0
        childblock = fsread8uint(block, DIR_ADDRSUBOFFSET + blockindex);
        if (childblock == 0)
        {
            continue;
        }
        reply[0] = 32;
    8528:	90 e2       	ldi	r25, 0x20	; 32
    852a:	e9 2e       	mov	r14, r25
        reply[1] = 104;
    852c:	88 e6       	ldi	r24, 0x68	; 104
    852e:	f8 2e       	mov	r15, r24
    8530:	04 c0       	rjmp	.+8      	; 0x853a <reply_ls_long+0x3a>
        reply[4] = seq;
        seq++;
        finfonode((char *)&reply[5], (int)childblock);
	    sleepThread(20);
	
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    8532:	21 96       	adiw	r28, 0x01	; 1
    if (openedfile != NULL)
    {
        //fclose2( openedfile );
        openedfile = NULL;
    }
    for (blockindex = 0; blockindex < 10; blockindex++)
    8534:	c8 31       	cpi	r28, 0x18	; 24
    8536:	d1 05       	cpc	r29, r1
    8538:	59 f1       	breq	.+86     	; 0x8590 <reply_ls_long+0x90>
    {
        childblock = fsread8uint(block, DIR_ADDRSUBOFFSET + blockindex);
    853a:	80 2f       	mov	r24, r16
    853c:	90 e0       	ldi	r25, 0x00	; 0
    853e:	be 01       	movw	r22, r28
    8540:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <fsread8uint>
    8544:	68 2f       	mov	r22, r24
        if (childblock == 0)
    8546:	88 23       	and	r24, r24
    8548:	a1 f3       	breq	.-24     	; 0x8532 <reply_ls_long+0x32>
        {
            continue;
        }
        reply[0] = 32;
    854a:	e0 92 f5 08 	sts	0x08F5, r14
        reply[1] = 104;
    854e:	f0 92 f6 08 	sts	0x08F6, r15
        reply[2] = nodeid;
    8552:	80 91 5f 09 	lds	r24, 0x095F
    8556:	80 93 f7 08 	sts	0x08F7, r24
        reply[3] = childblock;
    855a:	60 93 f8 08 	sts	0x08F8, r22
        reply[4] = seq;
    855e:	10 93 f9 08 	sts	0x08F9, r17
        seq++;
    8562:	1f 5f       	subi	r17, 0xFF	; 255
        finfonode((char *)&reply[5], (int)childblock);
    8564:	8a ef       	ldi	r24, 0xFA	; 250
    8566:	98 e0       	ldi	r25, 0x08	; 8
    8568:	70 e0       	ldi	r23, 0x00	; 0
    856a:	0e 94 08 21 	call	0x4210	; 0x4210 <finfonode>
	    sleepThread(20);
    856e:	84 e1       	ldi	r24, 0x14	; 20
    8570:	90 e0       	ldi	r25, 0x00	; 0
    8572:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sleepThread>
	
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    8576:	8f ee       	ldi	r24, 0xEF	; 239
    8578:	9f ee       	ldi	r25, 0xEF	; 239
    857a:	6f ef       	ldi	r22, 0xFF	; 255
    857c:	7f ef       	ldi	r23, 0xFF	; 255
    857e:	40 e2       	ldi	r20, 0x20	; 32
    8580:	25 ef       	ldi	r18, 0xF5	; 245
    8582:	38 e0       	ldi	r19, 0x08	; 8
    8584:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    8588:	21 96       	adiw	r28, 0x01	; 1
    if (openedfile != NULL)
    {
        //fclose2( openedfile );
        openedfile = NULL;
    }
    for (blockindex = 0; blockindex < 10; blockindex++)
    858a:	c8 31       	cpi	r28, 0x18	; 24
    858c:	d1 05       	cpc	r29, r1
    858e:	a9 f6       	brne	.-86     	; 0x853a <reply_ls_long+0x3a>
	    sleepThread(20);
	
        StandardSocketSend(0xefef, 0xffff, 32, reply);
        //     printStringN(reply,32); 
    }
}
    8590:	df 91       	pop	r29
    8592:	cf 91       	pop	r28
    8594:	1f 91       	pop	r17
    8596:	0f 91       	pop	r16
    8598:	ff 90       	pop	r15
    859a:	ef 90       	pop	r14
    859c:	08 95       	ret

0000859e <reply_ls_nodename>:
    //printString("hello,reply2!\n\0");
}

//-------------------------------------------------------------------------
void reply_ls_nodename(uint8_t * receivebuffer)
{
    859e:	0f 93       	push	r16
    85a0:	fc 01       	movw	r30, r24
    uint8_t temp = receivebuffer[0] - 3;
    uint16_t randomsleep;

    if (mystrncmp((char *)receivebuffer, 3, (char *)networkid, 0, temp) == 0)
    85a2:	00 81       	ld	r16, Z
    85a4:	03 50       	subi	r16, 0x03	; 3
    85a6:	63 e0       	ldi	r22, 0x03	; 3
    85a8:	44 e3       	ldi	r20, 0x34	; 52
    85aa:	54 e0       	ldi	r21, 0x04	; 4
    85ac:	20 e0       	ldi	r18, 0x00	; 0
    85ae:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <mystrncmp>
    85b2:	89 2b       	or	r24, r25
    85b4:	39 f5       	brne	.+78     	; 0x8604 <reply_ls_nodename+0x66>
    {
        temp = mystrlen(filenameid);
    85b6:	81 e2       	ldi	r24, 0x21	; 33
    85b8:	94 e0       	ldi	r25, 0x04	; 4
    85ba:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    85be:	48 2f       	mov	r20, r24
        reply[0] = temp + 3;
    85c0:	4d 5f       	subi	r20, 0xFD	; 253
    85c2:	40 93 f5 08 	sts	0x08F5, r20
    85c6:	43 50       	subi	r20, 0x03	; 3
        reply[1] = 102;
    85c8:	86 e6       	ldi	r24, 0x66	; 102
    85ca:	80 93 f6 08 	sts	0x08F6, r24
        reply[2] = nodeid;
    85ce:	80 91 5f 09 	lds	r24, 0x095F
    85d2:	80 93 f7 08 	sts	0x08F7, r24
        mystrncpy((char *)&reply[3], filenameid, temp);
    85d6:	88 ef       	ldi	r24, 0xF8	; 248
    85d8:	98 e0       	ldi	r25, 0x08	; 8
    85da:	61 e2       	ldi	r22, 0x21	; 33
    85dc:	74 e0       	ldi	r23, 0x04	; 4
    85de:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
        randomsleep = getRandomNumber() % 400;
    85e2:	0e 94 99 3c 	call	0x7932	; 0x7932 <getRandomNumber>
        sleepThread(randomsleep);
    85e6:	60 e9       	ldi	r22, 0x90	; 144
    85e8:	71 e0       	ldi	r23, 0x01	; 1
    85ea:	0e 94 84 56 	call	0xad08	; 0xad08 <__udivmodhi4>
    85ee:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sleepThread>
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    85f2:	8f ee       	ldi	r24, 0xEF	; 239
    85f4:	9f ee       	ldi	r25, 0xEF	; 239
    85f6:	6f ef       	ldi	r22, 0xFF	; 255
    85f8:	7f ef       	ldi	r23, 0xFF	; 255
    85fa:	40 e2       	ldi	r20, 0x20	; 32
    85fc:	25 ef       	ldi	r18, 0xF5	; 245
    85fe:	38 e0       	ldi	r19, 0x08	; 8
    8600:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
        //printStringN(reply,32); 
    }
}
    8604:	0f 91       	pop	r16
    8606:	08 95       	ret

00008608 <reply_ls_networkname>:
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_ls_networkname()
{
    8608:	ef 92       	push	r14
    860a:	ff 92       	push	r15
    860c:	0f 93       	push	r16
    860e:	1f 93       	push	r17
    //   uint16_t temp2; 
    uint8_t temp = mystrlen(networkid);
    8610:	04 e3       	ldi	r16, 0x34	; 52
    8612:	14 e0       	ldi	r17, 0x04	; 4
    8614:	c8 01       	movw	r24, r16
    8616:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    861a:	48 2f       	mov	r20, r24
    uint16_t randomsleep;

    reply[0] = temp + 3;
    861c:	25 ef       	ldi	r18, 0xF5	; 245
    861e:	e2 2e       	mov	r14, r18
    8620:	28 e0       	ldi	r18, 0x08	; 8
    8622:	f2 2e       	mov	r15, r18
    8624:	4d 5f       	subi	r20, 0xFD	; 253
    8626:	40 93 f5 08 	sts	0x08F5, r20
    862a:	43 50       	subi	r20, 0x03	; 3
    reply[1] = 101;
    862c:	85 e6       	ldi	r24, 0x65	; 101
    862e:	80 93 f6 08 	sts	0x08F6, r24
    //   foobar(); 
    reply[2] = nodeid;
    8632:	80 91 5f 09 	lds	r24, 0x095F
    8636:	80 93 f7 08 	sts	0x08F7, r24
    mystrncpy((char *)&reply[3], networkid, temp);
    863a:	c7 01       	movw	r24, r14
    863c:	03 96       	adiw	r24, 0x03	; 3
    863e:	b8 01       	movw	r22, r16
    8640:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
    randomsleep = getRandomNumber() % 400;
    8644:	0e 94 99 3c 	call	0x7932	; 0x7932 <getRandomNumber>
    sleepThread(randomsleep);
    8648:	60 e9       	ldi	r22, 0x90	; 144
    864a:	71 e0       	ldi	r23, 0x01	; 1
    864c:	0e 94 84 56 	call	0xad08	; 0xad08 <__udivmodhi4>
    8650:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sleepThread>
    // for (temp2=0;temp2<9000;temp2++)
    // {
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8654:	8f ee       	ldi	r24, 0xEF	; 239
    8656:	9f ee       	ldi	r25, 0xEF	; 239
    8658:	6f ef       	ldi	r22, 0xFF	; 255
    865a:	7f ef       	ldi	r23, 0xFF	; 255
    865c:	40 e2       	ldi	r20, 0x20	; 32
    865e:	97 01       	movw	r18, r14
    8660:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    // sleepThread(20);
    // }
    //   printStringN(reply,32); 
    //printString("hello,reply2!\n\0");
}
    8664:	1f 91       	pop	r17
    8666:	0f 91       	pop	r16
    8668:	ff 90       	pop	r15
    866a:	ef 90       	pop	r14
    866c:	08 95       	ret

0000866e <reply_thread_state_restore_fromfile>:

//this should copy the thread information from the file to the thread
//the packet should ocntain the file name as well as the index of the thread to be restored
//note that it will check the file size to ensure that is sufficient information for the thread to be restored
void reply_thread_state_restore_fromfile(uint8_t * receivebuffer)
{
    866e:	bf 92       	push	r11
    8670:	cf 92       	push	r12
    8672:	df 92       	push	r13
    8674:	ef 92       	push	r14
    8676:	ff 92       	push	r15
    8678:	0f 93       	push	r16
    867a:	1f 93       	push	r17
    867c:	cf 93       	push	r28
    867e:	df 93       	push	r29
    8680:	7c 01       	movw	r14, r24
    uint8_t i;
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    8682:	dc 01       	movw	r26, r24
    8684:	8c 91       	ld	r24, X
    8686:	f7 01       	movw	r30, r14
    8688:	e8 0f       	add	r30, r24
    868a:	f1 1d       	adc	r31, r1
    868c:	10 82       	st	Z, r1
    868e:	c0 e0       	ldi	r28, 0x00	; 0
    8690:	d0 e0       	ldi	r29, 0x00	; 0
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    8692:	65 e0       	ldi	r22, 0x05	; 5
    8694:	c6 2e       	mov	r12, r22
    8696:	d1 2c       	mov	r13, r1
    8698:	ce 0c       	add	r12, r14
    869a:	df 1c       	adc	r13, r15
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    869c:	ce 01       	movw	r24, r28
    869e:	88 0f       	add	r24, r24
    86a0:	99 1f       	adc	r25, r25
    86a2:	88 0f       	add	r24, r24
    86a4:	99 1f       	adc	r25, r25
    86a6:	88 0f       	add	r24, r24
    86a8:	99 1f       	adc	r25, r25
    86aa:	9c 01       	movw	r18, r24
    86ac:	22 0f       	add	r18, r18
    86ae:	33 1f       	adc	r19, r19
    86b0:	22 0f       	add	r18, r18
    86b2:	33 1f       	adc	r19, r19
    86b4:	28 0f       	add	r18, r24
    86b6:	39 1f       	adc	r19, r25
    86b8:	2c 1b       	sub	r18, r28
    86ba:	3d 0b       	sbc	r19, r29
    86bc:	89 01       	movw	r16, r18
    86be:	02 57       	subi	r16, 0x72	; 114
    86c0:	1a 4f       	sbci	r17, 0xFA	; 250
    86c2:	f8 01       	movw	r30, r16
    86c4:	82 81       	ldd	r24, Z+2	; 0x02
    86c6:	88 23       	and	r24, r24
    86c8:	61 f5       	brne	.+88     	; 0x8722 <reply_thread_state_restore_fromfile+0xb4>
        {
            if (superstring
    86ca:	21 96       	adiw	r28, 0x01	; 1
{
    uint8_t i;
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    86cc:	c4 30       	cpi	r28, 0x04	; 4
    86ce:	d1 05       	cpc	r29, r1
    86d0:	29 f7       	brne	.-54     	; 0x869c <reply_thread_state_restore_fromfile+0x2e>
                break;
            }
        }
    }
    i = receivebuffer[3];
    receivebuffer[5 + i] = '/';
    86d2:	f7 01       	movw	r30, r14
    86d4:	83 81       	ldd	r24, Z+3	; 0x03
    86d6:	e8 0e       	add	r14, r24
    86d8:	f1 1c       	adc	r15, r1
    86da:	8f e2       	ldi	r24, 0x2F	; 47
    86dc:	d7 01       	movw	r26, r14
    86de:	15 96       	adiw	r26, 0x05	; 5
    86e0:	8c 93       	st	X, r24
    86e2:	90 e0       	ldi	r25, 0x00	; 0
    if (testtrue != 0)
    {
        thread_state_restore(testtrue, (uint8_t *) & receivebuffer[5 + i]);
    }
    reply[0] = 4;
    86e4:	84 e0       	ldi	r24, 0x04	; 4
    86e6:	80 93 f5 08 	sts	0x08F5, r24
    reply[1] = 95;
    86ea:	8f e5       	ldi	r24, 0x5F	; 95
    86ec:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    86f0:	80 91 5f 09 	lds	r24, 0x095F
    86f4:	80 93 f7 08 	sts	0x08F7, r24
    reply[3] = testtrue;
    86f8:	90 93 f8 08 	sts	0x08F8, r25
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    86fc:	8f ee       	ldi	r24, 0xEF	; 239
    86fe:	9f ee       	ldi	r25, 0xEF	; 239
    8700:	6f ef       	ldi	r22, 0xFF	; 255
    8702:	7f ef       	ldi	r23, 0xFF	; 255
    8704:	40 e2       	ldi	r20, 0x20	; 32
    8706:	25 ef       	ldi	r18, 0xF5	; 245
    8708:	38 e0       	ldi	r19, 0x08	; 8
    870a:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
}
    870e:	df 91       	pop	r29
    8710:	cf 91       	pop	r28
    8712:	1f 91       	pop	r17
    8714:	0f 91       	pop	r16
    8716:	ff 90       	pop	r15
    8718:	ef 90       	pop	r14
    871a:	df 90       	pop	r13
    871c:	cf 90       	pop	r12
    871e:	bf 90       	pop	r11
    8720:	08 95       	ret
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    8722:	c9 01       	movw	r24, r18
    8724:	8d 56       	subi	r24, 0x6D	; 109
    8726:	9a 4f       	sbci	r25, 0xFA	; 250
    8728:	b6 01       	movw	r22, r12
    872a:	0e 94 ac 3b 	call	0x7758	; 0x7758 <superstring>
    872e:	89 2b       	or	r24, r25
    8730:	61 f6       	brne	.-104    	; 0x86ca <reply_thread_state_restore_fromfile+0x5c>
                break;
            }
        }
    }
    i = receivebuffer[3];
    receivebuffer[5 + i] = '/';
    8732:	d7 01       	movw	r26, r14
    8734:	13 96       	adiw	r26, 0x03	; 3
    8736:	8c 91       	ld	r24, X
    8738:	e8 2f       	mov	r30, r24
    873a:	f0 e0       	ldi	r31, 0x00	; 0
    873c:	35 96       	adiw	r30, 0x05	; 5
    873e:	ee 0d       	add	r30, r14
    8740:	ff 1d       	adc	r31, r15
    8742:	8f e2       	ldi	r24, 0x2F	; 47
    8744:	80 83       	st	Z, r24
    if (testtrue != 0)
    8746:	cc 23       	and	r28, r28
    8748:	61 f2       	breq	.-104    	; 0x86e2 <reply_thread_state_restore_fromfile+0x74>
    MYFILE *fp;
    uint8_t threadsize;
    uint16_t threadramsize;
    uint8_t *internal_ram_start;
    threadsize = sizeof(struct thread);
    threadramsize =
    874a:	d8 01       	movw	r26, r16
    874c:	51 96       	adiw	r26, 0x11	; 17
    874e:	cd 90       	ld	r12, X+
    8750:	dc 90       	ld	r13, X
    8752:	52 97       	sbiw	r26, 0x12	; 18
    8754:	53 96       	adiw	r26, 0x13	; 19
    8756:	ed 90       	ld	r14, X+
    8758:	fc 90       	ld	r15, X
    875a:	54 97       	sbiw	r26, 0x14	; 20
    875c:	08 94       	sec
    875e:	e1 1c       	adc	r14, r1
    8760:	f1 1c       	adc	r15, r1
    8762:	ec 18       	sub	r14, r12
    8764:	fd 08       	sbc	r15, r13
        (uint16_t) ((uint8_t *) thread_table[index].ramend -
                    (uint8_t *) thread_table[index].ramstart + 1);
    internal_ram_start = (uint8_t *) thread_table[index].ramstart;
    fp = fopen2((char *)filename, "r");
    8766:	cf 01       	movw	r24, r30
    8768:	6c e3       	ldi	r22, 0x3C	; 60
    876a:	71 e0       	ldi	r23, 0x01	; 1
    876c:	0e 94 84 25 	call	0x4b08	; 0x4b08 <fopen2>
    8770:	8c 01       	movw	r16, r24
    fread2(fp, &thread_table[index], threadsize);
    8772:	67 e2       	ldi	r22, 0x27	; 39
    8774:	c6 9f       	mul	r28, r22
    8776:	b0 01       	movw	r22, r0
    8778:	11 24       	eor	r1, r1
    877a:	62 57       	subi	r22, 0x72	; 114
    877c:	7a 4f       	sbci	r23, 0xFA	; 250
    877e:	47 e2       	ldi	r20, 0x27	; 39
    8780:	50 e0       	ldi	r21, 0x00	; 0
    8782:	0e 94 0f 24 	call	0x481e	; 0x481e <fread2>
    fseek2(fp, threadsize, 1);
    8786:	c8 01       	movw	r24, r16
    8788:	47 e2       	ldi	r20, 0x27	; 39
    878a:	50 e0       	ldi	r21, 0x00	; 0
    878c:	60 e0       	ldi	r22, 0x00	; 0
    878e:	70 e0       	ldi	r23, 0x00	; 0
    8790:	21 e0       	ldi	r18, 0x01	; 1
    8792:	30 e0       	ldi	r19, 0x00	; 0
    8794:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <fseek2>
    fread2(fp, internal_ram_start, threadramsize);
    8798:	c8 01       	movw	r24, r16
    879a:	b6 01       	movw	r22, r12
    879c:	a7 01       	movw	r20, r14
    879e:	0e 94 0f 24 	call	0x481e	; 0x481e <fread2>
    fclose2(fp);
    87a2:	c8 01       	movw	r24, r16
    87a4:	0e 94 7e 25 	call	0x4afc	; 0x4afc <fclose2>
    87a8:	9c 2f       	mov	r25, r28
    87aa:	9c cf       	rjmp	.-200    	; 0x86e4 <reply_thread_state_restore_fromfile+0x76>

000087ac <reply_thread_state_snapshot_tofile>:
//this should copy the thread information into a file 
//The packet should contain the information regarding the user 
//THe packet should contain the index of the thread and the file name that will be written as the new file 
//the file name part requires careful debugging of the file system 
void reply_thread_state_snapshot_tofile(uint8_t * receivebuffer)
{
    87ac:	9f 92       	push	r9
    87ae:	af 92       	push	r10
    87b0:	bf 92       	push	r11
    87b2:	cf 92       	push	r12
    87b4:	df 92       	push	r13
    87b6:	ef 92       	push	r14
    87b8:	ff 92       	push	r15
    87ba:	0f 93       	push	r16
    87bc:	1f 93       	push	r17
    87be:	cf 93       	push	r28
    87c0:	df 93       	push	r29
    87c2:	5c 01       	movw	r10, r24
    uint8_t i;
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    87c4:	fc 01       	movw	r30, r24
    87c6:	80 81       	ld	r24, Z
    87c8:	e8 0f       	add	r30, r24
    87ca:	f1 1d       	adc	r31, r1
    87cc:	10 82       	st	Z, r1
    87ce:	c0 e0       	ldi	r28, 0x00	; 0
    87d0:	d0 e0       	ldi	r29, 0x00	; 0
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    87d2:	f5 e0       	ldi	r31, 0x05	; 5
    87d4:	ef 2e       	mov	r14, r31
    87d6:	f1 2c       	mov	r15, r1
    87d8:	ea 0c       	add	r14, r10
    87da:	fb 1c       	adc	r15, r11
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
    87dc:	ce 01       	movw	r24, r28
    87de:	88 0f       	add	r24, r24
    87e0:	99 1f       	adc	r25, r25
    87e2:	88 0f       	add	r24, r24
    87e4:	99 1f       	adc	r25, r25
    87e6:	88 0f       	add	r24, r24
    87e8:	99 1f       	adc	r25, r25
    87ea:	9c 01       	movw	r18, r24
    87ec:	22 0f       	add	r18, r18
    87ee:	33 1f       	adc	r19, r19
    87f0:	22 0f       	add	r18, r18
    87f2:	33 1f       	adc	r19, r19
    87f4:	28 0f       	add	r18, r24
    87f6:	39 1f       	adc	r19, r25
    87f8:	2c 1b       	sub	r18, r28
    87fa:	3d 0b       	sbc	r19, r29
    87fc:	89 01       	movw	r16, r18
    87fe:	02 57       	subi	r16, 0x72	; 114
    8800:	1a 4f       	sbci	r17, 0xFA	; 250
    8802:	f8 01       	movw	r30, r16
    8804:	82 81       	ldd	r24, Z+2	; 0x02
    8806:	88 23       	and	r24, r24
    8808:	31 f5       	brne	.+76     	; 0x8856 <reply_thread_state_snapshot_tofile+0xaa>
        {
            if (superstring
    880a:	21 96       	adiw	r28, 0x01	; 1
{
    uint8_t i;
    uint8_t testtrue = 0;

    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    880c:	c4 30       	cpi	r28, 0x04	; 4
    880e:	d1 05       	cpc	r29, r1
    8810:	29 f7       	brne	.-54     	; 0x87dc <reply_thread_state_snapshot_tofile+0x30>
                testtrue = i;
                break;
            }
        }
    }
    if (testtrue != 0)
    8812:	90 e0       	ldi	r25, 0x00	; 0
        receivebuffer[receivebuffer[3] + 5] = '/';
        thread_state_snapshot(testtrue,
                              (uint8_t *) & receivebuffer[receivebuffer[3] +
                                                          5]);
    }
    reply[0] = 4;
    8814:	84 e0       	ldi	r24, 0x04	; 4
    8816:	80 93 f5 08 	sts	0x08F5, r24
    reply[1] = 94;
    881a:	8e e5       	ldi	r24, 0x5E	; 94
    881c:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    8820:	80 91 5f 09 	lds	r24, 0x095F
    8824:	80 93 f7 08 	sts	0x08F7, r24
    reply[3] = testtrue;
    8828:	90 93 f8 08 	sts	0x08F8, r25
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    882c:	8f ee       	ldi	r24, 0xEF	; 239
    882e:	9f ee       	ldi	r25, 0xEF	; 239
    8830:	6f ef       	ldi	r22, 0xFF	; 255
    8832:	7f ef       	ldi	r23, 0xFF	; 255
    8834:	40 e2       	ldi	r20, 0x20	; 32
    8836:	25 ef       	ldi	r18, 0xF5	; 245
    8838:	38 e0       	ldi	r19, 0x08	; 8
    883a:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
}
    883e:	df 91       	pop	r29
    8840:	cf 91       	pop	r28
    8842:	1f 91       	pop	r17
    8844:	0f 91       	pop	r16
    8846:	ff 90       	pop	r15
    8848:	ef 90       	pop	r14
    884a:	df 90       	pop	r13
    884c:	cf 90       	pop	r12
    884e:	bf 90       	pop	r11
    8850:	af 90       	pop	r10
    8852:	9f 90       	pop	r9
    8854:	08 95       	ret
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
    8856:	c9 01       	movw	r24, r18
    8858:	8d 56       	subi	r24, 0x6D	; 109
    885a:	9a 4f       	sbci	r25, 0xFA	; 250
    885c:	b7 01       	movw	r22, r14
    885e:	0e 94 ac 3b 	call	0x7758	; 0x7758 <superstring>
    8862:	89 2b       	or	r24, r25
    8864:	91 f6       	brne	.-92     	; 0x880a <reply_thread_state_snapshot_tofile+0x5e>
                testtrue = i;
                break;
            }
        }
    }
    if (testtrue != 0)
    8866:	cc 23       	and	r28, r28
    8868:	a1 f2       	breq	.-88     	; 0x8812 <reply_thread_state_snapshot_tofile+0x66>
    {
        receivebuffer[receivebuffer[3] + 5] = '/';
    886a:	f5 01       	movw	r30, r10
    886c:	83 81       	ldd	r24, Z+3	; 0x03
    886e:	e8 0f       	add	r30, r24
    8870:	f1 1d       	adc	r31, r1
    8872:	8f e2       	ldi	r24, 0x2F	; 47
    8874:	85 83       	std	Z+5, r24	; 0x05
    MYFILE *fp;
    uint8_t threadsize;
    uint16_t threadramsize;
    uint8_t *internal_ram_start;
    threadsize = sizeof(struct thread);
    threadramsize =
    8876:	f8 01       	movw	r30, r16
    8878:	c1 88       	ldd	r12, Z+17	; 0x11
    887a:	d2 88       	ldd	r13, Z+18	; 0x12
    887c:	e3 88       	ldd	r14, Z+19	; 0x13
    887e:	f4 88       	ldd	r15, Z+20	; 0x14
    8880:	08 94       	sec
    8882:	e1 1c       	adc	r14, r1
    8884:	f1 1c       	adc	r15, r1
    8886:	ec 18       	sub	r14, r12
    8888:	fd 08       	sbc	r15, r13
        (uint16_t) ((uint8_t *) thread_table[index].ramend -
                    (uint8_t *) thread_table[index].ramstart + 1);
    internal_ram_start = (uint8_t *) thread_table[index].ramstart;
    fp = fopen2((char *)filename, "w");
    888a:	f5 01       	movw	r30, r10
    888c:	83 81       	ldd	r24, Z+3	; 0x03
    888e:	90 e0       	ldi	r25, 0x00	; 0
    8890:	05 96       	adiw	r24, 0x05	; 5
    8892:	8a 0d       	add	r24, r10
    8894:	9b 1d       	adc	r25, r11
    8896:	6e e3       	ldi	r22, 0x3E	; 62
    8898:	71 e0       	ldi	r23, 0x01	; 1
    889a:	0e 94 84 25 	call	0x4b08	; 0x4b08 <fopen2>
    889e:	8c 01       	movw	r16, r24
    fwrite2(fp, &thread_table[index], threadsize);
    88a0:	67 e2       	ldi	r22, 0x27	; 39
    88a2:	c6 9f       	mul	r28, r22
    88a4:	b0 01       	movw	r22, r0
    88a6:	11 24       	eor	r1, r1
    88a8:	62 57       	subi	r22, 0x72	; 114
    88aa:	7a 4f       	sbci	r23, 0xFA	; 250
    88ac:	47 e2       	ldi	r20, 0x27	; 39
    88ae:	50 e0       	ldi	r21, 0x00	; 0
    88b0:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <fwrite2>
    fseek2(fp, threadsize, 1);
    88b4:	c8 01       	movw	r24, r16
    88b6:	47 e2       	ldi	r20, 0x27	; 39
    88b8:	50 e0       	ldi	r21, 0x00	; 0
    88ba:	60 e0       	ldi	r22, 0x00	; 0
    88bc:	70 e0       	ldi	r23, 0x00	; 0
    88be:	21 e0       	ldi	r18, 0x01	; 1
    88c0:	30 e0       	ldi	r19, 0x00	; 0
    88c2:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <fseek2>
    fwrite2(fp, internal_ram_start, threadramsize);
    88c6:	c8 01       	movw	r24, r16
    88c8:	b6 01       	movw	r22, r12
    88ca:	a7 01       	movw	r20, r14
    88cc:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <fwrite2>
    fclose2(fp);
    88d0:	c8 01       	movw	r24, r16
    88d2:	0e 94 7e 25 	call	0x4afc	; 0x4afc <fclose2>
    88d6:	9c 2f       	mov	r25, r28
    88d8:	9d cf       	rjmp	.-198    	; 0x8814 <reply_thread_state_snapshot_tofile+0x68>

000088da <reply_debugging_remove_avr_breakpoint>:
//And the thread dump and thread_state_restore should be the next task. 
//and this task should check the address to see which location is the address to be need. 
//use uint32_t because uint16_t is too small 
#ifdef PLATFORM_AVR
void reply_debugging_remove_avr_breakpoint(uint8_t * receivebuffer)
{
    88da:	7f 92       	push	r7
    88dc:	8f 92       	push	r8
    88de:	9f 92       	push	r9
    88e0:	af 92       	push	r10
    88e2:	bf 92       	push	r11
    88e4:	cf 92       	push	r12
    88e6:	df 92       	push	r13
    88e8:	ef 92       	push	r14
    88ea:	ff 92       	push	r15
    88ec:	0f 93       	push	r16
    88ee:	1f 93       	push	r17
    88f0:	cf 93       	push	r28
    88f2:	df 93       	push	r29
    88f4:	6c 01       	movw	r12, r24
    uint16_t pagecount;
    uint8_t offset;
    uint8_t i;
    uint8_t breakpointfound = 0;

    addrbreakpoint = ((uint16_t) receivebuffer[3] * 256) + receivebuffer[4];
    88f6:	fc 01       	movw	r30, r24
    88f8:	93 81       	ldd	r25, Z+3	; 0x03
    88fa:	80 e0       	ldi	r24, 0x00	; 0
    88fc:	24 81       	ldd	r18, Z+4	; 0x04
    88fe:	82 0f       	add	r24, r18
    8900:	91 1d       	adc	r25, r1
    8902:	7c 01       	movw	r14, r24
    8904:	00 e0       	ldi	r16, 0x00	; 0
    8906:	10 e0       	ldi	r17, 0x00	; 0
    8908:	ce e8       	ldi	r28, 0x8E	; 142
    890a:	d5 e0       	ldi	r29, 0x05	; 5
    890c:	20 e0       	ldi	r18, 0x00	; 0
    890e:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state == STATE_BREAK)
    8910:	c9 01       	movw	r24, r18
    8912:	88 0f       	add	r24, r24
    8914:	99 1f       	adc	r25, r25
    8916:	88 0f       	add	r24, r24
    8918:	99 1f       	adc	r25, r25
    891a:	88 0f       	add	r24, r24
    891c:	99 1f       	adc	r25, r25
    891e:	fc 01       	movw	r30, r24
    8920:	ee 0f       	add	r30, r30
    8922:	ff 1f       	adc	r31, r31
    8924:	ee 0f       	add	r30, r30
    8926:	ff 1f       	adc	r31, r31
    8928:	e8 0f       	add	r30, r24
    892a:	f9 1f       	adc	r31, r25
    892c:	e2 1b       	sub	r30, r18
    892e:	f3 0b       	sbc	r31, r19
    8930:	e2 57       	subi	r30, 0x72	; 114
    8932:	fa 4f       	sbci	r31, 0xFA	; 250
    8934:	bf 01       	movw	r22, r30
    8936:	6e 5f       	subi	r22, 0xFE	; 254
    8938:	7f 4f       	sbci	r23, 0xFF	; 255
    893a:	82 81       	ldd	r24, Z+2	; 0x02
    893c:	88 30       	cpi	r24, 0x08	; 8
    893e:	51 f1       	breq	.+84     	; 0x8994 <reply_debugging_remove_avr_breakpoint+0xba>
                *(tempptr + 1) = addrbreakpoint % 256;
                break;
            }
        }
    }
    if (i < LITE_MAX_THREADS)
    8940:	2f 5f       	subi	r18, 0xFF	; 255
    8942:	3f 4f       	sbci	r19, 0xFF	; 255
    8944:	a7 96       	adiw	r28, 0x27	; 39
    uint8_t offset;
    uint8_t i;
    uint8_t breakpointfound = 0;

    addrbreakpoint = ((uint16_t) receivebuffer[3] * 256) + receivebuffer[4];
    for (i = 0; i < LITE_MAX_THREADS; i++)
    8946:	24 30       	cpi	r18, 0x04	; 4
    8948:	31 05       	cpc	r19, r1
    894a:	11 f7       	brne	.-60     	; 0x8910 <reply_debugging_remove_avr_breakpoint+0x36>
    }
    if (i < LITE_MAX_THREADS)
    {
        pagecount = addrbreakpoint / 128;
        offset = addrbreakpoint * 2 % 256;
        boot_removeBreakPoint(pagecount, offset, &receivebuffer[5]);
    894c:	90 e0       	ldi	r25, 0x00	; 0
        breakpointfound = 1;
    }
    reply[0] = 5;
    894e:	85 e0       	ldi	r24, 0x05	; 5
    8950:	80 93 f5 08 	sts	0x08F5, r24
    reply[1] = 93;
    8954:	8d e5       	ldi	r24, 0x5D	; 93
    8956:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    895a:	80 91 5f 09 	lds	r24, 0x095F
    895e:	80 93 f7 08 	sts	0x08F7, r24
    reply[3] = breakpointfound;
    8962:	90 93 f8 08 	sts	0x08F8, r25
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8966:	8f ee       	ldi	r24, 0xEF	; 239
    8968:	9f ee       	ldi	r25, 0xEF	; 239
    896a:	6f ef       	ldi	r22, 0xFF	; 255
    896c:	7f ef       	ldi	r23, 0xFF	; 255
    896e:	40 e2       	ldi	r20, 0x20	; 32
    8970:	25 ef       	ldi	r18, 0xF5	; 245
    8972:	38 e0       	ldi	r19, 0x08	; 8
    8974:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
}
    8978:	df 91       	pop	r29
    897a:	cf 91       	pop	r28
    897c:	1f 91       	pop	r17
    897e:	0f 91       	pop	r16
    8980:	ff 90       	pop	r15
    8982:	ef 90       	pop	r14
    8984:	df 90       	pop	r13
    8986:	cf 90       	pop	r12
    8988:	bf 90       	pop	r11
    898a:	af 90       	pop	r10
    898c:	9f 90       	pop	r9
    898e:	8f 90       	pop	r8
    8990:	7f 90       	pop	r7
    8992:	08 95       	ret
    addrbreakpoint = ((uint16_t) receivebuffer[3] * 256) + receivebuffer[4];
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state == STATE_BREAK)
        {
            uint8_t *tempptr = (uint8_t *) thread_table[i].sp + 47;
    8994:	e8 81       	ld	r30, Y
    8996:	f9 81       	ldd	r31, Y+1	; 0x01
    8998:	4f e2       	ldi	r20, 0x2F	; 47
    899a:	a4 2e       	mov	r10, r20
    899c:	b1 2c       	mov	r11, r1
    899e:	ae 0e       	add	r10, r30
    89a0:	bf 1e       	adc	r11, r31
            uint16_t addr =
                (((uint16_t) (*tempptr)) * 256 + *(tempptr + 1) - 3);
    89a2:	90 e3       	ldi	r25, 0x30	; 48
    89a4:	89 2e       	mov	r8, r25
    89a6:	91 2c       	mov	r9, r1
    89a8:	8e 0e       	add	r8, r30
    89aa:	9f 1e       	adc	r9, r31
            if (addr == addrbreakpoint)
    89ac:	57 a5       	ldd	r21, Z+47	; 0x2f
    89ae:	40 e0       	ldi	r20, 0x00	; 0
    89b0:	80 a9       	ldd	r24, Z+48	; 0x30
    89b2:	fa 01       	movw	r30, r20
    89b4:	e8 0f       	add	r30, r24
    89b6:	f1 1d       	adc	r31, r1
    89b8:	cf 01       	movw	r24, r30
    89ba:	03 97       	sbiw	r24, 0x03	; 3
    89bc:	a0 e0       	ldi	r26, 0x00	; 0
    89be:	b0 e0       	ldi	r27, 0x00	; 0
    89c0:	8e 15       	cp	r24, r14
    89c2:	9f 05       	cpc	r25, r15
    89c4:	a0 07       	cpc	r26, r16
    89c6:	b1 07       	cpc	r27, r17
    89c8:	09 f0       	breq	.+2      	; 0x89cc <reply_debugging_remove_avr_breakpoint+0xf2>
    89ca:	ba cf       	rjmp	.-140    	; 0x8940 <reply_debugging_remove_avr_breakpoint+0x66>
            {
                thread_table[i].state = STATE_ACTIVE;
    89cc:	82 e0       	ldi	r24, 0x02	; 2
    89ce:	fb 01       	movw	r30, r22
    89d0:	80 83       	st	Z, r24
                *tempptr = addrbreakpoint / 256;
    89d2:	bb 27       	eor	r27, r27
    89d4:	a1 2f       	mov	r26, r17
    89d6:	90 2f       	mov	r25, r16
    89d8:	8f 2d       	mov	r24, r15
    89da:	f5 01       	movw	r30, r10
    89dc:	80 83       	st	Z, r24
                *(tempptr + 1) = addrbreakpoint % 256;
    89de:	f4 01       	movw	r30, r8
    89e0:	e0 82       	st	Z, r14
                break;
            }
        }
    }
    if (i < LITE_MAX_THREADS)
    89e2:	f3 e0       	ldi	r31, 0x03	; 3
    89e4:	f2 17       	cp	r31, r18
    89e6:	08 f4       	brcc	.+2      	; 0x89ea <reply_debugging_remove_avr_breakpoint+0x110>
    89e8:	b1 cf       	rjmp	.-158    	; 0x894c <reply_debugging_remove_avr_breakpoint+0x72>
    {
        pagecount = addrbreakpoint / 128;
        offset = addrbreakpoint * 2 % 256;
        boot_removeBreakPoint(pagecount, offset, &receivebuffer[5]);
    89ea:	a8 01       	movw	r20, r16
    89ec:	97 01       	movw	r18, r14
    89ee:	22 0f       	add	r18, r18
    89f0:	33 1f       	adc	r19, r19
    89f2:	44 1f       	adc	r20, r20
    89f4:	55 1f       	adc	r21, r21
    89f6:	85 e0       	ldi	r24, 0x05	; 5
    89f8:	90 e0       	ldi	r25, 0x00	; 0
    89fa:	c8 0e       	add	r12, r24
    89fc:	d9 1e       	adc	r13, r25
    89fe:	a7 e0       	ldi	r26, 0x07	; 7
    8a00:	16 95       	lsr	r17
    8a02:	07 95       	ror	r16
    8a04:	f7 94       	ror	r15
    8a06:	e7 94       	ror	r14
    8a08:	aa 95       	dec	r26
    8a0a:	d1 f7       	brne	.-12     	; 0x8a00 <reply_debugging_remove_avr_breakpoint+0x126>
    8a0c:	c7 01       	movw	r24, r14
    8a0e:	62 2f       	mov	r22, r18
    8a10:	a6 01       	movw	r20, r12
    8a12:	0e 94 c6 f2 	call	0x1e58c	; 0x1e58c <boot_removeBreakPoint>
    8a16:	91 e0       	ldi	r25, 0x01	; 1
    8a18:	9a cf       	rjmp	.-204    	; 0x894e <reply_debugging_remove_avr_breakpoint+0x74>

00008a1a <reply_debugging_insert_avr_breakpoint>:
    //printStringN(reply,32); 
}

//-------------------------------------------------------------------------
void reply_debugging_insert_avr_breakpoint(uint8_t * receivebuffer)
{
    8a1a:	7f 92       	push	r7
    8a1c:	8f 92       	push	r8
    8a1e:	9f 92       	push	r9
    8a20:	af 92       	push	r10
    8a22:	bf 92       	push	r11
    8a24:	cf 92       	push	r12
    8a26:	df 92       	push	r13
    8a28:	ef 92       	push	r14
    8a2a:	ff 92       	push	r15
    8a2c:	0f 93       	push	r16
    8a2e:	1f 93       	push	r17
    8a30:	df 93       	push	r29
    8a32:	cf 93       	push	r28
    8a34:	00 d0       	rcall	.+0      	; 0x8a36 <reply_debugging_insert_avr_breakpoint+0x1c>
    8a36:	00 d0       	rcall	.+0      	; 0x8a38 <reply_debugging_insert_avr_breakpoint+0x1e>
    8a38:	00 d0       	rcall	.+0      	; 0x8a3a <reply_debugging_insert_avr_breakpoint+0x20>
    8a3a:	cd b7       	in	r28, 0x3d	; 61
    8a3c:	de b7       	in	r29, 0x3e	; 62
    8a3e:	5c 01       	movw	r10, r24
    uint8_t offset;
    uint8_t instructions[6];
    uint32_t temp; 
    uint8_t index; 
    
    pagecount = (uint16_t) receivebuffer[3] * 256 + receivebuffer[4];
    8a40:	dc 01       	movw	r26, r24
    8a42:	13 96       	adiw	r26, 0x03	; 3
    8a44:	dc 90       	ld	r13, X
    8a46:	13 97       	sbiw	r26, 0x03	; 3
    8a48:	cc 24       	eor	r12, r12
    8a4a:	14 96       	adiw	r26, 0x04	; 4
    8a4c:	8c 91       	ld	r24, X
    8a4e:	14 97       	sbiw	r26, 0x04	; 4
    8a50:	c8 0e       	add	r12, r24
    8a52:	d1 1c       	adc	r13, r1
    offset = receivebuffer[5];
    8a54:	15 96       	adiw	r26, 0x05	; 5
    8a56:	7c 90       	ld	r7, X
    
    temp = (uint32_t)pagecount * 256 + (uint32_t)offset; 
    8a58:	76 01       	movw	r14, r12
    8a5a:	00 e0       	ldi	r16, 0x00	; 0
    8a5c:	10 e0       	ldi	r17, 0x00	; 0
    8a5e:	10 2f       	mov	r17, r16
    8a60:	0f 2d       	mov	r16, r15
    8a62:	fe 2c       	mov	r15, r14
    8a64:	ee 24       	eor	r14, r14
    8a66:	e7 0c       	add	r14, r7
    8a68:	f1 1c       	adc	r15, r1
    8a6a:	01 1d       	adc	r16, r1
    8a6c:	11 1d       	adc	r17, r1
    temp = temp/2; 
    
    index = get_breakpoint_index();
    8a6e:	0e 94 a5 3c 	call	0x794a	; 0x794a <get_breakpoint_index>
    br_state[index].addr = temp;
    8a72:	90 e0       	ldi	r25, 0x00	; 0
    8a74:	4c 01       	movw	r8, r24
    8a76:	88 0c       	add	r8, r8
    8a78:	99 1c       	adc	r9, r9
    8a7a:	88 0c       	add	r8, r8
    8a7c:	99 1c       	adc	r9, r9
    8a7e:	88 0c       	add	r8, r8
    8a80:	99 1c       	adc	r9, r9
    8a82:	88 0e       	add	r8, r24
    8a84:	99 1e       	adc	r9, r25
    8a86:	f4 01       	movw	r30, r8
    8a88:	ec 56       	subi	r30, 0x6C	; 108
    8a8a:	f7 4f       	sbci	r31, 0xF7	; 247
    8a8c:	16 95       	lsr	r17
    8a8e:	07 95       	ror	r16
    8a90:	f7 94       	ror	r15
    8a92:	e7 94       	ror	r14
    8a94:	f1 82       	std	Z+1, r15	; 0x01
    8a96:	e0 82       	st	Z, r14
    
    boot_insertBreakPoint(pagecount, offset, instructions);
    8a98:	c6 01       	movw	r24, r12
    8a9a:	67 2d       	mov	r22, r7
    8a9c:	8e 01       	movw	r16, r28
    8a9e:	0f 5f       	subi	r16, 0xFF	; 255
    8aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    8aa2:	a8 01       	movw	r20, r16
    8aa4:	0e 94 90 f4 	call	0x1e920	; 0x1e920 <boot_insertBreakPoint>
    reply[0] = 12;
    8aa8:	8c e0       	ldi	r24, 0x0C	; 12
    8aaa:	80 93 f5 08 	sts	0x08F5, r24
    reply[1] = 92;
    8aae:	8c e5       	ldi	r24, 0x5C	; 92
    8ab0:	80 93 f6 08 	sts	0x08F6, r24
    reply[2] = nodeid;
    8ab4:	80 91 5f 09 	lds	r24, 0x095F
    8ab8:	80 93 f7 08 	sts	0x08F7, r24
    reply[3] = receivebuffer[3];
    8abc:	f5 01       	movw	r30, r10
    8abe:	83 81       	ldd	r24, Z+3	; 0x03
    8ac0:	80 93 f8 08 	sts	0x08F8, r24
    reply[4] = receivebuffer[4];
    8ac4:	84 81       	ldd	r24, Z+4	; 0x04
    8ac6:	80 93 f9 08 	sts	0x08F9, r24
    reply[5] = receivebuffer[5];
    8aca:	85 81       	ldd	r24, Z+5	; 0x05
    8acc:	80 93 fa 08 	sts	0x08FA, r24
    8ad0:	f8 01       	movw	r30, r16
    8ad2:	2b ef       	ldi	r18, 0xFB	; 251
    8ad4:	38 e0       	ldi	r19, 0x08	; 8
    8ad6:	b4 01       	movw	r22, r8
    8ad8:	6a 56       	subi	r22, 0x6A	; 106
    8ada:	77 4f       	sbci	r23, 0xF7	; 247
    8adc:	ae 01       	movw	r20, r28
    8ade:	49 5f       	subi	r20, 0xF9	; 249
    8ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    for (offset = 0; offset < 6; offset++)
    {
        reply[6 + offset] = instructions[offset];
    8ae2:	81 91       	ld	r24, Z+
    8ae4:	d9 01       	movw	r26, r18
    8ae6:	8d 93       	st	X+, r24
    8ae8:	9d 01       	movw	r18, r26
         br_state[index].breakpointinstructions[offset] = instructions[offset]; 
    8aea:	db 01       	movw	r26, r22
    8aec:	8d 93       	st	X+, r24
    8aee:	bd 01       	movw	r22, r26
    reply[1] = 92;
    reply[2] = nodeid;
    reply[3] = receivebuffer[3];
    reply[4] = receivebuffer[4];
    reply[5] = receivebuffer[5];
    for (offset = 0; offset < 6; offset++)
    8af0:	e4 17       	cp	r30, r20
    8af2:	f5 07       	cpc	r31, r21
    8af4:	b1 f7       	brne	.-20     	; 0x8ae2 <reply_debugging_insert_avr_breakpoint+0xc8>
    {
        reply[6 + offset] = instructions[offset];
         br_state[index].breakpointinstructions[offset] = instructions[offset]; 
    }
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8af6:	8f ee       	ldi	r24, 0xEF	; 239
    8af8:	9f ee       	ldi	r25, 0xEF	; 239
    8afa:	6f ef       	ldi	r22, 0xFF	; 255
    8afc:	7f ef       	ldi	r23, 0xFF	; 255
    8afe:	40 e2       	ldi	r20, 0x20	; 32
    8b00:	25 ef       	ldi	r18, 0xF5	; 245
    8b02:	38 e0       	ldi	r19, 0x08	; 8
    8b04:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8b08:	8f ee       	ldi	r24, 0xEF	; 239
    8b0a:	9f ee       	ldi	r25, 0xEF	; 239
    8b0c:	6f ef       	ldi	r22, 0xFF	; 255
    8b0e:	7f ef       	ldi	r23, 0xFF	; 255
    8b10:	40 e2       	ldi	r20, 0x20	; 32
    8b12:	25 ef       	ldi	r18, 0xF5	; 245
    8b14:	38 e0       	ldi	r19, 0x08	; 8
    8b16:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    8b1a:	8f ee       	ldi	r24, 0xEF	; 239
    8b1c:	9f ee       	ldi	r25, 0xEF	; 239
    8b1e:	6f ef       	ldi	r22, 0xFF	; 255
    8b20:	7f ef       	ldi	r23, 0xFF	; 255
    8b22:	40 e2       	ldi	r20, 0x20	; 32
    8b24:	25 ef       	ldi	r18, 0xF5	; 245
    8b26:	38 e0       	ldi	r19, 0x08	; 8
    8b28:	0e 94 3c 46 	call	0x8c78	; 0x8c78 <StandardSocketSend>
}
    8b2c:	26 96       	adiw	r28, 0x06	; 6
    8b2e:	0f b6       	in	r0, 0x3f	; 63
    8b30:	f8 94       	cli
    8b32:	de bf       	out	0x3e, r29	; 62
    8b34:	0f be       	out	0x3f, r0	; 63
    8b36:	cd bf       	out	0x3d, r28	; 61
    8b38:	cf 91       	pop	r28
    8b3a:	df 91       	pop	r29
    8b3c:	1f 91       	pop	r17
    8b3e:	0f 91       	pop	r16
    8b40:	ff 90       	pop	r15
    8b42:	ef 90       	pop	r14
    8b44:	df 90       	pop	r13
    8b46:	cf 90       	pop	r12
    8b48:	bf 90       	pop	r11
    8b4a:	af 90       	pop	r10
    8b4c:	9f 90       	pop	r9
    8b4e:	8f 90       	pop	r8
    8b50:	7f 90       	pop	r7
    8b52:	08 95       	ret

00008b54 <commandHandle>:
    }
}

//-------------------------------------------------------------------------
void commandHandle(uint8_t * receivebuffer, uint8_t total)
{
    8b54:	cf 93       	push	r28
    8b56:	df 93       	push	r29
    8b58:	ec 01       	movw	r28, r24
    uint8_t commandtype;

    if (!((receivebuffer[2] == 0) || (receivebuffer[2] == nodeid)))
    8b5a:	2a 81       	ldd	r18, Y+2	; 0x02
    8b5c:	22 23       	and	r18, r18
    8b5e:	59 f0       	breq	.+22     	; 0x8b76 <commandHandle+0x22>
    8b60:	30 e0       	ldi	r19, 0x00	; 0
    8b62:	80 91 5f 09 	lds	r24, 0x095F
    8b66:	90 91 60 09 	lds	r25, 0x0960
    8b6a:	28 17       	cp	r18, r24
    8b6c:	39 07       	cpc	r19, r25
    8b6e:	19 f0       	breq	.+6      	; 0x8b76 <commandHandle+0x22>
        break;
    case 242:
        reply_nodeRestart(receivebuffer);
        break;
    }
}
    8b70:	df 91       	pop	r29
    8b72:	cf 91       	pop	r28
    8b74:	08 95       	ret
    if (!((receivebuffer[2] == 0) || (receivebuffer[2] == nodeid)))
    {
        return;
    }
    commandtype = receivebuffer[1];
    switch (commandtype)
    8b76:	89 81       	ldd	r24, Y+1	; 0x01
    8b78:	90 e0       	ldi	r25, 0x00	; 0
    8b7a:	fc 01       	movw	r30, r24
    8b7c:	eb 55       	subi	r30, 0x5B	; 91
    8b7e:	f0 40       	sbci	r31, 0x00	; 0
    8b80:	e8 39       	cpi	r30, 0x98	; 152
    8b82:	f1 05       	cpc	r31, r1
    8b84:	a8 f7       	brcc	.-22     	; 0x8b70 <commandHandle+0x1c>
    8b86:	ea 5b       	subi	r30, 0xBA	; 186
    8b88:	ff 4f       	sbci	r31, 0xFF	; 255
    8b8a:	ee 0f       	add	r30, r30
    8b8c:	ff 1f       	adc	r31, r31
    8b8e:	05 90       	lpm	r0, Z+
    8b90:	f4 91       	lpm	r31, Z+
    8b92:	e0 2d       	mov	r30, r0
    8b94:	09 94       	ijmp
        break;
    case 103:
        reply_ls_long(receivebuffer[3]);
        break;
    case 104:
        reply_ls_long(receivebuffer[3]);
    8b96:	8b 81       	ldd	r24, Y+3	; 0x03
    8b98:	0e 94 80 42 	call	0x8500	; 0x8500 <reply_ls_long>
    8b9c:	e9 cf       	rjmp	.-46     	; 0x8b70 <commandHandle+0x1c>
        break;
    case 101:
        reply_ls_networkname();
        break;
    case 102:
        reply_ls_nodename(receivebuffer);
    8b9e:	ce 01       	movw	r24, r28
    8ba0:	0e 94 cf 42 	call	0x859e	; 0x859e <reply_ls_nodename>
    8ba4:	e5 cf       	rjmp	.-54     	; 0x8b70 <commandHandle+0x1c>
        break;
    case 104:
        reply_ls_long(receivebuffer[3]);
        break;
    case 121:
        reply_cp_fromPCtoNode_type1(receivebuffer);
    8ba6:	ce 01       	movw	r24, r28
    8ba8:	0e 94 b2 41 	call	0x8364	; 0x8364 <reply_cp_fromPCtoNode_type1>
    8bac:	e1 cf       	rjmp	.-62     	; 0x8b70 <commandHandle+0x1c>
        break;
    case 122:
        reply_cp_fromPCtoNode_type2(receivebuffer);
    8bae:	ce 01       	movw	r24, r28
    8bb0:	0e 94 31 41 	call	0x8262	; 0x8262 <reply_cp_fromPCtoNode_type2>
    8bb4:	dd cf       	rjmp	.-70     	; 0x8b70 <commandHandle+0x1c>
        break;
    case 123:
        reply_cp_fromPCtoNode_type3();
    8bb6:	0e 94 40 3f 	call	0x7e80	; 0x7e80 <reply_cp_fromPCtoNode_type3>
    8bba:	da cf       	rjmp	.-76     	; 0x8b70 <commandHandle+0x1c>
        break;
    case 124:
        reply_fromNodeToPC_type1(receivebuffer);
    8bbc:	ce 01       	movw	r24, r28
    8bbe:	0e 94 db 3f 	call	0x7fb6	; 0x7fb6 <reply_fromNodeToPC_type1>
    8bc2:	d6 cf       	rjmp	.-84     	; 0x8b70 <commandHandle+0x1c>
        break;
    case 125:
        reply_fromNodeToPC_type2(receivebuffer);
    8bc4:	ce 01       	movw	r24, r28
    8bc6:	0e 94 50 3f 	call	0x7ea0	; 0x7ea0 <reply_fromNodeToPC_type2>
    8bca:	d2 cf       	rjmp	.-92     	; 0x8b70 <commandHandle+0x1c>
        break;
    case 141:
        reply_mkdir(receivebuffer);
    8bcc:	ce 01       	movw	r24, r28
    8bce:	0e 94 2f 42 	call	0x845e	; 0x845e <reply_mkdir>
    8bd2:	ce cf       	rjmp	.-100    	; 0x8b70 <commandHandle+0x1c>
        break;
    case 151:
        reply_touch(receivebuffer);
    8bd4:	ce 01       	movw	r24, r28
    8bd6:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <reply_touch>
    8bda:	ca cf       	rjmp	.-108    	; 0x8b70 <commandHandle+0x1c>
        break;
    case 161:
        reply_rm(receivebuffer);
    8bdc:	ce 01       	movw	r24, r28
    8bde:	0e 94 88 3f 	call	0x7f10	; 0x7f10 <reply_rm>
    8be2:	c6 cf       	rjmp	.-116    	; 0x8b70 <commandHandle+0x1c>
        break;
    case 171:
        reply_ps(receivebuffer);
    8be4:	ce 01       	movw	r24, r28
    8be6:	0e 94 6a 3d 	call	0x7ad4	; 0x7ad4 <reply_ps>
    8bea:	c2 cf       	rjmp	.-124    	; 0x8b70 <commandHandle+0x1c>
        break;
    
    case 211:
        reply_du(receivebuffer);
    8bec:	ce 01       	movw	r24, r28
    8bee:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <reply_du>
    8bf2:	be cf       	rjmp	.-132    	; 0x8b70 <commandHandle+0x1c>
        break;
    case 221:
        reply_search(receivebuffer);
    8bf4:	ce 01       	movw	r24, r28
    8bf6:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <reply_search>
    8bfa:	ba cf       	rjmp	.-140    	; 0x8b70 <commandHandle+0x1c>
        break;
    
    case 233:
        reply_formatSystem(receivebuffer);
    8bfc:	ce 01       	movw	r24, r28
    8bfe:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <reply_formatSystem>
    8c02:	b6 cf       	rjmp	.-148    	; 0x8b70 <commandHandle+0x1c>
}

//-------------------------------------------------------------------------
void reply_nodeRestart(uint8_t * receivebuffer)
{
    avr_resetNode();
    8c04:	0e 94 69 02 	call	0x4d2	; 0x4d2 <avr_resetNode>
    8c08:	b3 cf       	rjmp	.-154    	; 0x8b70 <commandHandle+0x1c>
    switch (commandtype)
    {
        //reply_devicehandling handles the device driver issues 
    
    case 91:
        reply_debugging_print(receivebuffer);
    8c0a:	ce 01       	movw	r24, r28
    8c0c:	0e 94 0e 3e 	call	0x7c1c	; 0x7c1c <reply_debugging_print>
    8c10:	af cf       	rjmp	.-162    	; 0x8b70 <commandHandle+0x1c>
        break;
#ifdef PLATFORM_AVR
    case 92:
        reply_debugging_insert_avr_breakpoint(receivebuffer);
    8c12:	ce 01       	movw	r24, r28
    8c14:	0e 94 0d 45 	call	0x8a1a	; 0x8a1a <reply_debugging_insert_avr_breakpoint>
    8c18:	ab cf       	rjmp	.-170    	; 0x8b70 <commandHandle+0x1c>
        break;
    case 93:
        reply_debugging_remove_avr_breakpoint(receivebuffer);
    8c1a:	ce 01       	movw	r24, r28
    8c1c:	0e 94 6d 44 	call	0x88da	; 0x88da <reply_debugging_remove_avr_breakpoint>
    8c20:	a7 cf       	rjmp	.-178    	; 0x8b70 <commandHandle+0x1c>
        break;
#endif
    case 94:
        reply_thread_state_snapshot_tofile(receivebuffer);
    8c22:	ce 01       	movw	r24, r28
    8c24:	0e 94 d6 43 	call	0x87ac	; 0x87ac <reply_thread_state_snapshot_tofile>
    8c28:	a3 cf       	rjmp	.-186    	; 0x8b70 <commandHandle+0x1c>
        break;
    case 95:
        reply_thread_state_restore_fromfile(receivebuffer);
    8c2a:	ce 01       	movw	r24, r28
    8c2c:	0e 94 37 43 	call	0x866e	; 0x866e <reply_thread_state_restore_fromfile>
    8c30:	9f cf       	rjmp	.-194    	; 0x8b70 <commandHandle+0x1c>
        break;
    case 96:
        reply_debugging_set(receivebuffer);
    8c32:	ce 01       	movw	r24, r28
    8c34:	0e 94 e8 3d 	call	0x7bd0	; 0x7bd0 <reply_debugging_set>
    8c38:	9b cf       	rjmp	.-202    	; 0x8b70 <commandHandle+0x1c>
        break;
    case 101:
        reply_ls_networkname();
    8c3a:	0e 94 04 43 	call	0x8608	; 0x8608 <reply_ls_networkname>
    8c3e:	98 cf       	rjmp	.-208    	; 0x8b70 <commandHandle+0x1c>

00008c40 <ShellThread>:
    init_breakpoint_table();
}

//This is the stub function of the shell thread that is used to handle incoming packets 
void ShellThread()
{
    8c40:	1f 93       	push	r17
            commandHandle(IncomingMsg, IncomingLength);
            IncomingLength = 0;
        }
        else
        {
            current_thread->state = STATE_SLEEP;
    8c42:	15 e0       	ldi	r17, 0x05	; 5
//This is the stub function of the shell thread that is used to handle incoming packets 
void ShellThread()
{
    while (1)
    {
        if (IncomingLength > 0)
    8c44:	60 91 1a 09 	lds	r22, 0x091A
    8c48:	66 23       	and	r22, r22
    8c4a:	79 f4       	brne	.+30     	; 0x8c6a <ShellThread+0x2a>
            commandHandle(IncomingMsg, IncomingLength);
            IncomingLength = 0;
        }
        else
        {
            current_thread->state = STATE_SLEEP;
    8c4c:	e0 91 8c 05 	lds	r30, 0x058C
    8c50:	f0 91 8d 05 	lds	r31, 0x058D
    8c54:	12 83       	std	Z+2, r17	; 0x02
            thisthread = current_thread;
    8c56:	f0 93 5e 09 	sts	0x095E, r31
    8c5a:	e0 93 5d 09 	sts	0x095D, r30
            thread_yield();
    8c5e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <thread_yield>
//This is the stub function of the shell thread that is used to handle incoming packets 
void ShellThread()
{
    while (1)
    {
        if (IncomingLength > 0)
    8c62:	60 91 1a 09 	lds	r22, 0x091A
    8c66:	66 23       	and	r22, r22
    8c68:	89 f3       	breq	.-30     	; 0x8c4c <ShellThread+0xc>
        {
            commandHandle(IncomingMsg, IncomingLength);
    8c6a:	8b e1       	ldi	r24, 0x1B	; 27
    8c6c:	99 e0       	ldi	r25, 0x09	; 9
    8c6e:	0e 94 aa 45 	call	0x8b54	; 0x8b54 <commandHandle>
            IncomingLength = 0;
    8c72:	10 92 1a 09 	sts	0x091A, r1
    8c76:	e6 cf       	rjmp	.-52     	; 0x8c44 <ShellThread+0x4>

00008c78 <StandardSocketSend>:
{   
//    #ifdef PLATFORM_AVR_IRIS
//     sleepThread(20);
//    #endif 

    radiosocketdata.socket_port = port;
    8c78:	90 93 62 09 	sts	0x0962, r25
    8c7c:	80 93 61 09 	sts	0x0961, r24
    radiosocketdata.socket_addr = address;
    8c80:	70 93 64 09 	sts	0x0964, r23
    8c84:	60 93 63 09 	sts	0x0963, r22
    radiosocketdata.socket_msg_len = msglength;
    8c88:	40 93 65 09 	sts	0x0965, r20
    radiosocketdata.socket_msg = msg;
    8c8c:	30 93 67 09 	sts	0x0967, r19
    8c90:	20 93 66 09 	sts	0x0966, r18
    postTask(send_task, 9);
    8c94:	86 e5       	ldi	r24, 0x56	; 86
    8c96:	96 e4       	ldi	r25, 0x46	; 70
    8c98:	69 e0       	ldi	r22, 0x09	; 9
    8c9a:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    sleepThread(20);
    8c9e:	84 e1       	ldi	r24, 0x14	; 20
    8ca0:	90 e0       	ldi	r25, 0x00	; 0
    8ca2:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <sleepThread>
    restoreRadioState();
    8ca6:	0e 94 cc 08 	call	0x1198	; 0x1198 <restoreRadioState>
    return;
}
    8caa:	08 95       	ret

00008cac <send_task>:
    struct msgData *dataPayloadPtr_currentMsg;

  
	 
    dataPayloadPtr_currentMsg = (struct msgData *)currentMsg.data;
    if (radiosocketdata.socket_msg_len == 0)
    8cac:	40 91 65 09 	lds	r20, 0x0965
    8cb0:	44 23       	and	r20, r20
    8cb2:	99 f1       	breq	.+102    	; 0x8d1a <send_task+0x6e>
    {
        radiosocketdata.socket_msg_len = mystrlen((char *)radiosocketdata.socket_msg);
    }
    mystrncpy((char *)dataPayloadPtr_currentMsg, (char *)radiosocketdata.socket_msg,
    8cb4:	60 91 66 09 	lds	r22, 0x0966
    8cb8:	70 91 67 09 	lds	r23, 0x0967
    8cbc:	82 e7       	ldi	r24, 0x72	; 114
    8cbe:	99 e0       	ldi	r25, 0x09	; 9
    8cc0:	0e 94 4c 3b 	call	0x7698	; 0x7698 <mystrncpy>
              radiosocketdata.socket_msg_len);


  
    if (radiosocketdata.socket_addr != 0)
    8cc4:	60 91 63 09 	lds	r22, 0x0963
    8cc8:	70 91 64 09 	lds	r23, 0x0964
    8ccc:	61 15       	cp	r22, r1
    8cce:	71 05       	cpc	r23, r1
    8cd0:	c9 f4       	brne	.+50     	; 0x8d04 <send_task+0x58>
    {
        AMStandard_SendMsg_send(radiosocketdata.socket_port, radiosocketdata.socket_addr, radiosocketdata.socket_msg_len, &currentMsg);
    }
    else
    {
        currentMsg.length = radiosocketdata.socket_msg_len;
    8cd2:	80 91 65 09 	lds	r24, 0x0965
    8cd6:	80 93 68 09 	sts	0x0968, r24
        currentMsg.addr = radiosocketdata.socket_addr;
    8cda:	10 92 6f 09 	sts	0x096F, r1
    8cde:	10 92 6e 09 	sts	0x096E, r1
        currentMsg.port = radiosocketdata.socket_port;
    8ce2:	80 91 61 09 	lds	r24, 0x0961
    8ce6:	90 91 62 09 	lds	r25, 0x0962
    8cea:	90 93 71 09 	sts	0x0971, r25
    8cee:	80 93 70 09 	sts	0x0970, r24
        currentMsg.strength = 0;
    8cf2:	10 92 d6 09 	sts	0x09D6, r1
        currentMsg.lqi = 0; 
    8cf6:	10 92 d7 09 	sts	0x09D7, r1
        Standard_Receive_Packet(radiosocketdata.socket_port, &currentMsg);
    8cfa:	68 e6       	ldi	r22, 0x68	; 104
    8cfc:	79 e0       	ldi	r23, 0x09	; 9
    8cfe:	0e 94 2f 0a 	call	0x145e	; 0x145e <Standard_Receive_Packet>
    8d02:	08 95       	ret


  
    if (radiosocketdata.socket_addr != 0)
    {
        AMStandard_SendMsg_send(radiosocketdata.socket_port, radiosocketdata.socket_addr, radiosocketdata.socket_msg_len, &currentMsg);
    8d04:	80 91 61 09 	lds	r24, 0x0961
    8d08:	90 91 62 09 	lds	r25, 0x0962
    8d0c:	40 91 65 09 	lds	r20, 0x0965
    8d10:	28 e6       	ldi	r18, 0x68	; 104
    8d12:	39 e0       	ldi	r19, 0x09	; 9
    8d14:	0e 94 01 09 	call	0x1202	; 0x1202 <AMStandard_SendMsg_send>
    8d18:	08 95       	ret
  
	 
    dataPayloadPtr_currentMsg = (struct msgData *)currentMsg.data;
    if (radiosocketdata.socket_msg_len == 0)
    {
        radiosocketdata.socket_msg_len = mystrlen((char *)radiosocketdata.socket_msg);
    8d1a:	80 91 66 09 	lds	r24, 0x0966
    8d1e:	90 91 67 09 	lds	r25, 0x0967
    8d22:	0e 94 05 3c 	call	0x780a	; 0x780a <mystrlen>
    8d26:	48 2f       	mov	r20, r24
    8d28:	80 93 65 09 	sts	0x0965, r24
    8d2c:	c3 cf       	rjmp	.-122    	; 0x8cb4 <send_task+0x8>

00008d2e <ADCAccY>:
//-------------------------------------------------------------------------
void ADCAccY()
{
    int temp;

    temp = get_accy();
    8d2e:	0e 94 97 1c 	call	0x392e	; 0x392e <get_accy>
    current_thread->data.adcstate.adcreading = temp;
    8d32:	e0 91 8c 05 	lds	r30, 0x058C
    8d36:	f0 91 8d 05 	lds	r31, 0x058D
    8d3a:	96 8f       	std	Z+30, r25	; 0x1e
    8d3c:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8d3e:	08 95       	ret

00008d40 <ADCAccX>:
//-------------------------------------------------------------------------
void ADCAccX()
{
    int temp;

    temp = get_accx();
    8d40:	0e 94 8e 1c 	call	0x391c	; 0x391c <get_accx>
    current_thread->data.adcstate.adcreading = temp;
    8d44:	e0 91 8c 05 	lds	r30, 0x058C
    8d48:	f0 91 8d 05 	lds	r31, 0x058D
    8d4c:	96 8f       	std	Z+30, r25	; 0x1e
    8d4e:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8d50:	08 95       	ret

00008d52 <ADCMagY>:
//-------------------------------------------------------------------------
void ADCMagY()
{
    int temp;

    temp = get_magy();
    8d52:	0e 94 85 1c 	call	0x390a	; 0x390a <get_magy>
    current_thread->data.adcstate.adcreading = temp;
    8d56:	e0 91 8c 05 	lds	r30, 0x058C
    8d5a:	f0 91 8d 05 	lds	r31, 0x058D
    8d5e:	96 8f       	std	Z+30, r25	; 0x1e
    8d60:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8d62:	08 95       	ret

00008d64 <ADCMagX>:
//-------------------------------------------------------------------------
void ADCMagX()
{
    int temp;

    temp = get_magx();
    8d64:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <get_magx>
    current_thread->data.adcstate.adcreading = temp;
    8d68:	e0 91 8c 05 	lds	r30, 0x058C
    8d6c:	f0 91 8d 05 	lds	r31, 0x058D
    8d70:	96 8f       	std	Z+30, r25	; 0x1e
    8d72:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8d74:	08 95       	ret

00008d76 <ADCTemp>:
//-------------------------------------------------------------------------
void ADCTemp()
{
    int temp;

    temp = get_temp();
    8d76:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <get_temp>
    current_thread->data.adcstate.adcreading = temp;
    8d7a:	e0 91 8c 05 	lds	r30, 0x058C
    8d7e:	f0 91 8d 05 	lds	r31, 0x058D
    8d82:	96 8f       	std	Z+30, r25	; 0x1e
    8d84:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8d86:	08 95       	ret

00008d88 <ADCLight>:

/** \brief the thread handle of the current thread */
void ADCLight()
{
    int temp;
    temp = get_light();
    8d88:	0e 94 66 1c 	call	0x38cc	; 0x38cc <get_light>
    current_thread->data.adcstate.adcreading = temp;
    8d8c:	e0 91 8c 05 	lds	r30, 0x058C
    8d90:	f0 91 8d 05 	lds	r31, 0x058D
    8d94:	96 8f       	std	Z+30, r25	; 0x1e
    8d96:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8d98:	08 95       	ret

00008d9a <getGenericStorageNodeAddress>:
static genericByteStorageTaskNode storageTask;

void *getGenericStorageNodeAddress()
{
    return (void *)&storageTask;
}
    8d9a:	8b eb       	ldi	r24, 0xBB	; 187
    8d9c:	93 e0       	ldi	r25, 0x03	; 3
    8d9e:	08 95       	ret

00008da0 <genericWriteTask>:
}

//-------------------------------------------------------------------------
void genericWriteTask()
{
    genericwriteBytes(storageTask.addr, storageTask.nBytes, (void *)
    8da0:	60 91 bd 03 	lds	r22, 0x03BD
    8da4:	70 91 be 03 	lds	r23, 0x03BE
    8da8:	40 91 bf 03 	lds	r20, 0x03BF
    8dac:	50 91 c0 03 	lds	r21, 0x03C0
    8db0:	80 91 bb 03 	lds	r24, 0x03BB
    8db4:	90 91 bc 03 	lds	r25, 0x03BC
    8db8:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <genericwriteBytes>
                      storageTask.buffer);
}
    8dbc:	08 95       	ret

00008dbe <genericReadTask>:
}

//-------------------------------------------------------------------------
void genericReadTask()
{
    genericreadBytes(storageTask.addr, storageTask.nBytes, (void *)
    8dbe:	60 91 bd 03 	lds	r22, 0x03BD
    8dc2:	70 91 be 03 	lds	r23, 0x03BE
    8dc6:	40 91 bf 03 	lds	r20, 0x03BF
    8dca:	50 91 c0 03 	lds	r21, 0x03C0
    8dce:	80 91 bb 03 	lds	r24, 0x03BB
    8dd2:	90 91 bc 03 	lds	r25, 0x03BC
    8dd6:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <genericreadBytes>
                     storageTask.buffer);
}
    8dda:	08 95       	ret

00008ddc <getFilePathAddress>:
//-------------------------------------------------------------------------
//Get the file path address
void *getFilePathAddress()
{
    return (void *)filepathaddr;
}
    8ddc:	89 ee       	ldi	r24, 0xE9	; 233
    8dde:	99 e0       	ldi	r25, 0x09	; 9
    8de0:	08 95       	ret

00008de2 <getFileModeAddress>:
//-------------------------------------------------------------------------
//Get the file mode address
void *getFileModeAddress()
{
    return (void *)filemodeaddr;
}
    8de2:	80 ee       	ldi	r24, 0xE0	; 224
    8de4:	99 e0       	ldi	r25, 0x09	; 9
    8de6:	08 95       	ret

00008de8 <seekFileTask>:
}

//-------------------------------------------------------------------------
void seekFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.fileseekstate.fileptr;
    8de8:	e0 91 8c 05 	lds	r30, 0x058C
    8dec:	f0 91 8d 05 	lds	r31, 0x058D
    8df0:	a1 a1       	ldd	r26, Z+33	; 0x21
    8df2:	b2 a1       	ldd	r27, Z+34	; 0x22
    8df4:	a0 93 de 09 	sts	0x09DE, r26
    8df8:	b0 93 df 09 	sts	0x09DF, r27
    offset = current_thread->filedata.fileseekstate.offset;
    8dfc:	43 a1       	ldd	r20, Z+35	; 0x23
    8dfe:	54 a1       	ldd	r21, Z+36	; 0x24
    8e00:	50 93 ff 09 	sts	0x09FF, r21
    8e04:	40 93 fe 09 	sts	0x09FE, r20
    position = current_thread->filedata.fileseekstate.position;
    8e08:	25 a1       	ldd	r18, Z+37	; 0x25
    8e0a:	36 a1       	ldd	r19, Z+38	; 0x26
    8e0c:	30 93 dd 09 	sts	0x09DD, r19
    8e10:	20 93 dc 09 	sts	0x09DC, r18
    fseek2(filehandle, (int32_t) offset, position);
    8e14:	66 27       	eor	r22, r22
    8e16:	57 fd       	sbrc	r21, 7
    8e18:	60 95       	com	r22
    8e1a:	76 2f       	mov	r23, r22
    8e1c:	cd 01       	movw	r24, r26
    8e1e:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <fseek2>
    return;
}
    8e22:	08 95       	ret

00008e24 <writeFileTask>:
}

//-------------------------------------------------------------------------
void writeFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
    8e24:	e0 91 8c 05 	lds	r30, 0x058C
    8e28:	f0 91 8d 05 	lds	r31, 0x058D
    8e2c:	81 a1       	ldd	r24, Z+33	; 0x21
    8e2e:	92 a1       	ldd	r25, Z+34	; 0x22
    8e30:	90 93 df 09 	sts	0x09DF, r25
    8e34:	80 93 de 09 	sts	0x09DE, r24
    databuffer = current_thread->filedata.filestate.bufferptr;
    8e38:	83 a1       	ldd	r24, Z+35	; 0x23
    8e3a:	94 a1       	ldd	r25, Z+36	; 0x24
    8e3c:	90 93 01 0a 	sts	0x0A01, r25
    8e40:	80 93 00 0a 	sts	0x0A00, r24
    nBytes = current_thread->filedata.filestate.bytes;
    8e44:	85 a1       	ldd	r24, Z+37	; 0x25
    8e46:	96 a1       	ldd	r25, Z+38	; 0x26
    8e48:	90 93 e6 09 	sts	0x09E6, r25
    8e4c:	80 93 e5 09 	sts	0x09E5, r24
    postTask(writefile_task, 5);
    8e50:	88 e6       	ldi	r24, 0x68	; 104
    8e52:	97 e4       	ldi	r25, 0x47	; 71
    8e54:	65 e0       	ldi	r22, 0x05	; 5
    8e56:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
}
    8e5a:	08 95       	ret

00008e5c <readFileTask>:
}

//-------------------------------------------------------------------------
void readFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
    8e5c:	e0 91 8c 05 	lds	r30, 0x058C
    8e60:	f0 91 8d 05 	lds	r31, 0x058D
    8e64:	81 a1       	ldd	r24, Z+33	; 0x21
    8e66:	92 a1       	ldd	r25, Z+34	; 0x22
    8e68:	90 93 df 09 	sts	0x09DF, r25
    8e6c:	80 93 de 09 	sts	0x09DE, r24
    databuffer = current_thread->filedata.filestate.bufferptr;
    8e70:	83 a1       	ldd	r24, Z+35	; 0x23
    8e72:	94 a1       	ldd	r25, Z+36	; 0x24
    8e74:	90 93 01 0a 	sts	0x0A01, r25
    8e78:	80 93 00 0a 	sts	0x0A00, r24
    nBytes = current_thread->filedata.filestate.bytes;
    8e7c:	85 a1       	ldd	r24, Z+37	; 0x25
    8e7e:	96 a1       	ldd	r25, Z+38	; 0x26
    8e80:	90 93 e6 09 	sts	0x09E6, r25
    8e84:	80 93 e5 09 	sts	0x09E5, r24
    postTask(readfile_task, 5);
    8e88:	8b e7       	ldi	r24, 0x7B	; 123
    8e8a:	97 e4       	ldi	r25, 0x47	; 71
    8e8c:	65 e0       	ldi	r22, 0x05	; 5
    8e8e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
}
    8e92:	08 95       	ret

00008e94 <closeFileTask>:
}

//-------------------------------------------------------------------------
void closeFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
    8e94:	e0 91 8c 05 	lds	r30, 0x058C
    8e98:	f0 91 8d 05 	lds	r31, 0x058D
    8e9c:	81 a1       	ldd	r24, Z+33	; 0x21
    8e9e:	92 a1       	ldd	r25, Z+34	; 0x22
    8ea0:	90 93 df 09 	sts	0x09DF, r25
    8ea4:	80 93 de 09 	sts	0x09DE, r24
    postTask(closefile_task, 5);
    8ea8:	8e e8       	ldi	r24, 0x8E	; 142
    8eaa:	97 e4       	ldi	r25, 0x47	; 71
    8eac:	65 e0       	ldi	r22, 0x05	; 5
    8eae:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
}
    8eb2:	08 95       	ret

00008eb4 <openFileTask>:
}

//-------------------------------------------------------------------------
void openFileTask()
{
    openthread = current_thread;
    8eb4:	80 91 8c 05 	lds	r24, 0x058C
    8eb8:	90 91 8d 05 	lds	r25, 0x058D
    8ebc:	90 93 e8 09 	sts	0x09E8, r25
    8ec0:	80 93 e7 09 	sts	0x09E7, r24
    postTask(openfile_task, 5);
    8ec4:	89 e9       	ldi	r24, 0x99	; 153
    8ec6:	97 e4       	ldi	r25, 0x47	; 71
    8ec8:	65 e0       	ldi	r22, 0x05	; 5
    8eca:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    return;
}
    8ece:	08 95       	ret

00008ed0 <writefile_task>:
}

//-------------------------------------------------------------------------
void writefile_task()
{
    fwrite2(filehandle, databuffer, nBytes);
    8ed0:	60 91 00 0a 	lds	r22, 0x0A00
    8ed4:	70 91 01 0a 	lds	r23, 0x0A01
    8ed8:	40 91 e5 09 	lds	r20, 0x09E5
    8edc:	50 91 e6 09 	lds	r21, 0x09E6
    8ee0:	80 91 de 09 	lds	r24, 0x09DE
    8ee4:	90 91 df 09 	lds	r25, 0x09DF
    8ee8:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <fwrite2>
	barrier_unblock(7, 4);
    8eec:	87 e0       	ldi	r24, 0x07	; 7
    8eee:	64 e0       	ldi	r22, 0x04	; 4
    8ef0:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <barrier_unblock>
     
}
    8ef4:	08 95       	ret

00008ef6 <readfile_task>:
}

//-------------------------------------------------------------------------
void readfile_task()
{
    fread2(filehandle, databuffer, nBytes);
    8ef6:	60 91 00 0a 	lds	r22, 0x0A00
    8efa:	70 91 01 0a 	lds	r23, 0x0A01
    8efe:	40 91 e5 09 	lds	r20, 0x09E5
    8f02:	50 91 e6 09 	lds	r21, 0x09E6
    8f06:	80 91 de 09 	lds	r24, 0x09DE
    8f0a:	90 91 df 09 	lds	r25, 0x09DF
    8f0e:	0e 94 0f 24 	call	0x481e	; 0x481e <fread2>
	barrier_unblock(7, 3);
    8f12:	87 e0       	ldi	r24, 0x07	; 7
    8f14:	63 e0       	ldi	r22, 0x03	; 3
    8f16:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <barrier_unblock>
}
    8f1a:	08 95       	ret

00008f1c <closefile_task>:
}

//-------------------------------------------------------------------------
void closefile_task()
{
    fclose2(filehandle);
    8f1c:	80 91 de 09 	lds	r24, 0x09DE
    8f20:	90 91 df 09 	lds	r25, 0x09DF
    8f24:	0e 94 7e 25 	call	0x4afc	; 0x4afc <fclose2>
	barrier_unblock(7, 2);
    8f28:	87 e0       	ldi	r24, 0x07	; 7
    8f2a:	62 e0       	ldi	r22, 0x02	; 2
    8f2c:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <barrier_unblock>
}
    8f30:	08 95       	ret

00008f32 <openfile_task>:
}

//-------------------------------------------------------------------------
void openfile_task()
{
    MYFILE *temp = fopen2(filepathaddr, filemodeaddr);
    8f32:	89 ee       	ldi	r24, 0xE9	; 233
    8f34:	99 e0       	ldi	r25, 0x09	; 9
    8f36:	60 ee       	ldi	r22, 0xE0	; 224
    8f38:	79 e0       	ldi	r23, 0x09	; 9
    8f3a:	0e 94 84 25 	call	0x4b08	; 0x4b08 <fopen2>

    openthread->filedata.filestate.fileptr = (uint8_t *) temp;
    8f3e:	e0 91 e7 09 	lds	r30, 0x09E7
    8f42:	f0 91 e8 09 	lds	r31, 0x09E8
    8f46:	92 a3       	std	Z+34, r25	; 0x22
    8f48:	81 a3       	std	Z+33, r24	; 0x21
    
	 barrier_unblock(7, 1);
    8f4a:	87 e0       	ldi	r24, 0x07	; 7
    8f4c:	61 e0       	ldi	r22, 0x01	; 1
    8f4e:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <barrier_unblock>

     return;

}
    8f52:	08 95       	ret

00008f54 <getRadioSendingBufferAddr>:
void *getRadioSendingBufferAddr()
{
    return (void *)&radiosocketdata;
    //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
    // asm volatile("ret"::); 
}
    8f54:	81 e6       	ldi	r24, 0x61	; 97
    8f56:	99 e0       	ldi	r25, 0x09	; 9
    8f58:	08 95       	ret

00008f5a <getRadioReceivingBufferAddr>:
void *getRadioReceivingBufferAddr()
{
    return (void *)&radio_buf;
    //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
    // asm volatile("ret"::); 
}
    8f5a:	82 e0       	ldi	r24, 0x02	; 2
    8f5c:	9a e0       	ldi	r25, 0x0A	; 10
    8f5e:	08 95       	ret

00008f60 <registerReceiverHandle_syscall>:
 
 
 
//system call interface for registering an event 
void registerReceiverHandle_syscall()
{
    8f60:	ef 92       	push	r14
    8f62:	ff 92       	push	r15
    8f64:	0f 93       	push	r16
    8f66:	1f 93       	push	r17
    registerEvent(radio_buf.port, radio_buf.maxLength, radio_buf.dataReady,
    8f68:	40 91 05 0a 	lds	r20, 0x0A05
    8f6c:	50 91 06 0a 	lds	r21, 0x0A06
    8f70:	20 91 07 0a 	lds	r18, 0x0A07
    8f74:	30 91 08 0a 	lds	r19, 0x0A08
    8f78:	00 91 09 0a 	lds	r16, 0x0A09
    8f7c:	10 91 0a 0a 	lds	r17, 0x0A0A
    8f80:	e0 90 0c 0a 	lds	r14, 0x0A0C
    8f84:	f0 90 0d 0a 	lds	r15, 0x0A0D
    8f88:	80 91 02 0a 	lds	r24, 0x0A02
    8f8c:	90 91 03 0a 	lds	r25, 0x0A03
    8f90:	60 91 04 0a 	lds	r22, 0x0A04
    8f94:	0e 94 ae 09 	call	0x135c	; 0x135c <registerEvent>
                  radio_buf.data, radio_buf.packetinfo,
                  radio_buf.handlefunc);
}
    8f98:	1f 91       	pop	r17
    8f9a:	0f 91       	pop	r16
    8f9c:	ff 90       	pop	r15
    8f9e:	ef 90       	pop	r14
    8fa0:	08 95       	ret

00008fa2 <SocketRadioSend>:
void SocketRadioSend()
{
   	//debugrf230
    //Leds_redToggle(); 

    postTask(send_task, 9);
    8fa2:	86 e5       	ldi	r24, 0x56	; 86
    8fa4:	96 e4       	ldi	r25, 0x46	; 70
    8fa6:	69 e0       	ldi	r22, 0x09	; 9
    8fa8:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
    //After it is woken up, return
    return;
}
    8fac:	08 95       	ret

00008fae <setRadioPowerTask>:
    return;
}

//-------------------------------------------------------------------------
void setRadioPowerTask()
{
    8fae:	df 93       	push	r29
    8fb0:	cf 93       	push	r28
    8fb2:	00 d0       	rcall	.+0      	; 0x8fb4 <setRadioPowerTask+0x6>
    8fb4:	cd b7       	in	r28, 0x3d	; 61
    8fb6:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t powerlevel;
    asm volatile ("mov  %A0, r20" "\n\t" "mov  %B0, r21"
    8fb8:	84 2f       	mov	r24, r20
    8fba:	95 2f       	mov	r25, r21
    8fbc:	9a 83       	std	Y+2, r25	; 0x02
    8fbe:	89 83       	std	Y+1, r24	; 0x01
                  "\n\t":"=r" (powerlevel):);
    cc2420controlm_CC2420Control_TunePower(powerlevel);
    8fc0:	89 81       	ldd	r24, Y+1	; 0x01
    8fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    8fc4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <cc2420controlm_CC2420Control_TunePower>
    return;
}
    8fc8:	0f 90       	pop	r0
    8fca:	0f 90       	pop	r0
    8fcc:	cf 91       	pop	r28
    8fce:	df 91       	pop	r29
    8fd0:	08 95       	ret

00008fd2 <setRadioChannelTask>:
    return;
}

//-------------------------------------------------------------------------
void setRadioChannelTask()
{
    8fd2:	df 93       	push	r29
    8fd4:	cf 93       	push	r28
    8fd6:	00 d0       	rcall	.+0      	; 0x8fd8 <setRadioChannelTask+0x6>
    8fd8:	cd b7       	in	r28, 0x3d	; 61
    8fda:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t freq;
    asm volatile ("mov  %A0, r20" "\n\t" "mov  %B0, r21" "\n\t":"=r" (freq):);
    8fdc:	84 2f       	mov	r24, r20
    8fde:	95 2f       	mov	r25, r21
    8fe0:	9a 83       	std	Y+2, r25	; 0x02
    8fe2:	89 83       	std	Y+1, r24	; 0x01

    cc2420controlm_CC2420Control_TuneChannel(freq);
    8fe4:	89 81       	ldd	r24, Y+1	; 0x01
    8fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    8fe8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <cc2420controlm_CC2420Control_TuneChannel>
    return;
}
    8fec:	0f 90       	pop	r0
    8fee:	0f 90       	pop	r0
    8ff0:	cf 91       	pop	r28
    8ff2:	df 91       	pop	r29
    8ff4:	08 95       	ret

00008ff6 <setRadioFrequencyTask>:
 
radio_receiving_buffer radio_buf;

//-------------------------------------------------------------------------
void setRadioFrequencyTask()
{
    8ff6:	df 93       	push	r29
    8ff8:	cf 93       	push	r28
    8ffa:	00 d0       	rcall	.+0      	; 0x8ffc <setRadioFrequencyTask+0x6>
    8ffc:	cd b7       	in	r28, 0x3d	; 61
    8ffe:	de b7       	in	r29, 0x3e	; 62
    volatile uint16_t freq;
    asm volatile ("mov  %A0, r20" "\n\t" "mov  %B0, r21" "\n\t":"=r" (freq):);
    9000:	84 2f       	mov	r24, r20
    9002:	95 2f       	mov	r25, r21
    9004:	9a 83       	std	Y+2, r25	; 0x02
    9006:	89 83       	std	Y+1, r24	; 0x01

    cc2420controlm_CC2420Control_TuneManual(freq);
    9008:	89 81       	ldd	r24, Y+1	; 0x01
    900a:	9a 81       	ldd	r25, Y+2	; 0x02
    900c:	0e 94 85 0b 	call	0x170a	; 0x170a <cc2420controlm_CC2420Control_TuneManual>
    return;
}
    9010:	0f 90       	pop	r0
    9012:	0f 90       	pop	r0
    9014:	cf 91       	pop	r28
    9016:	df 91       	pop	r29
    9018:	08 95       	ret

0000901a <getNodeIdTask>:
//Node operations including reading and setting node ID and name, random number generator 
//-----------------------------------------------------------------------------

//-------------------------------------------------------------------------
void getNodeIdTask()
{
    901a:	df 93       	push	r29
    901c:	cf 93       	push	r28
    901e:	00 d0       	rcall	.+0      	; 0x9020 <getNodeIdTask+0x6>
    9020:	cd b7       	in	r28, 0x3d	; 61
    9022:	de b7       	in	r29, 0x3e	; 62
    uint16_t nodeid;

    nodeid = node_readnodeid();
    9024:	0e 94 4b 02 	call	0x496	; 0x496 <node_readnodeid>
    9028:	9a 83       	std	Y+2, r25	; 0x02
    902a:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (nodeid));
    902c:	89 81       	ldd	r24, Y+1	; 0x01
    902e:	9a 81       	ldd	r25, Y+2	; 0x02
    9030:	48 2f       	mov	r20, r24
    9032:	59 2f       	mov	r21, r25
}
    9034:	0f 90       	pop	r0
    9036:	0f 90       	pop	r0
    9038:	cf 91       	pop	r28
    903a:	df 91       	pop	r29
    903c:	08 95       	ret

0000903e <getNodeIdTask_Logger>:

//-------------------------------------------------------------------------

void getNodeIdTask_Logger()
{
    903e:	df 93       	push	r29
    9040:	cf 93       	push	r28
    9042:	00 d0       	rcall	.+0      	; 0x9044 <getNodeIdTask_Logger+0x6>
    9044:	cd b7       	in	r28, 0x3d	; 61
    9046:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9048:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    904c:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    904e:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9052:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9054:	89 81       	ldd	r24, Y+1	; 0x01
    9056:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETNODEID, currentindex);
    905a:	85 e6       	ldi	r24, 0x65	; 101
    905c:	90 e0       	ldi	r25, 0x00	; 0
    905e:	6a 81       	ldd	r22, Y+2	; 0x02
    9060:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    getNodeIdTask();
    9064:	0e 94 0d 48 	call	0x901a	; 0x901a <getNodeIdTask>
}
    9068:	0f 90       	pop	r0
    906a:	0f 90       	pop	r0
    906c:	cf 91       	pop	r28
    906e:	df 91       	pop	r29
    9070:	08 95       	ret

00009072 <setNodeIdTask>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void setNodeIdTask()
{
    9072:	df 93       	push	r29
    9074:	cf 93       	push	r28
    9076:	00 d0       	rcall	.+0      	; 0x9078 <setNodeIdTask+0x6>
    9078:	cd b7       	in	r28, 0x3d	; 61
    907a:	de b7       	in	r29, 0x3e	; 62
    uint16_t nodeid;
    asm volatile ("mov %A0, r20" "\n\t" "mov %B0, r21" "\n\t":"=r" (nodeid):);
    907c:	84 2f       	mov	r24, r20
    907e:	95 2f       	mov	r25, r21
    9080:	9a 83       	std	Y+2, r25	; 0x02
    9082:	89 83       	std	Y+1, r24	; 0x01

    node_writenodeid(nodeid);
    9084:	89 81       	ldd	r24, Y+1	; 0x01
    9086:	9a 81       	ldd	r25, Y+2	; 0x02
    9088:	0e 94 50 02 	call	0x4a0	; 0x4a0 <node_writenodeid>
}
    908c:	0f 90       	pop	r0
    908e:	0f 90       	pop	r0
    9090:	cf 91       	pop	r28
    9092:	df 91       	pop	r29
    9094:	08 95       	ret

00009096 <setNodeIdTask_Logger>:

//-------------------------------------------------------------------------
void setNodeIdTask_Logger()
{
    9096:	df 93       	push	r29
    9098:	cf 93       	push	r28
    909a:	00 d0       	rcall	.+0      	; 0x909c <setNodeIdTask_Logger+0x6>
    909c:	cd b7       	in	r28, 0x3d	; 61
    909e:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    90a0:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    90a4:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    90a6:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    90aa:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    90ac:	89 81       	ldd	r24, Y+1	; 0x01
    90ae:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETNODEID, currentindex);
    90b2:	86 e6       	ldi	r24, 0x66	; 102
    90b4:	90 e0       	ldi	r25, 0x00	; 0
    90b6:	6a 81       	ldd	r22, Y+2	; 0x02
    90b8:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    setNodeIdTask();
    90bc:	0e 94 39 48 	call	0x9072	; 0x9072 <setNodeIdTask>
}
    90c0:	0f 90       	pop	r0
    90c2:	0f 90       	pop	r0
    90c4:	cf 91       	pop	r28
    90c6:	df 91       	pop	r29
    90c8:	08 95       	ret

000090ca <getRandomTask>:



//-------------------------------------------------------------------------
void getRandomTask()
{
    90ca:	df 93       	push	r29
    90cc:	cf 93       	push	r28
    90ce:	00 d0       	rcall	.+0      	; 0x90d0 <getRandomTask+0x6>
    90d0:	cd b7       	in	r28, 0x3d	; 61
    90d2:	de b7       	in	r29, 0x3e	; 62
    uint16_t num;

    num = getRandomNumber();
    90d4:	0e 94 99 3c 	call	0x7932	; 0x7932 <getRandomNumber>
    90d8:	9a 83       	std	Y+2, r25	; 0x02
    90da:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (num));
    90dc:	89 81       	ldd	r24, Y+1	; 0x01
    90de:	9a 81       	ldd	r25, Y+2	; 0x02
    90e0:	48 2f       	mov	r20, r24
    90e2:	59 2f       	mov	r21, r25
}
    90e4:	0f 90       	pop	r0
    90e6:	0f 90       	pop	r0
    90e8:	cf 91       	pop	r28
    90ea:	df 91       	pop	r29
    90ec:	08 95       	ret

000090ee <getRandomTask_Logger>:

//-------------------------------------------------------------------------

void getRandomTask_Logger()
{
    90ee:	df 93       	push	r29
    90f0:	cf 93       	push	r28
    90f2:	00 d0       	rcall	.+0      	; 0x90f4 <getRandomTask_Logger+0x6>
    90f4:	cd b7       	in	r28, 0x3d	; 61
    90f6:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    90f8:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    90fc:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    90fe:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9102:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9104:	89 81       	ldd	r24, Y+1	; 0x01
    9106:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETRANDOMNUMBER, currentindex);
    910a:	87 e6       	ldi	r24, 0x67	; 103
    910c:	90 e0       	ldi	r25, 0x00	; 0
    910e:	6a 81       	ldd	r22, Y+2	; 0x02
    9110:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    getRandomTask();
    9114:	0e 94 65 48 	call	0x90ca	; 0x90ca <getRandomTask>
}
    9118:	0f 90       	pop	r0
    911a:	0f 90       	pop	r0
    911c:	cf 91       	pop	r28
    911e:	df 91       	pop	r29
    9120:	08 95       	ret

00009122 <getCurrentThreadAddress_avr>:
///////////////////////////////////////////////////////////////////////////////
//Get the address of the currentthread pointer. Its address, not content. 

//-------------------------------------------------------------------------
void getCurrentThreadAddress_avr()
{
    9122:	df 93       	push	r29
    9124:	cf 93       	push	r28
    9126:	00 d0       	rcall	.+0      	; 0x9128 <getCurrentThreadAddress_avr+0x6>
    9128:	cd b7       	in	r28, 0x3d	; 61
    912a:	de b7       	in	r29, 0x3e	; 62
    thread **returnthreadaddr;

    returnthreadaddr = getCurrentThreadAddress();
    912c:	0e 94 a4 4d 	call	0x9b48	; 0x9b48 <getCurrentThreadAddress>
    9130:	9a 83       	std	Y+2, r25	; 0x02
    9132:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    9134:	89 81       	ldd	r24, Y+1	; 0x01
    9136:	9a 81       	ldd	r25, Y+2	; 0x02
    9138:	48 2f       	mov	r20, r24
    913a:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (returnthreadaddr));
}
    913c:	0f 90       	pop	r0
    913e:	0f 90       	pop	r0
    9140:	cf 91       	pop	r28
    9142:	df 91       	pop	r29
    9144:	08 95       	ret

00009146 <getCurrentThreadAddress_Logger>:

//-------------------------------------------------------------------------
void getCurrentThreadAddress_Logger()
{
    9146:	df 93       	push	r29
    9148:	cf 93       	push	r28
    914a:	00 d0       	rcall	.+0      	; 0x914c <getCurrentThreadAddress_Logger+0x6>
    914c:	cd b7       	in	r28, 0x3d	; 61
    914e:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9150:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9154:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9156:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    915a:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    915c:	89 81       	ldd	r24, Y+1	; 0x01
    915e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTTHREADADDRESS, currentindex);
    9162:	89 ec       	ldi	r24, 0xC9	; 201
    9164:	90 e0       	ldi	r25, 0x00	; 0
    9166:	6a 81       	ldd	r22, Y+2	; 0x02
    9168:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    getCurrentThreadAddress_avr();
    916c:	0e 94 91 48 	call	0x9122	; 0x9122 <getCurrentThreadAddress_avr>
}
    9170:	0f 90       	pop	r0
    9172:	0f 90       	pop	r0
    9174:	cf 91       	pop	r28
    9176:	df 91       	pop	r29
    9178:	08 95       	ret

0000917a <getThreadIndexAddress_avr>:
///////////////////////////////////////////////////////////////////////////////


//-------------------------------------------------------------------------
void getThreadIndexAddress_avr()
{
    917a:	df 93       	push	r29
    917c:	cf 93       	push	r28
    917e:	00 d0       	rcall	.+0      	; 0x9180 <getThreadIndexAddress_avr+0x6>
    9180:	cd b7       	in	r28, 0x3d	; 61
    9182:	de b7       	in	r29, 0x3e	; 62
    int index;

    index = getThreadIndexAddress();
    9184:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9188:	9a 83       	std	Y+2, r25	; 0x02
    918a:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (index));
    918c:	89 81       	ldd	r24, Y+1	; 0x01
    918e:	9a 81       	ldd	r25, Y+2	; 0x02
    9190:	48 2f       	mov	r20, r24
    9192:	59 2f       	mov	r21, r25
}
    9194:	0f 90       	pop	r0
    9196:	0f 90       	pop	r0
    9198:	cf 91       	pop	r28
    919a:	df 91       	pop	r29
    919c:	08 95       	ret

0000919e <getThreadIndexAddress_Logger>:

//-------------------------------------------------------------------------
void getThreadIndexAddress_Logger()
{
    919e:	df 93       	push	r29
    91a0:	cf 93       	push	r28
    91a2:	00 d0       	rcall	.+0      	; 0x91a4 <getThreadIndexAddress_Logger+0x6>
    91a4:	cd b7       	in	r28, 0x3d	; 61
    91a6:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    91a8:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    91ac:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    91ae:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    91b2:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    91b4:	89 81       	ldd	r24, Y+1	; 0x01
    91b6:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTTHREADINDEX, currentindex);
    91ba:	8a ec       	ldi	r24, 0xCA	; 202
    91bc:	90 e0       	ldi	r25, 0x00	; 0
    91be:	6a 81       	ldd	r22, Y+2	; 0x02
    91c0:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    getThreadIndexAddress_avr();
    91c4:	0e 94 bd 48 	call	0x917a	; 0x917a <getThreadIndexAddress_avr>
}
    91c8:	0f 90       	pop	r0
    91ca:	0f 90       	pop	r0
    91cc:	cf 91       	pop	r28
    91ce:	df 91       	pop	r29
    91d0:	08 95       	ret

000091d2 <getThreadTableStart_avr>:



//-------------------------------------------------------------------------
void getThreadTableStart_avr()
{
    91d2:	df 93       	push	r29
    91d4:	cf 93       	push	r28
    91d6:	00 d0       	rcall	.+0      	; 0x91d8 <getThreadTableStart_avr+0x6>
    91d8:	cd b7       	in	r28, 0x3d	; 61
    91da:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getThreadTableStart();
    91dc:	0e 94 a7 4d 	call	0x9b4e	; 0x9b4e <getThreadTableStart>
    91e0:	9a 83       	std	Y+2, r25	; 0x02
    91e2:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    91e4:	89 81       	ldd	r24, Y+1	; 0x01
    91e6:	9a 81       	ldd	r25, Y+2	; 0x02
    91e8:	48 2f       	mov	r20, r24
    91ea:	59 2f       	mov	r21, r25
}
    91ec:	0f 90       	pop	r0
    91ee:	0f 90       	pop	r0
    91f0:	cf 91       	pop	r28
    91f2:	df 91       	pop	r29
    91f4:	08 95       	ret

000091f6 <getThreadTableStart_Logger>:


 
//-------------------------------------------------------------------------
void getThreadTableStart_Logger()
{
    91f6:	df 93       	push	r29
    91f8:	cf 93       	push	r28
    91fa:	00 d0       	rcall	.+0      	; 0x91fc <getThreadTableStart_Logger+0x6>
    91fc:	cd b7       	in	r28, 0x3d	; 61
    91fe:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9200:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9204:	89 83       	std	Y+1, r24	; 0x01
    currentindex = getThreadIndexAddress();
    9206:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    920a:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    920c:	89 81       	ldd	r24, Y+1	; 0x01
    920e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETTHREADTABLESTART, currentindex);
    9212:	8f ec       	ldi	r24, 0xCF	; 207
    9214:	90 e0       	ldi	r25, 0x00	; 0
    9216:	6a 81       	ldd	r22, Y+2	; 0x02
    9218:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    getThreadTableStart_avr();
    921c:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <getThreadTableStart_avr>
}
    9220:	0f 90       	pop	r0
    9222:	0f 90       	pop	r0
    9224:	cf 91       	pop	r28
    9226:	df 91       	pop	r29
    9228:	08 95       	ret

0000922a <thread_yield_logger>:
}

//////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void thread_yield_logger()
{
    922a:	df 93       	push	r29
    922c:	cf 93       	push	r28
    922e:	00 d0       	rcall	.+0      	; 0x9230 <thread_yield_logger+0x6>
    9230:	cd b7       	in	r28, 0x3d	; 61
    9232:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9234:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9238:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    923a:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    923e:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9240:	89 81       	ldd	r24, Y+1	; 0x01
    9242:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_YIELDFUNCTION, currentindex);
    9246:	8c ec       	ldi	r24, 0xCC	; 204
    9248:	90 e0       	ldi	r25, 0x00	; 0
    924a:	6a 81       	ldd	r22, Y+2	; 0x02
    924c:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    thread_yield();
    9250:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <thread_yield>
}
    9254:	0f 90       	pop	r0
    9256:	0f 90       	pop	r0
    9258:	cf 91       	pop	r28
    925a:	df 91       	pop	r29
    925c:	08 95       	ret

0000925e <postNewThreadTask_Logger>:
}


//-------------------------------------------------------------------------
void postNewThreadTask_Logger()
{
    925e:	df 93       	push	r29
    9260:	cf 93       	push	r28
    9262:	00 d0       	rcall	.+0      	; 0x9264 <postNewThreadTask_Logger+0x6>
    9264:	cd b7       	in	r28, 0x3d	; 61
    9266:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9268:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    926c:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    926e:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9272:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9274:	89 81       	ldd	r24, Y+1	; 0x01
    9276:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_POSTTHREADTASK, currentindex);
    927a:	8d ec       	ldi	r24, 0xCD	; 205
    927c:	90 e0       	ldi	r25, 0x00	; 0
    927e:	6a 81       	ldd	r22, Y+2	; 0x02
    9280:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    postNewThreadTask();
    9284:	0e 94 00 18 	call	0x3000	; 0x3000 <postNewThreadTask>
}
    9288:	0f 90       	pop	r0
    928a:	0f 90       	pop	r0
    928c:	cf 91       	pop	r28
    928e:	df 91       	pop	r29
    9290:	08 95       	ret

00009292 <break_point_function_Logger>:




void break_point_function_Logger()
{
    9292:	df 93       	push	r29
    9294:	cf 93       	push	r28
    9296:	00 d0       	rcall	.+0      	; 0x9298 <break_point_function_Logger+0x6>
    9298:	cd b7       	in	r28, 0x3d	; 61
    929a:	de b7       	in	r29, 0x3e	; 62
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    929c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    92a0:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    92a2:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    92a6:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    92a8:	89 81       	ldd	r24, Y+1	; 0x01
    92aa:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
 addTrace(TRACE_SYSCALL_BREAKPOINTYIELD, currentindex);
    92ae:	80 ed       	ldi	r24, 0xD0	; 208
    92b0:	90 e0       	ldi	r25, 0x00	; 0
    92b2:	6a 81       	ldd	r22, Y+2	; 0x02
    92b4:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
  break_point_function(); 
    92b8:	0e 94 d6 17 	call	0x2fac	; 0x2fac <break_point_function>
}
    92bc:	0f 90       	pop	r0
    92be:	0f 90       	pop	r0
    92c0:	cf 91       	pop	r28
    92c2:	df 91       	pop	r29
    92c4:	08 95       	ret

000092c6 <postNewTask_avr>:
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------
void postNewTask_avr()
{
    92c6:	df 93       	push	r29
    92c8:	cf 93       	push	r28
    92ca:	00 d0       	rcall	.+0      	; 0x92cc <postNewTask_avr+0x6>
    92cc:	00 d0       	rcall	.+0      	; 0x92ce <postNewTask_avr+0x8>
    92ce:	cd b7       	in	r28, 0x3d	; 61
    92d0:	de b7       	in	r29, 0x3e	; 62
    void (*fp) (void);
    uint16_t priority;
    asm volatile ("mov %A0, r20" "\n\t" "mov %B0, r21" "\n\t":"=r" (fp):);
    92d2:	84 2f       	mov	r24, r20
    92d4:	95 2f       	mov	r25, r21
    92d6:	9c 83       	std	Y+4, r25	; 0x04
    92d8:	8b 83       	std	Y+3, r24	; 0x03
    asm volatile ("mov %A0, r22" "\n\t" "mov %B0, r23"
    92da:	86 2f       	mov	r24, r22
    92dc:	97 2f       	mov	r25, r23
    92de:	9a 83       	std	Y+2, r25	; 0x02
    92e0:	89 83       	std	Y+1, r24	; 0x01
                  "\n\t":"=r" (priority):);
    postTask(fp, priority);
    92e2:	29 81       	ldd	r18, Y+1	; 0x01
    92e4:	8b 81       	ldd	r24, Y+3	; 0x03
    92e6:	9c 81       	ldd	r25, Y+4	; 0x04
    92e8:	62 2f       	mov	r22, r18
    92ea:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <postTask>
}
    92ee:	0f 90       	pop	r0
    92f0:	0f 90       	pop	r0
    92f2:	0f 90       	pop	r0
    92f4:	0f 90       	pop	r0
    92f6:	cf 91       	pop	r28
    92f8:	df 91       	pop	r29
    92fa:	08 95       	ret

000092fc <postNewTask_Logger>:

//-------------------------------------------------------------------------
void postNewTask_Logger()
{
    92fc:	df 93       	push	r29
    92fe:	cf 93       	push	r28
    9300:	00 d0       	rcall	.+0      	; 0x9302 <postNewTask_Logger+0x6>
    9302:	cd b7       	in	r28, 0x3d	; 61
    9304:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9306:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    930a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    930c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9310:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9312:	89 81       	ldd	r24, Y+1	; 0x01
    9314:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_POSTTASKSYSCALL, currentindex);
    9318:	8d e2       	ldi	r24, 0x2D	; 45
    931a:	91 e0       	ldi	r25, 0x01	; 1
    931c:	6a 81       	ldd	r22, Y+2	; 0x02
    931e:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    postNewTask_avr();
    9322:	0e 94 63 49 	call	0x92c6	; 0x92c6 <postNewTask_avr>
}
    9326:	0f 90       	pop	r0
    9328:	0f 90       	pop	r0
    932a:	cf 91       	pop	r28
    932c:	df 91       	pop	r29
    932e:	08 95       	ret

00009330 <getStackPtrTask>:



//-------------------------------------------------------------------------
void getStackPtrTask()
{
    9330:	df 93       	push	r29
    9332:	cf 93       	push	r28
    9334:	00 d0       	rcall	.+0      	; 0x9336 <getStackPtrTask+0x6>
    9336:	cd b7       	in	r28, 0x3d	; 61
    9338:	de b7       	in	r29, 0x3e	; 62
    void **returnthreadaddr;

    returnthreadaddr = getKernelStackAddress();
    933a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <getKernelStackAddress>
    933e:	9a 83       	std	Y+2, r25	; 0x02
    9340:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    9342:	89 81       	ldd	r24, Y+1	; 0x01
    9344:	9a 81       	ldd	r25, Y+2	; 0x02
    9346:	48 2f       	mov	r20, r24
    9348:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (returnthreadaddr));
}
    934a:	0f 90       	pop	r0
    934c:	0f 90       	pop	r0
    934e:	cf 91       	pop	r28
    9350:	df 91       	pop	r29
    9352:	08 95       	ret

00009354 <getStackPtrTask_Logger>:

void getStackPtrTask_Logger()
{
    9354:	df 93       	push	r29
    9356:	cf 93       	push	r28
    9358:	00 d0       	rcall	.+0      	; 0x935a <getStackPtrTask_Logger+0x6>
    935a:	cd b7       	in	r28, 0x3d	; 61
    935c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    935e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9362:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9364:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9368:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    936a:	89 81       	ldd	r24, Y+1	; 0x01
    936c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_KERNELSTACK, currentindex);
    9370:	83 e9       	ldi	r24, 0x93	; 147
    9372:	91 e0       	ldi	r25, 0x01	; 1
    9374:	6a 81       	ldd	r22, Y+2	; 0x02
    9376:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    getStackPtrTask();
    937a:	0e 94 98 49 	call	0x9330	; 0x9330 <getStackPtrTask>
}
    937e:	0f 90       	pop	r0
    9380:	0f 90       	pop	r0
    9382:	cf 91       	pop	r28
    9384:	df 91       	pop	r29
    9386:	08 95       	ret

00009388 <setRadioFrequencyTask_Logger>:



//because this system call directly links into the radio module, therefore, we do not need to consider the problem of directly using registers. 
void setRadioFrequencyTask_Logger()
{
    9388:	df 93       	push	r29
    938a:	cf 93       	push	r28
    938c:	00 d0       	rcall	.+0      	; 0x938e <setRadioFrequencyTask_Logger+0x6>
    938e:	cd b7       	in	r28, 0x3d	; 61
    9390:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9392:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9396:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9398:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    939c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    939e:	89 81       	ldd	r24, Y+1	; 0x01
    93a0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETRADIOFREQUENCY, currentindex);
    93a4:	85 ef       	ldi	r24, 0xF5	; 245
    93a6:	91 e0       	ldi	r25, 0x01	; 1
    93a8:	6a 81       	ldd	r22, Y+2	; 0x02
    93aa:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
#ifdef RADIO_CC2420
    setRadioFrequencyTask();
    93ae:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <setRadioFrequencyTask>
#endif
}
    93b2:	0f 90       	pop	r0
    93b4:	0f 90       	pop	r0
    93b6:	cf 91       	pop	r28
    93b8:	df 91       	pop	r29
    93ba:	08 95       	ret

000093bc <setRadioChannelTask_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void setRadioChannelTask_Logger()
{
    93bc:	df 93       	push	r29
    93be:	cf 93       	push	r28
    93c0:	00 d0       	rcall	.+0      	; 0x93c2 <setRadioChannelTask_Logger+0x6>
    93c2:	cd b7       	in	r28, 0x3d	; 61
    93c4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    93c6:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    93ca:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    93cc:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    93d0:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    93d2:	89 81       	ldd	r24, Y+1	; 0x01
    93d4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETRADIOCHANNEL, currentindex);
    93d8:	86 ef       	ldi	r24, 0xF6	; 246
    93da:	91 e0       	ldi	r25, 0x01	; 1
    93dc:	6a 81       	ldd	r22, Y+2	; 0x02
    93de:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
#ifdef RADIO_CC2420
    setRadioChannelTask();
    93e2:	0e 94 e9 47 	call	0x8fd2	; 0x8fd2 <setRadioChannelTask>
#endif
}
    93e6:	0f 90       	pop	r0
    93e8:	0f 90       	pop	r0
    93ea:	cf 91       	pop	r28
    93ec:	df 91       	pop	r29
    93ee:	08 95       	ret

000093f0 <setRadioPowerTask_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void setRadioPowerTask_Logger()
{
    93f0:	df 93       	push	r29
    93f2:	cf 93       	push	r28
    93f4:	00 d0       	rcall	.+0      	; 0x93f6 <setRadioPowerTask_Logger+0x6>
    93f6:	cd b7       	in	r28, 0x3d	; 61
    93f8:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    93fa:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    93fe:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9400:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9404:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9406:	89 81       	ldd	r24, Y+1	; 0x01
    9408:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETRADIOPOWER, currentindex);
    940c:	87 ef       	ldi	r24, 0xF7	; 247
    940e:	91 e0       	ldi	r25, 0x01	; 1
    9410:	6a 81       	ldd	r22, Y+2	; 0x02
    9412:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
#ifdef RADIO_CC2420
    setRadioPowerTask();
    9416:	0e 94 d7 47 	call	0x8fae	; 0x8fae <setRadioPowerTask>
#endif
}
    941a:	0f 90       	pop	r0
    941c:	0f 90       	pop	r0
    941e:	cf 91       	pop	r28
    9420:	df 91       	pop	r29
    9422:	08 95       	ret

00009424 <getRadioSendingBuffer_avr>:



//-------------------------------------------------------------------------
void getRadioSendingBuffer_avr()
{
    9424:	df 93       	push	r29
    9426:	cf 93       	push	r28
    9428:	00 d0       	rcall	.+0      	; 0x942a <getRadioSendingBuffer_avr+0x6>
    942a:	cd b7       	in	r28, 0x3d	; 61
    942c:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getRadioSendingBufferAddr();
    942e:	0e 94 aa 47 	call	0x8f54	; 0x8f54 <getRadioSendingBufferAddr>
    9432:	9a 83       	std	Y+2, r25	; 0x02
    9434:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    9436:	89 81       	ldd	r24, Y+1	; 0x01
    9438:	9a 81       	ldd	r25, Y+2	; 0x02
    943a:	48 2f       	mov	r20, r24
    943c:	59 2f       	mov	r21, r25
}
    943e:	0f 90       	pop	r0
    9440:	0f 90       	pop	r0
    9442:	cf 91       	pop	r28
    9444:	df 91       	pop	r29
    9446:	08 95       	ret

00009448 <getRadioSendingBuffer_Logger>:

//-------------------------------------------------------------------------
void getRadioSendingBuffer_Logger()
{
    9448:	df 93       	push	r29
    944a:	cf 93       	push	r28
    944c:	00 d0       	rcall	.+0      	; 0x944e <getRadioSendingBuffer_Logger+0x6>
    944e:	cd b7       	in	r28, 0x3d	; 61
    9450:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9452:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9456:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9458:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    945c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    945e:	89 81       	ldd	r24, Y+1	; 0x01
    9460:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTRADIOINFOADDRESS, currentindex);
    9464:	8a ef       	ldi	r24, 0xFA	; 250
    9466:	91 e0       	ldi	r25, 0x01	; 1
    9468:	6a 81       	ldd	r22, Y+2	; 0x02
    946a:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    getRadioSendingBuffer_avr();
    946e:	0e 94 12 4a 	call	0x9424	; 0x9424 <getRadioSendingBuffer_avr>
}
    9472:	0f 90       	pop	r0
    9474:	0f 90       	pop	r0
    9476:	cf 91       	pop	r28
    9478:	df 91       	pop	r29
    947a:	08 95       	ret

0000947c <SocketRadioSend_Logger>:



//-------------------------------------------------------------------------
void SocketRadioSend_Logger()
{
    947c:	df 93       	push	r29
    947e:	cf 93       	push	r28
    9480:	00 d0       	rcall	.+0      	; 0x9482 <SocketRadioSend_Logger+0x6>
    9482:	cd b7       	in	r28, 0x3d	; 61
    9484:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9486:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    948a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    948c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9490:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9492:	89 81       	ldd	r24, Y+1	; 0x01
    9494:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETRADIOSENDFUNCTION, currentindex);
    9498:	88 ef       	ldi	r24, 0xF8	; 248
    949a:	91 e0       	ldi	r25, 0x01	; 1
    949c:	6a 81       	ldd	r22, Y+2	; 0x02
    949e:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    SocketRadioSend();
    94a2:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <SocketRadioSend>
}
    94a6:	0f 90       	pop	r0
    94a8:	0f 90       	pop	r0
    94aa:	cf 91       	pop	r28
    94ac:	df 91       	pop	r29
    94ae:	08 95       	ret

000094b0 <getReceiverBuffer_avr>:

//following are receiving

//-------------------------------------------------------------------------
void getReceiverBuffer_avr()
{
    94b0:	df 93       	push	r29
    94b2:	cf 93       	push	r28
    94b4:	00 d0       	rcall	.+0      	; 0x94b6 <getReceiverBuffer_avr+0x6>
    94b6:	cd b7       	in	r28, 0x3d	; 61
    94b8:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getRadioReceivingBufferAddr();
    94ba:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <getRadioReceivingBufferAddr>
    94be:	9a 83       	std	Y+2, r25	; 0x02
    94c0:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    94c2:	89 81       	ldd	r24, Y+1	; 0x01
    94c4:	9a 81       	ldd	r25, Y+2	; 0x02
    94c6:	48 2f       	mov	r20, r24
    94c8:	59 2f       	mov	r21, r25
}
    94ca:	0f 90       	pop	r0
    94cc:	0f 90       	pop	r0
    94ce:	cf 91       	pop	r28
    94d0:	df 91       	pop	r29
    94d2:	08 95       	ret

000094d4 <getReceiverBuffer_Logger>:

//-------------------------------------------------------------------------
void getReceiverBuffer_Logger()
{
    94d4:	df 93       	push	r29
    94d6:	cf 93       	push	r28
    94d8:	00 d0       	rcall	.+0      	; 0x94da <getReceiverBuffer_Logger+0x6>
    94da:	cd b7       	in	r28, 0x3d	; 61
    94dc:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    94de:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    94e2:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    94e4:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    94e8:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    94ea:	89 81       	ldd	r24, Y+1	; 0x01
    94ec:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTRADIORECEIVERHANDLEADDRESS, currentindex);
    94f0:	8b ef       	ldi	r24, 0xFB	; 251
    94f2:	91 e0       	ldi	r25, 0x01	; 1
    94f4:	6a 81       	ldd	r22, Y+2	; 0x02
    94f6:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    getReceiverBuffer_avr();
    94fa:	0e 94 58 4a 	call	0x94b0	; 0x94b0 <getReceiverBuffer_avr>
}
    94fe:	0f 90       	pop	r0
    9500:	0f 90       	pop	r0
    9502:	cf 91       	pop	r28
    9504:	df 91       	pop	r29
    9506:	08 95       	ret

00009508 <syscall_registerEvent_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void syscall_registerEvent_Logger()
{
    9508:	df 93       	push	r29
    950a:	cf 93       	push	r28
    950c:	00 d0       	rcall	.+0      	; 0x950e <syscall_registerEvent_Logger+0x6>
    950e:	cd b7       	in	r28, 0x3d	; 61
    9510:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9512:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9516:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9518:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    951c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    951e:	89 81       	ldd	r24, Y+1	; 0x01
    9520:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETCURRENTRADIOHANDLE, currentindex);
    9524:	89 ef       	ldi	r24, 0xF9	; 249
    9526:	91 e0       	ldi	r25, 0x01	; 1
    9528:	6a 81       	ldd	r22, Y+2	; 0x02
    952a:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    registerReceiverHandle_syscall();
    952e:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <registerReceiverHandle_syscall>
}
    9532:	0f 90       	pop	r0
    9534:	0f 90       	pop	r0
    9536:	cf 91       	pop	r28
    9538:	df 91       	pop	r29
    953a:	08 95       	ret

0000953c <Leds_redToggle_Logger>:

//-------------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void Leds_redToggle_Logger()
{
    953c:	df 93       	push	r29
    953e:	cf 93       	push	r28
    9540:	00 d0       	rcall	.+0      	; 0x9542 <Leds_redToggle_Logger+0x6>
    9542:	cd b7       	in	r28, 0x3d	; 61
    9544:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9546:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    954a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    954c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9550:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9552:	89 81       	ldd	r24, Y+1	; 0x01
    9554:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_REDTOGGLEFUNCTION, currentindex);
    9558:	89 e5       	ldi	r24, 0x59	; 89
    955a:	92 e0       	ldi	r25, 0x02	; 2
    955c:	6a 81       	ldd	r22, Y+2	; 0x02
    955e:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    Leds_redToggle();
    9562:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <Leds_redToggle>
}
    9566:	0f 90       	pop	r0
    9568:	0f 90       	pop	r0
    956a:	cf 91       	pop	r28
    956c:	df 91       	pop	r29
    956e:	08 95       	ret

00009570 <Leds_yellowToggle_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_yellowToggle_Logger()
{
    9570:	df 93       	push	r29
    9572:	cf 93       	push	r28
    9574:	00 d0       	rcall	.+0      	; 0x9576 <Leds_yellowToggle_Logger+0x6>
    9576:	cd b7       	in	r28, 0x3d	; 61
    9578:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    957a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    957e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9580:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9584:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9586:	89 81       	ldd	r24, Y+1	; 0x01
    9588:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_YELLOWTOGGLEFUNCTION, currentindex);
    958c:	8a e5       	ldi	r24, 0x5A	; 90
    958e:	92 e0       	ldi	r25, 0x02	; 2
    9590:	6a 81       	ldd	r22, Y+2	; 0x02
    9592:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    Leds_yellowToggle();
    9596:	0e 94 c0 1c 	call	0x3980	; 0x3980 <Leds_yellowToggle>
}
    959a:	0f 90       	pop	r0
    959c:	0f 90       	pop	r0
    959e:	cf 91       	pop	r28
    95a0:	df 91       	pop	r29
    95a2:	08 95       	ret

000095a4 <Leds_greenToggle_Logger>:

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
void Leds_greenToggle_Logger()
{
    95a4:	df 93       	push	r29
    95a6:	cf 93       	push	r28
    95a8:	00 d0       	rcall	.+0      	; 0x95aa <Leds_greenToggle_Logger+0x6>
    95aa:	cd b7       	in	r28, 0x3d	; 61
    95ac:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    95ae:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    95b2:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    95b4:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    95b8:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    95ba:	89 81       	ldd	r24, Y+1	; 0x01
    95bc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GREENTOGGLEFUNCTION, currentindex);
    95c0:	8b e5       	ldi	r24, 0x5B	; 91
    95c2:	92 e0       	ldi	r25, 0x02	; 2
    95c4:	6a 81       	ldd	r22, Y+2	; 0x02
    95c6:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    Leds_greenToggle();
    95ca:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <Leds_greenToggle>
}
    95ce:	0f 90       	pop	r0
    95d0:	0f 90       	pop	r0
    95d2:	cf 91       	pop	r28
    95d4:	df 91       	pop	r29
    95d6:	08 95       	ret

000095d8 <Leds_redOn_Logger>:



//-------------------------------------------------------------------------
void Leds_redOn_Logger()
{
    95d8:	df 93       	push	r29
    95da:	cf 93       	push	r28
    95dc:	00 d0       	rcall	.+0      	; 0x95de <Leds_redOn_Logger+0x6>
    95de:	cd b7       	in	r28, 0x3d	; 61
    95e0:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    95e2:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    95e6:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    95e8:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    95ec:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    95ee:	89 81       	ldd	r24, Y+1	; 0x01
    95f0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_REDONFUNCTION, currentindex);
    95f4:	8c e5       	ldi	r24, 0x5C	; 92
    95f6:	92 e0       	ldi	r25, 0x02	; 2
    95f8:	6a 81       	ldd	r22, Y+2	; 0x02
    95fa:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    Leds_redOn();
    95fe:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <Leds_redOn>
}
    9602:	0f 90       	pop	r0
    9604:	0f 90       	pop	r0
    9606:	cf 91       	pop	r28
    9608:	df 91       	pop	r29
    960a:	08 95       	ret

0000960c <Leds_redOff_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_redOff_Logger()
{
    960c:	df 93       	push	r29
    960e:	cf 93       	push	r28
    9610:	00 d0       	rcall	.+0      	; 0x9612 <Leds_redOff_Logger+0x6>
    9612:	cd b7       	in	r28, 0x3d	; 61
    9614:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9616:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    961a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    961c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9620:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9622:	89 81       	ldd	r24, Y+1	; 0x01
    9624:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_REDOFFFUNCTION, currentindex);
    9628:	8d e5       	ldi	r24, 0x5D	; 93
    962a:	92 e0       	ldi	r25, 0x02	; 2
    962c:	6a 81       	ldd	r22, Y+2	; 0x02
    962e:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    Leds_redOff();
    9632:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <Leds_redOff>
}
    9636:	0f 90       	pop	r0
    9638:	0f 90       	pop	r0
    963a:	cf 91       	pop	r28
    963c:	df 91       	pop	r29
    963e:	08 95       	ret

00009640 <Leds_yellowOn_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_yellowOn_Logger()
{
    9640:	df 93       	push	r29
    9642:	cf 93       	push	r28
    9644:	00 d0       	rcall	.+0      	; 0x9646 <Leds_yellowOn_Logger+0x6>
    9646:	cd b7       	in	r28, 0x3d	; 61
    9648:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    964a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    964e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9650:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9654:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9656:	89 81       	ldd	r24, Y+1	; 0x01
    9658:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_YELLOWONFUNCTION, currentindex);
    965c:	8e e5       	ldi	r24, 0x5E	; 94
    965e:	92 e0       	ldi	r25, 0x02	; 2
    9660:	6a 81       	ldd	r22, Y+2	; 0x02
    9662:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    Leds_yellowOn();
    9666:	0e 94 b0 1c 	call	0x3960	; 0x3960 <Leds_yellowOn>
}
    966a:	0f 90       	pop	r0
    966c:	0f 90       	pop	r0
    966e:	cf 91       	pop	r28
    9670:	df 91       	pop	r29
    9672:	08 95       	ret

00009674 <Leds_yellowOff_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_yellowOff_Logger()
{
    9674:	df 93       	push	r29
    9676:	cf 93       	push	r28
    9678:	00 d0       	rcall	.+0      	; 0x967a <Leds_yellowOff_Logger+0x6>
    967a:	cd b7       	in	r28, 0x3d	; 61
    967c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    967e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9682:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9684:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9688:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    968a:	89 81       	ldd	r24, Y+1	; 0x01
    968c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_YELLOWOFFFUNCTION, currentindex);
    9690:	8f e5       	ldi	r24, 0x5F	; 95
    9692:	92 e0       	ldi	r25, 0x02	; 2
    9694:	6a 81       	ldd	r22, Y+2	; 0x02
    9696:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    Leds_yellowOff();
    969a:	0e 94 a0 1c 	call	0x3940	; 0x3940 <Leds_yellowOff>
}
    969e:	0f 90       	pop	r0
    96a0:	0f 90       	pop	r0
    96a2:	cf 91       	pop	r28
    96a4:	df 91       	pop	r29
    96a6:	08 95       	ret

000096a8 <Leds_greenOn_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_greenOn_Logger()
{
    96a8:	df 93       	push	r29
    96aa:	cf 93       	push	r28
    96ac:	00 d0       	rcall	.+0      	; 0x96ae <Leds_greenOn_Logger+0x6>
    96ae:	cd b7       	in	r28, 0x3d	; 61
    96b0:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    96b2:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    96b6:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    96b8:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    96bc:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    96be:	89 81       	ldd	r24, Y+1	; 0x01
    96c0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GREENONFUNCTION, currentindex);
    96c4:	80 e6       	ldi	r24, 0x60	; 96
    96c6:	92 e0       	ldi	r25, 0x02	; 2
    96c8:	6a 81       	ldd	r22, Y+2	; 0x02
    96ca:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    Leds_greenOn();
    96ce:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <Leds_greenOn>
}
    96d2:	0f 90       	pop	r0
    96d4:	0f 90       	pop	r0
    96d6:	cf 91       	pop	r28
    96d8:	df 91       	pop	r29
    96da:	08 95       	ret

000096dc <Leds_greenOff_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_greenOff_Logger()
{
    96dc:	df 93       	push	r29
    96de:	cf 93       	push	r28
    96e0:	00 d0       	rcall	.+0      	; 0x96e2 <Leds_greenOff_Logger+0x6>
    96e2:	cd b7       	in	r28, 0x3d	; 61
    96e4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    96e6:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    96ea:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    96ec:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    96f0:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    96f2:	89 81       	ldd	r24, Y+1	; 0x01
    96f4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GREENOFFFUNCTION, currentindex);
    96f8:	81 e6       	ldi	r24, 0x61	; 97
    96fa:	92 e0       	ldi	r25, 0x02	; 2
    96fc:	6a 81       	ldd	r22, Y+2	; 0x02
    96fe:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    Leds_greenOff();
    9702:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <Leds_greenOff>
}
    9706:	0f 90       	pop	r0
    9708:	0f 90       	pop	r0
    970a:	cf 91       	pop	r28
    970c:	df 91       	pop	r29
    970e:	08 95       	ret

00009710 <ADCLight_Logger>:
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------
void ADCLight_Logger()
{
    9710:	df 93       	push	r29
    9712:	cf 93       	push	r28
    9714:	00 d0       	rcall	.+0      	; 0x9716 <ADCLight_Logger+0x6>
    9716:	cd b7       	in	r28, 0x3d	; 61
    9718:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    971a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    971e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9720:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9724:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9726:	89 81       	ldd	r24, Y+1	; 0x01
    9728:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCLIGHTSYSCALL, currentindex);
    972c:	8d eb       	ldi	r24, 0xBD	; 189
    972e:	92 e0       	ldi	r25, 0x02	; 2
    9730:	6a 81       	ldd	r22, Y+2	; 0x02
    9732:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    ADCLight();
    9736:	0e 94 c4 46 	call	0x8d88	; 0x8d88 <ADCLight>
}
    973a:	0f 90       	pop	r0
    973c:	0f 90       	pop	r0
    973e:	cf 91       	pop	r28
    9740:	df 91       	pop	r29
    9742:	08 95       	ret

00009744 <ADCTemp_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCTemp_Logger()
{
    9744:	df 93       	push	r29
    9746:	cf 93       	push	r28
    9748:	00 d0       	rcall	.+0      	; 0x974a <ADCTemp_Logger+0x6>
    974a:	cd b7       	in	r28, 0x3d	; 61
    974c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    974e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9752:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9754:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9758:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    975a:	89 81       	ldd	r24, Y+1	; 0x01
    975c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCTEMPSYSCALL, currentindex);
    9760:	8e eb       	ldi	r24, 0xBE	; 190
    9762:	92 e0       	ldi	r25, 0x02	; 2
    9764:	6a 81       	ldd	r22, Y+2	; 0x02
    9766:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    ADCTemp();
    976a:	0e 94 bb 46 	call	0x8d76	; 0x8d76 <ADCTemp>
}
    976e:	0f 90       	pop	r0
    9770:	0f 90       	pop	r0
    9772:	cf 91       	pop	r28
    9774:	df 91       	pop	r29
    9776:	08 95       	ret

00009778 <ADCMagX_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCMagX_Logger()
{
    9778:	df 93       	push	r29
    977a:	cf 93       	push	r28
    977c:	00 d0       	rcall	.+0      	; 0x977e <ADCMagX_Logger+0x6>
    977e:	cd b7       	in	r28, 0x3d	; 61
    9780:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9782:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9786:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9788:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    978c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    978e:	89 81       	ldd	r24, Y+1	; 0x01
    9790:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCMAGXSYSCALL, currentindex);
    9794:	8f eb       	ldi	r24, 0xBF	; 191
    9796:	92 e0       	ldi	r25, 0x02	; 2
    9798:	6a 81       	ldd	r22, Y+2	; 0x02
    979a:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    ADCMagX();
    979e:	0e 94 b2 46 	call	0x8d64	; 0x8d64 <ADCMagX>
}
    97a2:	0f 90       	pop	r0
    97a4:	0f 90       	pop	r0
    97a6:	cf 91       	pop	r28
    97a8:	df 91       	pop	r29
    97aa:	08 95       	ret

000097ac <ADCMagY_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCMagY_Logger()
{
    97ac:	df 93       	push	r29
    97ae:	cf 93       	push	r28
    97b0:	00 d0       	rcall	.+0      	; 0x97b2 <ADCMagY_Logger+0x6>
    97b2:	cd b7       	in	r28, 0x3d	; 61
    97b4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    97b6:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    97ba:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    97bc:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    97c0:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    97c2:	89 81       	ldd	r24, Y+1	; 0x01
    97c4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCMAGYSYSCALL, currentindex);
    97c8:	80 ec       	ldi	r24, 0xC0	; 192
    97ca:	92 e0       	ldi	r25, 0x02	; 2
    97cc:	6a 81       	ldd	r22, Y+2	; 0x02
    97ce:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    ADCMagY();
    97d2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <ADCMagY>
}
    97d6:	0f 90       	pop	r0
    97d8:	0f 90       	pop	r0
    97da:	cf 91       	pop	r28
    97dc:	df 91       	pop	r29
    97de:	08 95       	ret

000097e0 <ADCAccX_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCAccX_Logger()
{
    97e0:	df 93       	push	r29
    97e2:	cf 93       	push	r28
    97e4:	00 d0       	rcall	.+0      	; 0x97e6 <ADCAccX_Logger+0x6>
    97e6:	cd b7       	in	r28, 0x3d	; 61
    97e8:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    97ea:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    97ee:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    97f0:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    97f4:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    97f6:	89 81       	ldd	r24, Y+1	; 0x01
    97f8:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCACCXSYSCALL, currentindex);
    97fc:	81 ec       	ldi	r24, 0xC1	; 193
    97fe:	92 e0       	ldi	r25, 0x02	; 2
    9800:	6a 81       	ldd	r22, Y+2	; 0x02
    9802:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    ADCAccX();
    9806:	0e 94 a0 46 	call	0x8d40	; 0x8d40 <ADCAccX>
}
    980a:	0f 90       	pop	r0
    980c:	0f 90       	pop	r0
    980e:	cf 91       	pop	r28
    9810:	df 91       	pop	r29
    9812:	08 95       	ret

00009814 <ADCAccY_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCAccY_Logger()
{
    9814:	df 93       	push	r29
    9816:	cf 93       	push	r28
    9818:	00 d0       	rcall	.+0      	; 0x981a <ADCAccY_Logger+0x6>
    981a:	cd b7       	in	r28, 0x3d	; 61
    981c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    981e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9822:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9824:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9828:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    982a:	89 81       	ldd	r24, Y+1	; 0x01
    982c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCACCYSYSCALL, currentindex);
    9830:	82 ec       	ldi	r24, 0xC2	; 194
    9832:	92 e0       	ldi	r25, 0x02	; 2
    9834:	6a 81       	ldd	r22, Y+2	; 0x02
    9836:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    ADCAccY();
    983a:	0e 94 97 46 	call	0x8d2e	; 0x8d2e <ADCAccY>
}
    983e:	0f 90       	pop	r0
    9840:	0f 90       	pop	r0
    9842:	cf 91       	pop	r28
    9844:	df 91       	pop	r29
    9846:	08 95       	ret

00009848 <sounderOn_Logger>:
}


/* added by Qi Mi (qm8e@virginia.edu) */
void sounderOn_Logger()
{
    9848:	df 93       	push	r29
    984a:	cf 93       	push	r28
    984c:	00 d0       	rcall	.+0      	; 0x984e <sounderOn_Logger+0x6>
    984e:	cd b7       	in	r28, 0x3d	; 61
    9850:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9852:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9856:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9858:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    985c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    985e:	89 81       	ldd	r24, Y+1	; 0x01
    9860:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_SOUNDERONFUNCTION, currentindex);
    9864:	83 ec       	ldi	r24, 0xC3	; 195
    9866:	92 e0       	ldi	r25, 0x02	; 2
    9868:	6a 81       	ldd	r22, Y+2	; 0x02
    986a:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    sounderOn();
    986e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <sounderOn>
}
    9872:	0f 90       	pop	r0
    9874:	0f 90       	pop	r0
    9876:	cf 91       	pop	r28
    9878:	df 91       	pop	r29
    987a:	08 95       	ret

0000987c <sounderOff_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void sounderOff_Logger()
{
    987c:	df 93       	push	r29
    987e:	cf 93       	push	r28
    9880:	00 d0       	rcall	.+0      	; 0x9882 <sounderOff_Logger+0x6>
    9882:	cd b7       	in	r28, 0x3d	; 61
    9884:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9886:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    988a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    988c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9890:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9892:	89 81       	ldd	r24, Y+1	; 0x01
    9894:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_SOUNDEROFFFUNCTION, currentindex);
    9898:	84 ec       	ldi	r24, 0xC4	; 196
    989a:	92 e0       	ldi	r25, 0x02	; 2
    989c:	6a 81       	ldd	r22, Y+2	; 0x02
    989e:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    sounderOff();
    98a2:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <sounderOff>
}
    98a6:	0f 90       	pop	r0
    98a8:	0f 90       	pop	r0
    98aa:	cf 91       	pop	r28
    98ac:	df 91       	pop	r29
    98ae:	08 95       	ret

000098b0 <getEEPROMHandleInfo>:

  

//-------------------------------------------------------------------------
void getEEPROMHandleInfo()
{
    98b0:	df 93       	push	r29
    98b2:	cf 93       	push	r28
    98b4:	00 d0       	rcall	.+0      	; 0x98b6 <getEEPROMHandleInfo+0x6>
    98b6:	cd b7       	in	r28, 0x3d	; 61
    98b8:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getGenericStorageNodeAddress();
    98ba:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <getGenericStorageNodeAddress>
    98be:	9a 83       	std	Y+2, r25	; 0x02
    98c0:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    98c2:	89 81       	ldd	r24, Y+1	; 0x01
    98c4:	9a 81       	ldd	r25, Y+2	; 0x02
    98c6:	48 2f       	mov	r20, r24
    98c8:	59 2f       	mov	r21, r25
}
    98ca:	0f 90       	pop	r0
    98cc:	0f 90       	pop	r0
    98ce:	cf 91       	pop	r28
    98d0:	df 91       	pop	r29
    98d2:	08 95       	ret

000098d4 <getEEPROMHandleInfo_Logger>:

//-------------------------------------------------------------------------
void getEEPROMHandleInfo_Logger()
{
    98d4:	df 93       	push	r29
    98d6:	cf 93       	push	r28
    98d8:	00 d0       	rcall	.+0      	; 0x98da <getEEPROMHandleInfo_Logger+0x6>
    98da:	cd b7       	in	r28, 0x3d	; 61
    98dc:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    98de:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    98e2:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    98e4:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    98e8:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    98ea:	89 81       	ldd	r24, Y+1	; 0x01
    98ec:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTEEPROMHANDLEADDRESS, currentindex);
    98f0:	85 ec       	ldi	r24, 0xC5	; 197
    98f2:	92 e0       	ldi	r25, 0x02	; 2
    98f4:	6a 81       	ldd	r22, Y+2	; 0x02
    98f6:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    getEEPROMHandleInfo();
    98fa:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <getEEPROMHandleInfo>
}
    98fe:	0f 90       	pop	r0
    9900:	0f 90       	pop	r0
    9902:	cf 91       	pop	r28
    9904:	df 91       	pop	r29
    9906:	08 95       	ret

00009908 <readEEPROMTask>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void readEEPROMTask()
{
    9908:	df 93       	push	r29
    990a:	cf 93       	push	r28
    990c:	cd b7       	in	r28, 0x3d	; 61
    990e:	de b7       	in	r29, 0x3e	; 62
    genericReadTask();
    9910:	0e 94 df 46 	call	0x8dbe	; 0x8dbe <genericReadTask>
}
    9914:	cf 91       	pop	r28
    9916:	df 91       	pop	r29
    9918:	08 95       	ret

0000991a <readEEPROMTask_Logger>:

//-------------------------------------------------------------------------
void readEEPROMTask_Logger()
{
    991a:	df 93       	push	r29
    991c:	cf 93       	push	r28
    991e:	00 d0       	rcall	.+0      	; 0x9920 <readEEPROMTask_Logger+0x6>
    9920:	cd b7       	in	r28, 0x3d	; 61
    9922:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9924:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9928:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    992a:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    992e:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9930:	89 81       	ldd	r24, Y+1	; 0x01
    9932:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_READFROMEEPROM, currentindex);
    9936:	86 ec       	ldi	r24, 0xC6	; 198
    9938:	92 e0       	ldi	r25, 0x02	; 2
    993a:	6a 81       	ldd	r22, Y+2	; 0x02
    993c:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    readEEPROMTask();
    9940:	0e 94 84 4c 	call	0x9908	; 0x9908 <readEEPROMTask>
}
    9944:	0f 90       	pop	r0
    9946:	0f 90       	pop	r0
    9948:	cf 91       	pop	r28
    994a:	df 91       	pop	r29
    994c:	08 95       	ret

0000994e <writeEEPROMTask>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void writeEEPROMTask()
{
    994e:	df 93       	push	r29
    9950:	cf 93       	push	r28
    9952:	cd b7       	in	r28, 0x3d	; 61
    9954:	de b7       	in	r29, 0x3e	; 62
    genericWriteTask();
    9956:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <genericWriteTask>
}
    995a:	cf 91       	pop	r28
    995c:	df 91       	pop	r29
    995e:	08 95       	ret

00009960 <writeEEPROMTask_Logger>:

//-------------------------------------------------------------------------
void writeEEPROMTask_Logger()
{
    9960:	df 93       	push	r29
    9962:	cf 93       	push	r28
    9964:	00 d0       	rcall	.+0      	; 0x9966 <writeEEPROMTask_Logger+0x6>
    9966:	cd b7       	in	r28, 0x3d	; 61
    9968:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    996a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    996e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9970:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9974:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9976:	89 81       	ldd	r24, Y+1	; 0x01
    9978:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_WRITETOEEPROM, currentindex);
    997c:	87 ec       	ldi	r24, 0xC7	; 199
    997e:	92 e0       	ldi	r25, 0x02	; 2
    9980:	6a 81       	ldd	r22, Y+2	; 0x02
    9982:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    writeEEPROMTask();
    9986:	0e 94 a7 4c 	call	0x994e	; 0x994e <writeEEPROMTask>
}
    998a:	0f 90       	pop	r0
    998c:	0f 90       	pop	r0
    998e:	cf 91       	pop	r28
    9990:	df 91       	pop	r29
    9992:	08 95       	ret

00009994 <getFilePathAddress_avr>:
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------
void getFilePathAddress_avr()
{
    9994:	df 93       	push	r29
    9996:	cf 93       	push	r28
    9998:	00 d0       	rcall	.+0      	; 0x999a <getFilePathAddress_avr+0x6>
    999a:	cd b7       	in	r28, 0x3d	; 61
    999c:	de b7       	in	r29, 0x3e	; 62
    void *filepathaddr;

    filepathaddr = getFilePathAddress();
    999e:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <getFilePathAddress>
    99a2:	9a 83       	std	Y+2, r25	; 0x02
    99a4:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    99a6:	89 81       	ldd	r24, Y+1	; 0x01
    99a8:	9a 81       	ldd	r25, Y+2	; 0x02
    99aa:	48 2f       	mov	r20, r24
    99ac:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (filepathaddr));
}
    99ae:	0f 90       	pop	r0
    99b0:	0f 90       	pop	r0
    99b2:	cf 91       	pop	r28
    99b4:	df 91       	pop	r29
    99b6:	08 95       	ret

000099b8 <getFilePathAddress_Logger>:

//-------------------------------------------------------------------------
void getFilePathAddress_Logger()
{
    99b8:	df 93       	push	r29
    99ba:	cf 93       	push	r28
    99bc:	00 d0       	rcall	.+0      	; 0x99be <getFilePathAddress_Logger+0x6>
    99be:	cd b7       	in	r28, 0x3d	; 61
    99c0:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    99c2:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    99c6:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    99c8:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    99cc:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    99ce:	89 81       	ldd	r24, Y+1	; 0x01
    99d0:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETFILEPATHADDR, currentindex);
    99d4:	81 e2       	ldi	r24, 0x21	; 33
    99d6:	93 e0       	ldi	r25, 0x03	; 3
    99d8:	6a 81       	ldd	r22, Y+2	; 0x02
    99da:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    getFilePathAddress_avr();
    99de:	0e 94 ca 4c 	call	0x9994	; 0x9994 <getFilePathAddress_avr>
}
    99e2:	0f 90       	pop	r0
    99e4:	0f 90       	pop	r0
    99e6:	cf 91       	pop	r28
    99e8:	df 91       	pop	r29
    99ea:	08 95       	ret

000099ec <getFileModeAddress_avr>:
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
void getFileModeAddress_avr()
{
    99ec:	df 93       	push	r29
    99ee:	cf 93       	push	r28
    99f0:	00 d0       	rcall	.+0      	; 0x99f2 <getFileModeAddress_avr+0x6>
    99f2:	cd b7       	in	r28, 0x3d	; 61
    99f4:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getFileModeAddress();
    99f6:	0e 94 f1 46 	call	0x8de2	; 0x8de2 <getFileModeAddress>
    99fa:	9a 83       	std	Y+2, r25	; 0x02
    99fc:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    99fe:	89 81       	ldd	r24, Y+1	; 0x01
    9a00:	9a 81       	ldd	r25, Y+2	; 0x02
    9a02:	48 2f       	mov	r20, r24
    9a04:	59 2f       	mov	r21, r25
}
    9a06:	0f 90       	pop	r0
    9a08:	0f 90       	pop	r0
    9a0a:	cf 91       	pop	r28
    9a0c:	df 91       	pop	r29
    9a0e:	08 95       	ret

00009a10 <getFileModeAddress_Logger>:

//-------------------------------------------------------------------------
void getFileModeAddress_Logger()
{
    9a10:	df 93       	push	r29
    9a12:	cf 93       	push	r28
    9a14:	00 d0       	rcall	.+0      	; 0x9a16 <getFileModeAddress_Logger+0x6>
    9a16:	cd b7       	in	r28, 0x3d	; 61
    9a18:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9a1a:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9a1e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9a20:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9a24:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9a26:	89 81       	ldd	r24, Y+1	; 0x01
    9a28:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETFILEMODEADDR, currentindex);
    9a2c:	82 e2       	ldi	r24, 0x22	; 34
    9a2e:	93 e0       	ldi	r25, 0x03	; 3
    9a30:	6a 81       	ldd	r22, Y+2	; 0x02
    9a32:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    getFileModeAddress_avr();
    9a36:	0e 94 f6 4c 	call	0x99ec	; 0x99ec <getFileModeAddress_avr>
}
    9a3a:	0f 90       	pop	r0
    9a3c:	0f 90       	pop	r0
    9a3e:	cf 91       	pop	r28
    9a40:	df 91       	pop	r29
    9a42:	08 95       	ret

00009a44 <openFileTask_Logger>:
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
void openFileTask_Logger()
{
    9a44:	df 93       	push	r29
    9a46:	cf 93       	push	r28
    9a48:	00 d0       	rcall	.+0      	; 0x9a4a <openFileTask_Logger+0x6>
    9a4a:	cd b7       	in	r28, 0x3d	; 61
    9a4c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9a4e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9a52:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9a54:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9a58:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9a5a:	89 81       	ldd	r24, Y+1	; 0x01
    9a5c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_OPENFILESYSCALL, currentindex);
    9a60:	83 e2       	ldi	r24, 0x23	; 35
    9a62:	93 e0       	ldi	r25, 0x03	; 3
    9a64:	6a 81       	ldd	r22, Y+2	; 0x02
    9a66:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    openFileTask();
    9a6a:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <openFileTask>
}
    9a6e:	0f 90       	pop	r0
    9a70:	0f 90       	pop	r0
    9a72:	cf 91       	pop	r28
    9a74:	df 91       	pop	r29
    9a76:	08 95       	ret

00009a78 <closeFileTask_Logger>:



//-------------------------------------------------------------------------
void closeFileTask_Logger()
{
    9a78:	df 93       	push	r29
    9a7a:	cf 93       	push	r28
    9a7c:	00 d0       	rcall	.+0      	; 0x9a7e <closeFileTask_Logger+0x6>
    9a7e:	cd b7       	in	r28, 0x3d	; 61
    9a80:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9a82:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9a86:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9a88:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9a8c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9a8e:	89 81       	ldd	r24, Y+1	; 0x01
    9a90:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_CLOSEFILESYSCALL, currentindex);
    9a94:	84 e2       	ldi	r24, 0x24	; 36
    9a96:	93 e0       	ldi	r25, 0x03	; 3
    9a98:	6a 81       	ldd	r22, Y+2	; 0x02
    9a9a:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    closeFileTask();
    9a9e:	0e 94 4a 47 	call	0x8e94	; 0x8e94 <closeFileTask>
}
    9aa2:	0f 90       	pop	r0
    9aa4:	0f 90       	pop	r0
    9aa6:	cf 91       	pop	r28
    9aa8:	df 91       	pop	r29
    9aaa:	08 95       	ret

00009aac <readFileTask_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void readFileTask_Logger()
{
    9aac:	df 93       	push	r29
    9aae:	cf 93       	push	r28
    9ab0:	00 d0       	rcall	.+0      	; 0x9ab2 <readFileTask_Logger+0x6>
    9ab2:	cd b7       	in	r28, 0x3d	; 61
    9ab4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9ab6:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9aba:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9abc:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9ac0:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9ac2:	89 81       	ldd	r24, Y+1	; 0x01
    9ac4:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_READFILESYSCALL, currentindex);
    9ac8:	85 e2       	ldi	r24, 0x25	; 37
    9aca:	93 e0       	ldi	r25, 0x03	; 3
    9acc:	6a 81       	ldd	r22, Y+2	; 0x02
    9ace:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    readFileTask();
    9ad2:	0e 94 2e 47 	call	0x8e5c	; 0x8e5c <readFileTask>
}
    9ad6:	0f 90       	pop	r0
    9ad8:	0f 90       	pop	r0
    9ada:	cf 91       	pop	r28
    9adc:	df 91       	pop	r29
    9ade:	08 95       	ret

00009ae0 <writeFileTask_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void writeFileTask_Logger()
{
    9ae0:	df 93       	push	r29
    9ae2:	cf 93       	push	r28
    9ae4:	00 d0       	rcall	.+0      	; 0x9ae6 <writeFileTask_Logger+0x6>
    9ae6:	cd b7       	in	r28, 0x3d	; 61
    9ae8:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9aea:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9aee:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9af0:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9af4:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9af6:	89 81       	ldd	r24, Y+1	; 0x01
    9af8:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_WRITEFILESYSCALL, currentindex);
    9afc:	86 e2       	ldi	r24, 0x26	; 38
    9afe:	93 e0       	ldi	r25, 0x03	; 3
    9b00:	6a 81       	ldd	r22, Y+2	; 0x02
    9b02:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    writeFileTask();
    9b06:	0e 94 12 47 	call	0x8e24	; 0x8e24 <writeFileTask>
}
    9b0a:	0f 90       	pop	r0
    9b0c:	0f 90       	pop	r0
    9b0e:	cf 91       	pop	r28
    9b10:	df 91       	pop	r29
    9b12:	08 95       	ret

00009b14 <seekFileTask_Logger>:
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void seekFileTask_Logger()
{
    9b14:	df 93       	push	r29
    9b16:	cf 93       	push	r28
    9b18:	00 d0       	rcall	.+0      	; 0x9b1a <seekFileTask_Logger+0x6>
    9b1a:	cd b7       	in	r28, 0x3d	; 61
    9b1c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9b1e:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9b22:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9b24:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <getThreadIndexAddress>
    9b28:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9b2a:	89 81       	ldd	r24, Y+1	; 0x01
    9b2c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    addTrace(TRACE_SYSCALL_SEEKFILESYSCALL, currentindex);
    9b30:	87 e2       	ldi	r24, 0x27	; 39
    9b32:	93 e0       	ldi	r25, 0x03	; 3
    9b34:	6a 81       	ldd	r22, Y+2	; 0x02
    9b36:	0e 94 ce 4d 	call	0x9b9c	; 0x9b9c <addTrace>
    seekFileTask();
    9b3a:	0e 94 f4 46 	call	0x8de8	; 0x8de8 <seekFileTask>
}
    9b3e:	0f 90       	pop	r0
    9b40:	0f 90       	pop	r0
    9b42:	cf 91       	pop	r28
    9b44:	df 91       	pop	r29
    9b46:	08 95       	ret

00009b48 <getCurrentThreadAddress>:

  addr = (thread **) &current_thread;
  return addr;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
  // asm volatile("ret"::); 
}
    9b48:	8c e8       	ldi	r24, 0x8C	; 140
    9b4a:	95 e0       	ldi	r25, 0x05	; 5
    9b4c:	08 95       	ret

00009b4e <getThreadTableStart>:
  addr = &thread_table[0];
  
  return addr;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
  // asm volatile("ret"::); 
}
    9b4e:	8e e8       	ldi	r24, 0x8E	; 142
    9b50:	95 e0       	ldi	r25, 0x05	; 5
    9b52:	08 95       	ret

00009b54 <enabletracingfunction>:
uint32_t timestamp; 


void enabletracingfunction()
{
    enabletracing = 1;
    9b54:	81 e0       	ldi	r24, 0x01	; 1
    9b56:	80 93 1d 0a 	sts	0x0A1D, r24
}
    9b5a:	08 95       	ret

00009b5c <disabletracingfunction>:

//-------------------------------------------------------------------------
void disabletracingfunction()
{
    enabletracing = 0;
    9b5c:	10 92 1d 0a 	sts	0x0A1D, r1
}
    9b60:	08 95       	ret

00009b62 <initTrace>:

//-------------------------------------------------------------------------
void initTrace()
{
    internaltracingblock.externaladdtracefp = NULL;
    9b62:	10 92 1a 0a 	sts	0x0A1A, r1
    9b66:	10 92 19 0a 	sts	0x0A19, r1
    internaltracingblock.externalapptracefp = NULL;
    9b6a:	10 92 1c 0a 	sts	0x0A1C, r1
    9b6e:	10 92 1b 0a 	sts	0x0A1B, r1
    enabletracing = 0;
    9b72:	10 92 1d 0a 	sts	0x0A1D, r1
}
    9b76:	08 95       	ret

00009b78 <apptracepointfunction>:
}

void apptracepointfunction() __attribute__ ((naked));
void apptracepointfunction()
{
    asm volatile ("push r24"::);
    9b78:	8f 93       	push	r24
    asm volatile ("push r25"::);
    9b7a:	9f 93       	push	r25
    asm volatile ("push r28"::);
    9b7c:	cf 93       	push	r28
    asm volatile ("push r29"::);
    9b7e:	df 93       	push	r29

    if ((internaltracingblock.externalapptracefp != NULL) && (enabletracing
    9b80:	e0 91 1b 0a 	lds	r30, 0x0A1B
    9b84:	f0 91 1c 0a 	lds	r31, 0x0A1C
    9b88:	30 97       	sbiw	r30, 0x00	; 0
    9b8a:	21 f0       	breq	.+8      	; 0x9b94 <apptracepointfunction+0x1c>
    9b8c:	80 91 1d 0a 	lds	r24, 0x0A1D
    9b90:	81 30       	cpi	r24, 0x01	; 1
    9b92:	01 f0       	breq	.+0      	; 0x9b94 <apptracepointfunction+0x1c>
                                                              == 1))
    {
        internaltracingblock.externalapptracefp();
    9b94:	09 95       	icall

00009b96 <getTracingBlockAddress>:

//-------------------------------------------------------------------------
void *getTracingBlockAddress()
{
    return (void *)&internaltracingblock;
}
    9b96:	82 e1       	ldi	r24, 0x12	; 18
    9b98:	9a e0       	ldi	r25, 0x0A	; 10
    9b9a:	08 95       	ret

00009b9c <addTrace>:
    enabletracing = 0;
}


void addTrace(uint16_t traceid, uint8_t threadid)
{
    9b9c:	1f 93       	push	r17
    9b9e:	cf 93       	push	r28
    9ba0:	df 93       	push	r29
    9ba2:	ec 01       	movw	r28, r24
    9ba4:	16 2f       	mov	r17, r22
	



    
	  if (threadid==1)
    9ba6:	61 30       	cpi	r22, 0x01	; 1
    9ba8:	11 f1       	breq	.+68     	; 0x9bee <addTrace+0x52>
	   return; 
	  timestamp = getCurrentResolution();
    9baa:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <getCurrentResolution>
    9bae:	60 93 0e 0a 	sts	0x0A0E, r22
    9bb2:	70 93 0f 0a 	sts	0x0A0F, r23
    9bb6:	80 93 10 0a 	sts	0x0A10, r24
    9bba:	90 93 11 0a 	sts	0x0A11, r25
    internaltracingblock.internaleventid = traceid;
    9bbe:	d0 93 13 0a 	sts	0x0A13, r29
    9bc2:	c0 93 12 0a 	sts	0x0A12, r28
    internaltracingblock.threadid = threadid;
    9bc6:	10 93 14 0a 	sts	0x0A14, r17
    internaltracingblock.timestamp = timestamp; 
    9bca:	60 93 15 0a 	sts	0x0A15, r22
    9bce:	70 93 16 0a 	sts	0x0A16, r23
    9bd2:	80 93 17 0a 	sts	0x0A17, r24
    9bd6:	90 93 18 0a 	sts	0x0A18, r25
    if ((internaltracingblock.externaladdtracefp != NULL) && (enabletracing
    9bda:	e0 91 19 0a 	lds	r30, 0x0A19
    9bde:	f0 91 1a 0a 	lds	r31, 0x0A1A
    9be2:	30 97       	sbiw	r30, 0x00	; 0
    9be4:	21 f0       	breq	.+8      	; 0x9bee <addTrace+0x52>
    9be6:	80 91 1d 0a 	lds	r24, 0x0A1D
    9bea:	81 30       	cpi	r24, 0x01	; 1
    9bec:	21 f0       	breq	.+8      	; 0x9bf6 <addTrace+0x5a>
    	  	  
	  //lib_printf_uinteger32(traceid);
	  //lib_printf_uinteger32(threadid);
    internaltracingblock.externaladdtracefp();
    }
}
    9bee:	df 91       	pop	r29
    9bf0:	cf 91       	pop	r28
    9bf2:	1f 91       	pop	r17
    9bf4:	08 95       	ret
    {
    	
    	  	  
	  //lib_printf_uinteger32(traceid);
	  //lib_printf_uinteger32(threadid);
    internaltracingblock.externaladdtracefp();
    9bf6:	09 95       	icall
    9bf8:	fa cf       	rjmp	.-12     	; 0x9bee <addTrace+0x52>

00009bfa <lib_get_accy>:
   return (*current_thread)->data.adcstate.adcreading;  
}


int lib_get_accy()
{
    9bfa:	0f 93       	push	r16
    9bfc:	1f 93       	push	r17
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_ACCY;
   current_thread = lib_get_current_thread();    
    9bfe:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    9c02:	8c 01       	movw	r16, r24
   fp(); 
    9c04:	e4 e1       	ldi	r30, 0x14	; 20
    9c06:	fd ee       	ldi	r31, 0xED	; 237
    9c08:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    9c0a:	d8 01       	movw	r26, r16
    9c0c:	ed 91       	ld	r30, X+
    9c0e:	fc 91       	ld	r31, X
    9c10:	25 8d       	ldd	r18, Z+29	; 0x1d
    9c12:	36 8d       	ldd	r19, Z+30	; 0x1e
}
    9c14:	c9 01       	movw	r24, r18
    9c16:	1f 91       	pop	r17
    9c18:	0f 91       	pop	r16
    9c1a:	08 95       	ret

00009c1c <lib_get_accx>:
   return (*current_thread)->data.adcstate.adcreading;  
}


int lib_get_accx()
{
    9c1c:	0f 93       	push	r16
    9c1e:	1f 93       	push	r17
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_ACCX;
   current_thread = lib_get_current_thread();    
    9c20:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    9c24:	8c 01       	movw	r16, r24
   fp(); 
    9c26:	e0 e1       	ldi	r30, 0x10	; 16
    9c28:	fd ee       	ldi	r31, 0xED	; 237
    9c2a:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    9c2c:	d8 01       	movw	r26, r16
    9c2e:	ed 91       	ld	r30, X+
    9c30:	fc 91       	ld	r31, X
    9c32:	25 8d       	ldd	r18, Z+29	; 0x1d
    9c34:	36 8d       	ldd	r19, Z+30	; 0x1e
}
    9c36:	c9 01       	movw	r24, r18
    9c38:	1f 91       	pop	r17
    9c3a:	0f 91       	pop	r16
    9c3c:	08 95       	ret

00009c3e <lib_get_temp>:
  
}


int lib_get_temp()
{
    9c3e:	0f 93       	push	r16
    9c40:	1f 93       	push	r17
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_TEMP;
   current_thread = lib_get_current_thread();    
    9c42:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    9c46:	8c 01       	movw	r16, r24
   fp(); 
    9c48:	e4 e0       	ldi	r30, 0x04	; 4
    9c4a:	fd ee       	ldi	r31, 0xED	; 237
    9c4c:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    9c4e:	d8 01       	movw	r26, r16
    9c50:	ed 91       	ld	r30, X+
    9c52:	fc 91       	ld	r31, X
    9c54:	25 8d       	ldd	r18, Z+29	; 0x1d
    9c56:	36 8d       	ldd	r19, Z+30	; 0x1e

}
    9c58:	c9 01       	movw	r24, r18
    9c5a:	1f 91       	pop	r17
    9c5c:	0f 91       	pop	r16
    9c5e:	08 95       	ret

00009c60 <lib_get_light>:
#include "libthread.h"
#include "libsystem.h"
#include "../types/types.h"

int lib_get_light()
{
    9c60:	0f 93       	push	r16
    9c62:	1f 93       	push	r17
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_LIGHT;
   current_thread = lib_get_current_thread();    
    9c64:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    9c68:	8c 01       	movw	r16, r24
   fp(); 
    9c6a:	e0 e0       	ldi	r30, 0x00	; 0
    9c6c:	fd ee       	ldi	r31, 0xED	; 237
    9c6e:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    9c70:	d8 01       	movw	r26, r16
    9c72:	ed 91       	ld	r30, X+
    9c74:	fc 91       	ld	r31, X
    9c76:	25 8d       	ldd	r18, Z+29	; 0x1d
    9c78:	36 8d       	ldd	r19, Z+30	; 0x1e
  
}
    9c7a:	c9 01       	movw	r24, r18
    9c7c:	1f 91       	pop	r17
    9c7e:	0f 91       	pop	r16
    9c80:	08 95       	ret

00009c82 <lib_get_magy>:

}


int lib_get_magy()
{
    9c82:	ff 92       	push	r15
    9c84:	0f 93       	push	r16
    9c86:	1f 93       	push	r17
   lib_thread** current_thread; 
  {_atomic_t test = _atomic_start();
    9c88:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9c8c:	f8 2e       	mov	r15, r24
   void (*fp)() = (void (*)(void))ADC_READ_MAGY;
   current_thread = lib_get_current_thread();    
    9c8e:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    9c92:	8c 01       	movw	r16, r24
   fp(); 
    9c94:	ec e0       	ldi	r30, 0x0C	; 12
    9c96:	fd ee       	ldi	r31, 0xED	; 237
    9c98:	09 95       	icall
   
      
   _atomic_end(test);
    9c9a:	8f 2d       	mov	r24, r15
    9c9c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
  }
   return (*current_thread)->data.adcstate.adcreading;  
    9ca0:	d8 01       	movw	r26, r16
    9ca2:	ed 91       	ld	r30, X+
    9ca4:	fc 91       	ld	r31, X
    9ca6:	25 8d       	ldd	r18, Z+29	; 0x1d
    9ca8:	36 8d       	ldd	r19, Z+30	; 0x1e
}
    9caa:	c9 01       	movw	r24, r18
    9cac:	1f 91       	pop	r17
    9cae:	0f 91       	pop	r16
    9cb0:	ff 90       	pop	r15
    9cb2:	08 95       	ret

00009cb4 <lib_get_magx>:

}


int lib_get_magx()
{
    9cb4:	ff 92       	push	r15
    9cb6:	0f 93       	push	r16
    9cb8:	1f 93       	push	r17
   lib_thread** current_thread; 
   
   {_atomic_t test = _atomic_start();
    9cba:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9cbe:	f8 2e       	mov	r15, r24
   
   void (*fp)() = (void (*)(void))ADC_READ_MAGX;
   current_thread = lib_get_current_thread();    
    9cc0:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    9cc4:	8c 01       	movw	r16, r24
   fp(); 
    9cc6:	e8 e0       	ldi	r30, 0x08	; 8
    9cc8:	fd ee       	ldi	r31, 0xED	; 237
    9cca:	09 95       	icall
   
   _atomic_end(test);
    9ccc:	8f 2d       	mov	r24, r15
    9cce:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
  }
   return (*current_thread)->data.adcstate.adcreading;  
    9cd2:	d8 01       	movw	r26, r16
    9cd4:	ed 91       	ld	r30, X+
    9cd6:	fc 91       	ld	r31, X
    9cd8:	25 8d       	ldd	r18, Z+29	; 0x1d
    9cda:	36 8d       	ldd	r19, Z+30	; 0x1e

}
    9cdc:	c9 01       	movw	r24, r18
    9cde:	1f 91       	pop	r17
    9ce0:	0f 91       	pop	r16
    9ce2:	ff 90       	pop	r15
    9ce4:	08 95       	ret

00009ce6 <getCurrentEEPROMInfo>:
{
   genericByteStorageHandle *currenteeprominfoaddr;

   void (*getaddrfp)(void) = (void (*)(void))GET_EEPROM_STRUCTURE_HANDLE;

   asm volatile("push r20" "\n\t"
    9ce6:	4f 93       	push	r20
    9ce8:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9cea:	e0 e8       	ldi	r30, 0x80	; 128
    9cec:	fd ee       	ldi	r31, 0xED	; 237
    9cee:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9cf0:	24 2f       	mov	r18, r20
    9cf2:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (currenteeprominfoaddr)
				 :
                );
    asm volatile("pop r21" "\n\t"
    9cf4:	5f 91       	pop	r21
    9cf6:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currenteeprominfoaddr;
}
    9cf8:	c9 01       	movw	r24, r18
    9cfa:	08 95       	ret

00009cfc <lib_writeToEEPROM>:


//Turn off the interrupt, access the location, and use system call to implement poll based implementation provided by avr libc

void lib_writeToEEPROM(uint16_t addr, uint16_t nBytes, uint8_t *buffer)
{
    9cfc:	bf 92       	push	r11
    9cfe:	cf 92       	push	r12
    9d00:	df 92       	push	r13
    9d02:	ef 92       	push	r14
    9d04:	ff 92       	push	r15
    9d06:	0f 93       	push	r16
    9d08:	1f 93       	push	r17
    9d0a:	8c 01       	movw	r16, r24
    9d0c:	7b 01       	movw	r14, r22
    9d0e:	6a 01       	movw	r12, r20

	_atomic_t currentatomic;

	currentatomic = _atomic_start();
    9d10:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9d14:	b8 2e       	mov	r11, r24

    genericByteStorageHandle *eeprominfoaddr;
    eeprominfoaddr = getCurrentEEPROMInfo();
    9d16:	0e 94 73 4e 	call	0x9ce6	; 0x9ce6 <getCurrentEEPROMInfo>
    9d1a:	fc 01       	movw	r30, r24

	void (*getaddrfp)(void) = (void (*)(void))WRITE_EEPROM_TASK;

    eeprominfoaddr-> addr = addr;
    9d1c:	11 83       	std	Z+1, r17	; 0x01
    9d1e:	00 83       	st	Z, r16
	  eeprominfoaddr-> nBytes = nBytes;
    9d20:	f3 82       	std	Z+3, r15	; 0x03
    9d22:	e2 82       	std	Z+2, r14	; 0x02
	  eeprominfoaddr-> buffer = buffer;
    9d24:	d5 82       	std	Z+5, r13	; 0x05
    9d26:	c4 82       	std	Z+4, r12	; 0x04


    getaddrfp();
    9d28:	e8 e8       	ldi	r30, 0x88	; 136
    9d2a:	fd ee       	ldi	r31, 0xED	; 237
    9d2c:	09 95       	icall

	_atomic_end(currentatomic);
    9d2e:	8b 2d       	mov	r24, r11
    9d30:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>


}
    9d34:	1f 91       	pop	r17
    9d36:	0f 91       	pop	r16
    9d38:	ff 90       	pop	r15
    9d3a:	ef 90       	pop	r14
    9d3c:	df 90       	pop	r13
    9d3e:	cf 90       	pop	r12
    9d40:	bf 90       	pop	r11
    9d42:	08 95       	ret

00009d44 <lib_read_from_eeprom>:


//Turn off the interrupt, access the location, and use system call to implement poll based imlementation provided by avr libc

void lib_read_from_eeprom(uint16_t addr, uint16_t nBytes, uint8_t *buffer)
{
    9d44:	bf 92       	push	r11
    9d46:	cf 92       	push	r12
    9d48:	df 92       	push	r13
    9d4a:	ef 92       	push	r14
    9d4c:	ff 92       	push	r15
    9d4e:	0f 93       	push	r16
    9d50:	1f 93       	push	r17
    9d52:	8c 01       	movw	r16, r24
    9d54:	7b 01       	movw	r14, r22
    9d56:	6a 01       	movw	r12, r20


	_atomic_t currentatomic;

	currentatomic = _atomic_start();
    9d58:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    9d5c:	b8 2e       	mov	r11, r24


    genericByteStorageHandle *eeprominfoaddr;
    eeprominfoaddr = getCurrentEEPROMInfo();
    9d5e:	0e 94 73 4e 	call	0x9ce6	; 0x9ce6 <getCurrentEEPROMInfo>
    9d62:	fc 01       	movw	r30, r24

	void (*getaddrfp)(void) = (void (*)(void))READ_EEPROM_TASK;

    eeprominfoaddr-> addr = addr;
    9d64:	11 83       	std	Z+1, r17	; 0x01
    9d66:	00 83       	st	Z, r16
   	eeprominfoaddr-> nBytes = nBytes;
    9d68:	f3 82       	std	Z+3, r15	; 0x03
    9d6a:	e2 82       	std	Z+2, r14	; 0x02
   	eeprominfoaddr-> buffer = buffer;
    9d6c:	d5 82       	std	Z+5, r13	; 0x05
    9d6e:	c4 82       	std	Z+4, r12	; 0x04


    getaddrfp();
    9d70:	e4 e8       	ldi	r30, 0x84	; 132
    9d72:	fd ee       	ldi	r31, 0xED	; 237
    9d74:	09 95       	icall

	_atomic_end(currentatomic);
    9d76:	8b 2d       	mov	r24, r11
    9d78:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    9d7c:	1f 91       	pop	r17
    9d7e:	0f 91       	pop	r16
    9d80:	ff 90       	pop	r15
    9d82:	ef 90       	pop	r14
    9d84:	df 90       	pop	r13
    9d86:	cf 90       	pop	r12
    9d88:	bf 90       	pop	r11
    9d8a:	08 95       	ret

00009d8c <lib_get_file_path_address>:

char *lib_get_file_path_address()
{
   char *pathaddr;
   void (*getaddrfp)(void) = (void (*)(void))GET_FILE_PATH_ADDRESS;
   asm volatile("push r20" "\n\t"
    9d8c:	4f 93       	push	r20
    9d8e:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9d90:	e0 e0       	ldi	r30, 0x00	; 0
    9d92:	fe ee       	ldi	r31, 0xEE	; 238
    9d94:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9d96:	24 2f       	mov	r18, r20
    9d98:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (pathaddr)
				 :);
    asm volatile("pop r21" "\n\t"
    9d9a:	5f 91       	pop	r21
    9d9c:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
    return pathaddr;
}
    9d9e:	c9 01       	movw	r24, r18
    9da0:	08 95       	ret

00009da2 <lib_get_file_mode_address>:
char *lib_get_file_mode_address()

{
   char *modeaddr;
   void (*getaddrfp)(void) = (void (*)(void))GET_FILE_MODE_ADDRESS;
   asm volatile("push r20" "\n\t"
    9da2:	4f 93       	push	r20
    9da4:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9da6:	e4 e0       	ldi	r30, 0x04	; 4
    9da8:	fe ee       	ldi	r31, 0xEE	; 238
    9daa:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9dac:	24 2f       	mov	r18, r20
    9dae:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (modeaddr)
				 :);
    asm volatile("pop r21" "\n\t"
    9db0:	5f 91       	pop	r21
    9db2:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
    return modeaddr;
}
    9db4:	c9 01       	movw	r24, r18
    9db6:	08 95       	ret

00009db8 <lib_open_file_syscall>:


void lib_open_file_syscall()
{
 void (*filefp)() = (void (*)(void))OPEN_FILE_SYSCALL;
 filefp();
    9db8:	e8 e0       	ldi	r30, 0x08	; 8
    9dba:	fe ee       	ldi	r31, 0xEE	; 238
    9dbc:	09 95       	icall
}
    9dbe:	08 95       	ret

00009dc0 <lib_close_file_syscall>:


void lib_close_file_syscall()
{
 void (*filefp)() = (void (*)(void))CLOSE_FILE_SYSCALL;
 filefp();
    9dc0:	ec e0       	ldi	r30, 0x0C	; 12
    9dc2:	fe ee       	ldi	r31, 0xEE	; 238
    9dc4:	09 95       	icall
}
    9dc6:	08 95       	ret

00009dc8 <lib_read_file_syscall>:


void lib_read_file_syscall()
{
 void (*filefp)() = (void (*)(void))READ_FILE_SYSCALL;
 filefp();
    9dc8:	e0 e1       	ldi	r30, 0x10	; 16
    9dca:	fe ee       	ldi	r31, 0xEE	; 238
    9dcc:	09 95       	icall
}
    9dce:	08 95       	ret

00009dd0 <lib_write_file_syscall>:


void lib_write_file_syscall()
{
 void (*filefp)() = (void (*)(void))WRITE_FILE_SYSCALL;
 filefp();
    9dd0:	e4 e1       	ldi	r30, 0x14	; 20
    9dd2:	fe ee       	ldi	r31, 0xEE	; 238
    9dd4:	09 95       	icall
}
    9dd6:	08 95       	ret

00009dd8 <lib_seek_file_syscall>:


void lib_seek_file_syscall()
{
 void (*filefp)() = (void (*)(void))SEEK_FILE_SYSCALL;
 filefp();
    9dd8:	e8 e1       	ldi	r30, 0x18	; 24
    9dda:	fe ee       	ldi	r31, 0xEE	; 238
    9ddc:	09 95       	icall
}
    9dde:	08 95       	ret

00009de0 <lib_mfseek>:




void lib_mfseek(LIB_MYFILE *fp, int offset, int position)
{
    9de0:	af 92       	push	r10
    9de2:	bf 92       	push	r11
    9de4:	cf 92       	push	r12
    9de6:	df 92       	push	r13
    9de8:	ef 92       	push	r14
    9dea:	ff 92       	push	r15
    9dec:	0f 93       	push	r16
    9dee:	1f 93       	push	r17
    9df0:	b8 2e       	mov	r11, r24
    9df2:	a9 2e       	mov	r10, r25
    9df4:	7b 01       	movw	r14, r22
    9df6:	6a 01       	movw	r12, r20
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    9df8:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    9dfc:	8c 01       	movw	r16, r24
   currentthreadindex = lib_get_current_thread_index();
    9dfe:	0e 94 1a 55 	call	0xaa34	; 0xaa34 <lib_get_current_thread_index>

   (*current_thread)->filedata.fileseekstate.fileptr = (uint8_t*)fp;
    9e02:	d8 01       	movw	r26, r16
    9e04:	ed 91       	ld	r30, X+
    9e06:	fc 91       	ld	r31, X
    9e08:	11 97       	sbiw	r26, 0x01	; 1
    9e0a:	8b 2d       	mov	r24, r11
    9e0c:	9a 2d       	mov	r25, r10
    9e0e:	92 a3       	std	Z+34, r25	; 0x22
    9e10:	81 a3       	std	Z+33, r24	; 0x21
   (*current_thread)->filedata.fileseekstate.offset = offset;
    9e12:	ed 91       	ld	r30, X+
    9e14:	fc 91       	ld	r31, X
    9e16:	11 97       	sbiw	r26, 0x01	; 1
    9e18:	f4 a2       	std	Z+36, r15	; 0x24
    9e1a:	e3 a2       	std	Z+35, r14	; 0x23
   (*current_thread)->filedata.fileseekstate.position = position;
    9e1c:	ed 91       	ld	r30, X+
    9e1e:	fc 91       	ld	r31, X
    9e20:	d6 a2       	std	Z+38, r13	; 0x26
    9e22:	c5 a2       	std	Z+37, r12	; 0x25


void lib_seek_file_syscall()
{
 void (*filefp)() = (void (*)(void))SEEK_FILE_SYSCALL;
 filefp();
    9e24:	e8 e1       	ldi	r30, 0x18	; 24
    9e26:	fe ee       	ldi	r31, 0xEE	; 238
    9e28:	09 95       	icall

   return;



}
    9e2a:	1f 91       	pop	r17
    9e2c:	0f 91       	pop	r16
    9e2e:	ff 90       	pop	r15
    9e30:	ef 90       	pop	r14
    9e32:	df 90       	pop	r13
    9e34:	cf 90       	pop	r12
    9e36:	bf 90       	pop	r11
    9e38:	af 90       	pop	r10
    9e3a:	08 95       	ret

00009e3c <lib_mfwrite>:
}



void lib_mfwrite(LIB_MYFILE *fp, void *buffer, int nBytes)
{
    9e3c:	af 92       	push	r10
    9e3e:	bf 92       	push	r11
    9e40:	cf 92       	push	r12
    9e42:	df 92       	push	r13
    9e44:	ef 92       	push	r14
    9e46:	ff 92       	push	r15
    9e48:	0f 93       	push	r16
    9e4a:	1f 93       	push	r17
    9e4c:	f8 2e       	mov	r15, r24
    9e4e:	e9 2e       	mov	r14, r25
    9e50:	d6 2e       	mov	r13, r22
    9e52:	c7 2e       	mov	r12, r23
    9e54:	b4 2e       	mov	r11, r20
    9e56:	a5 2e       	mov	r10, r21
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    9e58:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    9e5c:	8c 01       	movw	r16, r24
   currentthreadindex = lib_get_current_thread_index();
    9e5e:	0e 94 1a 55 	call	0xaa34	; 0xaa34 <lib_get_current_thread_index>
  
     
  


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
    9e62:	d8 01       	movw	r26, r16
    9e64:	ed 91       	ld	r30, X+
    9e66:	fc 91       	ld	r31, X
    9e68:	11 97       	sbiw	r26, 0x01	; 1
    9e6a:	8f 2d       	mov	r24, r15
    9e6c:	9e 2d       	mov	r25, r14
    9e6e:	92 a3       	std	Z+34, r25	; 0x22
    9e70:	81 a3       	std	Z+33, r24	; 0x21
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
    9e72:	ed 91       	ld	r30, X+
    9e74:	fc 91       	ld	r31, X
    9e76:	11 97       	sbiw	r26, 0x01	; 1
    9e78:	8d 2d       	mov	r24, r13
    9e7a:	9c 2d       	mov	r25, r12
    9e7c:	94 a3       	std	Z+36, r25	; 0x24
    9e7e:	83 a3       	std	Z+35, r24	; 0x23
   (*current_thread)->filedata.filestate.bytes = nBytes;
    9e80:	ed 91       	ld	r30, X+
    9e82:	fc 91       	ld	r31, X
    9e84:	8b 2d       	mov	r24, r11
    9e86:	9a 2d       	mov	r25, r10
    9e88:	96 a3       	std	Z+38, r25	; 0x26
    9e8a:	85 a3       	std	Z+37, r24	; 0x25


void lib_write_file_syscall()
{
 void (*filefp)() = (void (*)(void))WRITE_FILE_SYSCALL;
 filefp();
    9e8c:	e4 e1       	ldi	r30, 0x14	; 20
    9e8e:	fe ee       	ldi	r31, 0xEE	; 238
    9e90:	09 95       	icall
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
   (*current_thread)->filedata.filestate.bytes = nBytes;

   lib_write_file_syscall();

   lib_file_barrier_block(7, 4);
    9e92:	87 e0       	ldi	r24, 0x07	; 7
    9e94:	64 e0       	ldi	r22, 0x04	; 4
    9e96:	0e 94 7a 55 	call	0xaaf4	; 0xaaf4 <lib_file_barrier_block>
   
   
 

   return;
}
    9e9a:	1f 91       	pop	r17
    9e9c:	0f 91       	pop	r16
    9e9e:	ff 90       	pop	r15
    9ea0:	ef 90       	pop	r14
    9ea2:	df 90       	pop	r13
    9ea4:	cf 90       	pop	r12
    9ea6:	bf 90       	pop	r11
    9ea8:	af 90       	pop	r10
    9eaa:	08 95       	ret

00009eac <lib_mfwrite_withoutlength>:


void lib_mfwrite_withoutlength(LIB_MYFILE *fp, void *buffer)
{
    9eac:	ef 92       	push	r14
    9eae:	ff 92       	push	r15
    9eb0:	0f 93       	push	r16
    9eb2:	1f 93       	push	r17
    9eb4:	8c 01       	movw	r16, r24
    9eb6:	7b 01       	movw	r14, r22


   uint8_t length;

   length = (uint8_t)lib_string_length((char*)buffer);
    9eb8:	cb 01       	movw	r24, r22
    9eba:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <lib_string_length>
    9ebe:	48 2f       	mov	r20, r24

   lib_mfwrite(fp, buffer, length);
    9ec0:	c8 01       	movw	r24, r16
    9ec2:	b7 01       	movw	r22, r14
    9ec4:	50 e0       	ldi	r21, 0x00	; 0
    9ec6:	0e 94 1e 4f 	call	0x9e3c	; 0x9e3c <lib_mfwrite>

   return;
}
    9eca:	1f 91       	pop	r17
    9ecc:	0f 91       	pop	r16
    9ece:	ff 90       	pop	r15
    9ed0:	ef 90       	pop	r14
    9ed2:	08 95       	ret

00009ed4 <lib_mfread>:
   return;

}

void lib_mfread(LIB_MYFILE *fp, void *buffer, int nBytes)
{
    9ed4:	af 92       	push	r10
    9ed6:	bf 92       	push	r11
    9ed8:	cf 92       	push	r12
    9eda:	df 92       	push	r13
    9edc:	ef 92       	push	r14
    9ede:	ff 92       	push	r15
    9ee0:	0f 93       	push	r16
    9ee2:	1f 93       	push	r17
    9ee4:	f8 2e       	mov	r15, r24
    9ee6:	e9 2e       	mov	r14, r25
    9ee8:	d6 2e       	mov	r13, r22
    9eea:	c7 2e       	mov	r12, r23
    9eec:	b4 2e       	mov	r11, r20
    9eee:	a5 2e       	mov	r10, r21
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    9ef0:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    9ef4:	8c 01       	movw	r16, r24
   currentthreadindex = lib_get_current_thread_index();
    9ef6:	0e 94 1a 55 	call	0xaa34	; 0xaa34 <lib_get_current_thread_index>


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
    9efa:	d8 01       	movw	r26, r16
    9efc:	ed 91       	ld	r30, X+
    9efe:	fc 91       	ld	r31, X
    9f00:	11 97       	sbiw	r26, 0x01	; 1
    9f02:	8f 2d       	mov	r24, r15
    9f04:	9e 2d       	mov	r25, r14
    9f06:	92 a3       	std	Z+34, r25	; 0x22
    9f08:	81 a3       	std	Z+33, r24	; 0x21
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
    9f0a:	ed 91       	ld	r30, X+
    9f0c:	fc 91       	ld	r31, X
    9f0e:	11 97       	sbiw	r26, 0x01	; 1
    9f10:	8d 2d       	mov	r24, r13
    9f12:	9c 2d       	mov	r25, r12
    9f14:	94 a3       	std	Z+36, r25	; 0x24
    9f16:	83 a3       	std	Z+35, r24	; 0x23
   (*current_thread)->filedata.filestate.bytes = nBytes;
    9f18:	ed 91       	ld	r30, X+
    9f1a:	fc 91       	ld	r31, X
    9f1c:	8b 2d       	mov	r24, r11
    9f1e:	9a 2d       	mov	r25, r10
    9f20:	96 a3       	std	Z+38, r25	; 0x26
    9f22:	85 a3       	std	Z+37, r24	; 0x25


void lib_read_file_syscall()
{
 void (*filefp)() = (void (*)(void))READ_FILE_SYSCALL;
 filefp();
    9f24:	e0 e1       	ldi	r30, 0x10	; 16
    9f26:	fe ee       	ldi	r31, 0xEE	; 238
    9f28:	09 95       	icall
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
   (*current_thread)->filedata.filestate.bytes = nBytes;

   lib_read_file_syscall();

   lib_file_barrier_block(7, 3);
    9f2a:	87 e0       	ldi	r24, 0x07	; 7
    9f2c:	63 e0       	ldi	r22, 0x03	; 3
    9f2e:	0e 94 7a 55 	call	0xaaf4	; 0xaaf4 <lib_file_barrier_block>

   return;

}
    9f32:	1f 91       	pop	r17
    9f34:	0f 91       	pop	r16
    9f36:	ff 90       	pop	r15
    9f38:	ef 90       	pop	r14
    9f3a:	df 90       	pop	r13
    9f3c:	cf 90       	pop	r12
    9f3e:	bf 90       	pop	r11
    9f40:	af 90       	pop	r10
    9f42:	08 95       	ret

00009f44 <lib_mfclose>:
}



void lib_mfclose(LIB_MYFILE *fp)
{
    9f44:	ef 92       	push	r14
    9f46:	ff 92       	push	r15
    9f48:	0f 93       	push	r16
    9f4a:	1f 93       	push	r17
    9f4c:	f8 2e       	mov	r15, r24
    9f4e:	e9 2e       	mov	r14, r25
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    9f50:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    9f54:	8c 01       	movw	r16, r24
   currentthreadindex = lib_get_current_thread_index();
    9f56:	0e 94 1a 55 	call	0xaa34	; 0xaa34 <lib_get_current_thread_index>


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
    9f5a:	d8 01       	movw	r26, r16
    9f5c:	ed 91       	ld	r30, X+
    9f5e:	fc 91       	ld	r31, X
    9f60:	8f 2d       	mov	r24, r15
    9f62:	9e 2d       	mov	r25, r14
    9f64:	92 a3       	std	Z+34, r25	; 0x22
    9f66:	81 a3       	std	Z+33, r24	; 0x21


void lib_close_file_syscall()
{
 void (*filefp)() = (void (*)(void))CLOSE_FILE_SYSCALL;
 filefp();
    9f68:	ec e0       	ldi	r30, 0x0C	; 12
    9f6a:	fe ee       	ldi	r31, 0xEE	; 238
    9f6c:	09 95       	icall


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
   lib_close_file_syscall();

   lib_file_barrier_block(7, 2);
    9f6e:	87 e0       	ldi	r24, 0x07	; 7
    9f70:	62 e0       	ldi	r22, 0x02	; 2
    9f72:	0e 94 7a 55 	call	0xaaf4	; 0xaaf4 <lib_file_barrier_block>

   return;

}
    9f76:	1f 91       	pop	r17
    9f78:	0f 91       	pop	r16
    9f7a:	ff 90       	pop	r15
    9f7c:	ef 90       	pop	r14
    9f7e:	08 95       	ret

00009f80 <lib_mfopen>:




LIB_MYFILE *lib_mfopen(const char *pathname, const char *mode)
{
    9f80:	8f 92       	push	r8
    9f82:	9f 92       	push	r9
    9f84:	af 92       	push	r10
    9f86:	bf 92       	push	r11
    9f88:	cf 92       	push	r12
    9f8a:	df 92       	push	r13
    9f8c:	ef 92       	push	r14
    9f8e:	ff 92       	push	r15
    9f90:	0f 93       	push	r16
    9f92:	1f 93       	push	r17
    9f94:	6c 01       	movw	r12, r24
    9f96:	5b 01       	movw	r10, r22
   uint8_t currentthreadindex;

   lib_thread** current_thread;


   current_thread = lib_get_current_thread();
    9f98:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    9f9c:	4c 01       	movw	r8, r24

   currentthreadindex = lib_get_current_thread_index();
    9f9e:	0e 94 1a 55 	call	0xaa34	; 0xaa34 <lib_get_current_thread_index>

   commonpathnameaddr =  lib_get_file_path_address();
    9fa2:	0e 94 c6 4e 	call	0x9d8c	; 0x9d8c <lib_get_file_path_address>
    9fa6:	8c 01       	movw	r16, r24

   commonmodeaddr = lib_get_file_mode_address();
    9fa8:	0e 94 d1 4e 	call	0x9da2	; 0x9da2 <lib_get_file_mode_address>
    9fac:	7c 01       	movw	r14, r24


   lib_mystrcpy(commonpathnameaddr, pathname);
    9fae:	c8 01       	movw	r24, r16
    9fb0:	b6 01       	movw	r22, r12
    9fb2:	0e 94 fc 53 	call	0xa7f8	; 0xa7f8 <lib_mystrcpy>
   lib_mystrcpy(commonmodeaddr, mode);
    9fb6:	c7 01       	movw	r24, r14
    9fb8:	b5 01       	movw	r22, r10
    9fba:	0e 94 fc 53 	call	0xa7f8	; 0xa7f8 <lib_mystrcpy>


void lib_open_file_syscall()
{
 void (*filefp)() = (void (*)(void))OPEN_FILE_SYSCALL;
 filefp();
    9fbe:	e8 e0       	ldi	r30, 0x08	; 8
    9fc0:	fe ee       	ldi	r31, 0xEE	; 238
    9fc2:	09 95       	icall
   lib_mystrcpy(commonpathnameaddr, pathname);
   lib_mystrcpy(commonmodeaddr, mode);

   lib_open_file_syscall();

   lib_file_barrier_block(7, 1);
    9fc4:	87 e0       	ldi	r24, 0x07	; 7
    9fc6:	61 e0       	ldi	r22, 0x01	; 1
    9fc8:	0e 94 7a 55 	call	0xaaf4	; 0xaaf4 <lib_file_barrier_block>

   return (LIB_MYFILE *)((*current_thread)->filedata.filestate.fileptr);
    9fcc:	d4 01       	movw	r26, r8
    9fce:	ed 91       	ld	r30, X+
    9fd0:	fc 91       	ld	r31, X
    9fd2:	21 a1       	ldd	r18, Z+33	; 0x21
    9fd4:	32 a1       	ldd	r19, Z+34	; 0x22
}
    9fd6:	c9 01       	movw	r24, r18
    9fd8:	1f 91       	pop	r17
    9fda:	0f 91       	pop	r16
    9fdc:	ff 90       	pop	r15
    9fde:	ef 90       	pop	r14
    9fe0:	df 90       	pop	r13
    9fe2:	cf 90       	pop	r12
    9fe4:	bf 90       	pop	r11
    9fe6:	af 90       	pop	r10
    9fe8:	9f 90       	pop	r9
    9fea:	8f 90       	pop	r8
    9fec:	08 95       	ret

00009fee <lib_green_toggle>:
#include "liteoscommon.h"
#include "../types/types.h"
void lib_green_toggle()
{
 void (*greenfp)() = (void (*)(void))GREEN_LED_TOGGLE_FUNCTION; 
 greenfp();                              
    9fee:	e8 e8       	ldi	r30, 0x88	; 136
    9ff0:	fc ee       	ldi	r31, 0xEC	; 236
    9ff2:	09 95       	icall



}
    9ff4:	08 95       	ret

00009ff6 <lib_red_toggle>:

void lib_red_toggle()
{
                          
  void (*redfp)() = (void (*)(void))RED_LED_TOGGLE_FUNCTION; 
  redfp();    
    9ff6:	e0 e8       	ldi	r30, 0x80	; 128
    9ff8:	fc ee       	ldi	r31, 0xEC	; 236
    9ffa:	09 95       	icall
}
    9ffc:	08 95       	ret

00009ffe <lib_yellow_toggle>:

void lib_yellow_toggle()
{
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_TOGGLE_FUNCTION; 
  yellowfp();    
    9ffe:	e4 e8       	ldi	r30, 0x84	; 132
    a000:	fc ee       	ldi	r31, 0xEC	; 236
    a002:	09 95       	icall
}
    a004:	08 95       	ret

0000a006 <lib_red_on>:

void lib_red_on()
{
                          
  void (*redfp)() = (void (*)(void))RED_ON_FUNCTION; 
  redfp();    
    a006:	ec e8       	ldi	r30, 0x8C	; 140
    a008:	fc ee       	ldi	r31, 0xEC	; 236
    a00a:	09 95       	icall
}
    a00c:	08 95       	ret

0000a00e <lib_red_off>:

void lib_red_off()
{
                          
  void (*redfp)() = (void (*)(void))RED_OFF_FUNCTION; 
  redfp();    
    a00e:	e0 e9       	ldi	r30, 0x90	; 144
    a010:	fc ee       	ldi	r31, 0xEC	; 236
    a012:	09 95       	icall
}
    a014:	08 95       	ret

0000a016 <lib_green_on>:

void lib_green_on()
{
                          
  void (*greenfp)() = (void (*)(void))GREEN_ON_FUNCTION; 
  greenfp();    
    a016:	ec e9       	ldi	r30, 0x9C	; 156
    a018:	fc ee       	ldi	r31, 0xEC	; 236
    a01a:	09 95       	icall
}
    a01c:	08 95       	ret

0000a01e <lib_green_off>:

void lib_green_off()
{
                          
  void (*greenfp)() = (void (*)(void))GREEN_OFF_FUNCTION; 
  greenfp();    
    a01e:	e0 ea       	ldi	r30, 0xA0	; 160
    a020:	fc ee       	ldi	r31, 0xEC	; 236
    a022:	09 95       	icall
}
    a024:	08 95       	ret

0000a026 <lib_yellow_on>:

void lib_yellow_on()
{
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_ON_FUNCTION; 
  yellowfp();    
    a026:	e4 e9       	ldi	r30, 0x94	; 148
    a028:	fc ee       	ldi	r31, 0xEC	; 236
    a02a:	09 95       	icall
}
    a02c:	08 95       	ret

0000a02e <lib_yellow_off>:

void lib_yellow_off()
{
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_OFF_FUNCTION; 
  yellowfp();    
    a02e:	e8 e9       	ldi	r30, 0x98	; 152
    a030:	fc ee       	ldi	r31, 0xEC	; 236
    a032:	09 95       	icall
}
    a034:	08 95       	ret

0000a036 <lib_radio_send_msg_syscall>:
lib_thread* mythread;

void lib_radio_send_msg_syscall()
{
 void (*radiosendfp)() = (void (*)(void))SOCKET_RADIO_SEND_FUNCTION;
 radiosendfp();
    a036:	e0 e1       	ldi	r30, 0x10	; 16
    a038:	fc ee       	ldi	r31, 0xEC	; 236
    a03a:	09 95       	icall
}
    a03c:	08 95       	ret

0000a03e <lib_get_current_radio_receive_handle_addr>:
{
   radiohandletype *currentradioinfo;

   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_RADIO_RECEIVER_BUFFER;

   asm volatile("push r20" "\n\t"
    a03e:	4f 93       	push	r20
    a040:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    a042:	e4 e1       	ldi	r30, 0x14	; 20
    a044:	fc ee       	ldi	r31, 0xEC	; 236
    a046:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a048:	24 2f       	mov	r18, r20
    a04a:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (currentradioinfo)
				 :
                );
    asm volatile("pop r21" "\n\t"
    a04c:	5f 91       	pop	r21
    a04e:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currentradioinfo;
}
    a050:	c9 01       	movw	r24, r18
    a052:	08 95       	ret

0000a054 <lib_radio_set_freq>:
void lib_radio_set_freq(uint16_t freq)
{

   void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_FREQ_FUNCTION;

   asm volatile("push r20" "\n\t"
    a054:	4f 93       	push	r20
    a056:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);

   asm volatile(" mov r20, %A0" "\n\t"
    a058:	48 2f       	mov	r20, r24
    a05a:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (freq)
                );
   getaddrfp();
    a05c:	e0 e0       	ldi	r30, 0x00	; 0
    a05e:	fc ee       	ldi	r31, 0xEC	; 236
    a060:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    a062:	5f 91       	pop	r21
    a064:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    a066:	08 95       	ret

0000a068 <lib_radio_set_channel>:

  uint16_t maskchannel = channel;

  void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_CHANNEL_FUNCTION;

  asm volatile("push r20" "\n\t"
    a068:	4f 93       	push	r20
    a06a:	5f 93       	push	r21
               "push r21" "\n\t"
               ::);

  asm volatile(" mov r20, %A0" "\n\t"
    a06c:	90 e0       	ldi	r25, 0x00	; 0
    a06e:	48 2f       	mov	r20, r24
    a070:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (maskchannel)
                );
   getaddrfp();
    a072:	e4 e0       	ldi	r30, 0x04	; 4
    a074:	fc ee       	ldi	r31, 0xEC	; 236
    a076:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    a078:	5f 91       	pop	r21
    a07a:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    a07c:	08 95       	ret

0000a07e <lib_radio_set_power>:

  uint16_t maskchannel = power;

  void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_POWER_FUNCTION;

  asm volatile("push r20" "\n\t"
    a07e:	4f 93       	push	r20
    a080:	5f 93       	push	r21
               "push r21" "\n\t"
               ::);

  asm volatile(" mov r20, %A0" "\n\t"
    a082:	90 e0       	ldi	r25, 0x00	; 0
    a084:	48 2f       	mov	r20, r24
    a086:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (maskchannel)
                );
   getaddrfp();
    a088:	e8 e0       	ldi	r30, 0x08	; 8
    a08a:	fc ee       	ldi	r31, 0xEC	; 236
    a08c:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    a08e:	5f 91       	pop	r21
    a090:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    a092:	08 95       	ret

0000a094 <lib_get_current_radio_send_addr>:

radioinfotype *lib_get_current_radio_send_addr()
{
   radioinfotype *currentradioinfo;
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_RADIO_SENDER_BUFFER;
   asm volatile("push r20" "\n\t"
    a094:	4f 93       	push	r20
    a096:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();
    a098:	ec e0       	ldi	r30, 0x0C	; 12
    a09a:	fc ee       	ldi	r31, 0xEC	; 236
    a09c:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a09e:	24 2f       	mov	r18, r20
    a0a0:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (currentradioinfo)
				 :
                );
    asm volatile("pop r21" "\n\t"
    a0a2:	5f 91       	pop	r21
    a0a4:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currentradioinfo;
}
    a0a6:	c9 01       	movw	r24, r18
    a0a8:	08 95       	ret

0000a0aa <lib_radio_send_energy_wrapper>:
void lib_radio_send_energy_wrapper(uint16_t port, uint16_t address, uint8_t length, uint8_t *msg){
	 
	  
	    lib_thread** current_thread;
	  
      current_thread = lib_get_current_thread();      
    a0aa:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
     // }
      
    
    
    // radioSend(port, address, length, msg); 
}
    a0ae:	08 95       	ret

0000a0b0 <lib_radio_receive_timed>:
{
   return lib_radio_receive_timed(port, maxlength, msg, 0);
}

int lib_radio_receive_timed(uint16_t port, uint8_t maxlength, uint8_t *msg, uint16_t time)
{
    a0b0:	af 92       	push	r10
    a0b2:	bf 92       	push	r11
    a0b4:	df 92       	push	r13
    a0b6:	ef 92       	push	r14
    a0b8:	ff 92       	push	r15
    a0ba:	0f 93       	push	r16
    a0bc:	1f 93       	push	r17
    a0be:	cf 93       	push	r28
    a0c0:	df 93       	push	r29
    a0c2:	8c 01       	movw	r16, r24
    a0c4:	d6 2e       	mov	r13, r22
    a0c6:	ea 01       	movw	r28, r20
    a0c8:	59 01       	movw	r10, r18
   _atomic_t currentatomic;
   
   void (*radio_register_function_pointer)(void) = (void (*)(void))REGISTER_RADIO_RECEIVE_EVENT;
   lib_thread** current_thread = lib_get_current_thread();
    a0ca:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    a0ce:	7c 01       	movw	r14, r24
   radiohandletype *radiohandleaddr = lib_get_current_radio_receive_handle_addr();
    a0d0:	0e 94 1f 50 	call	0xa03e	; 0xa03e <lib_get_current_radio_receive_handle_addr>
    a0d4:	fc 01       	movw	r30, r24

   //set up the radiohandleaddr data structures

   radiohandleaddr->port = port;
    a0d6:	11 83       	std	Z+1, r17	; 0x01
    a0d8:	00 83       	st	Z, r16
   radiohandleaddr->maxLength = 32;
    a0da:	80 e2       	ldi	r24, 0x20	; 32
    a0dc:	82 83       	std	Z+2, r24	; 0x02
   radiohandleaddr->dataReady = &radioReceiveDataReady;
    a0de:	80 e2       	ldi	r24, 0x20	; 32
    a0e0:	9a e0       	ldi	r25, 0x0A	; 10
    a0e2:	94 83       	std	Z+4, r25	; 0x04
    a0e4:	83 83       	std	Z+3, r24	; 0x03
   radiohandleaddr->data = buffer;
    a0e6:	81 ec       	ldi	r24, 0xC1	; 193
    a0e8:	93 e0       	ldi	r25, 0x03	; 3
    a0ea:	96 83       	std	Z+6, r25	; 0x06
    a0ec:	85 83       	std	Z+5, r24	; 0x05
   radiohandleaddr->packetinfo = radioReceivePacketInfo;
    a0ee:	81 e2       	ldi	r24, 0x21	; 33
    a0f0:	9a e0       	ldi	r25, 0x0A	; 10
    a0f2:	90 87       	std	Z+8, r25	; 0x08
    a0f4:	87 83       	std	Z+7, r24	; 0x07
   radiohandleaddr->handlefunc = lib_wakeup_mythread;
    a0f6:	8e ef       	ldi	r24, 0xFE	; 254
    a0f8:	90 e5       	ldi	r25, 0x50	; 80
    a0fa:	93 87       	std	Z+11, r25	; 0x0b
    a0fc:	82 87       	std	Z+10, r24	; 0x0a

	//close the interrupt
	currentatomic = _atomic_start();
    a0fe:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a102:	18 2f       	mov	r17, r24
	
	//call the radio handle set to store the data structure into the handle vectors
	radio_register_function_pointer();
    a104:	e8 e1       	ldi	r30, 0x18	; 24
    a106:	fc ee       	ldi	r31, 0xEC	; 236
    a108:	09 95       	icall

	//set up the current thread into sleep mode
   (*current_thread)->state = STATE_SLEEP;
    a10a:	d7 01       	movw	r26, r14
    a10c:	ed 91       	ld	r30, X+
    a10e:	fc 91       	ld	r31, X
    a110:	11 97       	sbiw	r26, 0x01	; 1
    a112:	85 e0       	ldi	r24, 0x05	; 5
    a114:	82 83       	std	Z+2, r24	; 0x02

	//set up mythread so that later can wake up this thread
	mythread = *current_thread;
    a116:	8d 91       	ld	r24, X+
    a118:	9c 91       	ld	r25, X
    a11a:	90 93 1f 0a 	sts	0x0A1F, r25
    a11e:	80 93 1e 0a 	sts	0x0A1E, r24

	//open the interrupt
	_atomic_end(currentatomic);
    a122:	81 2f       	mov	r24, r17
    a124:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>

	if (time == 0)
    a128:	a1 14       	cp	r10, r1
    a12a:	b1 04       	cpc	r11, r1
    a12c:	29 f5       	brne	.+74     	; 0xa178 <lib_radio_receive_timed+0xc8>
		lib_yield();
    a12e:	0e 94 50 55 	call	0xaaa0	; 0xaaa0 <lib_yield>
	else
		lib_sleep_thread(time);
	
	uint8_t i;
	for (i = 0; i < maxlength && i < 32; i++)
    a132:	dd 20       	and	r13, r13
    a134:	a1 f0       	breq	.+40     	; 0xa15e <lib_radio_receive_timed+0xae>
    a136:	20 e0       	ldi	r18, 0x00	; 0
    a138:	30 e0       	ldi	r19, 0x00	; 0
    a13a:	05 c0       	rjmp	.+10     	; 0xa146 <lib_radio_receive_timed+0x96>
    a13c:	2f 5f       	subi	r18, 0xFF	; 255
    a13e:	3f 4f       	sbci	r19, 0xFF	; 255
    a140:	20 32       	cpi	r18, 0x20	; 32
    a142:	31 05       	cpc	r19, r1
    a144:	61 f0       	breq	.+24     	; 0xa15e <lib_radio_receive_timed+0xae>
		msg[i] = buffer[i];
    a146:	de 01       	movw	r26, r28
    a148:	a2 0f       	add	r26, r18
    a14a:	b3 1f       	adc	r27, r19
    a14c:	f9 01       	movw	r30, r18
    a14e:	ef 53       	subi	r30, 0x3F	; 63
    a150:	fc 4f       	sbci	r31, 0xFC	; 252
    a152:	80 81       	ld	r24, Z
    a154:	8c 93       	st	X, r24
		lib_yield();
	else
		lib_sleep_thread(time);
	
	uint8_t i;
	for (i = 0; i < maxlength && i < 32; i++)
    a156:	82 2f       	mov	r24, r18
    a158:	8f 5f       	subi	r24, 0xFF	; 255
    a15a:	8d 15       	cp	r24, r13
    a15c:	78 f3       	brcs	.-34     	; 0xa13c <lib_radio_receive_timed+0x8c>
		msg[i] = buffer[i];

	return radioReceiveDataReady;
}
    a15e:	80 91 20 0a 	lds	r24, 0x0A20
    a162:	90 e0       	ldi	r25, 0x00	; 0
    a164:	df 91       	pop	r29
    a166:	cf 91       	pop	r28
    a168:	1f 91       	pop	r17
    a16a:	0f 91       	pop	r16
    a16c:	ff 90       	pop	r15
    a16e:	ef 90       	pop	r14
    a170:	df 90       	pop	r13
    a172:	bf 90       	pop	r11
    a174:	af 90       	pop	r10
    a176:	08 95       	ret
	_atomic_end(currentatomic);

	if (time == 0)
		lib_yield();
	else
		lib_sleep_thread(time);
    a178:	c5 01       	movw	r24, r10
    a17a:	0e 94 2f 55 	call	0xaa5e	; 0xaa5e <lib_sleep_thread>
    a17e:	d9 cf       	rjmp	.-78     	; 0xa132 <lib_radio_receive_timed+0x82>

0000a180 <lib_radio_receive>:
  syscall_post_thread_task();
}

int lib_radio_receive(uint16_t port, uint8_t maxlength, uint8_t *msg)
{
   return lib_radio_receive_timed(port, maxlength, msg, 0);
    a180:	20 e0       	ldi	r18, 0x00	; 0
    a182:	30 e0       	ldi	r19, 0x00	; 0
    a184:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <lib_radio_receive_timed>
}
    a188:	08 95       	ret

0000a18a <lib_radio_send_msg>:




void lib_radio_send_msg(uint16_t port, uint16_t address, uint8_t length, uint8_t *msg)
{
    a18a:	bf 92       	push	r11
    a18c:	cf 92       	push	r12
    a18e:	df 92       	push	r13
    a190:	ef 92       	push	r14
    a192:	ff 92       	push	r15
    a194:	0f 93       	push	r16
    a196:	1f 93       	push	r17
    a198:	8c 01       	movw	r16, r24
    a19a:	7b 01       	movw	r14, r22
    a19c:	b4 2e       	mov	r11, r20
    a19e:	69 01       	movw	r12, r18
   lib_thread** current_thread;
   radioinfotype *radioinfoaddr;



   current_thread = lib_get_current_thread();
    a1a0:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
   radioinfoaddr = lib_get_current_radio_send_addr();
    a1a4:	0e 94 4a 50 	call	0xa094	; 0xa094 <lib_get_current_radio_send_addr>
    a1a8:	fc 01       	movw	r30, r24


   radioinfoaddr-> socket_port = port;
    a1aa:	11 83       	std	Z+1, r17	; 0x01
    a1ac:	00 83       	st	Z, r16
   radioinfoaddr->socket_addr = address;
    a1ae:	f3 82       	std	Z+3, r15	; 0x03
    a1b0:	e2 82       	std	Z+2, r14	; 0x02
   radioinfoaddr->socket_msg_len  = length;
    a1b2:	b4 82       	std	Z+4, r11	; 0x04
   radioinfoaddr->socket_msg  = msg;
    a1b4:	d6 82       	std	Z+6, r13	; 0x06
    a1b6:	c5 82       	std	Z+5, r12	; 0x05
lib_thread* mythread;

void lib_radio_send_msg_syscall()
{
 void (*radiosendfp)() = (void (*)(void))SOCKET_RADIO_SEND_FUNCTION;
 radiosendfp();
    a1b8:	e0 e1       	ldi	r30, 0x10	; 16
    a1ba:	fc ee       	ldi	r31, 0xEC	; 236
    a1bc:	09 95       	icall
   radioinfoaddr->socket_addr = address;
   radioinfoaddr->socket_msg_len  = length;
   radioinfoaddr->socket_msg  = msg;
   lib_radio_send_msg_syscall();

   lib_sleep_thread(20);
    a1be:	84 e1       	ldi	r24, 0x14	; 20
    a1c0:	90 e0       	ldi	r25, 0x00	; 0
    a1c2:	0e 94 2f 55 	call	0xaa5e	; 0xaa5e <lib_sleep_thread>

 

   return;
}
    a1c6:	1f 91       	pop	r17
    a1c8:	0f 91       	pop	r16
    a1ca:	ff 90       	pop	r15
    a1cc:	ef 90       	pop	r14
    a1ce:	df 90       	pop	r13
    a1d0:	cf 90       	pop	r12
    a1d2:	bf 90       	pop	r11
    a1d4:	08 95       	ret

0000a1d6 <lib_radio_send_integer_u16>:
{
  uint8_t temp1,temp2;
  temp1 = (uint8_t) (value >> 8);
  temp2 = (uint8_t) (value & 0x00ff);

  buffer[0] = temp1;
    a1d6:	90 93 c1 03 	sts	0x03C1, r25
  buffer[1] = temp2;
    a1da:	80 93 c2 03 	sts	0x03C2, r24
  buffer[2] = buffer[3] = 0xee;
    a1de:	8e ee       	ldi	r24, 0xEE	; 238
    a1e0:	80 93 c4 03 	sts	0x03C4, r24
    a1e4:	80 93 c3 03 	sts	0x03C3, r24

  return lib_radio_send_msg(12, 0xffff, 16, buffer);
    a1e8:	8c e0       	ldi	r24, 0x0C	; 12
    a1ea:	90 e0       	ldi	r25, 0x00	; 0
    a1ec:	6f ef       	ldi	r22, 0xFF	; 255
    a1ee:	7f ef       	ldi	r23, 0xFF	; 255
    a1f0:	40 e1       	ldi	r20, 0x10	; 16
    a1f2:	21 ec       	ldi	r18, 0xC1	; 193
    a1f4:	33 e0       	ldi	r19, 0x03	; 3
    a1f6:	0e 94 c5 50 	call	0xa18a	; 0xa18a <lib_radio_send_msg>
}
    a1fa:	08 95       	ret

0000a1fc <lib_wakeup_mythread>:

//wakeup the current thread once an incoming packet arrives

void lib_wakeup_mythread()
{
  mythread->state = STATE_ACTIVE;
    a1fc:	e0 91 1e 0a 	lds	r30, 0x0A1E
    a200:	f0 91 1f 0a 	lds	r31, 0x0A1F
    a204:	82 e0       	ldi	r24, 0x02	; 2
    a206:	82 83       	std	Z+2, r24	; 0x02
  syscall_post_thread_task();
    a208:	0e 94 54 55 	call	0xaaa8	; 0xaaa8 <syscall_post_thread_task>
}
    a20c:	08 95       	ret

0000a20e <lib_radio_send_string>:
}

//This function sends out a string

void lib_radio_send_string(uint8_t *msg)
{
    a20e:	0f 93       	push	r16
    a210:	1f 93       	push	r17
    a212:	8c 01       	movw	r16, r24
    uint8_t temp = (uint8_t)lib_string_length((char *)msg);
    a214:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <lib_string_length>
    a218:	48 2f       	mov	r20, r24
 #ifdef ENERGY_INSTRUMENTATION
 return lib_radio_send_energy_wrapper(1, 0xffff, temp, msg);
 #else
	return lib_radio_send_msg(1, 0xffff, temp, msg);
    a21a:	81 e0       	ldi	r24, 0x01	; 1
    a21c:	90 e0       	ldi	r25, 0x00	; 0
    a21e:	6f ef       	ldi	r22, 0xFF	; 255
    a220:	7f ef       	ldi	r23, 0xFF	; 255
    a222:	98 01       	movw	r18, r16
    a224:	0e 94 c5 50 	call	0xa18a	; 0xa18a <lib_radio_send_msg>
 #endif
}
    a228:	1f 91       	pop	r17
    a22a:	0f 91       	pop	r16
    a22c:	08 95       	ret

0000a22e <itoa>:

static uint8_t localbuffer[16];


uint8_t itoa(uint16_t value, char*  str, int radix)
{
    a22e:	6f 92       	push	r6
    a230:	7f 92       	push	r7
    a232:	8f 92       	push	r8
    a234:	9f 92       	push	r9
    a236:	af 92       	push	r10
    a238:	bf 92       	push	r11
    a23a:	cf 92       	push	r12
    a23c:	df 92       	push	r13
    a23e:	ef 92       	push	r14
    a240:	ff 92       	push	r15
    a242:	0f 93       	push	r16
    a244:	1f 93       	push	r17
    a246:	cf 93       	push	r28
    a248:	df 93       	push	r29
    a24a:	6c 01       	movw	r12, r24
    a24c:	4b 01       	movw	r8, r22
    a24e:	5a 01       	movw	r10, r20
    a250:	3a 01       	movw	r6, r20
    a252:	eb 01       	movw	r28, r22
    a254:	7b 01       	movw	r14, r22
    a256:	41 e2       	ldi	r20, 0x21	; 33
    a258:	01 e0       	ldi	r16, 0x01	; 1
    a25a:	10 e0       	ldi	r17, 0x00	; 0
    a25c:	0c c0       	rjmp	.+24     	; 0xa276 <itoa+0x48>
                        ch ='f' ;
                        break;
                }
            }
        }
        if( '!' == ch )
    a25e:	41 32       	cpi	r20, 0x21	; 33
    a260:	79 f1       	breq	.+94     	; 0xa2c0 <itoa+0x92>
        {
            str[pos++] = (char) ( rem + 0x30 );
        }
        else
        {
            str[pos++] = ch ;
    a262:	d7 01       	movw	r26, r14
    a264:	4c 93       	st	X, r20
    a266:	98 01       	movw	r18, r16
    a268:	0f 5f       	subi	r16, 0xFF	; 255
    a26a:	1f 4f       	sbci	r17, 0xFF	; 255
    a26c:	08 94       	sec
    a26e:	e1 1c       	adc	r14, r1
    a270:	f1 1c       	adc	r15, r1
        }
    }while( value != 0 );
    a272:	ef 2b       	or	r30, r31
    a274:	89 f1       	breq	.+98     	; 0xa2d8 <itoa+0xaa>
    int  pos = 0;
    char ch  = '!' ;
    int i; 
    do
    {
        rem    = value % radix ;
    a276:	c6 01       	movw	r24, r12
    a278:	b3 01       	movw	r22, r6
    a27a:	0e 94 84 56 	call	0xad08	; 0xad08 <__udivmodhi4>
    a27e:	9c 01       	movw	r18, r24
        value /= radix;
    a280:	c6 01       	movw	r24, r12
    a282:	b3 01       	movw	r22, r6
    a284:	0e 94 84 56 	call	0xad08	; 0xad08 <__udivmodhi4>
    a288:	fb 01       	movw	r30, r22
    a28a:	6b 01       	movw	r12, r22
        if ( 16 == radix )
    a28c:	80 e1       	ldi	r24, 0x10	; 16
    a28e:	a8 16       	cp	r10, r24
    a290:	b1 04       	cpc	r11, r1
    a292:	29 f7       	brne	.-54     	; 0xa25e <itoa+0x30>
        {
            if( rem >= 10 && rem <= 15 )
    a294:	c9 01       	movw	r24, r18
    a296:	0a 97       	sbiw	r24, 0x0a	; 10
    a298:	06 97       	sbiw	r24, 0x06	; 6
    a29a:	08 f7       	brcc	.-62     	; 0xa25e <itoa+0x30>
            {
                switch( rem )
    a29c:	2c 30       	cpi	r18, 0x0C	; 12
    a29e:	31 05       	cpc	r19, r1
    a2a0:	09 f4       	brne	.+2      	; 0xa2a4 <itoa+0x76>
    a2a2:	56 c0       	rjmp	.+172    	; 0xa350 <itoa+0x122>
    a2a4:	2d 30       	cpi	r18, 0x0D	; 13
    a2a6:	31 05       	cpc	r19, r1
    a2a8:	0c f4       	brge	.+2      	; 0xa2ac <itoa+0x7e>
    a2aa:	43 c0       	rjmp	.+134    	; 0xa332 <itoa+0x104>
    a2ac:	2e 30       	cpi	r18, 0x0E	; 14
    a2ae:	31 05       	cpc	r19, r1
    a2b0:	09 f4       	brne	.+2      	; 0xa2b4 <itoa+0x86>
    a2b2:	50 c0       	rjmp	.+160    	; 0xa354 <itoa+0x126>
    a2b4:	2e 30       	cpi	r18, 0x0E	; 14
    a2b6:	31 05       	cpc	r19, r1
    a2b8:	0c f0       	brlt	.+2      	; 0xa2bc <itoa+0x8e>
    a2ba:	44 c0       	rjmp	.+136    	; 0xa344 <itoa+0x116>
                    case 11:
                        ch ='b' ;
                        break;
                    case 12:
                        ch = 'c' ;
                        break;
    a2bc:	44 e6       	ldi	r20, 0x64	; 100
    a2be:	d1 cf       	rjmp	.-94     	; 0xa262 <itoa+0x34>
                }
            }
        }
        if( '!' == ch )
        {
            str[pos++] = (char) ( rem + 0x30 );
    a2c0:	82 2f       	mov	r24, r18
    a2c2:	80 5d       	subi	r24, 0xD0	; 208
    a2c4:	d7 01       	movw	r26, r14
    a2c6:	8c 93       	st	X, r24
    a2c8:	98 01       	movw	r18, r16
        }
        else
        {
            str[pos++] = ch ;
    a2ca:	0f 5f       	subi	r16, 0xFF	; 255
    a2cc:	1f 4f       	sbci	r17, 0xFF	; 255
    a2ce:	08 94       	sec
    a2d0:	e1 1c       	adc	r14, r1
    a2d2:	f1 1c       	adc	r15, r1
        }
    }while( value != 0 );
    a2d4:	ef 2b       	or	r30, r31
    a2d6:	79 f6       	brne	.-98     	; 0xa276 <itoa+0x48>
   // str[pos] = '\0' ;
    
    i=0; 
    
    while (i<pos/2)
    a2d8:	b9 01       	movw	r22, r18
    a2da:	75 95       	asr	r23
    a2dc:	67 95       	ror	r22
    a2de:	16 16       	cp	r1, r22
    a2e0:	17 06       	cpc	r1, r23
    a2e2:	e4 f5       	brge	.+120    	; 0xa35c <itoa+0x12e>

static uint8_t localbuffer[16];


uint8_t itoa(uint16_t value, char*  str, int radix)
{
    a2e4:	21 50       	subi	r18, 0x01	; 1
    a2e6:	30 40       	sbci	r19, 0x00	; 0
    a2e8:	f4 01       	movw	r30, r8
    a2ea:	e2 0f       	add	r30, r18
    a2ec:	f3 1f       	adc	r31, r19
    a2ee:	2f 5f       	subi	r18, 0xFF	; 255
    a2f0:	3f 4f       	sbci	r19, 0xFF	; 255
    a2f2:	d4 01       	movw	r26, r8
    a2f4:	a2 0f       	add	r26, r18
    a2f6:	b3 1f       	adc	r27, r19
    a2f8:	68 0d       	add	r22, r8
    a2fa:	79 1d       	adc	r23, r9
    
    i=0; 
    
    while (i<pos/2)
    {
        *(str+pos) = *(str+i);       //uses the null character as the temporary storage.
    a2fc:	88 81       	ld	r24, Y
    a2fe:	8c 93       	st	X, r24
        *(str+i) = *(str + pos - i -1);
    a300:	80 81       	ld	r24, Z
    a302:	89 93       	st	Y+, r24
        *(str+pos-i-1) = *(str+pos);
    a304:	8c 91       	ld	r24, X
    a306:	80 83       	st	Z, r24
    a308:	31 97       	sbiw	r30, 0x01	; 1
    }while( value != 0 );
   // str[pos] = '\0' ;
    
    i=0; 
    
    while (i<pos/2)
    a30a:	c6 17       	cp	r28, r22
    a30c:	d7 07       	cpc	r29, r23
    a30e:	b1 f7       	brne	.-20     	; 0xa2fc <itoa+0xce>
        *(str+i) = *(str + pos - i -1);
        *(str+pos-i-1) = *(str+pos);
        i++;
    }
   
    *(str+pos) = '\0';
    a310:	1c 92       	st	X, r1
    return pos;
}
    a312:	82 2f       	mov	r24, r18
    a314:	df 91       	pop	r29
    a316:	cf 91       	pop	r28
    a318:	1f 91       	pop	r17
    a31a:	0f 91       	pop	r16
    a31c:	ff 90       	pop	r15
    a31e:	ef 90       	pop	r14
    a320:	df 90       	pop	r13
    a322:	cf 90       	pop	r12
    a324:	bf 90       	pop	r11
    a326:	af 90       	pop	r10
    a328:	9f 90       	pop	r9
    a32a:	8f 90       	pop	r8
    a32c:	7f 90       	pop	r7
    a32e:	6f 90       	pop	r6
    a330:	08 95       	ret
        value /= radix;
        if ( 16 == radix )
        {
            if( rem >= 10 && rem <= 15 )
            {
                switch( rem )
    a332:	2a 30       	cpi	r18, 0x0A	; 10
    a334:	31 05       	cpc	r19, r1
    a336:	81 f0       	breq	.+32     	; 0xa358 <itoa+0x12a>
    a338:	2b 30       	cpi	r18, 0x0B	; 11
    a33a:	31 05       	cpc	r19, r1
    a33c:	09 f0       	breq	.+2      	; 0xa340 <itoa+0x112>
    a33e:	8f cf       	rjmp	.-226    	; 0xa25e <itoa+0x30>
    a340:	42 e6       	ldi	r20, 0x62	; 98
    a342:	8f cf       	rjmp	.-226    	; 0xa262 <itoa+0x34>
    a344:	2f 30       	cpi	r18, 0x0F	; 15
    a346:	31 05       	cpc	r19, r1
    a348:	09 f0       	breq	.+2      	; 0xa34c <itoa+0x11e>
    a34a:	89 cf       	rjmp	.-238    	; 0xa25e <itoa+0x30>
                    case 13:
                        ch ='d' ;
                        break;
                    case 14:
                        ch = 'e' ;
                        break;
    a34c:	46 e6       	ldi	r20, 0x66	; 102
    a34e:	89 cf       	rjmp	.-238    	; 0xa262 <itoa+0x34>
        value /= radix;
        if ( 16 == radix )
        {
            if( rem >= 10 && rem <= 15 )
            {
                switch( rem )
    a350:	43 e6       	ldi	r20, 0x63	; 99
    a352:	87 cf       	rjmp	.-242    	; 0xa262 <itoa+0x34>
                    case 12:
                        ch = 'c' ;
                        break;
                    case 13:
                        ch ='d' ;
                        break;
    a354:	45 e6       	ldi	r20, 0x65	; 101
    a356:	85 cf       	rjmp	.-246    	; 0xa262 <itoa+0x34>
        *(str+i) = *(str + pos - i -1);
        *(str+pos-i-1) = *(str+pos);
        i++;
    }
   
    *(str+pos) = '\0';
    a358:	41 e6       	ldi	r20, 0x61	; 97
    a35a:	83 cf       	rjmp	.-250    	; 0xa262 <itoa+0x34>
    a35c:	d4 01       	movw	r26, r8
    a35e:	a2 0f       	add	r26, r18
    a360:	b3 1f       	adc	r27, r19
    a362:	d6 cf       	rjmp	.-84     	; 0xa310 <itoa+0xe2>

0000a364 <lib_init_usart>:

//No need to be called from main 
//This function is called when the system is being initilized and prints system start 
void lib_init_usart()
{
    UBRR0H = 0;
    a364:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 15;
    a368:	8f e0       	ldi	r24, 0x0F	; 15
    a36a:	89 b9       	out	0x09, r24	; 9
    UCSR0A |= _BV(U2X0);        // double speed
    a36c:	59 9a       	sbi	0x0b, 1	; 11
    UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);        // 8 data-bits, 1 stop-bit
    a36e:	e5 e9       	ldi	r30, 0x95	; 149
    a370:	f0 e0       	ldi	r31, 0x00	; 0
    a372:	80 81       	ld	r24, Z
    a374:	86 60       	ori	r24, 0x06	; 6
    a376:	80 83       	st	Z, r24
    UCSR0B |= _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
    a378:	8a b1       	in	r24, 0x0a	; 10
    a37a:	88 69       	ori	r24, 0x98	; 152
    a37c:	8a b9       	out	0x0a, r24	; 10
    // Enable recieve/transmit/interrupts
    cFlag = 1;
    a37e:	81 e0       	ldi	r24, 0x01	; 1
    a380:	80 93 e1 03 	sts	0x03E1, r24
    previous = 0;
    a384:	10 92 e2 03 	sts	0x03E2, r1
    status = 0;
    a388:	10 92 e3 03 	sts	0x03E3, r1
}
    a38c:	08 95       	ret

0000a38e <lib_print_usart>:

//-------------------------------------------------------------------------
void lib_print_usart(uint8_t c)
{
    a38e:	1f 93       	push	r17
    a390:	18 2f       	mov	r17, r24

   flag = _atomic_start();
    a392:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a396:	80 93 25 0a 	sts	0x0A25, r24
     

    if (cFlag == 0)
    a39a:	80 91 e1 03 	lds	r24, 0x03E1
    a39e:	88 23       	and	r24, r24
    a3a0:	49 f0       	breq	.+18     	; 0xa3b4 <lib_print_usart+0x26>
    {
        lib_init_usart();
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
    a3a2:	5d 9b       	sbis	0x0b, 5	; 11
    a3a4:	fe cf       	rjmp	.-4      	; 0xa3a2 <lib_print_usart+0x14>
        ;
    UDR0 = c;
    a3a6:	1c b9       	out	0x0c, r17	; 12
	
    _atomic_end(flag);
    a3a8:	80 91 25 0a 	lds	r24, 0x0A25
    a3ac:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    a3b0:	1f 91       	pop	r17
    a3b2:	08 95       	ret
   flag = _atomic_start();
     

    if (cFlag == 0)
    {
        lib_init_usart();
    a3b4:	0e 94 b2 51 	call	0xa364	; 0xa364 <lib_init_usart>
    a3b8:	f4 cf       	rjmp	.-24     	; 0xa3a2 <lib_print_usart+0x14>

0000a3ba <lib_printf_ln>:



//-------------------------------------------------------------------------
void lib_printf_ln()
{
    a3ba:	1f 93       	push	r17
#ifdef PLATFORM_AVR
    _atomic_t currentatomic;
    currentatomic = _atomic_start();
    a3bc:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a3c0:	18 2f       	mov	r17, r24
    lib_print_usart(0xFC);
    a3c2:	8c ef       	ldi	r24, 0xFC	; 252
    a3c4:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    lib_print_usart(0x6D);
    a3c8:	8d e6       	ldi	r24, 0x6D	; 109
    a3ca:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    lib_print_usart(0x6D);
    a3ce:	8d e6       	ldi	r24, 0x6D	; 109
    a3d0:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    lib_print_usart(0x6D);
    a3d4:	8d e6       	ldi	r24, 0x6D	; 109
    a3d6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    lib_print_usart(0xFC);
    a3da:	8c ef       	ldi	r24, 0xFC	; 252
    a3dc:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
	_atomic_end(currentatomic);
    a3e0:	81 2f       	mov	r24, r17
    a3e2:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    
#endif
}
    a3e6:	1f 91       	pop	r17
    a3e8:	08 95       	ret

0000a3ea <lib_usart_put_long>:
	_atomic_end(flag);
}

//-------------------------------------------------------------------------
void lib_usart_put_long(uint32_t l)
{
    a3ea:	df 93       	push	r29
    a3ec:	cf 93       	push	r28
    a3ee:	00 d0       	rcall	.+0      	; 0xa3f0 <lib_usart_put_long+0x6>
    a3f0:	00 d0       	rcall	.+0      	; 0xa3f2 <lib_usart_put_long+0x8>
    a3f2:	cd b7       	in	r28, 0x3d	; 61
    a3f4:	de b7       	in	r29, 0x3e	; 62
    a3f6:	69 83       	std	Y+1, r22	; 0x01
    a3f8:	7a 83       	std	Y+2, r23	; 0x02
    a3fa:	8b 83       	std	Y+3, r24	; 0x03
    a3fc:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

   flag = _atomic_start();
    a3fe:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a402:	80 93 25 0a 	sts	0x0A25, r24
    
    lib_print_usart(*pcByte);
    a406:	8c 81       	ldd	r24, Y+4	; 0x04
    a408:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    pcByte--;
    lib_print_usart(*pcByte);
    a40c:	8b 81       	ldd	r24, Y+3	; 0x03
    a40e:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    pcByte--;
    lib_print_usart(*pcByte);
    a412:	8a 81       	ldd	r24, Y+2	; 0x02
    a414:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    pcByte--;
    lib_print_usart(*pcByte);
    a418:	89 81       	ldd	r24, Y+1	; 0x01
    a41a:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
   _atomic_end(flag);
    a41e:	80 91 25 0a 	lds	r24, 0x0A25
    a422:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
	
} 
    a426:	0f 90       	pop	r0
    a428:	0f 90       	pop	r0
    a42a:	0f 90       	pop	r0
    a42c:	0f 90       	pop	r0
    a42e:	cf 91       	pop	r28
    a430:	df 91       	pop	r29
    a432:	08 95       	ret

0000a434 <lib_print_integer>:

//-------------------------------------------------------------------------
void lib_print_integer(int32_t a, int32_t b, int32_t c, int32_t d)
{
    a434:	af 92       	push	r10
    a436:	bf 92       	push	r11
    a438:	cf 92       	push	r12
    a43a:	df 92       	push	r13
    a43c:	ef 92       	push	r14
    a43e:	ff 92       	push	r15
    a440:	0f 93       	push	r16
    a442:	1f 93       	push	r17
    a444:	df 93       	push	r29
    a446:	cf 93       	push	r28
    a448:	cd b7       	in	r28, 0x3d	; 61
    a44a:	de b7       	in	r29, 0x3e	; 62
    a44c:	60 97       	sbiw	r28, 0x10	; 16
    a44e:	0f b6       	in	r0, 0x3f	; 63
    a450:	f8 94       	cli
    a452:	de bf       	out	0x3e, r29	; 62
    a454:	0f be       	out	0x3f, r0	; 63
    a456:	cd bf       	out	0x3d, r28	; 61
    a458:	69 83       	std	Y+1, r22	; 0x01
    a45a:	7a 83       	std	Y+2, r23	; 0x02
    a45c:	8b 83       	std	Y+3, r24	; 0x03
    a45e:	9c 83       	std	Y+4, r25	; 0x04
    a460:	2d 83       	std	Y+5, r18	; 0x05
    a462:	3e 83       	std	Y+6, r19	; 0x06
    a464:	4f 83       	std	Y+7, r20	; 0x07
    a466:	58 87       	std	Y+8, r21	; 0x08
    a468:	e9 86       	std	Y+9, r14	; 0x09
    a46a:	fa 86       	std	Y+10, r15	; 0x0a
    a46c:	0b 87       	std	Y+11, r16	; 0x0b
    a46e:	1c 87       	std	Y+12, r17	; 0x0c
    a470:	ad 86       	std	Y+13, r10	; 0x0d
    a472:	be 86       	std	Y+14, r11	; 0x0e
    a474:	cf 86       	std	Y+15, r12	; 0x0f
    a476:	d8 8a       	std	Y+16, r13	; 0x10
 
   flag = _atomic_start();
    a478:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a47c:	80 93 25 0a 	sts	0x0A25, r24
  
    lib_print_usart(1);
    a480:	81 e0       	ldi	r24, 0x01	; 1
    a482:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    lib_usart_put_long(*(uint32_t *) (&a));
    a486:	69 81       	ldd	r22, Y+1	; 0x01
    a488:	7a 81       	ldd	r23, Y+2	; 0x02
    a48a:	8b 81       	ldd	r24, Y+3	; 0x03
    a48c:	9c 81       	ldd	r25, Y+4	; 0x04
    a48e:	0e 94 f5 51 	call	0xa3ea	; 0xa3ea <lib_usart_put_long>
    lib_usart_put_long(*(uint32_t *) (&b));
    a492:	6d 81       	ldd	r22, Y+5	; 0x05
    a494:	7e 81       	ldd	r23, Y+6	; 0x06
    a496:	8f 81       	ldd	r24, Y+7	; 0x07
    a498:	98 85       	ldd	r25, Y+8	; 0x08
    a49a:	0e 94 f5 51 	call	0xa3ea	; 0xa3ea <lib_usart_put_long>
    lib_usart_put_long(*(uint32_t *) (&c));
    a49e:	69 85       	ldd	r22, Y+9	; 0x09
    a4a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    a4a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    a4a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    a4a6:	0e 94 f5 51 	call	0xa3ea	; 0xa3ea <lib_usart_put_long>
    lib_usart_put_long(*(uint32_t *) (&d));
    a4aa:	6d 85       	ldd	r22, Y+13	; 0x0d
    a4ac:	7e 85       	ldd	r23, Y+14	; 0x0e
    a4ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    a4b0:	98 89       	ldd	r25, Y+16	; 0x10
    a4b2:	0e 94 f5 51 	call	0xa3ea	; 0xa3ea <lib_usart_put_long>

  _atomic_end(flag);	
    a4b6:	80 91 25 0a 	lds	r24, 0x0A25
    a4ba:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    a4be:	60 96       	adiw	r28, 0x10	; 16
    a4c0:	0f b6       	in	r0, 0x3f	; 63
    a4c2:	f8 94       	cli
    a4c4:	de bf       	out	0x3e, r29	; 62
    a4c6:	0f be       	out	0x3f, r0	; 63
    a4c8:	cd bf       	out	0x3d, r28	; 61
    a4ca:	cf 91       	pop	r28
    a4cc:	df 91       	pop	r29
    a4ce:	1f 91       	pop	r17
    a4d0:	0f 91       	pop	r16
    a4d2:	ff 90       	pop	r15
    a4d4:	ef 90       	pop	r14
    a4d6:	df 90       	pop	r13
    a4d8:	cf 90       	pop	r12
    a4da:	bf 90       	pop	r11
    a4dc:	af 90       	pop	r10
    a4de:	08 95       	ret

0000a4e0 <lib_usart_put_chip_hex>:
 
 

//-------------------------------------------------------------------------
void lib_usart_put_chip_hex(uint8_t cChip)
{
    a4e0:	1f 93       	push	r17
    a4e2:	18 2f       	mov	r17, r24
  
   flag = _atomic_start();
    a4e4:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a4e8:	80 93 25 0a 	sts	0x0A25, r24
   
    if (cChip > 9)
    a4ec:	1a 30       	cpi	r17, 0x0A	; 10
    a4ee:	50 f4       	brcc	.+20     	; 0xa504 <lib_usart_put_chip_hex+0x24>
    {
        lib_print_usart('a' + cChip - 10);
    }
    else
    {
        lib_print_usart('0' + cChip);
    a4f0:	81 2f       	mov	r24, r17
    a4f2:	80 5d       	subi	r24, 0xD0	; 208
    a4f4:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    }
	
	 _atomic_end(flag);
    a4f8:	80 91 25 0a 	lds	r24, 0x0A25
    a4fc:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    a500:	1f 91       	pop	r17
    a502:	08 95       	ret
  
   flag = _atomic_start();
   
    if (cChip > 9)
    {
        lib_print_usart('a' + cChip - 10);
    a504:	81 2f       	mov	r24, r17
    a506:	89 5a       	subi	r24, 0xA9	; 169
    a508:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    else
    {
        lib_print_usart('0' + cChip);
    }
	
	 _atomic_end(flag);
    a50c:	80 91 25 0a 	lds	r24, 0x0A25
    a510:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    a514:	1f 91       	pop	r17
    a516:	08 95       	ret

0000a518 <lib_usart_put_hex>:

 

//-------------------------------------------------------------------------
void lib_usart_put_hex(uint8_t c)
{ 
    a518:	1f 93       	push	r17
    a51a:	18 2f       	mov	r17, r24
   
   flag = _atomic_start();
    a51c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a520:	80 93 25 0a 	sts	0x0A25, r24
   
    lib_usart_put_chip_hex(c >> 4);
    a524:	81 2f       	mov	r24, r17
    a526:	82 95       	swap	r24
    a528:	8f 70       	andi	r24, 0x0F	; 15
    a52a:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <lib_usart_put_chip_hex>
    lib_usart_put_chip_hex(c & 0xf);
    a52e:	81 2f       	mov	r24, r17
    a530:	8f 70       	andi	r24, 0x0F	; 15
    a532:	0e 94 70 52 	call	0xa4e0	; 0xa4e0 <lib_usart_put_chip_hex>
	
	 _atomic_end(flag);
    a536:	80 91 25 0a 	lds	r24, 0x0A25
    a53a:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    a53e:	1f 91       	pop	r17
    a540:	08 95       	ret

0000a542 <lib_print_usart_string>:
}


//-------------------------------------------------------------------------
void lib_print_usart_string(char *p)
{
    a542:	cf 93       	push	r28
    a544:	df 93       	push	r29
    a546:	ec 01       	movw	r28, r24
   
   flag = _atomic_start();
    a548:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a54c:	80 93 25 0a 	sts	0x0A25, r24
   
    lib_print_usart(0xFC);
    a550:	8c ef       	ldi	r24, 0xFC	; 252
    a552:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    while ((*p) != '\0')
    a556:	88 81       	ld	r24, Y
    a558:	88 23       	and	r24, r24
    a55a:	31 f0       	breq	.+12     	; 0xa568 <lib_print_usart_string+0x26>
    {
        lib_print_usart(*p);
    a55c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
        p++;
    a560:	21 96       	adiw	r28, 0x01	; 1
{
   
   flag = _atomic_start();
   
    lib_print_usart(0xFC);
    while ((*p) != '\0')
    a562:	88 81       	ld	r24, Y
    a564:	88 23       	and	r24, r24
    a566:	d1 f7       	brne	.-12     	; 0xa55c <lib_print_usart_string+0x1a>
    {
        lib_print_usart(*p);
        p++;
    }
    lib_print_usart(0xFC);
    a568:	8c ef       	ldi	r24, 0xFC	; 252
    a56a:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
  
    _atomic_end(flag);
    a56e:	80 91 25 0a 	lds	r24, 0x0A25
    a572:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
	
}
    a576:	df 91       	pop	r29
    a578:	cf 91       	pop	r28
    a57a:	08 95       	ret

0000a57c <lib_print_string_lengthN>:
}
      

//-------------------------------------------------------------------------
void lib_print_string_lengthN(char *p, uint8_t n)
{
    a57c:	ff 92       	push	r15
    a57e:	0f 93       	push	r16
    a580:	1f 93       	push	r17
    a582:	cf 93       	push	r28
    a584:	df 93       	push	r29
    a586:	08 2f       	mov	r16, r24
    a588:	f9 2e       	mov	r15, r25
    a58a:	16 2f       	mov	r17, r22
    uint8_t i;
    
   flag = _atomic_start();
    a58c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a590:	80 93 25 0a 	sts	0x0A25, r24
    
    lib_print_usart(0xFA);
    a594:	8a ef       	ldi	r24, 0xFA	; 250
    a596:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    lib_print_usart(n); 
    a59a:	81 2f       	mov	r24, r17
    a59c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    for (i = 0; i < n; i++)
    a5a0:	11 23       	and	r17, r17
    a5a2:	59 f0       	breq	.+22     	; 0xa5ba <lib_print_string_lengthN+0x3e>
    a5a4:	80 2f       	mov	r24, r16
    a5a6:	9f 2d       	mov	r25, r15
    a5a8:	9c 01       	movw	r18, r24
    a5aa:	e9 01       	movw	r28, r18
    {
        lib_print_usart(*p);
    a5ac:	89 91       	ld	r24, Y+
    a5ae:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    
   flag = _atomic_start();
    
    lib_print_usart(0xFA);
    lib_print_usart(n); 
    for (i = 0; i < n; i++)
    a5b2:	9e 01       	movw	r18, r28
    a5b4:	20 1b       	sub	r18, r16
    a5b6:	21 17       	cp	r18, r17
    a5b8:	c8 f3       	brcs	.-14     	; 0xa5ac <lib_print_string_lengthN+0x30>
    {
        lib_print_usart(*p);
        p++;
    }
  //  usartPrint(0xFA);
	  lib_print_usart(0xFC);
    a5ba:	8c ef       	ldi	r24, 0xFC	; 252
    a5bc:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    lib_print_usart_string("\n"); 
    a5c0:	80 e4       	ldi	r24, 0x40	; 64
    a5c2:	91 e0       	ldi	r25, 0x01	; 1
    a5c4:	0e 94 a1 52 	call	0xa542	; 0xa542 <lib_print_usart_string>
    lib_print_usart(0xFC);
    a5c8:	8c ef       	ldi	r24, 0xFC	; 252
    a5ca:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    
	_atomic_end(flag);
    a5ce:	80 91 25 0a 	lds	r24, 0x0A25
    a5d2:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    a5d6:	df 91       	pop	r29
    a5d8:	cf 91       	pop	r28
    a5da:	1f 91       	pop	r17
    a5dc:	0f 91       	pop	r16
    a5de:	ff 90       	pop	r15
    a5e0:	08 95       	ret

0000a5e2 <lib_print_usart_8bit>:
 



void lib_print_usart_8bit(uint8_t c)
{
    a5e2:	1f 93       	push	r17
    a5e4:	18 2f       	mov	r17, r24
  
   flag = _atomic_start();
    a5e6:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a5ea:	80 93 25 0a 	sts	0x0A25, r24
   
	
   lib_print_usart(0xFA);
    a5ee:	8a ef       	ldi	r24, 0xFA	; 250
    a5f0:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
   lib_print_usart(c);
    a5f4:	81 2f       	mov	r24, r17
    a5f6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
   lib_print_usart(0xFA);
    a5fa:	8a ef       	ldi	r24, 0xFA	; 250
    a5fc:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
   
    _atomic_end(flag);
    a600:	80 91 25 0a 	lds	r24, 0x0A25
    a604:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    a608:	1f 91       	pop	r17
    a60a:	08 95       	ret

0000a60c <lib_printf_uinteger32>:
	_atomic_end(flag);
}

//-------------------------------------------------------------------------
void lib_printf_uinteger32(uint32_t l)
{
    a60c:	cf 92       	push	r12
    a60e:	df 92       	push	r13
    a610:	ef 92       	push	r14
    a612:	ff 92       	push	r15
    a614:	0f 93       	push	r16
    a616:	1f 93       	push	r17
    a618:	6b 01       	movw	r12, r22
    a61a:	7c 01       	movw	r14, r24
   flag = _atomic_start();
    a61c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a620:	80 93 25 0a 	sts	0x0A25, r24
   
    itoa(lib_get_node_id(), (char *)localbuffer, 10);
    a624:	0e 94 ef 54 	call	0xa9de	; 0xa9de <lib_get_node_id>
    a628:	04 ee       	ldi	r16, 0xE4	; 228
    a62a:	13 e0       	ldi	r17, 0x03	; 3
    a62c:	b8 01       	movw	r22, r16
    a62e:	4a e0       	ldi	r20, 0x0A	; 10
    a630:	50 e0       	ldi	r21, 0x00	; 0
    a632:	0e 94 17 51 	call	0xa22e	; 0xa22e <itoa>
    lib_print_usart_string((char *)localbuffer);
    a636:	c8 01       	movw	r24, r16
    a638:	0e 94 a1 52 	call	0xa542	; 0xa542 <lib_print_usart_string>
    lib_print_usart_string(": ");		
    a63c:	82 e4       	ldi	r24, 0x42	; 66
    a63e:	91 e0       	ldi	r25, 0x01	; 1
    a640:	0e 94 a1 52 	call	0xa542	; 0xa542 <lib_print_usart_string>
    
    lib_print_usart(0xFE);
    a644:	8e ef       	ldi	r24, 0xFE	; 254
    a646:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    lib_usart_put_long(l);
    a64a:	c7 01       	movw	r24, r14
    a64c:	b6 01       	movw	r22, r12
    a64e:	0e 94 f5 51 	call	0xa3ea	; 0xa3ea <lib_usart_put_long>
    lib_print_usart(0xFE);
    a652:	8e ef       	ldi	r24, 0xFE	; 254
    a654:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
	
	_atomic_end(flag);
    a658:	80 91 25 0a 	lds	r24, 0x0A25
    a65c:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    a660:	1f 91       	pop	r17
    a662:	0f 91       	pop	r16
    a664:	ff 90       	pop	r15
    a666:	ef 90       	pop	r14
    a668:	df 90       	pop	r13
    a66a:	cf 90       	pop	r12
    a66c:	08 95       	ret

0000a66e <lib_printf_integer_u32ln>:
#endif
}

//-------------------------------------------------------------------------
void lib_printf_integer_u32ln(uint32_t val)
{
    a66e:	df 92       	push	r13
    a670:	ef 92       	push	r14
    a672:	ff 92       	push	r15
    a674:	0f 93       	push	r16
    a676:	1f 93       	push	r17
    a678:	7b 01       	movw	r14, r22
    a67a:	8c 01       	movw	r16, r24
#ifdef PLATFORM_AVR
    _atomic_t currentatomic;
    currentatomic = _atomic_start();
    a67c:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a680:	d8 2e       	mov	r13, r24
     lib_printf_uinteger32(val);
    a682:	c8 01       	movw	r24, r16
    a684:	b7 01       	movw	r22, r14
    a686:	0e 94 06 53 	call	0xa60c	; 0xa60c <lib_printf_uinteger32>
     lib_print_usart_string("\n"); 
    a68a:	80 e4       	ldi	r24, 0x40	; 64
    a68c:	91 e0       	ldi	r25, 0x01	; 1
    a68e:	0e 94 a1 52 	call	0xa542	; 0xa542 <lib_print_usart_string>
	_atomic_end(currentatomic);
    a692:	8d 2d       	mov	r24, r13
    a694:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
   
#endif
}
    a698:	1f 91       	pop	r17
    a69a:	0f 91       	pop	r16
    a69c:	ff 90       	pop	r15
    a69e:	ef 90       	pop	r14
    a6a0:	df 90       	pop	r13
    a6a2:	08 95       	ret

0000a6a4 <lib_printf_integer32>:
	 _atomic_end(flag);
}

//-------------------------------------------------------------------------
void lib_printf_integer32(int32_t a)
{
    a6a4:	0f 93       	push	r16
    a6a6:	1f 93       	push	r17
    a6a8:	df 93       	push	r29
    a6aa:	cf 93       	push	r28
    a6ac:	00 d0       	rcall	.+0      	; 0xa6ae <lib_printf_integer32+0xa>
    a6ae:	00 d0       	rcall	.+0      	; 0xa6b0 <lib_printf_integer32+0xc>
    a6b0:	cd b7       	in	r28, 0x3d	; 61
    a6b2:	de b7       	in	r29, 0x3e	; 62
    a6b4:	69 83       	std	Y+1, r22	; 0x01
    a6b6:	7a 83       	std	Y+2, r23	; 0x02
    a6b8:	8b 83       	std	Y+3, r24	; 0x03
    a6ba:	9c 83       	std	Y+4, r25	; 0x04
   
   flag = _atomic_start();
    a6bc:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    a6c0:	80 93 25 0a 	sts	0x0A25, r24
  
	   
    itoa(lib_get_node_id(), (char *)localbuffer, 10);
    a6c4:	0e 94 ef 54 	call	0xa9de	; 0xa9de <lib_get_node_id>
    a6c8:	04 ee       	ldi	r16, 0xE4	; 228
    a6ca:	13 e0       	ldi	r17, 0x03	; 3
    a6cc:	b8 01       	movw	r22, r16
    a6ce:	4a e0       	ldi	r20, 0x0A	; 10
    a6d0:	50 e0       	ldi	r21, 0x00	; 0
    a6d2:	0e 94 17 51 	call	0xa22e	; 0xa22e <itoa>
    lib_print_usart_string((char *)localbuffer);
    a6d6:	c8 01       	movw	r24, r16
    a6d8:	0e 94 a1 52 	call	0xa542	; 0xa542 <lib_print_usart_string>
    lib_print_usart_string(": ");	
    a6dc:	82 e4       	ldi	r24, 0x42	; 66
    a6de:	91 e0       	ldi	r25, 0x01	; 1
    a6e0:	0e 94 a1 52 	call	0xa542	; 0xa542 <lib_print_usart_string>
    lib_print_usart(0xFD);
    a6e4:	8d ef       	ldi	r24, 0xFD	; 253
    a6e6:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
    lib_usart_put_long(*(uint32_t *) (&a));
    a6ea:	69 81       	ldd	r22, Y+1	; 0x01
    a6ec:	7a 81       	ldd	r23, Y+2	; 0x02
    a6ee:	8b 81       	ldd	r24, Y+3	; 0x03
    a6f0:	9c 81       	ldd	r25, Y+4	; 0x04
    a6f2:	0e 94 f5 51 	call	0xa3ea	; 0xa3ea <lib_usart_put_long>
    lib_print_usart(0xFD);
    a6f6:	8d ef       	ldi	r24, 0xFD	; 253
    a6f8:	0e 94 c7 51 	call	0xa38e	; 0xa38e <lib_print_usart>
	
	_atomic_end(flag);
    a6fc:	80 91 25 0a 	lds	r24, 0x0A25
    a700:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    a704:	0f 90       	pop	r0
    a706:	0f 90       	pop	r0
    a708:	0f 90       	pop	r0
    a70a:	0f 90       	pop	r0
    a70c:	cf 91       	pop	r28
    a70e:	df 91       	pop	r29
    a710:	1f 91       	pop	r17
    a712:	0f 91       	pop	r16
    a714:	08 95       	ret

0000a716 <lib_printf_string_with_id>:
	
}


void lib_printf_string_with_id(char *p)
{     
    a716:	ef 92       	push	r14
    a718:	ff 92       	push	r15
    a71a:	0f 93       	push	r16
    a71c:	1f 93       	push	r17
    a71e:	7c 01       	movw	r14, r24
      
	  itoa(lib_get_node_id(), (char *)localbuffer, 10);
    a720:	0e 94 ef 54 	call	0xa9de	; 0xa9de <lib_get_node_id>
    a724:	04 ee       	ldi	r16, 0xE4	; 228
    a726:	13 e0       	ldi	r17, 0x03	; 3
    a728:	b8 01       	movw	r22, r16
    a72a:	4a e0       	ldi	r20, 0x0A	; 10
    a72c:	50 e0       	ldi	r21, 0x00	; 0
    a72e:	0e 94 17 51 	call	0xa22e	; 0xa22e <itoa>
    lib_print_usart_string((char *)localbuffer);
    a732:	c8 01       	movw	r24, r16
    a734:	0e 94 a1 52 	call	0xa542	; 0xa542 <lib_print_usart_string>
	  lib_print_usart_string(": ");	
    a738:	82 e4       	ldi	r24, 0x42	; 66
    a73a:	91 e0       	ldi	r25, 0x01	; 1
    a73c:	0e 94 a1 52 	call	0xa542	; 0xa542 <lib_print_usart_string>
	  lib_print_usart_string(p); 
    a740:	c7 01       	movw	r24, r14
    a742:	0e 94 a1 52 	call	0xa542	; 0xa542 <lib_print_usart_string>
	
}
    a746:	1f 91       	pop	r17
    a748:	0f 91       	pop	r16
    a74a:	ff 90       	pop	r15
    a74c:	ef 90       	pop	r14
    a74e:	08 95       	ret

0000a750 <lib_printf_string_energy_wrapper>:



void lib_printf_string_energy_wrapper(char *p)
{
    a750:	0f 93       	push	r16
    a752:	1f 93       	push	r17
    a754:	8c 01       	movw	r16, r24
     lib_thread** current_thread;
	   uint8_t length;
	   
	   length = lib_string_length(p);
    a756:	0e 94 d1 53 	call	0xa7a2	; 0xa7a2 <lib_string_length>
	   
     current_thread = lib_get_current_thread();      
    a75a:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>

  	 //(*current_thread)->ecbptr->remainenergy -= (uint16_t)SERIAL_SEND * (uint16_t)length;           
      
         		 
     lib_printf_string_with_id(p);
    a75e:	c8 01       	movw	r24, r16
    a760:	0e 94 8b 53 	call	0xa716	; 0xa716 <lib_printf_string_with_id>
     
}
    a764:	1f 91       	pop	r17
    a766:	0f 91       	pop	r16
    a768:	08 95       	ret

0000a76a <lib_sounder_on>:
#include "../types/types.h"
void lib_sounder_on()
{
                          
  void (*sounderfp)() = (void (*)(void))SOUNDER_ON_FUNCTION; 
  sounderfp();    
    a76a:	e8 e1       	ldi	r30, 0x18	; 24
    a76c:	fd ee       	ldi	r31, 0xED	; 237
    a76e:	09 95       	icall
}
    a770:	08 95       	ret

0000a772 <lib_sounder_off>:

void lib_sounder_off()
{
                          
  void (*sounderfp)() = (void (*)(void))SOUNDER_OFF_FUNCTION; 
  sounderfp();    
    a772:	ec e1       	ldi	r30, 0x1C	; 28
    a774:	fd ee       	ldi	r31, 0xED	; 237
    a776:	09 95       	icall
}
    a778:	08 95       	ret

0000a77a <lib_hex2value>:
#include "libstring.h"
#include "../types/types.h"


uint16_t lib_hex2value(uint8_t hex)
{
    a77a:	98 2f       	mov	r25, r24
  char a = (char)hex;
  uint16_t high;

  if ((a>='0')&&(a<='9'))
    a77c:	80 53       	subi	r24, 0x30	; 48
    a77e:	8a 30       	cpi	r24, 0x0A	; 10
    a780:	40 f0       	brcs	.+16     	; 0xa792 <lib_hex2value+0x18>
	     high = a-'0';
  else
		 high = a-'A'+ 10;
    a782:	29 2f       	mov	r18, r25
    a784:	33 27       	eor	r19, r19
    a786:	27 fd       	sbrc	r18, 7
    a788:	30 95       	com	r19
    a78a:	27 53       	subi	r18, 0x37	; 55
    a78c:	30 40       	sbci	r19, 0x00	; 0
  return high;

}
    a78e:	c9 01       	movw	r24, r18
    a790:	08 95       	ret
{
  char a = (char)hex;
  uint16_t high;

  if ((a>='0')&&(a<='9'))
	     high = a-'0';
    a792:	29 2f       	mov	r18, r25
    a794:	33 27       	eor	r19, r19
    a796:	27 fd       	sbrc	r18, 7
    a798:	30 95       	com	r19
    a79a:	20 53       	subi	r18, 0x30	; 48
    a79c:	30 40       	sbci	r19, 0x00	; 0
  else
		 high = a-'A'+ 10;
  return high;

}
    a79e:	c9 01       	movw	r24, r18
    a7a0:	08 95       	ret

0000a7a2 <lib_string_length>:


int lib_string_length(char* s) {
    a7a2:	dc 01       	movw	r26, r24
	int count=0;
	while(s[count] != '\0')
    a7a4:	8c 91       	ld	r24, X
    a7a6:	88 23       	and	r24, r24
    a7a8:	61 f0       	breq	.+24     	; 0xa7c2 <lib_string_length+0x20>
    a7aa:	20 e0       	ldi	r18, 0x00	; 0
    a7ac:	30 e0       	ldi	r19, 0x00	; 0
		count++;
    a7ae:	2f 5f       	subi	r18, 0xFF	; 255
    a7b0:	3f 4f       	sbci	r19, 0xFF	; 255
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a7b2:	fd 01       	movw	r30, r26
    a7b4:	e2 0f       	add	r30, r18
    a7b6:	f3 1f       	adc	r31, r19
    a7b8:	80 81       	ld	r24, Z
    a7ba:	88 23       	and	r24, r24
    a7bc:	c1 f7       	brne	.-16     	; 0xa7ae <lib_string_length+0xc>
		count++;
	return count;
}
    a7be:	c9 01       	movw	r24, r18
    a7c0:	08 95       	ret
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a7c2:	20 e0       	ldi	r18, 0x00	; 0
    a7c4:	30 e0       	ldi	r19, 0x00	; 0
    a7c6:	fb cf       	rjmp	.-10     	; 0xa7be <lib_string_length+0x1c>

0000a7c8 <lib_mystrncpy>:




void lib_mystrncpy(char *dest, const char *src, uint16_t n)
{
    a7c8:	cf 93       	push	r28
    a7ca:	df 93       	push	r29
    a7cc:	ec 01       	movw	r28, r24
	uint16_t i;
	for (i=0;i<n;i++)
    a7ce:	41 15       	cp	r20, r1
    a7d0:	51 05       	cpc	r21, r1
    a7d2:	79 f0       	breq	.+30     	; 0xa7f2 <lib_mystrncpy+0x2a>
    a7d4:	20 e0       	ldi	r18, 0x00	; 0
    a7d6:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    a7d8:	fe 01       	movw	r30, r28
    a7da:	e2 0f       	add	r30, r18
    a7dc:	f3 1f       	adc	r31, r19
    a7de:	db 01       	movw	r26, r22
    a7e0:	a2 0f       	add	r26, r18
    a7e2:	b3 1f       	adc	r27, r19
    a7e4:	8c 91       	ld	r24, X
    a7e6:	80 83       	st	Z, r24


void lib_mystrncpy(char *dest, const char *src, uint16_t n)
{
	uint16_t i;
	for (i=0;i<n;i++)
    a7e8:	2f 5f       	subi	r18, 0xFF	; 255
    a7ea:	3f 4f       	sbci	r19, 0xFF	; 255
    a7ec:	24 17       	cp	r18, r20
    a7ee:	35 07       	cpc	r19, r21
    a7f0:	98 f3       	brcs	.-26     	; 0xa7d8 <lib_mystrncpy+0x10>
		dest[i] = src[i];
}
    a7f2:	df 91       	pop	r29
    a7f4:	cf 91       	pop	r28
    a7f6:	08 95       	ret

0000a7f8 <lib_mystrcpy>:


void lib_mystrcpy(char *dest, const char *src)
{
    a7f8:	cf 93       	push	r28
    a7fa:	df 93       	push	r29
    a7fc:	eb 01       	movw	r28, r22
	int i;
	i = 0;
	while (src[i]!='\0')
    a7fe:	e8 81       	ld	r30, Y
    a800:	ee 23       	and	r30, r30
    a802:	b1 f0       	breq	.+44     	; 0xa830 <lib_mystrcpy+0x38>
    a804:	20 e0       	ldi	r18, 0x00	; 0
    a806:	30 e0       	ldi	r19, 0x00	; 0
    a808:	a0 e0       	ldi	r26, 0x00	; 0
    a80a:	b0 e0       	ldi	r27, 0x00	; 0
	{ dest[i] = src[i];
    a80c:	a8 0f       	add	r26, r24
    a80e:	b9 1f       	adc	r27, r25
    a810:	ec 93       	st	X, r30
	i++;
    a812:	2f 5f       	subi	r18, 0xFF	; 255
    a814:	3f 4f       	sbci	r19, 0xFF	; 255
    a816:	d9 01       	movw	r26, r18

void lib_mystrcpy(char *dest, const char *src)
{
	int i;
	i = 0;
	while (src[i]!='\0')
    a818:	fe 01       	movw	r30, r28
    a81a:	e2 0f       	add	r30, r18
    a81c:	f3 1f       	adc	r31, r19
    a81e:	e0 81       	ld	r30, Z
    a820:	ee 23       	and	r30, r30
    a822:	a1 f7       	brne	.-24     	; 0xa80c <lib_mystrcpy+0x14>
	{ dest[i] = src[i];
	i++;
	}
	dest[i] = '\0';
    a824:	a8 0f       	add	r26, r24
    a826:	b9 1f       	adc	r27, r25
    a828:	1c 92       	st	X, r1
}
    a82a:	df 91       	pop	r29
    a82c:	cf 91       	pop	r28
    a82e:	08 95       	ret

void lib_mystrcpy(char *dest, const char *src)
{
	int i;
	i = 0;
	while (src[i]!='\0')
    a830:	a0 e0       	ldi	r26, 0x00	; 0
    a832:	b0 e0       	ldi	r27, 0x00	; 0
    a834:	f7 cf       	rjmp	.-18     	; 0xa824 <lib_mystrcpy+0x2c>

0000a836 <lib_dec2char>:
}


char lib_dec2char(uint8_t value) {

	if (/*value >= 0) &&*/(value <=9))
    a836:	8a 30       	cpi	r24, 0x0A	; 10
    a838:	10 f4       	brcc	.+4      	; 0xa83e <lib_dec2char+0x8>
		return (char) (value + 0x30);
    a83a:	80 5d       	subi	r24, 0xD0	; 208
	else
		return 0;
}
    a83c:	08 95       	ret
}


char lib_dec2char(uint8_t value) {

	if (/*value >= 0) &&*/(value <=9))
    a83e:	80 e0       	ldi	r24, 0x00	; 0
    a840:	08 95       	ret

0000a842 <lib_string_int_to_string>:
		return 0;
}


char *lib_string_int_to_string(int num)
{
    a842:	cf 93       	push	r28
    a844:	df 93       	push	r29
    a846:	ec 01       	movw	r28, r24
    a848:	9c 01       	movw	r18, r24
    a84a:	97 fd       	sbrc	r25, 7
    a84c:	41 c0       	rjmp	.+130    	; 0xa8d0 <lib_string_int_to_string+0x8e>
	if (num <0)
		internal = -num;
	else
		internal = num;

	temp[6] = '\0';
    a84e:	10 92 fa 03 	sts	0x03FA, r1
    a852:	45 e0       	ldi	r20, 0x05	; 5
    a854:	10 c0       	rjmp	.+32     	; 0xa876 <lib_string_int_to_string+0x34>
}


char lib_dec2char(uint8_t value) {

	if (/*value >= 0) &&*/(value <=9))
    a856:	80 e0       	ldi	r24, 0x00	; 0
	temp[6] = '\0';

	do
	{
		remainder = internal%10;
		temp[offset]= lib_dec2char(remainder);
    a858:	e4 2f       	mov	r30, r20
    a85a:	f0 e0       	ldi	r31, 0x00	; 0
    a85c:	ec 50       	subi	r30, 0x0C	; 12
    a85e:	fc 4f       	sbci	r31, 0xFC	; 252
    a860:	80 83       	st	Z, r24
		internal = internal/10;
    a862:	c9 01       	movw	r24, r18
    a864:	6a e0       	ldi	r22, 0x0A	; 10
    a866:	70 e0       	ldi	r23, 0x00	; 0
    a868:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
    a86c:	9b 01       	movw	r18, r22
		offset--;
    a86e:	41 50       	subi	r20, 0x01	; 1
	}
	while (internal!=0);
    a870:	61 15       	cp	r22, r1
    a872:	71 05       	cpc	r23, r1
    a874:	49 f0       	breq	.+18     	; 0xa888 <lib_string_int_to_string+0x46>

	temp[6] = '\0';

	do
	{
		remainder = internal%10;
    a876:	c9 01       	movw	r24, r18
    a878:	6a e0       	ldi	r22, 0x0A	; 10
    a87a:	70 e0       	ldi	r23, 0x00	; 0
    a87c:	0e 94 98 56 	call	0xad30	; 0xad30 <__divmodhi4>
}


char lib_dec2char(uint8_t value) {

	if (/*value >= 0) &&*/(value <=9))
    a880:	8a 30       	cpi	r24, 0x0A	; 10
    a882:	48 f7       	brcc	.-46     	; 0xa856 <lib_string_int_to_string+0x14>
		return (char) (value + 0x30);
    a884:	80 5d       	subi	r24, 0xD0	; 208
    a886:	e8 cf       	rjmp	.-48     	; 0xa858 <lib_string_int_to_string+0x16>
		internal = internal/10;
		offset--;
	}
	while (internal!=0);

	if (num<0)
    a888:	d7 fd       	sbrc	r29, 7
    a88a:	18 c0       	rjmp	.+48     	; 0xa8bc <lib_string_int_to_string+0x7a>




	{
		length = 7-offset-1;
    a88c:	86 e0       	ldi	r24, 0x06	; 6
    a88e:	84 1b       	sub	r24, r20
		for (i=0;i<length;i++)
    a890:	81 f0       	breq	.+32     	; 0xa8b2 <lib_string_int_to_string+0x70>
    a892:	e4 2f       	mov	r30, r20
    a894:	f0 e0       	ldi	r31, 0x00	; 0
    a896:	eb 50       	subi	r30, 0x0B	; 11
    a898:	fc 4f       	sbci	r31, 0xFC	; 252
    a89a:	a4 ef       	ldi	r26, 0xF4	; 244
    a89c:	b3 e0       	ldi	r27, 0x03	; 3
    a89e:	81 50       	subi	r24, 0x01	; 1
    a8a0:	28 2f       	mov	r18, r24
    a8a2:	30 e0       	ldi	r19, 0x00	; 0
    a8a4:	2b 50       	subi	r18, 0x0B	; 11
    a8a6:	3c 4f       	sbci	r19, 0xFC	; 252
			temp[i] = temp[i+offset+1];
    a8a8:	81 91       	ld	r24, Z+
    a8aa:	8d 93       	st	X+, r24



	{
		length = 7-offset-1;
		for (i=0;i<length;i++)
    a8ac:	a2 17       	cp	r26, r18
    a8ae:	b3 07       	cpc	r27, r19
    a8b0:	d9 f7       	brne	.-10     	; 0xa8a8 <lib_string_int_to_string+0x66>
			temp[i] = temp[i+offset+1];
	}
	return temp;
}
    a8b2:	84 ef       	ldi	r24, 0xF4	; 244
    a8b4:	93 e0       	ldi	r25, 0x03	; 3
    a8b6:	df 91       	pop	r29
    a8b8:	cf 91       	pop	r28
    a8ba:	08 95       	ret
		offset--;
	}
	while (internal!=0);

	if (num<0)
	{temp[offset] = '-';
    a8bc:	e4 2f       	mov	r30, r20
    a8be:	f0 e0       	ldi	r31, 0x00	; 0
    a8c0:	ec 50       	subi	r30, 0x0C	; 12
    a8c2:	fc 4f       	sbci	r31, 0xFC	; 252
    a8c4:	8d e2       	ldi	r24, 0x2D	; 45
    a8c6:	80 83       	st	Z, r24
	 if (offset ==0)
    a8c8:	44 23       	and	r20, r20
    a8ca:	99 f3       	breq	.-26     	; 0xa8b2 <lib_string_int_to_string+0x70>
		 return temp;
	 else
		 offset--;
    a8cc:	41 50       	subi	r20, 0x01	; 1
    a8ce:	de cf       	rjmp	.-68     	; 0xa88c <lib_string_int_to_string+0x4a>
		return 0;
}


char *lib_string_int_to_string(int num)
{
    a8d0:	22 27       	eor	r18, r18
    a8d2:	33 27       	eor	r19, r19
    a8d4:	28 1b       	sub	r18, r24
    a8d6:	39 0b       	sbc	r19, r25
    a8d8:	ba cf       	rjmp	.-140    	; 0xa84e <lib_string_int_to_string+0xc>

0000a8da <lib_string_append>:
	}
	return temp;
}

void lib_string_append(char *base, char *string)
{
    a8da:	0f 93       	push	r16
    a8dc:	1f 93       	push	r17
    a8de:	cf 93       	push	r28
    a8e0:	df 93       	push	r29
    a8e2:	8c 01       	movw	r16, r24
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a8e4:	fc 01       	movw	r30, r24
    a8e6:	80 81       	ld	r24, Z
    a8e8:	88 23       	and	r24, r24
    a8ea:	c1 f1       	breq	.+112    	; 0xa95c <lib_string_append+0x82>
    a8ec:	40 e0       	ldi	r20, 0x00	; 0
    a8ee:	50 e0       	ldi	r21, 0x00	; 0
		count++;
    a8f0:	4f 5f       	subi	r20, 0xFF	; 255
    a8f2:	5f 4f       	sbci	r21, 0xFF	; 255
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a8f4:	e8 01       	movw	r28, r16
    a8f6:	c4 0f       	add	r28, r20
    a8f8:	d5 1f       	adc	r29, r21
    a8fa:	88 81       	ld	r24, Y
    a8fc:	88 23       	and	r24, r24
    a8fe:	c1 f7       	brne	.-16     	; 0xa8f0 <lib_string_append+0x16>
		count++;
    a900:	fb 01       	movw	r30, r22
    a902:	80 81       	ld	r24, Z
    a904:	88 23       	and	r24, r24
    a906:	69 f1       	breq	.+90     	; 0xa962 <lib_string_append+0x88>
    a908:	20 e0       	ldi	r18, 0x00	; 0
    a90a:	30 e0       	ldi	r19, 0x00	; 0
    a90c:	2f 5f       	subi	r18, 0xFF	; 255
    a90e:	3f 4f       	sbci	r19, 0xFF	; 255
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a910:	fb 01       	movw	r30, r22
    a912:	e2 0f       	add	r30, r18
    a914:	f3 1f       	adc	r31, r19
    a916:	80 81       	ld	r24, Z
    a918:	88 23       	and	r24, r24
    a91a:	c1 f7       	brne	.-16     	; 0xa90c <lib_string_append+0x32>
    a91c:	90 e0       	ldi	r25, 0x00	; 0
    a91e:	a0 e0       	ldi	r26, 0x00	; 0
    a920:	b0 e0       	ldi	r27, 0x00	; 0
    a922:	e8 01       	movw	r28, r16
    a924:	c4 0f       	add	r28, r20
    a926:	d5 1f       	adc	r29, r21
    a928:	e0 e0       	ldi	r30, 0x00	; 0
    a92a:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t i;
	length1 = lib_string_length(base);
	length2 = lib_string_length(string);
	for (i=0;i<length2;i++)
	{
		base[i+length1] = string[i];
    a92c:	ac 0f       	add	r26, r28
    a92e:	bd 1f       	adc	r27, r29
    a930:	e6 0f       	add	r30, r22
    a932:	f7 1f       	adc	r31, r23
    a934:	80 81       	ld	r24, Z
    a936:	8c 93       	st	X, r24
{
	int length1, length2;
	uint8_t i;
	length1 = lib_string_length(base);
	length2 = lib_string_length(string);
	for (i=0;i<length2;i++)
    a938:	9f 5f       	subi	r25, 0xFF	; 255
    a93a:	e9 2f       	mov	r30, r25
    a93c:	f0 e0       	ldi	r31, 0x00	; 0
    a93e:	df 01       	movw	r26, r30
    a940:	e2 17       	cp	r30, r18
    a942:	f3 07       	cpc	r31, r19
    a944:	9c f3       	brlt	.-26     	; 0xa92c <lib_string_append+0x52>
	{
		base[i+length1] = string[i];

	}
	base[length1+length2] = '\0';
    a946:	20 0f       	add	r18, r16
    a948:	31 1f       	adc	r19, r17
    a94a:	42 0f       	add	r20, r18
    a94c:	53 1f       	adc	r21, r19
    a94e:	fa 01       	movw	r30, r20
    a950:	10 82       	st	Z, r1
}
    a952:	df 91       	pop	r29
    a954:	cf 91       	pop	r28
    a956:	1f 91       	pop	r17
    a958:	0f 91       	pop	r16
    a95a:	08 95       	ret
}


int lib_string_length(char* s) {
	int count=0;
	while(s[count] != '\0')
    a95c:	40 e0       	ldi	r20, 0x00	; 0
    a95e:	50 e0       	ldi	r21, 0x00	; 0
    a960:	cf cf       	rjmp	.-98     	; 0xa900 <lib_string_append+0x26>
    a962:	20 e0       	ldi	r18, 0x00	; 0
    a964:	30 e0       	ldi	r19, 0x00	; 0
    a966:	ef cf       	rjmp	.-34     	; 0xa946 <lib_string_append+0x6c>

0000a968 <lib_string_split>:
	}
	base[length1+length2] = '\0';
}

char* lib_string_split(char ** string, char delimiter)
{
    a968:	cf 93       	push	r28
    a96a:	df 93       	push	r29
    a96c:	ec 01       	movw	r28, r24
	uint16_t i;
	char* output = (*string);
    a96e:	a8 81       	ld	r26, Y
    a970:	b9 81       	ldd	r27, Y+1	; 0x01

	for (i = 0; output[i] != 0; i++) 
    a972:	8c 91       	ld	r24, X
    a974:	88 23       	and	r24, r24
    a976:	11 f1       	breq	.+68     	; 0xa9bc <lib_string_split+0x54>
		if (output[i] == delimiter) {
    a978:	86 17       	cp	r24, r22
    a97a:	11 f1       	breq	.+68     	; 0xa9c0 <lib_string_split+0x58>
			output[i] = 0;
			*string = output + i + 1;
			return output;
    a97c:	ad 01       	movw	r20, r26
    a97e:	4f 5f       	subi	r20, 0xFF	; 255
    a980:	5f 4f       	sbci	r21, 0xFF	; 255
    a982:	80 e0       	ldi	r24, 0x00	; 0
    a984:	90 e0       	ldi	r25, 0x00	; 0
    a986:	05 c0       	rjmp	.+10     	; 0xa992 <lib_string_split+0x2a>
{
	uint16_t i;
	char* output = (*string);

	for (i = 0; output[i] != 0; i++) 
		if (output[i] == delimiter) {
    a988:	af 01       	movw	r20, r30
    a98a:	4f 5f       	subi	r20, 0xFF	; 255
    a98c:	5f 4f       	sbci	r21, 0xFF	; 255
    a98e:	26 17       	cp	r18, r22
    a990:	59 f0       	breq	.+22     	; 0xa9a8 <lib_string_split+0x40>
char* lib_string_split(char ** string, char delimiter)
{
	uint16_t i;
	char* output = (*string);

	for (i = 0; output[i] != 0; i++) 
    a992:	01 96       	adiw	r24, 0x01	; 1
    a994:	fa 01       	movw	r30, r20
    a996:	20 81       	ld	r18, Z
    a998:	22 23       	and	r18, r18
    a99a:	b1 f7       	brne	.-20     	; 0xa988 <lib_string_split+0x20>
			output[i] = 0;
			*string = output + i + 1;
			return output;
		}

	*string = output + i;
    a99c:	f9 83       	std	Y+1, r31	; 0x01
    a99e:	e8 83       	st	Y, r30
	return output;
}
    a9a0:	cd 01       	movw	r24, r26
    a9a2:	df 91       	pop	r29
    a9a4:	cf 91       	pop	r28
    a9a6:	08 95       	ret
{
	uint16_t i;
	char* output = (*string);

	for (i = 0; output[i] != 0; i++) 
		if (output[i] == delimiter) {
    a9a8:	01 96       	adiw	r24, 0x01	; 1
			output[i] = 0;
    a9aa:	10 82       	st	Z, r1
			*string = output + i + 1;
    a9ac:	8a 0f       	add	r24, r26
    a9ae:	9b 1f       	adc	r25, r27
    a9b0:	99 83       	std	Y+1, r25	; 0x01
    a9b2:	88 83       	st	Y, r24
			return output;
		}

	*string = output + i;
	return output;
}
    a9b4:	cd 01       	movw	r24, r26
    a9b6:	df 91       	pop	r29
    a9b8:	cf 91       	pop	r28
    a9ba:	08 95       	ret
char* lib_string_split(char ** string, char delimiter)
{
	uint16_t i;
	char* output = (*string);

	for (i = 0; output[i] != 0; i++) 
    a9bc:	fd 01       	movw	r30, r26
    a9be:	ee cf       	rjmp	.-36     	; 0xa99c <lib_string_split+0x34>
		if (output[i] == delimiter) {
    a9c0:	fd 01       	movw	r30, r26
    a9c2:	81 e0       	ldi	r24, 0x01	; 1
    a9c4:	90 e0       	ldi	r25, 0x00	; 0
    a9c6:	f1 cf       	rjmp	.-30     	; 0xa9aa <lib_string_split+0x42>

0000a9c8 <lib_random>:
int lib_random()
{

	 int ret;
   void (*getrandomfp)(void) = (void (*)(void))GET_RANDOM_NUMBER_FUNCTION;
   asm volatile("push r20" "\n\t"
    a9c8:	4f 93       	push	r20
    a9ca:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getrandomfp();
    a9cc:	e8 e0       	ldi	r30, 0x08	; 8
    a9ce:	fa ee       	ldi	r31, 0xEA	; 234
    a9d0:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a9d2:	24 2f       	mov	r18, r20
    a9d4:	35 2f       	mov	r19, r21
	              "mov %B0, r21" "\n\t"
				 :"=r" (ret)
				 :
                );
   asm volatile("pop r21" "\n\t"
    a9d6:	5f 91       	pop	r21
    a9d8:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return ret;

}
    a9da:	c9 01       	movw	r24, r18
    a9dc:	08 95       	ret

0000a9de <lib_get_node_id>:
uint16_t lib_get_node_id()
	{

	   int ret;
	   void (*fp)(void) = (void (*)(void))GET_NODE_ID_FUNCTION;
	   asm volatile("push r20" "\n\t"
    a9de:	4f 93       	push	r20
    a9e0:	5f 93       	push	r21
					"push r21" "\n\t"
					::);
	   fp();
    a9e2:	e0 e0       	ldi	r30, 0x00	; 0
    a9e4:	fa ee       	ldi	r31, 0xEA	; 234
    a9e6:	09 95       	icall
	   asm volatile(" mov %A0, r20" "\n\t"
    a9e8:	24 2f       	mov	r18, r20
    a9ea:	35 2f       	mov	r19, r21
					  "mov %B0, r21" "\n\t"
					 :"=r" (ret)
					 :
					);
	   asm volatile("pop r21" "\n\t"
    a9ec:	5f 91       	pop	r21
    a9ee:	4f 91       	pop	r20
					 "pop r20" "\n\t"
					  ::);
	   return ret;

	}
    a9f0:	c9 01       	movw	r24, r18
    a9f2:	08 95       	ret

0000a9f4 <lib_set_node_id>:
	{



	   void (*fp)(void) = (void (*)(void))SET_NODE_ID_FUNCTION;
	   asm volatile("push r20" "\n\t"
    a9f4:	4f 93       	push	r20
    a9f6:	5f 93       	push	r21
					"push r21" "\n\t"
					::);

	   asm volatile(" mov r20, %A0" "\n\t"
    a9f8:	48 2f       	mov	r20, r24
    a9fa:	59 2f       	mov	r21, r25
					  "mov r21, %B0" "\n\t"
					 :
					 :"r" (nodeid)
					);
	   fp();
    a9fc:	e4 e0       	ldi	r30, 0x04	; 4
    a9fe:	fa ee       	ldi	r31, 0xEA	; 234
    aa00:	09 95       	icall
	   asm volatile("pop r21" "\n\t"
    aa02:	5f 91       	pop	r21
    aa04:	4f 91       	pop	r20
					 "pop r20" "\n\t"
					  ::);
	   return;

	}
    aa06:	08 95       	ret

0000aa08 <lib_get_current_thread>:

lib_thread **lib_get_current_thread()
{
   lib_thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
    aa08:	4f 93       	push	r20
    aa0a:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    aa0c:	e0 e8       	ldi	r30, 0x80	; 128
    aa0e:	fa ee       	ldi	r31, 0xEA	; 234
    aa10:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    aa12:	24 2f       	mov	r18, r20
    aa14:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
    aa16:	5f 91       	pop	r21
    aa18:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return current_thread; 
}
    aa1a:	c9 01       	movw	r24, r18
    aa1c:	08 95       	ret

0000aa1e <lib_get_kernel_stack_ptr>:

void **lib_get_kernel_stack_ptr()
	{
   void **ptr;
   void (*getaddrfp)(void) = (void (*)(void))GET_KERNEL_STACK_PTR_ADDRESS; 
   asm volatile("push r20" "\n\t"
    aa1e:	4f 93       	push	r20
    aa20:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    aa22:	e0 e8       	ldi	r30, 0x80	; 128
    aa24:	fb ee       	ldi	r31, 0xEB	; 235
    aa26:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    aa28:	24 2f       	mov	r18, r20
    aa2a:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (ptr)
				 :
                );
    asm volatile("pop r21" "\n\t"
    aa2c:	5f 91       	pop	r21
    aa2e:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return ptr; 
}
    aa30:	c9 01       	movw	r24, r18
    aa32:	08 95       	ret

0000aa34 <lib_get_current_thread_index>:
uint8_t lib_get_current_thread_index()
{
   
   uint16_t index; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_INDEX_FUNCTION; 
   asm volatile("push r20" "\n\t"
    aa34:	4f 93       	push	r20
    aa36:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    aa38:	e4 e8       	ldi	r30, 0x84	; 132
    aa3a:	fa ee       	ldi	r31, 0xEA	; 234
    aa3c:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    aa3e:	84 2f       	mov	r24, r20
    aa40:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (index)
				 :
                );
    asm volatile("pop r21" "\n\t"
    aa42:	5f 91       	pop	r21
    aa44:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return (uint8_t)index; 
}
    aa46:	08 95       	ret

0000aa48 <lib_get_thread_table_start>:
lib_thread *lib_get_thread_table_start()
{
	 lib_thread *fp;
	 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_TABLE_START; 
   asm volatile("push r20" "\n\t"
    aa48:	4f 93       	push	r20
    aa4a:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    aa4c:	e8 e8       	ldi	r30, 0x88	; 136
    aa4e:	fa ee       	ldi	r31, 0xEA	; 234
    aa50:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    aa52:	24 2f       	mov	r18, r20
    aa54:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (fp)
				 :
                );
    asm volatile("pop r21" "\n\t"
    aa56:	5f 91       	pop	r21
    aa58:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return fp; 
	
}
    aa5a:	c9 01       	movw	r24, r18
    aa5c:	08 95       	ret

0000aa5e <lib_sleep_thread>:

void lib_sleep_thread(uint16_t milliseconds)
{
    aa5e:	0f 93       	push	r16
    aa60:	1f 93       	push	r17
    aa62:	8c 01       	movw	r16, r24
	             "pop r25" "\n\t"
	              ::);
 */
 
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
    aa64:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    aa68:	dc 01       	movw	r26, r24
     
   (*current_thread)->state = 4;
    aa6a:	ed 91       	ld	r30, X+
    aa6c:	fc 91       	ld	r31, X
    aa6e:	11 97       	sbiw	r26, 0x01	; 1
    aa70:	84 e0       	ldi	r24, 0x04	; 4
    aa72:	82 83       	std	Z+2, r24	; 0x02
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
    aa74:	ed 91       	ld	r30, X+
    aa76:	fc 91       	ld	r31, X
    aa78:	16 8f       	std	Z+30, r17	; 0x1e
    aa7a:	05 8f       	std	Z+29, r16	; 0x1d


void lib_yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    aa7c:	ec e8       	ldi	r30, 0x8C	; 140
    aa7e:	fa ee       	ldi	r31, 0xEA	; 234
    aa80:	09 95       	icall
     
   (*current_thread)->state = 4;
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
   
   lib_yield(); 
}
    aa82:	1f 91       	pop	r17
    aa84:	0f 91       	pop	r16
    aa86:	08 95       	ret

0000aa88 <lib_hibernate_thread>:

void lib_hibernate_thread()
{
 
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
    aa88:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    aa8c:	fc 01       	movw	r30, r24
     
   (*current_thread)->state = 5; 
    aa8e:	01 90       	ld	r0, Z+
    aa90:	f0 81       	ld	r31, Z
    aa92:	e0 2d       	mov	r30, r0
    aa94:	85 e0       	ldi	r24, 0x05	; 5
    aa96:	82 83       	std	Z+2, r24	; 0x02


void lib_yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    aa98:	ec e8       	ldi	r30, 0x8C	; 140
    aa9a:	fa ee       	ldi	r31, 0xEA	; 234
    aa9c:	09 95       	icall
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
     
   (*current_thread)->state = 5; 
   lib_yield(); 
}
    aa9e:	08 95       	ret

0000aaa0 <lib_yield>:


void lib_yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    aaa0:	ec e8       	ldi	r30, 0x8C	; 140
    aaa2:	fa ee       	ldi	r31, 0xEA	; 234
    aaa4:	09 95       	icall
}
    aaa6:	08 95       	ret

0000aaa8 <syscall_post_thread_task>:


void syscall_post_thread_task()
{
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK; 
 postthreadfp();                              
    aaa8:	e0 e9       	ldi	r30, 0x90	; 144
    aaaa:	fa ee       	ldi	r31, 0xEA	; 234
    aaac:	09 95       	icall
}
    aaae:	08 95       	ret

0000aab0 <lib_post_new_task>:


void lib_post_new_task(void (*tp) (void), uint16_t priority)
{
   void (*fp)(void) = (void (*)(void))POST_TASK_SYSCALL; 
   asm volatile("push r20" "\n\t"
    aab0:	4f 93       	push	r20
    aab2:	5f 93       	push	r21
    aab4:	6f 93       	push	r22
    aab6:	7f 93       	push	r23
                "push r21" "\n\t"
				"push r22" "\n\t"
				"push r23" "\n\t"
                ::);
   
   asm volatile(" mov r20, %A0" "\n\t"
    aab8:	48 2f       	mov	r20, r24
    aaba:	59 2f       	mov	r21, r25
				 :
				 :"r" (tp)
                );


   asm volatile(" mov r22, %A0" "\n\t"
    aabc:	66 2f       	mov	r22, r22
    aabe:	77 2f       	mov	r23, r23
	             "mov r23, %B0" "\n\t"
				 :
				 :"r" (priority)
                );

  fp(); 
    aac0:	e0 e0       	ldi	r30, 0x00	; 0
    aac2:	fb ee       	ldi	r31, 0xEB	; 235
    aac4:	09 95       	icall

  asm volatile("pop r23" "\n\t"
    aac6:	7f 91       	pop	r23
    aac8:	6f 91       	pop	r22
	           "pop r22" "\n\t"
	              ::);

  asm volatile("pop r21" "\n\t"
    aaca:	5f 91       	pop	r21
    aacc:	4f 91       	pop	r20
	           "pop r20" "\n\t"
	              ::);
  return; 


}
    aace:	08 95       	ret

0000aad0 <syscall_post_thread_task_no_logging>:


void syscall_post_thread_task_no_logging()
{
	void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK_NOLOG; 
  postthreadfp();  
    aad0:	e4 e9       	ldi	r30, 0x94	; 148
    aad2:	fa ee       	ldi	r31, 0xEA	; 234
    aad4:	09 95       	icall
	
}
    aad6:	08 95       	ret

0000aad8 <lib_set_thread_termination_handler>:


 

void lib_set_thread_termination_handler(void (*tp) (void))
{
    aad8:	0f 93       	push	r16
    aada:	1f 93       	push	r17
    aadc:	8c 01       	movw	r16, r24
   
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
    aade:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    aae2:	fc 01       	movw	r30, r24
     
   (*current_thread)->thread_clear_function = tp; 
    aae4:	01 90       	ld	r0, Z+
    aae6:	f0 81       	ld	r31, Z
    aae8:	e0 2d       	mov	r30, r0
    aaea:	14 8f       	std	Z+28, r17	; 0x1c
    aaec:	03 8f       	std	Z+27, r16	; 0x1b
   return; 
}
    aaee:	1f 91       	pop	r17
    aaf0:	0f 91       	pop	r16
    aaf2:	08 95       	ret

0000aaf4 <lib_file_barrier_block>:





void lib_file_barrier_block(uint8_t type, uint8_t id){
    aaf4:	df 92       	push	r13
    aaf6:	ef 92       	push	r14
    aaf8:	ff 92       	push	r15
    aafa:	0f 93       	push	r16
    aafc:	1f 93       	push	r17
    aafe:	e8 2e       	mov	r14, r24
    ab00:	d6 2e       	mov	r13, r22
   
    _atomic_t currentatomic;
	lib_thread **current_thread; 

     
	current_thread = lib_get_current_thread(); 
    ab02:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    ab06:	8c 01       	movw	r16, r24

    currentatomic = _atomic_start();
    ab08:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    ab0c:	f8 2e       	mov	r15, r24
    
      (*current_thread)->state = STATE_IO;
    ab0e:	d8 01       	movw	r26, r16
    ab10:	ed 91       	ld	r30, X+
    ab12:	fc 91       	ld	r31, X
    ab14:	11 97       	sbiw	r26, 0x01	; 1
    ab16:	86 e0       	ldi	r24, 0x06	; 6
    ab18:	82 83       	std	Z+2, r24	; 0x02
      (*current_thread)->data.iostate.type = type;
    ab1a:	ed 91       	ld	r30, X+
    ab1c:	fc 91       	ld	r31, X
    ab1e:	11 97       	sbiw	r26, 0x01	; 1
    ab20:	e5 8e       	std	Z+29, r14	; 0x1d
      (*current_thread)->data.iostate.id = id;
    ab22:	ed 91       	ld	r30, X+
    ab24:	fc 91       	ld	r31, X
    ab26:	d6 8e       	std	Z+30, r13	; 0x1e
      lib_yield();
    ab28:	0e 94 50 55 	call	0xaaa0	; 0xaaa0 <lib_yield>
    
    _atomic_end(currentatomic);
    ab2c:	8f 2d       	mov	r24, r15
    ab2e:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
}
    ab32:	1f 91       	pop	r17
    ab34:	0f 91       	pop	r16
    ab36:	ff 90       	pop	r15
    ab38:	ef 90       	pop	r14
    ab3a:	df 90       	pop	r13
    ab3c:	08 95       	ret

0000ab3e <registerDataPacket>:
    syscall_post_thread_task();
}

//Registers the data packet for receving incoming packets. This enables receving both remote and local data packets
void registerDataPacket()
{
    ab3e:	1f 93       	push	r17
    _atomic_t currentatomic;
    radiohandletype *radiohandleaddr;
    void (*getaddrfp) (void) = (void (*)(void))REGISTER_RADIO_RECEIVE_EVENT;

    //Finds the radio handle, so that when this code is ported to be externally used, it will be obtained via a system call 
    radiohandleaddr = lib_get_current_radio_receive_handle_addr();
    ab40:	0e 94 1f 50 	call	0xa03e	; 0xa03e <lib_get_current_radio_receive_handle_addr>
    ab44:	fc 01       	movw	r30, r24
    incomingDataLength = 0;
    ab46:	10 92 1c 04 	sts	0x041C, r1
    //set up the radiohandleaddr data structures
    radiohandleaddr->port = 16;
    ab4a:	80 e1       	ldi	r24, 0x10	; 16
    ab4c:	90 e0       	ldi	r25, 0x00	; 0
    ab4e:	91 83       	std	Z+1, r25	; 0x01
    ab50:	80 83       	st	Z, r24
    radiohandleaddr->maxLength = 32;
    ab52:	80 e2       	ldi	r24, 0x20	; 32
    ab54:	82 83       	std	Z+2, r24	; 0x02
    radiohandleaddr->dataReady = &incomingDataLength;
    ab56:	8c e1       	ldi	r24, 0x1C	; 28
    ab58:	94 e0       	ldi	r25, 0x04	; 4
    ab5a:	94 83       	std	Z+4, r25	; 0x04
    ab5c:	83 83       	std	Z+3, r24	; 0x03
    radiohandleaddr->data = incomingMsg;
    ab5e:	8c ef       	ldi	r24, 0xFC	; 252
    ab60:	93 e0       	ldi	r25, 0x03	; 3
    ab62:	96 83       	std	Z+6, r25	; 0x06
    ab64:	85 83       	std	Z+5, r24	; 0x05
    radiohandleaddr->packetinfo = incomingPacketInfo;
    ab66:	8d e1       	ldi	r24, 0x1D	; 29
    ab68:	94 e0       	ldi	r25, 0x04	; 4
    ab6a:	90 87       	std	Z+8, r25	; 0x08
    ab6c:	87 83       	std	Z+7, r24	; 0x07
    radiohandleaddr->handlefunc = wakeupMeOnDataMsg;
    ab6e:	81 e0       	ldi	r24, 0x01	; 1
    ab70:	96 e5       	ldi	r25, 0x56	; 86
    ab72:	93 87       	std	Z+11, r25	; 0x0b
    ab74:	82 87       	std	Z+10, r24	; 0x0a
    //close the interrupt     
    currentatomic = _atomic_start();
    ab76:	0e 94 96 3c 	call	0x792c	; 0x792c <_atomic_start>
    ab7a:	18 2f       	mov	r17, r24
    iswakenup = 0;
    ab7c:	10 92 fb 03 	sts	0x03FB, r1
    //call the radio handle set to store the data structure into the handle vectors 
    getaddrfp();
    ab80:	e8 e1       	ldi	r30, 0x18	; 24
    ab82:	fc ee       	ldi	r31, 0xEC	; 236
    ab84:	09 95       	icall
    //syscall_registerEvent();
    //open the interrupt 
    _atomic_end(currentatomic);
    ab86:	81 2f       	mov	r24, r17
    ab88:	0e 94 93 3c 	call	0x7926	; 0x7926 <_atomic_end>
    return;
}
    ab8c:	1f 91       	pop	r17
    ab8e:	08 95       	ret

0000ab90 <logger>:
void logger()
{
    
     
    //register both the negibhorhood update and the message incoming 
    thiscurrentthread = lib_get_current_thread();
    ab90:	0e 94 04 55 	call	0xaa08	; 0xaa08 <lib_get_current_thread>
    ab94:	fc 01       	movw	r30, r24
    ab96:	90 93 bf 0b 	sts	0x0BBF, r25
    ab9a:	80 93 be 0b 	sts	0x0BBE, r24
    currentthread = *thiscurrentthread;
    ab9e:	80 81       	ld	r24, Z
    aba0:	91 81       	ldd	r25, Z+1	; 0x01
    aba2:	90 93 bd 0b 	sts	0x0BBD, r25
    aba6:	80 93 bc 0b 	sts	0x0BBC, r24
    registerDataPacket();
    abaa:	0e 94 9f 55 	call	0xab3e	; 0xab3e <registerDataPacket>
     
    fp = lib_mfopen("/data", "w");
    abae:	85 e4       	ldi	r24, 0x45	; 69
    abb0:	91 e0       	ldi	r25, 0x01	; 1
    abb2:	6b e4       	ldi	r22, 0x4B	; 75
    abb4:	71 e0       	ldi	r23, 0x01	; 1
    abb6:	0e 94 c0 4f 	call	0x9f80	; 0x9f80 <lib_mfopen>
    abba:	90 93 91 08 	sts	0x0891, r25
    abbe:	80 93 90 08 	sts	0x0890, r24
    abc2:	02 c0       	rjmp	.+4      	; 0xabc8 <logger+0x38>
            iswakenup = 0; 
			lib_green_toggle();
        }
        else
        {
            lib_hibernate_thread();
    abc4:	0e 94 44 55 	call	0xaa88	; 0xaa88 <lib_hibernate_thread>
     
    fp = lib_mfopen("/data", "w");

    while (1)
    {
        if (iswakenup == 1)
    abc8:	80 91 fb 03 	lds	r24, 0x03FB
    abcc:	81 30       	cpi	r24, 0x01	; 1
    abce:	d1 f7       	brne	.-12     	; 0xabc4 <logger+0x34>
        {

            lib_mfwrite(fp, (char *)incomingPacketInfo, 2);
    abd0:	80 91 90 08 	lds	r24, 0x0890
    abd4:	90 91 91 08 	lds	r25, 0x0891
    abd8:	6d e1       	ldi	r22, 0x1D	; 29
    abda:	74 e0       	ldi	r23, 0x04	; 4
    abdc:	42 e0       	ldi	r20, 0x02	; 2
    abde:	50 e0       	ldi	r21, 0x00	; 0
    abe0:	0e 94 1e 4f 	call	0x9e3c	; 0x9e3c <lib_mfwrite>
			lib_mfseek(fp, 2, 1);
    abe4:	80 91 90 08 	lds	r24, 0x0890
    abe8:	90 91 91 08 	lds	r25, 0x0891
    abec:	62 e0       	ldi	r22, 0x02	; 2
    abee:	70 e0       	ldi	r23, 0x00	; 0
    abf0:	41 e0       	ldi	r20, 0x01	; 1
    abf2:	50 e0       	ldi	r21, 0x00	; 0
    abf4:	0e 94 f0 4e 	call	0x9de0	; 0x9de0 <lib_mfseek>
            iswakenup = 0; 
    abf8:	10 92 fb 03 	sts	0x03FB, r1
			lib_green_toggle();
    abfc:	0e 94 f7 4f 	call	0x9fee	; 0x9fee <lib_green_toggle>
    ac00:	e3 cf       	rjmp	.-58     	; 0xabc8 <logger+0x38>

0000ac02 <wakeupMeOnDataMsg>:

//Handles incoming data msg. This usually wakesup the current thread 
void wakeupMeOnDataMsg()
{
    //(*thiscurrentthread)->state = STATE_ACTIVE;
    currentthread->state = STATE_ACTIVE;
    ac02:	e0 91 bc 0b 	lds	r30, 0x0BBC
    ac06:	f0 91 bd 0b 	lds	r31, 0x0BBD
    ac0a:	82 e0       	ldi	r24, 0x02	; 2
    ac0c:	82 83       	std	Z+2, r24	; 0x02
    iswakenup = 1;
    ac0e:	81 e0       	ldi	r24, 0x01	; 1
    ac10:	80 93 fb 03 	sts	0x03FB, r24
    syscall_post_thread_task();
    ac14:	0e 94 54 55 	call	0xaaa8	; 0xaaa8 <syscall_post_thread_task>
}
    ac18:	08 95       	ret

0000ac1a <blink>:
uint16_t counter; 

uint16_t addr; 

void blink()
{
    ac1a:	cf 93       	push	r28
    ac1c:	df 93       	push	r29

   char *str = "hello,world"; 
   uint8_t *addrptr; 
   
   addr = 256; 
    ac1e:	80 e0       	ldi	r24, 0x00	; 0
    ac20:	91 e0       	ldi	r25, 0x01	; 1
    ac22:	90 93 5d 0c 	sts	0x0C5D, r25
    ac26:	80 93 5c 0c 	sts	0x0C5C, r24
   lib_mfseek(filefp, 10, 1);
}
   lib_mfclose(filefp); 
*/
	 
   for (counter=0; counter<3000; counter++)
    ac2a:	10 92 5b 0c 	sts	0x0C5B, r1
    ac2e:	10 92 5a 0c 	sts	0x0C5A, r1
    ac32:	80 e0       	ldi	r24, 0x00	; 0
    ac34:	90 e0       	ldi	r25, 0x00	; 0
    ac36:	c1 e0       	ldi	r28, 0x01	; 1
    ac38:	d0 e0       	ldi	r29, 0x00	; 0
   	{
   	 if (counter<1000)
    ac3a:	23 e0       	ldi	r18, 0x03	; 3
    ac3c:	88 3e       	cpi	r24, 0xE8	; 232
    ac3e:	92 07       	cpc	r25, r18
    ac40:	70 f1       	brcs	.+92     	; 0xac9e <blink+0x84>
	   lib_red_toggle();   
     else if (counter <2000)
    ac42:	80 5d       	subi	r24, 0xD0	; 208
    ac44:	97 40       	sbci	r25, 0x07	; 7
    ac46:	40 f5       	brcc	.+80     	; 0xac98 <blink+0x7e>
	    lib_yellow_toggle();
    ac48:	0e 94 ff 4f 	call	0x9ffe	; 0x9ffe <lib_yellow_toggle>
		else
		 lib_green_toggle();

     addrptr = (uint8_t*)addr; 
    ac4c:	20 91 5c 0c 	lds	r18, 0x0C5C
    ac50:	30 91 5d 0c 	lds	r19, 0x0C5D
     
   	 if (addr<4000)
    ac54:	8f e0       	ldi	r24, 0x0F	; 15
    ac56:	20 3a       	cpi	r18, 0xA0	; 160
    ac58:	38 07       	cpc	r19, r24
    ac5a:	58 f1       	brcs	.+86     	; 0xacb2 <blink+0x98>
   	 lib_radio_send_msg(12, 0xFFFF, 80, (uint8_t*)addrptr);
   	 
   	 addr+=50; 
    ac5c:	2e 5c       	subi	r18, 0xCE	; 206
    ac5e:	3f 4f       	sbci	r19, 0xFF	; 255
    ac60:	30 93 5d 0c 	sts	0x0C5D, r19
    ac64:	20 93 5c 0c 	sts	0x0C5C, r18
     
    
     lib_sleep_thread(100);
    ac68:	84 e6       	ldi	r24, 0x64	; 100
    ac6a:	90 e0       	ldi	r25, 0x00	; 0
    ac6c:	0e 94 2f 55 	call	0xaa5e	; 0xaa5e <lib_sleep_thread>
     if (counter == 2999)
    ac70:	80 91 5a 0c 	lds	r24, 0x0C5A
    ac74:	90 91 5b 0c 	lds	r25, 0x0C5B
    ac78:	2b e0       	ldi	r18, 0x0B	; 11
    ac7a:	87 3b       	cpi	r24, 0xB7	; 183
    ac7c:	92 07       	cpc	r25, r18
    ac7e:	91 f0       	breq	.+36     	; 0xaca4 <blink+0x8a>
   lib_mfseek(filefp, 10, 1);
}
   lib_mfclose(filefp); 
*/
	 
   for (counter=0; counter<3000; counter++)
    ac80:	01 96       	adiw	r24, 0x01	; 1
    ac82:	90 93 5b 0c 	sts	0x0C5B, r25
    ac86:	80 93 5a 0c 	sts	0x0C5A, r24
    ac8a:	2b e0       	ldi	r18, 0x0B	; 11
    ac8c:	88 3b       	cpi	r24, 0xB8	; 184
    ac8e:	92 07       	cpc	r25, r18
    ac90:	a0 f2       	brcs	.-88     	; 0xac3a <blink+0x20>
     lib_sleep_thread(100);
     if (counter == 2999)
     	counter = 0; 
	   }
  	return; 
}
    ac92:	df 91       	pop	r29
    ac94:	cf 91       	pop	r28
    ac96:	08 95       	ret
   	 if (counter<1000)
	   lib_red_toggle();   
     else if (counter <2000)
	    lib_yellow_toggle();
		else
		 lib_green_toggle();
    ac98:	0e 94 f7 4f 	call	0x9fee	; 0x9fee <lib_green_toggle>
    ac9c:	d7 cf       	rjmp	.-82     	; 0xac4c <blink+0x32>
*/
	 
   for (counter=0; counter<3000; counter++)
   	{
   	 if (counter<1000)
	   lib_red_toggle();   
    ac9e:	0e 94 fb 4f 	call	0x9ff6	; 0x9ff6 <lib_red_toggle>
    aca2:	d4 cf       	rjmp	.-88     	; 0xac4c <blink+0x32>
   lib_mfseek(filefp, 10, 1);
}
   lib_mfclose(filefp); 
*/
	 
   for (counter=0; counter<3000; counter++)
    aca4:	81 e0       	ldi	r24, 0x01	; 1
    aca6:	90 e0       	ldi	r25, 0x00	; 0
    aca8:	d0 93 5b 0c 	sts	0x0C5B, r29
    acac:	c0 93 5a 0c 	sts	0x0C5A, r28
    acb0:	c4 cf       	rjmp	.-120    	; 0xac3a <blink+0x20>
		 lib_green_toggle();

     addrptr = (uint8_t*)addr; 
     
   	 if (addr<4000)
   	 lib_radio_send_msg(12, 0xFFFF, 80, (uint8_t*)addrptr);
    acb2:	8c e0       	ldi	r24, 0x0C	; 12
    acb4:	90 e0       	ldi	r25, 0x00	; 0
    acb6:	6f ef       	ldi	r22, 0xFF	; 255
    acb8:	7f ef       	ldi	r23, 0xFF	; 255
    acba:	40 e5       	ldi	r20, 0x50	; 80
    acbc:	0e 94 c5 50 	call	0xa18a	; 0xa18a <lib_radio_send_msg>
    acc0:	20 91 5c 0c 	lds	r18, 0x0C5C
    acc4:	30 91 5d 0c 	lds	r19, 0x0C5D
    acc8:	c9 cf       	rjmp	.-110    	; 0xac5c <blink+0x42>

0000acca <__mulsi3>:
    acca:	62 9f       	mul	r22, r18
    accc:	d0 01       	movw	r26, r0
    acce:	73 9f       	mul	r23, r19
    acd0:	f0 01       	movw	r30, r0
    acd2:	82 9f       	mul	r24, r18
    acd4:	e0 0d       	add	r30, r0
    acd6:	f1 1d       	adc	r31, r1
    acd8:	64 9f       	mul	r22, r20
    acda:	e0 0d       	add	r30, r0
    acdc:	f1 1d       	adc	r31, r1
    acde:	92 9f       	mul	r25, r18
    ace0:	f0 0d       	add	r31, r0
    ace2:	83 9f       	mul	r24, r19
    ace4:	f0 0d       	add	r31, r0
    ace6:	74 9f       	mul	r23, r20
    ace8:	f0 0d       	add	r31, r0
    acea:	65 9f       	mul	r22, r21
    acec:	f0 0d       	add	r31, r0
    acee:	99 27       	eor	r25, r25
    acf0:	72 9f       	mul	r23, r18
    acf2:	b0 0d       	add	r27, r0
    acf4:	e1 1d       	adc	r30, r1
    acf6:	f9 1f       	adc	r31, r25
    acf8:	63 9f       	mul	r22, r19
    acfa:	b0 0d       	add	r27, r0
    acfc:	e1 1d       	adc	r30, r1
    acfe:	f9 1f       	adc	r31, r25
    ad00:	bd 01       	movw	r22, r26
    ad02:	cf 01       	movw	r24, r30
    ad04:	11 24       	eor	r1, r1
    ad06:	08 95       	ret

0000ad08 <__udivmodhi4>:
    ad08:	aa 1b       	sub	r26, r26
    ad0a:	bb 1b       	sub	r27, r27
    ad0c:	51 e1       	ldi	r21, 0x11	; 17
    ad0e:	07 c0       	rjmp	.+14     	; 0xad1e <__udivmodhi4_ep>

0000ad10 <__udivmodhi4_loop>:
    ad10:	aa 1f       	adc	r26, r26
    ad12:	bb 1f       	adc	r27, r27
    ad14:	a6 17       	cp	r26, r22
    ad16:	b7 07       	cpc	r27, r23
    ad18:	10 f0       	brcs	.+4      	; 0xad1e <__udivmodhi4_ep>
    ad1a:	a6 1b       	sub	r26, r22
    ad1c:	b7 0b       	sbc	r27, r23

0000ad1e <__udivmodhi4_ep>:
    ad1e:	88 1f       	adc	r24, r24
    ad20:	99 1f       	adc	r25, r25
    ad22:	5a 95       	dec	r21
    ad24:	a9 f7       	brne	.-22     	; 0xad10 <__udivmodhi4_loop>
    ad26:	80 95       	com	r24
    ad28:	90 95       	com	r25
    ad2a:	bc 01       	movw	r22, r24
    ad2c:	cd 01       	movw	r24, r26
    ad2e:	08 95       	ret

0000ad30 <__divmodhi4>:
    ad30:	97 fb       	bst	r25, 7
    ad32:	09 2e       	mov	r0, r25
    ad34:	07 26       	eor	r0, r23
    ad36:	0a d0       	rcall	.+20     	; 0xad4c <__divmodhi4_neg1>
    ad38:	77 fd       	sbrc	r23, 7
    ad3a:	04 d0       	rcall	.+8      	; 0xad44 <__divmodhi4_neg2>
    ad3c:	e5 df       	rcall	.-54     	; 0xad08 <__udivmodhi4>
    ad3e:	06 d0       	rcall	.+12     	; 0xad4c <__divmodhi4_neg1>
    ad40:	00 20       	and	r0, r0
    ad42:	1a f4       	brpl	.+6      	; 0xad4a <__divmodhi4_exit>

0000ad44 <__divmodhi4_neg2>:
    ad44:	70 95       	com	r23
    ad46:	61 95       	neg	r22
    ad48:	7f 4f       	sbci	r23, 0xFF	; 255

0000ad4a <__divmodhi4_exit>:
    ad4a:	08 95       	ret

0000ad4c <__divmodhi4_neg1>:
    ad4c:	f6 f7       	brtc	.-4      	; 0xad4a <__divmodhi4_exit>
    ad4e:	90 95       	com	r25
    ad50:	81 95       	neg	r24
    ad52:	9f 4f       	sbci	r25, 0xFF	; 255
    ad54:	08 95       	ret

0000ad56 <__udivmodsi4>:
    ad56:	a1 e2       	ldi	r26, 0x21	; 33
    ad58:	1a 2e       	mov	r1, r26
    ad5a:	aa 1b       	sub	r26, r26
    ad5c:	bb 1b       	sub	r27, r27
    ad5e:	fd 01       	movw	r30, r26
    ad60:	0d c0       	rjmp	.+26     	; 0xad7c <__udivmodsi4_ep>

0000ad62 <__udivmodsi4_loop>:
    ad62:	aa 1f       	adc	r26, r26
    ad64:	bb 1f       	adc	r27, r27
    ad66:	ee 1f       	adc	r30, r30
    ad68:	ff 1f       	adc	r31, r31
    ad6a:	a2 17       	cp	r26, r18
    ad6c:	b3 07       	cpc	r27, r19
    ad6e:	e4 07       	cpc	r30, r20
    ad70:	f5 07       	cpc	r31, r21
    ad72:	20 f0       	brcs	.+8      	; 0xad7c <__udivmodsi4_ep>
    ad74:	a2 1b       	sub	r26, r18
    ad76:	b3 0b       	sbc	r27, r19
    ad78:	e4 0b       	sbc	r30, r20
    ad7a:	f5 0b       	sbc	r31, r21

0000ad7c <__udivmodsi4_ep>:
    ad7c:	66 1f       	adc	r22, r22
    ad7e:	77 1f       	adc	r23, r23
    ad80:	88 1f       	adc	r24, r24
    ad82:	99 1f       	adc	r25, r25
    ad84:	1a 94       	dec	r1
    ad86:	69 f7       	brne	.-38     	; 0xad62 <__udivmodsi4_loop>
    ad88:	60 95       	com	r22
    ad8a:	70 95       	com	r23
    ad8c:	80 95       	com	r24
    ad8e:	90 95       	com	r25
    ad90:	9b 01       	movw	r18, r22
    ad92:	ac 01       	movw	r20, r24
    ad94:	bd 01       	movw	r22, r26
    ad96:	cf 01       	movw	r24, r30
    ad98:	08 95       	ret

0000ad9a <__divmodsi4>:
    ad9a:	97 fb       	bst	r25, 7
    ad9c:	09 2e       	mov	r0, r25
    ad9e:	05 26       	eor	r0, r21
    ada0:	0e d0       	rcall	.+28     	; 0xadbe <__divmodsi4_neg1>
    ada2:	57 fd       	sbrc	r21, 7
    ada4:	04 d0       	rcall	.+8      	; 0xadae <__divmodsi4_neg2>
    ada6:	d7 df       	rcall	.-82     	; 0xad56 <__udivmodsi4>
    ada8:	0a d0       	rcall	.+20     	; 0xadbe <__divmodsi4_neg1>
    adaa:	00 1c       	adc	r0, r0
    adac:	38 f4       	brcc	.+14     	; 0xadbc <__divmodsi4_exit>

0000adae <__divmodsi4_neg2>:
    adae:	50 95       	com	r21
    adb0:	40 95       	com	r20
    adb2:	30 95       	com	r19
    adb4:	21 95       	neg	r18
    adb6:	3f 4f       	sbci	r19, 0xFF	; 255
    adb8:	4f 4f       	sbci	r20, 0xFF	; 255
    adba:	5f 4f       	sbci	r21, 0xFF	; 255

0000adbc <__divmodsi4_exit>:
    adbc:	08 95       	ret

0000adbe <__divmodsi4_neg1>:
    adbe:	f6 f7       	brtc	.-4      	; 0xadbc <__divmodsi4_exit>
    adc0:	90 95       	com	r25
    adc2:	80 95       	com	r24
    adc4:	70 95       	com	r23
    adc6:	61 95       	neg	r22
    adc8:	7f 4f       	sbci	r23, 0xFF	; 255
    adca:	8f 4f       	sbci	r24, 0xFF	; 255
    adcc:	9f 4f       	sbci	r25, 0xFF	; 255
    adce:	08 95       	ret

0000add0 <do_rand>:
    add0:	af 92       	push	r10
    add2:	bf 92       	push	r11
    add4:	cf 92       	push	r12
    add6:	df 92       	push	r13
    add8:	ef 92       	push	r14
    adda:	ff 92       	push	r15
    addc:	0f 93       	push	r16
    adde:	1f 93       	push	r17
    ade0:	cf 93       	push	r28
    ade2:	df 93       	push	r29
    ade4:	ec 01       	movw	r28, r24
    ade6:	a8 80       	ld	r10, Y
    ade8:	b9 80       	ldd	r11, Y+1	; 0x01
    adea:	ca 80       	ldd	r12, Y+2	; 0x02
    adec:	db 80       	ldd	r13, Y+3	; 0x03
    adee:	a1 14       	cp	r10, r1
    adf0:	b1 04       	cpc	r11, r1
    adf2:	c1 04       	cpc	r12, r1
    adf4:	d1 04       	cpc	r13, r1
    adf6:	41 f4       	brne	.+16     	; 0xae08 <do_rand+0x38>
    adf8:	84 e2       	ldi	r24, 0x24	; 36
    adfa:	a8 2e       	mov	r10, r24
    adfc:	89 ed       	ldi	r24, 0xD9	; 217
    adfe:	b8 2e       	mov	r11, r24
    ae00:	8b e5       	ldi	r24, 0x5B	; 91
    ae02:	c8 2e       	mov	r12, r24
    ae04:	87 e0       	ldi	r24, 0x07	; 7
    ae06:	d8 2e       	mov	r13, r24
    ae08:	c6 01       	movw	r24, r12
    ae0a:	b5 01       	movw	r22, r10
    ae0c:	2d e1       	ldi	r18, 0x1D	; 29
    ae0e:	33 ef       	ldi	r19, 0xF3	; 243
    ae10:	41 e0       	ldi	r20, 0x01	; 1
    ae12:	50 e0       	ldi	r21, 0x00	; 0
    ae14:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    ae18:	27 ea       	ldi	r18, 0xA7	; 167
    ae1a:	31 e4       	ldi	r19, 0x41	; 65
    ae1c:	40 e0       	ldi	r20, 0x00	; 0
    ae1e:	50 e0       	ldi	r21, 0x00	; 0
    ae20:	0e 94 65 56 	call	0xacca	; 0xacca <__mulsi3>
    ae24:	7b 01       	movw	r14, r22
    ae26:	8c 01       	movw	r16, r24
    ae28:	c6 01       	movw	r24, r12
    ae2a:	b5 01       	movw	r22, r10
    ae2c:	2d e1       	ldi	r18, 0x1D	; 29
    ae2e:	33 ef       	ldi	r19, 0xF3	; 243
    ae30:	41 e0       	ldi	r20, 0x01	; 1
    ae32:	50 e0       	ldi	r21, 0x00	; 0
    ae34:	0e 94 cd 56 	call	0xad9a	; 0xad9a <__divmodsi4>
    ae38:	ca 01       	movw	r24, r20
    ae3a:	b9 01       	movw	r22, r18
    ae3c:	2c ee       	ldi	r18, 0xEC	; 236
    ae3e:	34 ef       	ldi	r19, 0xF4	; 244
    ae40:	4f ef       	ldi	r20, 0xFF	; 255
    ae42:	5f ef       	ldi	r21, 0xFF	; 255
    ae44:	0e 94 65 56 	call	0xacca	; 0xacca <__mulsi3>
    ae48:	6e 0d       	add	r22, r14
    ae4a:	7f 1d       	adc	r23, r15
    ae4c:	80 1f       	adc	r24, r16
    ae4e:	91 1f       	adc	r25, r17
    ae50:	97 ff       	sbrs	r25, 7
    ae52:	04 c0       	rjmp	.+8      	; 0xae5c <do_rand+0x8c>
    ae54:	61 50       	subi	r22, 0x01	; 1
    ae56:	70 40       	sbci	r23, 0x00	; 0
    ae58:	80 40       	sbci	r24, 0x00	; 0
    ae5a:	90 48       	sbci	r25, 0x80	; 128
    ae5c:	68 83       	st	Y, r22
    ae5e:	79 83       	std	Y+1, r23	; 0x01
    ae60:	8a 83       	std	Y+2, r24	; 0x02
    ae62:	9b 83       	std	Y+3, r25	; 0x03
    ae64:	9b 01       	movw	r18, r22
    ae66:	3f 77       	andi	r19, 0x7F	; 127
    ae68:	c9 01       	movw	r24, r18
    ae6a:	df 91       	pop	r29
    ae6c:	cf 91       	pop	r28
    ae6e:	1f 91       	pop	r17
    ae70:	0f 91       	pop	r16
    ae72:	ff 90       	pop	r15
    ae74:	ef 90       	pop	r14
    ae76:	df 90       	pop	r13
    ae78:	cf 90       	pop	r12
    ae7a:	bf 90       	pop	r11
    ae7c:	af 90       	pop	r10
    ae7e:	08 95       	ret

0000ae80 <rand_r>:
    ae80:	0e 94 e8 56 	call	0xadd0	; 0xadd0 <do_rand>
    ae84:	08 95       	ret

0000ae86 <rand>:
    ae86:	8d e4       	ldi	r24, 0x4D	; 77
    ae88:	91 e0       	ldi	r25, 0x01	; 1
    ae8a:	0e 94 e8 56 	call	0xadd0	; 0xadd0 <do_rand>
    ae8e:	08 95       	ret

0000ae90 <srand>:
    ae90:	a0 e0       	ldi	r26, 0x00	; 0
    ae92:	b0 e0       	ldi	r27, 0x00	; 0
    ae94:	80 93 4d 01 	sts	0x014D, r24
    ae98:	90 93 4e 01 	sts	0x014E, r25
    ae9c:	a0 93 4f 01 	sts	0x014F, r26
    aea0:	b0 93 50 01 	sts	0x0150, r27
    aea4:	08 95       	ret

0000aea6 <__eerd_block_m128>:
    aea6:	dc 01       	movw	r26, r24
    aea8:	cb 01       	movw	r24, r22

0000aeaa <__eerd_blraw_m128>:
    aeaa:	fc 01       	movw	r30, r24
    aeac:	e1 99       	sbic	0x1c, 1	; 28
    aeae:	fe cf       	rjmp	.-4      	; 0xaeac <__eerd_blraw_m128+0x2>
    aeb0:	06 c0       	rjmp	.+12     	; 0xaebe <__eerd_blraw_m128+0x14>
    aeb2:	ff bb       	out	0x1f, r31	; 31
    aeb4:	ee bb       	out	0x1e, r30	; 30
    aeb6:	e0 9a       	sbi	0x1c, 0	; 28
    aeb8:	31 96       	adiw	r30, 0x01	; 1
    aeba:	0d b2       	in	r0, 0x1d	; 29
    aebc:	0d 92       	st	X+, r0
    aebe:	41 50       	subi	r20, 0x01	; 1
    aec0:	50 40       	sbci	r21, 0x00	; 0
    aec2:	b8 f7       	brcc	.-18     	; 0xaeb2 <__eerd_blraw_m128+0x8>
    aec4:	08 95       	ret

0000aec6 <__eerd_byte_m128>:
    aec6:	e1 99       	sbic	0x1c, 1	; 28
    aec8:	fe cf       	rjmp	.-4      	; 0xaec6 <__eerd_byte_m128>
    aeca:	9f bb       	out	0x1f, r25	; 31
    aecc:	8e bb       	out	0x1e, r24	; 30
    aece:	e0 9a       	sbi	0x1c, 0	; 28
    aed0:	99 27       	eor	r25, r25
    aed2:	8d b3       	in	r24, 0x1d	; 29
    aed4:	08 95       	ret

0000aed6 <__eerd_word_m128>:
    aed6:	a8 e1       	ldi	r26, 0x18	; 24
    aed8:	b0 e0       	ldi	r27, 0x00	; 0
    aeda:	42 e0       	ldi	r20, 0x02	; 2
    aedc:	50 e0       	ldi	r21, 0x00	; 0
    aede:	0c 94 55 57 	jmp	0xaeaa	; 0xaeaa <__eerd_blraw_m128>

0000aee2 <__eewr_block_m128>:
    aee2:	dc 01       	movw	r26, r24
    aee4:	cb 01       	movw	r24, r22
    aee6:	03 c0       	rjmp	.+6      	; 0xaeee <__eewr_block_m128+0xc>
    aee8:	2d 91       	ld	r18, X+
    aeea:	0e 94 7c 57 	call	0xaef8	; 0xaef8 <__eewr_r18_m128>
    aeee:	41 50       	subi	r20, 0x01	; 1
    aef0:	50 40       	sbci	r21, 0x00	; 0
    aef2:	d0 f7       	brcc	.-12     	; 0xaee8 <__eewr_block_m128+0x6>
    aef4:	08 95       	ret

0000aef6 <__eewr_byte_m128>:
    aef6:	26 2f       	mov	r18, r22

0000aef8 <__eewr_r18_m128>:
    aef8:	e1 99       	sbic	0x1c, 1	; 28
    aefa:	fe cf       	rjmp	.-4      	; 0xaef8 <__eewr_r18_m128>
    aefc:	9f bb       	out	0x1f, r25	; 31
    aefe:	8e bb       	out	0x1e, r24	; 30
    af00:	2d bb       	out	0x1d, r18	; 29
    af02:	0f b6       	in	r0, 0x3f	; 63
    af04:	f8 94       	cli
    af06:	e2 9a       	sbi	0x1c, 2	; 28
    af08:	e1 9a       	sbi	0x1c, 1	; 28
    af0a:	0f be       	out	0x3f, r0	; 63
    af0c:	01 96       	adiw	r24, 0x01	; 1
    af0e:	08 95       	ret

0000af10 <__eewr_word_m128>:
    af10:	0e 94 7b 57 	call	0xaef6	; 0xaef6 <__eewr_byte_m128>
    af14:	27 2f       	mov	r18, r23
    af16:	0c 94 7c 57 	jmp	0xaef8	; 0xaef8 <__eewr_r18_m128>

0000af1a <_exit>:
    af1a:	f8 94       	cli

0000af1c <__stop_program>:
    af1c:	ff cf       	rjmp	.-2      	; 0xaf1c <__stop_program>

Disassembly of section .bootloader:

0001e000 <ProgramSetPage>:
    0xEF, 0x93, 0xFF, 0x93, 0xE4, 0xEF, 0xFA, 0xEE, 0x09, 0x95, 0xFF, 0x91,
        0xEF,
    0x91, 0xFF, 0xFF
};
void __attribute__ ((section(".bootloader"))) ProgramSetPage(uint16_t pageno)
{
   1e000:	e6 e5       	ldi	r30, 0x56	; 86
   1e002:	f1 e0       	ldi	r31, 0x01	; 1
    int i;

    for (i = 0; i < 512; i++)
    {
        pagebuffer[i] = 0;
   1e004:	11 92       	st	Z+, r1
};
void __attribute__ ((section(".bootloader"))) ProgramSetPage(uint16_t pageno)
{
    int i;

    for (i = 0; i < 512; i++)
   1e006:	23 e0       	ldi	r18, 0x03	; 3
   1e008:	e6 35       	cpi	r30, 0x56	; 86
   1e00a:	f2 07       	cpc	r31, r18
   1e00c:	d9 f7       	brne	.-10     	; 0x1e004 <ProgramSetPage+0x4>
    {
        pagebuffer[i] = 0;
    }
    pageindex = pageno;
   1e00e:	90 93 55 01 	sts	0x0155, r25
   1e012:	80 93 54 01 	sts	0x0154, r24
    currentpageindex = 0;
   1e016:	10 92 57 03 	sts	0x0357, r1
   1e01a:	10 92 56 03 	sts	0x0356, r1
}
   1e01e:	08 95       	ret

0001e020 <boot_program_page>:
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) boot_program_page(uint32_t page,
                                                                uint8_t * buf)
{
   1e020:	af 92       	push	r10
   1e022:	bf 92       	push	r11
   1e024:	cf 92       	push	r12
   1e026:	df 92       	push	r13
   1e028:	ef 92       	push	r14
   1e02a:	ff 92       	push	r15
   1e02c:	0f 93       	push	r16
   1e02e:	1f 93       	push	r17
   1e030:	cf 93       	push	r28
   1e032:	df 93       	push	r29
   1e034:	5b 01       	movw	r10, r22
   1e036:	6c 01       	movw	r12, r24
   1e038:	ea 01       	movw	r28, r20
    uint16_t i;
    uint8_t sreg;

    // Disable interrupts.
    sreg = SREG;
   1e03a:	7f b7       	in	r23, 0x3f	; 63
    cli();
   1e03c:	f8 94       	cli
    eeprom_busy_wait();
   1e03e:	e1 99       	sbic	0x1c, 1	; 28
   1e040:	fe cf       	rjmp	.-4      	; 0x1e03e <boot_program_page+0x1e>
    boot_page_erase(page);
   1e042:	83 e0       	ldi	r24, 0x03	; 3
   1e044:	f5 01       	movw	r30, r10
   1e046:	c0 92 5b 00 	sts	0x005B, r12
   1e04a:	80 93 68 00 	sts	0x0068, r24
   1e04e:	e8 95       	spm
    boot_spm_busy_wait();       // Wait until the memory is erased.
   1e050:	80 91 68 00 	lds	r24, 0x0068
   1e054:	80 fd       	sbrc	r24, 0
   1e056:	fc cf       	rjmp	.-8      	; 0x1e050 <boot_program_page+0x30>
   1e058:	ee 24       	eor	r14, r14
   1e05a:	ff 24       	eor	r15, r15
   1e05c:	87 01       	movw	r16, r14
    {
        // Set up little-endian word.
        uint16_t w = *buf++;

        w += (*buf++) << 8;
        boot_page_fill(page + i, w);
   1e05e:	61 e0       	ldi	r22, 0x01	; 1
    boot_page_erase(page);
    boot_spm_busy_wait();       // Wait until the memory is erased.
    for (i = 0; i < SPM_PAGESIZE; i += 2)
    {
        // Set up little-endian word.
        uint16_t w = *buf++;
   1e060:	88 81       	ld	r24, Y

        w += (*buf++) << 8;
   1e062:	59 81       	ldd	r21, Y+1	; 0x01
   1e064:	40 e0       	ldi	r20, 0x00	; 0
   1e066:	9a 01       	movw	r18, r20
   1e068:	28 0f       	add	r18, r24
   1e06a:	31 1d       	adc	r19, r1
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) boot_program_page(uint32_t page,
                                                                uint8_t * buf)
{
   1e06c:	22 96       	adiw	r28, 0x02	; 2
    {
        // Set up little-endian word.
        uint16_t w = *buf++;

        w += (*buf++) << 8;
        boot_page_fill(page + i, w);
   1e06e:	d8 01       	movw	r26, r16
   1e070:	c7 01       	movw	r24, r14
   1e072:	8a 0d       	add	r24, r10
   1e074:	9b 1d       	adc	r25, r11
   1e076:	ac 1d       	adc	r26, r12
   1e078:	bd 1d       	adc	r27, r13
   1e07a:	09 01       	movw	r0, r18
   1e07c:	fc 01       	movw	r30, r24
   1e07e:	a0 93 5b 00 	sts	0x005B, r26
   1e082:	60 93 68 00 	sts	0x0068, r22
   1e086:	e8 95       	spm
   1e088:	11 24       	eor	r1, r1
   1e08a:	82 e0       	ldi	r24, 0x02	; 2
   1e08c:	90 e0       	ldi	r25, 0x00	; 0
   1e08e:	a0 e0       	ldi	r26, 0x00	; 0
   1e090:	b0 e0       	ldi	r27, 0x00	; 0
   1e092:	e8 0e       	add	r14, r24
   1e094:	f9 1e       	adc	r15, r25
   1e096:	0a 1f       	adc	r16, r26
   1e098:	1b 1f       	adc	r17, r27
    sreg = SREG;
    cli();
    eeprom_busy_wait();
    boot_page_erase(page);
    boot_spm_busy_wait();       // Wait until the memory is erased.
    for (i = 0; i < SPM_PAGESIZE; i += 2)
   1e09a:	90 e0       	ldi	r25, 0x00	; 0
   1e09c:	e9 16       	cp	r14, r25
   1e09e:	91 e0       	ldi	r25, 0x01	; 1
   1e0a0:	f9 06       	cpc	r15, r25
   1e0a2:	90 e0       	ldi	r25, 0x00	; 0
   1e0a4:	09 07       	cpc	r16, r25
   1e0a6:	90 e0       	ldi	r25, 0x00	; 0
   1e0a8:	19 07       	cpc	r17, r25
   1e0aa:	d1 f6       	brne	.-76     	; 0x1e060 <boot_program_page+0x40>
        uint16_t w = *buf++;

        w += (*buf++) << 8;
        boot_page_fill(page + i, w);
    }
    boot_spm_busy_wait();
   1e0ac:	80 91 68 00 	lds	r24, 0x0068
   1e0b0:	80 fd       	sbrc	r24, 0
   1e0b2:	fc cf       	rjmp	.-8      	; 0x1e0ac <boot_program_page+0x8c>
    boot_page_write(page);      // Store buffer in flash page.
   1e0b4:	85 e0       	ldi	r24, 0x05	; 5
   1e0b6:	f5 01       	movw	r30, r10
   1e0b8:	c0 92 5b 00 	sts	0x005B, r12
   1e0bc:	80 93 68 00 	sts	0x0068, r24
   1e0c0:	e8 95       	spm
    boot_spm_busy_wait();       // Wait until the memory is written.
   1e0c2:	80 91 68 00 	lds	r24, 0x0068
   1e0c6:	80 fd       	sbrc	r24, 0
   1e0c8:	fc cf       	rjmp	.-8      	; 0x1e0c2 <boot_program_page+0xa2>
    // Reenable RWW-section again. We need this if we want to jump back
    // to the application after bootloading.
    boot_rww_enable();
   1e0ca:	81 e1       	ldi	r24, 0x11	; 17
   1e0cc:	80 93 68 00 	sts	0x0068, r24
   1e0d0:	e8 95       	spm
    // Re-enable interrupts (if they were ever enabled).
    SREG = sreg;
   1e0d2:	7f bf       	out	0x3f, r23	; 63
}
   1e0d4:	df 91       	pop	r29
   1e0d6:	cf 91       	pop	r28
   1e0d8:	1f 91       	pop	r17
   1e0da:	0f 91       	pop	r16
   1e0dc:	ff 90       	pop	r15
   1e0de:	ef 90       	pop	r14
   1e0e0:	df 90       	pop	r13
   1e0e2:	cf 90       	pop	r12
   1e0e4:	bf 90       	pop	r11
   1e0e6:	af 90       	pop	r10
   1e0e8:	08 95       	ret

0001e0ea <reprogram>:
}

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
   1e0ea:	ac 01       	movw	r20, r24
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
   1e0ec:	80 e0       	ldi	r24, 0x00	; 0
   1e0ee:	90 e0       	ldi	r25, 0x00	; 0
   1e0f0:	98 2f       	mov	r25, r24
   1e0f2:	87 2f       	mov	r24, r23
   1e0f4:	76 2f       	mov	r23, r22
   1e0f6:	66 27       	eor	r22, r22
   1e0f8:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
    return 0;
}
   1e0fc:	80 e0       	ldi	r24, 0x00	; 0
   1e0fe:	90 e0       	ldi	r25, 0x00	; 0
   1e100:	08 95       	ret

0001e102 <reprogramall>:
}

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogramall(unsigned char
                                                          *program)
{
   1e102:	0f 93       	push	r16
   1e104:	1f 93       	push	r17
   1e106:	cf 93       	push	r28
   1e108:	df 93       	push	r29
   1e10a:	ec 01       	movw	r28, r24
   1e10c:	dc 01       	movw	r26, r24
   1e10e:	60 e0       	ldi	r22, 0x00	; 0
   1e110:	70 e0       	ldi	r23, 0x00	; 0
   1e112:	1f c0       	rjmp	.+62     	; 0x1e152 <reprogramall+0x50>
    {
        a = program[j * 2];
        b = program[j * 2 + 1];
        if ((a >= '0') && (a <= '9'))
        {
            high = a - '0';
   1e114:	42 2f       	mov	r20, r18
   1e116:	50 e0       	ldi	r21, 0x00	; 0
   1e118:	40 53       	subi	r20, 0x30	; 48
   1e11a:	50 40       	sbci	r21, 0x00	; 0
        }
        else
        {
            high = a - 'A' + 10;
        }
        if ((b >= '0') && (b <= '9'))
   1e11c:	83 2f       	mov	r24, r19
   1e11e:	80 53       	subi	r24, 0x30	; 48
   1e120:	8a 30       	cpi	r24, 0x0A	; 10
   1e122:	38 f5       	brcc	.+78     	; 0x1e172 <reprogramall+0x70>
        {
            low = b - '0';
   1e124:	23 2f       	mov	r18, r19
   1e126:	30 e0       	ldi	r19, 0x00	; 0
   1e128:	20 53       	subi	r18, 0x30	; 48
   1e12a:	30 40       	sbci	r19, 0x00	; 0
            low = b - 'A' + 10;
        }

        all = high * 16 + low;
        //This might introduce bugs.
        program[j] = (unsigned char)all;
   1e12c:	fe 01       	movw	r30, r28
   1e12e:	e6 0f       	add	r30, r22
   1e130:	f7 1f       	adc	r31, r23
   1e132:	42 95       	swap	r20
   1e134:	52 95       	swap	r21
   1e136:	50 7f       	andi	r21, 0xF0	; 240
   1e138:	54 27       	eor	r21, r20
   1e13a:	40 7f       	andi	r20, 0xF0	; 240
   1e13c:	54 27       	eor	r21, r20
   1e13e:	24 0f       	add	r18, r20
   1e140:	35 1f       	adc	r19, r21
   1e142:	20 83       	st	Z, r18
    //unsigned char buffer[256];
    unsigned char a, b;
    int j;
    int high, low, all;

    for (j = 0; j < 256; j++)
   1e144:	6f 5f       	subi	r22, 0xFF	; 255
   1e146:	7f 4f       	sbci	r23, 0xFF	; 255
   1e148:	12 96       	adiw	r26, 0x02	; 2
   1e14a:	81 e0       	ldi	r24, 0x01	; 1
   1e14c:	60 30       	cpi	r22, 0x00	; 0
   1e14e:	78 07       	cpc	r23, r24
   1e150:	a9 f0       	breq	.+42     	; 0x1e17c <reprogramall+0x7a>
    {
        a = program[j * 2];
   1e152:	2c 91       	ld	r18, X
        b = program[j * 2 + 1];
   1e154:	11 96       	adiw	r26, 0x01	; 1
   1e156:	3c 91       	ld	r19, X
   1e158:	11 97       	sbiw	r26, 0x01	; 1
        if ((a >= '0') && (a <= '9'))
   1e15a:	82 2f       	mov	r24, r18
   1e15c:	80 53       	subi	r24, 0x30	; 48
   1e15e:	8a 30       	cpi	r24, 0x0A	; 10
   1e160:	c8 f2       	brcs	.-78     	; 0x1e114 <reprogramall+0x12>
        {
            high = a - '0';
        }
        else
        {
            high = a - 'A' + 10;
   1e162:	42 2f       	mov	r20, r18
   1e164:	50 e0       	ldi	r21, 0x00	; 0
   1e166:	47 53       	subi	r20, 0x37	; 55
   1e168:	50 40       	sbci	r21, 0x00	; 0
        }
        if ((b >= '0') && (b <= '9'))
   1e16a:	83 2f       	mov	r24, r19
   1e16c:	80 53       	subi	r24, 0x30	; 48
   1e16e:	8a 30       	cpi	r24, 0x0A	; 10
   1e170:	c8 f2       	brcs	.-78     	; 0x1e124 <reprogramall+0x22>
        {
            low = b - '0';
        }
        else
        {
            low = b - 'A' + 10;
   1e172:	23 2f       	mov	r18, r19
   1e174:	30 e0       	ldi	r19, 0x00	; 0
   1e176:	27 53       	subi	r18, 0x37	; 55
   1e178:	30 40       	sbci	r19, 0x00	; 0
   1e17a:	d8 cf       	rjmp	.-80     	; 0x1e12c <reprogramall+0x2a>

        all = high * 16 + low;
        //This might introduce bugs.
        program[j] = (unsigned char)all;
    }
    reprogram(program, pageindex);
   1e17c:	00 91 54 01 	lds	r16, 0x0154
   1e180:	10 91 55 01 	lds	r17, 0x0155
   1e184:	ce 01       	movw	r24, r28
   1e186:	b8 01       	movw	r22, r16
   1e188:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
    pageindex++;
   1e18c:	0f 5f       	subi	r16, 0xFF	; 255
   1e18e:	1f 4f       	sbci	r17, 0xFF	; 255
   1e190:	10 93 55 01 	sts	0x0155, r17
   1e194:	00 93 54 01 	sts	0x0154, r16
    return 0;
}
   1e198:	80 e0       	ldi	r24, 0x00	; 0
   1e19a:	90 e0       	ldi	r25, 0x00	; 0
   1e19c:	df 91       	pop	r29
   1e19e:	cf 91       	pop	r28
   1e1a0:	1f 91       	pop	r17
   1e1a2:	0f 91       	pop	r16
   1e1a4:	08 95       	ret

0001e1a6 <ProgramLastString>:
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramLastString(char *buffer,
                                                                uint8_t length)
{
   1e1a6:	ac 01       	movw	r20, r24
    int i;

    for (i = 0; i < length; i++)
   1e1a8:	70 e0       	ldi	r23, 0x00	; 0
   1e1aa:	61 15       	cp	r22, r1
   1e1ac:	71 05       	cpc	r23, r1
   1e1ae:	91 f0       	breq	.+36     	; 0x1e1d4 <ProgramLastString+0x2e>
   1e1b0:	a0 91 56 03 	lds	r26, 0x0356
   1e1b4:	b0 91 57 03 	lds	r27, 0x0357
   1e1b8:	aa 5a       	subi	r26, 0xAA	; 170
   1e1ba:	be 4f       	sbci	r27, 0xFE	; 254
   1e1bc:	20 e0       	ldi	r18, 0x00	; 0
   1e1be:	30 e0       	ldi	r19, 0x00	; 0
    {
        pagebuffer[currentpageindex + i] = buffer[i];
   1e1c0:	fa 01       	movw	r30, r20
   1e1c2:	e2 0f       	add	r30, r18
   1e1c4:	f3 1f       	adc	r31, r19
   1e1c6:	80 81       	ld	r24, Z
   1e1c8:	8d 93       	st	X+, r24
void __attribute__ ((section(".bootloader"))) ProgramLastString(char *buffer,
                                                                uint8_t length)
{
    int i;

    for (i = 0; i < length; i++)
   1e1ca:	2f 5f       	subi	r18, 0xFF	; 255
   1e1cc:	3f 4f       	sbci	r19, 0xFF	; 255
   1e1ce:	26 17       	cp	r18, r22
   1e1d0:	37 07       	cpc	r19, r23
   1e1d2:	b4 f3       	brlt	.-20     	; 0x1e1c0 <ProgramLastString+0x1a>
    {
        pagebuffer[currentpageindex + i] = buffer[i];
    }
    reprogramall(pagebuffer);
   1e1d4:	86 e5       	ldi	r24, 0x56	; 86
   1e1d6:	91 e0       	ldi	r25, 0x01	; 1
   1e1d8:	0e 94 81 f0 	call	0x1e102	; 0x1e102 <reprogramall>
    currentpageindex = 0;
   1e1dc:	10 92 57 03 	sts	0x0357, r1
   1e1e0:	10 92 56 03 	sts	0x0356, r1
}
   1e1e4:	08 95       	ret

0001e1e6 <ProgramRemains>:
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramRemains()
{
    if (currentpageindex != 0)
   1e1e6:	80 91 56 03 	lds	r24, 0x0356
   1e1ea:	90 91 57 03 	lds	r25, 0x0357
   1e1ee:	89 2b       	or	r24, r25
   1e1f0:	09 f4       	brne	.+2      	; 0x1e1f4 <ProgramRemains+0xe>
   1e1f2:	08 95       	ret
    {
        reprogramall(pagebuffer);
   1e1f4:	86 e5       	ldi	r24, 0x56	; 86
   1e1f6:	91 e0       	ldi	r25, 0x01	; 1
   1e1f8:	0e 94 81 f0 	call	0x1e102	; 0x1e102 <reprogramall>
   1e1fc:	08 95       	ret

0001e1fe <ProgramString>:
    currentpageindex = 0;
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramString(char *buffer)
{
   1e1fe:	ac 01       	movw	r20, r24
    int i;

    for (i = 0; i < 16; i++)
    {
        pagebuffer[currentpageindex + i] = buffer[i];
   1e200:	60 91 56 03 	lds	r22, 0x0356
   1e204:	70 91 57 03 	lds	r23, 0x0357
   1e208:	db 01       	movw	r26, r22
   1e20a:	aa 5a       	subi	r26, 0xAA	; 170
   1e20c:	be 4f       	sbci	r27, 0xFE	; 254
   1e20e:	20 e0       	ldi	r18, 0x00	; 0
   1e210:	30 e0       	ldi	r19, 0x00	; 0
   1e212:	fa 01       	movw	r30, r20
   1e214:	e2 0f       	add	r30, r18
   1e216:	f3 1f       	adc	r31, r19
   1e218:	80 81       	ld	r24, Z
   1e21a:	8d 93       	st	X+, r24
//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramString(char *buffer)
{
    int i;

    for (i = 0; i < 16; i++)
   1e21c:	2f 5f       	subi	r18, 0xFF	; 255
   1e21e:	3f 4f       	sbci	r19, 0xFF	; 255
   1e220:	20 31       	cpi	r18, 0x10	; 16
   1e222:	31 05       	cpc	r19, r1
   1e224:	b1 f7       	brne	.-20     	; 0x1e212 <ProgramString+0x14>
    {
        pagebuffer[currentpageindex + i] = buffer[i];
    }
    currentpageindex += 16;
   1e226:	cb 01       	movw	r24, r22
   1e228:	40 96       	adiw	r24, 0x10	; 16
   1e22a:	90 93 57 03 	sts	0x0357, r25
   1e22e:	80 93 56 03 	sts	0x0356, r24
    if (currentpageindex == 512)
   1e232:	80 50       	subi	r24, 0x00	; 0
   1e234:	92 40       	sbci	r25, 0x02	; 2
   1e236:	09 f0       	breq	.+2      	; 0x1e23a <ProgramString+0x3c>
   1e238:	08 95       	ret
    {
        reprogramall(pagebuffer);
   1e23a:	86 e5       	ldi	r24, 0x56	; 86
   1e23c:	91 e0       	ldi	r25, 0x01	; 1
   1e23e:	0e 94 81 f0 	call	0x1e102	; 0x1e102 <reprogramall>
        currentpageindex = 0;
   1e242:	10 92 57 03 	sts	0x0357, r1
   1e246:	10 92 56 03 	sts	0x0356, r1
   1e24a:	08 95       	ret

0001e24c <boot_removeTracePointLong>:

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_removeTracePointLong(uint16_t pagenum, uint8_t pageoffset,
                          uint8_t * buffer)
{
   1e24c:	2f 92       	push	r2
   1e24e:	3f 92       	push	r3
   1e250:	4f 92       	push	r4
   1e252:	5f 92       	push	r5
   1e254:	6f 92       	push	r6
   1e256:	7f 92       	push	r7
   1e258:	8f 92       	push	r8
   1e25a:	9f 92       	push	r9
   1e25c:	af 92       	push	r10
   1e25e:	bf 92       	push	r11
   1e260:	cf 92       	push	r12
   1e262:	df 92       	push	r13
   1e264:	ef 92       	push	r14
   1e266:	ff 92       	push	r15
   1e268:	0f 93       	push	r16
   1e26a:	1f 93       	push	r17
   1e26c:	df 93       	push	r29
   1e26e:	cf 93       	push	r28
   1e270:	00 d0       	rcall	.+0      	; 0x1e272 <boot_removeTracePointLong+0x26>
   1e272:	00 d0       	rcall	.+0      	; 0x1e274 <boot_removeTracePointLong+0x28>
   1e274:	cd b7       	in	r28, 0x3d	; 61
   1e276:	de b7       	in	r29, 0x3e	; 62
   1e278:	6c 01       	movw	r12, r24
   1e27a:	36 2e       	mov	r3, r22
   1e27c:	2a 01       	movw	r4, r20
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e27e:	a0 e0       	ldi	r26, 0x00	; 0
   1e280:	b0 e0       	ldi	r27, 0x00	; 0
   1e282:	ee 24       	eor	r14, r14
   1e284:	f8 2e       	mov	r15, r24
   1e286:	09 2f       	mov	r16, r25
   1e288:	1a 2f       	mov	r17, r26
   1e28a:	26 e5       	ldi	r18, 0x56	; 86
   1e28c:	62 2e       	mov	r6, r18
   1e28e:	21 e0       	ldi	r18, 0x01	; 1
   1e290:	72 2e       	mov	r7, r18
   1e292:	53 01       	movw	r10, r6
   1e294:	15 c0       	rjmp	.+42     	; 0x1e2c0 <boot_removeTracePointLong+0x74>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e296:	d5 01       	movw	r26, r10
   1e298:	8c 92       	st	X, r8
            pagebuffer[i * 2 + 1] = data / 256;
   1e29a:	11 96       	adiw	r26, 0x01	; 1
   1e29c:	9c 92       	st	X, r9
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e29e:	82 e0       	ldi	r24, 0x02	; 2
   1e2a0:	90 e0       	ldi	r25, 0x00	; 0
   1e2a2:	a0 e0       	ldi	r26, 0x00	; 0
   1e2a4:	b0 e0       	ldi	r27, 0x00	; 0
   1e2a6:	e8 0e       	add	r14, r24
   1e2a8:	f9 1e       	adc	r15, r25
   1e2aa:	0a 1f       	adc	r16, r26
   1e2ac:	1b 1f       	adc	r17, r27
   1e2ae:	a2 e0       	ldi	r26, 0x02	; 2
   1e2b0:	b0 e0       	ldi	r27, 0x00	; 0
   1e2b2:	aa 0e       	add	r10, r26
   1e2b4:	bb 1e       	adc	r11, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e2b6:	b6 e5       	ldi	r27, 0x56	; 86
   1e2b8:	ab 16       	cp	r10, r27
   1e2ba:	b2 e0       	ldi	r27, 0x02	; 2
   1e2bc:	bb 06       	cpc	r11, r27
   1e2be:	61 f0       	breq	.+24     	; 0x1e2d8 <boot_removeTracePointLong+0x8c>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e2c0:	0b bf       	out	0x3b, r16	; 59
   1e2c2:	f7 01       	movw	r30, r14
   1e2c4:	87 90       	elpm	r8, Z+
   1e2c6:	96 90       	elpm	r9, Z+
        if (is_host_lsb())
   1e2c8:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <is_host_lsb>
   1e2cc:	89 2b       	or	r24, r25
   1e2ce:	19 f7       	brne	.-58     	; 0x1e296 <boot_removeTracePointLong+0x4a>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e2d0:	f5 01       	movw	r30, r10
   1e2d2:	81 82       	std	Z+1, r8	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e2d4:	90 82       	st	Z, r9
   1e2d6:	e3 cf       	rjmp	.-58     	; 0x1e29e <boot_removeTracePointLong+0x52>
    }
    //assuming that the index as 228 or smaller, then enough for the 28 bytes othersise not 
    //say 234, then it is 22 bytes 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
   1e2d8:	e0 ef       	ldi	r30, 0xF0	; 240
   1e2da:	e3 15       	cp	r30, r3
   1e2dc:	08 f4       	brcc	.+2      	; 0x1e2e0 <boot_removeTracePointLong+0x94>
   1e2de:	7f c0       	rjmp	.+254    	; 0x1e3de <boot_removeTracePointLong+0x192>
   1e2e0:	10 e0       	ldi	r17, 0x00	; 0
   1e2e2:	90 e1       	ldi	r25, 0x10	; 16
   1e2e4:	29 2e       	mov	r2, r25
   1e2e6:	80 e1       	ldi	r24, 0x10	; 16
   1e2e8:	88 2e       	mov	r8, r24
   1e2ea:	91 2c       	mov	r9, r1
   1e2ec:	a3 2d       	mov	r26, r3
   1e2ee:	b0 e0       	ldi	r27, 0x00	; 0
   1e2f0:	aa 5a       	subi	r26, 0xAA	; 170
   1e2f2:	be 4f       	sbci	r27, 0xFE	; 254
   1e2f4:	20 e0       	ldi	r18, 0x00	; 0
   1e2f6:	30 e0       	ldi	r19, 0x00	; 0
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
   1e2f8:	f2 01       	movw	r30, r4
   1e2fa:	e2 0f       	add	r30, r18
   1e2fc:	f3 1f       	adc	r31, r19
   1e2fe:	80 81       	ld	r24, Z
   1e300:	8d 93       	st	X+, r24
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e302:	2f 5f       	subi	r18, 0xFF	; 255
   1e304:	3f 4f       	sbci	r19, 0xFF	; 255
   1e306:	28 15       	cp	r18, r8
   1e308:	39 05       	cpc	r19, r9
   1e30a:	b4 f3       	brlt	.-20     	; 0x1e2f8 <boot_removeTracePointLong+0xac>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
    }
    reprogram(pagebuffer, pagenum);
   1e30c:	86 e5       	ldi	r24, 0x56	; 86
   1e30e:	91 e0       	ldi	r25, 0x01	; 1
   1e310:	b6 01       	movw	r22, r12
   1e312:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
    if (programmore == 0)
   1e316:	11 23       	and	r17, r17
   1e318:	09 f4       	brne	.+2      	; 0x1e31c <boot_removeTracePointLong+0xd0>
   1e31a:	4a c0       	rjmp	.+148    	; 0x1e3b0 <boot_removeTracePointLong+0x164>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e31c:	96 01       	movw	r18, r12
   1e31e:	2f 5f       	subi	r18, 0xFF	; 255
   1e320:	3f 4f       	sbci	r19, 0xFF	; 255
   1e322:	3a 83       	std	Y+2, r19	; 0x02
   1e324:	29 83       	std	Y+1, r18	; 0x01
   1e326:	c9 01       	movw	r24, r18
   1e328:	a0 e0       	ldi	r26, 0x00	; 0
   1e32a:	b0 e0       	ldi	r27, 0x00	; 0
   1e32c:	ee 24       	eor	r14, r14
   1e32e:	f8 2e       	mov	r15, r24
   1e330:	09 2f       	mov	r16, r25
   1e332:	1a 2f       	mov	r17, r26
   1e334:	86 e5       	ldi	r24, 0x56	; 86
   1e336:	91 e0       	ldi	r25, 0x01	; 1
   1e338:	9c 83       	std	Y+4, r25	; 0x04
   1e33a:	8b 83       	std	Y+3, r24	; 0x03
   1e33c:	15 c0       	rjmp	.+42     	; 0x1e368 <boot_removeTracePointLong+0x11c>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e33e:	ab 81       	ldd	r26, Y+3	; 0x03
   1e340:	bc 81       	ldd	r27, Y+4	; 0x04
   1e342:	cc 92       	st	X, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e344:	11 96       	adiw	r26, 0x01	; 1
   1e346:	dc 92       	st	X, r13
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e348:	82 e0       	ldi	r24, 0x02	; 2
   1e34a:	90 e0       	ldi	r25, 0x00	; 0
   1e34c:	a0 e0       	ldi	r26, 0x00	; 0
   1e34e:	b0 e0       	ldi	r27, 0x00	; 0
   1e350:	e8 0e       	add	r14, r24
   1e352:	f9 1e       	adc	r15, r25
   1e354:	0a 1f       	adc	r16, r26
   1e356:	1b 1f       	adc	r17, r27
   1e358:	ab 81       	ldd	r26, Y+3	; 0x03
   1e35a:	bc 81       	ldd	r27, Y+4	; 0x04
   1e35c:	12 96       	adiw	r26, 0x02	; 2
   1e35e:	bc 83       	std	Y+4, r27	; 0x04
   1e360:	ab 83       	std	Y+3, r26	; 0x03
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e362:	aa 16       	cp	r10, r26
   1e364:	bb 06       	cpc	r11, r27
   1e366:	69 f0       	breq	.+26     	; 0x1e382 <boot_removeTracePointLong+0x136>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e368:	0b bf       	out	0x3b, r16	; 59
   1e36a:	f7 01       	movw	r30, r14
   1e36c:	c7 90       	elpm	r12, Z+
   1e36e:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e370:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <is_host_lsb>
   1e374:	89 2b       	or	r24, r25
   1e376:	19 f7       	brne	.-58     	; 0x1e33e <boot_removeTracePointLong+0xf2>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e378:	eb 81       	ldd	r30, Y+3	; 0x03
   1e37a:	fc 81       	ldd	r31, Y+4	; 0x04
   1e37c:	c1 82       	std	Z+1, r12	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e37e:	d0 82       	st	Z, r13
   1e380:	e3 cf       	rjmp	.-58     	; 0x1e348 <boot_removeTracePointLong+0xfc>
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
   1e382:	80 e1       	ldi	r24, 0x10	; 16
   1e384:	82 19       	sub	r24, r2
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e386:	71 f0       	breq	.+28     	; 0x1e3a4 <boot_removeTracePointLong+0x158>
   1e388:	f2 01       	movw	r30, r4
   1e38a:	e8 0d       	add	r30, r8
   1e38c:	f9 1d       	adc	r31, r9
   1e38e:	28 2f       	mov	r18, r24
   1e390:	30 e0       	ldi	r19, 0x00	; 0
   1e392:	2a 5a       	subi	r18, 0xAA	; 170
   1e394:	3e 4f       	sbci	r19, 0xFE	; 254
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
   1e396:	81 91       	ld	r24, Z+
   1e398:	d3 01       	movw	r26, r6
   1e39a:	8d 93       	st	X+, r24
   1e39c:	3d 01       	movw	r6, r26
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e39e:	a2 17       	cp	r26, r18
   1e3a0:	b3 07       	cpc	r27, r19
   1e3a2:	c9 f7       	brne	.-14     	; 0x1e396 <boot_removeTracePointLong+0x14a>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
    }
    reprogram(pagebuffer, pagenum + 1);
   1e3a4:	86 e5       	ldi	r24, 0x56	; 86
   1e3a6:	91 e0       	ldi	r25, 0x01	; 1
   1e3a8:	69 81       	ldd	r22, Y+1	; 0x01
   1e3aa:	7a 81       	ldd	r23, Y+2	; 0x02
   1e3ac:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e3b0:	0f 90       	pop	r0
   1e3b2:	0f 90       	pop	r0
   1e3b4:	0f 90       	pop	r0
   1e3b6:	0f 90       	pop	r0
   1e3b8:	cf 91       	pop	r28
   1e3ba:	df 91       	pop	r29
   1e3bc:	1f 91       	pop	r17
   1e3be:	0f 91       	pop	r16
   1e3c0:	ff 90       	pop	r15
   1e3c2:	ef 90       	pop	r14
   1e3c4:	df 90       	pop	r13
   1e3c6:	cf 90       	pop	r12
   1e3c8:	bf 90       	pop	r11
   1e3ca:	af 90       	pop	r10
   1e3cc:	9f 90       	pop	r9
   1e3ce:	8f 90       	pop	r8
   1e3d0:	7f 90       	pop	r7
   1e3d2:	6f 90       	pop	r6
   1e3d4:	5f 90       	pop	r5
   1e3d6:	4f 90       	pop	r4
   1e3d8:	3f 90       	pop	r3
   1e3da:	2f 90       	pop	r2
   1e3dc:	08 95       	ret
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e3de:	23 2c       	mov	r2, r3
   1e3e0:	21 94       	neg	r2
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e3e2:	82 2c       	mov	r8, r2
   1e3e4:	99 24       	eor	r9, r9
   1e3e6:	11 e0       	ldi	r17, 0x01	; 1
   1e3e8:	81 cf       	rjmp	.-254    	; 0x1e2ec <boot_removeTracePointLong+0xa0>

0001e3ea <boot_removeTracePoint>:
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    buffer)
{
   1e3ea:	2f 92       	push	r2
   1e3ec:	3f 92       	push	r3
   1e3ee:	4f 92       	push	r4
   1e3f0:	5f 92       	push	r5
   1e3f2:	6f 92       	push	r6
   1e3f4:	7f 92       	push	r7
   1e3f6:	8f 92       	push	r8
   1e3f8:	9f 92       	push	r9
   1e3fa:	af 92       	push	r10
   1e3fc:	bf 92       	push	r11
   1e3fe:	cf 92       	push	r12
   1e400:	df 92       	push	r13
   1e402:	ef 92       	push	r14
   1e404:	ff 92       	push	r15
   1e406:	0f 93       	push	r16
   1e408:	1f 93       	push	r17
   1e40a:	df 93       	push	r29
   1e40c:	cf 93       	push	r28
   1e40e:	00 d0       	rcall	.+0      	; 0x1e410 <boot_removeTracePoint+0x26>
   1e410:	0f 92       	push	r0
   1e412:	cd b7       	in	r28, 0x3d	; 61
   1e414:	de b7       	in	r29, 0x3e	; 62
   1e416:	1c 01       	movw	r2, r24
   1e418:	d6 2e       	mov	r13, r22
   1e41a:	2a 01       	movw	r4, r20
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e41c:	a0 e0       	ldi	r26, 0x00	; 0
   1e41e:	b0 e0       	ldi	r27, 0x00	; 0
   1e420:	ee 24       	eor	r14, r14
   1e422:	f8 2e       	mov	r15, r24
   1e424:	09 2f       	mov	r16, r25
   1e426:	1a 2f       	mov	r17, r26
   1e428:	66 e5       	ldi	r22, 0x56	; 86
   1e42a:	66 2e       	mov	r6, r22
   1e42c:	61 e0       	ldi	r22, 0x01	; 1
   1e42e:	76 2e       	mov	r7, r22
   1e430:	53 01       	movw	r10, r6
   1e432:	15 c0       	rjmp	.+42     	; 0x1e45e <boot_removeTracePoint+0x74>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e434:	d5 01       	movw	r26, r10
   1e436:	8c 92       	st	X, r8
            pagebuffer[i * 2 + 1] = data / 256;
   1e438:	11 96       	adiw	r26, 0x01	; 1
   1e43a:	9c 92       	st	X, r9
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e43c:	82 e0       	ldi	r24, 0x02	; 2
   1e43e:	90 e0       	ldi	r25, 0x00	; 0
   1e440:	a0 e0       	ldi	r26, 0x00	; 0
   1e442:	b0 e0       	ldi	r27, 0x00	; 0
   1e444:	e8 0e       	add	r14, r24
   1e446:	f9 1e       	adc	r15, r25
   1e448:	0a 1f       	adc	r16, r26
   1e44a:	1b 1f       	adc	r17, r27
   1e44c:	a2 e0       	ldi	r26, 0x02	; 2
   1e44e:	b0 e0       	ldi	r27, 0x00	; 0
   1e450:	aa 0e       	add	r10, r26
   1e452:	bb 1e       	adc	r11, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e454:	b6 e5       	ldi	r27, 0x56	; 86
   1e456:	ab 16       	cp	r10, r27
   1e458:	b2 e0       	ldi	r27, 0x02	; 2
   1e45a:	bb 06       	cpc	r11, r27
   1e45c:	61 f0       	breq	.+24     	; 0x1e476 <boot_removeTracePoint+0x8c>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e45e:	0b bf       	out	0x3b, r16	; 59
   1e460:	f7 01       	movw	r30, r14
   1e462:	87 90       	elpm	r8, Z+
   1e464:	96 90       	elpm	r9, Z+
        if (is_host_lsb())
   1e466:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <is_host_lsb>
   1e46a:	89 2b       	or	r24, r25
   1e46c:	19 f7       	brne	.-58     	; 0x1e434 <boot_removeTracePoint+0x4a>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e46e:	f5 01       	movw	r30, r10
   1e470:	81 82       	std	Z+1, r8	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e472:	90 82       	st	Z, r9
   1e474:	e3 cf       	rjmp	.-58     	; 0x1e43c <boot_removeTracePoint+0x52>
    //say 234, then it is 22 bytes 
    //Now this part needs to be changed to 16 bytes
    //index is 242, then 14 bytes. 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
   1e476:	e2 ef       	ldi	r30, 0xF2	; 242
   1e478:	ed 15       	cp	r30, r13
   1e47a:	08 f4       	brcc	.+2      	; 0x1e47e <boot_removeTracePoint+0x94>
   1e47c:	80 c0       	rjmp	.+256    	; 0x1e57e <boot_removeTracePoint+0x194>
   1e47e:	10 e0       	ldi	r17, 0x00	; 0
   1e480:	fe e0       	ldi	r31, 0x0E	; 14
   1e482:	f9 83       	std	Y+1, r31	; 0x01
   1e484:	5e e0       	ldi	r21, 0x0E	; 14
   1e486:	85 2e       	mov	r8, r21
   1e488:	91 2c       	mov	r9, r1
   1e48a:	ad 2d       	mov	r26, r13
   1e48c:	b0 e0       	ldi	r27, 0x00	; 0
   1e48e:	aa 5a       	subi	r26, 0xAA	; 170
   1e490:	be 4f       	sbci	r27, 0xFE	; 254
   1e492:	20 e0       	ldi	r18, 0x00	; 0
   1e494:	30 e0       	ldi	r19, 0x00	; 0
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
   1e496:	f2 01       	movw	r30, r4
   1e498:	e2 0f       	add	r30, r18
   1e49a:	f3 1f       	adc	r31, r19
   1e49c:	80 81       	ld	r24, Z
   1e49e:	8d 93       	st	X+, r24
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e4a0:	2f 5f       	subi	r18, 0xFF	; 255
   1e4a2:	3f 4f       	sbci	r19, 0xFF	; 255
   1e4a4:	28 15       	cp	r18, r8
   1e4a6:	39 05       	cpc	r19, r9
   1e4a8:	b4 f3       	brlt	.-20     	; 0x1e496 <boot_removeTracePoint+0xac>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
    }
    reprogram(pagebuffer, pagenum);
   1e4aa:	86 e5       	ldi	r24, 0x56	; 86
   1e4ac:	91 e0       	ldi	r25, 0x01	; 1
   1e4ae:	b1 01       	movw	r22, r2
   1e4b0:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
    if (programmore == 0)
   1e4b4:	11 23       	and	r17, r17
   1e4b6:	09 f4       	brne	.+2      	; 0x1e4ba <boot_removeTracePoint+0xd0>
   1e4b8:	4c c0       	rjmp	.+152    	; 0x1e552 <boot_removeTracePoint+0x168>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e4ba:	08 94       	sec
   1e4bc:	21 1c       	adc	r2, r1
   1e4be:	31 1c       	adc	r3, r1
   1e4c0:	c1 01       	movw	r24, r2
   1e4c2:	a0 e0       	ldi	r26, 0x00	; 0
   1e4c4:	b0 e0       	ldi	r27, 0x00	; 0
   1e4c6:	08 94       	sec
   1e4c8:	21 08       	sbc	r2, r1
   1e4ca:	31 08       	sbc	r3, r1
   1e4cc:	ee 24       	eor	r14, r14
   1e4ce:	f8 2e       	mov	r15, r24
   1e4d0:	09 2f       	mov	r16, r25
   1e4d2:	1a 2f       	mov	r17, r26
   1e4d4:	a6 e5       	ldi	r26, 0x56	; 86
   1e4d6:	b1 e0       	ldi	r27, 0x01	; 1
   1e4d8:	bb 83       	std	Y+3, r27	; 0x03
   1e4da:	aa 83       	std	Y+2, r26	; 0x02
   1e4dc:	14 c0       	rjmp	.+40     	; 0x1e506 <boot_removeTracePoint+0x11c>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e4de:	ea 81       	ldd	r30, Y+2	; 0x02
   1e4e0:	fb 81       	ldd	r31, Y+3	; 0x03
   1e4e2:	c0 82       	st	Z, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e4e4:	d1 82       	std	Z+1, r13	; 0x01
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e4e6:	82 e0       	ldi	r24, 0x02	; 2
   1e4e8:	90 e0       	ldi	r25, 0x00	; 0
   1e4ea:	a0 e0       	ldi	r26, 0x00	; 0
   1e4ec:	b0 e0       	ldi	r27, 0x00	; 0
   1e4ee:	e8 0e       	add	r14, r24
   1e4f0:	f9 1e       	adc	r15, r25
   1e4f2:	0a 1f       	adc	r16, r26
   1e4f4:	1b 1f       	adc	r17, r27
   1e4f6:	aa 81       	ldd	r26, Y+2	; 0x02
   1e4f8:	bb 81       	ldd	r27, Y+3	; 0x03
   1e4fa:	12 96       	adiw	r26, 0x02	; 2
   1e4fc:	bb 83       	std	Y+3, r27	; 0x03
   1e4fe:	aa 83       	std	Y+2, r26	; 0x02
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e500:	aa 16       	cp	r10, r26
   1e502:	bb 06       	cpc	r11, r27
   1e504:	79 f0       	breq	.+30     	; 0x1e524 <boot_removeTracePoint+0x13a>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e506:	0b bf       	out	0x3b, r16	; 59
   1e508:	f7 01       	movw	r30, r14
   1e50a:	c7 90       	elpm	r12, Z+
   1e50c:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e50e:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <is_host_lsb>
   1e512:	89 2b       	or	r24, r25
   1e514:	21 f7       	brne	.-56     	; 0x1e4de <boot_removeTracePoint+0xf4>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e516:	aa 81       	ldd	r26, Y+2	; 0x02
   1e518:	bb 81       	ldd	r27, Y+3	; 0x03
   1e51a:	11 96       	adiw	r26, 0x01	; 1
   1e51c:	cc 92       	st	X, r12
   1e51e:	11 97       	sbiw	r26, 0x01	; 1
            pagebuffer[i * 2] = data / 256;
   1e520:	dc 92       	st	X, r13
   1e522:	e1 cf       	rjmp	.-62     	; 0x1e4e6 <boot_removeTracePoint+0xfc>
        }
    }
    endindex2 = 14 - endindex;
   1e524:	8e e0       	ldi	r24, 0x0E	; 14
   1e526:	b9 81       	ldd	r27, Y+1	; 0x01
   1e528:	8b 1b       	sub	r24, r27
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e52a:	71 f0       	breq	.+28     	; 0x1e548 <boot_removeTracePoint+0x15e>
   1e52c:	f2 01       	movw	r30, r4
   1e52e:	e8 0d       	add	r30, r8
   1e530:	f9 1d       	adc	r31, r9
   1e532:	28 2f       	mov	r18, r24
   1e534:	30 e0       	ldi	r19, 0x00	; 0
   1e536:	2a 5a       	subi	r18, 0xAA	; 170
   1e538:	3e 4f       	sbci	r19, 0xFE	; 254
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
   1e53a:	81 91       	ld	r24, Z+
   1e53c:	d3 01       	movw	r26, r6
   1e53e:	8d 93       	st	X+, r24
   1e540:	3d 01       	movw	r6, r26
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e542:	a2 17       	cp	r26, r18
   1e544:	b3 07       	cpc	r27, r19
   1e546:	c9 f7       	brne	.-14     	; 0x1e53a <boot_removeTracePoint+0x150>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
    }
    reprogram(pagebuffer, pagenum);
   1e548:	86 e5       	ldi	r24, 0x56	; 86
   1e54a:	91 e0       	ldi	r25, 0x01	; 1
   1e54c:	b1 01       	movw	r22, r2
   1e54e:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e552:	0f 90       	pop	r0
   1e554:	0f 90       	pop	r0
   1e556:	0f 90       	pop	r0
   1e558:	cf 91       	pop	r28
   1e55a:	df 91       	pop	r29
   1e55c:	1f 91       	pop	r17
   1e55e:	0f 91       	pop	r16
   1e560:	ff 90       	pop	r15
   1e562:	ef 90       	pop	r14
   1e564:	df 90       	pop	r13
   1e566:	cf 90       	pop	r12
   1e568:	bf 90       	pop	r11
   1e56a:	af 90       	pop	r10
   1e56c:	9f 90       	pop	r9
   1e56e:	8f 90       	pop	r8
   1e570:	7f 90       	pop	r7
   1e572:	6f 90       	pop	r6
   1e574:	5f 90       	pop	r5
   1e576:	4f 90       	pop	r4
   1e578:	3f 90       	pop	r3
   1e57a:	2f 90       	pop	r2
   1e57c:	08 95       	ret
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e57e:	8d 2d       	mov	r24, r13
   1e580:	81 95       	neg	r24
   1e582:	89 83       	std	Y+1, r24	; 0x01
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e584:	88 2e       	mov	r8, r24
   1e586:	99 24       	eor	r9, r9
   1e588:	11 e0       	ldi	r17, 0x01	; 1
   1e58a:	7f cf       	rjmp	.-258    	; 0x1e48a <boot_removeTracePoint+0xa0>

0001e58c <boot_removeBreakPoint>:
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    instructions)
{
   1e58c:	7f 92       	push	r7
   1e58e:	8f 92       	push	r8
   1e590:	9f 92       	push	r9
   1e592:	af 92       	push	r10
   1e594:	bf 92       	push	r11
   1e596:	cf 92       	push	r12
   1e598:	df 92       	push	r13
   1e59a:	ef 92       	push	r14
   1e59c:	ff 92       	push	r15
   1e59e:	0f 93       	push	r16
   1e5a0:	1f 93       	push	r17
   1e5a2:	cf 93       	push	r28
   1e5a4:	df 93       	push	r29
   1e5a6:	5c 01       	movw	r10, r24
   1e5a8:	76 2e       	mov	r7, r22
   1e5aa:	94 2e       	mov	r9, r20
   1e5ac:	85 2e       	mov	r8, r21
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e5ae:	a0 e0       	ldi	r26, 0x00	; 0
   1e5b0:	b0 e0       	ldi	r27, 0x00	; 0
   1e5b2:	ee 24       	eor	r14, r14
   1e5b4:	f8 2e       	mov	r15, r24
   1e5b6:	09 2f       	mov	r16, r25
   1e5b8:	1a 2f       	mov	r17, r26
   1e5ba:	c6 e5       	ldi	r28, 0x56	; 86
   1e5bc:	d1 e0       	ldi	r29, 0x01	; 1
   1e5be:	0f c0       	rjmp	.+30     	; 0x1e5de <boot_removeBreakPoint+0x52>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e5c0:	c8 82       	st	Y, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e5c2:	d9 82       	std	Y+1, r13	; 0x01
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e5c4:	82 e0       	ldi	r24, 0x02	; 2
   1e5c6:	90 e0       	ldi	r25, 0x00	; 0
   1e5c8:	a0 e0       	ldi	r26, 0x00	; 0
   1e5ca:	b0 e0       	ldi	r27, 0x00	; 0
   1e5cc:	e8 0e       	add	r14, r24
   1e5ce:	f9 1e       	adc	r15, r25
   1e5d0:	0a 1f       	adc	r16, r26
   1e5d2:	1b 1f       	adc	r17, r27
   1e5d4:	22 96       	adiw	r28, 0x02	; 2
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
   1e5d6:	92 e0       	ldi	r25, 0x02	; 2
   1e5d8:	c6 35       	cpi	r28, 0x56	; 86
   1e5da:	d9 07       	cpc	r29, r25
   1e5dc:	59 f0       	breq	.+22     	; 0x1e5f4 <boot_removeBreakPoint+0x68>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e5de:	0b bf       	out	0x3b, r16	; 59
   1e5e0:	f7 01       	movw	r30, r14
   1e5e2:	c7 90       	elpm	r12, Z+
   1e5e4:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e5e6:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <is_host_lsb>
   1e5ea:	89 2b       	or	r24, r25
   1e5ec:	49 f7       	brne	.-46     	; 0x1e5c0 <boot_removeBreakPoint+0x34>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e5ee:	c9 82       	std	Y+1, r12	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e5f0:	d8 82       	st	Y, r13
   1e5f2:	e8 cf       	rjmp	.-48     	; 0x1e5c4 <boot_removeBreakPoint+0x38>
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
   1e5f4:	29 2d       	mov	r18, r9
   1e5f6:	38 2d       	mov	r19, r8
   1e5f8:	c9 01       	movw	r24, r18
   1e5fa:	dc 01       	movw	r26, r24
   1e5fc:	87 2d       	mov	r24, r7
   1e5fe:	90 e0       	ldi	r25, 0x00	; 0
   1e600:	fc 01       	movw	r30, r24
   1e602:	ea 5a       	subi	r30, 0xAA	; 170
   1e604:	fe 4f       	sbci	r31, 0xFE	; 254
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
   1e606:	bc 01       	movw	r22, r24
   1e608:	64 5a       	subi	r22, 0xA4	; 164
   1e60a:	7e 4f       	sbci	r23, 0xFE	; 254
    {
        pagebuffer[index + i] = instructions[i];
   1e60c:	8d 91       	ld	r24, X+
   1e60e:	81 93       	st	Z+, r24
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
   1e610:	e6 17       	cp	r30, r22
   1e612:	f7 07       	cpc	r31, r23
   1e614:	d9 f7       	brne	.-10     	; 0x1e60c <boot_removeBreakPoint+0x80>
    {
        pagebuffer[index + i] = instructions[i];
    }
    reprogram(pagebuffer, pagenum);
   1e616:	86 e5       	ldi	r24, 0x56	; 86
   1e618:	91 e0       	ldi	r25, 0x01	; 1
   1e61a:	b5 01       	movw	r22, r10
   1e61c:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e620:	df 91       	pop	r29
   1e622:	cf 91       	pop	r28
   1e624:	1f 91       	pop	r17
   1e626:	0f 91       	pop	r16
   1e628:	ff 90       	pop	r15
   1e62a:	ef 90       	pop	r14
   1e62c:	df 90       	pop	r13
   1e62e:	cf 90       	pop	r12
   1e630:	bf 90       	pop	r11
   1e632:	af 90       	pop	r10
   1e634:	9f 90       	pop	r9
   1e636:	8f 90       	pop	r8
   1e638:	7f 90       	pop	r7
   1e63a:	08 95       	ret

0001e63c <boot_insertTracePointLong>:
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_insertTracePointLong(uint16_t pagenum, uint8_t pageoffset)
{
   1e63c:	2f 92       	push	r2
   1e63e:	3f 92       	push	r3
   1e640:	4f 92       	push	r4
   1e642:	5f 92       	push	r5
   1e644:	6f 92       	push	r6
   1e646:	7f 92       	push	r7
   1e648:	8f 92       	push	r8
   1e64a:	9f 92       	push	r9
   1e64c:	af 92       	push	r10
   1e64e:	bf 92       	push	r11
   1e650:	cf 92       	push	r12
   1e652:	df 92       	push	r13
   1e654:	ef 92       	push	r14
   1e656:	ff 92       	push	r15
   1e658:	0f 93       	push	r16
   1e65a:	1f 93       	push	r17
   1e65c:	cf 93       	push	r28
   1e65e:	df 93       	push	r29
   1e660:	6c 01       	movw	r12, r24
   1e662:	56 2e       	mov	r5, r22
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e664:	a0 e0       	ldi	r26, 0x00	; 0
   1e666:	b0 e0       	ldi	r27, 0x00	; 0
   1e668:	ee 24       	eor	r14, r14
   1e66a:	f8 2e       	mov	r15, r24
   1e66c:	09 2f       	mov	r16, r25
   1e66e:	1a 2f       	mov	r17, r26
   1e670:	86 e5       	ldi	r24, 0x56	; 86
   1e672:	68 2e       	mov	r6, r24
   1e674:	81 e0       	ldi	r24, 0x01	; 1
   1e676:	78 2e       	mov	r7, r24
   1e678:	53 01       	movw	r10, r6
   1e67a:	15 c0       	rjmp	.+42     	; 0x1e6a6 <boot_insertTracePointLong+0x6a>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e67c:	d5 01       	movw	r26, r10
   1e67e:	cc 93       	st	X, r28
            pagebuffer[i * 2 + 1] = data / 256;
   1e680:	11 96       	adiw	r26, 0x01	; 1
   1e682:	dc 93       	st	X, r29
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e684:	82 e0       	ldi	r24, 0x02	; 2
   1e686:	90 e0       	ldi	r25, 0x00	; 0
   1e688:	a0 e0       	ldi	r26, 0x00	; 0
   1e68a:	b0 e0       	ldi	r27, 0x00	; 0
   1e68c:	e8 0e       	add	r14, r24
   1e68e:	f9 1e       	adc	r15, r25
   1e690:	0a 1f       	adc	r16, r26
   1e692:	1b 1f       	adc	r17, r27
   1e694:	a2 e0       	ldi	r26, 0x02	; 2
   1e696:	b0 e0       	ldi	r27, 0x00	; 0
   1e698:	aa 0e       	add	r10, r26
   1e69a:	bb 1e       	adc	r11, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e69c:	b6 e5       	ldi	r27, 0x56	; 86
   1e69e:	ab 16       	cp	r10, r27
   1e6a0:	b2 e0       	ldi	r27, 0x02	; 2
   1e6a2:	bb 06       	cpc	r11, r27
   1e6a4:	61 f0       	breq	.+24     	; 0x1e6be <boot_insertTracePointLong+0x82>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e6a6:	0b bf       	out	0x3b, r16	; 59
   1e6a8:	f7 01       	movw	r30, r14
   1e6aa:	c7 91       	elpm	r28, Z+
   1e6ac:	d6 91       	elpm	r29, Z+
        if (is_host_lsb())
   1e6ae:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <is_host_lsb>
   1e6b2:	89 2b       	or	r24, r25
   1e6b4:	19 f7       	brne	.-58     	; 0x1e67c <boot_insertTracePointLong+0x40>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e6b6:	f5 01       	movw	r30, r10
   1e6b8:	c1 83       	std	Z+1, r28	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e6ba:	d0 83       	st	Z, r29
   1e6bc:	e3 cf       	rjmp	.-58     	; 0x1e684 <boot_insertTracePointLong+0x48>
    }
    //assuming that the index as 228 or smaller, then enough for the 28 bytes othersise not 
    //say 234, then it is 22 bytes 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
   1e6be:	e0 ef       	ldi	r30, 0xF0	; 240
   1e6c0:	e5 15       	cp	r30, r5
   1e6c2:	08 f4       	brcc	.+2      	; 0x1e6c6 <boot_insertTracePointLong+0x8a>
   1e6c4:	6e c0       	rjmp	.+220    	; 0x1e7a2 <boot_insertTracePointLong+0x166>
   1e6c6:	10 e0       	ldi	r17, 0x00	; 0
   1e6c8:	b0 e1       	ldi	r27, 0x10	; 16
   1e6ca:	4b 2e       	mov	r4, r27
   1e6cc:	a0 e1       	ldi	r26, 0x10	; 16
   1e6ce:	8a 2e       	mov	r8, r26
   1e6d0:	91 2c       	mov	r9, r1
   1e6d2:	a5 2d       	mov	r26, r5
   1e6d4:	b0 e0       	ldi	r27, 0x00	; 0
   1e6d6:	aa 5a       	subi	r26, 0xAA	; 170
   1e6d8:	be 4f       	sbci	r27, 0xFE	; 254
   1e6da:	20 e0       	ldi	r18, 0x00	; 0
   1e6dc:	30 e0       	ldi	r19, 0x00	; 0
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
   1e6de:	f9 01       	movw	r30, r18
   1e6e0:	e4 5e       	subi	r30, 0xE4	; 228
   1e6e2:	fe 4f       	sbci	r31, 0xFE	; 254
   1e6e4:	80 81       	ld	r24, Z
   1e6e6:	8d 93       	st	X+, r24
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e6e8:	2f 5f       	subi	r18, 0xFF	; 255
   1e6ea:	3f 4f       	sbci	r19, 0xFF	; 255
   1e6ec:	28 15       	cp	r18, r8
   1e6ee:	39 05       	cpc	r19, r9
   1e6f0:	b4 f3       	brlt	.-20     	; 0x1e6de <boot_insertTracePointLong+0xa2>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
    }
    reprogram(pagebuffer, pagenum);
   1e6f2:	86 e5       	ldi	r24, 0x56	; 86
   1e6f4:	91 e0       	ldi	r25, 0x01	; 1
   1e6f6:	b6 01       	movw	r22, r12
   1e6f8:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
    if (programmore == 0)
   1e6fc:	11 23       	and	r17, r17
   1e6fe:	09 f4       	brne	.+2      	; 0x1e702 <boot_insertTracePointLong+0xc6>
   1e700:	3d c0       	rjmp	.+122    	; 0x1e77c <boot_insertTracePointLong+0x140>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e702:	16 01       	movw	r2, r12
   1e704:	08 94       	sec
   1e706:	21 1c       	adc	r2, r1
   1e708:	31 1c       	adc	r3, r1
   1e70a:	c1 01       	movw	r24, r2
   1e70c:	a0 e0       	ldi	r26, 0x00	; 0
   1e70e:	b0 e0       	ldi	r27, 0x00	; 0
   1e710:	ee 24       	eor	r14, r14
   1e712:	f8 2e       	mov	r15, r24
   1e714:	09 2f       	mov	r16, r25
   1e716:	1a 2f       	mov	r17, r26
   1e718:	c6 e5       	ldi	r28, 0x56	; 86
   1e71a:	d1 e0       	ldi	r29, 0x01	; 1
   1e71c:	0e c0       	rjmp	.+28     	; 0x1e73a <boot_insertTracePointLong+0xfe>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e71e:	c8 82       	st	Y, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e720:	d9 82       	std	Y+1, r13	; 0x01
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e722:	82 e0       	ldi	r24, 0x02	; 2
   1e724:	90 e0       	ldi	r25, 0x00	; 0
   1e726:	a0 e0       	ldi	r26, 0x00	; 0
   1e728:	b0 e0       	ldi	r27, 0x00	; 0
   1e72a:	e8 0e       	add	r14, r24
   1e72c:	f9 1e       	adc	r15, r25
   1e72e:	0a 1f       	adc	r16, r26
   1e730:	1b 1f       	adc	r17, r27
   1e732:	22 96       	adiw	r28, 0x02	; 2
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e734:	ac 16       	cp	r10, r28
   1e736:	bd 06       	cpc	r11, r29
   1e738:	59 f0       	breq	.+22     	; 0x1e750 <boot_insertTracePointLong+0x114>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e73a:	0b bf       	out	0x3b, r16	; 59
   1e73c:	f7 01       	movw	r30, r14
   1e73e:	c7 90       	elpm	r12, Z+
   1e740:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e742:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <is_host_lsb>
   1e746:	89 2b       	or	r24, r25
   1e748:	51 f7       	brne	.-44     	; 0x1e71e <boot_insertTracePointLong+0xe2>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e74a:	c9 82       	std	Y+1, r12	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e74c:	d8 82       	st	Y, r13
   1e74e:	e9 cf       	rjmp	.-46     	; 0x1e722 <boot_insertTracePointLong+0xe6>
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
   1e750:	80 e1       	ldi	r24, 0x10	; 16
   1e752:	84 19       	sub	r24, r4
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e754:	71 f0       	breq	.+28     	; 0x1e772 <boot_insertTracePointLong+0x136>
   1e756:	f4 01       	movw	r30, r8
   1e758:	e4 5e       	subi	r30, 0xE4	; 228
   1e75a:	fe 4f       	sbci	r31, 0xFE	; 254
   1e75c:	28 2f       	mov	r18, r24
   1e75e:	30 e0       	ldi	r19, 0x00	; 0
   1e760:	2a 5a       	subi	r18, 0xAA	; 170
   1e762:	3e 4f       	sbci	r19, 0xFE	; 254
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
   1e764:	81 91       	ld	r24, Z+
   1e766:	d3 01       	movw	r26, r6
   1e768:	8d 93       	st	X+, r24
   1e76a:	3d 01       	movw	r6, r26
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e76c:	a2 17       	cp	r26, r18
   1e76e:	b3 07       	cpc	r27, r19
   1e770:	c9 f7       	brne	.-14     	; 0x1e764 <boot_insertTracePointLong+0x128>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
    }
    reprogram(pagebuffer, pagenum + 1);
   1e772:	86 e5       	ldi	r24, 0x56	; 86
   1e774:	91 e0       	ldi	r25, 0x01	; 1
   1e776:	b1 01       	movw	r22, r2
   1e778:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e77c:	df 91       	pop	r29
   1e77e:	cf 91       	pop	r28
   1e780:	1f 91       	pop	r17
   1e782:	0f 91       	pop	r16
   1e784:	ff 90       	pop	r15
   1e786:	ef 90       	pop	r14
   1e788:	df 90       	pop	r13
   1e78a:	cf 90       	pop	r12
   1e78c:	bf 90       	pop	r11
   1e78e:	af 90       	pop	r10
   1e790:	9f 90       	pop	r9
   1e792:	8f 90       	pop	r8
   1e794:	7f 90       	pop	r7
   1e796:	6f 90       	pop	r6
   1e798:	5f 90       	pop	r5
   1e79a:	4f 90       	pop	r4
   1e79c:	3f 90       	pop	r3
   1e79e:	2f 90       	pop	r2
   1e7a0:	08 95       	ret
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e7a2:	45 2c       	mov	r4, r5
   1e7a4:	41 94       	neg	r4
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e7a6:	84 2c       	mov	r8, r4
   1e7a8:	99 24       	eor	r9, r9
   1e7aa:	11 e0       	ldi	r17, 0x01	; 1
   1e7ac:	92 cf       	rjmp	.-220    	; 0x1e6d2 <boot_insertTracePointLong+0x96>

0001e7ae <boot_insertTracePoint>:
//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader"))) boot_insertTracePoint(uint16_t
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset)
{
   1e7ae:	2f 92       	push	r2
   1e7b0:	3f 92       	push	r3
   1e7b2:	4f 92       	push	r4
   1e7b4:	5f 92       	push	r5
   1e7b6:	6f 92       	push	r6
   1e7b8:	7f 92       	push	r7
   1e7ba:	8f 92       	push	r8
   1e7bc:	9f 92       	push	r9
   1e7be:	af 92       	push	r10
   1e7c0:	bf 92       	push	r11
   1e7c2:	cf 92       	push	r12
   1e7c4:	df 92       	push	r13
   1e7c6:	ef 92       	push	r14
   1e7c8:	ff 92       	push	r15
   1e7ca:	0f 93       	push	r16
   1e7cc:	1f 93       	push	r17
   1e7ce:	cf 93       	push	r28
   1e7d0:	df 93       	push	r29
   1e7d2:	6c 01       	movw	r12, r24
   1e7d4:	56 2e       	mov	r5, r22
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e7d6:	a0 e0       	ldi	r26, 0x00	; 0
   1e7d8:	b0 e0       	ldi	r27, 0x00	; 0
   1e7da:	ee 24       	eor	r14, r14
   1e7dc:	f8 2e       	mov	r15, r24
   1e7de:	09 2f       	mov	r16, r25
   1e7e0:	1a 2f       	mov	r17, r26
   1e7e2:	66 e5       	ldi	r22, 0x56	; 86
   1e7e4:	66 2e       	mov	r6, r22
   1e7e6:	61 e0       	ldi	r22, 0x01	; 1
   1e7e8:	76 2e       	mov	r7, r22
   1e7ea:	53 01       	movw	r10, r6
   1e7ec:	15 c0       	rjmp	.+42     	; 0x1e818 <boot_insertTracePoint+0x6a>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e7ee:	d5 01       	movw	r26, r10
   1e7f0:	cc 93       	st	X, r28
            pagebuffer[i * 2 + 1] = data / 256;
   1e7f2:	11 96       	adiw	r26, 0x01	; 1
   1e7f4:	dc 93       	st	X, r29
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e7f6:	82 e0       	ldi	r24, 0x02	; 2
   1e7f8:	90 e0       	ldi	r25, 0x00	; 0
   1e7fa:	a0 e0       	ldi	r26, 0x00	; 0
   1e7fc:	b0 e0       	ldi	r27, 0x00	; 0
   1e7fe:	e8 0e       	add	r14, r24
   1e800:	f9 1e       	adc	r15, r25
   1e802:	0a 1f       	adc	r16, r26
   1e804:	1b 1f       	adc	r17, r27
   1e806:	a2 e0       	ldi	r26, 0x02	; 2
   1e808:	b0 e0       	ldi	r27, 0x00	; 0
   1e80a:	aa 0e       	add	r10, r26
   1e80c:	bb 1e       	adc	r11, r27

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
   1e80e:	b6 e5       	ldi	r27, 0x56	; 86
   1e810:	ab 16       	cp	r10, r27
   1e812:	b2 e0       	ldi	r27, 0x02	; 2
   1e814:	bb 06       	cpc	r11, r27
   1e816:	61 f0       	breq	.+24     	; 0x1e830 <boot_insertTracePoint+0x82>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e818:	0b bf       	out	0x3b, r16	; 59
   1e81a:	f7 01       	movw	r30, r14
   1e81c:	c7 91       	elpm	r28, Z+
   1e81e:	d6 91       	elpm	r29, Z+
        if (is_host_lsb())
   1e820:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <is_host_lsb>
   1e824:	89 2b       	or	r24, r25
   1e826:	19 f7       	brne	.-58     	; 0x1e7ee <boot_insertTracePoint+0x40>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e828:	f5 01       	movw	r30, r10
   1e82a:	c1 83       	std	Z+1, r28	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e82c:	d0 83       	st	Z, r29
   1e82e:	e3 cf       	rjmp	.-58     	; 0x1e7f6 <boot_insertTracePoint+0x48>
    //say 234, then it is 22 bytes 
    //Now this part needs to be changed to 16 bytes
    //index is 242, then 14 bytes. 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
   1e830:	e2 ef       	ldi	r30, 0xF2	; 242
   1e832:	e5 15       	cp	r30, r5
   1e834:	08 f4       	brcc	.+2      	; 0x1e838 <boot_insertTracePoint+0x8a>
   1e836:	6e c0       	rjmp	.+220    	; 0x1e914 <boot_insertTracePoint+0x166>
   1e838:	10 e0       	ldi	r17, 0x00	; 0
   1e83a:	5e e0       	ldi	r21, 0x0E	; 14
   1e83c:	45 2e       	mov	r4, r21
   1e83e:	4e e0       	ldi	r20, 0x0E	; 14
   1e840:	84 2e       	mov	r8, r20
   1e842:	91 2c       	mov	r9, r1
   1e844:	a5 2d       	mov	r26, r5
   1e846:	b0 e0       	ldi	r27, 0x00	; 0
   1e848:	aa 5a       	subi	r26, 0xAA	; 170
   1e84a:	be 4f       	sbci	r27, 0xFE	; 254
   1e84c:	20 e0       	ldi	r18, 0x00	; 0
   1e84e:	30 e0       	ldi	r19, 0x00	; 0
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
   1e850:	f9 01       	movw	r30, r18
   1e852:	e4 5e       	subi	r30, 0xE4	; 228
   1e854:	fe 4f       	sbci	r31, 0xFE	; 254
   1e856:	80 81       	ld	r24, Z
   1e858:	8d 93       	st	X+, r24
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e85a:	2f 5f       	subi	r18, 0xFF	; 255
   1e85c:	3f 4f       	sbci	r19, 0xFF	; 255
   1e85e:	28 15       	cp	r18, r8
   1e860:	39 05       	cpc	r19, r9
   1e862:	b4 f3       	brlt	.-20     	; 0x1e850 <boot_insertTracePoint+0xa2>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
    }
    reprogram(pagebuffer, pagenum);
   1e864:	86 e5       	ldi	r24, 0x56	; 86
   1e866:	91 e0       	ldi	r25, 0x01	; 1
   1e868:	b6 01       	movw	r22, r12
   1e86a:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
    if (programmore == 0)
   1e86e:	11 23       	and	r17, r17
   1e870:	09 f4       	brne	.+2      	; 0x1e874 <boot_insertTracePoint+0xc6>
   1e872:	3d c0       	rjmp	.+122    	; 0x1e8ee <boot_insertTracePoint+0x140>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e874:	16 01       	movw	r2, r12
   1e876:	08 94       	sec
   1e878:	21 1c       	adc	r2, r1
   1e87a:	31 1c       	adc	r3, r1
   1e87c:	c1 01       	movw	r24, r2
   1e87e:	a0 e0       	ldi	r26, 0x00	; 0
   1e880:	b0 e0       	ldi	r27, 0x00	; 0
   1e882:	ee 24       	eor	r14, r14
   1e884:	f8 2e       	mov	r15, r24
   1e886:	09 2f       	mov	r16, r25
   1e888:	1a 2f       	mov	r17, r26
   1e88a:	c6 e5       	ldi	r28, 0x56	; 86
   1e88c:	d1 e0       	ldi	r29, 0x01	; 1
   1e88e:	0e c0       	rjmp	.+28     	; 0x1e8ac <boot_insertTracePoint+0xfe>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e890:	c8 82       	st	Y, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e892:	d9 82       	std	Y+1, r13	; 0x01
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e894:	82 e0       	ldi	r24, 0x02	; 2
   1e896:	90 e0       	ldi	r25, 0x00	; 0
   1e898:	a0 e0       	ldi	r26, 0x00	; 0
   1e89a:	b0 e0       	ldi	r27, 0x00	; 0
   1e89c:	e8 0e       	add	r14, r24
   1e89e:	f9 1e       	adc	r15, r25
   1e8a0:	0a 1f       	adc	r16, r26
   1e8a2:	1b 1f       	adc	r17, r27
   1e8a4:	22 96       	adiw	r28, 0x02	; 2
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
   1e8a6:	ac 16       	cp	r10, r28
   1e8a8:	bd 06       	cpc	r11, r29
   1e8aa:	59 f0       	breq	.+22     	; 0x1e8c2 <boot_insertTracePoint+0x114>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e8ac:	0b bf       	out	0x3b, r16	; 59
   1e8ae:	f7 01       	movw	r30, r14
   1e8b0:	c7 90       	elpm	r12, Z+
   1e8b2:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e8b4:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <is_host_lsb>
   1e8b8:	89 2b       	or	r24, r25
   1e8ba:	51 f7       	brne	.-44     	; 0x1e890 <boot_insertTracePoint+0xe2>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e8bc:	c9 82       	std	Y+1, r12	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e8be:	d8 82       	st	Y, r13
   1e8c0:	e9 cf       	rjmp	.-46     	; 0x1e894 <boot_insertTracePoint+0xe6>
        }
    }
    endindex2 = 14 - endindex;
   1e8c2:	8e e0       	ldi	r24, 0x0E	; 14
   1e8c4:	84 19       	sub	r24, r4
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e8c6:	71 f0       	breq	.+28     	; 0x1e8e4 <boot_insertTracePoint+0x136>
   1e8c8:	f4 01       	movw	r30, r8
   1e8ca:	e4 5e       	subi	r30, 0xE4	; 228
   1e8cc:	fe 4f       	sbci	r31, 0xFE	; 254
   1e8ce:	28 2f       	mov	r18, r24
   1e8d0:	30 e0       	ldi	r19, 0x00	; 0
   1e8d2:	2a 5a       	subi	r18, 0xAA	; 170
   1e8d4:	3e 4f       	sbci	r19, 0xFE	; 254
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
   1e8d6:	81 91       	ld	r24, Z+
   1e8d8:	d3 01       	movw	r26, r6
   1e8da:	8d 93       	st	X+, r24
   1e8dc:	3d 01       	movw	r6, r26
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e8de:	a2 17       	cp	r26, r18
   1e8e0:	b3 07       	cpc	r27, r19
   1e8e2:	c9 f7       	brne	.-14     	; 0x1e8d6 <boot_insertTracePoint+0x128>
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
    }
    reprogram(pagebuffer, pagenum + 1);
   1e8e4:	86 e5       	ldi	r24, 0x56	; 86
   1e8e6:	91 e0       	ldi	r25, 0x01	; 1
   1e8e8:	b1 01       	movw	r22, r2
   1e8ea:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e8ee:	df 91       	pop	r29
   1e8f0:	cf 91       	pop	r28
   1e8f2:	1f 91       	pop	r17
   1e8f4:	0f 91       	pop	r16
   1e8f6:	ff 90       	pop	r15
   1e8f8:	ef 90       	pop	r14
   1e8fa:	df 90       	pop	r13
   1e8fc:	cf 90       	pop	r12
   1e8fe:	bf 90       	pop	r11
   1e900:	af 90       	pop	r10
   1e902:	9f 90       	pop	r9
   1e904:	8f 90       	pop	r8
   1e906:	7f 90       	pop	r7
   1e908:	6f 90       	pop	r6
   1e90a:	5f 90       	pop	r5
   1e90c:	4f 90       	pop	r4
   1e90e:	3f 90       	pop	r3
   1e910:	2f 90       	pop	r2
   1e912:	08 95       	ret
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
   1e914:	45 2c       	mov	r4, r5
   1e916:	41 94       	neg	r4
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
   1e918:	84 2c       	mov	r8, r4
   1e91a:	99 24       	eor	r9, r9
   1e91c:	11 e0       	ldi	r17, 0x01	; 1
   1e91e:	92 cf       	rjmp	.-220    	; 0x1e844 <boot_insertTracePoint+0x96>

0001e920 <boot_insertBreakPoint>:
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    instructions)
{
   1e920:	7f 92       	push	r7
   1e922:	8f 92       	push	r8
   1e924:	9f 92       	push	r9
   1e926:	af 92       	push	r10
   1e928:	bf 92       	push	r11
   1e92a:	cf 92       	push	r12
   1e92c:	df 92       	push	r13
   1e92e:	ef 92       	push	r14
   1e930:	ff 92       	push	r15
   1e932:	0f 93       	push	r16
   1e934:	1f 93       	push	r17
   1e936:	cf 93       	push	r28
   1e938:	df 93       	push	r29
   1e93a:	4c 01       	movw	r8, r24
   1e93c:	76 2e       	mov	r7, r22
   1e93e:	5a 01       	movw	r10, r20
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e940:	a0 e0       	ldi	r26, 0x00	; 0
   1e942:	b0 e0       	ldi	r27, 0x00	; 0
   1e944:	ee 24       	eor	r14, r14
   1e946:	f8 2e       	mov	r15, r24
   1e948:	09 2f       	mov	r16, r25
   1e94a:	1a 2f       	mov	r17, r26
   1e94c:	c6 e5       	ldi	r28, 0x56	; 86
   1e94e:	d1 e0       	ldi	r29, 0x01	; 1
   1e950:	0f c0       	rjmp	.+30     	; 0x1e970 <boot_insertBreakPoint+0x50>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e952:	c8 82       	st	Y, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e954:	d9 82       	std	Y+1, r13	; 0x01
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e956:	82 e0       	ldi	r24, 0x02	; 2
   1e958:	90 e0       	ldi	r25, 0x00	; 0
   1e95a:	a0 e0       	ldi	r26, 0x00	; 0
   1e95c:	b0 e0       	ldi	r27, 0x00	; 0
   1e95e:	e8 0e       	add	r14, r24
   1e960:	f9 1e       	adc	r15, r25
   1e962:	0a 1f       	adc	r16, r26
   1e964:	1b 1f       	adc	r17, r27
   1e966:	22 96       	adiw	r28, 0x02	; 2
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
   1e968:	92 e0       	ldi	r25, 0x02	; 2
   1e96a:	c6 35       	cpi	r28, 0x56	; 86
   1e96c:	d9 07       	cpc	r29, r25
   1e96e:	59 f0       	breq	.+22     	; 0x1e986 <boot_insertBreakPoint+0x66>
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
   1e970:	0b bf       	out	0x3b, r16	; 59
   1e972:	f7 01       	movw	r30, r14
   1e974:	c7 90       	elpm	r12, Z+
   1e976:	d6 90       	elpm	r13, Z+
        if (is_host_lsb())
   1e978:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <is_host_lsb>
   1e97c:	89 2b       	or	r24, r25
   1e97e:	49 f7       	brne	.-46     	; 0x1e952 <boot_insertBreakPoint+0x32>
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
   1e980:	c9 82       	std	Y+1, r12	; 0x01
            pagebuffer[i * 2] = data / 256;
   1e982:	d8 82       	st	Y, r13
   1e984:	e8 cf       	rjmp	.-48     	; 0x1e956 <boot_insertBreakPoint+0x36>
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
   1e986:	a7 2d       	mov	r26, r7
   1e988:	b0 e0       	ldi	r27, 0x00	; 0
   1e98a:	aa 5a       	subi	r26, 0xAA	; 170
   1e98c:	be 4f       	sbci	r27, 0xFE	; 254
   1e98e:	20 e0       	ldi	r18, 0x00	; 0
   1e990:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
    {
        instructions[i] = pagebuffer[index + i];
   1e992:	f5 01       	movw	r30, r10
   1e994:	e2 0f       	add	r30, r18
   1e996:	f3 1f       	adc	r31, r19
   1e998:	8c 91       	ld	r24, X
   1e99a:	80 83       	st	Z, r24
        pagebuffer[index + i] = breakpointstring[i];
   1e99c:	f9 01       	movw	r30, r18
   1e99e:	e4 5d       	subi	r30, 0xD4	; 212
   1e9a0:	fe 4f       	sbci	r31, 0xFE	; 254
   1e9a2:	80 81       	ld	r24, Z
   1e9a4:	8d 93       	st	X+, r24
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
   1e9a6:	2f 5f       	subi	r18, 0xFF	; 255
   1e9a8:	3f 4f       	sbci	r19, 0xFF	; 255
   1e9aa:	26 30       	cpi	r18, 0x06	; 6
   1e9ac:	31 05       	cpc	r19, r1
   1e9ae:	89 f7       	brne	.-30     	; 0x1e992 <boot_insertBreakPoint+0x72>
    {
        instructions[i] = pagebuffer[index + i];
        pagebuffer[index + i] = breakpointstring[i];
    }
    reprogram(pagebuffer, pagenum);
   1e9b0:	86 e5       	ldi	r24, 0x56	; 86
   1e9b2:	91 e0       	ldi	r25, 0x01	; 1
   1e9b4:	b4 01       	movw	r22, r8
   1e9b6:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e9ba:	df 91       	pop	r29
   1e9bc:	cf 91       	pop	r28
   1e9be:	1f 91       	pop	r17
   1e9c0:	0f 91       	pop	r16
   1e9c2:	ff 90       	pop	r15
   1e9c4:	ef 90       	pop	r14
   1e9c6:	df 90       	pop	r13
   1e9c8:	cf 90       	pop	r12
   1e9ca:	bf 90       	pop	r11
   1e9cc:	af 90       	pop	r10
   1e9ce:	9f 90       	pop	r9
   1e9d0:	8f 90       	pop	r8
   1e9d2:	7f 90       	pop	r7
   1e9d4:	08 95       	ret

Disassembly of section .systemcall.1:

0001d400 <getNodeID>:
    __attribute__ ((naked));
void getNodeID()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETNODEID
    getNodeIdTask_Logger();
   1d400:	0e 94 1f 48 	call	0x903e	; 0x903e <getNodeIdTask_Logger>
#endif
#else
    getNodeIdTask();
#endif
    asm volatile ("nop"::);
   1d404:	00 00       	nop
    asm volatile ("ret"::);
   1d406:	08 95       	ret

0001d408 <setNodeID>:
    __attribute__ ((naked));
void setNodeID()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETNODEID
    setNodeIdTask_Logger();
   1d408:	0e 94 4b 48 	call	0x9096	; 0x9096 <setNodeIdTask_Logger>
#endif
#else
    setNodeIdTask();
#endif
    asm volatile ("nop"::);
   1d40c:	00 00       	nop
    asm volatile ("ret"::);
   1d40e:	08 95       	ret

0001d410 <getRandomNumberSyscall>:
    __attribute__ ((naked));
void getRandomNumberSyscall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETRANDOMNUMBER
    getRandomTask_Logger();
   1d410:	0e 94 77 48 	call	0x90ee	; 0x90ee <getRandomTask_Logger>
#endif
#else
    getRandomTask();
#endif
    asm volatile ("nop"::);
   1d414:	00 00       	nop
    asm volatile ("ret"::);
   1d416:	08 95       	ret

Disassembly of section .systemcall.2:

0001d500 <getCurrentThreadAddressSyscall>:
    __attribute__ ((naked));
void getCurrentThreadAddressSyscall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTTHREADADDRESS
    getCurrentThreadAddress_Logger();
   1d500:	0e 94 a3 48 	call	0x9146	; 0x9146 <getCurrentThreadAddress_Logger>
#endif
#else
    getCurrentThreadAddress_avr();
#endif
    asm volatile ("nop"::);
   1d504:	00 00       	nop
    asm volatile ("ret"::);
   1d506:	08 95       	ret

0001d508 <getCurrentThreadIndex>:
    __attribute__ ((naked));
void getCurrentThreadIndex()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTTHREADINDEX
    getThreadIndexAddress_Logger();
   1d508:	0e 94 cf 48 	call	0x919e	; 0x919e <getThreadIndexAddress_Logger>
#endif
#else
    getThreadIndexAddress_avr();
#endif
    asm volatile ("nop"::);
   1d50c:	00 00       	nop
    asm volatile ("ret"::);
   1d50e:	08 95       	ret

0001d510 <getThreadTableStartSyscall>:
    __attribute__ ((naked));
void getThreadTableStartSyscall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETTHREADTABLESTART
    getThreadTableStart_Logger();
   1d510:	0e 94 fb 48 	call	0x91f6	; 0x91f6 <getThreadTableStart_Logger>
#endif
#else
    getThreadTableStart_avr();
#endif
    asm volatile ("nop"::);
   1d514:	00 00       	nop
    asm volatile ("ret"::);
   1d516:	08 95       	ret

0001d518 <yieldfunction>:
    __attribute__ ((naked));
void yieldfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YIELDFUNCTION
    thread_yield_logger();
   1d518:	0e 94 15 49 	call	0x922a	; 0x922a <thread_yield_logger>
#endif
#else
    thread_yield();
#endif
    asm volatile ("nop"::);
   1d51c:	00 00       	nop
    asm volatile ("ret"::);
   1d51e:	08 95       	ret

0001d520 <postThreadTask>:
    __attribute__ ((naked));
void postThreadTask()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_POSTTHREADTASK
    postNewThreadTask_Logger();
   1d520:	0e 94 2f 49 	call	0x925e	; 0x925e <postNewThreadTask_Logger>
#endif
#else
    postNewThreadTask();
#endif
    asm volatile ("nop"::);
   1d524:	00 00       	nop
    asm volatile ("ret"::);
   1d526:	08 95       	ret

0001d528 <postThreadTaskNoLog>:
void postThreadTaskNoLog() __attribute__ ((section(".systemcall.2")))
    __attribute__ ((naked));
void postThreadTaskNoLog()
{

    postNewThreadTask();
   1d528:	0e 94 00 18 	call	0x3000	; 0x3000 <postNewThreadTask>

    asm volatile ("nop"::);
   1d52c:	00 00       	nop
    asm volatile ("ret"::);
   1d52e:	08 95       	ret

0001d530 <breakfunction>:
    __attribute__ ((naked));
void breakfunction(){

  #ifdef TRACE_ENABLE_SYSCALLEVENT
  #ifdef TRACE_ENABLE_SYSCALL_BREAKPOINTYIELD
   break_point_function_Logger();
   1d530:	0e 94 49 49 	call	0x9292	; 0x9292 <break_point_function_Logger>
  #endif
  #else
   break_point_function();   
  #endif
   asm volatile( "nop":: );
   1d534:	00 00       	nop
   asm volatile( "ret":: );
   1d536:	08 95       	ret

Disassembly of section .systemcall.3:

0001d600 <postTaskSysCall>:
    __attribute__ ((naked));
void postTaskSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_POSTTASKSYSCALL
    postNewTask_Logger();
   1d600:	0e 94 7e 49 	call	0x92fc	; 0x92fc <postNewTask_Logger>
#endif
#else
    postNewTask_avr();
#endif
    asm volatile ("nop"::);
   1d604:	00 00       	nop
    asm volatile ("ret"::);
   1d606:	08 95       	ret

Disassembly of section .systemcall.4:

0001d700 <getStackPtr>:
	#ifdef TRACE_ENABLE_SYSCALL
  #ifdef TRACE_ENABLE_SYSCALL_KERNELSTACK
    getStackPtrTask_Logger();
  #endif
  #else 
    getStackPtrTask();
   1d700:	0e 94 98 49 	call	0x9330	; 0x9330 <getStackPtrTask>
  #endif
    asm volatile ("nop"::);
   1d704:	00 00       	nop
    asm volatile ("ret"::);
   1d706:	08 95       	ret

Disassembly of section .systemcall.5:

0001d800 <setRadioFrequency>:
    ((naked));
void setRadioFrequency()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETRADIOFREQUENCY
    setRadioFrequencyTask_Logger();
   1d800:	0e 94 c4 49 	call	0x9388	; 0x9388 <setRadioFrequencyTask_Logger>
#else
#ifdef RADIO_CC2420
    setRadioFrequencyTask();
#endif
#endif
    asm volatile ("nop"::);
   1d804:	00 00       	nop
    asm volatile ("ret"::);
   1d806:	08 95       	ret

0001d808 <setRadioChannel>:
    __attribute__ ((naked));
void setRadioChannel()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETRADIOCHANNEL
    setRadioChannelTask_Logger();
   1d808:	0e 94 de 49 	call	0x93bc	; 0x93bc <setRadioChannelTask_Logger>
#else
#ifdef RADIO_CC2420
    setRadioChannelTask();
#endif
#endif
    asm volatile ("nop"::);
   1d80c:	00 00       	nop
    asm volatile ("ret"::);
   1d80e:	08 95       	ret

0001d810 <setRadioPower>:
    __attribute__ ((naked));
void setRadioPower()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETRADIOPOWER
    setRadioPowerTask_Logger();
   1d810:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <setRadioPowerTask_Logger>
#else
#ifdef RADIO_CC2420
    setRadioPowerTask();
#endif
#endif
    asm volatile ("nop"::);
   1d814:	00 00       	nop
    asm volatile ("ret"::);
   1d816:	08 95       	ret

0001d818 <getRadioSendingBuffer>:
    __attribute__ ((naked));
void getRadioSendingBuffer()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTRADIOINFOADDRESS
    getRadioSendingBuffer_Logger();
   1d818:	0e 94 24 4a 	call	0x9448	; 0x9448 <getRadioSendingBuffer_Logger>
#endif
#else
    getRadioSendingBuffer_avr();
#endif
    asm volatile ("nop"::);
   1d81c:	00 00       	nop
    asm volatile ("ret"::);
   1d81e:	08 95       	ret

0001d820 <invokeSocketRadioSend>:
    __attribute__ ((naked));
void invokeSocketRadioSend()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETRADIOSENDFUNCTION
    SocketRadioSend_Logger();
   1d820:	0e 94 3e 4a 	call	0x947c	; 0x947c <SocketRadioSend_Logger>
#endif
#else
    SocketRadioSend();
#endif
    asm volatile ("nop"::);
   1d824:	00 00       	nop
    asm volatile ("ret"::);
   1d826:	08 95       	ret

0001d828 <getRadioReceivingBuffer>:
void getRadioReceivingBuffer()

{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTRADIORECEIVERHANDLEADDRESS
    getReceiverBuffer_Logger();
   1d828:	0e 94 6a 4a 	call	0x94d4	; 0x94d4 <getReceiverBuffer_Logger>
#endif
#else
    getReceiverBuffer_avr();
#endif
    asm volatile ("nop"::);
   1d82c:	00 00       	nop
    asm volatile ("ret"::);
   1d82e:	08 95       	ret

0001d830 <setCurrentRadioHandle>:
    __attribute__ ((naked));
void setCurrentRadioHandle()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETCURRENTRADIOHANDLE
    syscall_registerEvent_Logger();
   1d830:	0e 94 84 4a 	call	0x9508	; 0x9508 <syscall_registerEvent_Logger>
#endif
#else 
    registerReceiverHandle_syscall();
#endif
    asm volatile ("nop"::);
   1d834:	00 00       	nop
    asm volatile ("ret"::);
   1d836:	08 95       	ret

Disassembly of section .systemcall.6:

0001d900 <redtogglefunction>:
    ((naked));
void redtogglefunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_REDTOGGLEFUNCTION
    Leds_redToggle_Logger();
   1d900:	0e 94 9e 4a 	call	0x953c	; 0x953c <Leds_redToggle_Logger>
#endif
#else
    Leds_redToggle();
#endif
    asm volatile ("nop"::);
   1d904:	00 00       	nop
    asm volatile ("ret"::);
   1d906:	08 95       	ret

0001d908 <yellowtogglefunction>:
    __attribute__ ((naked));
void yellowtogglefunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YELLOWTOGGLEFUNCTION
    Leds_yellowToggle_Logger();
   1d908:	0e 94 b8 4a 	call	0x9570	; 0x9570 <Leds_yellowToggle_Logger>
#endif
#else
    Leds_yellowToggle();
#endif
    asm volatile ("nop"::);
   1d90c:	00 00       	nop
    asm volatile ("ret"::);
   1d90e:	08 95       	ret

0001d910 <greentogglefunction>:
    __attribute__ ((naked));
void greentogglefunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GREENTOGGLEFUNCTION
    Leds_greenToggle_Logger();
   1d910:	0e 94 d2 4a 	call	0x95a4	; 0x95a4 <Leds_greenToggle_Logger>
#endif
#else
    Leds_greenToggle();
#endif
    asm volatile ("nop"::);
   1d914:	00 00       	nop
    asm volatile ("ret"::);
   1d916:	08 95       	ret

0001d918 <redonfunction>:
    __attribute__ ((naked));
void redonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_REDONFUNCTION
    Leds_redOn_Logger();
   1d918:	0e 94 ec 4a 	call	0x95d8	; 0x95d8 <Leds_redOn_Logger>
#endif
#else
    Leds_redOn();
#endif
    asm volatile ("nop"::);
   1d91c:	00 00       	nop
    asm volatile ("ret"::);
   1d91e:	08 95       	ret

0001d920 <redofffunction>:
    __attribute__ ((naked));
void redofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_REDOFFFUNCTION
    Leds_redOff_Logger();
   1d920:	0e 94 06 4b 	call	0x960c	; 0x960c <Leds_redOff_Logger>
#endif
#else
    Leds_redOff();
#endif
    asm volatile ("nop"::);
   1d924:	00 00       	nop
    asm volatile ("ret"::);
   1d926:	08 95       	ret

0001d928 <yellowonfunction>:
    __attribute__ ((naked));
void yellowonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YELLOWONFUNCTION
    Leds_yellowOn_Logger();
   1d928:	0e 94 20 4b 	call	0x9640	; 0x9640 <Leds_yellowOn_Logger>
#endif
#else
    Leds_yellowOn();
#endif
    asm volatile ("nop"::);
   1d92c:	00 00       	nop
    asm volatile ("ret"::);
   1d92e:	08 95       	ret

0001d930 <yellowofffunction>:
    ((naked));
void yellowofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YELLOWOFFFUNCTION
    Leds_yellowOff_Logger();
   1d930:	0e 94 3a 4b 	call	0x9674	; 0x9674 <Leds_yellowOff_Logger>
#endif
#else
    Leds_yellowOff();
#endif
    asm volatile ("nop"::);
   1d934:	00 00       	nop
    asm volatile ("ret"::);
   1d936:	08 95       	ret

0001d938 <greenonfunction>:
    __attribute__ ((naked));
void greenonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GREENONFUNCTION
    Leds_greenOn_Logger();
   1d938:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <Leds_greenOn_Logger>
#endif
#else
    Leds_greenOn();
#endif
    asm volatile ("nop"::);
   1d93c:	00 00       	nop
    asm volatile ("ret"::);
   1d93e:	08 95       	ret

0001d940 <greenofffunction>:
    __attribute__ ((naked));
void greenofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GREENOFFFUNCTION
    Leds_greenOff_Logger();
   1d940:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <Leds_greenOff_Logger>
#endif
#else
    Leds_greenOff();
#endif
    asm volatile ("nop"::);
   1d944:	00 00       	nop
    asm volatile ("ret"::);
   1d946:	08 95       	ret

Disassembly of section .systemcall.7:

0001da00 <ADCLightSysCall>:
    __attribute__ ((naked));
void ADCLightSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCLIGHTSYSCALL
    ADCLight_Logger();
   1da00:	0e 94 88 4b 	call	0x9710	; 0x9710 <ADCLight_Logger>
#endif
#else
    ADCLight();
#endif
    asm volatile ("nop"::);
   1da04:	00 00       	nop
    asm volatile ("ret"::);
   1da06:	08 95       	ret

0001da08 <ADCTempSysCall>:
    __attribute__ ((naked));
void ADCTempSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCTEMPSYSCALL
    ADCTemp_Logger();
   1da08:	0e 94 a2 4b 	call	0x9744	; 0x9744 <ADCTemp_Logger>
#endif
#else
    ADCTemp();
#endif
    asm volatile ("nop"::);
   1da0c:	00 00       	nop
    asm volatile ("ret"::);
   1da0e:	08 95       	ret

0001da10 <ADCMagXSysCall>:
    __attribute__ ((naked));
void ADCMagXSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCMAGXSYSCALL
    ADCMagX_Logger();
   1da10:	0e 94 bc 4b 	call	0x9778	; 0x9778 <ADCMagX_Logger>
#endif
#else
    ADCMagX();
#endif
    asm volatile ("nop"::);
   1da14:	00 00       	nop
    asm volatile ("ret"::);
   1da16:	08 95       	ret

0001da18 <ADCMagYSysCall>:
    __attribute__ ((naked));
void ADCMagYSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCMAGYSYSCALL
    ADCMagY_Logger();
   1da18:	0e 94 d6 4b 	call	0x97ac	; 0x97ac <ADCMagY_Logger>
#endif
#else
    ADCMagY();
#endif
    asm volatile ("nop"::);
   1da1c:	00 00       	nop
    asm volatile ("ret"::);
   1da1e:	08 95       	ret

0001da20 <ADCAccXSysCall>:
    __attribute__ ((naked));
void ADCAccXSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCACCXSYSCALL
    ADCAccX_Logger();
   1da20:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <ADCAccX_Logger>
#endif
#else
    ADCAccX();
#endif
    asm volatile ("nop"::);
   1da24:	00 00       	nop
    asm volatile ("ret"::);
   1da26:	08 95       	ret

0001da28 <ADCAccYSysCall>:
    __attribute__ ((naked));
void ADCAccYSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCACCYSYSCALL
    ADCAccY_Logger();
   1da28:	0e 94 0a 4c 	call	0x9814	; 0x9814 <ADCAccY_Logger>
#endif
#else
    ADCAccY();
#endif
    asm volatile ("nop"::);
   1da2c:	00 00       	nop
    asm volatile ("ret"::);
   1da2e:	08 95       	ret

0001da30 <sounderonfunction>:
    ((naked));
void sounderonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SOUNDERONFUNCTION
    sounderOn_Logger();         //defined in avr\syscall.c
   1da30:	0e 94 24 4c 	call	0x9848	; 0x9848 <sounderOn_Logger>
#endif
#else
    sounder_init();
    sounderOn();          //defined in micaz\sounder.c
#endif
    asm volatile ("nop"::);
   1da34:	00 00       	nop
    asm volatile ("ret"::);
   1da36:	08 95       	ret

0001da38 <sounderofffunction>:
    __attribute__ ((naked));
void sounderofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SOUNDEROFFFUNCTION
    sounderOff_Logger();        //defined in avr\syscall.c
   1da38:	0e 94 3e 4c 	call	0x987c	; 0x987c <sounderOff_Logger>
#endif
#else
    sounder_init();
    sounderOff();         //defined in micaz\sounder.c
#endif
    asm volatile ("nop"::);
   1da3c:	00 00       	nop
    asm volatile ("ret"::);
   1da3e:	08 95       	ret

Disassembly of section .systemcall.8:

0001db00 <getCurrentEEPROMHandleAddress>:
    __attribute__ ((naked));
void getCurrentEEPROMHandleAddress()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTEEPROMHANDLEADDRESS
    getEEPROMHandleInfo_Logger();
   1db00:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <getEEPROMHandleInfo_Logger>
#endif
#else
    getEEPROMHandleInfo();
#endif
    asm volatile ("nop"::);
   1db04:	00 00       	nop
    asm volatile ("ret"::);
   1db06:	08 95       	ret

0001db08 <readFromEEPROM>:
    __attribute__ ((naked));
void readFromEEPROM()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_READFROMEEPROM
    readEEPROMTask_Logger();
   1db08:	0e 94 8d 4c 	call	0x991a	; 0x991a <readEEPROMTask_Logger>
#endif
#else
    readEEPROMTask();
#endif
    asm volatile ("nop"::);
   1db0c:	00 00       	nop
    asm volatile ("ret"::);
   1db0e:	08 95       	ret

0001db10 <writeToEEPROM>:
    __attribute__ ((naked));
void writeToEEPROM()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_WRITETOEEPROM
    writeEEPROMTask_Logger();
   1db10:	0e 94 b0 4c 	call	0x9960	; 0x9960 <writeEEPROMTask_Logger>
#endif
#else
    writeEEPROMTask();
#endif
    asm volatile ("nop"::);
   1db14:	00 00       	nop
    asm volatile ("ret"::);
   1db16:	08 95       	ret

Disassembly of section .systemcall.9:

0001dc00 <getFilePathAddr>:
    __attribute__ ((naked));
void getFilePathAddr()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETFILEPATHADDR
    getFilePathAddress_Logger();
   1dc00:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <getFilePathAddress_Logger>
#endif
#else
    getFilePathAddress_avr();
#endif
    asm volatile ("nop"::);
   1dc04:	00 00       	nop
    asm volatile ("ret"::);
   1dc06:	08 95       	ret

0001dc08 <getFileModeAddr>:
    __attribute__ ((naked));
void getFileModeAddr()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETFILEMODEADDR
    getFileModeAddress_Logger();
   1dc08:	0e 94 08 4d 	call	0x9a10	; 0x9a10 <getFileModeAddress_Logger>
#endif
#else
    getFileModeAddress_avr();
#endif
    asm volatile ("nop"::);
   1dc0c:	00 00       	nop
    asm volatile ("ret"::);
   1dc0e:	08 95       	ret

0001dc10 <openFileSysCall>:
    __attribute__ ((naked));
void openFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_OPENFILESYSCALL
    openFileTask_Logger();
   1dc10:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <openFileTask_Logger>
#endif
#else
    openFileTask();
#endif
    asm volatile ("nop"::);
   1dc14:	00 00       	nop
    asm volatile ("ret"::);
   1dc16:	08 95       	ret

0001dc18 <closeFileSysCall>:
    __attribute__ ((naked));
void closeFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_CLOSEFILESYSCALL
    closeFileTask_Logger();
   1dc18:	0e 94 3c 4d 	call	0x9a78	; 0x9a78 <closeFileTask_Logger>
#endif
#else
    closeFileTask();
#endif
    asm volatile ("nop"::);
   1dc1c:	00 00       	nop
    asm volatile ("ret"::);
   1dc1e:	08 95       	ret

0001dc20 <readFileSysCall>:
    __attribute__ ((naked));
void readFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_READFILESYSCALL
    readFileTask_Logger();
   1dc20:	0e 94 56 4d 	call	0x9aac	; 0x9aac <readFileTask_Logger>
#endif
#else
    readFileTask();
#endif
    asm volatile ("nop"::);
   1dc24:	00 00       	nop
    asm volatile ("ret"::);
   1dc26:	08 95       	ret

0001dc28 <writeFileSysCall>:
    __attribute__ ((naked));
void writeFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_WRITEFILESYSCALL
    writeFileTask_Logger();
   1dc28:	0e 94 70 4d 	call	0x9ae0	; 0x9ae0 <writeFileTask_Logger>
#endif
#else
    writeFileTask();
#endif
    asm volatile ("nop"::);
   1dc2c:	00 00       	nop
    asm volatile ("ret"::);
   1dc2e:	08 95       	ret

0001dc30 <seekFileSysCall>:
    __attribute__ ((naked));
void seekFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SEEKFILESYSCALL
    seekFileTask_Logger();
   1dc30:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <seekFileTask_Logger>
#endif
#else
    seekFileTask();
#endif
    asm volatile ("nop"::);
   1dc34:	00 00       	nop
    asm volatile ("ret"::);
   1dc36:	08 95       	ret
