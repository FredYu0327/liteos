
LiteOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  0000aafc  0000acd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000aafc  00000000  00000000  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   000009d6  0001e000  0001e000  0000ae74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .systemcall.1 00000018  0001d400  0001d400  0000ad0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .systemcall.2 00000030  0001d500  0001d500  0000ad24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .systemcall.3 00000008  0001d600  0001d600  0000ad54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .systemcall.4 00000008  0001d700  0001d700  0000ad5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .systemcall.5 00000038  0001d800  0001d800  0000ad64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .systemcall.6 00000048  0001d900  0001d900  0000ad9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .systemcall.7 00000040  0001da00  0001da00  0000ade4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .systemcall.8 00000018  0001db00  0001db00  0000ae24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .systemcall.9 00000038  0001dc00  0001dc00  0000ae3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .bss          000008b4  0080013c  0080013c  0000b84a  2**0
                  ALLOC
 13 .debug_aranges 000009a8  00000000  00000000  0000b84a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubnames 0000679f  00000000  00000000  0000c1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_info   00014459  00000000  00000000  00012991  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 000054dc  00000000  00000000  00026dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f8ce  00000000  00000000  0002c2c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  00003e40  00000000  00000000  0003bb94  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000073c6  00000000  00000000  0003f9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00009072  00000000  00000000  00046d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00000af0  00000000  00000000  0004fe0c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
       4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
       c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      10:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      14:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      18:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      1c:	0c 94 0f 13 	jmp	0x261e	; 0x261e <__vector_7>
      20:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      28:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      2c:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__vector_11>
      30:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__vector_12>
      34:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      38:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      3c:	0c 94 c6 35 	jmp	0x6b8c	; 0x6b8c <__vector_15>
      40:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      44:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      48:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__vector_18>
      4c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      50:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      54:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__vector_21>
      58:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      5c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      60:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      64:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      68:	0c 94 5d 35 	jmp	0x6aba	; 0x6aba <__vector_26>
      6c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      70:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      74:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      78:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      7c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      80:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      84:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      88:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__bad_interrupt>
      8c:	99 44       	sbci	r25, 0x49	; 73
      8e:	9d 44       	sbci	r25, 0x4D	; 77
      90:	a1 44       	sbci	r26, 0x41	; 65
      92:	a5 44       	sbci	r26, 0x45	; 69
      94:	a9 44       	sbci	r26, 0x49	; 73
      96:	ad 44       	sbci	r26, 0x4D	; 77
      98:	4c 44       	sbci	r20, 0x4C	; 76
      9a:	4c 44       	sbci	r20, 0x4C	; 76
      9c:	4c 44       	sbci	r20, 0x4C	; 76
      9e:	4c 44       	sbci	r20, 0x4C	; 76
      a0:	b1 44       	sbci	r27, 0x41	; 65
      a2:	63 44       	sbci	r22, 0x43	; 67
      a4:	5f 44       	sbci	r21, 0x4F	; 79
      a6:	5f 44       	sbci	r21, 0x4F	; 79
      a8:	4c 44       	sbci	r20, 0x4C	; 76
      aa:	4c 44       	sbci	r20, 0x4C	; 76
      ac:	4c 44       	sbci	r20, 0x4C	; 76
      ae:	4c 44       	sbci	r20, 0x4C	; 76
      b0:	4c 44       	sbci	r20, 0x4C	; 76
      b2:	4c 44       	sbci	r20, 0x4C	; 76
      b4:	4c 44       	sbci	r20, 0x4C	; 76
      b6:	4c 44       	sbci	r20, 0x4C	; 76
      b8:	4c 44       	sbci	r20, 0x4C	; 76
      ba:	4c 44       	sbci	r20, 0x4C	; 76
      bc:	4c 44       	sbci	r20, 0x4C	; 76
      be:	4c 44       	sbci	r20, 0x4C	; 76
      c0:	4c 44       	sbci	r20, 0x4C	; 76
      c2:	4c 44       	sbci	r20, 0x4C	; 76
      c4:	4c 44       	sbci	r20, 0x4C	; 76
      c6:	4c 44       	sbci	r20, 0x4C	; 76
      c8:	67 44       	sbci	r22, 0x47	; 71
      ca:	6b 44       	sbci	r22, 0x4B	; 75
      cc:	6f 44       	sbci	r22, 0x4F	; 79
      ce:	72 44       	sbci	r23, 0x42	; 66
      d0:	76 44       	sbci	r23, 0x46	; 70
      d2:	4c 44       	sbci	r20, 0x4C	; 76
      d4:	4c 44       	sbci	r20, 0x4C	; 76
      d6:	4c 44       	sbci	r20, 0x4C	; 76
      d8:	4c 44       	sbci	r20, 0x4C	; 76
      da:	4c 44       	sbci	r20, 0x4C	; 76
      dc:	4c 44       	sbci	r20, 0x4C	; 76
      de:	4c 44       	sbci	r20, 0x4C	; 76
      e0:	4c 44       	sbci	r20, 0x4C	; 76
      e2:	4c 44       	sbci	r20, 0x4C	; 76
      e4:	4c 44       	sbci	r20, 0x4C	; 76
      e6:	4c 44       	sbci	r20, 0x4C	; 76
      e8:	4c 44       	sbci	r20, 0x4C	; 76
      ea:	4c 44       	sbci	r20, 0x4C	; 76
      ec:	4c 44       	sbci	r20, 0x4C	; 76
      ee:	4c 44       	sbci	r20, 0x4C	; 76
      f0:	7a 44       	sbci	r23, 0x4A	; 74
      f2:	4c 44       	sbci	r20, 0x4C	; 76
      f4:	4c 44       	sbci	r20, 0x4C	; 76
      f6:	4c 44       	sbci	r20, 0x4C	; 76
      f8:	4c 44       	sbci	r20, 0x4C	; 76
      fa:	4c 44       	sbci	r20, 0x4C	; 76
      fc:	4c 44       	sbci	r20, 0x4C	; 76
      fe:	4c 44       	sbci	r20, 0x4C	; 76
     100:	4c 44       	sbci	r20, 0x4C	; 76
     102:	4c 44       	sbci	r20, 0x4C	; 76
     104:	7e 44       	sbci	r23, 0x4E	; 78
     106:	4c 44       	sbci	r20, 0x4C	; 76
     108:	4c 44       	sbci	r20, 0x4C	; 76
     10a:	4c 44       	sbci	r20, 0x4C	; 76
     10c:	4c 44       	sbci	r20, 0x4C	; 76
     10e:	4c 44       	sbci	r20, 0x4C	; 76
     110:	4c 44       	sbci	r20, 0x4C	; 76
     112:	4c 44       	sbci	r20, 0x4C	; 76
     114:	4c 44       	sbci	r20, 0x4C	; 76
     116:	4c 44       	sbci	r20, 0x4C	; 76
     118:	82 44       	sbci	r24, 0x42	; 66
     11a:	4c 44       	sbci	r20, 0x4C	; 76
     11c:	4c 44       	sbci	r20, 0x4C	; 76
     11e:	4c 44       	sbci	r20, 0x4C	; 76
     120:	4c 44       	sbci	r20, 0x4C	; 76
     122:	4c 44       	sbci	r20, 0x4C	; 76
     124:	4c 44       	sbci	r20, 0x4C	; 76
     126:	4c 44       	sbci	r20, 0x4C	; 76
     128:	4c 44       	sbci	r20, 0x4C	; 76
     12a:	4c 44       	sbci	r20, 0x4C	; 76
     12c:	86 44       	sbci	r24, 0x46	; 70
     12e:	4c 44       	sbci	r20, 0x4C	; 76
     130:	4c 44       	sbci	r20, 0x4C	; 76
     132:	4c 44       	sbci	r20, 0x4C	; 76
     134:	4c 44       	sbci	r20, 0x4C	; 76
     136:	4c 44       	sbci	r20, 0x4C	; 76
     138:	4c 44       	sbci	r20, 0x4C	; 76
     13a:	4c 44       	sbci	r20, 0x4C	; 76
     13c:	4c 44       	sbci	r20, 0x4C	; 76
     13e:	4c 44       	sbci	r20, 0x4C	; 76
     140:	4c 44       	sbci	r20, 0x4C	; 76
     142:	4c 44       	sbci	r20, 0x4C	; 76
     144:	4c 44       	sbci	r20, 0x4C	; 76
     146:	4c 44       	sbci	r20, 0x4C	; 76
     148:	4c 44       	sbci	r20, 0x4C	; 76
     14a:	4c 44       	sbci	r20, 0x4C	; 76
     14c:	4c 44       	sbci	r20, 0x4C	; 76
     14e:	4c 44       	sbci	r20, 0x4C	; 76
     150:	4c 44       	sbci	r20, 0x4C	; 76
     152:	4c 44       	sbci	r20, 0x4C	; 76
     154:	4c 44       	sbci	r20, 0x4C	; 76
     156:	4c 44       	sbci	r20, 0x4C	; 76
     158:	4c 44       	sbci	r20, 0x4C	; 76
     15a:	4c 44       	sbci	r20, 0x4C	; 76
     15c:	4c 44       	sbci	r20, 0x4C	; 76
     15e:	4c 44       	sbci	r20, 0x4C	; 76
     160:	4c 44       	sbci	r20, 0x4C	; 76
     162:	4c 44       	sbci	r20, 0x4C	; 76
     164:	4c 44       	sbci	r20, 0x4C	; 76
     166:	4c 44       	sbci	r20, 0x4C	; 76
     168:	4c 44       	sbci	r20, 0x4C	; 76
     16a:	4c 44       	sbci	r20, 0x4C	; 76
     16c:	4c 44       	sbci	r20, 0x4C	; 76
     16e:	4c 44       	sbci	r20, 0x4C	; 76
     170:	4c 44       	sbci	r20, 0x4C	; 76
     172:	4c 44       	sbci	r20, 0x4C	; 76
     174:	4c 44       	sbci	r20, 0x4C	; 76
     176:	4c 44       	sbci	r20, 0x4C	; 76
     178:	4c 44       	sbci	r20, 0x4C	; 76
     17a:	4c 44       	sbci	r20, 0x4C	; 76
     17c:	8a 44       	sbci	r24, 0x4A	; 74
     17e:	4c 44       	sbci	r20, 0x4C	; 76
     180:	4c 44       	sbci	r20, 0x4C	; 76
     182:	4c 44       	sbci	r20, 0x4C	; 76
     184:	4c 44       	sbci	r20, 0x4C	; 76
     186:	4c 44       	sbci	r20, 0x4C	; 76
     188:	4c 44       	sbci	r20, 0x4C	; 76
     18a:	4c 44       	sbci	r20, 0x4C	; 76
     18c:	4c 44       	sbci	r20, 0x4C	; 76
     18e:	4c 44       	sbci	r20, 0x4C	; 76
     190:	8e 44       	sbci	r24, 0x4E	; 78
     192:	4c 44       	sbci	r20, 0x4C	; 76
     194:	4c 44       	sbci	r20, 0x4C	; 76
     196:	4c 44       	sbci	r20, 0x4C	; 76
     198:	4c 44       	sbci	r20, 0x4C	; 76
     19a:	4c 44       	sbci	r20, 0x4C	; 76
     19c:	4c 44       	sbci	r20, 0x4C	; 76
     19e:	4c 44       	sbci	r20, 0x4C	; 76
     1a0:	4c 44       	sbci	r20, 0x4C	; 76
     1a2:	4c 44       	sbci	r20, 0x4C	; 76
     1a4:	4c 44       	sbci	r20, 0x4C	; 76
     1a6:	4c 44       	sbci	r20, 0x4C	; 76
     1a8:	92 44       	sbci	r25, 0x42	; 66
     1aa:	4c 44       	sbci	r20, 0x4C	; 76
     1ac:	4c 44       	sbci	r20, 0x4C	; 76
     1ae:	4c 44       	sbci	r20, 0x4C	; 76
     1b0:	4c 44       	sbci	r20, 0x4C	; 76
     1b2:	4c 44       	sbci	r20, 0x4C	; 76
     1b4:	4c 44       	sbci	r20, 0x4C	; 76
     1b6:	4c 44       	sbci	r20, 0x4C	; 76
     1b8:	4c 44       	sbci	r20, 0x4C	; 76
     1ba:	96 44       	sbci	r25, 0x46	; 70

000001bc <__ctors_end>:
     1bc:	11 24       	eor	r1, r1
     1be:	1f be       	out	0x3f, r1	; 63
     1c0:	cf ef       	ldi	r28, 0xFF	; 255
     1c2:	d0 e1       	ldi	r29, 0x10	; 16
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
     1c8:	11 e0       	ldi	r17, 0x01	; 1
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b1 e0       	ldi	r27, 0x01	; 1
     1ce:	ec ef       	ldi	r30, 0xFC	; 252
     1d0:	fa ea       	ldi	r31, 0xAA	; 170
     1d2:	00 e0       	ldi	r16, 0x00	; 0
     1d4:	0b bf       	out	0x3b, r16	; 59
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__do_copy_data+0x14>
     1d8:	07 90       	elpm	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	ac 33       	cpi	r26, 0x3C	; 60
     1de:	b1 07       	cpc	r27, r17
     1e0:	d9 f7       	brne	.-10     	; 0x1d8 <__do_copy_data+0x10>

000001e2 <__do_clear_bss>:
     1e2:	19 e0       	ldi	r17, 0x09	; 9
     1e4:	ac e3       	ldi	r26, 0x3C	; 60
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <.do_clear_bss_start>

000001ea <.do_clear_bss_loop>:
     1ea:	1d 92       	st	X+, r1

000001ec <.do_clear_bss_start>:
     1ec:	a0 3f       	cpi	r26, 0xF0	; 240
     1ee:	b1 07       	cpc	r27, r17
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <.do_clear_bss_loop>
     1f2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
     1f6:	0c 94 7c 55 	jmp	0xaaf8	; 0xaaf8 <_exit>

000001fa <__bad_interrupt>:
     1fa:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000001fe <main>:
//Every time the system gets compiled, there should be at most one such entry point. 


int main()
{
     1fe:	af 92       	push	r10
     200:	bf 92       	push	r11
     202:	cf 92       	push	r12
     204:	df 92       	push	r13
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
	 
    //micaz specific initilizations
    //hardware ini
    LITE_SET_PIN_DIRECTIONS();
     20c:	0e 94 02 05 	call	0xa04	; 0xa04 <LITE_SET_PIN_DIRECTIONS>
    
    //sensors
    adcdriver_init_adc();
     210:	0e 94 91 1b 	call	0x3722	; 0x3722 <adcdriver_init_adc>

    //kernels 
    initScheduling();
     214:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <initScheduling>
    thread_init();
     218:	0e 94 75 19 	call	0x32ea	; 0x32ea <thread_init>
    
    //printing
    initUSART();
     21c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <initUSART>
    
    
 // printfstr("System booted!\n");

    //for the following, read from else section, which defaults to the 0xff as the MicaZ is first initied by reprogramming
    if (node_readinitstatus() == MICAZCONFIGMESSAGERECEIVED)
     220:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <node_readinitstatus>
     224:	8a 30       	cpi	r24, 0x0A	; 10
     226:	f1 f1       	breq	.+124    	; 0x2a4 <main+0xa6>
    {
        //current_node_id is expected to be platform independent variable 
        CURRENT_NODE_ID = node_readnodeid();
        srand(CURRENT_NODE_ID);
        genericreadBytes(NETWORKNAMEOFFSET, 16, networkid);
        genericreadBytes(NODEFILENAMEOFFSET, 16, filenameid);
        nodeid = CURRENT_NODE_ID;
        networkid[16] = '\0';
        filenameid[16] = '\0';
        Leds_redToggle();
        Leds_greenToggle();
        Leds_yellowToggle();
        formatSystem();
        buildRootNode();
        Leds_redToggle();
        Leds_greenToggle();
        Leds_yellowToggle();
        // node_setinitstatus(MICAZ_INIT_READY); 
        node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
    }
    else if (node_readinitstatus() == MICAZ_INIT_READY)
     228:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <node_readinitstatus>
     22c:	8b 30       	cpi	r24, 0x0B	; 11
     22e:	09 f4       	brne	.+2      	; 0x232 <main+0x34>
     230:	71 c0       	rjmp	.+226    	; 0x314 <main+0x116>
    {
        CURRENT_NODE_ID = node_readnodeid();
        srand(CURRENT_NODE_ID);
        genericreadBytes(NETWORKNAMEOFFSET, 16, networkid);
        genericreadBytes(NODEFILENAMEOFFSET, 16, filenameid);
        nodeid = CURRENT_NODE_ID;
        networkid[16] = '\0';
        filenameid[16] = '\0';
        Leds_redToggle();
        Leds_greenToggle();
        Leds_yellowToggle();
        //formatSystem();
        //buildRootNode();
        //buildDeviceDirectory();
        readVectorFlashFromExternalStorage();
        readVectorNodeFromExternalStorage();
        Leds_redToggle();
        Leds_greenToggle();
        Leds_yellowToggle();
        //node_setinitstatus(MICAZ_INIT_READY);  
    }
    //entry point. Every time the system is booted, start from here. 
    else
    {
        /* The following is for debugging the kernel , where no reprogramming overboard is used 
         */
        
		if (JTAG_TOGGLE == 1)
		{
        Leds_redToggle();
        Leds_greenToggle();
        Leds_yellowToggle();
        mystrncpy(networkid, "sn01\0", 5);
        mystrncpy(filenameid, "nodeK\0", 6);


        CURRENT_NODE_ID = 1;
        nodeid = CURRENT_NODE_ID;
        srand(nodeid);
        formatSystem();
        buildRootNode();
        genericwriteBytes(NETWORKNAMEOFFSET, 16, networkid);
        genericwriteBytes(NODEFILENAMEOFFSET, 16, filenameid);
        node_writenodeid(nodeid);
        node_setinitstatus(MICAZCONFIGMESSAGERECEIVED);
        node_setradiochannel(21);
        Leds_redToggle();
        Leds_greenToggle();
        Leds_yellowToggle();
       }
        
    }

   
  

    //timer and radio 
    GenericTimerInit();
     232:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <GenericTimerInit>
    //for global timing purpose use
    GenericTimingStart(); 
     236:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <GenericTimingStart>
     
    AMStandard_Control_init();
     23a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <AMStandard_Control_init>
    AMStandard_Control_start();
     23e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <AMStandard_Control_start>
    
    initRadioHandle();
     242:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <initRadioHandle>
    
    InitShell();
     246:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <InitShell>
    //initTrace();
    

    #ifdef ENERGY_INSTRUMENTATION
     ecb_block_init(); 
    #endif
    
    
    
    {
        uint8_t currentchannel;
         
         
        currentchannel = node_getradiochannel();
     24a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <node_getradiochannel>
#ifdef RADIO_CC2420
				
        cc2420controlm_CC2420Control_TuneChannel(currentchannel);
     24e:	0e 94 82 0b 	call	0x1704	; 0x1704 <cc2420controlm_CC2420Control_TuneChannel>
       
#endif
#ifdef RADIO_CC2420
        cc2420controlm_CC2420Control_TunePower(31);
     252:	8f e1       	ldi	r24, 0x1F	; 31
     254:	0e 94 22 0b 	call	0x1644	; 0x1644 <cc2420controlm_CC2420Control_TunePower>
        
#endif
    }
    
// 		{
// 	  uint32_t counter;    
//
//    printfintegeru32(234234223);
//    printfstrln();
//    printfinteger32(-5555555);
//    printfstrln();
//    printfinteger32(777777);
//    printfstrln();
//    printfstr("Showing the status!!! \n"); 

//    counter = getCurrentResolution();
//    printfintegeru32(counter); 
//    printfstrln();
// 		}
//    

    //threadsequencelogging
    //eeprom_chunk_init();

    create_thread(ShellThread, (uint16_t *) shellbuffer,
     258:	84 eb       	ldi	r24, 0xB4	; 180
     25a:	94 e4       	ldi	r25, 0x44	; 68
     25c:	66 e0       	ldi	r22, 0x06	; 6
     25e:	77 e0       	ldi	r23, 0x07	; 7
     260:	44 e0       	ldi	r20, 0x04	; 4
     262:	58 e0       	ldi	r21, 0x08	; 8
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	0f e0       	ldi	r16, 0x0F	; 15
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	ef 2e       	mov	r14, r31
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	ff 2e       	mov	r15, r31
     272:	cc 24       	eor	r12, r12
     274:	dd 24       	eor	r13, r13
     276:	aa 24       	eor	r10, r10
     278:	bb 24       	eor	r11, r11
     27a:	0e 94 ac 18 	call	0x3158	; 0x3158 <create_thread>
                  STACK_TOP(shellbuffer), 0, 15, "sysshell", 0, 0);



    //trace program must be thread 1 to enable the tracing functionality. 
    //create_thread(tracemain, (uint16_t *) tracebuffer,
      //           STACK_TOP(tracebuffer), 0, 15, "trace", 0, 0);
    
	  create_thread(blink, (uint16_t *) blinkbuffer,
     27e:	89 e1       	ldi	r24, 0x19	; 25
     280:	94 e5       	ldi	r25, 0x54	; 84
     282:	64 e5       	ldi	r22, 0x54	; 84
     284:	79 e0       	ldi	r23, 0x09	; 9
     286:	48 ee       	ldi	r20, 0xE8	; 232
     288:	59 e0       	ldi	r21, 0x09	; 9
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	e9 e0       	ldi	r30, 0x09	; 9
     290:	ee 2e       	mov	r14, r30
     292:	e1 e0       	ldi	r30, 0x01	; 1
     294:	fe 2e       	mov	r15, r30
     296:	0e 94 ac 18 	call	0x3158	; 0x3158 <create_thread>
                  STACK_TOP(blinkbuffer), 0, 15, "blink", 0, 0);

    // create_thread(logger, (uint16_t *)loggerbuffer,     
      //          STACK_TOP(loggerbuffer), 0, 15, "logger", 0, 0);
                  
    //create_thread(gfapp, (uint16_t *) gfbuffer,
      //            STACK_TOP(gfbuffer), 0, 15, "gfapp", 0, 0);
                  
    //create_thread(protocol, (uint16_t *) protocolbuffer,
      //            STACK_TOP(protocolbuffer), 0, 15, "proto", 0, 0);
                                 
  


    //sleeping configureation 
    // sbi(MCUCR, SM0);
    // sbi(MCUCR, SM1);
    // cbi(MCUCR, SM2); 
    // sbi(MCUCR, SE);
   
    //GenericTimerStart(15, TIMER_REPEAT, 100); 


    _avr_enable_interrupt();
     29a:	0e 94 19 02 	call	0x432	; 0x432 <_avr_enable_interrupt>

    while (1)
    {
        runNextTask();
     29e:	0e 94 57 16 	call	0x2cae	; 0x2cae <runNextTask>
     2a2:	fd cf       	rjmp	.-6      	; 0x29e <main+0xa0>
     2a4:	0e 94 04 02 	call	0x408	; 0x408 <node_readnodeid>
     2a8:	90 93 f7 03 	sts	0x03F7, r25
     2ac:	80 93 f6 03 	sts	0x03F6, r24
     2b0:	0e 94 37 55 	call	0xaa6e	; 0xaa6e <srand>
     2b4:	80 e2       	ldi	r24, 0x20	; 32
     2b6:	9c e0       	ldi	r25, 0x0C	; 12
     2b8:	60 e1       	ldi	r22, 0x10	; 16
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	48 ef       	ldi	r20, 0xF8	; 248
     2be:	53 e0       	ldi	r21, 0x03	; 3
     2c0:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <genericreadBytes>
     2c4:	85 e3       	ldi	r24, 0x35	; 53
     2c6:	9c e0       	ldi	r25, 0x0C	; 12
     2c8:	60 e1       	ldi	r22, 0x10	; 16
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	45 ee       	ldi	r20, 0xE5	; 229
     2ce:	53 e0       	ldi	r21, 0x03	; 3
     2d0:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <genericreadBytes>
     2d4:	80 91 f6 03 	lds	r24, 0x03F6
     2d8:	90 91 f7 03 	lds	r25, 0x03F7
     2dc:	90 93 3d 01 	sts	0x013D, r25
     2e0:	80 93 3c 01 	sts	0x013C, r24
     2e4:	10 92 08 04 	sts	0x0408, r1
     2e8:	10 92 f5 03 	sts	0x03F5, r1
     2ec:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <Leds_redToggle>
     2f0:	0e 94 3e 1c 	call	0x387c	; 0x387c <Leds_greenToggle>
     2f4:	0e 94 08 1c 	call	0x3810	; 0x3810 <Leds_yellowToggle>
     2f8:	0e 94 24 20 	call	0x4048	; 0x4048 <formatSystem>
     2fc:	0e 94 2a 29 	call	0x5254	; 0x5254 <buildRootNode>
     300:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <Leds_redToggle>
     304:	0e 94 3e 1c 	call	0x387c	; 0x387c <Leds_greenToggle>
     308:	0e 94 08 1c 	call	0x3810	; 0x3810 <Leds_yellowToggle>
     30c:	8a e0       	ldi	r24, 0x0A	; 10
     30e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <node_setinitstatus>
     312:	8f cf       	rjmp	.-226    	; 0x232 <main+0x34>
     314:	0e 94 04 02 	call	0x408	; 0x408 <node_readnodeid>
     318:	90 93 f7 03 	sts	0x03F7, r25
     31c:	80 93 f6 03 	sts	0x03F6, r24
     320:	0e 94 37 55 	call	0xaa6e	; 0xaa6e <srand>
     324:	80 e2       	ldi	r24, 0x20	; 32
     326:	9c e0       	ldi	r25, 0x0C	; 12
     328:	60 e1       	ldi	r22, 0x10	; 16
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	48 ef       	ldi	r20, 0xF8	; 248
     32e:	53 e0       	ldi	r21, 0x03	; 3
     330:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <genericreadBytes>
     334:	85 e3       	ldi	r24, 0x35	; 53
     336:	9c e0       	ldi	r25, 0x0C	; 12
     338:	60 e1       	ldi	r22, 0x10	; 16
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	45 ee       	ldi	r20, 0xE5	; 229
     33e:	53 e0       	ldi	r21, 0x03	; 3
     340:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <genericreadBytes>
     344:	80 91 f6 03 	lds	r24, 0x03F6
     348:	90 91 f7 03 	lds	r25, 0x03F7
     34c:	90 93 3d 01 	sts	0x013D, r25
     350:	80 93 3c 01 	sts	0x013C, r24
     354:	10 92 08 04 	sts	0x0408, r1
     358:	10 92 f5 03 	sts	0x03F5, r1
     35c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <Leds_redToggle>
     360:	0e 94 3e 1c 	call	0x387c	; 0x387c <Leds_greenToggle>
     364:	0e 94 08 1c 	call	0x3810	; 0x3810 <Leds_yellowToggle>
     368:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <readVectorFlashFromExternalStorage>
     36c:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <readVectorNodeFromExternalStorage>
     370:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <Leds_redToggle>
     374:	0e 94 3e 1c 	call	0x387c	; 0x387c <Leds_greenToggle>
     378:	0e 94 08 1c 	call	0x3810	; 0x3810 <Leds_yellowToggle>
     37c:	5a cf       	rjmp	.-332    	; 0x232 <main+0x34>

0000037e <initCommandReceived>:
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	8c 01       	movw	r16, r24
     384:	80 e2       	ldi	r24, 0x20	; 32
     386:	9c e0       	ldi	r25, 0x0C	; 12
     388:	60 e1       	ldi	r22, 0x10	; 16
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	a8 01       	movw	r20, r16
     38e:	0e 94 ed 1c 	call	0x39da	; 0x39da <genericwriteBytes>
     392:	a8 01       	movw	r20, r16
     394:	40 5f       	subi	r20, 0xF0	; 240
     396:	5f 4f       	sbci	r21, 0xFF	; 255
     398:	85 e3       	ldi	r24, 0x35	; 53
     39a:	9c e0       	ldi	r25, 0x0C	; 12
     39c:	6f e0       	ldi	r22, 0x0F	; 15
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	0e 94 ed 1c 	call	0x39da	; 0x39da <genericwriteBytes>
     3a4:	f8 01       	movw	r30, r16
     3a6:	87 8d       	ldd	r24, Z+31	; 0x1f
     3a8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <node_setradiochannel>
     3ac:	f8 01       	movw	r30, r16
     3ae:	80 a1       	ldd	r24, Z+32	; 0x20
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 09 02 	call	0x412	; 0x412 <node_writenodeid>
     3b6:	8a e0       	ldi	r24, 0x0A	; 10
     3b8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <node_setinitstatus>
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 13 08 	call	0x1026	; 0x1026 <printfstr>
     3c6:	0f 5f       	subi	r16, 0xFF	; 255
     3c8:	00 32       	cpi	r16, 0x20	; 32
     3ca:	c9 f7       	brne	.-14     	; 0x3be <initCommandReceived+0x40>
     3cc:	0e 94 22 02 	call	0x444	; 0x444 <avr_resetNode>
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <node_readnodestring>:
char filenameid[17];


char *node_readnodestring()
{
     3d6:	85 ee       	ldi	r24, 0xE5	; 229
     3d8:	93 e0       	ldi	r25, 0x03	; 3
     3da:	08 95       	ret

000003dc <node_getradiochannel>:
  return filenameid; 	
}


void node_writenodeid(uint16_t nodeid)
{
    write16uint(NODEIDOFFSET, nodeid);
}

//-------------------------------------------------------------------------
uint16_t node_readnodeid()
{
    return read16uint(NODEIDOFFSET);
}

//-------------------------------------------------------------------------
void node_setinitstatus(uint8_t status)
{
    write8uint(NODESTATUSOFFSET, status);
}

//-------------------------------------------------------------------------
uint8_t node_readinitstatus()
{
    return read8uint(NODESTATUSOFFSET);
}

//-------------------------------------------------------------------------
void node_setradiochannel(uint8_t channel)
{
    write8uint(NODECHANNELOFFSET, channel);
}

//-------------------------------------------------------------------------
uint8_t node_getradiochannel()
{
     3dc:	84 e5       	ldi	r24, 0x54	; 84
     3de:	9c e0       	ldi	r25, 0x0C	; 12
     3e0:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <read8uint>
    return read8uint(NODECHANNELOFFSET);
}
     3e4:	08 95       	ret

000003e6 <node_readinitstatus>:
     3e6:	82 e5       	ldi	r24, 0x52	; 82
     3e8:	9c e0       	ldi	r25, 0x0C	; 12
     3ea:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <read8uint>
     3ee:	08 95       	ret

000003f0 <node_setradiochannel>:
     3f0:	68 2f       	mov	r22, r24
     3f2:	84 e5       	ldi	r24, 0x54	; 84
     3f4:	9c e0       	ldi	r25, 0x0C	; 12
     3f6:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <write8uint>
     3fa:	08 95       	ret

000003fc <node_setinitstatus>:
     3fc:	68 2f       	mov	r22, r24
     3fe:	82 e5       	ldi	r24, 0x52	; 82
     400:	9c e0       	ldi	r25, 0x0C	; 12
     402:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <write8uint>
     406:	08 95       	ret

00000408 <node_readnodeid>:
     408:	8e e4       	ldi	r24, 0x4E	; 78
     40a:	9c e0       	ldi	r25, 0x0C	; 12
     40c:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <read16uint>
     410:	08 95       	ret

00000412 <node_writenodeid>:
     412:	bc 01       	movw	r22, r24
     414:	8e e4       	ldi	r24, 0x4E	; 78
     416:	9c e0       	ldi	r25, 0x0C	; 12
     418:	0e 94 cf 1c 	call	0x399e	; 0x399e <write16uint>
     41c:	08 95       	ret

0000041e <wait_cycle>:
#include "avrhardware.h"
void wait_cycle()
{
     41e:	00 00       	nop
    asm volatile ("nop");
    asm volatile ("nop");
     420:	00 00       	nop
}
     422:	08 95       	ret

00000424 <_atomic_sleep>:

//-------------------------------------------------------------------------
inline void _atomic_sleep()
{
     424:	78 94       	sei
    /* Atomically enable interrupts and sleep */
    sei();                      // Make sure interrupts are on, so we can wake up!
    asm volatile ("sleep");
     426:	88 95       	sleep
     428:	00 00       	nop
     42a:	00 00       	nop

    wait_cycle();
}
     42c:	08 95       	ret

0000042e <_avr_sleep>:

//-------------------------------------------------------------------------
inline void _avr_sleep()
{
     42e:	88 95       	sleep
    asm volatile ("sleep");
}
     430:	08 95       	ret

00000432 <_avr_enable_interrupt>:

//-------------------------------------------------------------------------
inline void _avr_enable_interrupt()
{
     432:	78 94       	sei
    sei();
}
     434:	08 95       	ret

00000436 <_avr_disable_interrupt>:

//-------------------------------------------------------------------------
inline void _avr_disable_interrupt()
{
     436:	f8 94       	cli
    cli();
}
     438:	08 95       	ret

0000043a <_atomic_start_avr>:

//-------------------------------------------------------------------------
_atomic_t _atomic_start_avr(void)
{
     43a:	8f b7       	in	r24, 0x3f	; 63
    _atomic_t result = inp(SREG);

    cli();
     43c:	f8 94       	cli
    return result;
}
     43e:	08 95       	ret

00000440 <_atomic_end_avr>:

//-------------------------------------------------------------------------
void _atomic_end_avr(_atomic_t oldSreg)
{
     440:	8f bf       	out	0x3f, r24	; 63
    outp(oldSreg, SREG);
}
     442:	08 95       	ret

00000444 <avr_resetNode>:

//-------------------------------------------------------------------------
void avr_resetNode()
{
     444:	e0 e0       	ldi	r30, 0x00	; 0
    asm volatile ("ldi	r30, 0x00"::);
    asm volatile ("ldi	r31, 0x00"::);
     446:	f0 e0       	ldi	r31, 0x00	; 0
    asm volatile ("icall"::);
     448:	09 95       	icall
}
     44a:	08 95       	ret

0000044c <LITE_wait_250ns>:


void inline LITE_wait_250ns()
{
     44c:	00 00       	nop
    asm volatile ("nop"::);
    asm volatile ("nop"::);
     44e:	00 00       	nop
}
     450:	08 95       	ret

00000452 <LITE_uwait>:

//-------------------------------------------------------------------------
void inline LITE_uwait(int u_sec)
{
     452:	18 16       	cp	r1, r24
     454:	19 06       	cpc	r1, r25
     456:	64 f4       	brge	.+24     	; 0x470 <LITE_uwait+0x1e>
	...
    while (u_sec > 0)
    {
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);
        asm volatile ("nop"::);

        u_sec--;
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	18 16       	cp	r1, r24
     46c:	19 06       	cpc	r1, r25
     46e:	a4 f3       	brlt	.-24     	; 0x458 <LITE_uwait+0x6>
     470:	08 95       	ret

00000472 <LITE_SET_RED_LED_PIN>:
    }
}

// LED assignments
LITE_ASSIGN_PIN(RED_LED, A, 2);
     472:	da 9a       	sbi	0x1b, 2	; 27
     474:	08 95       	ret

00000476 <LITE_CLR_RED_LED_PIN>:
     476:	da 98       	cbi	0x1b, 2	; 27
     478:	08 95       	ret

0000047a <LITE_READ_RED_LED_PIN>:
     47a:	29 b3       	in	r18, 0x19	; 25
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	36 95       	lsr	r19
     480:	27 95       	ror	r18
     482:	36 95       	lsr	r19
     484:	27 95       	ror	r18
     486:	21 70       	andi	r18, 0x01	; 1
     488:	30 70       	andi	r19, 0x00	; 0
     48a:	c9 01       	movw	r24, r18
     48c:	08 95       	ret

0000048e <LITE_MAKE_RED_LED_OUTPUT>:
     48e:	d2 9a       	sbi	0x1a, 2	; 26
     490:	08 95       	ret

00000492 <LITE_MAKE_RED_LED_INPUT>:
     492:	d2 98       	cbi	0x1a, 2	; 26
     494:	08 95       	ret

00000496 <LITE_SET_GREEN_LED_PIN>:
LITE_ASSIGN_PIN(GREEN_LED, A, 1);
     496:	d9 9a       	sbi	0x1b, 1	; 27
     498:	08 95       	ret

0000049a <LITE_CLR_GREEN_LED_PIN>:
     49a:	d9 98       	cbi	0x1b, 1	; 27
     49c:	08 95       	ret

0000049e <LITE_READ_GREEN_LED_PIN>:
     49e:	29 b3       	in	r18, 0x19	; 25
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	36 95       	lsr	r19
     4a4:	27 95       	ror	r18
     4a6:	21 70       	andi	r18, 0x01	; 1
     4a8:	30 70       	andi	r19, 0x00	; 0
     4aa:	c9 01       	movw	r24, r18
     4ac:	08 95       	ret

000004ae <LITE_MAKE_GREEN_LED_OUTPUT>:
     4ae:	d1 9a       	sbi	0x1a, 1	; 26
     4b0:	08 95       	ret

000004b2 <LITE_MAKE_GREEN_LED_INPUT>:
     4b2:	d1 98       	cbi	0x1a, 1	; 26
     4b4:	08 95       	ret

000004b6 <LITE_SET_YELLOW_LED_PIN>:
LITE_ASSIGN_PIN(YELLOW_LED, A, 0);
     4b6:	d8 9a       	sbi	0x1b, 0	; 27
     4b8:	08 95       	ret

000004ba <LITE_CLR_YELLOW_LED_PIN>:
     4ba:	d8 98       	cbi	0x1b, 0	; 27
     4bc:	08 95       	ret

000004be <LITE_READ_YELLOW_LED_PIN>:
     4be:	29 b3       	in	r18, 0x19	; 25
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	21 70       	andi	r18, 0x01	; 1
     4c4:	30 70       	andi	r19, 0x00	; 0
     4c6:	c9 01       	movw	r24, r18
     4c8:	08 95       	ret

000004ca <LITE_MAKE_YELLOW_LED_OUTPUT>:
     4ca:	d0 9a       	sbi	0x1a, 0	; 26
     4cc:	08 95       	ret

000004ce <LITE_MAKE_YELLOW_LED_INPUT>:
     4ce:	d0 98       	cbi	0x1a, 0	; 26
     4d0:	08 95       	ret

000004d2 <LITE_SET_SERIAL_ID_PIN>:
LITE_ASSIGN_PIN(SERIAL_ID, A, 4);
     4d2:	dc 9a       	sbi	0x1b, 4	; 27
     4d4:	08 95       	ret

000004d6 <LITE_CLR_SERIAL_ID_PIN>:
     4d6:	dc 98       	cbi	0x1b, 4	; 27
     4d8:	08 95       	ret

000004da <LITE_READ_SERIAL_ID_PIN>:
     4da:	29 b3       	in	r18, 0x19	; 25
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	32 95       	swap	r19
     4e0:	22 95       	swap	r18
     4e2:	2f 70       	andi	r18, 0x0F	; 15
     4e4:	23 27       	eor	r18, r19
     4e6:	3f 70       	andi	r19, 0x0F	; 15
     4e8:	23 27       	eor	r18, r19
     4ea:	21 70       	andi	r18, 0x01	; 1
     4ec:	30 70       	andi	r19, 0x00	; 0
     4ee:	c9 01       	movw	r24, r18
     4f0:	08 95       	ret

000004f2 <LITE_MAKE_SERIAL_ID_OUTPUT>:
     4f2:	d4 9a       	sbi	0x1a, 4	; 26
     4f4:	08 95       	ret

000004f6 <LITE_MAKE_SERIAL_ID_INPUT>:
     4f6:	d4 98       	cbi	0x1a, 4	; 26
     4f8:	08 95       	ret

000004fa <LITE_SET_BAT_MON_PIN>:
LITE_ASSIGN_PIN(BAT_MON, A, 5);
     4fa:	dd 9a       	sbi	0x1b, 5	; 27
     4fc:	08 95       	ret

000004fe <LITE_CLR_BAT_MON_PIN>:
     4fe:	dd 98       	cbi	0x1b, 5	; 27
     500:	08 95       	ret

00000502 <LITE_READ_BAT_MON_PIN>:
     502:	29 b3       	in	r18, 0x19	; 25
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	36 95       	lsr	r19
     508:	27 95       	ror	r18
     50a:	32 95       	swap	r19
     50c:	22 95       	swap	r18
     50e:	2f 70       	andi	r18, 0x0F	; 15
     510:	23 27       	eor	r18, r19
     512:	3f 70       	andi	r19, 0x0F	; 15
     514:	23 27       	eor	r18, r19
     516:	21 70       	andi	r18, 0x01	; 1
     518:	30 70       	andi	r19, 0x00	; 0
     51a:	c9 01       	movw	r24, r18
     51c:	08 95       	ret

0000051e <LITE_MAKE_BAT_MON_OUTPUT>:
     51e:	d5 9a       	sbi	0x1a, 5	; 26
     520:	08 95       	ret

00000522 <LITE_MAKE_BAT_MON_INPUT>:
     522:	d5 98       	cbi	0x1a, 5	; 26
     524:	08 95       	ret

00000526 <LITE_SET_THERM_PWR_PIN>:
LITE_ASSIGN_PIN(THERM_PWR, A, 7);
     526:	df 9a       	sbi	0x1b, 7	; 27
     528:	08 95       	ret

0000052a <LITE_CLR_THERM_PWR_PIN>:
     52a:	df 98       	cbi	0x1b, 7	; 27
     52c:	08 95       	ret

0000052e <LITE_READ_THERM_PWR_PIN>:
     52e:	29 b3       	in	r18, 0x19	; 25
     530:	33 27       	eor	r19, r19
     532:	27 fd       	sbrc	r18, 7
     534:	30 95       	com	r19
     536:	22 27       	eor	r18, r18
     538:	33 0f       	add	r19, r19
     53a:	22 1f       	adc	r18, r18
     53c:	33 27       	eor	r19, r19
     53e:	c9 01       	movw	r24, r18
     540:	08 95       	ret

00000542 <LITE_MAKE_THERM_PWR_OUTPUT>:
     542:	d7 9a       	sbi	0x1a, 7	; 26
     544:	08 95       	ret

00000546 <LITE_MAKE_THERM_PWR_INPUT>:
     546:	d7 98       	cbi	0x1a, 7	; 26
     548:	08 95       	ret

0000054a <LITE_SET_FLASH_SELECT_PIN>:


// Flash assignments
LITE_ASSIGN_PIN(FLASH_SELECT, A, 3);
     54a:	db 9a       	sbi	0x1b, 3	; 27
     54c:	08 95       	ret

0000054e <LITE_CLR_FLASH_SELECT_PIN>:
     54e:	db 98       	cbi	0x1b, 3	; 27
     550:	08 95       	ret

00000552 <LITE_READ_FLASH_SELECT_PIN>:
     552:	29 b3       	in	r18, 0x19	; 25
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	36 95       	lsr	r19
     558:	27 95       	ror	r18
     55a:	36 95       	lsr	r19
     55c:	27 95       	ror	r18
     55e:	36 95       	lsr	r19
     560:	27 95       	ror	r18
     562:	21 70       	andi	r18, 0x01	; 1
     564:	30 70       	andi	r19, 0x00	; 0
     566:	c9 01       	movw	r24, r18
     568:	08 95       	ret

0000056a <LITE_MAKE_FLASH_SELECT_OUTPUT>:
     56a:	d3 9a       	sbi	0x1a, 3	; 26
     56c:	08 95       	ret

0000056e <LITE_MAKE_FLASH_SELECT_INPUT>:
     56e:	d3 98       	cbi	0x1a, 3	; 26
     570:	08 95       	ret

00000572 <LITE_SET_FLASH_CLK_PIN>:
LITE_ASSIGN_PIN(FLASH_CLK, D, 5);
     572:	95 9a       	sbi	0x12, 5	; 18
     574:	08 95       	ret

00000576 <LITE_CLR_FLASH_CLK_PIN>:
     576:	95 98       	cbi	0x12, 5	; 18
     578:	08 95       	ret

0000057a <LITE_READ_FLASH_CLK_PIN>:
     57a:	20 b3       	in	r18, 0x10	; 16
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	36 95       	lsr	r19
     580:	27 95       	ror	r18
     582:	32 95       	swap	r19
     584:	22 95       	swap	r18
     586:	2f 70       	andi	r18, 0x0F	; 15
     588:	23 27       	eor	r18, r19
     58a:	3f 70       	andi	r19, 0x0F	; 15
     58c:	23 27       	eor	r18, r19
     58e:	21 70       	andi	r18, 0x01	; 1
     590:	30 70       	andi	r19, 0x00	; 0
     592:	c9 01       	movw	r24, r18
     594:	08 95       	ret

00000596 <LITE_MAKE_FLASH_CLK_OUTPUT>:
     596:	8d 9a       	sbi	0x11, 5	; 17
     598:	08 95       	ret

0000059a <LITE_MAKE_FLASH_CLK_INPUT>:
     59a:	8d 98       	cbi	0x11, 5	; 17
     59c:	08 95       	ret

0000059e <LITE_SET_FLASH_OUT_PIN>:
LITE_ASSIGN_PIN(FLASH_OUT, D, 3);
     59e:	93 9a       	sbi	0x12, 3	; 18
     5a0:	08 95       	ret

000005a2 <LITE_CLR_FLASH_OUT_PIN>:
     5a2:	93 98       	cbi	0x12, 3	; 18
     5a4:	08 95       	ret

000005a6 <LITE_READ_FLASH_OUT_PIN>:
     5a6:	20 b3       	in	r18, 0x10	; 16
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	36 95       	lsr	r19
     5ac:	27 95       	ror	r18
     5ae:	36 95       	lsr	r19
     5b0:	27 95       	ror	r18
     5b2:	36 95       	lsr	r19
     5b4:	27 95       	ror	r18
     5b6:	21 70       	andi	r18, 0x01	; 1
     5b8:	30 70       	andi	r19, 0x00	; 0
     5ba:	c9 01       	movw	r24, r18
     5bc:	08 95       	ret

000005be <LITE_MAKE_FLASH_OUT_OUTPUT>:
     5be:	8b 9a       	sbi	0x11, 3	; 17
     5c0:	08 95       	ret

000005c2 <LITE_MAKE_FLASH_OUT_INPUT>:
     5c2:	8b 98       	cbi	0x11, 3	; 17
     5c4:	08 95       	ret

000005c6 <LITE_SET_FLASH_IN_PIN>:
LITE_ASSIGN_PIN(FLASH_IN, D, 2);
     5c6:	92 9a       	sbi	0x12, 2	; 18
     5c8:	08 95       	ret

000005ca <LITE_CLR_FLASH_IN_PIN>:
     5ca:	92 98       	cbi	0x12, 2	; 18
     5cc:	08 95       	ret

000005ce <LITE_READ_FLASH_IN_PIN>:
     5ce:	20 b3       	in	r18, 0x10	; 16
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	36 95       	lsr	r19
     5d4:	27 95       	ror	r18
     5d6:	36 95       	lsr	r19
     5d8:	27 95       	ror	r18
     5da:	21 70       	andi	r18, 0x01	; 1
     5dc:	30 70       	andi	r19, 0x00	; 0
     5de:	c9 01       	movw	r24, r18
     5e0:	08 95       	ret

000005e2 <LITE_MAKE_FLASH_IN_OUTPUT>:
     5e2:	8a 9a       	sbi	0x11, 2	; 17
     5e4:	08 95       	ret

000005e6 <LITE_MAKE_FLASH_IN_INPUT>:
     5e6:	8a 98       	cbi	0x11, 2	; 17
     5e8:	08 95       	ret

000005ea <LITE_SET_INT0_PIN>:
// interrupt assignments
LITE_ASSIGN_PIN(INT0, E, 4);
     5ea:	1c 9a       	sbi	0x03, 4	; 3
     5ec:	08 95       	ret

000005ee <LITE_CLR_INT0_PIN>:
     5ee:	1c 98       	cbi	0x03, 4	; 3
     5f0:	08 95       	ret

000005f2 <LITE_READ_INT0_PIN>:
     5f2:	21 b1       	in	r18, 0x01	; 1
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	32 95       	swap	r19
     5f8:	22 95       	swap	r18
     5fa:	2f 70       	andi	r18, 0x0F	; 15
     5fc:	23 27       	eor	r18, r19
     5fe:	3f 70       	andi	r19, 0x0F	; 15
     600:	23 27       	eor	r18, r19
     602:	21 70       	andi	r18, 0x01	; 1
     604:	30 70       	andi	r19, 0x00	; 0
     606:	c9 01       	movw	r24, r18
     608:	08 95       	ret

0000060a <LITE_MAKE_INT0_OUTPUT>:
     60a:	14 9a       	sbi	0x02, 4	; 2
     60c:	08 95       	ret

0000060e <LITE_MAKE_INT0_INPUT>:
     60e:	14 98       	cbi	0x02, 4	; 2
     610:	08 95       	ret

00000612 <LITE_SET_INT1_PIN>:
LITE_ASSIGN_PIN(INT1, E, 5);
     612:	1d 9a       	sbi	0x03, 5	; 3
     614:	08 95       	ret

00000616 <LITE_CLR_INT1_PIN>:
     616:	1d 98       	cbi	0x03, 5	; 3
     618:	08 95       	ret

0000061a <LITE_READ_INT1_PIN>:
     61a:	21 b1       	in	r18, 0x01	; 1
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	36 95       	lsr	r19
     620:	27 95       	ror	r18
     622:	32 95       	swap	r19
     624:	22 95       	swap	r18
     626:	2f 70       	andi	r18, 0x0F	; 15
     628:	23 27       	eor	r18, r19
     62a:	3f 70       	andi	r19, 0x0F	; 15
     62c:	23 27       	eor	r18, r19
     62e:	21 70       	andi	r18, 0x01	; 1
     630:	30 70       	andi	r19, 0x00	; 0
     632:	c9 01       	movw	r24, r18
     634:	08 95       	ret

00000636 <LITE_MAKE_INT1_OUTPUT>:
     636:	15 9a       	sbi	0x02, 5	; 2
     638:	08 95       	ret

0000063a <LITE_MAKE_INT1_INPUT>:
     63a:	15 98       	cbi	0x02, 5	; 2
     63c:	08 95       	ret

0000063e <LITE_SET_INT2_PIN>:
LITE_ASSIGN_PIN(INT2, E, 6);
     63e:	1e 9a       	sbi	0x03, 6	; 3
     640:	08 95       	ret

00000642 <LITE_CLR_INT2_PIN>:
     642:	1e 98       	cbi	0x03, 6	; 3
     644:	08 95       	ret

00000646 <LITE_READ_INT2_PIN>:
     646:	21 b1       	in	r18, 0x01	; 1
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	00 24       	eor	r0, r0
     64c:	22 0f       	add	r18, r18
     64e:	33 1f       	adc	r19, r19
     650:	00 1c       	adc	r0, r0
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	00 1c       	adc	r0, r0
     658:	23 2f       	mov	r18, r19
     65a:	30 2d       	mov	r19, r0
     65c:	21 70       	andi	r18, 0x01	; 1
     65e:	30 70       	andi	r19, 0x00	; 0
     660:	c9 01       	movw	r24, r18
     662:	08 95       	ret

00000664 <LITE_MAKE_INT2_OUTPUT>:
     664:	16 9a       	sbi	0x02, 6	; 2
     666:	08 95       	ret

00000668 <LITE_MAKE_INT2_INPUT>:
     668:	16 98       	cbi	0x02, 6	; 2
     66a:	08 95       	ret

0000066c <LITE_SET_INT3_PIN>:
LITE_ASSIGN_PIN(INT3, E, 7);
     66c:	1f 9a       	sbi	0x03, 7	; 3
     66e:	08 95       	ret

00000670 <LITE_CLR_INT3_PIN>:
     670:	1f 98       	cbi	0x03, 7	; 3
     672:	08 95       	ret

00000674 <LITE_READ_INT3_PIN>:
     674:	21 b1       	in	r18, 0x01	; 1
     676:	33 27       	eor	r19, r19
     678:	27 fd       	sbrc	r18, 7
     67a:	30 95       	com	r19
     67c:	22 27       	eor	r18, r18
     67e:	33 0f       	add	r19, r19
     680:	22 1f       	adc	r18, r18
     682:	33 27       	eor	r19, r19
     684:	c9 01       	movw	r24, r18
     686:	08 95       	ret

00000688 <LITE_MAKE_INT3_OUTPUT>:
     688:	17 9a       	sbi	0x02, 7	; 2
     68a:	08 95       	ret

0000068c <LITE_MAKE_INT3_INPUT>:
     68c:	17 98       	cbi	0x02, 7	; 2
     68e:	08 95       	ret

00000690 <LITE_SET_MOSI_PIN>:
// spibus assignments 
LITE_ASSIGN_PIN(MOSI, B, 2);
     690:	c2 9a       	sbi	0x18, 2	; 24
     692:	08 95       	ret

00000694 <LITE_CLR_MOSI_PIN>:
     694:	c2 98       	cbi	0x18, 2	; 24
     696:	08 95       	ret

00000698 <LITE_READ_MOSI_PIN>:
     698:	26 b3       	in	r18, 0x16	; 22
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	36 95       	lsr	r19
     69e:	27 95       	ror	r18
     6a0:	36 95       	lsr	r19
     6a2:	27 95       	ror	r18
     6a4:	21 70       	andi	r18, 0x01	; 1
     6a6:	30 70       	andi	r19, 0x00	; 0
     6a8:	c9 01       	movw	r24, r18
     6aa:	08 95       	ret

000006ac <LITE_MAKE_MOSI_OUTPUT>:
     6ac:	ba 9a       	sbi	0x17, 2	; 23
     6ae:	08 95       	ret

000006b0 <LITE_MAKE_MOSI_INPUT>:
     6b0:	ba 98       	cbi	0x17, 2	; 23
     6b2:	08 95       	ret

000006b4 <LITE_SET_MISO_PIN>:
LITE_ASSIGN_PIN(MISO, B, 3);
     6b4:	c3 9a       	sbi	0x18, 3	; 24
     6b6:	08 95       	ret

000006b8 <LITE_CLR_MISO_PIN>:
     6b8:	c3 98       	cbi	0x18, 3	; 24
     6ba:	08 95       	ret

000006bc <LITE_READ_MISO_PIN>:
     6bc:	26 b3       	in	r18, 0x16	; 22
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	36 95       	lsr	r19
     6c2:	27 95       	ror	r18
     6c4:	36 95       	lsr	r19
     6c6:	27 95       	ror	r18
     6c8:	36 95       	lsr	r19
     6ca:	27 95       	ror	r18
     6cc:	21 70       	andi	r18, 0x01	; 1
     6ce:	30 70       	andi	r19, 0x00	; 0
     6d0:	c9 01       	movw	r24, r18
     6d2:	08 95       	ret

000006d4 <LITE_MAKE_MISO_OUTPUT>:
     6d4:	bb 9a       	sbi	0x17, 3	; 23
     6d6:	08 95       	ret

000006d8 <LITE_MAKE_MISO_INPUT>:
     6d8:	bb 98       	cbi	0x17, 3	; 23
     6da:	08 95       	ret

000006dc <LITE_SET_SPI_SCK_PIN>:
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN(SPI_SCK, B, 1);
     6dc:	c1 9a       	sbi	0x18, 1	; 24
     6de:	08 95       	ret

000006e0 <LITE_CLR_SPI_SCK_PIN>:
     6e0:	c1 98       	cbi	0x18, 1	; 24
     6e2:	08 95       	ret

000006e4 <LITE_READ_SPI_SCK_PIN>:
     6e4:	26 b3       	in	r18, 0x16	; 22
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	36 95       	lsr	r19
     6ea:	27 95       	ror	r18
     6ec:	21 70       	andi	r18, 0x01	; 1
     6ee:	30 70       	andi	r19, 0x00	; 0
     6f0:	c9 01       	movw	r24, r18
     6f2:	08 95       	ret

000006f4 <LITE_MAKE_SPI_SCK_OUTPUT>:
     6f4:	b9 9a       	sbi	0x17, 1	; 23
     6f6:	08 95       	ret

000006f8 <LITE_MAKE_SPI_SCK_INPUT>:
     6f8:	b9 98       	cbi	0x17, 1	; 23
     6fa:	08 95       	ret

000006fc <LITE_SET_PW0_PIN>:
// power control assignments
LITE_ASSIGN_PIN(PW0, C, 0);
     6fc:	a8 9a       	sbi	0x15, 0	; 21
     6fe:	08 95       	ret

00000700 <LITE_CLR_PW0_PIN>:
     700:	a8 98       	cbi	0x15, 0	; 21
     702:	08 95       	ret

00000704 <LITE_READ_PW0_PIN>:
     704:	23 b3       	in	r18, 0x13	; 19
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	21 70       	andi	r18, 0x01	; 1
     70a:	30 70       	andi	r19, 0x00	; 0
     70c:	c9 01       	movw	r24, r18
     70e:	08 95       	ret

00000710 <LITE_MAKE_PW0_OUTPUT>:
     710:	a0 9a       	sbi	0x14, 0	; 20
     712:	08 95       	ret

00000714 <LITE_MAKE_PW0_INPUT>:
     714:	a0 98       	cbi	0x14, 0	; 20
     716:	08 95       	ret

00000718 <LITE_SET_PW1_PIN>:
LITE_ASSIGN_PIN(PW1, C, 1);
     718:	a9 9a       	sbi	0x15, 1	; 21
     71a:	08 95       	ret

0000071c <LITE_CLR_PW1_PIN>:
     71c:	a9 98       	cbi	0x15, 1	; 21
     71e:	08 95       	ret

00000720 <LITE_READ_PW1_PIN>:
     720:	23 b3       	in	r18, 0x13	; 19
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	36 95       	lsr	r19
     726:	27 95       	ror	r18
     728:	21 70       	andi	r18, 0x01	; 1
     72a:	30 70       	andi	r19, 0x00	; 0
     72c:	c9 01       	movw	r24, r18
     72e:	08 95       	ret

00000730 <LITE_MAKE_PW1_OUTPUT>:
     730:	a1 9a       	sbi	0x14, 1	; 20
     732:	08 95       	ret

00000734 <LITE_MAKE_PW1_INPUT>:
     734:	a1 98       	cbi	0x14, 1	; 20
     736:	08 95       	ret

00000738 <LITE_SET_PW2_PIN>:
LITE_ASSIGN_PIN(PW2, C, 2);
     738:	aa 9a       	sbi	0x15, 2	; 21
     73a:	08 95       	ret

0000073c <LITE_CLR_PW2_PIN>:
     73c:	aa 98       	cbi	0x15, 2	; 21
     73e:	08 95       	ret

00000740 <LITE_READ_PW2_PIN>:
     740:	23 b3       	in	r18, 0x13	; 19
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	36 95       	lsr	r19
     746:	27 95       	ror	r18
     748:	36 95       	lsr	r19
     74a:	27 95       	ror	r18
     74c:	21 70       	andi	r18, 0x01	; 1
     74e:	30 70       	andi	r19, 0x00	; 0
     750:	c9 01       	movw	r24, r18
     752:	08 95       	ret

00000754 <LITE_MAKE_PW2_OUTPUT>:
     754:	a2 9a       	sbi	0x14, 2	; 20
     756:	08 95       	ret

00000758 <LITE_MAKE_PW2_INPUT>:
     758:	a2 98       	cbi	0x14, 2	; 20
     75a:	08 95       	ret

0000075c <LITE_SET_PW3_PIN>:
LITE_ASSIGN_PIN(PW3, C, 3);
     75c:	ab 9a       	sbi	0x15, 3	; 21
     75e:	08 95       	ret

00000760 <LITE_CLR_PW3_PIN>:
     760:	ab 98       	cbi	0x15, 3	; 21
     762:	08 95       	ret

00000764 <LITE_READ_PW3_PIN>:
     764:	23 b3       	in	r18, 0x13	; 19
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	36 95       	lsr	r19
     76a:	27 95       	ror	r18
     76c:	36 95       	lsr	r19
     76e:	27 95       	ror	r18
     770:	36 95       	lsr	r19
     772:	27 95       	ror	r18
     774:	21 70       	andi	r18, 0x01	; 1
     776:	30 70       	andi	r19, 0x00	; 0
     778:	c9 01       	movw	r24, r18
     77a:	08 95       	ret

0000077c <LITE_MAKE_PW3_OUTPUT>:
     77c:	a3 9a       	sbi	0x14, 3	; 20
     77e:	08 95       	ret

00000780 <LITE_MAKE_PW3_INPUT>:
     780:	a3 98       	cbi	0x14, 3	; 20
     782:	08 95       	ret

00000784 <LITE_SET_PW4_PIN>:
LITE_ASSIGN_PIN(PW4, C, 4);
     784:	ac 9a       	sbi	0x15, 4	; 21
     786:	08 95       	ret

00000788 <LITE_CLR_PW4_PIN>:
     788:	ac 98       	cbi	0x15, 4	; 21
     78a:	08 95       	ret

0000078c <LITE_READ_PW4_PIN>:
     78c:	23 b3       	in	r18, 0x13	; 19
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	32 95       	swap	r19
     792:	22 95       	swap	r18
     794:	2f 70       	andi	r18, 0x0F	; 15
     796:	23 27       	eor	r18, r19
     798:	3f 70       	andi	r19, 0x0F	; 15
     79a:	23 27       	eor	r18, r19
     79c:	21 70       	andi	r18, 0x01	; 1
     79e:	30 70       	andi	r19, 0x00	; 0
     7a0:	c9 01       	movw	r24, r18
     7a2:	08 95       	ret

000007a4 <LITE_MAKE_PW4_OUTPUT>:
     7a4:	a4 9a       	sbi	0x14, 4	; 20
     7a6:	08 95       	ret

000007a8 <LITE_MAKE_PW4_INPUT>:
     7a8:	a4 98       	cbi	0x14, 4	; 20
     7aa:	08 95       	ret

000007ac <LITE_SET_PW5_PIN>:
LITE_ASSIGN_PIN(PW5, C, 5);
     7ac:	ad 9a       	sbi	0x15, 5	; 21
     7ae:	08 95       	ret

000007b0 <LITE_CLR_PW5_PIN>:
     7b0:	ad 98       	cbi	0x15, 5	; 21
     7b2:	08 95       	ret

000007b4 <LITE_READ_PW5_PIN>:
     7b4:	23 b3       	in	r18, 0x13	; 19
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	36 95       	lsr	r19
     7ba:	27 95       	ror	r18
     7bc:	32 95       	swap	r19
     7be:	22 95       	swap	r18
     7c0:	2f 70       	andi	r18, 0x0F	; 15
     7c2:	23 27       	eor	r18, r19
     7c4:	3f 70       	andi	r19, 0x0F	; 15
     7c6:	23 27       	eor	r18, r19
     7c8:	21 70       	andi	r18, 0x01	; 1
     7ca:	30 70       	andi	r19, 0x00	; 0
     7cc:	c9 01       	movw	r24, r18
     7ce:	08 95       	ret

000007d0 <LITE_MAKE_PW5_OUTPUT>:
     7d0:	a5 9a       	sbi	0x14, 5	; 20
     7d2:	08 95       	ret

000007d4 <LITE_MAKE_PW5_INPUT>:
     7d4:	a5 98       	cbi	0x14, 5	; 20
     7d6:	08 95       	ret

000007d8 <LITE_SET_PW6_PIN>:
LITE_ASSIGN_PIN(PW6, C, 6);
     7d8:	ae 9a       	sbi	0x15, 6	; 21
     7da:	08 95       	ret

000007dc <LITE_CLR_PW6_PIN>:
     7dc:	ae 98       	cbi	0x15, 6	; 21
     7de:	08 95       	ret

000007e0 <LITE_READ_PW6_PIN>:
     7e0:	23 b3       	in	r18, 0x13	; 19
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	00 24       	eor	r0, r0
     7e6:	22 0f       	add	r18, r18
     7e8:	33 1f       	adc	r19, r19
     7ea:	00 1c       	adc	r0, r0
     7ec:	22 0f       	add	r18, r18
     7ee:	33 1f       	adc	r19, r19
     7f0:	00 1c       	adc	r0, r0
     7f2:	23 2f       	mov	r18, r19
     7f4:	30 2d       	mov	r19, r0
     7f6:	21 70       	andi	r18, 0x01	; 1
     7f8:	30 70       	andi	r19, 0x00	; 0
     7fa:	c9 01       	movw	r24, r18
     7fc:	08 95       	ret

000007fe <LITE_MAKE_PW6_OUTPUT>:
     7fe:	a6 9a       	sbi	0x14, 6	; 20
     800:	08 95       	ret

00000802 <LITE_MAKE_PW6_INPUT>:
     802:	a6 98       	cbi	0x14, 6	; 20
     804:	08 95       	ret

00000806 <LITE_SET_PW7_PIN>:
LITE_ASSIGN_PIN(PW7, C, 7);
     806:	af 9a       	sbi	0x15, 7	; 21
     808:	08 95       	ret

0000080a <LITE_CLR_PW7_PIN>:
     80a:	af 98       	cbi	0x15, 7	; 21
     80c:	08 95       	ret

0000080e <LITE_READ_PW7_PIN>:
     80e:	23 b3       	in	r18, 0x13	; 19
     810:	33 27       	eor	r19, r19
     812:	27 fd       	sbrc	r18, 7
     814:	30 95       	com	r19
     816:	22 27       	eor	r18, r18
     818:	33 0f       	add	r19, r19
     81a:	22 1f       	adc	r18, r18
     81c:	33 27       	eor	r19, r19
     81e:	c9 01       	movw	r24, r18
     820:	08 95       	ret

00000822 <LITE_MAKE_PW7_OUTPUT>:
     822:	a7 9a       	sbi	0x14, 7	; 20
     824:	08 95       	ret

00000826 <LITE_MAKE_PW7_INPUT>:
     826:	a7 98       	cbi	0x14, 7	; 20
     828:	08 95       	ret

0000082a <LITE_SET_I2C_BUS1_SCL_PIN>:
// i2c bus assignments
LITE_ASSIGN_PIN(I2C_BUS1_SCL, D, 0);
     82a:	90 9a       	sbi	0x12, 0	; 18
     82c:	08 95       	ret

0000082e <LITE_CLR_I2C_BUS1_SCL_PIN>:
     82e:	90 98       	cbi	0x12, 0	; 18
     830:	08 95       	ret

00000832 <LITE_READ_I2C_BUS1_SCL_PIN>:
     832:	20 b3       	in	r18, 0x10	; 16
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	21 70       	andi	r18, 0x01	; 1
     838:	30 70       	andi	r19, 0x00	; 0
     83a:	c9 01       	movw	r24, r18
     83c:	08 95       	ret

0000083e <LITE_MAKE_I2C_BUS1_SCL_OUTPUT>:
     83e:	88 9a       	sbi	0x11, 0	; 17
     840:	08 95       	ret

00000842 <LITE_MAKE_I2C_BUS1_SCL_INPUT>:
     842:	88 98       	cbi	0x11, 0	; 17
     844:	08 95       	ret

00000846 <LITE_SET_I2C_BUS1_SDA_PIN>:
LITE_ASSIGN_PIN(I2C_BUS1_SDA, D, 1);
     846:	91 9a       	sbi	0x12, 1	; 18
     848:	08 95       	ret

0000084a <LITE_CLR_I2C_BUS1_SDA_PIN>:
     84a:	91 98       	cbi	0x12, 1	; 18
     84c:	08 95       	ret

0000084e <LITE_READ_I2C_BUS1_SDA_PIN>:
     84e:	20 b3       	in	r18, 0x10	; 16
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	36 95       	lsr	r19
     854:	27 95       	ror	r18
     856:	21 70       	andi	r18, 0x01	; 1
     858:	30 70       	andi	r19, 0x00	; 0
     85a:	c9 01       	movw	r24, r18
     85c:	08 95       	ret

0000085e <LITE_MAKE_I2C_BUS1_SDA_OUTPUT>:
     85e:	89 9a       	sbi	0x11, 1	; 17
     860:	08 95       	ret

00000862 <LITE_MAKE_I2C_BUS1_SDA_INPUT>:
     862:	89 98       	cbi	0x11, 1	; 17
     864:	08 95       	ret

00000866 <LITE_SET_UART_RXD0_PIN>:
// uart assignments
LITE_ASSIGN_PIN(UART_RXD0, E, 0);
     866:	18 9a       	sbi	0x03, 0	; 3
     868:	08 95       	ret

0000086a <LITE_CLR_UART_RXD0_PIN>:
     86a:	18 98       	cbi	0x03, 0	; 3
     86c:	08 95       	ret

0000086e <LITE_READ_UART_RXD0_PIN>:
     86e:	21 b1       	in	r18, 0x01	; 1
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	21 70       	andi	r18, 0x01	; 1
     874:	30 70       	andi	r19, 0x00	; 0
     876:	c9 01       	movw	r24, r18
     878:	08 95       	ret

0000087a <LITE_MAKE_UART_RXD0_OUTPUT>:
     87a:	10 9a       	sbi	0x02, 0	; 2
     87c:	08 95       	ret

0000087e <LITE_MAKE_UART_RXD0_INPUT>:
     87e:	10 98       	cbi	0x02, 0	; 2
     880:	08 95       	ret

00000882 <LITE_SET_UART_TXD0_PIN>:
LITE_ASSIGN_PIN(UART_TXD0, E, 1);
     882:	19 9a       	sbi	0x03, 1	; 3
     884:	08 95       	ret

00000886 <LITE_CLR_UART_TXD0_PIN>:
     886:	19 98       	cbi	0x03, 1	; 3
     888:	08 95       	ret

0000088a <LITE_READ_UART_TXD0_PIN>:
     88a:	21 b1       	in	r18, 0x01	; 1
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	36 95       	lsr	r19
     890:	27 95       	ror	r18
     892:	21 70       	andi	r18, 0x01	; 1
     894:	30 70       	andi	r19, 0x00	; 0
     896:	c9 01       	movw	r24, r18
     898:	08 95       	ret

0000089a <LITE_MAKE_UART_TXD0_OUTPUT>:
     89a:	11 9a       	sbi	0x02, 1	; 2
     89c:	08 95       	ret

0000089e <LITE_MAKE_UART_TXD0_INPUT>:
     89e:	11 98       	cbi	0x02, 1	; 2
     8a0:	08 95       	ret

000008a2 <LITE_SET_UART_XCK0_PIN>:
LITE_ASSIGN_PIN(UART_XCK0, E, 2);
     8a2:	1a 9a       	sbi	0x03, 2	; 3
     8a4:	08 95       	ret

000008a6 <LITE_CLR_UART_XCK0_PIN>:
     8a6:	1a 98       	cbi	0x03, 2	; 3
     8a8:	08 95       	ret

000008aa <LITE_READ_UART_XCK0_PIN>:
     8aa:	21 b1       	in	r18, 0x01	; 1
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	36 95       	lsr	r19
     8b0:	27 95       	ror	r18
     8b2:	36 95       	lsr	r19
     8b4:	27 95       	ror	r18
     8b6:	21 70       	andi	r18, 0x01	; 1
     8b8:	30 70       	andi	r19, 0x00	; 0
     8ba:	c9 01       	movw	r24, r18
     8bc:	08 95       	ret

000008be <LITE_MAKE_UART_XCK0_OUTPUT>:
     8be:	12 9a       	sbi	0x02, 2	; 2
     8c0:	08 95       	ret

000008c2 <LITE_MAKE_UART_XCK0_INPUT>:
     8c2:	12 98       	cbi	0x02, 2	; 2
     8c4:	08 95       	ret

000008c6 <LITE_SET_AC_NEG_PIN>:
LITE_ASSIGN_PIN(AC_NEG, E, 3);  // RFID Reader Red LED
     8c6:	1b 9a       	sbi	0x03, 3	; 3
     8c8:	08 95       	ret

000008ca <LITE_CLR_AC_NEG_PIN>:
     8ca:	1b 98       	cbi	0x03, 3	; 3
     8cc:	08 95       	ret

000008ce <LITE_READ_AC_NEG_PIN>:
     8ce:	21 b1       	in	r18, 0x01	; 1
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	36 95       	lsr	r19
     8d4:	27 95       	ror	r18
     8d6:	36 95       	lsr	r19
     8d8:	27 95       	ror	r18
     8da:	36 95       	lsr	r19
     8dc:	27 95       	ror	r18
     8de:	21 70       	andi	r18, 0x01	; 1
     8e0:	30 70       	andi	r19, 0x00	; 0
     8e2:	c9 01       	movw	r24, r18
     8e4:	08 95       	ret

000008e6 <LITE_MAKE_AC_NEG_OUTPUT>:
     8e6:	13 9a       	sbi	0x02, 3	; 2
     8e8:	08 95       	ret

000008ea <LITE_MAKE_AC_NEG_INPUT>:
     8ea:	13 98       	cbi	0x02, 3	; 2
     8ec:	08 95       	ret

000008ee <LITE_SET_UART_RXD1_PIN>:
LITE_ASSIGN_PIN(UART_RXD1, D, 2);
     8ee:	92 9a       	sbi	0x12, 2	; 18
     8f0:	08 95       	ret

000008f2 <LITE_CLR_UART_RXD1_PIN>:
     8f2:	92 98       	cbi	0x12, 2	; 18
     8f4:	08 95       	ret

000008f6 <LITE_READ_UART_RXD1_PIN>:
     8f6:	20 b3       	in	r18, 0x10	; 16
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	36 95       	lsr	r19
     8fc:	27 95       	ror	r18
     8fe:	36 95       	lsr	r19
     900:	27 95       	ror	r18
     902:	21 70       	andi	r18, 0x01	; 1
     904:	30 70       	andi	r19, 0x00	; 0
     906:	c9 01       	movw	r24, r18
     908:	08 95       	ret

0000090a <LITE_MAKE_UART_RXD1_OUTPUT>:
     90a:	8a 9a       	sbi	0x11, 2	; 17
     90c:	08 95       	ret

0000090e <LITE_MAKE_UART_RXD1_INPUT>:
     90e:	8a 98       	cbi	0x11, 2	; 17
     910:	08 95       	ret

00000912 <LITE_SET_UART_TXD1_PIN>:
LITE_ASSIGN_PIN(UART_TXD1, D, 3);
     912:	93 9a       	sbi	0x12, 3	; 18
     914:	08 95       	ret

00000916 <LITE_CLR_UART_TXD1_PIN>:
     916:	93 98       	cbi	0x12, 3	; 18
     918:	08 95       	ret

0000091a <LITE_READ_UART_TXD1_PIN>:
     91a:	20 b3       	in	r18, 0x10	; 16
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	36 95       	lsr	r19
     920:	27 95       	ror	r18
     922:	36 95       	lsr	r19
     924:	27 95       	ror	r18
     926:	36 95       	lsr	r19
     928:	27 95       	ror	r18
     92a:	21 70       	andi	r18, 0x01	; 1
     92c:	30 70       	andi	r19, 0x00	; 0
     92e:	c9 01       	movw	r24, r18
     930:	08 95       	ret

00000932 <LITE_MAKE_UART_TXD1_OUTPUT>:
     932:	8b 9a       	sbi	0x11, 3	; 17
     934:	08 95       	ret

00000936 <LITE_MAKE_UART_TXD1_INPUT>:
     936:	8b 98       	cbi	0x11, 3	; 17
     938:	08 95       	ret

0000093a <LITE_SET_UART_XCK1_PIN>:
LITE_ASSIGN_PIN(UART_XCK1, D, 5);
     93a:	95 9a       	sbi	0x12, 5	; 18
     93c:	08 95       	ret

0000093e <LITE_CLR_UART_XCK1_PIN>:
     93e:	95 98       	cbi	0x12, 5	; 18
     940:	08 95       	ret

00000942 <LITE_READ_UART_XCK1_PIN>:
     942:	20 b3       	in	r18, 0x10	; 16
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	36 95       	lsr	r19
     948:	27 95       	ror	r18
     94a:	32 95       	swap	r19
     94c:	22 95       	swap	r18
     94e:	2f 70       	andi	r18, 0x0F	; 15
     950:	23 27       	eor	r18, r19
     952:	3f 70       	andi	r19, 0x0F	; 15
     954:	23 27       	eor	r18, r19
     956:	21 70       	andi	r18, 0x01	; 1
     958:	30 70       	andi	r19, 0x00	; 0
     95a:	c9 01       	movw	r24, r18
     95c:	08 95       	ret

0000095e <LITE_MAKE_UART_XCK1_OUTPUT>:
     95e:	8d 9a       	sbi	0x11, 5	; 17
     960:	08 95       	ret

00000962 <LITE_MAKE_UART_XCK1_INPUT>:
     962:	8d 98       	cbi	0x11, 5	; 17
     964:	08 95       	ret

00000966 <LITE_SET_TONE_DECODE_SIGNAL_PIN>:
LITE_ALIAS_PIN(TONE_DECODE_SIGNAL, INT3);
     966:	1f 9a       	sbi	0x03, 7	; 3
     968:	08 95       	ret

0000096a <LITE_CLR_TONE_DECODE_SIGNAL_PIN>:
     96a:	1f 98       	cbi	0x03, 7	; 3
     96c:	08 95       	ret

0000096e <LITE_READ_TONE_DECODE_SIGNAL_PIN>:
     96e:	81 b1       	in	r24, 0x01	; 1
     970:	88 1f       	adc	r24, r24
     972:	88 27       	eor	r24, r24
     974:	88 1f       	adc	r24, r24
     976:	08 95       	ret

00000978 <LITE_MAKE_TONE_DECODE_SIGNAL_OUTPUT>:
     978:	17 9a       	sbi	0x02, 7	; 2
     97a:	08 95       	ret

0000097c <LITE_MAKE_TONE_DECODE_SIGNAL_INPUT>:
     97c:	17 98       	cbi	0x02, 7	; 2
     97e:	08 95       	ret

00000980 <LITE_SET_PHOTO_CTL_PIN>:
LITE_ALIAS_PIN(PHOTO_CTL, INT1);
     980:	1d 9a       	sbi	0x03, 5	; 3
     982:	08 95       	ret

00000984 <LITE_CLR_PHOTO_CTL_PIN>:
     984:	1d 98       	cbi	0x03, 5	; 3
     986:	08 95       	ret

00000988 <LITE_READ_PHOTO_CTL_PIN>:
     988:	81 b1       	in	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	96 95       	lsr	r25
     98e:	87 95       	ror	r24
     990:	92 95       	swap	r25
     992:	82 95       	swap	r24
     994:	8f 70       	andi	r24, 0x0F	; 15
     996:	89 27       	eor	r24, r25
     998:	9f 70       	andi	r25, 0x0F	; 15
     99a:	89 27       	eor	r24, r25
     99c:	81 70       	andi	r24, 0x01	; 1
     99e:	08 95       	ret

000009a0 <LITE_MAKE_PHOTO_CTL_OUTPUT>:
     9a0:	15 9a       	sbi	0x02, 5	; 2
     9a2:	08 95       	ret

000009a4 <LITE_MAKE_PHOTO_CTL_INPUT>:
     9a4:	15 98       	cbi	0x02, 5	; 2
     9a6:	08 95       	ret

000009a8 <LITE_SET_TEMP_CTL_PIN>:
LITE_ALIAS_PIN(TEMP_CTL, INT2);
     9a8:	1e 9a       	sbi	0x03, 6	; 3
     9aa:	08 95       	ret

000009ac <LITE_CLR_TEMP_CTL_PIN>:
     9ac:	1e 98       	cbi	0x03, 6	; 3
     9ae:	08 95       	ret

000009b0 <LITE_READ_TEMP_CTL_PIN>:
     9b0:	81 b1       	in	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	00 24       	eor	r0, r0
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	00 1c       	adc	r0, r0
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	00 1c       	adc	r0, r0
     9c2:	89 2f       	mov	r24, r25
     9c4:	90 2d       	mov	r25, r0
     9c6:	81 70       	andi	r24, 0x01	; 1
     9c8:	08 95       	ret

000009ca <LITE_MAKE_TEMP_CTL_OUTPUT>:
     9ca:	16 9a       	sbi	0x02, 6	; 2
     9cc:	08 95       	ret

000009ce <LITE_MAKE_TEMP_CTL_INPUT>:
     9ce:	16 98       	cbi	0x02, 6	; 2
     9d0:	08 95       	ret

000009d2 <LITE_SET_MIC_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_CTL, PW3);
     9d2:	ab 9a       	sbi	0x15, 3	; 21
     9d4:	08 95       	ret

000009d6 <LITE_CLR_MIC_CTL_PIN>:
     9d6:	ab 98       	cbi	0x15, 3	; 21
     9d8:	08 95       	ret

000009da <LITE_MAKE_MIC_CTL_OUTPUT>:
     9da:	08 95       	ret

000009dc <LITE_SET_SOUNDER_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN(SOUNDER_CTL, PW2);
     9dc:	aa 9a       	sbi	0x15, 2	; 21
     9de:	08 95       	ret

000009e0 <LITE_CLR_SOUNDER_CTL_PIN>:
     9e0:	aa 98       	cbi	0x15, 2	; 21
     9e2:	08 95       	ret

000009e4 <LITE_MAKE_SOUNDER_CTL_OUTPUT>:
     9e4:	08 95       	ret

000009e6 <LITE_SET_ACCEL_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN(ACCEL_CTL, PW4);
     9e6:	ac 9a       	sbi	0x15, 4	; 21
     9e8:	08 95       	ret

000009ea <LITE_CLR_ACCEL_CTL_PIN>:
     9ea:	ac 98       	cbi	0x15, 4	; 21
     9ec:	08 95       	ret

000009ee <LITE_MAKE_ACCEL_CTL_OUTPUT>:
     9ee:	08 95       	ret

000009f0 <LITE_SET_MAG_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN(MAG_CTL, PW5);
     9f0:	ad 9a       	sbi	0x15, 5	; 21
     9f2:	08 95       	ret

000009f4 <LITE_CLR_MAG_CTL_PIN>:
     9f4:	ad 98       	cbi	0x15, 5	; 21
     9f6:	08 95       	ret

000009f8 <LITE_MAKE_MAG_CTL_OUTPUT>:
     9f8:	08 95       	ret

000009fa <LITE_SET_MIC_MUX_SEL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN(MIC_MUX_SEL, PW6);
     9fa:	ae 9a       	sbi	0x15, 6	; 21
     9fc:	08 95       	ret

000009fe <LITE_CLR_MIC_MUX_SEL_PIN>:
     9fe:	ae 98       	cbi	0x15, 6	; 21
     a00:	08 95       	ret

00000a02 <LITE_MAKE_MIC_MUX_SEL_OUTPUT>:
     a02:	08 95       	ret

00000a04 <LITE_SET_PIN_DIRECTIONS>:
void LITE_SET_PIN_DIRECTIONS(void)
{
     a04:	d2 9a       	sbi	0x1a, 2	; 26
     a06:	d0 9a       	sbi	0x1a, 0	; 26
     a08:	d1 9a       	sbi	0x1a, 1	; 26
     a0a:	a7 9a       	sbi	0x14, 7	; 20
     a0c:	a6 9a       	sbi	0x14, 6	; 20
     a0e:	a5 9a       	sbi	0x14, 5	; 20
     a10:	a4 9a       	sbi	0x14, 4	; 20
     a12:	a3 9a       	sbi	0x14, 3	; 20
     a14:	a2 9a       	sbi	0x14, 2	; 20
     a16:	a1 9a       	sbi	0x14, 1	; 20
     a18:	a0 9a       	sbi	0x14, 0	; 20
     a1a:	d4 98       	cbi	0x1a, 4	; 26
     a1c:	dc 98       	cbi	0x1b, 4	; 27
     a1e:	d3 9a       	sbi	0x1a, 3	; 26
     a20:	8b 9a       	sbi	0x11, 3	; 17
     a22:	8d 9a       	sbi	0x11, 5	; 17
     a24:	db 9a       	sbi	0x1b, 3	; 27
     a26:	da 9a       	sbi	0x1b, 2	; 27
     a28:	d8 9a       	sbi	0x1b, 0	; 27
     a2a:	d9 9a       	sbi	0x1b, 1	; 27
    /*  outp(0x00, DDRA);
       outp(0x00, DDRB);
       outp(0x00, DDRD);
       outp(0x02, DDRE);
       outp(0x02, PORTE);
     */
    LITE_MAKE_RED_LED_OUTPUT();
    LITE_MAKE_YELLOW_LED_OUTPUT();
    LITE_MAKE_GREEN_LED_OUTPUT();
    LITE_MAKE_PW7_OUTPUT();
    LITE_MAKE_PW6_OUTPUT();
    LITE_MAKE_PW5_OUTPUT();
    LITE_MAKE_PW4_OUTPUT();
    LITE_MAKE_PW3_OUTPUT();
    LITE_MAKE_PW2_OUTPUT();
    LITE_MAKE_PW1_OUTPUT();
    LITE_MAKE_PW0_OUTPUT();
    LITE_MAKE_SERIAL_ID_INPUT();
    LITE_CLR_SERIAL_ID_PIN();   // Prevent sourcing current
    LITE_MAKE_FLASH_SELECT_OUTPUT();
    LITE_MAKE_FLASH_OUT_OUTPUT();
    LITE_MAKE_FLASH_CLK_OUTPUT();
    LITE_SET_FLASH_SELECT_PIN();
    LITE_SET_RED_LED_PIN();
    LITE_SET_YELLOW_LED_PIN();
    LITE_SET_GREEN_LED_PIN();
}
     a2c:	08 95       	ret

00000a2e <CC2420_FIFOP_INT_MODE>:
#include "micazhardware.h"

void inline CC2420_FIFOP_INT_MODE(bool LowToHigh)
{
     a2e:	9a b7       	in	r25, 0x3a	; 58
     a30:	90 62       	ori	r25, 0x20	; 32
     a32:	9a bf       	out	0x3a, r25	; 58
    sbi(EICRB, ISC61);          // edge mode
    if (LowToHigh)
     a34:	88 23       	and	r24, r24
     a36:	21 f4       	brne	.+8      	; 0xa40 <CC2420_FIFOP_INT_MODE+0x12>
    {
        sbi(EICRB, ISC60);
    }                           //trigger on rising level
    else
    {
        cbi(EICRB, ISC60);
     a38:	8a b7       	in	r24, 0x3a	; 58
     a3a:	8f 7e       	andi	r24, 0xEF	; 239
     a3c:	8a bf       	out	0x3a, r24	; 58
     a3e:	08 95       	ret
     a40:	8a b7       	in	r24, 0x3a	; 58
     a42:	80 61       	ori	r24, 0x10	; 16
     a44:	8a bf       	out	0x3a, r24	; 58
     a46:	08 95       	ret

00000a48 <LITE_SET_CC_RSTN_PIN>:
    }                           //trigger on falling level
}

 




//-------------------------------------------------------------------------
LITE_ASSIGN_PIN(CC_RSTN, A, 6); // chipcon reset
     a48:	de 9a       	sbi	0x1b, 6	; 27
     a4a:	08 95       	ret

00000a4c <LITE_CLR_CC_RSTN_PIN>:
     a4c:	de 98       	cbi	0x1b, 6	; 27
     a4e:	08 95       	ret

00000a50 <LITE_READ_CC_RSTN_PIN>:
     a50:	29 b3       	in	r18, 0x19	; 25
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	00 24       	eor	r0, r0
     a56:	22 0f       	add	r18, r18
     a58:	33 1f       	adc	r19, r19
     a5a:	00 1c       	adc	r0, r0
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	00 1c       	adc	r0, r0
     a62:	23 2f       	mov	r18, r19
     a64:	30 2d       	mov	r19, r0
     a66:	21 70       	andi	r18, 0x01	; 1
     a68:	30 70       	andi	r19, 0x00	; 0
     a6a:	c9 01       	movw	r24, r18
     a6c:	08 95       	ret

00000a6e <LITE_MAKE_CC_RSTN_OUTPUT>:
     a6e:	d6 9a       	sbi	0x1a, 6	; 26
     a70:	08 95       	ret

00000a72 <LITE_MAKE_CC_RSTN_INPUT>:
     a72:	d6 98       	cbi	0x1a, 6	; 26
     a74:	08 95       	ret

00000a76 <LITE_SET_CC_VREN_PIN>:
LITE_ASSIGN_PIN(CC_VREN, A, 5); // chipcon power enable
     a76:	dd 9a       	sbi	0x1b, 5	; 27
     a78:	08 95       	ret

00000a7a <LITE_CLR_CC_VREN_PIN>:
     a7a:	dd 98       	cbi	0x1b, 5	; 27
     a7c:	08 95       	ret

00000a7e <LITE_READ_CC_VREN_PIN>:
     a7e:	29 b3       	in	r18, 0x19	; 25
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	36 95       	lsr	r19
     a84:	27 95       	ror	r18
     a86:	32 95       	swap	r19
     a88:	22 95       	swap	r18
     a8a:	2f 70       	andi	r18, 0x0F	; 15
     a8c:	23 27       	eor	r18, r19
     a8e:	3f 70       	andi	r19, 0x0F	; 15
     a90:	23 27       	eor	r18, r19
     a92:	21 70       	andi	r18, 0x01	; 1
     a94:	30 70       	andi	r19, 0x00	; 0
     a96:	c9 01       	movw	r24, r18
     a98:	08 95       	ret

00000a9a <LITE_MAKE_CC_VREN_OUTPUT>:
     a9a:	d5 9a       	sbi	0x1a, 5	; 26
     a9c:	08 95       	ret

00000a9e <LITE_MAKE_CC_VREN_INPUT>:
     a9e:	d5 98       	cbi	0x1a, 5	; 26
     aa0:	08 95       	ret

00000aa2 <LITE_SET_CC_FIFOP_PIN>:
//LITE_ASSIGN_PIN(CC_FIFOP1, D, 7);  // fifo interrupt
LITE_ASSIGN_PIN(CC_FIFOP, E, 6);        // fifo interrupt
     aa2:	1e 9a       	sbi	0x03, 6	; 3
     aa4:	08 95       	ret

00000aa6 <LITE_CLR_CC_FIFOP_PIN>:
     aa6:	1e 98       	cbi	0x03, 6	; 3
     aa8:	08 95       	ret

00000aaa <LITE_READ_CC_FIFOP_PIN>:
     aaa:	21 b1       	in	r18, 0x01	; 1
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	00 24       	eor	r0, r0
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	00 1c       	adc	r0, r0
     ab6:	22 0f       	add	r18, r18
     ab8:	33 1f       	adc	r19, r19
     aba:	00 1c       	adc	r0, r0
     abc:	23 2f       	mov	r18, r19
     abe:	30 2d       	mov	r19, r0
     ac0:	21 70       	andi	r18, 0x01	; 1
     ac2:	30 70       	andi	r19, 0x00	; 0
     ac4:	c9 01       	movw	r24, r18
     ac6:	08 95       	ret

00000ac8 <LITE_MAKE_CC_FIFOP_OUTPUT>:
     ac8:	16 9a       	sbi	0x02, 6	; 2
     aca:	08 95       	ret

00000acc <LITE_MAKE_CC_FIFOP_INPUT>:
     acc:	16 98       	cbi	0x02, 6	; 2
     ace:	08 95       	ret

00000ad0 <LITE_SET_CC_FIFOP1_PIN>:
LITE_ASSIGN_PIN(CC_FIFOP1, E, 6);       // fifo interrupt
     ad0:	1e 9a       	sbi	0x03, 6	; 3
     ad2:	08 95       	ret

00000ad4 <LITE_CLR_CC_FIFOP1_PIN>:
     ad4:	1e 98       	cbi	0x03, 6	; 3
     ad6:	08 95       	ret

00000ad8 <LITE_READ_CC_FIFOP1_PIN>:
     ad8:	21 b1       	in	r18, 0x01	; 1
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	00 24       	eor	r0, r0
     ade:	22 0f       	add	r18, r18
     ae0:	33 1f       	adc	r19, r19
     ae2:	00 1c       	adc	r0, r0
     ae4:	22 0f       	add	r18, r18
     ae6:	33 1f       	adc	r19, r19
     ae8:	00 1c       	adc	r0, r0
     aea:	23 2f       	mov	r18, r19
     aec:	30 2d       	mov	r19, r0
     aee:	21 70       	andi	r18, 0x01	; 1
     af0:	30 70       	andi	r19, 0x00	; 0
     af2:	c9 01       	movw	r24, r18
     af4:	08 95       	ret

00000af6 <LITE_MAKE_CC_FIFOP1_OUTPUT>:
     af6:	16 9a       	sbi	0x02, 6	; 2
     af8:	08 95       	ret

00000afa <LITE_MAKE_CC_FIFOP1_INPUT>:
     afa:	16 98       	cbi	0x02, 6	; 2
     afc:	08 95       	ret

00000afe <LITE_SET_CC_CCA_PIN>:
LITE_ASSIGN_PIN(CC_CCA, D, 6);  // 
     afe:	96 9a       	sbi	0x12, 6	; 18
     b00:	08 95       	ret

00000b02 <LITE_CLR_CC_CCA_PIN>:
     b02:	96 98       	cbi	0x12, 6	; 18
     b04:	08 95       	ret

00000b06 <LITE_READ_CC_CCA_PIN>:
     b06:	20 b3       	in	r18, 0x10	; 16
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	00 24       	eor	r0, r0
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	00 1c       	adc	r0, r0
     b12:	22 0f       	add	r18, r18
     b14:	33 1f       	adc	r19, r19
     b16:	00 1c       	adc	r0, r0
     b18:	23 2f       	mov	r18, r19
     b1a:	30 2d       	mov	r19, r0
     b1c:	21 70       	andi	r18, 0x01	; 1
     b1e:	30 70       	andi	r19, 0x00	; 0
     b20:	c9 01       	movw	r24, r18
     b22:	08 95       	ret

00000b24 <LITE_MAKE_CC_CCA_OUTPUT>:
     b24:	8e 9a       	sbi	0x11, 6	; 17
     b26:	08 95       	ret

00000b28 <LITE_MAKE_CC_CCA_INPUT>:
     b28:	8e 98       	cbi	0x11, 6	; 17
     b2a:	08 95       	ret

00000b2c <LITE_SET_CC_SFD_PIN>:
LITE_ASSIGN_PIN(CC_SFD, D, 4);  // chipcon packet arrival
     b2c:	94 9a       	sbi	0x12, 4	; 18
     b2e:	08 95       	ret

00000b30 <LITE_CLR_CC_SFD_PIN>:
     b30:	94 98       	cbi	0x12, 4	; 18
     b32:	08 95       	ret

00000b34 <LITE_READ_CC_SFD_PIN>:
     b34:	20 b3       	in	r18, 0x10	; 16
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	32 95       	swap	r19
     b3a:	22 95       	swap	r18
     b3c:	2f 70       	andi	r18, 0x0F	; 15
     b3e:	23 27       	eor	r18, r19
     b40:	3f 70       	andi	r19, 0x0F	; 15
     b42:	23 27       	eor	r18, r19
     b44:	21 70       	andi	r18, 0x01	; 1
     b46:	30 70       	andi	r19, 0x00	; 0
     b48:	c9 01       	movw	r24, r18
     b4a:	08 95       	ret

00000b4c <LITE_MAKE_CC_SFD_OUTPUT>:
     b4c:	8c 9a       	sbi	0x11, 4	; 17
     b4e:	08 95       	ret

00000b50 <LITE_MAKE_CC_SFD_INPUT>:
     b50:	8c 98       	cbi	0x11, 4	; 17
     b52:	08 95       	ret

00000b54 <LITE_SET_CC_CS_PIN>:
LITE_ASSIGN_PIN(CC_CS, B, 0);   // chipcon enable
     b54:	c0 9a       	sbi	0x18, 0	; 24
     b56:	08 95       	ret

00000b58 <LITE_CLR_CC_CS_PIN>:
     b58:	c0 98       	cbi	0x18, 0	; 24
     b5a:	08 95       	ret

00000b5c <LITE_READ_CC_CS_PIN>:
     b5c:	26 b3       	in	r18, 0x16	; 22
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	21 70       	andi	r18, 0x01	; 1
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	c9 01       	movw	r24, r18
     b66:	08 95       	ret

00000b68 <LITE_MAKE_CC_CS_OUTPUT>:
     b68:	b8 9a       	sbi	0x17, 0	; 23
     b6a:	08 95       	ret

00000b6c <LITE_MAKE_CC_CS_INPUT>:
     b6c:	b8 98       	cbi	0x17, 0	; 23
     b6e:	08 95       	ret

00000b70 <LITE_SET_CC_FIFO_PIN>:
LITE_ASSIGN_PIN(CC_FIFO, B, 7); // chipcon fifo
     b70:	c7 9a       	sbi	0x18, 7	; 24
     b72:	08 95       	ret

00000b74 <LITE_CLR_CC_FIFO_PIN>:
     b74:	c7 98       	cbi	0x18, 7	; 24
     b76:	08 95       	ret

00000b78 <LITE_READ_CC_FIFO_PIN>:
     b78:	26 b3       	in	r18, 0x16	; 22
     b7a:	33 27       	eor	r19, r19
     b7c:	27 fd       	sbrc	r18, 7
     b7e:	30 95       	com	r19
     b80:	22 27       	eor	r18, r18
     b82:	33 0f       	add	r19, r19
     b84:	22 1f       	adc	r18, r18
     b86:	33 27       	eor	r19, r19
     b88:	c9 01       	movw	r24, r18
     b8a:	08 95       	ret

00000b8c <LITE_MAKE_CC_FIFO_OUTPUT>:
     b8c:	bf 9a       	sbi	0x17, 7	; 23
     b8e:	08 95       	ret

00000b90 <LITE_MAKE_CC_FIFO_INPUT>:
     b90:	bf 98       	cbi	0x17, 7	; 23
     b92:	08 95       	ret

00000b94 <LITE_SET_RADIO_CCA_PIN>:
LITE_ASSIGN_PIN(RADIO_CCA, D, 6);       // 
     b94:	96 9a       	sbi	0x12, 6	; 18
     b96:	08 95       	ret

00000b98 <LITE_CLR_RADIO_CCA_PIN>:
     b98:	96 98       	cbi	0x12, 6	; 18
     b9a:	08 95       	ret

00000b9c <LITE_READ_RADIO_CCA_PIN>:
     b9c:	20 b3       	in	r18, 0x10	; 16
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	00 24       	eor	r0, r0
     ba2:	22 0f       	add	r18, r18
     ba4:	33 1f       	adc	r19, r19
     ba6:	00 1c       	adc	r0, r0
     ba8:	22 0f       	add	r18, r18
     baa:	33 1f       	adc	r19, r19
     bac:	00 1c       	adc	r0, r0
     bae:	23 2f       	mov	r18, r19
     bb0:	30 2d       	mov	r19, r0
     bb2:	21 70       	andi	r18, 0x01	; 1
     bb4:	30 70       	andi	r19, 0x00	; 0
     bb6:	c9 01       	movw	r24, r18
     bb8:	08 95       	ret

00000bba <LITE_MAKE_RADIO_CCA_OUTPUT>:
     bba:	8e 9a       	sbi	0x11, 6	; 17
     bbc:	08 95       	ret

00000bbe <LITE_MAKE_RADIO_CCA_INPUT>:
     bbe:	8e 98       	cbi	0x11, 6	; 17
     bc0:	08 95       	ret

00000bc2 <setCC2420Pins>:

 
void setCC2420Pins(){
     bc2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LITE_MAKE_MISO_INPUT>
 //CC2420 pins  
    LITE_MAKE_MISO_INPUT();
    LITE_MAKE_MOSI_OUTPUT();
     bc6:	0e 94 56 03 	call	0x6ac	; 0x6ac <LITE_MAKE_MOSI_OUTPUT>
    LITE_MAKE_SPI_SCK_OUTPUT();
     bca:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LITE_MAKE_SPI_SCK_OUTPUT>
     bce:	d6 9a       	sbi	0x1a, 6	; 26
     bd0:	d5 9a       	sbi	0x1a, 5	; 26
     bd2:	b8 98       	cbi	0x17, 0	; 23
     bd4:	16 98       	cbi	0x02, 6	; 2
     bd6:	8e 98       	cbi	0x11, 6	; 17
     bd8:	8c 98       	cbi	0x11, 4	; 17
     bda:	bf 98       	cbi	0x17, 7	; 23
     bdc:	8e 98       	cbi	0x11, 6	; 17
    LITE_MAKE_CC_RSTN_OUTPUT();
    LITE_MAKE_CC_VREN_OUTPUT();
    LITE_MAKE_CC_CS_INPUT();
    LITE_MAKE_CC_FIFOP1_INPUT();
    LITE_MAKE_CC_CCA_INPUT();
    LITE_MAKE_CC_SFD_INPUT();
    LITE_MAKE_CC_FIFO_INPUT();
    LITE_MAKE_RADIO_CCA_INPUT();
   
  }
     bde:	08 95       	ret

00000be0 <initUSART>:

//No need to be called from main 
//This function is called when the system is being initilized and prints system start 
void initUSART()
{
     be0:	10 92 90 00 	sts	0x0090, r1
    UBRR0H = 0;
    UBRR0L = 15;
     be4:	8f e0       	ldi	r24, 0x0F	; 15
     be6:	89 b9       	out	0x09, r24	; 9
    UCSR0A |= _BV(U2X0);        // double speed
     be8:	59 9a       	sbi	0x0b, 1	; 11
    UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);        // 8 data-bits, 1 stop-bit
     bea:	e5 e9       	ldi	r30, 0x95	; 149
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	86 60       	ori	r24, 0x06	; 6
     bf2:	80 83       	st	Z, r24
    UCSR0B |= _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
     bf4:	8a b1       	in	r24, 0x0a	; 10
     bf6:	88 69       	ori	r24, 0x98	; 152
     bf8:	8a b9       	out	0x0a, r24	; 10
    // Enable recieve/transmit/interrupts
    cFlag = 1;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	80 93 42 03 	sts	0x0342, r24
    previous = 0;
     c00:	10 92 64 03 	sts	0x0364, r1
    status = 0;
     c04:	10 92 65 03 	sts	0x0365, r1
}
     c08:	08 95       	ret

00000c0a <usartPrint>:

//-------------------------------------------------------------------------
void usartPrint(uint8_t c)
{
     c0a:	1f 93       	push	r17
     c0c:	18 2f       	mov	r17, r24
    if (cFlag == 0)
     c0e:	80 91 42 03 	lds	r24, 0x0342
     c12:	88 23       	and	r24, r24
     c14:	29 f0       	breq	.+10     	; 0xc20 <usartPrint+0x16>
    {
        initUSART();
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
     c16:	5d 9b       	sbis	0x0b, 5	; 11
     c18:	fe cf       	rjmp	.-4      	; 0xc16 <usartPrint+0xc>
        ;
    UDR0 = c;
     c1a:	1c b9       	out	0x0c, r17	; 12
}
     c1c:	1f 91       	pop	r17
     c1e:	08 95       	ret
     c20:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <initUSART>
     c24:	f8 cf       	rjmp	.-16     	; 0xc16 <usartPrint+0xc>

00000c26 <usartPrint_base>:

void usartPrint_base(uint8_t c)
{
     c26:	1f 93       	push	r17
     c28:	18 2f       	mov	r17, r24
    if (cFlag == 0)
     c2a:	80 91 42 03 	lds	r24, 0x0342
     c2e:	88 23       	and	r24, r24
     c30:	29 f0       	breq	.+10     	; 0xc3c <usartPrint_base+0x16>
    {
        initUSART();
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
     c32:	5d 9b       	sbis	0x0b, 5	; 11
     c34:	fe cf       	rjmp	.-4      	; 0xc32 <usartPrint_base+0xc>
        ;
    UDR0 = c;
     c36:	1c b9       	out	0x0c, r17	; 12
}
     c38:	1f 91       	pop	r17
     c3a:	08 95       	ret
     c3c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <initUSART>
     c40:	f8 cf       	rjmp	.-16     	; 0xc32 <usartPrint_base+0xc>

00000c42 <printString>:



//-------------------------------------------------------------------------
void printString(char *p)
{
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	ec 01       	movw	r28, r24
    usartPrint(0xFC);
     c48:	8c ef       	ldi	r24, 0xFC	; 252
     c4a:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    while ((*p) != '\0')
     c4e:	88 81       	ld	r24, Y
     c50:	88 23       	and	r24, r24
     c52:	31 f0       	breq	.+12     	; 0xc60 <printString+0x1e>
    {
        usartPrint(*p);
     c54:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
        p++;
     c58:	21 96       	adiw	r28, 0x01	; 1
     c5a:	88 81       	ld	r24, Y
     c5c:	88 23       	and	r24, r24
     c5e:	d1 f7       	brne	.-12     	; 0xc54 <printString+0x12>
    }
    usartPrint(0xFC);
     c60:	8c ef       	ldi	r24, 0xFC	; 252
     c62:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <printStringN>:

//-------------------------------------------------------------------------
void printStringN(char *p, uint8_t n)
{
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	08 2f       	mov	r16, r24
     c78:	f9 2e       	mov	r15, r25
     c7a:	16 2f       	mov	r17, r22
    uint8_t i;

    usartPrint(0xFC);
     c7c:	8c ef       	ldi	r24, 0xFC	; 252
     c7e:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    for (i = 0; i < n; i++)
     c82:	11 23       	and	r17, r17
     c84:	59 f0       	breq	.+22     	; 0xc9c <printStringN+0x30>
     c86:	80 2f       	mov	r24, r16
     c88:	9f 2d       	mov	r25, r15
     c8a:	9c 01       	movw	r18, r24
     c8c:	e9 01       	movw	r28, r18
    {
        usartPrint(*p);
     c8e:	89 91       	ld	r24, Y+
     c90:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
     c94:	9e 01       	movw	r18, r28
     c96:	20 1b       	sub	r18, r16
     c98:	21 17       	cp	r18, r17
     c9a:	c8 f3       	brcs	.-14     	; 0xc8e <printStringN+0x22>
        p++;
    }
    usartPrint(0xFC);
     c9c:	8c ef       	ldi	r24, 0xFC	; 252
     c9e:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	08 95       	ret

00000cae <printStringN_base>:


//-------------------------------------------------------------------------
void printStringN_base(char *p, uint8_t n)
{
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	08 2f       	mov	r16, r24
     cb8:	16 2f       	mov	r17, r22
    uint8_t i;

    //usartPrint(0xFC);
    for (i = 0; i < n; i++)
     cba:	66 23       	and	r22, r22
     cbc:	49 f0       	breq	.+18     	; 0xcd0 <printStringN_base+0x22>
     cbe:	9c 01       	movw	r18, r24
     cc0:	e9 01       	movw	r28, r18
    {
        usartPrint_base(*p);
     cc2:	89 91       	ld	r24, Y+
     cc4:	0e 94 13 06 	call	0xc26	; 0xc26 <usartPrint_base>
     cc8:	9e 01       	movw	r18, r28
     cca:	20 1b       	sub	r18, r16
     ccc:	21 17       	cp	r18, r17
     cce:	c8 f3       	brcs	.-14     	; 0xcc2 <printStringN_base+0x14>
        p++;
    }
    //usartPrint(0xFC);
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	08 95       	ret

00000cda <usartPutChipHex>:




//-------------------------------------------------------------------------
void usartPutChipHex(uint8_t cChip)
{
     cda:	8a 30       	cpi	r24, 0x0A	; 10
     cdc:	20 f4       	brcc	.+8      	; 0xce6 <usartPutChipHex+0xc>
    if (cChip > 9)
    {
        usartPrint('a' + cChip - 10);
    }
    else
    {
        usartPrint('0' + cChip);
     cde:	80 5d       	subi	r24, 0xD0	; 208
     ce0:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
     ce4:	08 95       	ret
     ce6:	89 5a       	subi	r24, 0xA9	; 169
     ce8:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
     cec:	08 95       	ret

00000cee <usartPutLong2>:
    }
}

//-------------------------------------------------------------------------
void usartPutLong2(uint32_t l)
{
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <usartPutLong2+0x6>
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <usartPutLong2+0x8>
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	69 83       	std	Y+1, r22	; 0x01
     cfc:	7a 83       	std	Y+2, r23	; 0x02
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

    usartPrint(*pcByte);
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    pcByte--;
    usartPrint(*pcByte);
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
}
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <usartPutHex>:

//-------------------------------------------------------------------------
void usartPutHex(uint8_t c)
{
     d28:	1f 93       	push	r17
     d2a:	18 2f       	mov	r17, r24
    usartPutChipHex(c >> 4);
     d2c:	82 95       	swap	r24
     d2e:	8f 70       	andi	r24, 0x0F	; 15
     d30:	0e 94 6d 06 	call	0xcda	; 0xcda <usartPutChipHex>
    usartPutChipHex(c & 0xf);
     d34:	81 2f       	mov	r24, r17
     d36:	8f 70       	andi	r24, 0x0F	; 15
     d38:	0e 94 6d 06 	call	0xcda	; 0xcda <usartPutChipHex>
}
     d3c:	1f 91       	pop	r17
     d3e:	08 95       	ret

00000d40 <printInteger32>:

//-------------------------------------------------------------------------
void printInteger32(int32_t a)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	00 d0       	rcall	.+0      	; 0xd46 <printInteger32+0x6>
     d46:	00 d0       	rcall	.+0      	; 0xd48 <printInteger32+0x8>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	69 83       	std	Y+1, r22	; 0x01
     d4e:	7a 83       	std	Y+2, r23	; 0x02
     d50:	8b 83       	std	Y+3, r24	; 0x03
     d52:	9c 83       	std	Y+4, r25	; 0x04
    usartPrint(0xFD);
     d54:	8d ef       	ldi	r24, 0xFD	; 253
     d56:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    usartPutLong2(*(uint32_t *) (&a));
     d5a:	69 81       	ldd	r22, Y+1	; 0x01
     d5c:	7a 81       	ldd	r23, Y+2	; 0x02
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	0e 94 77 06 	call	0xcee	; 0xcee <usartPutLong2>
    usartPrint(0xFD);
     d66:	8d ef       	ldi	r24, 0xFD	; 253
     d68:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
}
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <printIntegerU32>:

//-------------------------------------------------------------------------
void printIntegerU32(uint32_t l)
{
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	7b 01       	movw	r14, r22
     d84:	8c 01       	movw	r16, r24
    usartPrint(0xFE);
     d86:	8e ef       	ldi	r24, 0xFE	; 254
     d88:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    usartPutLong2(l);
     d8c:	c8 01       	movw	r24, r16
     d8e:	b7 01       	movw	r22, r14
     d90:	0e 94 77 06 	call	0xcee	; 0xcee <usartPutLong2>
    usartPrint(0xFE);
     d94:	8e ef       	ldi	r24, 0xFE	; 254
     d96:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
}
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	08 95       	ret

00000da4 <printStringLn>:


void printStringLn()
{
     da4:	8c ef       	ldi	r24, 0xFC	; 252
     da6:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
	  usartPrint(0xFC);
    usartPrint(0x6D);
     daa:	8d e6       	ldi	r24, 0x6D	; 109
     dac:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    usartPrint(0x6D);
     db0:	8d e6       	ldi	r24, 0x6D	; 109
     db2:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    usartPrint(0x6D);
     db6:	8d e6       	ldi	r24, 0x6D	; 109
     db8:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    usartPrint(0xFC);
     dbc:	8c ef       	ldi	r24, 0xFC	; 252
     dbe:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    
}
     dc2:	08 95       	ret

00000dc4 <usartPutLong>:
//-------------------------------------------------------------------------
void usartPutLong(uint32_t l)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <usartPutLong+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <usartPutLong+0x8>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	69 83       	std	Y+1, r22	; 0x01
     dd2:	7a 83       	std	Y+2, r23	; 0x02
     dd4:	8b 83       	std	Y+3, r24	; 0x03
     dd6:	9c 83       	std	Y+4, r25	; 0x04
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

    usartPrint('0');
     dd8:	80 e3       	ldi	r24, 0x30	; 48
     dda:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    usartPrint('x');
     dde:	88 e7       	ldi	r24, 0x78	; 120
     de0:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    usartPutHex(*pcByte);
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	0e 94 94 06 	call	0xd28	; 0xd28 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	0e 94 94 06 	call	0xd28	; 0xd28 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	0e 94 94 06 	call	0xd28	; 0xd28 <usartPutHex>
    pcByte--;
    usartPutHex(*pcByte);
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	0e 94 94 06 	call	0xd28	; 0xd28 <usartPutHex>
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <printInteger>:

//-------------------------------------------------------------------------
void printInteger(int32_t a, int32_t b, int32_t c, int32_t d)
{
     e0a:	af 92       	push	r10
     e0c:	bf 92       	push	r11
     e0e:	cf 92       	push	r12
     e10:	df 92       	push	r13
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	60 97       	sbiw	r28, 0x10	; 16
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	69 83       	std	Y+1, r22	; 0x01
     e30:	7a 83       	std	Y+2, r23	; 0x02
     e32:	8b 83       	std	Y+3, r24	; 0x03
     e34:	9c 83       	std	Y+4, r25	; 0x04
     e36:	2d 83       	std	Y+5, r18	; 0x05
     e38:	3e 83       	std	Y+6, r19	; 0x06
     e3a:	4f 83       	std	Y+7, r20	; 0x07
     e3c:	58 87       	std	Y+8, r21	; 0x08
     e3e:	e9 86       	std	Y+9, r14	; 0x09
     e40:	fa 86       	std	Y+10, r15	; 0x0a
     e42:	0b 87       	std	Y+11, r16	; 0x0b
     e44:	1c 87       	std	Y+12, r17	; 0x0c
     e46:	ad 86       	std	Y+13, r10	; 0x0d
     e48:	be 86       	std	Y+14, r11	; 0x0e
     e4a:	cf 86       	std	Y+15, r12	; 0x0f
     e4c:	d8 8a       	std	Y+16, r13	; 0x10
    usartPrint(1);
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    usartPutLong(*(uint32_t *) (&a));
     e54:	69 81       	ldd	r22, Y+1	; 0x01
     e56:	7a 81       	ldd	r23, Y+2	; 0x02
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <usartPutLong>
    usartPutLong(*(uint32_t *) (&b));
     e60:	6d 81       	ldd	r22, Y+5	; 0x05
     e62:	7e 81       	ldd	r23, Y+6	; 0x06
     e64:	8f 81       	ldd	r24, Y+7	; 0x07
     e66:	98 85       	ldd	r25, Y+8	; 0x08
     e68:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <usartPutLong>
    usartPutLong(*(uint32_t *) (&c));
     e6c:	69 85       	ldd	r22, Y+9	; 0x09
     e6e:	7a 85       	ldd	r23, Y+10	; 0x0a
     e70:	8b 85       	ldd	r24, Y+11	; 0x0b
     e72:	9c 85       	ldd	r25, Y+12	; 0x0c
     e74:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <usartPutLong>
    usartPutLong(*(uint32_t *) (&d));
     e78:	6d 85       	ldd	r22, Y+13	; 0x0d
     e7a:	7e 85       	ldd	r23, Y+14	; 0x0e
     e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e7e:	98 89       	ldd	r25, Y+16	; 0x10
     e80:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <usartPutLong>
}
     e84:	60 96       	adiw	r28, 0x10	; 16
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	bf 90       	pop	r11
     ea2:	af 90       	pop	r10
     ea4:	08 95       	ret

00000ea6 <__vector_18>:


SIGNAL(USART0_RX_vect)
{
     ea6:	1f 92       	push	r1
     ea8:	0f 92       	push	r0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	0f 92       	push	r0
     eae:	0b b6       	in	r0, 0x3b	; 59
     eb0:	0f 92       	push	r0
     eb2:	11 24       	eor	r1, r1
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	2f 93       	push	r18
     eba:	3f 93       	push	r19
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	6f 93       	push	r22
     ec2:	7f 93       	push	r23
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	af 93       	push	r26
     eca:	bf 93       	push	r27
     ecc:	ef 93       	push	r30
     ece:	ff 93       	push	r31
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
    uint8_t dummy = UDR0;
     eda:	0c b1       	in	r16, 0x0c	; 12
    uint8_t currentindex = 0;
    uint8_t portnum, length;
    uint8_t i;
    uint8_t isthreadtrue;
    _atomic_t _atomic;

    isthreadtrue = 0;
    _atomic = _atomic_start();
     edc:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
     ee0:	18 2f       	mov	r17, r24
    if (is_thread())
     ee2:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <is_thread>
     ee6:	88 23       	and	r24, r24
     ee8:	b9 f5       	brne	.+110    	; 0xf58 <__vector_18+0xb2>
     eea:	19 82       	std	Y+1, r1	; 0x01
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
     eec:	81 2f       	mov	r24, r17
     eee:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    if (dummy == 'a')
     ef2:	01 36       	cpi	r16, 0x61	; 97
     ef4:	09 f4       	brne	.+2      	; 0xef8 <__vector_18+0x52>
     ef6:	44 c0       	rjmp	.+136    	; 0xf80 <__vector_18+0xda>
    {
        _atomic_t _atomic = _atomic_start();

        while (!(UCSR0A & (1 << RXC0)))
            ;
        portnum = UDR0;
        portnum = portnum - 48;
        while (!(UCSR0A & (1 << RXC0)))
            ;
        length = UDR0;
        length = length - 48;
        for (i = 0; i < length; i++)
        {
            while (!(UCSR0A & (1 << RXC0)))
                ;
            receivebuffer[currentindex++] = UDR0;
        }
        _atomic_end(_atomic);
        //commandHandle(receivebuffer, currentindex); 
        //initCommandReceived(receivebuffer); 
        //serialDeliverPacket(((uint16_t) portnum), ((uint8_t) length),
                            //&receivebuffer[0]);
        currentindex = 0;
    }
    else if (dummy == 'z')
     ef8:	0a 37       	cpi	r16, 0x7A	; 122
     efa:	09 f4       	brne	.+2      	; 0xefe <__vector_18+0x58>
     efc:	5e c0       	rjmp	.+188    	; 0xfba <__vector_18+0x114>
    {
        _atomic_t _atomic = _atomic_start();

        for (i = 0; i < 33; i++)
        {
            while (!(UCSR0A & (1 << RXC0)))
                ;
            receivebuffer[currentindex++] = UDR0;
        }
        _atomic_end(_atomic);
        initCommandReceived(receivebuffer);
        currentindex = 0;
    }
    _atomic = _atomic_start();
     efe:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
     f02:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	61 f4       	brne	.+24     	; 0xf22 <__vector_18+0x7c>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
     f0a:	8d b7       	in	r24, 0x3d	; 61
     f0c:	9e b7       	in	r25, 0x3e	; 62
     f0e:	90 93 4f 05 	sts	0x054F, r25
     f12:	80 93 4e 05 	sts	0x054E, r24
     f16:	80 91 a1 05 	lds	r24, 0x05A1
     f1a:	90 91 a2 05 	lds	r25, 0x05A2
     f1e:	9e bf       	out	0x3e, r25	; 62
     f20:	8d bf       	out	0x3d, r24	; 61
        //thread_yield();   
    }
    _atomic_end(_atomic);
     f22:	82 2f       	mov	r24, r18
     f24:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    // if (is_thread())
    //{SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);  }
    // if (is_thread())
    // {
    //   SWAP_STACK_PTR( old_stack_ptr, stackinterrupt_ptr);
    //  thread_yield();   
    // }
}
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	ff 91       	pop	r31
     f30:	ef 91       	pop	r30
     f32:	bf 91       	pop	r27
     f34:	af 91       	pop	r26
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	7f 91       	pop	r23
     f3c:	6f 91       	pop	r22
     f3e:	5f 91       	pop	r21
     f40:	4f 91       	pop	r20
     f42:	3f 91       	pop	r19
     f44:	2f 91       	pop	r18
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	0f 90       	pop	r0
     f4c:	0b be       	out	0x3b, r0	; 59
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti
     f58:	8d b7       	in	r24, 0x3d	; 61
     f5a:	9e b7       	in	r25, 0x3e	; 62
     f5c:	90 93 a2 05 	sts	0x05A2, r25
     f60:	80 93 a1 05 	sts	0x05A1, r24
     f64:	80 91 4e 05 	lds	r24, 0x054E
     f68:	90 91 4f 05 	lds	r25, 0x054F
     f6c:	9e bf       	out	0x3e, r25	; 62
     f6e:	8d bf       	out	0x3d, r24	; 61
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	81 2f       	mov	r24, r17
     f76:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
     f7a:	01 36       	cpi	r16, 0x61	; 97
     f7c:	09 f0       	breq	.+2      	; 0xf80 <__vector_18+0xda>
     f7e:	bc cf       	rjmp	.-136    	; 0xef8 <__vector_18+0x52>
     f80:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
     f84:	98 2f       	mov	r25, r24
     f86:	5f 9b       	sbis	0x0b, 7	; 11
     f88:	fe cf       	rjmp	.-4      	; 0xf86 <__vector_18+0xe0>
     f8a:	8c b1       	in	r24, 0x0c	; 12
     f8c:	5f 9b       	sbis	0x0b, 7	; 11
     f8e:	fe cf       	rjmp	.-4      	; 0xf8c <__vector_18+0xe6>
     f90:	8c b1       	in	r24, 0x0c	; 12
     f92:	80 33       	cpi	r24, 0x30	; 48
     f94:	71 f0       	breq	.+28     	; 0xfb2 <__vector_18+0x10c>
     f96:	e3 e4       	ldi	r30, 0x43	; 67
     f98:	f3 e0       	ldi	r31, 0x03	; 3
     f9a:	81 53       	subi	r24, 0x31	; 49
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	2c 5b       	subi	r18, 0xBC	; 188
     fa2:	3c 4f       	sbci	r19, 0xFC	; 252
     fa4:	5f 9b       	sbis	0x0b, 7	; 11
     fa6:	fe cf       	rjmp	.-4      	; 0xfa4 <__vector_18+0xfe>
     fa8:	8c b1       	in	r24, 0x0c	; 12
     faa:	81 93       	st	Z+, r24
     fac:	e2 17       	cp	r30, r18
     fae:	f3 07       	cpc	r31, r19
     fb0:	c9 f7       	brne	.-14     	; 0xfa4 <__vector_18+0xfe>
     fb2:	89 2f       	mov	r24, r25
     fb4:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
     fb8:	a2 cf       	rjmp	.-188    	; 0xefe <__vector_18+0x58>
     fba:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
     fbe:	98 2f       	mov	r25, r24
     fc0:	03 e4       	ldi	r16, 0x43	; 67
     fc2:	13 e0       	ldi	r17, 0x03	; 3
     fc4:	5f 9b       	sbis	0x0b, 7	; 11
     fc6:	fe cf       	rjmp	.-4      	; 0xfc4 <__vector_18+0x11e>
     fc8:	8c b1       	in	r24, 0x0c	; 12
     fca:	f8 01       	movw	r30, r16
     fcc:	81 93       	st	Z+, r24
     fce:	8f 01       	movw	r16, r30
     fd0:	f3 e0       	ldi	r31, 0x03	; 3
     fd2:	04 36       	cpi	r16, 0x64	; 100
     fd4:	1f 07       	cpc	r17, r31
     fd6:	b1 f7       	brne	.-20     	; 0xfc4 <__vector_18+0x11e>
     fd8:	89 2f       	mov	r24, r25
     fda:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
     fde:	c8 01       	movw	r24, r16
     fe0:	81 97       	sbiw	r24, 0x21	; 33
     fe2:	0e 94 bf 01 	call	0x37e	; 0x37e <initCommandReceived>
     fe6:	8b cf       	rjmp	.-234    	; 0xefe <__vector_18+0x58>

00000fe8 <printfintegeru32>:
}

//-------------------------------------------------------------------------
void printfintegeru32(uint32_t val)
{
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	7b 01       	movw	r14, r22
     ff4:	8c 01       	movw	r16, r24
	_atomic_t currentatomic;

    currentatomic = _atomic_start();
     ff6:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
     ffa:	d8 2e       	mov	r13, r24
    
#ifdef PLATFORM_AVR
  #ifdef PRINT_SOURCE_ENABLED
	  printString(node_readnodestring());
     ffc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <node_readnodestring>
    1000:	0e 94 21 06 	call	0xc42	; 0xc42 <printString>
	  printString(": ");
    1004:	87 e2       	ldi	r24, 0x27	; 39
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	0e 94 21 06 	call	0xc42	; 0xc42 <printString>
	#endif
    printIntegerU32(val);
    100c:	c8 01       	movw	r24, r16
    100e:	b7 01       	movw	r22, r14
    1010:	0e 94 bd 06 	call	0xd7a	; 0xd7a <printIntegerU32>
#endif
_atomic_end(currentatomic); 
    1014:	8d 2d       	mov	r24, r13
    1016:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
}
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	08 95       	ret

00001026 <printfstr>:
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	8c 01       	movw	r16, r24
    102e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1032:	f8 2e       	mov	r15, r24
    1034:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <node_readnodestring>
    1038:	0e 94 21 06 	call	0xc42	; 0xc42 <printString>
    103c:	87 e2       	ldi	r24, 0x27	; 39
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 21 06 	call	0xc42	; 0xc42 <printString>
    1044:	c8 01       	movw	r24, r16
    1046:	0e 94 21 06 	call	0xc42	; 0xc42 <printString>
    104a:	8f 2d       	mov	r24, r15
    104c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	08 95       	ret

00001058 <printfinteger32>:
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	7b 01       	movw	r14, r22
    1064:	8c 01       	movw	r16, r24
    1066:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    106a:	d8 2e       	mov	r13, r24
    106c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <node_readnodestring>
    1070:	0e 94 21 06 	call	0xc42	; 0xc42 <printString>
    1074:	87 e2       	ldi	r24, 0x27	; 39
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	0e 94 21 06 	call	0xc42	; 0xc42 <printString>
    107c:	c8 01       	movw	r24, r16
    107e:	b7 01       	movw	r22, r14
    1080:	0e 94 a0 06 	call	0xd40	; 0xd40 <printInteger32>
    1084:	8d 2d       	mov	r24, r13
    1086:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	08 95       	ret

00001096 <printfval>:
    1096:	0e 94 05 06 	call	0xc0a	; 0xc0a <usartPrint>
    109a:	08 95       	ret

0000109c <printfstrlen_base>:
    109c:	0e 94 57 06 	call	0xcae	; 0xcae <printStringN_base>
    10a0:	08 95       	ret

000010a2 <printfstrlen>:
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	8c 01       	movw	r16, r24
    10aa:	f6 2e       	mov	r15, r22
    10ac:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <node_readnodestring>
    10b0:	0e 94 21 06 	call	0xc42	; 0xc42 <printString>
    10b4:	87 e2       	ldi	r24, 0x27	; 39
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	0e 94 21 06 	call	0xc42	; 0xc42 <printString>
    10bc:	c8 01       	movw	r24, r16
    10be:	6f 2d       	mov	r22, r15
    10c0:	0e 94 36 06 	call	0xc6c	; 0xc6c <printStringN>
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	08 95       	ret

000010cc <printfstrln>:
    10cc:	1f 93       	push	r17
    10ce:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    10d2:	18 2f       	mov	r17, r24
    10d4:	0e 94 d2 06 	call	0xda4	; 0xda4 <printStringLn>
    10d8:	81 2f       	mov	r24, r17
    10da:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    10de:	1f 91       	pop	r17
    10e0:	08 95       	ret

000010e2 <AMStandard_SendMsg_default_sendDone>:

//-------------------------------------------------------------------------
inline result_t AMStandard_SendMsg_default_sendDone(uint8_t id, Radio_MsgPtr
                                                    msg, result_t success)
{
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	08 95       	ret

000010e6 <AMStandard_SendMsg_sendDone>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t AMStandard_SendMsg_sendDone(uint16_t arg_0xa3b8f90,
                                            Radio_MsgPtr arg_0xa31a0a0,
                                            result_t arg_0xa31a1f0)
{
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	08 95       	ret

000010ea <AMStandard_default_sendDone>:
    return 0;
}

//-------------------------------------------------------------------------
inline result_t AMStandard_default_sendDone(void)
{
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	08 95       	ret

000010ee <AMStandard_sendDone>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t AMStandard_sendDone(void)
{
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	08 95       	ret

000010f2 <AMStandard_ReceiveMsg_default_receive>:
    unsigned char result;

    result = AMStandard_default_sendDone();
    return result;
}

//-------------------------------------------------------------------------
inline Radio_MsgPtr AMStandard_ReceiveMsg_default_receive(uint8_t id,
                                                          Radio_MsgPtr msg)
{
    10f2:	cb 01       	movw	r24, r22
    return msg;
}
    10f4:	08 95       	ret

000010f6 <AMStandard_ReceiveMsg_receive>:

//Another critical function that bridges to the application 
inline Radio_MsgPtr AMStandard_ReceiveMsg_receive(uint16_t port, Radio_MsgPtr
                                                  msg)
{
    10f6:	cb 01       	movw	r24, r22
    return msg;
}
    10f8:	08 95       	ret

000010fa <AMStandard_RadioSend_sendDone>:

//This function is really really critical to the correct behaviro of the radio stack 
//Basically it returns a radio message pointer that must be reused 
//and the content of the packet is the correct packet parsed, and is useful 
//The content starts with a length that is the actual payload length and all information are correct
//Must copy this content to the user supplied buffer, put the user action into a task, and then return this buffer to the recevie module 
Radio_MsgPtr received(Radio_MsgPtr packet)
{
    uint16_t addr = CURRENT_NODE_ID;

#ifdef TRACE_ENABLE
#ifdef TRACE_ENABLE_RADIOEVENT
    addTrace(TRACE_RADIOEVENT_RECEIVEPACKET, 100);
#endif
#endif
    AMStandard_counter++;
    if (packet->crc == 1 && (packet->addr == BCAST_ADDRESS || packet->addr ==
                             addr))
    {
        uint16_t port = packet->port;
        Radio_MsgPtr tmp;

        tmp = Standard_Receive_Packet(port, packet);
        if (tmp)
        {
            packet = tmp;
        }
    }
    return packet;
}






//-------------------------------------------------------------------------
inline Radio_MsgPtr AMStandard_RadioReceive_receive(Radio_MsgPtr packet)
{
   #if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
   return received( packet );
   #endif
   
   #if defined(PLATFORM_AVR) && defined(RADIO_RF230)
   return received_iris( packet );
   #endif

     
}

//-------------------------------------------------------------------------
inline result_t AMStandard_RadioSend_sendDone(Radio_MsgPtr msg, result_t
                                              success)
{
    10fa:	10 92 09 04 	sts	0x0409, r1
    return AMStandard_reportSendDone(msg, success);
}
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	08 95       	ret

00001102 <AMStandard_reportSendDone>:

//-------------------------------------------------------------------------
result_t AMStandard_reportSendDone(Radio_MsgPtr msg, result_t success)
{
    1102:	10 92 09 04 	sts	0x0409, r1
    AMStandard_state = FALSE;
    //  AMStandard_SendMsg_sendDone(msg->port, msg, success);
    //  AMStandard_sendDone();
    return SUCCESS;
}
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	08 95       	ret

0000110a <restoreRadioState>:

//-------------------------------------------------------------------------
inline void restoreRadioState()
{
    110a:	10 92 09 04 	sts	0x0409, r1
    AMStandard_state = FALSE;
#if defined(PLATFORM_AVR) && defined (RADIO_CC2420)
    restorecc2420state();
    110e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <restorecc2420state>
#endif
}
    1112:	08 95       	ret

00001114 <received>:
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	ec 01       	movw	r28, r24
    111a:	20 91 f6 03 	lds	r18, 0x03F6
    111e:	30 91 f7 03 	lds	r19, 0x03F7
    1122:	80 91 0a 04 	lds	r24, 0x040A
    1126:	90 91 0b 04 	lds	r25, 0x040B
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	90 93 0b 04 	sts	0x040B, r25
    1130:	80 93 0a 04 	sts	0x040A, r24
    1134:	c0 59       	subi	r28, 0x90	; 144
    1136:	df 4f       	sbci	r29, 0xFF	; 255
    1138:	88 81       	ld	r24, Y
    113a:	c0 57       	subi	r28, 0x70	; 112
    113c:	d0 40       	sbci	r29, 0x00	; 0
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	21 f0       	breq	.+8      	; 0x114a <received+0x36>
    1142:	ce 01       	movw	r24, r28
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	08 95       	ret
    114a:	8e 81       	ldd	r24, Y+6	; 0x06
    114c:	9f 81       	ldd	r25, Y+7	; 0x07
    114e:	4f ef       	ldi	r20, 0xFF	; 255
    1150:	8f 3f       	cpi	r24, 0xFF	; 255
    1152:	94 07       	cpc	r25, r20
    1154:	19 f0       	breq	.+6      	; 0x115c <received+0x48>
    1156:	28 17       	cp	r18, r24
    1158:	39 07       	cpc	r19, r25
    115a:	99 f7       	brne	.-26     	; 0x1142 <received+0x2e>
    115c:	88 85       	ldd	r24, Y+8	; 0x08
    115e:	99 85       	ldd	r25, Y+9	; 0x09
    1160:	be 01       	movw	r22, r28
    1162:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <Standard_Receive_Packet>
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	61 f3       	breq	.-40     	; 0x1142 <received+0x2e>
    116a:	ec 01       	movw	r28, r24
    116c:	ce 01       	movw	r24, r28
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	08 95       	ret

00001174 <AMStandard_SendMsg_send>:
    1174:	df 92       	push	r13
    1176:	ef 92       	push	r14
    1178:	ff 92       	push	r15
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	7c 01       	movw	r14, r24
    1184:	8b 01       	movw	r16, r22
    1186:	d4 2e       	mov	r13, r20
    1188:	e9 01       	movw	r28, r18
    118a:	80 91 09 04 	lds	r24, 0x0409
    118e:	88 23       	and	r24, r24
    1190:	41 f4       	brne	.+16     	; 0x11a2 <AMStandard_SendMsg_send+0x2e>
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	80 93 09 04 	sts	0x0409, r24
    1198:	84 e6       	ldi	r24, 0x64	; 100
    119a:	84 17       	cp	r24, r20
    119c:	58 f4       	brcc	.+22     	; 0x11b4 <AMStandard_SendMsg_send+0x40>
    119e:	10 92 09 04 	sts	0x0409, r1
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	08 95       	ret
    11b4:	88 e1       	ldi	r24, 0x18	; 24
    11b6:	99 e0       	ldi	r25, 0x09	; 9
    11b8:	64 e1       	ldi	r22, 0x14	; 20
    11ba:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    11be:	88 23       	and	r24, r24
    11c0:	91 f0       	breq	.+36     	; 0x11e6 <AMStandard_SendMsg_send+0x72>
    11c2:	d0 93 0f 04 	sts	0x040F, r29
    11c6:	c0 93 0e 04 	sts	0x040E, r28
    11ca:	d8 82       	st	Y, r13
    11cc:	1f 83       	std	Y+7, r17	; 0x07
    11ce:	0e 83       	std	Y+6, r16	; 0x06
    11d0:	f9 86       	std	Y+9, r15	; 0x09
    11d2:	e8 86       	std	Y+8, r14	; 0x08
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	df 90       	pop	r13
    11e4:	08 95       	ret
    11e6:	10 92 09 04 	sts	0x0409, r1
    11ea:	dc cf       	rjmp	.-72     	; 0x11a4 <AMStandard_SendMsg_send+0x30>

000011ec <AMStandard_RadioControl_start>:
    11ec:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <cc2420radiom_StdControl_start>
    11f0:	08 95       	ret

000011f2 <AMStandard_Control_start>:
    11f2:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <cc2420radiom_StdControl_start>
    11f6:	10 92 09 04 	sts	0x0409, r1
    11fa:	08 95       	ret

000011fc <AMStandard_Control_init>:
    11fc:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <cc2420radiom_SplitControl_init>
    1200:	10 92 09 04 	sts	0x0409, r1
    1204:	10 92 0d 04 	sts	0x040D, r1
    1208:	10 92 0c 04 	sts	0x040C, r1
    120c:	10 92 0b 04 	sts	0x040B, r1
    1210:	10 92 0a 04 	sts	0x040A, r1
    1214:	08 95       	ret

00001216 <AMStandard_RadioSend_send>:
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	8c 01       	movw	r16, r24
    121c:	10 92 09 04 	sts	0x0409, r1
    1220:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <restorecc2420state>
    1224:	c8 01       	movw	r24, r16
    1226:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <cc2420radiom_Send_send>
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	08 95       	ret

00001230 <AMStandard_sendTask>:
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	00 91 0e 04 	lds	r16, 0x040E
    1238:	10 91 0f 04 	lds	r17, 0x040F
    123c:	10 92 09 04 	sts	0x0409, r1
    1240:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <restorecc2420state>
    1244:	c8 01       	movw	r24, r16
    1246:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <cc2420radiom_Send_send>
    124a:	88 23       	and	r24, r24
    124c:	11 f4       	brne	.+4      	; 0x1252 <AMStandard_sendTask+0x22>
    124e:	10 92 09 04 	sts	0x0409, r1
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	08 95       	ret

00001258 <AMStandard_RadioReceive_receive>:
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	ec 01       	movw	r28, r24
    125e:	20 91 f6 03 	lds	r18, 0x03F6
    1262:	30 91 f7 03 	lds	r19, 0x03F7
    1266:	80 91 0a 04 	lds	r24, 0x040A
    126a:	90 91 0b 04 	lds	r25, 0x040B
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	90 93 0b 04 	sts	0x040B, r25
    1274:	80 93 0a 04 	sts	0x040A, r24
    1278:	c0 59       	subi	r28, 0x90	; 144
    127a:	df 4f       	sbci	r29, 0xFF	; 255
    127c:	88 81       	ld	r24, Y
    127e:	c0 57       	subi	r28, 0x70	; 112
    1280:	d0 40       	sbci	r29, 0x00	; 0
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	21 f0       	breq	.+8      	; 0x128e <AMStandard_RadioReceive_receive+0x36>
    1286:	ce 01       	movw	r24, r28
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	08 95       	ret
    128e:	8e 81       	ldd	r24, Y+6	; 0x06
    1290:	9f 81       	ldd	r25, Y+7	; 0x07
    1292:	4f ef       	ldi	r20, 0xFF	; 255
    1294:	8f 3f       	cpi	r24, 0xFF	; 255
    1296:	94 07       	cpc	r25, r20
    1298:	19 f0       	breq	.+6      	; 0x12a0 <AMStandard_RadioReceive_receive+0x48>
    129a:	28 17       	cp	r18, r24
    129c:	39 07       	cpc	r19, r25
    129e:	99 f7       	brne	.-26     	; 0x1286 <AMStandard_RadioReceive_receive+0x2e>
    12a0:	88 85       	ldd	r24, Y+8	; 0x08
    12a2:	99 85       	ldd	r25, Y+9	; 0x09
    12a4:	be 01       	movw	r22, r28
    12a6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <Standard_Receive_Packet>
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	61 f3       	breq	.-40     	; 0x1286 <AMStandard_RadioReceive_receive+0x2e>
    12ae:	ec 01       	movw	r28, r24
    12b0:	ce 01       	movw	r24, r28
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <initRadioHandle>:


//init all handles by setting their handle valid indicator as 0
void initRadioHandle()
{
    12b8:	10 92 1b 04 	sts	0x041B, r1
    12bc:	10 92 27 04 	sts	0x0427, r1
    12c0:	10 92 33 04 	sts	0x0433, r1
    12c4:	10 92 3f 04 	sts	0x043F, r1
    12c8:	10 92 4b 04 	sts	0x044B, r1
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        receivehandles[i].handlevalid = 0;
    }
	 
}
    12cc:	08 95       	ret

000012ce <registerEvent>:

//Register A New Handle
//supply the following :
//the port listening to
//The max length of the data
//The dataready byte for the actual number of bytes receicved 
//The data for the received packet
//packetinfo for storing the received packet info on rssi and lqi 
//handle function to be posted 
void registerEvent(uint16_t port, uint8_t maxLength, uint8_t * dataReady,
                   uint8_t * data, uint8_t * packetinfo,
                   void (*handlefunc) (void))
{
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	ec 01       	movw	r28, r24
    12dc:	eb e1       	ldi	r30, 0x1B	; 27
    12de:	f4 e0       	ldi	r31, 0x04	; 4
    12e0:	a0 e0       	ldi	r26, 0x00	; 0
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
        if (receivehandles[i].handlevalid == 0)
    12e4:	80 81       	ld	r24, Z
    12e6:	88 23       	and	r24, r24
    12e8:	61 f0       	breq	.+24     	; 0x1302 <registerEvent+0x34>
        {
            receivehandles[i].port = port;
            receivehandles[i].maxLength = maxLength;
            receivehandles[i].dataReady = dataReady;
            receivehandles[i].data = data;
            receivehandles[i].packetinfo = packetinfo;
            receivehandles[i].handlefunc = handlefunc;
            receivehandles[i].handlevalid = 1;
            return;
    12ea:	11 96       	adiw	r26, 0x01	; 1
    12ec:	3c 96       	adiw	r30, 0x0c	; 12
    12ee:	a5 30       	cpi	r26, 0x05	; 5
    12f0:	b1 05       	cpc	r27, r1
    12f2:	c1 f7       	brne	.-16     	; 0x12e4 <registerEvent+0x16>
        }
}
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	ff 90       	pop	r15
    12fe:	ef 90       	pop	r14
    1300:	08 95       	ret
    1302:	fd 01       	movw	r30, r26
    1304:	ee 0f       	add	r30, r30
    1306:	ff 1f       	adc	r31, r31
    1308:	ea 0f       	add	r30, r26
    130a:	fb 1f       	adc	r31, r27
    130c:	ee 0f       	add	r30, r30
    130e:	ff 1f       	adc	r31, r31
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	df 01       	movw	r26, r30
    1316:	ae 5e       	subi	r26, 0xEE	; 238
    1318:	bb 4f       	sbci	r27, 0xFB	; 251
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	dc 93       	st	X, r29
    131e:	ce 93       	st	-X, r28
    1320:	ec 5e       	subi	r30, 0xEC	; 236
    1322:	fb 4f       	sbci	r31, 0xFB	; 251
    1324:	60 83       	st	Z, r22
    1326:	14 96       	adiw	r26, 0x04	; 4
    1328:	5c 93       	st	X, r21
    132a:	4e 93       	st	-X, r20
    132c:	13 97       	sbiw	r26, 0x03	; 3
    132e:	16 96       	adiw	r26, 0x06	; 6
    1330:	3c 93       	st	X, r19
    1332:	2e 93       	st	-X, r18
    1334:	15 97       	sbiw	r26, 0x05	; 5
    1336:	18 96       	adiw	r26, 0x08	; 8
    1338:	1c 93       	st	X, r17
    133a:	0e 93       	st	-X, r16
    133c:	17 97       	sbiw	r26, 0x07	; 7
    133e:	1b 96       	adiw	r26, 0x0b	; 11
    1340:	fc 92       	st	X, r15
    1342:	ee 92       	st	-X, r14
    1344:	1a 97       	sbiw	r26, 0x0a	; 10
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	19 96       	adiw	r26, 0x09	; 9
    134a:	8c 93       	st	X, r24
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	ef 90       	pop	r14
    1358:	08 95       	ret

0000135a <deRegisterEvent>:

//-------------------------------------------------------------------------
void deRegisterEvent(uint16_t port)
{
    135a:	ac 01       	movw	r20, r24
    135c:	e2 e1       	ldi	r30, 0x12	; 18
    135e:	f4 e0       	ldi	r31, 0x04	; 4
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
        if ((receivehandles[i].handlevalid == 1) && (receivehandles[i].port
    1364:	81 85       	ldd	r24, Z+9	; 0x09
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	39 f0       	breq	.+14     	; 0x1378 <deRegisterEvent+0x1e>
                                                     == port))
        {
            receivehandles[i].handlevalid = 0;
            receivehandles[i].port = 0;
            return;
    136a:	2f 5f       	subi	r18, 0xFF	; 255
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	3c 96       	adiw	r30, 0x0c	; 12
    1370:	25 30       	cpi	r18, 0x05	; 5
    1372:	31 05       	cpc	r19, r1
    1374:	b9 f7       	brne	.-18     	; 0x1364 <deRegisterEvent+0xa>
    1376:	08 95       	ret
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	84 17       	cp	r24, r20
    137e:	95 07       	cpc	r25, r21
    1380:	a1 f7       	brne	.-24     	; 0x136a <deRegisterEvent+0x10>
    1382:	f9 01       	movw	r30, r18
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	e2 0f       	add	r30, r18
    138a:	f3 1f       	adc	r31, r19
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	ee 5e       	subi	r30, 0xEE	; 238
    1396:	fb 4f       	sbci	r31, 0xFB	; 251
    1398:	11 86       	std	Z+9, r1	; 0x09
    139a:	11 82       	std	Z+1, r1	; 0x01
    139c:	10 82       	st	Z, r1
    139e:	08 95       	ret

000013a0 <deleteThreadRegistrationInReceiverHandles>:
        }
}


 


//Now this OS has a new packet, needs to deliver it to the correct thread for processing, and return the packet as soon as possible 
Radio_MsgPtr Standard_Receive_Packet(uint16_t port, Radio_MsgPtr packet)
{
    uint8_t i;

    tmp = packet; 
		 
    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].port == port)
            && (receivehandles[i].handlevalid == 1))
        {
            uint8_t temp;
            uint8_t j;
            uint8_t *buf;

            buf = (uint8_t *) receivehandles[i].data;
            temp =
                (packet->length >
                 (receivehandles[i].maxLength) ? (receivehandles[i].
                                                  maxLength) : packet->length);
            for (j = 0; j < temp; j++)
            {
                *buf = packet->data[j];
                buf++;
            }
            if (receivehandles[i].packetinfo != NULL)
            {
                buf = (uint8_t *) receivehandles[i].packetinfo;
                *buf = packet->strength;
                buf++;
                *buf = packet->lqi;
            }
            if (receivehandles[i].handlefunc != NULL)
            {
                postTask(receivehandles[i].handlefunc, 6);
            }
            //if (*(receivehandles[i].dataReady) == 0) 
            *(receivehandles[i].dataReady) = temp;
            return packet;
        }
    }
    return packet;
}

//-------------------------------------------------------------------------
void deleteThreadRegistrationInReceiverHandles(uint8_t * start, uint8_t * end)
{
    13a0:	ac 01       	movw	r20, r24
    13a2:	e2 e1       	ldi	r30, 0x12	; 18
    13a4:	f4 e0       	ldi	r31, 0x04	; 4
    uint8_t i;

    for (i = 0; i < RECEIVE_HANDLE_NUM; i++)
    {
        if ((receivehandles[i].handlevalid == 1)
    13a6:	81 85       	ldd	r24, Z+9	; 0x09
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	31 f0       	breq	.+12     	; 0x13b8 <deleteThreadRegistrationInReceiverHandles+0x18>
            && (receivehandles[i].dataReady <= end)
            && (receivehandles[i].dataReady >= start))
        {
            receivehandles[i].handlevalid = 0;
            receivehandles[i].port = 0;
    13ac:	3c 96       	adiw	r30, 0x0c	; 12
    13ae:	84 e0       	ldi	r24, 0x04	; 4
    13b0:	ee 34       	cpi	r30, 0x4E	; 78
    13b2:	f8 07       	cpc	r31, r24
    13b4:	c1 f7       	brne	.-16     	; 0x13a6 <deleteThreadRegistrationInReceiverHandles+0x6>
        }
    }
}
    13b6:	08 95       	ret
    13b8:	23 81       	ldd	r18, Z+3	; 0x03
    13ba:	34 81       	ldd	r19, Z+4	; 0x04
    13bc:	62 17       	cp	r22, r18
    13be:	73 07       	cpc	r23, r19
    13c0:	a8 f3       	brcs	.-22     	; 0x13ac <deleteThreadRegistrationInReceiverHandles+0xc>
    13c2:	24 17       	cp	r18, r20
    13c4:	35 07       	cpc	r19, r21
    13c6:	90 f3       	brcs	.-28     	; 0x13ac <deleteThreadRegistrationInReceiverHandles+0xc>
    13c8:	11 86       	std	Z+9, r1	; 0x09
    13ca:	11 82       	std	Z+1, r1	; 0x01
    13cc:	10 82       	st	Z, r1
    13ce:	ee cf       	rjmp	.-36     	; 0x13ac <deleteThreadRegistrationInReceiverHandles+0xc>

000013d0 <Standard_Receive_Packet>:
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	9c 01       	movw	r18, r24
    13e0:	8b 01       	movw	r16, r22
    13e2:	70 93 11 04 	sts	0x0411, r23
    13e6:	60 93 10 04 	sts	0x0410, r22
    13ea:	e2 e1       	ldi	r30, 0x12	; 18
    13ec:	f4 e0       	ldi	r31, 0x04	; 4
    13ee:	c0 e0       	ldi	r28, 0x00	; 0
    13f0:	d0 e0       	ldi	r29, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	82 17       	cp	r24, r18
    13f8:	93 07       	cpc	r25, r19
    13fa:	71 f0       	breq	.+28     	; 0x1418 <Standard_Receive_Packet+0x48>
    13fc:	21 96       	adiw	r28, 0x01	; 1
    13fe:	3c 96       	adiw	r30, 0x0c	; 12
    1400:	c5 30       	cpi	r28, 0x05	; 5
    1402:	d1 05       	cpc	r29, r1
    1404:	b1 f7       	brne	.-20     	; 0x13f2 <Standard_Receive_Packet+0x22>
    1406:	c8 01       	movw	r24, r16
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	08 95       	ret
    1418:	81 85       	ldd	r24, Z+9	; 0x09
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	79 f7       	brne	.-34     	; 0x13fc <Standard_Receive_Packet+0x2c>
    141e:	6e 01       	movw	r12, r28
    1420:	cc 0c       	add	r12, r12
    1422:	dd 1c       	adc	r13, r13
    1424:	f6 01       	movw	r30, r12
    1426:	ec 0f       	add	r30, r28
    1428:	fd 1f       	adc	r31, r29
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	df 01       	movw	r26, r30
    1434:	ae 5e       	subi	r26, 0xEE	; 238
    1436:	bb 4f       	sbci	r27, 0xFB	; 251
    1438:	15 96       	adiw	r26, 0x05	; 5
    143a:	4c 91       	ld	r20, X
    143c:	15 97       	sbiw	r26, 0x05	; 5
    143e:	16 96       	adiw	r26, 0x06	; 6
    1440:	2c 91       	ld	r18, X
    1442:	ec 5e       	subi	r30, 0xEC	; 236
    1444:	fb 4f       	sbci	r31, 0xFB	; 251
    1446:	d8 01       	movw	r26, r16
    1448:	8c 91       	ld	r24, X
    144a:	f0 80       	ld	r15, Z
    144c:	8f 15       	cp	r24, r15
    144e:	08 f4       	brcc	.+2      	; 0x1452 <Standard_Receive_Packet+0x82>
    1450:	44 c0       	rjmp	.+136    	; 0x14da <Standard_Receive_Packet+0x10a>
    1452:	ff 20       	and	r15, r15
    1454:	71 f0       	breq	.+28     	; 0x1472 <Standard_Receive_Packet+0xa2>
    1456:	d8 01       	movw	r26, r16
    1458:	84 2f       	mov	r24, r20
    145a:	92 2f       	mov	r25, r18
    145c:	9c 01       	movw	r18, r24
    145e:	f9 01       	movw	r30, r18
    1460:	1a 96       	adiw	r26, 0x0a	; 10
    1462:	8c 91       	ld	r24, X
    1464:	1a 97       	sbiw	r26, 0x0a	; 10
    1466:	81 93       	st	Z+, r24
    1468:	11 96       	adiw	r26, 0x01	; 1
    146a:	8e 2f       	mov	r24, r30
    146c:	84 1b       	sub	r24, r20
    146e:	8f 15       	cp	r24, r15
    1470:	b8 f3       	brcs	.-18     	; 0x1460 <Standard_Receive_Packet+0x90>
    1472:	f6 01       	movw	r30, r12
    1474:	ec 0f       	add	r30, r28
    1476:	fd 1f       	adc	r31, r29
    1478:	ee 0f       	add	r30, r30
    147a:	ff 1f       	adc	r31, r31
    147c:	ee 0f       	add	r30, r30
    147e:	ff 1f       	adc	r31, r31
    1480:	ee 5e       	subi	r30, 0xEE	; 238
    1482:	fb 4f       	sbci	r31, 0xFB	; 251
    1484:	07 80       	ldd	r0, Z+7	; 0x07
    1486:	f0 85       	ldd	r31, Z+8	; 0x08
    1488:	e0 2d       	mov	r30, r0
    148a:	30 97       	sbiw	r30, 0x00	; 0
    148c:	51 f0       	breq	.+20     	; 0x14a2 <Standard_Receive_Packet+0xd2>
    148e:	02 59       	subi	r16, 0x92	; 146
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	d8 01       	movw	r26, r16
    1494:	8d 91       	ld	r24, X+
    1496:	8d 01       	movw	r16, r26
    1498:	80 83       	st	Z, r24
    149a:	8c 91       	ld	r24, X
    149c:	0f 56       	subi	r16, 0x6F	; 111
    149e:	10 40       	sbci	r17, 0x00	; 0
    14a0:	81 83       	std	Z+1, r24	; 0x01
    14a2:	f6 01       	movw	r30, r12
    14a4:	ec 0f       	add	r30, r28
    14a6:	fd 1f       	adc	r31, r29
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	ee 0f       	add	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	ee 5e       	subi	r30, 0xEE	; 238
    14b2:	fb 4f       	sbci	r31, 0xFB	; 251
    14b4:	82 85       	ldd	r24, Z+10	; 0x0a
    14b6:	93 85       	ldd	r25, Z+11	; 0x0b
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	19 f0       	breq	.+6      	; 0x14c2 <Standard_Receive_Packet+0xf2>
    14bc:	66 e0       	ldi	r22, 0x06	; 6
    14be:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    14c2:	cc 0d       	add	r28, r12
    14c4:	dd 1d       	adc	r29, r13
    14c6:	cc 0f       	add	r28, r28
    14c8:	dd 1f       	adc	r29, r29
    14ca:	cc 0f       	add	r28, r28
    14cc:	dd 1f       	adc	r29, r29
    14ce:	ce 5e       	subi	r28, 0xEE	; 238
    14d0:	db 4f       	sbci	r29, 0xFB	; 251
    14d2:	eb 81       	ldd	r30, Y+3	; 0x03
    14d4:	fc 81       	ldd	r31, Y+4	; 0x04
    14d6:	f0 82       	st	Z, r15
    14d8:	96 cf       	rjmp	.-212    	; 0x1406 <Standard_Receive_Packet+0x36>
    14da:	f8 2e       	mov	r15, r24
    14dc:	ba cf       	rjmp	.-140    	; 0x1452 <Standard_Receive_Packet+0x82>

000014de <cc2420controlm_HPLChipconRAM_writeDone>:
//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconRAM_writeDone(uint16_t addr, uint8_t
                                                       length,
                                                       uint8_t * buffer)
{
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	08 95       	ret

000014e2 <cc2420controlm_HPLChipconControl_init>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconRAM_write(uint16_t arg_0xa45ad38,
                                                   uint8_t arg_0xa45ae80,
                                                   uint8_t * arg_0xa45afe0)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420RAM_write(arg_0xa45ad38, arg_0xa45ae80,
                                           arg_0xa45afe0);
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CC2420Control_setShortAddress(uint16_t addr)
{
    addr = toLSB16(addr);
    return cc2420controlm_HPLChipconRAM_write(0x16A, 2, (uint8_t *) & addr);
}

//-------------------------------------------------------------------------
inline uint16_t cc2420controlm_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    return result;
}

//-------------------------------------------------------------------------
inline bool cc2420controlm_SetRegs(void)
{
    uint16_t data;

    cc2420controlm_HPLChipcon_write(0x10,
                                    cc2420controlm_gCurrentParameters
                                    [CP_MAIN]);
    cc2420controlm_HPLChipcon_write(0x11,
                                    cc2420controlm_gCurrentParameters
                                    [CP_MDMCTRL0]);
    data = cc2420controlm_HPLChipcon_read(0x11);
    if (data != cc2420controlm_gCurrentParameters[CP_MDMCTRL0])
    {
        return FALSE;
    }
    cc2420controlm_HPLChipcon_write(0x12,
                                    cc2420controlm_gCurrentParameters
                                    [CP_MDMCTRL1]);
    cc2420controlm_HPLChipcon_write(0x13,
                                    cc2420controlm_gCurrentParameters
                                    [CP_RSSI]);
    cc2420controlm_HPLChipcon_write(0x14,
                                    cc2420controlm_gCurrentParameters
                                    [CP_SYNCWORD]);
    cc2420controlm_HPLChipcon_write(0x15,
                                    cc2420controlm_gCurrentParameters
                                    [CP_TXCTRL]);
    cc2420controlm_HPLChipcon_write(0x16,
                                    cc2420controlm_gCurrentParameters
                                    [CP_RXCTRL0]);
    cc2420controlm_HPLChipcon_write(0x17,
                                    cc2420controlm_gCurrentParameters
                                    [CP_RXCTRL1]);
    cc2420controlm_HPLChipcon_write(0x18,
                                    cc2420controlm_gCurrentParameters
                                    [CP_FSCTRL]);
    cc2420controlm_HPLChipcon_write(0x19,
                                    cc2420controlm_gCurrentParameters
                                    [CP_SECCTRL0]);
    cc2420controlm_HPLChipcon_write(0x1A,
                                    cc2420controlm_gCurrentParameters
                                    [CP_SECCTRL1]);
    cc2420controlm_HPLChipcon_write(0x1C,
                                    cc2420controlm_gCurrentParameters
                                    [CP_IOCFG0]);
    cc2420controlm_HPLChipcon_write(0x1D,
                                    cc2420controlm_gCurrentParameters
                                    [CP_IOCFG1]);
    cc2420controlm_HPLChipcon_cmd(0x09);
    cc2420controlm_HPLChipcon_cmd(0x08);
    return TRUE;
}

//-------------------------------------------------------------------------
inline void cc2420controlm_PostOscillatorOn(void)
{
    //This fucntion sets up all the registers of the radio module 
    cc2420controlm_SetRegs();
    //This function sets up the short address of the node, and therefore, if the mac frame includes a short address, it should be matched
    cc2420controlm_CC2420Control_setShortAddress(CURRENT_NODE_ID);
    //tHIS TURNS THE CHANELL
    cc2420controlm_CC2420Control_TuneManual(((cc2420controlm_gCurrentParameters
                                              [CP_FSCTRL] << 0) & 0x1FF) +
                                            2048);
    {
        _atomic_t _atomic = _atomic_start();

        cc2420controlm_state = cc2420controlm_START_STATE_DONE;
        _atomic_end(_atomic);
    }
    cc2420controlm_SplitControl_startDone();
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_fired(void)
{
    cc2420controlm_HPLChipcon_write(0x1D, 0);
    postTask(cc2420controlm_PostOscillatorOn, 5);
    return FAIL;
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_init(void)
{
    14e2:	1f 93       	push	r17
    unsigned char result;

    result = HPLCC2420M_StdControl_init();
    14e4:	0e 94 48 14 	call	0x2890	; 0x2890 <HPLCC2420M_StdControl_init>
    14e8:	18 2f       	mov	r17, r24
    result = rcombine(result, HPLTimer1M_StdControl_init());
    14ea:	0e 94 42 15 	call	0x2a84	; 0x2a84 <HPLTimer1M_StdControl_init>
    14ee:	68 2f       	mov	r22, r24
    14f0:	81 2f       	mov	r24, r17
    14f2:	0e 94 ae 3b 	call	0x775c	; 0x775c <rcombine>
    return result;
}
    14f6:	1f 91       	pop	r17
    14f8:	08 95       	ret

000014fa <cc2420controlm_HPLChipcon_read>:
    14fa:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    14fe:	08 95       	ret

00001500 <cc2420controlm_HPLChipconRAM_write>:
    1500:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HPLCC2420M_HPLCC2420RAM_write>
    1504:	08 95       	ret

00001506 <cc2420controlm_CC2420Control_setShortAddress>:
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <cc2420controlm_CC2420Control_setShortAddress+0x6>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	9a 83       	std	Y+2, r25	; 0x02
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	0e 94 49 3a 	call	0x7492	; 0x7492 <toLSB16>
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	8a e6       	ldi	r24, 0x6A	; 106
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	62 e0       	ldi	r22, 0x02	; 2
    1522:	ae 01       	movw	r20, r28
    1524:	4f 5f       	subi	r20, 0xFF	; 255
    1526:	5f 4f       	sbci	r21, 0xFF	; 255
    1528:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HPLCC2420M_HPLCC2420RAM_write>
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <cc2420controlm_SplitControl_startDone>:
    1536:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <cc2420radiom_CC2420SplitControl_startDone>
    153a:	08 95       	ret

0000153c <cc2420controlm_HPLChipconControl_start>:
    153c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HPLTimer1M_StdControl_start>
    1540:	08 95       	ret

00001542 <cc2420controlm_HPLChipcon_write>:
    1542:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1546:	08 95       	ret

00001548 <cc2420controlm_CCA_fired>:
    1548:	8d e1       	ldi	r24, 0x1D	; 29
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1552:	8f e5       	ldi	r24, 0x5F	; 95
    1554:	9c e0       	ldi	r25, 0x0C	; 12
    1556:	65 e0       	ldi	r22, 0x05	; 5
    1558:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	08 95       	ret

00001560 <cc2420controlm_HPLChipcon_cmd>:
    1560:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1564:	08 95       	ret

00001566 <cc2420controlm_SetRegs>:
    1566:	60 91 50 04 	lds	r22, 0x0450
    156a:	70 91 51 04 	lds	r23, 0x0451
    156e:	80 e1       	ldi	r24, 0x10	; 16
    1570:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1574:	60 91 52 04 	lds	r22, 0x0452
    1578:	70 91 53 04 	lds	r23, 0x0453
    157c:	81 e1       	ldi	r24, 0x11	; 17
    157e:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1582:	81 e1       	ldi	r24, 0x11	; 17
    1584:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    1588:	20 91 52 04 	lds	r18, 0x0452
    158c:	30 91 53 04 	lds	r19, 0x0453
    1590:	28 17       	cp	r18, r24
    1592:	39 07       	cpc	r19, r25
    1594:	11 f0       	breq	.+4      	; 0x159a <cc2420controlm_SetRegs+0x34>
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	08 95       	ret
    159a:	60 91 54 04 	lds	r22, 0x0454
    159e:	70 91 55 04 	lds	r23, 0x0455
    15a2:	82 e1       	ldi	r24, 0x12	; 18
    15a4:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    15a8:	60 91 56 04 	lds	r22, 0x0456
    15ac:	70 91 57 04 	lds	r23, 0x0457
    15b0:	83 e1       	ldi	r24, 0x13	; 19
    15b2:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    15b6:	60 91 58 04 	lds	r22, 0x0458
    15ba:	70 91 59 04 	lds	r23, 0x0459
    15be:	84 e1       	ldi	r24, 0x14	; 20
    15c0:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    15c4:	60 91 5a 04 	lds	r22, 0x045A
    15c8:	70 91 5b 04 	lds	r23, 0x045B
    15cc:	85 e1       	ldi	r24, 0x15	; 21
    15ce:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    15d2:	60 91 5c 04 	lds	r22, 0x045C
    15d6:	70 91 5d 04 	lds	r23, 0x045D
    15da:	86 e1       	ldi	r24, 0x16	; 22
    15dc:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    15e0:	60 91 5e 04 	lds	r22, 0x045E
    15e4:	70 91 5f 04 	lds	r23, 0x045F
    15e8:	87 e1       	ldi	r24, 0x17	; 23
    15ea:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    15ee:	60 91 60 04 	lds	r22, 0x0460
    15f2:	70 91 61 04 	lds	r23, 0x0461
    15f6:	88 e1       	ldi	r24, 0x18	; 24
    15f8:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    15fc:	60 91 62 04 	lds	r22, 0x0462
    1600:	70 91 63 04 	lds	r23, 0x0463
    1604:	89 e1       	ldi	r24, 0x19	; 25
    1606:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    160a:	60 91 64 04 	lds	r22, 0x0464
    160e:	70 91 65 04 	lds	r23, 0x0465
    1612:	8a e1       	ldi	r24, 0x1A	; 26
    1614:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1618:	60 91 68 04 	lds	r22, 0x0468
    161c:	70 91 69 04 	lds	r23, 0x0469
    1620:	8c e1       	ldi	r24, 0x1C	; 28
    1622:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1626:	60 91 6a 04 	lds	r22, 0x046A
    162a:	70 91 6b 04 	lds	r23, 0x046B
    162e:	8d e1       	ldi	r24, 0x1D	; 29
    1630:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1634:	89 e0       	ldi	r24, 0x09	; 9
    1636:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    163a:	88 e0       	ldi	r24, 0x08	; 8
    163c:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	08 95       	ret

00001644 <cc2420controlm_CC2420Control_TunePower>:
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	8f 71       	andi	r24, 0x1F	; 31
    1648:	90 70       	andi	r25, 0x00	; 0
    164a:	20 91 5a 04 	lds	r18, 0x045A
    164e:	30 91 5b 04 	lds	r19, 0x045B
    1652:	20 7e       	andi	r18, 0xE0	; 224
    1654:	82 2b       	or	r24, r18
    1656:	93 2b       	or	r25, r19
    1658:	90 93 5b 04 	sts	0x045B, r25
    165c:	80 93 5a 04 	sts	0x045A, r24
    1660:	60 91 60 04 	lds	r22, 0x0460
    1664:	70 91 61 04 	lds	r23, 0x0461
    1668:	85 e1       	ldi	r24, 0x15	; 21
    166a:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    166e:	86 ff       	sbrs	r24, 6
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <cc2420controlm_CC2420Control_TunePower+0x34>
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	08 95       	ret

0000167c <cc2420controlm_CC2420Control_TuneManual>:
    167c:	bc 01       	movw	r22, r24
    167e:	60 50       	subi	r22, 0x00	; 0
    1680:	78 40       	sbci	r23, 0x08	; 8
    1682:	80 91 60 04 	lds	r24, 0x0460
    1686:	90 91 61 04 	lds	r25, 0x0461
    168a:	80 70       	andi	r24, 0x00	; 0
    168c:	9c 7f       	andi	r25, 0xFC	; 252
    168e:	68 2b       	or	r22, r24
    1690:	79 2b       	or	r23, r25
    1692:	70 93 61 04 	sts	0x0461, r23
    1696:	60 93 60 04 	sts	0x0460, r22
    169a:	88 e1       	ldi	r24, 0x18	; 24
    169c:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    16a0:	86 ff       	sbrs	r24, 6
    16a2:	03 c0       	rjmp	.+6      	; 0x16aa <cc2420controlm_CC2420Control_TuneManual+0x2e>
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	08 95       	ret

000016ae <cc2420controlm_CC2420Control_RxMode>:
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	08 95       	ret

000016b8 <cc2420controlm_SplitControl_initDone>:
    16b8:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <cc2420radiom_CC2420SplitControl_initDone>
    16bc:	08 95       	ret

000016be <cc2420controlm_taskInitDone>:
    16be:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <cc2420radiom_CC2420SplitControl_initDone>
    16c2:	08 95       	ret

000016c4 <cc2420controlm_CC2420Control_VREFOff>:
    16c4:	0e 94 3d 05 	call	0xa7a	; 0xa7a <LITE_CLR_CC_VREN_PIN>
    16c8:	88 e5       	ldi	r24, 0x58	; 88
    16ca:	92 e0       	ldi	r25, 0x02	; 2
    16cc:	0e 94 29 02 	call	0x452	; 0x452 <LITE_uwait>
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	08 95       	ret

000016d4 <cc2420controlm_CC2420Control_VREFOn>:
    16d4:	0e 94 3b 05 	call	0xa76	; 0xa76 <LITE_SET_CC_VREN_PIN>
    16d8:	88 e5       	ldi	r24, 0x58	; 88
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	0e 94 29 02 	call	0x452	; 0x452 <LITE_uwait>
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	08 95       	ret

000016e4 <cc2420controlm_CCA_startWait>:
    16e4:	0e 94 aa 12 	call	0x2554	; 0x2554 <hplcc2420interruptm_CCA_startWait>
    16e8:	08 95       	ret

000016ea <cc2420controlm_CC2420Control_OscillatorOn>:
    16ea:	8d e1       	ldi	r24, 0x1D	; 29
    16ec:	68 e1       	ldi	r22, 0x18	; 24
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	0e 94 aa 12 	call	0x2554	; 0x2554 <hplcc2420interruptm_CCA_startWait>
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	08 95       	ret

00001704 <cc2420controlm_CC2420Control_TuneChannel>:
    1704:	95 e0       	ldi	r25, 0x05	; 5
    1706:	89 9f       	mul	r24, r25
    1708:	b0 01       	movw	r22, r0
    170a:	11 24       	eor	r1, r1
    170c:	62 5d       	subi	r22, 0xD2	; 210
    170e:	7e 4f       	sbci	r23, 0xFE	; 254
    1710:	80 91 60 04 	lds	r24, 0x0460
    1714:	90 91 61 04 	lds	r25, 0x0461
    1718:	80 70       	andi	r24, 0x00	; 0
    171a:	9c 7f       	andi	r25, 0xFC	; 252
    171c:	68 2b       	or	r22, r24
    171e:	79 2b       	or	r23, r25
    1720:	70 93 61 04 	sts	0x0461, r23
    1724:	60 93 60 04 	sts	0x0460, r22
    1728:	88 e1       	ldi	r24, 0x18	; 24
    172a:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    172e:	86 ff       	sbrs	r24, 6
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <cc2420controlm_CC2420Control_TuneChannel+0x34>
    1732:	83 e0       	ldi	r24, 0x03	; 3
    1734:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	08 95       	ret

0000173c <cc2420controlm_SplitControl_start>:
    173c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1740:	98 2f       	mov	r25, r24
    1742:	80 91 4e 04 	lds	r24, 0x044E
    1746:	82 30       	cpi	r24, 0x02	; 2
    1748:	29 f0       	breq	.+10     	; 0x1754 <cc2420controlm_SplitControl_start+0x18>
    174a:	89 2f       	mov	r24, r25
    174c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	08 95       	ret
    1754:	83 e0       	ldi	r24, 0x03	; 3
    1756:	80 93 4e 04 	sts	0x044E, r24
    175a:	89 2f       	mov	r24, r25
    175c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1760:	0e 94 e5 15 	call	0x2bca	; 0x2bca <HPLTimer1M_StdControl_start>
    1764:	0e 94 3b 05 	call	0xa76	; 0xa76 <LITE_SET_CC_VREN_PIN>
    1768:	88 e5       	ldi	r24, 0x58	; 88
    176a:	92 e0       	ldi	r25, 0x02	; 2
    176c:	0e 94 29 02 	call	0x452	; 0x452 <LITE_uwait>
    1770:	0e 94 26 05 	call	0xa4c	; 0xa4c <LITE_CLR_CC_RSTN_PIN>
    1774:	0e 94 0f 02 	call	0x41e	; 0x41e <wait_cycle>
    1778:	0e 94 24 05 	call	0xa48	; 0xa48 <LITE_SET_CC_RSTN_PIN>
    177c:	0e 94 0f 02 	call	0x41e	; 0x41e <wait_cycle>
    1780:	8d e1       	ldi	r24, 0x1D	; 29
    1782:	68 e1       	ldi	r22, 0x18	; 24
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	0e 94 aa 12 	call	0x2554	; 0x2554 <hplcc2420interruptm_CCA_startWait>
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	08 95       	ret

0000179a <cc2420controlm_SplitControl_init>:
    179a:	1f 93       	push	r17
    179c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    17a0:	98 2f       	mov	r25, r24
    17a2:	80 91 4e 04 	lds	r24, 0x044E
    17a6:	88 23       	and	r24, r24
    17a8:	09 f0       	breq	.+2      	; 0x17ac <cc2420controlm_SplitControl_init+0x12>
    17aa:	7b c0       	rjmp	.+246    	; 0x18a2 <cc2420controlm_SplitControl_init+0x108>
    17ac:	10 92 4e 04 	sts	0x044E, r1
    17b0:	8b e0       	ldi	r24, 0x0B	; 11
    17b2:	80 93 6c 04 	sts	0x046C, r24
    17b6:	8f e1       	ldi	r24, 0x1F	; 31
    17b8:	80 93 4f 04 	sts	0x044F, r24
    17bc:	89 2f       	mov	r24, r25
    17be:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    17c2:	0e 94 48 14 	call	0x2890	; 0x2890 <HPLCC2420M_StdControl_init>
    17c6:	18 2f       	mov	r17, r24
    17c8:	0e 94 42 15 	call	0x2a84	; 0x2a84 <HPLTimer1M_StdControl_init>
    17cc:	68 2f       	mov	r22, r24
    17ce:	81 2f       	mov	r24, r17
    17d0:	0e 94 ae 3b 	call	0x775c	; 0x775c <rcombine>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	98 ef       	ldi	r25, 0xF8	; 248
    17d8:	90 93 51 04 	sts	0x0451, r25
    17dc:	80 93 50 04 	sts	0x0450, r24
    17e0:	82 ee       	ldi	r24, 0xE2	; 226
    17e2:	92 e0       	ldi	r25, 0x02	; 2
    17e4:	90 93 53 04 	sts	0x0453, r25
    17e8:	80 93 52 04 	sts	0x0452, r24
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	95 e0       	ldi	r25, 0x05	; 5
    17f0:	90 93 55 04 	sts	0x0455, r25
    17f4:	80 93 54 04 	sts	0x0454, r24
    17f8:	80 e8       	ldi	r24, 0x80	; 128
    17fa:	90 ee       	ldi	r25, 0xE0	; 224
    17fc:	90 93 57 04 	sts	0x0457, r25
    1800:	80 93 56 04 	sts	0x0456, r24
    1804:	8f e0       	ldi	r24, 0x0F	; 15
    1806:	97 ea       	ldi	r25, 0xA7	; 167
    1808:	90 93 59 04 	sts	0x0459, r25
    180c:	80 93 58 04 	sts	0x0458, r24
    1810:	80 91 4f 04 	lds	r24, 0x044F
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	80 6e       	ori	r24, 0xE0	; 224
    1818:	90 66       	ori	r25, 0x60	; 96
    181a:	90 93 5b 04 	sts	0x045B, r25
    181e:	80 93 5a 04 	sts	0x045A, r24
    1822:	85 ee       	ldi	r24, 0xE5	; 229
    1824:	92 e1       	ldi	r25, 0x12	; 18
    1826:	90 93 5d 04 	sts	0x045D, r25
    182a:	80 93 5c 04 	sts	0x045C, r24
    182e:	86 e5       	ldi	r24, 0x56	; 86
    1830:	9a e0       	ldi	r25, 0x0A	; 10
    1832:	90 93 5f 04 	sts	0x045F, r25
    1836:	80 93 5e 04 	sts	0x045E, r24
    183a:	80 91 6c 04 	lds	r24, 0x046C
    183e:	25 e0       	ldi	r18, 0x05	; 5
    1840:	82 9f       	mul	r24, r18
    1842:	c0 01       	movw	r24, r0
    1844:	11 24       	eor	r1, r1
    1846:	82 5d       	subi	r24, 0xD2	; 210
    1848:	9e 4f       	sbci	r25, 0xFE	; 254
    184a:	90 64       	ori	r25, 0x40	; 64
    184c:	90 93 61 04 	sts	0x0461, r25
    1850:	80 93 60 04 	sts	0x0460, r24
    1854:	84 ec       	ldi	r24, 0xC4	; 196
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	90 93 63 04 	sts	0x0463, r25
    185c:	80 93 62 04 	sts	0x0462, r24
    1860:	10 92 65 04 	sts	0x0465, r1
    1864:	10 92 64 04 	sts	0x0464, r1
    1868:	10 92 67 04 	sts	0x0467, r1
    186c:	10 92 66 04 	sts	0x0466, r1
    1870:	8f e7       	ldi	r24, 0x7F	; 127
    1872:	92 e0       	ldi	r25, 0x02	; 2
    1874:	90 93 69 04 	sts	0x0469, r25
    1878:	80 93 68 04 	sts	0x0468, r24
    187c:	10 92 6b 04 	sts	0x046B, r1
    1880:	10 92 6a 04 	sts	0x046A, r1
    1884:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1888:	92 e0       	ldi	r25, 0x02	; 2
    188a:	90 93 4e 04 	sts	0x044E, r25
    188e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1892:	8f e5       	ldi	r24, 0x5F	; 95
    1894:	9b e0       	ldi	r25, 0x0B	; 11
    1896:	65 e0       	ldi	r22, 0x05	; 5
    1898:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	1f 91       	pop	r17
    18a0:	08 95       	ret
    18a2:	10 92 4e 04 	sts	0x044E, r1
    18a6:	8b e0       	ldi	r24, 0x0B	; 11
    18a8:	80 93 6c 04 	sts	0x046C, r24
    18ac:	8f e1       	ldi	r24, 0x1F	; 31
    18ae:	80 93 4f 04 	sts	0x044F, r24
    18b2:	89 2f       	mov	r24, r25
    18b4:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	1f 91       	pop	r17
    18bc:	08 95       	ret

000018be <cc2420controlm_PostOscillatorOn>:
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <cc2420controlm_PostOscillatorOn+0x6>
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	60 91 50 04 	lds	r22, 0x0450
    18cc:	70 91 51 04 	lds	r23, 0x0451
    18d0:	80 e1       	ldi	r24, 0x10	; 16
    18d2:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    18d6:	60 91 52 04 	lds	r22, 0x0452
    18da:	70 91 53 04 	lds	r23, 0x0453
    18de:	81 e1       	ldi	r24, 0x11	; 17
    18e0:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    18e4:	81 e1       	ldi	r24, 0x11	; 17
    18e6:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    18ea:	20 91 52 04 	lds	r18, 0x0452
    18ee:	30 91 53 04 	lds	r19, 0x0453
    18f2:	82 17       	cp	r24, r18
    18f4:	93 07       	cpc	r25, r19
    18f6:	89 f1       	breq	.+98     	; 0x195a <cc2420controlm_PostOscillatorOn+0x9c>
    18f8:	80 91 f6 03 	lds	r24, 0x03F6
    18fc:	90 91 f7 03 	lds	r25, 0x03F7
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	0e 94 49 3a 	call	0x7492	; 0x7492 <toLSB16>
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	8a e6       	ldi	r24, 0x6A	; 106
    190e:	91 e0       	ldi	r25, 0x01	; 1
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	ae 01       	movw	r20, r28
    1914:	4f 5f       	subi	r20, 0xFF	; 255
    1916:	5f 4f       	sbci	r21, 0xFF	; 255
    1918:	0e 94 db 13 	call	0x27b6	; 0x27b6 <HPLCC2420M_HPLCC2420RAM_write>
    191c:	60 91 60 04 	lds	r22, 0x0460
    1920:	70 91 61 04 	lds	r23, 0x0461
    1924:	7d 7f       	andi	r23, 0xFD	; 253
    1926:	70 93 61 04 	sts	0x0461, r23
    192a:	60 93 60 04 	sts	0x0460, r22
    192e:	88 e1       	ldi	r24, 0x18	; 24
    1930:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1934:	86 ff       	sbrs	r24, 6
    1936:	03 c0       	rjmp	.+6      	; 0x193e <cc2420controlm_PostOscillatorOn+0x80>
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    193e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1942:	94 e0       	ldi	r25, 0x04	; 4
    1944:	90 93 4e 04 	sts	0x044E, r25
    1948:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    194c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <cc2420radiom_CC2420SplitControl_startDone>
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret
    195a:	60 91 54 04 	lds	r22, 0x0454
    195e:	70 91 55 04 	lds	r23, 0x0455
    1962:	82 e1       	ldi	r24, 0x12	; 18
    1964:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1968:	60 91 56 04 	lds	r22, 0x0456
    196c:	70 91 57 04 	lds	r23, 0x0457
    1970:	83 e1       	ldi	r24, 0x13	; 19
    1972:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1976:	60 91 58 04 	lds	r22, 0x0458
    197a:	70 91 59 04 	lds	r23, 0x0459
    197e:	84 e1       	ldi	r24, 0x14	; 20
    1980:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1984:	60 91 5a 04 	lds	r22, 0x045A
    1988:	70 91 5b 04 	lds	r23, 0x045B
    198c:	85 e1       	ldi	r24, 0x15	; 21
    198e:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    1992:	60 91 5c 04 	lds	r22, 0x045C
    1996:	70 91 5d 04 	lds	r23, 0x045D
    199a:	86 e1       	ldi	r24, 0x16	; 22
    199c:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    19a0:	60 91 5e 04 	lds	r22, 0x045E
    19a4:	70 91 5f 04 	lds	r23, 0x045F
    19a8:	87 e1       	ldi	r24, 0x17	; 23
    19aa:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    19ae:	60 91 60 04 	lds	r22, 0x0460
    19b2:	70 91 61 04 	lds	r23, 0x0461
    19b6:	88 e1       	ldi	r24, 0x18	; 24
    19b8:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    19bc:	60 91 62 04 	lds	r22, 0x0462
    19c0:	70 91 63 04 	lds	r23, 0x0463
    19c4:	89 e1       	ldi	r24, 0x19	; 25
    19c6:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    19ca:	60 91 64 04 	lds	r22, 0x0464
    19ce:	70 91 65 04 	lds	r23, 0x0465
    19d2:	8a e1       	ldi	r24, 0x1A	; 26
    19d4:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    19d8:	60 91 68 04 	lds	r22, 0x0468
    19dc:	70 91 69 04 	lds	r23, 0x0469
    19e0:	8c e1       	ldi	r24, 0x1C	; 28
    19e2:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    19e6:	60 91 6a 04 	lds	r22, 0x046A
    19ea:	70 91 6b 04 	lds	r23, 0x046B
    19ee:	8d e1       	ldi	r24, 0x1D	; 29
    19f0:	0e 94 b1 13 	call	0x2762	; 0x2762 <HPLCC2420M_HPLCC2420_write>
    19f4:	89 e0       	ldi	r24, 0x09	; 9
    19f6:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    19fa:	88 e0       	ldi	r24, 0x08	; 8
    19fc:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1a00:	7b cf       	rjmp	.-266    	; 0x18f8 <cc2420controlm_PostOscillatorOn+0x3a>

00001a02 <cc2420radiom_SplitControl_default_initDone>:
   Radio_Msg cc2420radiom_RxBuf;
   volatile uint16_t cc2420radiom_LocalAddr;
 */
inline result_t cc2420radiom_SplitControl_default_initDone(void)
{
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	08 95       	ret

00001a06 <cc2420radiom_CC2420SplitControl_initDone>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_initDone(void)
{
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	08 95       	ret

00001a0a <cc2420radiom_SplitControl_default_startDone>:
    return cc2420radiom_SplitControl_initDone();
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_init(void)
{
    {
        _atomic_t _atomic = _atomic_start();

        {
            cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
            cc2420radiom_currentDSN = 0;
            cc2420radiom_bAckEnable = FALSE;
            cc2420radiom_bPacketReceiving = FALSE;
            cc2420radiom_rxbufptr = &cc2420radiom_RxBuf;
            cc2420radiom_rxbufptr->length = 0;
        }
        _atomic_end(_atomic);
    }
    cc2420radiom_LocalAddr = CURRENT_NODE_ID;
    return cc2420controlm_SplitControl_init();
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_start(void)
{
    unsigned char result;

    result = cc2420controlm_SplitControl_start();
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_start(void)
{
    uint8_t chkstateRadio;

    {
        _atomic_t _atomic = _atomic_start();

        chkstateRadio = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (chkstateRadio == cc2420radiom_DISABLED_STATE)
    {
        {
            _atomic_t _atomic = _atomic_start();

            {
                cc2420radiom_stateRadio = cc2420radiom_WARMUP_STATE;
                cc2420radiom_countRetry = 0;
                cc2420radiom_rxbufptr->length = 0;
            }
            _atomic_end(_atomic);
        }
        return cc2420radiom_CC2420SplitControl_start();
    }
    return FAIL;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_startRadio(void)
{
    result_t success = FAIL;

    {
        _atomic_t _atomic = _atomic_start();

        {
            if (cc2420radiom_stateRadio ==
                cc2420radiom_DISABLED_STATE_STARTTASK)
            {
                cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
                success = SUCCESS;
            }
        }
        _atomic_end(_atomic);
    }
    if (success == SUCCESS)
    {
        cc2420radiom_SplitControl_start();
    }
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_StdControl_start(void)
{
    result_t success = FAIL;

    {
        _atomic_t _atomic = _atomic_start();

        {
            if (cc2420radiom_stateRadio == cc2420radiom_DISABLED_STATE)
            {
                if (postTask(cc2420radiom_startRadio, 5))
                {
                    success = SUCCESS;
                    cc2420radiom_stateRadio =
                        cc2420radiom_DISABLED_STATE_STARTTASK;
                }
            }
        }
        _atomic_end(_atomic);
    }
    return success;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_default_startDone(void)
{
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	08 95       	ret

00001a0e <cc2420radiom_SplitControl_startDone>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_startDone(void)
{
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	08 95       	ret

00001a12 <cc2420radiom_SplitControl_initDone>:
    unsigned char result;

    result = cc2420radiom_SplitControl_default_startDone();
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture(bool arg_0xa41e260)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_enableCapture(arg_0xa41e260);
    return result;
}

//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd(uint8_t arg_0xa403928)
{
    unsigned char result;

    result = HPLCC2420M_HPLCC2420_cmd(arg_0xa403928);
    return result;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_sendPacket(void)
{
    uint8_t status;

    cc2420radiom_HPLChipcon_cmd(0x05);
    status = cc2420radiom_HPLChipcon_cmd(0x00);
    if ((status >> 3) & 0x01)
    {
        cc2420radiom_SFD_enableCapture(TRUE);
    }
    else
    {
        cc2420radiom_sendFailed();
    }
}

//-------------------------------------------------------------------------
inline void cc2420radiom_tryToSend(void)
{
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();

        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_PRE_TX_STATE)
    {
        if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
        {
            cc2420radiom_flushRXFIFO();
        }
        if (LITE_READ_RADIO_CCA_PIN())
        {
            {
                _atomic_t _atomic = _atomic_start();

                cc2420radiom_stateRadio = cc2420radiom_TX_STATE;
                _atomic_end(_atomic);
            }
            cc2420radiom_sendPacket();
        }
    }
    else
    {
        cc2420radiom_flushRXFIFO();
    }
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_HPLChipconFIFO_TXFIFODone(uint8_t length,
                                                       uint8_t * data)
{
    cc2420radiom_tryToSend();
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_HPLChipconFIFO_writeTXFIFO(uint8_t arg_0xa40c010,
                                                        uint8_t *
                                                        arg_0xa40c170)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO(arg_0xa40c010,
                                                      arg_0xa40c170);
    return result;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_startSend(void)
{
    if (!cc2420radiom_HPLChipcon_cmd(0x09))
    {
        cc2420radiom_sendFailed();
        return;
    }
    if (!cc2420radiom_HPLChipconFIFO_writeTXFIFO(cc2420radiom_txlength + 1,
                                                 (uint8_t *)
                                                 cc2420radiom_txbufptr))
    {
        cc2420radiom_sendFailed();
        return;
    }
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_Send_send(Radio_MsgPtr pMsg)
{
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();

        currentstate = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (currentstate == cc2420radiom_IDLE_STATE)
    {
        pMsg->fcflo = 0x08;
        if (cc2420radiom_bAckEnable)
        {
            pMsg->fcfhi = 0x21;
        }
        else
        {
            pMsg->fcfhi = 0x01;
        }
        pMsg->destpan = BCAST_ADDRESS;
        //don't understand why it has to be LSB. Must check later. 
        pMsg->addr = toLSB16(pMsg->addr);
        //The length now includes both the 
        pMsg->length = pMsg->length + MSG_HEADER_SIZE + MSG_FOOTER_SIZE;
        pMsg->dsn = ++cc2420radiom_currentDSN;
        pMsg->time = 0;
        cc2420radiom_txlength = pMsg->length - MSG_FOOTER_SIZE;
        cc2420radiom_txbufptr = pMsg;
        cc2420radiom_countRetry = 8;
        {
            _atomic_t _atomic = _atomic_start();

            cc2420radiom_stateRadio = cc2420radiom_PRE_TX_STATE;
            _atomic_end(_atomic);
        }
        if (!postTask(cc2420radiom_startSend, 5))
        {
            cc2420radiom_sendFailed();
        }
        return SUCCESS;
    }
    return FAIL;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait(bool arg_0xa422588)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_startWait(arg_0xa422588);
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420Control_RxMode(void)
{
    unsigned char result;

    result = cc2420controlm_CC2420Control_RxMode();
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_startDone(void)
{
    uint8_t chkstateRadio;

    {
        _atomic_t _atomic = _atomic_start();

        chkstateRadio = cc2420radiom_stateRadio;
        _atomic_end(_atomic);
    }
    if (chkstateRadio == cc2420radiom_WARMUP_STATE)
    {
        cc2420radiom_CC2420Control_RxMode();
        cc2420radiom_FIFOP_startWait(FALSE);
        cc2420radiom_SFD_enableCapture(TRUE);
        {
            _atomic_t _atomic = _atomic_start();

            cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
            _atomic_end(_atomic);
        }
    }
    cc2420radiom_SplitControl_startDone();
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read(uint8_t arg_0xa4103b0)
{
    unsigned int result;

    result = HPLCC2420M_HPLCC2420_read(arg_0xa4103b0);
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_FIFOP_disable();
    return result;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_delayedRXFIFOtask(void)
{
    cc2420radiom_delayedRXFIFO();
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_fired(void)
{
    if (!LITE_READ_CC_FIFO_PIN())
    {
        cc2420radiom_flushRXFIFO();
        return SUCCESS;
    }
    {
        _atomic_t _atomic = _atomic_start();

        {
            if (postTask(cc2420radiom_delayedRXFIFOtask, 5))
            {
                cc2420radiom_FIFOP_disable();
            }
            else
            {
                cc2420radiom_flushRXFIFO();
            }
        }
        _atomic_end(_atomic);
    }
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline Radio_MsgPtr cc2420radiom_Receive_receive(Radio_MsgPtr arg_0xa31b650)
{
    struct Radio_Msg *result;

    result = AMStandard_RadioReceive_receive(arg_0xa31b650);
    return result;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_PacketRcvd(void)
{
    Radio_MsgPtr pBuf;

    {
        _atomic_t _atomic = _atomic_start();

        {
            pBuf = cc2420radiom_rxbufptr;
        } _atomic_end(_atomic);
    }
    pBuf = cc2420radiom_Receive_receive((Radio_MsgPtr) pBuf);
    {
        _atomic_t _atomic = _atomic_start();

        {
            if (pBuf)
            {
                cc2420radiom_rxbufptr = pBuf;
            }
            cc2420radiom_rxbufptr->length = 0;
            cc2420radiom_bPacketReceiving = FALSE;
        }
        _atomic_end(_atomic);
    }
}

//ALL THE DATA IN LENGTH IS THE CORRECT FRAME 
inline result_t cc2420radiom_HPLChipconFIFO_RXFIFODone(uint8_t length,
                                                       uint8_t * data)
{
    //The data now contains the full packet, starting with a packet length which is the remaining part of the packet, not including itself
    //The length, however, includes everything 
    uint8_t currentstate;

    {
        _atomic_t _atomic = _atomic_start();

        {
            currentstate = cc2420radiom_stateRadio;
        }
        _atomic_end(_atomic);
    }
    if (((!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN()) || length
         == 0) || length > MSG_DATA_SIZE)
    {
        cc2420radiom_flushRXFIFO();
        {
            _atomic_t _atomic = _atomic_start();

            cc2420radiom_bPacketReceiving = FALSE;
            _atomic_end(_atomic);
        }
        return SUCCESS;
    }
    cc2420radiom_rxbufptr = (Radio_MsgPtr) data;
    if ((cc2420radiom_rxbufptr->fcfhi & 0x07) != 0x01
        || cc2420radiom_rxbufptr->fcflo != 0x08)
    {
        cc2420radiom_flushRXFIFO();
        {
            _atomic_t _atomic = _atomic_start();

            cc2420radiom_bPacketReceiving = FALSE;
            _atomic_end(_atomic);
        }
        return SUCCESS;
    }
    //Now modifies the length such that it only points to the actual payload defined by the user 
    cc2420radiom_rxbufptr->length = cc2420radiom_rxbufptr->length -
        MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    //Revised by Qing, from 29 to PAYLOAD_LENGTH 
    if (cc2420radiom_rxbufptr->length > PAYLOAD_LENGTH)
    {
        cc2420radiom_flushRXFIFO();
        {
            _atomic_t _atomic = _atomic_start();

            cc2420radiom_bPacketReceiving = FALSE;
            _atomic_end(_atomic);
        }
        return SUCCESS;
    }
    cc2420radiom_rxbufptr->addr = fromLSB16(cc2420radiom_rxbufptr->addr);
    //CRC and LQI share the information 
    cc2420radiom_rxbufptr->crc = data[length - 1] >> 7;
    cc2420radiom_rxbufptr->strength = data[length - 2];
    cc2420radiom_rxbufptr->lqi = data[length - 1] & 0x7F;
    {
        _atomic_t _atomic = _atomic_start();

        {
            if (!postTask(cc2420radiom_PacketRcvd, 5))
            {
                cc2420radiom_bPacketReceiving = FALSE;
            }
        }
        _atomic_end(_atomic);
    }
    if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    {
        cc2420radiom_flushRXFIFO();
        return SUCCESS;
    }
    if (!LITE_READ_CC_FIFOP_PIN())
    {
        if (postTask(cc2420radiom_delayedRXFIFOtask, 5))
        {
            return SUCCESS;
        }
    }
    cc2420radiom_flushRXFIFO();
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_HPLChipconFIFO_readRXFIFO(uint8_t arg_0xa4118a0,
                                                       uint8_t * arg_0xa411a00)
{
    unsigned char result;

    result = hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(arg_0xa4118a0,
                                                     arg_0xa411a00);
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_Send_sendDone(Radio_MsgPtr arg_0xa3c3710,
                                           result_t arg_0xa3c3860)
{
    unsigned char result;

    result = AMStandard_RadioSend_sendDone(arg_0xa3c3710, arg_0xa3c3860);
    return result;
}

//-------------------------------------------------------------------------
inline void cc2420radiom_PacketSent(void)
{
    Radio_MsgPtr pBuf;

    {
        _atomic_t _atomic = _atomic_start();

        {
            cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
            pBuf = cc2420radiom_txbufptr;
            pBuf->length = pBuf->length - MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
        }
        _atomic_end(_atomic);
    }
    cc2420radiom_Send_sendDone(pBuf, SUCCESS);
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_disable(void)
{
    unsigned char result;

    result = hplcc2420interruptm_SFD_disable();
    return result;
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_captured(uint16_t time)
{
    switch (cc2420radiom_stateRadio)
    {
    case cc2420radiom_TX_STATE:
        cc2420radiom_SFD_enableCapture(FALSE);
        if (!LITE_READ_CC_SFD_PIN())
        {
            cc2420radiom_SFD_disable();
        }
        else
        {
            cc2420radiom_stateRadio = cc2420radiom_TX_WAIT;
        }
        cc2420radiom_txbufptr->time = time;
        if (cc2420radiom_stateRadio == cc2420radiom_TX_WAIT)
        {
            break;
        }
    case cc2420radiom_TX_WAIT:
        cc2420radiom_stateRadio = cc2420radiom_POST_TX_STATE;
        cc2420radiom_SFD_disable();
        cc2420radiom_SFD_enableCapture(TRUE);
        if (!postTask(cc2420radiom_PacketSent, 5))
        {
            cc2420radiom_sendFailed();
        }
        break;
    default:
        ;
    }
    return SUCCESS;
}

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed(void)
{
    {
        _atomic_t _atomic = _atomic_start();

        cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
        _atomic_end(_atomic);
    }
    cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length -
        MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    cc2420radiom_Send_sendDone(cc2420radiom_txbufptr, FAIL);
}

//-------------------------------------------------------------------------
void cc2420radiom_flushRXFIFO(void)
{
    cc2420radiom_FIFOP_disable();
    cc2420radiom_HPLChipcon_read(0x3F);
    cc2420radiom_HPLChipcon_cmd(0x08);
    cc2420radiom_HPLChipcon_cmd(0x08);
    {
        _atomic_t _atomic = _atomic_start();

        cc2420radiom_bPacketReceiving = FALSE;
        _atomic_end(_atomic);
    }
    cc2420radiom_FIFOP_startWait(FALSE);
}

//-------------------------------------------------------------------------
void cc2420radiom_delayedRXFIFO(void)
{
    //The MSG_DATA_SIZE is defined such that it contains the total length of data plus 2 bytes of the RSSI and LQI 
    uint8_t len = MSG_DATA_SIZE;
    uint8_t _bPacketReceiving;

    if (!LITE_READ_CC_FIFO_PIN() && !LITE_READ_CC_FIFOP_PIN())
    {
        cc2420radiom_flushRXFIFO();
        return;
    }
    {
        _atomic_t _atomic = _atomic_start();

        {
            _bPacketReceiving = cc2420radiom_bPacketReceiving;
            if (_bPacketReceiving)
            {
                if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
                {
                    cc2420radiom_flushRXFIFO();
                }
            }
            else
            {
                cc2420radiom_bPacketReceiving = TRUE;
            }
        }
        _atomic_end(_atomic);
    }
    //Now read the RX to get the data 
    if (!_bPacketReceiving)
    {
        if (!cc2420radiom_HPLChipconFIFO_readRXFIFO(len, (uint8_t *)
                                                    cc2420radiom_rxbufptr))
        {
            {
                _atomic_t _atomic = _atomic_start();

                cc2420radiom_bPacketReceiving = FALSE;
                _atomic_end(_atomic);
            }
            if (!postTask(cc2420radiom_delayedRXFIFOtask, 5))
            {
                cc2420radiom_flushRXFIFO();
            }
            return;
        }
    }
    cc2420radiom_flushRXFIFO();
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_initDone(void)
{
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	08 95       	ret

00001a16 <restorecc2420state>:
    unsigned char result;

    result = cc2420radiom_SplitControl_default_initDone();
    return result;
}

//-------------------------------------------------------------------------
inline void restorecc2420state()
{
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	80 93 eb 04 	sts	0x04EB, r24
    cc2420radiom_stateRadio = 2;
}
    1a1c:	08 95       	ret

00001a1e <cc2420radiom_StdControl_start>:
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1a26:	08 2f       	mov	r16, r24
    1a28:	80 91 eb 04 	lds	r24, 0x04EB
    1a2c:	88 23       	and	r24, r24
    1a2e:	41 f0       	breq	.+16     	; 0x1a40 <cc2420radiom_StdControl_start+0x22>
    1a30:	10 e0       	ldi	r17, 0x00	; 0
    1a32:	80 2f       	mov	r24, r16
    1a34:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1a38:	81 2f       	mov	r24, r17
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret
    1a40:	86 ec       	ldi	r24, 0xC6	; 198
    1a42:	9e e0       	ldi	r25, 0x0E	; 14
    1a44:	65 e0       	ldi	r22, 0x05	; 5
    1a46:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    1a4a:	88 23       	and	r24, r24
    1a4c:	89 f3       	breq	.-30     	; 0x1a30 <cc2420radiom_StdControl_start+0x12>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	80 93 eb 04 	sts	0x04EB, r24
    1a54:	11 e0       	ldi	r17, 0x01	; 1
    1a56:	80 2f       	mov	r24, r16
    1a58:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1a5c:	81 2f       	mov	r24, r17
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	08 95       	ret

00001a64 <cc2420radiom_SFD_disable>:
    1a64:	0e 94 68 12 	call	0x24d0	; 0x24d0 <hplcc2420interruptm_SFD_disable>
    1a68:	08 95       	ret

00001a6a <cc2420radiom_Send_sendDone>:
    1a6a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <AMStandard_RadioSend_sendDone>
    1a6e:	08 95       	ret

00001a70 <cc2420radiom_sendFailed>:
    1a70:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1a74:	92 e0       	ldi	r25, 0x02	; 2
    1a76:	90 93 eb 04 	sts	0x04EB, r25
    1a7a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1a7e:	e0 91 e9 04 	lds	r30, 0x04E9
    1a82:	f0 91 ea 04 	lds	r31, 0x04EA
    1a86:	80 81       	ld	r24, Z
    1a88:	8b 50       	subi	r24, 0x0B	; 11
    1a8a:	80 83       	st	Z, r24
    1a8c:	cf 01       	movw	r24, r30
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	0e 94 7d 08 	call	0x10fa	; 0x10fa <AMStandard_RadioSend_sendDone>
    1a94:	08 95       	ret

00001a96 <cc2420radiom_PacketSent>:
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1a9e:	92 e0       	ldi	r25, 0x02	; 2
    1aa0:	90 93 eb 04 	sts	0x04EB, r25
    1aa4:	00 91 e9 04 	lds	r16, 0x04E9
    1aa8:	10 91 ea 04 	lds	r17, 0x04EA
    1aac:	f8 01       	movw	r30, r16
    1aae:	90 81       	ld	r25, Z
    1ab0:	9b 50       	subi	r25, 0x0B	; 11
    1ab2:	90 83       	st	Z, r25
    1ab4:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1ab8:	c8 01       	movw	r24, r16
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	0e 94 7d 08 	call	0x10fa	; 0x10fa <AMStandard_RadioSend_sendDone>
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	08 95       	ret

00001ac6 <cc2420radiom_HPLChipconFIFO_readRXFIFO>:
    1ac6:	0e 94 4a 11 	call	0x2294	; 0x2294 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
    1aca:	08 95       	ret

00001acc <cc2420radiom_Receive_receive>:
    1acc:	0e 94 2c 09 	call	0x1258	; 0x1258 <AMStandard_RadioReceive_receive>
    1ad0:	08 95       	ret

00001ad2 <cc2420radiom_PacketRcvd>:
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1ade:	00 91 6d 04 	lds	r16, 0x046D
    1ae2:	10 91 6e 04 	lds	r17, 0x046E
    1ae6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1aea:	c8 01       	movw	r24, r16
    1aec:	0e 94 2c 09 	call	0x1258	; 0x1258 <AMStandard_RadioReceive_receive>
    1af0:	ec 01       	movw	r28, r24
    1af2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1af6:	20 97       	sbiw	r28, 0x00	; 0
    1af8:	21 f0       	breq	.+8      	; 0x1b02 <cc2420radiom_PacketRcvd+0x30>
    1afa:	d0 93 6e 04 	sts	0x046E, r29
    1afe:	c0 93 6d 04 	sts	0x046D, r28
    1b02:	e0 91 6d 04 	lds	r30, 0x046D
    1b06:	f0 91 6e 04 	lds	r31, 0x046E
    1b0a:	10 82       	st	Z, r1
    1b0c:	10 92 70 04 	sts	0x0470, r1
    1b10:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	08 95       	ret

00001b1e <cc2420radiom_FIFOP_disable>:
    1b1e:	0e 94 56 12 	call	0x24ac	; 0x24ac <hplcc2420interruptm_FIFOP_disable>
    1b22:	08 95       	ret

00001b24 <cc2420radiom_HPLChipcon_read>:
    1b24:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    1b28:	08 95       	ret

00001b2a <cc2420radiom_CC2420Control_RxMode>:
    1b2a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <cc2420controlm_CC2420Control_RxMode>
    1b2e:	08 95       	ret

00001b30 <cc2420radiom_FIFOP_startWait>:
    1b30:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <hplcc2420interruptm_FIFOP_startWait>
    1b34:	08 95       	ret

00001b36 <cc2420radiom_HPLChipconFIFO_writeTXFIFO>:
    1b36:	0e 94 c2 11 	call	0x2384	; 0x2384 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>
    1b3a:	08 95       	ret

00001b3c <cc2420radiom_HPLChipcon_cmd>:
    1b3c:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1b40:	08 95       	ret

00001b42 <cc2420radiom_flushRXFIFO>:
    1b42:	0e 94 56 12 	call	0x24ac	; 0x24ac <hplcc2420interruptm_FIFOP_disable>
    1b46:	8f e3       	ldi	r24, 0x3F	; 63
    1b48:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    1b4c:	88 e0       	ldi	r24, 0x08	; 8
    1b4e:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1b52:	88 e0       	ldi	r24, 0x08	; 8
    1b54:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1b58:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1b5c:	10 92 70 04 	sts	0x0470, r1
    1b60:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <hplcc2420interruptm_FIFOP_startWait>
    1b6a:	08 95       	ret

00001b6c <cc2420radiom_SFD_enableCapture>:
    1b6c:	0e 94 84 12 	call	0x2508	; 0x2508 <hplcc2420interruptm_SFD_enableCapture>
    1b70:	08 95       	ret

00001b72 <cc2420radiom_CC2420SplitControl_startDone>:
    1b72:	1f 93       	push	r17
    1b74:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1b78:	10 91 eb 04 	lds	r17, 0x04EB
    1b7c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1b80:	1a 30       	cpi	r17, 0x0A	; 10
    1b82:	19 f0       	breq	.+6      	; 0x1b8a <cc2420radiom_CC2420SplitControl_startDone+0x18>
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	1f 91       	pop	r17
    1b88:	08 95       	ret
    1b8a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <cc2420controlm_CC2420Control_RxMode>
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <hplcc2420interruptm_FIFOP_startWait>
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	0e 94 84 12 	call	0x2508	; 0x2508 <hplcc2420interruptm_SFD_enableCapture>
    1b9a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1b9e:	92 e0       	ldi	r25, 0x02	; 2
    1ba0:	90 93 eb 04 	sts	0x04EB, r25
    1ba4:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	1f 91       	pop	r17
    1bac:	08 95       	ret

00001bae <cc2420radiom_CC2420SplitControl_start>:
    1bae:	0e 94 9e 0b 	call	0x173c	; 0x173c <cc2420controlm_SplitControl_start>
    1bb2:	08 95       	ret

00001bb4 <cc2420radiom_SplitControl_start>:
    1bb4:	1f 93       	push	r17
    1bb6:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1bba:	10 91 eb 04 	lds	r17, 0x04EB
    1bbe:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1bc2:	11 23       	and	r17, r17
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <cc2420radiom_SplitControl_start+0x18>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	1f 91       	pop	r17
    1bca:	08 95       	ret
    1bcc:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1bd0:	9a e0       	ldi	r25, 0x0A	; 10
    1bd2:	90 93 eb 04 	sts	0x04EB, r25
    1bd6:	10 92 e6 04 	sts	0x04E6, r1
    1bda:	e0 91 6d 04 	lds	r30, 0x046D
    1bde:	f0 91 6e 04 	lds	r31, 0x046E
    1be2:	10 82       	st	Z, r1
    1be4:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1be8:	0e 94 9e 0b 	call	0x173c	; 0x173c <cc2420controlm_SplitControl_start>
    1bec:	1f 91       	pop	r17
    1bee:	08 95       	ret

00001bf0 <cc2420radiom_SplitControl_init>:
    1bf0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1bf4:	10 92 eb 04 	sts	0x04EB, r1
    1bf8:	10 92 6f 04 	sts	0x046F, r1
    1bfc:	10 92 e5 04 	sts	0x04E5, r1
    1c00:	10 92 70 04 	sts	0x0470, r1
    1c04:	21 e7       	ldi	r18, 0x71	; 113
    1c06:	34 e0       	ldi	r19, 0x04	; 4
    1c08:	30 93 6e 04 	sts	0x046E, r19
    1c0c:	20 93 6d 04 	sts	0x046D, r18
    1c10:	10 92 71 04 	sts	0x0471, r1
    1c14:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1c18:	80 91 f6 03 	lds	r24, 0x03F6
    1c1c:	90 91 f7 03 	lds	r25, 0x03F7
    1c20:	90 93 e8 04 	sts	0x04E8, r25
    1c24:	80 93 e7 04 	sts	0x04E7, r24
    1c28:	0e 94 cd 0b 	call	0x179a	; 0x179a <cc2420controlm_SplitControl_init>
    1c2c:	08 95       	ret

00001c2e <cc2420radiom_sendPacket>:
    1c2e:	85 e0       	ldi	r24, 0x05	; 5
    1c30:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1c3a:	86 95       	lsr	r24
    1c3c:	86 95       	lsr	r24
    1c3e:	86 95       	lsr	r24
    1c40:	80 fd       	sbrc	r24, 0
    1c42:	13 c0       	rjmp	.+38     	; 0x1c6a <cc2420radiom_sendPacket+0x3c>
    1c44:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1c48:	92 e0       	ldi	r25, 0x02	; 2
    1c4a:	90 93 eb 04 	sts	0x04EB, r25
    1c4e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1c52:	e0 91 e9 04 	lds	r30, 0x04E9
    1c56:	f0 91 ea 04 	lds	r31, 0x04EA
    1c5a:	80 81       	ld	r24, Z
    1c5c:	8b 50       	subi	r24, 0x0B	; 11
    1c5e:	80 83       	st	Z, r24
    1c60:	cf 01       	movw	r24, r30
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	0e 94 7d 08 	call	0x10fa	; 0x10fa <AMStandard_RadioSend_sendDone>
    1c68:	08 95       	ret
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	0e 94 84 12 	call	0x2508	; 0x2508 <hplcc2420interruptm_SFD_enableCapture>
    1c70:	08 95       	ret

00001c72 <cc2420radiom_SFD_captured>:
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	ec 01       	movw	r28, r24
    1c78:	80 91 eb 04 	lds	r24, 0x04EB
    1c7c:	83 30       	cpi	r24, 0x03	; 3
    1c7e:	c9 f1       	breq	.+114    	; 0x1cf2 <cc2420radiom_SFD_captured+0x80>
    1c80:	84 30       	cpi	r24, 0x04	; 4
    1c82:	91 f0       	breq	.+36     	; 0x1ca8 <cc2420radiom_SFD_captured+0x36>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret
    1c8c:	0e 94 68 12 	call	0x24d0	; 0x24d0 <hplcc2420interruptm_SFD_disable>
    1c90:	e0 91 e9 04 	lds	r30, 0x04E9
    1c94:	f0 91 ea 04 	lds	r31, 0x04EA
    1c98:	ee 58       	subi	r30, 0x8E	; 142
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	d1 83       	std	Z+1, r29	; 0x01
    1c9e:	c0 83       	st	Z, r28
    1ca0:	80 91 eb 04 	lds	r24, 0x04EB
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	71 f3       	breq	.-36     	; 0x1c84 <cc2420radiom_SFD_captured+0x12>
    1ca8:	86 e0       	ldi	r24, 0x06	; 6
    1caa:	80 93 eb 04 	sts	0x04EB, r24
    1cae:	0e 94 68 12 	call	0x24d0	; 0x24d0 <hplcc2420interruptm_SFD_disable>
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	0e 94 84 12 	call	0x2508	; 0x2508 <hplcc2420interruptm_SFD_enableCapture>
    1cb8:	8b e4       	ldi	r24, 0x4B	; 75
    1cba:	9d e0       	ldi	r25, 0x0D	; 13
    1cbc:	65 e0       	ldi	r22, 0x05	; 5
    1cbe:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    1cc2:	88 23       	and	r24, r24
    1cc4:	f9 f6       	brne	.-66     	; 0x1c84 <cc2420radiom_SFD_captured+0x12>
    1cc6:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1cca:	92 e0       	ldi	r25, 0x02	; 2
    1ccc:	90 93 eb 04 	sts	0x04EB, r25
    1cd0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1cd4:	e0 91 e9 04 	lds	r30, 0x04E9
    1cd8:	f0 91 ea 04 	lds	r31, 0x04EA
    1cdc:	80 81       	ld	r24, Z
    1cde:	8b 50       	subi	r24, 0x0B	; 11
    1ce0:	80 83       	st	Z, r24
    1ce2:	cf 01       	movw	r24, r30
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <AMStandard_RadioSend_sendDone>
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	08 95       	ret
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	0e 94 84 12 	call	0x2508	; 0x2508 <hplcc2420interruptm_SFD_enableCapture>
    1cf8:	0e 94 9a 05 	call	0xb34	; 0xb34 <LITE_READ_CC_SFD_PIN>
    1cfc:	89 2b       	or	r24, r25
    1cfe:	31 f2       	breq	.-116    	; 0x1c8c <cc2420radiom_SFD_captured+0x1a>
    1d00:	84 e0       	ldi	r24, 0x04	; 4
    1d02:	80 93 eb 04 	sts	0x04EB, r24
    1d06:	e0 91 e9 04 	lds	r30, 0x04E9
    1d0a:	f0 91 ea 04 	lds	r31, 0x04EA
    1d0e:	ee 58       	subi	r30, 0x8E	; 142
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	d1 83       	std	Z+1, r29	; 0x01
    1d14:	c0 83       	st	Z, r28
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	08 95       	ret

00001d1e <cc2420radiom_startSend>:
    1d1e:	89 e0       	ldi	r24, 0x09	; 9
    1d20:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1d24:	88 23       	and	r24, r24
    1d26:	61 f0       	breq	.+24     	; 0x1d40 <cc2420radiom_startSend+0x22>
    1d28:	80 91 ec 04 	lds	r24, 0x04EC
    1d2c:	60 91 e9 04 	lds	r22, 0x04E9
    1d30:	70 91 ea 04 	lds	r23, 0x04EA
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	0e 94 c2 11 	call	0x2384	; 0x2384 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>
    1d3a:	88 23       	and	r24, r24
    1d3c:	a1 f0       	breq	.+40     	; 0x1d66 <cc2420radiom_startSend+0x48>
    1d3e:	08 95       	ret
    1d40:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1d44:	92 e0       	ldi	r25, 0x02	; 2
    1d46:	90 93 eb 04 	sts	0x04EB, r25
    1d4a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1d4e:	e0 91 e9 04 	lds	r30, 0x04E9
    1d52:	f0 91 ea 04 	lds	r31, 0x04EA
    1d56:	80 81       	ld	r24, Z
    1d58:	8b 50       	subi	r24, 0x0B	; 11
    1d5a:	80 83       	st	Z, r24
    1d5c:	cf 01       	movw	r24, r30
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	0e 94 7d 08 	call	0x10fa	; 0x10fa <AMStandard_RadioSend_sendDone>
    1d64:	08 95       	ret
    1d66:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1d6a:	92 e0       	ldi	r25, 0x02	; 2
    1d6c:	90 93 eb 04 	sts	0x04EB, r25
    1d70:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1d74:	e0 91 e9 04 	lds	r30, 0x04E9
    1d78:	f0 91 ea 04 	lds	r31, 0x04EA
    1d7c:	80 81       	ld	r24, Z
    1d7e:	8b 50       	subi	r24, 0x0B	; 11
    1d80:	80 83       	st	Z, r24
    1d82:	cf 01       	movw	r24, r30
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	0e 94 7d 08 	call	0x10fa	; 0x10fa <AMStandard_RadioSend_sendDone>
    1d8a:	08 95       	ret

00001d8c <cc2420radiom_startRadio>:
    1d8c:	1f 93       	push	r17
    1d8e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1d92:	98 2f       	mov	r25, r24
    1d94:	80 91 eb 04 	lds	r24, 0x04EB
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	29 f0       	breq	.+10     	; 0x1da6 <cc2420radiom_startRadio+0x1a>
    1d9c:	89 2f       	mov	r24, r25
    1d9e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1da2:	1f 91       	pop	r17
    1da4:	08 95       	ret
    1da6:	10 92 eb 04 	sts	0x04EB, r1
    1daa:	89 2f       	mov	r24, r25
    1dac:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1db0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1db4:	10 91 eb 04 	lds	r17, 0x04EB
    1db8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1dbc:	11 23       	and	r17, r17
    1dbe:	89 f7       	brne	.-30     	; 0x1da2 <cc2420radiom_startRadio+0x16>
    1dc0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1dc4:	9a e0       	ldi	r25, 0x0A	; 10
    1dc6:	90 93 eb 04 	sts	0x04EB, r25
    1dca:	10 92 e6 04 	sts	0x04E6, r1
    1dce:	e0 91 6d 04 	lds	r30, 0x046D
    1dd2:	f0 91 6e 04 	lds	r31, 0x046E
    1dd6:	10 82       	st	Z, r1
    1dd8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1ddc:	0e 94 9e 0b 	call	0x173c	; 0x173c <cc2420controlm_SplitControl_start>
    1de0:	e0 cf       	rjmp	.-64     	; 0x1da2 <cc2420radiom_startRadio+0x16>

00001de2 <cc2420radiom_Send_send>:
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	ec 01       	movw	r28, r24
    1dea:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1dee:	10 91 eb 04 	lds	r17, 0x04EB
    1df2:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1df6:	12 30       	cpi	r17, 0x02	; 2
    1df8:	29 f0       	breq	.+10     	; 0x1e04 <cc2420radiom_Send_send+0x22>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	08 95       	ret
    1e04:	88 e0       	ldi	r24, 0x08	; 8
    1e06:	8a 83       	std	Y+2, r24	; 0x02
    1e08:	80 91 e5 04 	lds	r24, 0x04E5
    1e0c:	88 23       	and	r24, r24
    1e0e:	c9 f5       	brne	.+114    	; 0x1e82 <cc2420radiom_Send_send+0xa0>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	8f ef       	ldi	r24, 0xFF	; 255
    1e16:	9f ef       	ldi	r25, 0xFF	; 255
    1e18:	9d 83       	std	Y+5, r25	; 0x05
    1e1a:	8c 83       	std	Y+4, r24	; 0x04
    1e1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e20:	0e 94 49 3a 	call	0x7492	; 0x7492 <toLSB16>
    1e24:	9f 83       	std	Y+7, r25	; 0x07
    1e26:	8e 83       	std	Y+6, r24	; 0x06
    1e28:	88 81       	ld	r24, Y
    1e2a:	85 5f       	subi	r24, 0xF5	; 245
    1e2c:	88 83       	st	Y, r24
    1e2e:	80 91 6f 04 	lds	r24, 0x046F
    1e32:	8f 5f       	subi	r24, 0xFF	; 255
    1e34:	80 93 6f 04 	sts	0x046F, r24
    1e38:	8b 83       	std	Y+3, r24	; 0x03
    1e3a:	ce 58       	subi	r28, 0x8E	; 142
    1e3c:	df 4f       	sbci	r29, 0xFF	; 255
    1e3e:	19 82       	std	Y+1, r1	; 0x01
    1e40:	18 82       	st	Y, r1
    1e42:	c2 57       	subi	r28, 0x72	; 114
    1e44:	d0 40       	sbci	r29, 0x00	; 0
    1e46:	88 81       	ld	r24, Y
    1e48:	82 50       	subi	r24, 0x02	; 2
    1e4a:	80 93 ec 04 	sts	0x04EC, r24
    1e4e:	d0 93 ea 04 	sts	0x04EA, r29
    1e52:	c0 93 e9 04 	sts	0x04E9, r28
    1e56:	88 e0       	ldi	r24, 0x08	; 8
    1e58:	80 93 e6 04 	sts	0x04E6, r24
    1e5c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1e60:	95 e0       	ldi	r25, 0x05	; 5
    1e62:	90 93 eb 04 	sts	0x04EB, r25
    1e66:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1e6a:	8f e8       	ldi	r24, 0x8F	; 143
    1e6c:	9e e0       	ldi	r25, 0x0E	; 14
    1e6e:	65 e0       	ldi	r22, 0x05	; 5
    1e70:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    1e74:	88 23       	and	r24, r24
    1e76:	41 f0       	breq	.+16     	; 0x1e88 <cc2420radiom_Send_send+0xa6>
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	08 95       	ret
    1e82:	81 e2       	ldi	r24, 0x21	; 33
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	c6 cf       	rjmp	.-116    	; 0x1e14 <cc2420radiom_Send_send+0x32>
    1e88:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1e8c:	92 e0       	ldi	r25, 0x02	; 2
    1e8e:	90 93 eb 04 	sts	0x04EB, r25
    1e92:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1e96:	e0 91 e9 04 	lds	r30, 0x04E9
    1e9a:	f0 91 ea 04 	lds	r31, 0x04EA
    1e9e:	80 81       	ld	r24, Z
    1ea0:	8b 50       	subi	r24, 0x0B	; 11
    1ea2:	80 83       	st	Z, r24
    1ea4:	cf 01       	movw	r24, r30
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <AMStandard_RadioSend_sendDone>
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	e5 cf       	rjmp	.-54     	; 0x1e7a <cc2420radiom_Send_send+0x98>

00001eb0 <cc2420radiom_tryToSend>:
    1eb0:	1f 93       	push	r17
    1eb2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1eb6:	10 91 eb 04 	lds	r17, 0x04EB
    1eba:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1ebe:	15 30       	cpi	r17, 0x05	; 5
    1ec0:	b1 f0       	breq	.+44     	; 0x1eee <cc2420radiom_tryToSend+0x3e>
    1ec2:	0e 94 56 12 	call	0x24ac	; 0x24ac <hplcc2420interruptm_FIFOP_disable>
    1ec6:	8f e3       	ldi	r24, 0x3F	; 63
    1ec8:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    1ecc:	88 e0       	ldi	r24, 0x08	; 8
    1ece:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1ed2:	88 e0       	ldi	r24, 0x08	; 8
    1ed4:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1ed8:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1edc:	10 92 70 04 	sts	0x0470, r1
    1ee0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <hplcc2420interruptm_FIFOP_startWait>
    1eea:	1f 91       	pop	r17
    1eec:	08 95       	ret
    1eee:	0e 94 bc 05 	call	0xb78	; 0xb78 <LITE_READ_CC_FIFO_PIN>
    1ef2:	89 2b       	or	r24, r25
    1ef4:	71 f0       	breq	.+28     	; 0x1f12 <cc2420radiom_tryToSend+0x62>
    1ef6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LITE_READ_RADIO_CCA_PIN>
    1efa:	89 2b       	or	r24, r25
    1efc:	b1 f3       	breq	.-20     	; 0x1eea <cc2420radiom_tryToSend+0x3a>
    1efe:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1f02:	93 e0       	ldi	r25, 0x03	; 3
    1f04:	90 93 eb 04 	sts	0x04EB, r25
    1f08:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1f0c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <cc2420radiom_sendPacket>
    1f10:	ec cf       	rjmp	.-40     	; 0x1eea <cc2420radiom_tryToSend+0x3a>
    1f12:	0e 94 55 05 	call	0xaaa	; 0xaaa <LITE_READ_CC_FIFOP_PIN>
    1f16:	89 2b       	or	r24, r25
    1f18:	71 f7       	brne	.-36     	; 0x1ef6 <cc2420radiom_tryToSend+0x46>
    1f1a:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <cc2420radiom_flushRXFIFO>
    1f1e:	eb cf       	rjmp	.-42     	; 0x1ef6 <cc2420radiom_tryToSend+0x46>

00001f20 <cc2420radiom_HPLChipconFIFO_TXFIFODone>:
    1f20:	1f 93       	push	r17
    1f22:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1f26:	10 91 eb 04 	lds	r17, 0x04EB
    1f2a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1f2e:	15 30       	cpi	r17, 0x05	; 5
    1f30:	b9 f0       	breq	.+46     	; 0x1f60 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x40>
    1f32:	0e 94 56 12 	call	0x24ac	; 0x24ac <hplcc2420interruptm_FIFOP_disable>
    1f36:	8f e3       	ldi	r24, 0x3F	; 63
    1f38:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    1f3c:	88 e0       	ldi	r24, 0x08	; 8
    1f3e:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1f42:	88 e0       	ldi	r24, 0x08	; 8
    1f44:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1f48:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1f4c:	10 92 70 04 	sts	0x0470, r1
    1f50:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <hplcc2420interruptm_FIFOP_startWait>
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	1f 91       	pop	r17
    1f5e:	08 95       	ret
    1f60:	0e 94 bc 05 	call	0xb78	; 0xb78 <LITE_READ_CC_FIFO_PIN>
    1f64:	89 2b       	or	r24, r25
    1f66:	71 f0       	breq	.+28     	; 0x1f84 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x64>
    1f68:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LITE_READ_RADIO_CCA_PIN>
    1f6c:	89 2b       	or	r24, r25
    1f6e:	a9 f3       	breq	.-22     	; 0x1f5a <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x3a>
    1f70:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1f74:	93 e0       	ldi	r25, 0x03	; 3
    1f76:	90 93 eb 04 	sts	0x04EB, r25
    1f7a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1f7e:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <cc2420radiom_sendPacket>
    1f82:	eb cf       	rjmp	.-42     	; 0x1f5a <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x3a>
    1f84:	0e 94 55 05 	call	0xaaa	; 0xaaa <LITE_READ_CC_FIFOP_PIN>
    1f88:	89 2b       	or	r24, r25
    1f8a:	71 f7       	brne	.-36     	; 0x1f68 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x48>
    1f8c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <cc2420radiom_flushRXFIFO>
    1f90:	eb cf       	rjmp	.-42     	; 0x1f68 <cc2420radiom_HPLChipconFIFO_TXFIFODone+0x48>

00001f92 <cc2420radiom_FIFOP_fired>:
    1f92:	1f 93       	push	r17
    1f94:	0e 94 bc 05 	call	0xb78	; 0xb78 <LITE_READ_CC_FIFO_PIN>
    1f98:	89 2b       	or	r24, r25
    1f9a:	39 f1       	breq	.+78     	; 0x1fea <cc2420radiom_FIFOP_fired+0x58>
    1f9c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1fa0:	18 2f       	mov	r17, r24
    1fa2:	87 ef       	ldi	r24, 0xF7	; 247
    1fa4:	90 e1       	ldi	r25, 0x10	; 16
    1fa6:	65 e0       	ldi	r22, 0x05	; 5
    1fa8:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    1fac:	88 23       	and	r24, r24
    1fae:	d1 f4       	brne	.+52     	; 0x1fe4 <cc2420radiom_FIFOP_fired+0x52>
    1fb0:	0e 94 56 12 	call	0x24ac	; 0x24ac <hplcc2420interruptm_FIFOP_disable>
    1fb4:	8f e3       	ldi	r24, 0x3F	; 63
    1fb6:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    1fba:	88 e0       	ldi	r24, 0x08	; 8
    1fbc:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1fc0:	88 e0       	ldi	r24, 0x08	; 8
    1fc2:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1fc6:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    1fca:	10 92 70 04 	sts	0x0470, r1
    1fce:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <hplcc2420interruptm_FIFOP_startWait>
    1fd8:	81 2f       	mov	r24, r17
    1fda:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	1f 91       	pop	r17
    1fe2:	08 95       	ret
    1fe4:	0e 94 56 12 	call	0x24ac	; 0x24ac <hplcc2420interruptm_FIFOP_disable>
    1fe8:	f7 cf       	rjmp	.-18     	; 0x1fd8 <cc2420radiom_FIFOP_fired+0x46>
    1fea:	0e 94 56 12 	call	0x24ac	; 0x24ac <hplcc2420interruptm_FIFOP_disable>
    1fee:	8f e3       	ldi	r24, 0x3F	; 63
    1ff0:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    1ff4:	88 e0       	ldi	r24, 0x08	; 8
    1ff6:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    1ffa:	88 e0       	ldi	r24, 0x08	; 8
    1ffc:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    2000:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2004:	10 92 70 04 	sts	0x0470, r1
    2008:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <hplcc2420interruptm_FIFOP_startWait>
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	1f 91       	pop	r17
    2016:	08 95       	ret

00002018 <cc2420radiom_HPLChipconFIFO_RXFIFODone>:
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	18 2f       	mov	r17, r24
    2020:	eb 01       	movw	r28, r22
    2022:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2026:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    202a:	0e 94 bc 05 	call	0xb78	; 0xb78 <LITE_READ_CC_FIFO_PIN>
    202e:	89 2b       	or	r24, r25
    2030:	71 f1       	breq	.+92     	; 0x208e <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x76>
    2032:	11 23       	and	r17, r17
    2034:	69 f0       	breq	.+26     	; 0x2050 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
    2036:	11 37       	cpi	r17, 0x71	; 113
    2038:	58 f4       	brcc	.+22     	; 0x2050 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
    203a:	d0 93 6e 04 	sts	0x046E, r29
    203e:	c0 93 6d 04 	sts	0x046D, r28
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	87 70       	andi	r24, 0x07	; 7
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	19 f4       	brne	.+6      	; 0x2050 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	88 30       	cpi	r24, 0x08	; 8
    204e:	21 f1       	breq	.+72     	; 0x2098 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x80>
    2050:	0e 94 56 12 	call	0x24ac	; 0x24ac <hplcc2420interruptm_FIFOP_disable>
    2054:	8f e3       	ldi	r24, 0x3F	; 63
    2056:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    205a:	88 e0       	ldi	r24, 0x08	; 8
    205c:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    2060:	88 e0       	ldi	r24, 0x08	; 8
    2062:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    2066:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    206a:	10 92 70 04 	sts	0x0470, r1
    206e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <hplcc2420interruptm_FIFOP_startWait>
    2078:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    207c:	10 92 70 04 	sts	0x0470, r1
    2080:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	08 95       	ret
    208e:	0e 94 55 05 	call	0xaaa	; 0xaaa <LITE_READ_CC_FIFOP_PIN>
    2092:	89 2b       	or	r24, r25
    2094:	71 f6       	brne	.-100    	; 0x2032 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1a>
    2096:	dc cf       	rjmp	.-72     	; 0x2050 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x38>
    2098:	88 81       	ld	r24, Y
    209a:	8b 50       	subi	r24, 0x0B	; 11
    209c:	88 83       	st	Y, r24
    209e:	85 36       	cpi	r24, 0x65	; 101
    20a0:	08 f0       	brcs	.+2      	; 0x20a4 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x8c>
    20a2:	49 c0       	rjmp	.+146    	; 0x2136 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x11e>
    20a4:	8e 81       	ldd	r24, Y+6	; 0x06
    20a6:	9f 81       	ldd	r25, Y+7	; 0x07
    20a8:	0e 94 5f 3a 	call	0x74be	; 0x74be <fromLSB16>
    20ac:	9f 83       	std	Y+7, r25	; 0x07
    20ae:	8e 83       	std	Y+6, r24	; 0x06
    20b0:	e0 91 6d 04 	lds	r30, 0x046D
    20b4:	f0 91 6e 04 	lds	r31, 0x046E
    20b8:	21 2f       	mov	r18, r17
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	21 50       	subi	r18, 0x01	; 1
    20be:	30 40       	sbci	r19, 0x00	; 0
    20c0:	de 01       	movw	r26, r28
    20c2:	a2 0f       	add	r26, r18
    20c4:	b3 1f       	adc	r27, r19
    20c6:	2f 5f       	subi	r18, 0xFF	; 255
    20c8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ca:	e0 59       	subi	r30, 0x90	; 144
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	8c 91       	ld	r24, X
    20d0:	88 1f       	adc	r24, r24
    20d2:	88 27       	eor	r24, r24
    20d4:	88 1f       	adc	r24, r24
    20d6:	80 83       	st	Z, r24
    20d8:	32 97       	sbiw	r30, 0x02	; 2
    20da:	c2 0f       	add	r28, r18
    20dc:	d3 1f       	adc	r29, r19
    20de:	22 97       	sbiw	r28, 0x02	; 2
    20e0:	88 81       	ld	r24, Y
    20e2:	81 93       	st	Z+, r24
    20e4:	8c 91       	ld	r24, X
    20e6:	8f 77       	andi	r24, 0x7F	; 127
    20e8:	80 83       	st	Z, r24
    20ea:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    20ee:	18 2f       	mov	r17, r24
    20f0:	89 e6       	ldi	r24, 0x69	; 105
    20f2:	9d e0       	ldi	r25, 0x0D	; 13
    20f4:	65 e0       	ldi	r22, 0x05	; 5
    20f6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    20fa:	88 23       	and	r24, r24
    20fc:	11 f4       	brne	.+4      	; 0x2102 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0xea>
    20fe:	10 92 70 04 	sts	0x0470, r1
    2102:	81 2f       	mov	r24, r17
    2104:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2108:	0e 94 bc 05 	call	0xb78	; 0xb78 <LITE_READ_CC_FIFO_PIN>
    210c:	89 2b       	or	r24, r25
    210e:	21 f4       	brne	.+8      	; 0x2118 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x100>
    2110:	0e 94 55 05 	call	0xaaa	; 0xaaa <LITE_READ_CC_FIFOP_PIN>
    2114:	89 2b       	or	r24, r25
    2116:	61 f0       	breq	.+24     	; 0x2130 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x118>
    2118:	0e 94 55 05 	call	0xaaa	; 0xaaa <LITE_READ_CC_FIFOP_PIN>
    211c:	89 2b       	or	r24, r25
    211e:	41 f4       	brne	.+16     	; 0x2130 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x118>
    2120:	87 ef       	ldi	r24, 0xF7	; 247
    2122:	90 e1       	ldi	r25, 0x10	; 16
    2124:	65 e0       	ldi	r22, 0x05	; 5
    2126:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    212a:	88 23       	and	r24, r24
    212c:	09 f0       	breq	.+2      	; 0x2130 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x118>
    212e:	aa cf       	rjmp	.-172    	; 0x2084 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x6c>
    2130:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <cc2420radiom_flushRXFIFO>
    2134:	a7 cf       	rjmp	.-178    	; 0x2084 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x6c>
    2136:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <cc2420radiom_flushRXFIFO>
    213a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    213e:	10 92 70 04 	sts	0x0470, r1
    2142:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2146:	9e cf       	rjmp	.-196    	; 0x2084 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x6c>

00002148 <cc2420radiom_delayedRXFIFO>:
    2148:	1f 93       	push	r17
    214a:	0e 94 bc 05 	call	0xb78	; 0xb78 <LITE_READ_CC_FIFO_PIN>
    214e:	89 2b       	or	r24, r25
    2150:	21 f4       	brne	.+8      	; 0x215a <cc2420radiom_delayedRXFIFO+0x12>
    2152:	0e 94 55 05 	call	0xaaa	; 0xaaa <LITE_READ_CC_FIFOP_PIN>
    2156:	89 2b       	or	r24, r25
    2158:	b1 f0       	breq	.+44     	; 0x2186 <cc2420radiom_delayedRXFIFO+0x3e>
    215a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    215e:	18 2f       	mov	r17, r24
    2160:	80 91 70 04 	lds	r24, 0x0470
    2164:	88 23       	and	r24, r24
    2166:	29 f5       	brne	.+74     	; 0x21b2 <cc2420radiom_delayedRXFIFO+0x6a>
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	80 93 70 04 	sts	0x0470, r24
    216e:	81 2f       	mov	r24, r17
    2170:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2174:	60 91 6d 04 	lds	r22, 0x046D
    2178:	70 91 6e 04 	lds	r23, 0x046E
    217c:	80 e7       	ldi	r24, 0x70	; 112
    217e:	0e 94 4a 11 	call	0x2294	; 0x2294 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
    2182:	88 23       	and	r24, r24
    2184:	09 f1       	breq	.+66     	; 0x21c8 <cc2420radiom_delayedRXFIFO+0x80>
    2186:	0e 94 56 12 	call	0x24ac	; 0x24ac <hplcc2420interruptm_FIFOP_disable>
    218a:	8f e3       	ldi	r24, 0x3F	; 63
    218c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    2190:	88 e0       	ldi	r24, 0x08	; 8
    2192:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    2196:	88 e0       	ldi	r24, 0x08	; 8
    2198:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    219c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    21a0:	10 92 70 04 	sts	0x0470, r1
    21a4:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <hplcc2420interruptm_FIFOP_startWait>
    21ae:	1f 91       	pop	r17
    21b0:	08 95       	ret
    21b2:	87 ef       	ldi	r24, 0xF7	; 247
    21b4:	90 e1       	ldi	r25, 0x10	; 16
    21b6:	65 e0       	ldi	r22, 0x05	; 5
    21b8:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    21bc:	88 23       	and	r24, r24
    21be:	a1 f0       	breq	.+40     	; 0x21e8 <cc2420radiom_delayedRXFIFO+0xa0>
    21c0:	81 2f       	mov	r24, r17
    21c2:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    21c6:	df cf       	rjmp	.-66     	; 0x2186 <cc2420radiom_delayedRXFIFO+0x3e>
    21c8:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    21cc:	10 92 70 04 	sts	0x0470, r1
    21d0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    21d4:	87 ef       	ldi	r24, 0xF7	; 247
    21d6:	90 e1       	ldi	r25, 0x10	; 16
    21d8:	65 e0       	ldi	r22, 0x05	; 5
    21da:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    21de:	88 23       	and	r24, r24
    21e0:	31 f7       	brne	.-52     	; 0x21ae <cc2420radiom_delayedRXFIFO+0x66>
    21e2:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <cc2420radiom_flushRXFIFO>
    21e6:	e3 cf       	rjmp	.-58     	; 0x21ae <cc2420radiom_delayedRXFIFO+0x66>
    21e8:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <cc2420radiom_flushRXFIFO>
    21ec:	e9 cf       	rjmp	.-46     	; 0x21c0 <cc2420radiom_delayedRXFIFO+0x78>

000021ee <cc2420radiom_delayedRXFIFOtask>:
    21ee:	1f 93       	push	r17
    21f0:	0e 94 bc 05 	call	0xb78	; 0xb78 <LITE_READ_CC_FIFO_PIN>
    21f4:	89 2b       	or	r24, r25
    21f6:	21 f4       	brne	.+8      	; 0x2200 <cc2420radiom_delayedRXFIFOtask+0x12>
    21f8:	0e 94 55 05 	call	0xaaa	; 0xaaa <LITE_READ_CC_FIFOP_PIN>
    21fc:	89 2b       	or	r24, r25
    21fe:	b1 f0       	breq	.+44     	; 0x222c <cc2420radiom_delayedRXFIFOtask+0x3e>
    2200:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2204:	18 2f       	mov	r17, r24
    2206:	80 91 70 04 	lds	r24, 0x0470
    220a:	88 23       	and	r24, r24
    220c:	29 f5       	brne	.+74     	; 0x2258 <cc2420radiom_delayedRXFIFOtask+0x6a>
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	80 93 70 04 	sts	0x0470, r24
    2214:	81 2f       	mov	r24, r17
    2216:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    221a:	60 91 6d 04 	lds	r22, 0x046D
    221e:	70 91 6e 04 	lds	r23, 0x046E
    2222:	80 e7       	ldi	r24, 0x70	; 112
    2224:	0e 94 4a 11 	call	0x2294	; 0x2294 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
    2228:	88 23       	and	r24, r24
    222a:	09 f1       	breq	.+66     	; 0x226e <cc2420radiom_delayedRXFIFOtask+0x80>
    222c:	0e 94 56 12 	call	0x24ac	; 0x24ac <hplcc2420interruptm_FIFOP_disable>
    2230:	8f e3       	ldi	r24, 0x3F	; 63
    2232:	0e 94 70 13 	call	0x26e0	; 0x26e0 <HPLCC2420M_HPLCC2420_read>
    2236:	88 e0       	ldi	r24, 0x08	; 8
    2238:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    223c:	88 e0       	ldi	r24, 0x08	; 8
    223e:	0e 94 9c 13 	call	0x2738	; 0x2738 <HPLCC2420M_HPLCC2420_cmd>
    2242:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2246:	10 92 70 04 	sts	0x0470, r1
    224a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <hplcc2420interruptm_FIFOP_startWait>
    2254:	1f 91       	pop	r17
    2256:	08 95       	ret
    2258:	87 ef       	ldi	r24, 0xF7	; 247
    225a:	90 e1       	ldi	r25, 0x10	; 16
    225c:	65 e0       	ldi	r22, 0x05	; 5
    225e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    2262:	88 23       	and	r24, r24
    2264:	a1 f0       	breq	.+40     	; 0x228e <cc2420radiom_delayedRXFIFOtask+0xa0>
    2266:	81 2f       	mov	r24, r17
    2268:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    226c:	df cf       	rjmp	.-66     	; 0x222c <cc2420radiom_delayedRXFIFOtask+0x3e>
    226e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2272:	10 92 70 04 	sts	0x0470, r1
    2276:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    227a:	87 ef       	ldi	r24, 0xF7	; 247
    227c:	90 e1       	ldi	r25, 0x10	; 16
    227e:	65 e0       	ldi	r22, 0x05	; 5
    2280:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    2284:	88 23       	and	r24, r24
    2286:	31 f7       	brne	.-52     	; 0x2254 <cc2420radiom_delayedRXFIFOtask+0x66>
    2288:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <cc2420radiom_flushRXFIFO>
    228c:	e3 cf       	rjmp	.-58     	; 0x2254 <cc2420radiom_delayedRXFIFOtask+0x66>
    228e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <cc2420radiom_flushRXFIFO>
    2292:	e9 cf       	rjmp	.-46     	; 0x2266 <cc2420radiom_delayedRXFIFOtask+0x78>

00002294 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>:
    //Seems that the transmitted len is the actual length over the air 
    //The first number in the frame is the remaining part 
    result_t hplcc2420fifom_HPLCC2420FIFO_readRXFIFO(uint8_t len,
                                                     uint8_t * msg)
{
    2294:	0f 93       	push	r16
    2296:	1f 93       	push	r17
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	18 2f       	mov	r17, r24
    229e:	eb 01       	movw	r28, r22
    uint8_t status;
    uint8_t i;
    bool returnFail = FALSE;

    {
        _atomic_t _atomic = _atomic_start();
    22a0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    22a4:	98 2f       	mov	r25, r24

        {
            if (hplcc2420fifom_rxbufBusy)
    22a6:	80 91 f4 04 	lds	r24, 0x04F4
    22aa:	88 23       	and	r24, r24
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x1c>
    22ae:	55 c0       	rjmp	.+170    	; 0x235a <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xc6>
            {
                returnFail = TRUE;
            }
            else
            {
                hplcc2420fifom_rxbufBusy = TRUE;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	80 93 f4 04 	sts	0x04F4, r24
            }
        }
        _atomic_end(_atomic);
    22b6:	89 2f       	mov	r24, r25
    22b8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    }
    if (returnFail)
    {
        return FAIL;
    }
    {
        _atomic_t _atomic = _atomic_start();
    22bc:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    22c0:	08 2f       	mov	r16, r24

        {
            hplcc2420fifom_bSpiAvail = FALSE;
    22c2:	10 92 ee 04 	sts	0x04EE, r1
            hplcc2420fifom_rxbuf = msg;
    22c6:	d0 93 f0 04 	sts	0x04F0, r29
    22ca:	c0 93 ef 04 	sts	0x04EF, r28
            LITE_CLR_CC_CS_PIN();
    22ce:	0e 94 ac 05 	call	0xb58	; 0xb58 <LITE_CLR_CC_CS_PIN>
            outp(CC2420_RXFIFO | 0x40, SPDR);   //output Rxfifo address
    22d2:	8f e7       	ldi	r24, 0x7F	; 127
    22d4:	8f b9       	out	0x0f, r24	; 15
            while (!(inp(SPSR) & 0x80))
    22d6:	77 9b       	sbis	0x0e, 7	; 14
    22d8:	fe cf       	rjmp	.-4      	; 0x22d6 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x42>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    22da:	8f b1       	in	r24, 0x0f	; 15
            outp(0, SPDR);
    22dc:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    22de:	77 9b       	sbis	0x0e, 7	; 14
    22e0:	fe cf       	rjmp	.-4      	; 0x22de <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x4a>
            {
            }
            ;                   //wait for spi xfr to complete
            hplcc2420fifom_rxlength = inp(SPDR);
    22e2:	8f b1       	in	r24, 0x0f	; 15
    22e4:	80 93 f5 04 	sts	0x04F5, r24
            //My revise
            //The first byte, however, only contains a part of the whole, which needs to add 1 to mean that it is the total to be read 
            //and this also defaults to len, which is the MSG_DATA_SIZE
            if (hplcc2420fifom_rxlength > 0)
    22e8:	88 23       	and	r24, r24
    22ea:	11 f1       	breq	.+68     	; 0x2330 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x9c>
            {
                hplcc2420fifom_rxbuf[0] = hplcc2420fifom_rxlength;
    22ec:	e0 91 ef 04 	lds	r30, 0x04EF
    22f0:	f0 91 f0 04 	lds	r31, 0x04F0
    22f4:	80 83       	st	Z, r24
                hplcc2420fifom_rxlength++;
    22f6:	80 91 f5 04 	lds	r24, 0x04F5
    22fa:	8f 5f       	subi	r24, 0xFF	; 255
    22fc:	80 93 f5 04 	sts	0x04F5, r24
                if (hplcc2420fifom_rxlength > len)
    2300:	18 17       	cp	r17, r24
    2302:	18 f4       	brcc	.+6      	; 0x230a <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x76>
                {
                    hplcc2420fifom_rxlength = len;
    2304:	10 93 f5 04 	sts	0x04F5, r17
    2308:	81 2f       	mov	r24, r17
                }
                for (i = 1; i < hplcc2420fifom_rxlength; i++)
    230a:	82 30       	cpi	r24, 0x02	; 2
    230c:	88 f0       	brcs	.+34     	; 0x2330 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x9c>
    230e:	91 e0       	ldi	r25, 0x01	; 1
                {
                    outp(0, SPDR);
    2310:	1f b8       	out	0x0f, r1	; 15
                    while (!(inp(SPSR) & 0x80))
    2312:	77 9b       	sbis	0x0e, 7	; 14
    2314:	fe cf       	rjmp	.-4      	; 0x2312 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x7e>
                    {
                    }
                    ;           //wait for spi xfr to complete
                    hplcc2420fifom_rxbuf[i] = inp(SPDR);
    2316:	8f b1       	in	r24, 0x0f	; 15
    2318:	e0 91 ef 04 	lds	r30, 0x04EF
    231c:	f0 91 f0 04 	lds	r31, 0x04F0
    2320:	e9 0f       	add	r30, r25
    2322:	f1 1d       	adc	r31, r1
    2324:	80 83       	st	Z, r24
    2326:	9f 5f       	subi	r25, 0xFF	; 255
    2328:	80 91 f5 04 	lds	r24, 0x04F5
    232c:	98 17       	cp	r25, r24
    232e:	80 f3       	brcs	.-32     	; 0x2310 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x7c>
                }
            }
            hplcc2420fifom_bSpiAvail = TRUE;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	80 93 ee 04 	sts	0x04EE, r24
        }
        _atomic_end(_atomic);
    2336:	80 2f       	mov	r24, r16
    2338:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    }
    LITE_SET_CC_CS_PIN();
    233c:	0e 94 aa 05 	call	0xb54	; 0xb54 <LITE_SET_CC_CS_PIN>
    if (postTask(hplcc2420fifom_signalRXdone, 5) == FAIL)
    2340:	85 e2       	ldi	r24, 0x25	; 37
    2342:	92 e1       	ldi	r25, 0x12	; 18
    2344:	65 e0       	ldi	r22, 0x05	; 5
    2346:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    234a:	88 23       	and	r24, r24
    234c:	79 f0       	breq	.+30     	; 0x236c <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xd8>
    234e:	81 e0       	ldi	r24, 0x01	; 1
    {
        {
            _atomic_t _atomic = _atomic_start();

            hplcc2420fifom_rxbufBusy = FALSE;
            _atomic_end(_atomic);
        }
        return FAIL;
    }
    return SUCCESS;
}
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	08 95       	ret
    235a:	89 2f       	mov	r24, r25
    235c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	1f 91       	pop	r17
    2368:	0f 91       	pop	r16
    236a:	08 95       	ret
    236c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2370:	10 92 f4 04 	sts	0x04F4, r1
    2374:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	08 95       	ret

00002384 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>:
    2384:	0f 93       	push	r16
    2386:	1f 93       	push	r17
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	18 2f       	mov	r17, r24
    238e:	eb 01       	movw	r28, r22
    2390:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2394:	98 2f       	mov	r25, r24
    2396:	80 91 f1 04 	lds	r24, 0x04F1
    239a:	88 23       	and	r24, r24
    239c:	09 f0       	breq	.+2      	; 0x23a0 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x1c>
    239e:	48 c0       	rjmp	.+144    	; 0x2430 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0xac>
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	80 93 f1 04 	sts	0x04F1, r24
    23a6:	89 2f       	mov	r24, r25
    23a8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    23ac:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    23b0:	08 2f       	mov	r16, r24
    23b2:	10 92 ee 04 	sts	0x04EE, r1
    23b6:	10 93 ed 04 	sts	0x04ED, r17
    23ba:	d0 93 f3 04 	sts	0x04F3, r29
    23be:	c0 93 f2 04 	sts	0x04F2, r28
    23c2:	0e 94 ac 05 	call	0xb58	; 0xb58 <LITE_CLR_CC_CS_PIN>
    23c6:	8e e3       	ldi	r24, 0x3E	; 62
    23c8:	8f b9       	out	0x0f, r24	; 15
    23ca:	77 9b       	sbis	0x0e, 7	; 14
    23cc:	fe cf       	rjmp	.-4      	; 0x23ca <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x46>
    23ce:	1f b1       	in	r17, 0x0f	; 15
    23d0:	20 91 ed 04 	lds	r18, 0x04ED
    23d4:	22 23       	and	r18, r18
    23d6:	81 f0       	breq	.+32     	; 0x23f8 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x74>
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	e0 91 f2 04 	lds	r30, 0x04F2
    23de:	f0 91 f3 04 	lds	r31, 0x04F3
    23e2:	81 91       	ld	r24, Z+
    23e4:	8f b9       	out	0x0f, r24	; 15
    23e6:	f0 93 f3 04 	sts	0x04F3, r31
    23ea:	e0 93 f2 04 	sts	0x04F2, r30
    23ee:	77 9b       	sbis	0x0e, 7	; 14
    23f0:	fe cf       	rjmp	.-4      	; 0x23ee <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x6a>
    23f2:	9f 5f       	subi	r25, 0xFF	; 255
    23f4:	92 17       	cp	r25, r18
    23f6:	a8 f3       	brcs	.-22     	; 0x23e2 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x5e>
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	80 93 ee 04 	sts	0x04EE, r24
    23fe:	80 2f       	mov	r24, r16
    2400:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2404:	0e 94 aa 05 	call	0xb54	; 0xb54 <LITE_SET_CC_CS_PIN>
    2408:	8f e3       	ldi	r24, 0x3F	; 63
    240a:	92 e1       	ldi	r25, 0x12	; 18
    240c:	65 e0       	ldi	r22, 0x05	; 5
    240e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    2412:	88 23       	and	r24, r24
    2414:	89 f4       	brne	.+34     	; 0x2438 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0xb4>
    2416:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    241a:	10 92 f1 04 	sts	0x04F1, r1
    241e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2422:	10 e0       	ldi	r17, 0x00	; 0
    2424:	81 2f       	mov	r24, r17
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	1f 91       	pop	r17
    242c:	0f 91       	pop	r16
    242e:	08 95       	ret
    2430:	89 2f       	mov	r24, r25
    2432:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2436:	10 e0       	ldi	r17, 0x00	; 0
    2438:	81 2f       	mov	r24, r17
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	08 95       	ret

00002444 <hplcc2420fifom_HPLCC2420FIFO_RXFIFODone>:
    2444:	0e 94 0c 10 	call	0x2018	; 0x2018 <cc2420radiom_HPLChipconFIFO_RXFIFODone>
    2448:	08 95       	ret

0000244a <hplcc2420fifom_signalRXdone>:
    244a:	ff 92       	push	r15
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2454:	f0 90 f5 04 	lds	r15, 0x04F5
    2458:	00 91 ef 04 	lds	r16, 0x04EF
    245c:	10 91 f0 04 	lds	r17, 0x04F0
    2460:	10 92 f4 04 	sts	0x04F4, r1
    2464:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2468:	8f 2d       	mov	r24, r15
    246a:	b8 01       	movw	r22, r16
    246c:	0e 94 0c 10 	call	0x2018	; 0x2018 <cc2420radiom_HPLChipconFIFO_RXFIFODone>
    2470:	1f 91       	pop	r17
    2472:	0f 91       	pop	r16
    2474:	ff 90       	pop	r15
    2476:	08 95       	ret

00002478 <hplcc2420fifom_HPLCC2420FIFO_TXFIFODone>:
    2478:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <cc2420radiom_HPLChipconFIFO_TXFIFODone>
    247c:	08 95       	ret

0000247e <hplcc2420fifom_signalTXdone>:
    247e:	ff 92       	push	r15
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2488:	f0 90 ed 04 	lds	r15, 0x04ED
    248c:	00 91 f2 04 	lds	r16, 0x04F2
    2490:	10 91 f3 04 	lds	r17, 0x04F3
    2494:	10 92 f1 04 	sts	0x04F1, r1
    2498:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    249c:	8f 2d       	mov	r24, r15
    249e:	b8 01       	movw	r22, r16
    24a0:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <cc2420radiom_HPLChipconFIFO_TXFIFODone>
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	ff 90       	pop	r15
    24aa:	08 95       	ret

000024ac <hplcc2420interruptm_FIFOP_disable>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_disable(void)
{
    24ac:	89 b7       	in	r24, 0x39	; 57
    24ae:	8f 7b       	andi	r24, 0xBF	; 191
    24b0:	89 bf       	out	0x39, r24	; 57
    *(volatile unsigned char *)(unsigned int)&*(volatile unsigned char *)(0x39
                                                                          +
                                                                          0x20)
        &= ~(1 << 6);
    return SUCCESS;
}
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	08 95       	ret

000024b6 <hplcc2420interruptm_FIFO_default_fired>:

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_fired(void)
{
    unsigned char result;

    result = cc2420radiom_FIFOP_fired();
    return result;
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOTimer_start(char arg_0xa315138,
                                                    uint32_t arg_0xa315290)
{
    unsigned char result;

    result = GenericTimerStart(10, arg_0xa315138, arg_0xa315290);
    return result;
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFO_default_fired(void)
{
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	08 95       	ret

000024ba <hplcc2420interruptm_FIFO_fired>:
    return FAIL;
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFO_fired(void)
{
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	08 95       	ret

000024be <hplcc2420interruptm_SFDCapture_isOverflowPending>:
    unsigned char result;

    result = hplcc2420interruptm_FIFO_default_fired();
    return result;
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOTimer_fired(void)
{
    uint8_t FIFOState;
    result_t val = SUCCESS;

    FIFOState = LITE_READ_CC_FIFO_PIN();
    if (hplcc2420interruptm_FIFOLastState !=
        hplcc2420interruptm_FIFOWaitForState && FIFOState ==
        hplcc2420interruptm_FIFOWaitForState)
    {
        val = hplcc2420interruptm_FIFO_fired();
        if (val == FAIL)
        {
            return SUCCESS;
        }
    }
    hplcc2420interruptm_FIFOLastState = FIFOState;
    return hplcc2420interruptm_FIFOTimer_start(TIMER_ONE_SHOT, 1);
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_fired(void)
{
    unsigned char result;

    result = cc2420controlm_CCA_fired();
    return result;
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCATimer_fired(void)
{
    uint8_t CCAState;
    result_t val = SUCCESS;

    CCAState = LITE_READ_CC_CCA_PIN();
    if (hplcc2420interruptm_CCALastState != hplcc2420interruptm_CCAWaitForState
        && CCAState == hplcc2420interruptm_CCAWaitForState)
    {
        val = hplcc2420interruptm_CCA_fired();
        if (val == FAIL)
        {
            return SUCCESS;
        }
    }
    hplcc2420interruptm_CCALastState = CCAState;
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_startWait(bool low_to_high)
{
    {
        _atomic_t _atomic = _atomic_start();

        hplcc2420interruptm_CCAWaitForState = low_to_high;
        _atomic_end(_atomic);
    }
    hplcc2420interruptm_CCALastState = LITE_READ_CC_CCA_PIN();
    return hplcc2420interruptm_CCATimer_start(TIMER_ONE_SHOT, 1);
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCATimer_start(char arg_0xa315138,
                                                   uint32_t arg_0xa315290)
{
    unsigned char result;

    result = GenericTimerStart(11, arg_0xa315138, arg_0xa315290);
    return result;
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_enableEvents(void)
{
    HPLTimer1M_CaptureT1_enableEvents();
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_clearOverflow(void)
{
    HPLTimer1M_CaptureT1_clearOverflow();
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_setEdge(uint8_t arg_0xa4c5e80)
{
    HPLTimer1M_CaptureT1_setEdge(arg_0xa4c5e80);
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents(void)
{
    HPLTimer1M_CaptureT1_disableEvents();
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_enableCapture(bool low_to_high)
{
    {
        _atomic_t _atomic = _atomic_start();

        {
            hplcc2420interruptm_SFDCapture_disableEvents();
            hplcc2420interruptm_SFDCapture_setEdge(low_to_high);
            hplcc2420interruptm_SFDCapture_clearOverflow();
            hplcc2420interruptm_SFDCapture_enableEvents();
        }
        _atomic_end(_atomic);
    }
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_disable(void)
{
    hplcc2420interruptm_SFDCapture_disableEvents();
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_captured(uint16_t arg_0xa41e788)
{
    unsigned char result;

    result = cc2420radiom_SFD_captured(arg_0xa41e788);
    return result;
}

//-------------------------------------------------------------------------
inline bool hplcc2420interruptm_SFDCapture_isOverflowPending(void)
{
    24be:	0e 94 8f 14 	call	0x291e	; 0x291e <HPLTimer1M_CaptureT1_isOverflowPending>
    unsigned char result;

    result = HPLTimer1M_CaptureT1_isOverflowPending();
    return result;
}
    24c2:	08 95       	ret

000024c4 <hplcc2420interruptm_SFD_captured>:
    24c4:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <cc2420radiom_SFD_captured>
    24c8:	08 95       	ret

000024ca <hplcc2420interruptm_SFDCapture_disableEvents>:
    24ca:	0e 94 84 14 	call	0x2908	; 0x2908 <HPLTimer1M_CaptureT1_disableEvents>
    24ce:	08 95       	ret

000024d0 <hplcc2420interruptm_SFD_disable>:
    24d0:	0e 94 84 14 	call	0x2908	; 0x2908 <HPLTimer1M_CaptureT1_disableEvents>
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	08 95       	ret

000024d8 <hplcc2420interruptm_SFDCapture_setEdge>:
    24d8:	0e 94 92 14 	call	0x2924	; 0x2924 <HPLTimer1M_CaptureT1_setEdge>
    24dc:	08 95       	ret

000024de <hplcc2420interruptm_SFDCapture_clearOverflow>:
    24de:	0e 94 80 14 	call	0x2900	; 0x2900 <HPLTimer1M_CaptureT1_clearOverflow>
    24e2:	08 95       	ret

000024e4 <hplcc2420interruptm_SFDCapture_captured>:

//-------------------------------------------------------------------------
void hplcc2420interruptm_SFDCapture_captured(uint16_t time)
{
    24e4:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <cc2420radiom_SFD_captured>
    result_t val = SUCCESS;

    val = hplcc2420interruptm_SFD_captured(time);
    if (val == FAIL)
    24e8:	88 23       	and	r24, r24
    24ea:	29 f0       	breq	.+10     	; 0x24f6 <hplcc2420interruptm_SFDCapture_captured+0x12>
    24ec:	0e 94 8f 14 	call	0x291e	; 0x291e <HPLTimer1M_CaptureT1_isOverflowPending>
    {
        hplcc2420interruptm_SFDCapture_disableEvents();
    }
    else
    {
        if (hplcc2420interruptm_SFDCapture_isOverflowPending())
    24f0:	88 23       	and	r24, r24
    24f2:	21 f4       	brne	.+8      	; 0x24fc <hplcc2420interruptm_SFDCapture_captured+0x18>
    24f4:	08 95       	ret
    24f6:	0e 94 84 14 	call	0x2908	; 0x2908 <HPLTimer1M_CaptureT1_disableEvents>
    24fa:	08 95       	ret
    24fc:	0e 94 80 14 	call	0x2900	; 0x2900 <HPLTimer1M_CaptureT1_clearOverflow>
    2500:	08 95       	ret

00002502 <hplcc2420interruptm_SFDCapture_enableEvents>:
    2502:	0e 94 76 14 	call	0x28ec	; 0x28ec <HPLTimer1M_CaptureT1_enableEvents>
    2506:	08 95       	ret

00002508 <hplcc2420interruptm_SFD_enableCapture>:
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	18 2f       	mov	r17, r24
    250e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2512:	08 2f       	mov	r16, r24
    2514:	0e 94 84 14 	call	0x2908	; 0x2908 <HPLTimer1M_CaptureT1_disableEvents>
    2518:	81 2f       	mov	r24, r17
    251a:	0e 94 92 14 	call	0x2924	; 0x2924 <HPLTimer1M_CaptureT1_setEdge>
    251e:	0e 94 80 14 	call	0x2900	; 0x2900 <HPLTimer1M_CaptureT1_clearOverflow>
    2522:	0e 94 76 14 	call	0x28ec	; 0x28ec <HPLTimer1M_CaptureT1_enableEvents>
    2526:	80 2f       	mov	r24, r16
    2528:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	08 95       	ret

00002534 <hplcc2420interruptm_CCATimer_start>:
    2534:	98 2f       	mov	r25, r24
    2536:	9a 01       	movw	r18, r20
    2538:	ab 01       	movw	r20, r22
    253a:	8b e0       	ldi	r24, 0x0B	; 11
    253c:	69 2f       	mov	r22, r25
    253e:	0e 94 d5 36 	call	0x6daa	; 0x6daa <GenericTimerStart>
    2542:	08 95       	ret

00002544 <hplcc2420interruptm_FIFOTimer_start>:
    2544:	98 2f       	mov	r25, r24
    2546:	9a 01       	movw	r18, r20
    2548:	ab 01       	movw	r20, r22
    254a:	8a e0       	ldi	r24, 0x0A	; 10
    254c:	69 2f       	mov	r22, r25
    254e:	0e 94 d5 36 	call	0x6daa	; 0x6daa <GenericTimerStart>
    2552:	08 95       	ret

00002554 <hplcc2420interruptm_CCA_startWait>:
    2554:	1f 93       	push	r17
    2556:	18 2f       	mov	r17, r24
    2558:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    255c:	10 93 ff 04 	sts	0x04FF, r17
    2560:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2564:	0e 94 83 05 	call	0xb06	; 0xb06 <LITE_READ_CC_CCA_PIN>
    2568:	80 93 fe 04 	sts	0x04FE, r24
    256c:	8b e0       	ldi	r24, 0x0B	; 11
    256e:	61 e0       	ldi	r22, 0x01	; 1
    2570:	21 e0       	ldi	r18, 0x01	; 1
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	0e 94 d5 36 	call	0x6daa	; 0x6daa <GenericTimerStart>
    257c:	1f 91       	pop	r17
    257e:	08 95       	ret

00002580 <hplcc2420interruptm_CCA_fired>:
    2580:	0e 94 a4 0a 	call	0x1548	; 0x1548 <cc2420controlm_CCA_fired>
    2584:	08 95       	ret

00002586 <hplcc2420interruptm_CCATimer_fired>:
    2586:	1f 93       	push	r17
    2588:	0e 94 83 05 	call	0xb06	; 0xb06 <LITE_READ_CC_CCA_PIN>
    258c:	18 2f       	mov	r17, r24
    258e:	90 91 ff 04 	lds	r25, 0x04FF
    2592:	80 91 fe 04 	lds	r24, 0x04FE
    2596:	89 17       	cp	r24, r25
    2598:	11 f0       	breq	.+4      	; 0x259e <hplcc2420interruptm_CCATimer_fired+0x18>
    259a:	19 17       	cp	r17, r25
    259c:	61 f0       	breq	.+24     	; 0x25b6 <hplcc2420interruptm_CCATimer_fired+0x30>
    259e:	10 93 fe 04 	sts	0x04FE, r17
    25a2:	8b e0       	ldi	r24, 0x0B	; 11
    25a4:	61 e0       	ldi	r22, 0x01	; 1
    25a6:	21 e0       	ldi	r18, 0x01	; 1
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	0e 94 d5 36 	call	0x6daa	; 0x6daa <GenericTimerStart>
    25b2:	1f 91       	pop	r17
    25b4:	08 95       	ret
    25b6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <cc2420controlm_CCA_fired>
    25ba:	88 23       	and	r24, r24
    25bc:	81 f7       	brne	.-32     	; 0x259e <hplcc2420interruptm_CCATimer_fired+0x18>
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	f8 cf       	rjmp	.-16     	; 0x25b2 <hplcc2420interruptm_CCATimer_fired+0x2c>

000025c2 <hplcc2420interruptm_FIFOTimer_fired>:
    25c2:	0e 94 bc 05 	call	0xb78	; 0xb78 <LITE_READ_CC_FIFO_PIN>
    25c6:	28 2f       	mov	r18, r24
    25c8:	90 91 f6 04 	lds	r25, 0x04F6
    25cc:	80 91 fd 04 	lds	r24, 0x04FD
    25d0:	89 17       	cp	r24, r25
    25d2:	11 f0       	breq	.+4      	; 0x25d8 <hplcc2420interruptm_FIFOTimer_fired+0x16>
    25d4:	29 17       	cp	r18, r25
    25d6:	59 f0       	breq	.+22     	; 0x25ee <hplcc2420interruptm_FIFOTimer_fired+0x2c>
    25d8:	20 93 fd 04 	sts	0x04FD, r18
    25dc:	8a e0       	ldi	r24, 0x0A	; 10
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	21 e0       	ldi	r18, 0x01	; 1
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e0       	ldi	r20, 0x00	; 0
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	0e 94 d5 36 	call	0x6daa	; 0x6daa <GenericTimerStart>
    25ec:	08 95       	ret
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	08 95       	ret

000025f2 <hplcc2420interruptm_FIFOP_fired>:
    25f2:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <cc2420radiom_FIFOP_fired>
    25f6:	08 95       	ret

000025f8 <hplcc2420interruptm_FIFOP_startWait>:
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	18 2f       	mov	r17, r24
    25fe:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2602:	08 2f       	mov	r16, r24
    2604:	81 2f       	mov	r24, r17
    2606:	0e 94 17 05 	call	0xa2e	; 0xa2e <CC2420_FIFOP_INT_MODE>
    260a:	89 b7       	in	r24, 0x39	; 57
    260c:	80 64       	ori	r24, 0x40	; 64
    260e:	89 bf       	out	0x39, r24	; 57
    2610:	80 2f       	mov	r24, r16
    2612:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	08 95       	ret

0000261e <__vector_7>:
    261e:	1f 92       	push	r1
    2620:	0f 92       	push	r0
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	0f 92       	push	r0
    2626:	0b b6       	in	r0, 0x3b	; 59
    2628:	0f 92       	push	r0
    262a:	11 24       	eor	r1, r1
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	2f 93       	push	r18
    2632:	3f 93       	push	r19
    2634:	4f 93       	push	r20
    2636:	5f 93       	push	r21
    2638:	6f 93       	push	r22
    263a:	7f 93       	push	r23
    263c:	8f 93       	push	r24
    263e:	9f 93       	push	r25
    2640:	af 93       	push	r26
    2642:	bf 93       	push	r27
    2644:	ef 93       	push	r30
    2646:	ff 93       	push	r31
    2648:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    264c:	18 2f       	mov	r17, r24
    264e:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <is_thread>
    2652:	88 23       	and	r24, r24
    2654:	b9 f5       	brne	.+110    	; 0x26c4 <__vector_7+0xa6>
    2656:	00 e0       	ldi	r16, 0x00	; 0
    2658:	81 2f       	mov	r24, r17
    265a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    265e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <cc2420radiom_FIFOP_fired>
    2662:	88 23       	and	r24, r24
    2664:	31 f4       	brne	.+12     	; 0x2672 <__vector_7+0x54>
    2666:	89 b7       	in	r24, 0x39	; 57
    2668:	8f 7b       	andi	r24, 0xBF	; 191
    266a:	89 bf       	out	0x39, r24	; 57
    266c:	88 b7       	in	r24, 0x38	; 56
    266e:	80 64       	ori	r24, 0x40	; 64
    2670:	88 bf       	out	0x38, r24	; 56
    2672:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2676:	28 2f       	mov	r18, r24
    2678:	01 30       	cpi	r16, 0x01	; 1
    267a:	61 f4       	brne	.+24     	; 0x2694 <__vector_7+0x76>
    267c:	8d b7       	in	r24, 0x3d	; 61
    267e:	9e b7       	in	r25, 0x3e	; 62
    2680:	90 93 4f 05 	sts	0x054F, r25
    2684:	80 93 4e 05 	sts	0x054E, r24
    2688:	80 91 a1 05 	lds	r24, 0x05A1
    268c:	90 91 a2 05 	lds	r25, 0x05A2
    2690:	9e bf       	out	0x3e, r25	; 62
    2692:	8d bf       	out	0x3d, r24	; 61
    2694:	82 2f       	mov	r24, r18
    2696:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    269a:	ff 91       	pop	r31
    269c:	ef 91       	pop	r30
    269e:	bf 91       	pop	r27
    26a0:	af 91       	pop	r26
    26a2:	9f 91       	pop	r25
    26a4:	8f 91       	pop	r24
    26a6:	7f 91       	pop	r23
    26a8:	6f 91       	pop	r22
    26aa:	5f 91       	pop	r21
    26ac:	4f 91       	pop	r20
    26ae:	3f 91       	pop	r19
    26b0:	2f 91       	pop	r18
    26b2:	1f 91       	pop	r17
    26b4:	0f 91       	pop	r16
    26b6:	0f 90       	pop	r0
    26b8:	0b be       	out	0x3b, r0	; 59
    26ba:	0f 90       	pop	r0
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	0f 90       	pop	r0
    26c0:	1f 90       	pop	r1
    26c2:	18 95       	reti
    26c4:	8d b7       	in	r24, 0x3d	; 61
    26c6:	9e b7       	in	r25, 0x3e	; 62
    26c8:	90 93 a2 05 	sts	0x05A2, r25
    26cc:	80 93 a1 05 	sts	0x05A1, r24
    26d0:	80 91 4e 05 	lds	r24, 0x054E
    26d4:	90 91 4f 05 	lds	r25, 0x054F
    26d8:	9e bf       	out	0x3e, r25	; 62
    26da:	8d bf       	out	0x3d, r24	; 61
    26dc:	01 e0       	ldi	r16, 0x01	; 1
    26de:	bc cf       	rjmp	.-136    	; 0x2658 <__vector_7+0x3a>

000026e0 <HPLCC2420M_HPLCC2420_read>:
}

//-------------------------------------------------------------------------
inline uint16_t HPLCC2420M_HPLCC2420_read(uint8_t addr)
{
    26e0:	ef 92       	push	r14
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	18 2f       	mov	r17, r24
    uint16_t data = 0;
    uint8_t status;

    {
        _atomic_t _atomic = _atomic_start();
    26ea:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    26ee:	f8 2e       	mov	r15, r24

        {
            HPLCC2420M_bSpiAvail = FALSE;
    26f0:	10 92 09 05 	sts	0x0509, r1
            LITE_CLR_CC_CS_PIN();       //enable chip select
    26f4:	0e 94 ac 05 	call	0xb58	; 0xb58 <LITE_CLR_CC_CS_PIN>
            outp(addr | 0x40, SPDR);
    26f8:	10 64       	ori	r17, 0x40	; 64
    26fa:	1f b9       	out	0x0f, r17	; 15
            while (!(inp(SPSR) & 0x80))
    26fc:	77 9b       	sbis	0x0e, 7	; 14
    26fe:	fe cf       	rjmp	.-4      	; 0x26fc <HPLCC2420M_HPLCC2420_read+0x1c>
            {
            }
            ;                   //wait for spi xfr to complete
            status = inp(SPDR);
    2700:	8f b1       	in	r24, 0x0f	; 15
            outp(0, SPDR);
    2702:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    2704:	77 9b       	sbis	0x0e, 7	; 14
    2706:	fe cf       	rjmp	.-4      	; 0x2704 <HPLCC2420M_HPLCC2420_read+0x24>
            {
            }
            ;                   //wait for spi xfr to complete
            data = inp(SPDR);
    2708:	8f b1       	in	r24, 0x0f	; 15
            outp(0, SPDR);
    270a:	1f b8       	out	0x0f, r1	; 15
            while (!(inp(SPSR) & 0x80))
    270c:	77 9b       	sbis	0x0e, 7	; 14
    270e:	fe cf       	rjmp	.-4      	; 0x270c <HPLCC2420M_HPLCC2420_read+0x2c>
            {
            }
            ;                   //wait for spi xfr to complete
            data = (data << 8) | inp(SPDR);
    2710:	18 2f       	mov	r17, r24
    2712:	00 e0       	ldi	r16, 0x00	; 0
    2714:	ef b0       	in	r14, 0x0f	; 15
            LITE_SET_CC_CS_PIN();       //disable chip select
    2716:	0e 94 aa 05 	call	0xb54	; 0xb54 <LITE_SET_CC_CS_PIN>
            HPLCC2420M_bSpiAvail = TRUE;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	80 93 09 05 	sts	0x0509, r24
        }
        _atomic_end(_atomic);
    2720:	8f 2d       	mov	r24, r15
    2722:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2726:	ff 24       	eor	r15, r15
    2728:	e0 2a       	or	r14, r16
    272a:	f1 2a       	or	r15, r17
    }
    return data;
}
    272c:	c7 01       	movw	r24, r14
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	ff 90       	pop	r15
    2734:	ef 90       	pop	r14
    2736:	08 95       	ret

00002738 <HPLCC2420M_HPLCC2420_cmd>:
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	18 2f       	mov	r17, r24
    273e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2742:	08 2f       	mov	r16, r24
    2744:	0e 94 ac 05 	call	0xb58	; 0xb58 <LITE_CLR_CC_CS_PIN>
    2748:	1f b9       	out	0x0f, r17	; 15
    274a:	77 9b       	sbis	0x0e, 7	; 14
    274c:	fe cf       	rjmp	.-4      	; 0x274a <HPLCC2420M_HPLCC2420_cmd+0x12>
    274e:	1f b1       	in	r17, 0x0f	; 15
    2750:	80 2f       	mov	r24, r16
    2752:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2756:	0e 94 aa 05 	call	0xb54	; 0xb54 <LITE_SET_CC_CS_PIN>
    275a:	81 2f       	mov	r24, r17
    275c:	1f 91       	pop	r17
    275e:	0f 91       	pop	r16
    2760:	08 95       	ret

00002762 <HPLCC2420M_HPLCC2420_write>:
    2762:	df 92       	push	r13
    2764:	ef 92       	push	r14
    2766:	ff 92       	push	r15
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	18 2f       	mov	r17, r24
    276e:	d6 2e       	mov	r13, r22
    2770:	f7 2e       	mov	r15, r23
    2772:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2776:	e8 2e       	mov	r14, r24
    2778:	10 92 09 05 	sts	0x0509, r1
    277c:	0e 94 ac 05 	call	0xb58	; 0xb58 <LITE_CLR_CC_CS_PIN>
    2780:	1f b9       	out	0x0f, r17	; 15
    2782:	77 9b       	sbis	0x0e, 7	; 14
    2784:	fe cf       	rjmp	.-4      	; 0x2782 <HPLCC2420M_HPLCC2420_write+0x20>
    2786:	0f b1       	in	r16, 0x0f	; 15
    2788:	1f 30       	cpi	r17, 0x0F	; 15
    278a:	30 f0       	brcs	.+12     	; 0x2798 <HPLCC2420M_HPLCC2420_write+0x36>
    278c:	ff b8       	out	0x0f, r15	; 15
    278e:	77 9b       	sbis	0x0e, 7	; 14
    2790:	fe cf       	rjmp	.-4      	; 0x278e <HPLCC2420M_HPLCC2420_write+0x2c>
    2792:	df b8       	out	0x0f, r13	; 15
    2794:	77 9b       	sbis	0x0e, 7	; 14
    2796:	fe cf       	rjmp	.-4      	; 0x2794 <HPLCC2420M_HPLCC2420_write+0x32>
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	80 93 09 05 	sts	0x0509, r24
    279e:	8e 2d       	mov	r24, r14
    27a0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    27a4:	0e 94 aa 05 	call	0xb54	; 0xb54 <LITE_SET_CC_CS_PIN>
    27a8:	80 2f       	mov	r24, r16
    27aa:	1f 91       	pop	r17
    27ac:	0f 91       	pop	r16
    27ae:	ff 90       	pop	r15
    27b0:	ef 90       	pop	r14
    27b2:	df 90       	pop	r13
    27b4:	08 95       	ret

000027b6 <HPLCC2420M_HPLCC2420RAM_write>:
    27b6:	ef 92       	push	r14
    27b8:	ff 92       	push	r15
    27ba:	0f 93       	push	r16
    27bc:	1f 93       	push	r17
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	ec 01       	movw	r28, r24
    27c4:	f6 2e       	mov	r15, r22
    27c6:	8a 01       	movw	r16, r20
    27c8:	80 91 09 05 	lds	r24, 0x0509
    27cc:	88 23       	and	r24, r24
    27ce:	39 f4       	brne	.+14     	; 0x27de <HPLCC2420M_HPLCC2420RAM_write+0x28>
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	ff 90       	pop	r15
    27da:	ef 90       	pop	r14
    27dc:	08 95       	ret
    27de:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    27e2:	e8 2e       	mov	r14, r24
    27e4:	10 92 09 05 	sts	0x0509, r1
    27e8:	d0 93 0b 05 	sts	0x050B, r29
    27ec:	c0 93 0a 05 	sts	0x050A, r28
    27f0:	f0 92 06 05 	sts	0x0506, r15
    27f4:	10 93 08 05 	sts	0x0508, r17
    27f8:	00 93 07 05 	sts	0x0507, r16
    27fc:	0e 94 ac 05 	call	0xb58	; 0xb58 <LITE_CLR_CC_CS_PIN>
    2800:	20 91 0a 05 	lds	r18, 0x050A
    2804:	30 91 0b 05 	lds	r19, 0x050B
    2808:	82 2f       	mov	r24, r18
    280a:	80 68       	ori	r24, 0x80	; 128
    280c:	8f b9       	out	0x0f, r24	; 15
    280e:	77 9b       	sbis	0x0e, 7	; 14
    2810:	fe cf       	rjmp	.-4      	; 0x280e <HPLCC2420M_HPLCC2420RAM_write+0x58>
    2812:	8f b1       	in	r24, 0x0f	; 15
    2814:	36 95       	lsr	r19
    2816:	27 95       	ror	r18
    2818:	82 2f       	mov	r24, r18
    281a:	80 7c       	andi	r24, 0xC0	; 192
    281c:	8f b9       	out	0x0f, r24	; 15
    281e:	77 9b       	sbis	0x0e, 7	; 14
    2820:	fe cf       	rjmp	.-4      	; 0x281e <HPLCC2420M_HPLCC2420RAM_write+0x68>
    2822:	8f b1       	in	r24, 0x0f	; 15
    2824:	50 91 06 05 	lds	r21, 0x0506
    2828:	55 23       	and	r21, r21
    282a:	81 f0       	breq	.+32     	; 0x284c <HPLCC2420M_HPLCC2420RAM_write+0x96>
    282c:	40 91 07 05 	lds	r20, 0x0507
    2830:	84 2f       	mov	r24, r20
    2832:	90 91 08 05 	lds	r25, 0x0508
    2836:	9c 01       	movw	r18, r24
    2838:	f9 01       	movw	r30, r18
    283a:	80 81       	ld	r24, Z
    283c:	8f b9       	out	0x0f, r24	; 15
    283e:	77 9b       	sbis	0x0e, 7	; 14
    2840:	fe cf       	rjmp	.-4      	; 0x283e <HPLCC2420M_HPLCC2420RAM_write+0x88>
    2842:	31 96       	adiw	r30, 0x01	; 1
    2844:	8e 2f       	mov	r24, r30
    2846:	84 1b       	sub	r24, r20
    2848:	85 17       	cp	r24, r21
    284a:	b8 f3       	brcs	.-18     	; 0x283a <HPLCC2420M_HPLCC2420RAM_write+0x84>
    284c:	8e 2d       	mov	r24, r14
    284e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	80 93 09 05 	sts	0x0509, r24
    2858:	8b e3       	ldi	r24, 0x3B	; 59
    285a:	94 e1       	ldi	r25, 0x14	; 20
    285c:	65 e0       	ldi	r22, 0x05	; 5
    285e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	ff 90       	pop	r15
    286c:	ef 90       	pop	r14
    286e:	08 95       	ret

00002870 <HPLCC2420M_HPLCC2420RAM_writeDone>:
    2870:	0e 94 6f 0a 	call	0x14de	; 0x14de <cc2420controlm_HPLChipconRAM_writeDone>
    2874:	08 95       	ret

00002876 <HPLCC2420M_signalRAMWr>:
    2876:	40 91 07 05 	lds	r20, 0x0507
    287a:	50 91 08 05 	lds	r21, 0x0508
    287e:	80 91 0a 05 	lds	r24, 0x050A
    2882:	90 91 0b 05 	lds	r25, 0x050B
    2886:	60 91 06 05 	lds	r22, 0x0506
    288a:	0e 94 6f 0a 	call	0x14de	; 0x14de <cc2420controlm_HPLChipconRAM_writeDone>
    288e:	08 95       	ret

00002890 <HPLCC2420M_StdControl_init>:
    2890:	1f 93       	push	r17
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	80 93 09 05 	sts	0x0509, r24
    2898:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LITE_MAKE_MISO_INPUT>
    289c:	0e 94 56 03 	call	0x6ac	; 0x6ac <LITE_MAKE_MOSI_OUTPUT>
    28a0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LITE_MAKE_SPI_SCK_OUTPUT>
    28a4:	0e 94 37 05 	call	0xa6e	; 0xa6e <LITE_MAKE_CC_RSTN_OUTPUT>
    28a8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <LITE_MAKE_CC_VREN_OUTPUT>
    28ac:	0e 94 b4 05 	call	0xb68	; 0xb68 <LITE_MAKE_CC_CS_OUTPUT>
    28b0:	0e 94 7d 05 	call	0xafa	; 0xafa <LITE_MAKE_CC_FIFOP1_INPUT>
    28b4:	0e 94 94 05 	call	0xb28	; 0xb28 <LITE_MAKE_CC_CCA_INPUT>
    28b8:	0e 94 a8 05 	call	0xb50	; 0xb50 <LITE_MAKE_CC_SFD_INPUT>
    28bc:	0e 94 c8 05 	call	0xb90	; 0xb90 <LITE_MAKE_CC_FIFO_INPUT>
    28c0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    28c4:	18 2f       	mov	r17, r24
    28c6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LITE_MAKE_SPI_SCK_OUTPUT>
    28ca:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <LITE_MAKE_MISO_INPUT>
    28ce:	0e 94 56 03 	call	0x6ac	; 0x6ac <LITE_MAKE_MOSI_OUTPUT>
    28d2:	70 9a       	sbi	0x0e, 0	; 14
    28d4:	6c 9a       	sbi	0x0d, 4	; 13
    28d6:	6b 98       	cbi	0x0d, 3	; 13
    28d8:	6a 98       	cbi	0x0d, 2	; 13
    28da:	69 98       	cbi	0x0d, 1	; 13
    28dc:	68 98       	cbi	0x0d, 0	; 13
    28de:	6e 9a       	sbi	0x0d, 6	; 13
    28e0:	81 2f       	mov	r24, r17
    28e2:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	1f 91       	pop	r17
    28ea:	08 95       	ret

000028ec <HPLTimer1M_CaptureT1_enableEvents>:
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_enableEvents(void)
{
    28ec:	8e b5       	in	r24, 0x2e	; 46
    28ee:	8f 7e       	andi	r24, 0xEF	; 239
    28f0:	8e bd       	out	0x2e, r24	; 46
    cbi(TCCR1B, WGM13);
    cbi(TCCR1B, WGM12);
    28f2:	8e b5       	in	r24, 0x2e	; 46
    28f4:	87 7f       	andi	r24, 0xF7	; 247
    28f6:	8e bd       	out	0x2e, r24	; 46
    sbi(TIMSK, TICIE1);
    28f8:	87 b7       	in	r24, 0x37	; 55
    28fa:	80 62       	ori	r24, 0x20	; 32
    28fc:	87 bf       	out	0x37, r24	; 55
}
    28fe:	08 95       	ret

00002900 <HPLTimer1M_CaptureT1_clearOverflow>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_clearOverflow(void)
{
    2900:	86 b7       	in	r24, 0x36	; 54
    2902:	84 60       	ori	r24, 0x04	; 4
    2904:	86 bf       	out	0x36, r24	; 54
    sbi(TIFR, TOV1);
    return;
}
    2906:	08 95       	ret

00002908 <HPLTimer1M_CaptureT1_disableEvents>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_disableEvents(void)
{
    2908:	87 b7       	in	r24, 0x37	; 55
    290a:	8f 7d       	andi	r24, 0xDF	; 223
    290c:	87 bf       	out	0x37, r24	; 55
    cbi(TIMSK, TICIE1);         //disable
    sbi(TIFR, ICF1);            //clear any pending interrupt}
    290e:	86 b7       	in	r24, 0x36	; 54
    2910:	80 62       	ori	r24, 0x20	; 32
    2912:	86 bf       	out	0x36, r24	; 54
}
    2914:	08 95       	ret

00002916 <HPLTimer1M_Timer1_default_fire>:

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_Timer1_default_fire(void)
{
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	08 95       	ret

0000291a <HPLTimer1M_Timer1_fire>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t HPLTimer1M_Timer1_fire(void)
{
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	08 95       	ret

0000291e <HPLTimer1M_CaptureT1_isOverflowPending>:
    unsigned char result;

    result = HPLTimer1M_Timer1_default_fire();
    return result;
}

//-------------------------------------------------------------------------
inline uint16_t HPLTimer1M_CaptureT1_getEvent(void)
{
    uint16_t i;

    {
        _atomic_t _atomic = _atomic_start();

        i = inw(ICR1L);
        _atomic_end(_atomic);
    }
    return i;
}

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_captured(uint16_t arg_0xa4d7ac0)
{
    hplcc2420interruptm_SFDCapture_captured(arg_0xa4d7ac0);
}

//void   __vector_11(void) __attribute__((signal, used,   externally_visible)); 
//void  __attribute((signal, used, externally_visible))   __vector_11(void) 
SIGNAL(TIMER1_CAPT_vect)
{
    uint8_t isthreadtrue;
    _atomic_t _atomic;

    #ifdef ENERGY_INSTRUMENTATION
       __asm__ __volatile__ ("sei" ::);
       {
       _atomic = _atomic_start();
       lcounter = getCurrentResolution();
       hcounter = getCurrentCounterHigh();
       _atomic_end(_atomic); 
       }
    #endif
    
    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    HPLTimer1M_CaptureT1_captured(HPLTimer1M_CaptureT1_getEvent());
    _atomic = _atomic_start();
    if (isthreadtrue == 1)
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
        // thread_yield();   
    }
    _atomic_end(_atomic);
    
    
    #ifdef ENERGY_INSTRUMENTATION      
       {
       _atomic = _atomic_start();
       lcounter2 = getCurrentResolution();
       hcounter2 = getCurrentCounterHigh();
       if (hcounter2 == hcounter)
       interruptcost += lcounter2 - lcounter; 
       else
       interruptcost += ((uint32_t)(hcounter2-hcounter))*50000*50000 + lcounter2 - lcounter; 
       _atomic_end(_atomic); 
       }
       __asm__ __volatile__ ("cli" ::);     
    #endif
}

//-------------------------------------------------------------------------
inline bool HPLTimer1M_CaptureT1_isOverflowPending(void)
{
    291e:	86 b7       	in	r24, 0x36	; 54
    return (inp(TIFR) & TOV1);
}
    2920:	82 70       	andi	r24, 0x02	; 2
    2922:	08 95       	ret

00002924 <HPLTimer1M_CaptureT1_setEdge>:

//-------------------------------------------------------------------------
inline void HPLTimer1M_CaptureT1_setEdge(uint8_t LowToHigh)
{
    2924:	88 23       	and	r24, r24
    2926:	39 f4       	brne	.+14     	; 0x2936 <HPLTimer1M_CaptureT1_setEdge+0x12>
    if (LowToHigh)
    {
        sbi(TCCR1B, ICES1);
    }
    //rising edge
    else
    {
        cbi(TCCR1B, ICES1);
    2928:	8e b5       	in	r24, 0x2e	; 46
    292a:	8f 7b       	andi	r24, 0xBF	; 191
    292c:	8e bd       	out	0x2e, r24	; 46
    }
    //falling edge
    //Set InputCapture pin PortD pin4 as INPUT
    //  LITE_MAKE_CC_SFD_INPUT();
    sbi(TIFR, ICF1);            //clear any pending interrupt
    292e:	86 b7       	in	r24, 0x36	; 54
    2930:	80 62       	ori	r24, 0x20	; 32
    2932:	86 bf       	out	0x36, r24	; 54
    return;
}
    2934:	08 95       	ret
    2936:	8e b5       	in	r24, 0x2e	; 46
    2938:	80 64       	ori	r24, 0x40	; 64
    293a:	8e bd       	out	0x2e, r24	; 46
    293c:	86 b7       	in	r24, 0x36	; 54
    293e:	80 62       	ori	r24, 0x20	; 32
    2940:	86 bf       	out	0x36, r24	; 54
    2942:	08 95       	ret

00002944 <__vector_12>:

//void  __vector_12(void)  __attribute__((signal, used,   externally_visible)); 
//void __attribute((interrupt, used, externally_visible))  __vector_12(void)
ISR(TIMER1_COMPA_vect)
{
    2944:	1f 92       	push	r1
    2946:	0f 92       	push	r0
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	0f 92       	push	r0
    294c:	0b b6       	in	r0, 0x3b	; 59
    294e:	0f 92       	push	r0
    2950:	11 24       	eor	r1, r1
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	2f 93       	push	r18
    2958:	3f 93       	push	r19
    295a:	4f 93       	push	r20
    295c:	5f 93       	push	r21
    295e:	6f 93       	push	r22
    2960:	7f 93       	push	r23
    2962:	8f 93       	push	r24
    2964:	9f 93       	push	r25
    2966:	af 93       	push	r26
    2968:	bf 93       	push	r27
    296a:	ef 93       	push	r30
    296c:	ff 93       	push	r31
    _atomic_t _atomic;
    uint8_t isthreadtrue;

    /*   
       __asm__ __volatile__ ("sei" ::);
       SHOWME(int12 start\n);
     */
    isthreadtrue = 0;
    _atomic = _atomic_start();
    296e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2972:	18 2f       	mov	r17, r24
    if (is_thread())
    2974:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <is_thread>
    2978:	88 23       	and	r24, r24
    297a:	09 f0       	breq	.+2      	; 0x297e <__vector_12+0x3a>
    297c:	47 c0       	rjmp	.+142    	; 0x2a0c <__vector_12+0xc8>
    297e:	00 e0       	ldi	r16, 0x00	; 0
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    2980:	81 2f       	mov	r24, r17
    2982:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    {
        _atomic_t _atomic = _atomic_start();
    2986:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    298a:	28 2f       	mov	r18, r24

        {
            if (HPLTimer1M_set_flag)
    298c:	80 91 14 05 	lds	r24, 0x0514
    2990:	88 23       	and	r24, r24
    2992:	81 f0       	breq	.+32     	; 0x29b4 <__vector_12+0x70>
            {
                HPLTimer1M_mscale = HPLTimer1M_nextScale;
    2994:	80 91 19 05 	lds	r24, 0x0519
    2998:	80 93 1c 05 	sts	0x051C, r24
                HPLTimer1M_nextScale |= 0x8;
    299c:	88 60       	ori	r24, 0x08	; 8
    299e:	80 93 19 05 	sts	0x0519, r24
                outp(HPLTimer1M_nextScale, TCCR1B);     //update the clock scale
    29a2:	8e bd       	out	0x2e, r24	; 46
                outw(OCR1AL, HPLTimer1M_minterval);     //update the compare value
    29a4:	80 91 1a 05 	lds	r24, 0x051A
    29a8:	90 91 1b 05 	lds	r25, 0x051B
    29ac:	9b bd       	out	0x2b, r25	; 43
    29ae:	8a bd       	out	0x2a, r24	; 42
                HPLTimer1M_set_flag = 0;
    29b0:	10 92 14 05 	sts	0x0514, r1
            }
        }
        _atomic_end(_atomic);
    29b4:	82 2f       	mov	r24, r18
    29b6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    }
    HPLTimer1M_Timer1_fire();
    _atomic = _atomic_start();
    29ba:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    29be:	28 2f       	mov	r18, r24
    if (isthreadtrue == 1)
    29c0:	01 30       	cpi	r16, 0x01	; 1
    29c2:	61 f4       	brne	.+24     	; 0x29dc <__vector_12+0x98>
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
    29c4:	8d b7       	in	r24, 0x3d	; 61
    29c6:	9e b7       	in	r25, 0x3e	; 62
    29c8:	90 93 4f 05 	sts	0x054F, r25
    29cc:	80 93 4e 05 	sts	0x054E, r24
    29d0:	80 91 a1 05 	lds	r24, 0x05A1
    29d4:	90 91 a2 05 	lds	r25, 0x05A2
    29d8:	9e bf       	out	0x3e, r25	; 62
    29da:	8d bf       	out	0x3d, r24	; 61
        //  thread_yield();   
    }
    _atomic_end(_atomic);
    29dc:	82 2f       	mov	r24, r18
    29de:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    /*              
       SHOWME(int12 end\n);
       __asm__ __volatile__ ("cli" ::);     
     */
}
    29e2:	ff 91       	pop	r31
    29e4:	ef 91       	pop	r30
    29e6:	bf 91       	pop	r27
    29e8:	af 91       	pop	r26
    29ea:	9f 91       	pop	r25
    29ec:	8f 91       	pop	r24
    29ee:	7f 91       	pop	r23
    29f0:	6f 91       	pop	r22
    29f2:	5f 91       	pop	r21
    29f4:	4f 91       	pop	r20
    29f6:	3f 91       	pop	r19
    29f8:	2f 91       	pop	r18
    29fa:	1f 91       	pop	r17
    29fc:	0f 91       	pop	r16
    29fe:	0f 90       	pop	r0
    2a00:	0b be       	out	0x3b, r0	; 59
    2a02:	0f 90       	pop	r0
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	0f 90       	pop	r0
    2a08:	1f 90       	pop	r1
    2a0a:	18 95       	reti
    2a0c:	8d b7       	in	r24, 0x3d	; 61
    2a0e:	9e b7       	in	r25, 0x3e	; 62
    2a10:	90 93 a2 05 	sts	0x05A2, r25
    2a14:	80 93 a1 05 	sts	0x05A1, r24
    2a18:	80 91 4e 05 	lds	r24, 0x054E
    2a1c:	90 91 4f 05 	lds	r25, 0x054F
    2a20:	9e bf       	out	0x3e, r25	; 62
    2a22:	8d bf       	out	0x3d, r24	; 61
    2a24:	01 e0       	ldi	r16, 0x01	; 1
    2a26:	ac cf       	rjmp	.-168    	; 0x2980 <__vector_12+0x3c>

00002a28 <HPLTimer1M_CaptureT1_getEvent>:
    2a28:	0f 93       	push	r16
    2a2a:	1f 93       	push	r17
    2a2c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2a30:	06 b5       	in	r16, 0x26	; 38
    2a32:	17 b5       	in	r17, 0x27	; 39
    2a34:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2a38:	c8 01       	movw	r24, r16
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	08 95       	ret

00002a40 <HPLTimer1M_Timer1_setRate>:
    2a40:	ef 92       	push	r14
    2a42:	ff 92       	push	r15
    2a44:	1f 93       	push	r17
    2a46:	7c 01       	movw	r14, r24
    2a48:	16 2f       	mov	r17, r22
    2a4a:	17 70       	andi	r17, 0x07	; 7
    2a4c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2a50:	1f bc       	out	0x2f, r1	; 47
    2a52:	97 b7       	in	r25, 0x37	; 55
    2a54:	9f 7e       	andi	r25, 0xEF	; 239
    2a56:	97 bf       	out	0x37, r25	; 55
    2a58:	97 b7       	in	r25, 0x37	; 55
    2a5a:	9b 7f       	andi	r25, 0xFB	; 251
    2a5c:	97 bf       	out	0x37, r25	; 55
    2a5e:	97 b7       	in	r25, 0x37	; 55
    2a60:	9f 7d       	andi	r25, 0xDF	; 223
    2a62:	97 bf       	out	0x37, r25	; 55
    2a64:	1d bc       	out	0x2d, r1	; 45
    2a66:	1c bc       	out	0x2c, r1	; 44
    2a68:	fb bc       	out	0x2b, r15	; 43
    2a6a:	ea bc       	out	0x2a, r14	; 42
    2a6c:	96 b7       	in	r25, 0x36	; 54
    2a6e:	90 61       	ori	r25, 0x10	; 16
    2a70:	96 bf       	out	0x36, r25	; 54
    2a72:	18 60       	ori	r17, 0x08	; 8
    2a74:	1e bd       	out	0x2e, r17	; 46
    2a76:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	1f 91       	pop	r17
    2a7e:	ff 90       	pop	r15
    2a80:	ef 90       	pop	r14
    2a82:	08 95       	ret

00002a84 <HPLTimer1M_StdControl_init>:
    2a84:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2a88:	94 e0       	ldi	r25, 0x04	; 4
    2a8a:	90 93 1c 05 	sts	0x051C, r25
    2a8e:	2f ef       	ldi	r18, 0xFF	; 255
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	30 93 1b 05 	sts	0x051B, r19
    2a96:	20 93 1a 05 	sts	0x051A, r18
    2a9a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	08 95       	ret

00002aa2 <HPLTimer1M_CaptureT1_captured>:
    2aa2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <hplcc2420interruptm_SFDCapture_captured>
    2aa6:	08 95       	ret

00002aa8 <__vector_11>:
    2aa8:	1f 92       	push	r1
    2aaa:	0f 92       	push	r0
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	0f 92       	push	r0
    2ab0:	0b b6       	in	r0, 0x3b	; 59
    2ab2:	0f 92       	push	r0
    2ab4:	11 24       	eor	r1, r1
    2ab6:	0f 93       	push	r16
    2ab8:	1f 93       	push	r17
    2aba:	2f 93       	push	r18
    2abc:	3f 93       	push	r19
    2abe:	4f 93       	push	r20
    2ac0:	5f 93       	push	r21
    2ac2:	6f 93       	push	r22
    2ac4:	7f 93       	push	r23
    2ac6:	8f 93       	push	r24
    2ac8:	9f 93       	push	r25
    2aca:	af 93       	push	r26
    2acc:	bf 93       	push	r27
    2ace:	ef 93       	push	r30
    2ad0:	ff 93       	push	r31
    2ad2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2ad6:	08 2f       	mov	r16, r24
    2ad8:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <is_thread>
    2adc:	88 23       	and	r24, r24
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <__vector_11+0x3a>
    2ae0:	3f c0       	rjmp	.+126    	; 0x2b60 <__vector_11+0xb8>
    2ae2:	8d b7       	in	r24, 0x3d	; 61
    2ae4:	9e b7       	in	r25, 0x3e	; 62
    2ae6:	90 93 a2 05 	sts	0x05A2, r25
    2aea:	80 93 a1 05 	sts	0x05A1, r24
    2aee:	80 91 4e 05 	lds	r24, 0x054E
    2af2:	90 91 4f 05 	lds	r25, 0x054F
    2af6:	9e bf       	out	0x3e, r25	; 62
    2af8:	8d bf       	out	0x3d, r24	; 61
    2afa:	80 2f       	mov	r24, r16
    2afc:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2b00:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2b04:	06 b5       	in	r16, 0x26	; 38
    2b06:	17 b5       	in	r17, 0x27	; 39
    2b08:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2b0c:	c8 01       	movw	r24, r16
    2b0e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <hplcc2420interruptm_SFDCapture_captured>
    2b12:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2b16:	28 2f       	mov	r18, r24
    2b18:	8d b7       	in	r24, 0x3d	; 61
    2b1a:	9e b7       	in	r25, 0x3e	; 62
    2b1c:	90 93 4f 05 	sts	0x054F, r25
    2b20:	80 93 4e 05 	sts	0x054E, r24
    2b24:	80 91 a1 05 	lds	r24, 0x05A1
    2b28:	90 91 a2 05 	lds	r25, 0x05A2
    2b2c:	9e bf       	out	0x3e, r25	; 62
    2b2e:	8d bf       	out	0x3d, r24	; 61
    2b30:	82 2f       	mov	r24, r18
    2b32:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2b36:	ff 91       	pop	r31
    2b38:	ef 91       	pop	r30
    2b3a:	bf 91       	pop	r27
    2b3c:	af 91       	pop	r26
    2b3e:	9f 91       	pop	r25
    2b40:	8f 91       	pop	r24
    2b42:	7f 91       	pop	r23
    2b44:	6f 91       	pop	r22
    2b46:	5f 91       	pop	r21
    2b48:	4f 91       	pop	r20
    2b4a:	3f 91       	pop	r19
    2b4c:	2f 91       	pop	r18
    2b4e:	1f 91       	pop	r17
    2b50:	0f 91       	pop	r16
    2b52:	0f 90       	pop	r0
    2b54:	0b be       	out	0x3b, r0	; 59
    2b56:	0f 90       	pop	r0
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	0f 90       	pop	r0
    2b5c:	1f 90       	pop	r1
    2b5e:	18 95       	reti
    2b60:	80 2f       	mov	r24, r16
    2b62:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2b66:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2b6a:	06 b5       	in	r16, 0x26	; 38
    2b6c:	17 b5       	in	r17, 0x27	; 39
    2b6e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2b72:	c8 01       	movw	r24, r16
    2b74:	0e 94 72 12 	call	0x24e4	; 0x24e4 <hplcc2420interruptm_SFDCapture_captured>
    2b78:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	d8 cf       	rjmp	.-80     	; 0x2b30 <__vector_11+0x88>

00002b80 <HPLTimer1M_StdControl_stop>:
    2b80:	0f 93       	push	r16
    2b82:	1f 93       	push	r17
    2b84:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2b88:	00 91 1a 05 	lds	r16, 0x051A
    2b8c:	10 91 1b 05 	lds	r17, 0x051B
    2b90:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2b94:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2b98:	1f bc       	out	0x2f, r1	; 47
    2b9a:	97 b7       	in	r25, 0x37	; 55
    2b9c:	9f 7e       	andi	r25, 0xEF	; 239
    2b9e:	97 bf       	out	0x37, r25	; 55
    2ba0:	97 b7       	in	r25, 0x37	; 55
    2ba2:	9b 7f       	andi	r25, 0xFB	; 251
    2ba4:	97 bf       	out	0x37, r25	; 55
    2ba6:	97 b7       	in	r25, 0x37	; 55
    2ba8:	9f 7d       	andi	r25, 0xDF	; 223
    2baa:	97 bf       	out	0x37, r25	; 55
    2bac:	1d bc       	out	0x2d, r1	; 45
    2bae:	1c bc       	out	0x2c, r1	; 44
    2bb0:	1b bd       	out	0x2b, r17	; 43
    2bb2:	0a bd       	out	0x2a, r16	; 42
    2bb4:	96 b7       	in	r25, 0x36	; 54
    2bb6:	90 61       	ori	r25, 0x10	; 16
    2bb8:	96 bf       	out	0x36, r25	; 54
    2bba:	98 e0       	ldi	r25, 0x08	; 8
    2bbc:	9e bd       	out	0x2e, r25	; 46
    2bbe:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	08 95       	ret

00002bca <HPLTimer1M_StdControl_start>:
    2bca:	ef 92       	push	r14
    2bcc:	ff 92       	push	r15
    2bce:	1f 93       	push	r17
    2bd0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2bd4:	e0 90 1a 05 	lds	r14, 0x051A
    2bd8:	f0 90 1b 05 	lds	r15, 0x051B
    2bdc:	10 91 1c 05 	lds	r17, 0x051C
    2be0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2be4:	17 70       	andi	r17, 0x07	; 7
    2be6:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2bea:	1f bc       	out	0x2f, r1	; 47
    2bec:	97 b7       	in	r25, 0x37	; 55
    2bee:	9f 7e       	andi	r25, 0xEF	; 239
    2bf0:	97 bf       	out	0x37, r25	; 55
    2bf2:	97 b7       	in	r25, 0x37	; 55
    2bf4:	9b 7f       	andi	r25, 0xFB	; 251
    2bf6:	97 bf       	out	0x37, r25	; 55
    2bf8:	97 b7       	in	r25, 0x37	; 55
    2bfa:	9f 7d       	andi	r25, 0xDF	; 223
    2bfc:	97 bf       	out	0x37, r25	; 55
    2bfe:	1d bc       	out	0x2d, r1	; 45
    2c00:	1c bc       	out	0x2c, r1	; 44
    2c02:	fb bc       	out	0x2b, r15	; 43
    2c04:	ea bc       	out	0x2a, r14	; 42
    2c06:	96 b7       	in	r25, 0x36	; 54
    2c08:	90 61       	ori	r25, 0x10	; 16
    2c0a:	96 bf       	out	0x36, r25	; 54
    2c0c:	18 60       	ori	r17, 0x08	; 8
    2c0e:	1e bd       	out	0x2e, r17	; 46
    2c10:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	1f 91       	pop	r17
    2c18:	ff 90       	pop	r15
    2c1a:	ef 90       	pop	r14
    2c1c:	08 95       	ret

00002c1e <initScheduling>:
#ifdef PLATFORM_CPU_MEASURE
uint32_t cpucounter;
#endif
void initScheduling(void)
{
    2c1e:	10 92 4d 05 	sts	0x054D, r1
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    int i;

    LITE_sched_num = 0;
    for (i = 0; i < LITE_MAX_TASKS; i++)
    {
        LITE_queue[i].tp = (void *)0;
    2c26:	fc 01       	movw	r30, r24
    2c28:	ee 0f       	add	r30, r30
    2c2a:	ff 1f       	adc	r31, r31
    2c2c:	e8 0f       	add	r30, r24
    2c2e:	f9 1f       	adc	r31, r25
    2c30:	e3 5e       	subi	r30, 0xE3	; 227
    2c32:	fa 4f       	sbci	r31, 0xFA	; 250
    2c34:	11 82       	std	Z+1, r1	; 0x01
    2c36:	10 82       	st	Z, r1
    2c38:	01 96       	adiw	r24, 0x01	; 1
    2c3a:	80 31       	cpi	r24, 0x10	; 16
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	99 f7       	brne	.-26     	; 0x2c26 <initScheduling+0x8>
    }
#ifdef PLATFORM_CPU_MEASURE
    cpucounter = 0;
#endif
}
    2c40:	08 95       	ret

00002c42 <postTask>:

//-------------------------------------------------------------------------
bool postTask(void (*tp) (void), uint8_t priority)
{
    2c42:	1f 93       	push	r17
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	ec 01       	movw	r28, r24
    2c4a:	16 2f       	mov	r17, r22
    _atomic_t fInterruptFlags;
    uint8_t tmp;

    fInterruptFlags = _atomic_start();
    2c4c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2c50:	48 2f       	mov	r20, r24
    if (LITE_sched_num == LITE_MAX_TASKS)
    2c52:	80 91 4d 05 	lds	r24, 0x054D
    2c56:	80 31       	cpi	r24, 0x10	; 16
    2c58:	91 f0       	breq	.+36     	; 0x2c7e <postTask+0x3c>
    {
        _atomic_end(fInterruptFlags);
        return FALSE;
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    {
        if (LITE_queue[tmp].tp == NULL)
    2c5e:	f9 01       	movw	r30, r18
    2c60:	ee 0f       	add	r30, r30
    2c62:	ff 1f       	adc	r31, r31
    2c64:	e2 0f       	add	r30, r18
    2c66:	f3 1f       	adc	r31, r19
    2c68:	e3 5e       	subi	r30, 0xE3	; 227
    2c6a:	fa 4f       	sbci	r31, 0xFA	; 250
    2c6c:	80 81       	ld	r24, Z
    2c6e:	91 81       	ldd	r25, Z+1	; 0x01
    2c70:	89 2b       	or	r24, r25
    2c72:	69 f0       	breq	.+26     	; 0x2c8e <postTask+0x4c>
        {
            LITE_queue[tmp].tp = tp;
            LITE_queue[tmp].priority = priority;
            LITE_sched_num++;
            _atomic_end(fInterruptFlags);
            return TRUE;
    2c74:	2f 5f       	subi	r18, 0xFF	; 255
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	20 31       	cpi	r18, 0x10	; 16
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	81 f7       	brne	.-32     	; 0x2c5e <postTask+0x1c>
        }
    }
    _atomic_end(fInterruptFlags);
    2c7e:	84 2f       	mov	r24, r20
    2c80:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    return FALSE;
}
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	1f 91       	pop	r17
    2c8c:	08 95       	ret
    2c8e:	d1 83       	std	Z+1, r29	; 0x01
    2c90:	c0 83       	st	Z, r28
    2c92:	12 83       	std	Z+2, r17	; 0x02
    2c94:	80 91 4d 05 	lds	r24, 0x054D
    2c98:	8f 5f       	subi	r24, 0xFF	; 255
    2c9a:	80 93 4d 05 	sts	0x054D, r24
    2c9e:	84 2f       	mov	r24, r20
    2ca0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	df 91       	pop	r29
    2ca8:	cf 91       	pop	r28
    2caa:	1f 91       	pop	r17
    2cac:	08 95       	ret

00002cae <runNextTask>:

//-------------------------------------------------------------------------
bool runNextTask()
{
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    _atomic_t fInterruptFlags;
    uint8_t currentpriority;
    uint8_t tmp;
    uint8_t reserved;
    void (*func) (void);

    reserved = 0;
    fInterruptFlags = _atomic_start();
    2cb2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2cb6:	68 2f       	mov	r22, r24
    currentpriority = 0;
    func = NULL;
    if (LITE_sched_num == 0)
    2cb8:	80 91 4d 05 	lds	r24, 0x054D
    2cbc:	88 23       	and	r24, r24
    2cbe:	c1 f1       	breq	.+112    	; 0x2d30 <runNextTask+0x82>
    {
        _atomic_end(fInterruptFlags);
        _avr_enable_interrupt();
#ifdef PLATFORM_CPU_MEASURE
        cpucounter++;
#else
        _avr_sleep();
        //   printfstr("ABOUT TO SLEEP!!\n");
#endif
        return FALSE;
    2cc0:	c0 e0       	ldi	r28, 0x00	; 0
    2cc2:	d0 e0       	ldi	r29, 0x00	; 0
    2cc4:	40 e0       	ldi	r20, 0x00	; 0
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    }
    for (tmp = 0; tmp < LITE_MAX_TASKS; tmp++)
    {
        if ((LITE_queue[tmp].tp != NULL) && (LITE_queue[tmp].priority >
    2ccc:	f9 01       	movw	r30, r18
    2cce:	ee 0f       	add	r30, r30
    2cd0:	ff 1f       	adc	r31, r31
    2cd2:	e2 0f       	add	r30, r18
    2cd4:	f3 1f       	adc	r31, r19
    2cd6:	e3 5e       	subi	r30, 0xE3	; 227
    2cd8:	fa 4f       	sbci	r31, 0xFA	; 250
    2cda:	80 81       	ld	r24, Z
    2cdc:	91 81       	ldd	r25, Z+1	; 0x01
    2cde:	89 2b       	or	r24, r25
    2ce0:	39 f0       	breq	.+14     	; 0x2cf0 <runNextTask+0x42>
    2ce2:	82 81       	ldd	r24, Z+2	; 0x02
    2ce4:	48 17       	cp	r20, r24
    2ce6:	20 f4       	brcc	.+8      	; 0x2cf0 <runNextTask+0x42>
                                             currentpriority))
        {
            func = LITE_queue[tmp].tp;
    2ce8:	c0 81       	ld	r28, Z
    2cea:	d1 81       	ldd	r29, Z+1	; 0x01
            reserved = tmp;
            currentpriority = LITE_queue[tmp].priority;
    2cec:	42 81       	ldd	r20, Z+2	; 0x02
    2cee:	52 2f       	mov	r21, r18
    2cf0:	2f 5f       	subi	r18, 0xFF	; 255
    2cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf4:	20 31       	cpi	r18, 0x10	; 16
    2cf6:	31 05       	cpc	r19, r1
    2cf8:	49 f7       	brne	.-46     	; 0x2ccc <runNextTask+0x1e>
        }
    }
    if (func != NULL)
    2cfa:	20 97       	sbiw	r28, 0x00	; 0
    2cfc:	21 f1       	breq	.+72     	; 0x2d46 <runNextTask+0x98>
    {
        LITE_sched_num--;
    2cfe:	80 91 4d 05 	lds	r24, 0x054D
    2d02:	81 50       	subi	r24, 0x01	; 1
    2d04:	80 93 4d 05 	sts	0x054D, r24
        LITE_queue[reserved].tp = NULL;
    2d08:	85 2f       	mov	r24, r21
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	ee 0f       	add	r30, r30
    2d10:	ff 1f       	adc	r31, r31
    2d12:	e8 0f       	add	r30, r24
    2d14:	f9 1f       	adc	r31, r25
    2d16:	e3 5e       	subi	r30, 0xE3	; 227
    2d18:	fa 4f       	sbci	r31, 0xFA	; 250
    2d1a:	11 82       	std	Z+1, r1	; 0x01
    2d1c:	10 82       	st	Z, r1
    }
    _atomic_end(fInterruptFlags);
    2d1e:	86 2f       	mov	r24, r22
    2d20:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    if (func != NULL)
    {
        func();
    2d24:	fe 01       	movw	r30, r28
    2d26:	09 95       	icall
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    }
    return TRUE;
}
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	08 95       	ret
    2d30:	86 2f       	mov	r24, r22
    2d32:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2d36:	0e 94 19 02 	call	0x432	; 0x432 <_avr_enable_interrupt>
    2d3a:	0e 94 17 02 	call	0x42e	; 0x42e <_avr_sleep>
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	08 95       	ret
    2d46:	86 2f       	mov	r24, r22
    2d48:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	df 91       	pop	r29
    2d50:	cf 91       	pop	r28
    2d52:	08 95       	ret

00002d54 <call_fcn_ptr>:
   along with LiteOS.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "threaddata.h"
void call_fcn_ptr(void (*tp) ())
{
    2d54:	fc 01       	movw	r30, r24
    2d56:	09 95       	icall
    (*tp) ();
}
    2d58:	08 95       	ret

00002d5a <is_thread>:

//--------------------------------------------------------------------------
//this is still working as it checks if the upperfound of threads are larger than the spvalue or not. 
uint8_t is_thread()
{
    2d5a:	2d b7       	in	r18, 0x3d	; 61
    2d5c:	3e b7       	in	r19, 0x3e	; 62
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	80 91 a3 05 	lds	r24, 0x05A3
    2d64:	90 91 a4 05 	lds	r25, 0x05A4
    2d68:	82 17       	cp	r24, r18
    2d6a:	93 07       	cpc	r25, r19
    2d6c:	08 f0       	brcs	.+2      	; 0x2d70 <is_thread+0x16>
    2d6e:	41 e0       	ldi	r20, 0x01	; 1
  uint16_t SPvalue;
  asm volatile("in %A0, 0x3d""\n\t""in %B0, 0x3e""\n\t": "=r"(SPvalue): );

  if (SPvalue > (uint16_t)maxthreadrambound)
  {
    return 0;
  }
  else
  {
    return 1;
  }
}
    2d70:	84 2f       	mov	r24, r20
    2d72:	08 95       	ret

00002d74 <setThreadTerminateFunction>:




//--------------------------------------------------------------------------
//Now adds the support for kernel built-in memory corrupt search and find 
//updated the romstart and romsize parameter in version 0.31 to support rom image loading conflict detection 


int create_thread(void(*fcn)(), uint16_t *ram_start, uint16_t *stack_ptr,
  uint16_t staticdatasize, uint8_t priority, char *threadName, uint16_t
  romstart, uint16_t romsize)
{
  int i;
  _atomic_t currentatomic;

  //used for handling the built-in memory corrupt detection
  uint16_t *kernelptr;

  //we do not allow threads context to create new threads
  if (is_thread())
  {
    return (0);
  }
  if (stack_ptr > maxthreadrambound)
  {
    maxthreadrambound = stack_ptr;
  }
  //First loop all the way through the table and find an empty slot 
  //computation time for space here 
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_NULL)
    {
      break;
    }
  }
  //Cannot create thread, no resources... 
  if (i == LITE_MAX_THREADS)
  {
    return (0);
  }
  //Add the thread
  currentatomic = _atomic_start();
  //Populate the thread table
  current_thread = &thread_table[i];
  current_thread->sp = stack_ptr;
  current_thread->state = STATE_ACTIVE;
  current_thread->data.tp = fcn;
  current_thread->priority = priority;
  current_thread->remaincredits = priority;
  current_thread->ramstart = ram_start;
  current_thread->ramend = stack_ptr;
  current_thread->thread_clear_function = NULL; 

  //if the thread is created by the kernel directly, then the following are all 0. 
  current_thread->sizeofBss = staticdatasize;
  current_thread->romstart = romstart;
  current_thread->romsize = romsize;

 //COPY file name 
  {
    uint8_t templen;

    templen = mystrlen(threadName);
    mystrncpy((char*)current_thread->threadName, (char*)threadName, templen + 1)
      ;
  }
  
  //set up the corruption detection 
  
  kernelptr = (uint16_t*)((uint8_t*)ram_start + staticdatasize);
  *kernelptr = 0xeeff;
  *(kernelptr + 1) = 0xeeff;
  
  #ifdef PLATFORM_AVR
    //Prepare the fcn pointer on the new stack, so it can be 
    //prepare set the beginning as the function then registers as 0. 
    PREPARE_REG_FOR_STACK();
  #endif 
  
  
  current_thread = 0;
  if (!thread_task_active)
  {
    postTask(thread_task, 2);
    thread_task_active = 1;
  }
  _atomic_end(currentatomic);
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_THREADCREATE
      addTrace(TRACE_THREADCREATE, 100);
    #endif 
  #endif 
  return (1);
}



/* Set up the destroy thread function call */
void setThreadTerminateFunction(uint8_t currentindex, void(*fp)())
{
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	fc 01       	movw	r30, r24
    2d78:	ee 0f       	add	r30, r30
    2d7a:	ff 1f       	adc	r31, r31
    2d7c:	ee 0f       	add	r30, r30
    2d7e:	ff 1f       	adc	r31, r31
    2d80:	ee 0f       	add	r30, r30
    2d82:	ff 1f       	adc	r31, r31
    2d84:	9f 01       	movw	r18, r30
    2d86:	22 0f       	add	r18, r18
    2d88:	33 1f       	adc	r19, r19
    2d8a:	22 0f       	add	r18, r18
    2d8c:	33 1f       	adc	r19, r19
    2d8e:	e2 0f       	add	r30, r18
    2d90:	f3 1f       	adc	r31, r19
    2d92:	e8 1b       	sub	r30, r24
    2d94:	f9 0b       	sbc	r31, r25
    2d96:	ee 5a       	subi	r30, 0xAE	; 174
    2d98:	fa 4f       	sbci	r31, 0xFA	; 250
    2d9a:	74 8f       	std	Z+28, r23	; 0x1c
    2d9c:	63 8f       	std	Z+27, r22	; 0x1b
  thread_table[currentindex].thread_clear_function = fp;
}
    2d9e:	08 95       	ret

00002da0 <lite_switch_to_user_thread>:


/* destroy_user_thread
 * This routine is only called when a users thread returns.
 * It removes it from the thread table.
 */
void destroy_user_thread()
{
  uint8_t *start,  *end;
  _atomic_t currentatomic;
  int indexofthread;

  currentatomic = _atomic_start();
  current_thread->state = STATE_NULL;
  start = (uint8_t*)current_thread->ramstart;
  end = (uint8_t*)current_thread->ramend;
  deleteThreadRegistrationInReceiverHandles(start, end);
  
  indexofthread = getThreadIndexAddress();
  
  
  if (thread_table[indexofthread].thread_clear_function != NULL)
  {
    (*thread_table[indexofthread].thread_clear_function)();
    thread_table[indexofthread].thread_clear_function = NULL;
  }
  
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_THREADDESTROY
      addTrace(TRACE_THREADDESTROY, 100);
    #endif 
  #endif 
  thread_yield();
  _atomic_end(currentatomic);
}




// These are new routines
/* lite_switch_to_user_thread()
 * This routine swaps the stack and allows a thread to run.
 */
void __attribute__((noinline))lite_switch_to_user_thread() /* __attribute__(
(naked)) */
{
    2da0:	ff 93       	push	r31
    2da2:	ff b7       	in	r31, 0x3f	; 63
    2da4:	ff 93       	push	r31
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_CONTEXTSWITCH
      addTrace(TRACE_CONTEXTSWITCHTOUSERTHREAD, 100);
    #endif 
  #endif 
  
   //printfstr("Now switching to user.  \n"); 
  #ifdef PLATFORM_AVR
    PUSH_REG_STATUS();
    PUSH_GPR();
    2da6:	0f 92       	push	r0
    2da8:	1f 92       	push	r1
    2daa:	2f 92       	push	r2
    2dac:	3f 92       	push	r3
    2dae:	4f 92       	push	r4
    2db0:	5f 92       	push	r5
    2db2:	6f 92       	push	r6
    2db4:	7f 92       	push	r7
    2db6:	8f 92       	push	r8
    2db8:	9f 92       	push	r9
    2dba:	af 92       	push	r10
    2dbc:	bf 92       	push	r11
    2dbe:	cf 92       	push	r12
    2dc0:	df 92       	push	r13
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	2f 93       	push	r18
    2dcc:	3f 93       	push	r19
    2dce:	4f 93       	push	r20
    2dd0:	5f 93       	push	r21
    2dd2:	6f 93       	push	r22
    2dd4:	7f 93       	push	r23
    2dd6:	8f 93       	push	r24
    2dd8:	9f 93       	push	r25
    2dda:	af 93       	push	r26
    2ddc:	bf 93       	push	r27
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	ef 93       	push	r30
    2de4:	ff 93       	push	r31
    SWAP_STACK_PTR(old_stack_ptr, current_thread->sp);
    2de6:	8d b7       	in	r24, 0x3d	; 61
    2de8:	9e b7       	in	r25, 0x3e	; 62
    2dea:	90 93 4f 05 	sts	0x054F, r25
    2dee:	80 93 4e 05 	sts	0x054E, r24
    2df2:	e0 91 50 05 	lds	r30, 0x0550
    2df6:	f0 91 51 05 	lds	r31, 0x0551
    2dfa:	80 81       	ld	r24, Z
    2dfc:	91 81       	ldd	r25, Z+1	; 0x01
    2dfe:	9e bf       	out	0x3e, r25	; 62
    2e00:	8d bf       	out	0x3d, r24	; 61
    POP_GPR();
    2e02:	ff 91       	pop	r31
    2e04:	ef 91       	pop	r30
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	bf 91       	pop	r27
    2e0c:	af 91       	pop	r26
    2e0e:	9f 91       	pop	r25
    2e10:	8f 91       	pop	r24
    2e12:	7f 91       	pop	r23
    2e14:	6f 91       	pop	r22
    2e16:	5f 91       	pop	r21
    2e18:	4f 91       	pop	r20
    2e1a:	3f 91       	pop	r19
    2e1c:	2f 91       	pop	r18
    2e1e:	1f 91       	pop	r17
    2e20:	0f 91       	pop	r16
    2e22:	ff 90       	pop	r15
    2e24:	ef 90       	pop	r14
    2e26:	df 90       	pop	r13
    2e28:	cf 90       	pop	r12
    2e2a:	bf 90       	pop	r11
    2e2c:	af 90       	pop	r10
    2e2e:	9f 90       	pop	r9
    2e30:	8f 90       	pop	r8
    2e32:	7f 90       	pop	r7
    2e34:	6f 90       	pop	r6
    2e36:	5f 90       	pop	r5
    2e38:	4f 90       	pop	r4
    2e3a:	3f 90       	pop	r3
    2e3c:	2f 90       	pop	r2
    2e3e:	1f 90       	pop	r1
    2e40:	0f 90       	pop	r0
    POP_REG_STATUS();
    2e42:	ff 91       	pop	r31
    2e44:	ff bf       	out	0x3f, r31	; 63
    2e46:	ff 91       	pop	r31
  #endif 
  
  //_avr_enable_interrupt(); 
  return ;
}
    2e48:	08 95       	ret

00002e4a <thread_yield>:

//-------------------------------------------------------------------------
void __attribute__((noinline))thread_yield() /* __attribute__((noinline)) */
{
    2e4a:	ff 93       	push	r31
    2e4c:	ff b7       	in	r31, 0x3f	; 63
    2e4e:	ff 93       	push	r31
  #ifdef PLATFORM_AVR
    PUSH_REG_STATUS();
    PUSH_GPR();
    2e50:	0f 92       	push	r0
    2e52:	1f 92       	push	r1
    2e54:	2f 92       	push	r2
    2e56:	3f 92       	push	r3
    2e58:	4f 92       	push	r4
    2e5a:	5f 92       	push	r5
    2e5c:	6f 92       	push	r6
    2e5e:	7f 92       	push	r7
    2e60:	8f 92       	push	r8
    2e62:	9f 92       	push	r9
    2e64:	af 92       	push	r10
    2e66:	bf 92       	push	r11
    2e68:	cf 92       	push	r12
    2e6a:	df 92       	push	r13
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	2f 93       	push	r18
    2e76:	3f 93       	push	r19
    2e78:	4f 93       	push	r20
    2e7a:	5f 93       	push	r21
    2e7c:	6f 93       	push	r22
    2e7e:	7f 93       	push	r23
    2e80:	8f 93       	push	r24
    2e82:	9f 93       	push	r25
    2e84:	af 93       	push	r26
    2e86:	bf 93       	push	r27
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	ef 93       	push	r30
    2e8e:	ff 93       	push	r31
    //Now swap the stacks back
    SWAP_STACK_PTR(current_thread->sp, old_stack_ptr);
    2e90:	e0 91 50 05 	lds	r30, 0x0550
    2e94:	f0 91 51 05 	lds	r31, 0x0551
    2e98:	8d b7       	in	r24, 0x3d	; 61
    2e9a:	9e b7       	in	r25, 0x3e	; 62
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
    2ea0:	80 91 4e 05 	lds	r24, 0x054E
    2ea4:	90 91 4f 05 	lds	r25, 0x054F
    2ea8:	9e bf       	out	0x3e, r25	; 62
    2eaa:	8d bf       	out	0x3d, r24	; 61
    POP_GPR();
    2eac:	ff 91       	pop	r31
    2eae:	ef 91       	pop	r30
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	bf 91       	pop	r27
    2eb6:	af 91       	pop	r26
    2eb8:	9f 91       	pop	r25
    2eba:	8f 91       	pop	r24
    2ebc:	7f 91       	pop	r23
    2ebe:	6f 91       	pop	r22
    2ec0:	5f 91       	pop	r21
    2ec2:	4f 91       	pop	r20
    2ec4:	3f 91       	pop	r19
    2ec6:	2f 91       	pop	r18
    2ec8:	1f 91       	pop	r17
    2eca:	0f 91       	pop	r16
    2ecc:	ff 90       	pop	r15
    2ece:	ef 90       	pop	r14
    2ed0:	df 90       	pop	r13
    2ed2:	cf 90       	pop	r12
    2ed4:	bf 90       	pop	r11
    2ed6:	af 90       	pop	r10
    2ed8:	9f 90       	pop	r9
    2eda:	8f 90       	pop	r8
    2edc:	7f 90       	pop	r7
    2ede:	6f 90       	pop	r6
    2ee0:	5f 90       	pop	r5
    2ee2:	4f 90       	pop	r4
    2ee4:	3f 90       	pop	r3
    2ee6:	2f 90       	pop	r2
    2ee8:	1f 90       	pop	r1
    2eea:	0f 90       	pop	r0
    POP_REG_STATUS();
    2eec:	ff 91       	pop	r31
    2eee:	ff bf       	out	0x3f, r31	; 63
    2ef0:	ff 91       	pop	r31


  #endif 
  #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_CONTEXTSWITCH
      addTrace(TRACE_CONTEXTSWITCHFROMUSERTHREAD, 100);
    #endif 
  #endif 
}
    2ef2:	08 95       	ret

00002ef4 <sleepThread>:


/* thread_sleep
 * This routine puts the current thread into a sleeping state.
 * It will not ever wake up until another task or thread wakes it up
 */
void sleepThread(uint16_t milli)
{
    2ef4:	ac 01       	movw	r20, r24
    2ef6:	2d b7       	in	r18, 0x3d	; 61
    2ef8:	3e b7       	in	r19, 0x3e	; 62
    2efa:	80 91 a3 05 	lds	r24, 0x05A3
    2efe:	90 91 a4 05 	lds	r25, 0x05A4
    2f02:	82 17       	cp	r24, r18
    2f04:	93 07       	cpc	r25, r19
    2f06:	50 f0       	brcs	.+20     	; 0x2f1c <sleepThread+0x28>
  if (!is_thread())
  {
    return ;
  }
  //this is insid the thread!
  current_thread->state = STATE_PRESLEEP;
    2f08:	e0 91 50 05 	lds	r30, 0x0550
    2f0c:	f0 91 51 05 	lds	r31, 0x0551
    2f10:	84 e0       	ldi	r24, 0x04	; 4
    2f12:	82 83       	std	Z+2, r24	; 0x02
  current_thread->data.sleepstate.sleeptime = milli;
    2f14:	56 8f       	std	Z+30, r21	; 0x1e
    2f16:	45 8f       	std	Z+29, r20	; 0x1d
  thread_yield();
    2f18:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <thread_yield>
    2f1c:	08 95       	ret

00002f1e <postNewThreadTask>:
}

//This routine is called to perform system level utility change and schedules thread_task again 






//this executes and cleans up a thread
//Make sure that no variables are allocated
// also make sure no functions are called with attributes
void thread_func_dispatcher()__attribute__((naked));
void thread_func_dispatcher()
{
  //    (*current_thread->data.tp)();
  call_fcn_ptr(current_thread->data.tp);
  destroy_user_thread();
}



//This function uses the remaining credits to find out the appropriate next thread and returns it 
inline int thread_get_next()
{
  int i;
  int credits;
  int currentcandidate;
  _atomic_t currentatomic;

  currentcandidate =  - 1;
  credits =  - 1;
  currentatomic = _atomic_start();
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_ACTIVE)
    {
      if (credits < thread_table[i].remaincredits)
      {
        credits = thread_table[i].remaincredits;
        currentcandidate = i;
      }
    }
  }
  if (credits < 0)
  {
    thread_task_active = 0;
  }
  _atomic_end(currentatomic);
  if (credits > 0)
  {
    currentatomic = _atomic_start();
    thread_table[currentcandidate].remaincredits--;
    _atomic_end(currentatomic);
    return currentcandidate;
  }
  else if (credits == 0)
  {
    currentatomic = _atomic_start();
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
      if (thread_table[i].state == STATE_ACTIVE)
      {
        thread_table[i].remaincredits = thread_table[i].priority;
      }
    }
    thread_table[currentcandidate].remaincredits--;
    _atomic_end(currentatomic);
    return currentcandidate;
  }
  else if (credits < 0)
  {
    return  - 1;
  }
  return 0;
}




//-------------------------------------------------------------------------
void thread_task()
{
  int i;
  uint8_t thread_presleep;
  _atomic_t currentatomic;
   

  currentatomic = _atomic_start();
  thread_presleep = 0;

  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state == STATE_PRESLEEP)
    {
      break;
    }
  }
  thread_presleep = (i != LITE_MAX_THREADS);

  if (thread_presleep)
  {
    postTask(thread_task, 3);
    
    thread_table[i].state = STATE_SLEEP;
    
    _atomic_end(currentatomic);
    // TimerM_Timer_start( i, TIMER_ONE_SHOT, thread_table[ i ].data.sleepstate.sleeptime );
    GenericTimerStart(i, TIMER_ONE_SHOT,
      thread_table[i].data.sleepstate.sleeptime);
    
    thread_presleep = 0;
    return ;
  }
  
  _atomic_end(currentatomic);
  
  i = thread_get_next();
  if (i < 0)
  {
    //here is the exit      
    return ;
  }
  postTask(thread_task, 3);
  
  i = check_for_memory_corrupt(i);
  if (i < 0)
  {
    //here is the exit      
    return ;
  }

  //thread sequence logging 
   
   /*
  write8uint(nextwriteaddr, i);
  nextwriteaddr++; 
  if (nextwriteaddr == 3001)
   nextwriteaddr = 2701; 
  write8uint(nextwriteaddr, 0xFF); 
   */

  current_thread = &(thread_table[i]);
  
  //printfintegeru32(i);
  //printfstr(" thread index\n");
  
  lite_switch_to_user_thread();    
 
  //printfstr("now switching out\n");
 
  current_thread = 0;
  
  
  return ;
}


/* thread_wakeup
 * This routine wakes up a thread that was put to sleep.
 */
void thread_wakeup(uint8_t id)
{
  if (id >= LITE_MAX_THREADS)
  {
    return ;
  }
  if (thread_table[id].state == STATE_SLEEP)
  {
    thread_table[id].state = STATE_ACTIVE;
  }
  if (thread_task_active == 0)
  {
    postTask(thread_task, 2);
    thread_task_active = 1; 
  }
}


//-------------------------------------------------------------------------
void postNewThreadTask()
{
    2f1e:	80 91 a0 05 	lds	r24, 0x05A0
    2f22:	81 11       	cpse	r24, r1
    2f24:	08 95       	ret
  if (thread_task_active == 0)
  {
    postTask(thread_task, 2);
    2f26:	88 e9       	ldi	r24, 0x98	; 152
    2f28:	99 e1       	ldi	r25, 0x19	; 25
    2f2a:	62 e0       	ldi	r22, 0x02	; 2
    2f2c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    thread_task_active = 1; 
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	80 93 a0 05 	sts	0x05A0, r24
    2f36:	08 95       	ret

00002f38 <thread_wakeup>:
    2f38:	82 30       	cpi	r24, 0x02	; 2
    2f3a:	08 f0       	brcs	.+2      	; 0x2f3e <thread_wakeup+0x6>
    2f3c:	08 95       	ret
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	9c 01       	movw	r18, r24
    2f42:	22 0f       	add	r18, r18
    2f44:	33 1f       	adc	r19, r19
    2f46:	22 0f       	add	r18, r18
    2f48:	33 1f       	adc	r19, r19
    2f4a:	22 0f       	add	r18, r18
    2f4c:	33 1f       	adc	r19, r19
    2f4e:	f9 01       	movw	r30, r18
    2f50:	ee 0f       	add	r30, r30
    2f52:	ff 1f       	adc	r31, r31
    2f54:	ee 0f       	add	r30, r30
    2f56:	ff 1f       	adc	r31, r31
    2f58:	e2 0f       	add	r30, r18
    2f5a:	f3 1f       	adc	r31, r19
    2f5c:	e8 1b       	sub	r30, r24
    2f5e:	f9 0b       	sbc	r31, r25
    2f60:	ee 5a       	subi	r30, 0xAE	; 174
    2f62:	fa 4f       	sbci	r31, 0xFA	; 250
    2f64:	82 81       	ldd	r24, Z+2	; 0x02
    2f66:	85 30       	cpi	r24, 0x05	; 5
    2f68:	69 f0       	breq	.+26     	; 0x2f84 <thread_wakeup+0x4c>
    2f6a:	80 91 a0 05 	lds	r24, 0x05A0
    2f6e:	88 23       	and	r24, r24
    2f70:	29 f7       	brne	.-54     	; 0x2f3c <thread_wakeup+0x4>
    2f72:	88 e9       	ldi	r24, 0x98	; 152
    2f74:	99 e1       	ldi	r25, 0x19	; 25
    2f76:	62 e0       	ldi	r22, 0x02	; 2
    2f78:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	80 93 a0 05 	sts	0x05A0, r24
    2f82:	08 95       	ret
    2f84:	82 e0       	ldi	r24, 0x02	; 2
    2f86:	82 83       	std	Z+2, r24	; 0x02
    2f88:	f0 cf       	rjmp	.-32     	; 0x2f6a <thread_wakeup+0x32>

00002f8a <thread_get_next>:
    2f8a:	ef 92       	push	r14
    2f8c:	ff 92       	push	r15
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2f9a:	28 2f       	mov	r18, r24
    2f9c:	80 91 54 05 	lds	r24, 0x0554
    2fa0:	82 30       	cpi	r24, 0x02	; 2
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <thread_get_next+0x1c>
    2fa4:	87 c0       	rjmp	.+270    	; 0x30b4 <thread_get_next+0x12a>
    2fa6:	cf ef       	ldi	r28, 0xFF	; 255
    2fa8:	df ef       	ldi	r29, 0xFF	; 255
    2faa:	ee 24       	eor	r14, r14
    2fac:	ea 94       	dec	r14
    2fae:	fe 2c       	mov	r15, r14
    2fb0:	80 91 7b 05 	lds	r24, 0x057B
    2fb4:	82 30       	cpi	r24, 0x02	; 2
    2fb6:	09 f4       	brne	.+2      	; 0x2fba <thread_get_next+0x30>
    2fb8:	67 c0       	rjmp	.+206    	; 0x3088 <thread_get_next+0xfe>
    2fba:	8f ef       	ldi	r24, 0xFF	; 255
    2fbc:	cf 3f       	cpi	r28, 0xFF	; 255
    2fbe:	d8 07       	cpc	r29, r24
    2fc0:	39 f1       	breq	.+78     	; 0x3010 <thread_get_next+0x86>
    2fc2:	87 01       	movw	r16, r14
    2fc4:	82 2f       	mov	r24, r18
    2fc6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    2fca:	cd 2b       	or	r28, r29
    2fcc:	81 f1       	breq	.+96     	; 0x302e <thread_get_next+0xa4>
    2fce:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    2fd2:	97 01       	movw	r18, r14
    2fd4:	22 0f       	add	r18, r18
    2fd6:	33 1f       	adc	r19, r19
    2fd8:	22 0f       	add	r18, r18
    2fda:	33 1f       	adc	r19, r19
    2fdc:	22 0f       	add	r18, r18
    2fde:	33 1f       	adc	r19, r19
    2fe0:	f9 01       	movw	r30, r18
    2fe2:	ee 0f       	add	r30, r30
    2fe4:	ff 1f       	adc	r31, r31
    2fe6:	ee 0f       	add	r30, r30
    2fe8:	ff 1f       	adc	r31, r31
    2fea:	e2 0f       	add	r30, r18
    2fec:	f3 1f       	adc	r31, r19
    2fee:	ee 19       	sub	r30, r14
    2ff0:	ff 09       	sbc	r31, r15
    2ff2:	ee 5a       	subi	r30, 0xAE	; 174
    2ff4:	fa 4f       	sbci	r31, 0xFA	; 250
    2ff6:	94 81       	ldd	r25, Z+4	; 0x04
    2ff8:	91 50       	subi	r25, 0x01	; 1
    2ffa:	94 83       	std	Z+4, r25	; 0x04
    2ffc:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3000:	c8 01       	movw	r24, r16
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	ff 90       	pop	r15
    300c:	ef 90       	pop	r14
    300e:	08 95       	ret
    3010:	10 92 a0 05 	sts	0x05A0, r1
    3014:	82 2f       	mov	r24, r18
    3016:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    301a:	0f ef       	ldi	r16, 0xFF	; 255
    301c:	1f ef       	ldi	r17, 0xFF	; 255
    301e:	c8 01       	movw	r24, r16
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	ff 90       	pop	r15
    302a:	ef 90       	pop	r14
    302c:	08 95       	ret
    302e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3032:	28 2f       	mov	r18, r24
    3034:	80 91 54 05 	lds	r24, 0x0554
    3038:	82 30       	cpi	r24, 0x02	; 2
    303a:	09 f4       	brne	.+2      	; 0x303e <thread_get_next+0xb4>
    303c:	49 c0       	rjmp	.+146    	; 0x30d0 <thread_get_next+0x146>
    303e:	80 91 7b 05 	lds	r24, 0x057B
    3042:	82 30       	cpi	r24, 0x02	; 2
    3044:	09 f4       	brne	.+2      	; 0x3048 <thread_get_next+0xbe>
    3046:	3f c0       	rjmp	.+126    	; 0x30c6 <thread_get_next+0x13c>
    3048:	c7 01       	movw	r24, r14
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	88 0f       	add	r24, r24
    3054:	99 1f       	adc	r25, r25
    3056:	fc 01       	movw	r30, r24
    3058:	ee 0f       	add	r30, r30
    305a:	ff 1f       	adc	r31, r31
    305c:	ee 0f       	add	r30, r30
    305e:	ff 1f       	adc	r31, r31
    3060:	e8 0f       	add	r30, r24
    3062:	f9 1f       	adc	r31, r25
    3064:	ee 19       	sub	r30, r14
    3066:	ff 09       	sbc	r31, r15
    3068:	ee 5a       	subi	r30, 0xAE	; 174
    306a:	fa 4f       	sbci	r31, 0xFA	; 250
    306c:	84 81       	ldd	r24, Z+4	; 0x04
    306e:	81 50       	subi	r24, 0x01	; 1
    3070:	84 83       	std	Z+4, r24	; 0x04
    3072:	82 2f       	mov	r24, r18
    3074:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3078:	c8 01       	movw	r24, r16
    307a:	df 91       	pop	r29
    307c:	cf 91       	pop	r28
    307e:	1f 91       	pop	r17
    3080:	0f 91       	pop	r16
    3082:	ff 90       	pop	r15
    3084:	ef 90       	pop	r14
    3086:	08 95       	ret
    3088:	80 91 7d 05 	lds	r24, 0x057D
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	c8 17       	cp	r28, r24
    3090:	d9 07       	cpc	r29, r25
    3092:	0c f0       	brlt	.+2      	; 0x3096 <thread_get_next+0x10c>
    3094:	96 cf       	rjmp	.-212    	; 0x2fc2 <thread_get_next+0x38>
    3096:	80 91 7d 05 	lds	r24, 0x057D
    309a:	c8 2f       	mov	r28, r24
    309c:	d0 e0       	ldi	r29, 0x00	; 0
    309e:	51 e0       	ldi	r21, 0x01	; 1
    30a0:	e5 2e       	mov	r14, r21
    30a2:	f1 2c       	mov	r15, r1
    30a4:	87 01       	movw	r16, r14
    30a6:	82 2f       	mov	r24, r18
    30a8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    30ac:	cd 2b       	or	r28, r29
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <thread_get_next+0x128>
    30b0:	8e cf       	rjmp	.-228    	; 0x2fce <thread_get_next+0x44>
    30b2:	bd cf       	rjmp	.-134    	; 0x302e <thread_get_next+0xa4>
    30b4:	80 91 56 05 	lds	r24, 0x0556
    30b8:	80 91 56 05 	lds	r24, 0x0556
    30bc:	c8 2f       	mov	r28, r24
    30be:	d0 e0       	ldi	r29, 0x00	; 0
    30c0:	ee 24       	eor	r14, r14
    30c2:	ff 24       	eor	r15, r15
    30c4:	75 cf       	rjmp	.-278    	; 0x2fb0 <thread_get_next+0x26>
    30c6:	80 91 7c 05 	lds	r24, 0x057C
    30ca:	80 93 7d 05 	sts	0x057D, r24
    30ce:	bc cf       	rjmp	.-136    	; 0x3048 <thread_get_next+0xbe>
    30d0:	80 91 55 05 	lds	r24, 0x0555
    30d4:	80 93 56 05 	sts	0x0556, r24
    30d8:	b2 cf       	rjmp	.-156    	; 0x303e <thread_get_next+0xb4>

000030da <destroy_user_thread>:
    30da:	1f 93       	push	r17
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    30e4:	18 2f       	mov	r17, r24
    30e6:	e0 91 50 05 	lds	r30, 0x0550
    30ea:	f0 91 51 05 	lds	r31, 0x0551
    30ee:	12 82       	std	Z+2, r1	; 0x02
    30f0:	81 89       	ldd	r24, Z+17	; 0x11
    30f2:	92 89       	ldd	r25, Z+18	; 0x12
    30f4:	63 89       	ldd	r22, Z+19	; 0x13
    30f6:	74 89       	ldd	r23, Z+20	; 0x14
    30f8:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <deleteThreadRegistrationInReceiverHandles>
    30fc:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    3100:	9c 01       	movw	r18, r24
    3102:	22 0f       	add	r18, r18
    3104:	33 1f       	adc	r19, r19
    3106:	22 0f       	add	r18, r18
    3108:	33 1f       	adc	r19, r19
    310a:	22 0f       	add	r18, r18
    310c:	33 1f       	adc	r19, r19
    310e:	e9 01       	movw	r28, r18
    3110:	cc 0f       	add	r28, r28
    3112:	dd 1f       	adc	r29, r29
    3114:	cc 0f       	add	r28, r28
    3116:	dd 1f       	adc	r29, r29
    3118:	c2 0f       	add	r28, r18
    311a:	d3 1f       	adc	r29, r19
    311c:	c8 1b       	sub	r28, r24
    311e:	d9 0b       	sbc	r29, r25
    3120:	ce 5a       	subi	r28, 0xAE	; 174
    3122:	da 4f       	sbci	r29, 0xFA	; 250
    3124:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3126:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3128:	30 97       	sbiw	r30, 0x00	; 0
    312a:	19 f0       	breq	.+6      	; 0x3132 <destroy_user_thread+0x58>
    312c:	09 95       	icall
    312e:	1c 8e       	std	Y+28, r1	; 0x1c
    3130:	1b 8e       	std	Y+27, r1	; 0x1b
    3132:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <thread_yield>
    3136:	81 2f       	mov	r24, r17
    3138:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	08 95       	ret

00003144 <thread_func_dispatcher>:
    3144:	e0 91 50 05 	lds	r30, 0x0550
    3148:	f0 91 51 05 	lds	r31, 0x0551
    314c:	85 8d       	ldd	r24, Z+29	; 0x1d
    314e:	96 8d       	ldd	r25, Z+30	; 0x1e
    3150:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <call_fcn_ptr>
    3154:	0e 94 6d 18 	call	0x30da	; 0x30da <destroy_user_thread>

00003158 <create_thread>:
    3158:	2f 92       	push	r2
    315a:	3f 92       	push	r3
    315c:	4f 92       	push	r4
    315e:	5f 92       	push	r5
    3160:	6f 92       	push	r6
    3162:	7f 92       	push	r7
    3164:	8f 92       	push	r8
    3166:	9f 92       	push	r9
    3168:	af 92       	push	r10
    316a:	bf 92       	push	r11
    316c:	cf 92       	push	r12
    316e:	df 92       	push	r13
    3170:	ef 92       	push	r14
    3172:	ff 92       	push	r15
    3174:	0f 93       	push	r16
    3176:	1f 93       	push	r17
    3178:	cf 93       	push	r28
    317a:	df 93       	push	r29
    317c:	3c 01       	movw	r6, r24
    317e:	1b 01       	movw	r2, r22
    3180:	4a 01       	movw	r8, r20
    3182:	29 01       	movw	r4, r18
    3184:	8d b7       	in	r24, 0x3d	; 61
    3186:	9e b7       	in	r25, 0x3e	; 62
    3188:	20 91 a3 05 	lds	r18, 0x05A3
    318c:	30 91 a4 05 	lds	r19, 0x05A4
    3190:	28 17       	cp	r18, r24
    3192:	39 07       	cpc	r19, r25
    3194:	60 f4       	brcc	.+24     	; 0x31ae <create_thread+0x56>
    3196:	24 17       	cp	r18, r20
    3198:	35 07       	cpc	r19, r21
    319a:	f8 f0       	brcs	.+62     	; 0x31da <create_thread+0x82>
    319c:	80 91 54 05 	lds	r24, 0x0554
    31a0:	88 23       	and	r24, r24
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <create_thread+0x4e>
    31a4:	9f c0       	rjmp	.+318    	; 0x32e4 <create_thread+0x18c>
    31a6:	80 91 7b 05 	lds	r24, 0x057B
    31aa:	88 23       	and	r24, r24
    31ac:	d9 f0       	breq	.+54     	; 0x31e4 <create_thread+0x8c>
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	c9 01       	movw	r24, r18
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	ff 90       	pop	r15
    31be:	ef 90       	pop	r14
    31c0:	df 90       	pop	r13
    31c2:	cf 90       	pop	r12
    31c4:	bf 90       	pop	r11
    31c6:	af 90       	pop	r10
    31c8:	9f 90       	pop	r9
    31ca:	8f 90       	pop	r8
    31cc:	7f 90       	pop	r7
    31ce:	6f 90       	pop	r6
    31d0:	5f 90       	pop	r5
    31d2:	4f 90       	pop	r4
    31d4:	3f 90       	pop	r3
    31d6:	2f 90       	pop	r2
    31d8:	08 95       	ret
    31da:	50 93 a4 05 	sts	0x05A4, r21
    31de:	40 93 a3 05 	sts	0x05A3, r20
    31e2:	dc cf       	rjmp	.-72     	; 0x319c <create_thread+0x44>
    31e4:	c1 e0       	ldi	r28, 0x01	; 1
    31e6:	d0 e0       	ldi	r29, 0x00	; 0
    31e8:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    31ec:	18 2f       	mov	r17, r24
    31ee:	ce 01       	movw	r24, r28
    31f0:	88 0f       	add	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	fc 01       	movw	r30, r24
    31fe:	ee 0f       	add	r30, r30
    3200:	ff 1f       	adc	r31, r31
    3202:	ee 0f       	add	r30, r30
    3204:	ff 1f       	adc	r31, r31
    3206:	e8 0f       	add	r30, r24
    3208:	f9 1f       	adc	r31, r25
    320a:	ec 1b       	sub	r30, r28
    320c:	fd 0b       	sbc	r31, r29
    320e:	ee 5a       	subi	r30, 0xAE	; 174
    3210:	fa 4f       	sbci	r31, 0xFA	; 250
    3212:	f0 93 51 05 	sts	0x0551, r31
    3216:	e0 93 50 05 	sts	0x0550, r30
    321a:	91 82       	std	Z+1, r9	; 0x01
    321c:	80 82       	st	Z, r8
    321e:	82 e0       	ldi	r24, 0x02	; 2
    3220:	82 83       	std	Z+2, r24	; 0x02
    3222:	76 8e       	std	Z+30, r7	; 0x1e
    3224:	65 8e       	std	Z+29, r6	; 0x1d
    3226:	03 83       	std	Z+3, r16	; 0x03
    3228:	04 83       	std	Z+4, r16	; 0x04
    322a:	32 8a       	std	Z+18, r3	; 0x12
    322c:	21 8a       	std	Z+17, r2	; 0x11
    322e:	94 8a       	std	Z+20, r9	; 0x14
    3230:	83 8a       	std	Z+19, r8	; 0x13
    3232:	14 8e       	std	Z+28, r1	; 0x1c
    3234:	13 8e       	std	Z+27, r1	; 0x1b
    3236:	56 8a       	std	Z+22, r5	; 0x16
    3238:	45 8a       	std	Z+21, r4	; 0x15
    323a:	d0 8e       	std	Z+24, r13	; 0x18
    323c:	c7 8a       	std	Z+23, r12	; 0x17
    323e:	b2 8e       	std	Z+26, r11	; 0x1a
    3240:	a1 8e       	std	Z+25, r10	; 0x19
    3242:	c7 01       	movw	r24, r14
    3244:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    3248:	20 91 50 05 	lds	r18, 0x0550
    324c:	30 91 51 05 	lds	r19, 0x0551
    3250:	48 2f       	mov	r20, r24
    3252:	4f 5f       	subi	r20, 0xFF	; 255
    3254:	c9 01       	movw	r24, r18
    3256:	05 96       	adiw	r24, 0x05	; 5
    3258:	b7 01       	movw	r22, r14
    325a:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    325e:	f1 01       	movw	r30, r2
    3260:	e4 0d       	add	r30, r4
    3262:	f5 1d       	adc	r31, r5
    3264:	8f ef       	ldi	r24, 0xFF	; 255
    3266:	9e ee       	ldi	r25, 0xEE	; 238
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	80 83       	st	Z, r24
    326c:	93 83       	std	Z+3, r25	; 0x03
    326e:	82 83       	std	Z+2, r24	; 0x02
    3270:	8d b7       	in	r24, 0x3d	; 61
    3272:	9e b7       	in	r25, 0x3e	; 62
    3274:	90 93 4f 05 	sts	0x054F, r25
    3278:	80 93 4e 05 	sts	0x054E, r24
    327c:	e0 91 50 05 	lds	r30, 0x0550
    3280:	f0 91 51 05 	lds	r31, 0x0551
    3284:	80 81       	ld	r24, Z
    3286:	91 81       	ldd	r25, Z+1	; 0x01
    3288:	9e bf       	out	0x3e, r25	; 62
    328a:	8d bf       	out	0x3d, r24	; 61
    328c:	82 ea       	ldi	r24, 0xA2	; 162
    328e:	98 e1       	ldi	r25, 0x18	; 24
    3290:	8f 93       	push	r24
    3292:	9f 93       	push	r25
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	1f 92       	push	r1
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	82 32       	cpi	r24, 0x22	; 34
    329e:	91 05       	cpc	r25, r1
    32a0:	d9 f7       	brne	.-10     	; 0x3298 <create_thread+0x140>
    32a2:	8d b7       	in	r24, 0x3d	; 61
    32a4:	9e b7       	in	r25, 0x3e	; 62
    32a6:	91 83       	std	Z+1, r25	; 0x01
    32a8:	80 83       	st	Z, r24
    32aa:	80 91 4e 05 	lds	r24, 0x054E
    32ae:	90 91 4f 05 	lds	r25, 0x054F
    32b2:	9e bf       	out	0x3e, r25	; 62
    32b4:	8d bf       	out	0x3d, r24	; 61
    32b6:	10 92 51 05 	sts	0x0551, r1
    32ba:	10 92 50 05 	sts	0x0550, r1
    32be:	80 91 a0 05 	lds	r24, 0x05A0
    32c2:	88 23       	and	r24, r24
    32c4:	31 f0       	breq	.+12     	; 0x32d2 <create_thread+0x17a>
    32c6:	81 2f       	mov	r24, r17
    32c8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    32cc:	21 e0       	ldi	r18, 0x01	; 1
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	70 cf       	rjmp	.-288    	; 0x31b2 <create_thread+0x5a>
    32d2:	88 e9       	ldi	r24, 0x98	; 152
    32d4:	99 e1       	ldi	r25, 0x19	; 25
    32d6:	62 e0       	ldi	r22, 0x02	; 2
    32d8:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	80 93 a0 05 	sts	0x05A0, r24
    32e2:	f1 cf       	rjmp	.-30     	; 0x32c6 <create_thread+0x16e>
    32e4:	c0 e0       	ldi	r28, 0x00	; 0
    32e6:	d0 e0       	ldi	r29, 0x00	; 0
    32e8:	7f cf       	rjmp	.-258    	; 0x31e8 <create_thread+0x90>

000032ea <thread_init>:
    32ea:	1f 93       	push	r17
    32ec:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    32f0:	18 2f       	mov	r17, r24
    32f2:	82 e5       	ldi	r24, 0x52	; 82
    32f4:	95 e0       	ldi	r25, 0x05	; 5
    32f6:	60 e0       	ldi	r22, 0x00	; 0
    32f8:	70 e0       	ldi	r23, 0x00	; 0
    32fa:	4e e4       	ldi	r20, 0x4E	; 78
    32fc:	50 e0       	ldi	r21, 0x00	; 0
    32fe:	0e 94 cd 3b 	call	0x779a	; 0x779a <nmemset>
    3302:	10 92 51 05 	sts	0x0551, r1
    3306:	10 92 50 05 	sts	0x0550, r1
    330a:	10 92 4f 05 	sts	0x054F, r1
    330e:	10 92 4e 05 	sts	0x054E, r1
    3312:	10 92 a2 05 	sts	0x05A2, r1
    3316:	10 92 a1 05 	sts	0x05A1, r1
    331a:	10 92 a0 05 	sts	0x05A0, r1
    331e:	10 92 a4 05 	sts	0x05A4, r1
    3322:	10 92 a3 05 	sts	0x05A3, r1
    3326:	81 2f       	mov	r24, r17
    3328:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    332c:	1f 91       	pop	r17
    332e:	08 95       	ret

00003330 <thread_task>:
    3330:	ff 92       	push	r15
    3332:	0f 93       	push	r16
    3334:	1f 93       	push	r17
    3336:	cf 93       	push	r28
    3338:	df 93       	push	r29
    333a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    333e:	f8 2e       	mov	r15, r24
    3340:	80 91 54 05 	lds	r24, 0x0554
    3344:	84 30       	cpi	r24, 0x04	; 4
    3346:	09 f4       	brne	.+2      	; 0x334a <thread_task+0x1a>
    3348:	bd c0       	rjmp	.+378    	; 0x34c4 <thread_task+0x194>
    334a:	80 91 7b 05 	lds	r24, 0x057B
    334e:	84 30       	cpi	r24, 0x04	; 4
    3350:	09 f4       	brne	.+2      	; 0x3354 <thread_task+0x24>
    3352:	e1 c0       	rjmp	.+450    	; 0x3516 <thread_task+0x1e6>
    3354:	8f 2d       	mov	r24, r15
    3356:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    335a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    335e:	28 2f       	mov	r18, r24
    3360:	80 91 54 05 	lds	r24, 0x0554
    3364:	82 30       	cpi	r24, 0x02	; 2
    3366:	09 f4       	brne	.+2      	; 0x336a <thread_task+0x3a>
    3368:	9a c0       	rjmp	.+308    	; 0x349e <thread_task+0x16e>
    336a:	cf ef       	ldi	r28, 0xFF	; 255
    336c:	df ef       	ldi	r29, 0xFF	; 255
    336e:	0f ef       	ldi	r16, 0xFF	; 255
    3370:	1f ef       	ldi	r17, 0xFF	; 255
    3372:	80 91 7b 05 	lds	r24, 0x057B
    3376:	82 30       	cpi	r24, 0x02	; 2
    3378:	09 f4       	brne	.+2      	; 0x337c <thread_task+0x4c>
    337a:	54 c0       	rjmp	.+168    	; 0x3424 <thread_task+0xf4>
    337c:	ff ef       	ldi	r31, 0xFF	; 255
    337e:	cf 3f       	cpi	r28, 0xFF	; 255
    3380:	df 07       	cpc	r29, r31
    3382:	09 f4       	brne	.+2      	; 0x3386 <thread_task+0x56>
    3384:	5d c0       	rjmp	.+186    	; 0x3440 <thread_task+0x110>
    3386:	82 2f       	mov	r24, r18
    3388:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    338c:	cd 2b       	or	r28, r29
    338e:	09 f4       	brne	.+2      	; 0x3392 <thread_task+0x62>
    3390:	62 c0       	rjmp	.+196    	; 0x3456 <thread_task+0x126>
    3392:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3396:	98 01       	movw	r18, r16
    3398:	22 0f       	add	r18, r18
    339a:	33 1f       	adc	r19, r19
    339c:	22 0f       	add	r18, r18
    339e:	33 1f       	adc	r19, r19
    33a0:	22 0f       	add	r18, r18
    33a2:	33 1f       	adc	r19, r19
    33a4:	f9 01       	movw	r30, r18
    33a6:	ee 0f       	add	r30, r30
    33a8:	ff 1f       	adc	r31, r31
    33aa:	ee 0f       	add	r30, r30
    33ac:	ff 1f       	adc	r31, r31
    33ae:	e2 0f       	add	r30, r18
    33b0:	f3 1f       	adc	r31, r19
    33b2:	e0 1b       	sub	r30, r16
    33b4:	f1 0b       	sbc	r31, r17
    33b6:	ee 5a       	subi	r30, 0xAE	; 174
    33b8:	fa 4f       	sbci	r31, 0xFA	; 250
    33ba:	94 81       	ldd	r25, Z+4	; 0x04
    33bc:	91 50       	subi	r25, 0x01	; 1
    33be:	94 83       	std	Z+4, r25	; 0x04
    33c0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    33c4:	8f ef       	ldi	r24, 0xFF	; 255
    33c6:	0f 3f       	cpi	r16, 0xFF	; 255
    33c8:	18 07       	cpc	r17, r24
    33ca:	31 f1       	breq	.+76     	; 0x3418 <thread_task+0xe8>
    33cc:	88 e9       	ldi	r24, 0x98	; 152
    33ce:	99 e1       	ldi	r25, 0x19	; 25
    33d0:	63 e0       	ldi	r22, 0x03	; 3
    33d2:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    33d6:	c8 01       	movw	r24, r16
    33d8:	0e 94 ed 1a 	call	0x35da	; 0x35da <check_for_memory_corrupt>
    33dc:	ac 01       	movw	r20, r24
    33de:	97 fd       	sbrc	r25, 7
    33e0:	1b c0       	rjmp	.+54     	; 0x3418 <thread_task+0xe8>
    33e2:	88 0f       	add	r24, r24
    33e4:	99 1f       	adc	r25, r25
    33e6:	88 0f       	add	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	88 0f       	add	r24, r24
    33ec:	99 1f       	adc	r25, r25
    33ee:	9c 01       	movw	r18, r24
    33f0:	22 0f       	add	r18, r18
    33f2:	33 1f       	adc	r19, r19
    33f4:	22 0f       	add	r18, r18
    33f6:	33 1f       	adc	r19, r19
    33f8:	82 0f       	add	r24, r18
    33fa:	93 1f       	adc	r25, r19
    33fc:	84 1b       	sub	r24, r20
    33fe:	95 0b       	sbc	r25, r21
    3400:	8e 5a       	subi	r24, 0xAE	; 174
    3402:	9a 4f       	sbci	r25, 0xFA	; 250
    3404:	90 93 51 05 	sts	0x0551, r25
    3408:	80 93 50 05 	sts	0x0550, r24
    340c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <lite_switch_to_user_thread>
    3410:	10 92 51 05 	sts	0x0551, r1
    3414:	10 92 50 05 	sts	0x0550, r1
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	1f 91       	pop	r17
    341e:	0f 91       	pop	r16
    3420:	ff 90       	pop	r15
    3422:	08 95       	ret
    3424:	80 91 7d 05 	lds	r24, 0x057D
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	c8 17       	cp	r28, r24
    342c:	d9 07       	cpc	r29, r25
    342e:	0c f0       	brlt	.+2      	; 0x3432 <thread_task+0x102>
    3430:	aa cf       	rjmp	.-172    	; 0x3386 <thread_task+0x56>
    3432:	80 91 7d 05 	lds	r24, 0x057D
    3436:	c8 2f       	mov	r28, r24
    3438:	d0 e0       	ldi	r29, 0x00	; 0
    343a:	01 e0       	ldi	r16, 0x01	; 1
    343c:	10 e0       	ldi	r17, 0x00	; 0
    343e:	a3 cf       	rjmp	.-186    	; 0x3386 <thread_task+0x56>
    3440:	10 92 a0 05 	sts	0x05A0, r1
    3444:	82 2f       	mov	r24, r18
    3446:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	1f 91       	pop	r17
    3450:	0f 91       	pop	r16
    3452:	ff 90       	pop	r15
    3454:	08 95       	ret
    3456:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    345a:	28 2f       	mov	r18, r24
    345c:	80 91 54 05 	lds	r24, 0x0554
    3460:	82 30       	cpi	r24, 0x02	; 2
    3462:	59 f1       	breq	.+86     	; 0x34ba <thread_task+0x18a>
    3464:	80 91 7b 05 	lds	r24, 0x057B
    3468:	82 30       	cpi	r24, 0x02	; 2
    346a:	11 f1       	breq	.+68     	; 0x34b0 <thread_task+0x180>
    346c:	c8 01       	movw	r24, r16
    346e:	88 0f       	add	r24, r24
    3470:	99 1f       	adc	r25, r25
    3472:	88 0f       	add	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	88 0f       	add	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	fc 01       	movw	r30, r24
    347c:	ee 0f       	add	r30, r30
    347e:	ff 1f       	adc	r31, r31
    3480:	ee 0f       	add	r30, r30
    3482:	ff 1f       	adc	r31, r31
    3484:	e8 0f       	add	r30, r24
    3486:	f9 1f       	adc	r31, r25
    3488:	e0 1b       	sub	r30, r16
    348a:	f1 0b       	sbc	r31, r17
    348c:	ee 5a       	subi	r30, 0xAE	; 174
    348e:	fa 4f       	sbci	r31, 0xFA	; 250
    3490:	84 81       	ldd	r24, Z+4	; 0x04
    3492:	81 50       	subi	r24, 0x01	; 1
    3494:	84 83       	std	Z+4, r24	; 0x04
    3496:	82 2f       	mov	r24, r18
    3498:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    349c:	93 cf       	rjmp	.-218    	; 0x33c4 <thread_task+0x94>
    349e:	80 91 56 05 	lds	r24, 0x0556
    34a2:	80 91 56 05 	lds	r24, 0x0556
    34a6:	c8 2f       	mov	r28, r24
    34a8:	d0 e0       	ldi	r29, 0x00	; 0
    34aa:	00 e0       	ldi	r16, 0x00	; 0
    34ac:	10 e0       	ldi	r17, 0x00	; 0
    34ae:	61 cf       	rjmp	.-318    	; 0x3372 <thread_task+0x42>
    34b0:	80 91 7c 05 	lds	r24, 0x057C
    34b4:	80 93 7d 05 	sts	0x057D, r24
    34b8:	d9 cf       	rjmp	.-78     	; 0x346c <thread_task+0x13c>
    34ba:	80 91 55 05 	lds	r24, 0x0555
    34be:	80 93 56 05 	sts	0x0556, r24
    34c2:	d0 cf       	rjmp	.-96     	; 0x3464 <thread_task+0x134>
    34c4:	c0 e0       	ldi	r28, 0x00	; 0
    34c6:	d0 e0       	ldi	r29, 0x00	; 0
    34c8:	88 e9       	ldi	r24, 0x98	; 152
    34ca:	99 e1       	ldi	r25, 0x19	; 25
    34cc:	63 e0       	ldi	r22, 0x03	; 3
    34ce:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    34d2:	ce 01       	movw	r24, r28
    34d4:	88 0f       	add	r24, r24
    34d6:	99 1f       	adc	r25, r25
    34d8:	88 0f       	add	r24, r24
    34da:	99 1f       	adc	r25, r25
    34dc:	88 0f       	add	r24, r24
    34de:	99 1f       	adc	r25, r25
    34e0:	8c 01       	movw	r16, r24
    34e2:	00 0f       	add	r16, r16
    34e4:	11 1f       	adc	r17, r17
    34e6:	00 0f       	add	r16, r16
    34e8:	11 1f       	adc	r17, r17
    34ea:	08 0f       	add	r16, r24
    34ec:	19 1f       	adc	r17, r25
    34ee:	0c 1b       	sub	r16, r28
    34f0:	1d 0b       	sbc	r17, r29
    34f2:	0e 5a       	subi	r16, 0xAE	; 174
    34f4:	1a 4f       	sbci	r17, 0xFA	; 250
    34f6:	85 e0       	ldi	r24, 0x05	; 5
    34f8:	f8 01       	movw	r30, r16
    34fa:	82 83       	std	Z+2, r24	; 0x02
    34fc:	8f 2d       	mov	r24, r15
    34fe:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3502:	f8 01       	movw	r30, r16
    3504:	25 8d       	ldd	r18, Z+29	; 0x1d
    3506:	36 8d       	ldd	r19, Z+30	; 0x1e
    3508:	40 e0       	ldi	r20, 0x00	; 0
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	8c 2f       	mov	r24, r28
    350e:	61 e0       	ldi	r22, 0x01	; 1
    3510:	0e 94 d5 36 	call	0x6daa	; 0x6daa <GenericTimerStart>
    3514:	81 cf       	rjmp	.-254    	; 0x3418 <thread_task+0xe8>
    3516:	c1 e0       	ldi	r28, 0x01	; 1
    3518:	d0 e0       	ldi	r29, 0x00	; 0
    351a:	d6 cf       	rjmp	.-84     	; 0x34c8 <thread_task+0x198>

0000351c <memory_conflict_detect>:

//-------------------------------------------------------------------------
uint8_t memory_conflict_detect(uint16_t createflashromstart, uint16_t
  createflashromsize, uint16_t ramstackstart, uint16_t ramstackend)
{
    351c:	af 92       	push	r10
    351e:	bf 92       	push	r11
    3520:	cf 92       	push	r12
    3522:	df 92       	push	r13
    3524:	ef 92       	push	r14
    3526:	ff 92       	push	r15
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	7c 01       	movw	r14, r24
    3532:	6a 01       	movw	r12, r20
    3534:	59 01       	movw	r10, r18
  uint8_t i;
  uint16_t userthreadromstart;
  uint16_t userthreadromend;
  uint16_t userthreadramstart;
  uint16_t userthreadramend;

  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (thread_table[i].state != STATE_NULL)
    {
      if (thread_table[i].romstart == 0)
      {
        continue;
      }
      userthreadromstart = thread_table[i].romstart;
      userthreadromend = thread_table[i].romsize / 2+userthreadromstart;
      userthreadramstart = (uint16_t)thread_table[i].ramstart;
      userthreadramend = (uint16_t)thread_table[i].ramend;
      if (!((createflashromstart > userthreadromend + 2) || 
    3536:	76 95       	lsr	r23
    3538:	67 95       	ror	r22
    353a:	68 0f       	add	r22, r24
    353c:	79 1f       	adc	r23, r25
    353e:	c3 e6       	ldi	r28, 0x63	; 99
    3540:	d5 e0       	ldi	r29, 0x05	; 5
    3542:	a0 e0       	ldi	r26, 0x00	; 0
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	fd 01       	movw	r30, r26
    3548:	ee 0f       	add	r30, r30
    354a:	ff 1f       	adc	r31, r31
    354c:	ee 0f       	add	r30, r30
    354e:	ff 1f       	adc	r31, r31
    3550:	ee 0f       	add	r30, r30
    3552:	ff 1f       	adc	r31, r31
    3554:	cf 01       	movw	r24, r30
    3556:	88 0f       	add	r24, r24
    3558:	99 1f       	adc	r25, r25
    355a:	88 0f       	add	r24, r24
    355c:	99 1f       	adc	r25, r25
    355e:	e8 0f       	add	r30, r24
    3560:	f9 1f       	adc	r31, r25
    3562:	ea 1b       	sub	r30, r26
    3564:	fb 0b       	sbc	r31, r27
    3566:	ee 5a       	subi	r30, 0xAE	; 174
    3568:	fa 4f       	sbci	r31, 0xFA	; 250
    356a:	82 81       	ldd	r24, Z+2	; 0x02
    356c:	88 23       	and	r24, r24
    356e:	11 f1       	breq	.+68     	; 0x35b4 <memory_conflict_detect+0x98>
    3570:	ee 81       	ldd	r30, Y+6	; 0x06
    3572:	ff 81       	ldd	r31, Y+7	; 0x07
    3574:	30 97       	sbiw	r30, 0x00	; 0
    3576:	f1 f0       	breq	.+60     	; 0x35b4 <memory_conflict_detect+0x98>
    3578:	08 81       	ld	r16, Y
    357a:	19 81       	ldd	r17, Y+1	; 0x01
    357c:	4a 81       	ldd	r20, Y+2	; 0x02
    357e:	5b 81       	ldd	r21, Y+3	; 0x03
    3580:	9f 01       	movw	r18, r30
    3582:	2e 5f       	subi	r18, 0xFE	; 254
    3584:	3f 4f       	sbci	r19, 0xFF	; 255
    3586:	88 85       	ldd	r24, Y+8	; 0x08
    3588:	99 85       	ldd	r25, Y+9	; 0x09
    358a:	96 95       	lsr	r25
    358c:	87 95       	ror	r24
    358e:	28 0f       	add	r18, r24
    3590:	39 1f       	adc	r19, r25
    3592:	2e 15       	cp	r18, r14
    3594:	3f 05       	cpc	r19, r15
    3596:	20 f0       	brcs	.+8      	; 0x35a0 <memory_conflict_detect+0x84>
    3598:	32 97       	sbiw	r30, 0x02	; 2
    359a:	6e 17       	cp	r22, r30
    359c:	7f 07       	cpc	r23, r31
    359e:	d8 f4       	brcc	.+54     	; 0x35d6 <memory_conflict_detect+0xba>
        (createflashromstart + createflashromsize / 2 < userthreadromstart - 2))
        )
      {
        return 1;
      }
      if (!((ramstackstart > userthreadramend + 1) || (ramstackend <
    35a0:	4f 5f       	subi	r20, 0xFF	; 255
    35a2:	5f 4f       	sbci	r21, 0xFF	; 255
    35a4:	4c 15       	cp	r20, r12
    35a6:	5d 05       	cpc	r21, r13
    35a8:	28 f0       	brcs	.+10     	; 0x35b4 <memory_conflict_detect+0x98>
    35aa:	01 50       	subi	r16, 0x01	; 1
    35ac:	10 40       	sbci	r17, 0x00	; 0
    35ae:	a0 16       	cp	r10, r16
    35b0:	b1 06       	cpc	r11, r17
    35b2:	88 f4       	brcc	.+34     	; 0x35d6 <memory_conflict_detect+0xba>
    35b4:	11 96       	adiw	r26, 0x01	; 1
    35b6:	a7 96       	adiw	r28, 0x27	; 39
    35b8:	a2 30       	cpi	r26, 0x02	; 2
    35ba:	b1 05       	cpc	r27, r1
    35bc:	21 f6       	brne	.-120    	; 0x3546 <memory_conflict_detect+0x2a>
    35be:	80 e0       	ldi	r24, 0x00	; 0
        userthreadramstart - 1)))
      {
        return 1;
      }
    }
  }
  return 0;
}
    35c0:	df 91       	pop	r29
    35c2:	cf 91       	pop	r28
    35c4:	1f 91       	pop	r17
    35c6:	0f 91       	pop	r16
    35c8:	ff 90       	pop	r15
    35ca:	ef 90       	pop	r14
    35cc:	df 90       	pop	r13
    35ce:	cf 90       	pop	r12
    35d0:	bf 90       	pop	r11
    35d2:	af 90       	pop	r10
    35d4:	08 95       	ret
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	f3 cf       	rjmp	.-26     	; 0x35c0 <memory_conflict_detect+0xa4>

000035da <check_for_memory_corrupt>:


/* thread_task
 */
int check_for_memory_corrupt(int i)
{
    35da:	9c 01       	movw	r18, r24
  uint16_t *kernelptr;
  uint16_t *ram_start,  *ram_end;
  uint16_t sizeofBss;

  ram_start = thread_table[i].ramstart;
  ram_end = thread_table[i].ramend;
  sizeofBss = thread_table[i].sizeofBss;
  kernelptr = (uint16_t*)((uint8_t*)ram_start + sizeofBss);
    35dc:	ac 01       	movw	r20, r24
    35de:	44 0f       	add	r20, r20
    35e0:	55 1f       	adc	r21, r21
    35e2:	44 0f       	add	r20, r20
    35e4:	55 1f       	adc	r21, r21
    35e6:	44 0f       	add	r20, r20
    35e8:	55 1f       	adc	r21, r21
    35ea:	fa 01       	movw	r30, r20
    35ec:	ee 0f       	add	r30, r30
    35ee:	ff 1f       	adc	r31, r31
    35f0:	ee 0f       	add	r30, r30
    35f2:	ff 1f       	adc	r31, r31
    35f4:	e4 0f       	add	r30, r20
    35f6:	f5 1f       	adc	r31, r21
    35f8:	e8 1b       	sub	r30, r24
    35fa:	f9 0b       	sbc	r31, r25
    35fc:	ee 5a       	subi	r30, 0xAE	; 174
    35fe:	fa 4f       	sbci	r31, 0xFA	; 250
    3600:	a1 89       	ldd	r26, Z+17	; 0x11
    3602:	b2 89       	ldd	r27, Z+18	; 0x12
    3604:	85 89       	ldd	r24, Z+21	; 0x15
    3606:	96 89       	ldd	r25, Z+22	; 0x16
    3608:	a8 0f       	add	r26, r24
    360a:	b9 1f       	adc	r27, r25
  if ((*kernelptr != 0xeeff) || (*(kernelptr + 1) != 0xeeff))
    360c:	8d 91       	ld	r24, X+
    360e:	9c 91       	ld	r25, X
    3610:	11 97       	sbiw	r26, 0x01	; 1
    3612:	8f 5f       	subi	r24, 0xFF	; 255
    3614:	9e 4e       	sbci	r25, 0xEE	; 238
    3616:	39 f4       	brne	.+14     	; 0x3626 <check_for_memory_corrupt+0x4c>
    3618:	12 96       	adiw	r26, 0x02	; 2
    361a:	8d 91       	ld	r24, X+
    361c:	9c 91       	ld	r25, X
    361e:	13 97       	sbiw	r26, 0x03	; 3
    3620:	8f 5f       	subi	r24, 0xFF	; 255
    3622:	9e 4e       	sbci	r25, 0xEE	; 238
    3624:	79 f0       	breq	.+30     	; 0x3644 <check_for_memory_corrupt+0x6a>
  {
    thread_table[i].state = STATE_MEM_ERROR;
    3626:	fa 01       	movw	r30, r20
    3628:	ee 0f       	add	r30, r30
    362a:	ff 1f       	adc	r31, r31
    362c:	ee 0f       	add	r30, r30
    362e:	ff 1f       	adc	r31, r31
    3630:	e4 0f       	add	r30, r20
    3632:	f5 1f       	adc	r31, r21
    3634:	e2 1b       	sub	r30, r18
    3636:	f3 0b       	sbc	r31, r19
    3638:	ee 5a       	subi	r30, 0xAE	; 174
    363a:	fa 4f       	sbci	r31, 0xFA	; 250
    363c:	89 e0       	ldi	r24, 0x09	; 9
    363e:	82 83       	std	Z+2, r24	; 0x02
    3640:	2f ef       	ldi	r18, 0xFF	; 255
    3642:	3f ef       	ldi	r19, 0xFF	; 255
    return  - 1;
  }
  return i;
  
}
    3644:	c9 01       	movw	r24, r18
    3646:	08 95       	ret

00003648 <getKernelStackAddress>:



//-------------------------------------------------------------------------
void ServiceTimerFired(uint8_t id)
{
  if (id == 9)
  {
    if (thread_task_active == 0)
    {
      postTask(thread_task, 2);
    }
  }
  else
  {
    thread_wakeup(id);
  }
}





//-------------------------------------------------------------------------
void **getKernelStackAddress()
{
    3648:	8e e4       	ldi	r24, 0x4E	; 78
    364a:	95 e0       	ldi	r25, 0x05	; 5
    364c:	08 95       	ret

0000364e <getThreadIndexAddress>:
  void **addr;

  addr = (void **) &old_stack_ptr;

  return addr;
}

//void getThreadIndexAddress() __attribute__((naked));
int getThreadIndexAddress()
{
    364e:	4f 93       	push	r20
    3650:	5f 93       	push	r21
  int i;
  uint16_t index;
  asm volatile("push r20""\n\t""push r21""\n\t"::);

  index = 0;
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    if (current_thread ==  &(thread_table[i]))
    3652:	80 91 50 05 	lds	r24, 0x0550
    3656:	90 91 51 05 	lds	r25, 0x0551
    365a:	25 e0       	ldi	r18, 0x05	; 5
    365c:	82 35       	cpi	r24, 0x52	; 82
    365e:	92 07       	cpc	r25, r18
    3660:	49 f0       	breq	.+18     	; 0x3674 <getThreadIndexAddress+0x26>
    3662:	89 57       	subi	r24, 0x79	; 121
    3664:	95 40       	sbci	r25, 0x05	; 5
    3666:	51 f0       	breq	.+20     	; 0x367c <getThreadIndexAddress+0x2e>
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    {
      index = i;
      break;
    }
  }
  asm volatile("pop r21""\n\t""pop r20""\n\t"::);
    366c:	5f 91       	pop	r21
    366e:	4f 91       	pop	r20

  return index;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( index ) );
  //asm volatile("ret"::); 
}
    3670:	c9 01       	movw	r24, r18
    3672:	08 95       	ret
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	9c 01       	movw	r18, r24
    367a:	f8 cf       	rjmp	.-16     	; 0x366c <getThreadIndexAddress+0x1e>
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	9c 01       	movw	r18, r24
    3682:	f4 cf       	rjmp	.-24     	; 0x366c <getThreadIndexAddress+0x1e>

00003684 <barrier_unblock>:



/* This unblocks an IO bound thread.
 * This routine can be called from any context.
 */
void barrier_unblock(uint8_t type, uint8_t id)
{
    3684:	ff 92       	push	r15
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	08 2f       	mov	r16, r24
    368c:	f6 2e       	mov	r15, r22
  uint8_t i;
  _atomic_t currentatomic;

  currentatomic = _atomic_start();
    368e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3692:	18 2f       	mov	r17, r24
  for (i = 0; i < LITE_MAX_THREADS; i++)
  {
    //Look for a thread waiting on this IO
    if ((thread_table[i].state == STATE_IO) && 
    3694:	80 91 54 05 	lds	r24, 0x0554
    3698:	86 30       	cpi	r24, 0x06	; 6
    369a:	59 f0       	breq	.+22     	; 0x36b2 <barrier_unblock+0x2e>
    369c:	80 91 7b 05 	lds	r24, 0x057B
    36a0:	86 30       	cpi	r24, 0x06	; 6
    36a2:	a9 f0       	breq	.+42     	; 0x36ce <barrier_unblock+0x4a>
      (thread_table[i].data.iostate.type == type) && 
      (thread_table[i].data.iostate.id == id))
    {
      //Mark that thread as active
      thread_table[i].state = STATE_ACTIVE;
      postNewThreadTask();
    }
  }
  _atomic_end(currentatomic);
    36a4:	81 2f       	mov	r24, r17
    36a6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
}
    36aa:	1f 91       	pop	r17
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	08 95       	ret
    36b2:	80 91 6f 05 	lds	r24, 0x056F
    36b6:	80 17       	cp	r24, r16
    36b8:	89 f7       	brne	.-30     	; 0x369c <barrier_unblock+0x18>
    36ba:	80 91 70 05 	lds	r24, 0x0570
    36be:	8f 15       	cp	r24, r15
    36c0:	69 f7       	brne	.-38     	; 0x369c <barrier_unblock+0x18>
    36c2:	82 e0       	ldi	r24, 0x02	; 2
    36c4:	80 93 54 05 	sts	0x0554, r24
    36c8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <postNewThreadTask>
    36cc:	e7 cf       	rjmp	.-50     	; 0x369c <barrier_unblock+0x18>
    36ce:	80 91 96 05 	lds	r24, 0x0596
    36d2:	80 17       	cp	r24, r16
    36d4:	39 f7       	brne	.-50     	; 0x36a4 <barrier_unblock+0x20>
    36d6:	80 91 97 05 	lds	r24, 0x0597
    36da:	8f 15       	cp	r24, r15
    36dc:	19 f7       	brne	.-58     	; 0x36a4 <barrier_unblock+0x20>
    36de:	82 e0       	ldi	r24, 0x02	; 2
    36e0:	80 93 7b 05 	sts	0x057B, r24
    36e4:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <postNewThreadTask>
    36e8:	dd cf       	rjmp	.-70     	; 0x36a4 <barrier_unblock+0x20>

000036ea <ServiceTimerFired>:
    36ea:	89 30       	cpi	r24, 0x09	; 9
    36ec:	29 f4       	brne	.+10     	; 0x36f8 <ServiceTimerFired+0xe>
    36ee:	80 91 a0 05 	lds	r24, 0x05A0
    36f2:	88 23       	and	r24, r24
    36f4:	21 f0       	breq	.+8      	; 0x36fe <ServiceTimerFired+0x14>
    36f6:	08 95       	ret
    36f8:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <thread_wakeup>
    36fc:	08 95       	ret
    36fe:	88 e9       	ldi	r24, 0x98	; 152
    3700:	99 e1       	ldi	r25, 0x19	; 25
    3702:	62 e0       	ldi	r22, 0x02	; 2
    3704:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    3708:	08 95       	ret

0000370a <__vector_21>:


//The critical ISR function to come back when the interrupt of ADC finishes 
ISR(ADC_vect)
{
    370a:	1f 92       	push	r1
    370c:	0f 92       	push	r0
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	0f 92       	push	r0
    3712:	11 24       	eor	r1, r1
    ADCSRA |= _BV(ADIF);
    3714:	34 9a       	sbi	0x06, 4	; 6
    ADCSRA &= ~_BV(ADEN);       // disable interrupt
    3716:	37 98       	cbi	0x06, 7	; 6
    //   flag = 1;
}
    3718:	0f 90       	pop	r0
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	0f 90       	pop	r0
    371e:	1f 90       	pop	r1
    3720:	18 95       	reti

00003722 <adcdriver_init_adc>:

//-------------------------------------------------------------------------
void adcdriver_init_adc()
{
    3722:	17 b8       	out	0x07, r1	; 7
    ADMUX = 0;
    ADCSRA = _BV(ADIE) | 6;
    3724:	8e e0       	ldi	r24, 0x0E	; 14
    3726:	86 b9       	out	0x06, r24	; 6
    // does not enable interrupt and set prescaler to 64
}
    3728:	08 95       	ret

0000372a <get_adc>:

//poll based approach. After all, requrieing another adc thread is just too expensive!
uint16_t get_adc(int channel)
{
    372a:	17 b8       	out	0x07, r1	; 7
    uint16_t reading;

    ADMUX = 0;
    ADMUX |= (channel & 0x1F);
    372c:	97 b1       	in	r25, 0x07	; 7
    372e:	8f 71       	andi	r24, 0x1F	; 31
    3730:	89 2b       	or	r24, r25
    3732:	87 b9       	out	0x07, r24	; 7
    ADCSRA &= ~(1 << ADIE);
    3734:	33 98       	cbi	0x06, 3	; 6
    ADCSRA |= (1 << ADIF);
    3736:	34 9a       	sbi	0x06, 4	; 6
    ADCSRA |= (1 << ADEN) | (1 << ADSC);
    3738:	86 b1       	in	r24, 0x06	; 6
    373a:	80 6c       	ori	r24, 0xC0	; 192
    373c:	86 b9       	out	0x06, r24	; 6
    // start conversion
    while (ADCSRA & (1 << ADSC))
    373e:	36 99       	sbic	0x06, 6	; 6
    3740:	fe cf       	rjmp	.-4      	; 0x373e <get_adc+0x14>
        ;
    //the interrupt based adc is currently not used. 
    //while (flag == 0); 
    //flag = 0; 
    reading = ADCL;
    3742:	84 b1       	in	r24, 0x04	; 4
    3744:	90 e0       	ldi	r25, 0x00	; 0
    reading |= (ADCH & 3) << 8;
    3746:	25 b1       	in	r18, 0x05	; 5
    ADCSRA &= ~_BV(ADEN);
    3748:	37 98       	cbi	0x06, 7	; 6
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	23 70       	andi	r18, 0x03	; 3
    374e:	30 70       	andi	r19, 0x00	; 0
    3750:	32 2f       	mov	r19, r18
    3752:	22 27       	eor	r18, r18
    3754:	28 2b       	or	r18, r24
    3756:	39 2b       	or	r19, r25
    return reading;
}
    3758:	c9 01       	movw	r24, r18
    375a:	08 95       	ret

0000375c <get_light>:

//-------------------------------------------------------------------------
uint16_t get_light()
{
    375c:	1e 98       	cbi	0x03, 6	; 3
    uint16_t reading;

    PORTE &= ~_BV(6);
    DDRE &= ~_BV(6);
    375e:	16 98       	cbi	0x02, 6	; 2
    PORTE |= _BV(5);
    3760:	1d 9a       	sbi	0x03, 5	; 3
    DDRE |= _BV(5);
    3762:	15 9a       	sbi	0x02, 5	; 2
    reading = get_adc(LIGHT_CHANNEL);
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	0e 94 95 1b 	call	0x372a	; 0x372a <get_adc>
    PORTE &= ~_BV(5);
    376c:	1d 98       	cbi	0x03, 5	; 3
    DDRE &= ~_BV(5);
    376e:	15 98       	cbi	0x02, 5	; 2
    return reading;
}
    3770:	08 95       	ret

00003772 <get_temp>:

//-------------------------------------------------------------------------
uint16_t get_temp()
{
    3772:	1d 98       	cbi	0x03, 5	; 3
    uint16_t reading;

    PORTE &= ~_BV(5);
    DDRE &= ~_BV(5);
    3774:	15 98       	cbi	0x02, 5	; 2
    PORTE |= _BV(6);
    3776:	1e 9a       	sbi	0x03, 6	; 3
    DDRE |= _BV(6);
    3778:	16 9a       	sbi	0x02, 6	; 2
    reading = get_adc(TEMP_CHANNEL);
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	0e 94 95 1b 	call	0x372a	; 0x372a <get_adc>
    PORTE &= ~_BV(6);
    3782:	1e 98       	cbi	0x03, 6	; 3
    DDRE &= ~_BV(6);
    3784:	16 98       	cbi	0x02, 6	; 2
    return reading;
}
    3786:	08 95       	ret

00003788 <get_magx>:

//-------------------------------------------------------------------------
uint16_t get_magx()
{
    3788:	a5 9a       	sbi	0x14, 5	; 20
    uint16_t reading;

    DDRC |= _BV(5);
    PORTC |= _BV(5);
    378a:	ad 9a       	sbi	0x15, 5	; 21
    reading = get_adc(MAGX_CHANNEL);
    378c:	85 e0       	ldi	r24, 0x05	; 5
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	0e 94 95 1b 	call	0x372a	; 0x372a <get_adc>
    DDRC &= ~_BV(5);
    3794:	a5 98       	cbi	0x14, 5	; 20
    PORTC &= ~_BV(5);
    3796:	ad 98       	cbi	0x15, 5	; 21
    return reading;
}
    3798:	08 95       	ret

0000379a <get_magy>:

//-------------------------------------------------------------------------
uint16_t get_magy()
{
    379a:	a5 9a       	sbi	0x14, 5	; 20
    uint16_t reading;

    DDRC |= _BV(5);
    PORTC |= _BV(5);
    379c:	ad 9a       	sbi	0x15, 5	; 21
    reading = get_adc(MAGY_CHANNEL);
    379e:	86 e0       	ldi	r24, 0x06	; 6
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	0e 94 95 1b 	call	0x372a	; 0x372a <get_adc>
    DDRC &= ~_BV(5);
    37a6:	a5 98       	cbi	0x14, 5	; 20
    PORTC &= ~_BV(5);
    37a8:	ad 98       	cbi	0x15, 5	; 21
    return reading;
}
    37aa:	08 95       	ret

000037ac <get_accx>:

//-------------------------------------------------------------------------
uint16_t get_accx()
{
    37ac:	a4 9a       	sbi	0x14, 4	; 20
    uint16_t reading;

    DDRC |= _BV(4);
    PORTC |= _BV(4);
    37ae:	ac 9a       	sbi	0x15, 4	; 21
    reading = get_adc(ACCX_CHANNEL);
    37b0:	83 e0       	ldi	r24, 0x03	; 3
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	0e 94 95 1b 	call	0x372a	; 0x372a <get_adc>
    DDRC &= ~_BV(4);
    37b8:	a4 98       	cbi	0x14, 4	; 20
    PORTC &= ~_BV(4);
    37ba:	ac 98       	cbi	0x15, 4	; 21
    return reading;
}
    37bc:	08 95       	ret

000037be <get_accy>:

//-------------------------------------------------------------------------
uint16_t get_accy()
{
    37be:	a4 9a       	sbi	0x14, 4	; 20
    uint16_t reading;

    DDRC |= _BV(4);
    PORTC |= _BV(4);
    37c0:	ac 9a       	sbi	0x15, 4	; 21
    reading = get_adc(ACCY_CHANNEL);
    37c2:	84 e0       	ldi	r24, 0x04	; 4
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	0e 94 95 1b 	call	0x372a	; 0x372a <get_adc>
    DDRC &= ~_BV(4);
    37ca:	a4 98       	cbi	0x14, 4	; 20
    PORTC &= ~_BV(4);
    37cc:	ac 98       	cbi	0x15, 4	; 21
    return reading;
}
    37ce:	08 95       	ret

000037d0 <Leds_yellowOff>:
}

//-------------------------------------------------------------------------
void Leds_yellowOff()
{
    37d0:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    37d2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    37d6:	18 2f       	mov	r17, r24

        LITE_SET_YELLOW_LED_PIN();
    37d8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LITE_SET_YELLOW_LED_PIN>
        Leds_ledsOn &= ~Leds_YELLOW_BIT;
    37dc:	80 91 a5 05 	lds	r24, 0x05A5
    37e0:	8b 7f       	andi	r24, 0xFB	; 251
    37e2:	80 93 a5 05 	sts	0x05A5, r24
        _atomic_end(_atomic);
    37e6:	81 2f       	mov	r24, r17
    37e8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    }
    return;
}
    37ec:	1f 91       	pop	r17
    37ee:	08 95       	ret

000037f0 <Leds_yellowOn>:
    37f0:	1f 93       	push	r17
    37f2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    37f6:	18 2f       	mov	r17, r24
    37f8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LITE_CLR_YELLOW_LED_PIN>
    37fc:	80 91 a5 05 	lds	r24, 0x05A5
    3800:	84 60       	ori	r24, 0x04	; 4
    3802:	80 93 a5 05 	sts	0x05A5, r24
    3806:	81 2f       	mov	r24, r17
    3808:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    380c:	1f 91       	pop	r17
    380e:	08 95       	ret

00003810 <Leds_yellowToggle>:

//-------------------------------------------------------------------------
void Leds_yellowToggle()
{
    3810:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    3812:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3816:	18 2f       	mov	r17, r24

        if (Leds_ledsOn & Leds_YELLOW_BIT)
    3818:	80 91 a5 05 	lds	r24, 0x05A5
    381c:	82 fd       	sbrc	r24, 2
    381e:	07 c0       	rjmp	.+14     	; 0x382e <Leds_yellowToggle+0x1e>
        {
            Leds_yellowOff();
        }
        else
        {
            Leds_yellowOn();
    3820:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <Leds_yellowOn>
        }
        _atomic_end(_atomic);
    3824:	81 2f       	mov	r24, r17
    3826:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    }
    return;
}
    382a:	1f 91       	pop	r17
    382c:	08 95       	ret
    382e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <Leds_yellowOff>
    3832:	81 2f       	mov	r24, r17
    3834:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3838:	1f 91       	pop	r17
    383a:	08 95       	ret

0000383c <Leds_greenOff>:
    383c:	1f 93       	push	r17
    383e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3842:	18 2f       	mov	r17, r24
    3844:	0e 94 4b 02 	call	0x496	; 0x496 <LITE_SET_GREEN_LED_PIN>
    3848:	80 91 a5 05 	lds	r24, 0x05A5
    384c:	8d 7f       	andi	r24, 0xFD	; 253
    384e:	80 93 a5 05 	sts	0x05A5, r24
    3852:	81 2f       	mov	r24, r17
    3854:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3858:	1f 91       	pop	r17
    385a:	08 95       	ret

0000385c <Leds_greenOn>:
    385c:	1f 93       	push	r17
    385e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3862:	18 2f       	mov	r17, r24
    3864:	0e 94 4d 02 	call	0x49a	; 0x49a <LITE_CLR_GREEN_LED_PIN>
    3868:	80 91 a5 05 	lds	r24, 0x05A5
    386c:	82 60       	ori	r24, 0x02	; 2
    386e:	80 93 a5 05 	sts	0x05A5, r24
    3872:	81 2f       	mov	r24, r17
    3874:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3878:	1f 91       	pop	r17
    387a:	08 95       	ret

0000387c <Leds_greenToggle>:
    387c:	1f 93       	push	r17
    387e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3882:	18 2f       	mov	r17, r24
    3884:	80 91 a5 05 	lds	r24, 0x05A5
    3888:	81 fd       	sbrc	r24, 1
    388a:	07 c0       	rjmp	.+14     	; 0x389a <Leds_greenToggle+0x1e>
    388c:	0e 94 2e 1c 	call	0x385c	; 0x385c <Leds_greenOn>
    3890:	81 2f       	mov	r24, r17
    3892:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3896:	1f 91       	pop	r17
    3898:	08 95       	ret
    389a:	0e 94 1e 1c 	call	0x383c	; 0x383c <Leds_greenOff>
    389e:	81 2f       	mov	r24, r17
    38a0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    38a4:	1f 91       	pop	r17
    38a6:	08 95       	ret

000038a8 <Leds_redOff>:
    38a8:	1f 93       	push	r17
    38aa:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    38ae:	18 2f       	mov	r17, r24
    38b0:	0e 94 39 02 	call	0x472	; 0x472 <LITE_SET_RED_LED_PIN>
    38b4:	80 91 a5 05 	lds	r24, 0x05A5
    38b8:	8e 7f       	andi	r24, 0xFE	; 254
    38ba:	80 93 a5 05 	sts	0x05A5, r24
    38be:	81 2f       	mov	r24, r17
    38c0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    38c4:	1f 91       	pop	r17
    38c6:	08 95       	ret

000038c8 <Leds_redOn>:
    38c8:	1f 93       	push	r17
    38ca:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    38ce:	18 2f       	mov	r17, r24
    38d0:	0e 94 3b 02 	call	0x476	; 0x476 <LITE_CLR_RED_LED_PIN>
    38d4:	80 91 a5 05 	lds	r24, 0x05A5
    38d8:	81 60       	ori	r24, 0x01	; 1
    38da:	80 93 a5 05 	sts	0x05A5, r24
    38de:	81 2f       	mov	r24, r17
    38e0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    38e4:	1f 91       	pop	r17
    38e6:	08 95       	ret

000038e8 <Leds_redToggle>:
    38e8:	1f 93       	push	r17
    38ea:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    38ee:	18 2f       	mov	r17, r24
    38f0:	80 91 a5 05 	lds	r24, 0x05A5
    38f4:	80 fd       	sbrc	r24, 0
    38f6:	07 c0       	rjmp	.+14     	; 0x3906 <Leds_redToggle+0x1e>
    38f8:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <Leds_redOn>
    38fc:	81 2f       	mov	r24, r17
    38fe:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3902:	1f 91       	pop	r17
    3904:	08 95       	ret
    3906:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <Leds_redOff>
    390a:	81 2f       	mov	r24, r17
    390c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3910:	1f 91       	pop	r17
    3912:	08 95       	ret

00003914 <Leds_Leds>:
    3914:	1f 93       	push	r17
    3916:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    391a:	18 2f       	mov	r17, r24
    391c:	10 92 a5 05 	sts	0x05A5, r1
    3920:	0e 94 47 02 	call	0x48e	; 0x48e <LITE_MAKE_RED_LED_OUTPUT>
    3924:	0e 94 65 02 	call	0x4ca	; 0x4ca <LITE_MAKE_YELLOW_LED_OUTPUT>
    3928:	0e 94 57 02 	call	0x4ae	; 0x4ae <LITE_MAKE_GREEN_LED_OUTPUT>
    392c:	0e 94 39 02 	call	0x472	; 0x472 <LITE_SET_RED_LED_PIN>
    3930:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LITE_SET_YELLOW_LED_PIN>
    3934:	0e 94 4b 02 	call	0x496	; 0x496 <LITE_SET_GREEN_LED_PIN>
    3938:	81 2f       	mov	r24, r17
    393a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    393e:	1f 91       	pop	r17
    3940:	08 95       	ret

00003942 <sounder_init>:
#include "../hardware/avrhardware.h"
#include "sounder.h"
//--------------------------------------
void sounder_init()
{
    3942:	1f 93       	push	r17
    //activate the sounder
    {
        _atomic_t _atomic = _atomic_start();
    3944:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3948:	18 2f       	mov	r17, r24

        LITE_MAKE_PW2_OUTPUT();
    394a:	0e 94 aa 03 	call	0x754	; 0x754 <LITE_MAKE_PW2_OUTPUT>
        _atomic_end(_atomic);
    394e:	81 2f       	mov	r24, r17
    3950:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    }
}
    3954:	1f 91       	pop	r17
    3956:	08 95       	ret

00003958 <sounderOff>:

//--------------------------------------
void sounderOn()
{
    {
        _atomic_t _atomic = _atomic_start();

        sounder_init();
        LITE_SET_PW2_PIN();
        _atomic_end(_atomic);
    }
    return;
}

//--------------------------------------
void sounderOff()
{
    3958:	1f 93       	push	r17
    {
        _atomic_t _atomic = _atomic_start();
    395a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    395e:	18 2f       	mov	r17, r24

        sounder_init();
    3960:	0e 94 a1 1c 	call	0x3942	; 0x3942 <sounder_init>
        LITE_CLR_PW2_PIN();
    3964:	0e 94 9e 03 	call	0x73c	; 0x73c <LITE_CLR_PW2_PIN>
        _atomic_end(_atomic);
    3968:	81 2f       	mov	r24, r17
    396a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    }
    return;
}
    396e:	1f 91       	pop	r17
    3970:	08 95       	ret

00003972 <sounderOn>:
    3972:	1f 93       	push	r17
    3974:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3978:	18 2f       	mov	r17, r24
    397a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <sounder_init>
    397e:	0e 94 9c 03 	call	0x738	; 0x738 <LITE_SET_PW2_PIN>
    3982:	81 2f       	mov	r24, r17
    3984:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3988:	1f 91       	pop	r17
    398a:	08 95       	ret

0000398c <write32int>:
}

//-------------------------------------------------------------------------
void write32int(uint16_t addr, int32_t value)
{
    398c:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <eeprom_write32int>
    eeprom_write32int(addr, value);
}
    3990:	08 95       	ret

00003992 <write32uint>:
    3992:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <eeprom_write32uint>
    3996:	08 95       	ret

00003998 <write16int>:
    3998:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <eeprom_write16int>
    399c:	08 95       	ret

0000399e <write16uint>:
    399e:	0e 94 75 1d 	call	0x3aea	; 0x3aea <eeprom_write16uint>
    39a2:	08 95       	ret

000039a4 <write8int>:
    39a4:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <eeprom_write8int>
    39a8:	08 95       	ret

000039aa <write8uint>:
    39aa:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <eeprom_write8uint>
    39ae:	08 95       	ret

000039b0 <read32int>:
    39b0:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <eeprom_read32int>
    39b4:	08 95       	ret

000039b6 <read32uint>:
    39b6:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <eeprom_read32uint>
    39ba:	08 95       	ret

000039bc <read16int>:
    39bc:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <eeprom_read16int>
    39c0:	08 95       	ret

000039c2 <read16uint>:
    39c2:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <eeprom_read16uint>
    39c6:	08 95       	ret

000039c8 <read8int>:
    39c8:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <eeprom_read8int>
    39cc:	08 95       	ret

000039ce <read8uint>:
    39ce:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <eeprom_read8uint>
    39d2:	08 95       	ret

000039d4 <initBytes>:
    39d4:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <eeprom_initBytes>
    39d8:	08 95       	ret

000039da <genericwriteBytes>:
    39da:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <eeprom_writeBytes>
    39de:	08 95       	ret

000039e0 <genericreadBytes>:
    39e0:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <eeprom_readBytes>
    39e4:	08 95       	ret

000039e6 <eeprom_write32int>:
}

//-------------------------------------------------------------------------
void eeprom_write32int(uint16_t addr, int32_t value)
{
    39e6:	bf 92       	push	r11
    39e8:	cf 92       	push	r12
    39ea:	df 92       	push	r13
    39ec:	ef 92       	push	r14
    39ee:	ff 92       	push	r15
    39f0:	0f 93       	push	r16
    39f2:	1f 93       	push	r17
    39f4:	df 93       	push	r29
    39f6:	cf 93       	push	r28
    39f8:	00 d0       	rcall	.+0      	; 0x39fa <eeprom_write32int+0x14>
    39fa:	00 d0       	rcall	.+0      	; 0x39fc <eeprom_write32int+0x16>
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	6c 01       	movw	r12, r24
    3a02:	49 83       	std	Y+1, r20	; 0x01
    3a04:	5a 83       	std	Y+2, r21	; 0x02
    3a06:	6b 83       	std	Y+3, r22	; 0x03
    3a08:	7c 83       	std	Y+4, r23	; 0x04
    uint16_t value1;
    uint32_t value2;
    _atomic_t _atomic = _atomic_start();
    3a0a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3a0e:	b8 2e       	mov	r11, r24

    value1 = (uint16_t) ((*(uint32_t *) & value) >> 16);
    3a10:	e9 80       	ldd	r14, Y+1	; 0x01
    3a12:	fa 80       	ldd	r15, Y+2	; 0x02
    3a14:	0b 81       	ldd	r16, Y+3	; 0x03
    3a16:	1c 81       	ldd	r17, Y+4	; 0x04
    value2 = (uint16_t) ((*(uint32_t *) & value) & 0x0000ffff);
    eeprom_busy_wait();
    3a18:	e1 99       	sbic	0x1c, 1	; 28
    3a1a:	fe cf       	rjmp	.-4      	; 0x3a18 <eeprom_write32int+0x32>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value2);
    3a1c:	c6 01       	movw	r24, r12
    3a1e:	b7 01       	movw	r22, r14
    3a20:	0e 94 77 55 	call	0xaaee	; 0xaaee <__eewr_word_m128>
    addr = addr + 2;
    eeprom_busy_wait();
    3a24:	e1 99       	sbic	0x1c, 1	; 28
    3a26:	fe cf       	rjmp	.-4      	; 0x3a24 <eeprom_write32int+0x3e>
    //value2 = *(uint16_t *)&value;
    eeprom_write_word((uint16_t *) addr, value1);
    3a28:	98 01       	movw	r18, r16
    3a2a:	44 27       	eor	r20, r20
    3a2c:	55 27       	eor	r21, r21
    3a2e:	c6 01       	movw	r24, r12
    3a30:	02 96       	adiw	r24, 0x02	; 2
    3a32:	b9 01       	movw	r22, r18
    3a34:	0e 94 77 55 	call	0xaaee	; 0xaaee <__eewr_word_m128>
    _atomic_end(_atomic);
    3a38:	8b 2d       	mov	r24, r11
    3a3a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    return;
}
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	1f 91       	pop	r17
    3a4c:	0f 91       	pop	r16
    3a4e:	ff 90       	pop	r15
    3a50:	ef 90       	pop	r14
    3a52:	df 90       	pop	r13
    3a54:	cf 90       	pop	r12
    3a56:	bf 90       	pop	r11
    3a58:	08 95       	ret

00003a5a <eeprom_write32uint>:
    3a5a:	df 92       	push	r13
    3a5c:	ef 92       	push	r14
    3a5e:	ff 92       	push	r15
    3a60:	0f 93       	push	r16
    3a62:	1f 93       	push	r17
    3a64:	cf 93       	push	r28
    3a66:	df 93       	push	r29
    3a68:	ec 01       	movw	r28, r24
    3a6a:	7a 01       	movw	r14, r20
    3a6c:	8b 01       	movw	r16, r22
    3a6e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3a72:	d8 2e       	mov	r13, r24
    3a74:	e1 99       	sbic	0x1c, 1	; 28
    3a76:	fe cf       	rjmp	.-4      	; 0x3a74 <eeprom_write32uint+0x1a>
    3a78:	ce 01       	movw	r24, r28
    3a7a:	b7 01       	movw	r22, r14
    3a7c:	0e 94 77 55 	call	0xaaee	; 0xaaee <__eewr_word_m128>
    3a80:	e1 99       	sbic	0x1c, 1	; 28
    3a82:	fe cf       	rjmp	.-4      	; 0x3a80 <eeprom_write32uint+0x26>
    3a84:	98 01       	movw	r18, r16
    3a86:	44 27       	eor	r20, r20
    3a88:	55 27       	eor	r21, r21
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	02 96       	adiw	r24, 0x02	; 2
    3a8e:	b9 01       	movw	r22, r18
    3a90:	0e 94 77 55 	call	0xaaee	; 0xaaee <__eewr_word_m128>
    3a94:	8d 2d       	mov	r24, r13
    3a96:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	1f 91       	pop	r17
    3aa0:	0f 91       	pop	r16
    3aa2:	ff 90       	pop	r15
    3aa4:	ef 90       	pop	r14
    3aa6:	df 90       	pop	r13
    3aa8:	08 95       	ret

00003aaa <eeprom_write16int>:
    3aaa:	ff 92       	push	r15
    3aac:	0f 93       	push	r16
    3aae:	1f 93       	push	r17
    3ab0:	df 93       	push	r29
    3ab2:	cf 93       	push	r28
    3ab4:	00 d0       	rcall	.+0      	; 0x3ab6 <eeprom_write16int+0xc>
    3ab6:	cd b7       	in	r28, 0x3d	; 61
    3ab8:	de b7       	in	r29, 0x3e	; 62
    3aba:	8c 01       	movw	r16, r24
    3abc:	7a 83       	std	Y+2, r23	; 0x02
    3abe:	69 83       	std	Y+1, r22	; 0x01
    3ac0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3ac4:	f8 2e       	mov	r15, r24
    3ac6:	e1 99       	sbic	0x1c, 1	; 28
    3ac8:	fe cf       	rjmp	.-4      	; 0x3ac6 <eeprom_write16int+0x1c>
    3aca:	69 81       	ldd	r22, Y+1	; 0x01
    3acc:	7a 81       	ldd	r23, Y+2	; 0x02
    3ace:	c8 01       	movw	r24, r16
    3ad0:	0e 94 77 55 	call	0xaaee	; 0xaaee <__eewr_word_m128>
    3ad4:	8f 2d       	mov	r24, r15
    3ad6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3ada:	0f 90       	pop	r0
    3adc:	0f 90       	pop	r0
    3ade:	cf 91       	pop	r28
    3ae0:	df 91       	pop	r29
    3ae2:	1f 91       	pop	r17
    3ae4:	0f 91       	pop	r16
    3ae6:	ff 90       	pop	r15
    3ae8:	08 95       	ret

00003aea <eeprom_write16uint>:
    3aea:	ff 92       	push	r15
    3aec:	0f 93       	push	r16
    3aee:	1f 93       	push	r17
    3af0:	cf 93       	push	r28
    3af2:	df 93       	push	r29
    3af4:	ec 01       	movw	r28, r24
    3af6:	8b 01       	movw	r16, r22
    3af8:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3afc:	f8 2e       	mov	r15, r24
    3afe:	e1 99       	sbic	0x1c, 1	; 28
    3b00:	fe cf       	rjmp	.-4      	; 0x3afe <eeprom_write16uint+0x14>
    3b02:	ce 01       	movw	r24, r28
    3b04:	b8 01       	movw	r22, r16
    3b06:	0e 94 77 55 	call	0xaaee	; 0xaaee <__eewr_word_m128>
    3b0a:	8f 2d       	mov	r24, r15
    3b0c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	ff 90       	pop	r15
    3b1a:	08 95       	ret

00003b1c <eeprom_read32int>:
    3b1c:	df 92       	push	r13
    3b1e:	ef 92       	push	r14
    3b20:	ff 92       	push	r15
    3b22:	0f 93       	push	r16
    3b24:	1f 93       	push	r17
    3b26:	df 93       	push	r29
    3b28:	cf 93       	push	r28
    3b2a:	00 d0       	rcall	.+0      	; 0x3b2c <eeprom_read32int+0x10>
    3b2c:	00 d0       	rcall	.+0      	; 0x3b2e <eeprom_read32int+0x12>
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
    3b32:	8c 01       	movw	r16, r24
    3b34:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3b38:	d8 2e       	mov	r13, r24
    3b3a:	e1 99       	sbic	0x1c, 1	; 28
    3b3c:	fe cf       	rjmp	.-4      	; 0x3b3a <eeprom_read32int+0x1e>
    3b3e:	c8 01       	movw	r24, r16
    3b40:	0e 94 5a 55 	call	0xaab4	; 0xaab4 <__eerd_word_m128>
    3b44:	7c 01       	movw	r14, r24
    3b46:	e1 99       	sbic	0x1c, 1	; 28
    3b48:	fe cf       	rjmp	.-4      	; 0x3b46 <eeprom_read32int+0x2a>
    3b4a:	c8 01       	movw	r24, r16
    3b4c:	02 96       	adiw	r24, 0x02	; 2
    3b4e:	0e 94 5a 55 	call	0xaab4	; 0xaab4 <__eerd_word_m128>
    3b52:	a0 e0       	ldi	r26, 0x00	; 0
    3b54:	b0 e0       	ldi	r27, 0x00	; 0
    3b56:	dc 01       	movw	r26, r24
    3b58:	99 27       	eor	r25, r25
    3b5a:	88 27       	eor	r24, r24
    3b5c:	97 01       	movw	r18, r14
    3b5e:	40 e0       	ldi	r20, 0x00	; 0
    3b60:	50 e0       	ldi	r21, 0x00	; 0
    3b62:	82 0f       	add	r24, r18
    3b64:	93 1f       	adc	r25, r19
    3b66:	a4 1f       	adc	r26, r20
    3b68:	b5 1f       	adc	r27, r21
    3b6a:	89 83       	std	Y+1, r24	; 0x01
    3b6c:	9a 83       	std	Y+2, r25	; 0x02
    3b6e:	ab 83       	std	Y+3, r26	; 0x03
    3b70:	bc 83       	std	Y+4, r27	; 0x04
    3b72:	8d 2d       	mov	r24, r13
    3b74:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3b78:	69 81       	ldd	r22, Y+1	; 0x01
    3b7a:	7a 81       	ldd	r23, Y+2	; 0x02
    3b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	0f 90       	pop	r0
    3b86:	0f 90       	pop	r0
    3b88:	cf 91       	pop	r28
    3b8a:	df 91       	pop	r29
    3b8c:	1f 91       	pop	r17
    3b8e:	0f 91       	pop	r16
    3b90:	ff 90       	pop	r15
    3b92:	ef 90       	pop	r14
    3b94:	df 90       	pop	r13
    3b96:	08 95       	ret

00003b98 <eeprom_read32uint>:
    3b98:	cf 92       	push	r12
    3b9a:	df 92       	push	r13
    3b9c:	ef 92       	push	r14
    3b9e:	ff 92       	push	r15
    3ba0:	0f 93       	push	r16
    3ba2:	1f 93       	push	r17
    3ba4:	cf 93       	push	r28
    3ba6:	df 93       	push	r29
    3ba8:	ec 01       	movw	r28, r24
    3baa:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3bae:	18 2f       	mov	r17, r24
    3bb0:	e1 99       	sbic	0x1c, 1	; 28
    3bb2:	fe cf       	rjmp	.-4      	; 0x3bb0 <eeprom_read32uint+0x18>
    3bb4:	ce 01       	movw	r24, r28
    3bb6:	0e 94 5a 55 	call	0xaab4	; 0xaab4 <__eerd_word_m128>
    3bba:	6c 01       	movw	r12, r24
    3bbc:	e1 99       	sbic	0x1c, 1	; 28
    3bbe:	fe cf       	rjmp	.-4      	; 0x3bbc <eeprom_read32uint+0x24>
    3bc0:	ce 01       	movw	r24, r28
    3bc2:	02 96       	adiw	r24, 0x02	; 2
    3bc4:	0e 94 5a 55 	call	0xaab4	; 0xaab4 <__eerd_word_m128>
    3bc8:	7c 01       	movw	r14, r24
    3bca:	81 2f       	mov	r24, r17
    3bcc:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3bd0:	00 e0       	ldi	r16, 0x00	; 0
    3bd2:	10 e0       	ldi	r17, 0x00	; 0
    3bd4:	87 01       	movw	r16, r14
    3bd6:	ff 24       	eor	r15, r15
    3bd8:	ee 24       	eor	r14, r14
    3bda:	c6 01       	movw	r24, r12
    3bdc:	a0 e0       	ldi	r26, 0x00	; 0
    3bde:	b0 e0       	ldi	r27, 0x00	; 0
    3be0:	e8 0e       	add	r14, r24
    3be2:	f9 1e       	adc	r15, r25
    3be4:	0a 1f       	adc	r16, r26
    3be6:	1b 1f       	adc	r17, r27
    3be8:	b7 01       	movw	r22, r14
    3bea:	c8 01       	movw	r24, r16
    3bec:	df 91       	pop	r29
    3bee:	cf 91       	pop	r28
    3bf0:	1f 91       	pop	r17
    3bf2:	0f 91       	pop	r16
    3bf4:	ff 90       	pop	r15
    3bf6:	ef 90       	pop	r14
    3bf8:	df 90       	pop	r13
    3bfa:	cf 90       	pop	r12
    3bfc:	08 95       	ret

00003bfe <eeprom_read16int>:
    3bfe:	ff 92       	push	r15
    3c00:	0f 93       	push	r16
    3c02:	1f 93       	push	r17
    3c04:	df 93       	push	r29
    3c06:	cf 93       	push	r28
    3c08:	00 d0       	rcall	.+0      	; 0x3c0a <eeprom_read16int+0xc>
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	8c 01       	movw	r16, r24
    3c10:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3c14:	f8 2e       	mov	r15, r24
    3c16:	e1 99       	sbic	0x1c, 1	; 28
    3c18:	fe cf       	rjmp	.-4      	; 0x3c16 <eeprom_read16int+0x18>
    3c1a:	c8 01       	movw	r24, r16
    3c1c:	0e 94 5a 55 	call	0xaab4	; 0xaab4 <__eerd_word_m128>
    3c20:	9a 83       	std	Y+2, r25	; 0x02
    3c22:	89 83       	std	Y+1, r24	; 0x01
    3c24:	8f 2d       	mov	r24, r15
    3c26:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2e:	0f 90       	pop	r0
    3c30:	0f 90       	pop	r0
    3c32:	cf 91       	pop	r28
    3c34:	df 91       	pop	r29
    3c36:	1f 91       	pop	r17
    3c38:	0f 91       	pop	r16
    3c3a:	ff 90       	pop	r15
    3c3c:	08 95       	ret

00003c3e <eeprom_read16uint>:
    3c3e:	ff 92       	push	r15
    3c40:	0f 93       	push	r16
    3c42:	1f 93       	push	r17
    3c44:	8c 01       	movw	r16, r24
    3c46:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3c4a:	f8 2e       	mov	r15, r24
    3c4c:	e1 99       	sbic	0x1c, 1	; 28
    3c4e:	fe cf       	rjmp	.-4      	; 0x3c4c <eeprom_read16uint+0xe>
    3c50:	c8 01       	movw	r24, r16
    3c52:	0e 94 5a 55 	call	0xaab4	; 0xaab4 <__eerd_word_m128>
    3c56:	18 2f       	mov	r17, r24
    3c58:	09 2f       	mov	r16, r25
    3c5a:	8f 2d       	mov	r24, r15
    3c5c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3c60:	81 2f       	mov	r24, r17
    3c62:	90 2f       	mov	r25, r16
    3c64:	1f 91       	pop	r17
    3c66:	0f 91       	pop	r16
    3c68:	ff 90       	pop	r15
    3c6a:	08 95       	ret

00003c6c <eeprom_write8int>:
    3c6c:	ff 92       	push	r15
    3c6e:	0f 93       	push	r16
    3c70:	1f 93       	push	r17
    3c72:	df 93       	push	r29
    3c74:	cf 93       	push	r28
    3c76:	0f 92       	push	r0
    3c78:	cd b7       	in	r28, 0x3d	; 61
    3c7a:	de b7       	in	r29, 0x3e	; 62
    3c7c:	8c 01       	movw	r16, r24
    3c7e:	69 83       	std	Y+1, r22	; 0x01
    3c80:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3c84:	f8 2e       	mov	r15, r24
    3c86:	e1 99       	sbic	0x1c, 1	; 28
    3c88:	fe cf       	rjmp	.-4      	; 0x3c86 <eeprom_write8int+0x1a>
    3c8a:	c8 01       	movw	r24, r16
    3c8c:	69 81       	ldd	r22, Y+1	; 0x01
    3c8e:	0e 94 6a 55 	call	0xaad4	; 0xaad4 <__eewr_byte_m128>
    3c92:	8f 2d       	mov	r24, r15
    3c94:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3c98:	0f 90       	pop	r0
    3c9a:	cf 91       	pop	r28
    3c9c:	df 91       	pop	r29
    3c9e:	1f 91       	pop	r17
    3ca0:	0f 91       	pop	r16
    3ca2:	ff 90       	pop	r15
    3ca4:	08 95       	ret

00003ca6 <eeprom_write8uint>:
    3ca6:	0f 93       	push	r16
    3ca8:	1f 93       	push	r17
    3caa:	cf 93       	push	r28
    3cac:	df 93       	push	r29
    3cae:	ec 01       	movw	r28, r24
    3cb0:	06 2f       	mov	r16, r22
    3cb2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3cb6:	18 2f       	mov	r17, r24
    3cb8:	e1 99       	sbic	0x1c, 1	; 28
    3cba:	fe cf       	rjmp	.-4      	; 0x3cb8 <eeprom_write8uint+0x12>
    3cbc:	ce 01       	movw	r24, r28
    3cbe:	60 2f       	mov	r22, r16
    3cc0:	0e 94 6a 55 	call	0xaad4	; 0xaad4 <__eewr_byte_m128>
    3cc4:	81 2f       	mov	r24, r17
    3cc6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	1f 91       	pop	r17
    3cd0:	0f 91       	pop	r16
    3cd2:	08 95       	ret

00003cd4 <eeprom_initBytes>:

//-------------------------------------------------------------------------
void eeprom_initBytes(uint16_t addr, int nBytes, uint8_t value)
{
    3cd4:	cf 92       	push	r12
    3cd6:	df 92       	push	r13
    3cd8:	ef 92       	push	r14
    3cda:	ff 92       	push	r15
    3cdc:	0f 93       	push	r16
    3cde:	1f 93       	push	r17
    3ce0:	cf 93       	push	r28
    3ce2:	df 93       	push	r29
    3ce4:	7c 01       	movw	r14, r24
    3ce6:	8b 01       	movw	r16, r22
    3ce8:	d4 2e       	mov	r13, r20
    int i;
    _atomic_t _atomic = _atomic_start();
    3cea:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3cee:	c8 2e       	mov	r12, r24

    for (i = 0; i < nBytes; i++)
    3cf0:	10 16       	cp	r1, r16
    3cf2:	11 06       	cpc	r1, r17
    3cf4:	64 f4       	brge	.+24     	; 0x3d0e <eeprom_initBytes+0x3a>
    3cf6:	c0 e0       	ldi	r28, 0x00	; 0
    3cf8:	d0 e0       	ldi	r29, 0x00	; 0
    {
        eeprom_write8uint(addr + i, value);
    3cfa:	ce 01       	movw	r24, r28
    3cfc:	8e 0d       	add	r24, r14
    3cfe:	9f 1d       	adc	r25, r15
    3d00:	6d 2d       	mov	r22, r13
    3d02:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <eeprom_write8uint>
    3d06:	21 96       	adiw	r28, 0x01	; 1
    3d08:	c0 17       	cp	r28, r16
    3d0a:	d1 07       	cpc	r29, r17
    3d0c:	b4 f3       	brlt	.-20     	; 0x3cfa <eeprom_initBytes+0x26>
    }
    _atomic_end(_atomic);
    3d0e:	8c 2d       	mov	r24, r12
    3d10:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
}
    3d14:	df 91       	pop	r29
    3d16:	cf 91       	pop	r28
    3d18:	1f 91       	pop	r17
    3d1a:	0f 91       	pop	r16
    3d1c:	ff 90       	pop	r15
    3d1e:	ef 90       	pop	r14
    3d20:	df 90       	pop	r13
    3d22:	cf 90       	pop	r12
    3d24:	08 95       	ret

00003d26 <eeprom_read8int>:
    3d26:	ff 92       	push	r15
    3d28:	0f 93       	push	r16
    3d2a:	1f 93       	push	r17
    3d2c:	df 93       	push	r29
    3d2e:	cf 93       	push	r28
    3d30:	0f 92       	push	r0
    3d32:	cd b7       	in	r28, 0x3d	; 61
    3d34:	de b7       	in	r29, 0x3e	; 62
    3d36:	8c 01       	movw	r16, r24
    3d38:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3d3c:	f8 2e       	mov	r15, r24
    3d3e:	e1 99       	sbic	0x1c, 1	; 28
    3d40:	fe cf       	rjmp	.-4      	; 0x3d3e <eeprom_read8int+0x18>
    3d42:	c8 01       	movw	r24, r16
    3d44:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__eerd_byte_m128>
    3d48:	89 83       	std	Y+1, r24	; 0x01
    3d4a:	8f 2d       	mov	r24, r15
    3d4c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3d50:	89 81       	ldd	r24, Y+1	; 0x01
    3d52:	0f 90       	pop	r0
    3d54:	cf 91       	pop	r28
    3d56:	df 91       	pop	r29
    3d58:	1f 91       	pop	r17
    3d5a:	0f 91       	pop	r16
    3d5c:	ff 90       	pop	r15
    3d5e:	08 95       	ret

00003d60 <eeprom_read8uint>:
    3d60:	0f 93       	push	r16
    3d62:	1f 93       	push	r17
    3d64:	cf 93       	push	r28
    3d66:	df 93       	push	r29
    3d68:	ec 01       	movw	r28, r24
    3d6a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    3d6e:	08 2f       	mov	r16, r24
    3d70:	e1 99       	sbic	0x1c, 1	; 28
    3d72:	fe cf       	rjmp	.-4      	; 0x3d70 <eeprom_read8uint+0x10>
    3d74:	ce 01       	movw	r24, r28
    3d76:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <__eerd_byte_m128>
    3d7a:	18 2f       	mov	r17, r24
    3d7c:	80 2f       	mov	r24, r16
    3d7e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    3d82:	81 2f       	mov	r24, r17
    3d84:	df 91       	pop	r29
    3d86:	cf 91       	pop	r28
    3d88:	1f 91       	pop	r17
    3d8a:	0f 91       	pop	r16
    3d8c:	08 95       	ret

00003d8e <eeprom_writeBytes>:
    3d8e:	9c 01       	movw	r18, r24
    3d90:	fb 01       	movw	r30, r22
    3d92:	e1 99       	sbic	0x1c, 1	; 28
    3d94:	fe cf       	rjmp	.-4      	; 0x3d92 <eeprom_writeBytes+0x4>
    3d96:	ca 01       	movw	r24, r20
    3d98:	b9 01       	movw	r22, r18
    3d9a:	af 01       	movw	r20, r30
    3d9c:	0e 94 60 55 	call	0xaac0	; 0xaac0 <__eewr_block_m128>
    3da0:	08 95       	ret

00003da2 <eeprom_readBytes>:
    3da2:	9c 01       	movw	r18, r24
    3da4:	fb 01       	movw	r30, r22
    3da6:	e1 99       	sbic	0x1c, 1	; 28
    3da8:	fe cf       	rjmp	.-4      	; 0x3da6 <eeprom_readBytes+0x4>
    3daa:	ca 01       	movw	r24, r20
    3dac:	b9 01       	movw	r22, r18
    3dae:	af 01       	movw	r20, r30
    3db0:	0e 94 42 55 	call	0xaa84	; 0xaa84 <__eerd_block_m128>
    3db4:	08 95       	ret

00003db6 <initFidTable>:
}

//-------------------------------------------------------------------------
void initFidTable()
{
    3db6:	10 92 a6 05 	sts	0x05A6, r1
    3dba:	10 92 b0 05 	sts	0x05B0, r1
   int i;
   for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   {
      fidtable[ i ].valid = 0;
   }
}
    3dbe:	08 95       	ret

00003dc0 <getFreeFid>:

//-------------------------------------------------------------------------
int getFreeFid()
{
    3dc0:	80 91 a6 05 	lds	r24, 0x05A6
    3dc4:	88 23       	and	r24, r24
    3dc6:	81 f1       	breq	.+96     	; 0x3e28 <getFreeFid+0x68>
    3dc8:	80 91 b0 05 	lds	r24, 0x05B0
    3dcc:	88 23       	and	r24, r24
    3dce:	79 f1       	breq	.+94     	; 0x3e2e <getFreeFid+0x6e>
   int i;
   for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   {
      if ( fidtable[ i ].valid == 0 )
      {
         break;
    3dd0:	42 e0       	ldi	r20, 0x02	; 2
    3dd2:	50 e0       	ldi	r21, 0x00	; 0
      }
   }
   fidtable[ i ].valid = 1;
    3dd4:	9a 01       	movw	r18, r20
    3dd6:	22 0f       	add	r18, r18
    3dd8:	33 1f       	adc	r19, r19
    3dda:	ca 01       	movw	r24, r20
    3ddc:	88 0f       	add	r24, r24
    3dde:	99 1f       	adc	r25, r25
    3de0:	88 0f       	add	r24, r24
    3de2:	99 1f       	adc	r25, r25
    3de4:	88 0f       	add	r24, r24
    3de6:	99 1f       	adc	r25, r25
    3de8:	28 0f       	add	r18, r24
    3dea:	39 1f       	adc	r19, r25
    3dec:	2a 55       	subi	r18, 0x5A	; 90
    3dee:	3a 4f       	sbci	r19, 0xFA	; 250
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	f9 01       	movw	r30, r18
    3df4:	80 83       	st	Z, r24
   fidtable[ i ].index = i;
    3df6:	41 83       	std	Z+1, r20	; 0x01
   fidtable[ i ].addr = fidtable[ i ].mode = 0;
    3df8:	13 82       	std	Z+3, r1	; 0x03
    3dfa:	fa 01       	movw	r30, r20
    3dfc:	ee 0f       	add	r30, r30
    3dfe:	ff 1f       	adc	r31, r31
    3e00:	ee 0f       	add	r30, r30
    3e02:	ff 1f       	adc	r31, r31
    3e04:	e4 0f       	add	r30, r20
    3e06:	f5 1f       	adc	r31, r21
    3e08:	ee 0f       	add	r30, r30
    3e0a:	ff 1f       	adc	r31, r31
    3e0c:	e8 55       	subi	r30, 0x58	; 88
    3e0e:	fa 4f       	sbci	r31, 0xFA	; 250
    3e10:	10 82       	st	Z, r1
   fidtable[ i ].fpos =  - 1;
    3e12:	8f ef       	ldi	r24, 0xFF	; 255
    3e14:	9f ef       	ldi	r25, 0xFF	; 255
    3e16:	af ef       	ldi	r26, 0xFF	; 255
    3e18:	bf ef       	ldi	r27, 0xFF	; 255
    3e1a:	f9 01       	movw	r30, r18
    3e1c:	86 83       	std	Z+6, r24	; 0x06
    3e1e:	97 83       	std	Z+7, r25	; 0x07
    3e20:	a0 87       	std	Z+8, r26	; 0x08
    3e22:	b1 87       	std	Z+9, r27	; 0x09
   return i;
}
    3e24:	ca 01       	movw	r24, r20
    3e26:	08 95       	ret
    3e28:	40 e0       	ldi	r20, 0x00	; 0
    3e2a:	50 e0       	ldi	r21, 0x00	; 0
    3e2c:	d3 cf       	rjmp	.-90     	; 0x3dd4 <getFreeFid+0x14>
    3e2e:	41 e0       	ldi	r20, 0x01	; 1
    3e30:	50 e0       	ldi	r21, 0x00	; 0
    3e32:	d0 cf       	rjmp	.-96     	; 0x3dd4 <getFreeFid+0x14>

00003e34 <releaseFid>:

//-------------------------------------------------------------------------
void releaseFid( int fid )
{
    3e34:	9c 01       	movw	r18, r24
    3e36:	fc 01       	movw	r30, r24
    3e38:	ee 0f       	add	r30, r30
    3e3a:	ff 1f       	adc	r31, r31
    3e3c:	ee 0f       	add	r30, r30
    3e3e:	ff 1f       	adc	r31, r31
    3e40:	ee 0f       	add	r30, r30
    3e42:	ff 1f       	adc	r31, r31
    3e44:	22 0f       	add	r18, r18
    3e46:	33 1f       	adc	r19, r19
    3e48:	e2 0f       	add	r30, r18
    3e4a:	f3 1f       	adc	r31, r19
    3e4c:	ea 55       	subi	r30, 0x5A	; 90
    3e4e:	fa 4f       	sbci	r31, 0xFA	; 250
    3e50:	10 82       	st	Z, r1
   fidtable[ fid ].valid = 0;
}
    3e52:	08 95       	ret

00003e54 <releaseAllFid>:

//-------------------------------------------------------------------------
void releaseAllFid()
{
    3e54:	10 92 a6 05 	sts	0x05A6, r1
    3e58:	10 92 b0 05 	sts	0x05B0, r1
  int i;
  for ( i = 0; i < MAX_FILE_TABLE_SIZE; i ++ )
   fidtable[ i ].valid = 0;
}
    3e5c:	08 95       	ret

00003e5e <checkFsValid>:
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <checkNodeValid>
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	11 f0       	breq	.+4      	; 0x3e72 <checkFsValid+0x14>
    3e6e:	c9 01       	movw	r24, r18
    3e70:	08 95       	ret
    3e72:	21 e0       	ldi	r18, 0x01	; 1
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	c9 01       	movw	r24, r18
    3e78:	08 95       	ret

00003e7a <fseek2>:
}

//-------------------------------------------------------------------------
int fseek2(MYFILE * fp, int32_t offset, int position)
{
    3e7a:	cf 92       	push	r12
    3e7c:	df 92       	push	r13
    3e7e:	ef 92       	push	r14
    3e80:	ff 92       	push	r15
    3e82:	0f 93       	push	r16
    3e84:	1f 93       	push	r17
    3e86:	cf 93       	push	r28
    3e88:	df 93       	push	r29
    3e8a:	ec 01       	movw	r28, r24
    3e8c:	7a 01       	movw	r14, r20
    3e8e:	8b 01       	movw	r16, r22
    3e90:	f9 01       	movw	r30, r18
    int temp;

    if (position == 0)
    3e92:	21 15       	cp	r18, r1
    3e94:	31 05       	cpc	r19, r1
    3e96:	09 f4       	brne	.+2      	; 0x3e9a <fseek2+0x20>
    3e98:	47 c0       	rjmp	.+142    	; 0x3f28 <fseek2+0xae>
    {
        if (offset > fp->size)
        {
            return -1;
        }
        fp->fpos = offset;
        return 0;
    }
    temp = fp->fpos;
    3e9a:	2e 81       	ldd	r18, Y+6	; 0x06
    3e9c:	3f 81       	ldd	r19, Y+7	; 0x07
    3e9e:	48 85       	ldd	r20, Y+8	; 0x08
    3ea0:	59 85       	ldd	r21, Y+9	; 0x09
    3ea2:	69 01       	movw	r12, r18
    if (position == 1)
    3ea4:	e1 30       	cpi	r30, 0x01	; 1
    3ea6:	f1 05       	cpc	r31, r1
    3ea8:	b1 f1       	breq	.+108    	; 0x3f16 <fseek2+0x9c>
    {
        fp->fpos = fp->fpos + offset;
    }
    if ((fp->fpos < 0) || (fp->fpos > fp->size))
    3eaa:	57 fd       	sbrc	r21, 7
    3eac:	1f c0       	rjmp	.+62     	; 0x3eec <fseek2+0x72>
    3eae:	8c 81       	ldd	r24, Y+4	; 0x04
    3eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    3eb2:	a0 e0       	ldi	r26, 0x00	; 0
    3eb4:	b0 e0       	ldi	r27, 0x00	; 0
    3eb6:	82 17       	cp	r24, r18
    3eb8:	93 07       	cpc	r25, r19
    3eba:	a4 07       	cpc	r26, r20
    3ebc:	b5 07       	cpc	r27, r21
    3ebe:	b4 f0       	brlt	.+44     	; 0x3eec <fseek2+0x72>
    {
        fp->fpos = temp;
        return -1;
    }
    if (position == 2)
    3ec0:	32 97       	sbiw	r30, 0x02	; 2
    3ec2:	19 f0       	breq	.+6      	; 0x3eca <fseek2+0x50>
    {
        fp->fpos = fp->size + offset;
    }
    if ((fp->fpos < 0) || (fp->fpos > fp->size))
    {
        fp->fpos = temp;
        return -1;
    3ec4:	20 e0       	ldi	r18, 0x00	; 0
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	1c c0       	rjmp	.+56     	; 0x3f02 <fseek2+0x88>
    3eca:	b8 01       	movw	r22, r16
    3ecc:	a7 01       	movw	r20, r14
    3ece:	48 0f       	add	r20, r24
    3ed0:	59 1f       	adc	r21, r25
    3ed2:	6a 1f       	adc	r22, r26
    3ed4:	7b 1f       	adc	r23, r27
    3ed6:	4e 83       	std	Y+6, r20	; 0x06
    3ed8:	5f 83       	std	Y+7, r21	; 0x07
    3eda:	68 87       	std	Y+8, r22	; 0x08
    3edc:	79 87       	std	Y+9, r23	; 0x09
    3ede:	77 fd       	sbrc	r23, 7
    3ee0:	05 c0       	rjmp	.+10     	; 0x3eec <fseek2+0x72>
    3ee2:	84 17       	cp	r24, r20
    3ee4:	95 07       	cpc	r25, r21
    3ee6:	a6 07       	cpc	r26, r22
    3ee8:	b7 07       	cpc	r27, r23
    3eea:	64 f7       	brge	.-40     	; 0x3ec4 <fseek2+0x4a>
    3eec:	c6 01       	movw	r24, r12
    3eee:	aa 27       	eor	r26, r26
    3ef0:	97 fd       	sbrc	r25, 7
    3ef2:	a0 95       	com	r26
    3ef4:	ba 2f       	mov	r27, r26
    3ef6:	8e 83       	std	Y+6, r24	; 0x06
    3ef8:	9f 83       	std	Y+7, r25	; 0x07
    3efa:	a8 87       	std	Y+8, r26	; 0x08
    3efc:	b9 87       	std	Y+9, r27	; 0x09
    3efe:	2f ef       	ldi	r18, 0xFF	; 255
    3f00:	3f ef       	ldi	r19, 0xFF	; 255
    }
    return 0;
}
    3f02:	c9 01       	movw	r24, r18
    3f04:	df 91       	pop	r29
    3f06:	cf 91       	pop	r28
    3f08:	1f 91       	pop	r17
    3f0a:	0f 91       	pop	r16
    3f0c:	ff 90       	pop	r15
    3f0e:	ef 90       	pop	r14
    3f10:	df 90       	pop	r13
    3f12:	cf 90       	pop	r12
    3f14:	08 95       	ret
    3f16:	2e 0d       	add	r18, r14
    3f18:	3f 1d       	adc	r19, r15
    3f1a:	40 1f       	adc	r20, r16
    3f1c:	51 1f       	adc	r21, r17
    3f1e:	2e 83       	std	Y+6, r18	; 0x06
    3f20:	3f 83       	std	Y+7, r19	; 0x07
    3f22:	48 87       	std	Y+8, r20	; 0x08
    3f24:	59 87       	std	Y+9, r21	; 0x09
    3f26:	c1 cf       	rjmp	.-126    	; 0x3eaa <fseek2+0x30>
    3f28:	8c 81       	ldd	r24, Y+4	; 0x04
    3f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f2c:	a0 e0       	ldi	r26, 0x00	; 0
    3f2e:	b0 e0       	ldi	r27, 0x00	; 0
    3f30:	84 17       	cp	r24, r20
    3f32:	95 07       	cpc	r25, r21
    3f34:	a6 07       	cpc	r26, r22
    3f36:	b7 07       	cpc	r27, r23
    3f38:	14 f3       	brlt	.-60     	; 0x3efe <fseek2+0x84>
    3f3a:	4e 83       	std	Y+6, r20	; 0x06
    3f3c:	5f 83       	std	Y+7, r21	; 0x07
    3f3e:	68 87       	std	Y+8, r22	; 0x08
    3f40:	79 87       	std	Y+9, r23	; 0x09
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	dd cf       	rjmp	.-70     	; 0x3f02 <fseek2+0x88>

00003f48 <fdirnode>:

//-------------------------------------------------------------------------
int fexist2(char *pathname)
{
    int retaddr, state;

    retaddr = locateFileName(pathname, &state);
    if ((retaddr == -1) || (state == 0))
    {
        return -1;
    }
    else
    {
        return retaddr;
    }
}

//-------------------------------------------------------------------------
int fcreatedir2(char *pathname)
{
    int retaddr, state;

    retaddr = locateFileName(pathname, &state);
    if (retaddr == -1)
    {
        return -1;
    }
    //first, file does not exist
    if (state == 0)
    {
        createDir(extractLastName(pathname), retaddr);
        return 0;
    }
    return -1;
}

//-------------------------------------------------------------------------
int fdelete2(char *pathname)
{
    int ret;

    if ((ret = fexist2(pathname)) == -1)
    {
        return -1;
    }
    else
    {
        deleteNode(ret);
        return 0;
    }
}

//-------------------------------------------------------------------------
int fcheckFSAllocation()
{
    return countVectorNode();
}

//-------------------------------------------------------------------------
int fcheckStorageAllocation()
{
    return countVectorFlash();
}


//-------------------------------------------------------------------------
//vs patch used for debugging only 
void fsprintall()
{
    int i;

    //  printf("*****************************************************************\n");
    for (i = 0; i <= 96; i++)
    {
        if (checkNodeValid(i) > 0)
        {
            printNode(i);
        }
    }
}

//-------------------------------------------------------------------------
int fread2(MYFILE * fp, void *buffer, int nBytes)
{
    int startsector;
    int endsector;
    uint8_t realsector;
    int readbytes;
    int pagenum, blockoffset, pageoffset;

    if (fp->fpos + nBytes > fp->size)
    {
        return -1;
    }
    startsector = fp->fpos / 2048;
    endsector = (fp->fpos + nBytes - 1) / 2048;
    if (startsector == endsector)
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //  realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
        pagenum = pagenum + (realsector - 1) * 8;
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, nBytes);
    }
    else
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
        //      realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = 256 - pageoffset;
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, pageoffset, buffer, readbytes);
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, endsector);
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = nBytes - readbytes;
        //now pagenum, offset2 means the actual start location just read it
        readpagestorage(pagenum, 0, buffer, readbytes);
    }
    return 0;
}

//-------------------------------------------------------------------------
int fwrite2(MYFILE * fp, void *buffer, int nBytes)
{
    int startsector;
    int endsector;
    uint8_t realsector;
    int readbytes;
    int pagenum, blockoffset, pageoffset;

    //first it checks whether there is enough space for the writing to take place, then it does the actual writing in the same way as above 
    if (fp->fpos + nBytes <= fp->size)
    {
        //there is no need to change the size or allocate more space for the write
    }
    else
    {
        uint16_t allocate;

        allocate = (fp->size / 2048) * 2048;
        if (fp->size % 2048 > 0)
        {
            allocate += 2048;
        }
        //     if ((allocate == 32768)&&(fp->fpos + nBytes > 32768))
        //         foobar(); 
        if (fp->fpos + nBytes > allocate)
        {
            newSector(fp->addr);
        }

        if (fp->fpos + nBytes > fp->size)
        {
            fp->size = fp->fpos + nBytes;
            fswrite16uint(fp->addr, FILE_SIZEOFFSET, fp->size);
        }
    }
    
    //avoid flash overflow
    if (fp->size > 64000)
    	return 2; 
    	 
    startsector = fp->fpos / 2048;
    endsector = (fp->fpos + nBytes - 1) / 2048;
    if (startsector == endsector)
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
        //      realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
        pagenum = pagenum + (realsector - 1) * 8;
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, nBytes);
    }
    else
    {
        blockoffset = fp->fpos % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, startsector);
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = 256 - pageoffset;
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, pageoffset, buffer, readbytes);
        buffer = (void *)((char *)buffer + readbytes);
        blockoffset = (fp->fpos + nBytes - 1) % 2048;
        pageoffset = blockoffset % 256;
        pagenum = blockoffset / 256;
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
        //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
        realsector = getRealSector(fp->addr, endsector);
        pagenum = pagenum + (realsector - 1) * 8;
        readbytes = nBytes - readbytes;
        //now pagenum, offset2 means the actual start location just read it
        writepagestorage(pagenum, 0, buffer, readbytes);
    }
    return 0;
}

//-------------------------------------------------------------------------
int fmove(char *source, char *target)
{
    //if ((ret = fexist(pathname))==-1)
    int ret1, ret2;
    int state1, state2;
    uint8_t parent;
    char *p, *q;
    uint8_t namelength;

    p = extractLastName(target);
    q = target + mystrlen(target);
    namelength = q - p;
    ret1 = locateFileName(source, &state1);
    parent = fsread8uint(ret1, FILE_PARENTOFFSET);
    removeChildNode(parent, ret1);
    ret2 = locateFileName(target, &state2);
    fswrite8uint(ret1, FILE_PARENTOFFSET, ret2);
    fswriteBytes(ret1, FILENAMEOFFSET, namelength, p);
    fswrite8uint(ret1, FILENAMEOFFSET + namelength, 0);
    addChildNode(ret2, ret1);
    return 0;
}

//-------------------------------------------------------------------------
int fcopy(char *source, char *target)
{
    //if ((ret = fexist(pathname))==-1)
    int ret1, ret2;
    int state1, state2;
    uint8_t i;
    char *p;
    char *q;
    int NewNode;
    uint8_t namelength;

    p = extractLastName(target);
    q = target + mystrlen(target);
    namelength = q - p;
    ret1 = locateFileName(source, &state1);
    ret2 = locateFileName(target, &state2);
    NewNode = getVectorNode();
    copyVectorNode(ret1, NewNode);
    fswriteBytes(NewNode, FILENAMEOFFSET, namelength, p);
    fswrite8uint(NewNode, FILENAMEOFFSET + namelength, 0);
    fswrite8uint(NewNode, FILE_PARENTOFFSET, ret2);
    addChildNode(ret2, NewNode);
    for (i = 0; i < 8; i++)
    {
        uint8_t temp, temp1;

        temp = fsread8uint(ret1, FILE_ADDRPAGEOFFSET + i);
        if (temp > 0)
        {
            temp1 = getFlashPage();
            fswrite8uint(NewNode, FILE_ADDRPAGEOFFSET + i, temp1);
            copyVectorPage(temp, temp1);
        }
    }
    return 0;
}

//-------------------------------------------------------------------------
void fchangedir(char *path)
{
    int ret, state;

    ret = locateFileName(path, &state);
    setPwd(ret);
    return;
}

//-------------------------------------------------------------------------
void fcurrentdir(char *buffer, int size)
{
    int currentP;
    char *p;
    int len;
    char namebuffer[13];
    int i;
    char *q;

    p = buffer + size - 1;
    *p = '\0';
    p--;
    currentP = getPwd();
    while (1)
    {
        getName(namebuffer, currentP);
        len = mystrlen(namebuffer);
        mystrncpy(p - len, namebuffer, len);
        *p = '/';
        p = p - len - 1;
        currentP = fsread8uint(currentP, 31);
        if (currentP == 0)
        {
            break;
        }
    }
    *p = '/';
    len = buffer + size - 1 - p;
    q = buffer;
    for (i = 0; i < len; i++)
    {
        *q++ = *p++;
    }

    q--;
    *q = '\0';
    return;
}

//-------------------------------------------------------------------------
void finfonode(char *buffer, int addr)
{
    fsreadBytes(addr, FILENAMEOFFSET, 12, buffer);
    buffer[12] = fsread8uint(addr, TYPEOFFSET);
    buffer[13] = fsread8uint(addr, 29);
    buffer[14] = fsread8uint(addr, 30);
}

//-------------------------------------------------------------------------
void fsearch(uint8_t * addrlist, uint8_t * size, char *string)
{
    uint8_t i;
    uint8_t *p;

    p = addrlist;
    *size = 0;
    for (i = 1; i <= INODENUM; i++)
    {
        if (inodeMatch(i, string) == 1)
        {
            p[*size] = i;
            (*size)++;
        }
    }
    return;
}

//-------------------------------------------------------------------------
void formatSystem()
{
    formatFS();
}

//-------------------------------------------------------------------------
void fdirnode(char *buffer, int size, int addr)
{
    3f48:	5f 92       	push	r5
    3f4a:	6f 92       	push	r6
    3f4c:	7f 92       	push	r7
    3f4e:	8f 92       	push	r8
    3f50:	9f 92       	push	r9
    3f52:	af 92       	push	r10
    3f54:	bf 92       	push	r11
    3f56:	cf 92       	push	r12
    3f58:	df 92       	push	r13
    3f5a:	ef 92       	push	r14
    3f5c:	ff 92       	push	r15
    3f5e:	0f 93       	push	r16
    3f60:	1f 93       	push	r17
    3f62:	df 93       	push	r29
    3f64:	cf 93       	push	r28
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	2d 97       	sbiw	r28, 0x0d	; 13
    3f6c:	0f b6       	in	r0, 0x3f	; 63
    3f6e:	f8 94       	cli
    3f70:	de bf       	out	0x3e, r29	; 62
    3f72:	0f be       	out	0x3f, r0	; 63
    3f74:	cd bf       	out	0x3d, r28	; 61
    3f76:	3c 01       	movw	r6, r24
    3f78:	4b 01       	movw	r8, r22
    int currentP;
    char *p;
    int len;
    char namebuffer[13];
    int i;
    char *q;

    p = buffer + size - 1;
    3f7a:	08 94       	sec
    3f7c:	81 08       	sbc	r8, r1
    3f7e:	91 08       	sbc	r9, r1
    3f80:	88 0e       	add	r8, r24
    3f82:	99 1e       	adc	r9, r25
    *p = '\0';
    3f84:	d4 01       	movw	r26, r8
    3f86:	1c 92       	st	X, r1
    p--;
    3f88:	74 01       	movw	r14, r8
    3f8a:	08 94       	sec
    3f8c:	e1 08       	sbc	r14, r1
    3f8e:	f1 08       	sbc	r15, r1
    3f90:	6a 01       	movw	r12, r20
    3f92:	5e 01       	movw	r10, r28
    3f94:	08 94       	sec
    3f96:	a1 1c       	adc	r10, r1
    3f98:	b1 1c       	adc	r11, r1
    currentP = addr;
    while (1)
    {
        getName(namebuffer, currentP);
        len = mystrlen(namebuffer);
        mystrncpy(p - len, namebuffer, len);
        *p = '/';
    3f9a:	8f e2       	ldi	r24, 0x2F	; 47
    3f9c:	58 2e       	mov	r5, r24
    3f9e:	c5 01       	movw	r24, r10
    3fa0:	b6 01       	movw	r22, r12
    3fa2:	0e 94 80 29 	call	0x5300	; 0x5300 <getName>
    3fa6:	c5 01       	movw	r24, r10
    3fa8:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    3fac:	48 2f       	mov	r20, r24
    3fae:	08 2f       	mov	r16, r24
    3fb0:	19 2f       	mov	r17, r25
    3fb2:	c7 01       	movw	r24, r14
    3fb4:	80 1b       	sub	r24, r16
    3fb6:	91 0b       	sbc	r25, r17
    3fb8:	b5 01       	movw	r22, r10
    3fba:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    3fbe:	f7 01       	movw	r30, r14
    3fc0:	50 82       	st	Z, r5
        p = p - len - 1;
    3fc2:	00 95       	com	r16
    3fc4:	10 95       	com	r17
    3fc6:	e0 0e       	add	r14, r16
    3fc8:	f1 1e       	adc	r15, r17
        currentP = fsread8uint(currentP, 31);
    3fca:	c6 01       	movw	r24, r12
    3fcc:	6f e1       	ldi	r22, 0x1F	; 31
    3fce:	70 e0       	ldi	r23, 0x00	; 0
    3fd0:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    3fd4:	c8 2e       	mov	r12, r24
    3fd6:	dd 24       	eor	r13, r13
        if (currentP == 0)
    3fd8:	c1 14       	cp	r12, r1
    3fda:	d1 04       	cpc	r13, r1
    3fdc:	01 f7       	brne	.-64     	; 0x3f9e <fdirnode+0x56>
        {
            break;
        }
    }
    *p = '/';
    3fde:	d7 01       	movw	r26, r14
    3fe0:	5c 92       	st	X, r5
    len = buffer + size - 1 - p;
    3fe2:	b4 01       	movw	r22, r8
    3fe4:	6e 19       	sub	r22, r14
    3fe6:	7f 09       	sbc	r23, r15
    q = buffer;
    for (i = 0; i < len; i++)
    3fe8:	16 16       	cp	r1, r22
    3fea:	17 06       	cpc	r1, r23
    3fec:	5c f5       	brge	.+86     	; 0x4044 <fdirnode+0xfc>
    3fee:	f3 01       	movw	r30, r6
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	4f e2       	ldi	r20, 0x2F	; 47
    3ff6:	05 c0       	rjmp	.+10     	; 0x4002 <fdirnode+0xba>
    {
        *q++ = *p++;
    3ff8:	08 94       	sec
    3ffa:	e1 1c       	adc	r14, r1
    3ffc:	f1 1c       	adc	r15, r1
    3ffe:	d7 01       	movw	r26, r14
    4000:	4c 91       	ld	r20, X
    4002:	41 93       	st	Z+, r20
    4004:	2f 5f       	subi	r18, 0xFF	; 255
    4006:	3f 4f       	sbci	r19, 0xFF	; 255
    4008:	26 17       	cp	r18, r22
    400a:	37 07       	cpc	r19, r23
    400c:	ac f3       	brlt	.-22     	; 0x3ff8 <fdirnode+0xb0>
    400e:	f3 01       	movw	r30, r6
    4010:	e6 0f       	add	r30, r22
    4012:	f7 1f       	adc	r31, r23
    }

    q--;
    *q = '\0';
    4014:	31 97       	sbiw	r30, 0x01	; 1
    4016:	10 82       	st	Z, r1
    return;
}
    4018:	2d 96       	adiw	r28, 0x0d	; 13
    401a:	0f b6       	in	r0, 0x3f	; 63
    401c:	f8 94       	cli
    401e:	de bf       	out	0x3e, r29	; 62
    4020:	0f be       	out	0x3f, r0	; 63
    4022:	cd bf       	out	0x3d, r28	; 61
    4024:	cf 91       	pop	r28
    4026:	df 91       	pop	r29
    4028:	1f 91       	pop	r17
    402a:	0f 91       	pop	r16
    402c:	ff 90       	pop	r15
    402e:	ef 90       	pop	r14
    4030:	df 90       	pop	r13
    4032:	cf 90       	pop	r12
    4034:	bf 90       	pop	r11
    4036:	af 90       	pop	r10
    4038:	9f 90       	pop	r9
    403a:	8f 90       	pop	r8
    403c:	7f 90       	pop	r7
    403e:	6f 90       	pop	r6
    4040:	5f 90       	pop	r5
    4042:	08 95       	ret
    4044:	f3 01       	movw	r30, r6
    4046:	e6 cf       	rjmp	.-52     	; 0x4014 <fdirnode+0xcc>

00004048 <formatSystem>:
    4048:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <formatFS>
    404c:	08 95       	ret

0000404e <fsearch>:
    404e:	cf 92       	push	r12
    4050:	df 92       	push	r13
    4052:	ef 92       	push	r14
    4054:	ff 92       	push	r15
    4056:	1f 93       	push	r17
    4058:	cf 93       	push	r28
    405a:	df 93       	push	r29
    405c:	6c 01       	movw	r12, r24
    405e:	eb 01       	movw	r28, r22
    4060:	7a 01       	movw	r14, r20
    4062:	18 82       	st	Y, r1
    4064:	11 e0       	ldi	r17, 0x01	; 1
    4066:	03 c0       	rjmp	.+6      	; 0x406e <fsearch+0x20>
    4068:	1f 5f       	subi	r17, 0xFF	; 255
    406a:	11 36       	cpi	r17, 0x61	; 97
    406c:	89 f0       	breq	.+34     	; 0x4090 <fsearch+0x42>
    406e:	81 2f       	mov	r24, r17
    4070:	b7 01       	movw	r22, r14
    4072:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <inodeMatch>
    4076:	01 97       	sbiw	r24, 0x01	; 1
    4078:	b9 f7       	brne	.-18     	; 0x4068 <fsearch+0x1a>
    407a:	88 81       	ld	r24, Y
    407c:	f6 01       	movw	r30, r12
    407e:	e8 0f       	add	r30, r24
    4080:	f1 1d       	adc	r31, r1
    4082:	10 83       	st	Z, r17
    4084:	88 81       	ld	r24, Y
    4086:	8f 5f       	subi	r24, 0xFF	; 255
    4088:	88 83       	st	Y, r24
    408a:	1f 5f       	subi	r17, 0xFF	; 255
    408c:	11 36       	cpi	r17, 0x61	; 97
    408e:	79 f7       	brne	.-34     	; 0x406e <fsearch+0x20>
    4090:	df 91       	pop	r29
    4092:	cf 91       	pop	r28
    4094:	1f 91       	pop	r17
    4096:	ff 90       	pop	r15
    4098:	ef 90       	pop	r14
    409a:	df 90       	pop	r13
    409c:	cf 90       	pop	r12
    409e:	08 95       	ret

000040a0 <finfonode>:
    40a0:	ef 92       	push	r14
    40a2:	ff 92       	push	r15
    40a4:	0f 93       	push	r16
    40a6:	1f 93       	push	r17
    40a8:	7c 01       	movw	r14, r24
    40aa:	8b 01       	movw	r16, r22
    40ac:	cb 01       	movw	r24, r22
    40ae:	60 e0       	ldi	r22, 0x00	; 0
    40b0:	70 e0       	ldi	r23, 0x00	; 0
    40b2:	4c e0       	ldi	r20, 0x0C	; 12
    40b4:	50 e0       	ldi	r21, 0x00	; 0
    40b6:	97 01       	movw	r18, r14
    40b8:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <fsreadBytes>
    40bc:	c8 01       	movw	r24, r16
    40be:	6c e0       	ldi	r22, 0x0C	; 12
    40c0:	70 e0       	ldi	r23, 0x00	; 0
    40c2:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    40c6:	f7 01       	movw	r30, r14
    40c8:	84 87       	std	Z+12, r24	; 0x0c
    40ca:	c8 01       	movw	r24, r16
    40cc:	6d e1       	ldi	r22, 0x1D	; 29
    40ce:	70 e0       	ldi	r23, 0x00	; 0
    40d0:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    40d4:	f7 01       	movw	r30, r14
    40d6:	85 87       	std	Z+13, r24	; 0x0d
    40d8:	c8 01       	movw	r24, r16
    40da:	6e e1       	ldi	r22, 0x1E	; 30
    40dc:	70 e0       	ldi	r23, 0x00	; 0
    40de:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    40e2:	f7 01       	movw	r30, r14
    40e4:	86 87       	std	Z+14, r24	; 0x0e
    40e6:	1f 91       	pop	r17
    40e8:	0f 91       	pop	r16
    40ea:	ff 90       	pop	r15
    40ec:	ef 90       	pop	r14
    40ee:	08 95       	ret

000040f0 <fcurrentdir>:
    40f0:	5f 92       	push	r5
    40f2:	6f 92       	push	r6
    40f4:	7f 92       	push	r7
    40f6:	8f 92       	push	r8
    40f8:	9f 92       	push	r9
    40fa:	af 92       	push	r10
    40fc:	bf 92       	push	r11
    40fe:	cf 92       	push	r12
    4100:	df 92       	push	r13
    4102:	ef 92       	push	r14
    4104:	ff 92       	push	r15
    4106:	0f 93       	push	r16
    4108:	1f 93       	push	r17
    410a:	df 93       	push	r29
    410c:	cf 93       	push	r28
    410e:	cd b7       	in	r28, 0x3d	; 61
    4110:	de b7       	in	r29, 0x3e	; 62
    4112:	2d 97       	sbiw	r28, 0x0d	; 13
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	3c 01       	movw	r6, r24
    4120:	4b 01       	movw	r8, r22
    4122:	08 94       	sec
    4124:	81 08       	sbc	r8, r1
    4126:	91 08       	sbc	r9, r1
    4128:	88 0e       	add	r8, r24
    412a:	99 1e       	adc	r9, r25
    412c:	d4 01       	movw	r26, r8
    412e:	1c 92       	st	X, r1
    4130:	74 01       	movw	r14, r8
    4132:	08 94       	sec
    4134:	e1 08       	sbc	r14, r1
    4136:	f1 08       	sbc	r15, r1
    4138:	0e 94 36 29 	call	0x526c	; 0x526c <getPwd>
    413c:	6c 01       	movw	r12, r24
    413e:	5e 01       	movw	r10, r28
    4140:	08 94       	sec
    4142:	a1 1c       	adc	r10, r1
    4144:	b1 1c       	adc	r11, r1
    4146:	9f e2       	ldi	r25, 0x2F	; 47
    4148:	59 2e       	mov	r5, r25
    414a:	c5 01       	movw	r24, r10
    414c:	b6 01       	movw	r22, r12
    414e:	0e 94 80 29 	call	0x5300	; 0x5300 <getName>
    4152:	c5 01       	movw	r24, r10
    4154:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    4158:	48 2f       	mov	r20, r24
    415a:	08 2f       	mov	r16, r24
    415c:	19 2f       	mov	r17, r25
    415e:	c7 01       	movw	r24, r14
    4160:	80 1b       	sub	r24, r16
    4162:	91 0b       	sbc	r25, r17
    4164:	b5 01       	movw	r22, r10
    4166:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    416a:	f7 01       	movw	r30, r14
    416c:	50 82       	st	Z, r5
    416e:	00 95       	com	r16
    4170:	10 95       	com	r17
    4172:	e0 0e       	add	r14, r16
    4174:	f1 1e       	adc	r15, r17
    4176:	c6 01       	movw	r24, r12
    4178:	6f e1       	ldi	r22, 0x1F	; 31
    417a:	70 e0       	ldi	r23, 0x00	; 0
    417c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4180:	c8 2e       	mov	r12, r24
    4182:	dd 24       	eor	r13, r13
    4184:	c1 14       	cp	r12, r1
    4186:	d1 04       	cpc	r13, r1
    4188:	01 f7       	brne	.-64     	; 0x414a <fcurrentdir+0x5a>
    418a:	d7 01       	movw	r26, r14
    418c:	5c 92       	st	X, r5
    418e:	b4 01       	movw	r22, r8
    4190:	6e 19       	sub	r22, r14
    4192:	7f 09       	sbc	r23, r15
    4194:	16 16       	cp	r1, r22
    4196:	17 06       	cpc	r1, r23
    4198:	5c f5       	brge	.+86     	; 0x41f0 <fcurrentdir+0x100>
    419a:	f3 01       	movw	r30, r6
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	4f e2       	ldi	r20, 0x2F	; 47
    41a2:	05 c0       	rjmp	.+10     	; 0x41ae <fcurrentdir+0xbe>
    41a4:	08 94       	sec
    41a6:	e1 1c       	adc	r14, r1
    41a8:	f1 1c       	adc	r15, r1
    41aa:	d7 01       	movw	r26, r14
    41ac:	4c 91       	ld	r20, X
    41ae:	41 93       	st	Z+, r20
    41b0:	2f 5f       	subi	r18, 0xFF	; 255
    41b2:	3f 4f       	sbci	r19, 0xFF	; 255
    41b4:	26 17       	cp	r18, r22
    41b6:	37 07       	cpc	r19, r23
    41b8:	ac f3       	brlt	.-22     	; 0x41a4 <fcurrentdir+0xb4>
    41ba:	f3 01       	movw	r30, r6
    41bc:	e6 0f       	add	r30, r22
    41be:	f7 1f       	adc	r31, r23
    41c0:	31 97       	sbiw	r30, 0x01	; 1
    41c2:	10 82       	st	Z, r1
    41c4:	2d 96       	adiw	r28, 0x0d	; 13
    41c6:	0f b6       	in	r0, 0x3f	; 63
    41c8:	f8 94       	cli
    41ca:	de bf       	out	0x3e, r29	; 62
    41cc:	0f be       	out	0x3f, r0	; 63
    41ce:	cd bf       	out	0x3d, r28	; 61
    41d0:	cf 91       	pop	r28
    41d2:	df 91       	pop	r29
    41d4:	1f 91       	pop	r17
    41d6:	0f 91       	pop	r16
    41d8:	ff 90       	pop	r15
    41da:	ef 90       	pop	r14
    41dc:	df 90       	pop	r13
    41de:	cf 90       	pop	r12
    41e0:	bf 90       	pop	r11
    41e2:	af 90       	pop	r10
    41e4:	9f 90       	pop	r9
    41e6:	8f 90       	pop	r8
    41e8:	7f 90       	pop	r7
    41ea:	6f 90       	pop	r6
    41ec:	5f 90       	pop	r5
    41ee:	08 95       	ret
    41f0:	f3 01       	movw	r30, r6
    41f2:	e6 cf       	rjmp	.-52     	; 0x41c0 <fcurrentdir+0xd0>

000041f4 <fexist2>:
    41f4:	df 93       	push	r29
    41f6:	cf 93       	push	r28
    41f8:	00 d0       	rcall	.+0      	; 0x41fa <fexist2+0x6>
    41fa:	cd b7       	in	r28, 0x3d	; 61
    41fc:	de b7       	in	r29, 0x3e	; 62
    41fe:	be 01       	movw	r22, r28
    4200:	6f 5f       	subi	r22, 0xFF	; 255
    4202:	7f 4f       	sbci	r23, 0xFF	; 255
    4204:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <locateFileName>
    4208:	9c 01       	movw	r18, r24
    420a:	8f ef       	ldi	r24, 0xFF	; 255
    420c:	2f 3f       	cpi	r18, 0xFF	; 255
    420e:	38 07       	cpc	r19, r24
    4210:	31 f4       	brne	.+12     	; 0x421e <fexist2+0x2a>
    4212:	c9 01       	movw	r24, r18
    4214:	0f 90       	pop	r0
    4216:	0f 90       	pop	r0
    4218:	cf 91       	pop	r28
    421a:	df 91       	pop	r29
    421c:	08 95       	ret
    421e:	89 81       	ldd	r24, Y+1	; 0x01
    4220:	9a 81       	ldd	r25, Y+2	; 0x02
    4222:	89 2b       	or	r24, r25
    4224:	b1 f7       	brne	.-20     	; 0x4212 <fexist2+0x1e>
    4226:	2f ef       	ldi	r18, 0xFF	; 255
    4228:	3f ef       	ldi	r19, 0xFF	; 255
    422a:	f3 cf       	rjmp	.-26     	; 0x4212 <fexist2+0x1e>

0000422c <fchangedir>:
    422c:	df 93       	push	r29
    422e:	cf 93       	push	r28
    4230:	00 d0       	rcall	.+0      	; 0x4232 <fchangedir+0x6>
    4232:	cd b7       	in	r28, 0x3d	; 61
    4234:	de b7       	in	r29, 0x3e	; 62
    4236:	be 01       	movw	r22, r28
    4238:	6f 5f       	subi	r22, 0xFF	; 255
    423a:	7f 4f       	sbci	r23, 0xFF	; 255
    423c:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <locateFileName>
    4240:	0e 94 3b 29 	call	0x5276	; 0x5276 <setPwd>
    4244:	0f 90       	pop	r0
    4246:	0f 90       	pop	r0
    4248:	cf 91       	pop	r28
    424a:	df 91       	pop	r29
    424c:	08 95       	ret

0000424e <fcopy>:
    424e:	6f 92       	push	r6
    4250:	7f 92       	push	r7
    4252:	8f 92       	push	r8
    4254:	9f 92       	push	r9
    4256:	af 92       	push	r10
    4258:	bf 92       	push	r11
    425a:	cf 92       	push	r12
    425c:	df 92       	push	r13
    425e:	ef 92       	push	r14
    4260:	ff 92       	push	r15
    4262:	0f 93       	push	r16
    4264:	1f 93       	push	r17
    4266:	df 93       	push	r29
    4268:	cf 93       	push	r28
    426a:	00 d0       	rcall	.+0      	; 0x426c <fcopy+0x1e>
    426c:	00 d0       	rcall	.+0      	; 0x426e <fcopy+0x20>
    426e:	cd b7       	in	r28, 0x3d	; 61
    4270:	de b7       	in	r29, 0x3e	; 62
    4272:	7c 01       	movw	r14, r24
    4274:	8b 01       	movw	r16, r22
    4276:	cb 01       	movw	r24, r22
    4278:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <extractLastName>
    427c:	b8 2e       	mov	r11, r24
    427e:	a9 2e       	mov	r10, r25
    4280:	c8 01       	movw	r24, r16
    4282:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    4286:	6c 01       	movw	r12, r24
    4288:	c7 01       	movw	r24, r14
    428a:	be 01       	movw	r22, r28
    428c:	6f 5f       	subi	r22, 0xFF	; 255
    428e:	7f 4f       	sbci	r23, 0xFF	; 255
    4290:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <locateFileName>
    4294:	4c 01       	movw	r8, r24
    4296:	c8 01       	movw	r24, r16
    4298:	be 01       	movw	r22, r28
    429a:	6d 5f       	subi	r22, 0xFD	; 253
    429c:	7f 4f       	sbci	r23, 0xFF	; 255
    429e:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <locateFileName>
    42a2:	f8 2e       	mov	r15, r24
    42a4:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <getVectorNode>
    42a8:	78 2e       	mov	r7, r24
    42aa:	69 2e       	mov	r6, r25
    42ac:	c4 01       	movw	r24, r8
    42ae:	67 2d       	mov	r22, r7
    42b0:	76 2d       	mov	r23, r6
    42b2:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <copyVectorNode>
    42b6:	0c 0d       	add	r16, r12
    42b8:	1d 1d       	adc	r17, r13
    42ba:	0b 19       	sub	r16, r11
    42bc:	87 2d       	mov	r24, r7
    42be:	96 2d       	mov	r25, r6
    42c0:	60 e0       	ldi	r22, 0x00	; 0
    42c2:	70 e0       	ldi	r23, 0x00	; 0
    42c4:	40 2f       	mov	r20, r16
    42c6:	50 e0       	ldi	r21, 0x00	; 0
    42c8:	2b 2d       	mov	r18, r11
    42ca:	3a 2d       	mov	r19, r10
    42cc:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <fswriteBytes>
    42d0:	87 2d       	mov	r24, r7
    42d2:	96 2d       	mov	r25, r6
    42d4:	60 2f       	mov	r22, r16
    42d6:	70 e0       	ldi	r23, 0x00	; 0
    42d8:	40 e0       	ldi	r20, 0x00	; 0
    42da:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    42de:	87 2d       	mov	r24, r7
    42e0:	96 2d       	mov	r25, r6
    42e2:	6f e1       	ldi	r22, 0x1F	; 31
    42e4:	70 e0       	ldi	r23, 0x00	; 0
    42e6:	4f 2d       	mov	r20, r15
    42e8:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    42ec:	8f 2d       	mov	r24, r15
    42ee:	67 2d       	mov	r22, r7
    42f0:	0e 94 db 29 	call	0x53b6	; 0x53b6 <addChildNode>
    42f4:	2e e0       	ldi	r18, 0x0E	; 14
    42f6:	e2 2e       	mov	r14, r18
    42f8:	f1 2c       	mov	r15, r1
    42fa:	07 c0       	rjmp	.+14     	; 0x430a <fcopy+0xbc>
    42fc:	08 94       	sec
    42fe:	e1 1c       	adc	r14, r1
    4300:	f1 1c       	adc	r15, r1
    4302:	86 e1       	ldi	r24, 0x16	; 22
    4304:	e8 16       	cp	r14, r24
    4306:	f1 04       	cpc	r15, r1
    4308:	e9 f0       	breq	.+58     	; 0x4344 <fcopy+0xf6>
    430a:	c4 01       	movw	r24, r8
    430c:	b7 01       	movw	r22, r14
    430e:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4312:	08 2f       	mov	r16, r24
    4314:	88 23       	and	r24, r24
    4316:	91 f3       	breq	.-28     	; 0x42fc <fcopy+0xae>
    4318:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <getFlashPage>
    431c:	18 2f       	mov	r17, r24
    431e:	87 2d       	mov	r24, r7
    4320:	96 2d       	mov	r25, r6
    4322:	b7 01       	movw	r22, r14
    4324:	41 2f       	mov	r20, r17
    4326:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    432a:	80 2f       	mov	r24, r16
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	61 2f       	mov	r22, r17
    4330:	70 e0       	ldi	r23, 0x00	; 0
    4332:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <copyVectorPage>
    4336:	08 94       	sec
    4338:	e1 1c       	adc	r14, r1
    433a:	f1 1c       	adc	r15, r1
    433c:	86 e1       	ldi	r24, 0x16	; 22
    433e:	e8 16       	cp	r14, r24
    4340:	f1 04       	cpc	r15, r1
    4342:	19 f7       	brne	.-58     	; 0x430a <fcopy+0xbc>
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	0f 90       	pop	r0
    434a:	0f 90       	pop	r0
    434c:	0f 90       	pop	r0
    434e:	0f 90       	pop	r0
    4350:	cf 91       	pop	r28
    4352:	df 91       	pop	r29
    4354:	1f 91       	pop	r17
    4356:	0f 91       	pop	r16
    4358:	ff 90       	pop	r15
    435a:	ef 90       	pop	r14
    435c:	df 90       	pop	r13
    435e:	cf 90       	pop	r12
    4360:	bf 90       	pop	r11
    4362:	af 90       	pop	r10
    4364:	9f 90       	pop	r9
    4366:	8f 90       	pop	r8
    4368:	7f 90       	pop	r7
    436a:	6f 90       	pop	r6
    436c:	08 95       	ret

0000436e <fmove>:
    436e:	9f 92       	push	r9
    4370:	af 92       	push	r10
    4372:	bf 92       	push	r11
    4374:	cf 92       	push	r12
    4376:	df 92       	push	r13
    4378:	ef 92       	push	r14
    437a:	ff 92       	push	r15
    437c:	0f 93       	push	r16
    437e:	1f 93       	push	r17
    4380:	df 93       	push	r29
    4382:	cf 93       	push	r28
    4384:	00 d0       	rcall	.+0      	; 0x4386 <fmove+0x18>
    4386:	00 d0       	rcall	.+0      	; 0x4388 <fmove+0x1a>
    4388:	cd b7       	in	r28, 0x3d	; 61
    438a:	de b7       	in	r29, 0x3e	; 62
    438c:	7c 01       	movw	r14, r24
    438e:	8b 01       	movw	r16, r22
    4390:	cb 01       	movw	r24, r22
    4392:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <extractLastName>
    4396:	a8 2e       	mov	r10, r24
    4398:	99 2e       	mov	r9, r25
    439a:	c8 01       	movw	r24, r16
    439c:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    43a0:	6c 01       	movw	r12, r24
    43a2:	c7 01       	movw	r24, r14
    43a4:	be 01       	movw	r22, r28
    43a6:	6f 5f       	subi	r22, 0xFF	; 255
    43a8:	7f 4f       	sbci	r23, 0xFF	; 255
    43aa:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <locateFileName>
    43ae:	f8 2e       	mov	r15, r24
    43b0:	e9 2e       	mov	r14, r25
    43b2:	6f e1       	ldi	r22, 0x1F	; 31
    43b4:	70 e0       	ldi	r23, 0x00	; 0
    43b6:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    43ba:	6f 2d       	mov	r22, r15
    43bc:	0e 94 b8 29 	call	0x5370	; 0x5370 <removeChildNode>
    43c0:	c8 01       	movw	r24, r16
    43c2:	be 01       	movw	r22, r28
    43c4:	6d 5f       	subi	r22, 0xFD	; 253
    43c6:	7f 4f       	sbci	r23, 0xFF	; 255
    43c8:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <locateFileName>
    43cc:	b8 2e       	mov	r11, r24
    43ce:	8f 2d       	mov	r24, r15
    43d0:	9e 2d       	mov	r25, r14
    43d2:	6f e1       	ldi	r22, 0x1F	; 31
    43d4:	70 e0       	ldi	r23, 0x00	; 0
    43d6:	4b 2d       	mov	r20, r11
    43d8:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    43dc:	0c 0d       	add	r16, r12
    43de:	1d 1d       	adc	r17, r13
    43e0:	0a 19       	sub	r16, r10
    43e2:	8f 2d       	mov	r24, r15
    43e4:	9e 2d       	mov	r25, r14
    43e6:	60 e0       	ldi	r22, 0x00	; 0
    43e8:	70 e0       	ldi	r23, 0x00	; 0
    43ea:	40 2f       	mov	r20, r16
    43ec:	50 e0       	ldi	r21, 0x00	; 0
    43ee:	2a 2d       	mov	r18, r10
    43f0:	39 2d       	mov	r19, r9
    43f2:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <fswriteBytes>
    43f6:	8f 2d       	mov	r24, r15
    43f8:	9e 2d       	mov	r25, r14
    43fa:	60 2f       	mov	r22, r16
    43fc:	70 e0       	ldi	r23, 0x00	; 0
    43fe:	40 e0       	ldi	r20, 0x00	; 0
    4400:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    4404:	8b 2d       	mov	r24, r11
    4406:	6f 2d       	mov	r22, r15
    4408:	0e 94 db 29 	call	0x53b6	; 0x53b6 <addChildNode>
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	cf 91       	pop	r28
    441a:	df 91       	pop	r29
    441c:	1f 91       	pop	r17
    441e:	0f 91       	pop	r16
    4420:	ff 90       	pop	r15
    4422:	ef 90       	pop	r14
    4424:	df 90       	pop	r13
    4426:	cf 90       	pop	r12
    4428:	bf 90       	pop	r11
    442a:	af 90       	pop	r10
    442c:	9f 90       	pop	r9
    442e:	08 95       	ret

00004430 <fwrite2>:
    4430:	2f 92       	push	r2
    4432:	3f 92       	push	r3
    4434:	4f 92       	push	r4
    4436:	5f 92       	push	r5
    4438:	6f 92       	push	r6
    443a:	7f 92       	push	r7
    443c:	8f 92       	push	r8
    443e:	9f 92       	push	r9
    4440:	af 92       	push	r10
    4442:	bf 92       	push	r11
    4444:	cf 92       	push	r12
    4446:	df 92       	push	r13
    4448:	ef 92       	push	r14
    444a:	ff 92       	push	r15
    444c:	0f 93       	push	r16
    444e:	1f 93       	push	r17
    4450:	cf 93       	push	r28
    4452:	df 93       	push	r29
    4454:	ec 01       	movw	r28, r24
    4456:	2b 01       	movw	r4, r22
    4458:	3a 01       	movw	r6, r20
    445a:	ee 80       	ldd	r14, Y+6	; 0x06
    445c:	ff 80       	ldd	r15, Y+7	; 0x07
    445e:	08 85       	ldd	r16, Y+8	; 0x08
    4460:	19 85       	ldd	r17, Y+9	; 0x09
    4462:	5a 01       	movw	r10, r20
    4464:	cc 24       	eor	r12, r12
    4466:	b7 fc       	sbrc	r11, 7
    4468:	c0 94       	com	r12
    446a:	dc 2c       	mov	r13, r12
    446c:	a6 01       	movw	r20, r12
    446e:	95 01       	movw	r18, r10
    4470:	2e 0d       	add	r18, r14
    4472:	3f 1d       	adc	r19, r15
    4474:	40 1f       	adc	r20, r16
    4476:	51 1f       	adc	r21, r17
    4478:	6c 81       	ldd	r22, Y+4	; 0x04
    447a:	7d 81       	ldd	r23, Y+5	; 0x05
    447c:	cb 01       	movw	r24, r22
    447e:	a0 e0       	ldi	r26, 0x00	; 0
    4480:	b0 e0       	ldi	r27, 0x00	; 0
    4482:	82 17       	cp	r24, r18
    4484:	93 07       	cpc	r25, r19
    4486:	a4 07       	cpc	r26, r20
    4488:	b5 07       	cpc	r27, r21
    448a:	ec f4       	brge	.+58     	; 0x44c6 <fwrite2+0x96>
    448c:	97 2f       	mov	r25, r23
    448e:	98 7f       	andi	r25, 0xF8	; 248
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	77 70       	andi	r23, 0x07	; 7
    4494:	67 2b       	or	r22, r23
    4496:	11 f0       	breq	.+4      	; 0x449c <fwrite2+0x6c>
    4498:	80 50       	subi	r24, 0x00	; 0
    449a:	98 4f       	sbci	r25, 0xF8	; 248
    449c:	a0 e0       	ldi	r26, 0x00	; 0
    449e:	b0 e0       	ldi	r27, 0x00	; 0
    44a0:	82 17       	cp	r24, r18
    44a2:	93 07       	cpc	r25, r19
    44a4:	a4 07       	cpc	r26, r20
    44a6:	b5 07       	cpc	r27, r21
    44a8:	0c f4       	brge	.+2      	; 0x44ac <fwrite2+0x7c>
    44aa:	ae c0       	rjmp	.+348    	; 0x4608 <fwrite2+0x1d8>
    44ac:	a3 01       	movw	r20, r6
    44ae:	4e 0d       	add	r20, r14
    44b0:	5f 1d       	adc	r21, r15
    44b2:	5d 83       	std	Y+5, r21	; 0x05
    44b4:	4c 83       	std	Y+4, r20	; 0x04
    44b6:	8a 81       	ldd	r24, Y+2	; 0x02
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	6d e1       	ldi	r22, 0x1D	; 29
    44bc:	70 e0       	ldi	r23, 0x00	; 0
    44be:	0e 94 90 25 	call	0x4b20	; 0x4b20 <fswrite16uint>
    44c2:	6c 81       	ldd	r22, Y+4	; 0x04
    44c4:	7d 81       	ldd	r23, Y+5	; 0x05
    44c6:	61 50       	subi	r22, 0x01	; 1
    44c8:	7a 4f       	sbci	r23, 0xFA	; 250
    44ca:	08 f0       	brcs	.+2      	; 0x44ce <fwrite2+0x9e>
    44cc:	9a c0       	rjmp	.+308    	; 0x4602 <fwrite2+0x1d2>
    44ce:	ee 80       	ldd	r14, Y+6	; 0x06
    44d0:	ff 80       	ldd	r15, Y+7	; 0x07
    44d2:	08 85       	ldd	r16, Y+8	; 0x08
    44d4:	19 85       	ldd	r17, Y+9	; 0x09
    44d6:	c8 01       	movw	r24, r16
    44d8:	b7 01       	movw	r22, r14
    44da:	20 e0       	ldi	r18, 0x00	; 0
    44dc:	38 e0       	ldi	r19, 0x08	; 8
    44de:	40 e0       	ldi	r20, 0x00	; 0
    44e0:	50 e0       	ldi	r21, 0x00	; 0
    44e2:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    44e6:	49 01       	movw	r8, r18
    44e8:	c8 01       	movw	r24, r16
    44ea:	b7 01       	movw	r22, r14
    44ec:	61 50       	subi	r22, 0x01	; 1
    44ee:	70 40       	sbci	r23, 0x00	; 0
    44f0:	80 40       	sbci	r24, 0x00	; 0
    44f2:	90 40       	sbci	r25, 0x00	; 0
    44f4:	6a 0d       	add	r22, r10
    44f6:	7b 1d       	adc	r23, r11
    44f8:	8c 1d       	adc	r24, r12
    44fa:	9d 1d       	adc	r25, r13
    44fc:	20 e0       	ldi	r18, 0x00	; 0
    44fe:	38 e0       	ldi	r19, 0x08	; 8
    4500:	40 e0       	ldi	r20, 0x00	; 0
    4502:	50 e0       	ldi	r21, 0x00	; 0
    4504:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    4508:	19 01       	movw	r2, r18
    450a:	82 16       	cp	r8, r18
    450c:	93 06       	cpc	r9, r19
    450e:	09 f4       	brne	.+2      	; 0x4512 <fwrite2+0xe2>
    4510:	95 c0       	rjmp	.+298    	; 0x463c <fwrite2+0x20c>
    4512:	c8 01       	movw	r24, r16
    4514:	b7 01       	movw	r22, r14
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	38 e0       	ldi	r19, 0x08	; 8
    451a:	40 e0       	ldi	r20, 0x00	; 0
    451c:	50 e0       	ldi	r21, 0x00	; 0
    451e:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    4522:	46 2f       	mov	r20, r22
    4524:	e7 2f       	mov	r30, r23
    4526:	86 2f       	mov	r24, r22
    4528:	9e 2f       	mov	r25, r30
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	71 e0       	ldi	r23, 0x01	; 1
    452e:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    4532:	7c 01       	movw	r14, r24
    4534:	24 2f       	mov	r18, r20
    4536:	3e 2f       	mov	r19, r30
    4538:	c9 01       	movw	r24, r18
    453a:	97 fd       	sbrc	r25, 7
    453c:	b2 c0       	rjmp	.+356    	; 0x46a2 <fwrite2+0x272>
    453e:	09 2f       	mov	r16, r25
    4540:	11 27       	eor	r17, r17
    4542:	07 fd       	sbrc	r16, 7
    4544:	1a 95       	dec	r17
    4546:	8a 81       	ldd	r24, Y+2	; 0x02
    4548:	68 2d       	mov	r22, r8
    454a:	0e 94 40 29 	call	0x5280	; 0x5280 <getRealSector>
    454e:	81 2c       	mov	r8, r1
    4550:	61 e0       	ldi	r22, 0x01	; 1
    4552:	96 2e       	mov	r9, r22
    4554:	8e 18       	sub	r8, r14
    4556:	9f 08       	sbc	r9, r15
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	88 0f       	add	r24, r24
    455e:	99 1f       	adc	r25, r25
    4560:	88 0f       	add	r24, r24
    4562:	99 1f       	adc	r25, r25
    4564:	88 0f       	add	r24, r24
    4566:	99 1f       	adc	r25, r25
    4568:	80 0f       	add	r24, r16
    456a:	91 1f       	adc	r25, r17
    456c:	6e 2d       	mov	r22, r14
    456e:	a2 01       	movw	r20, r4
    4570:	94 01       	movw	r18, r8
    4572:	0e 94 b8 34 	call	0x6970	; 0x6970 <writepagestorage>
    4576:	6e 81       	ldd	r22, Y+6	; 0x06
    4578:	7f 81       	ldd	r23, Y+7	; 0x07
    457a:	88 85       	ldd	r24, Y+8	; 0x08
    457c:	99 85       	ldd	r25, Y+9	; 0x09
    457e:	61 50       	subi	r22, 0x01	; 1
    4580:	70 40       	sbci	r23, 0x00	; 0
    4582:	80 40       	sbci	r24, 0x00	; 0
    4584:	90 40       	sbci	r25, 0x00	; 0
    4586:	6a 0d       	add	r22, r10
    4588:	7b 1d       	adc	r23, r11
    458a:	8c 1d       	adc	r24, r12
    458c:	9d 1d       	adc	r25, r13
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	38 e0       	ldi	r19, 0x08	; 8
    4592:	40 e0       	ldi	r20, 0x00	; 0
    4594:	50 e0       	ldi	r21, 0x00	; 0
    4596:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    459a:	cb 01       	movw	r24, r22
    459c:	77 fd       	sbrc	r23, 7
    459e:	7e c0       	rjmp	.+252    	; 0x469c <fwrite2+0x26c>
    45a0:	09 2f       	mov	r16, r25
    45a2:	11 27       	eor	r17, r17
    45a4:	07 fd       	sbrc	r16, 7
    45a6:	1a 95       	dec	r17
    45a8:	8a 81       	ldd	r24, Y+2	; 0x02
    45aa:	62 2d       	mov	r22, r2
    45ac:	0e 94 40 29 	call	0x5280	; 0x5280 <getRealSector>
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	01 97       	sbiw	r24, 0x01	; 1
    45b4:	88 0f       	add	r24, r24
    45b6:	99 1f       	adc	r25, r25
    45b8:	88 0f       	add	r24, r24
    45ba:	99 1f       	adc	r25, r25
    45bc:	88 0f       	add	r24, r24
    45be:	99 1f       	adc	r25, r25
    45c0:	48 0c       	add	r4, r8
    45c2:	59 1c       	adc	r5, r9
    45c4:	68 18       	sub	r6, r8
    45c6:	79 08       	sbc	r7, r9
    45c8:	80 0f       	add	r24, r16
    45ca:	91 1f       	adc	r25, r17
    45cc:	60 e0       	ldi	r22, 0x00	; 0
    45ce:	a2 01       	movw	r20, r4
    45d0:	93 01       	movw	r18, r6
    45d2:	0e 94 b8 34 	call	0x6970	; 0x6970 <writepagestorage>
    45d6:	20 e0       	ldi	r18, 0x00	; 0
    45d8:	30 e0       	ldi	r19, 0x00	; 0
    45da:	c9 01       	movw	r24, r18
    45dc:	df 91       	pop	r29
    45de:	cf 91       	pop	r28
    45e0:	1f 91       	pop	r17
    45e2:	0f 91       	pop	r16
    45e4:	ff 90       	pop	r15
    45e6:	ef 90       	pop	r14
    45e8:	df 90       	pop	r13
    45ea:	cf 90       	pop	r12
    45ec:	bf 90       	pop	r11
    45ee:	af 90       	pop	r10
    45f0:	9f 90       	pop	r9
    45f2:	8f 90       	pop	r8
    45f4:	7f 90       	pop	r7
    45f6:	6f 90       	pop	r6
    45f8:	5f 90       	pop	r5
    45fa:	4f 90       	pop	r4
    45fc:	3f 90       	pop	r3
    45fe:	2f 90       	pop	r2
    4600:	08 95       	ret
    4602:	22 e0       	ldi	r18, 0x02	; 2
    4604:	30 e0       	ldi	r19, 0x00	; 0
    4606:	e9 cf       	rjmp	.-46     	; 0x45da <fwrite2+0x1aa>
    4608:	8a 81       	ldd	r24, Y+2	; 0x02
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	0e 94 fe 29 	call	0x53fc	; 0x53fc <newSector>
    4610:	ee 80       	ldd	r14, Y+6	; 0x06
    4612:	ff 80       	ldd	r15, Y+7	; 0x07
    4614:	08 85       	ldd	r16, Y+8	; 0x08
    4616:	19 85       	ldd	r17, Y+9	; 0x09
    4618:	6c 81       	ldd	r22, Y+4	; 0x04
    461a:	7d 81       	ldd	r23, Y+5	; 0x05
    461c:	a6 01       	movw	r20, r12
    461e:	95 01       	movw	r18, r10
    4620:	2e 0d       	add	r18, r14
    4622:	3f 1d       	adc	r19, r15
    4624:	40 1f       	adc	r20, r16
    4626:	51 1f       	adc	r21, r17
    4628:	cb 01       	movw	r24, r22
    462a:	a0 e0       	ldi	r26, 0x00	; 0
    462c:	b0 e0       	ldi	r27, 0x00	; 0
    462e:	82 17       	cp	r24, r18
    4630:	93 07       	cpc	r25, r19
    4632:	a4 07       	cpc	r26, r20
    4634:	b5 07       	cpc	r27, r21
    4636:	0c f0       	brlt	.+2      	; 0x463a <fwrite2+0x20a>
    4638:	46 cf       	rjmp	.-372    	; 0x44c6 <fwrite2+0x96>
    463a:	38 cf       	rjmp	.-400    	; 0x44ac <fwrite2+0x7c>
    463c:	c8 01       	movw	r24, r16
    463e:	b7 01       	movw	r22, r14
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	38 e0       	ldi	r19, 0x08	; 8
    4644:	40 e0       	ldi	r20, 0x00	; 0
    4646:	50 e0       	ldi	r21, 0x00	; 0
    4648:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    464c:	f6 2e       	mov	r15, r22
    464e:	e7 2e       	mov	r14, r23
    4650:	cb 01       	movw	r24, r22
    4652:	77 fd       	sbrc	r23, 7
    4654:	29 c0       	rjmp	.+82     	; 0x46a8 <fwrite2+0x278>
    4656:	09 2f       	mov	r16, r25
    4658:	11 27       	eor	r17, r17
    465a:	07 fd       	sbrc	r16, 7
    465c:	1a 95       	dec	r17
    465e:	8a 81       	ldd	r24, Y+2	; 0x02
    4660:	68 2d       	mov	r22, r8
    4662:	0e 94 40 29 	call	0x5280	; 0x5280 <getRealSector>
    4666:	28 2f       	mov	r18, r24
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	21 50       	subi	r18, 0x01	; 1
    466c:	30 40       	sbci	r19, 0x00	; 0
    466e:	22 0f       	add	r18, r18
    4670:	33 1f       	adc	r19, r19
    4672:	22 0f       	add	r18, r18
    4674:	33 1f       	adc	r19, r19
    4676:	22 0f       	add	r18, r18
    4678:	33 1f       	adc	r19, r19
    467a:	8f 2d       	mov	r24, r15
    467c:	9e 2d       	mov	r25, r14
    467e:	60 e0       	ldi	r22, 0x00	; 0
    4680:	71 e0       	ldi	r23, 0x01	; 1
    4682:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    4686:	68 2f       	mov	r22, r24
    4688:	c9 01       	movw	r24, r18
    468a:	80 0f       	add	r24, r16
    468c:	91 1f       	adc	r25, r17
    468e:	a2 01       	movw	r20, r4
    4690:	93 01       	movw	r18, r6
    4692:	0e 94 b8 34 	call	0x6970	; 0x6970 <writepagestorage>
    4696:	20 e0       	ldi	r18, 0x00	; 0
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	9f cf       	rjmp	.-194    	; 0x45da <fwrite2+0x1aa>
    469c:	81 50       	subi	r24, 0x01	; 1
    469e:	9f 4f       	sbci	r25, 0xFF	; 255
    46a0:	7f cf       	rjmp	.-258    	; 0x45a0 <fwrite2+0x170>
    46a2:	81 50       	subi	r24, 0x01	; 1
    46a4:	9f 4f       	sbci	r25, 0xFF	; 255
    46a6:	4b cf       	rjmp	.-362    	; 0x453e <fwrite2+0x10e>
    46a8:	81 50       	subi	r24, 0x01	; 1
    46aa:	9f 4f       	sbci	r25, 0xFF	; 255
    46ac:	d4 cf       	rjmp	.-88     	; 0x4656 <fwrite2+0x226>

000046ae <fread2>:
    46ae:	2f 92       	push	r2
    46b0:	3f 92       	push	r3
    46b2:	4f 92       	push	r4
    46b4:	5f 92       	push	r5
    46b6:	6f 92       	push	r6
    46b8:	7f 92       	push	r7
    46ba:	8f 92       	push	r8
    46bc:	9f 92       	push	r9
    46be:	af 92       	push	r10
    46c0:	bf 92       	push	r11
    46c2:	cf 92       	push	r12
    46c4:	df 92       	push	r13
    46c6:	ef 92       	push	r14
    46c8:	ff 92       	push	r15
    46ca:	0f 93       	push	r16
    46cc:	1f 93       	push	r17
    46ce:	df 93       	push	r29
    46d0:	cf 93       	push	r28
    46d2:	00 d0       	rcall	.+0      	; 0x46d4 <fread2+0x26>
    46d4:	00 d0       	rcall	.+0      	; 0x46d6 <fread2+0x28>
    46d6:	00 d0       	rcall	.+0      	; 0x46d8 <fread2+0x2a>
    46d8:	cd b7       	in	r28, 0x3d	; 61
    46da:	de b7       	in	r29, 0x3e	; 62
    46dc:	4c 01       	movw	r8, r24
    46de:	7c 83       	std	Y+4, r23	; 0x04
    46e0:	6b 83       	std	Y+3, r22	; 0x03
    46e2:	1a 01       	movw	r2, r20
    46e4:	fc 01       	movw	r30, r24
    46e6:	a6 80       	ldd	r10, Z+6	; 0x06
    46e8:	b7 80       	ldd	r11, Z+7	; 0x07
    46ea:	c0 84       	ldd	r12, Z+8	; 0x08
    46ec:	d1 84       	ldd	r13, Z+9	; 0x09
    46ee:	2a 01       	movw	r4, r20
    46f0:	66 24       	eor	r6, r6
    46f2:	57 fc       	sbrc	r5, 7
    46f4:	60 94       	com	r6
    46f6:	76 2c       	mov	r7, r6
    46f8:	83 01       	movw	r16, r6
    46fa:	72 01       	movw	r14, r4
    46fc:	ea 0c       	add	r14, r10
    46fe:	fb 1c       	adc	r15, r11
    4700:	0c 1d       	adc	r16, r12
    4702:	1d 1d       	adc	r17, r13
    4704:	84 81       	ldd	r24, Z+4	; 0x04
    4706:	95 81       	ldd	r25, Z+5	; 0x05
    4708:	a0 e0       	ldi	r26, 0x00	; 0
    470a:	b0 e0       	ldi	r27, 0x00	; 0
    470c:	8e 15       	cp	r24, r14
    470e:	9f 05       	cpc	r25, r15
    4710:	a0 07       	cpc	r26, r16
    4712:	b1 07       	cpc	r27, r17
    4714:	0c f4       	brge	.+2      	; 0x4718 <fread2+0x6a>
    4716:	a5 c0       	rjmp	.+330    	; 0x4862 <fread2+0x1b4>
    4718:	c6 01       	movw	r24, r12
    471a:	b5 01       	movw	r22, r10
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	38 e0       	ldi	r19, 0x08	; 8
    4720:	40 e0       	ldi	r20, 0x00	; 0
    4722:	50 e0       	ldi	r21, 0x00	; 0
    4724:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    4728:	3e 83       	std	Y+6, r19	; 0x06
    472a:	2d 83       	std	Y+5, r18	; 0x05
    472c:	08 94       	sec
    472e:	e1 08       	sbc	r14, r1
    4730:	f1 08       	sbc	r15, r1
    4732:	01 09       	sbc	r16, r1
    4734:	11 09       	sbc	r17, r1
    4736:	c8 01       	movw	r24, r16
    4738:	b7 01       	movw	r22, r14
    473a:	20 e0       	ldi	r18, 0x00	; 0
    473c:	38 e0       	ldi	r19, 0x08	; 8
    473e:	40 e0       	ldi	r20, 0x00	; 0
    4740:	50 e0       	ldi	r21, 0x00	; 0
    4742:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    4746:	3a 83       	std	Y+2, r19	; 0x02
    4748:	29 83       	std	Y+1, r18	; 0x01
    474a:	8d 81       	ldd	r24, Y+5	; 0x05
    474c:	9e 81       	ldd	r25, Y+6	; 0x06
    474e:	82 17       	cp	r24, r18
    4750:	93 07       	cpc	r25, r19
    4752:	09 f4       	brne	.+2      	; 0x4756 <fread2+0xa8>
    4754:	89 c0       	rjmp	.+274    	; 0x4868 <fread2+0x1ba>
    4756:	c6 01       	movw	r24, r12
    4758:	b5 01       	movw	r22, r10
    475a:	20 e0       	ldi	r18, 0x00	; 0
    475c:	38 e0       	ldi	r19, 0x08	; 8
    475e:	40 e0       	ldi	r20, 0x00	; 0
    4760:	50 e0       	ldi	r21, 0x00	; 0
    4762:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    4766:	46 2f       	mov	r20, r22
    4768:	e7 2f       	mov	r30, r23
    476a:	86 2f       	mov	r24, r22
    476c:	9e 2f       	mov	r25, r30
    476e:	60 e0       	ldi	r22, 0x00	; 0
    4770:	71 e0       	ldi	r23, 0x01	; 1
    4772:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    4776:	7c 01       	movw	r14, r24
    4778:	24 2f       	mov	r18, r20
    477a:	3e 2f       	mov	r19, r30
    477c:	c9 01       	movw	r24, r18
    477e:	97 fd       	sbrc	r25, 7
    4780:	a8 c0       	rjmp	.+336    	; 0x48d2 <fread2+0x224>
    4782:	09 2f       	mov	r16, r25
    4784:	11 27       	eor	r17, r17
    4786:	07 fd       	sbrc	r16, 7
    4788:	1a 95       	dec	r17
    478a:	f4 01       	movw	r30, r8
    478c:	82 81       	ldd	r24, Z+2	; 0x02
    478e:	6d 81       	ldd	r22, Y+5	; 0x05
    4790:	0e 94 40 29 	call	0x5280	; 0x5280 <getRealSector>
    4794:	c1 2c       	mov	r12, r1
    4796:	31 e0       	ldi	r19, 0x01	; 1
    4798:	d3 2e       	mov	r13, r19
    479a:	ce 18       	sub	r12, r14
    479c:	df 08       	sbc	r13, r15
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	01 97       	sbiw	r24, 0x01	; 1
    47a2:	88 0f       	add	r24, r24
    47a4:	99 1f       	adc	r25, r25
    47a6:	88 0f       	add	r24, r24
    47a8:	99 1f       	adc	r25, r25
    47aa:	88 0f       	add	r24, r24
    47ac:	99 1f       	adc	r25, r25
    47ae:	80 0f       	add	r24, r16
    47b0:	91 1f       	adc	r25, r17
    47b2:	6e 2d       	mov	r22, r14
    47b4:	4b 81       	ldd	r20, Y+3	; 0x03
    47b6:	5c 81       	ldd	r21, Y+4	; 0x04
    47b8:	96 01       	movw	r18, r12
    47ba:	0e 94 bb 34 	call	0x6976	; 0x6976 <readpagestorage>
    47be:	f4 01       	movw	r30, r8
    47c0:	66 81       	ldd	r22, Z+6	; 0x06
    47c2:	77 81       	ldd	r23, Z+7	; 0x07
    47c4:	80 85       	ldd	r24, Z+8	; 0x08
    47c6:	91 85       	ldd	r25, Z+9	; 0x09
    47c8:	61 50       	subi	r22, 0x01	; 1
    47ca:	70 40       	sbci	r23, 0x00	; 0
    47cc:	80 40       	sbci	r24, 0x00	; 0
    47ce:	90 40       	sbci	r25, 0x00	; 0
    47d0:	64 0d       	add	r22, r4
    47d2:	75 1d       	adc	r23, r5
    47d4:	86 1d       	adc	r24, r6
    47d6:	97 1d       	adc	r25, r7
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	38 e0       	ldi	r19, 0x08	; 8
    47dc:	40 e0       	ldi	r20, 0x00	; 0
    47de:	50 e0       	ldi	r21, 0x00	; 0
    47e0:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    47e4:	cb 01       	movw	r24, r22
    47e6:	77 fd       	sbrc	r23, 7
    47e8:	71 c0       	rjmp	.+226    	; 0x48cc <fread2+0x21e>
    47ea:	09 2f       	mov	r16, r25
    47ec:	11 27       	eor	r17, r17
    47ee:	07 fd       	sbrc	r16, 7
    47f0:	1a 95       	dec	r17
    47f2:	f4 01       	movw	r30, r8
    47f4:	82 81       	ldd	r24, Z+2	; 0x02
    47f6:	69 81       	ldd	r22, Y+1	; 0x01
    47f8:	0e 94 40 29 	call	0x5280	; 0x5280 <getRealSector>
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	01 97       	sbiw	r24, 0x01	; 1
    4800:	88 0f       	add	r24, r24
    4802:	99 1f       	adc	r25, r25
    4804:	88 0f       	add	r24, r24
    4806:	99 1f       	adc	r25, r25
    4808:	88 0f       	add	r24, r24
    480a:	99 1f       	adc	r25, r25
    480c:	2b 81       	ldd	r18, Y+3	; 0x03
    480e:	3c 81       	ldd	r19, Y+4	; 0x04
    4810:	2c 0d       	add	r18, r12
    4812:	3d 1d       	adc	r19, r13
    4814:	3c 83       	std	Y+4, r19	; 0x04
    4816:	2b 83       	std	Y+3, r18	; 0x03
    4818:	2c 18       	sub	r2, r12
    481a:	3d 08       	sbc	r3, r13
    481c:	80 0f       	add	r24, r16
    481e:	91 1f       	adc	r25, r17
    4820:	60 e0       	ldi	r22, 0x00	; 0
    4822:	a9 01       	movw	r20, r18
    4824:	91 01       	movw	r18, r2
    4826:	0e 94 bb 34 	call	0x6976	; 0x6976 <readpagestorage>
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	c9 01       	movw	r24, r18
    4830:	26 96       	adiw	r28, 0x06	; 6
    4832:	0f b6       	in	r0, 0x3f	; 63
    4834:	f8 94       	cli
    4836:	de bf       	out	0x3e, r29	; 62
    4838:	0f be       	out	0x3f, r0	; 63
    483a:	cd bf       	out	0x3d, r28	; 61
    483c:	cf 91       	pop	r28
    483e:	df 91       	pop	r29
    4840:	1f 91       	pop	r17
    4842:	0f 91       	pop	r16
    4844:	ff 90       	pop	r15
    4846:	ef 90       	pop	r14
    4848:	df 90       	pop	r13
    484a:	cf 90       	pop	r12
    484c:	bf 90       	pop	r11
    484e:	af 90       	pop	r10
    4850:	9f 90       	pop	r9
    4852:	8f 90       	pop	r8
    4854:	7f 90       	pop	r7
    4856:	6f 90       	pop	r6
    4858:	5f 90       	pop	r5
    485a:	4f 90       	pop	r4
    485c:	3f 90       	pop	r3
    485e:	2f 90       	pop	r2
    4860:	08 95       	ret
    4862:	2f ef       	ldi	r18, 0xFF	; 255
    4864:	3f ef       	ldi	r19, 0xFF	; 255
    4866:	e3 cf       	rjmp	.-58     	; 0x482e <fread2+0x180>
    4868:	c6 01       	movw	r24, r12
    486a:	b5 01       	movw	r22, r10
    486c:	20 e0       	ldi	r18, 0x00	; 0
    486e:	38 e0       	ldi	r19, 0x08	; 8
    4870:	40 e0       	ldi	r20, 0x00	; 0
    4872:	50 e0       	ldi	r21, 0x00	; 0
    4874:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    4878:	f6 2e       	mov	r15, r22
    487a:	e7 2e       	mov	r14, r23
    487c:	cb 01       	movw	r24, r22
    487e:	77 fd       	sbrc	r23, 7
    4880:	2b c0       	rjmp	.+86     	; 0x48d8 <fread2+0x22a>
    4882:	09 2f       	mov	r16, r25
    4884:	11 27       	eor	r17, r17
    4886:	07 fd       	sbrc	r16, 7
    4888:	1a 95       	dec	r17
    488a:	f4 01       	movw	r30, r8
    488c:	82 81       	ldd	r24, Z+2	; 0x02
    488e:	6d 81       	ldd	r22, Y+5	; 0x05
    4890:	0e 94 40 29 	call	0x5280	; 0x5280 <getRealSector>
    4894:	28 2f       	mov	r18, r24
    4896:	30 e0       	ldi	r19, 0x00	; 0
    4898:	21 50       	subi	r18, 0x01	; 1
    489a:	30 40       	sbci	r19, 0x00	; 0
    489c:	22 0f       	add	r18, r18
    489e:	33 1f       	adc	r19, r19
    48a0:	22 0f       	add	r18, r18
    48a2:	33 1f       	adc	r19, r19
    48a4:	22 0f       	add	r18, r18
    48a6:	33 1f       	adc	r19, r19
    48a8:	8f 2d       	mov	r24, r15
    48aa:	9e 2d       	mov	r25, r14
    48ac:	60 e0       	ldi	r22, 0x00	; 0
    48ae:	71 e0       	ldi	r23, 0x01	; 1
    48b0:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    48b4:	68 2f       	mov	r22, r24
    48b6:	c9 01       	movw	r24, r18
    48b8:	80 0f       	add	r24, r16
    48ba:	91 1f       	adc	r25, r17
    48bc:	4b 81       	ldd	r20, Y+3	; 0x03
    48be:	5c 81       	ldd	r21, Y+4	; 0x04
    48c0:	91 01       	movw	r18, r2
    48c2:	0e 94 bb 34 	call	0x6976	; 0x6976 <readpagestorage>
    48c6:	20 e0       	ldi	r18, 0x00	; 0
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	b1 cf       	rjmp	.-158    	; 0x482e <fread2+0x180>
    48cc:	81 50       	subi	r24, 0x01	; 1
    48ce:	9f 4f       	sbci	r25, 0xFF	; 255
    48d0:	8c cf       	rjmp	.-232    	; 0x47ea <fread2+0x13c>
    48d2:	81 50       	subi	r24, 0x01	; 1
    48d4:	9f 4f       	sbci	r25, 0xFF	; 255
    48d6:	55 cf       	rjmp	.-342    	; 0x4782 <fread2+0xd4>
    48d8:	81 50       	subi	r24, 0x01	; 1
    48da:	9f 4f       	sbci	r25, 0xFF	; 255
    48dc:	d2 cf       	rjmp	.-92     	; 0x4882 <fread2+0x1d4>

000048de <fsprintall>:
    48de:	cf 93       	push	r28
    48e0:	df 93       	push	r29
    48e2:	c0 e0       	ldi	r28, 0x00	; 0
    48e4:	d0 e0       	ldi	r29, 0x00	; 0
    48e6:	ce 01       	movw	r24, r28
    48e8:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <checkNodeValid>
    48ec:	18 16       	cp	r1, r24
    48ee:	19 06       	cpc	r1, r25
    48f0:	1c f4       	brge	.+6      	; 0x48f8 <fsprintall+0x1a>
    48f2:	ce 01       	movw	r24, r28
    48f4:	0e 94 92 26 	call	0x4d24	; 0x4d24 <printNode>
    48f8:	21 96       	adiw	r28, 0x01	; 1
    48fa:	c1 36       	cpi	r28, 0x61	; 97
    48fc:	d1 05       	cpc	r29, r1
    48fe:	99 f7       	brne	.-26     	; 0x48e6 <fsprintall+0x8>
    4900:	df 91       	pop	r29
    4902:	cf 91       	pop	r28
    4904:	08 95       	ret

00004906 <fcheckStorageAllocation>:
    4906:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <countVectorFlash>
    490a:	08 95       	ret

0000490c <fcheckFSAllocation>:
    490c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <countVectorNode>
    4910:	08 95       	ret

00004912 <fdelete2>:
    4912:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <fexist2>
    4916:	2f ef       	ldi	r18, 0xFF	; 255
    4918:	8f 3f       	cpi	r24, 0xFF	; 255
    491a:	92 07       	cpc	r25, r18
    491c:	31 f0       	breq	.+12     	; 0x492a <fdelete2+0x18>
    491e:	0e 94 88 27 	call	0x4f10	; 0x4f10 <deleteNode>
    4922:	20 e0       	ldi	r18, 0x00	; 0
    4924:	30 e0       	ldi	r19, 0x00	; 0
    4926:	c9 01       	movw	r24, r18
    4928:	08 95       	ret
    492a:	2f ef       	ldi	r18, 0xFF	; 255
    492c:	3f ef       	ldi	r19, 0xFF	; 255
    492e:	c9 01       	movw	r24, r18
    4930:	08 95       	ret

00004932 <fcreatedir2>:
    4932:	ef 92       	push	r14
    4934:	ff 92       	push	r15
    4936:	0f 93       	push	r16
    4938:	1f 93       	push	r17
    493a:	df 93       	push	r29
    493c:	cf 93       	push	r28
    493e:	00 d0       	rcall	.+0      	; 0x4940 <fcreatedir2+0xe>
    4940:	cd b7       	in	r28, 0x3d	; 61
    4942:	de b7       	in	r29, 0x3e	; 62
    4944:	7c 01       	movw	r14, r24
    4946:	be 01       	movw	r22, r28
    4948:	6f 5f       	subi	r22, 0xFF	; 255
    494a:	7f 4f       	sbci	r23, 0xFF	; 255
    494c:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <locateFileName>
    4950:	8c 01       	movw	r16, r24
    4952:	8f ef       	ldi	r24, 0xFF	; 255
    4954:	0f 3f       	cpi	r16, 0xFF	; 255
    4956:	18 07       	cpc	r17, r24
    4958:	61 f4       	brne	.+24     	; 0x4972 <fcreatedir2+0x40>
    495a:	2f ef       	ldi	r18, 0xFF	; 255
    495c:	3f ef       	ldi	r19, 0xFF	; 255
    495e:	c9 01       	movw	r24, r18
    4960:	0f 90       	pop	r0
    4962:	0f 90       	pop	r0
    4964:	cf 91       	pop	r28
    4966:	df 91       	pop	r29
    4968:	1f 91       	pop	r17
    496a:	0f 91       	pop	r16
    496c:	ff 90       	pop	r15
    496e:	ef 90       	pop	r14
    4970:	08 95       	ret
    4972:	89 81       	ldd	r24, Y+1	; 0x01
    4974:	9a 81       	ldd	r25, Y+2	; 0x02
    4976:	89 2b       	or	r24, r25
    4978:	81 f7       	brne	.-32     	; 0x495a <fcreatedir2+0x28>
    497a:	c7 01       	movw	r24, r14
    497c:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <extractLastName>
    4980:	b8 01       	movw	r22, r16
    4982:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <createDir>
    4986:	20 e0       	ldi	r18, 0x00	; 0
    4988:	30 e0       	ldi	r19, 0x00	; 0
    498a:	e9 cf       	rjmp	.-46     	; 0x495e <fcreatedir2+0x2c>

0000498c <fclose2>:
    498c:	fc 01       	movw	r30, r24
    498e:	81 81       	ldd	r24, Z+1	; 0x01
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <releaseFid>
    4996:	08 95       	ret

00004998 <fopen2>:
    4998:	af 92       	push	r10
    499a:	bf 92       	push	r11
    499c:	cf 92       	push	r12
    499e:	df 92       	push	r13
    49a0:	ef 92       	push	r14
    49a2:	ff 92       	push	r15
    49a4:	0f 93       	push	r16
    49a6:	1f 93       	push	r17
    49a8:	df 93       	push	r29
    49aa:	cf 93       	push	r28
    49ac:	00 d0       	rcall	.+0      	; 0x49ae <fopen2+0x16>
    49ae:	cd b7       	in	r28, 0x3d	; 61
    49b0:	de b7       	in	r29, 0x3e	; 62
    49b2:	6c 01       	movw	r12, r24
    49b4:	8b 01       	movw	r16, r22
    49b6:	be 01       	movw	r22, r28
    49b8:	6f 5f       	subi	r22, 0xFF	; 255
    49ba:	7f 4f       	sbci	r23, 0xFF	; 255
    49bc:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <locateFileName>
    49c0:	5c 01       	movw	r10, r24
    49c2:	c8 01       	movw	r24, r16
    49c4:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <fileMode>
    49c8:	7c 01       	movw	r14, r24
    49ca:	00 97       	sbiw	r24, 0x00	; 0
    49cc:	81 f4       	brne	.+32     	; 0x49ee <fopen2+0x56>
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	c9 01       	movw	r24, r18
    49d4:	0f 90       	pop	r0
    49d6:	0f 90       	pop	r0
    49d8:	cf 91       	pop	r28
    49da:	df 91       	pop	r29
    49dc:	1f 91       	pop	r17
    49de:	0f 91       	pop	r16
    49e0:	ff 90       	pop	r15
    49e2:	ef 90       	pop	r14
    49e4:	df 90       	pop	r13
    49e6:	cf 90       	pop	r12
    49e8:	bf 90       	pop	r11
    49ea:	af 90       	pop	r10
    49ec:	08 95       	ret
    49ee:	8f ef       	ldi	r24, 0xFF	; 255
    49f0:	a8 16       	cp	r10, r24
    49f2:	8f ef       	ldi	r24, 0xFF	; 255
    49f4:	b8 06       	cpc	r11, r24
    49f6:	59 f3       	breq	.-42     	; 0x49ce <fopen2+0x36>
    49f8:	89 81       	ldd	r24, Y+1	; 0x01
    49fa:	9a 81       	ldd	r25, Y+2	; 0x02
    49fc:	00 97       	sbiw	r24, 0x00	; 0
    49fe:	39 f5       	brne	.+78     	; 0x4a4e <fopen2+0xb6>
    4a00:	82 e0       	ldi	r24, 0x02	; 2
    4a02:	e8 16       	cp	r14, r24
    4a04:	f1 04       	cpc	r15, r1
    4a06:	19 f7       	brne	.-58     	; 0x49ce <fopen2+0x36>
    4a08:	c6 01       	movw	r24, r12
    4a0a:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <extractLastName>
    4a0e:	b5 01       	movw	r22, r10
    4a10:	0e 94 45 2b 	call	0x568a	; 0x568a <createFileFromDirectory>
    4a14:	18 2f       	mov	r17, r24
    4a16:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <getFreeFid>
    4a1a:	08 2f       	mov	r16, r24
    4a1c:	f9 2e       	mov	r15, r25
    4a1e:	81 2f       	mov	r24, r17
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	60 2f       	mov	r22, r16
    4a24:	7f 2d       	mov	r23, r15
    4a26:	42 e0       	ldi	r20, 0x02	; 2
    4a28:	50 e0       	ldi	r21, 0x00	; 0
    4a2a:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <openFile>
    4a2e:	80 2f       	mov	r24, r16
    4a30:	9f 2d       	mov	r25, r15
    4a32:	9c 01       	movw	r18, r24
    4a34:	22 0f       	add	r18, r18
    4a36:	33 1f       	adc	r19, r19
    4a38:	22 0f       	add	r18, r18
    4a3a:	33 1f       	adc	r19, r19
    4a3c:	22 0f       	add	r18, r18
    4a3e:	33 1f       	adc	r19, r19
    4a40:	88 0f       	add	r24, r24
    4a42:	99 1f       	adc	r25, r25
    4a44:	28 0f       	add	r18, r24
    4a46:	39 1f       	adc	r19, r25
    4a48:	2a 55       	subi	r18, 0x5A	; 90
    4a4a:	3a 4f       	sbci	r19, 0xFA	; 250
    4a4c:	c2 cf       	rjmp	.-124    	; 0x49d2 <fopen2+0x3a>
    4a4e:	02 97       	sbiw	r24, 0x02	; 2
    4a50:	09 f0       	breq	.+2      	; 0x4a54 <fopen2+0xbc>
    4a52:	bd cf       	rjmp	.-134    	; 0x49ce <fopen2+0x36>
    4a54:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <getFreeFid>
    4a58:	18 2f       	mov	r17, r24
    4a5a:	09 2f       	mov	r16, r25
    4a5c:	c5 01       	movw	r24, r10
    4a5e:	61 2f       	mov	r22, r17
    4a60:	70 2f       	mov	r23, r16
    4a62:	a7 01       	movw	r20, r14
    4a64:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <openFile>
    4a68:	81 2f       	mov	r24, r17
    4a6a:	90 2f       	mov	r25, r16
    4a6c:	e2 cf       	rjmp	.-60     	; 0x4a32 <fopen2+0x9a>

00004a6e <fsinitBytes>:
}

//-------------------------------------------------------------------------
void fsinitBytes(int inode, int offset, int nBytes, uint8_t value)
{
    4a6e:	88 0f       	add	r24, r24
    4a70:	99 1f       	adc	r25, r25
    4a72:	82 95       	swap	r24
    4a74:	92 95       	swap	r25
    4a76:	90 7f       	andi	r25, 0xF0	; 240
    4a78:	98 27       	eor	r25, r24
    4a7a:	80 7f       	andi	r24, 0xF0	; 240
    4a7c:	98 27       	eor	r25, r24
    4a7e:	86 0f       	add	r24, r22
    4a80:	97 1f       	adc	r25, r23
    4a82:	ba 01       	movw	r22, r20
    4a84:	42 2f       	mov	r20, r18
    4a86:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <initBytes>
    uint16_t addr;

    addr = inode * INODESIZE + offset;
    initBytes(addr, nBytes, value);
}
    4a8a:	08 95       	ret

00004a8c <fswriteBytes>:
    4a8c:	88 0f       	add	r24, r24
    4a8e:	99 1f       	adc	r25, r25
    4a90:	82 95       	swap	r24
    4a92:	92 95       	swap	r25
    4a94:	90 7f       	andi	r25, 0xF0	; 240
    4a96:	98 27       	eor	r25, r24
    4a98:	80 7f       	andi	r24, 0xF0	; 240
    4a9a:	98 27       	eor	r25, r24
    4a9c:	86 0f       	add	r24, r22
    4a9e:	97 1f       	adc	r25, r23
    4aa0:	ba 01       	movw	r22, r20
    4aa2:	a9 01       	movw	r20, r18
    4aa4:	0e 94 ed 1c 	call	0x39da	; 0x39da <genericwriteBytes>
    4aa8:	08 95       	ret

00004aaa <fsreadBytes>:
    4aaa:	88 0f       	add	r24, r24
    4aac:	99 1f       	adc	r25, r25
    4aae:	82 95       	swap	r24
    4ab0:	92 95       	swap	r25
    4ab2:	90 7f       	andi	r25, 0xF0	; 240
    4ab4:	98 27       	eor	r25, r24
    4ab6:	80 7f       	andi	r24, 0xF0	; 240
    4ab8:	98 27       	eor	r25, r24
    4aba:	86 0f       	add	r24, r22
    4abc:	97 1f       	adc	r25, r23
    4abe:	ba 01       	movw	r22, r20
    4ac0:	a9 01       	movw	r20, r18
    4ac2:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <genericreadBytes>
    4ac6:	08 95       	ret

00004ac8 <fswrite32int>:
    4ac8:	88 0f       	add	r24, r24
    4aca:	99 1f       	adc	r25, r25
    4acc:	82 95       	swap	r24
    4ace:	92 95       	swap	r25
    4ad0:	90 7f       	andi	r25, 0xF0	; 240
    4ad2:	98 27       	eor	r25, r24
    4ad4:	80 7f       	andi	r24, 0xF0	; 240
    4ad6:	98 27       	eor	r25, r24
    4ad8:	86 0f       	add	r24, r22
    4ada:	97 1f       	adc	r25, r23
    4adc:	ba 01       	movw	r22, r20
    4ade:	a9 01       	movw	r20, r18
    4ae0:	0e 94 c9 1c 	call	0x3992	; 0x3992 <write32uint>
    4ae4:	08 95       	ret

00004ae6 <fswrite32uint>:
    4ae6:	88 0f       	add	r24, r24
    4ae8:	99 1f       	adc	r25, r25
    4aea:	82 95       	swap	r24
    4aec:	92 95       	swap	r25
    4aee:	90 7f       	andi	r25, 0xF0	; 240
    4af0:	98 27       	eor	r25, r24
    4af2:	80 7f       	andi	r24, 0xF0	; 240
    4af4:	98 27       	eor	r25, r24
    4af6:	86 0f       	add	r24, r22
    4af8:	97 1f       	adc	r25, r23
    4afa:	ba 01       	movw	r22, r20
    4afc:	a9 01       	movw	r20, r18
    4afe:	0e 94 c9 1c 	call	0x3992	; 0x3992 <write32uint>
    4b02:	08 95       	ret

00004b04 <fswrite16int>:
    4b04:	88 0f       	add	r24, r24
    4b06:	99 1f       	adc	r25, r25
    4b08:	82 95       	swap	r24
    4b0a:	92 95       	swap	r25
    4b0c:	90 7f       	andi	r25, 0xF0	; 240
    4b0e:	98 27       	eor	r25, r24
    4b10:	80 7f       	andi	r24, 0xF0	; 240
    4b12:	98 27       	eor	r25, r24
    4b14:	86 0f       	add	r24, r22
    4b16:	97 1f       	adc	r25, r23
    4b18:	ba 01       	movw	r22, r20
    4b1a:	0e 94 cc 1c 	call	0x3998	; 0x3998 <write16int>
    4b1e:	08 95       	ret

00004b20 <fswrite16uint>:
    4b20:	88 0f       	add	r24, r24
    4b22:	99 1f       	adc	r25, r25
    4b24:	82 95       	swap	r24
    4b26:	92 95       	swap	r25
    4b28:	90 7f       	andi	r25, 0xF0	; 240
    4b2a:	98 27       	eor	r25, r24
    4b2c:	80 7f       	andi	r24, 0xF0	; 240
    4b2e:	98 27       	eor	r25, r24
    4b30:	86 0f       	add	r24, r22
    4b32:	97 1f       	adc	r25, r23
    4b34:	ba 01       	movw	r22, r20
    4b36:	0e 94 cf 1c 	call	0x399e	; 0x399e <write16uint>
    4b3a:	08 95       	ret

00004b3c <fswrite8int>:
    4b3c:	88 0f       	add	r24, r24
    4b3e:	99 1f       	adc	r25, r25
    4b40:	82 95       	swap	r24
    4b42:	92 95       	swap	r25
    4b44:	90 7f       	andi	r25, 0xF0	; 240
    4b46:	98 27       	eor	r25, r24
    4b48:	80 7f       	andi	r24, 0xF0	; 240
    4b4a:	98 27       	eor	r25, r24
    4b4c:	86 0f       	add	r24, r22
    4b4e:	97 1f       	adc	r25, r23
    4b50:	64 2f       	mov	r22, r20
    4b52:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <write8int>
    4b56:	08 95       	ret

00004b58 <fswrite8uint>:
    4b58:	88 0f       	add	r24, r24
    4b5a:	99 1f       	adc	r25, r25
    4b5c:	82 95       	swap	r24
    4b5e:	92 95       	swap	r25
    4b60:	90 7f       	andi	r25, 0xF0	; 240
    4b62:	98 27       	eor	r25, r24
    4b64:	80 7f       	andi	r24, 0xF0	; 240
    4b66:	98 27       	eor	r25, r24
    4b68:	86 0f       	add	r24, r22
    4b6a:	97 1f       	adc	r25, r23
    4b6c:	64 2f       	mov	r22, r20
    4b6e:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <write8uint>
    4b72:	08 95       	ret

00004b74 <fsread32int>:
    4b74:	88 0f       	add	r24, r24
    4b76:	99 1f       	adc	r25, r25
    4b78:	82 95       	swap	r24
    4b7a:	92 95       	swap	r25
    4b7c:	90 7f       	andi	r25, 0xF0	; 240
    4b7e:	98 27       	eor	r25, r24
    4b80:	80 7f       	andi	r24, 0xF0	; 240
    4b82:	98 27       	eor	r25, r24
    4b84:	86 0f       	add	r24, r22
    4b86:	97 1f       	adc	r25, r23
    4b88:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <read32int>
    4b8c:	08 95       	ret

00004b8e <fsread32uint>:
    4b8e:	88 0f       	add	r24, r24
    4b90:	99 1f       	adc	r25, r25
    4b92:	82 95       	swap	r24
    4b94:	92 95       	swap	r25
    4b96:	90 7f       	andi	r25, 0xF0	; 240
    4b98:	98 27       	eor	r25, r24
    4b9a:	80 7f       	andi	r24, 0xF0	; 240
    4b9c:	98 27       	eor	r25, r24
    4b9e:	86 0f       	add	r24, r22
    4ba0:	97 1f       	adc	r25, r23
    4ba2:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <read32uint>
    4ba6:	08 95       	ret

00004ba8 <fsread16int>:
    4ba8:	88 0f       	add	r24, r24
    4baa:	99 1f       	adc	r25, r25
    4bac:	82 95       	swap	r24
    4bae:	92 95       	swap	r25
    4bb0:	90 7f       	andi	r25, 0xF0	; 240
    4bb2:	98 27       	eor	r25, r24
    4bb4:	80 7f       	andi	r24, 0xF0	; 240
    4bb6:	98 27       	eor	r25, r24
    4bb8:	86 0f       	add	r24, r22
    4bba:	97 1f       	adc	r25, r23
    4bbc:	0e 94 de 1c 	call	0x39bc	; 0x39bc <read16int>
    4bc0:	08 95       	ret

00004bc2 <fsread16uint>:
    4bc2:	88 0f       	add	r24, r24
    4bc4:	99 1f       	adc	r25, r25
    4bc6:	82 95       	swap	r24
    4bc8:	92 95       	swap	r25
    4bca:	90 7f       	andi	r25, 0xF0	; 240
    4bcc:	98 27       	eor	r25, r24
    4bce:	80 7f       	andi	r24, 0xF0	; 240
    4bd0:	98 27       	eor	r25, r24
    4bd2:	86 0f       	add	r24, r22
    4bd4:	97 1f       	adc	r25, r23
    4bd6:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <read16uint>
    4bda:	08 95       	ret

00004bdc <fsread8int>:
    4bdc:	88 0f       	add	r24, r24
    4bde:	99 1f       	adc	r25, r25
    4be0:	82 95       	swap	r24
    4be2:	92 95       	swap	r25
    4be4:	90 7f       	andi	r25, 0xF0	; 240
    4be6:	98 27       	eor	r25, r24
    4be8:	80 7f       	andi	r24, 0xF0	; 240
    4bea:	98 27       	eor	r25, r24
    4bec:	86 0f       	add	r24, r22
    4bee:	97 1f       	adc	r25, r23
    4bf0:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <read8int>
    4bf4:	08 95       	ret

00004bf6 <fsread8uint>:
    4bf6:	88 0f       	add	r24, r24
    4bf8:	99 1f       	adc	r25, r25
    4bfa:	82 95       	swap	r24
    4bfc:	92 95       	swap	r25
    4bfe:	90 7f       	andi	r25, 0xF0	; 240
    4c00:	98 27       	eor	r25, r24
    4c02:	80 7f       	andi	r24, 0xF0	; 240
    4c04:	98 27       	eor	r25, r24
    4c06:	86 0f       	add	r24, r22
    4c08:	97 1f       	adc	r25, r23
    4c0a:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <read8uint>
    4c0e:	08 95       	ret

00004c10 <extractString>:
#include "fsstring.h"
#include "../../types/types.h"
#include "../../types/string.h"
char *extractString(char *start, char *buffer)
{
    4c10:	fc 01       	movw	r30, r24
    char *p, *q;

    q = buffer;
    p = start;
    if (*p == '/')
    4c12:	40 81       	ld	r20, Z
    4c14:	4f 32       	cpi	r20, 0x2F	; 47
    4c16:	b9 f0       	breq	.+46     	; 0x4c46 <extractString+0x36>
    4c18:	dc 01       	movw	r26, r24
    {
        p++;
    4c1a:	fb 01       	movw	r30, r22
    4c1c:	03 c0       	rjmp	.+6      	; 0x4c24 <extractString+0x14>
    }
    while ((isLetter(*p)) || (*p == '_') || (*p == '.') || (isDigit(*p)))
    {
        *q++ = *p++;
    4c1e:	41 93       	st	Z+, r20
    4c20:	11 96       	adiw	r26, 0x01	; 1
    4c22:	4c 91       	ld	r20, X
    4c24:	84 2f       	mov	r24, r20
    4c26:	81 56       	subi	r24, 0x61	; 97
    4c28:	8a 31       	cpi	r24, 0x1A	; 26
    4c2a:	c8 f3       	brcs	.-14     	; 0x4c1e <extractString+0xe>
    4c2c:	80 5e       	subi	r24, 0xE0	; 224
    4c2e:	8a 31       	cpi	r24, 0x1A	; 26
    4c30:	b0 f3       	brcs	.-20     	; 0x4c1e <extractString+0xe>
    4c32:	4f 35       	cpi	r20, 0x5F	; 95
    4c34:	a1 f3       	breq	.-24     	; 0x4c1e <extractString+0xe>
    4c36:	4e 32       	cpi	r20, 0x2E	; 46
    4c38:	91 f3       	breq	.-28     	; 0x4c1e <extractString+0xe>
    4c3a:	8f 5e       	subi	r24, 0xEF	; 239
    4c3c:	8a 30       	cpi	r24, 0x0A	; 10
    4c3e:	78 f3       	brcs	.-34     	; 0x4c1e <extractString+0xe>
    }

    *q = '\0';
    4c40:	10 82       	st	Z, r1
    return p;
}
    4c42:	cd 01       	movw	r24, r26
    4c44:	08 95       	ret
    4c46:	dc 01       	movw	r26, r24
    4c48:	11 96       	adiw	r26, 0x01	; 1
    4c4a:	41 81       	ldd	r20, Z+1	; 0x01
    4c4c:	e6 cf       	rjmp	.-52     	; 0x4c1a <extractString+0xa>

00004c4e <fileMode>:

//-------------------------------------------------------------------------
char *extractLastName(char *pathname)
{
    char *p, *start;
    int length;

    length = mystrlen(pathname);
    p = pathname + (length - 1);
    start = pathname;
    while ((*p != '/') && (p != start))
    {
        p--;
    }

    if ((p == start) && ((*start) != '/'))
    {
        return p;
    }
    else
    {
        return ++p;
    }
}

//-------------------------------------------------------------------------
int fileMode(char *s)
{
    4c4e:	cf 93       	push	r28
    4c50:	df 93       	push	r29
    4c52:	ec 01       	movw	r28, r24
    if (mystrlen(s) == 1)
    4c54:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    4c58:	01 97       	sbiw	r24, 0x01	; 1
    4c5a:	89 f0       	breq	.+34     	; 0x4c7e <fileMode+0x30>
    {
        if (s[0] == 'r')
        {
            return 1;
        }

        if (s[0] == 'w')
        {
            return 2;
        }

        if (s[0] == 'a')
        {
            return 3;
        }

        if (s[0] == 't')
        {
            return 4;
        }
    }
    else if (mystrlen(s) == 2)
    4c5c:	ce 01       	movw	r24, r28
    4c5e:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    4c62:	02 97       	sbiw	r24, 0x02	; 2
    4c64:	31 f0       	breq	.+12     	; 0x4c72 <fileMode+0x24>
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    {
        return 5;
    }
    else
    {
        return 0;
    }
    return 0;
}
    4c6a:	c9 01       	movw	r24, r18
    4c6c:	df 91       	pop	r29
    4c6e:	cf 91       	pop	r28
    4c70:	08 95       	ret
    4c72:	25 e0       	ldi	r18, 0x05	; 5
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	c9 01       	movw	r24, r18
    4c78:	df 91       	pop	r29
    4c7a:	cf 91       	pop	r28
    4c7c:	08 95       	ret
    4c7e:	88 81       	ld	r24, Y
    4c80:	82 37       	cpi	r24, 0x72	; 114
    4c82:	49 f0       	breq	.+18     	; 0x4c96 <fileMode+0x48>
    4c84:	87 37       	cpi	r24, 0x77	; 119
    4c86:	69 f0       	breq	.+26     	; 0x4ca2 <fileMode+0x54>
    4c88:	81 36       	cpi	r24, 0x61	; 97
    4c8a:	41 f0       	breq	.+16     	; 0x4c9c <fileMode+0x4e>
    4c8c:	84 37       	cpi	r24, 0x74	; 116
    4c8e:	59 f7       	brne	.-42     	; 0x4c66 <fileMode+0x18>
    4c90:	24 e0       	ldi	r18, 0x04	; 4
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	ea cf       	rjmp	.-44     	; 0x4c6a <fileMode+0x1c>
    4c96:	21 e0       	ldi	r18, 0x01	; 1
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	e7 cf       	rjmp	.-50     	; 0x4c6a <fileMode+0x1c>
    4c9c:	23 e0       	ldi	r18, 0x03	; 3
    4c9e:	30 e0       	ldi	r19, 0x00	; 0
    4ca0:	e4 cf       	rjmp	.-56     	; 0x4c6a <fileMode+0x1c>
    4ca2:	22 e0       	ldi	r18, 0x02	; 2
    4ca4:	30 e0       	ldi	r19, 0x00	; 0
    4ca6:	e1 cf       	rjmp	.-62     	; 0x4c6a <fileMode+0x1c>

00004ca8 <extractLastName>:
    4ca8:	cf 93       	push	r28
    4caa:	df 93       	push	r29
    4cac:	ec 01       	movw	r28, r24
    4cae:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	31 97       	sbiw	r30, 0x01	; 1
    4cb6:	ec 0f       	add	r30, r28
    4cb8:	fd 1f       	adc	r31, r29
    4cba:	80 81       	ld	r24, Z
    4cbc:	8f 32       	cpi	r24, 0x2F	; 47
    4cbe:	21 f4       	brne	.+8      	; 0x4cc8 <extractLastName+0x20>
    4cc0:	08 c0       	rjmp	.+16     	; 0x4cd2 <extractLastName+0x2a>
    4cc2:	82 91       	ld	r24, -Z
    4cc4:	8f 32       	cpi	r24, 0x2F	; 47
    4cc6:	29 f0       	breq	.+10     	; 0x4cd2 <extractLastName+0x2a>
    4cc8:	ce 17       	cp	r28, r30
    4cca:	df 07       	cpc	r29, r31
    4ccc:	d1 f7       	brne	.-12     	; 0x4cc2 <extractLastName+0x1a>
    4cce:	fe 01       	movw	r30, r28
    4cd0:	04 c0       	rjmp	.+8      	; 0x4cda <extractLastName+0x32>
    4cd2:	ec 17       	cp	r30, r28
    4cd4:	fd 07       	cpc	r31, r29
    4cd6:	29 f0       	breq	.+10     	; 0x4ce2 <extractLastName+0x3a>
    4cd8:	31 96       	adiw	r30, 0x01	; 1
    4cda:	cf 01       	movw	r24, r30
    4cdc:	df 91       	pop	r29
    4cde:	cf 91       	pop	r28
    4ce0:	08 95       	ret
    4ce2:	8f 32       	cpi	r24, 0x2F	; 47
    4ce4:	c9 f3       	breq	.-14     	; 0x4cd8 <extractLastName+0x30>
    4ce6:	f9 cf       	rjmp	.-14     	; 0x4cda <extractLastName+0x32>

00004ce8 <checkNodeValid>:



int checkNodeValid(int nodeaddr)
{
    4ce8:	ff 92       	push	r15
    4cea:	0f 93       	push	r16
    4cec:	1f 93       	push	r17
    4cee:	8c 01       	movw	r16, r24
    uint8_t validness;
    uint8_t nodetype;

    validness = fsread8uint(nodeaddr, VALIDOFFSET);
    4cf0:	6d e0       	ldi	r22, 0x0D	; 13
    4cf2:	70 e0       	ldi	r23, 0x00	; 0
    4cf4:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4cf8:	f8 2e       	mov	r15, r24
    nodetype = fsread8uint(nodeaddr, TYPEOFFSET);
    4cfa:	c8 01       	movw	r24, r16
    4cfc:	6c e0       	ldi	r22, 0x0C	; 12
    4cfe:	70 e0       	ldi	r23, 0x00	; 0
    4d00:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    if (validness == 0)
    4d04:	ff 20       	and	r15, r15
    4d06:	39 f0       	breq	.+14     	; 0x4d16 <checkNodeValid+0x2e>
    {
        return 0;
    }
    else
    {
        return (int)nodetype;
    4d08:	28 2f       	mov	r18, r24
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    }
}
    4d0c:	c9 01       	movw	r24, r18
    4d0e:	1f 91       	pop	r17
    4d10:	0f 91       	pop	r16
    4d12:	ff 90       	pop	r15
    4d14:	08 95       	ret
    4d16:	20 e0       	ldi	r18, 0x00	; 0
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	c9 01       	movw	r24, r18
    4d1c:	1f 91       	pop	r17
    4d1e:	0f 91       	pop	r16
    4d20:	ff 90       	pop	r15
    4d22:	08 95       	ret

00004d24 <printNode>:

//-------------------------------------------------------------------------
void buildNewNode(int addr, char *name, uint8_t uid, uint8_t parent, uint8_t
                  type)
{
    uint8_t namelength;

    namelength = mystrlen(name);
    if (namelength < 12)
    {
        namelength++;
    }
    //consider several types of type
    if (type == DIRNODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
        fswrite8uint(addr, TYPEOFFSET, type);
        fswrite8uint(addr, VALIDOFFSET, 1);
        fsinitBytes(addr, DIR_ADDRSUBOFFSET, 14, 0);
        fswrite8uint(addr, DIR_UIDOFFSET, uid);
        fswrite16uint(addr, DIR_SIZEOFFSET, 0);
        fswrite8uint(addr, DIR_PARENTOFFSET, parent);
    }
    else if (type == FILENODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
        fswrite8uint(addr, TYPEOFFSET, type);
        fswrite8uint(addr, VALIDOFFSET, 1);
        fsinitBytes(addr, FILE_ADDRPAGEOFFSET, 14, 0);
        fswrite8uint(addr, FILE_UIDOFFSET, uid);
        fswrite16uint(addr, FILE_SIZEOFFSET, 0);
        fswrite8uint(addr, FILE_PARENTOFFSET, parent);
    }
    else if (type == DEVNODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
        fswrite8uint(addr, TYPEOFFSET, type);
        fswrite8uint(addr, VALIDOFFSET, 1);
        fsinitBytes(addr, DEV_PROGRAMENTRYOFFSET, 14, 0);
        fswrite8uint(addr, DEV_UIDOFFSET, uid);
        fswrite16uint(addr, DEV_SIZEOFFSET, 0);
        fswrite8uint(addr, DEV_PARENTOFFSET, parent);
    }
    else if (type == APPNODE)
    {
        fswriteBytes(addr, FILENAMEOFFSET, namelength, name);
        fswrite8uint(addr, TYPEOFFSET, type);
        fswrite8uint(addr, VALIDOFFSET, 1);
        fsinitBytes(addr, APP_ENTRYOFFSET, 14, 0);
        fswrite8uint(addr, APP_UIDOFFSET, uid);
        fswrite16uint(addr, APP_SIZEOFFSET, 0);
        fswrite8uint(addr, APP_PARENTOFFSET, parent);
    }
    if ((addr == 0) && (parent == 0))
    {
    }
    else
    {
        int i;

        for (i = 0; i < 10; i++)
        {
            uint8_t subaddr;

            subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
            if (subaddr == 0)
            {
                fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, addr);
                break;
            }
        }
    }
    return;
}

//-------------------------------------------------------------------------
void printNode(int addr)
{
    4d24:	ef 92       	push	r14
    4d26:	ff 92       	push	r15
    4d28:	0f 93       	push	r16
    4d2a:	1f 93       	push	r17
    4d2c:	df 93       	push	r29
    4d2e:	cf 93       	push	r28
    4d30:	cd b7       	in	r28, 0x3d	; 61
    4d32:	de b7       	in	r29, 0x3e	; 62
    4d34:	2d 97       	sbiw	r28, 0x0d	; 13
    4d36:	0f b6       	in	r0, 0x3f	; 63
    4d38:	f8 94       	cli
    4d3a:	de bf       	out	0x3e, r29	; 62
    4d3c:	0f be       	out	0x3f, r0	; 63
    4d3e:	cd bf       	out	0x3d, r28	; 61
    4d40:	7c 01       	movw	r14, r24
    char filename[13];
    uint8_t uid, parent, type, valid;
    uint8_t subdirectory[10];
    int i;
    uint8_t flashdirectory[8];

    filename[12] = '\0';
    4d42:	1d 86       	std	Y+13, r1	; 0x0d
    fsreadBytes(addr, FILENAMEOFFSET, 12, filename);
    4d44:	60 e0       	ldi	r22, 0x00	; 0
    4d46:	70 e0       	ldi	r23, 0x00	; 0
    4d48:	4c e0       	ldi	r20, 0x0C	; 12
    4d4a:	50 e0       	ldi	r21, 0x00	; 0
    4d4c:	9e 01       	movw	r18, r28
    4d4e:	2f 5f       	subi	r18, 0xFF	; 255
    4d50:	3f 4f       	sbci	r19, 0xFF	; 255
    4d52:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <fsreadBytes>
    type = fsread8uint(addr, TYPEOFFSET);
    4d56:	c7 01       	movw	r24, r14
    4d58:	6c e0       	ldi	r22, 0x0C	; 12
    4d5a:	70 e0       	ldi	r23, 0x00	; 0
    4d5c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4d60:	18 2f       	mov	r17, r24
    valid = fsread8uint(addr, VALIDOFFSET);
    4d62:	c7 01       	movw	r24, r14
    4d64:	6d e0       	ldi	r22, 0x0D	; 13
    4d66:	70 e0       	ldi	r23, 0x00	; 0
    4d68:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    if ((valid > 0) && (type == DIRNODE))
    4d6c:	88 23       	and	r24, r24
    4d6e:	79 f0       	breq	.+30     	; 0x4d8e <printNode+0x6a>
    4d70:	11 30       	cpi	r17, 0x01	; 1
    4d72:	21 f1       	breq	.+72     	; 0x4dbc <printNode+0x98>
    {
        for (i = 0; i < 10; i++)
        {
            subdirectory[i] = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        }
    }
    if ((valid > 0) && (type == FILENODE))
    4d74:	12 30       	cpi	r17, 0x02	; 2
    4d76:	59 f4       	brne	.+22     	; 0x4d8e <printNode+0x6a>
    4d78:	0e e0       	ldi	r16, 0x0E	; 14
    4d7a:	10 e0       	ldi	r17, 0x00	; 0
    {
        for (i = 0; i < 8; i++)
        {
            flashdirectory[i] = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
    4d7c:	c7 01       	movw	r24, r14
    4d7e:	b8 01       	movw	r22, r16
    4d80:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4d84:	0f 5f       	subi	r16, 0xFF	; 255
    4d86:	1f 4f       	sbci	r17, 0xFF	; 255
    4d88:	06 31       	cpi	r16, 0x16	; 22
    4d8a:	11 05       	cpc	r17, r1
    4d8c:	b9 f7       	brne	.-18     	; 0x4d7c <printNode+0x58>
        }
    }
    uid = fsread8uint(addr, 28);
    4d8e:	c7 01       	movw	r24, r14
    4d90:	6c e1       	ldi	r22, 0x1C	; 28
    4d92:	70 e0       	ldi	r23, 0x00	; 0
    4d94:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    parent = fsread8uint(addr, 31);
    4d98:	c7 01       	movw	r24, r14
    4d9a:	6f e1       	ldi	r22, 0x1F	; 31
    4d9c:	70 e0       	ldi	r23, 0x00	; 0
    4d9e:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    //vs patch 
    //        printf("****Node %d*************\n", addr);
    //        printf("filename: %s\n", filename);
    //        printf("type (dir, file, dev, app) %d\n", type);
    //        printf("valid is %d\n", valid);
    //        if (type == DIRNODE)
    //        {for (i=0;i<10;i++)
    //        printf("The %d sub directory is %d\n", i, subdirectory[i]);
    //        }
    if (type == FILENODE)
    {
        //                for (i=0;i<8;i++)
        //                        printf("The %d sub flash is %d\n", i, flashdirectory[i]);
    }
    //        printf("The node parent is %d\n", parent);
    //        printf("*************************\n");
    return;
}
    4da2:	2d 96       	adiw	r28, 0x0d	; 13
    4da4:	0f b6       	in	r0, 0x3f	; 63
    4da6:	f8 94       	cli
    4da8:	de bf       	out	0x3e, r29	; 62
    4daa:	0f be       	out	0x3f, r0	; 63
    4dac:	cd bf       	out	0x3d, r28	; 61
    4dae:	cf 91       	pop	r28
    4db0:	df 91       	pop	r29
    4db2:	1f 91       	pop	r17
    4db4:	0f 91       	pop	r16
    4db6:	ff 90       	pop	r15
    4db8:	ef 90       	pop	r14
    4dba:	08 95       	ret
    4dbc:	0e e0       	ldi	r16, 0x0E	; 14
    4dbe:	10 e0       	ldi	r17, 0x00	; 0
    4dc0:	c7 01       	movw	r24, r14
    4dc2:	b8 01       	movw	r22, r16
    4dc4:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4dc8:	0f 5f       	subi	r16, 0xFF	; 255
    4dca:	1f 4f       	sbci	r17, 0xFF	; 255
    4dcc:	08 31       	cpi	r16, 0x18	; 24
    4dce:	11 05       	cpc	r17, r1
    4dd0:	b9 f7       	brne	.-18     	; 0x4dc0 <printNode+0x9c>
    4dd2:	dd cf       	rjmp	.-70     	; 0x4d8e <printNode+0x6a>

00004dd4 <inodeMatch>:

//-------------------------------------------------------------------------
void formatFS()
{
    int i;

    for (i = 0; i <= FILE_SYS_RANGE; i++)
    {
        fsinitBytes(i, 0, 32, 0);
    }
    //  write8uint(i, VALIDOFFSET, 0); 
    initVectorFlash();
    initVectorNode();
}

//-------------------------------------------------------------------------
void formatFSLite()
{
    initVectorFlash();
    initVectorNode();
}

//-------------------------------------------------------------------------
void deleteNode(int addr)
{
    uint8_t type;
    uint8_t parent;

    type = fsread8uint(addr, TYPEOFFSET);
    parent = fsread8uint(addr, 31);
    if (type == DIRNODE)
    {
        uint8_t i;

        for (i = 0; i < 10; i++)
        {
            uint8_t subaddr;

            subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
            if (subaddr > 0)
            {
                deleteNode(subaddr);
            }
        }
        fswrite8uint(addr, VALIDOFFSET, 0);
        if ((addr == 0) && (parent == 0))
        {
        }
        else
        {
            uint8_t i;

            for (i = 0; i < 10; i++)
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
                }
            }
        }
    }
    else if (type == FILENODE)
    {
        char i;
        uint8_t readpage;

        fswrite8uint(addr, VALIDOFFSET, 0);
        if ((addr == 0) && (parent == 0))
        {
        }
        else
        {
            for (i = 0; i < 10; i++)
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
                }
            }
        }
        for (i = 0; i < 8; i++)
        {
            readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
            if (readpage == 0)
            {
                break;
            }
            else
            {
                releaseFlashPage(readpage);
            }
        }
        {
            uint8_t currentaddr;

            currentaddr = addr;
            while (1)
            {
                currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
                if (currentaddr > 0)
                {
                    releaseVectorNode(currentaddr);
                    for (i = 0; i < 8; i++)
                    {
                        readpage =
                            fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + i);
                        if (readpage == 0)
                        {
                            break;
                        }
                        else
                        {
                            releaseFlashPage(readpage);
                        }
                    }
                }
                else
                {
                    break;
                }
            }
        }
    }
    else if (type == DEVNODE)
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
        if ((addr == 0) && (parent == 0))
        {
        }
        else
        {
            int i;

            for (i = 0; i < 10; i++)
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
                }
            }
        }
    }
    else if (type == APPNODE)
    {
        fswrite8uint(addr, VALIDOFFSET, 0);
        if ((addr == 0) && (parent == 0))
        {
        }
        else
        {
            int i;

            for (i = 0; i < 10; i++)
            {
                uint8_t subaddr;

                subaddr = fsread8uint(parent, DIR_ADDRSUBOFFSET + i);
                if (subaddr == addr)
                {
                    fswrite8uint(parent, DIR_ADDRSUBOFFSET + i, 0);
                    break;
                }
            }
        }
    }
    releaseVectorNode(addr);
}

//-------------------------------------------------------------------------
void buildRootNode()
{
    buildNewNode(FSROOTNODE, "root", 0, 0, DIRNODE);
}

//-------------------------------------------------------------------------
void copyVectorNode(int from, int to)
{
    int i;

    for (i = 0; i < 32; i++)
    {
        uint8_t temp;

        temp = fsread8uint(from, i);
        fswrite8uint(to, i, temp);
    }
}

//-------------------------------------------------------------------------
void copyVectorPage(int from, int to)
{
    int i;
    int pagefrom, pageto;

    for (i = 0; i < 8; i++)
    {
        pagefrom = i + (from - 1) * 8;
        pageto = i + (to - 1) * 8;
        copyPage(pagefrom, pageto);
    }
    return;
}

//-------------------------------------------------------------------------
int inodeMatch(uint8_t addr, char *string)
{
    4dd4:	af 92       	push	r10
    4dd6:	bf 92       	push	r11
    4dd8:	df 92       	push	r13
    4dda:	ef 92       	push	r14
    4ddc:	ff 92       	push	r15
    4dde:	0f 93       	push	r16
    4de0:	1f 93       	push	r17
    4de2:	df 93       	push	r29
    4de4:	cf 93       	push	r28
    4de6:	cd b7       	in	r28, 0x3d	; 61
    4de8:	de b7       	in	r29, 0x3e	; 62
    4dea:	2d 97       	sbiw	r28, 0x0d	; 13
    4dec:	0f b6       	in	r0, 0x3f	; 63
    4dee:	f8 94       	cli
    4df0:	de bf       	out	0x3e, r29	; 62
    4df2:	0f be       	out	0x3f, r0	; 63
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	18 2f       	mov	r17, r24
    4df8:	5b 01       	movw	r10, r22
    char temp[13];
    uint8_t length;
    uint8_t i;
    uint8_t valid;

    valid = fsread8uint(addr, VALIDOFFSET);
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	6d e0       	ldi	r22, 0x0D	; 13
    4dfe:	70 e0       	ldi	r23, 0x00	; 0
    4e00:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    if (valid == 0)
    4e04:	88 23       	and	r24, r24
    4e06:	99 f4       	brne	.+38     	; 0x4e2e <inodeMatch+0x5a>
    {
        return 0;
    }
    fsreadBytes(addr, FILENAMEOFFSET, 12, temp);
    temp[12] = '\0';
    length = mystrlen(temp);
    for (i = 0; i < length; i++)
    4e08:	20 e0       	ldi	r18, 0x00	; 0
    4e0a:	30 e0       	ldi	r19, 0x00	; 0
    {
        if (superstring(temp + i, string) == 0)
        {
            return 1;
        }
    }
    return 0;
}
    4e0c:	c9 01       	movw	r24, r18
    4e0e:	2d 96       	adiw	r28, 0x0d	; 13
    4e10:	0f b6       	in	r0, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	de bf       	out	0x3e, r29	; 62
    4e16:	0f be       	out	0x3f, r0	; 63
    4e18:	cd bf       	out	0x3d, r28	; 61
    4e1a:	cf 91       	pop	r28
    4e1c:	df 91       	pop	r29
    4e1e:	1f 91       	pop	r17
    4e20:	0f 91       	pop	r16
    4e22:	ff 90       	pop	r15
    4e24:	ef 90       	pop	r14
    4e26:	df 90       	pop	r13
    4e28:	bf 90       	pop	r11
    4e2a:	af 90       	pop	r10
    4e2c:	08 95       	ret
    4e2e:	81 2f       	mov	r24, r17
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	60 e0       	ldi	r22, 0x00	; 0
    4e34:	70 e0       	ldi	r23, 0x00	; 0
    4e36:	4c e0       	ldi	r20, 0x0C	; 12
    4e38:	50 e0       	ldi	r21, 0x00	; 0
    4e3a:	7e 01       	movw	r14, r28
    4e3c:	08 94       	sec
    4e3e:	e1 1c       	adc	r14, r1
    4e40:	f1 1c       	adc	r15, r1
    4e42:	97 01       	movw	r18, r14
    4e44:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <fsreadBytes>
    4e48:	1d 86       	std	Y+13, r1	; 0x0d
    4e4a:	c7 01       	movw	r24, r14
    4e4c:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    4e50:	d8 2e       	mov	r13, r24
    4e52:	88 23       	and	r24, r24
    4e54:	c9 f2       	breq	.-78     	; 0x4e08 <inodeMatch+0x34>
    4e56:	87 01       	movw	r16, r14
    4e58:	06 c0       	rjmp	.+12     	; 0x4e66 <inodeMatch+0x92>
    4e5a:	0f 5f       	subi	r16, 0xFF	; 255
    4e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e5e:	80 2f       	mov	r24, r16
    4e60:	8e 19       	sub	r24, r14
    4e62:	8d 15       	cp	r24, r13
    4e64:	88 f6       	brcc	.-94     	; 0x4e08 <inodeMatch+0x34>
    4e66:	c8 01       	movw	r24, r16
    4e68:	b5 01       	movw	r22, r10
    4e6a:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <superstring>
    4e6e:	89 2b       	or	r24, r25
    4e70:	a1 f7       	brne	.-24     	; 0x4e5a <inodeMatch+0x86>
    4e72:	21 e0       	ldi	r18, 0x01	; 1
    4e74:	30 e0       	ldi	r19, 0x00	; 0
    4e76:	ca cf       	rjmp	.-108    	; 0x4e0c <inodeMatch+0x38>

00004e78 <copyVectorPage>:
    4e78:	ef 92       	push	r14
    4e7a:	ff 92       	push	r15
    4e7c:	0f 93       	push	r16
    4e7e:	1f 93       	push	r17
    4e80:	cf 93       	push	r28
    4e82:	df 93       	push	r29
    4e84:	8b 01       	movw	r16, r22
    4e86:	7c 01       	movw	r14, r24
    4e88:	08 94       	sec
    4e8a:	e1 08       	sbc	r14, r1
    4e8c:	f1 08       	sbc	r15, r1
    4e8e:	ee 0c       	add	r14, r14
    4e90:	ff 1c       	adc	r15, r15
    4e92:	ee 0c       	add	r14, r14
    4e94:	ff 1c       	adc	r15, r15
    4e96:	ee 0c       	add	r14, r14
    4e98:	ff 1c       	adc	r15, r15
    4e9a:	01 50       	subi	r16, 0x01	; 1
    4e9c:	10 40       	sbci	r17, 0x00	; 0
    4e9e:	00 0f       	add	r16, r16
    4ea0:	11 1f       	adc	r17, r17
    4ea2:	00 0f       	add	r16, r16
    4ea4:	11 1f       	adc	r17, r17
    4ea6:	00 0f       	add	r16, r16
    4ea8:	11 1f       	adc	r17, r17
    4eaa:	c0 e0       	ldi	r28, 0x00	; 0
    4eac:	d0 e0       	ldi	r29, 0x00	; 0
    4eae:	be 01       	movw	r22, r28
    4eb0:	60 0f       	add	r22, r16
    4eb2:	71 1f       	adc	r23, r17
    4eb4:	ce 01       	movw	r24, r28
    4eb6:	8e 0d       	add	r24, r14
    4eb8:	9f 1d       	adc	r25, r15
    4eba:	0e 94 b5 34 	call	0x696a	; 0x696a <copyPage>
    4ebe:	21 96       	adiw	r28, 0x01	; 1
    4ec0:	c8 30       	cpi	r28, 0x08	; 8
    4ec2:	d1 05       	cpc	r29, r1
    4ec4:	a1 f7       	brne	.-24     	; 0x4eae <copyVectorPage+0x36>
    4ec6:	df 91       	pop	r29
    4ec8:	cf 91       	pop	r28
    4eca:	1f 91       	pop	r17
    4ecc:	0f 91       	pop	r16
    4ece:	ff 90       	pop	r15
    4ed0:	ef 90       	pop	r14
    4ed2:	08 95       	ret

00004ed4 <copyVectorNode>:
    4ed4:	ef 92       	push	r14
    4ed6:	ff 92       	push	r15
    4ed8:	0f 93       	push	r16
    4eda:	1f 93       	push	r17
    4edc:	cf 93       	push	r28
    4ede:	df 93       	push	r29
    4ee0:	7c 01       	movw	r14, r24
    4ee2:	8b 01       	movw	r16, r22
    4ee4:	c0 e0       	ldi	r28, 0x00	; 0
    4ee6:	d0 e0       	ldi	r29, 0x00	; 0
    4ee8:	c7 01       	movw	r24, r14
    4eea:	be 01       	movw	r22, r28
    4eec:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4ef0:	48 2f       	mov	r20, r24
    4ef2:	c8 01       	movw	r24, r16
    4ef4:	be 01       	movw	r22, r28
    4ef6:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    4efa:	21 96       	adiw	r28, 0x01	; 1
    4efc:	c0 32       	cpi	r28, 0x20	; 32
    4efe:	d1 05       	cpc	r29, r1
    4f00:	99 f7       	brne	.-26     	; 0x4ee8 <copyVectorNode+0x14>
    4f02:	df 91       	pop	r29
    4f04:	cf 91       	pop	r28
    4f06:	1f 91       	pop	r17
    4f08:	0f 91       	pop	r16
    4f0a:	ff 90       	pop	r15
    4f0c:	ef 90       	pop	r14
    4f0e:	08 95       	ret

00004f10 <deleteNode>:
    4f10:	ef 92       	push	r14
    4f12:	ff 92       	push	r15
    4f14:	0f 93       	push	r16
    4f16:	1f 93       	push	r17
    4f18:	cf 93       	push	r28
    4f1a:	df 93       	push	r29
    4f1c:	7c 01       	movw	r14, r24
    4f1e:	6c e0       	ldi	r22, 0x0C	; 12
    4f20:	70 e0       	ldi	r23, 0x00	; 0
    4f22:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4f26:	18 2f       	mov	r17, r24
    4f28:	c7 01       	movw	r24, r14
    4f2a:	6f e1       	ldi	r22, 0x1F	; 31
    4f2c:	70 e0       	ldi	r23, 0x00	; 0
    4f2e:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4f32:	08 2f       	mov	r16, r24
    4f34:	11 30       	cpi	r17, 0x01	; 1
    4f36:	99 f0       	breq	.+38     	; 0x4f5e <deleteNode+0x4e>
    4f38:	12 30       	cpi	r17, 0x02	; 2
    4f3a:	09 f4       	brne	.+2      	; 0x4f3e <deleteNode+0x2e>
    4f3c:	63 c0       	rjmp	.+198    	; 0x5004 <deleteNode+0xf4>
    4f3e:	13 30       	cpi	r17, 0x03	; 3
    4f40:	09 f4       	brne	.+2      	; 0x4f44 <deleteNode+0x34>
    4f42:	44 c0       	rjmp	.+136    	; 0x4fcc <deleteNode+0xbc>
    4f44:	14 30       	cpi	r17, 0x04	; 4
    4f46:	09 f4       	brne	.+2      	; 0x4f4a <deleteNode+0x3a>
    4f48:	a6 c0       	rjmp	.+332    	; 0x5096 <deleteNode+0x186>
    4f4a:	c7 01       	movw	r24, r14
    4f4c:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <releaseVectorNode>
    4f50:	df 91       	pop	r29
    4f52:	cf 91       	pop	r28
    4f54:	1f 91       	pop	r17
    4f56:	0f 91       	pop	r16
    4f58:	ff 90       	pop	r15
    4f5a:	ef 90       	pop	r14
    4f5c:	08 95       	ret
    4f5e:	ce e0       	ldi	r28, 0x0E	; 14
    4f60:	d0 e0       	ldi	r29, 0x00	; 0
    4f62:	04 c0       	rjmp	.+8      	; 0x4f6c <deleteNode+0x5c>
    4f64:	21 96       	adiw	r28, 0x01	; 1
    4f66:	c8 31       	cpi	r28, 0x18	; 24
    4f68:	d1 05       	cpc	r29, r1
    4f6a:	69 f0       	breq	.+26     	; 0x4f86 <deleteNode+0x76>
    4f6c:	c7 01       	movw	r24, r14
    4f6e:	be 01       	movw	r22, r28
    4f70:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4f74:	88 23       	and	r24, r24
    4f76:	b1 f3       	breq	.-20     	; 0x4f64 <deleteNode+0x54>
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	0e 94 88 27 	call	0x4f10	; 0x4f10 <deleteNode>
    4f7e:	21 96       	adiw	r28, 0x01	; 1
    4f80:	c8 31       	cpi	r28, 0x18	; 24
    4f82:	d1 05       	cpc	r29, r1
    4f84:	99 f7       	brne	.-26     	; 0x4f6c <deleteNode+0x5c>
    4f86:	c7 01       	movw	r24, r14
    4f88:	6d e0       	ldi	r22, 0x0D	; 13
    4f8a:	70 e0       	ldi	r23, 0x00	; 0
    4f8c:	40 e0       	ldi	r20, 0x00	; 0
    4f8e:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    4f92:	e1 14       	cp	r14, r1
    4f94:	f1 04       	cpc	r15, r1
    4f96:	b9 f0       	breq	.+46     	; 0x4fc6 <deleteNode+0xb6>
    4f98:	ce e0       	ldi	r28, 0x0E	; 14
    4f9a:	d0 e0       	ldi	r29, 0x00	; 0
    4f9c:	04 c0       	rjmp	.+8      	; 0x4fa6 <deleteNode+0x96>
    4f9e:	21 96       	adiw	r28, 0x01	; 1
    4fa0:	c8 31       	cpi	r28, 0x18	; 24
    4fa2:	d1 05       	cpc	r29, r1
    4fa4:	91 f2       	breq	.-92     	; 0x4f4a <deleteNode+0x3a>
    4fa6:	80 2f       	mov	r24, r16
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	be 01       	movw	r22, r28
    4fac:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4fb0:	90 e0       	ldi	r25, 0x00	; 0
    4fb2:	8e 15       	cp	r24, r14
    4fb4:	9f 05       	cpc	r25, r15
    4fb6:	99 f7       	brne	.-26     	; 0x4f9e <deleteNode+0x8e>
    4fb8:	80 2f       	mov	r24, r16
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	be 01       	movw	r22, r28
    4fbe:	40 e0       	ldi	r20, 0x00	; 0
    4fc0:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    4fc4:	c2 cf       	rjmp	.-124    	; 0x4f4a <deleteNode+0x3a>
    4fc6:	00 23       	and	r16, r16
    4fc8:	39 f7       	brne	.-50     	; 0x4f98 <deleteNode+0x88>
    4fca:	bf cf       	rjmp	.-130    	; 0x4f4a <deleteNode+0x3a>
    4fcc:	c7 01       	movw	r24, r14
    4fce:	6d e0       	ldi	r22, 0x0D	; 13
    4fd0:	70 e0       	ldi	r23, 0x00	; 0
    4fd2:	40 e0       	ldi	r20, 0x00	; 0
    4fd4:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    4fd8:	e1 14       	cp	r14, r1
    4fda:	f1 04       	cpc	r15, r1
    4fdc:	09 f4       	brne	.+2      	; 0x4fe0 <deleteNode+0xd0>
    4fde:	76 c0       	rjmp	.+236    	; 0x50cc <deleteNode+0x1bc>
    4fe0:	ce e0       	ldi	r28, 0x0E	; 14
    4fe2:	d0 e0       	ldi	r29, 0x00	; 0
    4fe4:	05 c0       	rjmp	.+10     	; 0x4ff0 <deleteNode+0xe0>
    4fe6:	21 96       	adiw	r28, 0x01	; 1
    4fe8:	c8 31       	cpi	r28, 0x18	; 24
    4fea:	d1 05       	cpc	r29, r1
    4fec:	09 f4       	brne	.+2      	; 0x4ff0 <deleteNode+0xe0>
    4fee:	ad cf       	rjmp	.-166    	; 0x4f4a <deleteNode+0x3a>
    4ff0:	80 2f       	mov	r24, r16
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	be 01       	movw	r22, r28
    4ff6:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	8e 15       	cp	r24, r14
    4ffe:	9f 05       	cpc	r25, r15
    5000:	91 f7       	brne	.-28     	; 0x4fe6 <deleteNode+0xd6>
    5002:	da cf       	rjmp	.-76     	; 0x4fb8 <deleteNode+0xa8>
    5004:	c7 01       	movw	r24, r14
    5006:	6d e0       	ldi	r22, 0x0D	; 13
    5008:	70 e0       	ldi	r23, 0x00	; 0
    500a:	40 e0       	ldi	r20, 0x00	; 0
    500c:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    5010:	e1 14       	cp	r14, r1
    5012:	f1 04       	cpc	r15, r1
    5014:	11 f4       	brne	.+4      	; 0x501a <deleteNode+0x10a>
    5016:	00 23       	and	r16, r16
    5018:	81 f0       	breq	.+32     	; 0x503a <deleteNode+0x12a>
    501a:	ce e0       	ldi	r28, 0x0E	; 14
    501c:	d0 e0       	ldi	r29, 0x00	; 0
    501e:	80 2f       	mov	r24, r16
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	be 01       	movw	r22, r28
    5024:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	8e 15       	cp	r24, r14
    502c:	9f 05       	cpc	r25, r15
    502e:	09 f4       	brne	.+2      	; 0x5032 <deleteNode+0x122>
    5030:	54 c0       	rjmp	.+168    	; 0x50da <deleteNode+0x1ca>
    5032:	21 96       	adiw	r28, 0x01	; 1
    5034:	c8 31       	cpi	r28, 0x18	; 24
    5036:	d1 05       	cpc	r29, r1
    5038:	91 f7       	brne	.-28     	; 0x501e <deleteNode+0x10e>
    503a:	ce e0       	ldi	r28, 0x0E	; 14
    503c:	d0 e0       	ldi	r29, 0x00	; 0
    503e:	c7 01       	movw	r24, r14
    5040:	be 01       	movw	r22, r28
    5042:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5046:	88 23       	and	r24, r24
    5048:	39 f0       	breq	.+14     	; 0x5058 <deleteNode+0x148>
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <releaseFlashPage>
    5050:	21 96       	adiw	r28, 0x01	; 1
    5052:	c6 31       	cpi	r28, 0x16	; 22
    5054:	d1 05       	cpc	r29, r1
    5056:	99 f7       	brne	.-26     	; 0x503e <deleteNode+0x12e>
    5058:	1e 2d       	mov	r17, r14
    505a:	81 2f       	mov	r24, r17
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	68 e1       	ldi	r22, 0x18	; 24
    5060:	70 e0       	ldi	r23, 0x00	; 0
    5062:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5066:	18 2f       	mov	r17, r24
    5068:	88 23       	and	r24, r24
    506a:	09 f4       	brne	.+2      	; 0x506e <deleteNode+0x15e>
    506c:	6e cf       	rjmp	.-292    	; 0x4f4a <deleteNode+0x3a>
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <releaseVectorNode>
    5074:	ce e0       	ldi	r28, 0x0E	; 14
    5076:	d0 e0       	ldi	r29, 0x00	; 0
    5078:	81 2f       	mov	r24, r17
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	be 01       	movw	r22, r28
    507e:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5082:	88 23       	and	r24, r24
    5084:	51 f3       	breq	.-44     	; 0x505a <deleteNode+0x14a>
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <releaseFlashPage>
    508c:	21 96       	adiw	r28, 0x01	; 1
    508e:	c6 31       	cpi	r28, 0x16	; 22
    5090:	d1 05       	cpc	r29, r1
    5092:	91 f7       	brne	.-28     	; 0x5078 <deleteNode+0x168>
    5094:	e2 cf       	rjmp	.-60     	; 0x505a <deleteNode+0x14a>
    5096:	c7 01       	movw	r24, r14
    5098:	6d e0       	ldi	r22, 0x0D	; 13
    509a:	70 e0       	ldi	r23, 0x00	; 0
    509c:	40 e0       	ldi	r20, 0x00	; 0
    509e:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    50a2:	e1 14       	cp	r14, r1
    50a4:	f1 04       	cpc	r15, r1
    50a6:	b1 f0       	breq	.+44     	; 0x50d4 <deleteNode+0x1c4>
    50a8:	ce e0       	ldi	r28, 0x0E	; 14
    50aa:	d0 e0       	ldi	r29, 0x00	; 0
    50ac:	05 c0       	rjmp	.+10     	; 0x50b8 <deleteNode+0x1a8>
    50ae:	21 96       	adiw	r28, 0x01	; 1
    50b0:	c8 31       	cpi	r28, 0x18	; 24
    50b2:	d1 05       	cpc	r29, r1
    50b4:	09 f4       	brne	.+2      	; 0x50b8 <deleteNode+0x1a8>
    50b6:	49 cf       	rjmp	.-366    	; 0x4f4a <deleteNode+0x3a>
    50b8:	80 2f       	mov	r24, r16
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	be 01       	movw	r22, r28
    50be:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	8e 15       	cp	r24, r14
    50c6:	9f 05       	cpc	r25, r15
    50c8:	91 f7       	brne	.-28     	; 0x50ae <deleteNode+0x19e>
    50ca:	76 cf       	rjmp	.-276    	; 0x4fb8 <deleteNode+0xa8>
    50cc:	00 23       	and	r16, r16
    50ce:	09 f0       	breq	.+2      	; 0x50d2 <deleteNode+0x1c2>
    50d0:	87 cf       	rjmp	.-242    	; 0x4fe0 <deleteNode+0xd0>
    50d2:	3b cf       	rjmp	.-394    	; 0x4f4a <deleteNode+0x3a>
    50d4:	00 23       	and	r16, r16
    50d6:	41 f7       	brne	.-48     	; 0x50a8 <deleteNode+0x198>
    50d8:	38 cf       	rjmp	.-400    	; 0x4f4a <deleteNode+0x3a>
    50da:	80 2f       	mov	r24, r16
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	be 01       	movw	r22, r28
    50e0:	40 e0       	ldi	r20, 0x00	; 0
    50e2:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    50e6:	ce e0       	ldi	r28, 0x0E	; 14
    50e8:	d0 e0       	ldi	r29, 0x00	; 0
    50ea:	a9 cf       	rjmp	.-174    	; 0x503e <deleteNode+0x12e>

000050ec <formatFSLite>:
    50ec:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <initVectorFlash>
    50f0:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <initVectorNode>
    50f4:	08 95       	ret

000050f6 <formatFS>:
    50f6:	cf 93       	push	r28
    50f8:	df 93       	push	r29
    50fa:	c0 e0       	ldi	r28, 0x00	; 0
    50fc:	d0 e0       	ldi	r29, 0x00	; 0
    50fe:	ce 01       	movw	r24, r28
    5100:	60 e0       	ldi	r22, 0x00	; 0
    5102:	70 e0       	ldi	r23, 0x00	; 0
    5104:	40 e2       	ldi	r20, 0x20	; 32
    5106:	50 e0       	ldi	r21, 0x00	; 0
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <fsinitBytes>
    510e:	21 96       	adiw	r28, 0x01	; 1
    5110:	c1 32       	cpi	r28, 0x21	; 33
    5112:	d1 05       	cpc	r29, r1
    5114:	a1 f7       	brne	.-24     	; 0x50fe <formatFS+0x8>
    5116:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <initVectorFlash>
    511a:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <initVectorNode>
    511e:	df 91       	pop	r29
    5120:	cf 91       	pop	r28
    5122:	08 95       	ret

00005124 <buildNewNode>:
    5124:	df 92       	push	r13
    5126:	ef 92       	push	r14
    5128:	ff 92       	push	r15
    512a:	0f 93       	push	r16
    512c:	1f 93       	push	r17
    512e:	cf 93       	push	r28
    5130:	df 93       	push	r29
    5132:	7c 01       	movw	r14, r24
    5134:	eb 01       	movw	r28, r22
    5136:	d4 2e       	mov	r13, r20
    5138:	12 2f       	mov	r17, r18
    513a:	cb 01       	movw	r24, r22
    513c:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    5140:	48 2f       	mov	r20, r24
    5142:	8c 30       	cpi	r24, 0x0C	; 12
    5144:	08 f4       	brcc	.+2      	; 0x5148 <buildNewNode+0x24>
    5146:	4f 5f       	subi	r20, 0xFF	; 255
    5148:	01 30       	cpi	r16, 0x01	; 1
    514a:	09 f4       	brne	.+2      	; 0x514e <buildNewNode+0x2a>
    514c:	5f c0       	rjmp	.+190    	; 0x520c <buildNewNode+0xe8>
    514e:	02 30       	cpi	r16, 0x02	; 2
    5150:	09 f4       	brne	.+2      	; 0x5154 <buildNewNode+0x30>
    5152:	68 c0       	rjmp	.+208    	; 0x5224 <buildNewNode+0x100>
    5154:	03 30       	cpi	r16, 0x03	; 3
    5156:	09 f4       	brne	.+2      	; 0x515a <buildNewNode+0x36>
    5158:	71 c0       	rjmp	.+226    	; 0x523c <buildNewNode+0x118>
    515a:	04 30       	cpi	r16, 0x04	; 4
    515c:	41 f1       	breq	.+80     	; 0x51ae <buildNewNode+0x8a>
    515e:	e1 14       	cp	r14, r1
    5160:	f1 04       	cpc	r15, r1
    5162:	11 f4       	brne	.+4      	; 0x5168 <buildNewNode+0x44>
    5164:	11 23       	and	r17, r17
    5166:	69 f0       	breq	.+26     	; 0x5182 <buildNewNode+0x5e>
    5168:	ce e0       	ldi	r28, 0x0E	; 14
    516a:	d0 e0       	ldi	r29, 0x00	; 0
    516c:	81 2f       	mov	r24, r17
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	be 01       	movw	r22, r28
    5172:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5176:	88 23       	and	r24, r24
    5178:	61 f0       	breq	.+24     	; 0x5192 <buildNewNode+0x6e>
    517a:	21 96       	adiw	r28, 0x01	; 1
    517c:	c8 31       	cpi	r28, 0x18	; 24
    517e:	d1 05       	cpc	r29, r1
    5180:	a9 f7       	brne	.-22     	; 0x516c <buildNewNode+0x48>
    5182:	df 91       	pop	r29
    5184:	cf 91       	pop	r28
    5186:	1f 91       	pop	r17
    5188:	0f 91       	pop	r16
    518a:	ff 90       	pop	r15
    518c:	ef 90       	pop	r14
    518e:	df 90       	pop	r13
    5190:	08 95       	ret
    5192:	81 2f       	mov	r24, r17
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	be 01       	movw	r22, r28
    5198:	4e 2d       	mov	r20, r14
    519a:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    519e:	df 91       	pop	r29
    51a0:	cf 91       	pop	r28
    51a2:	1f 91       	pop	r17
    51a4:	0f 91       	pop	r16
    51a6:	ff 90       	pop	r15
    51a8:	ef 90       	pop	r14
    51aa:	df 90       	pop	r13
    51ac:	08 95       	ret
    51ae:	c7 01       	movw	r24, r14
    51b0:	60 e0       	ldi	r22, 0x00	; 0
    51b2:	70 e0       	ldi	r23, 0x00	; 0
    51b4:	50 e0       	ldi	r21, 0x00	; 0
    51b6:	9e 01       	movw	r18, r28
    51b8:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <fswriteBytes>
    51bc:	c7 01       	movw	r24, r14
    51be:	6c e0       	ldi	r22, 0x0C	; 12
    51c0:	70 e0       	ldi	r23, 0x00	; 0
    51c2:	44 e0       	ldi	r20, 0x04	; 4
    51c4:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    51c8:	c7 01       	movw	r24, r14
    51ca:	6d e0       	ldi	r22, 0x0D	; 13
    51cc:	70 e0       	ldi	r23, 0x00	; 0
    51ce:	41 e0       	ldi	r20, 0x01	; 1
    51d0:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    51d4:	c7 01       	movw	r24, r14
    51d6:	6e e0       	ldi	r22, 0x0E	; 14
    51d8:	70 e0       	ldi	r23, 0x00	; 0
    51da:	4e e0       	ldi	r20, 0x0E	; 14
    51dc:	50 e0       	ldi	r21, 0x00	; 0
    51de:	20 e0       	ldi	r18, 0x00	; 0
    51e0:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <fsinitBytes>
    51e4:	c7 01       	movw	r24, r14
    51e6:	6c e1       	ldi	r22, 0x1C	; 28
    51e8:	70 e0       	ldi	r23, 0x00	; 0
    51ea:	4d 2d       	mov	r20, r13
    51ec:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    51f0:	c7 01       	movw	r24, r14
    51f2:	6d e1       	ldi	r22, 0x1D	; 29
    51f4:	70 e0       	ldi	r23, 0x00	; 0
    51f6:	40 e0       	ldi	r20, 0x00	; 0
    51f8:	50 e0       	ldi	r21, 0x00	; 0
    51fa:	0e 94 90 25 	call	0x4b20	; 0x4b20 <fswrite16uint>
    51fe:	c7 01       	movw	r24, r14
    5200:	6f e1       	ldi	r22, 0x1F	; 31
    5202:	70 e0       	ldi	r23, 0x00	; 0
    5204:	41 2f       	mov	r20, r17
    5206:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    520a:	a9 cf       	rjmp	.-174    	; 0x515e <buildNewNode+0x3a>
    520c:	c7 01       	movw	r24, r14
    520e:	60 e0       	ldi	r22, 0x00	; 0
    5210:	70 e0       	ldi	r23, 0x00	; 0
    5212:	50 e0       	ldi	r21, 0x00	; 0
    5214:	9e 01       	movw	r18, r28
    5216:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <fswriteBytes>
    521a:	c7 01       	movw	r24, r14
    521c:	6c e0       	ldi	r22, 0x0C	; 12
    521e:	70 e0       	ldi	r23, 0x00	; 0
    5220:	41 e0       	ldi	r20, 0x01	; 1
    5222:	d0 cf       	rjmp	.-96     	; 0x51c4 <buildNewNode+0xa0>
    5224:	c7 01       	movw	r24, r14
    5226:	60 e0       	ldi	r22, 0x00	; 0
    5228:	70 e0       	ldi	r23, 0x00	; 0
    522a:	50 e0       	ldi	r21, 0x00	; 0
    522c:	9e 01       	movw	r18, r28
    522e:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <fswriteBytes>
    5232:	c7 01       	movw	r24, r14
    5234:	6c e0       	ldi	r22, 0x0C	; 12
    5236:	70 e0       	ldi	r23, 0x00	; 0
    5238:	42 e0       	ldi	r20, 0x02	; 2
    523a:	c4 cf       	rjmp	.-120    	; 0x51c4 <buildNewNode+0xa0>
    523c:	c7 01       	movw	r24, r14
    523e:	60 e0       	ldi	r22, 0x00	; 0
    5240:	70 e0       	ldi	r23, 0x00	; 0
    5242:	50 e0       	ldi	r21, 0x00	; 0
    5244:	9e 01       	movw	r18, r28
    5246:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <fswriteBytes>
    524a:	c7 01       	movw	r24, r14
    524c:	6c e0       	ldi	r22, 0x0C	; 12
    524e:	70 e0       	ldi	r23, 0x00	; 0
    5250:	43 e0       	ldi	r20, 0x03	; 3
    5252:	b8 cf       	rjmp	.-144    	; 0x51c4 <buildNewNode+0xa0>

00005254 <buildRootNode>:
    5254:	0f 93       	push	r16
    5256:	80 e0       	ldi	r24, 0x00	; 0
    5258:	90 e0       	ldi	r25, 0x00	; 0
    525a:	6a e2       	ldi	r22, 0x2A	; 42
    525c:	71 e0       	ldi	r23, 0x01	; 1
    525e:	40 e0       	ldi	r20, 0x00	; 0
    5260:	20 e0       	ldi	r18, 0x00	; 0
    5262:	01 e0       	ldi	r16, 0x01	; 1
    5264:	0e 94 92 28 	call	0x5124	; 0x5124 <buildNewNode>
    5268:	0f 91       	pop	r16
    526a:	08 95       	ret

0000526c <getPwd>:
}

//return current directory
int getPwd()
{
    526c:	80 91 66 03 	lds	r24, 0x0366
    5270:	90 91 67 03 	lds	r25, 0x0367
    5274:	08 95       	ret

00005276 <setPwd>:
    return currentdirectory;
}

//set current directory 
void setPwd(int directory)
{
    5276:	90 93 67 03 	sts	0x0367, r25
    527a:	80 93 66 03 	sts	0x0366, r24
    currentdirectory = directory;
    return;
}
    527e:	08 95       	ret

00005280 <getRealSector>:

//check directory empty
//returns 0 if it is empty. Returns 1 if otherwise 
int emptyDirectory(int directory)
{
    int i;

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(directory, DIR_ADDRSUBOFFSET + i);
        if (subaddr > 0)
        {
            return 1;
        }
    }
    return 0;
}

//create a directory
uint8_t createDir(char *filename, int directory)
{
    //fix: should first try to see if there is a directory with the same name
    uint8_t getaddr;

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    {
        return 255;
    }
    //this part first inserts a directory and then creates a node 
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, DIRNODE);
    return getaddr;
}

//void foobar()
//{}
//create a file
uint8_t createFileFromDirectory(char *filename, int directory)
{
    //this part first inserts a directory and then creates a node 
    uint8_t getaddr;

    if (existBlockAddr(filename, directory) > 0)
    {
        return 0;
    }
    if (fullBlock(directory) == 1)
    {
        return 255;
    }
    getaddr = (uint8_t) getVectorNode();
    buildNewNode(getaddr, filename, 0, (uint8_t) directory, FILENODE);
    return getaddr;
}

//check if the addr block is a directory or not 
int isDirectory(int addr)
{
    if (checkNodeValid(addr) == DIRNODE)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

//-1 NO SUCH FILE, and the parent direcotry has some problem 
//returns addr of the file and for state
//FILENODE, DIRECTORYNODE, BLAH, BLAH 1, 2, 3, 4
//0, THERE is no such file, but it returns the parent of the path , which does exist
//this function uses the curren tdicreotry if needed
//the pathname is organized as ../ or ./ or name/ or /something and does not end with / 
//sovled
//and the following are the functions this thing uses
//
int locateFileName(char *pathname, int *state)
{
    char p, q;
    char *relativestart;
    int addrTrack;
    char nextString[13];
    int ret;

    //first classify what type of pathname this is 
    p = pathname[0];
    q = pathname[1];
    relativestart = pathname;
    addrTrack = getPwd();
    if ((p == '.') && (q == '.'))
    {
        addrTrack = getParentDirectory(addrTrack);
        relativestart = pathname + 2;
    }
    else if ((p == '.') && (q == '/'))
    {
        relativestart = pathname + 1;
    }
    else if (p == '/')
    {
        addrTrack = FSROOTNODE;
        relativestart = pathname;
    }
    else if (isLetter(p) == 1)
    {
        //this case is the "mnae" case, where there may or may not be further stuff behind 
        //buggy place 
        relativestart = extractString(relativestart, (char *)nextString);
        if (relativestart == '\0')
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
            {
                //ok there is only one string but no further strings after that. And this string does not exist 
                *state = 0;
                return addrTrack;
            }
            else
            {
                *state = ret;
                ret = changeDirectory(nextString, addrTrack);
                return ret;
            }
        }
        else
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
            {
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
            }
        }
    }
    while (1)
    {
        //Now all cases have been uniform now. It is like /a/b/c type 
        if (isDirectory(addrTrack) == 0)
        {
            return -1;
        }
        relativestart = extractString(relativestart, nextString);
        if (*relativestart == '\0')
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
            {
                //ok there is only one string but no further strings after that. And this string does not exist 
                *state = 0;
                return addrTrack;
            }
            else
            {
                *state = ret;
                ret = changeDirectory(nextString, addrTrack);
                return ret;
            }
        }
        else
        {
            if ((ret = existBlock(nextString, addrTrack)) == 0)
            {
                //ok there is only one string but further strings after that. And this string does not exist    
                return -1;
            }
            else
            {
                addrTrack = changeDirectory(nextString, addrTrack);
            }
        }
    }
}

//-------------------------------------------------------------------------
void freeBlocks(int addr)
{
    int i;
    uint8_t readpage;

    for (i = 0; i < 8; i++)
    {
        readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
        if (readpage == 0)
        {
            break;
        }
        else
        {
            releaseFlashPage(readpage);
        }
    }
    return;
}

//open a file according to the mode and populate the fid section 
void openFile(int addr, int fid, int mode)
{
    fidtable[fid].addr = (uint8_t) addr;
    fidtable[fid].mode = (uint8_t) mode;
    fidtable[fid].size = fsread16uint(addr, 29);
    //mode: 1 read 2 write 3 append 4 truncate 5 rw
    if (mode == 1)
    {
        fidtable[fid].fpos = 0;
    }
    if (mode == 2)
    {
        fidtable[fid].fpos = 0;
    }
    if (mode == 3)
    {
        fidtable[fid].fpos = fidtable[fid].size;
    }
    if (mode == 4)
    {
        freeBlocks(addr);
        fidtable[fid].fpos = 0;
    }
    if (mode == 5)
    {
        fidtable[fid].fpos = 0;
    }
}

//-------------------------------------------------------------------------
uint8_t getRealSector(uint8_t addr, uint8_t sectornum)
{
    5280:	0f 93       	push	r16
    5282:	1f 93       	push	r17
    5284:	06 2f       	mov	r16, r22
    uint8_t currentaddr;

    currentaddr = addr;
    while (sectornum >= 8)
    5286:	68 30       	cpi	r22, 0x08	; 8
    5288:	50 f0       	brcs	.+20     	; 0x529e <getRealSector+0x1e>
    528a:	16 2f       	mov	r17, r22
    {
        currentaddr = fsread8uint(currentaddr, FILE_NEXTOFFSET);
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	68 e1       	ldi	r22, 0x18	; 24
    5290:	70 e0       	ldi	r23, 0x00	; 0
    5292:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
        sectornum -= 8;
    5296:	18 50       	subi	r17, 0x08	; 8
    5298:	18 30       	cpi	r17, 0x08	; 8
    529a:	c0 f7       	brcc	.-16     	; 0x528c <getRealSector+0xc>
    529c:	07 70       	andi	r16, 0x07	; 7
    }
    return fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + sectornum);
    529e:	60 2f       	mov	r22, r16
    52a0:	70 e0       	ldi	r23, 0x00	; 0
    52a2:	62 5f       	subi	r22, 0xF2	; 242
    52a4:	7f 4f       	sbci	r23, 0xFF	; 255
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
}
    52ac:	1f 91       	pop	r17
    52ae:	0f 91       	pop	r16
    52b0:	08 95       	ret

000052b2 <emptyDirectory>:
    52b2:	0f 93       	push	r16
    52b4:	1f 93       	push	r17
    52b6:	cf 93       	push	r28
    52b8:	df 93       	push	r29
    52ba:	8c 01       	movw	r16, r24
    52bc:	ce e0       	ldi	r28, 0x0E	; 14
    52be:	d0 e0       	ldi	r29, 0x00	; 0
    52c0:	c8 01       	movw	r24, r16
    52c2:	be 01       	movw	r22, r28
    52c4:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    52c8:	88 23       	and	r24, r24
    52ca:	61 f4       	brne	.+24     	; 0x52e4 <emptyDirectory+0x32>
    52cc:	21 96       	adiw	r28, 0x01	; 1
    52ce:	c8 31       	cpi	r28, 0x18	; 24
    52d0:	d1 05       	cpc	r29, r1
    52d2:	b1 f7       	brne	.-20     	; 0x52c0 <emptyDirectory+0xe>
    52d4:	20 e0       	ldi	r18, 0x00	; 0
    52d6:	30 e0       	ldi	r19, 0x00	; 0
    52d8:	c9 01       	movw	r24, r18
    52da:	df 91       	pop	r29
    52dc:	cf 91       	pop	r28
    52de:	1f 91       	pop	r17
    52e0:	0f 91       	pop	r16
    52e2:	08 95       	ret
    52e4:	21 e0       	ldi	r18, 0x01	; 1
    52e6:	30 e0       	ldi	r19, 0x00	; 0
    52e8:	c9 01       	movw	r24, r18
    52ea:	df 91       	pop	r29
    52ec:	cf 91       	pop	r28
    52ee:	1f 91       	pop	r17
    52f0:	0f 91       	pop	r16
    52f2:	08 95       	ret

000052f4 <getParentDirectory>:
    52f4:	6f e1       	ldi	r22, 0x1F	; 31
    52f6:	70 e0       	ldi	r23, 0x00	; 0
    52f8:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	08 95       	ret

00005300 <getName>:
    5300:	ef 92       	push	r14
    5302:	ff 92       	push	r15
    5304:	0f 93       	push	r16
    5306:	1f 93       	push	r17
    5308:	cf 93       	push	r28
    530a:	df 93       	push	r29
    530c:	7b 01       	movw	r14, r22
    530e:	8c 01       	movw	r16, r24
    5310:	c0 e0       	ldi	r28, 0x00	; 0
    5312:	d0 e0       	ldi	r29, 0x00	; 0
    5314:	c7 01       	movw	r24, r14
    5316:	be 01       	movw	r22, r28
    5318:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    531c:	f8 01       	movw	r30, r16
    531e:	80 83       	st	Z, r24
    5320:	88 23       	and	r24, r24
    5322:	31 f0       	breq	.+12     	; 0x5330 <getName+0x30>
    5324:	0f 5f       	subi	r16, 0xFF	; 255
    5326:	1f 4f       	sbci	r17, 0xFF	; 255
    5328:	21 96       	adiw	r28, 0x01	; 1
    532a:	cc 30       	cpi	r28, 0x0C	; 12
    532c:	d1 05       	cpc	r29, r1
    532e:	91 f7       	brne	.-28     	; 0x5314 <getName+0x14>
    5330:	f8 01       	movw	r30, r16
    5332:	10 82       	st	Z, r1
    5334:	df 91       	pop	r29
    5336:	cf 91       	pop	r28
    5338:	1f 91       	pop	r17
    533a:	0f 91       	pop	r16
    533c:	ff 90       	pop	r15
    533e:	ef 90       	pop	r14
    5340:	08 95       	ret

00005342 <fullBlock>:
    5342:	0f 93       	push	r16
    5344:	1f 93       	push	r17
    5346:	cf 93       	push	r28
    5348:	df 93       	push	r29
    534a:	8c 01       	movw	r16, r24
    534c:	ce e0       	ldi	r28, 0x0E	; 14
    534e:	d0 e0       	ldi	r29, 0x00	; 0
    5350:	c8 01       	movw	r24, r16
    5352:	be 01       	movw	r22, r28
    5354:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5358:	88 23       	and	r24, r24
    535a:	29 f0       	breq	.+10     	; 0x5366 <fullBlock+0x24>
    535c:	21 96       	adiw	r28, 0x01	; 1
    535e:	c8 31       	cpi	r28, 0x18	; 24
    5360:	d1 05       	cpc	r29, r1
    5362:	b1 f7       	brne	.-20     	; 0x5350 <fullBlock+0xe>
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	df 91       	pop	r29
    5368:	cf 91       	pop	r28
    536a:	1f 91       	pop	r17
    536c:	0f 91       	pop	r16
    536e:	08 95       	ret

00005370 <removeChildNode>:

//-------------------------------------------------------------------------
void newSector(int addr)
{
    uint8_t i, readpage;
    uint8_t next, currentaddr, getnode;

    currentaddr = addr;
    //begin rounds of 
    // 1 check whether the current 8 pages are occupied or not
    // 2 check the next field is ok or not
    // 3 get to the next addr and loop 
    while (1)
    {
        for (i = 0; i < 8; i++)
        {
            readpage = fsread8uint(currentaddr, FILE_ADDRPAGEOFFSET + i);
            if (readpage == 0)
            {
                break;
            }
        }
        if (i < 8)
        {
            readpage = getFlashPage();
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET + i, readpage);
            return;
        }
        next = fsread8uint(currentaddr, FILE_NEXTOFFSET);
        if (next == 0)
        {
            getnode = getVectorNode();
            fswrite8uint(currentaddr, FILE_NEXTOFFSET, getnode);
            currentaddr = getnode;
            readpage = getFlashPage();
            fswrite8uint(currentaddr, FILE_ADDRPAGEOFFSET, readpage);
            return;
        }
        currentaddr = next;
    }
}

//-------------------------------------------------------------------------
void addChildNode(uint8_t addr, uint8_t child)
{
    uint8_t i;

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
        if (subaddr == 0)
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, child);
            return;
        }
    }
    return;
}

//-------------------------------------------------------------------------
void removeChildNode(uint8_t addr, uint8_t child)
{
    5370:	0f 93       	push	r16
    5372:	1f 93       	push	r17
    5374:	cf 93       	push	r28
    5376:	df 93       	push	r29
    5378:	08 2f       	mov	r16, r24
    537a:	16 2f       	mov	r17, r22
    537c:	ce e0       	ldi	r28, 0x0E	; 14
    537e:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t i;

    for (i = 0; i < 10; i++)
    {
        uint8_t subaddr;

        subaddr = fsread8uint(addr, DIR_ADDRSUBOFFSET + i);
    5380:	80 2f       	mov	r24, r16
    5382:	90 e0       	ldi	r25, 0x00	; 0
    5384:	be 01       	movw	r22, r28
    5386:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
        if (subaddr == child)
    538a:	81 17       	cp	r24, r17
    538c:	49 f0       	breq	.+18     	; 0x53a0 <removeChildNode+0x30>
        {
            fswrite8uint(addr, DIR_ADDRSUBOFFSET + i, 0);
            return;
    538e:	21 96       	adiw	r28, 0x01	; 1
    5390:	c8 31       	cpi	r28, 0x18	; 24
    5392:	d1 05       	cpc	r29, r1
    5394:	a9 f7       	brne	.-22     	; 0x5380 <removeChildNode+0x10>
        }
    }
    return;
}
    5396:	df 91       	pop	r29
    5398:	cf 91       	pop	r28
    539a:	1f 91       	pop	r17
    539c:	0f 91       	pop	r16
    539e:	08 95       	ret
    53a0:	80 2f       	mov	r24, r16
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	be 01       	movw	r22, r28
    53a6:	40 e0       	ldi	r20, 0x00	; 0
    53a8:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    53ac:	df 91       	pop	r29
    53ae:	cf 91       	pop	r28
    53b0:	1f 91       	pop	r17
    53b2:	0f 91       	pop	r16
    53b4:	08 95       	ret

000053b6 <addChildNode>:
    53b6:	0f 93       	push	r16
    53b8:	1f 93       	push	r17
    53ba:	cf 93       	push	r28
    53bc:	df 93       	push	r29
    53be:	18 2f       	mov	r17, r24
    53c0:	06 2f       	mov	r16, r22
    53c2:	ce e0       	ldi	r28, 0x0E	; 14
    53c4:	d0 e0       	ldi	r29, 0x00	; 0
    53c6:	81 2f       	mov	r24, r17
    53c8:	90 e0       	ldi	r25, 0x00	; 0
    53ca:	be 01       	movw	r22, r28
    53cc:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    53d0:	88 23       	and	r24, r24
    53d2:	49 f0       	breq	.+18     	; 0x53e6 <addChildNode+0x30>
    53d4:	21 96       	adiw	r28, 0x01	; 1
    53d6:	c8 31       	cpi	r28, 0x18	; 24
    53d8:	d1 05       	cpc	r29, r1
    53da:	a9 f7       	brne	.-22     	; 0x53c6 <addChildNode+0x10>
    53dc:	df 91       	pop	r29
    53de:	cf 91       	pop	r28
    53e0:	1f 91       	pop	r17
    53e2:	0f 91       	pop	r16
    53e4:	08 95       	ret
    53e6:	81 2f       	mov	r24, r17
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	be 01       	movw	r22, r28
    53ec:	40 2f       	mov	r20, r16
    53ee:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    53f2:	df 91       	pop	r29
    53f4:	cf 91       	pop	r28
    53f6:	1f 91       	pop	r17
    53f8:	0f 91       	pop	r16
    53fa:	08 95       	ret

000053fc <newSector>:
    53fc:	0f 93       	push	r16
    53fe:	1f 93       	push	r17
    5400:	cf 93       	push	r28
    5402:	df 93       	push	r29
    5404:	18 2f       	mov	r17, r24
    5406:	01 2f       	mov	r16, r17
    5408:	6e e0       	ldi	r22, 0x0E	; 14
    540a:	70 e0       	ldi	r23, 0x00	; 0
    540c:	eb 01       	movw	r28, r22
    540e:	81 2f       	mov	r24, r17
    5410:	90 e0       	ldi	r25, 0x00	; 0
    5412:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5416:	88 23       	and	r24, r24
    5418:	71 f1       	breq	.+92     	; 0x5476 <newSector+0x7a>
    541a:	9e 01       	movw	r18, r28
    541c:	2d 50       	subi	r18, 0x0D	; 13
    541e:	be 01       	movw	r22, r28
    5420:	6f 5f       	subi	r22, 0xFF	; 255
    5422:	7f 4f       	sbci	r23, 0xFF	; 255
    5424:	66 31       	cpi	r22, 0x16	; 22
    5426:	71 05       	cpc	r23, r1
    5428:	89 f7       	brne	.-30     	; 0x540c <newSector+0x10>
    542a:	28 30       	cpi	r18, 0x08	; 8
    542c:	08 f1       	brcs	.+66     	; 0x5470 <newSector+0x74>
    542e:	81 2f       	mov	r24, r17
    5430:	90 e0       	ldi	r25, 0x00	; 0
    5432:	68 e1       	ldi	r22, 0x18	; 24
    5434:	70 e0       	ldi	r23, 0x00	; 0
    5436:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    543a:	18 2f       	mov	r17, r24
    543c:	88 23       	and	r24, r24
    543e:	19 f7       	brne	.-58     	; 0x5406 <newSector+0xa>
    5440:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <getVectorNode>
    5444:	18 2f       	mov	r17, r24
    5446:	80 2f       	mov	r24, r16
    5448:	90 e0       	ldi	r25, 0x00	; 0
    544a:	68 e1       	ldi	r22, 0x18	; 24
    544c:	70 e0       	ldi	r23, 0x00	; 0
    544e:	41 2f       	mov	r20, r17
    5450:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    5454:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <getFlashPage>
    5458:	48 2f       	mov	r20, r24
    545a:	81 2f       	mov	r24, r17
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	6e e0       	ldi	r22, 0x0E	; 14
    5460:	70 e0       	ldi	r23, 0x00	; 0
    5462:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    5466:	df 91       	pop	r29
    5468:	cf 91       	pop	r28
    546a:	1f 91       	pop	r17
    546c:	0f 91       	pop	r16
    546e:	08 95       	ret
    5470:	c2 2f       	mov	r28, r18
    5472:	d0 e0       	ldi	r29, 0x00	; 0
    5474:	2e 96       	adiw	r28, 0x0e	; 14
    5476:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <getFlashPage>
    547a:	48 2f       	mov	r20, r24
    547c:	81 2f       	mov	r24, r17
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	be 01       	movw	r22, r28
    5482:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <fswrite8uint>
    5486:	df 91       	pop	r29
    5488:	cf 91       	pop	r28
    548a:	1f 91       	pop	r17
    548c:	0f 91       	pop	r16
    548e:	08 95       	ret

00005490 <freeBlocks>:
    5490:	0f 93       	push	r16
    5492:	1f 93       	push	r17
    5494:	cf 93       	push	r28
    5496:	df 93       	push	r29
    5498:	8c 01       	movw	r16, r24
    549a:	ce e0       	ldi	r28, 0x0E	; 14
    549c:	d0 e0       	ldi	r29, 0x00	; 0
    549e:	c8 01       	movw	r24, r16
    54a0:	be 01       	movw	r22, r28
    54a2:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    54a6:	88 23       	and	r24, r24
    54a8:	39 f0       	breq	.+14     	; 0x54b8 <freeBlocks+0x28>
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <releaseFlashPage>
    54b0:	21 96       	adiw	r28, 0x01	; 1
    54b2:	c6 31       	cpi	r28, 0x16	; 22
    54b4:	d1 05       	cpc	r29, r1
    54b6:	99 f7       	brne	.-26     	; 0x549e <freeBlocks+0xe>
    54b8:	df 91       	pop	r29
    54ba:	cf 91       	pop	r28
    54bc:	1f 91       	pop	r17
    54be:	0f 91       	pop	r16
    54c0:	08 95       	ret

000054c2 <openFile>:
    54c2:	af 92       	push	r10
    54c4:	bf 92       	push	r11
    54c6:	cf 92       	push	r12
    54c8:	df 92       	push	r13
    54ca:	ef 92       	push	r14
    54cc:	ff 92       	push	r15
    54ce:	0f 93       	push	r16
    54d0:	1f 93       	push	r17
    54d2:	cf 93       	push	r28
    54d4:	df 93       	push	r29
    54d6:	d8 2e       	mov	r13, r24
    54d8:	c9 2e       	mov	r12, r25
    54da:	8a 01       	movw	r16, r20
    54dc:	fb 01       	movw	r30, r22
    54de:	ee 0f       	add	r30, r30
    54e0:	ff 1f       	adc	r31, r31
    54e2:	ee 0f       	add	r30, r30
    54e4:	ff 1f       	adc	r31, r31
    54e6:	e6 0f       	add	r30, r22
    54e8:	f7 1f       	adc	r31, r23
    54ea:	ee 0f       	add	r30, r30
    54ec:	ff 1f       	adc	r31, r31
    54ee:	e8 55       	subi	r30, 0x58	; 88
    54f0:	fa 4f       	sbci	r31, 0xFA	; 250
    54f2:	80 83       	st	Z, r24
    54f4:	5b 01       	movw	r10, r22
    54f6:	aa 0c       	add	r10, r10
    54f8:	bb 1c       	adc	r11, r11
    54fa:	7b 01       	movw	r14, r22
    54fc:	ee 0c       	add	r14, r14
    54fe:	ff 1c       	adc	r15, r15
    5500:	ee 0c       	add	r14, r14
    5502:	ff 1c       	adc	r15, r15
    5504:	ee 0c       	add	r14, r14
    5506:	ff 1c       	adc	r15, r15
    5508:	e5 01       	movw	r28, r10
    550a:	ce 0d       	add	r28, r14
    550c:	df 1d       	adc	r29, r15
    550e:	ca 55       	subi	r28, 0x5A	; 90
    5510:	da 4f       	sbci	r29, 0xFA	; 250
    5512:	4b 83       	std	Y+3, r20	; 0x03
    5514:	8d 2d       	mov	r24, r13
    5516:	9c 2d       	mov	r25, r12
    5518:	6d e1       	ldi	r22, 0x1D	; 29
    551a:	70 e0       	ldi	r23, 0x00	; 0
    551c:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <fsread16uint>
    5520:	9d 83       	std	Y+5, r25	; 0x05
    5522:	8c 83       	std	Y+4, r24	; 0x04
    5524:	01 30       	cpi	r16, 0x01	; 1
    5526:	11 05       	cpc	r17, r1
    5528:	19 f1       	breq	.+70     	; 0x5570 <openFile+0xae>
    552a:	02 30       	cpi	r16, 0x02	; 2
    552c:	11 05       	cpc	r17, r1
    552e:	d9 f0       	breq	.+54     	; 0x5566 <openFile+0xa4>
    5530:	03 30       	cpi	r16, 0x03	; 3
    5532:	11 05       	cpc	r17, r1
    5534:	89 f4       	brne	.+34     	; 0x5558 <openFile+0x96>
    5536:	a0 e0       	ldi	r26, 0x00	; 0
    5538:	b0 e0       	ldi	r27, 0x00	; 0
    553a:	8e 83       	std	Y+6, r24	; 0x06
    553c:	9f 83       	std	Y+7, r25	; 0x07
    553e:	a8 87       	std	Y+8, r26	; 0x08
    5540:	b9 87       	std	Y+9, r27	; 0x09
    5542:	df 91       	pop	r29
    5544:	cf 91       	pop	r28
    5546:	1f 91       	pop	r17
    5548:	0f 91       	pop	r16
    554a:	ff 90       	pop	r15
    554c:	ef 90       	pop	r14
    554e:	df 90       	pop	r13
    5550:	cf 90       	pop	r12
    5552:	bf 90       	pop	r11
    5554:	af 90       	pop	r10
    5556:	08 95       	ret
    5558:	04 30       	cpi	r16, 0x04	; 4
    555a:	11 05       	cpc	r17, r1
    555c:	69 f4       	brne	.+26     	; 0x5578 <openFile+0xb6>
    555e:	8d 2d       	mov	r24, r13
    5560:	9c 2d       	mov	r25, r12
    5562:	0e 94 48 2a 	call	0x5490	; 0x5490 <freeBlocks>
    5566:	1e 82       	std	Y+6, r1	; 0x06
    5568:	1f 82       	std	Y+7, r1	; 0x07
    556a:	18 86       	std	Y+8, r1	; 0x08
    556c:	19 86       	std	Y+9, r1	; 0x09
    556e:	e9 cf       	rjmp	.-46     	; 0x5542 <openFile+0x80>
    5570:	1e 82       	std	Y+6, r1	; 0x06
    5572:	1f 82       	std	Y+7, r1	; 0x07
    5574:	18 86       	std	Y+8, r1	; 0x08
    5576:	19 86       	std	Y+9, r1	; 0x09
    5578:	05 30       	cpi	r16, 0x05	; 5
    557a:	11 05       	cpc	r17, r1
    557c:	11 f7       	brne	.-60     	; 0x5542 <openFile+0x80>
    557e:	ea 0c       	add	r14, r10
    5580:	fb 1c       	adc	r15, r11
    5582:	86 ea       	ldi	r24, 0xA6	; 166
    5584:	95 e0       	ldi	r25, 0x05	; 5
    5586:	e8 0e       	add	r14, r24
    5588:	f9 1e       	adc	r15, r25
    558a:	f7 01       	movw	r30, r14
    558c:	16 82       	std	Z+6, r1	; 0x06
    558e:	17 82       	std	Z+7, r1	; 0x07
    5590:	10 86       	std	Z+8, r1	; 0x08
    5592:	11 86       	std	Z+9, r1	; 0x09
    5594:	d6 cf       	rjmp	.-84     	; 0x5542 <openFile+0x80>

00005596 <isDirectory>:
    5596:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <checkNodeValid>
    559a:	20 e0       	ldi	r18, 0x00	; 0
    559c:	30 e0       	ldi	r19, 0x00	; 0
    559e:	01 97       	sbiw	r24, 0x01	; 1
    55a0:	11 f0       	breq	.+4      	; 0x55a6 <isDirectory+0x10>
    55a2:	c9 01       	movw	r24, r18
    55a4:	08 95       	ret
    55a6:	21 e0       	ldi	r18, 0x01	; 1
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	c9 01       	movw	r24, r18
    55ac:	08 95       	ret

000055ae <checkName>:
    55ae:	cf 92       	push	r12
    55b0:	df 92       	push	r13
    55b2:	ef 92       	push	r14
    55b4:	ff 92       	push	r15
    55b6:	1f 93       	push	r17
    55b8:	cf 93       	push	r28
    55ba:	df 93       	push	r29
    55bc:	18 2f       	mov	r17, r24
    55be:	f9 2e       	mov	r15, r25
    55c0:	6b 01       	movw	r12, r22
    55c2:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    55c6:	0d 97       	sbiw	r24, 0x0d	; 13
    55c8:	5c f0       	brlt	.+22     	; 0x55e0 <checkName+0x32>
    55ca:	21 e0       	ldi	r18, 0x01	; 1
    55cc:	30 e0       	ldi	r19, 0x00	; 0
    55ce:	c9 01       	movw	r24, r18
    55d0:	df 91       	pop	r29
    55d2:	cf 91       	pop	r28
    55d4:	1f 91       	pop	r17
    55d6:	ff 90       	pop	r15
    55d8:	ef 90       	pop	r14
    55da:	df 90       	pop	r13
    55dc:	cf 90       	pop	r12
    55de:	08 95       	ret
    55e0:	c6 01       	movw	r24, r12
    55e2:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <checkNodeValid>
    55e6:	89 2b       	or	r24, r25
    55e8:	81 f3       	breq	.-32     	; 0x55ca <checkName+0x1c>
    55ea:	81 2f       	mov	r24, r17
    55ec:	9f 2d       	mov	r25, r15
    55ee:	9c 01       	movw	r18, r24
    55f0:	79 01       	movw	r14, r18
    55f2:	c0 e0       	ldi	r28, 0x00	; 0
    55f4:	d0 e0       	ldi	r29, 0x00	; 0
    55f6:	f7 01       	movw	r30, r14
    55f8:	10 81       	ld	r17, Z
    55fa:	c6 01       	movw	r24, r12
    55fc:	be 01       	movw	r22, r28
    55fe:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5602:	18 17       	cp	r17, r24
    5604:	11 f7       	brne	.-60     	; 0x55ca <checkName+0x1c>
    5606:	f7 01       	movw	r30, r14
    5608:	80 81       	ld	r24, Z
    560a:	88 23       	and	r24, r24
    560c:	39 f0       	breq	.+14     	; 0x561c <checkName+0x6e>
    560e:	21 96       	adiw	r28, 0x01	; 1
    5610:	08 94       	sec
    5612:	e1 1c       	adc	r14, r1
    5614:	f1 1c       	adc	r15, r1
    5616:	cc 30       	cpi	r28, 0x0C	; 12
    5618:	d1 05       	cpc	r29, r1
    561a:	69 f7       	brne	.-38     	; 0x55f6 <checkName+0x48>
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	d6 cf       	rjmp	.-84     	; 0x55ce <checkName+0x20>

00005622 <existBlockAddr>:
    5622:	af 92       	push	r10
    5624:	bf 92       	push	r11
    5626:	cf 92       	push	r12
    5628:	df 92       	push	r13
    562a:	ff 92       	push	r15
    562c:	0f 93       	push	r16
    562e:	1f 93       	push	r17
    5630:	cf 93       	push	r28
    5632:	df 93       	push	r29
    5634:	5c 01       	movw	r10, r24
    5636:	6b 01       	movw	r12, r22
    5638:	ce e0       	ldi	r28, 0x0E	; 14
    563a:	d0 e0       	ldi	r29, 0x00	; 0
    563c:	04 c0       	rjmp	.+8      	; 0x5646 <existBlockAddr+0x24>
    563e:	21 96       	adiw	r28, 0x01	; 1
    5640:	c8 31       	cpi	r28, 0x18	; 24
    5642:	d1 05       	cpc	r29, r1
    5644:	f9 f0       	breq	.+62     	; 0x5684 <existBlockAddr+0x62>
    5646:	c6 01       	movw	r24, r12
    5648:	be 01       	movw	r22, r28
    564a:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    564e:	f8 2e       	mov	r15, r24
    5650:	08 2f       	mov	r16, r24
    5652:	10 e0       	ldi	r17, 0x00	; 0
    5654:	c5 01       	movw	r24, r10
    5656:	b8 01       	movw	r22, r16
    5658:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <checkName>
    565c:	89 2b       	or	r24, r25
    565e:	79 f7       	brne	.-34     	; 0x563e <existBlockAddr+0x1c>
    5660:	c8 01       	movw	r24, r16
    5662:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <checkNodeValid>
    5666:	88 23       	and	r24, r24
    5668:	51 f3       	breq	.-44     	; 0x563e <existBlockAddr+0x1c>
    566a:	ff 20       	and	r15, r15
    566c:	41 f3       	breq	.-48     	; 0x563e <existBlockAddr+0x1c>
    566e:	c8 01       	movw	r24, r16
    5670:	df 91       	pop	r29
    5672:	cf 91       	pop	r28
    5674:	1f 91       	pop	r17
    5676:	0f 91       	pop	r16
    5678:	ff 90       	pop	r15
    567a:	df 90       	pop	r13
    567c:	cf 90       	pop	r12
    567e:	bf 90       	pop	r11
    5680:	af 90       	pop	r10
    5682:	08 95       	ret
    5684:	00 e0       	ldi	r16, 0x00	; 0
    5686:	10 e0       	ldi	r17, 0x00	; 0
    5688:	f2 cf       	rjmp	.-28     	; 0x566e <existBlockAddr+0x4c>

0000568a <createFileFromDirectory>:
    568a:	0f 93       	push	r16
    568c:	1f 93       	push	r17
    568e:	cf 93       	push	r28
    5690:	df 93       	push	r29
    5692:	ec 01       	movw	r28, r24
    5694:	8b 01       	movw	r16, r22
    5696:	0e 94 11 2b 	call	0x5622	; 0x5622 <existBlockAddr>
    569a:	18 16       	cp	r1, r24
    569c:	19 06       	cpc	r1, r25
    569e:	3c f4       	brge	.+14     	; 0x56ae <createFileFromDirectory+0x24>
    56a0:	10 e0       	ldi	r17, 0x00	; 0
    56a2:	81 2f       	mov	r24, r17
    56a4:	df 91       	pop	r29
    56a6:	cf 91       	pop	r28
    56a8:	1f 91       	pop	r17
    56aa:	0f 91       	pop	r16
    56ac:	08 95       	ret
    56ae:	c8 01       	movw	r24, r16
    56b0:	0e 94 a1 29 	call	0x5342	; 0x5342 <fullBlock>
    56b4:	81 30       	cpi	r24, 0x01	; 1
    56b6:	81 f0       	breq	.+32     	; 0x56d8 <createFileFromDirectory+0x4e>
    56b8:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <getVectorNode>
    56bc:	18 2f       	mov	r17, r24
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	be 01       	movw	r22, r28
    56c2:	40 e0       	ldi	r20, 0x00	; 0
    56c4:	20 2f       	mov	r18, r16
    56c6:	02 e0       	ldi	r16, 0x02	; 2
    56c8:	0e 94 92 28 	call	0x5124	; 0x5124 <buildNewNode>
    56cc:	81 2f       	mov	r24, r17
    56ce:	df 91       	pop	r29
    56d0:	cf 91       	pop	r28
    56d2:	1f 91       	pop	r17
    56d4:	0f 91       	pop	r16
    56d6:	08 95       	ret
    56d8:	1f ef       	ldi	r17, 0xFF	; 255
    56da:	81 2f       	mov	r24, r17
    56dc:	df 91       	pop	r29
    56de:	cf 91       	pop	r28
    56e0:	1f 91       	pop	r17
    56e2:	0f 91       	pop	r16
    56e4:	08 95       	ret

000056e6 <createDir>:
    56e6:	0f 93       	push	r16
    56e8:	1f 93       	push	r17
    56ea:	cf 93       	push	r28
    56ec:	df 93       	push	r29
    56ee:	ec 01       	movw	r28, r24
    56f0:	8b 01       	movw	r16, r22
    56f2:	0e 94 11 2b 	call	0x5622	; 0x5622 <existBlockAddr>
    56f6:	18 16       	cp	r1, r24
    56f8:	19 06       	cpc	r1, r25
    56fa:	3c f4       	brge	.+14     	; 0x570a <createDir+0x24>
    56fc:	10 e0       	ldi	r17, 0x00	; 0
    56fe:	81 2f       	mov	r24, r17
    5700:	df 91       	pop	r29
    5702:	cf 91       	pop	r28
    5704:	1f 91       	pop	r17
    5706:	0f 91       	pop	r16
    5708:	08 95       	ret
    570a:	c8 01       	movw	r24, r16
    570c:	0e 94 a1 29 	call	0x5342	; 0x5342 <fullBlock>
    5710:	81 30       	cpi	r24, 0x01	; 1
    5712:	81 f0       	breq	.+32     	; 0x5734 <createDir+0x4e>
    5714:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <getVectorNode>
    5718:	18 2f       	mov	r17, r24
    571a:	90 e0       	ldi	r25, 0x00	; 0
    571c:	be 01       	movw	r22, r28
    571e:	40 e0       	ldi	r20, 0x00	; 0
    5720:	20 2f       	mov	r18, r16
    5722:	01 e0       	ldi	r16, 0x01	; 1
    5724:	0e 94 92 28 	call	0x5124	; 0x5124 <buildNewNode>
    5728:	81 2f       	mov	r24, r17
    572a:	df 91       	pop	r29
    572c:	cf 91       	pop	r28
    572e:	1f 91       	pop	r17
    5730:	0f 91       	pop	r16
    5732:	08 95       	ret
    5734:	1f ef       	ldi	r17, 0xFF	; 255
    5736:	81 2f       	mov	r24, r17
    5738:	df 91       	pop	r29
    573a:	cf 91       	pop	r28
    573c:	1f 91       	pop	r17
    573e:	0f 91       	pop	r16
    5740:	08 95       	ret

00005742 <existBlock>:
    5742:	cf 92       	push	r12
    5744:	df 92       	push	r13
    5746:	ef 92       	push	r14
    5748:	ff 92       	push	r15
    574a:	1f 93       	push	r17
    574c:	cf 93       	push	r28
    574e:	df 93       	push	r29
    5750:	6c 01       	movw	r12, r24
    5752:	7b 01       	movw	r14, r22
    5754:	ce e0       	ldi	r28, 0x0E	; 14
    5756:	d0 e0       	ldi	r29, 0x00	; 0
    5758:	04 c0       	rjmp	.+8      	; 0x5762 <existBlock+0x20>
    575a:	21 96       	adiw	r28, 0x01	; 1
    575c:	c8 31       	cpi	r28, 0x18	; 24
    575e:	d1 05       	cpc	r29, r1
    5760:	b9 f0       	breq	.+46     	; 0x5790 <existBlock+0x4e>
    5762:	c7 01       	movw	r24, r14
    5764:	be 01       	movw	r22, r28
    5766:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    576a:	18 2f       	mov	r17, r24
    576c:	c6 01       	movw	r24, r12
    576e:	61 2f       	mov	r22, r17
    5770:	70 e0       	ldi	r23, 0x00	; 0
    5772:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <checkName>
    5776:	89 2b       	or	r24, r25
    5778:	81 f7       	brne	.-32     	; 0x575a <existBlock+0x18>
    577a:	81 2f       	mov	r24, r17
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <checkNodeValid>
    5782:	88 23       	and	r24, r24
    5784:	51 f3       	breq	.-44     	; 0x575a <existBlock+0x18>
    5786:	11 23       	and	r17, r17
    5788:	41 f3       	breq	.-48     	; 0x575a <existBlock+0x18>
    578a:	28 2f       	mov	r18, r24
    578c:	30 e0       	ldi	r19, 0x00	; 0
    578e:	02 c0       	rjmp	.+4      	; 0x5794 <existBlock+0x52>
    5790:	20 e0       	ldi	r18, 0x00	; 0
    5792:	30 e0       	ldi	r19, 0x00	; 0
    5794:	c9 01       	movw	r24, r18
    5796:	df 91       	pop	r29
    5798:	cf 91       	pop	r28
    579a:	1f 91       	pop	r17
    579c:	ff 90       	pop	r15
    579e:	ef 90       	pop	r14
    57a0:	df 90       	pop	r13
    57a2:	cf 90       	pop	r12
    57a4:	08 95       	ret

000057a6 <changeDirectory>:
    57a6:	cf 92       	push	r12
    57a8:	df 92       	push	r13
    57aa:	ef 92       	push	r14
    57ac:	ff 92       	push	r15
    57ae:	0f 93       	push	r16
    57b0:	1f 93       	push	r17
    57b2:	cf 93       	push	r28
    57b4:	df 93       	push	r29
    57b6:	6c 01       	movw	r12, r24
    57b8:	7b 01       	movw	r14, r22
    57ba:	ce e0       	ldi	r28, 0x0E	; 14
    57bc:	d0 e0       	ldi	r29, 0x00	; 0
    57be:	c7 01       	movw	r24, r14
    57c0:	be 01       	movw	r22, r28
    57c2:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    57c6:	08 2f       	mov	r16, r24
    57c8:	10 e0       	ldi	r17, 0x00	; 0
    57ca:	c6 01       	movw	r24, r12
    57cc:	b8 01       	movw	r22, r16
    57ce:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <checkName>
    57d2:	89 2b       	or	r24, r25
    57d4:	31 f0       	breq	.+12     	; 0x57e2 <changeDirectory+0x3c>
    57d6:	21 96       	adiw	r28, 0x01	; 1
    57d8:	c8 31       	cpi	r28, 0x18	; 24
    57da:	d1 05       	cpc	r29, r1
    57dc:	81 f7       	brne	.-32     	; 0x57be <changeDirectory+0x18>
    57de:	0f ef       	ldi	r16, 0xFF	; 255
    57e0:	1f ef       	ldi	r17, 0xFF	; 255
    57e2:	c8 01       	movw	r24, r16
    57e4:	df 91       	pop	r29
    57e6:	cf 91       	pop	r28
    57e8:	1f 91       	pop	r17
    57ea:	0f 91       	pop	r16
    57ec:	ff 90       	pop	r15
    57ee:	ef 90       	pop	r14
    57f0:	df 90       	pop	r13
    57f2:	cf 90       	pop	r12
    57f4:	08 95       	ret

000057f6 <locateFileName>:
    57f6:	af 92       	push	r10
    57f8:	bf 92       	push	r11
    57fa:	cf 92       	push	r12
    57fc:	df 92       	push	r13
    57fe:	ef 92       	push	r14
    5800:	ff 92       	push	r15
    5802:	0f 93       	push	r16
    5804:	1f 93       	push	r17
    5806:	df 93       	push	r29
    5808:	cf 93       	push	r28
    580a:	cd b7       	in	r28, 0x3d	; 61
    580c:	de b7       	in	r29, 0x3e	; 62
    580e:	2d 97       	sbiw	r28, 0x0d	; 13
    5810:	0f b6       	in	r0, 0x3f	; 63
    5812:	f8 94       	cli
    5814:	de bf       	out	0x3e, r29	; 62
    5816:	0f be       	out	0x3f, r0	; 63
    5818:	cd bf       	out	0x3d, r28	; 61
    581a:	6c 01       	movw	r12, r24
    581c:	5b 01       	movw	r10, r22
    581e:	fc 01       	movw	r30, r24
    5820:	91 91       	ld	r25, Z+
    5822:	8f 01       	movw	r16, r30
    5824:	f6 01       	movw	r30, r12
    5826:	81 81       	ldd	r24, Z+1	; 0x01
    5828:	e0 90 66 03 	lds	r14, 0x0366
    582c:	f0 90 67 03 	lds	r15, 0x0367
    5830:	9e 32       	cpi	r25, 0x2E	; 46
    5832:	09 f4       	brne	.+2      	; 0x5836 <locateFileName+0x40>
    5834:	56 c0       	rjmp	.+172    	; 0x58e2 <locateFileName+0xec>
    5836:	9f 32       	cpi	r25, 0x2F	; 47
    5838:	f1 f0       	breq	.+60     	; 0x5876 <locateFileName+0x80>
    583a:	89 2f       	mov	r24, r25
    583c:	81 56       	subi	r24, 0x61	; 97
    583e:	8a 31       	cpi	r24, 0x1A	; 26
    5840:	08 f0       	brcs	.+2      	; 0x5844 <locateFileName+0x4e>
    5842:	5f c0       	rjmp	.+190    	; 0x5902 <locateFileName+0x10c>
    5844:	c6 01       	movw	r24, r12
    5846:	6e 01       	movw	r12, r28
    5848:	08 94       	sec
    584a:	c1 1c       	adc	r12, r1
    584c:	d1 1c       	adc	r13, r1
    584e:	b6 01       	movw	r22, r12
    5850:	0e 94 08 26 	call	0x4c10	; 0x4c10 <extractString>
    5854:	8c 01       	movw	r16, r24
    5856:	00 97       	sbiw	r24, 0x00	; 0
    5858:	09 f0       	breq	.+2      	; 0x585c <locateFileName+0x66>
    585a:	6d c0       	rjmp	.+218    	; 0x5936 <locateFileName+0x140>
    585c:	c6 01       	movw	r24, r12
    585e:	b7 01       	movw	r22, r14
    5860:	0e 94 a1 2b 	call	0x5742	; 0x5742 <existBlock>
    5864:	00 97       	sbiw	r24, 0x00	; 0
    5866:	09 f4       	brne	.+2      	; 0x586a <locateFileName+0x74>
    5868:	48 c0       	rjmp	.+144    	; 0x58fa <locateFileName+0x104>
    586a:	f5 01       	movw	r30, r10
    586c:	91 83       	std	Z+1, r25	; 0x01
    586e:	80 83       	st	Z, r24
    5870:	c6 01       	movw	r24, r12
    5872:	b7 01       	movw	r22, r14
    5874:	51 c0       	rjmp	.+162    	; 0x5918 <locateFileName+0x122>
    5876:	86 01       	movw	r16, r12
    5878:	ee 24       	eor	r14, r14
    587a:	ff 24       	eor	r15, r15
    587c:	6e 01       	movw	r12, r28
    587e:	08 94       	sec
    5880:	c1 1c       	adc	r12, r1
    5882:	d1 1c       	adc	r13, r1
    5884:	14 c0       	rjmp	.+40     	; 0x58ae <locateFileName+0xb8>
    5886:	c8 01       	movw	r24, r16
    5888:	b6 01       	movw	r22, r12
    588a:	0e 94 08 26 	call	0x4c10	; 0x4c10 <extractString>
    588e:	8c 01       	movw	r16, r24
    5890:	fc 01       	movw	r30, r24
    5892:	80 81       	ld	r24, Z
    5894:	88 23       	and	r24, r24
    5896:	59 f1       	breq	.+86     	; 0x58ee <locateFileName+0xf8>
    5898:	c6 01       	movw	r24, r12
    589a:	b7 01       	movw	r22, r14
    589c:	0e 94 a1 2b 	call	0x5742	; 0x5742 <existBlock>
    58a0:	89 2b       	or	r24, r25
    58a2:	51 f0       	breq	.+20     	; 0x58b8 <locateFileName+0xc2>
    58a4:	c6 01       	movw	r24, r12
    58a6:	b7 01       	movw	r22, r14
    58a8:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <changeDirectory>
    58ac:	7c 01       	movw	r14, r24
    58ae:	c7 01       	movw	r24, r14
    58b0:	0e 94 cb 2a 	call	0x5596	; 0x5596 <isDirectory>
    58b4:	89 2b       	or	r24, r25
    58b6:	39 f7       	brne	.-50     	; 0x5886 <locateFileName+0x90>
    58b8:	ee 24       	eor	r14, r14
    58ba:	ea 94       	dec	r14
    58bc:	fe 2c       	mov	r15, r14
    58be:	c7 01       	movw	r24, r14
    58c0:	2d 96       	adiw	r28, 0x0d	; 13
    58c2:	0f b6       	in	r0, 0x3f	; 63
    58c4:	f8 94       	cli
    58c6:	de bf       	out	0x3e, r29	; 62
    58c8:	0f be       	out	0x3f, r0	; 63
    58ca:	cd bf       	out	0x3d, r28	; 61
    58cc:	cf 91       	pop	r28
    58ce:	df 91       	pop	r29
    58d0:	1f 91       	pop	r17
    58d2:	0f 91       	pop	r16
    58d4:	ff 90       	pop	r15
    58d6:	ef 90       	pop	r14
    58d8:	df 90       	pop	r13
    58da:	cf 90       	pop	r12
    58dc:	bf 90       	pop	r11
    58de:	af 90       	pop	r10
    58e0:	08 95       	ret
    58e2:	8e 32       	cpi	r24, 0x2E	; 46
    58e4:	e9 f0       	breq	.+58     	; 0x5920 <locateFileName+0x12a>
    58e6:	8f 32       	cpi	r24, 0x2F	; 47
    58e8:	49 f2       	breq	.-110    	; 0x587c <locateFileName+0x86>
    58ea:	86 01       	movw	r16, r12
    58ec:	c7 cf       	rjmp	.-114    	; 0x587c <locateFileName+0x86>
    58ee:	c6 01       	movw	r24, r12
    58f0:	b7 01       	movw	r22, r14
    58f2:	0e 94 a1 2b 	call	0x5742	; 0x5742 <existBlock>
    58f6:	00 97       	sbiw	r24, 0x00	; 0
    58f8:	51 f4       	brne	.+20     	; 0x590e <locateFileName+0x118>
    58fa:	f5 01       	movw	r30, r10
    58fc:	11 82       	std	Z+1, r1	; 0x01
    58fe:	10 82       	st	Z, r1
    5900:	de cf       	rjmp	.-68     	; 0x58be <locateFileName+0xc8>
    5902:	91 54       	subi	r25, 0x41	; 65
    5904:	9a 31       	cpi	r25, 0x1A	; 26
    5906:	08 f4       	brcc	.+2      	; 0x590a <locateFileName+0x114>
    5908:	9d cf       	rjmp	.-198    	; 0x5844 <locateFileName+0x4e>
    590a:	86 01       	movw	r16, r12
    590c:	b7 cf       	rjmp	.-146    	; 0x587c <locateFileName+0x86>
    590e:	f5 01       	movw	r30, r10
    5910:	91 83       	std	Z+1, r25	; 0x01
    5912:	80 83       	st	Z, r24
    5914:	c6 01       	movw	r24, r12
    5916:	b7 01       	movw	r22, r14
    5918:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <changeDirectory>
    591c:	7c 01       	movw	r14, r24
    591e:	cf cf       	rjmp	.-98     	; 0x58be <locateFileName+0xc8>
    5920:	c7 01       	movw	r24, r14
    5922:	6f e1       	ldi	r22, 0x1F	; 31
    5924:	70 e0       	ldi	r23, 0x00	; 0
    5926:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    592a:	e8 2e       	mov	r14, r24
    592c:	ff 24       	eor	r15, r15
    592e:	86 01       	movw	r16, r12
    5930:	0e 5f       	subi	r16, 0xFE	; 254
    5932:	1f 4f       	sbci	r17, 0xFF	; 255
    5934:	a3 cf       	rjmp	.-186    	; 0x587c <locateFileName+0x86>
    5936:	c6 01       	movw	r24, r12
    5938:	b7 01       	movw	r22, r14
    593a:	0e 94 a1 2b 	call	0x5742	; 0x5742 <existBlock>
    593e:	89 2b       	or	r24, r25
    5940:	09 f4       	brne	.+2      	; 0x5944 <locateFileName+0x14e>
    5942:	ba cf       	rjmp	.-140    	; 0x58b8 <locateFileName+0xc2>
    5944:	c6 01       	movw	r24, r12
    5946:	b7 01       	movw	r22, r14
    5948:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <changeDirectory>
    594c:	7c 01       	movw	r14, r24
    594e:	96 cf       	rjmp	.-212    	; 0x587c <locateFileName+0x86>

00005950 <getbit>:
}

//-------------------------------------------------------------------------
static int getbit(char *set, int number)
{
    5950:	ac 01       	movw	r20, r24
    5952:	fb 01       	movw	r30, r22
    5954:	77 fd       	sbrc	r23, 7
    5956:	1a c0       	rjmp	.+52     	; 0x598c <getbit+0x3c>
    5958:	f5 95       	asr	r31
    595a:	e7 95       	ror	r30
    595c:	f5 95       	asr	r31
    595e:	e7 95       	ror	r30
    5960:	f5 95       	asr	r31
    5962:	e7 95       	ror	r30
    5964:	e4 0f       	add	r30, r20
    5966:	f5 1f       	adc	r31, r21
    5968:	20 81       	ld	r18, Z
    596a:	33 27       	eor	r19, r19
    596c:	27 fd       	sbrc	r18, 7
    596e:	30 95       	com	r19
    5970:	cb 01       	movw	r24, r22
    5972:	68 e0       	ldi	r22, 0x08	; 8
    5974:	70 e0       	ldi	r23, 0x00	; 0
    5976:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    597a:	02 c0       	rjmp	.+4      	; 0x5980 <getbit+0x30>
    597c:	35 95       	asr	r19
    597e:	27 95       	ror	r18
    5980:	8a 95       	dec	r24
    5982:	e2 f7       	brpl	.-8      	; 0x597c <getbit+0x2c>
    5984:	21 70       	andi	r18, 0x01	; 1
    5986:	30 70       	andi	r19, 0x00	; 0
    set += number / 8;
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
}
    5988:	c9 01       	movw	r24, r18
    598a:	08 95       	ret
    598c:	37 96       	adiw	r30, 0x07	; 7
    598e:	e4 cf       	rjmp	.-56     	; 0x5958 <getbit+0x8>

00005990 <setbit>:

//-------------------------------------------------------------------------
static void setbit(char *set, int number, int value)
{
    5990:	dc 01       	movw	r26, r24
    set += number / 8;
    5992:	9b 01       	movw	r18, r22
    5994:	77 fd       	sbrc	r23, 7
    5996:	2c c0       	rjmp	.+88     	; 0x59f0 <setbit+0x60>
    5998:	f9 01       	movw	r30, r18
    599a:	f5 95       	asr	r31
    599c:	e7 95       	ror	r30
    599e:	f5 95       	asr	r31
    59a0:	e7 95       	ror	r30
    59a2:	f5 95       	asr	r31
    59a4:	e7 95       	ror	r30
    59a6:	ea 0f       	add	r30, r26
    59a8:	fb 1f       	adc	r31, r27
    if (value)
    59aa:	45 2b       	or	r20, r21
    59ac:	89 f4       	brne	.+34     	; 0x59d0 <setbit+0x40>
    {
        *set |= 1 << (number % 8);
    }                           /* set bit      */
    else
    {
        *set &= ~(1 << (number % 8));
    59ae:	cb 01       	movw	r24, r22
    59b0:	68 e0       	ldi	r22, 0x08	; 8
    59b2:	70 e0       	ldi	r23, 0x00	; 0
    59b4:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    59b8:	21 e0       	ldi	r18, 0x01	; 1
    59ba:	30 e0       	ldi	r19, 0x00	; 0
    59bc:	02 c0       	rjmp	.+4      	; 0x59c2 <setbit+0x32>
    59be:	22 0f       	add	r18, r18
    59c0:	33 1f       	adc	r19, r19
    59c2:	8a 95       	dec	r24
    59c4:	e2 f7       	brpl	.-8      	; 0x59be <setbit+0x2e>
    59c6:	20 95       	com	r18
    59c8:	80 81       	ld	r24, Z
    59ca:	82 23       	and	r24, r18
    59cc:	80 83       	st	Z, r24
    59ce:	08 95       	ret
    59d0:	cb 01       	movw	r24, r22
    59d2:	68 e0       	ldi	r22, 0x08	; 8
    59d4:	70 e0       	ldi	r23, 0x00	; 0
    59d6:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    59da:	21 e0       	ldi	r18, 0x01	; 1
    59dc:	30 e0       	ldi	r19, 0x00	; 0
    59de:	02 c0       	rjmp	.+4      	; 0x59e4 <setbit+0x54>
    59e0:	22 0f       	add	r18, r18
    59e2:	33 1f       	adc	r19, r19
    59e4:	8a 95       	dec	r24
    59e6:	e2 f7       	brpl	.-8      	; 0x59e0 <setbit+0x50>
    59e8:	80 81       	ld	r24, Z
    59ea:	82 2b       	or	r24, r18
    59ec:	80 83       	st	Z, r24
    59ee:	08 95       	ret
    59f0:	29 5f       	subi	r18, 0xF9	; 249
    59f2:	3f 4f       	sbci	r19, 0xFF	; 255
    59f4:	d1 cf       	rjmp	.-94     	; 0x5998 <setbit+0x8>

000059f6 <initVectorFlash>:
    }                           /* clear bit    */
}

//-------------------------------------------------------------------------
void initVectorFlash()
{
    59f6:	e8 e6       	ldi	r30, 0x68	; 104
    59f8:	f3 e0       	ldi	r31, 0x03	; 3
    int i;

    for (i = 0; i < 32; i++)
    {
        vectorflash[i] = 0;
    59fa:	11 92       	st	Z+, r1
    59fc:	83 e0       	ldi	r24, 0x03	; 3
    59fe:	e8 38       	cpi	r30, 0x88	; 136
    5a00:	f8 07       	cpc	r31, r24
    5a02:	d9 f7       	brne	.-10     	; 0x59fa <initVectorFlash+0x4>
    }
}
    5a04:	08 95       	ret

00005a06 <getFlashPage>:

//-------------------------------------------------------------------------
int getFlashPage()
{
    5a06:	cf 93       	push	r28
    5a08:	df 93       	push	r29
    5a0a:	c0 e0       	ldi	r28, 0x00	; 0
    5a0c:	d0 e0       	ldi	r29, 0x00	; 0
    5a0e:	05 c0       	rjmp	.+10     	; 0x5a1a <getFlashPage+0x14>
    int num;

    for (num = 0; num < 256; num++)
    5a10:	21 96       	adiw	r28, 0x01	; 1
    5a12:	81 e0       	ldi	r24, 0x01	; 1
    5a14:	c0 30       	cpi	r28, 0x00	; 0
    5a16:	d8 07       	cpc	r29, r24
    5a18:	a9 f0       	breq	.+42     	; 0x5a44 <getFlashPage+0x3e>
    {
        if (getbit(vectorflash, num) == 0)
    5a1a:	88 e6       	ldi	r24, 0x68	; 104
    5a1c:	93 e0       	ldi	r25, 0x03	; 3
    5a1e:	be 01       	movw	r22, r28
    5a20:	0e 94 a8 2c 	call	0x5950	; 0x5950 <getbit>
    5a24:	89 2b       	or	r24, r25
    5a26:	a1 f7       	brne	.-24     	; 0x5a10 <getFlashPage+0xa>
        {
            setbit(vectorflash, num, 1);
    5a28:	88 e6       	ldi	r24, 0x68	; 104
    5a2a:	93 e0       	ldi	r25, 0x03	; 3
    5a2c:	be 01       	movw	r22, r28
    5a2e:	41 e0       	ldi	r20, 0x01	; 1
    5a30:	50 e0       	ldi	r21, 0x00	; 0
    5a32:	0e 94 c8 2c 	call	0x5990	; 0x5990 <setbit>
            return num + 1;
    5a36:	be 01       	movw	r22, r28
    5a38:	6f 5f       	subi	r22, 0xFF	; 255
    5a3a:	7f 4f       	sbci	r23, 0xFF	; 255
        }
    }
    return -1;
}
    5a3c:	cb 01       	movw	r24, r22
    5a3e:	df 91       	pop	r29
    5a40:	cf 91       	pop	r28
    5a42:	08 95       	ret
    5a44:	6f ef       	ldi	r22, 0xFF	; 255
    5a46:	7f ef       	ldi	r23, 0xFF	; 255
    5a48:	cb 01       	movw	r24, r22
    5a4a:	df 91       	pop	r29
    5a4c:	cf 91       	pop	r28
    5a4e:	08 95       	ret

00005a50 <releaseFlashPage>:

//-------------------------------------------------------------------------
void scanVectorFlash()
{
    int num, addr;
    uint8_t valid;
    uint8_t type;
    uint8_t readpage;

    for (num = 0; num < 96; num++)
    {
        addr = num + 1;
        valid = fsread8uint(addr, VALIDOFFSET);
        type = fsread8uint(addr, TYPEOFFSET);
        if ((valid == 1) && (type == FILENODE))
        {
            char i;

            for (i = 0; i < 8; i++)
            {
                readpage = fsread8uint(addr, FILE_ADDRPAGEOFFSET + i);
                if (readpage > 0)
                {
                    setbit(vectorflash, readpage - 1, 1);
                }
            }
        }
    }
}

//-------------------------------------------------------------------------
void releaseFlashPage(int num)
{
    5a50:	bc 01       	movw	r22, r24
    5a52:	61 50       	subi	r22, 0x01	; 1
    5a54:	70 40       	sbci	r23, 0x00	; 0
    5a56:	88 e6       	ldi	r24, 0x68	; 104
    5a58:	93 e0       	ldi	r25, 0x03	; 3
    5a5a:	40 e0       	ldi	r20, 0x00	; 0
    5a5c:	50 e0       	ldi	r21, 0x00	; 0
    5a5e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <setbit>
    setbit(vectorflash, num - 1, 0);
}
    5a62:	08 95       	ret

00005a64 <countVectorFlash>:

//-------------------------------------------------------------------------
int countVectorFlash()
{
    5a64:	0f 93       	push	r16
    5a66:	1f 93       	push	r17
    5a68:	cf 93       	push	r28
    5a6a:	df 93       	push	r29
    5a6c:	00 e0       	ldi	r16, 0x00	; 0
    5a6e:	10 e0       	ldi	r17, 0x00	; 0
    5a70:	c0 e0       	ldi	r28, 0x00	; 0
    5a72:	d0 e0       	ldi	r29, 0x00	; 0
    5a74:	05 c0       	rjmp	.+10     	; 0x5a80 <countVectorFlash+0x1c>
    int count, num;

    count = 0;
    for (num = 0; num < 256; num++)
    5a76:	21 96       	adiw	r28, 0x01	; 1
    5a78:	81 e0       	ldi	r24, 0x01	; 1
    5a7a:	c0 30       	cpi	r28, 0x00	; 0
    5a7c:	d8 07       	cpc	r29, r24
    5a7e:	71 f0       	breq	.+28     	; 0x5a9c <countVectorFlash+0x38>
    {
        if (getbit(vectorflash, num) == 1)
    5a80:	88 e6       	ldi	r24, 0x68	; 104
    5a82:	93 e0       	ldi	r25, 0x03	; 3
    5a84:	be 01       	movw	r22, r28
    5a86:	0e 94 a8 2c 	call	0x5950	; 0x5950 <getbit>
    5a8a:	01 97       	sbiw	r24, 0x01	; 1
    5a8c:	a1 f7       	brne	.-24     	; 0x5a76 <countVectorFlash+0x12>
        {
            count++;
    5a8e:	0f 5f       	subi	r16, 0xFF	; 255
    5a90:	1f 4f       	sbci	r17, 0xFF	; 255
    5a92:	21 96       	adiw	r28, 0x01	; 1
    5a94:	81 e0       	ldi	r24, 0x01	; 1
    5a96:	c0 30       	cpi	r28, 0x00	; 0
    5a98:	d8 07       	cpc	r29, r24
    5a9a:	91 f7       	brne	.-28     	; 0x5a80 <countVectorFlash+0x1c>
    5a9c:	9e 01       	movw	r18, r28
    5a9e:	20 1b       	sub	r18, r16
    5aa0:	31 0b       	sbc	r19, r17
        }
    }
    return 256 - count;
}
    5aa2:	c9 01       	movw	r24, r18
    5aa4:	df 91       	pop	r29
    5aa6:	cf 91       	pop	r28
    5aa8:	1f 91       	pop	r17
    5aaa:	0f 91       	pop	r16
    5aac:	08 95       	ret

00005aae <printVectorFlash>:

//-------------------------------------------------------------------------
void printVectorFlash()
{
    5aae:	08 95       	ret

00005ab0 <scanVectorFlash>:
    5ab0:	ef 92       	push	r14
    5ab2:	ff 92       	push	r15
    5ab4:	1f 93       	push	r17
    5ab6:	cf 93       	push	r28
    5ab8:	df 93       	push	r29
    5aba:	80 e0       	ldi	r24, 0x00	; 0
    5abc:	90 e0       	ldi	r25, 0x00	; 0
    5abe:	04 c0       	rjmp	.+8      	; 0x5ac8 <scanVectorFlash+0x18>
    5ac0:	c7 01       	movw	r24, r14
    5ac2:	80 36       	cpi	r24, 0x60	; 96
    5ac4:	91 05       	cpc	r25, r1
    5ac6:	59 f1       	breq	.+86     	; 0x5b1e <scanVectorFlash+0x6e>
    5ac8:	7c 01       	movw	r14, r24
    5aca:	08 94       	sec
    5acc:	e1 1c       	adc	r14, r1
    5ace:	f1 1c       	adc	r15, r1
    5ad0:	c7 01       	movw	r24, r14
    5ad2:	6d e0       	ldi	r22, 0x0D	; 13
    5ad4:	70 e0       	ldi	r23, 0x00	; 0
    5ad6:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5ada:	18 2f       	mov	r17, r24
    5adc:	c7 01       	movw	r24, r14
    5ade:	6c e0       	ldi	r22, 0x0C	; 12
    5ae0:	70 e0       	ldi	r23, 0x00	; 0
    5ae2:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5ae6:	11 30       	cpi	r17, 0x01	; 1
    5ae8:	59 f7       	brne	.-42     	; 0x5ac0 <scanVectorFlash+0x10>
    5aea:	82 30       	cpi	r24, 0x02	; 2
    5aec:	49 f7       	brne	.-46     	; 0x5ac0 <scanVectorFlash+0x10>
    5aee:	ce e0       	ldi	r28, 0x0E	; 14
    5af0:	d0 e0       	ldi	r29, 0x00	; 0
    5af2:	04 c0       	rjmp	.+8      	; 0x5afc <scanVectorFlash+0x4c>
    5af4:	21 96       	adiw	r28, 0x01	; 1
    5af6:	c6 31       	cpi	r28, 0x16	; 22
    5af8:	d1 05       	cpc	r29, r1
    5afa:	11 f3       	breq	.-60     	; 0x5ac0 <scanVectorFlash+0x10>
    5afc:	c7 01       	movw	r24, r14
    5afe:	be 01       	movw	r22, r28
    5b00:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5b04:	88 23       	and	r24, r24
    5b06:	b1 f3       	breq	.-20     	; 0x5af4 <scanVectorFlash+0x44>
    5b08:	68 2f       	mov	r22, r24
    5b0a:	70 e0       	ldi	r23, 0x00	; 0
    5b0c:	61 50       	subi	r22, 0x01	; 1
    5b0e:	70 40       	sbci	r23, 0x00	; 0
    5b10:	88 e6       	ldi	r24, 0x68	; 104
    5b12:	93 e0       	ldi	r25, 0x03	; 3
    5b14:	41 e0       	ldi	r20, 0x01	; 1
    5b16:	50 e0       	ldi	r21, 0x00	; 0
    5b18:	0e 94 c8 2c 	call	0x5990	; 0x5990 <setbit>
    5b1c:	eb cf       	rjmp	.-42     	; 0x5af4 <scanVectorFlash+0x44>
    5b1e:	df 91       	pop	r29
    5b20:	cf 91       	pop	r28
    5b22:	1f 91       	pop	r17
    5b24:	ff 90       	pop	r15
    5b26:	ef 90       	pop	r14
    5b28:	08 95       	ret

00005b2a <readVectorFlashFromExternalStorage>:
    5b2a:	8e e4       	ldi	r24, 0x4E	; 78
    5b2c:	9c e0       	ldi	r25, 0x0C	; 12
    5b2e:	60 e2       	ldi	r22, 0x20	; 32
    5b30:	70 e0       	ldi	r23, 0x00	; 0
    5b32:	48 e6       	ldi	r20, 0x68	; 104
    5b34:	53 e0       	ldi	r21, 0x03	; 3
    5b36:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <genericreadBytes>
    5b3a:	08 95       	ret

00005b3c <writeVectorFlashToExternalStorage>:
    5b3c:	8e e4       	ldi	r24, 0x4E	; 78
    5b3e:	9c e0       	ldi	r25, 0x0C	; 12
    5b40:	60 e2       	ldi	r22, 0x20	; 32
    5b42:	70 e0       	ldi	r23, 0x00	; 0
    5b44:	48 e6       	ldi	r20, 0x68	; 104
    5b46:	53 e0       	ldi	r21, 0x03	; 3
    5b48:	0e 94 ed 1c 	call	0x39da	; 0x39da <genericwriteBytes>
    5b4c:	08 95       	ret

00005b4e <getbit>:
}

//-------------------------------------------------------------------------
int getbit(char *set, int number)
{
    5b4e:	ac 01       	movw	r20, r24
    5b50:	fb 01       	movw	r30, r22
    5b52:	77 fd       	sbrc	r23, 7
    5b54:	1a c0       	rjmp	.+52     	; 0x5b8a <getbit+0x3c>
    5b56:	f5 95       	asr	r31
    5b58:	e7 95       	ror	r30
    5b5a:	f5 95       	asr	r31
    5b5c:	e7 95       	ror	r30
    5b5e:	f5 95       	asr	r31
    5b60:	e7 95       	ror	r30
    5b62:	e4 0f       	add	r30, r20
    5b64:	f5 1f       	adc	r31, r21
    5b66:	20 81       	ld	r18, Z
    5b68:	33 27       	eor	r19, r19
    5b6a:	27 fd       	sbrc	r18, 7
    5b6c:	30 95       	com	r19
    5b6e:	cb 01       	movw	r24, r22
    5b70:	68 e0       	ldi	r22, 0x08	; 8
    5b72:	70 e0       	ldi	r23, 0x00	; 0
    5b74:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    5b78:	02 c0       	rjmp	.+4      	; 0x5b7e <getbit+0x30>
    5b7a:	35 95       	asr	r19
    5b7c:	27 95       	ror	r18
    5b7e:	8a 95       	dec	r24
    5b80:	e2 f7       	brpl	.-8      	; 0x5b7a <getbit+0x2c>
    5b82:	21 70       	andi	r18, 0x01	; 1
    5b84:	30 70       	andi	r19, 0x00	; 0
    set += number / 8;
    return (*set & (1 << (number % 8))) != 0;   /* 0 or 1       */
}
    5b86:	c9 01       	movw	r24, r18
    5b88:	08 95       	ret
    5b8a:	37 96       	adiw	r30, 0x07	; 7
    5b8c:	e4 cf       	rjmp	.-56     	; 0x5b56 <getbit+0x8>

00005b8e <setbit>:

//-------------------------------------------------------------------------
void setbit(char *set, int number, int value)
{
    5b8e:	dc 01       	movw	r26, r24
    set += number / 8;
    5b90:	9b 01       	movw	r18, r22
    5b92:	77 fd       	sbrc	r23, 7
    5b94:	2c c0       	rjmp	.+88     	; 0x5bee <setbit+0x60>
    5b96:	f9 01       	movw	r30, r18
    5b98:	f5 95       	asr	r31
    5b9a:	e7 95       	ror	r30
    5b9c:	f5 95       	asr	r31
    5b9e:	e7 95       	ror	r30
    5ba0:	f5 95       	asr	r31
    5ba2:	e7 95       	ror	r30
    5ba4:	ea 0f       	add	r30, r26
    5ba6:	fb 1f       	adc	r31, r27
    if (value)
    5ba8:	45 2b       	or	r20, r21
    5baa:	89 f4       	brne	.+34     	; 0x5bce <setbit+0x40>
    {
        *set |= 1 << (number % 8);
    }                           /* set bit      */
    else
    {
        *set &= ~(1 << (number % 8));
    5bac:	cb 01       	movw	r24, r22
    5bae:	68 e0       	ldi	r22, 0x08	; 8
    5bb0:	70 e0       	ldi	r23, 0x00	; 0
    5bb2:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    5bb6:	21 e0       	ldi	r18, 0x01	; 1
    5bb8:	30 e0       	ldi	r19, 0x00	; 0
    5bba:	02 c0       	rjmp	.+4      	; 0x5bc0 <setbit+0x32>
    5bbc:	22 0f       	add	r18, r18
    5bbe:	33 1f       	adc	r19, r19
    5bc0:	8a 95       	dec	r24
    5bc2:	e2 f7       	brpl	.-8      	; 0x5bbc <setbit+0x2e>
    5bc4:	20 95       	com	r18
    5bc6:	80 81       	ld	r24, Z
    5bc8:	82 23       	and	r24, r18
    5bca:	80 83       	st	Z, r24
    5bcc:	08 95       	ret
    5bce:	cb 01       	movw	r24, r22
    5bd0:	68 e0       	ldi	r22, 0x08	; 8
    5bd2:	70 e0       	ldi	r23, 0x00	; 0
    5bd4:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    5bd8:	21 e0       	ldi	r18, 0x01	; 1
    5bda:	30 e0       	ldi	r19, 0x00	; 0
    5bdc:	02 c0       	rjmp	.+4      	; 0x5be2 <setbit+0x54>
    5bde:	22 0f       	add	r18, r18
    5be0:	33 1f       	adc	r19, r19
    5be2:	8a 95       	dec	r24
    5be4:	e2 f7       	brpl	.-8      	; 0x5bde <setbit+0x50>
    5be6:	80 81       	ld	r24, Z
    5be8:	82 2b       	or	r24, r18
    5bea:	80 83       	st	Z, r24
    5bec:	08 95       	ret
    5bee:	29 5f       	subi	r18, 0xF9	; 249
    5bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf2:	d1 cf       	rjmp	.-94     	; 0x5b96 <setbit+0x8>

00005bf4 <initVectorNode>:
    }                           /* clear bit    */
}

//-------------------------------------------------------------------------
void initVectorNode()
{
    5bf4:	ea eb       	ldi	r30, 0xBA	; 186
    5bf6:	f5 e0       	ldi	r31, 0x05	; 5
    int i;

    for (i = 0; i < 12; i++)
    {
        vectornode[i] = 0;
    5bf8:	11 92       	st	Z+, r1
    5bfa:	85 e0       	ldi	r24, 0x05	; 5
    5bfc:	e6 3c       	cpi	r30, 0xC6	; 198
    5bfe:	f8 07       	cpc	r31, r24
    5c00:	d9 f7       	brne	.-10     	; 0x5bf8 <initVectorNode+0x4>
    }
}
    5c02:	08 95       	ret

00005c04 <getVectorNode>:

//-------------------------------------------------------------------------
int getVectorNode()
{
    5c04:	cf 93       	push	r28
    5c06:	df 93       	push	r29
    5c08:	c0 e0       	ldi	r28, 0x00	; 0
    5c0a:	d0 e0       	ldi	r29, 0x00	; 0
    5c0c:	04 c0       	rjmp	.+8      	; 0x5c16 <getVectorNode+0x12>
    int num;

    for (num = 0; num < 96; num++)
    5c0e:	21 96       	adiw	r28, 0x01	; 1
    5c10:	c0 36       	cpi	r28, 0x60	; 96
    5c12:	d1 05       	cpc	r29, r1
    5c14:	a9 f0       	breq	.+42     	; 0x5c40 <getVectorNode+0x3c>
    {
        if (getbit(vectornode, num) == 0)
    5c16:	8a eb       	ldi	r24, 0xBA	; 186
    5c18:	95 e0       	ldi	r25, 0x05	; 5
    5c1a:	be 01       	movw	r22, r28
    5c1c:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <getbit>
    5c20:	89 2b       	or	r24, r25
    5c22:	a9 f7       	brne	.-22     	; 0x5c0e <getVectorNode+0xa>
        {
            setbit(vectornode, num, 1);
    5c24:	8a eb       	ldi	r24, 0xBA	; 186
    5c26:	95 e0       	ldi	r25, 0x05	; 5
    5c28:	be 01       	movw	r22, r28
    5c2a:	41 e0       	ldi	r20, 0x01	; 1
    5c2c:	50 e0       	ldi	r21, 0x00	; 0
    5c2e:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <setbit>
            return num + 1;
    5c32:	be 01       	movw	r22, r28
    5c34:	6f 5f       	subi	r22, 0xFF	; 255
    5c36:	7f 4f       	sbci	r23, 0xFF	; 255
        }
    }
    return -1;
}
    5c38:	cb 01       	movw	r24, r22
    5c3a:	df 91       	pop	r29
    5c3c:	cf 91       	pop	r28
    5c3e:	08 95       	ret
    5c40:	6f ef       	ldi	r22, 0xFF	; 255
    5c42:	7f ef       	ldi	r23, 0xFF	; 255
    5c44:	cb 01       	movw	r24, r22
    5c46:	df 91       	pop	r29
    5c48:	cf 91       	pop	r28
    5c4a:	08 95       	ret

00005c4c <releaseVectorNode>:

//-------------------------------------------------------------------------
void scanVectorNode()
{
    int num, addr;
    uint8_t valid;

    for (num = 0; num < 96; num++)
    {
        addr = num + 1;
        valid = fsread8uint(addr, VALIDOFFSET);
        if (valid == 0)
        {
            setbit(vectornode, num, 0);
        }
        else
        {
            setbit(vectornode, num, 1);
        }
    }
}

//-------------------------------------------------------------------------
void releaseVectorNode(int num)
{
    5c4c:	bc 01       	movw	r22, r24
    5c4e:	61 50       	subi	r22, 0x01	; 1
    5c50:	70 40       	sbci	r23, 0x00	; 0
    5c52:	8a eb       	ldi	r24, 0xBA	; 186
    5c54:	95 e0       	ldi	r25, 0x05	; 5
    5c56:	40 e0       	ldi	r20, 0x00	; 0
    5c58:	50 e0       	ldi	r21, 0x00	; 0
    5c5a:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <setbit>
    setbit(vectornode, num - 1, 0);
}
    5c5e:	08 95       	ret

00005c60 <countVectorNode>:

//-------------------------------------------------------------------------
int countVectorNode()
{
    5c60:	0f 93       	push	r16
    5c62:	1f 93       	push	r17
    5c64:	cf 93       	push	r28
    5c66:	df 93       	push	r29
    5c68:	c0 e0       	ldi	r28, 0x00	; 0
    5c6a:	d0 e0       	ldi	r29, 0x00	; 0
    5c6c:	00 e0       	ldi	r16, 0x00	; 0
    5c6e:	10 e0       	ldi	r17, 0x00	; 0
    5c70:	04 c0       	rjmp	.+8      	; 0x5c7a <countVectorNode+0x1a>
    int num, count;

    count = 0;
    for (num = 0; num < 96; num++)
    5c72:	21 96       	adiw	r28, 0x01	; 1
    5c74:	c0 36       	cpi	r28, 0x60	; 96
    5c76:	d1 05       	cpc	r29, r1
    5c78:	69 f0       	breq	.+26     	; 0x5c94 <countVectorNode+0x34>
    {
        if (getbit(vectornode, num) == 1)
    5c7a:	8a eb       	ldi	r24, 0xBA	; 186
    5c7c:	95 e0       	ldi	r25, 0x05	; 5
    5c7e:	be 01       	movw	r22, r28
    5c80:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <getbit>
    5c84:	01 97       	sbiw	r24, 0x01	; 1
    5c86:	a9 f7       	brne	.-22     	; 0x5c72 <countVectorNode+0x12>
        {
            count++;
    5c88:	0f 5f       	subi	r16, 0xFF	; 255
    5c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    5c8c:	21 96       	adiw	r28, 0x01	; 1
    5c8e:	c0 36       	cpi	r28, 0x60	; 96
    5c90:	d1 05       	cpc	r29, r1
    5c92:	99 f7       	brne	.-26     	; 0x5c7a <countVectorNode+0x1a>
    5c94:	9e 01       	movw	r18, r28
    5c96:	20 1b       	sub	r18, r16
    5c98:	31 0b       	sbc	r19, r17
        }
    }
    return 96 - count;
}
    5c9a:	c9 01       	movw	r24, r18
    5c9c:	df 91       	pop	r29
    5c9e:	cf 91       	pop	r28
    5ca0:	1f 91       	pop	r17
    5ca2:	0f 91       	pop	r16
    5ca4:	08 95       	ret

00005ca6 <scanVectorNode>:
    5ca6:	0f 93       	push	r16
    5ca8:	1f 93       	push	r17
    5caa:	cf 93       	push	r28
    5cac:	df 93       	push	r29
    5cae:	c0 e0       	ldi	r28, 0x00	; 0
    5cb0:	d0 e0       	ldi	r29, 0x00	; 0
    5cb2:	0b c0       	rjmp	.+22     	; 0x5cca <scanVectorNode+0x24>
    5cb4:	8a eb       	ldi	r24, 0xBA	; 186
    5cb6:	95 e0       	ldi	r25, 0x05	; 5
    5cb8:	be 01       	movw	r22, r28
    5cba:	40 e0       	ldi	r20, 0x00	; 0
    5cbc:	50 e0       	ldi	r21, 0x00	; 0
    5cbe:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <setbit>
    5cc2:	e8 01       	movw	r28, r16
    5cc4:	00 36       	cpi	r16, 0x60	; 96
    5cc6:	11 05       	cpc	r17, r1
    5cc8:	a9 f0       	breq	.+42     	; 0x5cf4 <scanVectorNode+0x4e>
    5cca:	8e 01       	movw	r16, r28
    5ccc:	0f 5f       	subi	r16, 0xFF	; 255
    5cce:	1f 4f       	sbci	r17, 0xFF	; 255
    5cd0:	c8 01       	movw	r24, r16
    5cd2:	6d e0       	ldi	r22, 0x0D	; 13
    5cd4:	70 e0       	ldi	r23, 0x00	; 0
    5cd6:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    5cda:	88 23       	and	r24, r24
    5cdc:	59 f3       	breq	.-42     	; 0x5cb4 <scanVectorNode+0xe>
    5cde:	8a eb       	ldi	r24, 0xBA	; 186
    5ce0:	95 e0       	ldi	r25, 0x05	; 5
    5ce2:	be 01       	movw	r22, r28
    5ce4:	41 e0       	ldi	r20, 0x01	; 1
    5ce6:	50 e0       	ldi	r21, 0x00	; 0
    5ce8:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <setbit>
    5cec:	e8 01       	movw	r28, r16
    5cee:	00 36       	cpi	r16, 0x60	; 96
    5cf0:	11 05       	cpc	r17, r1
    5cf2:	59 f7       	brne	.-42     	; 0x5cca <scanVectorNode+0x24>
    5cf4:	df 91       	pop	r29
    5cf6:	cf 91       	pop	r28
    5cf8:	1f 91       	pop	r17
    5cfa:	0f 91       	pop	r16
    5cfc:	08 95       	ret

00005cfe <readVectorNodeFromExternalStorage>:
    5cfe:	82 e4       	ldi	r24, 0x42	; 66
    5d00:	9c e0       	ldi	r25, 0x0C	; 12
    5d02:	6c e0       	ldi	r22, 0x0C	; 12
    5d04:	70 e0       	ldi	r23, 0x00	; 0
    5d06:	4a eb       	ldi	r20, 0xBA	; 186
    5d08:	55 e0       	ldi	r21, 0x05	; 5
    5d0a:	0e 94 ed 1c 	call	0x39da	; 0x39da <genericwriteBytes>
    5d0e:	08 95       	ret

00005d10 <writeVectorNodeToExternalStorage>:
    5d10:	82 e4       	ldi	r24, 0x42	; 66
    5d12:	9c e0       	ldi	r25, 0x0C	; 12
    5d14:	6c e0       	ldi	r22, 0x0C	; 12
    5d16:	70 e0       	ldi	r23, 0x00	; 0
    5d18:	4a eb       	ldi	r20, 0xBA	; 186
    5d1a:	55 e0       	ldi	r21, 0x05	; 5
    5d1c:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <genericreadBytes>
    5d20:	08 95       	ret

00005d22 <atmel_flash_init>:
static uint16_t dev_write_atmel_flash(const void *p, uint16_t count);

/* device-specific functions */
void atmel_flash_init(void)
{
    5d22:	8f b7       	in	r24, 0x3f	; 63
    uint8_t sreg;

    sreg = SREG;
    cli();
    5d24:	f8 94       	cli
    // set the flash select pin
    DDRA |= 1 << ATMEL_FLASH_SELECT_PIN;
    5d26:	d3 9a       	sbi	0x1a, 3	; 26
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    5d28:	db 9a       	sbi	0x1b, 3	; 27
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    5d2a:	95 98       	cbi	0x12, 5	; 18
    // set flash clock output direction
    ATMEL_FLASH_DIRE |= 1 << ATMEL_FLASH_CLK;
    5d2c:	8d 9a       	sbi	0x11, 5	; 17
    // clear flash out pin
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_OUT);
    5d2e:	92 98       	cbi	0x12, 2	; 18
    // set flash out pin direction
    ATMEL_FLASH_DIRE &= ~(1 << ATMEL_FLASH_OUT);
    5d30:	8a 98       	cbi	0x11, 2	; 17
    // clear flash in pin
    ATMEL_FLASH_PORT |= 1 << ATMEL_FLASH_IN;
    5d32:	93 9a       	sbi	0x12, 3	; 18
    // set flash in pin direction
    ATMEL_FLASH_DIRE |= 1 << ATMEL_FLASH_IN;
    5d34:	8b 9a       	sbi	0x11, 3	; 17
    SREG = sreg;
    5d36:	8f bf       	out	0x3f, r24	; 63
    atmel_flash_addr = 0;
    5d38:	10 92 88 03 	sts	0x0388, r1
    5d3c:	10 92 89 03 	sts	0x0389, r1
    5d40:	10 92 8a 03 	sts	0x038A, r1
    5d44:	10 92 8b 03 	sts	0x038B, r1
    cur_buff = ATMEL_FLASH_BUFFER_1;
    5d48:	21 e0       	ldi	r18, 0x01	; 1
    5d4a:	20 93 8c 03 	sts	0x038C, r18
    cur_page = ATMEL_FLASH_MAX_PAGES;
    5d4e:	80 e0       	ldi	r24, 0x00	; 0
    5d50:	98 e0       	ldi	r25, 0x08	; 8
    5d52:	90 93 8e 03 	sts	0x038E, r25
    5d56:	80 93 8d 03 	sts	0x038D, r24
    dirty = 0;
    5d5a:	10 92 8f 03 	sts	0x038F, r1
    initdone = 1;
    5d5e:	20 93 90 03 	sts	0x0390, r18
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5d62:	80 e4       	ldi	r24, 0x40	; 64
    5d64:	9c e9       	ldi	r25, 0x9C	; 156
    5d66:	01 97       	sbiw	r24, 0x01	; 1
    5d68:	f1 f7       	brne	.-4      	; 0x5d66 <atmel_flash_init+0x44>
    _delay_ms(20);
}
    5d6a:	08 95       	ret

00005d6c <atmel_flash_get_byte>:

//-------------------------------------------------------------------------
void readFlash(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
    uint16_t count;

    if (initdone == 0)
    {
        atmel_flash_init();
    }
    atmel_flash_addr = pagenum * 264 + offset;
    if (offset + NumOfBytes > 256)
    {
        count = 256 - offset;
    }
    else
    {
        count = NumOfBytes;
    }
    while (atmel_flash_busy())
        ;
    dev_read_atmel_flash(buffer, count);
    while (atmel_flash_busy())
        ;
    buffer = (void *)((char *)buffer + count);
    if (count < NumOfBytes)
    {
        atmel_flash_addr = (pagenum + 1) * 264;
        count = NumOfBytes - count;
        while (atmel_flash_busy())
            ;
        dev_read_atmel_flash(buffer, count);
        while (atmel_flash_busy())
            ;
    }
    return;
}

//-------------------------------------------------------------------------
void writeFlash(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
    uint16_t count;

    if (initdone == 0)
    {
        atmel_flash_init();
    }
    atmel_flash_addr = pagenum * 264 + offset;
    if (offset + NumOfBytes > 256)
    {
        count = 256 - offset;
    }
    else
    {
        count = NumOfBytes;
    }
    while (atmel_flash_busy())
        ;
    dev_write_atmel_flash(buffer, count);
    while (atmel_flash_busy())
        ;
    buffer = (void *)((char *)buffer + count);
    if (count < NumOfBytes)
    {
        atmel_flash_addr = (pagenum + 1) * 264;
        count = NumOfBytes - count;
        while (atmel_flash_busy())
            ;
        dev_write_atmel_flash(buffer, count);
        while (atmel_flash_busy())
            ;
    }
    return;
}

//-------------------------------------------------------------------------
void copyFlash(int sourcepage, int targetpage)
{
    while (atmel_flash_busy())
        ;
    atmel_flash_fill_buffer(1, sourcepage);
    while (atmel_flash_busy())
        ;
    atmel_flash_flush_buffer(1, targetpage);
    while (atmel_flash_busy())
        ;
}

/** @brief Read from the current flash address into p, for count bytes
*/
static uint16_t dev_read_atmel_flash(void *p, uint16_t count)
{
    uint16_t page, offset;
    uint8_t *buf = (uint8_t *) p;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    if (dirty && page <= cur_page && page + (offset + count) /
        ATMEL_FLASH_PAGE_SIZE >= cur_page)
    {
        while (atmel_flash_busy())
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
        dirty = 0;
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    atmel_flash_read_memory(page, offset, buf, count);
    return count;
}

/** @brief Write p into the current flash address, for count bytes
*/
static uint16_t dev_write_atmel_flash(const void *p, uint16_t count)
{
    uint16_t page, offset, num_bytes;
    uint16_t index = 0;
    uint8_t *buf = (uint8_t *) p;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    while (atmel_flash_busy())
        ;
    while (count > 0)
    {
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
        {
            num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
        }
        else
        {
            num_bytes = count;
        }
        if (page != cur_page)
        {
            if (dirty)
            {
                while (atmel_flash_busy())
                    ;
                atmel_flash_flush_buffer(cur_buff, cur_page);
                dirty = 0;
            }
            cur_buff =
                (cur_buff ==
                 ATMEL_FLASH_BUFFER_1 ? ATMEL_FLASH_BUFFER_2 :
                 ATMEL_FLASH_BUFFER_1);
            cur_page = page;
            if (num_bytes < ATMEL_FLASH_PAGE_SIZE)
            {
                while (atmel_flash_busy())
                    ;
                atmel_flash_fill_buffer(cur_buff, page);
            }
            // Erase next page right now
            while (atmel_flash_busy())
                ;
            atmel_flash_erase_page(page);
        }
        atmel_flash_write_buffer(cur_buff, offset, &buf[index], num_bytes);
        dirty = 1;
        index += num_bytes;
        atmel_flash_addr += num_bytes;
        count -= num_bytes;
        page++;
        offset = 0;
    }
    return count;
}

/** @brief Compare buf to the current flash address, for count bytes
*/
uint8_t atmel_flash_compare(uint8_t * buf, uint16_t count)
{
    uint16_t page, offset, num_bytes;
    uint16_t index = 0;
    uint8_t compare = 0;

    if (dirty)
    {
        while (atmel_flash_busy())
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
        dirty = 0;
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    while (count > 0)
    {
        page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
        offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
        if (count + offset > ATMEL_FLASH_PAGE_SIZE)
        {
            num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
        }
        else
        {
            num_bytes = count;
        }
        // Are we not comparing a whole page?
        if (num_bytes < ATMEL_FLASH_PAGE_SIZE)
        {
            atmel_flash_fill_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page);
            while (atmel_flash_busy())
                ;
        }
        // Write the data we want to compare to the buffer
        atmel_flash_write_buffer(ATMEL_FLASH_DEFAULT_BUFFER, offset,
                                 &buf[index], num_bytes);
        // Compare the buffer to main memory
        if (atmel_flash_compare_buffer(ATMEL_FLASH_DEFAULT_BUFFER, page))
        {
            compare = 1;
            break;
        }
        index += num_bytes;
        atmel_flash_addr += num_bytes;
        count -= num_bytes;
    }
    // In case we exited the loop early, act like we read the whole range
    atmel_flash_addr += count;
    return compare;
}

/** @brief Compute the crc from the current flash address, for count bytes
*/
uint16_t atmel_flash_crc(uint32_t count)
{
    uint16_t page, offset, crc;

    page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    if (dirty && page <= cur_page && page + (offset + count) /
        ATMEL_FLASH_PAGE_SIZE >= cur_page)
    {
        while (atmel_flash_busy())
            ;
        atmel_flash_flush_buffer(cur_buff, cur_page);
        dirty = 0;
    }
    // Wait for any previous actions to complete
    while (atmel_flash_busy())
        ;
    crc = atmel_flash_crc_memory(page, offset, count);
    return crc;
}

/** @brief Set the flash in low
*/
 /*static */ inline void atmel_flash_low(void)
{
    uint8_t sreg;

    sreg = SREG;
    cli();
    // clear flash clock
    ATMEL_FLASH_PORT &= ~(1 << ATMEL_FLASH_CLK);
    // clear select pin
    ATMEL_FLASH_SELECT &= ~(1 << ATMEL_FLASH_SELECT_PIN);
    SREG = sreg;
}

/** @brief Set the flash pin high
*/
 /*static */ inline void atmel_flash_high(void)
{
    // set the pin high
    ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
}

// 0x11010111, 3 and 5 pin, pull low FLASH_IN and FLASH_CLK  

/** @brief Init the bit macro.
*/
#define BITINIT  uint8_t clrClkAndData = PORTD & ~0x28
// first of all, the data is shifted in in rising edge and out in falling
// The I/O address for PORTD is 18, for PIND is 16
// first set the clk to low and the input to low, then 
// check the #n bit in spiOut.  
//  if 0,    then skip the step of writing the #n bit in FLASH_IN to high 
//           else pull the flash_in to high
// then set  clk to rising edge
// then check whether the FLASH_OUT in PIND is 0
// if yes, then skip (i.e. set the spiIn's bit to 0) 
//         else set the spiIn's bit to 1

/** @brief Write one bit of data.
*/

#ifdef PLATFORM_AVR_IRIS

#define WRITEBIT(n)					\
PORTD = clrClkAndData;				\
asm __volatile__					\
(  "sbrc %2," #n "\n"				\
"\tsbi 11,3\n"					\
"\tsbi 11,5\n"					\
: "=d" (spiIn) : "0" (spiIn), "r" (spiOut))

/** @brief Read one bit of data.
*/
#define READBIT(n)				\
PORTD = clrClkAndData;			\
asm __volatile__				\
("\tsbi 11,5\n"				\
"\tsbic 9,2\n"				\
"\tori %0,1<<" #n "\n"			\
: "=d" (spiIn) : "0" (spiIn))


#else

#define WRITEBIT(n)					\
PORTD = clrClkAndData;				\
asm __volatile__					\
(  "sbrc %2," #n "\n"				\
"\tsbi 18,3\n"					\
"\tsbi 18,5\n"					\
: "=d" (spiIn) : "0" (spiIn), "r" (spiOut))

/** @brief Read one bit of data.
*/
#define READBIT(n)				\
PORTD = clrClkAndData;			\
asm __volatile__				\
("\tsbi 18,5\n"				\
"\tsbic 16,2\n"				\
"\tori %0,1<<" #n "\n"			\
: "=d" (spiIn) : "0" (spiIn))


#endif 



/** @brief Retrieve 1 byte of data from the external flash.
*/
static uint8_t atmel_flash_get_byte(void)
{
    5d6c:	2f b7       	in	r18, 0x3f	; 63
    uint8_t spiIn = 0;
    uint8_t sreg;

    sreg = SREG;
    cli();
    5d6e:	f8 94       	cli
    BITINIT;
    5d70:	92 b3       	in	r25, 0x12	; 18
    5d72:	97 7d       	andi	r25, 0xD7	; 215
    READBIT(7);
    5d74:	92 bb       	out	0x12, r25	; 18
    5d76:	80 e0       	ldi	r24, 0x00	; 0
    5d78:	95 9a       	sbi	0x12, 5	; 18
    5d7a:	82 99       	sbic	0x10, 2	; 16
    5d7c:	80 68       	ori	r24, 0x80	; 128
    READBIT(6);
    5d7e:	92 bb       	out	0x12, r25	; 18
    5d80:	95 9a       	sbi	0x12, 5	; 18
    5d82:	82 99       	sbic	0x10, 2	; 16
    5d84:	80 64       	ori	r24, 0x40	; 64
    READBIT(5);
    5d86:	92 bb       	out	0x12, r25	; 18
    5d88:	95 9a       	sbi	0x12, 5	; 18
    5d8a:	82 99       	sbic	0x10, 2	; 16
    5d8c:	80 62       	ori	r24, 0x20	; 32
    READBIT(4);
    5d8e:	92 bb       	out	0x12, r25	; 18
    5d90:	95 9a       	sbi	0x12, 5	; 18
    5d92:	82 99       	sbic	0x10, 2	; 16
    5d94:	80 61       	ori	r24, 0x10	; 16
    READBIT(3);
    5d96:	92 bb       	out	0x12, r25	; 18
    5d98:	95 9a       	sbi	0x12, 5	; 18
    5d9a:	82 99       	sbic	0x10, 2	; 16
    5d9c:	88 60       	ori	r24, 0x08	; 8
    READBIT(2);
    5d9e:	92 bb       	out	0x12, r25	; 18
    5da0:	95 9a       	sbi	0x12, 5	; 18
    5da2:	82 99       	sbic	0x10, 2	; 16
    5da4:	84 60       	ori	r24, 0x04	; 4
    READBIT(1);
    5da6:	92 bb       	out	0x12, r25	; 18
    5da8:	95 9a       	sbi	0x12, 5	; 18
    5daa:	82 99       	sbic	0x10, 2	; 16
    5dac:	82 60       	ori	r24, 0x02	; 2
    READBIT(0);
    5dae:	92 bb       	out	0x12, r25	; 18
    5db0:	95 9a       	sbi	0x12, 5	; 18
    5db2:	82 99       	sbic	0x10, 2	; 16
    5db4:	81 60       	ori	r24, 0x01	; 1
    SREG = sreg;
    5db6:	2f bf       	out	0x3f, r18	; 63
    return spiIn;
}
    5db8:	08 95       	ret

00005dba <atmel_flash_send_byte>:

/** @brief Send 1 byte of data from the external flash.
*/
static uint8_t atmel_flash_send_byte(uint8_t spiOut)
{
    5dba:	28 2f       	mov	r18, r24
    uint8_t spiIn = 0;
    uint8_t sreg;

    sreg = SREG;
    5dbc:	3f b7       	in	r19, 0x3f	; 63
    cli();
    5dbe:	f8 94       	cli
    BITINIT;
    5dc0:	92 b3       	in	r25, 0x12	; 18
    5dc2:	97 7d       	andi	r25, 0xD7	; 215
    WRITEBIT(7);
    5dc4:	92 bb       	out	0x12, r25	; 18
    5dc6:	80 e0       	ldi	r24, 0x00	; 0
    5dc8:	27 fd       	sbrc	r18, 7
    5dca:	93 9a       	sbi	0x12, 3	; 18
    5dcc:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(6);
    5dce:	92 bb       	out	0x12, r25	; 18
    5dd0:	26 fd       	sbrc	r18, 6
    5dd2:	93 9a       	sbi	0x12, 3	; 18
    5dd4:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(5);
    5dd6:	92 bb       	out	0x12, r25	; 18
    5dd8:	25 fd       	sbrc	r18, 5
    5dda:	93 9a       	sbi	0x12, 3	; 18
    5ddc:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(4);
    5dde:	92 bb       	out	0x12, r25	; 18
    5de0:	24 fd       	sbrc	r18, 4
    5de2:	93 9a       	sbi	0x12, 3	; 18
    5de4:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(3);
    5de6:	92 bb       	out	0x12, r25	; 18
    5de8:	23 fd       	sbrc	r18, 3
    5dea:	93 9a       	sbi	0x12, 3	; 18
    5dec:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(2);
    5dee:	92 bb       	out	0x12, r25	; 18
    5df0:	22 fd       	sbrc	r18, 2
    5df2:	93 9a       	sbi	0x12, 3	; 18
    5df4:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(1);
    5df6:	92 bb       	out	0x12, r25	; 18
    5df8:	21 fd       	sbrc	r18, 1
    5dfa:	93 9a       	sbi	0x12, 3	; 18
    5dfc:	95 9a       	sbi	0x12, 5	; 18
    WRITEBIT(0);
    5dfe:	92 bb       	out	0x12, r25	; 18
    5e00:	20 fd       	sbrc	r18, 0
    5e02:	93 9a       	sbi	0x12, 3	; 18
    5e04:	95 9a       	sbi	0x12, 5	; 18
    SREG = sreg;
    5e06:	3f bf       	out	0x3f, r19	; 63
    return spiIn;
}
    5e08:	08 95       	ret

00005e0a <atmel_flash_pagesize>:

/* Directly Read Through the Memory, doesn't change the buffer
 * It works when writing/reading the characters, but doesn't work
 * when writing the long data.  Sometimes it just doesn't work
 * need to use logic analysis figure out later. 
 */

/** @brief Directly read through the memory.
*/
static void atmel_flash_read_memory(uint16_t page, uint16_t offset,
                                    void *reqData, uint16_t len)
{
    uint8_t cmd[8], *reqPtr;
    uint16_t i;

    cmd[0] = C_READ_THROUGH_MEMORY;     // 8 bit of op code
    cmd[1] = (page >> 7);       // 4 bit reserve and high 4 MSB
    cmd[2] = (page << 1) | offset >> 8; // 7 bit page and 1 bit offset MSB
    cmd[3] = offset;            // low-order 8 address bits
    cmd[4] = 0x00;
    cmd[5] = 0x00;
    cmd[6] = 0x00;
    cmd[7] = 0x00;
    reqPtr = (uint8_t *) reqData;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    {
        reqPtr[i] = atmel_flash_get_byte();
    }
    atmel_flash_high();
}

/** @brief Compute crc on main memory without using a buffer.
*/
static uint16_t atmel_flash_crc_memory(uint16_t page, uint16_t offset,
                                       uint32_t len)
{
    uint8_t cmd[8];
    uint16_t crc;
    uint32_t i;

    cmd[0] = C_READ_THROUGH_MEMORY;     // 8 bit of op code
    cmd[1] = (page >> 7);       // 4 bit reserve and high 4 MSB
    cmd[2] = (page << 1) | offset >> 8; // 7 bit page and 1 bit offset MSB
    cmd[3] = offset;            // low-order 8 address bits
    cmd[4] = 0x00;
    cmd[5] = 0x00;
    cmd[6] = 0x00;
    cmd[7] = 0x00;
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    // The following code was adapted directly from crc.c
    {
        uint8_t v, xor_flag, byte, bit;

        crc = 0xFFFF /*INITIAL_VALUE */ ;
        for (i = 0; i < len; i++)
        {
            // Read the current byte from flash
            byte = atmel_flash_get_byte();
            v = 0x80;
            for (bit = 0; bit < 8; bit++)
            {
                if (crc & 0x8000)
                {
                    xor_flag = 1;
                }
                else
                {
                    xor_flag = 0;
                }

                crc = crc << 1;
                if (byte & v)
                {
                    crc = crc + 1;
                }

                if (xor_flag)
                {
                    crc = crc ^ 0x1021 /*POLY*/;
                }

                v = v >> 1;
            }
        }
        for (bit = 0; bit < 16; bit++)
        {
            if (crc & 0x8000)
            {
                xor_flag = 1;
            }
            else
            {
                xor_flag = 0;
            }

            crc = crc << 1;
            if (xor_flag)
            {
                crc = crc ^ 0x1021 /*POLY*/;
            }
        }
    }
    atmel_flash_high();
    return crc;
}

/** @brief Get the flash register status.
* @return Status of external flash
*/
/*
   static uint8_t atmel_flash_get_status (void)
   {
   uint8_t status;
   atmel_flash_low();
   atmel_flash_send_byte(C_REQ_STATUS); //SEND d7h, op code for register request
   status = atmel_flash_get_byte();
   atmel_flash_high();
   return status;
   }
 */

/** @brief Check the status of flash to see whether it's busy or not.
* 
* A little bit slower than simply holding the clk low, But
* easier
* @return TRUE if busy, else return FALSE
*/
static uint8_t atmel_flash_busy(void)
{
    uint8_t status;
    _atomic_t _atomic = _atomic_start();

    atmel_flash_low();
    atmel_flash_send_byte(C_REQ_STATUS);
    //SEND d7h, op code for register request
    status = atmel_flash_get_byte();
    atmel_flash_high();
    status &= 0x80;
    _atomic_end(_atomic);
    if (status == 0)
    {
        return TRUE;
    }

    return FALSE;
}

/** @brief Write the data to the buffer.
* @param selected Write buffer to select
* @param offset How far the data will be offset
* @param reqdata Data requested
* @param len Length of data
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_write_buffer(uint8_t selected, uint16_t offset,
                                        void *reqdata, uint16_t len)
{
    uint8_t cmd[4], *reqPtr;
    uint16_t i;

    if (selected == 1)
    {
        cmd[0] = C_WRITE_BUFFER1;
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_WRITE_BUFFER2;
    }                           // 8 bit of op code
    cmd[1] = 0x00;              // 8 bit don't care code
    cmd[2] = offset >> 8;       // 7 bit don't care code with 1 bit address
    cmd[3] = offset;            // low-order 8 address bits
    reqPtr = (uint8_t *) reqdata;
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    for (i = 0; i < len; i++)
    {
        atmel_flash_send_byte(reqPtr[i]);
    }
    atmel_flash_high();
    return TRUE;
}

/** @brief Dump the buffer to the memory. 
* @param selected Flush buffer to select
* @param page Page to flush to
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_flush_buffer(uint8_t selected, uint16_t page)
{
    uint8_t i, cmd[4];

    if (selected == 1)
    {
        cmd[0] = C_FLUSH_BUFFER1;
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_FLUSH_BUFFER2;
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    return TRUE;
}

/** @brief Compare the buffer to the memory. 
* @param selected Buffer to compare
* @param page Page to compare to
* @return 0 if equal, else return 0x40
*/
static uint8_t atmel_flash_compare_buffer(uint8_t selected, uint16_t page)
{
    uint8_t i, cmd[4], status;

    if (selected == 1)
    {
        cmd[0] = C_COMPARE_BUFFER1;
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_COMPARE_BUFFER2;
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit offset MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    do
    {
        atmel_flash_low();
        atmel_flash_send_byte(C_REQ_STATUS);
        //SEND d7h, op code for register request
        status = atmel_flash_get_byte();
        atmel_flash_high();
    }

    while (status & 0x80);      // wait until comparison is complete
    return status & 0x40;       // return result of comparison
}

/** @brief Read a page from flash memory and fill into the buffer. 
* @param selected Fill buffer to select
* @param page Page to fill from
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_fill_buffer(uint8_t selected, uint16_t page)
{
    uint8_t i, cmd[4];

    while (atmel_flash_busy())
        ;
    atmel_flash_flush_buffer(cur_buff, cur_page);
    while (atmel_flash_busy())
        ;
    if (selected == 1)
    {
        cmd[0] = C_FILL_BUFFER1;
    }                           // 8 bit of op code
    else
    {
        cmd[0] = C_FILL_BUFFER2;
    }                           // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    return TRUE;
}

/** @brief Erase a whole page in the memory. 
* @param page Page to erase 
* @return TRUE if success, else return FALSE
*/
static uint8_t atmel_flash_erase_page(uint16_t page)
{
    uint8_t i, cmd[4];

    cmd[0] = C_ERASE_PAGE;      // 8 bit of op code
    cmd[1] = page >> 7;         // 4 bit reserve and high 4 MSB
    cmd[2] = page << 1;         // 7 bit page and 1 bit don't care MSB
    cmd[3] = 0x00;              // 8 bit don't care code
    // put the cs to low in order to begin writing
    atmel_flash_low();
    for (i = 0; i < sizeof(cmd); i++)
    {
        atmel_flash_send_byte(cmd[i]);
    }
    atmel_flash_high();
    return TRUE;
}

//-------------------------------------------------------------------------
inline uint16_t atmel_flash_pagesize()
{
    5e0a:	80 e0       	ldi	r24, 0x00	; 0
    5e0c:	91 e0       	ldi	r25, 0x01	; 1
    5e0e:	08 95       	ret

00005e10 <atmel_flash_pagenumber>:
    return 256;
}

//-------------------------------------------------------------------------
inline uint16_t atmel_flash_pagenumber()
{
    5e10:	80 e0       	ldi	r24, 0x00	; 0
    5e12:	98 e0       	ldi	r25, 0x08	; 8
    5e14:	08 95       	ret

00005e16 <atmel_flash_busy>:
    5e16:	0f 93       	push	r16
    5e18:	1f 93       	push	r17
    5e1a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    5e1e:	08 2f       	mov	r16, r24
    5e20:	8f b7       	in	r24, 0x3f	; 63
    5e22:	f8 94       	cli
    5e24:	95 98       	cbi	0x12, 5	; 18
    5e26:	db 98       	cbi	0x1b, 3	; 27
    5e28:	8f bf       	out	0x3f, r24	; 63
    5e2a:	87 ed       	ldi	r24, 0xD7	; 215
    5e2c:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <atmel_flash_send_byte>
    5e30:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <atmel_flash_get_byte>
    5e34:	18 2f       	mov	r17, r24
    5e36:	db 9a       	sbi	0x1b, 3	; 27
    5e38:	80 2f       	mov	r24, r16
    5e3a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    5e3e:	11 1f       	adc	r17, r17
    5e40:	11 27       	eor	r17, r17
    5e42:	11 1f       	adc	r17, r17
    5e44:	81 e0       	ldi	r24, 0x01	; 1
    5e46:	81 27       	eor	r24, r17
    5e48:	1f 91       	pop	r17
    5e4a:	0f 91       	pop	r16
    5e4c:	08 95       	ret

00005e4e <atmel_flash_write_buffer>:
    5e4e:	af 92       	push	r10
    5e50:	bf 92       	push	r11
    5e52:	cf 92       	push	r12
    5e54:	df 92       	push	r13
    5e56:	ef 92       	push	r14
    5e58:	ff 92       	push	r15
    5e5a:	0f 93       	push	r16
    5e5c:	1f 93       	push	r17
    5e5e:	df 93       	push	r29
    5e60:	cf 93       	push	r28
    5e62:	00 d0       	rcall	.+0      	; 0x5e64 <atmel_flash_write_buffer+0x16>
    5e64:	00 d0       	rcall	.+0      	; 0x5e66 <atmel_flash_write_buffer+0x18>
    5e66:	cd b7       	in	r28, 0x3d	; 61
    5e68:	de b7       	in	r29, 0x3e	; 62
    5e6a:	5a 01       	movw	r10, r20
    5e6c:	69 01       	movw	r12, r18
    5e6e:	81 30       	cpi	r24, 0x01	; 1
    5e70:	d9 f1       	breq	.+118    	; 0x5ee8 <atmel_flash_write_buffer+0x9a>
    5e72:	87 e8       	ldi	r24, 0x87	; 135
    5e74:	89 83       	std	Y+1, r24	; 0x01
    5e76:	1a 82       	std	Y+2, r1	; 0x02
    5e78:	7b 83       	std	Y+3, r23	; 0x03
    5e7a:	6c 83       	std	Y+4, r22	; 0x04
    5e7c:	8f b7       	in	r24, 0x3f	; 63
    5e7e:	f8 94       	cli
    5e80:	95 98       	cbi	0x12, 5	; 18
    5e82:	db 98       	cbi	0x1b, 3	; 27
    5e84:	8f bf       	out	0x3f, r24	; 63
    5e86:	8e 01       	movw	r16, r28
    5e88:	0f 5f       	subi	r16, 0xFF	; 255
    5e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e8c:	85 e0       	ldi	r24, 0x05	; 5
    5e8e:	e8 2e       	mov	r14, r24
    5e90:	f1 2c       	mov	r15, r1
    5e92:	ec 0e       	add	r14, r28
    5e94:	fd 1e       	adc	r15, r29
    5e96:	f8 01       	movw	r30, r16
    5e98:	81 91       	ld	r24, Z+
    5e9a:	8f 01       	movw	r16, r30
    5e9c:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <atmel_flash_send_byte>
    5ea0:	0e 15       	cp	r16, r14
    5ea2:	1f 05       	cpc	r17, r15
    5ea4:	c1 f7       	brne	.-16     	; 0x5e96 <atmel_flash_write_buffer+0x48>
    5ea6:	c1 14       	cp	r12, r1
    5ea8:	d1 04       	cpc	r13, r1
    5eaa:	69 f0       	breq	.+26     	; 0x5ec6 <atmel_flash_write_buffer+0x78>
    5eac:	00 e0       	ldi	r16, 0x00	; 0
    5eae:	10 e0       	ldi	r17, 0x00	; 0
    5eb0:	f5 01       	movw	r30, r10
    5eb2:	e0 0f       	add	r30, r16
    5eb4:	f1 1f       	adc	r31, r17
    5eb6:	80 81       	ld	r24, Z
    5eb8:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <atmel_flash_send_byte>
    5ebc:	0f 5f       	subi	r16, 0xFF	; 255
    5ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    5ec0:	0c 15       	cp	r16, r12
    5ec2:	1d 05       	cpc	r17, r13
    5ec4:	a8 f3       	brcs	.-22     	; 0x5eb0 <atmel_flash_write_buffer+0x62>
    5ec6:	db 9a       	sbi	0x1b, 3	; 27
    5ec8:	81 e0       	ldi	r24, 0x01	; 1
    5eca:	0f 90       	pop	r0
    5ecc:	0f 90       	pop	r0
    5ece:	0f 90       	pop	r0
    5ed0:	0f 90       	pop	r0
    5ed2:	cf 91       	pop	r28
    5ed4:	df 91       	pop	r29
    5ed6:	1f 91       	pop	r17
    5ed8:	0f 91       	pop	r16
    5eda:	ff 90       	pop	r15
    5edc:	ef 90       	pop	r14
    5ede:	df 90       	pop	r13
    5ee0:	cf 90       	pop	r12
    5ee2:	bf 90       	pop	r11
    5ee4:	af 90       	pop	r10
    5ee6:	08 95       	ret
    5ee8:	84 e8       	ldi	r24, 0x84	; 132
    5eea:	89 83       	std	Y+1, r24	; 0x01
    5eec:	c4 cf       	rjmp	.-120    	; 0x5e76 <atmel_flash_write_buffer+0x28>

00005eee <atmel_flash_flush_buffer>:
    5eee:	ef 92       	push	r14
    5ef0:	ff 92       	push	r15
    5ef2:	0f 93       	push	r16
    5ef4:	1f 93       	push	r17
    5ef6:	df 93       	push	r29
    5ef8:	cf 93       	push	r28
    5efa:	00 d0       	rcall	.+0      	; 0x5efc <atmel_flash_flush_buffer+0xe>
    5efc:	00 d0       	rcall	.+0      	; 0x5efe <atmel_flash_flush_buffer+0x10>
    5efe:	cd b7       	in	r28, 0x3d	; 61
    5f00:	de b7       	in	r29, 0x3e	; 62
    5f02:	81 30       	cpi	r24, 0x01	; 1
    5f04:	79 f1       	breq	.+94     	; 0x5f64 <atmel_flash_flush_buffer+0x76>
    5f06:	86 e8       	ldi	r24, 0x86	; 134
    5f08:	89 83       	std	Y+1, r24	; 0x01
    5f0a:	cb 01       	movw	r24, r22
    5f0c:	88 0f       	add	r24, r24
    5f0e:	89 2f       	mov	r24, r25
    5f10:	88 1f       	adc	r24, r24
    5f12:	99 0b       	sbc	r25, r25
    5f14:	91 95       	neg	r25
    5f16:	8a 83       	std	Y+2, r24	; 0x02
    5f18:	86 2f       	mov	r24, r22
    5f1a:	88 0f       	add	r24, r24
    5f1c:	8b 83       	std	Y+3, r24	; 0x03
    5f1e:	1c 82       	std	Y+4, r1	; 0x04
    5f20:	8f b7       	in	r24, 0x3f	; 63
    5f22:	f8 94       	cli
    5f24:	95 98       	cbi	0x12, 5	; 18
    5f26:	db 98       	cbi	0x1b, 3	; 27
    5f28:	8f bf       	out	0x3f, r24	; 63
    5f2a:	8e 01       	movw	r16, r28
    5f2c:	0f 5f       	subi	r16, 0xFF	; 255
    5f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    5f30:	95 e0       	ldi	r25, 0x05	; 5
    5f32:	e9 2e       	mov	r14, r25
    5f34:	f1 2c       	mov	r15, r1
    5f36:	ec 0e       	add	r14, r28
    5f38:	fd 1e       	adc	r15, r29
    5f3a:	f8 01       	movw	r30, r16
    5f3c:	81 91       	ld	r24, Z+
    5f3e:	8f 01       	movw	r16, r30
    5f40:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <atmel_flash_send_byte>
    5f44:	0e 15       	cp	r16, r14
    5f46:	1f 05       	cpc	r17, r15
    5f48:	c1 f7       	brne	.-16     	; 0x5f3a <atmel_flash_flush_buffer+0x4c>
    5f4a:	db 9a       	sbi	0x1b, 3	; 27
    5f4c:	81 e0       	ldi	r24, 0x01	; 1
    5f4e:	0f 90       	pop	r0
    5f50:	0f 90       	pop	r0
    5f52:	0f 90       	pop	r0
    5f54:	0f 90       	pop	r0
    5f56:	cf 91       	pop	r28
    5f58:	df 91       	pop	r29
    5f5a:	1f 91       	pop	r17
    5f5c:	0f 91       	pop	r16
    5f5e:	ff 90       	pop	r15
    5f60:	ef 90       	pop	r14
    5f62:	08 95       	ret
    5f64:	83 e8       	ldi	r24, 0x83	; 131
    5f66:	89 83       	std	Y+1, r24	; 0x01
    5f68:	d0 cf       	rjmp	.-96     	; 0x5f0a <atmel_flash_flush_buffer+0x1c>

00005f6a <atmel_flash_crc>:
    5f6a:	6f 92       	push	r6
    5f6c:	7f 92       	push	r7
    5f6e:	8f 92       	push	r8
    5f70:	9f 92       	push	r9
    5f72:	af 92       	push	r10
    5f74:	bf 92       	push	r11
    5f76:	cf 92       	push	r12
    5f78:	df 92       	push	r13
    5f7a:	ef 92       	push	r14
    5f7c:	ff 92       	push	r15
    5f7e:	0f 93       	push	r16
    5f80:	1f 93       	push	r17
    5f82:	df 93       	push	r29
    5f84:	cf 93       	push	r28
    5f86:	cd b7       	in	r28, 0x3d	; 61
    5f88:	de b7       	in	r29, 0x3e	; 62
    5f8a:	28 97       	sbiw	r28, 0x08	; 8
    5f8c:	0f b6       	in	r0, 0x3f	; 63
    5f8e:	f8 94       	cli
    5f90:	de bf       	out	0x3e, r29	; 62
    5f92:	0f be       	out	0x3f, r0	; 63
    5f94:	cd bf       	out	0x3d, r28	; 61
    5f96:	3b 01       	movw	r6, r22
    5f98:	4c 01       	movw	r8, r24
    5f9a:	e0 90 88 03 	lds	r14, 0x0388
    5f9e:	f0 90 89 03 	lds	r15, 0x0389
    5fa2:	00 91 8a 03 	lds	r16, 0x038A
    5fa6:	10 91 8b 03 	lds	r17, 0x038B
    5faa:	c8 01       	movw	r24, r16
    5fac:	b7 01       	movw	r22, r14
    5fae:	28 e0       	ldi	r18, 0x08	; 8
    5fb0:	31 e0       	ldi	r19, 0x01	; 1
    5fb2:	40 e0       	ldi	r20, 0x00	; 0
    5fb4:	50 e0       	ldi	r21, 0x00	; 0
    5fb6:	0e 94 9a 54 	call	0xa934	; 0xa934 <__udivmodsi4>
    5fba:	69 01       	movw	r12, r18
    5fbc:	c8 01       	movw	r24, r16
    5fbe:	b7 01       	movw	r22, r14
    5fc0:	28 e0       	ldi	r18, 0x08	; 8
    5fc2:	31 e0       	ldi	r19, 0x01	; 1
    5fc4:	40 e0       	ldi	r20, 0x00	; 0
    5fc6:	50 e0       	ldi	r21, 0x00	; 0
    5fc8:	0e 94 9a 54 	call	0xa934	; 0xa934 <__udivmodsi4>
    5fcc:	8b 01       	movw	r16, r22
    5fce:	80 91 8f 03 	lds	r24, 0x038F
    5fd2:	88 23       	and	r24, r24
    5fd4:	89 f1       	breq	.+98     	; 0x6038 <atmel_flash_crc+0xce>
    5fd6:	e0 90 8d 03 	lds	r14, 0x038D
    5fda:	f0 90 8e 03 	lds	r15, 0x038E
    5fde:	ec 14       	cp	r14, r12
    5fe0:	fd 04       	cpc	r15, r13
    5fe2:	50 f1       	brcs	.+84     	; 0x6038 <atmel_flash_crc+0xce>
    5fe4:	b8 01       	movw	r22, r16
    5fe6:	80 e0       	ldi	r24, 0x00	; 0
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	66 0d       	add	r22, r6
    5fec:	77 1d       	adc	r23, r7
    5fee:	88 1d       	adc	r24, r8
    5ff0:	99 1d       	adc	r25, r9
    5ff2:	28 e0       	ldi	r18, 0x08	; 8
    5ff4:	31 e0       	ldi	r19, 0x01	; 1
    5ff6:	40 e0       	ldi	r20, 0x00	; 0
    5ff8:	50 e0       	ldi	r21, 0x00	; 0
    5ffa:	0e 94 9a 54 	call	0xa934	; 0xa934 <__udivmodsi4>
    5ffe:	c6 01       	movw	r24, r12
    6000:	a0 e0       	ldi	r26, 0x00	; 0
    6002:	b0 e0       	ldi	r27, 0x00	; 0
    6004:	82 0f       	add	r24, r18
    6006:	93 1f       	adc	r25, r19
    6008:	a4 1f       	adc	r26, r20
    600a:	b5 1f       	adc	r27, r21
    600c:	97 01       	movw	r18, r14
    600e:	40 e0       	ldi	r20, 0x00	; 0
    6010:	50 e0       	ldi	r21, 0x00	; 0
    6012:	82 17       	cp	r24, r18
    6014:	93 07       	cpc	r25, r19
    6016:	a4 07       	cpc	r26, r20
    6018:	b5 07       	cpc	r27, r21
    601a:	70 f0       	brcs	.+28     	; 0x6038 <atmel_flash_crc+0xce>
    601c:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6020:	88 23       	and	r24, r24
    6022:	e1 f7       	brne	.-8      	; 0x601c <atmel_flash_crc+0xb2>
    6024:	60 91 8d 03 	lds	r22, 0x038D
    6028:	70 91 8e 03 	lds	r23, 0x038E
    602c:	80 91 8c 03 	lds	r24, 0x038C
    6030:	0e 94 77 2f 	call	0x5eee	; 0x5eee <atmel_flash_flush_buffer>
    6034:	10 92 8f 03 	sts	0x038F, r1
    6038:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    603c:	88 23       	and	r24, r24
    603e:	e1 f7       	brne	.-8      	; 0x6038 <atmel_flash_crc+0xce>
    6040:	88 ee       	ldi	r24, 0xE8	; 232
    6042:	89 83       	std	Y+1, r24	; 0x01
    6044:	c6 01       	movw	r24, r12
    6046:	88 0f       	add	r24, r24
    6048:	89 2f       	mov	r24, r25
    604a:	88 1f       	adc	r24, r24
    604c:	99 0b       	sbc	r25, r25
    604e:	91 95       	neg	r25
    6050:	8a 83       	std	Y+2, r24	; 0x02
    6052:	8c 2d       	mov	r24, r12
    6054:	88 0f       	add	r24, r24
    6056:	81 2b       	or	r24, r17
    6058:	8b 83       	std	Y+3, r24	; 0x03
    605a:	0c 83       	std	Y+4, r16	; 0x04
    605c:	1d 82       	std	Y+5, r1	; 0x05
    605e:	1e 82       	std	Y+6, r1	; 0x06
    6060:	1f 82       	std	Y+7, r1	; 0x07
    6062:	18 86       	std	Y+8, r1	; 0x08
    6064:	8f b7       	in	r24, 0x3f	; 63
    6066:	f8 94       	cli
    6068:	95 98       	cbi	0x12, 5	; 18
    606a:	db 98       	cbi	0x1b, 3	; 27
    606c:	8f bf       	out	0x3f, r24	; 63
    606e:	8e 01       	movw	r16, r28
    6070:	0f 5f       	subi	r16, 0xFF	; 255
    6072:	1f 4f       	sbci	r17, 0xFF	; 255
    6074:	e9 e0       	ldi	r30, 0x09	; 9
    6076:	ee 2e       	mov	r14, r30
    6078:	f1 2c       	mov	r15, r1
    607a:	ec 0e       	add	r14, r28
    607c:	fd 1e       	adc	r15, r29
    607e:	f8 01       	movw	r30, r16
    6080:	81 91       	ld	r24, Z+
    6082:	8f 01       	movw	r16, r30
    6084:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <atmel_flash_send_byte>
    6088:	0e 15       	cp	r16, r14
    608a:	1f 05       	cpc	r17, r15
    608c:	c1 f7       	brne	.-16     	; 0x607e <atmel_flash_crc+0x114>
    608e:	61 14       	cp	r6, r1
    6090:	71 04       	cpc	r7, r1
    6092:	81 04       	cpc	r8, r1
    6094:	91 04       	cpc	r9, r1
    6096:	09 f4       	brne	.+2      	; 0x609a <atmel_flash_crc+0x130>
    6098:	57 c0       	rjmp	.+174    	; 0x6148 <atmel_flash_crc+0x1de>
    609a:	cc 24       	eor	r12, r12
    609c:	dd 24       	eor	r13, r13
    609e:	76 01       	movw	r14, r12
    60a0:	0f ef       	ldi	r16, 0xFF	; 255
    60a2:	1f ef       	ldi	r17, 0xFF	; 255
    60a4:	71 e2       	ldi	r23, 0x21	; 33
    60a6:	a7 2e       	mov	r10, r23
    60a8:	70 e1       	ldi	r23, 0x10	; 16
    60aa:	b7 2e       	mov	r11, r23
    60ac:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <atmel_flash_get_byte>
    60b0:	58 2f       	mov	r21, r24
    60b2:	40 e8       	ldi	r20, 0x80	; 128
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	05 c0       	rjmp	.+10     	; 0x60c2 <atmel_flash_crc+0x158>
    60b8:	89 01       	movw	r16, r18
    60ba:	9f 5f       	subi	r25, 0xFF	; 255
    60bc:	98 30       	cpi	r25, 0x08	; 8
    60be:	89 f0       	breq	.+34     	; 0x60e2 <atmel_flash_crc+0x178>
    60c0:	46 95       	lsr	r20
    60c2:	98 01       	movw	r18, r16
    60c4:	22 0f       	add	r18, r18
    60c6:	33 1f       	adc	r19, r19
    60c8:	84 2f       	mov	r24, r20
    60ca:	85 23       	and	r24, r21
    60cc:	11 f0       	breq	.+4      	; 0x60d2 <atmel_flash_crc+0x168>
    60ce:	2f 5f       	subi	r18, 0xFF	; 255
    60d0:	3f 4f       	sbci	r19, 0xFF	; 255
    60d2:	17 ff       	sbrs	r17, 7
    60d4:	f1 cf       	rjmp	.-30     	; 0x60b8 <atmel_flash_crc+0x14e>
    60d6:	89 01       	movw	r16, r18
    60d8:	0a 25       	eor	r16, r10
    60da:	1b 25       	eor	r17, r11
    60dc:	9f 5f       	subi	r25, 0xFF	; 255
    60de:	98 30       	cpi	r25, 0x08	; 8
    60e0:	79 f7       	brne	.-34     	; 0x60c0 <atmel_flash_crc+0x156>
    60e2:	08 94       	sec
    60e4:	c1 1c       	adc	r12, r1
    60e6:	d1 1c       	adc	r13, r1
    60e8:	e1 1c       	adc	r14, r1
    60ea:	f1 1c       	adc	r15, r1
    60ec:	c6 14       	cp	r12, r6
    60ee:	d7 04       	cpc	r13, r7
    60f0:	e8 04       	cpc	r14, r8
    60f2:	f9 04       	cpc	r15, r9
    60f4:	d8 f2       	brcs	.-74     	; 0x60ac <atmel_flash_crc+0x142>
    60f6:	80 e0       	ldi	r24, 0x00	; 0
    60f8:	21 e2       	ldi	r18, 0x21	; 33
    60fa:	30 e1       	ldi	r19, 0x10	; 16
    60fc:	05 c0       	rjmp	.+10     	; 0x6108 <atmel_flash_crc+0x19e>
    60fe:	00 0f       	add	r16, r16
    6100:	11 1f       	adc	r17, r17
    6102:	8f 5f       	subi	r24, 0xFF	; 255
    6104:	80 31       	cpi	r24, 0x10	; 16
    6106:	49 f0       	breq	.+18     	; 0x611a <atmel_flash_crc+0x1b0>
    6108:	17 ff       	sbrs	r17, 7
    610a:	f9 cf       	rjmp	.-14     	; 0x60fe <atmel_flash_crc+0x194>
    610c:	00 0f       	add	r16, r16
    610e:	11 1f       	adc	r17, r17
    6110:	02 27       	eor	r16, r18
    6112:	13 27       	eor	r17, r19
    6114:	8f 5f       	subi	r24, 0xFF	; 255
    6116:	80 31       	cpi	r24, 0x10	; 16
    6118:	b9 f7       	brne	.-18     	; 0x6108 <atmel_flash_crc+0x19e>
    611a:	db 9a       	sbi	0x1b, 3	; 27
    611c:	c8 01       	movw	r24, r16
    611e:	28 96       	adiw	r28, 0x08	; 8
    6120:	0f b6       	in	r0, 0x3f	; 63
    6122:	f8 94       	cli
    6124:	de bf       	out	0x3e, r29	; 62
    6126:	0f be       	out	0x3f, r0	; 63
    6128:	cd bf       	out	0x3d, r28	; 61
    612a:	cf 91       	pop	r28
    612c:	df 91       	pop	r29
    612e:	1f 91       	pop	r17
    6130:	0f 91       	pop	r16
    6132:	ff 90       	pop	r15
    6134:	ef 90       	pop	r14
    6136:	df 90       	pop	r13
    6138:	cf 90       	pop	r12
    613a:	bf 90       	pop	r11
    613c:	af 90       	pop	r10
    613e:	9f 90       	pop	r9
    6140:	8f 90       	pop	r8
    6142:	7f 90       	pop	r7
    6144:	6f 90       	pop	r6
    6146:	08 95       	ret
    6148:	0f ef       	ldi	r16, 0xFF	; 255
    614a:	1f ef       	ldi	r17, 0xFF	; 255
    614c:	d4 cf       	rjmp	.-88     	; 0x60f6 <atmel_flash_crc+0x18c>

0000614e <atmel_flash_fill_buffer>:
    614e:	ef 92       	push	r14
    6150:	ff 92       	push	r15
    6152:	0f 93       	push	r16
    6154:	1f 93       	push	r17
    6156:	df 93       	push	r29
    6158:	cf 93       	push	r28
    615a:	00 d0       	rcall	.+0      	; 0x615c <atmel_flash_fill_buffer+0xe>
    615c:	00 d0       	rcall	.+0      	; 0x615e <atmel_flash_fill_buffer+0x10>
    615e:	cd b7       	in	r28, 0x3d	; 61
    6160:	de b7       	in	r29, 0x3e	; 62
    6162:	f8 2e       	mov	r15, r24
    6164:	8b 01       	movw	r16, r22
    6166:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    616a:	88 23       	and	r24, r24
    616c:	e1 f7       	brne	.-8      	; 0x6166 <atmel_flash_fill_buffer+0x18>
    616e:	60 91 8d 03 	lds	r22, 0x038D
    6172:	70 91 8e 03 	lds	r23, 0x038E
    6176:	80 91 8c 03 	lds	r24, 0x038C
    617a:	0e 94 77 2f 	call	0x5eee	; 0x5eee <atmel_flash_flush_buffer>
    617e:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6182:	88 23       	and	r24, r24
    6184:	e1 f7       	brne	.-8      	; 0x617e <atmel_flash_fill_buffer+0x30>
    6186:	81 e0       	ldi	r24, 0x01	; 1
    6188:	f8 16       	cp	r15, r24
    618a:	79 f1       	breq	.+94     	; 0x61ea <atmel_flash_fill_buffer+0x9c>
    618c:	85 e5       	ldi	r24, 0x55	; 85
    618e:	89 83       	std	Y+1, r24	; 0x01
    6190:	c8 01       	movw	r24, r16
    6192:	88 0f       	add	r24, r24
    6194:	89 2f       	mov	r24, r25
    6196:	88 1f       	adc	r24, r24
    6198:	99 0b       	sbc	r25, r25
    619a:	91 95       	neg	r25
    619c:	8a 83       	std	Y+2, r24	; 0x02
    619e:	80 2f       	mov	r24, r16
    61a0:	88 0f       	add	r24, r24
    61a2:	8b 83       	std	Y+3, r24	; 0x03
    61a4:	1c 82       	std	Y+4, r1	; 0x04
    61a6:	8f b7       	in	r24, 0x3f	; 63
    61a8:	f8 94       	cli
    61aa:	95 98       	cbi	0x12, 5	; 18
    61ac:	db 98       	cbi	0x1b, 3	; 27
    61ae:	8f bf       	out	0x3f, r24	; 63
    61b0:	8e 01       	movw	r16, r28
    61b2:	0f 5f       	subi	r16, 0xFF	; 255
    61b4:	1f 4f       	sbci	r17, 0xFF	; 255
    61b6:	a5 e0       	ldi	r26, 0x05	; 5
    61b8:	ea 2e       	mov	r14, r26
    61ba:	f1 2c       	mov	r15, r1
    61bc:	ec 0e       	add	r14, r28
    61be:	fd 1e       	adc	r15, r29
    61c0:	f8 01       	movw	r30, r16
    61c2:	81 91       	ld	r24, Z+
    61c4:	8f 01       	movw	r16, r30
    61c6:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <atmel_flash_send_byte>
    61ca:	0e 15       	cp	r16, r14
    61cc:	1f 05       	cpc	r17, r15
    61ce:	c1 f7       	brne	.-16     	; 0x61c0 <atmel_flash_fill_buffer+0x72>
    61d0:	db 9a       	sbi	0x1b, 3	; 27
    61d2:	81 e0       	ldi	r24, 0x01	; 1
    61d4:	0f 90       	pop	r0
    61d6:	0f 90       	pop	r0
    61d8:	0f 90       	pop	r0
    61da:	0f 90       	pop	r0
    61dc:	cf 91       	pop	r28
    61de:	df 91       	pop	r29
    61e0:	1f 91       	pop	r17
    61e2:	0f 91       	pop	r16
    61e4:	ff 90       	pop	r15
    61e6:	ef 90       	pop	r14
    61e8:	08 95       	ret
    61ea:	83 e5       	ldi	r24, 0x53	; 83
    61ec:	89 83       	std	Y+1, r24	; 0x01
    61ee:	d0 cf       	rjmp	.-96     	; 0x6190 <atmel_flash_fill_buffer+0x42>

000061f0 <atmel_flash_compare>:
    61f0:	2f 92       	push	r2
    61f2:	3f 92       	push	r3
    61f4:	4f 92       	push	r4
    61f6:	5f 92       	push	r5
    61f8:	6f 92       	push	r6
    61fa:	7f 92       	push	r7
    61fc:	8f 92       	push	r8
    61fe:	9f 92       	push	r9
    6200:	af 92       	push	r10
    6202:	bf 92       	push	r11
    6204:	cf 92       	push	r12
    6206:	df 92       	push	r13
    6208:	ef 92       	push	r14
    620a:	ff 92       	push	r15
    620c:	0f 93       	push	r16
    620e:	1f 93       	push	r17
    6210:	df 93       	push	r29
    6212:	cf 93       	push	r28
    6214:	00 d0       	rcall	.+0      	; 0x6216 <atmel_flash_compare+0x26>
    6216:	00 d0       	rcall	.+0      	; 0x6218 <atmel_flash_compare+0x28>
    6218:	cd b7       	in	r28, 0x3d	; 61
    621a:	de b7       	in	r29, 0x3e	; 62
    621c:	1c 01       	movw	r2, r24
    621e:	4b 01       	movw	r8, r22
    6220:	80 91 8f 03 	lds	r24, 0x038F
    6224:	88 23       	and	r24, r24
    6226:	71 f0       	breq	.+28     	; 0x6244 <atmel_flash_compare+0x54>
    6228:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    622c:	88 23       	and	r24, r24
    622e:	e1 f7       	brne	.-8      	; 0x6228 <atmel_flash_compare+0x38>
    6230:	60 91 8d 03 	lds	r22, 0x038D
    6234:	70 91 8e 03 	lds	r23, 0x038E
    6238:	80 91 8c 03 	lds	r24, 0x038C
    623c:	0e 94 77 2f 	call	0x5eee	; 0x5eee <atmel_flash_flush_buffer>
    6240:	10 92 8f 03 	sts	0x038F, r1
    6244:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6248:	88 23       	and	r24, r24
    624a:	e1 f7       	brne	.-8      	; 0x6244 <atmel_flash_compare+0x54>
    624c:	81 14       	cp	r8, r1
    624e:	91 04       	cpc	r9, r1
    6250:	09 f4       	brne	.+2      	; 0x6254 <atmel_flash_compare+0x64>
    6252:	96 c0       	rjmp	.+300    	; 0x6380 <atmel_flash_compare+0x190>
    6254:	66 24       	eor	r6, r6
    6256:	77 24       	eor	r7, r7
    6258:	e0 90 88 03 	lds	r14, 0x0388
    625c:	f0 90 89 03 	lds	r15, 0x0389
    6260:	00 91 8a 03 	lds	r16, 0x038A
    6264:	10 91 8b 03 	lds	r17, 0x038B
    6268:	95 e0       	ldi	r25, 0x05	; 5
    626a:	49 2e       	mov	r4, r25
    626c:	51 2c       	mov	r5, r1
    626e:	4c 0e       	add	r4, r28
    6270:	5d 1e       	adc	r5, r29
    6272:	c8 01       	movw	r24, r16
    6274:	b7 01       	movw	r22, r14
    6276:	28 e0       	ldi	r18, 0x08	; 8
    6278:	31 e0       	ldi	r19, 0x01	; 1
    627a:	40 e0       	ldi	r20, 0x00	; 0
    627c:	50 e0       	ldi	r21, 0x00	; 0
    627e:	0e 94 9a 54 	call	0xa934	; 0xa934 <__udivmodsi4>
    6282:	69 01       	movw	r12, r18
    6284:	c8 01       	movw	r24, r16
    6286:	b7 01       	movw	r22, r14
    6288:	28 e0       	ldi	r18, 0x08	; 8
    628a:	31 e0       	ldi	r19, 0x01	; 1
    628c:	40 e0       	ldi	r20, 0x00	; 0
    628e:	50 e0       	ldi	r21, 0x00	; 0
    6290:	0e 94 9a 54 	call	0xa934	; 0xa934 <__udivmodsi4>
    6294:	8b 01       	movw	r16, r22
    6296:	c4 01       	movw	r24, r8
    6298:	80 0f       	add	r24, r16
    629a:	91 1f       	adc	r25, r17
    629c:	89 50       	subi	r24, 0x09	; 9
    629e:	91 40       	sbci	r25, 0x01	; 1
    62a0:	08 f0       	brcs	.+2      	; 0x62a4 <atmel_flash_compare+0xb4>
    62a2:	59 c0       	rjmp	.+178    	; 0x6356 <atmel_flash_compare+0x166>
    62a4:	54 01       	movw	r10, r8
    62a6:	88 e0       	ldi	r24, 0x08	; 8
    62a8:	a8 16       	cp	r10, r24
    62aa:	81 e0       	ldi	r24, 0x01	; 1
    62ac:	b8 06       	cpc	r11, r24
    62ae:	08 f4       	brcc	.+2      	; 0x62b2 <atmel_flash_compare+0xc2>
    62b0:	5e c0       	rjmp	.+188    	; 0x636e <atmel_flash_compare+0x17e>
    62b2:	a1 01       	movw	r20, r2
    62b4:	46 0d       	add	r20, r6
    62b6:	57 1d       	adc	r21, r7
    62b8:	81 e0       	ldi	r24, 0x01	; 1
    62ba:	b8 01       	movw	r22, r16
    62bc:	95 01       	movw	r18, r10
    62be:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <atmel_flash_write_buffer>
    62c2:	e0 e6       	ldi	r30, 0x60	; 96
    62c4:	e9 83       	std	Y+1, r30	; 0x01
    62c6:	c6 01       	movw	r24, r12
    62c8:	88 0f       	add	r24, r24
    62ca:	89 2f       	mov	r24, r25
    62cc:	88 1f       	adc	r24, r24
    62ce:	99 0b       	sbc	r25, r25
    62d0:	91 95       	neg	r25
    62d2:	8a 83       	std	Y+2, r24	; 0x02
    62d4:	8c 2d       	mov	r24, r12
    62d6:	88 0f       	add	r24, r24
    62d8:	8b 83       	std	Y+3, r24	; 0x03
    62da:	1c 82       	std	Y+4, r1	; 0x04
    62dc:	8f b7       	in	r24, 0x3f	; 63
    62de:	f8 94       	cli
    62e0:	95 98       	cbi	0x12, 5	; 18
    62e2:	db 98       	cbi	0x1b, 3	; 27
    62e4:	8f bf       	out	0x3f, r24	; 63
    62e6:	8e 01       	movw	r16, r28
    62e8:	0f 5f       	subi	r16, 0xFF	; 255
    62ea:	1f 4f       	sbci	r17, 0xFF	; 255
    62ec:	f8 01       	movw	r30, r16
    62ee:	81 91       	ld	r24, Z+
    62f0:	8f 01       	movw	r16, r30
    62f2:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <atmel_flash_send_byte>
    62f6:	04 15       	cp	r16, r4
    62f8:	15 05       	cpc	r17, r5
    62fa:	c1 f7       	brne	.-16     	; 0x62ec <atmel_flash_compare+0xfc>
    62fc:	db 9a       	sbi	0x1b, 3	; 27
    62fe:	8f b7       	in	r24, 0x3f	; 63
    6300:	f8 94       	cli
    6302:	95 98       	cbi	0x12, 5	; 18
    6304:	db 98       	cbi	0x1b, 3	; 27
    6306:	8f bf       	out	0x3f, r24	; 63
    6308:	87 ed       	ldi	r24, 0xD7	; 215
    630a:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <atmel_flash_send_byte>
    630e:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <atmel_flash_get_byte>
    6312:	db 9a       	sbi	0x1b, 3	; 27
    6314:	87 fd       	sbrc	r24, 7
    6316:	f3 cf       	rjmp	.-26     	; 0x62fe <atmel_flash_compare+0x10e>
    6318:	86 fd       	sbrc	r24, 6
    631a:	62 c0       	rjmp	.+196    	; 0x63e0 <atmel_flash_compare+0x1f0>
    631c:	c5 01       	movw	r24, r10
    631e:	a0 e0       	ldi	r26, 0x00	; 0
    6320:	b0 e0       	ldi	r27, 0x00	; 0
    6322:	e0 90 88 03 	lds	r14, 0x0388
    6326:	f0 90 89 03 	lds	r15, 0x0389
    632a:	00 91 8a 03 	lds	r16, 0x038A
    632e:	10 91 8b 03 	lds	r17, 0x038B
    6332:	e8 0e       	add	r14, r24
    6334:	f9 1e       	adc	r15, r25
    6336:	0a 1f       	adc	r16, r26
    6338:	1b 1f       	adc	r17, r27
    633a:	e0 92 88 03 	sts	0x0388, r14
    633e:	f0 92 89 03 	sts	0x0389, r15
    6342:	00 93 8a 03 	sts	0x038A, r16
    6346:	10 93 8b 03 	sts	0x038B, r17
    634a:	8a 18       	sub	r8, r10
    634c:	9b 08       	sbc	r9, r11
    634e:	01 f1       	breq	.+64     	; 0x6390 <atmel_flash_compare+0x1a0>
    6350:	6a 0c       	add	r6, r10
    6352:	7b 1c       	adc	r7, r11
    6354:	8e cf       	rjmp	.-228    	; 0x6272 <atmel_flash_compare+0x82>
    6356:	88 e0       	ldi	r24, 0x08	; 8
    6358:	a8 2e       	mov	r10, r24
    635a:	81 e0       	ldi	r24, 0x01	; 1
    635c:	b8 2e       	mov	r11, r24
    635e:	a0 1a       	sub	r10, r16
    6360:	b1 0a       	sbc	r11, r17
    6362:	88 e0       	ldi	r24, 0x08	; 8
    6364:	a8 16       	cp	r10, r24
    6366:	81 e0       	ldi	r24, 0x01	; 1
    6368:	b8 06       	cpc	r11, r24
    636a:	08 f0       	brcs	.+2      	; 0x636e <atmel_flash_compare+0x17e>
    636c:	a2 cf       	rjmp	.-188    	; 0x62b2 <atmel_flash_compare+0xc2>
    636e:	81 e0       	ldi	r24, 0x01	; 1
    6370:	b6 01       	movw	r22, r12
    6372:	0e 94 a7 30 	call	0x614e	; 0x614e <atmel_flash_fill_buffer>
    6376:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    637a:	88 23       	and	r24, r24
    637c:	e1 f7       	brne	.-8      	; 0x6376 <atmel_flash_compare+0x186>
    637e:	99 cf       	rjmp	.-206    	; 0x62b2 <atmel_flash_compare+0xc2>
    6380:	e0 90 88 03 	lds	r14, 0x0388
    6384:	f0 90 89 03 	lds	r15, 0x0389
    6388:	00 91 8a 03 	lds	r16, 0x038A
    638c:	10 91 8b 03 	lds	r17, 0x038B
    6390:	20 e0       	ldi	r18, 0x00	; 0
    6392:	c4 01       	movw	r24, r8
    6394:	a0 e0       	ldi	r26, 0x00	; 0
    6396:	b0 e0       	ldi	r27, 0x00	; 0
    6398:	e8 0e       	add	r14, r24
    639a:	f9 1e       	adc	r15, r25
    639c:	0a 1f       	adc	r16, r26
    639e:	1b 1f       	adc	r17, r27
    63a0:	e0 92 88 03 	sts	0x0388, r14
    63a4:	f0 92 89 03 	sts	0x0389, r15
    63a8:	00 93 8a 03 	sts	0x038A, r16
    63ac:	10 93 8b 03 	sts	0x038B, r17
    63b0:	82 2f       	mov	r24, r18
    63b2:	0f 90       	pop	r0
    63b4:	0f 90       	pop	r0
    63b6:	0f 90       	pop	r0
    63b8:	0f 90       	pop	r0
    63ba:	cf 91       	pop	r28
    63bc:	df 91       	pop	r29
    63be:	1f 91       	pop	r17
    63c0:	0f 91       	pop	r16
    63c2:	ff 90       	pop	r15
    63c4:	ef 90       	pop	r14
    63c6:	df 90       	pop	r13
    63c8:	cf 90       	pop	r12
    63ca:	bf 90       	pop	r11
    63cc:	af 90       	pop	r10
    63ce:	9f 90       	pop	r9
    63d0:	8f 90       	pop	r8
    63d2:	7f 90       	pop	r7
    63d4:	6f 90       	pop	r6
    63d6:	5f 90       	pop	r5
    63d8:	4f 90       	pop	r4
    63da:	3f 90       	pop	r3
    63dc:	2f 90       	pop	r2
    63de:	08 95       	ret
    63e0:	21 e0       	ldi	r18, 0x01	; 1
    63e2:	e0 90 88 03 	lds	r14, 0x0388
    63e6:	f0 90 89 03 	lds	r15, 0x0389
    63ea:	00 91 8a 03 	lds	r16, 0x038A
    63ee:	10 91 8b 03 	lds	r17, 0x038B
    63f2:	cf cf       	rjmp	.-98     	; 0x6392 <atmel_flash_compare+0x1a2>

000063f4 <copyFlash>:
    63f4:	0f 93       	push	r16
    63f6:	1f 93       	push	r17
    63f8:	cf 93       	push	r28
    63fa:	df 93       	push	r29
    63fc:	ec 01       	movw	r28, r24
    63fe:	8b 01       	movw	r16, r22
    6400:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6404:	88 23       	and	r24, r24
    6406:	e1 f7       	brne	.-8      	; 0x6400 <copyFlash+0xc>
    6408:	81 e0       	ldi	r24, 0x01	; 1
    640a:	be 01       	movw	r22, r28
    640c:	0e 94 a7 30 	call	0x614e	; 0x614e <atmel_flash_fill_buffer>
    6410:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6414:	88 23       	and	r24, r24
    6416:	e1 f7       	brne	.-8      	; 0x6410 <copyFlash+0x1c>
    6418:	81 e0       	ldi	r24, 0x01	; 1
    641a:	b8 01       	movw	r22, r16
    641c:	0e 94 77 2f 	call	0x5eee	; 0x5eee <atmel_flash_flush_buffer>
    6420:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6424:	88 23       	and	r24, r24
    6426:	e1 f7       	brne	.-8      	; 0x6420 <copyFlash+0x2c>
    6428:	df 91       	pop	r29
    642a:	cf 91       	pop	r28
    642c:	1f 91       	pop	r17
    642e:	0f 91       	pop	r16
    6430:	08 95       	ret

00006432 <dev_write_atmel_flash>:
    6432:	2f 92       	push	r2
    6434:	3f 92       	push	r3
    6436:	4f 92       	push	r4
    6438:	5f 92       	push	r5
    643a:	6f 92       	push	r6
    643c:	7f 92       	push	r7
    643e:	8f 92       	push	r8
    6440:	9f 92       	push	r9
    6442:	af 92       	push	r10
    6444:	bf 92       	push	r11
    6446:	cf 92       	push	r12
    6448:	df 92       	push	r13
    644a:	ef 92       	push	r14
    644c:	ff 92       	push	r15
    644e:	0f 93       	push	r16
    6450:	1f 93       	push	r17
    6452:	df 93       	push	r29
    6454:	cf 93       	push	r28
    6456:	00 d0       	rcall	.+0      	; 0x6458 <dev_write_atmel_flash+0x26>
    6458:	00 d0       	rcall	.+0      	; 0x645a <dev_write_atmel_flash+0x28>
    645a:	cd b7       	in	r28, 0x3d	; 61
    645c:	de b7       	in	r29, 0x3e	; 62
    645e:	4b 01       	movw	r8, r22
    6460:	2c 01       	movw	r4, r24
    6462:	a0 90 88 03 	lds	r10, 0x0388
    6466:	b0 90 89 03 	lds	r11, 0x0389
    646a:	c0 90 8a 03 	lds	r12, 0x038A
    646e:	d0 90 8b 03 	lds	r13, 0x038B
    6472:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6476:	88 23       	and	r24, r24
    6478:	e1 f7       	brne	.-8      	; 0x6472 <dev_write_atmel_flash+0x40>
    647a:	81 14       	cp	r8, r1
    647c:	91 04       	cpc	r9, r1
    647e:	09 f4       	brne	.+2      	; 0x6482 <dev_write_atmel_flash+0x50>
    6480:	ba c0       	rjmp	.+372    	; 0x65f6 <dev_write_atmel_flash+0x1c4>
    6482:	c6 01       	movw	r24, r12
    6484:	b5 01       	movw	r22, r10
    6486:	28 e0       	ldi	r18, 0x08	; 8
    6488:	31 e0       	ldi	r19, 0x01	; 1
    648a:	40 e0       	ldi	r20, 0x00	; 0
    648c:	50 e0       	ldi	r21, 0x00	; 0
    648e:	0e 94 9a 54 	call	0xa934	; 0xa934 <__udivmodsi4>
    6492:	79 01       	movw	r14, r18
    6494:	c6 01       	movw	r24, r12
    6496:	b5 01       	movw	r22, r10
    6498:	28 e0       	ldi	r18, 0x08	; 8
    649a:	31 e0       	ldi	r19, 0x01	; 1
    649c:	40 e0       	ldi	r20, 0x00	; 0
    649e:	50 e0       	ldi	r21, 0x00	; 0
    64a0:	0e 94 9a 54 	call	0xa934	; 0xa934 <__udivmodsi4>
    64a4:	5b 01       	movw	r10, r22
    64a6:	66 24       	eor	r6, r6
    64a8:	77 24       	eor	r7, r7
    64aa:	45 e0       	ldi	r20, 0x05	; 5
    64ac:	24 2e       	mov	r2, r20
    64ae:	31 2c       	mov	r3, r1
    64b0:	2c 0e       	add	r2, r28
    64b2:	3d 1e       	adc	r3, r29
    64b4:	c5 01       	movw	r24, r10
    64b6:	88 0d       	add	r24, r8
    64b8:	99 1d       	adc	r25, r9
    64ba:	89 50       	subi	r24, 0x09	; 9
    64bc:	91 40       	sbci	r25, 0x01	; 1
    64be:	08 f0       	brcs	.+2      	; 0x64c2 <dev_write_atmel_flash+0x90>
    64c0:	7e c0       	rjmp	.+252    	; 0x65be <dev_write_atmel_flash+0x18c>
    64c2:	64 01       	movw	r12, r8
    64c4:	80 91 8d 03 	lds	r24, 0x038D
    64c8:	90 91 8e 03 	lds	r25, 0x038E
    64cc:	e8 16       	cp	r14, r24
    64ce:	f9 06       	cpc	r15, r25
    64d0:	09 f4       	brne	.+2      	; 0x64d4 <dev_write_atmel_flash+0xa2>
    64d2:	41 c0       	rjmp	.+130    	; 0x6556 <dev_write_atmel_flash+0x124>
    64d4:	80 91 8f 03 	lds	r24, 0x038F
    64d8:	88 23       	and	r24, r24
    64da:	09 f0       	breq	.+2      	; 0x64de <dev_write_atmel_flash+0xac>
    64dc:	77 c0       	rjmp	.+238    	; 0x65cc <dev_write_atmel_flash+0x19a>
    64de:	80 91 8c 03 	lds	r24, 0x038C
    64e2:	81 30       	cpi	r24, 0x01	; 1
    64e4:	09 f4       	brne	.+2      	; 0x64e8 <dev_write_atmel_flash+0xb6>
    64e6:	85 c0       	rjmp	.+266    	; 0x65f2 <dev_write_atmel_flash+0x1c0>
    64e8:	81 e0       	ldi	r24, 0x01	; 1
    64ea:	80 93 8c 03 	sts	0x038C, r24
    64ee:	f0 92 8e 03 	sts	0x038E, r15
    64f2:	e0 92 8d 03 	sts	0x038D, r14
    64f6:	88 e0       	ldi	r24, 0x08	; 8
    64f8:	c8 16       	cp	r12, r24
    64fa:	81 e0       	ldi	r24, 0x01	; 1
    64fc:	d8 06       	cpc	r13, r24
    64fe:	48 f4       	brcc	.+18     	; 0x6512 <dev_write_atmel_flash+0xe0>
    6500:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6504:	88 23       	and	r24, r24
    6506:	e1 f7       	brne	.-8      	; 0x6500 <dev_write_atmel_flash+0xce>
    6508:	80 91 8c 03 	lds	r24, 0x038C
    650c:	b7 01       	movw	r22, r14
    650e:	0e 94 a7 30 	call	0x614e	; 0x614e <atmel_flash_fill_buffer>
    6512:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6516:	88 23       	and	r24, r24
    6518:	e1 f7       	brne	.-8      	; 0x6512 <dev_write_atmel_flash+0xe0>
    651a:	e1 e8       	ldi	r30, 0x81	; 129
    651c:	e9 83       	std	Y+1, r30	; 0x01
    651e:	c7 01       	movw	r24, r14
    6520:	88 0f       	add	r24, r24
    6522:	89 2f       	mov	r24, r25
    6524:	88 1f       	adc	r24, r24
    6526:	99 0b       	sbc	r25, r25
    6528:	91 95       	neg	r25
    652a:	8a 83       	std	Y+2, r24	; 0x02
    652c:	8e 2d       	mov	r24, r14
    652e:	88 0f       	add	r24, r24
    6530:	8b 83       	std	Y+3, r24	; 0x03
    6532:	1c 82       	std	Y+4, r1	; 0x04
    6534:	8f b7       	in	r24, 0x3f	; 63
    6536:	f8 94       	cli
    6538:	95 98       	cbi	0x12, 5	; 18
    653a:	db 98       	cbi	0x1b, 3	; 27
    653c:	8f bf       	out	0x3f, r24	; 63
    653e:	8e 01       	movw	r16, r28
    6540:	0f 5f       	subi	r16, 0xFF	; 255
    6542:	1f 4f       	sbci	r17, 0xFF	; 255
    6544:	f8 01       	movw	r30, r16
    6546:	81 91       	ld	r24, Z+
    6548:	8f 01       	movw	r16, r30
    654a:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <atmel_flash_send_byte>
    654e:	02 15       	cp	r16, r2
    6550:	13 05       	cpc	r17, r3
    6552:	c1 f7       	brne	.-16     	; 0x6544 <dev_write_atmel_flash+0x112>
    6554:	db 9a       	sbi	0x1b, 3	; 27
    6556:	a2 01       	movw	r20, r4
    6558:	46 0d       	add	r20, r6
    655a:	57 1d       	adc	r21, r7
    655c:	80 91 8c 03 	lds	r24, 0x038C
    6560:	b5 01       	movw	r22, r10
    6562:	96 01       	movw	r18, r12
    6564:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <atmel_flash_write_buffer>
    6568:	f1 e0       	ldi	r31, 0x01	; 1
    656a:	f0 93 8f 03 	sts	0x038F, r31
    656e:	96 01       	movw	r18, r12
    6570:	40 e0       	ldi	r20, 0x00	; 0
    6572:	50 e0       	ldi	r21, 0x00	; 0
    6574:	80 91 88 03 	lds	r24, 0x0388
    6578:	90 91 89 03 	lds	r25, 0x0389
    657c:	a0 91 8a 03 	lds	r26, 0x038A
    6580:	b0 91 8b 03 	lds	r27, 0x038B
    6584:	82 0f       	add	r24, r18
    6586:	93 1f       	adc	r25, r19
    6588:	a4 1f       	adc	r26, r20
    658a:	b5 1f       	adc	r27, r21
    658c:	80 93 88 03 	sts	0x0388, r24
    6590:	90 93 89 03 	sts	0x0389, r25
    6594:	a0 93 8a 03 	sts	0x038A, r26
    6598:	b0 93 8b 03 	sts	0x038B, r27
    659c:	8c 18       	sub	r8, r12
    659e:	9d 08       	sbc	r9, r13
    65a0:	51 f1       	breq	.+84     	; 0x65f6 <dev_write_atmel_flash+0x1c4>
    65a2:	6c 0c       	add	r6, r12
    65a4:	7d 1c       	adc	r7, r13
    65a6:	08 94       	sec
    65a8:	e1 1c       	adc	r14, r1
    65aa:	f1 1c       	adc	r15, r1
    65ac:	aa 24       	eor	r10, r10
    65ae:	bb 24       	eor	r11, r11
    65b0:	c5 01       	movw	r24, r10
    65b2:	88 0d       	add	r24, r8
    65b4:	99 1d       	adc	r25, r9
    65b6:	89 50       	subi	r24, 0x09	; 9
    65b8:	91 40       	sbci	r25, 0x01	; 1
    65ba:	08 f4       	brcc	.+2      	; 0x65be <dev_write_atmel_flash+0x18c>
    65bc:	82 cf       	rjmp	.-252    	; 0x64c2 <dev_write_atmel_flash+0x90>
    65be:	38 e0       	ldi	r19, 0x08	; 8
    65c0:	c3 2e       	mov	r12, r19
    65c2:	31 e0       	ldi	r19, 0x01	; 1
    65c4:	d3 2e       	mov	r13, r19
    65c6:	ca 18       	sub	r12, r10
    65c8:	db 08       	sbc	r13, r11
    65ca:	7c cf       	rjmp	.-264    	; 0x64c4 <dev_write_atmel_flash+0x92>
    65cc:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    65d0:	88 23       	and	r24, r24
    65d2:	e1 f7       	brne	.-8      	; 0x65cc <dev_write_atmel_flash+0x19a>
    65d4:	60 91 8d 03 	lds	r22, 0x038D
    65d8:	70 91 8e 03 	lds	r23, 0x038E
    65dc:	80 91 8c 03 	lds	r24, 0x038C
    65e0:	0e 94 77 2f 	call	0x5eee	; 0x5eee <atmel_flash_flush_buffer>
    65e4:	10 92 8f 03 	sts	0x038F, r1
    65e8:	80 91 8c 03 	lds	r24, 0x038C
    65ec:	81 30       	cpi	r24, 0x01	; 1
    65ee:	09 f0       	breq	.+2      	; 0x65f2 <dev_write_atmel_flash+0x1c0>
    65f0:	7b cf       	rjmp	.-266    	; 0x64e8 <dev_write_atmel_flash+0xb6>
    65f2:	82 e0       	ldi	r24, 0x02	; 2
    65f4:	7a cf       	rjmp	.-268    	; 0x64ea <dev_write_atmel_flash+0xb8>
    65f6:	80 e0       	ldi	r24, 0x00	; 0
    65f8:	90 e0       	ldi	r25, 0x00	; 0
    65fa:	0f 90       	pop	r0
    65fc:	0f 90       	pop	r0
    65fe:	0f 90       	pop	r0
    6600:	0f 90       	pop	r0
    6602:	cf 91       	pop	r28
    6604:	df 91       	pop	r29
    6606:	1f 91       	pop	r17
    6608:	0f 91       	pop	r16
    660a:	ff 90       	pop	r15
    660c:	ef 90       	pop	r14
    660e:	df 90       	pop	r13
    6610:	cf 90       	pop	r12
    6612:	bf 90       	pop	r11
    6614:	af 90       	pop	r10
    6616:	9f 90       	pop	r9
    6618:	8f 90       	pop	r8
    661a:	7f 90       	pop	r7
    661c:	6f 90       	pop	r6
    661e:	5f 90       	pop	r5
    6620:	4f 90       	pop	r4
    6622:	3f 90       	pop	r3
    6624:	2f 90       	pop	r2
    6626:	08 95       	ret

00006628 <writeFlash>:
    6628:	af 92       	push	r10
    662a:	bf 92       	push	r11
    662c:	df 92       	push	r13
    662e:	ef 92       	push	r14
    6630:	ff 92       	push	r15
    6632:	0f 93       	push	r16
    6634:	1f 93       	push	r17
    6636:	cf 93       	push	r28
    6638:	df 93       	push	r29
    663a:	7c 01       	movw	r14, r24
    663c:	d6 2e       	mov	r13, r22
    663e:	5a 01       	movw	r10, r20
    6640:	89 01       	movw	r16, r18
    6642:	80 91 90 03 	lds	r24, 0x0390
    6646:	88 23       	and	r24, r24
    6648:	09 f4       	brne	.+2      	; 0x664c <writeFlash+0x24>
    664a:	69 c0       	rjmp	.+210    	; 0x671e <writeFlash+0xf6>
    664c:	6d 2d       	mov	r22, r13
    664e:	70 e0       	ldi	r23, 0x00	; 0
    6650:	88 e0       	ldi	r24, 0x08	; 8
    6652:	91 e0       	ldi	r25, 0x01	; 1
    6654:	9c 01       	movw	r18, r24
    6656:	e2 9e       	mul	r14, r18
    6658:	c0 01       	movw	r24, r0
    665a:	e3 9e       	mul	r14, r19
    665c:	90 0d       	add	r25, r0
    665e:	f2 9e       	mul	r15, r18
    6660:	90 0d       	add	r25, r0
    6662:	11 24       	eor	r1, r1
    6664:	86 0f       	add	r24, r22
    6666:	97 1f       	adc	r25, r23
    6668:	aa 27       	eor	r26, r26
    666a:	97 fd       	sbrc	r25, 7
    666c:	a0 95       	com	r26
    666e:	ba 2f       	mov	r27, r26
    6670:	80 93 88 03 	sts	0x0388, r24
    6674:	90 93 89 03 	sts	0x0389, r25
    6678:	a0 93 8a 03 	sts	0x038A, r26
    667c:	b0 93 8b 03 	sts	0x038B, r27
    6680:	c8 01       	movw	r24, r16
    6682:	86 0f       	add	r24, r22
    6684:	97 1f       	adc	r25, r23
    6686:	81 50       	subi	r24, 0x01	; 1
    6688:	91 40       	sbci	r25, 0x01	; 1
    668a:	0c f4       	brge	.+2      	; 0x668e <writeFlash+0x66>
    668c:	46 c0       	rjmp	.+140    	; 0x671a <writeFlash+0xf2>
    668e:	c0 e0       	ldi	r28, 0x00	; 0
    6690:	d1 e0       	ldi	r29, 0x01	; 1
    6692:	c6 1b       	sub	r28, r22
    6694:	d7 0b       	sbc	r29, r23
    6696:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    669a:	88 23       	and	r24, r24
    669c:	e1 f7       	brne	.-8      	; 0x6696 <writeFlash+0x6e>
    669e:	c5 01       	movw	r24, r10
    66a0:	be 01       	movw	r22, r28
    66a2:	0e 94 19 32 	call	0x6432	; 0x6432 <dev_write_atmel_flash>
    66a6:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    66aa:	88 23       	and	r24, r24
    66ac:	e1 f7       	brne	.-8      	; 0x66a6 <writeFlash+0x7e>
    66ae:	c0 17       	cp	r28, r16
    66b0:	d1 07       	cpc	r29, r17
    66b2:	48 f5       	brcc	.+82     	; 0x6706 <writeFlash+0xde>
    66b4:	08 94       	sec
    66b6:	e1 1c       	adc	r14, r1
    66b8:	f1 1c       	adc	r15, r1
    66ba:	88 e0       	ldi	r24, 0x08	; 8
    66bc:	91 e0       	ldi	r25, 0x01	; 1
    66be:	9c 01       	movw	r18, r24
    66c0:	e2 9e       	mul	r14, r18
    66c2:	c0 01       	movw	r24, r0
    66c4:	e3 9e       	mul	r14, r19
    66c6:	90 0d       	add	r25, r0
    66c8:	f2 9e       	mul	r15, r18
    66ca:	90 0d       	add	r25, r0
    66cc:	11 24       	eor	r1, r1
    66ce:	aa 27       	eor	r26, r26
    66d0:	97 fd       	sbrc	r25, 7
    66d2:	a0 95       	com	r26
    66d4:	ba 2f       	mov	r27, r26
    66d6:	80 93 88 03 	sts	0x0388, r24
    66da:	90 93 89 03 	sts	0x0389, r25
    66de:	a0 93 8a 03 	sts	0x038A, r26
    66e2:	b0 93 8b 03 	sts	0x038B, r27
    66e6:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    66ea:	88 23       	and	r24, r24
    66ec:	e1 f7       	brne	.-8      	; 0x66e6 <writeFlash+0xbe>
    66ee:	0c 1b       	sub	r16, r28
    66f0:	1d 0b       	sbc	r17, r29
    66f2:	c5 01       	movw	r24, r10
    66f4:	8c 0f       	add	r24, r28
    66f6:	9d 1f       	adc	r25, r29
    66f8:	b8 01       	movw	r22, r16
    66fa:	0e 94 19 32 	call	0x6432	; 0x6432 <dev_write_atmel_flash>
    66fe:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6702:	88 23       	and	r24, r24
    6704:	e1 f7       	brne	.-8      	; 0x66fe <writeFlash+0xd6>
    6706:	df 91       	pop	r29
    6708:	cf 91       	pop	r28
    670a:	1f 91       	pop	r17
    670c:	0f 91       	pop	r16
    670e:	ff 90       	pop	r15
    6710:	ef 90       	pop	r14
    6712:	df 90       	pop	r13
    6714:	bf 90       	pop	r11
    6716:	af 90       	pop	r10
    6718:	08 95       	ret
    671a:	e8 01       	movw	r28, r16
    671c:	bc cf       	rjmp	.-136    	; 0x6696 <writeFlash+0x6e>
    671e:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <atmel_flash_init>
    6722:	94 cf       	rjmp	.-216    	; 0x664c <writeFlash+0x24>

00006724 <dev_read_atmel_flash>:
    6724:	8f 92       	push	r8
    6726:	9f 92       	push	r9
    6728:	af 92       	push	r10
    672a:	bf 92       	push	r11
    672c:	cf 92       	push	r12
    672e:	df 92       	push	r13
    6730:	ef 92       	push	r14
    6732:	ff 92       	push	r15
    6734:	0f 93       	push	r16
    6736:	1f 93       	push	r17
    6738:	df 93       	push	r29
    673a:	cf 93       	push	r28
    673c:	cd b7       	in	r28, 0x3d	; 61
    673e:	de b7       	in	r29, 0x3e	; 62
    6740:	28 97       	sbiw	r28, 0x08	; 8
    6742:	0f b6       	in	r0, 0x3f	; 63
    6744:	f8 94       	cli
    6746:	de bf       	out	0x3e, r29	; 62
    6748:	0f be       	out	0x3f, r0	; 63
    674a:	cd bf       	out	0x3d, r28	; 61
    674c:	4c 01       	movw	r8, r24
    674e:	6b 01       	movw	r12, r22
    6750:	e0 90 88 03 	lds	r14, 0x0388
    6754:	f0 90 89 03 	lds	r15, 0x0389
    6758:	00 91 8a 03 	lds	r16, 0x038A
    675c:	10 91 8b 03 	lds	r17, 0x038B
    6760:	c8 01       	movw	r24, r16
    6762:	b7 01       	movw	r22, r14
    6764:	28 e0       	ldi	r18, 0x08	; 8
    6766:	31 e0       	ldi	r19, 0x01	; 1
    6768:	40 e0       	ldi	r20, 0x00	; 0
    676a:	50 e0       	ldi	r21, 0x00	; 0
    676c:	0e 94 9a 54 	call	0xa934	; 0xa934 <__udivmodsi4>
    6770:	59 01       	movw	r10, r18
    6772:	c8 01       	movw	r24, r16
    6774:	b7 01       	movw	r22, r14
    6776:	28 e0       	ldi	r18, 0x08	; 8
    6778:	31 e0       	ldi	r19, 0x01	; 1
    677a:	40 e0       	ldi	r20, 0x00	; 0
    677c:	50 e0       	ldi	r21, 0x00	; 0
    677e:	0e 94 9a 54 	call	0xa934	; 0xa934 <__udivmodsi4>
    6782:	8b 01       	movw	r16, r22
    6784:	80 91 8f 03 	lds	r24, 0x038F
    6788:	88 23       	and	r24, r24
    678a:	09 f1       	breq	.+66     	; 0x67ce <dev_read_atmel_flash+0xaa>
    678c:	20 91 8d 03 	lds	r18, 0x038D
    6790:	30 91 8e 03 	lds	r19, 0x038E
    6794:	2a 15       	cp	r18, r10
    6796:	3b 05       	cpc	r19, r11
    6798:	d0 f0       	brcs	.+52     	; 0x67ce <dev_read_atmel_flash+0xaa>
    679a:	c6 01       	movw	r24, r12
    679c:	80 0f       	add	r24, r16
    679e:	91 1f       	adc	r25, r17
    67a0:	68 e0       	ldi	r22, 0x08	; 8
    67a2:	71 e0       	ldi	r23, 0x01	; 1
    67a4:	0e 94 73 54 	call	0xa8e6	; 0xa8e6 <__udivmodhi4>
    67a8:	6a 0d       	add	r22, r10
    67aa:	7b 1d       	adc	r23, r11
    67ac:	62 17       	cp	r22, r18
    67ae:	73 07       	cpc	r23, r19
    67b0:	70 f0       	brcs	.+28     	; 0x67ce <dev_read_atmel_flash+0xaa>
    67b2:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    67b6:	88 23       	and	r24, r24
    67b8:	e1 f7       	brne	.-8      	; 0x67b2 <dev_read_atmel_flash+0x8e>
    67ba:	60 91 8d 03 	lds	r22, 0x038D
    67be:	70 91 8e 03 	lds	r23, 0x038E
    67c2:	80 91 8c 03 	lds	r24, 0x038C
    67c6:	0e 94 77 2f 	call	0x5eee	; 0x5eee <atmel_flash_flush_buffer>
    67ca:	10 92 8f 03 	sts	0x038F, r1
    67ce:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    67d2:	88 23       	and	r24, r24
    67d4:	e1 f7       	brne	.-8      	; 0x67ce <dev_read_atmel_flash+0xaa>
    67d6:	88 ee       	ldi	r24, 0xE8	; 232
    67d8:	89 83       	std	Y+1, r24	; 0x01
    67da:	c5 01       	movw	r24, r10
    67dc:	88 0f       	add	r24, r24
    67de:	89 2f       	mov	r24, r25
    67e0:	88 1f       	adc	r24, r24
    67e2:	99 0b       	sbc	r25, r25
    67e4:	91 95       	neg	r25
    67e6:	8a 83       	std	Y+2, r24	; 0x02
    67e8:	8a 2d       	mov	r24, r10
    67ea:	88 0f       	add	r24, r24
    67ec:	81 2b       	or	r24, r17
    67ee:	8b 83       	std	Y+3, r24	; 0x03
    67f0:	0c 83       	std	Y+4, r16	; 0x04
    67f2:	1d 82       	std	Y+5, r1	; 0x05
    67f4:	1e 82       	std	Y+6, r1	; 0x06
    67f6:	1f 82       	std	Y+7, r1	; 0x07
    67f8:	18 86       	std	Y+8, r1	; 0x08
    67fa:	8f b7       	in	r24, 0x3f	; 63
    67fc:	f8 94       	cli
    67fe:	95 98       	cbi	0x12, 5	; 18
    6800:	db 98       	cbi	0x1b, 3	; 27
    6802:	8f bf       	out	0x3f, r24	; 63
    6804:	8e 01       	movw	r16, r28
    6806:	0f 5f       	subi	r16, 0xFF	; 255
    6808:	1f 4f       	sbci	r17, 0xFF	; 255
    680a:	59 e0       	ldi	r21, 0x09	; 9
    680c:	e5 2e       	mov	r14, r21
    680e:	f1 2c       	mov	r15, r1
    6810:	ec 0e       	add	r14, r28
    6812:	fd 1e       	adc	r15, r29
    6814:	f8 01       	movw	r30, r16
    6816:	81 91       	ld	r24, Z+
    6818:	8f 01       	movw	r16, r30
    681a:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <atmel_flash_send_byte>
    681e:	0e 15       	cp	r16, r14
    6820:	1f 05       	cpc	r17, r15
    6822:	c1 f7       	brne	.-16     	; 0x6814 <dev_read_atmel_flash+0xf0>
    6824:	c1 14       	cp	r12, r1
    6826:	d1 04       	cpc	r13, r1
    6828:	69 f0       	breq	.+26     	; 0x6844 <dev_read_atmel_flash+0x120>
    682a:	00 e0       	ldi	r16, 0x00	; 0
    682c:	10 e0       	ldi	r17, 0x00	; 0
    682e:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <atmel_flash_get_byte>
    6832:	f4 01       	movw	r30, r8
    6834:	e0 0f       	add	r30, r16
    6836:	f1 1f       	adc	r31, r17
    6838:	80 83       	st	Z, r24
    683a:	0f 5f       	subi	r16, 0xFF	; 255
    683c:	1f 4f       	sbci	r17, 0xFF	; 255
    683e:	0c 15       	cp	r16, r12
    6840:	1d 05       	cpc	r17, r13
    6842:	a8 f3       	brcs	.-22     	; 0x682e <dev_read_atmel_flash+0x10a>
    6844:	db 9a       	sbi	0x1b, 3	; 27
    6846:	c6 01       	movw	r24, r12
    6848:	28 96       	adiw	r28, 0x08	; 8
    684a:	0f b6       	in	r0, 0x3f	; 63
    684c:	f8 94       	cli
    684e:	de bf       	out	0x3e, r29	; 62
    6850:	0f be       	out	0x3f, r0	; 63
    6852:	cd bf       	out	0x3d, r28	; 61
    6854:	cf 91       	pop	r28
    6856:	df 91       	pop	r29
    6858:	1f 91       	pop	r17
    685a:	0f 91       	pop	r16
    685c:	ff 90       	pop	r15
    685e:	ef 90       	pop	r14
    6860:	df 90       	pop	r13
    6862:	cf 90       	pop	r12
    6864:	bf 90       	pop	r11
    6866:	af 90       	pop	r10
    6868:	9f 90       	pop	r9
    686a:	8f 90       	pop	r8
    686c:	08 95       	ret

0000686e <readFlash>:
    686e:	af 92       	push	r10
    6870:	bf 92       	push	r11
    6872:	df 92       	push	r13
    6874:	ef 92       	push	r14
    6876:	ff 92       	push	r15
    6878:	0f 93       	push	r16
    687a:	1f 93       	push	r17
    687c:	cf 93       	push	r28
    687e:	df 93       	push	r29
    6880:	7c 01       	movw	r14, r24
    6882:	d6 2e       	mov	r13, r22
    6884:	5a 01       	movw	r10, r20
    6886:	89 01       	movw	r16, r18
    6888:	80 91 90 03 	lds	r24, 0x0390
    688c:	88 23       	and	r24, r24
    688e:	09 f4       	brne	.+2      	; 0x6892 <readFlash+0x24>
    6890:	69 c0       	rjmp	.+210    	; 0x6964 <readFlash+0xf6>
    6892:	6d 2d       	mov	r22, r13
    6894:	70 e0       	ldi	r23, 0x00	; 0
    6896:	88 e0       	ldi	r24, 0x08	; 8
    6898:	91 e0       	ldi	r25, 0x01	; 1
    689a:	9c 01       	movw	r18, r24
    689c:	e2 9e       	mul	r14, r18
    689e:	c0 01       	movw	r24, r0
    68a0:	e3 9e       	mul	r14, r19
    68a2:	90 0d       	add	r25, r0
    68a4:	f2 9e       	mul	r15, r18
    68a6:	90 0d       	add	r25, r0
    68a8:	11 24       	eor	r1, r1
    68aa:	86 0f       	add	r24, r22
    68ac:	97 1f       	adc	r25, r23
    68ae:	aa 27       	eor	r26, r26
    68b0:	97 fd       	sbrc	r25, 7
    68b2:	a0 95       	com	r26
    68b4:	ba 2f       	mov	r27, r26
    68b6:	80 93 88 03 	sts	0x0388, r24
    68ba:	90 93 89 03 	sts	0x0389, r25
    68be:	a0 93 8a 03 	sts	0x038A, r26
    68c2:	b0 93 8b 03 	sts	0x038B, r27
    68c6:	c8 01       	movw	r24, r16
    68c8:	86 0f       	add	r24, r22
    68ca:	97 1f       	adc	r25, r23
    68cc:	81 50       	subi	r24, 0x01	; 1
    68ce:	91 40       	sbci	r25, 0x01	; 1
    68d0:	0c f4       	brge	.+2      	; 0x68d4 <readFlash+0x66>
    68d2:	46 c0       	rjmp	.+140    	; 0x6960 <readFlash+0xf2>
    68d4:	c0 e0       	ldi	r28, 0x00	; 0
    68d6:	d1 e0       	ldi	r29, 0x01	; 1
    68d8:	c6 1b       	sub	r28, r22
    68da:	d7 0b       	sbc	r29, r23
    68dc:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    68e0:	88 23       	and	r24, r24
    68e2:	e1 f7       	brne	.-8      	; 0x68dc <readFlash+0x6e>
    68e4:	c5 01       	movw	r24, r10
    68e6:	be 01       	movw	r22, r28
    68e8:	0e 94 92 33 	call	0x6724	; 0x6724 <dev_read_atmel_flash>
    68ec:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    68f0:	88 23       	and	r24, r24
    68f2:	e1 f7       	brne	.-8      	; 0x68ec <readFlash+0x7e>
    68f4:	c0 17       	cp	r28, r16
    68f6:	d1 07       	cpc	r29, r17
    68f8:	48 f5       	brcc	.+82     	; 0x694c <readFlash+0xde>
    68fa:	08 94       	sec
    68fc:	e1 1c       	adc	r14, r1
    68fe:	f1 1c       	adc	r15, r1
    6900:	88 e0       	ldi	r24, 0x08	; 8
    6902:	91 e0       	ldi	r25, 0x01	; 1
    6904:	9c 01       	movw	r18, r24
    6906:	e2 9e       	mul	r14, r18
    6908:	c0 01       	movw	r24, r0
    690a:	e3 9e       	mul	r14, r19
    690c:	90 0d       	add	r25, r0
    690e:	f2 9e       	mul	r15, r18
    6910:	90 0d       	add	r25, r0
    6912:	11 24       	eor	r1, r1
    6914:	aa 27       	eor	r26, r26
    6916:	97 fd       	sbrc	r25, 7
    6918:	a0 95       	com	r26
    691a:	ba 2f       	mov	r27, r26
    691c:	80 93 88 03 	sts	0x0388, r24
    6920:	90 93 89 03 	sts	0x0389, r25
    6924:	a0 93 8a 03 	sts	0x038A, r26
    6928:	b0 93 8b 03 	sts	0x038B, r27
    692c:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6930:	88 23       	and	r24, r24
    6932:	e1 f7       	brne	.-8      	; 0x692c <readFlash+0xbe>
    6934:	0c 1b       	sub	r16, r28
    6936:	1d 0b       	sbc	r17, r29
    6938:	c5 01       	movw	r24, r10
    693a:	8c 0f       	add	r24, r28
    693c:	9d 1f       	adc	r25, r29
    693e:	b8 01       	movw	r22, r16
    6940:	0e 94 92 33 	call	0x6724	; 0x6724 <dev_read_atmel_flash>
    6944:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <atmel_flash_busy>
    6948:	88 23       	and	r24, r24
    694a:	e1 f7       	brne	.-8      	; 0x6944 <readFlash+0xd6>
    694c:	df 91       	pop	r29
    694e:	cf 91       	pop	r28
    6950:	1f 91       	pop	r17
    6952:	0f 91       	pop	r16
    6954:	ff 90       	pop	r15
    6956:	ef 90       	pop	r14
    6958:	df 90       	pop	r13
    695a:	bf 90       	pop	r11
    695c:	af 90       	pop	r10
    695e:	08 95       	ret
    6960:	e8 01       	movw	r28, r16
    6962:	bc cf       	rjmp	.-136    	; 0x68dc <readFlash+0x6e>
    6964:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <atmel_flash_init>
    6968:	94 cf       	rjmp	.-216    	; 0x6892 <readFlash+0x24>

0000696a <copyPage>:
    writeFlash(pagenum, offset, buffer, NumOfBytes);
}

void copyPage(int sourcepage, int targetpage)
{		
    696a:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <copyFlash>
	   copyFlash(sourcepage, targetpage); 
}
    696e:	08 95       	ret

00006970 <writepagestorage>:
    6970:	0e 94 14 33 	call	0x6628	; 0x6628 <writeFlash>
    6974:	08 95       	ret

00006976 <readpagestorage>:
    6976:	0e 94 37 34 	call	0x686e	; 0x686e <readFlash>
    697a:	08 95       	ret

0000697c <pagestorageinit>:
    697c:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <atmel_flash_init>
    6980:	08 95       	ret

00006982 <getpagenumber>:
    6982:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <atmel_flash_pagenumber>
    6986:	08 95       	ret

00006988 <getpagesize>:
    6988:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <atmel_flash_pagesize>
    698c:	08 95       	ret

0000698e <HPLClock_Timer3_Start>:
volatile uint16_t lowcounter;
volatile uint32_t historyvalue; 

void HPLClock_Timer3_Start()
{
    698e:	ea e8       	ldi	r30, 0x8A	; 138
    6990:	f0 e0       	ldi	r31, 0x00	; 0
    6992:	80 81       	ld	r24, Z
    6994:	81 60       	ori	r24, 0x01	; 1
    6996:	80 83       	st	Z, r24
    //Prescaler 0
    //TCCR1B |= (1 << 0); // Timer1 (Clock)
    //Set up the tccr to be driven by the clock with cycle wise driven 
    sbi(TCCR3B, CS30);
    //Configure Timer1 to be CTC mode 
    sbi(TCCR3B, WGM32);
    6998:	80 81       	ld	r24, Z
    699a:	88 60       	ori	r24, 0x08	; 8
    699c:	80 83       	st	Z, r24
    //Enable interrupt 
    sbi(ETIMSK, OCIE3A);
    699e:	ed e7       	ldi	r30, 0x7D	; 125
    69a0:	f0 e0       	ldi	r31, 0x00	; 0
    69a2:	80 81       	ld	r24, Z
    69a4:	80 61       	ori	r24, 0x10	; 16
    69a6:	80 83       	st	Z, r24

    sbi(ETIFR, OCF3A);
    69a8:	ec e7       	ldi	r30, 0x7C	; 124
    69aa:	f0 e0       	ldi	r31, 0x00	; 0
    69ac:	80 81       	ld	r24, Z
    69ae:	80 61       	ori	r24, 0x10	; 16
    69b0:	80 83       	st	Z, r24
    //Once the 50000 compared, then itnerrupt 
    //So one interrupt every 50000 cpu cycles 
    OCR3A = 50000;
    69b2:	80 e5       	ldi	r24, 0x50	; 80
    69b4:	93 ec       	ldi	r25, 0xC3	; 195
    69b6:	90 93 87 00 	sts	0x0087, r25
    69ba:	80 93 86 00 	sts	0x0086, r24
    //Counters 
    lowcounter = highcounter = 0;
    69be:	10 92 cb 05 	sts	0x05CB, r1
    69c2:	10 92 ca 05 	sts	0x05CA, r1
    69c6:	80 91 ca 05 	lds	r24, 0x05CA
    69ca:	90 91 cb 05 	lds	r25, 0x05CB
    69ce:	90 93 d1 05 	sts	0x05D1, r25
    69d2:	80 93 d0 05 	sts	0x05D0, r24
    //Zero timer
    TCNT3 = 0;
    69d6:	10 92 89 00 	sts	0x0089, r1
    69da:	10 92 88 00 	sts	0x0088, r1
	historyvalue = 0; 
    69de:	10 92 c6 05 	sts	0x05C6, r1
    69e2:	10 92 c7 05 	sts	0x05C7, r1
    69e6:	10 92 c8 05 	sts	0x05C8, r1
    69ea:	10 92 c9 05 	sts	0x05C9, r1
}
    69ee:	08 95       	ret

000069f0 <HPLClock_Timer3_Stop>:

//-------------------------------------------------------------------------
void HPLClock_Timer3_Stop()
{
    69f0:	ea e8       	ldi	r30, 0x8A	; 138
    69f2:	f0 e0       	ldi	r31, 0x00	; 0
    69f4:	80 81       	ld	r24, Z
    69f6:	8e 7f       	andi	r24, 0xFE	; 254
    69f8:	80 83       	st	Z, r24
    //stop the timer 
    cbi(TCCR3B, CS30);
}
    69fa:	08 95       	ret

000069fc <HPLClock_readTimeCounterHigh>:

//-------------------------------------------------------------------------
uint16_t HPLClock_readTimeCounterHigh()
{
    69fc:	20 91 ca 05 	lds	r18, 0x05CA
    6a00:	30 91 cb 05 	lds	r19, 0x05CB
    return highcounter;
}
    6a04:	c9 01       	movw	r24, r18
    6a06:	08 95       	ret

00006a08 <HPLClock_readTimeCounterLow>:

//-------------------------------------------------------------------------
inline uint32_t HPLClock_readTimeCounterLow()
{
    6a08:	1f 93       	push	r17
    6a0a:	cf 93       	push	r28
    6a0c:	df 93       	push	r29
    uint16_t temp;
    uint16_t m;
    uint32_t retval;
    uint16_t tempcounter;
    unsigned char sreg;

    sreg = SREG;
    6a0e:	1f b7       	in	r17, 0x3f	; 63
    //Disable interrupt
    asm volatile ("cli");
    6a10:	f8 94       	cli

    temp = TCNT3;
    6a12:	c0 91 88 00 	lds	r28, 0x0088
    6a16:	d0 91 89 00 	lds	r29, 0x0089
    //check against the problem when the read of TCNT is not atomic 
    m = temp & 0xff;
    if ((m == 0xfe) || (m == 0xff))
    6a1a:	ce 01       	movw	r24, r28
    6a1c:	90 70       	andi	r25, 0x00	; 0
    6a1e:	8e 5f       	subi	r24, 0xFE	; 254
    6a20:	90 40       	sbci	r25, 0x00	; 0
    6a22:	02 97       	sbiw	r24, 0x02	; 2
    6a24:	c0 f1       	brcs	.+112    	; 0x6a96 <HPLClock_readTimeCounterLow+0x8e>
    {
        temp = temp - 0x100;
    }
    //Solve the problem that the counter might should have increased 
    if (temp <= 1)
    6a26:	c2 30       	cpi	r28, 0x02	; 2
    6a28:	d1 05       	cpc	r29, r1
    6a2a:	d0 f1       	brcs	.+116    	; 0x6aa0 <HPLClock_readTimeCounterLow+0x98>
    {
        tempcounter = lowcounter + 1;
    }
    else
    {
        tempcounter = lowcounter;
    6a2c:	60 91 d0 05 	lds	r22, 0x05D0
    6a30:	70 91 d1 05 	lds	r23, 0x05D1
    }
    //get the return value 
    retval = (((uint32_t) tempcounter) * 50000) + (uint32_t) temp;
    6a34:	80 e0       	ldi	r24, 0x00	; 0
    6a36:	90 e0       	ldi	r25, 0x00	; 0
    6a38:	20 e5       	ldi	r18, 0x50	; 80
    6a3a:	33 ec       	ldi	r19, 0xC3	; 195
    6a3c:	40 e0       	ldi	r20, 0x00	; 0
    6a3e:	50 e0       	ldi	r21, 0x00	; 0
    6a40:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <__mulsi3>
    6a44:	9b 01       	movw	r18, r22
    6a46:	ac 01       	movw	r20, r24
    6a48:	ce 01       	movw	r24, r28
    6a4a:	a0 e0       	ldi	r26, 0x00	; 0
    6a4c:	b0 e0       	ldi	r27, 0x00	; 0
    6a4e:	28 0f       	add	r18, r24
    6a50:	39 1f       	adc	r19, r25
    6a52:	4a 1f       	adc	r20, r26
    6a54:	5b 1f       	adc	r21, r27
    //restore sreg
    SREG = sreg;
    6a56:	1f bf       	out	0x3f, r17	; 63
    //return 
	if (historyvalue > retval)
    6a58:	80 91 c6 05 	lds	r24, 0x05C6
    6a5c:	90 91 c7 05 	lds	r25, 0x05C7
    6a60:	a0 91 c8 05 	lds	r26, 0x05C8
    6a64:	b0 91 c9 05 	lds	r27, 0x05C9
    6a68:	28 17       	cp	r18, r24
    6a6a:	39 07       	cpc	r19, r25
    6a6c:	4a 07       	cpc	r20, r26
    6a6e:	5b 07       	cpc	r21, r27
    6a70:	20 f4       	brcc	.+8      	; 0x6a7a <HPLClock_readTimeCounterLow+0x72>
	 {
	  retval += 50000;
    6a72:	20 5b       	subi	r18, 0xB0	; 176
    6a74:	3c 43       	sbci	r19, 0x3C	; 60
    6a76:	4f 4f       	sbci	r20, 0xFF	; 255
    6a78:	5f 4f       	sbci	r21, 0xFF	; 255
	  
	 }

   historyvalue = retval; 
    6a7a:	20 93 c6 05 	sts	0x05C6, r18
    6a7e:	30 93 c7 05 	sts	0x05C7, r19
    6a82:	40 93 c8 05 	sts	0x05C8, r20
    6a86:	50 93 c9 05 	sts	0x05C9, r21
	 
    

    return retval;
}
    6a8a:	b9 01       	movw	r22, r18
    6a8c:	ca 01       	movw	r24, r20
    6a8e:	df 91       	pop	r29
    6a90:	cf 91       	pop	r28
    6a92:	1f 91       	pop	r17
    6a94:	08 95       	ret
    6a96:	c0 50       	subi	r28, 0x00	; 0
    6a98:	d1 40       	sbci	r29, 0x01	; 1
    6a9a:	c2 30       	cpi	r28, 0x02	; 2
    6a9c:	d1 05       	cpc	r29, r1
    6a9e:	30 f6       	brcc	.-116    	; 0x6a2c <HPLClock_readTimeCounterLow+0x24>
    6aa0:	60 91 d0 05 	lds	r22, 0x05D0
    6aa4:	70 91 d1 05 	lds	r23, 0x05D1
    6aa8:	6f 5f       	subi	r22, 0xFF	; 255
    6aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    6aac:	c3 cf       	rjmp	.-122    	; 0x6a34 <HPLClock_readTimeCounterLow+0x2c>

00006aae <HPLClock_Clock_readCounter>:

//-------------------------------------------------------------------------
inline uint8_t HPLClock_Clock_readCounter(void)
{
    6aae:	82 b7       	in	r24, 0x32	; 50
    return TCNT0;
    //return * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x32 + 0x20);
}
    6ab0:	08 95       	ret

00006ab2 <HPLClock_Clock_getInterval>:

//-------------------------------------------------------------------------

inline uint8_t HPLClock_Clock_getInterval(void)
{
    6ab2:	81 b7       	in	r24, 0x31	; 49
    return OCR0;
    //return * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20);
}
    6ab4:	08 95       	ret

00006ab6 <HPLClock_Clock_setInterval>:

//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_fire(void)
{
    unsigned char result;

    result = TimerM_Clock_fire();
    return result;
}

//-------------------------------------------------------------------------
inline void HPLClock_Clock_setInterval(uint8_t value)
{
    6ab6:	81 bf       	out	0x31, r24	; 49
    OCR0 = value;
    //* (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20) = value;
}
    6ab8:	08 95       	ret

00006aba <__vector_26>:

//-------------------------------------------------------------------------
inline result_t HPLClock_Clock_setRate(char interval, char scale)
{
    scale &= 0x7;
    scale |= 0x8;
    //shoudl be 1011 here in scale 
    {
        _atomic_t _atomic = _atomic_start();

        {
            cbi(TIMSK, TOIE0);
            cbi(TIMSK, OCIE0);  //Disable TC0 interrupt
            sbi(ASSR, AS0);     //set Timer/Counter0 to be asynchronous
            //from the CPU clock with a second external
            //clock(32,768kHz)driving it.
            outp(scale, TCCR0); //prescale the timer to be clock/128 to make it
            outp(0, TCNT0);
            outp(interval, OCR0);
            sbi(TIMSK, OCIE0);
            /* * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x37 + 0x20) &= ~(1 << 0);
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x37 + 0x20) &= ~(1 << 1);
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x30 + 0x20) |= 1 << 3;
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x33 + 0x20) = scale;
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x32 + 0x20) = 0;
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20) = interval;
             * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x37 + 0x20) |= 1 << 1;
             */
        }
        _atomic_end(_atomic);
    }
    return SUCCESS;
}

//-------------------------------------------------------------------------
_INTERRUPT(SIG_OUTPUT_COMPARE0)
{
    _atomic_t _atomic;
    uint8_t isthreadtrue;

    isthreadtrue = 0;
    _atomic = _atomic_start();
    if (is_thread())
    {
        isthreadtrue = 1;
        SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);
    }
    _atomic_end(_atomic);
    {
        _atomic = _atomic_start();
        {
            if (HPLClock_set_flag)
            {
                HPLClock_mscale = HPLClock_nextScale;
                HPLClock_nextScale |= 0x8;
                outp(HPLClock_nextScale, TCCR0);
                outp(HPLClock_minterval, OCR0);
                HPLClock_set_flag = 0;
            }
        }
        _atomic_end(_atomic);
    }
    HPLClock_Clock_fire();
    _atomic = _atomic_start();
    if (isthreadtrue == 1)
    {
        isthreadtrue = 0;
        SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);
        //thread_yield();
    }
    _atomic_end(_atomic);
    //SHOWME(timer 0 end\n);
}

//_INTERRUPT(SIG_OUTPUT_COMPARE0)
//void __vector_15() __attribute__ ((interrupt, spontaneous, C))
//void __attribute((interrupt))   __vector_15(void)
ISR(TIMER3_COMPA_vect)
{
    6aba:	1f 92       	push	r1
    6abc:	0f 92       	push	r0
    6abe:	0f b6       	in	r0, 0x3f	; 63
    6ac0:	0f 92       	push	r0
    6ac2:	0b b6       	in	r0, 0x3b	; 59
    6ac4:	0f 92       	push	r0
    6ac6:	11 24       	eor	r1, r1
    6ac8:	2f 93       	push	r18
    6aca:	3f 93       	push	r19
    6acc:	4f 93       	push	r20
    6ace:	5f 93       	push	r21
    6ad0:	6f 93       	push	r22
    6ad2:	7f 93       	push	r23
    6ad4:	8f 93       	push	r24
    6ad6:	9f 93       	push	r25
    6ad8:	af 93       	push	r26
    6ada:	bf 93       	push	r27
    6adc:	ef 93       	push	r30
    6ade:	ff 93       	push	r31
    _atomic_t _atomic;

    _atomic = _atomic_start_avr();
    6ae0:	0e 94 1d 02 	call	0x43a	; 0x43a <_atomic_start_avr>
    6ae4:	28 2f       	mov	r18, r24
    lowcounter++;
    6ae6:	80 91 d0 05 	lds	r24, 0x05D0
    6aea:	90 91 d1 05 	lds	r25, 0x05D1
    6aee:	01 96       	adiw	r24, 0x01	; 1
    6af0:	90 93 d1 05 	sts	0x05D1, r25
    6af4:	80 93 d0 05 	sts	0x05D0, r24
    if (lowcounter == 50000)
    6af8:	80 91 d0 05 	lds	r24, 0x05D0
    6afc:	90 91 d1 05 	lds	r25, 0x05D1
    6b00:	80 55       	subi	r24, 0x50	; 80
    6b02:	93 4c       	sbci	r25, 0xC3	; 195
    6b04:	69 f4       	brne	.+26     	; 0x6b20 <__vector_26+0x66>
    {
        highcounter++;
    6b06:	80 91 ca 05 	lds	r24, 0x05CA
    6b0a:	90 91 cb 05 	lds	r25, 0x05CB
    6b0e:	01 96       	adiw	r24, 0x01	; 1
    6b10:	90 93 cb 05 	sts	0x05CB, r25
    6b14:	80 93 ca 05 	sts	0x05CA, r24
        lowcounter = 0;
    6b18:	10 92 d1 05 	sts	0x05D1, r1
    6b1c:	10 92 d0 05 	sts	0x05D0, r1
    }
    _atomic_end_avr(_atomic);
    6b20:	82 2f       	mov	r24, r18
    6b22:	0e 94 20 02 	call	0x440	; 0x440 <_atomic_end_avr>
}
    6b26:	ff 91       	pop	r31
    6b28:	ef 91       	pop	r30
    6b2a:	bf 91       	pop	r27
    6b2c:	af 91       	pop	r26
    6b2e:	9f 91       	pop	r25
    6b30:	8f 91       	pop	r24
    6b32:	7f 91       	pop	r23
    6b34:	6f 91       	pop	r22
    6b36:	5f 91       	pop	r21
    6b38:	4f 91       	pop	r20
    6b3a:	3f 91       	pop	r19
    6b3c:	2f 91       	pop	r18
    6b3e:	0f 90       	pop	r0
    6b40:	0b be       	out	0x3b, r0	; 59
    6b42:	0f 90       	pop	r0
    6b44:	0f be       	out	0x3f, r0	; 63
    6b46:	0f 90       	pop	r0
    6b48:	1f 90       	pop	r1
    6b4a:	18 95       	reti

00006b4c <HPLClock_Clock_setRate>:
    6b4c:	0f 93       	push	r16
    6b4e:	1f 93       	push	r17
    6b50:	08 2f       	mov	r16, r24
    6b52:	16 2f       	mov	r17, r22
    6b54:	17 70       	andi	r17, 0x07	; 7
    6b56:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    6b5a:	97 b7       	in	r25, 0x37	; 55
    6b5c:	9e 7f       	andi	r25, 0xFE	; 254
    6b5e:	97 bf       	out	0x37, r25	; 55
    6b60:	97 b7       	in	r25, 0x37	; 55
    6b62:	9d 7f       	andi	r25, 0xFD	; 253
    6b64:	97 bf       	out	0x37, r25	; 55
    6b66:	90 b7       	in	r25, 0x30	; 48
    6b68:	98 60       	ori	r25, 0x08	; 8
    6b6a:	90 bf       	out	0x30, r25	; 48
    6b6c:	18 60       	ori	r17, 0x08	; 8
    6b6e:	13 bf       	out	0x33, r17	; 51
    6b70:	12 be       	out	0x32, r1	; 50
    6b72:	01 bf       	out	0x31, r16	; 49
    6b74:	97 b7       	in	r25, 0x37	; 55
    6b76:	92 60       	ori	r25, 0x02	; 2
    6b78:	97 bf       	out	0x37, r25	; 55
    6b7a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    6b7e:	81 e0       	ldi	r24, 0x01	; 1
    6b80:	1f 91       	pop	r17
    6b82:	0f 91       	pop	r16
    6b84:	08 95       	ret

00006b86 <HPLClock_Clock_fire>:
    6b86:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <TimerM_Clock_fire>
    6b8a:	08 95       	ret

00006b8c <__vector_15>:
    6b8c:	78 94       	sei
    6b8e:	1f 92       	push	r1
    6b90:	0f 92       	push	r0
    6b92:	0f b6       	in	r0, 0x3f	; 63
    6b94:	0f 92       	push	r0
    6b96:	0b b6       	in	r0, 0x3b	; 59
    6b98:	0f 92       	push	r0
    6b9a:	11 24       	eor	r1, r1
    6b9c:	0f 93       	push	r16
    6b9e:	1f 93       	push	r17
    6ba0:	2f 93       	push	r18
    6ba2:	3f 93       	push	r19
    6ba4:	4f 93       	push	r20
    6ba6:	5f 93       	push	r21
    6ba8:	6f 93       	push	r22
    6baa:	7f 93       	push	r23
    6bac:	8f 93       	push	r24
    6bae:	9f 93       	push	r25
    6bb0:	af 93       	push	r26
    6bb2:	bf 93       	push	r27
    6bb4:	ef 93       	push	r30
    6bb6:	ff 93       	push	r31
    6bb8:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    6bbc:	18 2f       	mov	r17, r24
    6bbe:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <is_thread>
    6bc2:	88 23       	and	r24, r24
    6bc4:	09 f0       	breq	.+2      	; 0x6bc8 <__vector_15+0x3c>
    6bc6:	46 c0       	rjmp	.+140    	; 0x6c54 <__vector_15+0xc8>
    6bc8:	00 e0       	ldi	r16, 0x00	; 0
    6bca:	81 2f       	mov	r24, r17
    6bcc:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    6bd0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    6bd4:	98 2f       	mov	r25, r24
    6bd6:	80 91 ce 05 	lds	r24, 0x05CE
    6bda:	88 23       	and	r24, r24
    6bdc:	69 f0       	breq	.+26     	; 0x6bf8 <__vector_15+0x6c>
    6bde:	80 91 cd 05 	lds	r24, 0x05CD
    6be2:	80 93 cc 05 	sts	0x05CC, r24
    6be6:	88 60       	ori	r24, 0x08	; 8
    6be8:	80 93 cd 05 	sts	0x05CD, r24
    6bec:	83 bf       	out	0x33, r24	; 51
    6bee:	80 91 cf 05 	lds	r24, 0x05CF
    6bf2:	81 bf       	out	0x31, r24	; 49
    6bf4:	10 92 ce 05 	sts	0x05CE, r1
    6bf8:	89 2f       	mov	r24, r25
    6bfa:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    6bfe:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <TimerM_Clock_fire>
    6c02:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    6c06:	28 2f       	mov	r18, r24
    6c08:	01 30       	cpi	r16, 0x01	; 1
    6c0a:	61 f4       	brne	.+24     	; 0x6c24 <__vector_15+0x98>
    6c0c:	8d b7       	in	r24, 0x3d	; 61
    6c0e:	9e b7       	in	r25, 0x3e	; 62
    6c10:	90 93 4f 05 	sts	0x054F, r25
    6c14:	80 93 4e 05 	sts	0x054E, r24
    6c18:	80 91 a1 05 	lds	r24, 0x05A1
    6c1c:	90 91 a2 05 	lds	r25, 0x05A2
    6c20:	9e bf       	out	0x3e, r25	; 62
    6c22:	8d bf       	out	0x3d, r24	; 61
    6c24:	82 2f       	mov	r24, r18
    6c26:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    6c2a:	ff 91       	pop	r31
    6c2c:	ef 91       	pop	r30
    6c2e:	bf 91       	pop	r27
    6c30:	af 91       	pop	r26
    6c32:	9f 91       	pop	r25
    6c34:	8f 91       	pop	r24
    6c36:	7f 91       	pop	r23
    6c38:	6f 91       	pop	r22
    6c3a:	5f 91       	pop	r21
    6c3c:	4f 91       	pop	r20
    6c3e:	3f 91       	pop	r19
    6c40:	2f 91       	pop	r18
    6c42:	1f 91       	pop	r17
    6c44:	0f 91       	pop	r16
    6c46:	0f 90       	pop	r0
    6c48:	0b be       	out	0x3b, r0	; 59
    6c4a:	0f 90       	pop	r0
    6c4c:	0f be       	out	0x3f, r0	; 63
    6c4e:	0f 90       	pop	r0
    6c50:	1f 90       	pop	r1
    6c52:	18 95       	reti
    6c54:	8d b7       	in	r24, 0x3d	; 61
    6c56:	9e b7       	in	r25, 0x3e	; 62
    6c58:	90 93 a2 05 	sts	0x05A2, r25
    6c5c:	80 93 a1 05 	sts	0x05A1, r24
    6c60:	80 91 4e 05 	lds	r24, 0x054E
    6c64:	90 91 4f 05 	lds	r25, 0x054F
    6c68:	9e bf       	out	0x3e, r25	; 62
    6c6a:	8d bf       	out	0x3d, r24	; 61
    6c6c:	01 e0       	ldi	r16, 0x01	; 1
    6c6e:	ad cf       	rjmp	.-166    	; 0x6bca <__vector_15+0x3e>

00006c70 <timercallbackinvoke>:
}

//-------------------------------------------------------------------------
void timercallbackinvoke(uint8_t id)
{
    6c70:	e8 2f       	mov	r30, r24
    6c72:	e2 51       	subi	r30, 0x12	; 18
    6c74:	f0 e0       	ldi	r31, 0x00	; 0
    6c76:	ee 0f       	add	r30, r30
    6c78:	ff 1f       	adc	r31, r31
    6c7a:	eb 52       	subi	r30, 0x2B	; 43
    6c7c:	fa 4f       	sbci	r31, 0xFA	; 250
    6c7e:	01 90       	ld	r0, Z+
    6c80:	f0 81       	ld	r31, Z
    6c82:	e0 2d       	mov	r30, r0
    6c84:	30 97       	sbiw	r30, 0x00	; 0
    6c86:	09 f0       	breq	.+2      	; 0x6c8a <timercallbackinvoke+0x1a>
    uint8_t index = id - 18;

    if (timercallback[index] != NULL)
    {
        (*timercallback[index]) ();
    6c88:	09 95       	icall
    6c8a:	08 95       	ret

00006c8c <GenericTimerFired>:
    }
}

//This function is called from the particular implementation!
//This function also contains platform related defintions 
//0, 1, 2, AND 10, 11 are reserved. User is suggested to start with id 20. 
inline result_t GenericTimerFired(uint8_t id)
{
    6c8c:	86 30       	cpi	r24, 0x06	; 6
    6c8e:	09 f4       	brne	.+2      	; 0x6c92 <GenericTimerFired+0x6>
    6c90:	6d c0       	rjmp	.+218    	; 0x6d6c <GenericTimerFired+0xe0>
    6c92:	87 30       	cpi	r24, 0x07	; 7
    6c94:	70 f0       	brcs	.+28     	; 0x6cb2 <GenericTimerFired+0x26>
    6c96:	8a 30       	cpi	r24, 0x0A	; 10
    6c98:	09 f4       	brne	.+2      	; 0x6c9c <GenericTimerFired+0x10>
    6c9a:	59 c0       	rjmp	.+178    	; 0x6d4e <GenericTimerFired+0xc2>
    6c9c:	8b 30       	cpi	r24, 0x0B	; 11
    6c9e:	b8 f4       	brcc	.+46     	; 0x6cce <GenericTimerFired+0x42>
    6ca0:	87 30       	cpi	r24, 0x07	; 7
    6ca2:	09 f4       	brne	.+2      	; 0x6ca6 <GenericTimerFired+0x1a>
    6ca4:	50 c0       	rjmp	.+160    	; 0x6d46 <GenericTimerFired+0xba>
    6ca6:	89 30       	cpi	r24, 0x09	; 9
    6ca8:	11 f0       	breq	.+4      	; 0x6cae <GenericTimerFired+0x22>


    unsigned char result;
    
    //0, 1, 2 for threads
    switch (id)
    {
    case 0:
        ServiceTimerFired(0);
        break;
    case 1:
        ServiceTimerFired(1);
        break;
    case 2:
        ServiceTimerFired(2);
        break;
    case 3:
        ServiceTimerFired(3);
        break;
    case 4:
        ServiceTimerFired(4);
        break;
    case 5:
        ServiceTimerFired(5);
        break;
    case 6:
        ServiceTimerFired(6);
        break;
    case 7:
        ServiceTimerFired(7);
        break;
    case 9:

#ifdef PLATFORM_CPU_MEASURE
        {
            _atomic_t currentatomic;

            currentatomic = _atomic_start();
            usartPutLong(cpucounter);
            _atomic_end(currentatomic);
        }
#endif
        break;
#if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    case 10:
        hplcc2420interruptm_FIFOTimer_fired();
        break;
    case 11:
        hplcc2420interruptm_CCATimer_fired();
        break;
#endif
   case 12:
	   #ifdef ENERGY_INSTRUMENTATION
	   //postTask(rechargetask, 10); 
	   #endif
	   break;  
       
   case 15:
      // #ifdef ENERGY_INSTRUMENTATION
       //showstatus();
	    //  #endif
	      
	      {
	      	
	      	datapayload *p = (datapayload *)datamsg.data; 
	      	p->index = currentcounter; 
	      	p->power = currentpower;
            cc2420controlm_CC2420Control_TunePower(currentpower); 

	      	if (enabled == true)
	      	{	        
	        Leds_redToggle();
	        AMStandard_SendMsg_send(16, 0xFFFF, 10, &datamsg);
	        }
	      	currentcounter++;
	      	if (currentcounter == 500)
	      		 { currentcounter = 0;
	      		 	 currentpower+=3;
	      		 }
	      	if (currentpower == 21)
	      		 enabled = false; 
	      }
       break; 
	
    default:
        timercallbackinvoke(id);
    6caa:	0e 94 38 36 	call	0x6c70	; 0x6c70 <timercallbackinvoke>
        result = SUCCESS;
    }
    return SUCCESS;
}
    6cae:	81 e0       	ldi	r24, 0x01	; 1
    6cb0:	08 95       	ret
    6cb2:	82 30       	cpi	r24, 0x02	; 2
    6cb4:	09 f4       	brne	.+2      	; 0x6cb8 <GenericTimerFired+0x2c>
    6cb6:	56 c0       	rjmp	.+172    	; 0x6d64 <GenericTimerFired+0xd8>
    6cb8:	83 30       	cpi	r24, 0x03	; 3
    6cba:	a8 f1       	brcs	.+106    	; 0x6d26 <GenericTimerFired+0x9a>
    6cbc:	84 30       	cpi	r24, 0x04	; 4
    6cbe:	09 f4       	brne	.+2      	; 0x6cc2 <GenericTimerFired+0x36>
    6cc0:	49 c0       	rjmp	.+146    	; 0x6d54 <GenericTimerFired+0xc8>
    6cc2:	85 30       	cpi	r24, 0x05	; 5
    6cc4:	c8 f1       	brcs	.+114    	; 0x6d38 <GenericTimerFired+0xac>
    6cc6:	85 e0       	ldi	r24, 0x05	; 5
    6cc8:	0e 94 75 1b 	call	0x36ea	; 0x36ea <ServiceTimerFired>
    6ccc:	f0 cf       	rjmp	.-32     	; 0x6cae <GenericTimerFired+0x22>
    6cce:	8c 30       	cpi	r24, 0x0C	; 12
    6cd0:	71 f3       	breq	.-36     	; 0x6cae <GenericTimerFired+0x22>
    6cd2:	8c 30       	cpi	r24, 0x0C	; 12
    6cd4:	a8 f1       	brcs	.+106    	; 0x6d40 <GenericTimerFired+0xb4>
    6cd6:	8f 30       	cpi	r24, 0x0F	; 15
    6cd8:	41 f7       	brne	.-48     	; 0x6caa <GenericTimerFired+0x1e>
    6cda:	80 91 d3 05 	lds	r24, 0x05D3
    6cde:	90 91 d4 05 	lds	r25, 0x05D4
    6ce2:	90 93 f0 05 	sts	0x05F0, r25
    6ce6:	80 93 ef 05 	sts	0x05EF, r24
    6cea:	80 91 59 06 	lds	r24, 0x0659
    6cee:	80 93 f1 05 	sts	0x05F1, r24
    6cf2:	0e 94 22 0b 	call	0x1644	; 0x1644 <cc2420controlm_CC2420Control_TunePower>
    6cf6:	80 91 d2 05 	lds	r24, 0x05D2
    6cfa:	81 30       	cpi	r24, 0x01	; 1
    6cfc:	09 f4       	brne	.+2      	; 0x6d00 <GenericTimerFired+0x74>
    6cfe:	44 c0       	rjmp	.+136    	; 0x6d88 <GenericTimerFired+0xfc>
    6d00:	80 91 d3 05 	lds	r24, 0x05D3
    6d04:	90 91 d4 05 	lds	r25, 0x05D4
    6d08:	01 96       	adiw	r24, 0x01	; 1
    6d0a:	90 93 d4 05 	sts	0x05D4, r25
    6d0e:	80 93 d3 05 	sts	0x05D3, r24
    6d12:	84 5f       	subi	r24, 0xF4	; 244
    6d14:	91 40       	sbci	r25, 0x01	; 1
    6d16:	71 f1       	breq	.+92     	; 0x6d74 <GenericTimerFired+0xe8>
    6d18:	80 91 59 06 	lds	r24, 0x0659
    6d1c:	85 31       	cpi	r24, 0x15	; 21
    6d1e:	39 f6       	brne	.-114    	; 0x6cae <GenericTimerFired+0x22>
    6d20:	10 92 d2 05 	sts	0x05D2, r1
    6d24:	c4 cf       	rjmp	.-120    	; 0x6cae <GenericTimerFired+0x22>
    6d26:	88 23       	and	r24, r24
    6d28:	c9 f0       	breq	.+50     	; 0x6d5c <GenericTimerFired+0xd0>
    6d2a:	81 30       	cpi	r24, 0x01	; 1
    6d2c:	09 f0       	breq	.+2      	; 0x6d30 <GenericTimerFired+0xa4>
    6d2e:	bd cf       	rjmp	.-134    	; 0x6caa <GenericTimerFired+0x1e>
    6d30:	81 e0       	ldi	r24, 0x01	; 1
    6d32:	0e 94 75 1b 	call	0x36ea	; 0x36ea <ServiceTimerFired>
    6d36:	bb cf       	rjmp	.-138    	; 0x6cae <GenericTimerFired+0x22>
    6d38:	83 e0       	ldi	r24, 0x03	; 3
    6d3a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <ServiceTimerFired>
    6d3e:	b7 cf       	rjmp	.-146    	; 0x6cae <GenericTimerFired+0x22>
    6d40:	0e 94 c3 12 	call	0x2586	; 0x2586 <hplcc2420interruptm_CCATimer_fired>
    6d44:	b4 cf       	rjmp	.-152    	; 0x6cae <GenericTimerFired+0x22>
    6d46:	87 e0       	ldi	r24, 0x07	; 7
    6d48:	0e 94 75 1b 	call	0x36ea	; 0x36ea <ServiceTimerFired>
    6d4c:	b0 cf       	rjmp	.-160    	; 0x6cae <GenericTimerFired+0x22>
    6d4e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <hplcc2420interruptm_FIFOTimer_fired>
    6d52:	ad cf       	rjmp	.-166    	; 0x6cae <GenericTimerFired+0x22>
    6d54:	84 e0       	ldi	r24, 0x04	; 4
    6d56:	0e 94 75 1b 	call	0x36ea	; 0x36ea <ServiceTimerFired>
    6d5a:	a9 cf       	rjmp	.-174    	; 0x6cae <GenericTimerFired+0x22>
    6d5c:	80 e0       	ldi	r24, 0x00	; 0
    6d5e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <ServiceTimerFired>
    6d62:	a5 cf       	rjmp	.-182    	; 0x6cae <GenericTimerFired+0x22>
    6d64:	82 e0       	ldi	r24, 0x02	; 2
    6d66:	0e 94 75 1b 	call	0x36ea	; 0x36ea <ServiceTimerFired>
    6d6a:	a1 cf       	rjmp	.-190    	; 0x6cae <GenericTimerFired+0x22>
    6d6c:	86 e0       	ldi	r24, 0x06	; 6
    6d6e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <ServiceTimerFired>
    6d72:	9d cf       	rjmp	.-198    	; 0x6cae <GenericTimerFired+0x22>
    6d74:	10 92 d4 05 	sts	0x05D4, r1
    6d78:	10 92 d3 05 	sts	0x05D3, r1
    6d7c:	80 91 59 06 	lds	r24, 0x0659
    6d80:	8d 5f       	subi	r24, 0xFD	; 253
    6d82:	80 93 59 06 	sts	0x0659, r24
    6d86:	ca cf       	rjmp	.-108    	; 0x6d1c <GenericTimerFired+0x90>
    6d88:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <Leds_redToggle>
    6d8c:	80 e1       	ldi	r24, 0x10	; 16
    6d8e:	90 e0       	ldi	r25, 0x00	; 0
    6d90:	6f ef       	ldi	r22, 0xFF	; 255
    6d92:	7f ef       	ldi	r23, 0xFF	; 255
    6d94:	4a e0       	ldi	r20, 0x0A	; 10
    6d96:	2f ee       	ldi	r18, 0xEF	; 239
    6d98:	35 e0       	ldi	r19, 0x05	; 5
    6d9a:	2a 50       	subi	r18, 0x0A	; 10
    6d9c:	30 40       	sbci	r19, 0x00	; 0
    6d9e:	0e 94 ba 08 	call	0x1174	; 0x1174 <AMStandard_SendMsg_send>
    6da2:	ae cf       	rjmp	.-164    	; 0x6d00 <GenericTimerFired+0x74>

00006da4 <GenericTimerStop>:
    6da4:	0e 94 a8 38 	call	0x7150	; 0x7150 <TimerM_Timer_stop>
    6da8:	08 95       	ret

00006daa <GenericTimerStart>:
    6daa:	0e 94 32 38 	call	0x7064	; 0x7064 <TimerM_Timer_start>
    6dae:	08 95       	ret

00006db0 <setTimerCallBackFunction>:
    6db0:	ef 92       	push	r14
    6db2:	ff 92       	push	r15
    6db4:	0f 93       	push	r16
    6db6:	1f 93       	push	r17
    6db8:	7b 01       	movw	r14, r22
    6dba:	e8 2f       	mov	r30, r24
    6dbc:	f0 e0       	ldi	r31, 0x00	; 0
    6dbe:	ee 0f       	add	r30, r30
    6dc0:	ff 1f       	adc	r31, r31
    6dc2:	eb 52       	subi	r30, 0x2B	; 43
    6dc4:	fa 4f       	sbci	r31, 0xFA	; 250
    6dc6:	31 83       	std	Z+1, r19	; 0x01
    6dc8:	20 83       	st	Z, r18
    6dca:	00 e0       	ldi	r16, 0x00	; 0
    6dcc:	10 e0       	ldi	r17, 0x00	; 0
    6dce:	8e 5e       	subi	r24, 0xEE	; 238
    6dd0:	64 2f       	mov	r22, r20
    6dd2:	a8 01       	movw	r20, r16
    6dd4:	97 01       	movw	r18, r14
    6dd6:	0e 94 32 38 	call	0x7064	; 0x7064 <TimerM_Timer_start>
    6dda:	1f 91       	pop	r17
    6ddc:	0f 91       	pop	r16
    6dde:	ff 90       	pop	r15
    6de0:	ef 90       	pop	r14
    6de2:	08 95       	ret

00006de4 <GenericTimerInit>:
    6de4:	10 92 d4 05 	sts	0x05D4, r1
    6de8:	10 92 d3 05 	sts	0x05D3, r1
    6dec:	83 e0       	ldi	r24, 0x03	; 3
    6dee:	80 93 59 06 	sts	0x0659, r24
    6df2:	81 e0       	ldi	r24, 0x01	; 1
    6df4:	80 93 d2 05 	sts	0x05D2, r24
    6df8:	e5 ed       	ldi	r30, 0xD5	; 213
    6dfa:	f5 e0       	ldi	r31, 0x05	; 5
    6dfc:	11 92       	st	Z+, r1
    6dfe:	11 92       	st	Z+, r1
    6e00:	85 e0       	ldi	r24, 0x05	; 5
    6e02:	e5 3e       	cpi	r30, 0xE5	; 229
    6e04:	f8 07       	cpc	r31, r24
    6e06:	d1 f7       	brne	.-12     	; 0x6dfc <GenericTimerInit+0x18>
    6e08:	0e 94 0b 39 	call	0x7216	; 0x7216 <TimerM_StdControl_init>
    6e0c:	08 95       	ret

00006e0e <GenericTimingStop>:
}

//-------------------------------------------------------------------------
void GenericTimingStop()
{
    6e0e:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <HPLClock_Timer3_Stop>

    HPLClock_Timer3_Stop();

}
    6e12:	08 95       	ret

00006e14 <GenericTimingStart>:
    6e14:	81 e0       	ldi	r24, 0x01	; 1
    6e16:	80 93 9d 03 	sts	0x039D, r24
    6e1a:	0e 94 c7 34 	call	0x698e	; 0x698e <HPLClock_Timer3_Start>
    6e1e:	08 95       	ret

00006e20 <getCurrentResolution>:
    6e20:	0e 94 04 35 	call	0x6a08	; 0x6a08 <HPLClock_readTimeCounterLow>
    6e24:	08 95       	ret

00006e26 <getCurrentCounterHigh>:
    6e26:	0e 94 fe 34 	call	0x69fc	; 0x69fc <HPLClock_readTimeCounterHigh>
    6e2a:	08 95       	ret

00006e2c <getCurrentTimeStamp>:
    6e2c:	ef 92       	push	r14
    6e2e:	ff 92       	push	r15
    6e30:	0f 93       	push	r16
    6e32:	1f 93       	push	r17
    6e34:	cf 93       	push	r28
    6e36:	df 93       	push	r29
    6e38:	0e 94 fe 34 	call	0x69fc	; 0x69fc <HPLClock_readTimeCounterHigh>
    6e3c:	ec 01       	movw	r28, r24
    6e3e:	0e 94 04 35 	call	0x6a08	; 0x6a08 <HPLClock_readTimeCounterLow>
    6e42:	7b 01       	movw	r14, r22
    6e44:	8c 01       	movw	r16, r24
    6e46:	0e 94 fe 34 	call	0x69fc	; 0x69fc <HPLClock_readTimeCounterHigh>
    6e4a:	c8 17       	cp	r28, r24
    6e4c:	d9 07       	cpc	r29, r25
    6e4e:	49 f0       	breq	.+18     	; 0x6e62 <getCurrentTimeStamp+0x36>
    6e50:	0e 94 fe 34 	call	0x69fc	; 0x69fc <HPLClock_readTimeCounterHigh>
    6e54:	ec 01       	movw	r28, r24
    6e56:	0e 94 04 35 	call	0x6a08	; 0x6a08 <HPLClock_readTimeCounterLow>
    6e5a:	7b 01       	movw	r14, r22
    6e5c:	8c 01       	movw	r16, r24
    6e5e:	0e 94 fe 34 	call	0x69fc	; 0x69fc <HPLClock_readTimeCounterHigh>
    6e62:	80 91 9d 03 	lds	r24, 0x039D
    6e66:	81 30       	cpi	r24, 0x01	; 1
    6e68:	c9 f4       	brne	.+50     	; 0x6e9c <getCurrentTimeStamp+0x70>
    6e6a:	d0 93 92 03 	sts	0x0392, r29
    6e6e:	c0 93 91 03 	sts	0x0391, r28
    6e72:	e0 92 93 03 	sts	0x0393, r14
    6e76:	f0 92 94 03 	sts	0x0394, r15
    6e7a:	00 93 95 03 	sts	0x0395, r16
    6e7e:	10 93 96 03 	sts	0x0396, r17
    6e82:	82 e0       	ldi	r24, 0x02	; 2
    6e84:	80 93 9d 03 	sts	0x039D, r24
    6e88:	21 e9       	ldi	r18, 0x91	; 145
    6e8a:	33 e0       	ldi	r19, 0x03	; 3
    6e8c:	c9 01       	movw	r24, r18
    6e8e:	df 91       	pop	r29
    6e90:	cf 91       	pop	r28
    6e92:	1f 91       	pop	r17
    6e94:	0f 91       	pop	r16
    6e96:	ff 90       	pop	r15
    6e98:	ef 90       	pop	r14
    6e9a:	08 95       	ret
    6e9c:	82 30       	cpi	r24, 0x02	; 2
    6e9e:	19 f0       	breq	.+6      	; 0x6ea6 <getCurrentTimeStamp+0x7a>
    6ea0:	20 e0       	ldi	r18, 0x00	; 0
    6ea2:	30 e0       	ldi	r19, 0x00	; 0
    6ea4:	f3 cf       	rjmp	.-26     	; 0x6e8c <getCurrentTimeStamp+0x60>
    6ea6:	81 e0       	ldi	r24, 0x01	; 1
    6ea8:	80 93 9d 03 	sts	0x039D, r24
    6eac:	d0 93 98 03 	sts	0x0398, r29
    6eb0:	c0 93 97 03 	sts	0x0397, r28
    6eb4:	e0 92 99 03 	sts	0x0399, r14
    6eb8:	f0 92 9a 03 	sts	0x039A, r15
    6ebc:	00 93 9b 03 	sts	0x039B, r16
    6ec0:	10 93 9c 03 	sts	0x039C, r17
    6ec4:	27 e9       	ldi	r18, 0x97	; 151
    6ec6:	33 e0       	ldi	r19, 0x03	; 3
    6ec8:	e1 cf       	rjmp	.-62     	; 0x6e8c <getCurrentTimeStamp+0x60>

00006eca <TimerM_enqueue>:
}

//-------------------------------------------------------------------------
inline void TimerM_enqueue(uint8_t value)
{
    6eca:	98 2f       	mov	r25, r24
    if (TimerM_queue_tail == NUM_TIMERS - 1)
    6ecc:	e0 91 5a 06 	lds	r30, 0x065A
    6ed0:	ef 30       	cpi	r30, 0x0F	; 15
    6ed2:	09 f4       	brne	.+2      	; 0x6ed6 <TimerM_enqueue+0xc>
    6ed4:	ef ef       	ldi	r30, 0xFF	; 255
    {
        TimerM_queue_tail = -1;
    }
    TimerM_queue_tail++;
    6ed6:	ef 5f       	subi	r30, 0xFF	; 255
    6ed8:	e0 93 5a 06 	sts	0x065A, r30
    TimerM_queue_size++;
    6edc:	80 91 5f 06 	lds	r24, 0x065F
    6ee0:	8f 5f       	subi	r24, 0xFF	; 255
    6ee2:	80 93 5f 06 	sts	0x065F, r24
    TimerM_queue[(uint8_t) TimerM_queue_tail] = value;
    6ee6:	f0 e0       	ldi	r31, 0x00	; 0
    6ee8:	ed 59       	subi	r30, 0x9D	; 157
    6eea:	f9 4f       	sbci	r31, 0xF9	; 249
    6eec:	90 83       	st	Z, r25
}
    6eee:	08 95       	ret

00006ef0 <TimerM_Timer_default_fired>:

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_default_fired(uint8_t id)
{
    6ef0:	81 e0       	ldi	r24, 0x01	; 1
    6ef2:	08 95       	ret

00006ef4 <TimerM_dequeue>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t TimerM_Timer_fired(uint8_t id)
{
    GenericTimerFired(id);
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline uint8_t TimerM_dequeue(void)
{
    6ef4:	80 91 5f 06 	lds	r24, 0x065F
    6ef8:	88 23       	and	r24, r24
    6efa:	79 f0       	breq	.+30     	; 0x6f1a <TimerM_dequeue+0x26>
    if (TimerM_queue_size == 0)
    {
        return NUM_TIMERS;
    }
    if (TimerM_queue_head == NUM_TIMERS - 1)
    6efc:	e0 91 75 06 	lds	r30, 0x0675
    6f00:	ef 30       	cpi	r30, 0x0F	; 15
    6f02:	69 f0       	breq	.+26     	; 0x6f1e <TimerM_dequeue+0x2a>
    {
        TimerM_queue_head = -1;
    }
    TimerM_queue_head++;
    6f04:	ef 5f       	subi	r30, 0xFF	; 255
    6f06:	e0 93 75 06 	sts	0x0675, r30
    TimerM_queue_size--;
    6f0a:	81 50       	subi	r24, 0x01	; 1
    6f0c:	80 93 5f 06 	sts	0x065F, r24
    return TimerM_queue[(uint8_t) TimerM_queue_head];
    6f10:	f0 e0       	ldi	r31, 0x00	; 0
    6f12:	ed 59       	subi	r30, 0x9D	; 157
    6f14:	f9 4f       	sbci	r31, 0xF9	; 249
    6f16:	80 81       	ld	r24, Z
}
    6f18:	08 95       	ret
    6f1a:	80 e1       	ldi	r24, 0x10	; 16
    6f1c:	08 95       	ret
    6f1e:	ef ef       	ldi	r30, 0xFF	; 255
    6f20:	f1 cf       	rjmp	.-30     	; 0x6f04 <TimerM_dequeue+0x10>

00006f22 <TimerM_StdControl_start>:

//-------------------------------------------------------------------------
inline void TimerM_signalOneTimer(void)
{
    uint8_t itimer = TimerM_dequeue();

    if (itimer < NUM_TIMERS)
    {
        TimerM_Timer_fired(itimer);
    }
}

//-------------------------------------------------------------------------
inline void TimerM_HandleFire(void)
{
    uint8_t i;
    uint16_t int_out;

    TimerM_setIntervalFlag = 1;
    {
        _atomic_t _atomic = _atomic_start();

        {
            int_out = TimerM_interval_outstanding;
            TimerM_interval_outstanding = 0;
        }
        _atomic_end(_atomic);
    }
    if (TimerM_mState)
    {
        for (i = 0; i < NUM_TIMERS; i++)
        {
            if (TimerM_mState & (0x1L << i))
            {
                TimerM_mTimerList[i].ticksLeft -= int_out;
                if (TimerM_mTimerList[i].ticksLeft <= 2)
                {
                    if (postTask(TimerM_signalOneTimer, 7))
                    {
                        if (TimerM_mTimerList[i].type == TIMER_REPEAT)
                        {
                            TimerM_mTimerList[i].ticksLeft +=
                                TimerM_mTimerList[i].ticks;
                        }
                        else
                        {
                            TimerM_mState &= ~(0x1L << i);
                        }
                        TimerM_enqueue(i);
                    }
                    else
                    {
                        {
                        }
                        ;
                        TimerM_mTimerList[i].ticksLeft = TimerM_mInterval;
                    }
                }
            }
        }
    }
    {
        _atomic_t _atomic = _atomic_start();

        int_out = TimerM_interval_outstanding;
        _atomic_end(_atomic);
    }
    if (int_out == 0)
    {
        TimerM_adjustInterval();
    }
}

//-------------------------------------------------------------------------
inline result_t TimerM_Clock_fire(void)
{
    {
        _atomic_t _atomic = _atomic_start();

        {
            if (TimerM_interval_outstanding == 0)
            {
                postTask(TimerM_HandleFire, 12);
            }
            else
            {
            }
            ;
            TimerM_interval_outstanding += TimerM_Clock_getInterval() + 1;
        }
        _atomic_end(_atomic);
    }
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline result_t TimerM_StdControl_start(void)
{
    6f22:	81 e0       	ldi	r24, 0x01	; 1
    6f24:	08 95       	ret

00006f26 <TimerM_Clock_setInterval>:
    return SUCCESS;
}

//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_readCounter(void)
{
    unsigned char result;

    result = HPLClock_Clock_readCounter();
    return result;
}

//-------------------------------------------------------------------------
inline uint8_t TimerM_Clock_getInterval(void)
{
    unsigned char result;

    result = HPLClock_Clock_getInterval();
    return result;
}

//-------------------------------------------------------------------------
inline void TimerM_Clock_setInterval(uint8_t arg_0xa362928)
{
    6f26:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <HPLClock_Clock_setInterval>
    HPLClock_Clock_setInterval(arg_0xa362928);
}
    6f2a:	08 95       	ret

00006f2c <TimerM_Clock_getInterval>:
    6f2c:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <HPLClock_Clock_getInterval>
    6f30:	08 95       	ret

00006f32 <TimerM_Clock_readCounter>:
    6f32:	0e 94 57 35 	call	0x6aae	; 0x6aae <HPLClock_Clock_readCounter>
    6f36:	08 95       	ret

00006f38 <TimerM_Clock_fire>:
    6f38:	1f 93       	push	r17
    6f3a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    6f3e:	18 2f       	mov	r17, r24
    6f40:	80 91 73 06 	lds	r24, 0x0673
    6f44:	90 91 74 06 	lds	r25, 0x0674
    6f48:	89 2b       	or	r24, r25
    6f4a:	29 f4       	brne	.+10     	; 0x6f56 <TimerM_Clock_fire+0x1e>
    6f4c:	86 e2       	ldi	r24, 0x26	; 38
    6f4e:	99 e3       	ldi	r25, 0x39	; 57
    6f50:	6c e0       	ldi	r22, 0x0C	; 12
    6f52:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    6f56:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <HPLClock_Clock_getInterval>
    6f5a:	20 91 73 06 	lds	r18, 0x0673
    6f5e:	30 91 74 06 	lds	r19, 0x0674
    6f62:	2f 5f       	subi	r18, 0xFF	; 255
    6f64:	3f 4f       	sbci	r19, 0xFF	; 255
    6f66:	28 0f       	add	r18, r24
    6f68:	31 1d       	adc	r19, r1
    6f6a:	30 93 74 06 	sts	0x0674, r19
    6f6e:	20 93 73 06 	sts	0x0673, r18
    6f72:	81 2f       	mov	r24, r17
    6f74:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    6f78:	81 e0       	ldi	r24, 0x01	; 1
    6f7a:	1f 91       	pop	r17
    6f7c:	08 95       	ret

00006f7e <TimerM_adjustInterval>:
    6f7e:	9f 92       	push	r9
    6f80:	af 92       	push	r10
    6f82:	bf 92       	push	r11
    6f84:	cf 92       	push	r12
    6f86:	df 92       	push	r13
    6f88:	ef 92       	push	r14
    6f8a:	ff 92       	push	r15
    6f8c:	0f 93       	push	r16
    6f8e:	1f 93       	push	r17
    6f90:	e0 90 5b 06 	lds	r14, 0x065B
    6f94:	f0 90 5c 06 	lds	r15, 0x065C
    6f98:	00 91 5d 06 	lds	r16, 0x065D
    6f9c:	10 91 5e 06 	lds	r17, 0x065E
    6fa0:	e1 14       	cp	r14, r1
    6fa2:	f1 04       	cpc	r15, r1
    6fa4:	01 05       	cpc	r16, r1
    6fa6:	11 05       	cpc	r17, r1
    6fa8:	09 f4       	brne	.+2      	; 0x6fac <TimerM_adjustInterval+0x2e>
    6faa:	4e c0       	rjmp	.+156    	; 0x7048 <TimerM_adjustInterval+0xca>
    6fac:	eb e7       	ldi	r30, 0x7B	; 123
    6fae:	f6 e0       	ldi	r31, 0x06	; 6
    6fb0:	96 ee       	ldi	r25, 0xE6	; 230
    6fb2:	99 2e       	mov	r9, r25
    6fb4:	20 e0       	ldi	r18, 0x00	; 0
    6fb6:	30 e0       	ldi	r19, 0x00	; 0
    6fb8:	81 e0       	ldi	r24, 0x01	; 1
    6fba:	a8 2e       	mov	r10, r24
    6fbc:	b1 2c       	mov	r11, r1
    6fbe:	c1 2c       	mov	r12, r1
    6fc0:	d1 2c       	mov	r13, r1
    6fc2:	d6 01       	movw	r26, r12
    6fc4:	c5 01       	movw	r24, r10
    6fc6:	02 2e       	mov	r0, r18
    6fc8:	04 c0       	rjmp	.+8      	; 0x6fd2 <TimerM_adjustInterval+0x54>
    6fca:	88 0f       	add	r24, r24
    6fcc:	99 1f       	adc	r25, r25
    6fce:	aa 1f       	adc	r26, r26
    6fd0:	bb 1f       	adc	r27, r27
    6fd2:	0a 94       	dec	r0
    6fd4:	d2 f7       	brpl	.-12     	; 0x6fca <TimerM_adjustInterval+0x4c>
    6fd6:	8e 21       	and	r24, r14
    6fd8:	9f 21       	and	r25, r15
    6fda:	a0 23       	and	r26, r16
    6fdc:	b1 23       	and	r27, r17
    6fde:	00 97       	sbiw	r24, 0x00	; 0
    6fe0:	a1 05       	cpc	r26, r1
    6fe2:	b1 05       	cpc	r27, r1
    6fe4:	71 f0       	breq	.+28     	; 0x7002 <TimerM_adjustInterval+0x84>
    6fe6:	40 81       	ld	r20, Z
    6fe8:	51 81       	ldd	r21, Z+1	; 0x01
    6fea:	62 81       	ldd	r22, Z+2	; 0x02
    6fec:	73 81       	ldd	r23, Z+3	; 0x03
    6fee:	89 2d       	mov	r24, r9
    6ff0:	90 e0       	ldi	r25, 0x00	; 0
    6ff2:	a0 e0       	ldi	r26, 0x00	; 0
    6ff4:	b0 e0       	ldi	r27, 0x00	; 0
    6ff6:	48 17       	cp	r20, r24
    6ff8:	59 07       	cpc	r21, r25
    6ffa:	6a 07       	cpc	r22, r26
    6ffc:	7b 07       	cpc	r23, r27
    6ffe:	0c f4       	brge	.+2      	; 0x7002 <TimerM_adjustInterval+0x84>
    7000:	94 2e       	mov	r9, r20
    7002:	2f 5f       	subi	r18, 0xFF	; 255
    7004:	3f 4f       	sbci	r19, 0xFF	; 255
    7006:	39 96       	adiw	r30, 0x09	; 9
    7008:	20 31       	cpi	r18, 0x10	; 16
    700a:	31 05       	cpc	r19, r1
    700c:	d1 f6       	brne	.-76     	; 0x6fc2 <TimerM_adjustInterval+0x44>
    700e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    7012:	18 2f       	mov	r17, r24
    7014:	0e 94 57 35 	call	0x6aae	; 0x6aae <HPLClock_Clock_readCounter>
    7018:	8d 5f       	subi	r24, 0xFD	; 253
    701a:	98 16       	cp	r9, r24
    701c:	08 f4       	brcc	.+2      	; 0x7020 <TimerM_adjustInterval+0xa2>
    701e:	98 2e       	mov	r9, r24
    7020:	90 92 61 06 	sts	0x0661, r9
    7024:	89 2d       	mov	r24, r9
    7026:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <HPLClock_Clock_setInterval>
    702a:	10 92 62 06 	sts	0x0662, r1
    702e:	81 2f       	mov	r24, r17
    7030:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    7034:	1f 91       	pop	r17
    7036:	0f 91       	pop	r16
    7038:	ff 90       	pop	r15
    703a:	ef 90       	pop	r14
    703c:	df 90       	pop	r13
    703e:	cf 90       	pop	r12
    7040:	bf 90       	pop	r11
    7042:	af 90       	pop	r10
    7044:	9f 90       	pop	r9
    7046:	08 95       	ret
    7048:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    704c:	18 2f       	mov	r17, r24
    704e:	86 ee       	ldi	r24, 0xE6	; 230
    7050:	80 93 61 06 	sts	0x0661, r24
    7054:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <HPLClock_Clock_setInterval>
    7058:	10 92 62 06 	sts	0x0662, r1
    705c:	81 2f       	mov	r24, r17
    705e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    7062:	e8 cf       	rjmp	.-48     	; 0x7034 <TimerM_adjustInterval+0xb6>

00007064 <TimerM_Timer_start>:
    7064:	af 92       	push	r10
    7066:	bf 92       	push	r11
    7068:	cf 92       	push	r12
    706a:	df 92       	push	r13
    706c:	ef 92       	push	r14
    706e:	ff 92       	push	r15
    7070:	0f 93       	push	r16
    7072:	1f 93       	push	r17
    7074:	59 01       	movw	r10, r18
    7076:	6a 01       	movw	r12, r20
    7078:	80 31       	cpi	r24, 0x10	; 16
    707a:	10 f4       	brcc	.+4      	; 0x7080 <TimerM_Timer_start+0x1c>
    707c:	62 30       	cpi	r22, 0x02	; 2
    707e:	54 f0       	brlt	.+20     	; 0x7094 <TimerM_Timer_start+0x30>
    7080:	80 e0       	ldi	r24, 0x00	; 0
    7082:	1f 91       	pop	r17
    7084:	0f 91       	pop	r16
    7086:	ff 90       	pop	r15
    7088:	ef 90       	pop	r14
    708a:	df 90       	pop	r13
    708c:	cf 90       	pop	r12
    708e:	bf 90       	pop	r11
    7090:	af 90       	pop	r10
    7092:	08 95       	ret
    7094:	66 23       	and	r22, r22
    7096:	29 f4       	brne	.+10     	; 0x70a2 <TimerM_Timer_start+0x3e>
    7098:	23 30       	cpi	r18, 0x03	; 3
    709a:	31 05       	cpc	r19, r1
    709c:	41 05       	cpc	r20, r1
    709e:	51 05       	cpc	r21, r1
    70a0:	78 f3       	brcs	.-34     	; 0x7080 <TimerM_Timer_start+0x1c>
    70a2:	e8 2e       	mov	r14, r24
    70a4:	ff 24       	eor	r15, r15
    70a6:	87 01       	movw	r16, r14
    70a8:	00 0f       	add	r16, r16
    70aa:	11 1f       	adc	r17, r17
    70ac:	00 0f       	add	r16, r16
    70ae:	11 1f       	adc	r17, r17
    70b0:	00 0f       	add	r16, r16
    70b2:	11 1f       	adc	r17, r17
    70b4:	0e 0d       	add	r16, r14
    70b6:	1f 1d       	adc	r17, r15
    70b8:	0a 58       	subi	r16, 0x8A	; 138
    70ba:	19 4f       	sbci	r17, 0xF9	; 249
    70bc:	f8 01       	movw	r30, r16
    70be:	a1 82       	std	Z+1, r10	; 0x01
    70c0:	b2 82       	std	Z+2, r11	; 0x02
    70c2:	c3 82       	std	Z+3, r12	; 0x03
    70c4:	d4 82       	std	Z+4, r13	; 0x04
    70c6:	60 83       	st	Z, r22
    70c8:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    70cc:	f8 2e       	mov	r15, r24
    70ce:	0e 94 57 35 	call	0x6aae	; 0x6aae <HPLClock_Clock_readCounter>
    70d2:	a8 0e       	add	r10, r24
    70d4:	b1 1c       	adc	r11, r1
    70d6:	c1 1c       	adc	r12, r1
    70d8:	d1 1c       	adc	r13, r1
    70da:	f8 01       	movw	r30, r16
    70dc:	a5 82       	std	Z+5, r10	; 0x05
    70de:	b6 82       	std	Z+6, r11	; 0x06
    70e0:	c7 82       	std	Z+7, r12	; 0x07
    70e2:	d0 86       	std	Z+8, r13	; 0x08
    70e4:	21 e0       	ldi	r18, 0x01	; 1
    70e6:	30 e0       	ldi	r19, 0x00	; 0
    70e8:	40 e0       	ldi	r20, 0x00	; 0
    70ea:	50 e0       	ldi	r21, 0x00	; 0
    70ec:	04 c0       	rjmp	.+8      	; 0x70f6 <TimerM_Timer_start+0x92>
    70ee:	22 0f       	add	r18, r18
    70f0:	33 1f       	adc	r19, r19
    70f2:	44 1f       	adc	r20, r20
    70f4:	55 1f       	adc	r21, r21
    70f6:	ea 94       	dec	r14
    70f8:	d2 f7       	brpl	.-12     	; 0x70ee <TimerM_Timer_start+0x8a>
    70fa:	80 91 5b 06 	lds	r24, 0x065B
    70fe:	90 91 5c 06 	lds	r25, 0x065C
    7102:	a0 91 5d 06 	lds	r26, 0x065D
    7106:	b0 91 5e 06 	lds	r27, 0x065E
    710a:	82 2b       	or	r24, r18
    710c:	93 2b       	or	r25, r19
    710e:	a4 2b       	or	r26, r20
    7110:	b5 2b       	or	r27, r21
    7112:	80 93 5b 06 	sts	0x065B, r24
    7116:	90 93 5c 06 	sts	0x065C, r25
    711a:	a0 93 5d 06 	sts	0x065D, r26
    711e:	b0 93 5e 06 	sts	0x065E, r27
    7122:	80 91 61 06 	lds	r24, 0x0661
    7126:	90 e0       	ldi	r25, 0x00	; 0
    7128:	a0 e0       	ldi	r26, 0x00	; 0
    712a:	b0 e0       	ldi	r27, 0x00	; 0
    712c:	a8 16       	cp	r10, r24
    712e:	b9 06       	cpc	r11, r25
    7130:	ca 06       	cpc	r12, r26
    7132:	db 06       	cpc	r13, r27
    7134:	28 f0       	brcs	.+10     	; 0x7140 <TimerM_Timer_start+0xdc>
    7136:	8f 2d       	mov	r24, r15
    7138:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    713c:	81 e0       	ldi	r24, 0x01	; 1
    713e:	a1 cf       	rjmp	.-190    	; 0x7082 <TimerM_Timer_start+0x1e>
    7140:	a0 92 61 06 	sts	0x0661, r10
    7144:	8a 2d       	mov	r24, r10
    7146:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <HPLClock_Clock_setInterval>
    714a:	10 92 62 06 	sts	0x0662, r1
    714e:	f3 cf       	rjmp	.-26     	; 0x7136 <TimerM_Timer_start+0xd2>

00007150 <TimerM_Timer_stop>:
    7150:	ef 92       	push	r14
    7152:	ff 92       	push	r15
    7154:	0f 93       	push	r16
    7156:	1f 93       	push	r17
    7158:	81 31       	cpi	r24, 0x11	; 17
    715a:	e0 f4       	brcc	.+56     	; 0x7194 <TimerM_Timer_stop+0x44>
    715c:	31 e0       	ldi	r19, 0x01	; 1
    715e:	e3 2e       	mov	r14, r19
    7160:	f1 2c       	mov	r15, r1
    7162:	01 2d       	mov	r16, r1
    7164:	11 2d       	mov	r17, r1
    7166:	04 c0       	rjmp	.+8      	; 0x7170 <TimerM_Timer_stop+0x20>
    7168:	ee 0c       	add	r14, r14
    716a:	ff 1c       	adc	r15, r15
    716c:	00 1f       	adc	r16, r16
    716e:	11 1f       	adc	r17, r17
    7170:	8a 95       	dec	r24
    7172:	d2 f7       	brpl	.-12     	; 0x7168 <TimerM_Timer_stop+0x18>
    7174:	80 91 5b 06 	lds	r24, 0x065B
    7178:	90 91 5c 06 	lds	r25, 0x065C
    717c:	a0 91 5d 06 	lds	r26, 0x065D
    7180:	b0 91 5e 06 	lds	r27, 0x065E
    7184:	8e 21       	and	r24, r14
    7186:	9f 21       	and	r25, r15
    7188:	a0 23       	and	r26, r16
    718a:	b1 23       	and	r27, r17
    718c:	00 97       	sbiw	r24, 0x00	; 0
    718e:	a1 05       	cpc	r26, r1
    7190:	b1 05       	cpc	r27, r1
    7192:	31 f4       	brne	.+12     	; 0x71a0 <TimerM_Timer_stop+0x50>
    7194:	80 e0       	ldi	r24, 0x00	; 0
    7196:	1f 91       	pop	r17
    7198:	0f 91       	pop	r16
    719a:	ff 90       	pop	r15
    719c:	ef 90       	pop	r14
    719e:	08 95       	ret
    71a0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    71a4:	a8 01       	movw	r20, r16
    71a6:	97 01       	movw	r18, r14
    71a8:	20 95       	com	r18
    71aa:	30 95       	com	r19
    71ac:	40 95       	com	r20
    71ae:	50 95       	com	r21
    71b0:	e0 90 5b 06 	lds	r14, 0x065B
    71b4:	f0 90 5c 06 	lds	r15, 0x065C
    71b8:	00 91 5d 06 	lds	r16, 0x065D
    71bc:	10 91 5e 06 	lds	r17, 0x065E
    71c0:	e2 22       	and	r14, r18
    71c2:	f3 22       	and	r15, r19
    71c4:	04 23       	and	r16, r20
    71c6:	15 23       	and	r17, r21
    71c8:	e0 92 5b 06 	sts	0x065B, r14
    71cc:	f0 92 5c 06 	sts	0x065C, r15
    71d0:	00 93 5d 06 	sts	0x065D, r16
    71d4:	10 93 5e 06 	sts	0x065E, r17
    71d8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    71dc:	80 91 5b 06 	lds	r24, 0x065B
    71e0:	90 91 5c 06 	lds	r25, 0x065C
    71e4:	a0 91 5d 06 	lds	r26, 0x065D
    71e8:	b0 91 5e 06 	lds	r27, 0x065E
    71ec:	00 97       	sbiw	r24, 0x00	; 0
    71ee:	a1 05       	cpc	r26, r1
    71f0:	b1 05       	cpc	r27, r1
    71f2:	41 f4       	brne	.+16     	; 0x7204 <TimerM_Timer_stop+0xb4>
    71f4:	81 e0       	ldi	r24, 0x01	; 1
    71f6:	80 93 62 06 	sts	0x0662, r24
    71fa:	1f 91       	pop	r17
    71fc:	0f 91       	pop	r16
    71fe:	ff 90       	pop	r15
    7200:	ef 90       	pop	r14
    7202:	08 95       	ret
    7204:	81 e0       	ldi	r24, 0x01	; 1
    7206:	c7 cf       	rjmp	.-114    	; 0x7196 <TimerM_Timer_stop+0x46>

00007208 <TimerM_Timer_fired>:
    7208:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <GenericTimerFired>
    720c:	81 e0       	ldi	r24, 0x01	; 1
    720e:	08 95       	ret

00007210 <TimerM_Clock_setRate>:
    7210:	0e 94 a6 35 	call	0x6b4c	; 0x6b4c <HPLClock_Clock_setRate>
    7214:	08 95       	ret

00007216 <TimerM_StdControl_init>:
    7216:	10 92 5b 06 	sts	0x065B, r1
    721a:	10 92 5c 06 	sts	0x065C, r1
    721e:	10 92 5d 06 	sts	0x065D, r1
    7222:	10 92 5e 06 	sts	0x065E, r1
    7226:	10 92 62 06 	sts	0x0662, r1
    722a:	8f ef       	ldi	r24, 0xFF	; 255
    722c:	80 93 5a 06 	sts	0x065A, r24
    7230:	80 93 75 06 	sts	0x0675, r24
    7234:	10 92 5f 06 	sts	0x065F, r1
    7238:	83 e0       	ldi	r24, 0x03	; 3
    723a:	80 93 60 06 	sts	0x0660, r24
    723e:	86 ee       	ldi	r24, 0xE6	; 230
    7240:	80 93 61 06 	sts	0x0661, r24
    7244:	63 e0       	ldi	r22, 0x03	; 3
    7246:	0e 94 a6 35 	call	0x6b4c	; 0x6b4c <HPLClock_Clock_setRate>
    724a:	08 95       	ret

0000724c <TimerM_HandleFire>:
    724c:	3f 92       	push	r3
    724e:	4f 92       	push	r4
    7250:	5f 92       	push	r5
    7252:	6f 92       	push	r6
    7254:	7f 92       	push	r7
    7256:	8f 92       	push	r8
    7258:	9f 92       	push	r9
    725a:	af 92       	push	r10
    725c:	bf 92       	push	r11
    725e:	cf 92       	push	r12
    7260:	df 92       	push	r13
    7262:	ef 92       	push	r14
    7264:	ff 92       	push	r15
    7266:	0f 93       	push	r16
    7268:	1f 93       	push	r17
    726a:	cf 93       	push	r28
    726c:	df 93       	push	r29
    726e:	81 e0       	ldi	r24, 0x01	; 1
    7270:	80 93 62 06 	sts	0x0662, r24
    7274:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    7278:	00 91 73 06 	lds	r16, 0x0673
    727c:	10 91 74 06 	lds	r17, 0x0674
    7280:	10 92 74 06 	sts	0x0674, r1
    7284:	10 92 73 06 	sts	0x0673, r1
    7288:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    728c:	20 91 5b 06 	lds	r18, 0x065B
    7290:	30 91 5c 06 	lds	r19, 0x065C
    7294:	40 91 5d 06 	lds	r20, 0x065D
    7298:	50 91 5e 06 	lds	r21, 0x065E
    729c:	21 15       	cp	r18, r1
    729e:	31 05       	cpc	r19, r1
    72a0:	41 05       	cpc	r20, r1
    72a2:	51 05       	cpc	r21, r1
    72a4:	09 f4       	brne	.+2      	; 0x72a8 <TimerM_HandleFire+0x5c>
    72a6:	86 c0       	rjmp	.+268    	; 0x73b4 <TimerM_HandleFire+0x168>
    72a8:	76 e7       	ldi	r23, 0x76	; 118
    72aa:	c7 2e       	mov	r12, r23
    72ac:	76 e0       	ldi	r23, 0x06	; 6
    72ae:	d7 2e       	mov	r13, r23
    72b0:	c0 e0       	ldi	r28, 0x00	; 0
    72b2:	d0 e0       	ldi	r29, 0x00	; 0
    72b4:	61 e0       	ldi	r22, 0x01	; 1
    72b6:	46 2e       	mov	r4, r22
    72b8:	51 2c       	mov	r5, r1
    72ba:	61 2c       	mov	r6, r1
    72bc:	71 2c       	mov	r7, r1
    72be:	48 01       	movw	r8, r16
    72c0:	aa 24       	eor	r10, r10
    72c2:	bb 24       	eor	r11, r11
    72c4:	11 c0       	rjmp	.+34     	; 0x72e8 <TimerM_HandleFire+0x9c>
    72c6:	21 96       	adiw	r28, 0x01	; 1
    72c8:	89 e0       	ldi	r24, 0x09	; 9
    72ca:	90 e0       	ldi	r25, 0x00	; 0
    72cc:	c8 0e       	add	r12, r24
    72ce:	d9 1e       	adc	r13, r25
    72d0:	c0 31       	cpi	r28, 0x10	; 16
    72d2:	d1 05       	cpc	r29, r1
    72d4:	09 f4       	brne	.+2      	; 0x72d8 <TimerM_HandleFire+0x8c>
    72d6:	6e c0       	rjmp	.+220    	; 0x73b4 <TimerM_HandleFire+0x168>
    72d8:	20 91 5b 06 	lds	r18, 0x065B
    72dc:	30 91 5c 06 	lds	r19, 0x065C
    72e0:	40 91 5d 06 	lds	r20, 0x065D
    72e4:	50 91 5e 06 	lds	r21, 0x065E
    72e8:	3c 2e       	mov	r3, r28
    72ea:	83 01       	movw	r16, r6
    72ec:	72 01       	movw	r14, r4
    72ee:	0c 2e       	mov	r0, r28
    72f0:	04 c0       	rjmp	.+8      	; 0x72fa <TimerM_HandleFire+0xae>
    72f2:	ee 0c       	add	r14, r14
    72f4:	ff 1c       	adc	r15, r15
    72f6:	00 1f       	adc	r16, r16
    72f8:	11 1f       	adc	r17, r17
    72fa:	0a 94       	dec	r0
    72fc:	d2 f7       	brpl	.-12     	; 0x72f2 <TimerM_HandleFire+0xa6>
    72fe:	2e 21       	and	r18, r14
    7300:	3f 21       	and	r19, r15
    7302:	40 23       	and	r20, r16
    7304:	51 23       	and	r21, r17
    7306:	21 15       	cp	r18, r1
    7308:	31 05       	cpc	r19, r1
    730a:	41 05       	cpc	r20, r1
    730c:	51 05       	cpc	r21, r1
    730e:	d9 f2       	breq	.-74     	; 0x72c6 <TimerM_HandleFire+0x7a>
    7310:	f6 01       	movw	r30, r12
    7312:	85 81       	ldd	r24, Z+5	; 0x05
    7314:	96 81       	ldd	r25, Z+6	; 0x06
    7316:	a7 81       	ldd	r26, Z+7	; 0x07
    7318:	b0 85       	ldd	r27, Z+8	; 0x08
    731a:	88 19       	sub	r24, r8
    731c:	99 09       	sbc	r25, r9
    731e:	aa 09       	sbc	r26, r10
    7320:	bb 09       	sbc	r27, r11
    7322:	85 83       	std	Z+5, r24	; 0x05
    7324:	96 83       	std	Z+6, r25	; 0x06
    7326:	a7 83       	std	Z+7, r26	; 0x07
    7328:	b0 87       	std	Z+8, r27	; 0x08
    732a:	03 97       	sbiw	r24, 0x03	; 3
    732c:	a1 05       	cpc	r26, r1
    732e:	b1 05       	cpc	r27, r1
    7330:	54 f6       	brge	.-108    	; 0x72c6 <TimerM_HandleFire+0x7a>
    7332:	84 e1       	ldi	r24, 0x14	; 20
    7334:	9a e3       	ldi	r25, 0x3A	; 58
    7336:	67 e0       	ldi	r22, 0x07	; 7
    7338:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    733c:	88 23       	and	r24, r24
    733e:	09 f4       	brne	.+2      	; 0x7342 <TimerM_HandleFire+0xf6>
    7340:	57 c0       	rjmp	.+174    	; 0x73f0 <TimerM_HandleFire+0x1a4>
    7342:	f6 01       	movw	r30, r12
    7344:	80 81       	ld	r24, Z
    7346:	88 23       	and	r24, r24
    7348:	09 f4       	brne	.+2      	; 0x734c <TimerM_HandleFire+0x100>
    734a:	5d c0       	rjmp	.+186    	; 0x7406 <TimerM_HandleFire+0x1ba>
    734c:	d8 01       	movw	r26, r16
    734e:	c7 01       	movw	r24, r14
    7350:	80 95       	com	r24
    7352:	90 95       	com	r25
    7354:	a0 95       	com	r26
    7356:	b0 95       	com	r27
    7358:	20 91 5b 06 	lds	r18, 0x065B
    735c:	30 91 5c 06 	lds	r19, 0x065C
    7360:	40 91 5d 06 	lds	r20, 0x065D
    7364:	50 91 5e 06 	lds	r21, 0x065E
    7368:	28 23       	and	r18, r24
    736a:	39 23       	and	r19, r25
    736c:	4a 23       	and	r20, r26
    736e:	5b 23       	and	r21, r27
    7370:	20 93 5b 06 	sts	0x065B, r18
    7374:	30 93 5c 06 	sts	0x065C, r19
    7378:	40 93 5d 06 	sts	0x065D, r20
    737c:	50 93 5e 06 	sts	0x065E, r21
    7380:	e0 91 5a 06 	lds	r30, 0x065A
    7384:	ef 30       	cpi	r30, 0x0F	; 15
    7386:	09 f4       	brne	.+2      	; 0x738a <TimerM_HandleFire+0x13e>
    7388:	ef ef       	ldi	r30, 0xFF	; 255
    738a:	ef 5f       	subi	r30, 0xFF	; 255
    738c:	e0 93 5a 06 	sts	0x065A, r30
    7390:	80 91 5f 06 	lds	r24, 0x065F
    7394:	8f 5f       	subi	r24, 0xFF	; 255
    7396:	80 93 5f 06 	sts	0x065F, r24
    739a:	f0 e0       	ldi	r31, 0x00	; 0
    739c:	ed 59       	subi	r30, 0x9D	; 157
    739e:	f9 4f       	sbci	r31, 0xF9	; 249
    73a0:	30 82       	st	Z, r3
    73a2:	21 96       	adiw	r28, 0x01	; 1
    73a4:	89 e0       	ldi	r24, 0x09	; 9
    73a6:	90 e0       	ldi	r25, 0x00	; 0
    73a8:	c8 0e       	add	r12, r24
    73aa:	d9 1e       	adc	r13, r25
    73ac:	c0 31       	cpi	r28, 0x10	; 16
    73ae:	d1 05       	cpc	r29, r1
    73b0:	09 f0       	breq	.+2      	; 0x73b4 <TimerM_HandleFire+0x168>
    73b2:	92 cf       	rjmp	.-220    	; 0x72d8 <TimerM_HandleFire+0x8c>
    73b4:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    73b8:	00 91 73 06 	lds	r16, 0x0673
    73bc:	10 91 74 06 	lds	r17, 0x0674
    73c0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    73c4:	01 2b       	or	r16, r17
    73c6:	11 f4       	brne	.+4      	; 0x73cc <TimerM_HandleFire+0x180>
    73c8:	0e 94 bf 37 	call	0x6f7e	; 0x6f7e <TimerM_adjustInterval>
    73cc:	df 91       	pop	r29
    73ce:	cf 91       	pop	r28
    73d0:	1f 91       	pop	r17
    73d2:	0f 91       	pop	r16
    73d4:	ff 90       	pop	r15
    73d6:	ef 90       	pop	r14
    73d8:	df 90       	pop	r13
    73da:	cf 90       	pop	r12
    73dc:	bf 90       	pop	r11
    73de:	af 90       	pop	r10
    73e0:	9f 90       	pop	r9
    73e2:	8f 90       	pop	r8
    73e4:	7f 90       	pop	r7
    73e6:	6f 90       	pop	r6
    73e8:	5f 90       	pop	r5
    73ea:	4f 90       	pop	r4
    73ec:	3f 90       	pop	r3
    73ee:	08 95       	ret
    73f0:	80 91 61 06 	lds	r24, 0x0661
    73f4:	90 e0       	ldi	r25, 0x00	; 0
    73f6:	a0 e0       	ldi	r26, 0x00	; 0
    73f8:	b0 e0       	ldi	r27, 0x00	; 0
    73fa:	f6 01       	movw	r30, r12
    73fc:	85 83       	std	Z+5, r24	; 0x05
    73fe:	96 83       	std	Z+6, r25	; 0x06
    7400:	a7 83       	std	Z+7, r26	; 0x07
    7402:	b0 87       	std	Z+8, r27	; 0x08
    7404:	60 cf       	rjmp	.-320    	; 0x72c6 <TimerM_HandleFire+0x7a>
    7406:	85 81       	ldd	r24, Z+5	; 0x05
    7408:	96 81       	ldd	r25, Z+6	; 0x06
    740a:	a7 81       	ldd	r26, Z+7	; 0x07
    740c:	b0 85       	ldd	r27, Z+8	; 0x08
    740e:	21 81       	ldd	r18, Z+1	; 0x01
    7410:	32 81       	ldd	r19, Z+2	; 0x02
    7412:	43 81       	ldd	r20, Z+3	; 0x03
    7414:	54 81       	ldd	r21, Z+4	; 0x04
    7416:	82 0f       	add	r24, r18
    7418:	93 1f       	adc	r25, r19
    741a:	a4 1f       	adc	r26, r20
    741c:	b5 1f       	adc	r27, r21
    741e:	85 83       	std	Z+5, r24	; 0x05
    7420:	96 83       	std	Z+6, r25	; 0x06
    7422:	a7 83       	std	Z+7, r26	; 0x07
    7424:	b0 87       	std	Z+8, r27	; 0x08
    7426:	ac cf       	rjmp	.-168    	; 0x7380 <TimerM_HandleFire+0x134>

00007428 <TimerM_signalOneTimer>:
    7428:	80 91 5f 06 	lds	r24, 0x065F
    742c:	88 23       	and	r24, r24
    742e:	91 f0       	breq	.+36     	; 0x7454 <TimerM_signalOneTimer+0x2c>
    7430:	e0 91 75 06 	lds	r30, 0x0675
    7434:	ef 30       	cpi	r30, 0x0F	; 15
    7436:	79 f0       	breq	.+30     	; 0x7456 <TimerM_signalOneTimer+0x2e>
    7438:	ef 5f       	subi	r30, 0xFF	; 255
    743a:	e0 93 75 06 	sts	0x0675, r30
    743e:	81 50       	subi	r24, 0x01	; 1
    7440:	80 93 5f 06 	sts	0x065F, r24
    7444:	f0 e0       	ldi	r31, 0x00	; 0
    7446:	ed 59       	subi	r30, 0x9D	; 157
    7448:	f9 4f       	sbci	r31, 0xF9	; 249
    744a:	80 81       	ld	r24, Z
    744c:	80 31       	cpi	r24, 0x10	; 16
    744e:	10 f4       	brcc	.+4      	; 0x7454 <TimerM_signalOneTimer+0x2c>
    7450:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <GenericTimerFired>
    7454:	08 95       	ret
    7456:	ef ef       	ldi	r30, 0xFF	; 255
    7458:	ef cf       	rjmp	.-34     	; 0x7438 <TimerM_signalOneTimer+0x10>

0000745a <is_host_lsb>:
 */
#include "byteorder.h"
//-------------------------------------------------------------------------
inline int is_host_lsb(void)
{
    745a:	df 93       	push	r29
    745c:	cf 93       	push	r28
    745e:	00 d0       	rcall	.+0      	; 0x7460 <is_host_lsb+0x6>
    7460:	cd b7       	in	r28, 0x3d	; 61
    7462:	de b7       	in	r29, 0x3e	; 62
    const uint8_t n[2] = {
        1, 0
    };
    7464:	81 e0       	ldi	r24, 0x01	; 1
    7466:	89 83       	std	Y+1, r24	; 0x01
    7468:	1a 82       	std	Y+2, r1	; 0x02
    746a:	20 e0       	ldi	r18, 0x00	; 0
    746c:	30 e0       	ldi	r19, 0x00	; 0
    746e:	89 81       	ldd	r24, Y+1	; 0x01
    7470:	9a 81       	ldd	r25, Y+2	; 0x02
    7472:	01 97       	sbiw	r24, 0x01	; 1
    7474:	31 f0       	breq	.+12     	; 0x7482 <is_host_lsb+0x28>
    return *(uint16_t *) n == 1;
}
    7476:	c9 01       	movw	r24, r18
    7478:	0f 90       	pop	r0
    747a:	0f 90       	pop	r0
    747c:	cf 91       	pop	r28
    747e:	df 91       	pop	r29
    7480:	08 95       	ret
    7482:	21 e0       	ldi	r18, 0x01	; 1
    7484:	30 e0       	ldi	r19, 0x00	; 0
    7486:	c9 01       	movw	r24, r18
    7488:	0f 90       	pop	r0
    748a:	0f 90       	pop	r0
    748c:	cf 91       	pop	r28
    748e:	df 91       	pop	r29
    7490:	08 95       	ret

00007492 <toLSB16>:

//-------------------------------------------------------------------------
inline uint16_t toLSB16(uint16_t a)
{
    7492:	df 93       	push	r29
    7494:	cf 93       	push	r28
    7496:	00 d0       	rcall	.+0      	; 0x7498 <toLSB16+0x6>
    7498:	cd b7       	in	r28, 0x3d	; 61
    749a:	de b7       	in	r29, 0x3e	; 62
    749c:	9c 01       	movw	r18, r24
    749e:	81 e0       	ldi	r24, 0x01	; 1
    74a0:	89 83       	std	Y+1, r24	; 0x01
    74a2:	1a 82       	std	Y+2, r1	; 0x02
    return is_host_lsb()? a : (a << 8) | (a >> 8);
    74a4:	89 81       	ldd	r24, Y+1	; 0x01
    74a6:	9a 81       	ldd	r25, Y+2	; 0x02
    74a8:	01 97       	sbiw	r24, 0x01	; 1
    74aa:	19 f0       	breq	.+6      	; 0x74b2 <toLSB16+0x20>
    74ac:	82 2f       	mov	r24, r18
    74ae:	23 2f       	mov	r18, r19
    74b0:	38 2f       	mov	r19, r24
}
    74b2:	c9 01       	movw	r24, r18
    74b4:	0f 90       	pop	r0
    74b6:	0f 90       	pop	r0
    74b8:	cf 91       	pop	r28
    74ba:	df 91       	pop	r29
    74bc:	08 95       	ret

000074be <fromLSB16>:

//-------------------------------------------------------------------------
inline uint16_t fromLSB16(uint16_t a)
{
    74be:	df 93       	push	r29
    74c0:	cf 93       	push	r28
    74c2:	00 d0       	rcall	.+0      	; 0x74c4 <fromLSB16+0x6>
    74c4:	cd b7       	in	r28, 0x3d	; 61
    74c6:	de b7       	in	r29, 0x3e	; 62
    74c8:	9c 01       	movw	r18, r24
    74ca:	81 e0       	ldi	r24, 0x01	; 1
    74cc:	89 83       	std	Y+1, r24	; 0x01
    74ce:	1a 82       	std	Y+2, r1	; 0x02
    return is_host_lsb()? a : (a << 8) | (a >> 8);
    74d0:	89 81       	ldd	r24, Y+1	; 0x01
    74d2:	9a 81       	ldd	r25, Y+2	; 0x02
    74d4:	01 97       	sbiw	r24, 0x01	; 1
    74d6:	19 f0       	breq	.+6      	; 0x74de <fromLSB16+0x20>
    74d8:	82 2f       	mov	r24, r18
    74da:	23 2f       	mov	r18, r19
    74dc:	38 2f       	mov	r19, r24
}
    74de:	c9 01       	movw	r24, r18
    74e0:	0f 90       	pop	r0
    74e2:	0f 90       	pop	r0
    74e4:	cf 91       	pop	r28
    74e6:	df 91       	pop	r29
    74e8:	08 95       	ret

000074ea <mystrcpy>:
 */
#include "string.h"
//-------------------------------------------------------------------------
void mystrcpy(char *dest, const char *src)
{
    74ea:	cf 93       	push	r28
    74ec:	df 93       	push	r29
    74ee:	eb 01       	movw	r28, r22
    int i;

    i = 0;
    while (src[i] != '\0')
    74f0:	e8 81       	ld	r30, Y
    74f2:	ee 23       	and	r30, r30
    74f4:	b1 f0       	breq	.+44     	; 0x7522 <mystrcpy+0x38>
    74f6:	20 e0       	ldi	r18, 0x00	; 0
    74f8:	30 e0       	ldi	r19, 0x00	; 0
    74fa:	a0 e0       	ldi	r26, 0x00	; 0
    74fc:	b0 e0       	ldi	r27, 0x00	; 0
    {
        dest[i] = src[i];
    74fe:	a8 0f       	add	r26, r24
    7500:	b9 1f       	adc	r27, r25
    7502:	ec 93       	st	X, r30
        i++;
    7504:	2f 5f       	subi	r18, 0xFF	; 255
    7506:	3f 4f       	sbci	r19, 0xFF	; 255
    7508:	d9 01       	movw	r26, r18
    750a:	fe 01       	movw	r30, r28
    750c:	e2 0f       	add	r30, r18
    750e:	f3 1f       	adc	r31, r19
    7510:	e0 81       	ld	r30, Z
    7512:	ee 23       	and	r30, r30
    7514:	a1 f7       	brne	.-24     	; 0x74fe <mystrcpy+0x14>
    }
    dest[i] = '\0';
    7516:	a8 0f       	add	r26, r24
    7518:	b9 1f       	adc	r27, r25
    751a:	1c 92       	st	X, r1
}
    751c:	df 91       	pop	r29
    751e:	cf 91       	pop	r28
    7520:	08 95       	ret
    7522:	a0 e0       	ldi	r26, 0x00	; 0
    7524:	b0 e0       	ldi	r27, 0x00	; 0
    7526:	f7 cf       	rjmp	.-18     	; 0x7516 <mystrcpy+0x2c>

00007528 <mystrncpy>:

//-------------------------------------------------------------------------
void mystrncpy(char *dest, const char *src, uint8_t n)
{
    7528:	cf 93       	push	r28
    752a:	df 93       	push	r29
    752c:	ec 01       	movw	r28, r24
    int i;

    for (i = 0; i < n; i++)
    752e:	50 e0       	ldi	r21, 0x00	; 0
    7530:	41 15       	cp	r20, r1
    7532:	51 05       	cpc	r21, r1
    7534:	79 f0       	breq	.+30     	; 0x7554 <mystrncpy+0x2c>
    7536:	20 e0       	ldi	r18, 0x00	; 0
    7538:	30 e0       	ldi	r19, 0x00	; 0
    {
        dest[i] = src[i];
    753a:	fe 01       	movw	r30, r28
    753c:	e2 0f       	add	r30, r18
    753e:	f3 1f       	adc	r31, r19
    7540:	db 01       	movw	r26, r22
    7542:	a2 0f       	add	r26, r18
    7544:	b3 1f       	adc	r27, r19
    7546:	8c 91       	ld	r24, X
    7548:	80 83       	st	Z, r24
    754a:	2f 5f       	subi	r18, 0xFF	; 255
    754c:	3f 4f       	sbci	r19, 0xFF	; 255
    754e:	24 17       	cp	r18, r20
    7550:	35 07       	cpc	r19, r21
    7552:	9c f3       	brlt	.-26     	; 0x753a <mystrncpy+0x12>
    }
}
    7554:	df 91       	pop	r29
    7556:	cf 91       	pop	r28
    7558:	08 95       	ret

0000755a <strappend>:

//-------------------------------------------------------------------------
void strappend(char *base, char *string)
{
    755a:	0f 93       	push	r16
    755c:	1f 93       	push	r17
    755e:	cf 93       	push	r28
    7560:	df 93       	push	r29
    7562:	8c 01       	movw	r16, r24
    int length1, length2;
    uint8_t i;

    length1 = mystrlen(base);
    length2 = mystrlen(string);
    for (i = 0; i < length2; i++)
    {
        base[i + length1] = string[i];
    }
    base[length1 + length2] = '\0';
}

//-------------------------------------------------------------------------
char *str_from_integer(int num)
{
    static char temp[7];
    int internal;
    uint8_t length;
    uint8_t i;
    uint8_t offset = 5;
    uint8_t remainder;

    if (num < 0)
    {
        internal = -num;
    }
    else
    {
        internal = num;
    }
    temp[6] = '\0';
    do
    {
        remainder = internal % 10;
        temp[offset] = dec2asciichar(remainder);
        internal = internal / 10;
        offset--;
    }

    while (internal != 0);
    if (num < 0)
    {
        temp[offset] = '-';
        if (offset == 0)
        {
            return temp;
        }
        else
        {
            offset--;
        }
    }
    {
        length = 7 - offset - 1;
        for (i = 0; i < length; i++)
        {
            temp[i] = temp[i + offset + 1];
        }
    }
    return temp;
}

//-------------------------------------------------------------------------
int superstring(char *string1, char *string2)
{
    //returns string1 is a superstring of string2, (equal or longer but string2 is prefix) then return 0
    //else return 1
    char *p, *q;

    p = string1;
    q = string2;
    while ((*p == *q) && (*p != '\0'))
    {
        p++;
        q++;
    }
    if ((*q == '\0') && (*p != '\0'))
    {
        return 0;
    }

    if ((*q == '\0') && (*p == '\0'))
    {
        return 0;
    }

    return 1;
}

//-------------------------------------------------------------------------
int mystrncmp(char *s, uint8_t start1, char *t, uint8_t start2, uint8_t length)
{
    uint8_t i;

    for (i = 0; i < length; i++)
    {
        if (s[i + start1] != t[i + start2])
        {
            return 1;
        }
    }
    return 0;
}

//--------------------------------------------------------------------------
int mystrlen(char *s)
{
    int count = 0;

    while (s[count] != '\0')
    7564:	fc 01       	movw	r30, r24
    7566:	80 81       	ld	r24, Z
    7568:	88 23       	and	r24, r24
    756a:	c1 f1       	breq	.+112    	; 0x75dc <strappend+0x82>
    756c:	40 e0       	ldi	r20, 0x00	; 0
    756e:	50 e0       	ldi	r21, 0x00	; 0
    {
        count++;
    7570:	4f 5f       	subi	r20, 0xFF	; 255
    7572:	5f 4f       	sbci	r21, 0xFF	; 255
    7574:	e8 01       	movw	r28, r16
    7576:	c4 0f       	add	r28, r20
    7578:	d5 1f       	adc	r29, r21
    757a:	88 81       	ld	r24, Y
    757c:	88 23       	and	r24, r24
    757e:	c1 f7       	brne	.-16     	; 0x7570 <strappend+0x16>
    7580:	fb 01       	movw	r30, r22
    7582:	80 81       	ld	r24, Z
    7584:	88 23       	and	r24, r24
    7586:	69 f1       	breq	.+90     	; 0x75e2 <strappend+0x88>
    7588:	20 e0       	ldi	r18, 0x00	; 0
    758a:	30 e0       	ldi	r19, 0x00	; 0
    758c:	2f 5f       	subi	r18, 0xFF	; 255
    758e:	3f 4f       	sbci	r19, 0xFF	; 255
    7590:	fb 01       	movw	r30, r22
    7592:	e2 0f       	add	r30, r18
    7594:	f3 1f       	adc	r31, r19
    7596:	80 81       	ld	r24, Z
    7598:	88 23       	and	r24, r24
    759a:	c1 f7       	brne	.-16     	; 0x758c <strappend+0x32>
    759c:	90 e0       	ldi	r25, 0x00	; 0
    759e:	a0 e0       	ldi	r26, 0x00	; 0
    75a0:	b0 e0       	ldi	r27, 0x00	; 0
    75a2:	e8 01       	movw	r28, r16
    75a4:	c4 0f       	add	r28, r20
    75a6:	d5 1f       	adc	r29, r21
    75a8:	e0 e0       	ldi	r30, 0x00	; 0
    75aa:	f0 e0       	ldi	r31, 0x00	; 0
    75ac:	ac 0f       	add	r26, r28
    75ae:	bd 1f       	adc	r27, r29
    75b0:	e6 0f       	add	r30, r22
    75b2:	f7 1f       	adc	r31, r23
    75b4:	80 81       	ld	r24, Z
    75b6:	8c 93       	st	X, r24
    75b8:	9f 5f       	subi	r25, 0xFF	; 255
    75ba:	e9 2f       	mov	r30, r25
    75bc:	f0 e0       	ldi	r31, 0x00	; 0
    75be:	df 01       	movw	r26, r30
    75c0:	e2 17       	cp	r30, r18
    75c2:	f3 07       	cpc	r31, r19
    75c4:	9c f3       	brlt	.-26     	; 0x75ac <strappend+0x52>
    75c6:	20 0f       	add	r18, r16
    75c8:	31 1f       	adc	r19, r17
    75ca:	42 0f       	add	r20, r18
    75cc:	53 1f       	adc	r21, r19
    75ce:	fa 01       	movw	r30, r20
    75d0:	10 82       	st	Z, r1
    75d2:	df 91       	pop	r29
    75d4:	cf 91       	pop	r28
    75d6:	1f 91       	pop	r17
    75d8:	0f 91       	pop	r16
    75da:	08 95       	ret
    75dc:	40 e0       	ldi	r20, 0x00	; 0
    75de:	50 e0       	ldi	r21, 0x00	; 0
    75e0:	cf cf       	rjmp	.-98     	; 0x7580 <strappend+0x26>
    75e2:	20 e0       	ldi	r18, 0x00	; 0
    75e4:	30 e0       	ldi	r19, 0x00	; 0
    75e6:	ef cf       	rjmp	.-34     	; 0x75c6 <strappend+0x6c>

000075e8 <superstring>:
    75e8:	cf 93       	push	r28
    75ea:	df 93       	push	r29
    75ec:	fc 01       	movw	r30, r24
    75ee:	eb 01       	movw	r28, r22
    75f0:	80 81       	ld	r24, Z
    75f2:	28 81       	ld	r18, Y
    75f4:	82 17       	cp	r24, r18
    75f6:	69 f4       	brne	.+26     	; 0x7612 <superstring+0x2a>
    75f8:	88 23       	and	r24, r24
    75fa:	c1 f0       	breq	.+48     	; 0x762c <superstring+0x44>
    75fc:	df 01       	movw	r26, r30
    75fe:	fb 01       	movw	r30, r22
    7600:	02 c0       	rjmp	.+4      	; 0x7606 <superstring+0x1e>
    7602:	88 23       	and	r24, r24
    7604:	99 f0       	breq	.+38     	; 0x762c <superstring+0x44>
    7606:	11 96       	adiw	r26, 0x01	; 1
    7608:	31 96       	adiw	r30, 0x01	; 1
    760a:	8c 91       	ld	r24, X
    760c:	20 81       	ld	r18, Z
    760e:	82 17       	cp	r24, r18
    7610:	c1 f3       	breq	.-16     	; 0x7602 <superstring+0x1a>
    7612:	90 e0       	ldi	r25, 0x00	; 0
    7614:	22 23       	and	r18, r18
    7616:	41 f0       	breq	.+16     	; 0x7628 <superstring+0x40>
    7618:	81 e0       	ldi	r24, 0x01	; 1
    761a:	98 27       	eor	r25, r24
    761c:	29 2f       	mov	r18, r25
    761e:	30 e0       	ldi	r19, 0x00	; 0
    7620:	c9 01       	movw	r24, r18
    7622:	df 91       	pop	r29
    7624:	cf 91       	pop	r28
    7626:	08 95       	ret
    7628:	91 e0       	ldi	r25, 0x01	; 1
    762a:	f6 cf       	rjmp	.-20     	; 0x7618 <superstring+0x30>
    762c:	20 e0       	ldi	r18, 0x00	; 0
    762e:	30 e0       	ldi	r19, 0x00	; 0
    7630:	c9 01       	movw	r24, r18
    7632:	df 91       	pop	r29
    7634:	cf 91       	pop	r28
    7636:	08 95       	ret

00007638 <mystrncmp>:
    7638:	0f 93       	push	r16
    763a:	cf 93       	push	r28
    763c:	df 93       	push	r29
    763e:	ec 01       	movw	r28, r24
    7640:	00 23       	and	r16, r16
    7642:	e9 f0       	breq	.+58     	; 0x767e <mystrncmp+0x46>
    7644:	70 e0       	ldi	r23, 0x00	; 0
    7646:	30 e0       	ldi	r19, 0x00	; 0
    7648:	fc 01       	movw	r30, r24
    764a:	e6 0f       	add	r30, r22
    764c:	f7 1f       	adc	r31, r23
    764e:	da 01       	movw	r26, r20
    7650:	a2 0f       	add	r26, r18
    7652:	b3 1f       	adc	r27, r19
    7654:	90 81       	ld	r25, Z
    7656:	8c 91       	ld	r24, X
    7658:	98 17       	cp	r25, r24
    765a:	c1 f4       	brne	.+48     	; 0x768c <mystrncmp+0x54>
    765c:	db 01       	movw	r26, r22
    765e:	11 96       	adiw	r26, 0x01	; 1
    7660:	ac 0f       	add	r26, r28
    7662:	bd 1f       	adc	r27, r29
    7664:	f9 01       	movw	r30, r18
    7666:	31 96       	adiw	r30, 0x01	; 1
    7668:	e4 0f       	add	r30, r20
    766a:	f5 1f       	adc	r31, r21
    766c:	20 e0       	ldi	r18, 0x00	; 0
    766e:	04 c0       	rjmp	.+8      	; 0x7678 <mystrncmp+0x40>
    7670:	9d 91       	ld	r25, X+
    7672:	81 91       	ld	r24, Z+
    7674:	98 17       	cp	r25, r24
    7676:	51 f4       	brne	.+20     	; 0x768c <mystrncmp+0x54>
    7678:	2f 5f       	subi	r18, 0xFF	; 255
    767a:	20 17       	cp	r18, r16
    767c:	c8 f3       	brcs	.-14     	; 0x7670 <mystrncmp+0x38>
    767e:	20 e0       	ldi	r18, 0x00	; 0
    7680:	30 e0       	ldi	r19, 0x00	; 0
    7682:	c9 01       	movw	r24, r18
    7684:	df 91       	pop	r29
    7686:	cf 91       	pop	r28
    7688:	0f 91       	pop	r16
    768a:	08 95       	ret
    768c:	21 e0       	ldi	r18, 0x01	; 1
    768e:	30 e0       	ldi	r19, 0x00	; 0
    7690:	c9 01       	movw	r24, r18
    7692:	df 91       	pop	r29
    7694:	cf 91       	pop	r28
    7696:	0f 91       	pop	r16
    7698:	08 95       	ret

0000769a <mystrlen>:
    769a:	dc 01       	movw	r26, r24
    769c:	8c 91       	ld	r24, X
    769e:	88 23       	and	r24, r24
    76a0:	61 f0       	breq	.+24     	; 0x76ba <mystrlen+0x20>
    76a2:	20 e0       	ldi	r18, 0x00	; 0
    76a4:	30 e0       	ldi	r19, 0x00	; 0
    76a6:	2f 5f       	subi	r18, 0xFF	; 255
    76a8:	3f 4f       	sbci	r19, 0xFF	; 255
    76aa:	fd 01       	movw	r30, r26
    76ac:	e2 0f       	add	r30, r18
    76ae:	f3 1f       	adc	r31, r19
    76b0:	80 81       	ld	r24, Z
    76b2:	88 23       	and	r24, r24
    76b4:	c1 f7       	brne	.-16     	; 0x76a6 <mystrlen+0xc>
    }

    return count;
}
    76b6:	c9 01       	movw	r24, r18
    76b8:	08 95       	ret
    76ba:	20 e0       	ldi	r18, 0x00	; 0
    76bc:	30 e0       	ldi	r19, 0x00	; 0
    76be:	fb cf       	rjmp	.-10     	; 0x76b6 <mystrlen+0x1c>

000076c0 <str_from_integer>:
    76c0:	ef 92       	push	r14
    76c2:	ff 92       	push	r15
    76c4:	1f 93       	push	r17
    76c6:	cf 93       	push	r28
    76c8:	df 93       	push	r29
    76ca:	7c 01       	movw	r14, r24
    76cc:	ec 01       	movw	r28, r24
    76ce:	97 fd       	sbrc	r25, 7
    76d0:	40 c0       	rjmp	.+128    	; 0x7752 <str_from_integer+0x92>
    76d2:	10 92 a4 03 	sts	0x03A4, r1
    76d6:	15 e0       	ldi	r17, 0x05	; 5
    76d8:	ce 01       	movw	r24, r28
    76da:	6a e0       	ldi	r22, 0x0A	; 10
    76dc:	70 e0       	ldi	r23, 0x00	; 0
    76de:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    76e2:	0e 94 c7 3b 	call	0x778e	; 0x778e <dec2asciichar>
    76e6:	e1 2f       	mov	r30, r17
    76e8:	f0 e0       	ldi	r31, 0x00	; 0
    76ea:	e2 56       	subi	r30, 0x62	; 98
    76ec:	fc 4f       	sbci	r31, 0xFC	; 252
    76ee:	80 83       	st	Z, r24
    76f0:	ce 01       	movw	r24, r28
    76f2:	6a e0       	ldi	r22, 0x0A	; 10
    76f4:	70 e0       	ldi	r23, 0x00	; 0
    76f6:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    76fa:	eb 01       	movw	r28, r22
    76fc:	11 50       	subi	r17, 0x01	; 1
    76fe:	61 15       	cp	r22, r1
    7700:	71 05       	cpc	r23, r1
    7702:	51 f7       	brne	.-44     	; 0x76d8 <str_from_integer+0x18>
    7704:	f7 fc       	sbrc	r15, 7
    7706:	1b c0       	rjmp	.+54     	; 0x773e <str_from_integer+0x7e>
    7708:	86 e0       	ldi	r24, 0x06	; 6
    770a:	81 1b       	sub	r24, r17
    770c:	81 f0       	breq	.+32     	; 0x772e <str_from_integer+0x6e>
    770e:	e1 2f       	mov	r30, r17
    7710:	f0 e0       	ldi	r31, 0x00	; 0
    7712:	e1 56       	subi	r30, 0x61	; 97
    7714:	fc 4f       	sbci	r31, 0xFC	; 252
    7716:	ae e9       	ldi	r26, 0x9E	; 158
    7718:	b3 e0       	ldi	r27, 0x03	; 3
    771a:	81 50       	subi	r24, 0x01	; 1
    771c:	28 2f       	mov	r18, r24
    771e:	30 e0       	ldi	r19, 0x00	; 0
    7720:	21 56       	subi	r18, 0x61	; 97
    7722:	3c 4f       	sbci	r19, 0xFC	; 252
    7724:	81 91       	ld	r24, Z+
    7726:	8d 93       	st	X+, r24
    7728:	a2 17       	cp	r26, r18
    772a:	b3 07       	cpc	r27, r19
    772c:	d9 f7       	brne	.-10     	; 0x7724 <str_from_integer+0x64>
    772e:	8e e9       	ldi	r24, 0x9E	; 158
    7730:	93 e0       	ldi	r25, 0x03	; 3
    7732:	df 91       	pop	r29
    7734:	cf 91       	pop	r28
    7736:	1f 91       	pop	r17
    7738:	ff 90       	pop	r15
    773a:	ef 90       	pop	r14
    773c:	08 95       	ret
    773e:	e1 2f       	mov	r30, r17
    7740:	f0 e0       	ldi	r31, 0x00	; 0
    7742:	e2 56       	subi	r30, 0x62	; 98
    7744:	fc 4f       	sbci	r31, 0xFC	; 252
    7746:	8d e2       	ldi	r24, 0x2D	; 45
    7748:	80 83       	st	Z, r24
    774a:	11 23       	and	r17, r17
    774c:	81 f3       	breq	.-32     	; 0x772e <str_from_integer+0x6e>
    774e:	11 50       	subi	r17, 0x01	; 1
    7750:	db cf       	rjmp	.-74     	; 0x7708 <str_from_integer+0x48>
    7752:	cc 27       	eor	r28, r28
    7754:	dd 27       	eor	r29, r29
    7756:	c8 1b       	sub	r28, r24
    7758:	d9 0b       	sbc	r29, r25
    775a:	bb cf       	rjmp	.-138    	; 0x76d2 <str_from_integer+0x12>

0000775c <rcombine>:
#ifdef PLATFORM_AVR
#include "../hardware/avrhardware.h"
#endif
inline result_t rcombine(result_t r1, result_t r2)
{
    775c:	88 23       	and	r24, r24
    775e:	09 f4       	brne	.+2      	; 0x7762 <rcombine+0x6>
    7760:	60 e0       	ldi	r22, 0x00	; 0
    return r1 == FAIL ? FAIL : r2;
}
    7762:	86 2f       	mov	r24, r22
    7764:	08 95       	ret

00007766 <hex2value>:

//-------------------------------------------------------------------------
uint16_t hex2value(uint8_t hex)
{
    7766:	98 2f       	mov	r25, r24
    char a = (char)hex;
    uint16_t high;

    if ((a >= '0') && (a <= '9'))
    7768:	80 53       	subi	r24, 0x30	; 48
    776a:	8a 30       	cpi	r24, 0x0A	; 10
    776c:	40 f0       	brcs	.+16     	; 0x777e <hex2value+0x18>
    {
        high = a - '0';
    }
    else
    {
        high = a - 'A' + 10;
    776e:	29 2f       	mov	r18, r25
    7770:	33 27       	eor	r19, r19
    7772:	27 fd       	sbrc	r18, 7
    7774:	30 95       	com	r19
    7776:	27 53       	subi	r18, 0x37	; 55
    7778:	30 40       	sbci	r19, 0x00	; 0
    }

    return high;
}
    777a:	c9 01       	movw	r24, r18
    777c:	08 95       	ret
    777e:	29 2f       	mov	r18, r25
    7780:	33 27       	eor	r19, r19
    7782:	27 fd       	sbrc	r18, 7
    7784:	30 95       	com	r19
    7786:	20 53       	subi	r18, 0x30	; 48
    7788:	30 40       	sbci	r19, 0x00	; 0
    778a:	c9 01       	movw	r24, r18
    778c:	08 95       	ret

0000778e <dec2asciichar>:

//-------------------------------------------------------------------------
char dec2asciichar(uint8_t value)
{
    778e:	8a 30       	cpi	r24, 0x0A	; 10
    7790:	10 f4       	brcc	.+4      	; 0x7796 <dec2asciichar+0x8>
    if ( /*( value >= 0 ) && */ (value <= 9))
    {
        return (char)(value + 0x30);
    7792:	80 5d       	subi	r24, 0xD0	; 208
    }
    else
    {
        return 0;
    }
}
    7794:	08 95       	ret
    7796:	80 e0       	ldi	r24, 0x00	; 0
    7798:	08 95       	ret

0000779a <nmemset>:

//-------------------------------------------------------------------------
_atomic_t _atomic_start(void)
{
#ifdef PLATFORM_AVR
    _atomic_t result = _atomic_start_avr();
#endif
    return result;
}

//-------------------------------------------------------------------------
void _atomic_end(_atomic_t oldSreg)
{
#ifdef PLATFORM_AVR
    _atomic_end_avr(oldSreg);
#endif
}

//-------------------------------------------------------------------------
inline void *nmemset(void *to, int val, size_t n)
{
    779a:	78 2f       	mov	r23, r24
    779c:	a9 2f       	mov	r26, r25
    char *cto = to;

    while (n--)
    779e:	41 15       	cp	r20, r1
    77a0:	51 05       	cpc	r21, r1
    77a2:	31 f0       	breq	.+12     	; 0x77b0 <nmemset+0x16>
    77a4:	9c 01       	movw	r18, r24
    77a6:	f9 01       	movw	r30, r18
    {
        *cto++ = val;
    77a8:	61 93       	st	Z+, r22
    77aa:	41 50       	subi	r20, 0x01	; 1
    77ac:	50 40       	sbci	r21, 0x00	; 0
    77ae:	e1 f7       	brne	.-8      	; 0x77a8 <nmemset+0xe>
    }

    return to;
}
    77b0:	87 2f       	mov	r24, r23
    77b2:	9a 2f       	mov	r25, r26
    77b4:	08 95       	ret

000077b6 <_atomic_end>:
    77b6:	0e 94 20 02 	call	0x440	; 0x440 <_atomic_end_avr>
    77ba:	08 95       	ret

000077bc <_atomic_start>:
    77bc:	0e 94 1d 02 	call	0x43a	; 0x43a <_atomic_start_avr>
    77c0:	08 95       	ret

000077c2 <getRandomNumber>:
   along with LiteOS.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "math.h"
uint16_t getRandomNumber()
{
    77c2:	0e 94 32 55 	call	0xaa64	; 0xaa64 <rand>
    uint16_t ret;

#ifdef PLATFORM_AVR
    ret = rand();
#endif
    return ret;
}
    77c6:	08 95       	ret

000077c8 <reply_ls_short>:
}

//Get the block information of sub directory and files using simplfied version 
void reply_ls_short(uint8_t block)
{
    77c8:	08 95       	ret

000077ca <InitShell>:
    //Actually this is not used because to ensure that the system is simple, we only use the long version 
    return;
}

//Get the block information of sub directory and files using long version 
void reply_ls_long(uint8_t block)
{
    uint8_t blockindex;
    uint8_t childblock;
    uint8_t seq = 0;

    if (openedfile != NULL)
    {
        //fclose2( openedfile );
        openedfile = NULL;
    }
    for (blockindex = 0; blockindex < 10; blockindex++)
    {
        childblock = fsread8uint(block, DIR_ADDRSUBOFFSET + blockindex);
        if (childblock == 0)
        {
            continue;
        }
        reply[0] = 32;
        reply[1] = 104;
        reply[2] = nodeid;
        reply[3] = childblock;
        reply[4] = seq;
        seq++;
        finfonode((char *)&reply[5], (int)childblock);
	    sleepThread(20);
	
        StandardSocketSend(0xefef, 0xffff, 32, reply);
        //     printStringN(reply,32); 
    }
}

//-------------------------------------------------------------------------
void reply_mkdir(uint8_t * receivebuffer)
{
    uint8_t blockid;
    char dirname[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    mystrncpy(dirname, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    dirname[receivebuffer[0] - 4] = '\0';
    newblockid = createDir(dirname, (int)blockid);
    reply[0] = 4;
    reply[1] = 141;
    reply[2] = nodeid;
    reply[3] = newblockid;
	 sleepThread(20);
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    // printStringN(reply,32);      
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type1(uint8_t * receivebuffer)
{
    uint8_t blockid;
    char filename[13];
    int fid;
    uint8_t newblockid;
      
    releaseAllFid();
    blockid = receivebuffer[3];
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    filename[receivebuffer[0] - 4] = '\0';
    newblockid = createFileFromDirectory(filename, (int)blockid);
    chunksequencenum = 0;
    expectNextNum = 1;
    reply[0] = 4;
    reply[1] = 121;
    reply[2] = nodeid;
    reply[3] = newblockid;
    fid = getFreeFid();
    openFile(newblockid, fid, 2);
    openedfile = &fidtable[fid];
	 sleepThread(20);
    // printStringN(reply,32);      
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type2(uint8_t * receivebuffer)
{
    uint16_t SyncNum;

    if (receivebuffer[3] == 0xff)
    {
        //now this is a sync
        SyncNum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
        if (SyncNum > expectNextNum - 1)
        {
            reply[0] = 7;
            reply[1] = 122;
            reply[2] = nodeid;
            reply[3] = 15;
            reply[4] = 15;
            reply[5] = (expectNextNum - 1) / 256;
            reply[6] = (expectNextNum - 1) % 256;
            StandardSocketSend(0xefef, 0xffff, 32, reply);
        }
        else
        {
            reply[0] = 7;
            reply[1] = 122;
            reply[2] = nodeid;
            reply[3] = 15;
            reply[4] = 15;
            reply[5] = 0;
            reply[6] = 0;
            StandardSocketSend(0xefef, 0xffff, 32, reply);
        }
        return;
    }
    chunksequencenum = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
    if (chunksequencenum != expectNextNum)
    {
        return;
    }
    fwrite2(openedfile, &receivebuffer[7], receivebuffer[6]);
    fseek2(openedfile, receivebuffer[6], 1);
    expectNextNum++;
    // printStringN(reply,32);      
    //StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type3()
{
    fclose2(openedfile);
    // printStringN(reply,32);      
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_touch(uint8_t * receivebuffer)
{
    uint8_t blockid;
    char filename[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    filename[receivebuffer[0] - 4] = '\0';
    newblockid = createFileFromDirectory(filename, (int)blockid);
    reply[0] = 4;
    reply[1] = 151;
    reply[2] = nodeid;
    reply[3] = newblockid;
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //printStringN(reply,32);       
}

//-------------------------------------------------------------------------
void reply_fromNodeToPC_type1(uint8_t * receivebuffer)
{
    uint8_t blockid;
    char filename[13];
    int fid;
    uint16_t filesize;
    uint16_t round;
    uint16_t remain;
    uint16_t i;
    uint8_t newblockid;
    uint8_t temp1, temp2;

    blockid = receivebuffer[3];
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    filename[receivebuffer[0] - 4] = '\0';
    newblockid = existBlockAddr(filename, (int)blockid);
    reply[1] = 124;
    reply[2] = nodeid;
    fid = getFreeFid();
    openFile(newblockid, fid, 1);
    fp = &fidtable[fid];
    filesize = fp->size;
    temp1 = filesize / 256;
    temp2 = filesize % 256;
    reply[3] = temp1;
    reply[4] = temp2;
    //disabletracingfunction();
    //send out the size 
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    
    //    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //sleepThread( 100 );
    reply[3] = newblockid;
    round = filesize / 20;
    remain = filesize % 20;
    for (i = 0; i < round; i++)
    {
        fread2(fp, &reply[6], 20);
        fseek2(fp, 20, 1);
        reply[0] = 26;
        temp1 = i / 256;
        temp2 = i % 256;
        reply[4] = temp1;
        reply[5] = temp2;
        //printStringN(reply,32);                   
        // sleepThread( 100 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
    if (remain > 0)
    {
        fread2(fp, &reply[6], remain);
        reply[0] = (uint8_t) remain + 6;
        reply[4] = round / 256;
        reply[5] = round % 256;
        round++;
        //printStringN(reply,32);
        //sleepThread( 25 );
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
    temp1 = round / 256;
    temp2 = round % 256;
    //terminate signal  is here!
    reply[0] = 7;
    reply[3] = 0xef;
    reply[4] = 0xef;
    reply[5] = temp1;
    reply[6] = temp2;
    //ephread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //sleepThread( 100 );
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //do not close now!
    //       fclose2(fp); 
    
    //enabletracingfunction();
}

//-------------------------------------------------------------------------
void reply_rm(uint8_t * receivebuffer)
{
    uint8_t blockid;
    char filename[13];
    uint8_t newblockid;

    blockid = receivebuffer[3];
    mystrncpy(filename, (char *)&receivebuffer[4], receivebuffer[0] - 4);
    filename[receivebuffer[0] - 4] = '\0';
    newblockid = existBlockAddr(filename, (int)blockid);
    if (newblockid > 0)
    {
        deleteNode(newblockid);
    }
    reply[0] = 4;
    reply[1] = 161;
    reply[2] = nodeid;
    reply[3] = newblockid;
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    //printStringN(reply,32);       
}

//get patch request
void reply_fromNodeToPC_type2(uint8_t * receivebuffer)
{
    uint16_t pos;
    //disabletracingfunction();

    pos = ((uint16_t) receivebuffer[4]) * 256 + receivebuffer[5];
    reply[0] = 26;
    reply[1] = 125;
    reply[2] = nodeid;
    reply[3] = pos / 256;
    reply[4] = pos % 256;
    fseek2(fp, (int32_t) pos, 0);
    fread2(fp, &reply[6], 20);
    StandardSocketSend(0xefef, 0xffff, 32, reply);
    
   // enabletracingfunction();
}

//-------------------------------------------------------------------------
//possible bug here 
void reply126(uint8_t * receivebuffer)
{
    fclose2(fp);
}

//-------------------------------------------------------------------------
void reply_ps(uint8_t * receivebuffer)
{
    uint8_t i, len;

    //reply[0] = 15;
    reply[1] = 171;
    reply[2] = nodeid;
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            len = mystrlen((char *)thread_table[i].threadName);
            reply[0] = len + 4;
            reply[3] = thread_table[i].state;
            //if this is a break thread, then fetch the real number
            if (reply[3] == 8)
            {
                uint8_t *tempptr = (uint8_t *) thread_table[i].sp + 47;
                uint16_t addr =
                    (((uint16_t) (*tempptr)) * 256 + *(tempptr + 1) - 3);
                reply[4] = addr / 256;
                reply[5] = addr % 256;
                reply[0] += 2;
                mystrncpy((char *)&reply[6],
                          (char *)thread_table[i].threadName, len);
            }
            else
            {
                mystrncpy((char *)&reply[4],
                          (char *)thread_table[i].threadName, len);
            }
            StandardSocketSend(0xefef, 0xffff, 32, reply);
        }
    }
}

//-------------------------------------------------------------------------
void reply_killthread(uint8_t * receivebuffer)
{
    uint8_t i;
    uint8_t testtrue = 0;
    uint8_t *start, *end;
    uint8_t index;

    index = 0; 
    start = NULL;
    end = NULL;
    receivebuffer[receivebuffer[0]] = '\0';
    for (i = 0; i < LITE_MAX_THREADS; i++)
    {
        if (thread_table[i].state != STATE_NULL)
        {
            if (superstring
                ((char *)thread_table[i].threadName,
                 (char *)&receivebuffer[3]) == 0)
            {
                start = (uint8_t *) thread_table[i].ramstart;
                end = (uint8_t *) thread_table[i].ramend;
                index = i;
                thread_table[i].state = STATE_NULL;
                testtrue = 1;
            }
        }
    }
    if (testtrue == 1)
    {
        deleteThreadRegistrationInReceiverHandles(start, end);
        if (thread_table[index].thread_clear_function != NULL)
        {
            (*thread_table[index].thread_clear_function) ();
            thread_table[index].thread_clear_function = NULL;
        }
        cbi(MCUCR, SE);
        if (timercallback[index] != NULL)
        {
            timercallback[index] = NULL;
            GenericTimerStop(index + 12);
        }
        /*for ( i = 0; i < RECEIVE_HANDLE_NUM; i ++ )
           { if (( receivehandles[ i ].handlevalid == 1 ) && ( receivehandles[ i ].dataReady <= end ) && ( receivehandles[ i ].dataReady >= start )) {
           receivehandles[ i ].handlevalid = 0;
           receivehandles[ i ].port = 0;     
           }
           }
         */
    }
    reply[0] = 4;
    reply[1] = 232;
    reply[2] = nodeid;
    reply[3] = testtrue;
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_du(uint8_t * receivebuffer)
{
    int e1, e2, e3;

    e1 = fcheckFSAllocation();
    e2 = fcheckStorageAllocation();
    e3 = 0;
    if (e2 == 256)
    {
        e2 = 128;
        e3 = 128;
    }
    reply[0] = 6;
    reply[1] = 211;
    reply[2] = nodeid;
    reply[3] = e1;
    reply[4] = e2;
    reply[5] = e3;
    //printStringN(reply,32);       
    StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_search(uint8_t * receivebuffer)
{
    char filename[13];
    uint8_t searchresults[20];
    uint8_t numofsearch;
    uint8_t i;

    mystrncpy(filename, (char *)&receivebuffer[3], receivebuffer[0] - 3);
    filename[receivebuffer[0] - 3] = '\0';
    fsearch(searchresults, &numofsearch, filename);
    for (i = 0; i < numofsearch; i++)
    {
        fdirnode((char *)&reply[3], 29, searchresults[i]);
        reply[0] = mystrlen((char *)&reply[3]) + 3;
        reply[1] = 221;
        reply[2] = nodeid;
        //printStringN(reply,32);       
        StandardSocketSend(0xefef, 0xffff, 32, reply);
    }
}

//-------------------------------------------------------------------------
void reply_formatSystem(uint8_t * receivebuffer)
{
    formatSystem();
    buildRootNode();
    
}

//-------------------------------------------------------------------------
void reply_nodeRestart(uint8_t * receivebuffer)
{
    avr_resetNode();
}

//-------------------------------------------------------------------------
void WakeupMe()
{
    thisthread->state = STATE_ACTIVE;
    postNewThreadTask();
}

//-------------------------------------------------------------------------
void InitShell()
{
    77ca:	ef 92       	push	r14
    77cc:	ff 92       	push	r15
    77ce:	0f 93       	push	r16
    77d0:	1f 93       	push	r17
    IncomingLength = 0;
    77d2:	10 92 48 08 	sts	0x0848, r1
    nodeid = CURRENT_NODE_ID;
    77d6:	80 91 f6 03 	lds	r24, 0x03F6
    77da:	90 91 f7 03 	lds	r25, 0x03F7
    77de:	90 93 8e 08 	sts	0x088E, r25
    77e2:	80 93 8d 08 	sts	0x088D, r24
    registerEvent(0xfefe, 64, &IncomingLength, IncomingMsg, PacketInfo,
    77e6:	8e ef       	ldi	r24, 0xFE	; 254
    77e8:	9e ef       	ldi	r25, 0xFE	; 254
    77ea:	60 e4       	ldi	r22, 0x40	; 64
    77ec:	48 e4       	ldi	r20, 0x48	; 72
    77ee:	58 e0       	ldi	r21, 0x08	; 8
    77f0:	29 e4       	ldi	r18, 0x49	; 73
    77f2:	38 e0       	ldi	r19, 0x08	; 8
    77f4:	09 e8       	ldi	r16, 0x89	; 137
    77f6:	18 e0       	ldi	r17, 0x08	; 8
    77f8:	77 e0       	ldi	r23, 0x07	; 7
    77fa:	e7 2e       	mov	r14, r23
    77fc:	7c e3       	ldi	r23, 0x3C	; 60
    77fe:	f7 2e       	mov	r15, r23
    7800:	0e 94 67 09 	call	0x12ce	; 0x12ce <registerEvent>
                  WakeupMe);
}
    7804:	1f 91       	pop	r17
    7806:	0f 91       	pop	r16
    7808:	ff 90       	pop	r15
    780a:	ef 90       	pop	r14
    780c:	08 95       	ret

0000780e <WakeupMe>:
    780e:	e0 91 8b 08 	lds	r30, 0x088B
    7812:	f0 91 8c 08 	lds	r31, 0x088C
    7816:	82 e0       	ldi	r24, 0x02	; 2
    7818:	82 83       	std	Z+2, r24	; 0x02
    781a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <postNewThreadTask>
    781e:	08 95       	ret

00007820 <reply_nodeRestart>:
    7820:	0e 94 22 02 	call	0x444	; 0x444 <avr_resetNode>
    7824:	08 95       	ret

00007826 <reply_formatSystem>:
    7826:	0e 94 24 20 	call	0x4048	; 0x4048 <formatSystem>
    782a:	0e 94 2a 29 	call	0x5254	; 0x5254 <buildRootNode>
    782e:	08 95       	ret

00007830 <reply_search>:
    7830:	cf 92       	push	r12
    7832:	df 92       	push	r13
    7834:	ef 92       	push	r14
    7836:	ff 92       	push	r15
    7838:	0f 93       	push	r16
    783a:	1f 93       	push	r17
    783c:	df 93       	push	r29
    783e:	cf 93       	push	r28
    7840:	cd b7       	in	r28, 0x3d	; 61
    7842:	de b7       	in	r29, 0x3e	; 62
    7844:	a2 97       	sbiw	r28, 0x22	; 34
    7846:	0f b6       	in	r0, 0x3f	; 63
    7848:	f8 94       	cli
    784a:	de bf       	out	0x3e, r29	; 62
    784c:	0f be       	out	0x3f, r0	; 63
    784e:	cd bf       	out	0x3d, r28	; 61
    7850:	8c 01       	movw	r16, r24
    7852:	f2 e0       	ldi	r31, 0x02	; 2
    7854:	ef 2e       	mov	r14, r31
    7856:	f1 2c       	mov	r15, r1
    7858:	ec 0e       	add	r14, r28
    785a:	fd 1e       	adc	r15, r29
    785c:	bc 01       	movw	r22, r24
    785e:	6d 5f       	subi	r22, 0xFD	; 253
    7860:	7f 4f       	sbci	r23, 0xFF	; 255
    7862:	fc 01       	movw	r30, r24
    7864:	40 81       	ld	r20, Z
    7866:	43 50       	subi	r20, 0x03	; 3
    7868:	c7 01       	movw	r24, r14
    786a:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    786e:	f8 01       	movw	r30, r16
    7870:	80 81       	ld	r24, Z
    7872:	fe 01       	movw	r30, r28
    7874:	31 97       	sbiw	r30, 0x01	; 1
    7876:	e8 0f       	add	r30, r24
    7878:	f1 1d       	adc	r31, r1
    787a:	10 82       	st	Z, r1
    787c:	ef e0       	ldi	r30, 0x0F	; 15
    787e:	ce 2e       	mov	r12, r30
    7880:	d1 2c       	mov	r13, r1
    7882:	cc 0e       	add	r12, r28
    7884:	dd 1e       	adc	r13, r29
    7886:	c6 01       	movw	r24, r12
    7888:	be 01       	movw	r22, r28
    788a:	6f 5f       	subi	r22, 0xFF	; 255
    788c:	7f 4f       	sbci	r23, 0xFF	; 255
    788e:	a7 01       	movw	r20, r14
    7890:	0e 94 27 20 	call	0x404e	; 0x404e <fsearch>
    7894:	89 81       	ldd	r24, Y+1	; 0x01
    7896:	88 23       	and	r24, r24
    7898:	39 f1       	breq	.+78     	; 0x78e8 <reply_search+0xb8>
    789a:	00 e0       	ldi	r16, 0x00	; 0
    789c:	1d ed       	ldi	r17, 0xDD	; 221
    789e:	f6 01       	movw	r30, r12
    78a0:	e0 0f       	add	r30, r16
    78a2:	f1 1d       	adc	r31, r1
    78a4:	40 81       	ld	r20, Z
    78a6:	86 e2       	ldi	r24, 0x26	; 38
    78a8:	98 e0       	ldi	r25, 0x08	; 8
    78aa:	6d e1       	ldi	r22, 0x1D	; 29
    78ac:	70 e0       	ldi	r23, 0x00	; 0
    78ae:	50 e0       	ldi	r21, 0x00	; 0
    78b0:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <fdirnode>
    78b4:	86 e2       	ldi	r24, 0x26	; 38
    78b6:	98 e0       	ldi	r25, 0x08	; 8
    78b8:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    78bc:	8d 5f       	subi	r24, 0xFD	; 253
    78be:	80 93 23 08 	sts	0x0823, r24
    78c2:	10 93 24 08 	sts	0x0824, r17
    78c6:	80 91 8d 08 	lds	r24, 0x088D
    78ca:	80 93 25 08 	sts	0x0825, r24
    78ce:	8f ee       	ldi	r24, 0xEF	; 239
    78d0:	9f ee       	ldi	r25, 0xEF	; 239
    78d2:	6f ef       	ldi	r22, 0xFF	; 255
    78d4:	7f ef       	ldi	r23, 0xFF	; 255
    78d6:	40 e2       	ldi	r20, 0x20	; 32
    78d8:	23 e2       	ldi	r18, 0x23	; 35
    78da:	38 e0       	ldi	r19, 0x08	; 8
    78dc:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    78e0:	0f 5f       	subi	r16, 0xFF	; 255
    78e2:	89 81       	ldd	r24, Y+1	; 0x01
    78e4:	08 17       	cp	r16, r24
    78e6:	d8 f2       	brcs	.-74     	; 0x789e <reply_search+0x6e>
    78e8:	a2 96       	adiw	r28, 0x22	; 34
    78ea:	0f b6       	in	r0, 0x3f	; 63
    78ec:	f8 94       	cli
    78ee:	de bf       	out	0x3e, r29	; 62
    78f0:	0f be       	out	0x3f, r0	; 63
    78f2:	cd bf       	out	0x3d, r28	; 61
    78f4:	cf 91       	pop	r28
    78f6:	df 91       	pop	r29
    78f8:	1f 91       	pop	r17
    78fa:	0f 91       	pop	r16
    78fc:	ff 90       	pop	r15
    78fe:	ef 90       	pop	r14
    7900:	df 90       	pop	r13
    7902:	cf 90       	pop	r12
    7904:	08 95       	ret

00007906 <reply_ps>:
    7906:	af 92       	push	r10
    7908:	bf 92       	push	r11
    790a:	cf 92       	push	r12
    790c:	df 92       	push	r13
    790e:	ef 92       	push	r14
    7910:	ff 92       	push	r15
    7912:	0f 93       	push	r16
    7914:	1f 93       	push	r17
    7916:	cf 93       	push	r28
    7918:	df 93       	push	r29
    791a:	8b ea       	ldi	r24, 0xAB	; 171
    791c:	80 93 24 08 	sts	0x0824, r24
    7920:	80 91 8d 08 	lds	r24, 0x088D
    7924:	80 93 25 08 	sts	0x0825, r24
    7928:	12 e5       	ldi	r17, 0x52	; 82
    792a:	c1 2e       	mov	r12, r17
    792c:	15 e0       	ldi	r17, 0x05	; 5
    792e:	d1 2e       	mov	r13, r17
    7930:	c0 e0       	ldi	r28, 0x00	; 0
    7932:	d0 e0       	ldi	r29, 0x00	; 0
    7934:	ce 01       	movw	r24, r28
    7936:	88 0f       	add	r24, r24
    7938:	99 1f       	adc	r25, r25
    793a:	88 0f       	add	r24, r24
    793c:	99 1f       	adc	r25, r25
    793e:	88 0f       	add	r24, r24
    7940:	99 1f       	adc	r25, r25
    7942:	bc 01       	movw	r22, r24
    7944:	66 0f       	add	r22, r22
    7946:	77 1f       	adc	r23, r23
    7948:	66 0f       	add	r22, r22
    794a:	77 1f       	adc	r23, r23
    794c:	68 0f       	add	r22, r24
    794e:	79 1f       	adc	r23, r25
    7950:	6c 1b       	sub	r22, r28
    7952:	7d 0b       	sbc	r23, r29
    7954:	8b 01       	movw	r16, r22
    7956:	0e 5a       	subi	r16, 0xAE	; 174
    7958:	1a 4f       	sbci	r17, 0xFA	; 250
    795a:	d8 01       	movw	r26, r16
    795c:	12 96       	adiw	r26, 0x02	; 2
    795e:	8c 91       	ld	r24, X
    7960:	88 23       	and	r24, r24
    7962:	99 f4       	brne	.+38     	; 0x798a <reply_ps+0x84>
    7964:	21 96       	adiw	r28, 0x01	; 1
    7966:	27 e2       	ldi	r18, 0x27	; 39
    7968:	30 e0       	ldi	r19, 0x00	; 0
    796a:	c2 0e       	add	r12, r18
    796c:	d3 1e       	adc	r13, r19
    796e:	c2 30       	cpi	r28, 0x02	; 2
    7970:	d1 05       	cpc	r29, r1
    7972:	01 f7       	brne	.-64     	; 0x7934 <reply_ps+0x2e>
    7974:	df 91       	pop	r29
    7976:	cf 91       	pop	r28
    7978:	1f 91       	pop	r17
    797a:	0f 91       	pop	r16
    797c:	ff 90       	pop	r15
    797e:	ef 90       	pop	r14
    7980:	df 90       	pop	r13
    7982:	cf 90       	pop	r12
    7984:	bf 90       	pop	r11
    7986:	af 90       	pop	r10
    7988:	08 95       	ret
    798a:	7b 01       	movw	r14, r22
    798c:	e7 e5       	ldi	r30, 0x57	; 87
    798e:	f5 e0       	ldi	r31, 0x05	; 5
    7990:	ee 0e       	add	r14, r30
    7992:	ff 1e       	adc	r15, r31
    7994:	c7 01       	movw	r24, r14
    7996:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    799a:	48 2f       	mov	r20, r24
    799c:	4c 5f       	subi	r20, 0xFC	; 252
    799e:	40 93 23 08 	sts	0x0823, r20
    79a2:	44 50       	subi	r20, 0x04	; 4
    79a4:	d8 01       	movw	r26, r16
    79a6:	12 96       	adiw	r26, 0x02	; 2
    79a8:	8c 91       	ld	r24, X
    79aa:	80 93 26 08 	sts	0x0826, r24
    79ae:	88 30       	cpi	r24, 0x08	; 8
    79b0:	79 f0       	breq	.+30     	; 0x79d0 <reply_ps+0xca>
    79b2:	87 e2       	ldi	r24, 0x27	; 39
    79b4:	98 e0       	ldi	r25, 0x08	; 8
    79b6:	b7 01       	movw	r22, r14
    79b8:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    79bc:	8f ee       	ldi	r24, 0xEF	; 239
    79be:	9f ee       	ldi	r25, 0xEF	; 239
    79c0:	6f ef       	ldi	r22, 0xFF	; 255
    79c2:	7f ef       	ldi	r23, 0xFF	; 255
    79c4:	40 e2       	ldi	r20, 0x20	; 32
    79c6:	23 e2       	ldi	r18, 0x23	; 35
    79c8:	38 e0       	ldi	r19, 0x08	; 8
    79ca:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    79ce:	ca cf       	rjmp	.-108    	; 0x7964 <reply_ps+0x5e>
    79d0:	d6 01       	movw	r26, r12
    79d2:	ed 91       	ld	r30, X+
    79d4:	fc 91       	ld	r31, X
    79d6:	b7 a4       	ldd	r11, Z+47	; 0x2f
    79d8:	aa 24       	eor	r10, r10
    79da:	80 a9       	ldd	r24, Z+48	; 0x30
    79dc:	f5 01       	movw	r30, r10
    79de:	e8 0f       	add	r30, r24
    79e0:	f1 1d       	adc	r31, r1
    79e2:	cf 01       	movw	r24, r30
    79e4:	03 97       	sbiw	r24, 0x03	; 3
    79e6:	90 93 27 08 	sts	0x0827, r25
    79ea:	80 93 28 08 	sts	0x0828, r24
    79ee:	4a 5f       	subi	r20, 0xFA	; 250
    79f0:	40 93 23 08 	sts	0x0823, r20
    79f4:	46 50       	subi	r20, 0x06	; 6
    79f6:	89 e2       	ldi	r24, 0x29	; 41
    79f8:	98 e0       	ldi	r25, 0x08	; 8
    79fa:	b7 01       	movw	r22, r14
    79fc:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    7a00:	dd cf       	rjmp	.-70     	; 0x79bc <reply_ps+0xb6>

00007a02 <reply_debugging_set>:
    7a02:	fc 01       	movw	r30, r24
    7a04:	93 81       	ldd	r25, Z+3	; 0x03
    7a06:	80 e0       	ldi	r24, 0x00	; 0
    7a08:	24 81       	ldd	r18, Z+4	; 0x04
    7a0a:	dc 01       	movw	r26, r24
    7a0c:	a2 0f       	add	r26, r18
    7a0e:	b1 1d       	adc	r27, r1
    7a10:	55 81       	ldd	r21, Z+5	; 0x05
    7a12:	55 23       	and	r21, r21
    7a14:	41 f0       	breq	.+16     	; 0x7a26 <reply_debugging_set+0x24>
    7a16:	4e 2f       	mov	r20, r30
    7a18:	86 81       	ldd	r24, Z+6	; 0x06
    7a1a:	8d 93       	st	X+, r24
    7a1c:	31 96       	adiw	r30, 0x01	; 1
    7a1e:	8e 2f       	mov	r24, r30
    7a20:	84 1b       	sub	r24, r20
    7a22:	85 17       	cp	r24, r21
    7a24:	c8 f3       	brcs	.-14     	; 0x7a18 <reply_debugging_set+0x16>
    7a26:	83 e0       	ldi	r24, 0x03	; 3
    7a28:	80 93 23 08 	sts	0x0823, r24
    7a2c:	80 e6       	ldi	r24, 0x60	; 96
    7a2e:	80 93 24 08 	sts	0x0824, r24
    7a32:	80 91 8d 08 	lds	r24, 0x088D
    7a36:	80 93 25 08 	sts	0x0825, r24
    7a3a:	8f ee       	ldi	r24, 0xEF	; 239
    7a3c:	9f ee       	ldi	r25, 0xEF	; 239
    7a3e:	6f ef       	ldi	r22, 0xFF	; 255
    7a40:	7f ef       	ldi	r23, 0xFF	; 255
    7a42:	40 e2       	ldi	r20, 0x20	; 32
    7a44:	23 e2       	ldi	r18, 0x23	; 35
    7a46:	38 e0       	ldi	r19, 0x08	; 8
    7a48:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7a4c:	08 95       	ret

00007a4e <reply_debugging_print>:
    7a4e:	cf 92       	push	r12
    7a50:	df 92       	push	r13
    7a52:	ef 92       	push	r14
    7a54:	ff 92       	push	r15
    7a56:	0f 93       	push	r16
    7a58:	1f 93       	push	r17
    7a5a:	cf 93       	push	r28
    7a5c:	df 93       	push	r29
    7a5e:	fc 01       	movw	r30, r24
    7a60:	43 81       	ldd	r20, Z+3	; 0x03
    7a62:	14 81       	ldd	r17, Z+4	; 0x04
    7a64:	95 81       	ldd	r25, Z+5	; 0x05
    7a66:	80 e0       	ldi	r24, 0x00	; 0
    7a68:	26 81       	ldd	r18, Z+6	; 0x06
    7a6a:	bc 01       	movw	r22, r24
    7a6c:	62 0f       	add	r22, r18
    7a6e:	71 1d       	adc	r23, r1
    7a70:	9b 01       	movw	r18, r22
    7a72:	cb 01       	movw	r24, r22
    7a74:	68 e1       	ldi	r22, 0x18	; 24
    7a76:	70 e0       	ldi	r23, 0x00	; 0
    7a78:	0e 94 73 54 	call	0xa8e6	; 0xa8e6 <__udivmodhi4>
    7a7c:	06 2f       	mov	r16, r22
    7a7e:	0f 5f       	subi	r16, 0xFF	; 255
    7a80:	69 f1       	breq	.+90     	; 0x7adc <reply_debugging_print+0x8e>
    7a82:	94 2f       	mov	r25, r20
    7a84:	80 e0       	ldi	r24, 0x00	; 0
    7a86:	ec 01       	movw	r28, r24
    7a88:	c1 0f       	add	r28, r17
    7a8a:	d1 1d       	adc	r29, r1
    7a8c:	e3 2e       	mov	r14, r19
    7a8e:	f2 2e       	mov	r15, r18
    7a90:	10 e0       	ldi	r17, 0x00	; 0
    7a92:	9e e1       	ldi	r25, 0x1E	; 30
    7a94:	c9 2e       	mov	r12, r25
    7a96:	8b e5       	ldi	r24, 0x5B	; 91
    7a98:	d8 2e       	mov	r13, r24
    7a9a:	c0 92 23 08 	sts	0x0823, r12
    7a9e:	d0 92 24 08 	sts	0x0824, r13
    7aa2:	80 91 8d 08 	lds	r24, 0x088D
    7aa6:	80 93 25 08 	sts	0x0825, r24
    7aaa:	10 93 26 08 	sts	0x0826, r17
    7aae:	e0 92 27 08 	sts	0x0827, r14
    7ab2:	f0 92 28 08 	sts	0x0828, r15
    7ab6:	89 e2       	ldi	r24, 0x29	; 41
    7ab8:	98 e0       	ldi	r25, 0x08	; 8
    7aba:	be 01       	movw	r22, r28
    7abc:	48 e1       	ldi	r20, 0x18	; 24
    7abe:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    7ac2:	68 96       	adiw	r28, 0x18	; 24
    7ac4:	8f ee       	ldi	r24, 0xEF	; 239
    7ac6:	9f ee       	ldi	r25, 0xEF	; 239
    7ac8:	6f ef       	ldi	r22, 0xFF	; 255
    7aca:	7f ef       	ldi	r23, 0xFF	; 255
    7acc:	40 e2       	ldi	r20, 0x20	; 32
    7ace:	23 e2       	ldi	r18, 0x23	; 35
    7ad0:	38 e0       	ldi	r19, 0x08	; 8
    7ad2:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7ad6:	1f 5f       	subi	r17, 0xFF	; 255
    7ad8:	10 17       	cp	r17, r16
    7ada:	f8 f2       	brcs	.-66     	; 0x7a9a <reply_debugging_print+0x4c>
    7adc:	df 91       	pop	r29
    7ade:	cf 91       	pop	r28
    7ae0:	1f 91       	pop	r17
    7ae2:	0f 91       	pop	r16
    7ae4:	ff 90       	pop	r15
    7ae6:	ef 90       	pop	r14
    7ae8:	df 90       	pop	r13
    7aea:	cf 90       	pop	r12
    7aec:	08 95       	ret

00007aee <reply_du>:
    7aee:	1f 93       	push	r17
    7af0:	0e 94 86 24 	call	0x490c	; 0x490c <fcheckFSAllocation>
    7af4:	18 2f       	mov	r17, r24
    7af6:	0e 94 83 24 	call	0x4906	; 0x4906 <fcheckStorageAllocation>
    7afa:	21 e0       	ldi	r18, 0x01	; 1
    7afc:	80 30       	cpi	r24, 0x00	; 0
    7afe:	92 07       	cpc	r25, r18
    7b00:	e9 f0       	breq	.+58     	; 0x7b3c <reply_du+0x4e>
    7b02:	98 2f       	mov	r25, r24
    7b04:	20 e0       	ldi	r18, 0x00	; 0
    7b06:	86 e0       	ldi	r24, 0x06	; 6
    7b08:	80 93 23 08 	sts	0x0823, r24
    7b0c:	83 ed       	ldi	r24, 0xD3	; 211
    7b0e:	80 93 24 08 	sts	0x0824, r24
    7b12:	80 91 8d 08 	lds	r24, 0x088D
    7b16:	80 93 25 08 	sts	0x0825, r24
    7b1a:	10 93 26 08 	sts	0x0826, r17
    7b1e:	90 93 27 08 	sts	0x0827, r25
    7b22:	20 93 28 08 	sts	0x0828, r18
    7b26:	8f ee       	ldi	r24, 0xEF	; 239
    7b28:	9f ee       	ldi	r25, 0xEF	; 239
    7b2a:	6f ef       	ldi	r22, 0xFF	; 255
    7b2c:	7f ef       	ldi	r23, 0xFF	; 255
    7b2e:	40 e2       	ldi	r20, 0x20	; 32
    7b30:	23 e2       	ldi	r18, 0x23	; 35
    7b32:	38 e0       	ldi	r19, 0x08	; 8
    7b34:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7b38:	1f 91       	pop	r17
    7b3a:	08 95       	ret
    7b3c:	90 e8       	ldi	r25, 0x80	; 128
    7b3e:	20 e8       	ldi	r18, 0x80	; 128
    7b40:	e2 cf       	rjmp	.-60     	; 0x7b06 <reply_du+0x18>

00007b42 <reply_killthread>:
    7b42:	cf 92       	push	r12
    7b44:	df 92       	push	r13
    7b46:	ef 92       	push	r14
    7b48:	ff 92       	push	r15
    7b4a:	0f 93       	push	r16
    7b4c:	1f 93       	push	r17
    7b4e:	cf 93       	push	r28
    7b50:	df 93       	push	r29
    7b52:	ec 01       	movw	r28, r24
    7b54:	88 81       	ld	r24, Y
    7b56:	fe 01       	movw	r30, r28
    7b58:	e8 0f       	add	r30, r24
    7b5a:	f1 1d       	adc	r31, r1
    7b5c:	10 82       	st	Z, r1
    7b5e:	80 91 54 05 	lds	r24, 0x0554
    7b62:	88 23       	and	r24, r24
    7b64:	59 f5       	brne	.+86     	; 0x7bbc <reply_killthread+0x7a>
    7b66:	dd 24       	eor	r13, r13
    7b68:	ee 24       	eor	r14, r14
    7b6a:	ff 24       	eor	r15, r15
    7b6c:	00 e0       	ldi	r16, 0x00	; 0
    7b6e:	10 e0       	ldi	r17, 0x00	; 0
    7b70:	80 91 7b 05 	lds	r24, 0x057B
    7b74:	88 23       	and	r24, r24
    7b76:	d9 f5       	brne	.+118    	; 0x7bee <reply_killthread+0xac>
    7b78:	81 e0       	ldi	r24, 0x01	; 1
    7b7a:	d8 16       	cp	r13, r24
    7b7c:	09 f4       	brne	.+2      	; 0x7b80 <reply_killthread+0x3e>
    7b7e:	81 c0       	rjmp	.+258    	; 0x7c82 <reply_killthread+0x140>
    7b80:	84 e0       	ldi	r24, 0x04	; 4
    7b82:	80 93 23 08 	sts	0x0823, r24
    7b86:	88 ee       	ldi	r24, 0xE8	; 232
    7b88:	80 93 24 08 	sts	0x0824, r24
    7b8c:	80 91 8d 08 	lds	r24, 0x088D
    7b90:	80 93 25 08 	sts	0x0825, r24
    7b94:	d0 92 26 08 	sts	0x0826, r13
    7b98:	8f ee       	ldi	r24, 0xEF	; 239
    7b9a:	9f ee       	ldi	r25, 0xEF	; 239
    7b9c:	6f ef       	ldi	r22, 0xFF	; 255
    7b9e:	7f ef       	ldi	r23, 0xFF	; 255
    7ba0:	40 e2       	ldi	r20, 0x20	; 32
    7ba2:	23 e2       	ldi	r18, 0x23	; 35
    7ba4:	38 e0       	ldi	r19, 0x08	; 8
    7ba6:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7baa:	df 91       	pop	r29
    7bac:	cf 91       	pop	r28
    7bae:	1f 91       	pop	r17
    7bb0:	0f 91       	pop	r16
    7bb2:	ff 90       	pop	r15
    7bb4:	ef 90       	pop	r14
    7bb6:	df 90       	pop	r13
    7bb8:	cf 90       	pop	r12
    7bba:	08 95       	ret
    7bbc:	be 01       	movw	r22, r28
    7bbe:	6d 5f       	subi	r22, 0xFD	; 253
    7bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    7bc2:	87 e5       	ldi	r24, 0x57	; 87
    7bc4:	95 e0       	ldi	r25, 0x05	; 5
    7bc6:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <superstring>
    7bca:	89 2b       	or	r24, r25
    7bcc:	61 f6       	brne	.-104    	; 0x7b66 <reply_killthread+0x24>
    7bce:	e0 90 63 05 	lds	r14, 0x0563
    7bd2:	f0 90 64 05 	lds	r15, 0x0564
    7bd6:	00 91 65 05 	lds	r16, 0x0565
    7bda:	10 91 66 05 	lds	r17, 0x0566
    7bde:	10 92 54 05 	sts	0x0554, r1
    7be2:	dd 24       	eor	r13, r13
    7be4:	d3 94       	inc	r13
    7be6:	80 91 7b 05 	lds	r24, 0x057B
    7bea:	88 23       	and	r24, r24
    7bec:	29 f2       	breq	.-118    	; 0x7b78 <reply_killthread+0x36>
    7bee:	23 96       	adiw	r28, 0x03	; 3
    7bf0:	8e e7       	ldi	r24, 0x7E	; 126
    7bf2:	95 e0       	ldi	r25, 0x05	; 5
    7bf4:	be 01       	movw	r22, r28
    7bf6:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <superstring>
    7bfa:	89 2b       	or	r24, r25
    7bfc:	09 f0       	breq	.+2      	; 0x7c00 <reply_killthread+0xbe>
    7bfe:	bc cf       	rjmp	.-136    	; 0x7b78 <reply_killthread+0x36>
    7c00:	e0 90 8a 05 	lds	r14, 0x058A
    7c04:	f0 90 8b 05 	lds	r15, 0x058B
    7c08:	00 91 8c 05 	lds	r16, 0x058C
    7c0c:	10 91 8d 05 	lds	r17, 0x058D
    7c10:	10 92 7b 05 	sts	0x057B, r1
    7c14:	dd 24       	eor	r13, r13
    7c16:	d3 94       	inc	r13
    7c18:	cc 24       	eor	r12, r12
    7c1a:	c3 94       	inc	r12
    7c1c:	c7 01       	movw	r24, r14
    7c1e:	b8 01       	movw	r22, r16
    7c20:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <deleteThreadRegistrationInReceiverHandles>
    7c24:	0c 2d       	mov	r16, r12
    7c26:	10 e0       	ldi	r17, 0x00	; 0
    7c28:	c8 01       	movw	r24, r16
    7c2a:	88 0f       	add	r24, r24
    7c2c:	99 1f       	adc	r25, r25
    7c2e:	88 0f       	add	r24, r24
    7c30:	99 1f       	adc	r25, r25
    7c32:	88 0f       	add	r24, r24
    7c34:	99 1f       	adc	r25, r25
    7c36:	ec 01       	movw	r28, r24
    7c38:	cc 0f       	add	r28, r28
    7c3a:	dd 1f       	adc	r29, r29
    7c3c:	cc 0f       	add	r28, r28
    7c3e:	dd 1f       	adc	r29, r29
    7c40:	c8 0f       	add	r28, r24
    7c42:	d9 1f       	adc	r29, r25
    7c44:	c0 1b       	sub	r28, r16
    7c46:	d1 0b       	sbc	r29, r17
    7c48:	ce 5a       	subi	r28, 0xAE	; 174
    7c4a:	da 4f       	sbci	r29, 0xFA	; 250
    7c4c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    7c4e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    7c50:	30 97       	sbiw	r30, 0x00	; 0
    7c52:	19 f0       	breq	.+6      	; 0x7c5a <reply_killthread+0x118>
    7c54:	09 95       	icall
    7c56:	1c 8e       	std	Y+28, r1	; 0x1c
    7c58:	1b 8e       	std	Y+27, r1	; 0x1b
    7c5a:	85 b7       	in	r24, 0x35	; 53
    7c5c:	8f 7d       	andi	r24, 0xDF	; 223
    7c5e:	85 bf       	out	0x35, r24	; 53
    7c60:	f8 01       	movw	r30, r16
    7c62:	ee 0f       	add	r30, r30
    7c64:	ff 1f       	adc	r31, r31
    7c66:	eb 52       	subi	r30, 0x2B	; 43
    7c68:	fa 4f       	sbci	r31, 0xFA	; 250
    7c6a:	80 81       	ld	r24, Z
    7c6c:	91 81       	ldd	r25, Z+1	; 0x01
    7c6e:	89 2b       	or	r24, r25
    7c70:	09 f4       	brne	.+2      	; 0x7c74 <reply_killthread+0x132>
    7c72:	86 cf       	rjmp	.-244    	; 0x7b80 <reply_killthread+0x3e>
    7c74:	11 82       	std	Z+1, r1	; 0x01
    7c76:	10 82       	st	Z, r1
    7c78:	8c 2d       	mov	r24, r12
    7c7a:	84 5f       	subi	r24, 0xF4	; 244
    7c7c:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <GenericTimerStop>
    7c80:	7f cf       	rjmp	.-258    	; 0x7b80 <reply_killthread+0x3e>
    7c82:	cc 24       	eor	r12, r12
    7c84:	cb cf       	rjmp	.-106    	; 0x7c1c <reply_killthread+0xda>

00007c86 <reply126>:
    7c86:	80 91 06 08 	lds	r24, 0x0806
    7c8a:	90 91 07 08 	lds	r25, 0x0807
    7c8e:	0e 94 c6 24 	call	0x498c	; 0x498c <fclose2>
    7c92:	08 95       	ret

00007c94 <reply_cp_fromPCtoNode_type3>:
    7c94:	80 91 08 08 	lds	r24, 0x0808
    7c98:	90 91 09 08 	lds	r25, 0x0809
    7c9c:	0e 94 c6 24 	call	0x498c	; 0x498c <fclose2>
    7ca0:	8f ee       	ldi	r24, 0xEF	; 239
    7ca2:	9f ee       	ldi	r25, 0xEF	; 239
    7ca4:	6f ef       	ldi	r22, 0xFF	; 255
    7ca6:	7f ef       	ldi	r23, 0xFF	; 255
    7ca8:	40 e2       	ldi	r20, 0x20	; 32
    7caa:	23 e2       	ldi	r18, 0x23	; 35
    7cac:	38 e0       	ldi	r19, 0x08	; 8
    7cae:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7cb2:	08 95       	ret

00007cb4 <reply_fromNodeToPC_type2>:
    7cb4:	0f 93       	push	r16
    7cb6:	1f 93       	push	r17
    7cb8:	fc 01       	movw	r30, r24
    7cba:	54 81       	ldd	r21, Z+4	; 0x04
    7cbc:	40 e0       	ldi	r20, 0x00	; 0
    7cbe:	85 81       	ldd	r24, Z+5	; 0x05
    7cc0:	48 0f       	add	r20, r24
    7cc2:	51 1d       	adc	r21, r1
    7cc4:	03 e2       	ldi	r16, 0x23	; 35
    7cc6:	18 e0       	ldi	r17, 0x08	; 8
    7cc8:	8a e1       	ldi	r24, 0x1A	; 26
    7cca:	80 93 23 08 	sts	0x0823, r24
    7cce:	8d e7       	ldi	r24, 0x7D	; 125
    7cd0:	80 93 24 08 	sts	0x0824, r24
    7cd4:	80 91 8d 08 	lds	r24, 0x088D
    7cd8:	80 93 25 08 	sts	0x0825, r24
    7cdc:	50 93 26 08 	sts	0x0826, r21
    7ce0:	40 93 27 08 	sts	0x0827, r20
    7ce4:	60 e0       	ldi	r22, 0x00	; 0
    7ce6:	70 e0       	ldi	r23, 0x00	; 0
    7ce8:	80 91 06 08 	lds	r24, 0x0806
    7cec:	90 91 07 08 	lds	r25, 0x0807
    7cf0:	20 e0       	ldi	r18, 0x00	; 0
    7cf2:	30 e0       	ldi	r19, 0x00	; 0
    7cf4:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <fseek2>
    7cf8:	b8 01       	movw	r22, r16
    7cfa:	6a 5f       	subi	r22, 0xFA	; 250
    7cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    7cfe:	80 91 06 08 	lds	r24, 0x0806
    7d02:	90 91 07 08 	lds	r25, 0x0807
    7d06:	44 e1       	ldi	r20, 0x14	; 20
    7d08:	50 e0       	ldi	r21, 0x00	; 0
    7d0a:	0e 94 57 23 	call	0x46ae	; 0x46ae <fread2>
    7d0e:	8f ee       	ldi	r24, 0xEF	; 239
    7d10:	9f ee       	ldi	r25, 0xEF	; 239
    7d12:	6f ef       	ldi	r22, 0xFF	; 255
    7d14:	7f ef       	ldi	r23, 0xFF	; 255
    7d16:	40 e2       	ldi	r20, 0x20	; 32
    7d18:	98 01       	movw	r18, r16
    7d1a:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7d1e:	1f 91       	pop	r17
    7d20:	0f 91       	pop	r16
    7d22:	08 95       	ret

00007d24 <reply_rm>:
    7d24:	df 92       	push	r13
    7d26:	ef 92       	push	r14
    7d28:	ff 92       	push	r15
    7d2a:	0f 93       	push	r16
    7d2c:	1f 93       	push	r17
    7d2e:	df 93       	push	r29
    7d30:	cf 93       	push	r28
    7d32:	cd b7       	in	r28, 0x3d	; 61
    7d34:	de b7       	in	r29, 0x3e	; 62
    7d36:	2d 97       	sbiw	r28, 0x0d	; 13
    7d38:	0f b6       	in	r0, 0x3f	; 63
    7d3a:	f8 94       	cli
    7d3c:	de bf       	out	0x3e, r29	; 62
    7d3e:	0f be       	out	0x3f, r0	; 63
    7d40:	cd bf       	out	0x3d, r28	; 61
    7d42:	8c 01       	movw	r16, r24
    7d44:	fc 01       	movw	r30, r24
    7d46:	d3 80       	ldd	r13, Z+3	; 0x03
    7d48:	bc 01       	movw	r22, r24
    7d4a:	6c 5f       	subi	r22, 0xFC	; 252
    7d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    7d4e:	40 81       	ld	r20, Z
    7d50:	44 50       	subi	r20, 0x04	; 4
    7d52:	7e 01       	movw	r14, r28
    7d54:	08 94       	sec
    7d56:	e1 1c       	adc	r14, r1
    7d58:	f1 1c       	adc	r15, r1
    7d5a:	c7 01       	movw	r24, r14
    7d5c:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    7d60:	f8 01       	movw	r30, r16
    7d62:	80 81       	ld	r24, Z
    7d64:	fe 01       	movw	r30, r28
    7d66:	33 97       	sbiw	r30, 0x03	; 3
    7d68:	e8 0f       	add	r30, r24
    7d6a:	f1 1d       	adc	r31, r1
    7d6c:	10 82       	st	Z, r1
    7d6e:	c7 01       	movw	r24, r14
    7d70:	6d 2d       	mov	r22, r13
    7d72:	70 e0       	ldi	r23, 0x00	; 0
    7d74:	0e 94 11 2b 	call	0x5622	; 0x5622 <existBlockAddr>
    7d78:	08 2f       	mov	r16, r24
    7d7a:	88 23       	and	r24, r24
    7d7c:	19 f0       	breq	.+6      	; 0x7d84 <reply_rm+0x60>
    7d7e:	90 e0       	ldi	r25, 0x00	; 0
    7d80:	0e 94 88 27 	call	0x4f10	; 0x4f10 <deleteNode>
    7d84:	84 e0       	ldi	r24, 0x04	; 4
    7d86:	80 93 23 08 	sts	0x0823, r24
    7d8a:	81 ea       	ldi	r24, 0xA1	; 161
    7d8c:	80 93 24 08 	sts	0x0824, r24
    7d90:	80 91 8d 08 	lds	r24, 0x088D
    7d94:	80 93 25 08 	sts	0x0825, r24
    7d98:	00 93 26 08 	sts	0x0826, r16
    7d9c:	8f ee       	ldi	r24, 0xEF	; 239
    7d9e:	9f ee       	ldi	r25, 0xEF	; 239
    7da0:	6f ef       	ldi	r22, 0xFF	; 255
    7da2:	7f ef       	ldi	r23, 0xFF	; 255
    7da4:	40 e2       	ldi	r20, 0x20	; 32
    7da6:	23 e2       	ldi	r18, 0x23	; 35
    7da8:	38 e0       	ldi	r19, 0x08	; 8
    7daa:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7dae:	2d 96       	adiw	r28, 0x0d	; 13
    7db0:	0f b6       	in	r0, 0x3f	; 63
    7db2:	f8 94       	cli
    7db4:	de bf       	out	0x3e, r29	; 62
    7db6:	0f be       	out	0x3f, r0	; 63
    7db8:	cd bf       	out	0x3d, r28	; 61
    7dba:	cf 91       	pop	r28
    7dbc:	df 91       	pop	r29
    7dbe:	1f 91       	pop	r17
    7dc0:	0f 91       	pop	r16
    7dc2:	ff 90       	pop	r15
    7dc4:	ef 90       	pop	r14
    7dc6:	df 90       	pop	r13
    7dc8:	08 95       	ret

00007dca <reply_fromNodeToPC_type1>:
    7dca:	9f 92       	push	r9
    7dcc:	af 92       	push	r10
    7dce:	bf 92       	push	r11
    7dd0:	cf 92       	push	r12
    7dd2:	df 92       	push	r13
    7dd4:	ef 92       	push	r14
    7dd6:	ff 92       	push	r15
    7dd8:	0f 93       	push	r16
    7dda:	1f 93       	push	r17
    7ddc:	df 93       	push	r29
    7dde:	cf 93       	push	r28
    7de0:	cd b7       	in	r28, 0x3d	; 61
    7de2:	de b7       	in	r29, 0x3e	; 62
    7de4:	2d 97       	sbiw	r28, 0x0d	; 13
    7de6:	0f b6       	in	r0, 0x3f	; 63
    7de8:	f8 94       	cli
    7dea:	de bf       	out	0x3e, r29	; 62
    7dec:	0f be       	out	0x3f, r0	; 63
    7dee:	cd bf       	out	0x3d, r28	; 61
    7df0:	8c 01       	movw	r16, r24
    7df2:	fc 01       	movw	r30, r24
    7df4:	d3 80       	ldd	r13, Z+3	; 0x03
    7df6:	bc 01       	movw	r22, r24
    7df8:	6c 5f       	subi	r22, 0xFC	; 252
    7dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    7dfc:	40 81       	ld	r20, Z
    7dfe:	44 50       	subi	r20, 0x04	; 4
    7e00:	7e 01       	movw	r14, r28
    7e02:	08 94       	sec
    7e04:	e1 1c       	adc	r14, r1
    7e06:	f1 1c       	adc	r15, r1
    7e08:	c7 01       	movw	r24, r14
    7e0a:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    7e0e:	f8 01       	movw	r30, r16
    7e10:	80 81       	ld	r24, Z
    7e12:	fe 01       	movw	r30, r28
    7e14:	33 97       	sbiw	r30, 0x03	; 3
    7e16:	e8 0f       	add	r30, r24
    7e18:	f1 1d       	adc	r31, r1
    7e1a:	10 82       	st	Z, r1
    7e1c:	c7 01       	movw	r24, r14
    7e1e:	6d 2d       	mov	r22, r13
    7e20:	70 e0       	ldi	r23, 0x00	; 0
    7e22:	0e 94 11 2b 	call	0x5622	; 0x5622 <existBlockAddr>
    7e26:	f8 2e       	mov	r15, r24
    7e28:	8c e7       	ldi	r24, 0x7C	; 124
    7e2a:	80 93 24 08 	sts	0x0824, r24
    7e2e:	80 91 8d 08 	lds	r24, 0x088D
    7e32:	80 93 25 08 	sts	0x0825, r24
    7e36:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <getFreeFid>
    7e3a:	18 2f       	mov	r17, r24
    7e3c:	09 2f       	mov	r16, r25
    7e3e:	8f 2d       	mov	r24, r15
    7e40:	90 e0       	ldi	r25, 0x00	; 0
    7e42:	61 2f       	mov	r22, r17
    7e44:	70 2f       	mov	r23, r16
    7e46:	41 e0       	ldi	r20, 0x01	; 1
    7e48:	50 e0       	ldi	r21, 0x00	; 0
    7e4a:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <openFile>
    7e4e:	81 2f       	mov	r24, r17
    7e50:	90 2f       	mov	r25, r16
    7e52:	fc 01       	movw	r30, r24
    7e54:	ee 0f       	add	r30, r30
    7e56:	ff 1f       	adc	r31, r31
    7e58:	ee 0f       	add	r30, r30
    7e5a:	ff 1f       	adc	r31, r31
    7e5c:	ee 0f       	add	r30, r30
    7e5e:	ff 1f       	adc	r31, r31
    7e60:	88 0f       	add	r24, r24
    7e62:	99 1f       	adc	r25, r25
    7e64:	e8 0f       	add	r30, r24
    7e66:	f9 1f       	adc	r31, r25
    7e68:	ea 55       	subi	r30, 0x5A	; 90
    7e6a:	fa 4f       	sbci	r31, 0xFA	; 250
    7e6c:	f0 93 07 08 	sts	0x0807, r31
    7e70:	e0 93 06 08 	sts	0x0806, r30
    7e74:	14 81       	ldd	r17, Z+4	; 0x04
    7e76:	05 81       	ldd	r16, Z+5	; 0x05
    7e78:	00 93 26 08 	sts	0x0826, r16
    7e7c:	10 93 27 08 	sts	0x0827, r17
    7e80:	8f ee       	ldi	r24, 0xEF	; 239
    7e82:	9f ee       	ldi	r25, 0xEF	; 239
    7e84:	6f ef       	ldi	r22, 0xFF	; 255
    7e86:	7f ef       	ldi	r23, 0xFF	; 255
    7e88:	40 e2       	ldi	r20, 0x20	; 32
    7e8a:	23 e2       	ldi	r18, 0x23	; 35
    7e8c:	38 e0       	ldi	r19, 0x08	; 8
    7e8e:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7e92:	f0 92 26 08 	sts	0x0826, r15
    7e96:	81 2f       	mov	r24, r17
    7e98:	90 2f       	mov	r25, r16
    7e9a:	64 e1       	ldi	r22, 0x14	; 20
    7e9c:	70 e0       	ldi	r23, 0x00	; 0
    7e9e:	0e 94 73 54 	call	0xa8e6	; 0xa8e6 <__udivmodhi4>
    7ea2:	7b 01       	movw	r14, r22
    7ea4:	5b 01       	movw	r10, r22
    7ea6:	81 2f       	mov	r24, r17
    7ea8:	90 2f       	mov	r25, r16
    7eaa:	64 e1       	ldi	r22, 0x14	; 20
    7eac:	70 e0       	ldi	r23, 0x00	; 0
    7eae:	0e 94 73 54 	call	0xa8e6	; 0xa8e6 <__udivmodhi4>
    7eb2:	6c 01       	movw	r12, r24
    7eb4:	e1 14       	cp	r14, r1
    7eb6:	f1 04       	cpc	r15, r1
    7eb8:	71 f1       	breq	.+92     	; 0x7f16 <reply_fromNodeToPC_type1+0x14c>
    7eba:	00 e0       	ldi	r16, 0x00	; 0
    7ebc:	10 e0       	ldi	r17, 0x00	; 0
    7ebe:	5a e1       	ldi	r21, 0x1A	; 26
    7ec0:	95 2e       	mov	r9, r21
    7ec2:	80 91 06 08 	lds	r24, 0x0806
    7ec6:	90 91 07 08 	lds	r25, 0x0807
    7eca:	69 e2       	ldi	r22, 0x29	; 41
    7ecc:	78 e0       	ldi	r23, 0x08	; 8
    7ece:	44 e1       	ldi	r20, 0x14	; 20
    7ed0:	50 e0       	ldi	r21, 0x00	; 0
    7ed2:	0e 94 57 23 	call	0x46ae	; 0x46ae <fread2>
    7ed6:	80 91 06 08 	lds	r24, 0x0806
    7eda:	90 91 07 08 	lds	r25, 0x0807
    7ede:	44 e1       	ldi	r20, 0x14	; 20
    7ee0:	50 e0       	ldi	r21, 0x00	; 0
    7ee2:	60 e0       	ldi	r22, 0x00	; 0
    7ee4:	70 e0       	ldi	r23, 0x00	; 0
    7ee6:	21 e0       	ldi	r18, 0x01	; 1
    7ee8:	30 e0       	ldi	r19, 0x00	; 0
    7eea:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <fseek2>
    7eee:	90 92 23 08 	sts	0x0823, r9
    7ef2:	10 93 27 08 	sts	0x0827, r17
    7ef6:	00 93 28 08 	sts	0x0828, r16
    7efa:	8f ee       	ldi	r24, 0xEF	; 239
    7efc:	9f ee       	ldi	r25, 0xEF	; 239
    7efe:	6f ef       	ldi	r22, 0xFF	; 255
    7f00:	7f ef       	ldi	r23, 0xFF	; 255
    7f02:	40 e2       	ldi	r20, 0x20	; 32
    7f04:	23 e2       	ldi	r18, 0x23	; 35
    7f06:	38 e0       	ldi	r19, 0x08	; 8
    7f08:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7f0c:	0f 5f       	subi	r16, 0xFF	; 255
    7f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    7f10:	0e 15       	cp	r16, r14
    7f12:	1f 05       	cpc	r17, r15
    7f14:	b0 f2       	brcs	.-84     	; 0x7ec2 <reply_fromNodeToPC_type1+0xf8>
    7f16:	c1 14       	cp	r12, r1
    7f18:	d1 04       	cpc	r13, r1
    7f1a:	f1 f0       	breq	.+60     	; 0x7f58 <reply_fromNodeToPC_type1+0x18e>
    7f1c:	80 91 06 08 	lds	r24, 0x0806
    7f20:	90 91 07 08 	lds	r25, 0x0807
    7f24:	69 e2       	ldi	r22, 0x29	; 41
    7f26:	78 e0       	ldi	r23, 0x08	; 8
    7f28:	a6 01       	movw	r20, r12
    7f2a:	0e 94 57 23 	call	0x46ae	; 0x46ae <fread2>
    7f2e:	8c 2d       	mov	r24, r12
    7f30:	8a 5f       	subi	r24, 0xFA	; 250
    7f32:	80 93 23 08 	sts	0x0823, r24
    7f36:	f0 92 27 08 	sts	0x0827, r15
    7f3a:	e0 92 28 08 	sts	0x0828, r14
    7f3e:	57 01       	movw	r10, r14
    7f40:	08 94       	sec
    7f42:	a1 1c       	adc	r10, r1
    7f44:	b1 1c       	adc	r11, r1
    7f46:	8f ee       	ldi	r24, 0xEF	; 239
    7f48:	9f ee       	ldi	r25, 0xEF	; 239
    7f4a:	6f ef       	ldi	r22, 0xFF	; 255
    7f4c:	7f ef       	ldi	r23, 0xFF	; 255
    7f4e:	40 e2       	ldi	r20, 0x20	; 32
    7f50:	23 e2       	ldi	r18, 0x23	; 35
    7f52:	38 e0       	ldi	r19, 0x08	; 8
    7f54:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7f58:	87 e0       	ldi	r24, 0x07	; 7
    7f5a:	80 93 23 08 	sts	0x0823, r24
    7f5e:	8f ee       	ldi	r24, 0xEF	; 239
    7f60:	80 93 26 08 	sts	0x0826, r24
    7f64:	80 93 27 08 	sts	0x0827, r24
    7f68:	b0 92 28 08 	sts	0x0828, r11
    7f6c:	a0 92 29 08 	sts	0x0829, r10
    7f70:	8f ee       	ldi	r24, 0xEF	; 239
    7f72:	9f ee       	ldi	r25, 0xEF	; 239
    7f74:	6f ef       	ldi	r22, 0xFF	; 255
    7f76:	7f ef       	ldi	r23, 0xFF	; 255
    7f78:	40 e2       	ldi	r20, 0x20	; 32
    7f7a:	23 e2       	ldi	r18, 0x23	; 35
    7f7c:	38 e0       	ldi	r19, 0x08	; 8
    7f7e:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7f82:	8f ee       	ldi	r24, 0xEF	; 239
    7f84:	9f ee       	ldi	r25, 0xEF	; 239
    7f86:	6f ef       	ldi	r22, 0xFF	; 255
    7f88:	7f ef       	ldi	r23, 0xFF	; 255
    7f8a:	40 e2       	ldi	r20, 0x20	; 32
    7f8c:	23 e2       	ldi	r18, 0x23	; 35
    7f8e:	38 e0       	ldi	r19, 0x08	; 8
    7f90:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7f94:	8f ee       	ldi	r24, 0xEF	; 239
    7f96:	9f ee       	ldi	r25, 0xEF	; 239
    7f98:	6f ef       	ldi	r22, 0xFF	; 255
    7f9a:	7f ef       	ldi	r23, 0xFF	; 255
    7f9c:	40 e2       	ldi	r20, 0x20	; 32
    7f9e:	23 e2       	ldi	r18, 0x23	; 35
    7fa0:	38 e0       	ldi	r19, 0x08	; 8
    7fa2:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7fa6:	8f ee       	ldi	r24, 0xEF	; 239
    7fa8:	9f ee       	ldi	r25, 0xEF	; 239
    7faa:	6f ef       	ldi	r22, 0xFF	; 255
    7fac:	7f ef       	ldi	r23, 0xFF	; 255
    7fae:	40 e2       	ldi	r20, 0x20	; 32
    7fb0:	23 e2       	ldi	r18, 0x23	; 35
    7fb2:	38 e0       	ldi	r19, 0x08	; 8
    7fb4:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    7fb8:	2d 96       	adiw	r28, 0x0d	; 13
    7fba:	0f b6       	in	r0, 0x3f	; 63
    7fbc:	f8 94       	cli
    7fbe:	de bf       	out	0x3e, r29	; 62
    7fc0:	0f be       	out	0x3f, r0	; 63
    7fc2:	cd bf       	out	0x3d, r28	; 61
    7fc4:	cf 91       	pop	r28
    7fc6:	df 91       	pop	r29
    7fc8:	1f 91       	pop	r17
    7fca:	0f 91       	pop	r16
    7fcc:	ff 90       	pop	r15
    7fce:	ef 90       	pop	r14
    7fd0:	df 90       	pop	r13
    7fd2:	cf 90       	pop	r12
    7fd4:	bf 90       	pop	r11
    7fd6:	af 90       	pop	r10
    7fd8:	9f 90       	pop	r9
    7fda:	08 95       	ret

00007fdc <reply_touch>:
    7fdc:	df 92       	push	r13
    7fde:	ef 92       	push	r14
    7fe0:	ff 92       	push	r15
    7fe2:	0f 93       	push	r16
    7fe4:	1f 93       	push	r17
    7fe6:	df 93       	push	r29
    7fe8:	cf 93       	push	r28
    7fea:	cd b7       	in	r28, 0x3d	; 61
    7fec:	de b7       	in	r29, 0x3e	; 62
    7fee:	2d 97       	sbiw	r28, 0x0d	; 13
    7ff0:	0f b6       	in	r0, 0x3f	; 63
    7ff2:	f8 94       	cli
    7ff4:	de bf       	out	0x3e, r29	; 62
    7ff6:	0f be       	out	0x3f, r0	; 63
    7ff8:	cd bf       	out	0x3d, r28	; 61
    7ffa:	8c 01       	movw	r16, r24
    7ffc:	fc 01       	movw	r30, r24
    7ffe:	d3 80       	ldd	r13, Z+3	; 0x03
    8000:	bc 01       	movw	r22, r24
    8002:	6c 5f       	subi	r22, 0xFC	; 252
    8004:	7f 4f       	sbci	r23, 0xFF	; 255
    8006:	40 81       	ld	r20, Z
    8008:	44 50       	subi	r20, 0x04	; 4
    800a:	7e 01       	movw	r14, r28
    800c:	08 94       	sec
    800e:	e1 1c       	adc	r14, r1
    8010:	f1 1c       	adc	r15, r1
    8012:	c7 01       	movw	r24, r14
    8014:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    8018:	f8 01       	movw	r30, r16
    801a:	80 81       	ld	r24, Z
    801c:	fe 01       	movw	r30, r28
    801e:	33 97       	sbiw	r30, 0x03	; 3
    8020:	e8 0f       	add	r30, r24
    8022:	f1 1d       	adc	r31, r1
    8024:	10 82       	st	Z, r1
    8026:	c7 01       	movw	r24, r14
    8028:	6d 2d       	mov	r22, r13
    802a:	70 e0       	ldi	r23, 0x00	; 0
    802c:	0e 94 45 2b 	call	0x568a	; 0x568a <createFileFromDirectory>
    8030:	94 e0       	ldi	r25, 0x04	; 4
    8032:	90 93 23 08 	sts	0x0823, r25
    8036:	97 e9       	ldi	r25, 0x97	; 151
    8038:	90 93 24 08 	sts	0x0824, r25
    803c:	90 91 8d 08 	lds	r25, 0x088D
    8040:	90 93 25 08 	sts	0x0825, r25
    8044:	80 93 26 08 	sts	0x0826, r24
    8048:	8f ee       	ldi	r24, 0xEF	; 239
    804a:	9f ee       	ldi	r25, 0xEF	; 239
    804c:	6f ef       	ldi	r22, 0xFF	; 255
    804e:	7f ef       	ldi	r23, 0xFF	; 255
    8050:	40 e2       	ldi	r20, 0x20	; 32
    8052:	23 e2       	ldi	r18, 0x23	; 35
    8054:	38 e0       	ldi	r19, 0x08	; 8
    8056:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    805a:	2d 96       	adiw	r28, 0x0d	; 13
    805c:	0f b6       	in	r0, 0x3f	; 63
    805e:	f8 94       	cli
    8060:	de bf       	out	0x3e, r29	; 62
    8062:	0f be       	out	0x3f, r0	; 63
    8064:	cd bf       	out	0x3d, r28	; 61
    8066:	cf 91       	pop	r28
    8068:	df 91       	pop	r29
    806a:	1f 91       	pop	r17
    806c:	0f 91       	pop	r16
    806e:	ff 90       	pop	r15
    8070:	ef 90       	pop	r14
    8072:	df 90       	pop	r13
    8074:	08 95       	ret

00008076 <reply_cp_fromPCtoNode_type2>:
    8076:	cf 93       	push	r28
    8078:	df 93       	push	r29
    807a:	ec 01       	movw	r28, r24
    807c:	8b 81       	ldd	r24, Y+3	; 0x03
    807e:	8f 3f       	cpi	r24, 0xFF	; 255
    8080:	a1 f0       	breq	.+40     	; 0x80aa <reply_cp_fromPCtoNode_type2+0x34>
    8082:	9c 81       	ldd	r25, Y+4	; 0x04
    8084:	80 e0       	ldi	r24, 0x00	; 0
    8086:	2d 81       	ldd	r18, Y+5	; 0x05
    8088:	82 0f       	add	r24, r18
    808a:	91 1d       	adc	r25, r1
    808c:	90 93 46 08 	sts	0x0846, r25
    8090:	80 93 45 08 	sts	0x0845, r24
    8094:	20 91 43 08 	lds	r18, 0x0843
    8098:	30 91 44 08 	lds	r19, 0x0844
    809c:	82 17       	cp	r24, r18
    809e:	93 07       	cpc	r25, r19
    80a0:	09 f4       	brne	.+2      	; 0x80a4 <reply_cp_fromPCtoNode_type2+0x2e>
    80a2:	47 c0       	rjmp	.+142    	; 0x8132 <reply_cp_fromPCtoNode_type2+0xbc>
    80a4:	df 91       	pop	r29
    80a6:	cf 91       	pop	r28
    80a8:	08 95       	ret
    80aa:	60 91 43 08 	lds	r22, 0x0843
    80ae:	70 91 44 08 	lds	r23, 0x0844
    80b2:	ab 01       	movw	r20, r22
    80b4:	41 50       	subi	r20, 0x01	; 1
    80b6:	50 40       	sbci	r21, 0x00	; 0
    80b8:	9c 81       	ldd	r25, Y+4	; 0x04
    80ba:	80 e0       	ldi	r24, 0x00	; 0
    80bc:	2d 81       	ldd	r18, Y+5	; 0x05
    80be:	82 0f       	add	r24, r18
    80c0:	91 1d       	adc	r25, r1
    80c2:	48 17       	cp	r20, r24
    80c4:	59 07       	cpc	r21, r25
    80c6:	f8 f0       	brcs	.+62     	; 0x8106 <reply_cp_fromPCtoNode_type2+0x90>
    80c8:	87 e0       	ldi	r24, 0x07	; 7
    80ca:	80 93 23 08 	sts	0x0823, r24
    80ce:	8a e7       	ldi	r24, 0x7A	; 122
    80d0:	80 93 24 08 	sts	0x0824, r24
    80d4:	80 91 8d 08 	lds	r24, 0x088D
    80d8:	80 93 25 08 	sts	0x0825, r24
    80dc:	8f e0       	ldi	r24, 0x0F	; 15
    80de:	80 93 26 08 	sts	0x0826, r24
    80e2:	80 93 27 08 	sts	0x0827, r24
    80e6:	10 92 28 08 	sts	0x0828, r1
    80ea:	10 92 29 08 	sts	0x0829, r1
    80ee:	8f ee       	ldi	r24, 0xEF	; 239
    80f0:	9f ee       	ldi	r25, 0xEF	; 239
    80f2:	6f ef       	ldi	r22, 0xFF	; 255
    80f4:	7f ef       	ldi	r23, 0xFF	; 255
    80f6:	40 e2       	ldi	r20, 0x20	; 32
    80f8:	23 e2       	ldi	r18, 0x23	; 35
    80fa:	38 e0       	ldi	r19, 0x08	; 8
    80fc:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    8100:	df 91       	pop	r29
    8102:	cf 91       	pop	r28
    8104:	08 95       	ret
    8106:	87 e0       	ldi	r24, 0x07	; 7
    8108:	80 93 23 08 	sts	0x0823, r24
    810c:	8a e7       	ldi	r24, 0x7A	; 122
    810e:	80 93 24 08 	sts	0x0824, r24
    8112:	80 91 8d 08 	lds	r24, 0x088D
    8116:	80 93 25 08 	sts	0x0825, r24
    811a:	8f e0       	ldi	r24, 0x0F	; 15
    811c:	80 93 26 08 	sts	0x0826, r24
    8120:	80 93 27 08 	sts	0x0827, r24
    8124:	50 93 28 08 	sts	0x0828, r21
    8128:	86 2f       	mov	r24, r22
    812a:	81 50       	subi	r24, 0x01	; 1
    812c:	80 93 29 08 	sts	0x0829, r24
    8130:	de cf       	rjmp	.-68     	; 0x80ee <reply_cp_fromPCtoNode_type2+0x78>
    8132:	be 01       	movw	r22, r28
    8134:	69 5f       	subi	r22, 0xF9	; 249
    8136:	7f 4f       	sbci	r23, 0xFF	; 255
    8138:	4e 81       	ldd	r20, Y+6	; 0x06
    813a:	80 91 08 08 	lds	r24, 0x0808
    813e:	90 91 09 08 	lds	r25, 0x0809
    8142:	50 e0       	ldi	r21, 0x00	; 0
    8144:	0e 94 18 22 	call	0x4430	; 0x4430 <fwrite2>
    8148:	4e 81       	ldd	r20, Y+6	; 0x06
    814a:	50 e0       	ldi	r21, 0x00	; 0
    814c:	60 e0       	ldi	r22, 0x00	; 0
    814e:	70 e0       	ldi	r23, 0x00	; 0
    8150:	80 91 08 08 	lds	r24, 0x0808
    8154:	90 91 09 08 	lds	r25, 0x0809
    8158:	21 e0       	ldi	r18, 0x01	; 1
    815a:	30 e0       	ldi	r19, 0x00	; 0
    815c:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <fseek2>
    8160:	80 91 43 08 	lds	r24, 0x0843
    8164:	90 91 44 08 	lds	r25, 0x0844
    8168:	01 96       	adiw	r24, 0x01	; 1
    816a:	90 93 44 08 	sts	0x0844, r25
    816e:	80 93 43 08 	sts	0x0843, r24
    8172:	df 91       	pop	r29
    8174:	cf 91       	pop	r28
    8176:	08 95       	ret

00008178 <reply_cp_fromPCtoNode_type1>:
    8178:	df 92       	push	r13
    817a:	ef 92       	push	r14
    817c:	ff 92       	push	r15
    817e:	0f 93       	push	r16
    8180:	1f 93       	push	r17
    8182:	df 93       	push	r29
    8184:	cf 93       	push	r28
    8186:	cd b7       	in	r28, 0x3d	; 61
    8188:	de b7       	in	r29, 0x3e	; 62
    818a:	2d 97       	sbiw	r28, 0x0d	; 13
    818c:	0f b6       	in	r0, 0x3f	; 63
    818e:	f8 94       	cli
    8190:	de bf       	out	0x3e, r29	; 62
    8192:	0f be       	out	0x3f, r0	; 63
    8194:	cd bf       	out	0x3d, r28	; 61
    8196:	8c 01       	movw	r16, r24
    8198:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <releaseAllFid>
    819c:	f8 01       	movw	r30, r16
    819e:	d3 80       	ldd	r13, Z+3	; 0x03
    81a0:	b8 01       	movw	r22, r16
    81a2:	6c 5f       	subi	r22, 0xFC	; 252
    81a4:	7f 4f       	sbci	r23, 0xFF	; 255
    81a6:	40 81       	ld	r20, Z
    81a8:	44 50       	subi	r20, 0x04	; 4
    81aa:	7e 01       	movw	r14, r28
    81ac:	08 94       	sec
    81ae:	e1 1c       	adc	r14, r1
    81b0:	f1 1c       	adc	r15, r1
    81b2:	c7 01       	movw	r24, r14
    81b4:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    81b8:	f8 01       	movw	r30, r16
    81ba:	80 81       	ld	r24, Z
    81bc:	fe 01       	movw	r30, r28
    81be:	33 97       	sbiw	r30, 0x03	; 3
    81c0:	e8 0f       	add	r30, r24
    81c2:	f1 1d       	adc	r31, r1
    81c4:	10 82       	st	Z, r1
    81c6:	c7 01       	movw	r24, r14
    81c8:	6d 2d       	mov	r22, r13
    81ca:	70 e0       	ldi	r23, 0x00	; 0
    81cc:	0e 94 45 2b 	call	0x568a	; 0x568a <createFileFromDirectory>
    81d0:	f8 2e       	mov	r15, r24
    81d2:	10 92 46 08 	sts	0x0846, r1
    81d6:	10 92 45 08 	sts	0x0845, r1
    81da:	81 e0       	ldi	r24, 0x01	; 1
    81dc:	90 e0       	ldi	r25, 0x00	; 0
    81de:	90 93 44 08 	sts	0x0844, r25
    81e2:	80 93 43 08 	sts	0x0843, r24
    81e6:	84 e0       	ldi	r24, 0x04	; 4
    81e8:	80 93 23 08 	sts	0x0823, r24
    81ec:	89 e7       	ldi	r24, 0x79	; 121
    81ee:	80 93 24 08 	sts	0x0824, r24
    81f2:	80 91 8d 08 	lds	r24, 0x088D
    81f6:	80 93 25 08 	sts	0x0825, r24
    81fa:	f0 92 26 08 	sts	0x0826, r15
    81fe:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <getFreeFid>
    8202:	18 2f       	mov	r17, r24
    8204:	09 2f       	mov	r16, r25
    8206:	8f 2d       	mov	r24, r15
    8208:	90 e0       	ldi	r25, 0x00	; 0
    820a:	61 2f       	mov	r22, r17
    820c:	70 2f       	mov	r23, r16
    820e:	42 e0       	ldi	r20, 0x02	; 2
    8210:	50 e0       	ldi	r21, 0x00	; 0
    8212:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <openFile>
    8216:	81 2f       	mov	r24, r17
    8218:	90 2f       	mov	r25, r16
    821a:	9c 01       	movw	r18, r24
    821c:	22 0f       	add	r18, r18
    821e:	33 1f       	adc	r19, r19
    8220:	22 0f       	add	r18, r18
    8222:	33 1f       	adc	r19, r19
    8224:	22 0f       	add	r18, r18
    8226:	33 1f       	adc	r19, r19
    8228:	88 0f       	add	r24, r24
    822a:	99 1f       	adc	r25, r25
    822c:	28 0f       	add	r18, r24
    822e:	39 1f       	adc	r19, r25
    8230:	2a 55       	subi	r18, 0x5A	; 90
    8232:	3a 4f       	sbci	r19, 0xFA	; 250
    8234:	30 93 09 08 	sts	0x0809, r19
    8238:	20 93 08 08 	sts	0x0808, r18
    823c:	84 e1       	ldi	r24, 0x14	; 20
    823e:	90 e0       	ldi	r25, 0x00	; 0
    8240:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sleepThread>
    8244:	8f ee       	ldi	r24, 0xEF	; 239
    8246:	9f ee       	ldi	r25, 0xEF	; 239
    8248:	6f ef       	ldi	r22, 0xFF	; 255
    824a:	7f ef       	ldi	r23, 0xFF	; 255
    824c:	40 e2       	ldi	r20, 0x20	; 32
    824e:	23 e2       	ldi	r18, 0x23	; 35
    8250:	38 e0       	ldi	r19, 0x08	; 8
    8252:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    8256:	2d 96       	adiw	r28, 0x0d	; 13
    8258:	0f b6       	in	r0, 0x3f	; 63
    825a:	f8 94       	cli
    825c:	de bf       	out	0x3e, r29	; 62
    825e:	0f be       	out	0x3f, r0	; 63
    8260:	cd bf       	out	0x3d, r28	; 61
    8262:	cf 91       	pop	r28
    8264:	df 91       	pop	r29
    8266:	1f 91       	pop	r17
    8268:	0f 91       	pop	r16
    826a:	ff 90       	pop	r15
    826c:	ef 90       	pop	r14
    826e:	df 90       	pop	r13
    8270:	08 95       	ret

00008272 <reply_mkdir>:
    8272:	df 92       	push	r13
    8274:	ef 92       	push	r14
    8276:	ff 92       	push	r15
    8278:	0f 93       	push	r16
    827a:	1f 93       	push	r17
    827c:	df 93       	push	r29
    827e:	cf 93       	push	r28
    8280:	cd b7       	in	r28, 0x3d	; 61
    8282:	de b7       	in	r29, 0x3e	; 62
    8284:	2d 97       	sbiw	r28, 0x0d	; 13
    8286:	0f b6       	in	r0, 0x3f	; 63
    8288:	f8 94       	cli
    828a:	de bf       	out	0x3e, r29	; 62
    828c:	0f be       	out	0x3f, r0	; 63
    828e:	cd bf       	out	0x3d, r28	; 61
    8290:	8c 01       	movw	r16, r24
    8292:	fc 01       	movw	r30, r24
    8294:	d3 80       	ldd	r13, Z+3	; 0x03
    8296:	bc 01       	movw	r22, r24
    8298:	6c 5f       	subi	r22, 0xFC	; 252
    829a:	7f 4f       	sbci	r23, 0xFF	; 255
    829c:	40 81       	ld	r20, Z
    829e:	44 50       	subi	r20, 0x04	; 4
    82a0:	7e 01       	movw	r14, r28
    82a2:	08 94       	sec
    82a4:	e1 1c       	adc	r14, r1
    82a6:	f1 1c       	adc	r15, r1
    82a8:	c7 01       	movw	r24, r14
    82aa:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    82ae:	f8 01       	movw	r30, r16
    82b0:	80 81       	ld	r24, Z
    82b2:	fe 01       	movw	r30, r28
    82b4:	33 97       	sbiw	r30, 0x03	; 3
    82b6:	e8 0f       	add	r30, r24
    82b8:	f1 1d       	adc	r31, r1
    82ba:	10 82       	st	Z, r1
    82bc:	c7 01       	movw	r24, r14
    82be:	6d 2d       	mov	r22, r13
    82c0:	70 e0       	ldi	r23, 0x00	; 0
    82c2:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <createDir>
    82c6:	94 e0       	ldi	r25, 0x04	; 4
    82c8:	90 93 23 08 	sts	0x0823, r25
    82cc:	9d e8       	ldi	r25, 0x8D	; 141
    82ce:	90 93 24 08 	sts	0x0824, r25
    82d2:	90 91 8d 08 	lds	r25, 0x088D
    82d6:	90 93 25 08 	sts	0x0825, r25
    82da:	80 93 26 08 	sts	0x0826, r24
    82de:	84 e1       	ldi	r24, 0x14	; 20
    82e0:	90 e0       	ldi	r25, 0x00	; 0
    82e2:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sleepThread>
    82e6:	8f ee       	ldi	r24, 0xEF	; 239
    82e8:	9f ee       	ldi	r25, 0xEF	; 239
    82ea:	6f ef       	ldi	r22, 0xFF	; 255
    82ec:	7f ef       	ldi	r23, 0xFF	; 255
    82ee:	40 e2       	ldi	r20, 0x20	; 32
    82f0:	23 e2       	ldi	r18, 0x23	; 35
    82f2:	38 e0       	ldi	r19, 0x08	; 8
    82f4:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    82f8:	2d 96       	adiw	r28, 0x0d	; 13
    82fa:	0f b6       	in	r0, 0x3f	; 63
    82fc:	f8 94       	cli
    82fe:	de bf       	out	0x3e, r29	; 62
    8300:	0f be       	out	0x3f, r0	; 63
    8302:	cd bf       	out	0x3d, r28	; 61
    8304:	cf 91       	pop	r28
    8306:	df 91       	pop	r29
    8308:	1f 91       	pop	r17
    830a:	0f 91       	pop	r16
    830c:	ff 90       	pop	r15
    830e:	ef 90       	pop	r14
    8310:	df 90       	pop	r13
    8312:	08 95       	ret

00008314 <reply_ls_long>:
    8314:	ef 92       	push	r14
    8316:	ff 92       	push	r15
    8318:	0f 93       	push	r16
    831a:	1f 93       	push	r17
    831c:	cf 93       	push	r28
    831e:	df 93       	push	r29
    8320:	08 2f       	mov	r16, r24
    8322:	80 91 08 08 	lds	r24, 0x0808
    8326:	90 91 09 08 	lds	r25, 0x0809
    832a:	89 2b       	or	r24, r25
    832c:	21 f0       	breq	.+8      	; 0x8336 <reply_ls_long+0x22>
    832e:	10 92 09 08 	sts	0x0809, r1
    8332:	10 92 08 08 	sts	0x0808, r1
    8336:	10 e0       	ldi	r17, 0x00	; 0
    8338:	ce e0       	ldi	r28, 0x0E	; 14
    833a:	d0 e0       	ldi	r29, 0x00	; 0
    833c:	b0 e2       	ldi	r27, 0x20	; 32
    833e:	eb 2e       	mov	r14, r27
    8340:	a8 e6       	ldi	r26, 0x68	; 104
    8342:	fa 2e       	mov	r15, r26
    8344:	04 c0       	rjmp	.+8      	; 0x834e <reply_ls_long+0x3a>
    8346:	21 96       	adiw	r28, 0x01	; 1
    8348:	c8 31       	cpi	r28, 0x18	; 24
    834a:	d1 05       	cpc	r29, r1
    834c:	59 f1       	breq	.+86     	; 0x83a4 <reply_ls_long+0x90>
    834e:	80 2f       	mov	r24, r16
    8350:	90 e0       	ldi	r25, 0x00	; 0
    8352:	be 01       	movw	r22, r28
    8354:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <fsread8uint>
    8358:	68 2f       	mov	r22, r24
    835a:	88 23       	and	r24, r24
    835c:	a1 f3       	breq	.-24     	; 0x8346 <reply_ls_long+0x32>
    835e:	e0 92 23 08 	sts	0x0823, r14
    8362:	f0 92 24 08 	sts	0x0824, r15
    8366:	80 91 8d 08 	lds	r24, 0x088D
    836a:	80 93 25 08 	sts	0x0825, r24
    836e:	60 93 26 08 	sts	0x0826, r22
    8372:	10 93 27 08 	sts	0x0827, r17
    8376:	1f 5f       	subi	r17, 0xFF	; 255
    8378:	88 e2       	ldi	r24, 0x28	; 40
    837a:	98 e0       	ldi	r25, 0x08	; 8
    837c:	70 e0       	ldi	r23, 0x00	; 0
    837e:	0e 94 50 20 	call	0x40a0	; 0x40a0 <finfonode>
    8382:	84 e1       	ldi	r24, 0x14	; 20
    8384:	90 e0       	ldi	r25, 0x00	; 0
    8386:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sleepThread>
    838a:	8f ee       	ldi	r24, 0xEF	; 239
    838c:	9f ee       	ldi	r25, 0xEF	; 239
    838e:	6f ef       	ldi	r22, 0xFF	; 255
    8390:	7f ef       	ldi	r23, 0xFF	; 255
    8392:	40 e2       	ldi	r20, 0x20	; 32
    8394:	23 e2       	ldi	r18, 0x23	; 35
    8396:	38 e0       	ldi	r19, 0x08	; 8
    8398:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    839c:	21 96       	adiw	r28, 0x01	; 1
    839e:	c8 31       	cpi	r28, 0x18	; 24
    83a0:	d1 05       	cpc	r29, r1
    83a2:	a9 f6       	brne	.-86     	; 0x834e <reply_ls_long+0x3a>
    83a4:	df 91       	pop	r29
    83a6:	cf 91       	pop	r28
    83a8:	1f 91       	pop	r17
    83aa:	0f 91       	pop	r16
    83ac:	ff 90       	pop	r15
    83ae:	ef 90       	pop	r14
    83b0:	08 95       	ret

000083b2 <reply_ls_nodename>:
    83b2:	0f 93       	push	r16
    83b4:	fc 01       	movw	r30, r24
    83b6:	00 81       	ld	r16, Z
    83b8:	03 50       	subi	r16, 0x03	; 3
    83ba:	63 e0       	ldi	r22, 0x03	; 3
    83bc:	48 ef       	ldi	r20, 0xF8	; 248
    83be:	53 e0       	ldi	r21, 0x03	; 3
    83c0:	20 e0       	ldi	r18, 0x00	; 0
    83c2:	0e 94 1c 3b 	call	0x7638	; 0x7638 <mystrncmp>
    83c6:	89 2b       	or	r24, r25
    83c8:	39 f5       	brne	.+78     	; 0x8418 <reply_ls_nodename+0x66>
    83ca:	85 ee       	ldi	r24, 0xE5	; 229
    83cc:	93 e0       	ldi	r25, 0x03	; 3
    83ce:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    83d2:	48 2f       	mov	r20, r24
    83d4:	4d 5f       	subi	r20, 0xFD	; 253
    83d6:	40 93 23 08 	sts	0x0823, r20
    83da:	43 50       	subi	r20, 0x03	; 3
    83dc:	86 e6       	ldi	r24, 0x66	; 102
    83de:	80 93 24 08 	sts	0x0824, r24
    83e2:	80 91 8d 08 	lds	r24, 0x088D
    83e6:	80 93 25 08 	sts	0x0825, r24
    83ea:	86 e2       	ldi	r24, 0x26	; 38
    83ec:	98 e0       	ldi	r25, 0x08	; 8
    83ee:	65 ee       	ldi	r22, 0xE5	; 229
    83f0:	73 e0       	ldi	r23, 0x03	; 3
    83f2:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    83f6:	0e 94 e1 3b 	call	0x77c2	; 0x77c2 <getRandomNumber>
    83fa:	60 e9       	ldi	r22, 0x90	; 144
    83fc:	71 e0       	ldi	r23, 0x01	; 1
    83fe:	0e 94 73 54 	call	0xa8e6	; 0xa8e6 <__udivmodhi4>
    8402:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sleepThread>
    8406:	8f ee       	ldi	r24, 0xEF	; 239
    8408:	9f ee       	ldi	r25, 0xEF	; 239
    840a:	6f ef       	ldi	r22, 0xFF	; 255
    840c:	7f ef       	ldi	r23, 0xFF	; 255
    840e:	40 e2       	ldi	r20, 0x20	; 32
    8410:	23 e2       	ldi	r18, 0x23	; 35
    8412:	38 e0       	ldi	r19, 0x08	; 8
    8414:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    8418:	0f 91       	pop	r16
    841a:	08 95       	ret

0000841c <reply_ls_networkname>:
    841c:	ef 92       	push	r14
    841e:	ff 92       	push	r15
    8420:	0f 93       	push	r16
    8422:	1f 93       	push	r17
    8424:	08 ef       	ldi	r16, 0xF8	; 248
    8426:	13 e0       	ldi	r17, 0x03	; 3
    8428:	c8 01       	movw	r24, r16
    842a:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    842e:	48 2f       	mov	r20, r24
    8430:	83 e2       	ldi	r24, 0x23	; 35
    8432:	e8 2e       	mov	r14, r24
    8434:	88 e0       	ldi	r24, 0x08	; 8
    8436:	f8 2e       	mov	r15, r24
    8438:	4d 5f       	subi	r20, 0xFD	; 253
    843a:	40 93 23 08 	sts	0x0823, r20
    843e:	43 50       	subi	r20, 0x03	; 3
    8440:	85 e6       	ldi	r24, 0x65	; 101
    8442:	80 93 24 08 	sts	0x0824, r24
    8446:	80 91 8d 08 	lds	r24, 0x088D
    844a:	80 93 25 08 	sts	0x0825, r24
    844e:	c7 01       	movw	r24, r14
    8450:	03 96       	adiw	r24, 0x03	; 3
    8452:	b8 01       	movw	r22, r16
    8454:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    8458:	0e 94 e1 3b 	call	0x77c2	; 0x77c2 <getRandomNumber>
    845c:	60 e9       	ldi	r22, 0x90	; 144
    845e:	71 e0       	ldi	r23, 0x01	; 1
    8460:	0e 94 73 54 	call	0xa8e6	; 0xa8e6 <__udivmodhi4>
    8464:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sleepThread>
    8468:	8f ee       	ldi	r24, 0xEF	; 239
    846a:	9f ee       	ldi	r25, 0xEF	; 239
    846c:	6f ef       	ldi	r22, 0xFF	; 255
    846e:	7f ef       	ldi	r23, 0xFF	; 255
    8470:	40 e2       	ldi	r20, 0x20	; 32
    8472:	97 01       	movw	r18, r14
    8474:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    8478:	1f 91       	pop	r17
    847a:	0f 91       	pop	r16
    847c:	ff 90       	pop	r15
    847e:	ef 90       	pop	r14
    8480:	08 95       	ret

00008482 <reply_thread_state_restore_fromfile>:
    8482:	cf 92       	push	r12
    8484:	df 92       	push	r13
    8486:	ef 92       	push	r14
    8488:	ff 92       	push	r15
    848a:	0f 93       	push	r16
    848c:	1f 93       	push	r17
    848e:	cf 93       	push	r28
    8490:	df 93       	push	r29
    8492:	ec 01       	movw	r28, r24
    8494:	88 81       	ld	r24, Y
    8496:	fe 01       	movw	r30, r28
    8498:	e8 0f       	add	r30, r24
    849a:	f1 1d       	adc	r31, r1
    849c:	10 82       	st	Z, r1
    849e:	80 91 54 05 	lds	r24, 0x0554
    84a2:	88 23       	and	r24, r24
    84a4:	41 f5       	brne	.+80     	; 0x84f6 <reply_thread_state_restore_fromfile+0x74>
    84a6:	80 91 7b 05 	lds	r24, 0x057B
    84aa:	88 23       	and	r24, r24
    84ac:	89 f5       	brne	.+98     	; 0x8510 <reply_thread_state_restore_fromfile+0x8e>
    84ae:	8b 81       	ldd	r24, Y+3	; 0x03
    84b0:	c8 0f       	add	r28, r24
    84b2:	d1 1d       	adc	r29, r1
    84b4:	8f e2       	ldi	r24, 0x2F	; 47
    84b6:	8d 83       	std	Y+5, r24	; 0x05
    84b8:	90 e0       	ldi	r25, 0x00	; 0
    84ba:	84 e0       	ldi	r24, 0x04	; 4
    84bc:	80 93 23 08 	sts	0x0823, r24
    84c0:	8f e5       	ldi	r24, 0x5F	; 95
    84c2:	80 93 24 08 	sts	0x0824, r24
    84c6:	80 91 8d 08 	lds	r24, 0x088D
    84ca:	80 93 25 08 	sts	0x0825, r24
    84ce:	90 93 26 08 	sts	0x0826, r25
    84d2:	8f ee       	ldi	r24, 0xEF	; 239
    84d4:	9f ee       	ldi	r25, 0xEF	; 239
    84d6:	6f ef       	ldi	r22, 0xFF	; 255
    84d8:	7f ef       	ldi	r23, 0xFF	; 255
    84da:	40 e2       	ldi	r20, 0x20	; 32
    84dc:	23 e2       	ldi	r18, 0x23	; 35
    84de:	38 e0       	ldi	r19, 0x08	; 8
    84e0:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    84e4:	df 91       	pop	r29
    84e6:	cf 91       	pop	r28
    84e8:	1f 91       	pop	r17
    84ea:	0f 91       	pop	r16
    84ec:	ff 90       	pop	r15
    84ee:	ef 90       	pop	r14
    84f0:	df 90       	pop	r13
    84f2:	cf 90       	pop	r12
    84f4:	08 95       	ret
    84f6:	be 01       	movw	r22, r28
    84f8:	6b 5f       	subi	r22, 0xFB	; 251
    84fa:	7f 4f       	sbci	r23, 0xFF	; 255
    84fc:	87 e5       	ldi	r24, 0x57	; 87
    84fe:	95 e0       	ldi	r25, 0x05	; 5
    8500:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <superstring>
    8504:	89 2b       	or	r24, r25
    8506:	99 f2       	breq	.-90     	; 0x84ae <reply_thread_state_restore_fromfile+0x2c>
    8508:	80 91 7b 05 	lds	r24, 0x057B
    850c:	88 23       	and	r24, r24
    850e:	79 f2       	breq	.-98     	; 0x84ae <reply_thread_state_restore_fromfile+0x2c>
    8510:	be 01       	movw	r22, r28
    8512:	6b 5f       	subi	r22, 0xFB	; 251
    8514:	7f 4f       	sbci	r23, 0xFF	; 255
    8516:	8e e7       	ldi	r24, 0x7E	; 126
    8518:	95 e0       	ldi	r25, 0x05	; 5
    851a:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <superstring>
    851e:	89 2b       	or	r24, r25
    8520:	31 f6       	brne	.-116    	; 0x84ae <reply_thread_state_restore_fromfile+0x2c>
    8522:	eb 81       	ldd	r30, Y+3	; 0x03
    8524:	f0 e0       	ldi	r31, 0x00	; 0
    8526:	35 96       	adiw	r30, 0x05	; 5
    8528:	ec 0f       	add	r30, r28
    852a:	fd 1f       	adc	r31, r29
    852c:	8f e2       	ldi	r24, 0x2F	; 47
    852e:	80 83       	st	Z, r24
    8530:	c0 90 8a 05 	lds	r12, 0x058A
    8534:	d0 90 8b 05 	lds	r13, 0x058B
    8538:	e0 90 8c 05 	lds	r14, 0x058C
    853c:	f0 90 8d 05 	lds	r15, 0x058D
    8540:	08 94       	sec
    8542:	e1 1c       	adc	r14, r1
    8544:	f1 1c       	adc	r15, r1
    8546:	ec 18       	sub	r14, r12
    8548:	fd 08       	sbc	r15, r13
    854a:	cf 01       	movw	r24, r30
    854c:	6f e2       	ldi	r22, 0x2F	; 47
    854e:	71 e0       	ldi	r23, 0x01	; 1
    8550:	0e 94 cc 24 	call	0x4998	; 0x4998 <fopen2>
    8554:	8c 01       	movw	r16, r24
    8556:	69 e7       	ldi	r22, 0x79	; 121
    8558:	75 e0       	ldi	r23, 0x05	; 5
    855a:	47 e2       	ldi	r20, 0x27	; 39
    855c:	50 e0       	ldi	r21, 0x00	; 0
    855e:	0e 94 57 23 	call	0x46ae	; 0x46ae <fread2>
    8562:	c8 01       	movw	r24, r16
    8564:	47 e2       	ldi	r20, 0x27	; 39
    8566:	50 e0       	ldi	r21, 0x00	; 0
    8568:	60 e0       	ldi	r22, 0x00	; 0
    856a:	70 e0       	ldi	r23, 0x00	; 0
    856c:	21 e0       	ldi	r18, 0x01	; 1
    856e:	30 e0       	ldi	r19, 0x00	; 0
    8570:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <fseek2>
    8574:	c8 01       	movw	r24, r16
    8576:	b6 01       	movw	r22, r12
    8578:	a7 01       	movw	r20, r14
    857a:	0e 94 57 23 	call	0x46ae	; 0x46ae <fread2>
    857e:	c8 01       	movw	r24, r16
    8580:	0e 94 c6 24 	call	0x498c	; 0x498c <fclose2>
    8584:	91 e0       	ldi	r25, 0x01	; 1
    8586:	99 cf       	rjmp	.-206    	; 0x84ba <reply_thread_state_restore_fromfile+0x38>

00008588 <reply_thread_state_snapshot_tofile>:
    8588:	cf 92       	push	r12
    858a:	df 92       	push	r13
    858c:	ef 92       	push	r14
    858e:	ff 92       	push	r15
    8590:	0f 93       	push	r16
    8592:	1f 93       	push	r17
    8594:	cf 93       	push	r28
    8596:	df 93       	push	r29
    8598:	ec 01       	movw	r28, r24
    859a:	88 81       	ld	r24, Y
    859c:	fe 01       	movw	r30, r28
    859e:	e8 0f       	add	r30, r24
    85a0:	f1 1d       	adc	r31, r1
    85a2:	10 82       	st	Z, r1
    85a4:	80 91 54 05 	lds	r24, 0x0554
    85a8:	88 23       	and	r24, r24
    85aa:	09 f0       	breq	.+2      	; 0x85ae <reply_thread_state_snapshot_tofile+0x26>
    85ac:	62 c0       	rjmp	.+196    	; 0x8672 <reply_thread_state_snapshot_tofile+0xea>
    85ae:	80 91 7b 05 	lds	r24, 0x057B
    85b2:	88 23       	and	r24, r24
    85b4:	f9 f4       	brne	.+62     	; 0x85f4 <reply_thread_state_snapshot_tofile+0x6c>
    85b6:	90 e0       	ldi	r25, 0x00	; 0
    85b8:	84 e0       	ldi	r24, 0x04	; 4
    85ba:	80 93 23 08 	sts	0x0823, r24
    85be:	8e e5       	ldi	r24, 0x5E	; 94
    85c0:	80 93 24 08 	sts	0x0824, r24
    85c4:	80 91 8d 08 	lds	r24, 0x088D
    85c8:	80 93 25 08 	sts	0x0825, r24
    85cc:	90 93 26 08 	sts	0x0826, r25
    85d0:	8f ee       	ldi	r24, 0xEF	; 239
    85d2:	9f ee       	ldi	r25, 0xEF	; 239
    85d4:	6f ef       	ldi	r22, 0xFF	; 255
    85d6:	7f ef       	ldi	r23, 0xFF	; 255
    85d8:	40 e2       	ldi	r20, 0x20	; 32
    85da:	23 e2       	ldi	r18, 0x23	; 35
    85dc:	38 e0       	ldi	r19, 0x08	; 8
    85de:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    85e2:	df 91       	pop	r29
    85e4:	cf 91       	pop	r28
    85e6:	1f 91       	pop	r17
    85e8:	0f 91       	pop	r16
    85ea:	ff 90       	pop	r15
    85ec:	ef 90       	pop	r14
    85ee:	df 90       	pop	r13
    85f0:	cf 90       	pop	r12
    85f2:	08 95       	ret
    85f4:	be 01       	movw	r22, r28
    85f6:	6b 5f       	subi	r22, 0xFB	; 251
    85f8:	7f 4f       	sbci	r23, 0xFF	; 255
    85fa:	8e e7       	ldi	r24, 0x7E	; 126
    85fc:	95 e0       	ldi	r25, 0x05	; 5
    85fe:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <superstring>
    8602:	89 2b       	or	r24, r25
    8604:	c1 f6       	brne	.-80     	; 0x85b6 <reply_thread_state_snapshot_tofile+0x2e>
    8606:	8b 81       	ldd	r24, Y+3	; 0x03
    8608:	fe 01       	movw	r30, r28
    860a:	e8 0f       	add	r30, r24
    860c:	f1 1d       	adc	r31, r1
    860e:	8f e2       	ldi	r24, 0x2F	; 47
    8610:	85 83       	std	Z+5, r24	; 0x05
    8612:	c0 90 8a 05 	lds	r12, 0x058A
    8616:	d0 90 8b 05 	lds	r13, 0x058B
    861a:	e0 90 8c 05 	lds	r14, 0x058C
    861e:	f0 90 8d 05 	lds	r15, 0x058D
    8622:	08 94       	sec
    8624:	e1 1c       	adc	r14, r1
    8626:	f1 1c       	adc	r15, r1
    8628:	ec 18       	sub	r14, r12
    862a:	fd 08       	sbc	r15, r13
    862c:	8b 81       	ldd	r24, Y+3	; 0x03
    862e:	90 e0       	ldi	r25, 0x00	; 0
    8630:	05 96       	adiw	r24, 0x05	; 5
    8632:	8c 0f       	add	r24, r28
    8634:	9d 1f       	adc	r25, r29
    8636:	61 e3       	ldi	r22, 0x31	; 49
    8638:	71 e0       	ldi	r23, 0x01	; 1
    863a:	0e 94 cc 24 	call	0x4998	; 0x4998 <fopen2>
    863e:	8c 01       	movw	r16, r24
    8640:	69 e7       	ldi	r22, 0x79	; 121
    8642:	75 e0       	ldi	r23, 0x05	; 5
    8644:	47 e2       	ldi	r20, 0x27	; 39
    8646:	50 e0       	ldi	r21, 0x00	; 0
    8648:	0e 94 18 22 	call	0x4430	; 0x4430 <fwrite2>
    864c:	c8 01       	movw	r24, r16
    864e:	47 e2       	ldi	r20, 0x27	; 39
    8650:	50 e0       	ldi	r21, 0x00	; 0
    8652:	60 e0       	ldi	r22, 0x00	; 0
    8654:	70 e0       	ldi	r23, 0x00	; 0
    8656:	21 e0       	ldi	r18, 0x01	; 1
    8658:	30 e0       	ldi	r19, 0x00	; 0
    865a:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <fseek2>
    865e:	c8 01       	movw	r24, r16
    8660:	b6 01       	movw	r22, r12
    8662:	a7 01       	movw	r20, r14
    8664:	0e 94 18 22 	call	0x4430	; 0x4430 <fwrite2>
    8668:	c8 01       	movw	r24, r16
    866a:	0e 94 c6 24 	call	0x498c	; 0x498c <fclose2>
    866e:	91 e0       	ldi	r25, 0x01	; 1
    8670:	a3 cf       	rjmp	.-186    	; 0x85b8 <reply_thread_state_snapshot_tofile+0x30>
    8672:	be 01       	movw	r22, r28
    8674:	6b 5f       	subi	r22, 0xFB	; 251
    8676:	7f 4f       	sbci	r23, 0xFF	; 255
    8678:	87 e5       	ldi	r24, 0x57	; 87
    867a:	95 e0       	ldi	r25, 0x05	; 5
    867c:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <superstring>
    8680:	89 2b       	or	r24, r25
    8682:	09 f0       	breq	.+2      	; 0x8686 <reply_thread_state_snapshot_tofile+0xfe>
    8684:	94 cf       	rjmp	.-216    	; 0x85ae <reply_thread_state_snapshot_tofile+0x26>
    8686:	97 cf       	rjmp	.-210    	; 0x85b6 <reply_thread_state_snapshot_tofile+0x2e>

00008688 <reply_debugging_remove_avr_breakpoint>:
    8688:	ef 92       	push	r14
    868a:	ff 92       	push	r15
    868c:	0f 93       	push	r16
    868e:	1f 93       	push	r17
    8690:	cf 93       	push	r28
    8692:	df 93       	push	r29
    8694:	ec 01       	movw	r28, r24
    8696:	9b 81       	ldd	r25, Y+3	; 0x03
    8698:	80 e0       	ldi	r24, 0x00	; 0
    869a:	2c 81       	ldd	r18, Y+4	; 0x04
    869c:	82 0f       	add	r24, r18
    869e:	91 1d       	adc	r25, r1
    86a0:	7c 01       	movw	r14, r24
    86a2:	00 e0       	ldi	r16, 0x00	; 0
    86a4:	10 e0       	ldi	r17, 0x00	; 0
    86a6:	80 91 54 05 	lds	r24, 0x0554
    86aa:	88 30       	cpi	r24, 0x08	; 8
    86ac:	d9 f1       	breq	.+118    	; 0x8724 <reply_debugging_remove_avr_breakpoint+0x9c>
    86ae:	80 91 7b 05 	lds	r24, 0x057B
    86b2:	88 30       	cpi	r24, 0x08	; 8
    86b4:	e9 f0       	breq	.+58     	; 0x86f0 <reply_debugging_remove_avr_breakpoint+0x68>
    86b6:	90 e0       	ldi	r25, 0x00	; 0
    86b8:	85 e0       	ldi	r24, 0x05	; 5
    86ba:	80 93 23 08 	sts	0x0823, r24
    86be:	8d e5       	ldi	r24, 0x5D	; 93
    86c0:	80 93 24 08 	sts	0x0824, r24
    86c4:	80 91 8d 08 	lds	r24, 0x088D
    86c8:	80 93 25 08 	sts	0x0825, r24
    86cc:	90 93 26 08 	sts	0x0826, r25
    86d0:	8f ee       	ldi	r24, 0xEF	; 239
    86d2:	9f ee       	ldi	r25, 0xEF	; 239
    86d4:	6f ef       	ldi	r22, 0xFF	; 255
    86d6:	7f ef       	ldi	r23, 0xFF	; 255
    86d8:	40 e2       	ldi	r20, 0x20	; 32
    86da:	23 e2       	ldi	r18, 0x23	; 35
    86dc:	38 e0       	ldi	r19, 0x08	; 8
    86de:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    86e2:	df 91       	pop	r29
    86e4:	cf 91       	pop	r28
    86e6:	1f 91       	pop	r17
    86e8:	0f 91       	pop	r16
    86ea:	ff 90       	pop	r15
    86ec:	ef 90       	pop	r14
    86ee:	08 95       	ret
    86f0:	e0 91 79 05 	lds	r30, 0x0579
    86f4:	f0 91 7a 05 	lds	r31, 0x057A
    86f8:	bf 01       	movw	r22, r30
    86fa:	61 5d       	subi	r22, 0xD1	; 209
    86fc:	7f 4f       	sbci	r23, 0xFF	; 255
    86fe:	af 01       	movw	r20, r30
    8700:	40 5d       	subi	r20, 0xD0	; 208
    8702:	5f 4f       	sbci	r21, 0xFF	; 255
    8704:	97 a5       	ldd	r25, Z+47	; 0x2f
    8706:	80 e0       	ldi	r24, 0x00	; 0
    8708:	20 a9       	ldd	r18, Z+48	; 0x30
    870a:	82 0f       	add	r24, r18
    870c:	91 1d       	adc	r25, r1
    870e:	03 97       	sbiw	r24, 0x03	; 3
    8710:	a0 e0       	ldi	r26, 0x00	; 0
    8712:	b0 e0       	ldi	r27, 0x00	; 0
    8714:	8e 15       	cp	r24, r14
    8716:	9f 05       	cpc	r25, r15
    8718:	a0 07       	cpc	r26, r16
    871a:	b1 07       	cpc	r27, r17
    871c:	61 f6       	brne	.-104    	; 0x86b6 <reply_debugging_remove_avr_breakpoint+0x2e>
    871e:	21 e0       	ldi	r18, 0x01	; 1
    8720:	30 e0       	ldi	r19, 0x00	; 0
    8722:	1a c0       	rjmp	.+52     	; 0x8758 <reply_debugging_remove_avr_breakpoint+0xd0>
    8724:	e0 91 52 05 	lds	r30, 0x0552
    8728:	f0 91 53 05 	lds	r31, 0x0553
    872c:	bf 01       	movw	r22, r30
    872e:	61 5d       	subi	r22, 0xD1	; 209
    8730:	7f 4f       	sbci	r23, 0xFF	; 255
    8732:	af 01       	movw	r20, r30
    8734:	40 5d       	subi	r20, 0xD0	; 208
    8736:	5f 4f       	sbci	r21, 0xFF	; 255
    8738:	20 a9       	ldd	r18, Z+48	; 0x30
    873a:	97 a5       	ldd	r25, Z+47	; 0x2f
    873c:	80 e0       	ldi	r24, 0x00	; 0
    873e:	82 0f       	add	r24, r18
    8740:	91 1d       	adc	r25, r1
    8742:	03 97       	sbiw	r24, 0x03	; 3
    8744:	a0 e0       	ldi	r26, 0x00	; 0
    8746:	b0 e0       	ldi	r27, 0x00	; 0
    8748:	8e 15       	cp	r24, r14
    874a:	9f 05       	cpc	r25, r15
    874c:	a0 07       	cpc	r26, r16
    874e:	b1 07       	cpc	r27, r17
    8750:	09 f0       	breq	.+2      	; 0x8754 <reply_debugging_remove_avr_breakpoint+0xcc>
    8752:	ad cf       	rjmp	.-166    	; 0x86ae <reply_debugging_remove_avr_breakpoint+0x26>
    8754:	20 e0       	ldi	r18, 0x00	; 0
    8756:	30 e0       	ldi	r19, 0x00	; 0
    8758:	f9 01       	movw	r30, r18
    875a:	ee 0f       	add	r30, r30
    875c:	ff 1f       	adc	r31, r31
    875e:	ee 0f       	add	r30, r30
    8760:	ff 1f       	adc	r31, r31
    8762:	ee 0f       	add	r30, r30
    8764:	ff 1f       	adc	r31, r31
    8766:	cf 01       	movw	r24, r30
    8768:	88 0f       	add	r24, r24
    876a:	99 1f       	adc	r25, r25
    876c:	88 0f       	add	r24, r24
    876e:	99 1f       	adc	r25, r25
    8770:	e8 0f       	add	r30, r24
    8772:	f9 1f       	adc	r31, r25
    8774:	e2 1b       	sub	r30, r18
    8776:	f3 0b       	sbc	r31, r19
    8778:	ee 5a       	subi	r30, 0xAE	; 174
    877a:	fa 4f       	sbci	r31, 0xFA	; 250
    877c:	82 e0       	ldi	r24, 0x02	; 2
    877e:	82 83       	std	Z+2, r24	; 0x02
    8780:	bb 27       	eor	r27, r27
    8782:	a1 2f       	mov	r26, r17
    8784:	90 2f       	mov	r25, r16
    8786:	8f 2d       	mov	r24, r15
    8788:	fb 01       	movw	r30, r22
    878a:	80 83       	st	Z, r24
    878c:	fa 01       	movw	r30, r20
    878e:	e0 82       	st	Z, r14
    8790:	a8 01       	movw	r20, r16
    8792:	97 01       	movw	r18, r14
    8794:	22 0f       	add	r18, r18
    8796:	33 1f       	adc	r19, r19
    8798:	44 1f       	adc	r20, r20
    879a:	55 1f       	adc	r21, r21
    879c:	25 96       	adiw	r28, 0x05	; 5
    879e:	97 e0       	ldi	r25, 0x07	; 7
    87a0:	16 95       	lsr	r17
    87a2:	07 95       	ror	r16
    87a4:	f7 94       	ror	r15
    87a6:	e7 94       	ror	r14
    87a8:	9a 95       	dec	r25
    87aa:	d1 f7       	brne	.-12     	; 0x87a0 <reply_debugging_remove_avr_breakpoint+0x118>
    87ac:	c7 01       	movw	r24, r14
    87ae:	62 2f       	mov	r22, r18
    87b0:	ae 01       	movw	r20, r28
    87b2:	0e 94 c6 f2 	call	0x1e58c	; 0x1e58c <boot_removeBreakPoint>
    87b6:	91 e0       	ldi	r25, 0x01	; 1
    87b8:	7f cf       	rjmp	.-258    	; 0x86b8 <reply_debugging_remove_avr_breakpoint+0x30>

000087ba <reply_debugging_insert_avr_breakpoint>:
    87ba:	ef 92       	push	r14
    87bc:	ff 92       	push	r15
    87be:	0f 93       	push	r16
    87c0:	1f 93       	push	r17
    87c2:	df 93       	push	r29
    87c4:	cf 93       	push	r28
    87c6:	00 d0       	rcall	.+0      	; 0x87c8 <reply_debugging_insert_avr_breakpoint+0xe>
    87c8:	00 d0       	rcall	.+0      	; 0x87ca <reply_debugging_insert_avr_breakpoint+0x10>
    87ca:	00 d0       	rcall	.+0      	; 0x87cc <reply_debugging_insert_avr_breakpoint+0x12>
    87cc:	cd b7       	in	r28, 0x3d	; 61
    87ce:	de b7       	in	r29, 0x3e	; 62
    87d0:	8c 01       	movw	r16, r24
    87d2:	f8 01       	movw	r30, r16
    87d4:	93 81       	ldd	r25, Z+3	; 0x03
    87d6:	80 e0       	ldi	r24, 0x00	; 0
    87d8:	24 81       	ldd	r18, Z+4	; 0x04
    87da:	82 0f       	add	r24, r18
    87dc:	91 1d       	adc	r25, r1
    87de:	65 81       	ldd	r22, Z+5	; 0x05
    87e0:	7e 01       	movw	r14, r28
    87e2:	08 94       	sec
    87e4:	e1 1c       	adc	r14, r1
    87e6:	f1 1c       	adc	r15, r1
    87e8:	a7 01       	movw	r20, r14
    87ea:	0e 94 90 f4 	call	0x1e920	; 0x1e920 <boot_insertBreakPoint>
    87ee:	8c e0       	ldi	r24, 0x0C	; 12
    87f0:	80 93 23 08 	sts	0x0823, r24
    87f4:	8c e5       	ldi	r24, 0x5C	; 92
    87f6:	80 93 24 08 	sts	0x0824, r24
    87fa:	80 91 8d 08 	lds	r24, 0x088D
    87fe:	80 93 25 08 	sts	0x0825, r24
    8802:	f8 01       	movw	r30, r16
    8804:	83 81       	ldd	r24, Z+3	; 0x03
    8806:	80 93 26 08 	sts	0x0826, r24
    880a:	84 81       	ldd	r24, Z+4	; 0x04
    880c:	80 93 27 08 	sts	0x0827, r24
    8810:	85 81       	ldd	r24, Z+5	; 0x05
    8812:	80 93 28 08 	sts	0x0828, r24
    8816:	f7 01       	movw	r30, r14
    8818:	a9 e2       	ldi	r26, 0x29	; 41
    881a:	b8 e0       	ldi	r27, 0x08	; 8
    881c:	9e 01       	movw	r18, r28
    881e:	29 5f       	subi	r18, 0xF9	; 249
    8820:	3f 4f       	sbci	r19, 0xFF	; 255
    8822:	81 91       	ld	r24, Z+
    8824:	8d 93       	st	X+, r24
    8826:	e2 17       	cp	r30, r18
    8828:	f3 07       	cpc	r31, r19
    882a:	d9 f7       	brne	.-10     	; 0x8822 <reply_debugging_insert_avr_breakpoint+0x68>
    882c:	8f ee       	ldi	r24, 0xEF	; 239
    882e:	9f ee       	ldi	r25, 0xEF	; 239
    8830:	6f ef       	ldi	r22, 0xFF	; 255
    8832:	7f ef       	ldi	r23, 0xFF	; 255
    8834:	40 e2       	ldi	r20, 0x20	; 32
    8836:	23 e2       	ldi	r18, 0x23	; 35
    8838:	38 e0       	ldi	r19, 0x08	; 8
    883a:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    883e:	8f ee       	ldi	r24, 0xEF	; 239
    8840:	9f ee       	ldi	r25, 0xEF	; 239
    8842:	6f ef       	ldi	r22, 0xFF	; 255
    8844:	7f ef       	ldi	r23, 0xFF	; 255
    8846:	40 e2       	ldi	r20, 0x20	; 32
    8848:	23 e2       	ldi	r18, 0x23	; 35
    884a:	38 e0       	ldi	r19, 0x08	; 8
    884c:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    8850:	8f ee       	ldi	r24, 0xEF	; 239
    8852:	9f ee       	ldi	r25, 0xEF	; 239
    8854:	6f ef       	ldi	r22, 0xFF	; 255
    8856:	7f ef       	ldi	r23, 0xFF	; 255
    8858:	40 e2       	ldi	r20, 0x20	; 32
    885a:	23 e2       	ldi	r18, 0x23	; 35
    885c:	38 e0       	ldi	r19, 0x08	; 8
    885e:	0e 94 d0 44 	call	0x89a0	; 0x89a0 <StandardSocketSend>
    8862:	26 96       	adiw	r28, 0x06	; 6
    8864:	0f b6       	in	r0, 0x3f	; 63
    8866:	f8 94       	cli
    8868:	de bf       	out	0x3e, r29	; 62
    886a:	0f be       	out	0x3f, r0	; 63
    886c:	cd bf       	out	0x3d, r28	; 61
    886e:	cf 91       	pop	r28
    8870:	df 91       	pop	r29
    8872:	1f 91       	pop	r17
    8874:	0f 91       	pop	r16
    8876:	ff 90       	pop	r15
    8878:	ef 90       	pop	r14
    887a:	08 95       	ret

0000887c <commandHandle>:

//This is the stub function of the shell thread that is used to handle incoming packets 
void ShellThread()
{
    while (1)
    {
        if (IncomingLength > 0)
        {
            commandHandle(IncomingMsg, IncomingLength);
            IncomingLength = 0;
        }
        else
        {
            current_thread->state = STATE_SLEEP;
            thisthread = current_thread;
            thread_yield();
        }
    }
}

//-------------------------------------------------------------------------
void commandHandle(uint8_t * receivebuffer, uint8_t total)
{
    887c:	cf 93       	push	r28
    887e:	df 93       	push	r29
    8880:	ec 01       	movw	r28, r24
    uint8_t commandtype;

    if (!((receivebuffer[2] == 0) || (receivebuffer[2] == nodeid)))
    8882:	2a 81       	ldd	r18, Y+2	; 0x02
    8884:	22 23       	and	r18, r18
    8886:	59 f0       	breq	.+22     	; 0x889e <commandHandle+0x22>
    8888:	30 e0       	ldi	r19, 0x00	; 0
    888a:	80 91 8d 08 	lds	r24, 0x088D
    888e:	90 91 8e 08 	lds	r25, 0x088E
    8892:	28 17       	cp	r18, r24
    8894:	39 07       	cpc	r19, r25
    8896:	19 f0       	breq	.+6      	; 0x889e <commandHandle+0x22>
    {
        return;
    }
    commandtype = receivebuffer[1];
    switch (commandtype)
    {
        //reply_devicehandling handles the device driver issues 
    
    case 91:
        reply_debugging_print(receivebuffer);
        break;
#ifdef PLATFORM_AVR
    case 92:
        reply_debugging_insert_avr_breakpoint(receivebuffer);
        break;
    case 93:
        reply_debugging_remove_avr_breakpoint(receivebuffer);
        break;
#endif
    case 94:
        reply_thread_state_snapshot_tofile(receivebuffer);
        break;
    case 95:
        reply_thread_state_restore_fromfile(receivebuffer);
        break;
    case 96:
        reply_debugging_set(receivebuffer);
        break;
    case 101:
        reply_ls_networkname();
        break;
    case 102:
        reply_ls_nodename(receivebuffer);
        break;
    case 103:
        reply_ls_long(receivebuffer[3]);
        break;
    case 104:
        reply_ls_long(receivebuffer[3]);
        break;
    case 121:
        reply_cp_fromPCtoNode_type1(receivebuffer);
        break;
    case 122:
        reply_cp_fromPCtoNode_type2(receivebuffer);
        break;
    case 123:
        reply_cp_fromPCtoNode_type3();
        break;
    case 124:
        reply_fromNodeToPC_type1(receivebuffer);
        break;
    case 125:
        reply_fromNodeToPC_type2(receivebuffer);
        break;
    case 141:
        reply_mkdir(receivebuffer);
        break;
    case 151:
        reply_touch(receivebuffer);
        break;
    case 161:
        reply_rm(receivebuffer);
        break;
    case 171:
        reply_ps(receivebuffer);
        break;
    
    case 211:
        reply_du(receivebuffer);
        break;
    case 221:
        reply_search(receivebuffer);
        break;
    
    case 233:
        reply_formatSystem(receivebuffer);
        break;
    case 242:
        reply_nodeRestart(receivebuffer);
        break;
    }
}
    8898:	df 91       	pop	r29
    889a:	cf 91       	pop	r28
    889c:	08 95       	ret
    889e:	89 81       	ldd	r24, Y+1	; 0x01
    88a0:	90 e0       	ldi	r25, 0x00	; 0
    88a2:	fc 01       	movw	r30, r24
    88a4:	eb 55       	subi	r30, 0x5B	; 91
    88a6:	f0 40       	sbci	r31, 0x00	; 0
    88a8:	e8 39       	cpi	r30, 0x98	; 152
    88aa:	f1 05       	cpc	r31, r1
    88ac:	a8 f7       	brcc	.-22     	; 0x8898 <commandHandle+0x1c>
    88ae:	ea 5b       	subi	r30, 0xBA	; 186
    88b0:	ff 4f       	sbci	r31, 0xFF	; 255
    88b2:	ee 0f       	add	r30, r30
    88b4:	ff 1f       	adc	r31, r31
    88b6:	05 90       	lpm	r0, Z+
    88b8:	f4 91       	lpm	r31, Z
    88ba:	e0 2d       	mov	r30, r0
    88bc:	09 94       	ijmp
    88be:	8b 81       	ldd	r24, Y+3	; 0x03
    88c0:	0e 94 8a 41 	call	0x8314	; 0x8314 <reply_ls_long>
    88c4:	e9 cf       	rjmp	.-46     	; 0x8898 <commandHandle+0x1c>
    88c6:	ce 01       	movw	r24, r28
    88c8:	0e 94 d9 41 	call	0x83b2	; 0x83b2 <reply_ls_nodename>
    88cc:	e5 cf       	rjmp	.-54     	; 0x8898 <commandHandle+0x1c>
    88ce:	ce 01       	movw	r24, r28
    88d0:	0e 94 bc 40 	call	0x8178	; 0x8178 <reply_cp_fromPCtoNode_type1>
    88d4:	e1 cf       	rjmp	.-62     	; 0x8898 <commandHandle+0x1c>
    88d6:	ce 01       	movw	r24, r28
    88d8:	0e 94 3b 40 	call	0x8076	; 0x8076 <reply_cp_fromPCtoNode_type2>
    88dc:	dd cf       	rjmp	.-70     	; 0x8898 <commandHandle+0x1c>
    88de:	0e 94 4a 3e 	call	0x7c94	; 0x7c94 <reply_cp_fromPCtoNode_type3>
    88e2:	da cf       	rjmp	.-76     	; 0x8898 <commandHandle+0x1c>
    88e4:	ce 01       	movw	r24, r28
    88e6:	0e 94 e5 3e 	call	0x7dca	; 0x7dca <reply_fromNodeToPC_type1>
    88ea:	d6 cf       	rjmp	.-84     	; 0x8898 <commandHandle+0x1c>
    88ec:	ce 01       	movw	r24, r28
    88ee:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <reply_fromNodeToPC_type2>
    88f2:	d2 cf       	rjmp	.-92     	; 0x8898 <commandHandle+0x1c>
    88f4:	ce 01       	movw	r24, r28
    88f6:	0e 94 39 41 	call	0x8272	; 0x8272 <reply_mkdir>
    88fa:	ce cf       	rjmp	.-100    	; 0x8898 <commandHandle+0x1c>
    88fc:	ce 01       	movw	r24, r28
    88fe:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <reply_touch>
    8902:	ca cf       	rjmp	.-108    	; 0x8898 <commandHandle+0x1c>
    8904:	ce 01       	movw	r24, r28
    8906:	0e 94 92 3e 	call	0x7d24	; 0x7d24 <reply_rm>
    890a:	c6 cf       	rjmp	.-116    	; 0x8898 <commandHandle+0x1c>
    890c:	ce 01       	movw	r24, r28
    890e:	0e 94 83 3c 	call	0x7906	; 0x7906 <reply_ps>
    8912:	c2 cf       	rjmp	.-124    	; 0x8898 <commandHandle+0x1c>
    8914:	ce 01       	movw	r24, r28
    8916:	0e 94 77 3d 	call	0x7aee	; 0x7aee <reply_du>
    891a:	be cf       	rjmp	.-132    	; 0x8898 <commandHandle+0x1c>
    891c:	ce 01       	movw	r24, r28
    891e:	0e 94 18 3c 	call	0x7830	; 0x7830 <reply_search>
    8922:	ba cf       	rjmp	.-140    	; 0x8898 <commandHandle+0x1c>
    8924:	ce 01       	movw	r24, r28
    8926:	0e 94 13 3c 	call	0x7826	; 0x7826 <reply_formatSystem>
    892a:	b6 cf       	rjmp	.-148    	; 0x8898 <commandHandle+0x1c>
    892c:	0e 94 22 02 	call	0x444	; 0x444 <avr_resetNode>
    8930:	b3 cf       	rjmp	.-154    	; 0x8898 <commandHandle+0x1c>
    8932:	ce 01       	movw	r24, r28
    8934:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <reply_debugging_print>
    8938:	af cf       	rjmp	.-162    	; 0x8898 <commandHandle+0x1c>
    893a:	ce 01       	movw	r24, r28
    893c:	0e 94 dd 43 	call	0x87ba	; 0x87ba <reply_debugging_insert_avr_breakpoint>
    8940:	ab cf       	rjmp	.-170    	; 0x8898 <commandHandle+0x1c>
    8942:	ce 01       	movw	r24, r28
    8944:	0e 94 44 43 	call	0x8688	; 0x8688 <reply_debugging_remove_avr_breakpoint>
    8948:	a7 cf       	rjmp	.-178    	; 0x8898 <commandHandle+0x1c>
    894a:	ce 01       	movw	r24, r28
    894c:	0e 94 c4 42 	call	0x8588	; 0x8588 <reply_thread_state_snapshot_tofile>
    8950:	a3 cf       	rjmp	.-186    	; 0x8898 <commandHandle+0x1c>
    8952:	ce 01       	movw	r24, r28
    8954:	0e 94 41 42 	call	0x8482	; 0x8482 <reply_thread_state_restore_fromfile>
    8958:	9f cf       	rjmp	.-194    	; 0x8898 <commandHandle+0x1c>
    895a:	ce 01       	movw	r24, r28
    895c:	0e 94 01 3d 	call	0x7a02	; 0x7a02 <reply_debugging_set>
    8960:	9b cf       	rjmp	.-202    	; 0x8898 <commandHandle+0x1c>
    8962:	0e 94 0e 42 	call	0x841c	; 0x841c <reply_ls_networkname>
    8966:	98 cf       	rjmp	.-208    	; 0x8898 <commandHandle+0x1c>

00008968 <ShellThread>:
    8968:	1f 93       	push	r17
    896a:	15 e0       	ldi	r17, 0x05	; 5
    896c:	60 91 48 08 	lds	r22, 0x0848
    8970:	66 23       	and	r22, r22
    8972:	79 f4       	brne	.+30     	; 0x8992 <ShellThread+0x2a>
    8974:	e0 91 50 05 	lds	r30, 0x0550
    8978:	f0 91 51 05 	lds	r31, 0x0551
    897c:	12 83       	std	Z+2, r17	; 0x02
    897e:	f0 93 8c 08 	sts	0x088C, r31
    8982:	e0 93 8b 08 	sts	0x088B, r30
    8986:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <thread_yield>
    898a:	60 91 48 08 	lds	r22, 0x0848
    898e:	66 23       	and	r22, r22
    8990:	89 f3       	breq	.-30     	; 0x8974 <ShellThread+0xc>
    8992:	89 e4       	ldi	r24, 0x49	; 73
    8994:	98 e0       	ldi	r25, 0x08	; 8
    8996:	0e 94 3e 44 	call	0x887c	; 0x887c <commandHandle>
    899a:	10 92 48 08 	sts	0x0848, r1
    899e:	e6 cf       	rjmp	.-52     	; 0x896c <ShellThread+0x4>

000089a0 <StandardSocketSend>:

//-------------------------------------------------------------------------
void StandardSocketSend(uint16_t port, uint16_t address, uint8_t msglength,
                        uint8_t * msg)
{   
    89a0:	90 93 90 08 	sts	0x0890, r25
    89a4:	80 93 8f 08 	sts	0x088F, r24
//    #ifdef PLATFORM_AVR_IRIS
//     sleepThread(20);
//    #endif 

    radiosocketdata.socket_port = port;
    radiosocketdata.socket_addr = address;
    89a8:	70 93 92 08 	sts	0x0892, r23
    89ac:	60 93 91 08 	sts	0x0891, r22
    radiosocketdata.socket_msg_len = msglength;
    89b0:	40 93 93 08 	sts	0x0893, r20
    radiosocketdata.socket_msg = msg;
    89b4:	30 93 95 08 	sts	0x0895, r19
    89b8:	20 93 94 08 	sts	0x0894, r18
    postTask(send_task, 9);
    89bc:	8a ee       	ldi	r24, 0xEA	; 234
    89be:	94 e4       	ldi	r25, 0x44	; 68
    89c0:	69 e0       	ldi	r22, 0x09	; 9
    89c2:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    sleepThread(20);
    89c6:	84 e1       	ldi	r24, 0x14	; 20
    89c8:	90 e0       	ldi	r25, 0x00	; 0
    89ca:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <sleepThread>
    restoreRadioState();
    89ce:	0e 94 85 08 	call	0x110a	; 0x110a <restoreRadioState>
    return;
}
    89d2:	08 95       	ret

000089d4 <send_task>:
    89d4:	40 91 93 08 	lds	r20, 0x0893
    89d8:	44 23       	and	r20, r20
    89da:	99 f1       	breq	.+102    	; 0x8a42 <send_task+0x6e>
    89dc:	60 91 94 08 	lds	r22, 0x0894
    89e0:	70 91 95 08 	lds	r23, 0x0895
    89e4:	80 ea       	ldi	r24, 0xA0	; 160
    89e6:	98 e0       	ldi	r25, 0x08	; 8
    89e8:	0e 94 94 3a 	call	0x7528	; 0x7528 <mystrncpy>
    89ec:	60 91 91 08 	lds	r22, 0x0891
    89f0:	70 91 92 08 	lds	r23, 0x0892
    89f4:	61 15       	cp	r22, r1
    89f6:	71 05       	cpc	r23, r1
    89f8:	c9 f4       	brne	.+50     	; 0x8a2c <send_task+0x58>
    89fa:	80 91 93 08 	lds	r24, 0x0893
    89fe:	80 93 96 08 	sts	0x0896, r24
    8a02:	10 92 9d 08 	sts	0x089D, r1
    8a06:	10 92 9c 08 	sts	0x089C, r1
    8a0a:	80 91 8f 08 	lds	r24, 0x088F
    8a0e:	90 91 90 08 	lds	r25, 0x0890
    8a12:	90 93 9f 08 	sts	0x089F, r25
    8a16:	80 93 9e 08 	sts	0x089E, r24
    8a1a:	10 92 04 09 	sts	0x0904, r1
    8a1e:	10 92 05 09 	sts	0x0905, r1
    8a22:	66 e9       	ldi	r22, 0x96	; 150
    8a24:	78 e0       	ldi	r23, 0x08	; 8
    8a26:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <Standard_Receive_Packet>
    8a2a:	08 95       	ret
    8a2c:	80 91 8f 08 	lds	r24, 0x088F
    8a30:	90 91 90 08 	lds	r25, 0x0890
    8a34:	40 91 93 08 	lds	r20, 0x0893
    8a38:	26 e9       	ldi	r18, 0x96	; 150
    8a3a:	38 e0       	ldi	r19, 0x08	; 8
    8a3c:	0e 94 ba 08 	call	0x1174	; 0x1174 <AMStandard_SendMsg_send>
    8a40:	08 95       	ret
    8a42:	80 91 94 08 	lds	r24, 0x0894
    8a46:	90 91 95 08 	lds	r25, 0x0895
    8a4a:	0e 94 4d 3b 	call	0x769a	; 0x769a <mystrlen>
    8a4e:	48 2f       	mov	r20, r24
    8a50:	80 93 93 08 	sts	0x0893, r24
    8a54:	c3 cf       	rjmp	.-122    	; 0x89dc <send_task+0x8>

00008a56 <ADCAccY>:
}

//-------------------------------------------------------------------------
void ADCAccY()
{
    8a56:	0e 94 df 1b 	call	0x37be	; 0x37be <get_accy>
    int temp;

    temp = get_accy();
    current_thread->data.adcstate.adcreading = temp;
    8a5a:	e0 91 50 05 	lds	r30, 0x0550
    8a5e:	f0 91 51 05 	lds	r31, 0x0551
    8a62:	96 8f       	std	Z+30, r25	; 0x1e
    8a64:	85 8f       	std	Z+29, r24	; 0x1d
    return;
}
    8a66:	08 95       	ret

00008a68 <ADCAccX>:
    8a68:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <get_accx>
    8a6c:	e0 91 50 05 	lds	r30, 0x0550
    8a70:	f0 91 51 05 	lds	r31, 0x0551
    8a74:	96 8f       	std	Z+30, r25	; 0x1e
    8a76:	85 8f       	std	Z+29, r24	; 0x1d
    8a78:	08 95       	ret

00008a7a <ADCMagY>:
    8a7a:	0e 94 cd 1b 	call	0x379a	; 0x379a <get_magy>
    8a7e:	e0 91 50 05 	lds	r30, 0x0550
    8a82:	f0 91 51 05 	lds	r31, 0x0551
    8a86:	96 8f       	std	Z+30, r25	; 0x1e
    8a88:	85 8f       	std	Z+29, r24	; 0x1d
    8a8a:	08 95       	ret

00008a8c <ADCMagX>:
    8a8c:	0e 94 c4 1b 	call	0x3788	; 0x3788 <get_magx>
    8a90:	e0 91 50 05 	lds	r30, 0x0550
    8a94:	f0 91 51 05 	lds	r31, 0x0551
    8a98:	96 8f       	std	Z+30, r25	; 0x1e
    8a9a:	85 8f       	std	Z+29, r24	; 0x1d
    8a9c:	08 95       	ret

00008a9e <ADCTemp>:
    8a9e:	0e 94 b9 1b 	call	0x3772	; 0x3772 <get_temp>
    8aa2:	e0 91 50 05 	lds	r30, 0x0550
    8aa6:	f0 91 51 05 	lds	r31, 0x0551
    8aaa:	96 8f       	std	Z+30, r25	; 0x1e
    8aac:	85 8f       	std	Z+29, r24	; 0x1d
    8aae:	08 95       	ret

00008ab0 <ADCLight>:
    8ab0:	0e 94 ae 1b 	call	0x375c	; 0x375c <get_light>
    8ab4:	e0 91 50 05 	lds	r30, 0x0550
    8ab8:	f0 91 51 05 	lds	r31, 0x0551
    8abc:	96 8f       	std	Z+30, r25	; 0x1e
    8abe:	85 8f       	std	Z+29, r24	; 0x1d
    8ac0:	08 95       	ret

00008ac2 <getGenericStorageNodeAddress>:

static genericByteStorageTaskNode storageTask;

void *getGenericStorageNodeAddress()
{
    8ac2:	85 ea       	ldi	r24, 0xA5	; 165
    8ac4:	93 e0       	ldi	r25, 0x03	; 3
    8ac6:	08 95       	ret

00008ac8 <genericWriteTask>:
    return (void *)&storageTask;
}

//-------------------------------------------------------------------------
void genericReadTask()
{
    genericreadBytes(storageTask.addr, storageTask.nBytes, (void *)
                     storageTask.buffer);
}

//-------------------------------------------------------------------------
void genericWriteTask()
{
    8ac8:	60 91 a7 03 	lds	r22, 0x03A7
    8acc:	70 91 a8 03 	lds	r23, 0x03A8
    8ad0:	40 91 a9 03 	lds	r20, 0x03A9
    8ad4:	50 91 aa 03 	lds	r21, 0x03AA
    8ad8:	80 91 a5 03 	lds	r24, 0x03A5
    8adc:	90 91 a6 03 	lds	r25, 0x03A6
    8ae0:	0e 94 ed 1c 	call	0x39da	; 0x39da <genericwriteBytes>
    genericwriteBytes(storageTask.addr, storageTask.nBytes, (void *)
                      storageTask.buffer);
}
    8ae4:	08 95       	ret

00008ae6 <genericReadTask>:
    8ae6:	60 91 a7 03 	lds	r22, 0x03A7
    8aea:	70 91 a8 03 	lds	r23, 0x03A8
    8aee:	40 91 a9 03 	lds	r20, 0x03A9
    8af2:	50 91 aa 03 	lds	r21, 0x03AA
    8af6:	80 91 a5 03 	lds	r24, 0x03A5
    8afa:	90 91 a6 03 	lds	r25, 0x03A6
    8afe:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <genericreadBytes>
    8b02:	08 95       	ret

00008b04 <getFilePathAddress>:

//-------------------------------------------------------------------------
//Get the file path address
void *getFilePathAddress()
{
    8b04:	87 e1       	ldi	r24, 0x17	; 23
    8b06:	99 e0       	ldi	r25, 0x09	; 9
    8b08:	08 95       	ret

00008b0a <getFileModeAddress>:
    return (void *)filepathaddr;
}

//-------------------------------------------------------------------------
//Get the file mode address
void *getFileModeAddress()
{
    8b0a:	8e e0       	ldi	r24, 0x0E	; 14
    8b0c:	99 e0       	ldi	r25, 0x09	; 9
    8b0e:	08 95       	ret

00008b10 <seekFileTask>:
    return (void *)filemodeaddr;
}

//-------------------------------------------------------------------------
void openfile_task()
{
    MYFILE *temp = fopen2(filepathaddr, filemodeaddr);

    openthread->filedata.filestate.fileptr = (uint8_t *) temp;
    
	 barrier_unblock(7, 1);

     return;

}

//-------------------------------------------------------------------------
void openFileTask()
{
    openthread = current_thread;
    postTask(openfile_task, 5);
    return;
}

//-------------------------------------------------------------------------
void closefile_task()
{
    fclose2(filehandle);
	barrier_unblock(7, 2);
}

//-------------------------------------------------------------------------
void closeFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
    postTask(closefile_task, 5);
}

//-------------------------------------------------------------------------
void readfile_task()
{
    fread2(filehandle, databuffer, nBytes);
	barrier_unblock(7, 3);
}

//-------------------------------------------------------------------------
void readFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
    databuffer = current_thread->filedata.filestate.bufferptr;
    nBytes = current_thread->filedata.filestate.bytes;
    postTask(readfile_task, 5);
}

//-------------------------------------------------------------------------
void writefile_task()
{
    fwrite2(filehandle, databuffer, nBytes);
	barrier_unblock(7, 4);
     
}

//-------------------------------------------------------------------------
void writeFileTask()
{
    filehandle = (MYFILE *) current_thread->filedata.filestate.fileptr;
    databuffer = current_thread->filedata.filestate.bufferptr;
    nBytes = current_thread->filedata.filestate.bytes;
    postTask(writefile_task, 5);
}

//-------------------------------------------------------------------------
void seekFileTask()
{
    8b10:	e0 91 50 05 	lds	r30, 0x0550
    8b14:	f0 91 51 05 	lds	r31, 0x0551
    8b18:	a1 a1       	ldd	r26, Z+33	; 0x21
    8b1a:	b2 a1       	ldd	r27, Z+34	; 0x22
    8b1c:	a0 93 0c 09 	sts	0x090C, r26
    8b20:	b0 93 0d 09 	sts	0x090D, r27
    filehandle = (MYFILE *) current_thread->filedata.fileseekstate.fileptr;
    offset = current_thread->filedata.fileseekstate.offset;
    8b24:	43 a1       	ldd	r20, Z+35	; 0x23
    8b26:	54 a1       	ldd	r21, Z+36	; 0x24
    8b28:	50 93 2d 09 	sts	0x092D, r21
    8b2c:	40 93 2c 09 	sts	0x092C, r20
    position = current_thread->filedata.fileseekstate.position;
    8b30:	25 a1       	ldd	r18, Z+37	; 0x25
    8b32:	36 a1       	ldd	r19, Z+38	; 0x26
    8b34:	30 93 0b 09 	sts	0x090B, r19
    8b38:	20 93 0a 09 	sts	0x090A, r18
    fseek2(filehandle, (int32_t) offset, position);
    8b3c:	66 27       	eor	r22, r22
    8b3e:	57 fd       	sbrc	r21, 7
    8b40:	60 95       	com	r22
    8b42:	76 2f       	mov	r23, r22
    8b44:	cd 01       	movw	r24, r26
    8b46:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <fseek2>
    return;
}
    8b4a:	08 95       	ret

00008b4c <writeFileTask>:
    8b4c:	e0 91 50 05 	lds	r30, 0x0550
    8b50:	f0 91 51 05 	lds	r31, 0x0551
    8b54:	81 a1       	ldd	r24, Z+33	; 0x21
    8b56:	92 a1       	ldd	r25, Z+34	; 0x22
    8b58:	90 93 0d 09 	sts	0x090D, r25
    8b5c:	80 93 0c 09 	sts	0x090C, r24
    8b60:	83 a1       	ldd	r24, Z+35	; 0x23
    8b62:	94 a1       	ldd	r25, Z+36	; 0x24
    8b64:	90 93 2f 09 	sts	0x092F, r25
    8b68:	80 93 2e 09 	sts	0x092E, r24
    8b6c:	85 a1       	ldd	r24, Z+37	; 0x25
    8b6e:	96 a1       	ldd	r25, Z+38	; 0x26
    8b70:	90 93 14 09 	sts	0x0914, r25
    8b74:	80 93 13 09 	sts	0x0913, r24
    8b78:	8c ef       	ldi	r24, 0xFC	; 252
    8b7a:	95 e4       	ldi	r25, 0x45	; 69
    8b7c:	65 e0       	ldi	r22, 0x05	; 5
    8b7e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    8b82:	08 95       	ret

00008b84 <readFileTask>:
    8b84:	e0 91 50 05 	lds	r30, 0x0550
    8b88:	f0 91 51 05 	lds	r31, 0x0551
    8b8c:	81 a1       	ldd	r24, Z+33	; 0x21
    8b8e:	92 a1       	ldd	r25, Z+34	; 0x22
    8b90:	90 93 0d 09 	sts	0x090D, r25
    8b94:	80 93 0c 09 	sts	0x090C, r24
    8b98:	83 a1       	ldd	r24, Z+35	; 0x23
    8b9a:	94 a1       	ldd	r25, Z+36	; 0x24
    8b9c:	90 93 2f 09 	sts	0x092F, r25
    8ba0:	80 93 2e 09 	sts	0x092E, r24
    8ba4:	85 a1       	ldd	r24, Z+37	; 0x25
    8ba6:	96 a1       	ldd	r25, Z+38	; 0x26
    8ba8:	90 93 14 09 	sts	0x0914, r25
    8bac:	80 93 13 09 	sts	0x0913, r24
    8bb0:	8f e0       	ldi	r24, 0x0F	; 15
    8bb2:	96 e4       	ldi	r25, 0x46	; 70
    8bb4:	65 e0       	ldi	r22, 0x05	; 5
    8bb6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    8bba:	08 95       	ret

00008bbc <closeFileTask>:
    8bbc:	e0 91 50 05 	lds	r30, 0x0550
    8bc0:	f0 91 51 05 	lds	r31, 0x0551
    8bc4:	81 a1       	ldd	r24, Z+33	; 0x21
    8bc6:	92 a1       	ldd	r25, Z+34	; 0x22
    8bc8:	90 93 0d 09 	sts	0x090D, r25
    8bcc:	80 93 0c 09 	sts	0x090C, r24
    8bd0:	82 e2       	ldi	r24, 0x22	; 34
    8bd2:	96 e4       	ldi	r25, 0x46	; 70
    8bd4:	65 e0       	ldi	r22, 0x05	; 5
    8bd6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    8bda:	08 95       	ret

00008bdc <openFileTask>:
    8bdc:	80 91 50 05 	lds	r24, 0x0550
    8be0:	90 91 51 05 	lds	r25, 0x0551
    8be4:	90 93 16 09 	sts	0x0916, r25
    8be8:	80 93 15 09 	sts	0x0915, r24
    8bec:	8d e2       	ldi	r24, 0x2D	; 45
    8bee:	96 e4       	ldi	r25, 0x46	; 70
    8bf0:	65 e0       	ldi	r22, 0x05	; 5
    8bf2:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    8bf6:	08 95       	ret

00008bf8 <writefile_task>:
    8bf8:	60 91 2e 09 	lds	r22, 0x092E
    8bfc:	70 91 2f 09 	lds	r23, 0x092F
    8c00:	40 91 13 09 	lds	r20, 0x0913
    8c04:	50 91 14 09 	lds	r21, 0x0914
    8c08:	80 91 0c 09 	lds	r24, 0x090C
    8c0c:	90 91 0d 09 	lds	r25, 0x090D
    8c10:	0e 94 18 22 	call	0x4430	; 0x4430 <fwrite2>
    8c14:	87 e0       	ldi	r24, 0x07	; 7
    8c16:	64 e0       	ldi	r22, 0x04	; 4
    8c18:	0e 94 42 1b 	call	0x3684	; 0x3684 <barrier_unblock>
    8c1c:	08 95       	ret

00008c1e <readfile_task>:
    8c1e:	60 91 2e 09 	lds	r22, 0x092E
    8c22:	70 91 2f 09 	lds	r23, 0x092F
    8c26:	40 91 13 09 	lds	r20, 0x0913
    8c2a:	50 91 14 09 	lds	r21, 0x0914
    8c2e:	80 91 0c 09 	lds	r24, 0x090C
    8c32:	90 91 0d 09 	lds	r25, 0x090D
    8c36:	0e 94 57 23 	call	0x46ae	; 0x46ae <fread2>
    8c3a:	87 e0       	ldi	r24, 0x07	; 7
    8c3c:	63 e0       	ldi	r22, 0x03	; 3
    8c3e:	0e 94 42 1b 	call	0x3684	; 0x3684 <barrier_unblock>
    8c42:	08 95       	ret

00008c44 <closefile_task>:
    8c44:	80 91 0c 09 	lds	r24, 0x090C
    8c48:	90 91 0d 09 	lds	r25, 0x090D
    8c4c:	0e 94 c6 24 	call	0x498c	; 0x498c <fclose2>
    8c50:	87 e0       	ldi	r24, 0x07	; 7
    8c52:	62 e0       	ldi	r22, 0x02	; 2
    8c54:	0e 94 42 1b 	call	0x3684	; 0x3684 <barrier_unblock>
    8c58:	08 95       	ret

00008c5a <openfile_task>:
    8c5a:	87 e1       	ldi	r24, 0x17	; 23
    8c5c:	99 e0       	ldi	r25, 0x09	; 9
    8c5e:	6e e0       	ldi	r22, 0x0E	; 14
    8c60:	79 e0       	ldi	r23, 0x09	; 9
    8c62:	0e 94 cc 24 	call	0x4998	; 0x4998 <fopen2>
    8c66:	e0 91 15 09 	lds	r30, 0x0915
    8c6a:	f0 91 16 09 	lds	r31, 0x0916
    8c6e:	92 a3       	std	Z+34, r25	; 0x22
    8c70:	81 a3       	std	Z+33, r24	; 0x21
    8c72:	87 e0       	ldi	r24, 0x07	; 7
    8c74:	61 e0       	ldi	r22, 0x01	; 1
    8c76:	0e 94 42 1b 	call	0x3684	; 0x3684 <barrier_unblock>
    8c7a:	08 95       	ret

00008c7c <getRadioSendingBufferAddr>:


//void getRadioInfo()  __attribute__((naked));
void *getRadioSendingBufferAddr()
{
    8c7c:	8f e8       	ldi	r24, 0x8F	; 143
    8c7e:	98 e0       	ldi	r25, 0x08	; 8
    8c80:	08 95       	ret

00008c82 <getRadioReceivingBufferAddr>:
    return (void *)&radiosocketdata;
    //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
    // asm volatile("ret"::); 
}

 
 
 //void getRadioInfo()  __attribute__((naked));
void *getRadioReceivingBufferAddr()
{
    8c82:	80 e3       	ldi	r24, 0x30	; 48
    8c84:	99 e0       	ldi	r25, 0x09	; 9
    8c86:	08 95       	ret

00008c88 <registerReceiverHandle_syscall>:
    return (void *)&radio_buf;
    //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
    // asm volatile("ret"::); 
}
 
 
 
//system call interface for registering an event 
void registerReceiverHandle_syscall()
{
    8c88:	ef 92       	push	r14
    8c8a:	ff 92       	push	r15
    8c8c:	0f 93       	push	r16
    8c8e:	1f 93       	push	r17
    registerEvent(radio_buf.port, radio_buf.maxLength, radio_buf.dataReady,
    8c90:	40 91 33 09 	lds	r20, 0x0933
    8c94:	50 91 34 09 	lds	r21, 0x0934
    8c98:	20 91 35 09 	lds	r18, 0x0935
    8c9c:	30 91 36 09 	lds	r19, 0x0936
    8ca0:	00 91 37 09 	lds	r16, 0x0937
    8ca4:	10 91 38 09 	lds	r17, 0x0938
    8ca8:	e0 90 3a 09 	lds	r14, 0x093A
    8cac:	f0 90 3b 09 	lds	r15, 0x093B
    8cb0:	80 91 30 09 	lds	r24, 0x0930
    8cb4:	90 91 31 09 	lds	r25, 0x0931
    8cb8:	60 91 32 09 	lds	r22, 0x0932
    8cbc:	0e 94 67 09 	call	0x12ce	; 0x12ce <registerEvent>
                  radio_buf.data, radio_buf.packetinfo,
                  radio_buf.handlefunc);
}
    8cc0:	1f 91       	pop	r17
    8cc2:	0f 91       	pop	r16
    8cc4:	ff 90       	pop	r15
    8cc6:	ef 90       	pop	r14
    8cc8:	08 95       	ret

00008cca <SocketRadioSend>:
    8cca:	8a ee       	ldi	r24, 0xEA	; 234
    8ccc:	94 e4       	ldi	r25, 0x44	; 68
    8cce:	69 e0       	ldi	r22, 0x09	; 9
    8cd0:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
    8cd4:	08 95       	ret

00008cd6 <setRadioPowerTask>:
    8cd6:	df 93       	push	r29
    8cd8:	cf 93       	push	r28
    8cda:	00 d0       	rcall	.+0      	; 0x8cdc <setRadioPowerTask+0x6>
    8cdc:	cd b7       	in	r28, 0x3d	; 61
    8cde:	de b7       	in	r29, 0x3e	; 62
    8ce0:	84 2f       	mov	r24, r20
    8ce2:	95 2f       	mov	r25, r21
    8ce4:	9a 83       	std	Y+2, r25	; 0x02
    8ce6:	89 83       	std	Y+1, r24	; 0x01
    8ce8:	89 81       	ldd	r24, Y+1	; 0x01
    8cea:	9a 81       	ldd	r25, Y+2	; 0x02
    8cec:	0e 94 22 0b 	call	0x1644	; 0x1644 <cc2420controlm_CC2420Control_TunePower>
    8cf0:	0f 90       	pop	r0
    8cf2:	0f 90       	pop	r0
    8cf4:	cf 91       	pop	r28
    8cf6:	df 91       	pop	r29
    8cf8:	08 95       	ret

00008cfa <setRadioChannelTask>:
    8cfa:	df 93       	push	r29
    8cfc:	cf 93       	push	r28
    8cfe:	00 d0       	rcall	.+0      	; 0x8d00 <setRadioChannelTask+0x6>
    8d00:	cd b7       	in	r28, 0x3d	; 61
    8d02:	de b7       	in	r29, 0x3e	; 62
    8d04:	84 2f       	mov	r24, r20
    8d06:	95 2f       	mov	r25, r21
    8d08:	9a 83       	std	Y+2, r25	; 0x02
    8d0a:	89 83       	std	Y+1, r24	; 0x01
    8d0c:	89 81       	ldd	r24, Y+1	; 0x01
    8d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    8d10:	0e 94 82 0b 	call	0x1704	; 0x1704 <cc2420controlm_CC2420Control_TuneChannel>
    8d14:	0f 90       	pop	r0
    8d16:	0f 90       	pop	r0
    8d18:	cf 91       	pop	r28
    8d1a:	df 91       	pop	r29
    8d1c:	08 95       	ret

00008d1e <setRadioFrequencyTask>:
    8d1e:	df 93       	push	r29
    8d20:	cf 93       	push	r28
    8d22:	00 d0       	rcall	.+0      	; 0x8d24 <setRadioFrequencyTask+0x6>
    8d24:	cd b7       	in	r28, 0x3d	; 61
    8d26:	de b7       	in	r29, 0x3e	; 62
    8d28:	84 2f       	mov	r24, r20
    8d2a:	95 2f       	mov	r25, r21
    8d2c:	9a 83       	std	Y+2, r25	; 0x02
    8d2e:	89 83       	std	Y+1, r24	; 0x01
    8d30:	89 81       	ldd	r24, Y+1	; 0x01
    8d32:	9a 81       	ldd	r25, Y+2	; 0x02
    8d34:	0e 94 3e 0b 	call	0x167c	; 0x167c <cc2420controlm_CC2420Control_TuneManual>
    8d38:	0f 90       	pop	r0
    8d3a:	0f 90       	pop	r0
    8d3c:	cf 91       	pop	r28
    8d3e:	df 91       	pop	r29
    8d40:	08 95       	ret

00008d42 <getNodeIdTask>:
//-----------------------------------------------------------------------------

//-------------------------------------------------------------------------
void getNodeIdTask()
{
    8d42:	df 93       	push	r29
    8d44:	cf 93       	push	r28
    8d46:	00 d0       	rcall	.+0      	; 0x8d48 <getNodeIdTask+0x6>
    8d48:	cd b7       	in	r28, 0x3d	; 61
    8d4a:	de b7       	in	r29, 0x3e	; 62
    uint16_t nodeid;

    nodeid = node_readnodeid();
    8d4c:	0e 94 04 02 	call	0x408	; 0x408 <node_readnodeid>
    8d50:	9a 83       	std	Y+2, r25	; 0x02
    8d52:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (nodeid));
    8d54:	89 81       	ldd	r24, Y+1	; 0x01
    8d56:	9a 81       	ldd	r25, Y+2	; 0x02
    8d58:	48 2f       	mov	r20, r24
    8d5a:	59 2f       	mov	r21, r25
}
    8d5c:	0f 90       	pop	r0
    8d5e:	0f 90       	pop	r0
    8d60:	cf 91       	pop	r28
    8d62:	df 91       	pop	r29
    8d64:	08 95       	ret

00008d66 <getNodeIdTask_Logger>:

//-------------------------------------------------------------------------

void getNodeIdTask_Logger()
{
    8d66:	df 93       	push	r29
    8d68:	cf 93       	push	r28
    8d6a:	00 d0       	rcall	.+0      	; 0x8d6c <getNodeIdTask_Logger+0x6>
    8d6c:	cd b7       	in	r28, 0x3d	; 61
    8d6e:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8d70:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    8d74:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    8d76:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    8d7a:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    8d7c:	89 81       	ldd	r24, Y+1	; 0x01
    8d7e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETNODEID, currentindex);
    8d82:	85 e6       	ldi	r24, 0x65	; 101
    8d84:	90 e0       	ldi	r25, 0x00	; 0
    8d86:	6a 81       	ldd	r22, Y+2	; 0x02
    8d88:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    getNodeIdTask();
    8d8c:	0e 94 a1 46 	call	0x8d42	; 0x8d42 <getNodeIdTask>
}
    8d90:	0f 90       	pop	r0
    8d92:	0f 90       	pop	r0
    8d94:	cf 91       	pop	r28
    8d96:	df 91       	pop	r29
    8d98:	08 95       	ret

00008d9a <setNodeIdTask>:

//-------------------------------------------------------------------------
void getNodeID() __attribute__ ((section(".systemcall.1")))
    __attribute__ ((naked));
void getNodeID()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETNODEID
    getNodeIdTask_Logger();
#endif
#else
    getNodeIdTask();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void setNodeIdTask()
{
    8d9a:	df 93       	push	r29
    8d9c:	cf 93       	push	r28
    8d9e:	00 d0       	rcall	.+0      	; 0x8da0 <setNodeIdTask+0x6>
    8da0:	cd b7       	in	r28, 0x3d	; 61
    8da2:	de b7       	in	r29, 0x3e	; 62
    uint16_t nodeid;
    asm volatile ("mov %A0, r20" "\n\t" "mov %B0, r21" "\n\t":"=r" (nodeid):);
    8da4:	84 2f       	mov	r24, r20
    8da6:	95 2f       	mov	r25, r21
    8da8:	9a 83       	std	Y+2, r25	; 0x02
    8daa:	89 83       	std	Y+1, r24	; 0x01

    node_writenodeid(nodeid);
    8dac:	89 81       	ldd	r24, Y+1	; 0x01
    8dae:	9a 81       	ldd	r25, Y+2	; 0x02
    8db0:	0e 94 09 02 	call	0x412	; 0x412 <node_writenodeid>
}
    8db4:	0f 90       	pop	r0
    8db6:	0f 90       	pop	r0
    8db8:	cf 91       	pop	r28
    8dba:	df 91       	pop	r29
    8dbc:	08 95       	ret

00008dbe <setNodeIdTask_Logger>:

//-------------------------------------------------------------------------
void setNodeIdTask_Logger()
{
    8dbe:	df 93       	push	r29
    8dc0:	cf 93       	push	r28
    8dc2:	00 d0       	rcall	.+0      	; 0x8dc4 <setNodeIdTask_Logger+0x6>
    8dc4:	cd b7       	in	r28, 0x3d	; 61
    8dc6:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8dc8:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    8dcc:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    8dce:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    8dd2:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    8dd4:	89 81       	ldd	r24, Y+1	; 0x01
    8dd6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETNODEID, currentindex);
    8dda:	86 e6       	ldi	r24, 0x66	; 102
    8ddc:	90 e0       	ldi	r25, 0x00	; 0
    8dde:	6a 81       	ldd	r22, Y+2	; 0x02
    8de0:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    setNodeIdTask();
    8de4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <setNodeIdTask>
}
    8de8:	0f 90       	pop	r0
    8dea:	0f 90       	pop	r0
    8dec:	cf 91       	pop	r28
    8dee:	df 91       	pop	r29
    8df0:	08 95       	ret

00008df2 <getRandomTask>:

//-------------------------------------------------------------------------
void setNodeID() __attribute__ ((section(".systemcall.1")))
    __attribute__ ((naked));
void setNodeID()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETNODEID
    setNodeIdTask_Logger();
#endif
#else
    setNodeIdTask();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}



//-------------------------------------------------------------------------
void getRandomTask()
{
    8df2:	df 93       	push	r29
    8df4:	cf 93       	push	r28
    8df6:	00 d0       	rcall	.+0      	; 0x8df8 <getRandomTask+0x6>
    8df8:	cd b7       	in	r28, 0x3d	; 61
    8dfa:	de b7       	in	r29, 0x3e	; 62
    uint16_t num;

    num = getRandomNumber();
    8dfc:	0e 94 e1 3b 	call	0x77c2	; 0x77c2 <getRandomNumber>
    8e00:	9a 83       	std	Y+2, r25	; 0x02
    8e02:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (num));
    8e04:	89 81       	ldd	r24, Y+1	; 0x01
    8e06:	9a 81       	ldd	r25, Y+2	; 0x02
    8e08:	48 2f       	mov	r20, r24
    8e0a:	59 2f       	mov	r21, r25
}
    8e0c:	0f 90       	pop	r0
    8e0e:	0f 90       	pop	r0
    8e10:	cf 91       	pop	r28
    8e12:	df 91       	pop	r29
    8e14:	08 95       	ret

00008e16 <getRandomTask_Logger>:

//-------------------------------------------------------------------------

void getRandomTask_Logger()
{
    8e16:	df 93       	push	r29
    8e18:	cf 93       	push	r28
    8e1a:	00 d0       	rcall	.+0      	; 0x8e1c <getRandomTask_Logger+0x6>
    8e1c:	cd b7       	in	r28, 0x3d	; 61
    8e1e:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8e20:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    8e24:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    8e26:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    8e2a:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    8e2c:	89 81       	ldd	r24, Y+1	; 0x01
    8e2e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETRANDOMNUMBER, currentindex);
    8e32:	87 e6       	ldi	r24, 0x67	; 103
    8e34:	90 e0       	ldi	r25, 0x00	; 0
    8e36:	6a 81       	ldd	r22, Y+2	; 0x02
    8e38:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    getRandomTask();
    8e3c:	0e 94 f9 46 	call	0x8df2	; 0x8df2 <getRandomTask>
}
    8e40:	0f 90       	pop	r0
    8e42:	0f 90       	pop	r0
    8e44:	cf 91       	pop	r28
    8e46:	df 91       	pop	r29
    8e48:	08 95       	ret

00008e4a <getCurrentThreadAddress_avr>:

//-------------------------------------------------------------------------

/**\ingroup syscall 
Get a random number from the kernel.
*/
void getRandomNumberSyscall() __attribute__ ((section(".systemcall.1")))
    __attribute__ ((naked));
void getRandomNumberSyscall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETRANDOMNUMBER
    getRandomTask_Logger();
#endif
#else
    getRandomTask();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}



//----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//Boundary EA80: thread
//Thread operations
//-----------------------------------------------------------------------------



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//Get the address of the currentthread pointer. Its address, not content. 

//-------------------------------------------------------------------------
void getCurrentThreadAddress_avr()
{
    8e4a:	df 93       	push	r29
    8e4c:	cf 93       	push	r28
    8e4e:	00 d0       	rcall	.+0      	; 0x8e50 <getCurrentThreadAddress_avr+0x6>
    8e50:	cd b7       	in	r28, 0x3d	; 61
    8e52:	de b7       	in	r29, 0x3e	; 62
    thread **returnthreadaddr;

    returnthreadaddr = getCurrentThreadAddress();
    8e54:	0e 94 1e 4c 	call	0x983c	; 0x983c <getCurrentThreadAddress>
    8e58:	9a 83       	std	Y+2, r25	; 0x02
    8e5a:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    8e5c:	89 81       	ldd	r24, Y+1	; 0x01
    8e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    8e60:	48 2f       	mov	r20, r24
    8e62:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (returnthreadaddr));
}
    8e64:	0f 90       	pop	r0
    8e66:	0f 90       	pop	r0
    8e68:	cf 91       	pop	r28
    8e6a:	df 91       	pop	r29
    8e6c:	08 95       	ret

00008e6e <getCurrentThreadAddress_Logger>:

//-------------------------------------------------------------------------
void getCurrentThreadAddress_Logger()
{
    8e6e:	df 93       	push	r29
    8e70:	cf 93       	push	r28
    8e72:	00 d0       	rcall	.+0      	; 0x8e74 <getCurrentThreadAddress_Logger+0x6>
    8e74:	cd b7       	in	r28, 0x3d	; 61
    8e76:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8e78:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    8e7c:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    8e7e:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    8e82:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    8e84:	89 81       	ldd	r24, Y+1	; 0x01
    8e86:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTTHREADADDRESS, currentindex);
    8e8a:	89 ec       	ldi	r24, 0xC9	; 201
    8e8c:	90 e0       	ldi	r25, 0x00	; 0
    8e8e:	6a 81       	ldd	r22, Y+2	; 0x02
    8e90:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    getCurrentThreadAddress_avr();
    8e94:	0e 94 25 47 	call	0x8e4a	; 0x8e4a <getCurrentThreadAddress_avr>
}
    8e98:	0f 90       	pop	r0
    8e9a:	0f 90       	pop	r0
    8e9c:	cf 91       	pop	r28
    8e9e:	df 91       	pop	r29
    8ea0:	08 95       	ret

00008ea2 <getThreadIndexAddress_avr>:



void getCurrentThreadAddressSyscall() __attribute__ ((section(".systemcall.2")))
    __attribute__ ((naked));
void getCurrentThreadAddressSyscall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTTHREADADDRESS
    getCurrentThreadAddress_Logger();
#endif
#else
    getCurrentThreadAddress_avr();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////


//-------------------------------------------------------------------------
void getThreadIndexAddress_avr()
{
    8ea2:	df 93       	push	r29
    8ea4:	cf 93       	push	r28
    8ea6:	00 d0       	rcall	.+0      	; 0x8ea8 <getThreadIndexAddress_avr+0x6>
    8ea8:	cd b7       	in	r28, 0x3d	; 61
    8eaa:	de b7       	in	r29, 0x3e	; 62
    int index;

    index = getThreadIndexAddress();
    8eac:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    8eb0:	9a 83       	std	Y+2, r25	; 0x02
    8eb2:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (index));
    8eb4:	89 81       	ldd	r24, Y+1	; 0x01
    8eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    8eb8:	48 2f       	mov	r20, r24
    8eba:	59 2f       	mov	r21, r25
}
    8ebc:	0f 90       	pop	r0
    8ebe:	0f 90       	pop	r0
    8ec0:	cf 91       	pop	r28
    8ec2:	df 91       	pop	r29
    8ec4:	08 95       	ret

00008ec6 <getThreadIndexAddress_Logger>:

//-------------------------------------------------------------------------
void getThreadIndexAddress_Logger()
{
    8ec6:	df 93       	push	r29
    8ec8:	cf 93       	push	r28
    8eca:	00 d0       	rcall	.+0      	; 0x8ecc <getThreadIndexAddress_Logger+0x6>
    8ecc:	cd b7       	in	r28, 0x3d	; 61
    8ece:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8ed0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    8ed4:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    8ed6:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    8eda:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    8edc:	89 81       	ldd	r24, Y+1	; 0x01
    8ede:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTTHREADINDEX, currentindex);
    8ee2:	8a ec       	ldi	r24, 0xCA	; 202
    8ee4:	90 e0       	ldi	r25, 0x00	; 0
    8ee6:	6a 81       	ldd	r22, Y+2	; 0x02
    8ee8:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    getThreadIndexAddress_avr();
    8eec:	0e 94 51 47 	call	0x8ea2	; 0x8ea2 <getThreadIndexAddress_avr>
}
    8ef0:	0f 90       	pop	r0
    8ef2:	0f 90       	pop	r0
    8ef4:	cf 91       	pop	r28
    8ef6:	df 91       	pop	r29
    8ef8:	08 95       	ret

00008efa <getThreadTableStart_avr>:

/**\ingroup syscall
Get the index number of the current thread in the thread table. 
This function is going to put the address into two registers, R24 and R25.
*/
void getCurrentThreadIndex() __attribute__ ((section(".systemcall.2")))
    __attribute__ ((naked));
void getCurrentThreadIndex()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTTHREADINDEX
    getThreadIndexAddress_Logger();
#endif
#else
    getThreadIndexAddress_avr();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}



//-------------------------------------------------------------------------
void getThreadTableStart_avr()
{
    8efa:	df 93       	push	r29
    8efc:	cf 93       	push	r28
    8efe:	00 d0       	rcall	.+0      	; 0x8f00 <getThreadTableStart_avr+0x6>
    8f00:	cd b7       	in	r28, 0x3d	; 61
    8f02:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getThreadTableStart();
    8f04:	0e 94 21 4c 	call	0x9842	; 0x9842 <getThreadTableStart>
    8f08:	9a 83       	std	Y+2, r25	; 0x02
    8f0a:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    8f0c:	89 81       	ldd	r24, Y+1	; 0x01
    8f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    8f10:	48 2f       	mov	r20, r24
    8f12:	59 2f       	mov	r21, r25
}
    8f14:	0f 90       	pop	r0
    8f16:	0f 90       	pop	r0
    8f18:	cf 91       	pop	r28
    8f1a:	df 91       	pop	r29
    8f1c:	08 95       	ret

00008f1e <getThreadTableStart_Logger>:


 
//-------------------------------------------------------------------------
void getThreadTableStart_Logger()
{
    8f1e:	df 93       	push	r29
    8f20:	cf 93       	push	r28
    8f22:	00 d0       	rcall	.+0      	; 0x8f24 <getThreadTableStart_Logger+0x6>
    8f24:	cd b7       	in	r28, 0x3d	; 61
    8f26:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8f28:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    8f2c:	89 83       	std	Y+1, r24	; 0x01
    currentindex = getThreadIndexAddress();
    8f2e:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    8f32:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    8f34:	89 81       	ldd	r24, Y+1	; 0x01
    8f36:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETTHREADTABLESTART, currentindex);
    8f3a:	8f ec       	ldi	r24, 0xCF	; 207
    8f3c:	90 e0       	ldi	r25, 0x00	; 0
    8f3e:	6a 81       	ldd	r22, Y+2	; 0x02
    8f40:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    getThreadTableStart_avr();
    8f44:	0e 94 7d 47 	call	0x8efa	; 0x8efa <getThreadTableStart_avr>
}
    8f48:	0f 90       	pop	r0
    8f4a:	0f 90       	pop	r0
    8f4c:	cf 91       	pop	r28
    8f4e:	df 91       	pop	r29
    8f50:	08 95       	ret

00008f52 <thread_yield_logger>:

/**\ingroup syscall 
*/
void getThreadTableStartSyscall() __attribute__ ((section(".systemcall.2")))
    __attribute__ ((naked));
void getThreadTableStartSyscall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_SYSCALL_ENABLE_GETTHREADTABLESTART
    getThreadTableStart_Logger();
#endif
#else
    getThreadTableStart_avr();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void thread_yield_logger()
{
    8f52:	df 93       	push	r29
    8f54:	cf 93       	push	r28
    8f56:	00 d0       	rcall	.+0      	; 0x8f58 <thread_yield_logger+0x6>
    8f58:	cd b7       	in	r28, 0x3d	; 61
    8f5a:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8f5c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    8f60:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    8f62:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    8f66:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    8f68:	89 81       	ldd	r24, Y+1	; 0x01
    8f6a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_YIELDFUNCTION, currentindex);
    8f6e:	8c ec       	ldi	r24, 0xCC	; 204
    8f70:	90 e0       	ldi	r25, 0x00	; 0
    8f72:	6a 81       	ldd	r22, Y+2	; 0x02
    8f74:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    thread_yield();
    8f78:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <thread_yield>
}
    8f7c:	0f 90       	pop	r0
    8f7e:	0f 90       	pop	r0
    8f80:	cf 91       	pop	r28
    8f82:	df 91       	pop	r29
    8f84:	08 95       	ret

00008f86 <postNewThreadTask_Logger>:

/**\ingroup syscall 
Yield current thread.
*/
void yieldfunction() __attribute__ ((section(".systemcall.2")))
    __attribute__ ((naked));
void yieldfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YIELDFUNCTION
    thread_yield_logger();
#endif
#else
    thread_yield();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}


//-------------------------------------------------------------------------
void postNewThreadTask_Logger()
{
    8f86:	df 93       	push	r29
    8f88:	cf 93       	push	r28
    8f8a:	00 d0       	rcall	.+0      	; 0x8f8c <postNewThreadTask_Logger+0x6>
    8f8c:	cd b7       	in	r28, 0x3d	; 61
    8f8e:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8f90:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    8f94:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    8f96:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    8f9a:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    8f9c:	89 81       	ldd	r24, Y+1	; 0x01
    8f9e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_POSTTHREADTASK, currentindex);
    8fa2:	8d ec       	ldi	r24, 0xCD	; 205
    8fa4:	90 e0       	ldi	r25, 0x00	; 0
    8fa6:	6a 81       	ldd	r22, Y+2	; 0x02
    8fa8:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    postNewThreadTask();
    8fac:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <postNewThreadTask>
}
    8fb0:	0f 90       	pop	r0
    8fb2:	0f 90       	pop	r0
    8fb4:	cf 91       	pop	r28
    8fb6:	df 91       	pop	r29
    8fb8:	08 95       	ret

00008fba <postNewTask_avr>:

/**\ingroup syscall 
Trigger the thread scheduling task. 
*/
void postThreadTask() __attribute__ ((section(".systemcall.2")))
    __attribute__ ((naked));
void postThreadTask()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_POSTTHREADTASK
    postNewThreadTask_Logger();
#endif
#else
    postNewThreadTask();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}






 

/**\ingroup syscall 
Trigger the thread scheduling task. 
*/
void postThreadTaskNoLog() __attribute__ ((section(".systemcall.2")))
    __attribute__ ((naked));
void postThreadTaskNoLog()
{

    postNewThreadTask();

    asm volatile ("nop"::);
    asm volatile ("ret"::);
}
 


//-----------------------------------------------------------------------------
//Boundary EB00: task
//Task operations
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------
void postNewTask_avr()
{
    8fba:	df 93       	push	r29
    8fbc:	cf 93       	push	r28
    8fbe:	00 d0       	rcall	.+0      	; 0x8fc0 <postNewTask_avr+0x6>
    8fc0:	00 d0       	rcall	.+0      	; 0x8fc2 <postNewTask_avr+0x8>
    8fc2:	cd b7       	in	r28, 0x3d	; 61
    8fc4:	de b7       	in	r29, 0x3e	; 62
    void (*fp) (void);
    uint16_t priority;
    asm volatile ("mov %A0, r20" "\n\t" "mov %B0, r21" "\n\t":"=r" (fp):);
    8fc6:	84 2f       	mov	r24, r20
    8fc8:	95 2f       	mov	r25, r21
    8fca:	9c 83       	std	Y+4, r25	; 0x04
    8fcc:	8b 83       	std	Y+3, r24	; 0x03
    asm volatile ("mov %A0, r22" "\n\t" "mov %B0, r23"
    8fce:	86 2f       	mov	r24, r22
    8fd0:	97 2f       	mov	r25, r23
    8fd2:	9a 83       	std	Y+2, r25	; 0x02
    8fd4:	89 83       	std	Y+1, r24	; 0x01
                  "\n\t":"=r" (priority):);
    postTask(fp, priority);
    8fd6:	29 81       	ldd	r18, Y+1	; 0x01
    8fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    8fda:	9c 81       	ldd	r25, Y+4	; 0x04
    8fdc:	62 2f       	mov	r22, r18
    8fde:	0e 94 21 16 	call	0x2c42	; 0x2c42 <postTask>
}
    8fe2:	0f 90       	pop	r0
    8fe4:	0f 90       	pop	r0
    8fe6:	0f 90       	pop	r0
    8fe8:	0f 90       	pop	r0
    8fea:	cf 91       	pop	r28
    8fec:	df 91       	pop	r29
    8fee:	08 95       	ret

00008ff0 <postNewTask_Logger>:

//-------------------------------------------------------------------------
void postNewTask_Logger()
{
    8ff0:	df 93       	push	r29
    8ff2:	cf 93       	push	r28
    8ff4:	00 d0       	rcall	.+0      	; 0x8ff6 <postNewTask_Logger+0x6>
    8ff6:	cd b7       	in	r28, 0x3d	; 61
    8ff8:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    8ffa:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    8ffe:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9000:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9004:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9006:	89 81       	ldd	r24, Y+1	; 0x01
    9008:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_POSTTASKSYSCALL, currentindex);
    900c:	8d e2       	ldi	r24, 0x2D	; 45
    900e:	91 e0       	ldi	r25, 0x01	; 1
    9010:	6a 81       	ldd	r22, Y+2	; 0x02
    9012:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    postNewTask_avr();
    9016:	0e 94 dd 47 	call	0x8fba	; 0x8fba <postNewTask_avr>
}
    901a:	0f 90       	pop	r0
    901c:	0f 90       	pop	r0
    901e:	cf 91       	pop	r28
    9020:	df 91       	pop	r29
    9022:	08 95       	ret

00009024 <getStackPtrTask>:

/**\ingroup syscall 
Posttask here for backward compatibility
Bug to be fixed here. 
*/
void postTaskSysCall() __attribute__ ((section(".systemcall.3")))
    __attribute__ ((naked));
void postTaskSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_POSTTASKSYSCALL
    postNewTask_Logger();
#endif
#else
    postNewTask_avr();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}




//-------------------------------------------------------------------------
void getStackPtrTask()
{
    9024:	df 93       	push	r29
    9026:	cf 93       	push	r28
    9028:	00 d0       	rcall	.+0      	; 0x902a <getStackPtrTask+0x6>
    902a:	cd b7       	in	r28, 0x3d	; 61
    902c:	de b7       	in	r29, 0x3e	; 62
    void **returnthreadaddr;

    returnthreadaddr = getKernelStackAddress();
    902e:	0e 94 24 1b 	call	0x3648	; 0x3648 <getKernelStackAddress>
    9032:	9a 83       	std	Y+2, r25	; 0x02
    9034:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    9036:	89 81       	ldd	r24, Y+1	; 0x01
    9038:	9a 81       	ldd	r25, Y+2	; 0x02
    903a:	48 2f       	mov	r20, r24
    903c:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (returnthreadaddr));
}
    903e:	0f 90       	pop	r0
    9040:	0f 90       	pop	r0
    9042:	cf 91       	pop	r28
    9044:	df 91       	pop	r29
    9046:	08 95       	ret

00009048 <getStackPtrTask_Logger>:

void getStackPtrTask_Logger()
{
    9048:	df 93       	push	r29
    904a:	cf 93       	push	r28
    904c:	00 d0       	rcall	.+0      	; 0x904e <getStackPtrTask_Logger+0x6>
    904e:	cd b7       	in	r28, 0x3d	; 61
    9050:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9052:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9056:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9058:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    905c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    905e:	89 81       	ldd	r24, Y+1	; 0x01
    9060:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_KERNELSTACK, currentindex);
    9064:	83 e9       	ldi	r24, 0x93	; 147
    9066:	91 e0       	ldi	r25, 0x01	; 1
    9068:	6a 81       	ldd	r22, Y+2	; 0x02
    906a:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    getStackPtrTask();
    906e:	0e 94 12 48 	call	0x9024	; 0x9024 <getStackPtrTask>
}
    9072:	0f 90       	pop	r0
    9074:	0f 90       	pop	r0
    9076:	cf 91       	pop	r28
    9078:	df 91       	pop	r29
    907a:	08 95       	ret

0000907c <setRadioFrequencyTask_Logger>:


//Get the address of the kernel stack 
void getStackPtr() __attribute__ ((section(".systemcall.4")))
    __attribute__ ((naked));
void getStackPtr()
{
	#ifdef TRACE_ENABLE_SYSCALL
  #ifdef TRACE_ENABLE_SYSCALL_KERNELSTACK
    getStackPtrTask_Logger();
  #endif
  #else 
    getStackPtrTask();
  #endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}




//-----------------------------------------------------------------------------
//Boundary EC00 Radio operations 
//-----------------------------------------------------------------------------



//because this system call directly links into the radio module, therefore, we do not need to consider the problem of directly using registers. 
void setRadioFrequencyTask_Logger()
{
    907c:	df 93       	push	r29
    907e:	cf 93       	push	r28
    9080:	00 d0       	rcall	.+0      	; 0x9082 <setRadioFrequencyTask_Logger+0x6>
    9082:	cd b7       	in	r28, 0x3d	; 61
    9084:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9086:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    908a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    908c:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9090:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9092:	89 81       	ldd	r24, Y+1	; 0x01
    9094:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETRADIOFREQUENCY, currentindex);
    9098:	85 ef       	ldi	r24, 0xF5	; 245
    909a:	91 e0       	ldi	r25, 0x01	; 1
    909c:	6a 81       	ldd	r22, Y+2	; 0x02
    909e:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
#ifdef RADIO_CC2420
    setRadioFrequencyTask();
    90a2:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <setRadioFrequencyTask>
#endif
}
    90a6:	0f 90       	pop	r0
    90a8:	0f 90       	pop	r0
    90aa:	cf 91       	pop	r28
    90ac:	df 91       	pop	r29
    90ae:	08 95       	ret

000090b0 <setRadioChannelTask_Logger>:

/**\ingroup syscall 
Set the radio frequency, stored in the registers. 
*/
//inline result_t cc2420controlm_CC2420Control_TuneManual(uint16_t DesiredFreq);
void setRadioFrequency() __attribute__ ((section(".systemcall.5"))) __attribute__
    ((naked));
void setRadioFrequency()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETRADIOFREQUENCY
    setRadioFrequencyTask_Logger();
#endif
#else
#ifdef RADIO_CC2420
    setRadioFrequencyTask();
#endif
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void setRadioChannelTask_Logger()
{
    90b0:	df 93       	push	r29
    90b2:	cf 93       	push	r28
    90b4:	00 d0       	rcall	.+0      	; 0x90b6 <setRadioChannelTask_Logger+0x6>
    90b6:	cd b7       	in	r28, 0x3d	; 61
    90b8:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    90ba:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    90be:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    90c0:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    90c4:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    90c6:	89 81       	ldd	r24, Y+1	; 0x01
    90c8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETRADIOCHANNEL, currentindex);
    90cc:	86 ef       	ldi	r24, 0xF6	; 246
    90ce:	91 e0       	ldi	r25, 0x01	; 1
    90d0:	6a 81       	ldd	r22, Y+2	; 0x02
    90d2:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
#ifdef RADIO_CC2420
    setRadioChannelTask();
    90d6:	0e 94 7d 46 	call	0x8cfa	; 0x8cfa <setRadioChannelTask>
#endif
}
    90da:	0f 90       	pop	r0
    90dc:	0f 90       	pop	r0
    90de:	cf 91       	pop	r28
    90e0:	df 91       	pop	r29
    90e2:	08 95       	ret

000090e4 <setRadioPowerTask_Logger>:

/**\ingroup syscall 
Set the channel, stored in the registers. 
*/
//inline result_t cc2420controlm_CC2420Control_TuneChannel(uint8_t channel); 
void setRadioChannel() __attribute__ ((section(".systemcall.5")))
    __attribute__ ((naked));
void setRadioChannel()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETRADIOCHANNEL
    setRadioChannelTask_Logger();
#endif
#else
#ifdef RADIO_CC2420
    setRadioChannelTask();
#endif
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void setRadioPowerTask_Logger()
{
    90e4:	df 93       	push	r29
    90e6:	cf 93       	push	r28
    90e8:	00 d0       	rcall	.+0      	; 0x90ea <setRadioPowerTask_Logger+0x6>
    90ea:	cd b7       	in	r28, 0x3d	; 61
    90ec:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    90ee:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    90f2:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    90f4:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    90f8:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    90fa:	89 81       	ldd	r24, Y+1	; 0x01
    90fc:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETRADIOPOWER, currentindex);
    9100:	87 ef       	ldi	r24, 0xF7	; 247
    9102:	91 e0       	ldi	r25, 0x01	; 1
    9104:	6a 81       	ldd	r22, Y+2	; 0x02
    9106:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
#ifdef RADIO_CC2420
    setRadioPowerTask();
    910a:	0e 94 6b 46 	call	0x8cd6	; 0x8cd6 <setRadioPowerTask>
#endif
}
    910e:	0f 90       	pop	r0
    9110:	0f 90       	pop	r0
    9112:	cf 91       	pop	r28
    9114:	df 91       	pop	r29
    9116:	08 95       	ret

00009118 <getRadioSendingBuffer_avr>:

/**\ingroup syscall 
Set the radio power, stored in the registers. 
*/
//inline result_t cc2420controlm_CC2420Control_TunePower(uint8_t powerlevel);
void setRadioPower() __attribute__ ((section(".systemcall.5")))
    __attribute__ ((naked));
void setRadioPower()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETRADIOPOWER
    setRadioPowerTask_Logger();
#endif
#else
#ifdef RADIO_CC2420
    setRadioPowerTask();
#endif
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}



//-------------------------------------------------------------------------
void getRadioSendingBuffer_avr()
{
    9118:	df 93       	push	r29
    911a:	cf 93       	push	r28
    911c:	00 d0       	rcall	.+0      	; 0x911e <getRadioSendingBuffer_avr+0x6>
    911e:	cd b7       	in	r28, 0x3d	; 61
    9120:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getRadioSendingBufferAddr();
    9122:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <getRadioSendingBufferAddr>
    9126:	9a 83       	std	Y+2, r25	; 0x02
    9128:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    912a:	89 81       	ldd	r24, Y+1	; 0x01
    912c:	9a 81       	ldd	r25, Y+2	; 0x02
    912e:	48 2f       	mov	r20, r24
    9130:	59 2f       	mov	r21, r25
}
    9132:	0f 90       	pop	r0
    9134:	0f 90       	pop	r0
    9136:	cf 91       	pop	r28
    9138:	df 91       	pop	r29
    913a:	08 95       	ret

0000913c <getRadioSendingBuffer_Logger>:

//-------------------------------------------------------------------------
void getRadioSendingBuffer_Logger()
{
    913c:	df 93       	push	r29
    913e:	cf 93       	push	r28
    9140:	00 d0       	rcall	.+0      	; 0x9142 <getRadioSendingBuffer_Logger+0x6>
    9142:	cd b7       	in	r28, 0x3d	; 61
    9144:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9146:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    914a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    914c:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9150:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9152:	89 81       	ldd	r24, Y+1	; 0x01
    9154:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTRADIOINFOADDRESS, currentindex);
    9158:	8a ef       	ldi	r24, 0xFA	; 250
    915a:	91 e0       	ldi	r25, 0x01	; 1
    915c:	6a 81       	ldd	r22, Y+2	; 0x02
    915e:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    getRadioSendingBuffer_avr();
    9162:	0e 94 8c 48 	call	0x9118	; 0x9118 <getRadioSendingBuffer_avr>
}
    9166:	0f 90       	pop	r0
    9168:	0f 90       	pop	r0
    916a:	cf 91       	pop	r28
    916c:	df 91       	pop	r29
    916e:	08 95       	ret

00009170 <SocketRadioSend_Logger>:

/**\ingroup syscall 
Get the Radio info address for populate it to send the radio packet info to the kernel. 
*/
void getRadioSendingBuffer() __attribute__ ((section(".systemcall.5")))
    __attribute__ ((naked));
void getRadioSendingBuffer()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTRADIOINFOADDRESS
    getRadioSendingBuffer_Logger();
#endif
#else
    getRadioSendingBuffer_avr();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}



//-------------------------------------------------------------------------
void SocketRadioSend_Logger()
{
    9170:	df 93       	push	r29
    9172:	cf 93       	push	r28
    9174:	00 d0       	rcall	.+0      	; 0x9176 <SocketRadioSend_Logger+0x6>
    9176:	cd b7       	in	r28, 0x3d	; 61
    9178:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    917a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    917e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9180:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9184:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9186:	89 81       	ldd	r24, Y+1	; 0x01
    9188:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETRADIOSENDFUNCTION, currentindex);
    918c:	88 ef       	ldi	r24, 0xF8	; 248
    918e:	91 e0       	ldi	r25, 0x01	; 1
    9190:	6a 81       	ldd	r22, Y+2	; 0x02
    9192:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    SocketRadioSend();
    9196:	0e 94 65 46 	call	0x8cca	; 0x8cca <SocketRadioSend>
}
    919a:	0f 90       	pop	r0
    919c:	0f 90       	pop	r0
    919e:	cf 91       	pop	r28
    91a0:	df 91       	pop	r29
    91a2:	08 95       	ret

000091a4 <getReceiverBuffer_avr>:

/**\ingroup syscall 
Call the radio send function indirectly. 
*/
void invokeSocketRadioSend() __attribute__ ((section(".systemcall.5")))
    __attribute__ ((naked));
void invokeSocketRadioSend()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETRADIOSENDFUNCTION
    SocketRadioSend_Logger();
#endif
#else
    SocketRadioSend();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}



//following are receiving

//-------------------------------------------------------------------------
void getReceiverBuffer_avr()
{
    91a4:	df 93       	push	r29
    91a6:	cf 93       	push	r28
    91a8:	00 d0       	rcall	.+0      	; 0x91aa <getReceiverBuffer_avr+0x6>
    91aa:	cd b7       	in	r28, 0x3d	; 61
    91ac:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getRadioReceivingBufferAddr();
    91ae:	0e 94 41 46 	call	0x8c82	; 0x8c82 <getRadioReceivingBufferAddr>
    91b2:	9a 83       	std	Y+2, r25	; 0x02
    91b4:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    91b6:	89 81       	ldd	r24, Y+1	; 0x01
    91b8:	9a 81       	ldd	r25, Y+2	; 0x02
    91ba:	48 2f       	mov	r20, r24
    91bc:	59 2f       	mov	r21, r25
}
    91be:	0f 90       	pop	r0
    91c0:	0f 90       	pop	r0
    91c2:	cf 91       	pop	r28
    91c4:	df 91       	pop	r29
    91c6:	08 95       	ret

000091c8 <getReceiverBuffer_Logger>:

//-------------------------------------------------------------------------
void getReceiverBuffer_Logger()
{
    91c8:	df 93       	push	r29
    91ca:	cf 93       	push	r28
    91cc:	00 d0       	rcall	.+0      	; 0x91ce <getReceiverBuffer_Logger+0x6>
    91ce:	cd b7       	in	r28, 0x3d	; 61
    91d0:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    91d2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    91d6:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    91d8:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    91dc:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    91de:	89 81       	ldd	r24, Y+1	; 0x01
    91e0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTRADIORECEIVERHANDLEADDRESS, currentindex);
    91e4:	8b ef       	ldi	r24, 0xFB	; 251
    91e6:	91 e0       	ldi	r25, 0x01	; 1
    91e8:	6a 81       	ldd	r22, Y+2	; 0x02
    91ea:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    getReceiverBuffer_avr();
    91ee:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <getReceiverBuffer_avr>
}
    91f2:	0f 90       	pop	r0
    91f4:	0f 90       	pop	r0
    91f6:	cf 91       	pop	r28
    91f8:	df 91       	pop	r29
    91fa:	08 95       	ret

000091fc <syscall_registerEvent_Logger>:

/**\ingroup syscall
Get the radio handle for registering a receiving handle. 
*/
 

void getRadioReceivingBuffer() __attribute__ ((section(".systemcall.5")))
    __attribute__ ((naked));
void getRadioReceivingBuffer()

{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTRADIORECEIVERHANDLEADDRESS
    getReceiverBuffer_Logger();
#endif
#else
    getReceiverBuffer_avr();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void syscall_registerEvent_Logger()
{
    91fc:	df 93       	push	r29
    91fe:	cf 93       	push	r28
    9200:	00 d0       	rcall	.+0      	; 0x9202 <syscall_registerEvent_Logger+0x6>
    9202:	cd b7       	in	r28, 0x3d	; 61
    9204:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9206:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    920a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    920c:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9210:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9212:	89 81       	ldd	r24, Y+1	; 0x01
    9214:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_SETCURRENTRADIOHANDLE, currentindex);
    9218:	89 ef       	ldi	r24, 0xF9	; 249
    921a:	91 e0       	ldi	r25, 0x01	; 1
    921c:	6a 81       	ldd	r22, Y+2	; 0x02
    921e:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    registerReceiverHandle_syscall();
    9222:	0e 94 44 46 	call	0x8c88	; 0x8c88 <registerReceiverHandle_syscall>
}
    9226:	0f 90       	pop	r0
    9228:	0f 90       	pop	r0
    922a:	cf 91       	pop	r28
    922c:	df 91       	pop	r29
    922e:	08 95       	ret

00009230 <Leds_redToggle_Logger>:

/**\ingroup syscall 
Register a receiving handle for incoming packet. 
*/
void setCurrentRadioHandle() __attribute__ ((section(".systemcall.5")))
    __attribute__ ((naked));
void setCurrentRadioHandle()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SETCURRENTRADIOHANDLE
    syscall_registerEvent_Logger();
#endif
#else 
    registerReceiverHandle_syscall();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}



//-----------------------------------------------------------------------------
//Boundary EC80 Device: LED Operations
//-----------------------------------------------------------------------------



//-------------------------------------------------------------------------
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void Leds_redToggle_Logger()
{
    9230:	df 93       	push	r29
    9232:	cf 93       	push	r28
    9234:	00 d0       	rcall	.+0      	; 0x9236 <Leds_redToggle_Logger+0x6>
    9236:	cd b7       	in	r28, 0x3d	; 61
    9238:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    923a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    923e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9240:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9244:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9246:	89 81       	ldd	r24, Y+1	; 0x01
    9248:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_REDTOGGLEFUNCTION, currentindex);
    924c:	89 e5       	ldi	r24, 0x59	; 89
    924e:	92 e0       	ldi	r25, 0x02	; 2
    9250:	6a 81       	ldd	r22, Y+2	; 0x02
    9252:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    Leds_redToggle();
    9256:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <Leds_redToggle>
}
    925a:	0f 90       	pop	r0
    925c:	0f 90       	pop	r0
    925e:	cf 91       	pop	r28
    9260:	df 91       	pop	r29
    9262:	08 95       	ret

00009264 <Leds_yellowToggle_Logger>:

/**\ingroup syscall 
Toggle the red LED. 
*/
void redtogglefunction() __attribute__ ((section(".systemcall.6"))) __attribute__
    ((naked));
void redtogglefunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_REDTOGGLEFUNCTION
    Leds_redToggle_Logger();
#endif
#else
    Leds_redToggle();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_yellowToggle_Logger()
{
    9264:	df 93       	push	r29
    9266:	cf 93       	push	r28
    9268:	00 d0       	rcall	.+0      	; 0x926a <Leds_yellowToggle_Logger+0x6>
    926a:	cd b7       	in	r28, 0x3d	; 61
    926c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    926e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9272:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9274:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9278:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    927a:	89 81       	ldd	r24, Y+1	; 0x01
    927c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_YELLOWTOGGLEFUNCTION, currentindex);
    9280:	8a e5       	ldi	r24, 0x5A	; 90
    9282:	92 e0       	ldi	r25, 0x02	; 2
    9284:	6a 81       	ldd	r22, Y+2	; 0x02
    9286:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    Leds_yellowToggle();
    928a:	0e 94 08 1c 	call	0x3810	; 0x3810 <Leds_yellowToggle>
}
    928e:	0f 90       	pop	r0
    9290:	0f 90       	pop	r0
    9292:	cf 91       	pop	r28
    9294:	df 91       	pop	r29
    9296:	08 95       	ret

00009298 <Leds_greenToggle_Logger>:

/**\ingroup syscall 
Toggle the yellow LED. 
*/
void yellowtogglefunction() __attribute__ ((section(".systemcall.6")))
    __attribute__ ((naked));
void yellowtogglefunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YELLOWTOGGLEFUNCTION
    Leds_yellowToggle_Logger();
#endif
#else
    Leds_yellowToggle();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------
void Leds_greenToggle_Logger()
{
    9298:	df 93       	push	r29
    929a:	cf 93       	push	r28
    929c:	00 d0       	rcall	.+0      	; 0x929e <Leds_greenToggle_Logger+0x6>
    929e:	cd b7       	in	r28, 0x3d	; 61
    92a0:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    92a2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    92a6:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    92a8:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    92ac:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    92ae:	89 81       	ldd	r24, Y+1	; 0x01
    92b0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GREENTOGGLEFUNCTION, currentindex);
    92b4:	8b e5       	ldi	r24, 0x5B	; 91
    92b6:	92 e0       	ldi	r25, 0x02	; 2
    92b8:	6a 81       	ldd	r22, Y+2	; 0x02
    92ba:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    Leds_greenToggle();
    92be:	0e 94 3e 1c 	call	0x387c	; 0x387c <Leds_greenToggle>
}
    92c2:	0f 90       	pop	r0
    92c4:	0f 90       	pop	r0
    92c6:	cf 91       	pop	r28
    92c8:	df 91       	pop	r29
    92ca:	08 95       	ret

000092cc <Leds_redOn_Logger>:

/**\ingroup syscall 
Toggle the green LED.
*/
void greentogglefunction() __attribute__ ((section(".systemcall.6")))
    __attribute__ ((naked));
void greentogglefunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GREENTOGGLEFUNCTION
    Leds_greenToggle_Logger();
#endif
#else
    Leds_greenToggle();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}



//-------------------------------------------------------------------------
void Leds_redOn_Logger()
{
    92cc:	df 93       	push	r29
    92ce:	cf 93       	push	r28
    92d0:	00 d0       	rcall	.+0      	; 0x92d2 <Leds_redOn_Logger+0x6>
    92d2:	cd b7       	in	r28, 0x3d	; 61
    92d4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    92d6:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    92da:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    92dc:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    92e0:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    92e2:	89 81       	ldd	r24, Y+1	; 0x01
    92e4:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_REDONFUNCTION, currentindex);
    92e8:	8c e5       	ldi	r24, 0x5C	; 92
    92ea:	92 e0       	ldi	r25, 0x02	; 2
    92ec:	6a 81       	ldd	r22, Y+2	; 0x02
    92ee:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    Leds_redOn();
    92f2:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <Leds_redOn>
}
    92f6:	0f 90       	pop	r0
    92f8:	0f 90       	pop	r0
    92fa:	cf 91       	pop	r28
    92fc:	df 91       	pop	r29
    92fe:	08 95       	ret

00009300 <Leds_redOff_Logger>:

/**\ingroup syscall 
Turn the red LED on. 
*/
void redonfunction() __attribute__ ((section(".systemcall.6")))
    __attribute__ ((naked));
void redonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_REDONFUNCTION
    Leds_redOn_Logger();
#endif
#else
    Leds_redOn();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_redOff_Logger()
{
    9300:	df 93       	push	r29
    9302:	cf 93       	push	r28
    9304:	00 d0       	rcall	.+0      	; 0x9306 <Leds_redOff_Logger+0x6>
    9306:	cd b7       	in	r28, 0x3d	; 61
    9308:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    930a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    930e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9310:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9314:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9316:	89 81       	ldd	r24, Y+1	; 0x01
    9318:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_REDOFFFUNCTION, currentindex);
    931c:	8d e5       	ldi	r24, 0x5D	; 93
    931e:	92 e0       	ldi	r25, 0x02	; 2
    9320:	6a 81       	ldd	r22, Y+2	; 0x02
    9322:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    Leds_redOff();
    9326:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <Leds_redOff>
}
    932a:	0f 90       	pop	r0
    932c:	0f 90       	pop	r0
    932e:	cf 91       	pop	r28
    9330:	df 91       	pop	r29
    9332:	08 95       	ret

00009334 <Leds_yellowOn_Logger>:

/**\ingroup syscall 
Turn the red LED off. 
*/
void redofffunction() __attribute__ ((section(".systemcall.6")))
    __attribute__ ((naked));
void redofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_REDOFFFUNCTION
    Leds_redOff_Logger();
#endif
#else
    Leds_redOff();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_yellowOn_Logger()
{
    9334:	df 93       	push	r29
    9336:	cf 93       	push	r28
    9338:	00 d0       	rcall	.+0      	; 0x933a <Leds_yellowOn_Logger+0x6>
    933a:	cd b7       	in	r28, 0x3d	; 61
    933c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    933e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9342:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9344:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9348:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    934a:	89 81       	ldd	r24, Y+1	; 0x01
    934c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_YELLOWONFUNCTION, currentindex);
    9350:	8e e5       	ldi	r24, 0x5E	; 94
    9352:	92 e0       	ldi	r25, 0x02	; 2
    9354:	6a 81       	ldd	r22, Y+2	; 0x02
    9356:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    Leds_yellowOn();
    935a:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <Leds_yellowOn>
}
    935e:	0f 90       	pop	r0
    9360:	0f 90       	pop	r0
    9362:	cf 91       	pop	r28
    9364:	df 91       	pop	r29
    9366:	08 95       	ret

00009368 <Leds_yellowOff_Logger>:

/**\ingroup syscall 
Turn the yellow LED on.
*/
void yellowonfunction() __attribute__ ((section(".systemcall.6")))
    __attribute__ ((naked));
void yellowonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YELLOWONFUNCTION
    Leds_yellowOn_Logger();
#endif
#else
    Leds_yellowOn();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_yellowOff_Logger()
{
    9368:	df 93       	push	r29
    936a:	cf 93       	push	r28
    936c:	00 d0       	rcall	.+0      	; 0x936e <Leds_yellowOff_Logger+0x6>
    936e:	cd b7       	in	r28, 0x3d	; 61
    9370:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9372:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9376:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9378:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    937c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    937e:	89 81       	ldd	r24, Y+1	; 0x01
    9380:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_YELLOWOFFFUNCTION, currentindex);
    9384:	8f e5       	ldi	r24, 0x5F	; 95
    9386:	92 e0       	ldi	r25, 0x02	; 2
    9388:	6a 81       	ldd	r22, Y+2	; 0x02
    938a:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    Leds_yellowOff();
    938e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <Leds_yellowOff>
}
    9392:	0f 90       	pop	r0
    9394:	0f 90       	pop	r0
    9396:	cf 91       	pop	r28
    9398:	df 91       	pop	r29
    939a:	08 95       	ret

0000939c <Leds_greenOn_Logger>:

/**\ingroup syscall 
Turn the yellow LED off. 
*/
void yellowofffunction() __attribute__ ((section(".systemcall.6"))) __attribute__
    ((naked));
void yellowofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_YELLOWOFFFUNCTION
    Leds_yellowOff_Logger();
#endif
#else
    Leds_yellowOff();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_greenOn_Logger()
{
    939c:	df 93       	push	r29
    939e:	cf 93       	push	r28
    93a0:	00 d0       	rcall	.+0      	; 0x93a2 <Leds_greenOn_Logger+0x6>
    93a2:	cd b7       	in	r28, 0x3d	; 61
    93a4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    93a6:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    93aa:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    93ac:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    93b0:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    93b2:	89 81       	ldd	r24, Y+1	; 0x01
    93b4:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GREENONFUNCTION, currentindex);
    93b8:	80 e6       	ldi	r24, 0x60	; 96
    93ba:	92 e0       	ldi	r25, 0x02	; 2
    93bc:	6a 81       	ldd	r22, Y+2	; 0x02
    93be:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    Leds_greenOn();
    93c2:	0e 94 2e 1c 	call	0x385c	; 0x385c <Leds_greenOn>
}
    93c6:	0f 90       	pop	r0
    93c8:	0f 90       	pop	r0
    93ca:	cf 91       	pop	r28
    93cc:	df 91       	pop	r29
    93ce:	08 95       	ret

000093d0 <Leds_greenOff_Logger>:

/**\ingroup syscall 
Turn the green LED on. 
*/
void greenonfunction() __attribute__ ((section(".systemcall.6")))
    __attribute__ ((naked));
void greenonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GREENONFUNCTION
    Leds_greenOn_Logger();
#endif
#else
    Leds_greenOn();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void Leds_greenOff_Logger()
{
    93d0:	df 93       	push	r29
    93d2:	cf 93       	push	r28
    93d4:	00 d0       	rcall	.+0      	; 0x93d6 <Leds_greenOff_Logger+0x6>
    93d6:	cd b7       	in	r28, 0x3d	; 61
    93d8:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    93da:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    93de:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    93e0:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    93e4:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    93e6:	89 81       	ldd	r24, Y+1	; 0x01
    93e8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GREENOFFFUNCTION, currentindex);
    93ec:	81 e6       	ldi	r24, 0x61	; 97
    93ee:	92 e0       	ldi	r25, 0x02	; 2
    93f0:	6a 81       	ldd	r22, Y+2	; 0x02
    93f2:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    Leds_greenOff();
    93f6:	0e 94 1e 1c 	call	0x383c	; 0x383c <Leds_greenOff>
}
    93fa:	0f 90       	pop	r0
    93fc:	0f 90       	pop	r0
    93fe:	cf 91       	pop	r28
    9400:	df 91       	pop	r29
    9402:	08 95       	ret

00009404 <ADCLight_Logger>:

/**\ingroup syscall 
Turn the green LED off. 
*/
void greenofffunction() __attribute__ ((section(".systemcall.6")))
    __attribute__ ((naked));
void greenofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GREENOFFFUNCTION
    Leds_greenOff_Logger();
#endif
#else
    Leds_greenOff();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}



//
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------
void ADCLight_Logger()
{
    9404:	df 93       	push	r29
    9406:	cf 93       	push	r28
    9408:	00 d0       	rcall	.+0      	; 0x940a <ADCLight_Logger+0x6>
    940a:	cd b7       	in	r28, 0x3d	; 61
    940c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    940e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9412:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9414:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9418:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    941a:	89 81       	ldd	r24, Y+1	; 0x01
    941c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCLIGHTSYSCALL, currentindex);
    9420:	8d eb       	ldi	r24, 0xBD	; 189
    9422:	92 e0       	ldi	r25, 0x02	; 2
    9424:	6a 81       	ldd	r22, Y+2	; 0x02
    9426:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    ADCLight();
    942a:	0e 94 58 45 	call	0x8ab0	; 0x8ab0 <ADCLight>
}
    942e:	0f 90       	pop	r0
    9430:	0f 90       	pop	r0
    9432:	cf 91       	pop	r28
    9434:	df 91       	pop	r29
    9436:	08 95       	ret

00009438 <ADCTemp_Logger>:

/**\ingroup syscall 
Get the reading from light sensor and store the result in the thread table. 
*/
void ADCLightSysCall() __attribute__ ((section(".systemcall.7")))
    __attribute__ ((naked));
void ADCLightSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCLIGHTSYSCALL
    ADCLight_Logger();
#endif
#else
    ADCLight();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCTemp_Logger()
{
    9438:	df 93       	push	r29
    943a:	cf 93       	push	r28
    943c:	00 d0       	rcall	.+0      	; 0x943e <ADCTemp_Logger+0x6>
    943e:	cd b7       	in	r28, 0x3d	; 61
    9440:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9442:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9446:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9448:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    944c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    944e:	89 81       	ldd	r24, Y+1	; 0x01
    9450:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCTEMPSYSCALL, currentindex);
    9454:	8e eb       	ldi	r24, 0xBE	; 190
    9456:	92 e0       	ldi	r25, 0x02	; 2
    9458:	6a 81       	ldd	r22, Y+2	; 0x02
    945a:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    ADCTemp();
    945e:	0e 94 4f 45 	call	0x8a9e	; 0x8a9e <ADCTemp>
}
    9462:	0f 90       	pop	r0
    9464:	0f 90       	pop	r0
    9466:	cf 91       	pop	r28
    9468:	df 91       	pop	r29
    946a:	08 95       	ret

0000946c <ADCMagX_Logger>:

/**\ingroup syscall 
Get the reading from temperature and store the result in the thread table. 
*/
void ADCTempSysCall() __attribute__ ((section(".systemcall.7")))
    __attribute__ ((naked));
void ADCTempSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCTEMPSYSCALL
    ADCTemp_Logger();
#endif
#else
    ADCTemp();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCMagX_Logger()
{
    946c:	df 93       	push	r29
    946e:	cf 93       	push	r28
    9470:	00 d0       	rcall	.+0      	; 0x9472 <ADCMagX_Logger+0x6>
    9472:	cd b7       	in	r28, 0x3d	; 61
    9474:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9476:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    947a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    947c:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9480:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9482:	89 81       	ldd	r24, Y+1	; 0x01
    9484:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCMAGXSYSCALL, currentindex);
    9488:	8f eb       	ldi	r24, 0xBF	; 191
    948a:	92 e0       	ldi	r25, 0x02	; 2
    948c:	6a 81       	ldd	r22, Y+2	; 0x02
    948e:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    ADCMagX();
    9492:	0e 94 46 45 	call	0x8a8c	; 0x8a8c <ADCMagX>
}
    9496:	0f 90       	pop	r0
    9498:	0f 90       	pop	r0
    949a:	cf 91       	pop	r28
    949c:	df 91       	pop	r29
    949e:	08 95       	ret

000094a0 <ADCMagY_Logger>:

/**\ingroup syscall 
Get the reading from the X axis for the magnetic sensor and store the result in the thread table.  
*/
void ADCMagXSysCall() __attribute__ ((section(".systemcall.7")))
    __attribute__ ((naked));
void ADCMagXSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCMAGXSYSCALL
    ADCMagX_Logger();
#endif
#else
    ADCMagX();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCMagY_Logger()
{
    94a0:	df 93       	push	r29
    94a2:	cf 93       	push	r28
    94a4:	00 d0       	rcall	.+0      	; 0x94a6 <ADCMagY_Logger+0x6>
    94a6:	cd b7       	in	r28, 0x3d	; 61
    94a8:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    94aa:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    94ae:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    94b0:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    94b4:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    94b6:	89 81       	ldd	r24, Y+1	; 0x01
    94b8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCMAGYSYSCALL, currentindex);
    94bc:	80 ec       	ldi	r24, 0xC0	; 192
    94be:	92 e0       	ldi	r25, 0x02	; 2
    94c0:	6a 81       	ldd	r22, Y+2	; 0x02
    94c2:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    ADCMagY();
    94c6:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <ADCMagY>
}
    94ca:	0f 90       	pop	r0
    94cc:	0f 90       	pop	r0
    94ce:	cf 91       	pop	r28
    94d0:	df 91       	pop	r29
    94d2:	08 95       	ret

000094d4 <ADCAccX_Logger>:

/**\ingroup syscall 
Get the reading from the Y axis for the magnetic sensor and store the result in the thread table. 
*/
void ADCMagYSysCall() __attribute__ ((section(".systemcall.7")))
    __attribute__ ((naked));
void ADCMagYSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCMAGYSYSCALL
    ADCMagY_Logger();
#endif
#else
    ADCMagY();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCAccX_Logger()
{
    94d4:	df 93       	push	r29
    94d6:	cf 93       	push	r28
    94d8:	00 d0       	rcall	.+0      	; 0x94da <ADCAccX_Logger+0x6>
    94da:	cd b7       	in	r28, 0x3d	; 61
    94dc:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    94de:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    94e2:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    94e4:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    94e8:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    94ea:	89 81       	ldd	r24, Y+1	; 0x01
    94ec:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCACCXSYSCALL, currentindex);
    94f0:	81 ec       	ldi	r24, 0xC1	; 193
    94f2:	92 e0       	ldi	r25, 0x02	; 2
    94f4:	6a 81       	ldd	r22, Y+2	; 0x02
    94f6:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    ADCAccX();
    94fa:	0e 94 34 45 	call	0x8a68	; 0x8a68 <ADCAccX>
}
    94fe:	0f 90       	pop	r0
    9500:	0f 90       	pop	r0
    9502:	cf 91       	pop	r28
    9504:	df 91       	pop	r29
    9506:	08 95       	ret

00009508 <ADCAccY_Logger>:

/**\ingroup syscall 
Get the reading from the X axis for the accelerator and store the result in the thread table. 
*/
void ADCAccXSysCall() __attribute__ ((section(".systemcall.7")))
    __attribute__ ((naked));
void ADCAccXSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCACCXSYSCALL
    ADCAccX_Logger();
#endif
#else
    ADCAccX();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void ADCAccY_Logger()
{
    9508:	df 93       	push	r29
    950a:	cf 93       	push	r28
    950c:	00 d0       	rcall	.+0      	; 0x950e <ADCAccY_Logger+0x6>
    950e:	cd b7       	in	r28, 0x3d	; 61
    9510:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9512:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9516:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9518:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    951c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    951e:	89 81       	ldd	r24, Y+1	; 0x01
    9520:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_ADCACCYSYSCALL, currentindex);
    9524:	82 ec       	ldi	r24, 0xC2	; 194
    9526:	92 e0       	ldi	r25, 0x02	; 2
    9528:	6a 81       	ldd	r22, Y+2	; 0x02
    952a:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    ADCAccY();
    952e:	0e 94 2b 45 	call	0x8a56	; 0x8a56 <ADCAccY>
}
    9532:	0f 90       	pop	r0
    9534:	0f 90       	pop	r0
    9536:	cf 91       	pop	r28
    9538:	df 91       	pop	r29
    953a:	08 95       	ret

0000953c <sounderOn_Logger>:

/**\ingroup syscall 
Get the reading from the Y axis for the accelerator and store the result in the thread table. 
*/
void ADCAccYSysCall() __attribute__ ((section(".systemcall.7")))
    __attribute__ ((naked));
void ADCAccYSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_ADCACCYSYSCALL
    ADCAccY_Logger();
#endif
#else
    ADCAccY();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}


/* added by Qi Mi (qm8e@virginia.edu) */
void sounderOn_Logger()
{
    953c:	df 93       	push	r29
    953e:	cf 93       	push	r28
    9540:	00 d0       	rcall	.+0      	; 0x9542 <sounderOn_Logger+0x6>
    9542:	cd b7       	in	r28, 0x3d	; 61
    9544:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9546:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    954a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    954c:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9550:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9552:	89 81       	ldd	r24, Y+1	; 0x01
    9554:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_SOUNDERONFUNCTION, currentindex);
    9558:	83 ec       	ldi	r24, 0xC3	; 195
    955a:	92 e0       	ldi	r25, 0x02	; 2
    955c:	6a 81       	ldd	r22, Y+2	; 0x02
    955e:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    sounderOn();
    9562:	0e 94 b9 1c 	call	0x3972	; 0x3972 <sounderOn>
}
    9566:	0f 90       	pop	r0
    9568:	0f 90       	pop	r0
    956a:	cf 91       	pop	r28
    956c:	df 91       	pop	r29
    956e:	08 95       	ret

00009570 <sounderOff_Logger>:

/**\ingroup syscall 
Turn the sounder on. 
*/
void sounderonfunction() __attribute__ ((section(".systemcall.7"))) __attribute__
    ((naked));
void sounderonfunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SOUNDERONFUNCTION
    sounderOn_Logger();         //defined in avr\syscall.c
#endif
#else
    sounder_init();
    sounderOn();          //defined in micaz\sounder.c
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void sounderOff_Logger()
{
    9570:	df 93       	push	r29
    9572:	cf 93       	push	r28
    9574:	00 d0       	rcall	.+0      	; 0x9576 <sounderOff_Logger+0x6>
    9576:	cd b7       	in	r28, 0x3d	; 61
    9578:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    957a:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    957e:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9580:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9584:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9586:	89 81       	ldd	r24, Y+1	; 0x01
    9588:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_SOUNDEROFFFUNCTION, currentindex);
    958c:	84 ec       	ldi	r24, 0xC4	; 196
    958e:	92 e0       	ldi	r25, 0x02	; 2
    9590:	6a 81       	ldd	r22, Y+2	; 0x02
    9592:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    sounderOff();
    9596:	0e 94 ac 1c 	call	0x3958	; 0x3958 <sounderOff>
}
    959a:	0f 90       	pop	r0
    959c:	0f 90       	pop	r0
    959e:	cf 91       	pop	r28
    95a0:	df 91       	pop	r29
    95a2:	08 95       	ret

000095a4 <getEEPROMHandleInfo>:

/**\ingroup syscall 
Turn the sounder off. 
*/
void sounderofffunction() __attribute__ ((section(".systemcall.7")))
    __attribute__ ((naked));
void sounderofffunction()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SOUNDEROFFFUNCTION
    sounderOff_Logger();        //defined in avr\syscall.c
#endif
#else
    sounder_init();
    sounderOff();         //defined in micaz\sounder.c
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}




//-----------------------------------------------------------------------------
//Boundary ED80 Device: EEPROM Operations
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------

  

//-------------------------------------------------------------------------
void getEEPROMHandleInfo()
{
    95a4:	df 93       	push	r29
    95a6:	cf 93       	push	r28
    95a8:	00 d0       	rcall	.+0      	; 0x95aa <getEEPROMHandleInfo+0x6>
    95aa:	cd b7       	in	r28, 0x3d	; 61
    95ac:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getGenericStorageNodeAddress();
    95ae:	0e 94 61 45 	call	0x8ac2	; 0x8ac2 <getGenericStorageNodeAddress>
    95b2:	9a 83       	std	Y+2, r25	; 0x02
    95b4:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    95b6:	89 81       	ldd	r24, Y+1	; 0x01
    95b8:	9a 81       	ldd	r25, Y+2	; 0x02
    95ba:	48 2f       	mov	r20, r24
    95bc:	59 2f       	mov	r21, r25
}
    95be:	0f 90       	pop	r0
    95c0:	0f 90       	pop	r0
    95c2:	cf 91       	pop	r28
    95c4:	df 91       	pop	r29
    95c6:	08 95       	ret

000095c8 <getEEPROMHandleInfo_Logger>:

//-------------------------------------------------------------------------
void getEEPROMHandleInfo_Logger()
{
    95c8:	df 93       	push	r29
    95ca:	cf 93       	push	r28
    95cc:	00 d0       	rcall	.+0      	; 0x95ce <getEEPROMHandleInfo_Logger+0x6>
    95ce:	cd b7       	in	r28, 0x3d	; 61
    95d0:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    95d2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    95d6:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    95d8:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    95dc:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    95de:	89 81       	ldd	r24, Y+1	; 0x01
    95e0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETCURRENTEEPROMHANDLEADDRESS, currentindex);
    95e4:	85 ec       	ldi	r24, 0xC5	; 197
    95e6:	92 e0       	ldi	r25, 0x02	; 2
    95e8:	6a 81       	ldd	r22, Y+2	; 0x02
    95ea:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    getEEPROMHandleInfo();
    95ee:	0e 94 d2 4a 	call	0x95a4	; 0x95a4 <getEEPROMHandleInfo>
}
    95f2:	0f 90       	pop	r0
    95f4:	0f 90       	pop	r0
    95f6:	cf 91       	pop	r28
    95f8:	df 91       	pop	r29
    95fa:	08 95       	ret

000095fc <readEEPROMTask>:

/**\ingroup syscall 
Get the EEPROM handle address for read/write. 
*/
void getCurrentEEPROMHandleAddress() __attribute__ ((section(".systemcall.8")))
    __attribute__ ((naked));
void getCurrentEEPROMHandleAddress()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETCURRENTEEPROMHANDLEADDRESS
    getEEPROMHandleInfo_Logger();
#endif
#else
    getEEPROMHandleInfo();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void readEEPROMTask()
{
    95fc:	df 93       	push	r29
    95fe:	cf 93       	push	r28
    9600:	cd b7       	in	r28, 0x3d	; 61
    9602:	de b7       	in	r29, 0x3e	; 62
    genericReadTask();
    9604:	0e 94 73 45 	call	0x8ae6	; 0x8ae6 <genericReadTask>
}
    9608:	cf 91       	pop	r28
    960a:	df 91       	pop	r29
    960c:	08 95       	ret

0000960e <readEEPROMTask_Logger>:

//-------------------------------------------------------------------------
void readEEPROMTask_Logger()
{
    960e:	df 93       	push	r29
    9610:	cf 93       	push	r28
    9612:	00 d0       	rcall	.+0      	; 0x9614 <readEEPROMTask_Logger+0x6>
    9614:	cd b7       	in	r28, 0x3d	; 61
    9616:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9618:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    961c:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    961e:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9622:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9624:	89 81       	ldd	r24, Y+1	; 0x01
    9626:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_READFROMEEPROM, currentindex);
    962a:	86 ec       	ldi	r24, 0xC6	; 198
    962c:	92 e0       	ldi	r25, 0x02	; 2
    962e:	6a 81       	ldd	r22, Y+2	; 0x02
    9630:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    readEEPROMTask();
    9634:	0e 94 fe 4a 	call	0x95fc	; 0x95fc <readEEPROMTask>
}
    9638:	0f 90       	pop	r0
    963a:	0f 90       	pop	r0
    963c:	cf 91       	pop	r28
    963e:	df 91       	pop	r29
    9640:	08 95       	ret

00009642 <writeEEPROMTask>:

/**\ingroup syscall 
Read from EEPROM. 
*/
void readFromEEPROM() __attribute__ ((section(".systemcall.8")))
    __attribute__ ((naked));
void readFromEEPROM()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_READFROMEEPROM
    readEEPROMTask_Logger();
#endif
#else
    readEEPROMTask();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void writeEEPROMTask()
{
    9642:	df 93       	push	r29
    9644:	cf 93       	push	r28
    9646:	cd b7       	in	r28, 0x3d	; 61
    9648:	de b7       	in	r29, 0x3e	; 62
    genericWriteTask();
    964a:	0e 94 64 45 	call	0x8ac8	; 0x8ac8 <genericWriteTask>
}
    964e:	cf 91       	pop	r28
    9650:	df 91       	pop	r29
    9652:	08 95       	ret

00009654 <writeEEPROMTask_Logger>:

//-------------------------------------------------------------------------
void writeEEPROMTask_Logger()
{
    9654:	df 93       	push	r29
    9656:	cf 93       	push	r28
    9658:	00 d0       	rcall	.+0      	; 0x965a <writeEEPROMTask_Logger+0x6>
    965a:	cd b7       	in	r28, 0x3d	; 61
    965c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    965e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9662:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9664:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9668:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    966a:	89 81       	ldd	r24, Y+1	; 0x01
    966c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_WRITETOEEPROM, currentindex);
    9670:	87 ec       	ldi	r24, 0xC7	; 199
    9672:	92 e0       	ldi	r25, 0x02	; 2
    9674:	6a 81       	ldd	r22, Y+2	; 0x02
    9676:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    writeEEPROMTask();
    967a:	0e 94 21 4b 	call	0x9642	; 0x9642 <writeEEPROMTask>
}
    967e:	0f 90       	pop	r0
    9680:	0f 90       	pop	r0
    9682:	cf 91       	pop	r28
    9684:	df 91       	pop	r29
    9686:	08 95       	ret

00009688 <getFilePathAddress_avr>:

/**\ingroup syscall 
Write to EEPROM. 
*/
void writeToEEPROM() __attribute__ ((section(".systemcall.8")))
    __attribute__ ((naked));
void writeToEEPROM()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_WRITETOEEPROM
    writeEEPROMTask_Logger();
#endif
#else
    writeEEPROMTask();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}






 

//-----------------------------------------------------------------------------
//Boundary EE00 File Operations 
//-----------------------------------------------------------------------------


//-------------------------------------------------------------------------
void getFilePathAddress_avr()
{
    9688:	df 93       	push	r29
    968a:	cf 93       	push	r28
    968c:	00 d0       	rcall	.+0      	; 0x968e <getFilePathAddress_avr+0x6>
    968e:	cd b7       	in	r28, 0x3d	; 61
    9690:	de b7       	in	r29, 0x3e	; 62
    void *filepathaddr;

    filepathaddr = getFilePathAddress();
    9692:	0e 94 82 45 	call	0x8b04	; 0x8b04 <getFilePathAddress>
    9696:	9a 83       	std	Y+2, r25	; 0x02
    9698:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0"
    969a:	89 81       	ldd	r24, Y+1	; 0x01
    969c:	9a 81       	ldd	r25, Y+2	; 0x02
    969e:	48 2f       	mov	r20, r24
    96a0:	59 2f       	mov	r21, r25
                  "\n\t"::"r" (filepathaddr));
}
    96a2:	0f 90       	pop	r0
    96a4:	0f 90       	pop	r0
    96a6:	cf 91       	pop	r28
    96a8:	df 91       	pop	r29
    96aa:	08 95       	ret

000096ac <getFilePathAddress_Logger>:

//-------------------------------------------------------------------------
void getFilePathAddress_Logger()
{
    96ac:	df 93       	push	r29
    96ae:	cf 93       	push	r28
    96b0:	00 d0       	rcall	.+0      	; 0x96b2 <getFilePathAddress_Logger+0x6>
    96b2:	cd b7       	in	r28, 0x3d	; 61
    96b4:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    96b6:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    96ba:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    96bc:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    96c0:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    96c2:	89 81       	ldd	r24, Y+1	; 0x01
    96c4:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETFILEPATHADDR, currentindex);
    96c8:	81 e2       	ldi	r24, 0x21	; 33
    96ca:	93 e0       	ldi	r25, 0x03	; 3
    96cc:	6a 81       	ldd	r22, Y+2	; 0x02
    96ce:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    getFilePathAddress_avr();
    96d2:	0e 94 44 4b 	call	0x9688	; 0x9688 <getFilePathAddress_avr>
}
    96d6:	0f 90       	pop	r0
    96d8:	0f 90       	pop	r0
    96da:	cf 91       	pop	r28
    96dc:	df 91       	pop	r29
    96de:	08 95       	ret

000096e0 <getFileModeAddress_avr>:

/**\ingroup syscall 
Get the file path locator, such as /abc/efg, etc. 
*/
void getFilePathAddr() __attribute__ ((section(".systemcall.9")))
    __attribute__ ((naked));
void getFilePathAddr()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETFILEPATHADDR
    getFilePathAddress_Logger();
#endif
#else
    getFilePathAddress_avr();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
void getFileModeAddress_avr()
{
    96e0:	df 93       	push	r29
    96e2:	cf 93       	push	r28
    96e4:	00 d0       	rcall	.+0      	; 0x96e6 <getFileModeAddress_avr+0x6>
    96e6:	cd b7       	in	r28, 0x3d	; 61
    96e8:	de b7       	in	r29, 0x3e	; 62
    void *addr;

    addr = getFileModeAddress();
    96ea:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <getFileModeAddress>
    96ee:	9a 83       	std	Y+2, r25	; 0x02
    96f0:	89 83       	std	Y+1, r24	; 0x01
    asm volatile ("mov r20, %A0" "\n\t" "mov r21, %B0" "\n\t"::"r" (addr));
    96f2:	89 81       	ldd	r24, Y+1	; 0x01
    96f4:	9a 81       	ldd	r25, Y+2	; 0x02
    96f6:	48 2f       	mov	r20, r24
    96f8:	59 2f       	mov	r21, r25
}
    96fa:	0f 90       	pop	r0
    96fc:	0f 90       	pop	r0
    96fe:	cf 91       	pop	r28
    9700:	df 91       	pop	r29
    9702:	08 95       	ret

00009704 <getFileModeAddress_Logger>:

//-------------------------------------------------------------------------
void getFileModeAddress_Logger()
{
    9704:	df 93       	push	r29
    9706:	cf 93       	push	r28
    9708:	00 d0       	rcall	.+0      	; 0x970a <getFileModeAddress_Logger+0x6>
    970a:	cd b7       	in	r28, 0x3d	; 61
    970c:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    970e:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9712:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9714:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9718:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    971a:	89 81       	ldd	r24, Y+1	; 0x01
    971c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_GETFILEMODEADDR, currentindex);
    9720:	82 e2       	ldi	r24, 0x22	; 34
    9722:	93 e0       	ldi	r25, 0x03	; 3
    9724:	6a 81       	ldd	r22, Y+2	; 0x02
    9726:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    getFileModeAddress_avr();
    972a:	0e 94 70 4b 	call	0x96e0	; 0x96e0 <getFileModeAddress_avr>
}
    972e:	0f 90       	pop	r0
    9730:	0f 90       	pop	r0
    9732:	cf 91       	pop	r28
    9734:	df 91       	pop	r29
    9736:	08 95       	ret

00009738 <openFileTask_Logger>:

/**\ingroup syscall 
Get the file mode for read or write. 
*/
void getFileModeAddr() __attribute__ ((section(".systemcall.9")))
    __attribute__ ((naked));
void getFileModeAddr()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_GETFILEMODEADDR
    getFileModeAddress_Logger();
#endif
#else
    getFileModeAddress_avr();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
void openFileTask_Logger()
{
    9738:	df 93       	push	r29
    973a:	cf 93       	push	r28
    973c:	00 d0       	rcall	.+0      	; 0x973e <openFileTask_Logger+0x6>
    973e:	cd b7       	in	r28, 0x3d	; 61
    9740:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9742:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9746:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9748:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    974c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    974e:	89 81       	ldd	r24, Y+1	; 0x01
    9750:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_OPENFILESYSCALL, currentindex);
    9754:	83 e2       	ldi	r24, 0x23	; 35
    9756:	93 e0       	ldi	r25, 0x03	; 3
    9758:	6a 81       	ldd	r22, Y+2	; 0x02
    975a:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    openFileTask();
    975e:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <openFileTask>
}
    9762:	0f 90       	pop	r0
    9764:	0f 90       	pop	r0
    9766:	cf 91       	pop	r28
    9768:	df 91       	pop	r29
    976a:	08 95       	ret

0000976c <closeFileTask_Logger>:

/**\ingroup syscall 
Open a file. The file handle is stored in the current thread table as well as internally by the kernel. 
*/
void openFileSysCall() __attribute__ ((section(".systemcall.9")))
    __attribute__ ((naked));
void openFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_OPENFILESYSCALL
    openFileTask_Logger();
#endif
#else
    openFileTask();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}



//-------------------------------------------------------------------------
void closeFileTask_Logger()
{
    976c:	df 93       	push	r29
    976e:	cf 93       	push	r28
    9770:	00 d0       	rcall	.+0      	; 0x9772 <closeFileTask_Logger+0x6>
    9772:	cd b7       	in	r28, 0x3d	; 61
    9774:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9776:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    977a:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    977c:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    9780:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    9782:	89 81       	ldd	r24, Y+1	; 0x01
    9784:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_CLOSEFILESYSCALL, currentindex);
    9788:	84 e2       	ldi	r24, 0x24	; 36
    978a:	93 e0       	ldi	r25, 0x03	; 3
    978c:	6a 81       	ldd	r22, Y+2	; 0x02
    978e:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    closeFileTask();
    9792:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <closeFileTask>
}
    9796:	0f 90       	pop	r0
    9798:	0f 90       	pop	r0
    979a:	cf 91       	pop	r28
    979c:	df 91       	pop	r29
    979e:	08 95       	ret

000097a0 <readFileTask_Logger>:

/**\ingroup syscall 
Close a file. 
*/
void closeFileSysCall() __attribute__ ((section(".systemcall.9")))
    __attribute__ ((naked));
void closeFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_CLOSEFILESYSCALL
    closeFileTask_Logger();
#endif
#else
    closeFileTask();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void readFileTask_Logger()
{
    97a0:	df 93       	push	r29
    97a2:	cf 93       	push	r28
    97a4:	00 d0       	rcall	.+0      	; 0x97a6 <readFileTask_Logger+0x6>
    97a6:	cd b7       	in	r28, 0x3d	; 61
    97a8:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    97aa:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    97ae:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    97b0:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    97b4:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    97b6:	89 81       	ldd	r24, Y+1	; 0x01
    97b8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_READFILESYSCALL, currentindex);
    97bc:	85 e2       	ldi	r24, 0x25	; 37
    97be:	93 e0       	ldi	r25, 0x03	; 3
    97c0:	6a 81       	ldd	r22, Y+2	; 0x02
    97c2:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    readFileTask();
    97c6:	0e 94 c2 45 	call	0x8b84	; 0x8b84 <readFileTask>
}
    97ca:	0f 90       	pop	r0
    97cc:	0f 90       	pop	r0
    97ce:	cf 91       	pop	r28
    97d0:	df 91       	pop	r29
    97d2:	08 95       	ret

000097d4 <writeFileTask_Logger>:

/**\ingroup syscall 
Read from a file. 
*/
void readFileSysCall() __attribute__ ((section(".systemcall.9")))
    __attribute__ ((naked));
void readFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_READFILESYSCALL
    readFileTask_Logger();
#endif
#else
    readFileTask();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void writeFileTask_Logger()
{
    97d4:	df 93       	push	r29
    97d6:	cf 93       	push	r28
    97d8:	00 d0       	rcall	.+0      	; 0x97da <writeFileTask_Logger+0x6>
    97da:	cd b7       	in	r28, 0x3d	; 61
    97dc:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    97de:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    97e2:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    97e4:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    97e8:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    97ea:	89 81       	ldd	r24, Y+1	; 0x01
    97ec:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_WRITEFILESYSCALL, currentindex);
    97f0:	86 e2       	ldi	r24, 0x26	; 38
    97f2:	93 e0       	ldi	r25, 0x03	; 3
    97f4:	6a 81       	ldd	r22, Y+2	; 0x02
    97f6:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    writeFileTask();
    97fa:	0e 94 a6 45 	call	0x8b4c	; 0x8b4c <writeFileTask>
}
    97fe:	0f 90       	pop	r0
    9800:	0f 90       	pop	r0
    9802:	cf 91       	pop	r28
    9804:	df 91       	pop	r29
    9806:	08 95       	ret

00009808 <seekFileTask_Logger>:

/**\ingroup syscall 
Write to a file. 
*/
void writeFileSysCall() __attribute__ ((section(".systemcall.9")))
    __attribute__ ((naked));
void writeFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_WRITEFILESYSCALL
    writeFileTask_Logger();
#endif
#else
    writeFileTask();
#endif
    asm volatile ("nop"::);
    asm volatile ("ret"::);
}

//-------------------------------------------------------------------------
void seekFileTask_Logger()
{
    9808:	df 93       	push	r29
    980a:	cf 93       	push	r28
    980c:	00 d0       	rcall	.+0      	; 0x980e <seekFileTask_Logger+0x6>
    980e:	cd b7       	in	r28, 0x3d	; 61
    9810:	de b7       	in	r29, 0x3e	; 62
    uint8_t currentindex;
    _atomic_t _atomic = _atomic_start();
    9812:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9816:	89 83       	std	Y+1, r24	; 0x01

    currentindex = getThreadIndexAddress();
    9818:	0e 94 27 1b 	call	0x364e	; 0x364e <getThreadIndexAddress>
    981c:	8a 83       	std	Y+2, r24	; 0x02
    _atomic_end(_atomic);
    981e:	89 81       	ldd	r24, Y+1	; 0x01
    9820:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    addTrace(TRACE_SYSCALL_SEEKFILESYSCALL, currentindex);
    9824:	87 e2       	ldi	r24, 0x27	; 39
    9826:	93 e0       	ldi	r25, 0x03	; 3
    9828:	6a 81       	ldd	r22, Y+2	; 0x02
    982a:	0e 94 48 4c 	call	0x9890	; 0x9890 <addTrace>
    seekFileTask();
    982e:	0e 94 88 45 	call	0x8b10	; 0x8b10 <seekFileTask>
}
    9832:	0f 90       	pop	r0
    9834:	0f 90       	pop	r0
    9836:	cf 91       	pop	r28
    9838:	df 91       	pop	r29
    983a:	08 95       	ret

0000983c <getCurrentThreadAddress>:


//Return the address pointer of the current_thread, (its address, not its value)
thread **getCurrentThreadAddress()
{
    983c:	80 e5       	ldi	r24, 0x50	; 80
    983e:	95 e0       	ldi	r25, 0x05	; 5
    9840:	08 95       	ret

00009842 <getThreadTableStart>:
  thread **addr;

  addr = (thread **) &current_thread;
  return addr;
  //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
  // asm volatile("ret"::); 
}


//Return the address pointer of the current_thread, (its address, not its value)
thread *getThreadTableStart()
{
    9842:	82 e5       	ldi	r24, 0x52	; 82
    9844:	95 e0       	ldi	r25, 0x05	; 5
    9846:	08 95       	ret

00009848 <enabletracingfunction>:
uint32_t timestamp; 


void enabletracingfunction()
{
    9848:	81 e0       	ldi	r24, 0x01	; 1
    984a:	80 93 4b 09 	sts	0x094B, r24
    enabletracing = 1;
}
    984e:	08 95       	ret

00009850 <disabletracingfunction>:

//-------------------------------------------------------------------------
void disabletracingfunction()
{
    9850:	10 92 4b 09 	sts	0x094B, r1
    enabletracing = 0;
}
    9854:	08 95       	ret

00009856 <initTrace>:

//-------------------------------------------------------------------------
void initTrace()
{
    9856:	10 92 48 09 	sts	0x0948, r1
    985a:	10 92 47 09 	sts	0x0947, r1
    internaltracingblock.externaladdtracefp = NULL;
    internaltracingblock.externalapptracefp = NULL;
    985e:	10 92 4a 09 	sts	0x094A, r1
    9862:	10 92 49 09 	sts	0x0949, r1
    enabletracing = 0;
    9866:	10 92 4b 09 	sts	0x094B, r1
}
    986a:	08 95       	ret

0000986c <apptracepointfunction>:


void addTrace(uint16_t traceid, uint8_t threadid)
{
	



    
	  if (threadid==1)
	   return; 
	  timestamp = getCurrentResolution();
    internaltracingblock.internaleventid = traceid;
    internaltracingblock.threadid = threadid;
    internaltracingblock.timestamp = timestamp; 
    if ((internaltracingblock.externaladdtracefp != NULL) && (enabletracing
                                                              == 1))
    {
    	
    	  	  
	  //lib_printf_uinteger32(traceid);
	  //lib_printf_uinteger32(threadid);
    internaltracingblock.externaladdtracefp();
    }
}

void apptracepointfunction() __attribute__ ((naked));
void apptracepointfunction()
{
    986c:	8f 93       	push	r24
    asm volatile ("push r24"::);
    asm volatile ("push r25"::);
    986e:	9f 93       	push	r25
    asm volatile ("push r28"::);
    9870:	cf 93       	push	r28
    asm volatile ("push r29"::);
    9872:	df 93       	push	r29

    if ((internaltracingblock.externalapptracefp != NULL) && (enabletracing
    9874:	e0 91 49 09 	lds	r30, 0x0949
    9878:	f0 91 4a 09 	lds	r31, 0x094A
    987c:	30 97       	sbiw	r30, 0x00	; 0
    987e:	21 f0       	breq	.+8      	; 0x9888 <apptracepointfunction+0x1c>
    9880:	80 91 4b 09 	lds	r24, 0x094B
    9884:	81 30       	cpi	r24, 0x01	; 1
    9886:	01 f0       	breq	.+0      	; 0x9888 <apptracepointfunction+0x1c>
                                                              == 1))
    {
        internaltracingblock.externalapptracefp();
    }
}
    9888:	09 95       	icall

0000988a <getTracingBlockAddress>:
    988a:	80 e4       	ldi	r24, 0x40	; 64
    988c:	99 e0       	ldi	r25, 0x09	; 9
    988e:	08 95       	ret

00009890 <addTrace>:
    9890:	1f 93       	push	r17
    9892:	cf 93       	push	r28
    9894:	df 93       	push	r29
    9896:	ec 01       	movw	r28, r24
    9898:	16 2f       	mov	r17, r22
    989a:	61 30       	cpi	r22, 0x01	; 1
    989c:	11 f1       	breq	.+68     	; 0x98e2 <addTrace+0x52>
    989e:	0e 94 10 37 	call	0x6e20	; 0x6e20 <getCurrentResolution>
    98a2:	60 93 3c 09 	sts	0x093C, r22
    98a6:	70 93 3d 09 	sts	0x093D, r23
    98aa:	80 93 3e 09 	sts	0x093E, r24
    98ae:	90 93 3f 09 	sts	0x093F, r25
    98b2:	d0 93 41 09 	sts	0x0941, r29
    98b6:	c0 93 40 09 	sts	0x0940, r28
    98ba:	10 93 42 09 	sts	0x0942, r17
    98be:	60 93 43 09 	sts	0x0943, r22
    98c2:	70 93 44 09 	sts	0x0944, r23
    98c6:	80 93 45 09 	sts	0x0945, r24
    98ca:	90 93 46 09 	sts	0x0946, r25
    98ce:	e0 91 47 09 	lds	r30, 0x0947
    98d2:	f0 91 48 09 	lds	r31, 0x0948
    98d6:	30 97       	sbiw	r30, 0x00	; 0
    98d8:	21 f0       	breq	.+8      	; 0x98e2 <addTrace+0x52>
    98da:	80 91 4b 09 	lds	r24, 0x094B
    98de:	81 30       	cpi	r24, 0x01	; 1
    98e0:	21 f0       	breq	.+8      	; 0x98ea <addTrace+0x5a>
    98e2:	df 91       	pop	r29
    98e4:	cf 91       	pop	r28
    98e6:	1f 91       	pop	r17
    98e8:	08 95       	ret
    98ea:	09 95       	icall
    98ec:	fa cf       	rjmp	.-12     	; 0x98e2 <addTrace+0x52>

000098ee <lib_get_accy>:
}


int lib_get_accy()
{
    98ee:	0f 93       	push	r16
    98f0:	1f 93       	push	r17
   lib_thread** current_thread; 
   void (*fp)() = (void (*)(void))ADC_READ_ACCY;
   current_thread = lib_get_current_thread();    
    98f2:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    98f6:	8c 01       	movw	r16, r24
   fp(); 
    98f8:	e4 e1       	ldi	r30, 0x14	; 20
    98fa:	fd ee       	ldi	r31, 0xED	; 237
    98fc:	09 95       	icall
   return (*current_thread)->data.adcstate.adcreading;  
    98fe:	d8 01       	movw	r26, r16
    9900:	ed 91       	ld	r30, X+
    9902:	fc 91       	ld	r31, X
    9904:	25 8d       	ldd	r18, Z+29	; 0x1d
    9906:	36 8d       	ldd	r19, Z+30	; 0x1e
}
    9908:	c9 01       	movw	r24, r18
    990a:	1f 91       	pop	r17
    990c:	0f 91       	pop	r16
    990e:	08 95       	ret

00009910 <lib_get_accx>:
    9910:	0f 93       	push	r16
    9912:	1f 93       	push	r17
    9914:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    9918:	8c 01       	movw	r16, r24
    991a:	e0 e1       	ldi	r30, 0x10	; 16
    991c:	fd ee       	ldi	r31, 0xED	; 237
    991e:	09 95       	icall
    9920:	d8 01       	movw	r26, r16
    9922:	ed 91       	ld	r30, X+
    9924:	fc 91       	ld	r31, X
    9926:	25 8d       	ldd	r18, Z+29	; 0x1d
    9928:	36 8d       	ldd	r19, Z+30	; 0x1e
    992a:	c9 01       	movw	r24, r18
    992c:	1f 91       	pop	r17
    992e:	0f 91       	pop	r16
    9930:	08 95       	ret

00009932 <lib_get_temp>:
    9932:	0f 93       	push	r16
    9934:	1f 93       	push	r17
    9936:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    993a:	8c 01       	movw	r16, r24
    993c:	e4 e0       	ldi	r30, 0x04	; 4
    993e:	fd ee       	ldi	r31, 0xED	; 237
    9940:	09 95       	icall
    9942:	d8 01       	movw	r26, r16
    9944:	ed 91       	ld	r30, X+
    9946:	fc 91       	ld	r31, X
    9948:	25 8d       	ldd	r18, Z+29	; 0x1d
    994a:	36 8d       	ldd	r19, Z+30	; 0x1e
    994c:	c9 01       	movw	r24, r18
    994e:	1f 91       	pop	r17
    9950:	0f 91       	pop	r16
    9952:	08 95       	ret

00009954 <lib_get_light>:
    9954:	0f 93       	push	r16
    9956:	1f 93       	push	r17
    9958:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    995c:	8c 01       	movw	r16, r24
    995e:	e0 e0       	ldi	r30, 0x00	; 0
    9960:	fd ee       	ldi	r31, 0xED	; 237
    9962:	09 95       	icall
    9964:	d8 01       	movw	r26, r16
    9966:	ed 91       	ld	r30, X+
    9968:	fc 91       	ld	r31, X
    996a:	25 8d       	ldd	r18, Z+29	; 0x1d
    996c:	36 8d       	ldd	r19, Z+30	; 0x1e
    996e:	c9 01       	movw	r24, r18
    9970:	1f 91       	pop	r17
    9972:	0f 91       	pop	r16
    9974:	08 95       	ret

00009976 <lib_get_magy>:
    9976:	ff 92       	push	r15
    9978:	0f 93       	push	r16
    997a:	1f 93       	push	r17
    997c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9980:	f8 2e       	mov	r15, r24
    9982:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    9986:	8c 01       	movw	r16, r24
    9988:	ec e0       	ldi	r30, 0x0C	; 12
    998a:	fd ee       	ldi	r31, 0xED	; 237
    998c:	09 95       	icall
    998e:	8f 2d       	mov	r24, r15
    9990:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    9994:	d8 01       	movw	r26, r16
    9996:	ed 91       	ld	r30, X+
    9998:	fc 91       	ld	r31, X
    999a:	25 8d       	ldd	r18, Z+29	; 0x1d
    999c:	36 8d       	ldd	r19, Z+30	; 0x1e
    999e:	c9 01       	movw	r24, r18
    99a0:	1f 91       	pop	r17
    99a2:	0f 91       	pop	r16
    99a4:	ff 90       	pop	r15
    99a6:	08 95       	ret

000099a8 <lib_get_magx>:
    99a8:	ff 92       	push	r15
    99aa:	0f 93       	push	r16
    99ac:	1f 93       	push	r17
    99ae:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    99b2:	f8 2e       	mov	r15, r24
    99b4:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    99b8:	8c 01       	movw	r16, r24
    99ba:	e8 e0       	ldi	r30, 0x08	; 8
    99bc:	fd ee       	ldi	r31, 0xED	; 237
    99be:	09 95       	icall
    99c0:	8f 2d       	mov	r24, r15
    99c2:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    99c6:	d8 01       	movw	r26, r16
    99c8:	ed 91       	ld	r30, X+
    99ca:	fc 91       	ld	r31, X
    99cc:	25 8d       	ldd	r18, Z+29	; 0x1d
    99ce:	36 8d       	ldd	r19, Z+30	; 0x1e
    99d0:	c9 01       	movw	r24, r18
    99d2:	1f 91       	pop	r17
    99d4:	0f 91       	pop	r16
    99d6:	ff 90       	pop	r15
    99d8:	08 95       	ret

000099da <getCurrentEEPROMInfo>:



genericByteStorageHandle *getCurrentEEPROMInfo()
{
    99da:	4f 93       	push	r20
    99dc:	5f 93       	push	r21
   genericByteStorageHandle *currenteeprominfoaddr;

   void (*getaddrfp)(void) = (void (*)(void))GET_EEPROM_STRUCTURE_HANDLE;

   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();
    99de:	e0 e8       	ldi	r30, 0x80	; 128
    99e0:	fd ee       	ldi	r31, 0xED	; 237
    99e2:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    99e4:	24 2f       	mov	r18, r20
    99e6:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (currenteeprominfoaddr)
				 :
                );
    asm volatile("pop r21" "\n\t"
    99e8:	5f 91       	pop	r21
    99ea:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currenteeprominfoaddr;
}
    99ec:	c9 01       	movw	r24, r18
    99ee:	08 95       	ret

000099f0 <lib_writeToEEPROM>:




//Turn off the interrupt, access the location, and use system call to implement poll based imlementation provided by avr libc

void lib_read_from_eeprom(uint16_t addr, uint16_t nBytes, uint8_t *buffer)
{


	_atomic_t currentatomic;

	currentatomic = _atomic_start();


    genericByteStorageHandle *eeprominfoaddr;
    eeprominfoaddr = getCurrentEEPROMInfo();

	void (*getaddrfp)(void) = (void (*)(void))READ_EEPROM_TASK;

    eeprominfoaddr-> addr = addr;
   	eeprominfoaddr-> nBytes = nBytes;
   	eeprominfoaddr-> buffer = buffer;


    getaddrfp();

	_atomic_end(currentatomic);
}




//Turn off the interrupt, access the location, and use system call to implement poll based implementation provided by avr libc

void lib_writeToEEPROM(uint16_t addr, uint16_t nBytes, uint8_t *buffer)
{
    99f0:	bf 92       	push	r11
    99f2:	cf 92       	push	r12
    99f4:	df 92       	push	r13
    99f6:	ef 92       	push	r14
    99f8:	ff 92       	push	r15
    99fa:	0f 93       	push	r16
    99fc:	1f 93       	push	r17
    99fe:	8c 01       	movw	r16, r24
    9a00:	7b 01       	movw	r14, r22
    9a02:	6a 01       	movw	r12, r20

	_atomic_t currentatomic;

	currentatomic = _atomic_start();
    9a04:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9a08:	b8 2e       	mov	r11, r24

    genericByteStorageHandle *eeprominfoaddr;
    eeprominfoaddr = getCurrentEEPROMInfo();
    9a0a:	0e 94 ed 4c 	call	0x99da	; 0x99da <getCurrentEEPROMInfo>
    9a0e:	fc 01       	movw	r30, r24

	void (*getaddrfp)(void) = (void (*)(void))WRITE_EEPROM_TASK;

    eeprominfoaddr-> addr = addr;
    9a10:	11 83       	std	Z+1, r17	; 0x01
    9a12:	00 83       	st	Z, r16
	  eeprominfoaddr-> nBytes = nBytes;
    9a14:	f3 82       	std	Z+3, r15	; 0x03
    9a16:	e2 82       	std	Z+2, r14	; 0x02
	  eeprominfoaddr-> buffer = buffer;
    9a18:	d5 82       	std	Z+5, r13	; 0x05
    9a1a:	c4 82       	std	Z+4, r12	; 0x04


    getaddrfp();
    9a1c:	e8 e8       	ldi	r30, 0x88	; 136
    9a1e:	fd ee       	ldi	r31, 0xED	; 237
    9a20:	09 95       	icall

	_atomic_end(currentatomic);
    9a22:	8b 2d       	mov	r24, r11
    9a24:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>


}
    9a28:	1f 91       	pop	r17
    9a2a:	0f 91       	pop	r16
    9a2c:	ff 90       	pop	r15
    9a2e:	ef 90       	pop	r14
    9a30:	df 90       	pop	r13
    9a32:	cf 90       	pop	r12
    9a34:	bf 90       	pop	r11
    9a36:	08 95       	ret

00009a38 <lib_read_from_eeprom>:
    9a38:	bf 92       	push	r11
    9a3a:	cf 92       	push	r12
    9a3c:	df 92       	push	r13
    9a3e:	ef 92       	push	r14
    9a40:	ff 92       	push	r15
    9a42:	0f 93       	push	r16
    9a44:	1f 93       	push	r17
    9a46:	8c 01       	movw	r16, r24
    9a48:	7b 01       	movw	r14, r22
    9a4a:	6a 01       	movw	r12, r20
    9a4c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9a50:	b8 2e       	mov	r11, r24
    9a52:	0e 94 ed 4c 	call	0x99da	; 0x99da <getCurrentEEPROMInfo>
    9a56:	fc 01       	movw	r30, r24
    9a58:	11 83       	std	Z+1, r17	; 0x01
    9a5a:	00 83       	st	Z, r16
    9a5c:	f3 82       	std	Z+3, r15	; 0x03
    9a5e:	e2 82       	std	Z+2, r14	; 0x02
    9a60:	d5 82       	std	Z+5, r13	; 0x05
    9a62:	c4 82       	std	Z+4, r12	; 0x04
    9a64:	e4 e8       	ldi	r30, 0x84	; 132
    9a66:	fd ee       	ldi	r31, 0xED	; 237
    9a68:	09 95       	icall
    9a6a:	8b 2d       	mov	r24, r11
    9a6c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    9a70:	1f 91       	pop	r17
    9a72:	0f 91       	pop	r16
    9a74:	ff 90       	pop	r15
    9a76:	ef 90       	pop	r14
    9a78:	df 90       	pop	r13
    9a7a:	cf 90       	pop	r12
    9a7c:	bf 90       	pop	r11
    9a7e:	08 95       	ret

00009a80 <lib_get_file_path_address>:
#include "libmutex.h"


char *lib_get_file_path_address()
{
    9a80:	4f 93       	push	r20
    9a82:	5f 93       	push	r21
   char *pathaddr;
   void (*getaddrfp)(void) = (void (*)(void))GET_FILE_PATH_ADDRESS;
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9a84:	e0 e0       	ldi	r30, 0x00	; 0
    9a86:	fe ee       	ldi	r31, 0xEE	; 238
    9a88:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9a8a:	24 2f       	mov	r18, r20
    9a8c:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (pathaddr)
				 :);
    asm volatile("pop r21" "\n\t"
    9a8e:	5f 91       	pop	r21
    9a90:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
    return pathaddr;
}
    9a92:	c9 01       	movw	r24, r18
    9a94:	08 95       	ret

00009a96 <lib_get_file_mode_address>:



char *lib_get_file_mode_address()

{
    9a96:	4f 93       	push	r20
    9a98:	5f 93       	push	r21
   char *modeaddr;
   void (*getaddrfp)(void) = (void (*)(void))GET_FILE_MODE_ADDRESS;
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9a9a:	e4 e0       	ldi	r30, 0x04	; 4
    9a9c:	fe ee       	ldi	r31, 0xEE	; 238
    9a9e:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9aa0:	24 2f       	mov	r18, r20
    9aa2:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (modeaddr)
				 :);
    asm volatile("pop r21" "\n\t"
    9aa4:	5f 91       	pop	r21
    9aa6:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
    return modeaddr;
}
    9aa8:	c9 01       	movw	r24, r18
    9aaa:	08 95       	ret

00009aac <lib_open_file_syscall>:




void lib_open_file_syscall()
{
    9aac:	e8 e0       	ldi	r30, 0x08	; 8
    9aae:	fe ee       	ldi	r31, 0xEE	; 238
    9ab0:	09 95       	icall
 void (*filefp)() = (void (*)(void))OPEN_FILE_SYSCALL;
 filefp();
}
    9ab2:	08 95       	ret

00009ab4 <lib_close_file_syscall>:



void lib_close_file_syscall()
{
    9ab4:	ec e0       	ldi	r30, 0x0C	; 12
    9ab6:	fe ee       	ldi	r31, 0xEE	; 238
    9ab8:	09 95       	icall
 void (*filefp)() = (void (*)(void))CLOSE_FILE_SYSCALL;
 filefp();
}
    9aba:	08 95       	ret

00009abc <lib_read_file_syscall>:


void lib_read_file_syscall()
{
    9abc:	e0 e1       	ldi	r30, 0x10	; 16
    9abe:	fe ee       	ldi	r31, 0xEE	; 238
    9ac0:	09 95       	icall
 void (*filefp)() = (void (*)(void))READ_FILE_SYSCALL;
 filefp();
}
    9ac2:	08 95       	ret

00009ac4 <lib_write_file_syscall>:



void lib_write_file_syscall()
{
    9ac4:	e4 e1       	ldi	r30, 0x14	; 20
    9ac6:	fe ee       	ldi	r31, 0xEE	; 238
    9ac8:	09 95       	icall
 void (*filefp)() = (void (*)(void))WRITE_FILE_SYSCALL;
 filefp();
}
    9aca:	08 95       	ret

00009acc <lib_seek_file_syscall>:



void lib_seek_file_syscall()
{
    9acc:	e8 e1       	ldi	r30, 0x18	; 24
    9ace:	fe ee       	ldi	r31, 0xEE	; 238
    9ad0:	09 95       	icall
 void (*filefp)() = (void (*)(void))SEEK_FILE_SYSCALL;
 filefp();
}
    9ad2:	08 95       	ret

00009ad4 <lib_mfseek>:




LIB_MYFILE *lib_mfopen(const char *pathname, const char *mode)
{
   char *commonpathnameaddr;

   char *commonmodeaddr;

   uint8_t currentthreadindex;

   lib_thread** current_thread;


   current_thread = lib_get_current_thread();

   currentthreadindex = lib_get_current_thread_index();

   commonpathnameaddr =  lib_get_file_path_address();

   commonmodeaddr = lib_get_file_mode_address();


   lib_mystrcpy(commonpathnameaddr, pathname);
   lib_mystrcpy(commonmodeaddr, mode);

   lib_open_file_syscall();

   lib_file_barrier_block(7, 1);

   return (LIB_MYFILE *)((*current_thread)->filedata.filestate.fileptr);
}



void lib_mfclose(LIB_MYFILE *fp)
{
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
   currentthreadindex = lib_get_current_thread_index();


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
   lib_close_file_syscall();

   lib_file_barrier_block(7, 2);

   return;

}

void lib_mfread(LIB_MYFILE *fp, void *buffer, int nBytes)
{
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
   currentthreadindex = lib_get_current_thread_index();


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
   (*current_thread)->filedata.filestate.bytes = nBytes;

   lib_read_file_syscall();

   lib_file_barrier_block(7, 3);

   return;

}



void lib_mfwrite(LIB_MYFILE *fp, void *buffer, int nBytes)
{
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
   currentthreadindex = lib_get_current_thread_index();
   
  
     
  


   (*current_thread)->filedata.filestate.fileptr = (uint8_t*)fp;
   (*current_thread)->filedata.filestate.bufferptr = (uint8_t*)buffer;
   (*current_thread)->filedata.filestate.bytes = nBytes;

   lib_write_file_syscall();

   lib_file_barrier_block(7, 4);
   
   
 

   return;
}


void lib_mfwrite_withoutlength(LIB_MYFILE *fp, void *buffer)
{


   uint8_t length;

   length = (uint8_t)lib_string_length((char*)buffer);

   lib_mfwrite(fp, buffer, length);

   return;
}






void lib_mfseek(LIB_MYFILE *fp, int offset, int position)
{
    9ad4:	af 92       	push	r10
    9ad6:	bf 92       	push	r11
    9ad8:	cf 92       	push	r12
    9ada:	df 92       	push	r13
    9adc:	ef 92       	push	r14
    9ade:	ff 92       	push	r15
    9ae0:	0f 93       	push	r16
    9ae2:	1f 93       	push	r17
    9ae4:	b8 2e       	mov	r11, r24
    9ae6:	a9 2e       	mov	r10, r25
    9ae8:	7b 01       	movw	r14, r22
    9aea:	6a 01       	movw	r12, r20
   uint8_t currentthreadindex;
   lib_thread** current_thread;

   current_thread = lib_get_current_thread();
    9aec:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    9af0:	8c 01       	movw	r16, r24
   currentthreadindex = lib_get_current_thread_index();
    9af2:	0e 94 94 53 	call	0xa728	; 0xa728 <lib_get_current_thread_index>

   (*current_thread)->filedata.fileseekstate.fileptr = (uint8_t*)fp;
    9af6:	d8 01       	movw	r26, r16
    9af8:	ed 91       	ld	r30, X+
    9afa:	fc 91       	ld	r31, X
    9afc:	11 97       	sbiw	r26, 0x01	; 1
    9afe:	8b 2d       	mov	r24, r11
    9b00:	9a 2d       	mov	r25, r10
    9b02:	92 a3       	std	Z+34, r25	; 0x22
    9b04:	81 a3       	std	Z+33, r24	; 0x21
   (*current_thread)->filedata.fileseekstate.offset = offset;
    9b06:	ed 91       	ld	r30, X+
    9b08:	fc 91       	ld	r31, X
    9b0a:	11 97       	sbiw	r26, 0x01	; 1
    9b0c:	f4 a2       	std	Z+36, r15	; 0x24
    9b0e:	e3 a2       	std	Z+35, r14	; 0x23
   (*current_thread)->filedata.fileseekstate.position = position;
    9b10:	ed 91       	ld	r30, X+
    9b12:	fc 91       	ld	r31, X
    9b14:	d6 a2       	std	Z+38, r13	; 0x26
    9b16:	c5 a2       	std	Z+37, r12	; 0x25
    9b18:	e8 e1       	ldi	r30, 0x18	; 24
    9b1a:	fe ee       	ldi	r31, 0xEE	; 238
    9b1c:	09 95       	icall

   lib_seek_file_syscall();

   return;



}
    9b1e:	1f 91       	pop	r17
    9b20:	0f 91       	pop	r16
    9b22:	ff 90       	pop	r15
    9b24:	ef 90       	pop	r14
    9b26:	df 90       	pop	r13
    9b28:	cf 90       	pop	r12
    9b2a:	bf 90       	pop	r11
    9b2c:	af 90       	pop	r10
    9b2e:	08 95       	ret

00009b30 <lib_mfwrite>:
    9b30:	af 92       	push	r10
    9b32:	bf 92       	push	r11
    9b34:	cf 92       	push	r12
    9b36:	df 92       	push	r13
    9b38:	ef 92       	push	r14
    9b3a:	ff 92       	push	r15
    9b3c:	0f 93       	push	r16
    9b3e:	1f 93       	push	r17
    9b40:	f8 2e       	mov	r15, r24
    9b42:	e9 2e       	mov	r14, r25
    9b44:	d6 2e       	mov	r13, r22
    9b46:	c7 2e       	mov	r12, r23
    9b48:	b4 2e       	mov	r11, r20
    9b4a:	a5 2e       	mov	r10, r21
    9b4c:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    9b50:	8c 01       	movw	r16, r24
    9b52:	0e 94 94 53 	call	0xa728	; 0xa728 <lib_get_current_thread_index>
    9b56:	d8 01       	movw	r26, r16
    9b58:	ed 91       	ld	r30, X+
    9b5a:	fc 91       	ld	r31, X
    9b5c:	11 97       	sbiw	r26, 0x01	; 1
    9b5e:	8f 2d       	mov	r24, r15
    9b60:	9e 2d       	mov	r25, r14
    9b62:	92 a3       	std	Z+34, r25	; 0x22
    9b64:	81 a3       	std	Z+33, r24	; 0x21
    9b66:	ed 91       	ld	r30, X+
    9b68:	fc 91       	ld	r31, X
    9b6a:	11 97       	sbiw	r26, 0x01	; 1
    9b6c:	8d 2d       	mov	r24, r13
    9b6e:	9c 2d       	mov	r25, r12
    9b70:	94 a3       	std	Z+36, r25	; 0x24
    9b72:	83 a3       	std	Z+35, r24	; 0x23
    9b74:	ed 91       	ld	r30, X+
    9b76:	fc 91       	ld	r31, X
    9b78:	8b 2d       	mov	r24, r11
    9b7a:	9a 2d       	mov	r25, r10
    9b7c:	96 a3       	std	Z+38, r25	; 0x26
    9b7e:	85 a3       	std	Z+37, r24	; 0x25
    9b80:	e4 e1       	ldi	r30, 0x14	; 20
    9b82:	fe ee       	ldi	r31, 0xEE	; 238
    9b84:	09 95       	icall
    9b86:	87 e0       	ldi	r24, 0x07	; 7
    9b88:	64 e0       	ldi	r22, 0x04	; 4
    9b8a:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <lib_file_barrier_block>
    9b8e:	1f 91       	pop	r17
    9b90:	0f 91       	pop	r16
    9b92:	ff 90       	pop	r15
    9b94:	ef 90       	pop	r14
    9b96:	df 90       	pop	r13
    9b98:	cf 90       	pop	r12
    9b9a:	bf 90       	pop	r11
    9b9c:	af 90       	pop	r10
    9b9e:	08 95       	ret

00009ba0 <lib_mfwrite_withoutlength>:
    9ba0:	ef 92       	push	r14
    9ba2:	ff 92       	push	r15
    9ba4:	0f 93       	push	r16
    9ba6:	1f 93       	push	r17
    9ba8:	8c 01       	movw	r16, r24
    9baa:	7b 01       	movw	r14, r22
    9bac:	cb 01       	movw	r24, r22
    9bae:	0e 94 4b 52 	call	0xa496	; 0xa496 <lib_string_length>
    9bb2:	48 2f       	mov	r20, r24
    9bb4:	c8 01       	movw	r24, r16
    9bb6:	b7 01       	movw	r22, r14
    9bb8:	50 e0       	ldi	r21, 0x00	; 0
    9bba:	0e 94 98 4d 	call	0x9b30	; 0x9b30 <lib_mfwrite>
    9bbe:	1f 91       	pop	r17
    9bc0:	0f 91       	pop	r16
    9bc2:	ff 90       	pop	r15
    9bc4:	ef 90       	pop	r14
    9bc6:	08 95       	ret

00009bc8 <lib_mfread>:
    9bc8:	af 92       	push	r10
    9bca:	bf 92       	push	r11
    9bcc:	cf 92       	push	r12
    9bce:	df 92       	push	r13
    9bd0:	ef 92       	push	r14
    9bd2:	ff 92       	push	r15
    9bd4:	0f 93       	push	r16
    9bd6:	1f 93       	push	r17
    9bd8:	f8 2e       	mov	r15, r24
    9bda:	e9 2e       	mov	r14, r25
    9bdc:	d6 2e       	mov	r13, r22
    9bde:	c7 2e       	mov	r12, r23
    9be0:	b4 2e       	mov	r11, r20
    9be2:	a5 2e       	mov	r10, r21
    9be4:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    9be8:	8c 01       	movw	r16, r24
    9bea:	0e 94 94 53 	call	0xa728	; 0xa728 <lib_get_current_thread_index>
    9bee:	d8 01       	movw	r26, r16
    9bf0:	ed 91       	ld	r30, X+
    9bf2:	fc 91       	ld	r31, X
    9bf4:	11 97       	sbiw	r26, 0x01	; 1
    9bf6:	8f 2d       	mov	r24, r15
    9bf8:	9e 2d       	mov	r25, r14
    9bfa:	92 a3       	std	Z+34, r25	; 0x22
    9bfc:	81 a3       	std	Z+33, r24	; 0x21
    9bfe:	ed 91       	ld	r30, X+
    9c00:	fc 91       	ld	r31, X
    9c02:	11 97       	sbiw	r26, 0x01	; 1
    9c04:	8d 2d       	mov	r24, r13
    9c06:	9c 2d       	mov	r25, r12
    9c08:	94 a3       	std	Z+36, r25	; 0x24
    9c0a:	83 a3       	std	Z+35, r24	; 0x23
    9c0c:	ed 91       	ld	r30, X+
    9c0e:	fc 91       	ld	r31, X
    9c10:	8b 2d       	mov	r24, r11
    9c12:	9a 2d       	mov	r25, r10
    9c14:	96 a3       	std	Z+38, r25	; 0x26
    9c16:	85 a3       	std	Z+37, r24	; 0x25
    9c18:	e0 e1       	ldi	r30, 0x10	; 16
    9c1a:	fe ee       	ldi	r31, 0xEE	; 238
    9c1c:	09 95       	icall
    9c1e:	87 e0       	ldi	r24, 0x07	; 7
    9c20:	63 e0       	ldi	r22, 0x03	; 3
    9c22:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <lib_file_barrier_block>
    9c26:	1f 91       	pop	r17
    9c28:	0f 91       	pop	r16
    9c2a:	ff 90       	pop	r15
    9c2c:	ef 90       	pop	r14
    9c2e:	df 90       	pop	r13
    9c30:	cf 90       	pop	r12
    9c32:	bf 90       	pop	r11
    9c34:	af 90       	pop	r10
    9c36:	08 95       	ret

00009c38 <lib_mfclose>:
    9c38:	ef 92       	push	r14
    9c3a:	ff 92       	push	r15
    9c3c:	0f 93       	push	r16
    9c3e:	1f 93       	push	r17
    9c40:	f8 2e       	mov	r15, r24
    9c42:	e9 2e       	mov	r14, r25
    9c44:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    9c48:	8c 01       	movw	r16, r24
    9c4a:	0e 94 94 53 	call	0xa728	; 0xa728 <lib_get_current_thread_index>
    9c4e:	d8 01       	movw	r26, r16
    9c50:	ed 91       	ld	r30, X+
    9c52:	fc 91       	ld	r31, X
    9c54:	8f 2d       	mov	r24, r15
    9c56:	9e 2d       	mov	r25, r14
    9c58:	92 a3       	std	Z+34, r25	; 0x22
    9c5a:	81 a3       	std	Z+33, r24	; 0x21
    9c5c:	ec e0       	ldi	r30, 0x0C	; 12
    9c5e:	fe ee       	ldi	r31, 0xEE	; 238
    9c60:	09 95       	icall
    9c62:	87 e0       	ldi	r24, 0x07	; 7
    9c64:	62 e0       	ldi	r22, 0x02	; 2
    9c66:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <lib_file_barrier_block>
    9c6a:	1f 91       	pop	r17
    9c6c:	0f 91       	pop	r16
    9c6e:	ff 90       	pop	r15
    9c70:	ef 90       	pop	r14
    9c72:	08 95       	ret

00009c74 <lib_mfopen>:
    9c74:	8f 92       	push	r8
    9c76:	9f 92       	push	r9
    9c78:	af 92       	push	r10
    9c7a:	bf 92       	push	r11
    9c7c:	cf 92       	push	r12
    9c7e:	df 92       	push	r13
    9c80:	ef 92       	push	r14
    9c82:	ff 92       	push	r15
    9c84:	0f 93       	push	r16
    9c86:	1f 93       	push	r17
    9c88:	6c 01       	movw	r12, r24
    9c8a:	5b 01       	movw	r10, r22
    9c8c:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    9c90:	4c 01       	movw	r8, r24
    9c92:	0e 94 94 53 	call	0xa728	; 0xa728 <lib_get_current_thread_index>
    9c96:	0e 94 40 4d 	call	0x9a80	; 0x9a80 <lib_get_file_path_address>
    9c9a:	8c 01       	movw	r16, r24
    9c9c:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <lib_get_file_mode_address>
    9ca0:	7c 01       	movw	r14, r24
    9ca2:	c8 01       	movw	r24, r16
    9ca4:	b6 01       	movw	r22, r12
    9ca6:	0e 94 76 52 	call	0xa4ec	; 0xa4ec <lib_mystrcpy>
    9caa:	c7 01       	movw	r24, r14
    9cac:	b5 01       	movw	r22, r10
    9cae:	0e 94 76 52 	call	0xa4ec	; 0xa4ec <lib_mystrcpy>
    9cb2:	e8 e0       	ldi	r30, 0x08	; 8
    9cb4:	fe ee       	ldi	r31, 0xEE	; 238
    9cb6:	09 95       	icall
    9cb8:	87 e0       	ldi	r24, 0x07	; 7
    9cba:	61 e0       	ldi	r22, 0x01	; 1
    9cbc:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <lib_file_barrier_block>
    9cc0:	d4 01       	movw	r26, r8
    9cc2:	ed 91       	ld	r30, X+
    9cc4:	fc 91       	ld	r31, X
    9cc6:	21 a1       	ldd	r18, Z+33	; 0x21
    9cc8:	32 a1       	ldd	r19, Z+34	; 0x22
    9cca:	c9 01       	movw	r24, r18
    9ccc:	1f 91       	pop	r17
    9cce:	0f 91       	pop	r16
    9cd0:	ff 90       	pop	r15
    9cd2:	ef 90       	pop	r14
    9cd4:	df 90       	pop	r13
    9cd6:	cf 90       	pop	r12
    9cd8:	bf 90       	pop	r11
    9cda:	af 90       	pop	r10
    9cdc:	9f 90       	pop	r9
    9cde:	8f 90       	pop	r8
    9ce0:	08 95       	ret

00009ce2 <lib_green_toggle>:
#include "libleds.h"
#include "liteoscommon.h"
#include "../types/types.h"
void lib_green_toggle()
{
    9ce2:	e8 e8       	ldi	r30, 0x88	; 136
    9ce4:	fc ee       	ldi	r31, 0xEC	; 236
    9ce6:	09 95       	icall
 void (*greenfp)() = (void (*)(void))GREEN_LED_TOGGLE_FUNCTION; 
 greenfp();                              



}
    9ce8:	08 95       	ret

00009cea <lib_red_toggle>:

void lib_red_toggle()
{
    9cea:	e0 e8       	ldi	r30, 0x80	; 128
    9cec:	fc ee       	ldi	r31, 0xEC	; 236
    9cee:	09 95       	icall
                          
  void (*redfp)() = (void (*)(void))RED_LED_TOGGLE_FUNCTION; 
  redfp();    
}
    9cf0:	08 95       	ret

00009cf2 <lib_yellow_toggle>:


void lib_yellow_toggle()
{
    9cf2:	e4 e8       	ldi	r30, 0x84	; 132
    9cf4:	fc ee       	ldi	r31, 0xEC	; 236
    9cf6:	09 95       	icall
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_TOGGLE_FUNCTION; 
  yellowfp();    
}
    9cf8:	08 95       	ret

00009cfa <lib_red_on>:



void lib_red_on()
{
    9cfa:	ec e8       	ldi	r30, 0x8C	; 140
    9cfc:	fc ee       	ldi	r31, 0xEC	; 236
    9cfe:	09 95       	icall
                          
  void (*redfp)() = (void (*)(void))RED_ON_FUNCTION; 
  redfp();    
}
    9d00:	08 95       	ret

00009d02 <lib_red_off>:



void lib_red_off()
{
    9d02:	e0 e9       	ldi	r30, 0x90	; 144
    9d04:	fc ee       	ldi	r31, 0xEC	; 236
    9d06:	09 95       	icall
                          
  void (*redfp)() = (void (*)(void))RED_OFF_FUNCTION; 
  redfp();    
}
    9d08:	08 95       	ret

00009d0a <lib_green_on>:



void lib_green_on()
{
    9d0a:	ec e9       	ldi	r30, 0x9C	; 156
    9d0c:	fc ee       	ldi	r31, 0xEC	; 236
    9d0e:	09 95       	icall
                          
  void (*greenfp)() = (void (*)(void))GREEN_ON_FUNCTION; 
  greenfp();    
}
    9d10:	08 95       	ret

00009d12 <lib_green_off>:


void lib_green_off()
{
    9d12:	e0 ea       	ldi	r30, 0xA0	; 160
    9d14:	fc ee       	ldi	r31, 0xEC	; 236
    9d16:	09 95       	icall
                          
  void (*greenfp)() = (void (*)(void))GREEN_OFF_FUNCTION; 
  greenfp();    
}
    9d18:	08 95       	ret

00009d1a <lib_yellow_on>:

void lib_yellow_on()
{
    9d1a:	e4 e9       	ldi	r30, 0x94	; 148
    9d1c:	fc ee       	ldi	r31, 0xEC	; 236
    9d1e:	09 95       	icall
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_ON_FUNCTION; 
  yellowfp();    
}
    9d20:	08 95       	ret

00009d22 <lib_yellow_off>:

void lib_yellow_off()
{
    9d22:	e8 e9       	ldi	r30, 0x98	; 152
    9d24:	fc ee       	ldi	r31, 0xEC	; 236
    9d26:	09 95       	icall
                          
  void (*yellowfp)() = (void (*)(void))YELLOW_OFF_FUNCTION; 
  yellowfp();    
}
    9d28:	08 95       	ret

00009d2a <lib_radio_send_msg_syscall>:

lib_thread* mythread;

void lib_radio_send_msg_syscall()
{
    9d2a:	e0 e1       	ldi	r30, 0x10	; 16
    9d2c:	fc ee       	ldi	r31, 0xEC	; 236
    9d2e:	09 95       	icall
 void (*radiosendfp)() = (void (*)(void))SOCKET_RADIO_SEND_FUNCTION;
 radiosendfp();
}
    9d30:	08 95       	ret

00009d32 <lib_get_current_radio_receive_handle_addr>:

//This function sends out a string

void lib_radio_send_string(uint8_t *msg)
{
    uint8_t temp = (uint8_t)lib_string_length((char *)msg);
 #ifdef ENERGY_INSTRUMENTATION
 return lib_radio_send_energy_wrapper(1, 0xffff, temp, msg);
 #else
	return lib_radio_send_msg(1, 0xffff, temp, msg);
 #endif
}

void lib_radio_send_integer_u16(uint16_t value)
{
  uint8_t temp1,temp2;
  temp1 = (uint8_t) (value >> 8);
  temp2 = (uint8_t) (value & 0x00ff);

  buffer[0] = temp1;
  buffer[1] = temp2;
  buffer[2] = buffer[3] = 0xee;

  return lib_radio_send_msg(12, 0xffff, 16, buffer);
}

radiohandletype *lib_get_current_radio_receive_handle_addr()
{
    9d32:	4f 93       	push	r20
    9d34:	5f 93       	push	r21
   radiohandletype *currentradioinfo;

   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_RADIO_RECEIVER_BUFFER;

   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9d36:	e4 e1       	ldi	r30, 0x14	; 20
    9d38:	fc ee       	ldi	r31, 0xEC	; 236
    9d3a:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9d3c:	24 2f       	mov	r18, r20
    9d3e:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (currentradioinfo)
				 :
                );
    asm volatile("pop r21" "\n\t"
    9d40:	5f 91       	pop	r21
    9d42:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currentradioinfo;
}
    9d44:	c9 01       	movw	r24, r18
    9d46:	08 95       	ret

00009d48 <lib_radio_set_freq>:


void lib_radio_set_freq(uint16_t freq)
{
    9d48:	4f 93       	push	r20
    9d4a:	5f 93       	push	r21

   void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_FREQ_FUNCTION;

   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);

   asm volatile(" mov r20, %A0" "\n\t"
    9d4c:	48 2f       	mov	r20, r24
    9d4e:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (freq)
                );
   getaddrfp();
    9d50:	e0 e0       	ldi	r30, 0x00	; 0
    9d52:	fc ee       	ldi	r31, 0xEC	; 236
    9d54:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    9d56:	5f 91       	pop	r21
    9d58:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    9d5a:	08 95       	ret

00009d5c <lib_radio_set_channel>:

void lib_radio_set_channel(uint8_t channel)
{
    9d5c:	4f 93       	push	r20
    9d5e:	5f 93       	push	r21

  uint16_t maskchannel = channel;

  void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_CHANNEL_FUNCTION;

  asm volatile("push r20" "\n\t"
               "push r21" "\n\t"
               ::);

  asm volatile(" mov r20, %A0" "\n\t"
    9d60:	90 e0       	ldi	r25, 0x00	; 0
    9d62:	48 2f       	mov	r20, r24
    9d64:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (maskchannel)
                );
   getaddrfp();
    9d66:	e4 e0       	ldi	r30, 0x04	; 4
    9d68:	fc ee       	ldi	r31, 0xEC	; 236
    9d6a:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    9d6c:	5f 91       	pop	r21
    9d6e:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    9d70:	08 95       	ret

00009d72 <lib_radio_set_power>:

void lib_radio_set_power(uint8_t power)
{
    9d72:	4f 93       	push	r20
    9d74:	5f 93       	push	r21

  uint16_t maskchannel = power;

  void (*getaddrfp)(void) = (void (*)(void))SET_RADIO_POWER_FUNCTION;

  asm volatile("push r20" "\n\t"
               "push r21" "\n\t"
               ::);

  asm volatile(" mov r20, %A0" "\n\t"
    9d76:	90 e0       	ldi	r25, 0x00	; 0
    9d78:	48 2f       	mov	r20, r24
    9d7a:	59 2f       	mov	r21, r25
	              "mov r21, %B0" "\n\t"
				 :
				 :"r" (maskchannel)
                );
   getaddrfp();
    9d7c:	e8 e0       	ldi	r30, 0x08	; 8
    9d7e:	fc ee       	ldi	r31, 0xEC	; 236
    9d80:	09 95       	icall
   asm volatile("pop r21" "\n\t"
    9d82:	5f 91       	pop	r21
    9d84:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return;
}
    9d86:	08 95       	ret

00009d88 <lib_get_current_radio_send_addr>:



radioinfotype *lib_get_current_radio_send_addr()
{
    9d88:	4f 93       	push	r20
    9d8a:	5f 93       	push	r21
   radioinfotype *currentradioinfo;
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_RADIO_SENDER_BUFFER;
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();
    9d8c:	ec e0       	ldi	r30, 0x0C	; 12
    9d8e:	fc ee       	ldi	r31, 0xEC	; 236
    9d90:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    9d92:	24 2f       	mov	r18, r20
    9d94:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (currentradioinfo)
				 :
                );
    asm volatile("pop r21" "\n\t"
    9d96:	5f 91       	pop	r21
    9d98:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return currentradioinfo;
}
    9d9a:	c9 01       	movw	r24, r18
    9d9c:	08 95       	ret

00009d9e <lib_radio_send_energy_wrapper>:


 
void lib_radio_send_energy_wrapper(uint16_t port, uint16_t address, uint8_t length, uint8_t *msg){
    9d9e:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
	 
	  
	    lib_thread** current_thread;
	  
      current_thread = lib_get_current_thread();      
      
     // if ((*current_thread)->ecbptr->remainenergy > (uint16_t)RADIO_ENERGY_CONSUMPTION_PER_BIT * (uint16_t)length)
      	//{
      	//	 (*current_thread)->ecbptr->remainenergy -= (uint16_t)RADIO_SEND * (uint16_t)length;           
      		 
      	//	 lib_radio_send_msg(port, address, length, msg);       		 
       // }
      
     // else
     // {	
      //  (*current_thread)->ecbptr->remainenergy = 0;  
     // 	(*current_thread)->state = STATE_SUSPEND;   	
     // }
      
    
    
    // radioSend(port, address, length, msg); 
}
    9da2:	08 95       	ret

00009da4 <lib_radio_receive_timed>:

 




void lib_radio_send_msg(uint16_t port, uint16_t address, uint8_t length, uint8_t *msg)
{


   lib_thread** current_thread;
   radioinfotype *radioinfoaddr;



   current_thread = lib_get_current_thread();
   radioinfoaddr = lib_get_current_radio_send_addr();


   radioinfoaddr-> socket_port = port;
   radioinfoaddr->socket_addr = address;
   radioinfoaddr->socket_msg_len  = length;
   radioinfoaddr->socket_msg  = msg;
   lib_radio_send_msg_syscall();

   lib_sleep_thread(20);

 

   return;
}

//wakeup the current thread once an incoming packet arrives

void lib_wakeup_mythread()
{
  mythread->state = STATE_ACTIVE;
  syscall_post_thread_task();
}

int lib_radio_receive(uint16_t port, uint8_t maxlength, uint8_t *msg)
{
   return lib_radio_receive_timed(port, maxlength, msg, 0);
}

int lib_radio_receive_timed(uint16_t port, uint8_t maxlength, uint8_t *msg, uint16_t time)
{
    9da4:	af 92       	push	r10
    9da6:	bf 92       	push	r11
    9da8:	df 92       	push	r13
    9daa:	ef 92       	push	r14
    9dac:	ff 92       	push	r15
    9dae:	0f 93       	push	r16
    9db0:	1f 93       	push	r17
    9db2:	cf 93       	push	r28
    9db4:	df 93       	push	r29
    9db6:	8c 01       	movw	r16, r24
    9db8:	d6 2e       	mov	r13, r22
    9dba:	ea 01       	movw	r28, r20
    9dbc:	59 01       	movw	r10, r18
   _atomic_t currentatomic;
   
   void (*radio_register_function_pointer)(void) = (void (*)(void))REGISTER_RADIO_RECEIVE_EVENT;
   lib_thread** current_thread = lib_get_current_thread();
    9dbe:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    9dc2:	7c 01       	movw	r14, r24
   radiohandletype *radiohandleaddr = lib_get_current_radio_receive_handle_addr();
    9dc4:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <lib_get_current_radio_receive_handle_addr>
    9dc8:	fc 01       	movw	r30, r24

   //set up the radiohandleaddr data structures

   radiohandleaddr->port = port;
    9dca:	11 83       	std	Z+1, r17	; 0x01
    9dcc:	00 83       	st	Z, r16
   radiohandleaddr->maxLength = 32;
    9dce:	80 e2       	ldi	r24, 0x20	; 32
    9dd0:	82 83       	std	Z+2, r24	; 0x02
   radiohandleaddr->dataReady = &radioReceiveDataReady;
    9dd2:	8e e4       	ldi	r24, 0x4E	; 78
    9dd4:	99 e0       	ldi	r25, 0x09	; 9
    9dd6:	94 83       	std	Z+4, r25	; 0x04
    9dd8:	83 83       	std	Z+3, r24	; 0x03
   radiohandleaddr->data = buffer;
    9dda:	8b ea       	ldi	r24, 0xAB	; 171
    9ddc:	93 e0       	ldi	r25, 0x03	; 3
    9dde:	96 83       	std	Z+6, r25	; 0x06
    9de0:	85 83       	std	Z+5, r24	; 0x05
   radiohandleaddr->packetinfo = radioReceivePacketInfo;
    9de2:	8f e4       	ldi	r24, 0x4F	; 79
    9de4:	99 e0       	ldi	r25, 0x09	; 9
    9de6:	90 87       	std	Z+8, r25	; 0x08
    9de8:	87 83       	std	Z+7, r24	; 0x07
   radiohandleaddr->handlefunc = lib_wakeup_mythread;
    9dea:	88 e7       	ldi	r24, 0x78	; 120
    9dec:	9f e4       	ldi	r25, 0x4F	; 79
    9dee:	93 87       	std	Z+11, r25	; 0x0b
    9df0:	82 87       	std	Z+10, r24	; 0x0a

	//close the interrupt
	currentatomic = _atomic_start();
    9df2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    9df6:	18 2f       	mov	r17, r24
	
	//call the radio handle set to store the data structure into the handle vectors
	radio_register_function_pointer();
    9df8:	e8 e1       	ldi	r30, 0x18	; 24
    9dfa:	fc ee       	ldi	r31, 0xEC	; 236
    9dfc:	09 95       	icall

	//set up the current thread into sleep mode
   (*current_thread)->state = STATE_SLEEP;
    9dfe:	d7 01       	movw	r26, r14
    9e00:	ed 91       	ld	r30, X+
    9e02:	fc 91       	ld	r31, X
    9e04:	11 97       	sbiw	r26, 0x01	; 1
    9e06:	85 e0       	ldi	r24, 0x05	; 5
    9e08:	82 83       	std	Z+2, r24	; 0x02

	//set up mythread so that later can wake up this thread
	mythread = *current_thread;
    9e0a:	8d 91       	ld	r24, X+
    9e0c:	9c 91       	ld	r25, X
    9e0e:	90 93 4d 09 	sts	0x094D, r25
    9e12:	80 93 4c 09 	sts	0x094C, r24

	//open the interrupt
	_atomic_end(currentatomic);
    9e16:	81 2f       	mov	r24, r17
    9e18:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>

	if (time == 0)
    9e1c:	a1 14       	cp	r10, r1
    9e1e:	b1 04       	cpc	r11, r1
    9e20:	29 f5       	brne	.+74     	; 0x9e6c <lib_radio_receive_timed+0xc8>
		lib_yield();
    9e22:	0e 94 ca 53 	call	0xa794	; 0xa794 <lib_yield>
	else
		lib_sleep_thread(time);
	
	uint8_t i;
	for (i = 0; i < maxlength && i < 32; i++)
    9e26:	dd 20       	and	r13, r13
    9e28:	a1 f0       	breq	.+40     	; 0x9e52 <lib_radio_receive_timed+0xae>
    9e2a:	20 e0       	ldi	r18, 0x00	; 0
    9e2c:	30 e0       	ldi	r19, 0x00	; 0
    9e2e:	05 c0       	rjmp	.+10     	; 0x9e3a <lib_radio_receive_timed+0x96>
    9e30:	2f 5f       	subi	r18, 0xFF	; 255
    9e32:	3f 4f       	sbci	r19, 0xFF	; 255
    9e34:	20 32       	cpi	r18, 0x20	; 32
    9e36:	31 05       	cpc	r19, r1
    9e38:	61 f0       	breq	.+24     	; 0x9e52 <lib_radio_receive_timed+0xae>
		msg[i] = buffer[i];
    9e3a:	de 01       	movw	r26, r28
    9e3c:	a2 0f       	add	r26, r18
    9e3e:	b3 1f       	adc	r27, r19
    9e40:	f9 01       	movw	r30, r18
    9e42:	e5 55       	subi	r30, 0x55	; 85
    9e44:	fc 4f       	sbci	r31, 0xFC	; 252
    9e46:	80 81       	ld	r24, Z
    9e48:	8c 93       	st	X, r24
    9e4a:	82 2f       	mov	r24, r18
    9e4c:	8f 5f       	subi	r24, 0xFF	; 255
    9e4e:	8d 15       	cp	r24, r13
    9e50:	78 f3       	brcs	.-34     	; 0x9e30 <lib_radio_receive_timed+0x8c>

	return radioReceiveDataReady;
}
    9e52:	80 91 4e 09 	lds	r24, 0x094E
    9e56:	90 e0       	ldi	r25, 0x00	; 0
    9e58:	df 91       	pop	r29
    9e5a:	cf 91       	pop	r28
    9e5c:	1f 91       	pop	r17
    9e5e:	0f 91       	pop	r16
    9e60:	ff 90       	pop	r15
    9e62:	ef 90       	pop	r14
    9e64:	df 90       	pop	r13
    9e66:	bf 90       	pop	r11
    9e68:	af 90       	pop	r10
    9e6a:	08 95       	ret
    9e6c:	c5 01       	movw	r24, r10
    9e6e:	0e 94 a9 53 	call	0xa752	; 0xa752 <lib_sleep_thread>
    9e72:	d9 cf       	rjmp	.-78     	; 0x9e26 <lib_radio_receive_timed+0x82>

00009e74 <lib_radio_receive>:
    9e74:	20 e0       	ldi	r18, 0x00	; 0
    9e76:	30 e0       	ldi	r19, 0x00	; 0
    9e78:	0e 94 d2 4e 	call	0x9da4	; 0x9da4 <lib_radio_receive_timed>
    9e7c:	08 95       	ret

00009e7e <lib_radio_send_msg>:
    9e7e:	bf 92       	push	r11
    9e80:	cf 92       	push	r12
    9e82:	df 92       	push	r13
    9e84:	ef 92       	push	r14
    9e86:	ff 92       	push	r15
    9e88:	0f 93       	push	r16
    9e8a:	1f 93       	push	r17
    9e8c:	8c 01       	movw	r16, r24
    9e8e:	7b 01       	movw	r14, r22
    9e90:	b4 2e       	mov	r11, r20
    9e92:	69 01       	movw	r12, r18
    9e94:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    9e98:	0e 94 c4 4e 	call	0x9d88	; 0x9d88 <lib_get_current_radio_send_addr>
    9e9c:	fc 01       	movw	r30, r24
    9e9e:	11 83       	std	Z+1, r17	; 0x01
    9ea0:	00 83       	st	Z, r16
    9ea2:	f3 82       	std	Z+3, r15	; 0x03
    9ea4:	e2 82       	std	Z+2, r14	; 0x02
    9ea6:	b4 82       	std	Z+4, r11	; 0x04
    9ea8:	d6 82       	std	Z+6, r13	; 0x06
    9eaa:	c5 82       	std	Z+5, r12	; 0x05
    9eac:	e0 e1       	ldi	r30, 0x10	; 16
    9eae:	fc ee       	ldi	r31, 0xEC	; 236
    9eb0:	09 95       	icall
    9eb2:	84 e1       	ldi	r24, 0x14	; 20
    9eb4:	90 e0       	ldi	r25, 0x00	; 0
    9eb6:	0e 94 a9 53 	call	0xa752	; 0xa752 <lib_sleep_thread>
    9eba:	1f 91       	pop	r17
    9ebc:	0f 91       	pop	r16
    9ebe:	ff 90       	pop	r15
    9ec0:	ef 90       	pop	r14
    9ec2:	df 90       	pop	r13
    9ec4:	cf 90       	pop	r12
    9ec6:	bf 90       	pop	r11
    9ec8:	08 95       	ret

00009eca <lib_radio_send_integer_u16>:
    9eca:	90 93 ab 03 	sts	0x03AB, r25
    9ece:	80 93 ac 03 	sts	0x03AC, r24
    9ed2:	8e ee       	ldi	r24, 0xEE	; 238
    9ed4:	80 93 ae 03 	sts	0x03AE, r24
    9ed8:	80 93 ad 03 	sts	0x03AD, r24
    9edc:	8c e0       	ldi	r24, 0x0C	; 12
    9ede:	90 e0       	ldi	r25, 0x00	; 0
    9ee0:	6f ef       	ldi	r22, 0xFF	; 255
    9ee2:	7f ef       	ldi	r23, 0xFF	; 255
    9ee4:	40 e1       	ldi	r20, 0x10	; 16
    9ee6:	2b ea       	ldi	r18, 0xAB	; 171
    9ee8:	33 e0       	ldi	r19, 0x03	; 3
    9eea:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <lib_radio_send_msg>
    9eee:	08 95       	ret

00009ef0 <lib_wakeup_mythread>:
    9ef0:	e0 91 4c 09 	lds	r30, 0x094C
    9ef4:	f0 91 4d 09 	lds	r31, 0x094D
    9ef8:	82 e0       	ldi	r24, 0x02	; 2
    9efa:	82 83       	std	Z+2, r24	; 0x02
    9efc:	0e 94 ce 53 	call	0xa79c	; 0xa79c <syscall_post_thread_task>
    9f00:	08 95       	ret

00009f02 <lib_radio_send_string>:
    9f02:	0f 93       	push	r16
    9f04:	1f 93       	push	r17
    9f06:	8c 01       	movw	r16, r24
    9f08:	0e 94 4b 52 	call	0xa496	; 0xa496 <lib_string_length>
    9f0c:	48 2f       	mov	r20, r24
    9f0e:	81 e0       	ldi	r24, 0x01	; 1
    9f10:	90 e0       	ldi	r25, 0x00	; 0
    9f12:	6f ef       	ldi	r22, 0xFF	; 255
    9f14:	7f ef       	ldi	r23, 0xFF	; 255
    9f16:	98 01       	movw	r18, r16
    9f18:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <lib_radio_send_msg>
    9f1c:	1f 91       	pop	r17
    9f1e:	0f 91       	pop	r16
    9f20:	08 95       	ret

00009f22 <itoa>:
static uint8_t localbuffer[16];


uint8_t itoa(uint16_t value, char*  str, int radix)
{
    9f22:	6f 92       	push	r6
    9f24:	7f 92       	push	r7
    9f26:	8f 92       	push	r8
    9f28:	9f 92       	push	r9
    9f2a:	af 92       	push	r10
    9f2c:	bf 92       	push	r11
    9f2e:	cf 92       	push	r12
    9f30:	df 92       	push	r13
    9f32:	ef 92       	push	r14
    9f34:	ff 92       	push	r15
    9f36:	0f 93       	push	r16
    9f38:	1f 93       	push	r17
    9f3a:	cf 93       	push	r28
    9f3c:	df 93       	push	r29
    9f3e:	6c 01       	movw	r12, r24
    9f40:	4b 01       	movw	r8, r22
    9f42:	5a 01       	movw	r10, r20
    9f44:	3a 01       	movw	r6, r20
    9f46:	eb 01       	movw	r28, r22
    9f48:	7b 01       	movw	r14, r22
    9f4a:	41 e2       	ldi	r20, 0x21	; 33
    9f4c:	01 e0       	ldi	r16, 0x01	; 1
    9f4e:	10 e0       	ldi	r17, 0x00	; 0
    9f50:	0c c0       	rjmp	.+24     	; 0x9f6a <itoa+0x48>
	  
    int  rem = 0;
    int  pos = 0;
    char ch  = '!' ;
    int i; 
    do
    {
        rem    = value % radix ;
        value /= radix;
        if ( 16 == radix )
        {
            if( rem >= 10 && rem <= 15 )
            {
                switch( rem )
                {
                    case 10:
                        ch = 'a' ;
                        break;
                    case 11:
                        ch ='b' ;
                        break;
                    case 12:
                        ch = 'c' ;
                        break;
                    case 13:
                        ch ='d' ;
                        break;
                    case 14:
                        ch = 'e' ;
                        break;
                    case 15:
                        ch ='f' ;
                        break;
                }
            }
        }
        if( '!' == ch )
    9f52:	41 32       	cpi	r20, 0x21	; 33
    9f54:	79 f1       	breq	.+94     	; 0x9fb4 <itoa+0x92>
        {
            str[pos++] = (char) ( rem + 0x30 );
        }
        else
        {
            str[pos++] = ch ;
    9f56:	d7 01       	movw	r26, r14
    9f58:	4c 93       	st	X, r20
    9f5a:	98 01       	movw	r18, r16
    9f5c:	0f 5f       	subi	r16, 0xFF	; 255
    9f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    9f60:	08 94       	sec
    9f62:	e1 1c       	adc	r14, r1
    9f64:	f1 1c       	adc	r15, r1
        }
    }while( value != 0 );
    9f66:	ef 2b       	or	r30, r31
    9f68:	89 f1       	breq	.+98     	; 0x9fcc <itoa+0xaa>
    9f6a:	c6 01       	movw	r24, r12
    9f6c:	b3 01       	movw	r22, r6
    9f6e:	0e 94 73 54 	call	0xa8e6	; 0xa8e6 <__udivmodhi4>
    9f72:	9c 01       	movw	r18, r24
    9f74:	c6 01       	movw	r24, r12
    9f76:	b3 01       	movw	r22, r6
    9f78:	0e 94 73 54 	call	0xa8e6	; 0xa8e6 <__udivmodhi4>
    9f7c:	fb 01       	movw	r30, r22
    9f7e:	6b 01       	movw	r12, r22
    9f80:	80 e1       	ldi	r24, 0x10	; 16
    9f82:	a8 16       	cp	r10, r24
    9f84:	b1 04       	cpc	r11, r1
    9f86:	29 f7       	brne	.-54     	; 0x9f52 <itoa+0x30>
    9f88:	c9 01       	movw	r24, r18
    9f8a:	0a 97       	sbiw	r24, 0x0a	; 10
    9f8c:	06 97       	sbiw	r24, 0x06	; 6
    9f8e:	08 f7       	brcc	.-62     	; 0x9f52 <itoa+0x30>
    9f90:	2c 30       	cpi	r18, 0x0C	; 12
    9f92:	31 05       	cpc	r19, r1
    9f94:	09 f4       	brne	.+2      	; 0x9f98 <itoa+0x76>
    9f96:	56 c0       	rjmp	.+172    	; 0xa044 <itoa+0x122>
    9f98:	2d 30       	cpi	r18, 0x0D	; 13
    9f9a:	31 05       	cpc	r19, r1
    9f9c:	0c f4       	brge	.+2      	; 0x9fa0 <itoa+0x7e>
    9f9e:	43 c0       	rjmp	.+134    	; 0xa026 <itoa+0x104>
    9fa0:	2e 30       	cpi	r18, 0x0E	; 14
    9fa2:	31 05       	cpc	r19, r1
    9fa4:	09 f4       	brne	.+2      	; 0x9fa8 <itoa+0x86>
    9fa6:	50 c0       	rjmp	.+160    	; 0xa048 <itoa+0x126>
    9fa8:	2e 30       	cpi	r18, 0x0E	; 14
    9faa:	31 05       	cpc	r19, r1
    9fac:	0c f0       	brlt	.+2      	; 0x9fb0 <itoa+0x8e>
    9fae:	44 c0       	rjmp	.+136    	; 0xa038 <itoa+0x116>
    9fb0:	44 e6       	ldi	r20, 0x64	; 100
    9fb2:	d1 cf       	rjmp	.-94     	; 0x9f56 <itoa+0x34>
    9fb4:	82 2f       	mov	r24, r18
    9fb6:	80 5d       	subi	r24, 0xD0	; 208
    9fb8:	d7 01       	movw	r26, r14
    9fba:	8c 93       	st	X, r24
    9fbc:	98 01       	movw	r18, r16
    9fbe:	0f 5f       	subi	r16, 0xFF	; 255
    9fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    9fc2:	08 94       	sec
    9fc4:	e1 1c       	adc	r14, r1
    9fc6:	f1 1c       	adc	r15, r1
    9fc8:	ef 2b       	or	r30, r31
    9fca:	79 f6       	brne	.-98     	; 0x9f6a <itoa+0x48>
   // str[pos] = '\0' ;
    
    i=0; 
    
    while (i<pos/2)
    9fcc:	b9 01       	movw	r22, r18
    9fce:	75 95       	asr	r23
    9fd0:	67 95       	ror	r22
    9fd2:	16 16       	cp	r1, r22
    9fd4:	17 06       	cpc	r1, r23
    9fd6:	e4 f5       	brge	.+120    	; 0xa050 <itoa+0x12e>
    9fd8:	21 50       	subi	r18, 0x01	; 1
    9fda:	30 40       	sbci	r19, 0x00	; 0
    9fdc:	f4 01       	movw	r30, r8
    9fde:	e2 0f       	add	r30, r18
    9fe0:	f3 1f       	adc	r31, r19
    9fe2:	2f 5f       	subi	r18, 0xFF	; 255
    9fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    9fe6:	d4 01       	movw	r26, r8
    9fe8:	a2 0f       	add	r26, r18
    9fea:	b3 1f       	adc	r27, r19
    9fec:	68 0d       	add	r22, r8
    9fee:	79 1d       	adc	r23, r9
    {
        *(str+pos) = *(str+i);       //uses the null character as the temporary storage.
    9ff0:	88 81       	ld	r24, Y
    9ff2:	8c 93       	st	X, r24
        *(str+i) = *(str + pos - i -1);
    9ff4:	80 81       	ld	r24, Z
    9ff6:	89 93       	st	Y+, r24
        *(str+pos-i-1) = *(str+pos);
    9ff8:	8c 91       	ld	r24, X
    9ffa:	80 83       	st	Z, r24
    9ffc:	31 97       	sbiw	r30, 0x01	; 1
    9ffe:	c6 17       	cp	r28, r22
    a000:	d7 07       	cpc	r29, r23
    a002:	b1 f7       	brne	.-20     	; 0x9ff0 <itoa+0xce>
        i++;
    }
   
    *(str+pos) = '\0';
    a004:	1c 92       	st	X, r1
    return pos;
}
    a006:	82 2f       	mov	r24, r18
    a008:	df 91       	pop	r29
    a00a:	cf 91       	pop	r28
    a00c:	1f 91       	pop	r17
    a00e:	0f 91       	pop	r16
    a010:	ff 90       	pop	r15
    a012:	ef 90       	pop	r14
    a014:	df 90       	pop	r13
    a016:	cf 90       	pop	r12
    a018:	bf 90       	pop	r11
    a01a:	af 90       	pop	r10
    a01c:	9f 90       	pop	r9
    a01e:	8f 90       	pop	r8
    a020:	7f 90       	pop	r7
    a022:	6f 90       	pop	r6
    a024:	08 95       	ret
    a026:	2a 30       	cpi	r18, 0x0A	; 10
    a028:	31 05       	cpc	r19, r1
    a02a:	81 f0       	breq	.+32     	; 0xa04c <itoa+0x12a>
    a02c:	2b 30       	cpi	r18, 0x0B	; 11
    a02e:	31 05       	cpc	r19, r1
    a030:	09 f0       	breq	.+2      	; 0xa034 <itoa+0x112>
    a032:	8f cf       	rjmp	.-226    	; 0x9f52 <itoa+0x30>
    a034:	42 e6       	ldi	r20, 0x62	; 98
    a036:	8f cf       	rjmp	.-226    	; 0x9f56 <itoa+0x34>
    a038:	2f 30       	cpi	r18, 0x0F	; 15
    a03a:	31 05       	cpc	r19, r1
    a03c:	09 f0       	breq	.+2      	; 0xa040 <itoa+0x11e>
    a03e:	89 cf       	rjmp	.-238    	; 0x9f52 <itoa+0x30>
    a040:	46 e6       	ldi	r20, 0x66	; 102
    a042:	89 cf       	rjmp	.-238    	; 0x9f56 <itoa+0x34>
    a044:	43 e6       	ldi	r20, 0x63	; 99
    a046:	87 cf       	rjmp	.-242    	; 0x9f56 <itoa+0x34>
    a048:	45 e6       	ldi	r20, 0x65	; 101
    a04a:	85 cf       	rjmp	.-246    	; 0x9f56 <itoa+0x34>
    a04c:	41 e6       	ldi	r20, 0x61	; 97
    a04e:	83 cf       	rjmp	.-250    	; 0x9f56 <itoa+0x34>
    a050:	d4 01       	movw	r26, r8
    a052:	a2 0f       	add	r26, r18
    a054:	b3 1f       	adc	r27, r19
    a056:	d6 cf       	rjmp	.-84     	; 0xa004 <itoa+0xe2>

0000a058 <lib_init_usart>:

//No need to be called from main 
//This function is called when the system is being initilized and prints system start 
void lib_init_usart()
{
    a058:	10 92 90 00 	sts	0x0090, r1
    UBRR0H = 0;
    UBRR0L = 15;
    a05c:	8f e0       	ldi	r24, 0x0F	; 15
    a05e:	89 b9       	out	0x09, r24	; 9
    UCSR0A |= _BV(U2X0);        // double speed
    a060:	59 9a       	sbi	0x0b, 1	; 11
    UCSR0C |= _BV(UCSZ01) | _BV(UCSZ00);        // 8 data-bits, 1 stop-bit
    a062:	e5 e9       	ldi	r30, 0x95	; 149
    a064:	f0 e0       	ldi	r31, 0x00	; 0
    a066:	80 81       	ld	r24, Z
    a068:	86 60       	ori	r24, 0x06	; 6
    a06a:	80 83       	st	Z, r24
    UCSR0B |= _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
    a06c:	8a b1       	in	r24, 0x0a	; 10
    a06e:	88 69       	ori	r24, 0x98	; 152
    a070:	8a b9       	out	0x0a, r24	; 10
    // Enable recieve/transmit/interrupts
    cFlag = 1;
    a072:	81 e0       	ldi	r24, 0x01	; 1
    a074:	80 93 cb 03 	sts	0x03CB, r24
    previous = 0;
    a078:	10 92 cc 03 	sts	0x03CC, r1
    status = 0;
    a07c:	10 92 cd 03 	sts	0x03CD, r1
}
    a080:	08 95       	ret

0000a082 <lib_print_usart>:

//-------------------------------------------------------------------------
void lib_print_usart(uint8_t c)
{
    a082:	1f 93       	push	r17
    a084:	18 2f       	mov	r17, r24

   flag = _atomic_start();
    a086:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a08a:	80 93 53 09 	sts	0x0953, r24
     

    if (cFlag == 0)
    a08e:	80 91 cb 03 	lds	r24, 0x03CB
    a092:	88 23       	and	r24, r24
    a094:	49 f0       	breq	.+18     	; 0xa0a8 <lib_print_usart+0x26>
    {
        lib_init_usart();
    }
    while ((UCSR0A & (1 << UDRE0)) == 0)
    a096:	5d 9b       	sbis	0x0b, 5	; 11
    a098:	fe cf       	rjmp	.-4      	; 0xa096 <lib_print_usart+0x14>
        ;
    UDR0 = c;
    a09a:	1c b9       	out	0x0c, r17	; 12
	
    _atomic_end(flag);
    a09c:	80 91 53 09 	lds	r24, 0x0953
    a0a0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
}
    a0a4:	1f 91       	pop	r17
    a0a6:	08 95       	ret
    a0a8:	0e 94 2c 50 	call	0xa058	; 0xa058 <lib_init_usart>
    a0ac:	f4 cf       	rjmp	.-24     	; 0xa096 <lib_print_usart+0x14>

0000a0ae <lib_printf_ln>:

 



void lib_print_usart_8bit(uint8_t c)
{
  
   flag = _atomic_start();
   
	
   lib_print_usart(0xFA);
   lib_print_usart(c);
   lib_print_usart(0xFA);
   
    _atomic_end(flag);
}


//-------------------------------------------------------------------------
void lib_print_usart_string(char *p)
{
   
   flag = _atomic_start();
   
    lib_print_usart(0xFC);
    while ((*p) != '\0')
    {
        lib_print_usart(*p);
        p++;
    }
    lib_print_usart(0xFC);
  
    _atomic_end(flag);
	
}


void lib_printf_string_with_id(char *p)
{     
      
	  itoa(lib_get_node_id(), (char *)localbuffer, 10);
    lib_print_usart_string((char *)localbuffer);
	  lib_print_usart_string(": ");	
	  lib_print_usart_string(p); 
	
}



void lib_printf_string_energy_wrapper(char *p)
{
     lib_thread** current_thread;
	   uint8_t length;
	   
	   length = lib_string_length(p);
	   
     current_thread = lib_get_current_thread();      

  	 //(*current_thread)->ecbptr->remainenergy -= (uint16_t)SERIAL_SEND * (uint16_t)length;           
      
         		 
     lib_printf_string_with_id(p);
     
}
      

//-------------------------------------------------------------------------
void lib_print_string_lengthN(char *p, uint8_t n)
{
    uint8_t i;
    
   flag = _atomic_start();
    
    lib_print_usart(0xFA);
    lib_print_usart(n); 
    for (i = 0; i < n; i++)
    {
        lib_print_usart(*p);
        p++;
    }
  //  usartPrint(0xFA);
	  lib_print_usart(0xFC);
    lib_print_usart_string("\n"); 
    lib_print_usart(0xFC);
    
	_atomic_end(flag);
}


 
 

//-------------------------------------------------------------------------
void lib_usart_put_chip_hex(uint8_t cChip)
{
  
   flag = _atomic_start();
   
    if (cChip > 9)
    {
        lib_print_usart('a' + cChip - 10);
    }
    else
    {
        lib_print_usart('0' + cChip);
    }
	
	 _atomic_end(flag);
}

 

//-------------------------------------------------------------------------
void lib_usart_put_hex(uint8_t c)
{ 
   
   flag = _atomic_start();
   
    lib_usart_put_chip_hex(c >> 4);
    lib_usart_put_chip_hex(c & 0xf);
	
	 _atomic_end(flag);
}

//-------------------------------------------------------------------------
void lib_printf_integer32(int32_t a)
{
   
   flag = _atomic_start();
  
	   
    itoa(lib_get_node_id(), (char *)localbuffer, 10);
    lib_print_usart_string((char *)localbuffer);
    lib_print_usart_string(": ");	
    lib_print_usart(0xFD);
    lib_usart_put_long(*(uint32_t *) (&a));
    lib_print_usart(0xFD);
	
	_atomic_end(flag);
}

//-------------------------------------------------------------------------
void lib_printf_uinteger32(uint32_t l)
{
   flag = _atomic_start();
   
    itoa(lib_get_node_id(), (char *)localbuffer, 10);
    lib_print_usart_string((char *)localbuffer);
    lib_print_usart_string(": ");		
    
    lib_print_usart(0xFE);
    lib_usart_put_long(l);
    lib_print_usart(0xFE);
	
	_atomic_end(flag);
}

//-------------------------------------------------------------------------
void lib_usart_put_long(uint32_t l)
{
    uint8_t *pcByte = ((uint8_t *) (&l)) + 3;

   flag = _atomic_start();
    
    lib_print_usart(*pcByte);
    pcByte--;
    lib_print_usart(*pcByte);
    pcByte--;
    lib_print_usart(*pcByte);
    pcByte--;
    lib_print_usart(*pcByte);
   _atomic_end(flag);
	
} 

//-------------------------------------------------------------------------
void lib_print_integer(int32_t a, int32_t b, int32_t c, int32_t d)
{
 
   flag = _atomic_start();
  
    lib_print_usart(1);
    lib_usart_put_long(*(uint32_t *) (&a));
    lib_usart_put_long(*(uint32_t *) (&b));
    lib_usart_put_long(*(uint32_t *) (&c));
    lib_usart_put_long(*(uint32_t *) (&d));

  _atomic_end(flag);	
}



//-------------------------------------------------------------------------
void lib_printf_ln()
{
    a0ae:	1f 93       	push	r17
#ifdef PLATFORM_AVR
    _atomic_t currentatomic;
    currentatomic = _atomic_start();
    a0b0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a0b4:	18 2f       	mov	r17, r24
    lib_print_usart(0xFC);
    a0b6:	8c ef       	ldi	r24, 0xFC	; 252
    a0b8:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    lib_print_usart(0x6D);
    a0bc:	8d e6       	ldi	r24, 0x6D	; 109
    a0be:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    lib_print_usart(0x6D);
    a0c2:	8d e6       	ldi	r24, 0x6D	; 109
    a0c4:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    lib_print_usart(0x6D);
    a0c8:	8d e6       	ldi	r24, 0x6D	; 109
    a0ca:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    lib_print_usart(0xFC);
    a0ce:	8c ef       	ldi	r24, 0xFC	; 252
    a0d0:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
	_atomic_end(currentatomic);
    a0d4:	81 2f       	mov	r24, r17
    a0d6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    
#endif
}
    a0da:	1f 91       	pop	r17
    a0dc:	08 95       	ret

0000a0de <lib_usart_put_long>:
    a0de:	df 93       	push	r29
    a0e0:	cf 93       	push	r28
    a0e2:	00 d0       	rcall	.+0      	; 0xa0e4 <lib_usart_put_long+0x6>
    a0e4:	00 d0       	rcall	.+0      	; 0xa0e6 <lib_usart_put_long+0x8>
    a0e6:	cd b7       	in	r28, 0x3d	; 61
    a0e8:	de b7       	in	r29, 0x3e	; 62
    a0ea:	69 83       	std	Y+1, r22	; 0x01
    a0ec:	7a 83       	std	Y+2, r23	; 0x02
    a0ee:	8b 83       	std	Y+3, r24	; 0x03
    a0f0:	9c 83       	std	Y+4, r25	; 0x04
    a0f2:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a0f6:	80 93 53 09 	sts	0x0953, r24
    a0fa:	8c 81       	ldd	r24, Y+4	; 0x04
    a0fc:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a100:	8b 81       	ldd	r24, Y+3	; 0x03
    a102:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a106:	8a 81       	ldd	r24, Y+2	; 0x02
    a108:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a10c:	89 81       	ldd	r24, Y+1	; 0x01
    a10e:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a112:	80 91 53 09 	lds	r24, 0x0953
    a116:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    a11a:	0f 90       	pop	r0
    a11c:	0f 90       	pop	r0
    a11e:	0f 90       	pop	r0
    a120:	0f 90       	pop	r0
    a122:	cf 91       	pop	r28
    a124:	df 91       	pop	r29
    a126:	08 95       	ret

0000a128 <lib_print_integer>:
    a128:	af 92       	push	r10
    a12a:	bf 92       	push	r11
    a12c:	cf 92       	push	r12
    a12e:	df 92       	push	r13
    a130:	ef 92       	push	r14
    a132:	ff 92       	push	r15
    a134:	0f 93       	push	r16
    a136:	1f 93       	push	r17
    a138:	df 93       	push	r29
    a13a:	cf 93       	push	r28
    a13c:	cd b7       	in	r28, 0x3d	; 61
    a13e:	de b7       	in	r29, 0x3e	; 62
    a140:	60 97       	sbiw	r28, 0x10	; 16
    a142:	0f b6       	in	r0, 0x3f	; 63
    a144:	f8 94       	cli
    a146:	de bf       	out	0x3e, r29	; 62
    a148:	0f be       	out	0x3f, r0	; 63
    a14a:	cd bf       	out	0x3d, r28	; 61
    a14c:	69 83       	std	Y+1, r22	; 0x01
    a14e:	7a 83       	std	Y+2, r23	; 0x02
    a150:	8b 83       	std	Y+3, r24	; 0x03
    a152:	9c 83       	std	Y+4, r25	; 0x04
    a154:	2d 83       	std	Y+5, r18	; 0x05
    a156:	3e 83       	std	Y+6, r19	; 0x06
    a158:	4f 83       	std	Y+7, r20	; 0x07
    a15a:	58 87       	std	Y+8, r21	; 0x08
    a15c:	e9 86       	std	Y+9, r14	; 0x09
    a15e:	fa 86       	std	Y+10, r15	; 0x0a
    a160:	0b 87       	std	Y+11, r16	; 0x0b
    a162:	1c 87       	std	Y+12, r17	; 0x0c
    a164:	ad 86       	std	Y+13, r10	; 0x0d
    a166:	be 86       	std	Y+14, r11	; 0x0e
    a168:	cf 86       	std	Y+15, r12	; 0x0f
    a16a:	d8 8a       	std	Y+16, r13	; 0x10
    a16c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a170:	80 93 53 09 	sts	0x0953, r24
    a174:	81 e0       	ldi	r24, 0x01	; 1
    a176:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a17a:	69 81       	ldd	r22, Y+1	; 0x01
    a17c:	7a 81       	ldd	r23, Y+2	; 0x02
    a17e:	8b 81       	ldd	r24, Y+3	; 0x03
    a180:	9c 81       	ldd	r25, Y+4	; 0x04
    a182:	0e 94 6f 50 	call	0xa0de	; 0xa0de <lib_usart_put_long>
    a186:	6d 81       	ldd	r22, Y+5	; 0x05
    a188:	7e 81       	ldd	r23, Y+6	; 0x06
    a18a:	8f 81       	ldd	r24, Y+7	; 0x07
    a18c:	98 85       	ldd	r25, Y+8	; 0x08
    a18e:	0e 94 6f 50 	call	0xa0de	; 0xa0de <lib_usart_put_long>
    a192:	69 85       	ldd	r22, Y+9	; 0x09
    a194:	7a 85       	ldd	r23, Y+10	; 0x0a
    a196:	8b 85       	ldd	r24, Y+11	; 0x0b
    a198:	9c 85       	ldd	r25, Y+12	; 0x0c
    a19a:	0e 94 6f 50 	call	0xa0de	; 0xa0de <lib_usart_put_long>
    a19e:	6d 85       	ldd	r22, Y+13	; 0x0d
    a1a0:	7e 85       	ldd	r23, Y+14	; 0x0e
    a1a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    a1a4:	98 89       	ldd	r25, Y+16	; 0x10
    a1a6:	0e 94 6f 50 	call	0xa0de	; 0xa0de <lib_usart_put_long>
    a1aa:	80 91 53 09 	lds	r24, 0x0953
    a1ae:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    a1b2:	60 96       	adiw	r28, 0x10	; 16
    a1b4:	0f b6       	in	r0, 0x3f	; 63
    a1b6:	f8 94       	cli
    a1b8:	de bf       	out	0x3e, r29	; 62
    a1ba:	0f be       	out	0x3f, r0	; 63
    a1bc:	cd bf       	out	0x3d, r28	; 61
    a1be:	cf 91       	pop	r28
    a1c0:	df 91       	pop	r29
    a1c2:	1f 91       	pop	r17
    a1c4:	0f 91       	pop	r16
    a1c6:	ff 90       	pop	r15
    a1c8:	ef 90       	pop	r14
    a1ca:	df 90       	pop	r13
    a1cc:	cf 90       	pop	r12
    a1ce:	bf 90       	pop	r11
    a1d0:	af 90       	pop	r10
    a1d2:	08 95       	ret

0000a1d4 <lib_usart_put_chip_hex>:
    a1d4:	1f 93       	push	r17
    a1d6:	18 2f       	mov	r17, r24
    a1d8:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a1dc:	80 93 53 09 	sts	0x0953, r24
    a1e0:	1a 30       	cpi	r17, 0x0A	; 10
    a1e2:	50 f4       	brcc	.+20     	; 0xa1f8 <lib_usart_put_chip_hex+0x24>
    a1e4:	81 2f       	mov	r24, r17
    a1e6:	80 5d       	subi	r24, 0xD0	; 208
    a1e8:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a1ec:	80 91 53 09 	lds	r24, 0x0953
    a1f0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    a1f4:	1f 91       	pop	r17
    a1f6:	08 95       	ret
    a1f8:	81 2f       	mov	r24, r17
    a1fa:	89 5a       	subi	r24, 0xA9	; 169
    a1fc:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a200:	80 91 53 09 	lds	r24, 0x0953
    a204:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    a208:	1f 91       	pop	r17
    a20a:	08 95       	ret

0000a20c <lib_usart_put_hex>:
    a20c:	1f 93       	push	r17
    a20e:	18 2f       	mov	r17, r24
    a210:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a214:	80 93 53 09 	sts	0x0953, r24
    a218:	81 2f       	mov	r24, r17
    a21a:	82 95       	swap	r24
    a21c:	8f 70       	andi	r24, 0x0F	; 15
    a21e:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <lib_usart_put_chip_hex>
    a222:	81 2f       	mov	r24, r17
    a224:	8f 70       	andi	r24, 0x0F	; 15
    a226:	0e 94 ea 50 	call	0xa1d4	; 0xa1d4 <lib_usart_put_chip_hex>
    a22a:	80 91 53 09 	lds	r24, 0x0953
    a22e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    a232:	1f 91       	pop	r17
    a234:	08 95       	ret

0000a236 <lib_print_usart_string>:
    a236:	cf 93       	push	r28
    a238:	df 93       	push	r29
    a23a:	ec 01       	movw	r28, r24
    a23c:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a240:	80 93 53 09 	sts	0x0953, r24
    a244:	8c ef       	ldi	r24, 0xFC	; 252
    a246:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a24a:	88 81       	ld	r24, Y
    a24c:	88 23       	and	r24, r24
    a24e:	31 f0       	breq	.+12     	; 0xa25c <lib_print_usart_string+0x26>
    a250:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a254:	21 96       	adiw	r28, 0x01	; 1
    a256:	88 81       	ld	r24, Y
    a258:	88 23       	and	r24, r24
    a25a:	d1 f7       	brne	.-12     	; 0xa250 <lib_print_usart_string+0x1a>
    a25c:	8c ef       	ldi	r24, 0xFC	; 252
    a25e:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a262:	80 91 53 09 	lds	r24, 0x0953
    a266:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    a26a:	df 91       	pop	r29
    a26c:	cf 91       	pop	r28
    a26e:	08 95       	ret

0000a270 <lib_print_string_lengthN>:
    a270:	ff 92       	push	r15
    a272:	0f 93       	push	r16
    a274:	1f 93       	push	r17
    a276:	cf 93       	push	r28
    a278:	df 93       	push	r29
    a27a:	08 2f       	mov	r16, r24
    a27c:	f9 2e       	mov	r15, r25
    a27e:	16 2f       	mov	r17, r22
    a280:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a284:	80 93 53 09 	sts	0x0953, r24
    a288:	8a ef       	ldi	r24, 0xFA	; 250
    a28a:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a28e:	81 2f       	mov	r24, r17
    a290:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a294:	11 23       	and	r17, r17
    a296:	59 f0       	breq	.+22     	; 0xa2ae <lib_print_string_lengthN+0x3e>
    a298:	80 2f       	mov	r24, r16
    a29a:	9f 2d       	mov	r25, r15
    a29c:	9c 01       	movw	r18, r24
    a29e:	e9 01       	movw	r28, r18
    a2a0:	89 91       	ld	r24, Y+
    a2a2:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a2a6:	9e 01       	movw	r18, r28
    a2a8:	20 1b       	sub	r18, r16
    a2aa:	21 17       	cp	r18, r17
    a2ac:	c8 f3       	brcs	.-14     	; 0xa2a0 <lib_print_string_lengthN+0x30>
    a2ae:	8c ef       	ldi	r24, 0xFC	; 252
    a2b0:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a2b4:	83 e3       	ldi	r24, 0x33	; 51
    a2b6:	91 e0       	ldi	r25, 0x01	; 1
    a2b8:	0e 94 1b 51 	call	0xa236	; 0xa236 <lib_print_usart_string>
    a2bc:	8c ef       	ldi	r24, 0xFC	; 252
    a2be:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a2c2:	80 91 53 09 	lds	r24, 0x0953
    a2c6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    a2ca:	df 91       	pop	r29
    a2cc:	cf 91       	pop	r28
    a2ce:	1f 91       	pop	r17
    a2d0:	0f 91       	pop	r16
    a2d2:	ff 90       	pop	r15
    a2d4:	08 95       	ret

0000a2d6 <lib_print_usart_8bit>:
    a2d6:	1f 93       	push	r17
    a2d8:	18 2f       	mov	r17, r24
    a2da:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a2de:	80 93 53 09 	sts	0x0953, r24
    a2e2:	8a ef       	ldi	r24, 0xFA	; 250
    a2e4:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a2e8:	81 2f       	mov	r24, r17
    a2ea:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a2ee:	8a ef       	ldi	r24, 0xFA	; 250
    a2f0:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a2f4:	80 91 53 09 	lds	r24, 0x0953
    a2f8:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    a2fc:	1f 91       	pop	r17
    a2fe:	08 95       	ret

0000a300 <lib_printf_uinteger32>:
    a300:	cf 92       	push	r12
    a302:	df 92       	push	r13
    a304:	ef 92       	push	r14
    a306:	ff 92       	push	r15
    a308:	0f 93       	push	r16
    a30a:	1f 93       	push	r17
    a30c:	6b 01       	movw	r12, r22
    a30e:	7c 01       	movw	r14, r24
    a310:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a314:	80 93 53 09 	sts	0x0953, r24
    a318:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <lib_get_node_id>
    a31c:	0e ec       	ldi	r16, 0xCE	; 206
    a31e:	13 e0       	ldi	r17, 0x03	; 3
    a320:	b8 01       	movw	r22, r16
    a322:	4a e0       	ldi	r20, 0x0A	; 10
    a324:	50 e0       	ldi	r21, 0x00	; 0
    a326:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <itoa>
    a32a:	c8 01       	movw	r24, r16
    a32c:	0e 94 1b 51 	call	0xa236	; 0xa236 <lib_print_usart_string>
    a330:	85 e3       	ldi	r24, 0x35	; 53
    a332:	91 e0       	ldi	r25, 0x01	; 1
    a334:	0e 94 1b 51 	call	0xa236	; 0xa236 <lib_print_usart_string>
    a338:	8e ef       	ldi	r24, 0xFE	; 254
    a33a:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a33e:	c7 01       	movw	r24, r14
    a340:	b6 01       	movw	r22, r12
    a342:	0e 94 6f 50 	call	0xa0de	; 0xa0de <lib_usart_put_long>
    a346:	8e ef       	ldi	r24, 0xFE	; 254
    a348:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a34c:	80 91 53 09 	lds	r24, 0x0953
    a350:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    a354:	1f 91       	pop	r17
    a356:	0f 91       	pop	r16
    a358:	ff 90       	pop	r15
    a35a:	ef 90       	pop	r14
    a35c:	df 90       	pop	r13
    a35e:	cf 90       	pop	r12
    a360:	08 95       	ret

0000a362 <lib_printf_integer_u32ln>:

//-------------------------------------------------------------------------
void lib_printf_integer_u32ln(uint32_t val)
{
    a362:	df 92       	push	r13
    a364:	ef 92       	push	r14
    a366:	ff 92       	push	r15
    a368:	0f 93       	push	r16
    a36a:	1f 93       	push	r17
    a36c:	7b 01       	movw	r14, r22
    a36e:	8c 01       	movw	r16, r24
#ifdef PLATFORM_AVR
    _atomic_t currentatomic;
    currentatomic = _atomic_start();
    a370:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a374:	d8 2e       	mov	r13, r24
     lib_printf_uinteger32(val);
    a376:	c8 01       	movw	r24, r16
    a378:	b7 01       	movw	r22, r14
    a37a:	0e 94 80 51 	call	0xa300	; 0xa300 <lib_printf_uinteger32>
     lib_print_usart_string("\n"); 
    a37e:	83 e3       	ldi	r24, 0x33	; 51
    a380:	91 e0       	ldi	r25, 0x01	; 1
    a382:	0e 94 1b 51 	call	0xa236	; 0xa236 <lib_print_usart_string>
	_atomic_end(currentatomic);
    a386:	8d 2d       	mov	r24, r13
    a388:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
   
#endif
}
    a38c:	1f 91       	pop	r17
    a38e:	0f 91       	pop	r16
    a390:	ff 90       	pop	r15
    a392:	ef 90       	pop	r14
    a394:	df 90       	pop	r13
    a396:	08 95       	ret

0000a398 <lib_printf_integer32>:
    a398:	0f 93       	push	r16
    a39a:	1f 93       	push	r17
    a39c:	df 93       	push	r29
    a39e:	cf 93       	push	r28
    a3a0:	00 d0       	rcall	.+0      	; 0xa3a2 <lib_printf_integer32+0xa>
    a3a2:	00 d0       	rcall	.+0      	; 0xa3a4 <lib_printf_integer32+0xc>
    a3a4:	cd b7       	in	r28, 0x3d	; 61
    a3a6:	de b7       	in	r29, 0x3e	; 62
    a3a8:	69 83       	std	Y+1, r22	; 0x01
    a3aa:	7a 83       	std	Y+2, r23	; 0x02
    a3ac:	8b 83       	std	Y+3, r24	; 0x03
    a3ae:	9c 83       	std	Y+4, r25	; 0x04
    a3b0:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a3b4:	80 93 53 09 	sts	0x0953, r24
    a3b8:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <lib_get_node_id>
    a3bc:	0e ec       	ldi	r16, 0xCE	; 206
    a3be:	13 e0       	ldi	r17, 0x03	; 3
    a3c0:	b8 01       	movw	r22, r16
    a3c2:	4a e0       	ldi	r20, 0x0A	; 10
    a3c4:	50 e0       	ldi	r21, 0x00	; 0
    a3c6:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <itoa>
    a3ca:	c8 01       	movw	r24, r16
    a3cc:	0e 94 1b 51 	call	0xa236	; 0xa236 <lib_print_usart_string>
    a3d0:	85 e3       	ldi	r24, 0x35	; 53
    a3d2:	91 e0       	ldi	r25, 0x01	; 1
    a3d4:	0e 94 1b 51 	call	0xa236	; 0xa236 <lib_print_usart_string>
    a3d8:	8d ef       	ldi	r24, 0xFD	; 253
    a3da:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a3de:	69 81       	ldd	r22, Y+1	; 0x01
    a3e0:	7a 81       	ldd	r23, Y+2	; 0x02
    a3e2:	8b 81       	ldd	r24, Y+3	; 0x03
    a3e4:	9c 81       	ldd	r25, Y+4	; 0x04
    a3e6:	0e 94 6f 50 	call	0xa0de	; 0xa0de <lib_usart_put_long>
    a3ea:	8d ef       	ldi	r24, 0xFD	; 253
    a3ec:	0e 94 41 50 	call	0xa082	; 0xa082 <lib_print_usart>
    a3f0:	80 91 53 09 	lds	r24, 0x0953
    a3f4:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
    a3f8:	0f 90       	pop	r0
    a3fa:	0f 90       	pop	r0
    a3fc:	0f 90       	pop	r0
    a3fe:	0f 90       	pop	r0
    a400:	cf 91       	pop	r28
    a402:	df 91       	pop	r29
    a404:	1f 91       	pop	r17
    a406:	0f 91       	pop	r16
    a408:	08 95       	ret

0000a40a <lib_printf_string_with_id>:
    a40a:	ef 92       	push	r14
    a40c:	ff 92       	push	r15
    a40e:	0f 93       	push	r16
    a410:	1f 93       	push	r17
    a412:	7c 01       	movw	r14, r24
    a414:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <lib_get_node_id>
    a418:	0e ec       	ldi	r16, 0xCE	; 206
    a41a:	13 e0       	ldi	r17, 0x03	; 3
    a41c:	b8 01       	movw	r22, r16
    a41e:	4a e0       	ldi	r20, 0x0A	; 10
    a420:	50 e0       	ldi	r21, 0x00	; 0
    a422:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <itoa>
    a426:	c8 01       	movw	r24, r16
    a428:	0e 94 1b 51 	call	0xa236	; 0xa236 <lib_print_usart_string>
    a42c:	85 e3       	ldi	r24, 0x35	; 53
    a42e:	91 e0       	ldi	r25, 0x01	; 1
    a430:	0e 94 1b 51 	call	0xa236	; 0xa236 <lib_print_usart_string>
    a434:	c7 01       	movw	r24, r14
    a436:	0e 94 1b 51 	call	0xa236	; 0xa236 <lib_print_usart_string>
    a43a:	1f 91       	pop	r17
    a43c:	0f 91       	pop	r16
    a43e:	ff 90       	pop	r15
    a440:	ef 90       	pop	r14
    a442:	08 95       	ret

0000a444 <lib_printf_string_energy_wrapper>:
    a444:	0f 93       	push	r16
    a446:	1f 93       	push	r17
    a448:	8c 01       	movw	r16, r24
    a44a:	0e 94 4b 52 	call	0xa496	; 0xa496 <lib_string_length>
    a44e:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    a452:	c8 01       	movw	r24, r16
    a454:	0e 94 05 52 	call	0xa40a	; 0xa40a <lib_printf_string_with_id>
    a458:	1f 91       	pop	r17
    a45a:	0f 91       	pop	r16
    a45c:	08 95       	ret

0000a45e <lib_sounder_on>:
#include "libsounder.h"
#include "liteoscommon.h"
#include "../types/types.h"
void lib_sounder_on()
{
    a45e:	e8 e1       	ldi	r30, 0x18	; 24
    a460:	fd ee       	ldi	r31, 0xED	; 237
    a462:	09 95       	icall
                          
  void (*sounderfp)() = (void (*)(void))SOUNDER_ON_FUNCTION; 
  sounderfp();    
}
    a464:	08 95       	ret

0000a466 <lib_sounder_off>:



void lib_sounder_off()
{
    a466:	ec e1       	ldi	r30, 0x1C	; 28
    a468:	fd ee       	ldi	r31, 0xED	; 237
    a46a:	09 95       	icall
                          
  void (*sounderfp)() = (void (*)(void))SOUNDER_OFF_FUNCTION; 
  sounderfp();    
}
    a46c:	08 95       	ret

0000a46e <lib_hex2value>:
#include "../types/types.h"


uint16_t lib_hex2value(uint8_t hex)
{
    a46e:	98 2f       	mov	r25, r24
  char a = (char)hex;
  uint16_t high;

  if ((a>='0')&&(a<='9'))
    a470:	80 53       	subi	r24, 0x30	; 48
    a472:	8a 30       	cpi	r24, 0x0A	; 10
    a474:	40 f0       	brcs	.+16     	; 0xa486 <lib_hex2value+0x18>
	     high = a-'0';
  else
		 high = a-'A'+ 10;
    a476:	29 2f       	mov	r18, r25
    a478:	33 27       	eor	r19, r19
    a47a:	27 fd       	sbrc	r18, 7
    a47c:	30 95       	com	r19
    a47e:	27 53       	subi	r18, 0x37	; 55
    a480:	30 40       	sbci	r19, 0x00	; 0
  return high;

}
    a482:	c9 01       	movw	r24, r18
    a484:	08 95       	ret
    a486:	29 2f       	mov	r18, r25
    a488:	33 27       	eor	r19, r19
    a48a:	27 fd       	sbrc	r18, 7
    a48c:	30 95       	com	r19
    a48e:	20 53       	subi	r18, 0x30	; 48
    a490:	30 40       	sbci	r19, 0x00	; 0
    a492:	c9 01       	movw	r24, r18
    a494:	08 95       	ret

0000a496 <lib_string_length>:


int lib_string_length(char* s) {
    a496:	dc 01       	movw	r26, r24
	int count=0;
	while(s[count] != '\0')
    a498:	8c 91       	ld	r24, X
    a49a:	88 23       	and	r24, r24
    a49c:	61 f0       	breq	.+24     	; 0xa4b6 <lib_string_length+0x20>
    a49e:	20 e0       	ldi	r18, 0x00	; 0
    a4a0:	30 e0       	ldi	r19, 0x00	; 0
		count++;
    a4a2:	2f 5f       	subi	r18, 0xFF	; 255
    a4a4:	3f 4f       	sbci	r19, 0xFF	; 255
    a4a6:	fd 01       	movw	r30, r26
    a4a8:	e2 0f       	add	r30, r18
    a4aa:	f3 1f       	adc	r31, r19
    a4ac:	80 81       	ld	r24, Z
    a4ae:	88 23       	and	r24, r24
    a4b0:	c1 f7       	brne	.-16     	; 0xa4a2 <lib_string_length+0xc>
	return count;
}
    a4b2:	c9 01       	movw	r24, r18
    a4b4:	08 95       	ret
    a4b6:	20 e0       	ldi	r18, 0x00	; 0
    a4b8:	30 e0       	ldi	r19, 0x00	; 0
    a4ba:	fb cf       	rjmp	.-10     	; 0xa4b2 <lib_string_length+0x1c>

0000a4bc <lib_mystrncpy>:




void lib_mystrncpy(char *dest, const char *src, uint16_t n)
{
    a4bc:	cf 93       	push	r28
    a4be:	df 93       	push	r29
    a4c0:	ec 01       	movw	r28, r24
	uint16_t i;
	for (i=0;i<n;i++)
    a4c2:	41 15       	cp	r20, r1
    a4c4:	51 05       	cpc	r21, r1
    a4c6:	79 f0       	breq	.+30     	; 0xa4e6 <lib_mystrncpy+0x2a>
    a4c8:	20 e0       	ldi	r18, 0x00	; 0
    a4ca:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    a4cc:	fe 01       	movw	r30, r28
    a4ce:	e2 0f       	add	r30, r18
    a4d0:	f3 1f       	adc	r31, r19
    a4d2:	db 01       	movw	r26, r22
    a4d4:	a2 0f       	add	r26, r18
    a4d6:	b3 1f       	adc	r27, r19
    a4d8:	8c 91       	ld	r24, X
    a4da:	80 83       	st	Z, r24
    a4dc:	2f 5f       	subi	r18, 0xFF	; 255
    a4de:	3f 4f       	sbci	r19, 0xFF	; 255
    a4e0:	24 17       	cp	r18, r20
    a4e2:	35 07       	cpc	r19, r21
    a4e4:	98 f3       	brcs	.-26     	; 0xa4cc <lib_mystrncpy+0x10>
}
    a4e6:	df 91       	pop	r29
    a4e8:	cf 91       	pop	r28
    a4ea:	08 95       	ret

0000a4ec <lib_mystrcpy>:


void lib_mystrcpy(char *dest, const char *src)
{
    a4ec:	cf 93       	push	r28
    a4ee:	df 93       	push	r29
    a4f0:	eb 01       	movw	r28, r22
	int i;
	i = 0;
	while (src[i]!='\0')
    a4f2:	e8 81       	ld	r30, Y
    a4f4:	ee 23       	and	r30, r30
    a4f6:	b1 f0       	breq	.+44     	; 0xa524 <lib_mystrcpy+0x38>
    a4f8:	20 e0       	ldi	r18, 0x00	; 0
    a4fa:	30 e0       	ldi	r19, 0x00	; 0
    a4fc:	a0 e0       	ldi	r26, 0x00	; 0
    a4fe:	b0 e0       	ldi	r27, 0x00	; 0
	{ dest[i] = src[i];
    a500:	a8 0f       	add	r26, r24
    a502:	b9 1f       	adc	r27, r25
    a504:	ec 93       	st	X, r30
	i++;
    a506:	2f 5f       	subi	r18, 0xFF	; 255
    a508:	3f 4f       	sbci	r19, 0xFF	; 255
    a50a:	d9 01       	movw	r26, r18
    a50c:	fe 01       	movw	r30, r28
    a50e:	e2 0f       	add	r30, r18
    a510:	f3 1f       	adc	r31, r19
    a512:	e0 81       	ld	r30, Z
    a514:	ee 23       	and	r30, r30
    a516:	a1 f7       	brne	.-24     	; 0xa500 <lib_mystrcpy+0x14>
	}
	dest[i] = '\0';
    a518:	a8 0f       	add	r26, r24
    a51a:	b9 1f       	adc	r27, r25
    a51c:	1c 92       	st	X, r1
}
    a51e:	df 91       	pop	r29
    a520:	cf 91       	pop	r28
    a522:	08 95       	ret
    a524:	a0 e0       	ldi	r26, 0x00	; 0
    a526:	b0 e0       	ldi	r27, 0x00	; 0
    a528:	f7 cf       	rjmp	.-18     	; 0xa518 <lib_mystrcpy+0x2c>

0000a52a <lib_dec2char>:


char lib_dec2char(uint8_t value) {
    a52a:	8a 30       	cpi	r24, 0x0A	; 10
    a52c:	10 f4       	brcc	.+4      	; 0xa532 <lib_dec2char+0x8>

	if (/*value >= 0) &&*/(value <=9))
		return (char) (value + 0x30);
    a52e:	80 5d       	subi	r24, 0xD0	; 208
	else
		return 0;
}
    a530:	08 95       	ret
    a532:	80 e0       	ldi	r24, 0x00	; 0
    a534:	08 95       	ret

0000a536 <lib_string_int_to_string>:


char *lib_string_int_to_string(int num)
{
    a536:	cf 93       	push	r28
    a538:	df 93       	push	r29
    a53a:	ec 01       	movw	r28, r24
    a53c:	9c 01       	movw	r18, r24
    a53e:	97 fd       	sbrc	r25, 7
    a540:	41 c0       	rjmp	.+130    	; 0xa5c4 <lib_string_int_to_string+0x8e>
	static char temp[7];
	int internal;
	uint8_t length;
	uint8_t i;
	uint8_t offset = 5;
	uint8_t remainder;

	if (num <0)
		internal = -num;
	else
		internal = num;

	temp[6] = '\0';
    a542:	10 92 e4 03 	sts	0x03E4, r1
    a546:	45 e0       	ldi	r20, 0x05	; 5
    a548:	10 c0       	rjmp	.+32     	; 0xa56a <lib_string_int_to_string+0x34>
    a54a:	80 e0       	ldi	r24, 0x00	; 0

	do
	{
		remainder = internal%10;
		temp[offset]= lib_dec2char(remainder);
    a54c:	e4 2f       	mov	r30, r20
    a54e:	f0 e0       	ldi	r31, 0x00	; 0
    a550:	e2 52       	subi	r30, 0x22	; 34
    a552:	fc 4f       	sbci	r31, 0xFC	; 252
    a554:	80 83       	st	Z, r24
		internal = internal/10;
    a556:	c9 01       	movw	r24, r18
    a558:	6a e0       	ldi	r22, 0x0A	; 10
    a55a:	70 e0       	ldi	r23, 0x00	; 0
    a55c:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    a560:	9b 01       	movw	r18, r22
		offset--;
    a562:	41 50       	subi	r20, 0x01	; 1
	}
	while (internal!=0);
    a564:	61 15       	cp	r22, r1
    a566:	71 05       	cpc	r23, r1
    a568:	49 f0       	breq	.+18     	; 0xa57c <lib_string_int_to_string+0x46>
    a56a:	c9 01       	movw	r24, r18
    a56c:	6a e0       	ldi	r22, 0x0A	; 10
    a56e:	70 e0       	ldi	r23, 0x00	; 0
    a570:	0e 94 87 54 	call	0xa90e	; 0xa90e <__divmodhi4>
    a574:	8a 30       	cpi	r24, 0x0A	; 10
    a576:	48 f7       	brcc	.-46     	; 0xa54a <lib_string_int_to_string+0x14>
    a578:	80 5d       	subi	r24, 0xD0	; 208
    a57a:	e8 cf       	rjmp	.-48     	; 0xa54c <lib_string_int_to_string+0x16>

	if (num<0)
    a57c:	d7 fd       	sbrc	r29, 7
    a57e:	18 c0       	rjmp	.+48     	; 0xa5b0 <lib_string_int_to_string+0x7a>
	{temp[offset] = '-';
	 if (offset ==0)
		 return temp;
	 else
		 offset--;

	}




	{
		length = 7-offset-1;
    a580:	86 e0       	ldi	r24, 0x06	; 6
    a582:	84 1b       	sub	r24, r20
		for (i=0;i<length;i++)
    a584:	81 f0       	breq	.+32     	; 0xa5a6 <lib_string_int_to_string+0x70>
    a586:	e4 2f       	mov	r30, r20
    a588:	f0 e0       	ldi	r31, 0x00	; 0
    a58a:	e1 52       	subi	r30, 0x21	; 33
    a58c:	fc 4f       	sbci	r31, 0xFC	; 252
    a58e:	ae ed       	ldi	r26, 0xDE	; 222
    a590:	b3 e0       	ldi	r27, 0x03	; 3
    a592:	81 50       	subi	r24, 0x01	; 1
    a594:	28 2f       	mov	r18, r24
    a596:	30 e0       	ldi	r19, 0x00	; 0
    a598:	21 52       	subi	r18, 0x21	; 33
    a59a:	3c 4f       	sbci	r19, 0xFC	; 252
			temp[i] = temp[i+offset+1];
    a59c:	81 91       	ld	r24, Z+
    a59e:	8d 93       	st	X+, r24
    a5a0:	a2 17       	cp	r26, r18
    a5a2:	b3 07       	cpc	r27, r19
    a5a4:	d9 f7       	brne	.-10     	; 0xa59c <lib_string_int_to_string+0x66>
	}
	return temp;
}
    a5a6:	8e ed       	ldi	r24, 0xDE	; 222
    a5a8:	93 e0       	ldi	r25, 0x03	; 3
    a5aa:	df 91       	pop	r29
    a5ac:	cf 91       	pop	r28
    a5ae:	08 95       	ret
    a5b0:	e4 2f       	mov	r30, r20
    a5b2:	f0 e0       	ldi	r31, 0x00	; 0
    a5b4:	e2 52       	subi	r30, 0x22	; 34
    a5b6:	fc 4f       	sbci	r31, 0xFC	; 252
    a5b8:	8d e2       	ldi	r24, 0x2D	; 45
    a5ba:	80 83       	st	Z, r24
    a5bc:	44 23       	and	r20, r20
    a5be:	99 f3       	breq	.-26     	; 0xa5a6 <lib_string_int_to_string+0x70>
    a5c0:	41 50       	subi	r20, 0x01	; 1
    a5c2:	de cf       	rjmp	.-68     	; 0xa580 <lib_string_int_to_string+0x4a>
    a5c4:	22 27       	eor	r18, r18
    a5c6:	33 27       	eor	r19, r19
    a5c8:	28 1b       	sub	r18, r24
    a5ca:	39 0b       	sbc	r19, r25
    a5cc:	ba cf       	rjmp	.-140    	; 0xa542 <lib_string_int_to_string+0xc>

0000a5ce <lib_string_append>:

void lib_string_append(char *base, char *string)
{
    a5ce:	0f 93       	push	r16
    a5d0:	1f 93       	push	r17
    a5d2:	cf 93       	push	r28
    a5d4:	df 93       	push	r29
    a5d6:	8c 01       	movw	r16, r24
    a5d8:	fc 01       	movw	r30, r24
    a5da:	80 81       	ld	r24, Z
    a5dc:	88 23       	and	r24, r24
    a5de:	c1 f1       	breq	.+112    	; 0xa650 <lib_string_append+0x82>
    a5e0:	40 e0       	ldi	r20, 0x00	; 0
    a5e2:	50 e0       	ldi	r21, 0x00	; 0
    a5e4:	4f 5f       	subi	r20, 0xFF	; 255
    a5e6:	5f 4f       	sbci	r21, 0xFF	; 255
    a5e8:	e8 01       	movw	r28, r16
    a5ea:	c4 0f       	add	r28, r20
    a5ec:	d5 1f       	adc	r29, r21
    a5ee:	88 81       	ld	r24, Y
    a5f0:	88 23       	and	r24, r24
    a5f2:	c1 f7       	brne	.-16     	; 0xa5e4 <lib_string_append+0x16>
    a5f4:	fb 01       	movw	r30, r22
    a5f6:	80 81       	ld	r24, Z
    a5f8:	88 23       	and	r24, r24
    a5fa:	69 f1       	breq	.+90     	; 0xa656 <lib_string_append+0x88>
    a5fc:	20 e0       	ldi	r18, 0x00	; 0
    a5fe:	30 e0       	ldi	r19, 0x00	; 0
    a600:	2f 5f       	subi	r18, 0xFF	; 255
    a602:	3f 4f       	sbci	r19, 0xFF	; 255
    a604:	fb 01       	movw	r30, r22
    a606:	e2 0f       	add	r30, r18
    a608:	f3 1f       	adc	r31, r19
    a60a:	80 81       	ld	r24, Z
    a60c:	88 23       	and	r24, r24
    a60e:	c1 f7       	brne	.-16     	; 0xa600 <lib_string_append+0x32>
    a610:	90 e0       	ldi	r25, 0x00	; 0
    a612:	a0 e0       	ldi	r26, 0x00	; 0
    a614:	b0 e0       	ldi	r27, 0x00	; 0
    a616:	e8 01       	movw	r28, r16
    a618:	c4 0f       	add	r28, r20
    a61a:	d5 1f       	adc	r29, r21
    a61c:	e0 e0       	ldi	r30, 0x00	; 0
    a61e:	f0 e0       	ldi	r31, 0x00	; 0
	int length1, length2;
	uint8_t i;
	length1 = lib_string_length(base);
	length2 = lib_string_length(string);
	for (i=0;i<length2;i++)
	{
		base[i+length1] = string[i];
    a620:	ac 0f       	add	r26, r28
    a622:	bd 1f       	adc	r27, r29
    a624:	e6 0f       	add	r30, r22
    a626:	f7 1f       	adc	r31, r23
    a628:	80 81       	ld	r24, Z
    a62a:	8c 93       	st	X, r24
    a62c:	9f 5f       	subi	r25, 0xFF	; 255
    a62e:	e9 2f       	mov	r30, r25
    a630:	f0 e0       	ldi	r31, 0x00	; 0
    a632:	df 01       	movw	r26, r30
    a634:	e2 17       	cp	r30, r18
    a636:	f3 07       	cpc	r31, r19
    a638:	9c f3       	brlt	.-26     	; 0xa620 <lib_string_append+0x52>

	}
	base[length1+length2] = '\0';
    a63a:	20 0f       	add	r18, r16
    a63c:	31 1f       	adc	r19, r17
    a63e:	42 0f       	add	r20, r18
    a640:	53 1f       	adc	r21, r19
    a642:	fa 01       	movw	r30, r20
    a644:	10 82       	st	Z, r1
}
    a646:	df 91       	pop	r29
    a648:	cf 91       	pop	r28
    a64a:	1f 91       	pop	r17
    a64c:	0f 91       	pop	r16
    a64e:	08 95       	ret
    a650:	40 e0       	ldi	r20, 0x00	; 0
    a652:	50 e0       	ldi	r21, 0x00	; 0
    a654:	cf cf       	rjmp	.-98     	; 0xa5f4 <lib_string_append+0x26>
    a656:	20 e0       	ldi	r18, 0x00	; 0
    a658:	30 e0       	ldi	r19, 0x00	; 0
    a65a:	ef cf       	rjmp	.-34     	; 0xa63a <lib_string_append+0x6c>

0000a65c <lib_string_split>:

char* lib_string_split(char ** string, char delimiter)
{
    a65c:	cf 93       	push	r28
    a65e:	df 93       	push	r29
    a660:	ec 01       	movw	r28, r24
	uint16_t i;
	char* output = (*string);
    a662:	a8 81       	ld	r26, Y
    a664:	b9 81       	ldd	r27, Y+1	; 0x01

	for (i = 0; output[i] != 0; i++) 
    a666:	8c 91       	ld	r24, X
    a668:	88 23       	and	r24, r24
    a66a:	11 f1       	breq	.+68     	; 0xa6b0 <lib_string_split+0x54>
		if (output[i] == delimiter) {
    a66c:	86 17       	cp	r24, r22
    a66e:	11 f1       	breq	.+68     	; 0xa6b4 <lib_string_split+0x58>
			output[i] = 0;
			*string = output + i + 1;
			return output;
    a670:	ad 01       	movw	r20, r26
    a672:	4f 5f       	subi	r20, 0xFF	; 255
    a674:	5f 4f       	sbci	r21, 0xFF	; 255
    a676:	80 e0       	ldi	r24, 0x00	; 0
    a678:	90 e0       	ldi	r25, 0x00	; 0
    a67a:	05 c0       	rjmp	.+10     	; 0xa686 <lib_string_split+0x2a>
    a67c:	af 01       	movw	r20, r30
    a67e:	4f 5f       	subi	r20, 0xFF	; 255
    a680:	5f 4f       	sbci	r21, 0xFF	; 255
    a682:	26 17       	cp	r18, r22
    a684:	59 f0       	breq	.+22     	; 0xa69c <lib_string_split+0x40>
    a686:	01 96       	adiw	r24, 0x01	; 1
    a688:	fa 01       	movw	r30, r20
    a68a:	20 81       	ld	r18, Z
    a68c:	22 23       	and	r18, r18
    a68e:	b1 f7       	brne	.-20     	; 0xa67c <lib_string_split+0x20>
		}

	*string = output + i;
    a690:	f9 83       	std	Y+1, r31	; 0x01
    a692:	e8 83       	st	Y, r30
	return output;
}
    a694:	cd 01       	movw	r24, r26
    a696:	df 91       	pop	r29
    a698:	cf 91       	pop	r28
    a69a:	08 95       	ret
    a69c:	01 96       	adiw	r24, 0x01	; 1
    a69e:	10 82       	st	Z, r1
    a6a0:	8a 0f       	add	r24, r26
    a6a2:	9b 1f       	adc	r25, r27
    a6a4:	99 83       	std	Y+1, r25	; 0x01
    a6a6:	88 83       	st	Y, r24
    a6a8:	cd 01       	movw	r24, r26
    a6aa:	df 91       	pop	r29
    a6ac:	cf 91       	pop	r28
    a6ae:	08 95       	ret
    a6b0:	fd 01       	movw	r30, r26
    a6b2:	ee cf       	rjmp	.-36     	; 0xa690 <lib_string_split+0x34>
    a6b4:	fd 01       	movw	r30, r26
    a6b6:	81 e0       	ldi	r24, 0x01	; 1
    a6b8:	90 e0       	ldi	r25, 0x00	; 0
    a6ba:	f1 cf       	rjmp	.-30     	; 0xa69e <lib_string_split+0x42>

0000a6bc <lib_random>:
_atomic_t flag; 


int lib_random()
{
    a6bc:	4f 93       	push	r20
    a6be:	5f 93       	push	r21

	 int ret;
   void (*getrandomfp)(void) = (void (*)(void))GET_RANDOM_NUMBER_FUNCTION;
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getrandomfp();
    a6c0:	e8 e0       	ldi	r30, 0x08	; 8
    a6c2:	fa ee       	ldi	r31, 0xEA	; 234
    a6c4:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a6c6:	24 2f       	mov	r18, r20
    a6c8:	35 2f       	mov	r19, r21
	              "mov %B0, r21" "\n\t"
				 :"=r" (ret)
				 :
                );
   asm volatile("pop r21" "\n\t"
    a6ca:	5f 91       	pop	r21
    a6cc:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return ret;

}
    a6ce:	c9 01       	movw	r24, r18
    a6d0:	08 95       	ret

0000a6d2 <lib_get_node_id>:



uint16_t lib_get_node_id()
	{
    a6d2:	4f 93       	push	r20
    a6d4:	5f 93       	push	r21

	   int ret;
	   void (*fp)(void) = (void (*)(void))GET_NODE_ID_FUNCTION;
	   asm volatile("push r20" "\n\t"
					"push r21" "\n\t"
					::);
	   fp();
    a6d6:	e0 e0       	ldi	r30, 0x00	; 0
    a6d8:	fa ee       	ldi	r31, 0xEA	; 234
    a6da:	09 95       	icall
	   asm volatile(" mov %A0, r20" "\n\t"
    a6dc:	24 2f       	mov	r18, r20
    a6de:	35 2f       	mov	r19, r21
					  "mov %B0, r21" "\n\t"
					 :"=r" (ret)
					 :
					);
	   asm volatile("pop r21" "\n\t"
    a6e0:	5f 91       	pop	r21
    a6e2:	4f 91       	pop	r20
					 "pop r20" "\n\t"
					  ::);
	   return ret;

	}
    a6e4:	c9 01       	movw	r24, r18
    a6e6:	08 95       	ret

0000a6e8 <lib_set_node_id>:


void lib_set_node_id(uint16_t nodeid)
	{
    a6e8:	4f 93       	push	r20
    a6ea:	5f 93       	push	r21



	   void (*fp)(void) = (void (*)(void))SET_NODE_ID_FUNCTION;
	   asm volatile("push r20" "\n\t"
					"push r21" "\n\t"
					::);

	   asm volatile(" mov r20, %A0" "\n\t"
    a6ec:	48 2f       	mov	r20, r24
    a6ee:	59 2f       	mov	r21, r25
					  "mov r21, %B0" "\n\t"
					 :
					 :"r" (nodeid)
					);
	   fp();
    a6f0:	e4 e0       	ldi	r30, 0x04	; 4
    a6f2:	fa ee       	ldi	r31, 0xEA	; 234
    a6f4:	09 95       	icall
	   asm volatile("pop r21" "\n\t"
    a6f6:	5f 91       	pop	r21
    a6f8:	4f 91       	pop	r20
					 "pop r20" "\n\t"
					  ::);
	   return;

	}
    a6fa:	08 95       	ret

0000a6fc <lib_get_current_thread>:

//Warning: this returns the address of the currentthread pointer. 

lib_thread **lib_get_current_thread()
{
    a6fc:	4f 93       	push	r20
    a6fe:	5f 93       	push	r21
   lib_thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    a700:	e0 e8       	ldi	r30, 0x80	; 128
    a702:	fa ee       	ldi	r31, 0xEA	; 234
    a704:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a706:	24 2f       	mov	r18, r20
    a708:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
    a70a:	5f 91       	pop	r21
    a70c:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return current_thread; 
}
    a70e:	c9 01       	movw	r24, r18
    a710:	08 95       	ret

0000a712 <lib_get_kernel_stack_ptr>:


void **lib_get_kernel_stack_ptr()
	{
    a712:	4f 93       	push	r20
    a714:	5f 93       	push	r21
   void **ptr;
   void (*getaddrfp)(void) = (void (*)(void))GET_KERNEL_STACK_PTR_ADDRESS; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    a716:	e0 e8       	ldi	r30, 0x80	; 128
    a718:	fb ee       	ldi	r31, 0xEB	; 235
    a71a:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a71c:	24 2f       	mov	r18, r20
    a71e:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (ptr)
				 :
                );
    asm volatile("pop r21" "\n\t"
    a720:	5f 91       	pop	r21
    a722:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return ptr; 
}
    a724:	c9 01       	movw	r24, r18
    a726:	08 95       	ret

0000a728 <lib_get_current_thread_index>:







uint8_t lib_get_current_thread_index()
{
    a728:	4f 93       	push	r20
    a72a:	5f 93       	push	r21
   
   uint16_t index; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_INDEX_FUNCTION; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    a72c:	e4 e8       	ldi	r30, 0x84	; 132
    a72e:	fa ee       	ldi	r31, 0xEA	; 234
    a730:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a732:	84 2f       	mov	r24, r20
    a734:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (index)
				 :
                );
    asm volatile("pop r21" "\n\t"
    a736:	5f 91       	pop	r21
    a738:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return (uint8_t)index; 
}
    a73a:	08 95       	ret

0000a73c <lib_get_thread_table_start>:


lib_thread *lib_get_thread_table_start()
{
    a73c:	4f 93       	push	r20
    a73e:	5f 93       	push	r21
	 lib_thread *fp;
	 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_TABLE_START; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
    a740:	e8 e8       	ldi	r30, 0x88	; 136
    a742:	fa ee       	ldi	r31, 0xEA	; 234
    a744:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
    a746:	24 2f       	mov	r18, r20
    a748:	35 2f       	mov	r19, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (fp)
				 :
                );
    asm volatile("pop r21" "\n\t"
    a74a:	5f 91       	pop	r21
    a74c:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
   return fp; 
	
}
    a74e:	c9 01       	movw	r24, r18
    a750:	08 95       	ret

0000a752 <lib_sleep_thread>:

void lib_sleep_thread(uint16_t milliseconds)
{
    a752:	0f 93       	push	r16
    a754:	1f 93       	push	r17
    a756:	8c 01       	movw	r16, r24
/*
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 

   asm volatile("push r24" "\n\t"
	             "push r25" "\n\t"
	              ::);
   getaddrfp();     

   asm volatile(" mov %A0, r24" "\n\t"
	             "mov %B0, r25" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r24" "\n\t"
	             "pop r25" "\n\t"
	              ::);
 */
 
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
    a758:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    a75c:	dc 01       	movw	r26, r24
     
   (*current_thread)->state = 4;
    a75e:	ed 91       	ld	r30, X+
    a760:	fc 91       	ld	r31, X
    a762:	11 97       	sbiw	r26, 0x01	; 1
    a764:	84 e0       	ldi	r24, 0x04	; 4
    a766:	82 83       	std	Z+2, r24	; 0x02
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
    a768:	ed 91       	ld	r30, X+
    a76a:	fc 91       	ld	r31, X
    a76c:	16 8f       	std	Z+30, r17	; 0x1e
    a76e:	05 8f       	std	Z+29, r16	; 0x1d
   
   lib_yield(); 
}


void lib_hibernate_thread()
{
 
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
     
   (*current_thread)->state = 5; 
   lib_yield(); 
}


void lib_yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
    a770:	ec e8       	ldi	r30, 0x8C	; 140
    a772:	fa ee       	ldi	r31, 0xEA	; 234
    a774:	09 95       	icall
    a776:	1f 91       	pop	r17
    a778:	0f 91       	pop	r16
    a77a:	08 95       	ret

0000a77c <lib_hibernate_thread>:
    a77c:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    a780:	fc 01       	movw	r30, r24
    a782:	01 90       	ld	r0, Z+
    a784:	f0 81       	ld	r31, Z
    a786:	e0 2d       	mov	r30, r0
    a788:	85 e0       	ldi	r24, 0x05	; 5
    a78a:	82 83       	std	Z+2, r24	; 0x02
    a78c:	ec e8       	ldi	r30, 0x8C	; 140
    a78e:	fa ee       	ldi	r31, 0xEA	; 234
    a790:	09 95       	icall
    a792:	08 95       	ret

0000a794 <lib_yield>:
    a794:	ec e8       	ldi	r30, 0x8C	; 140
    a796:	fa ee       	ldi	r31, 0xEA	; 234
    a798:	09 95       	icall
}
    a79a:	08 95       	ret

0000a79c <syscall_post_thread_task>:



void syscall_post_thread_task()
{
    a79c:	e0 e9       	ldi	r30, 0x90	; 144
    a79e:	fa ee       	ldi	r31, 0xEA	; 234
    a7a0:	09 95       	icall
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK; 
 postthreadfp();                              
}
    a7a2:	08 95       	ret

0000a7a4 <lib_post_new_task>:



void lib_post_new_task(void (*tp) (void), uint16_t priority)
{
    a7a4:	4f 93       	push	r20
    a7a6:	5f 93       	push	r21
    a7a8:	6f 93       	push	r22
    a7aa:	7f 93       	push	r23
   void (*fp)(void) = (void (*)(void))POST_TASK_SYSCALL; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
				"push r22" "\n\t"
				"push r23" "\n\t"
                ::);
   
   asm volatile(" mov r20, %A0" "\n\t"
    a7ac:	48 2f       	mov	r20, r24
    a7ae:	59 2f       	mov	r21, r25
	             "mov r21, %B0" "\n\t"
				 :
				 :"r" (tp)
                );


   asm volatile(" mov r22, %A0" "\n\t"
    a7b0:	66 2f       	mov	r22, r22
    a7b2:	77 2f       	mov	r23, r23
	             "mov r23, %B0" "\n\t"
				 :
				 :"r" (priority)
                );

  fp(); 
    a7b4:	e0 e0       	ldi	r30, 0x00	; 0
    a7b6:	fb ee       	ldi	r31, 0xEB	; 235
    a7b8:	09 95       	icall

  asm volatile("pop r23" "\n\t"
    a7ba:	7f 91       	pop	r23
    a7bc:	6f 91       	pop	r22
	           "pop r22" "\n\t"
	              ::);

  asm volatile("pop r21" "\n\t"
    a7be:	5f 91       	pop	r21
    a7c0:	4f 91       	pop	r20
	           "pop r20" "\n\t"
	              ::);
  return; 


}
    a7c2:	08 95       	ret

0000a7c4 <syscall_post_thread_task_no_logging>:



 



void syscall_post_thread_task_no_logging()
{
    a7c4:	e4 e9       	ldi	r30, 0x94	; 148
    a7c6:	fa ee       	ldi	r31, 0xEA	; 234
    a7c8:	09 95       	icall
	void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK_NOLOG; 
  postthreadfp();  
	
}
    a7ca:	08 95       	ret

0000a7cc <lib_set_thread_termination_handler>:



 

void lib_set_thread_termination_handler(void (*tp) (void))
{
    a7cc:	0f 93       	push	r16
    a7ce:	1f 93       	push	r17
    a7d0:	8c 01       	movw	r16, r24
   
   lib_thread **current_thread; 
   current_thread = lib_get_current_thread(); 
    a7d2:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    a7d6:	fc 01       	movw	r30, r24
     
   (*current_thread)->thread_clear_function = tp; 
    a7d8:	01 90       	ld	r0, Z+
    a7da:	f0 81       	ld	r31, Z
    a7dc:	e0 2d       	mov	r30, r0
    a7de:	14 8f       	std	Z+28, r17	; 0x1c
    a7e0:	03 8f       	std	Z+27, r16	; 0x1b
   return; 
}
    a7e2:	1f 91       	pop	r17
    a7e4:	0f 91       	pop	r16
    a7e6:	08 95       	ret

0000a7e8 <lib_file_barrier_block>:




void lib_file_barrier_block(uint8_t type, uint8_t id){
    a7e8:	df 92       	push	r13
    a7ea:	ef 92       	push	r14
    a7ec:	ff 92       	push	r15
    a7ee:	0f 93       	push	r16
    a7f0:	1f 93       	push	r17
    a7f2:	e8 2e       	mov	r14, r24
    a7f4:	d6 2e       	mov	r13, r22
   
    _atomic_t currentatomic;
	lib_thread **current_thread; 

     
	current_thread = lib_get_current_thread(); 
    a7f6:	0e 94 7e 53 	call	0xa6fc	; 0xa6fc <lib_get_current_thread>
    a7fa:	8c 01       	movw	r16, r24

    currentatomic = _atomic_start();
    a7fc:	0e 94 de 3b 	call	0x77bc	; 0x77bc <_atomic_start>
    a800:	f8 2e       	mov	r15, r24
    
      (*current_thread)->state = STATE_IO;
    a802:	d8 01       	movw	r26, r16
    a804:	ed 91       	ld	r30, X+
    a806:	fc 91       	ld	r31, X
    a808:	11 97       	sbiw	r26, 0x01	; 1
    a80a:	86 e0       	ldi	r24, 0x06	; 6
    a80c:	82 83       	std	Z+2, r24	; 0x02
      (*current_thread)->data.iostate.type = type;
    a80e:	ed 91       	ld	r30, X+
    a810:	fc 91       	ld	r31, X
    a812:	11 97       	sbiw	r26, 0x01	; 1
    a814:	e5 8e       	std	Z+29, r14	; 0x1d
      (*current_thread)->data.iostate.id = id;
    a816:	ed 91       	ld	r30, X+
    a818:	fc 91       	ld	r31, X
    a81a:	d6 8e       	std	Z+30, r13	; 0x1e
      lib_yield();
    a81c:	0e 94 ca 53 	call	0xa794	; 0xa794 <lib_yield>
    
    _atomic_end(currentatomic);
    a820:	8f 2d       	mov	r24, r15
    a822:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_atomic_end>
}
    a826:	1f 91       	pop	r17
    a828:	0f 91       	pop	r16
    a82a:	ff 90       	pop	r15
    a82c:	ef 90       	pop	r14
    a82e:	df 90       	pop	r13
    a830:	08 95       	ret

0000a832 <blink>:
LIB_MYFILE *filefp; 
uint16_t counter; 

void blink()
{
    a832:	cf 93       	push	r28
    a834:	df 93       	push	r29

   char *str = "hello,world"; 
/* 
   filefp =  lib_mfopen("/hello", "w");
   for (i=0;i<100;i++)
{   lib_mfwrite(filefp, str, 10);
   lib_mfseek(filefp, 10, 1);
}
   lib_mfclose(filefp); 
*/
	 
   for (counter=0; counter<3000; counter++)
    a836:	10 92 ef 09 	sts	0x09EF, r1
    a83a:	10 92 ee 09 	sts	0x09EE, r1
    a83e:	80 e0       	ldi	r24, 0x00	; 0
    a840:	90 e0       	ldi	r25, 0x00	; 0
    a842:	c1 e0       	ldi	r28, 0x01	; 1
    a844:	d0 e0       	ldi	r29, 0x00	; 0
   	{
   	 if (counter<1000)
    a846:	23 e0       	ldi	r18, 0x03	; 3
    a848:	88 3e       	cpi	r24, 0xE8	; 232
    a84a:	92 07       	cpc	r25, r18
    a84c:	50 f1       	brcs	.+84     	; 0xa8a2 <blink+0x70>
	   lib_red_toggle();   
     else if (counter <2000)
    a84e:	80 5d       	subi	r24, 0xD0	; 208
    a850:	97 40       	sbci	r25, 0x07	; 7
    a852:	d0 f4       	brcc	.+52     	; 0xa888 <blink+0x56>
	    lib_yellow_toggle();
    a854:	0e 94 79 4e 	call	0x9cf2	; 0x9cf2 <lib_yellow_toggle>
		else
		 lib_green_toggle();

   	// lib_radio_send_msg(16, 0xFFFF, 8, (uint8_t*)str);

     lib_sleep_thread(100);
    a858:	84 e6       	ldi	r24, 0x64	; 100
    a85a:	90 e0       	ldi	r25, 0x00	; 0
    a85c:	0e 94 a9 53 	call	0xa752	; 0xa752 <lib_sleep_thread>
     if (counter == 2999)
    a860:	80 91 ee 09 	lds	r24, 0x09EE
    a864:	90 91 ef 09 	lds	r25, 0x09EF
    a868:	2b e0       	ldi	r18, 0x0B	; 11
    a86a:	87 3b       	cpi	r24, 0xB7	; 183
    a86c:	92 07       	cpc	r25, r18
    a86e:	79 f0       	breq	.+30     	; 0xa88e <blink+0x5c>
    a870:	01 96       	adiw	r24, 0x01	; 1
    a872:	90 93 ef 09 	sts	0x09EF, r25
    a876:	80 93 ee 09 	sts	0x09EE, r24
    a87a:	2b e0       	ldi	r18, 0x0B	; 11
    a87c:	88 3b       	cpi	r24, 0xB8	; 184
    a87e:	92 07       	cpc	r25, r18
    a880:	10 f3       	brcs	.-60     	; 0xa846 <blink+0x14>
     	counter = 0; 
	   }
  	return; 
}
    a882:	df 91       	pop	r29
    a884:	cf 91       	pop	r28
    a886:	08 95       	ret
    a888:	0e 94 71 4e 	call	0x9ce2	; 0x9ce2 <lib_green_toggle>
    a88c:	e5 cf       	rjmp	.-54     	; 0xa858 <blink+0x26>
    a88e:	81 e0       	ldi	r24, 0x01	; 1
    a890:	90 e0       	ldi	r25, 0x00	; 0
    a892:	d0 93 ef 09 	sts	0x09EF, r29
    a896:	c0 93 ee 09 	sts	0x09EE, r28
    a89a:	23 e0       	ldi	r18, 0x03	; 3
    a89c:	88 3e       	cpi	r24, 0xE8	; 232
    a89e:	92 07       	cpc	r25, r18
    a8a0:	b0 f6       	brcc	.-84     	; 0xa84e <blink+0x1c>
    a8a2:	0e 94 75 4e 	call	0x9cea	; 0x9cea <lib_red_toggle>
    a8a6:	d8 cf       	rjmp	.-80     	; 0xa858 <blink+0x26>

0000a8a8 <__mulsi3>:
    a8a8:	62 9f       	mul	r22, r18
    a8aa:	d0 01       	movw	r26, r0
    a8ac:	73 9f       	mul	r23, r19
    a8ae:	f0 01       	movw	r30, r0
    a8b0:	82 9f       	mul	r24, r18
    a8b2:	e0 0d       	add	r30, r0
    a8b4:	f1 1d       	adc	r31, r1
    a8b6:	64 9f       	mul	r22, r20
    a8b8:	e0 0d       	add	r30, r0
    a8ba:	f1 1d       	adc	r31, r1
    a8bc:	92 9f       	mul	r25, r18
    a8be:	f0 0d       	add	r31, r0
    a8c0:	83 9f       	mul	r24, r19
    a8c2:	f0 0d       	add	r31, r0
    a8c4:	74 9f       	mul	r23, r20
    a8c6:	f0 0d       	add	r31, r0
    a8c8:	65 9f       	mul	r22, r21
    a8ca:	f0 0d       	add	r31, r0
    a8cc:	99 27       	eor	r25, r25
    a8ce:	72 9f       	mul	r23, r18
    a8d0:	b0 0d       	add	r27, r0
    a8d2:	e1 1d       	adc	r30, r1
    a8d4:	f9 1f       	adc	r31, r25
    a8d6:	63 9f       	mul	r22, r19
    a8d8:	b0 0d       	add	r27, r0
    a8da:	e1 1d       	adc	r30, r1
    a8dc:	f9 1f       	adc	r31, r25
    a8de:	bd 01       	movw	r22, r26
    a8e0:	cf 01       	movw	r24, r30
    a8e2:	11 24       	eor	r1, r1
    a8e4:	08 95       	ret

0000a8e6 <__udivmodhi4>:
    a8e6:	aa 1b       	sub	r26, r26
    a8e8:	bb 1b       	sub	r27, r27
    a8ea:	51 e1       	ldi	r21, 0x11	; 17
    a8ec:	07 c0       	rjmp	.+14     	; 0xa8fc <__udivmodhi4_ep>

0000a8ee <__udivmodhi4_loop>:
    a8ee:	aa 1f       	adc	r26, r26
    a8f0:	bb 1f       	adc	r27, r27
    a8f2:	a6 17       	cp	r26, r22
    a8f4:	b7 07       	cpc	r27, r23
    a8f6:	10 f0       	brcs	.+4      	; 0xa8fc <__udivmodhi4_ep>
    a8f8:	a6 1b       	sub	r26, r22
    a8fa:	b7 0b       	sbc	r27, r23

0000a8fc <__udivmodhi4_ep>:
    a8fc:	88 1f       	adc	r24, r24
    a8fe:	99 1f       	adc	r25, r25
    a900:	5a 95       	dec	r21
    a902:	a9 f7       	brne	.-22     	; 0xa8ee <__udivmodhi4_loop>
    a904:	80 95       	com	r24
    a906:	90 95       	com	r25
    a908:	bc 01       	movw	r22, r24
    a90a:	cd 01       	movw	r24, r26
    a90c:	08 95       	ret

0000a90e <__divmodhi4>:
    a90e:	97 fb       	bst	r25, 7
    a910:	09 2e       	mov	r0, r25
    a912:	07 26       	eor	r0, r23
    a914:	0a d0       	rcall	.+20     	; 0xa92a <__divmodhi4_neg1>
    a916:	77 fd       	sbrc	r23, 7
    a918:	04 d0       	rcall	.+8      	; 0xa922 <__divmodhi4_neg2>
    a91a:	e5 df       	rcall	.-54     	; 0xa8e6 <__udivmodhi4>
    a91c:	06 d0       	rcall	.+12     	; 0xa92a <__divmodhi4_neg1>
    a91e:	00 20       	and	r0, r0
    a920:	1a f4       	brpl	.+6      	; 0xa928 <__divmodhi4_exit>

0000a922 <__divmodhi4_neg2>:
    a922:	70 95       	com	r23
    a924:	61 95       	neg	r22
    a926:	7f 4f       	sbci	r23, 0xFF	; 255

0000a928 <__divmodhi4_exit>:
    a928:	08 95       	ret

0000a92a <__divmodhi4_neg1>:
    a92a:	f6 f7       	brtc	.-4      	; 0xa928 <__divmodhi4_exit>
    a92c:	90 95       	com	r25
    a92e:	81 95       	neg	r24
    a930:	9f 4f       	sbci	r25, 0xFF	; 255
    a932:	08 95       	ret

0000a934 <__udivmodsi4>:
    a934:	a1 e2       	ldi	r26, 0x21	; 33
    a936:	1a 2e       	mov	r1, r26
    a938:	aa 1b       	sub	r26, r26
    a93a:	bb 1b       	sub	r27, r27
    a93c:	fd 01       	movw	r30, r26
    a93e:	0d c0       	rjmp	.+26     	; 0xa95a <__udivmodsi4_ep>

0000a940 <__udivmodsi4_loop>:
    a940:	aa 1f       	adc	r26, r26
    a942:	bb 1f       	adc	r27, r27
    a944:	ee 1f       	adc	r30, r30
    a946:	ff 1f       	adc	r31, r31
    a948:	a2 17       	cp	r26, r18
    a94a:	b3 07       	cpc	r27, r19
    a94c:	e4 07       	cpc	r30, r20
    a94e:	f5 07       	cpc	r31, r21
    a950:	20 f0       	brcs	.+8      	; 0xa95a <__udivmodsi4_ep>
    a952:	a2 1b       	sub	r26, r18
    a954:	b3 0b       	sbc	r27, r19
    a956:	e4 0b       	sbc	r30, r20
    a958:	f5 0b       	sbc	r31, r21

0000a95a <__udivmodsi4_ep>:
    a95a:	66 1f       	adc	r22, r22
    a95c:	77 1f       	adc	r23, r23
    a95e:	88 1f       	adc	r24, r24
    a960:	99 1f       	adc	r25, r25
    a962:	1a 94       	dec	r1
    a964:	69 f7       	brne	.-38     	; 0xa940 <__udivmodsi4_loop>
    a966:	60 95       	com	r22
    a968:	70 95       	com	r23
    a96a:	80 95       	com	r24
    a96c:	90 95       	com	r25
    a96e:	9b 01       	movw	r18, r22
    a970:	ac 01       	movw	r20, r24
    a972:	bd 01       	movw	r22, r26
    a974:	cf 01       	movw	r24, r30
    a976:	08 95       	ret

0000a978 <__divmodsi4>:
    a978:	97 fb       	bst	r25, 7
    a97a:	09 2e       	mov	r0, r25
    a97c:	05 26       	eor	r0, r21
    a97e:	0e d0       	rcall	.+28     	; 0xa99c <__divmodsi4_neg1>
    a980:	57 fd       	sbrc	r21, 7
    a982:	04 d0       	rcall	.+8      	; 0xa98c <__divmodsi4_neg2>
    a984:	d7 df       	rcall	.-82     	; 0xa934 <__udivmodsi4>
    a986:	0a d0       	rcall	.+20     	; 0xa99c <__divmodsi4_neg1>
    a988:	00 1c       	adc	r0, r0
    a98a:	38 f4       	brcc	.+14     	; 0xa99a <__divmodsi4_exit>

0000a98c <__divmodsi4_neg2>:
    a98c:	50 95       	com	r21
    a98e:	40 95       	com	r20
    a990:	30 95       	com	r19
    a992:	21 95       	neg	r18
    a994:	3f 4f       	sbci	r19, 0xFF	; 255
    a996:	4f 4f       	sbci	r20, 0xFF	; 255
    a998:	5f 4f       	sbci	r21, 0xFF	; 255

0000a99a <__divmodsi4_exit>:
    a99a:	08 95       	ret

0000a99c <__divmodsi4_neg1>:
    a99c:	f6 f7       	brtc	.-4      	; 0xa99a <__divmodsi4_exit>
    a99e:	90 95       	com	r25
    a9a0:	80 95       	com	r24
    a9a2:	70 95       	com	r23
    a9a4:	61 95       	neg	r22
    a9a6:	7f 4f       	sbci	r23, 0xFF	; 255
    a9a8:	8f 4f       	sbci	r24, 0xFF	; 255
    a9aa:	9f 4f       	sbci	r25, 0xFF	; 255
    a9ac:	08 95       	ret

0000a9ae <do_rand>:
    a9ae:	af 92       	push	r10
    a9b0:	bf 92       	push	r11
    a9b2:	cf 92       	push	r12
    a9b4:	df 92       	push	r13
    a9b6:	ef 92       	push	r14
    a9b8:	ff 92       	push	r15
    a9ba:	0f 93       	push	r16
    a9bc:	1f 93       	push	r17
    a9be:	cf 93       	push	r28
    a9c0:	df 93       	push	r29
    a9c2:	ec 01       	movw	r28, r24
    a9c4:	a8 80       	ld	r10, Y
    a9c6:	b9 80       	ldd	r11, Y+1	; 0x01
    a9c8:	ca 80       	ldd	r12, Y+2	; 0x02
    a9ca:	db 80       	ldd	r13, Y+3	; 0x03
    a9cc:	a1 14       	cp	r10, r1
    a9ce:	b1 04       	cpc	r11, r1
    a9d0:	c1 04       	cpc	r12, r1
    a9d2:	d1 04       	cpc	r13, r1
    a9d4:	41 f4       	brne	.+16     	; 0xa9e6 <do_rand+0x38>
    a9d6:	84 e2       	ldi	r24, 0x24	; 36
    a9d8:	a8 2e       	mov	r10, r24
    a9da:	89 ed       	ldi	r24, 0xD9	; 217
    a9dc:	b8 2e       	mov	r11, r24
    a9de:	8b e5       	ldi	r24, 0x5B	; 91
    a9e0:	c8 2e       	mov	r12, r24
    a9e2:	87 e0       	ldi	r24, 0x07	; 7
    a9e4:	d8 2e       	mov	r13, r24
    a9e6:	c6 01       	movw	r24, r12
    a9e8:	b5 01       	movw	r22, r10
    a9ea:	2d e1       	ldi	r18, 0x1D	; 29
    a9ec:	33 ef       	ldi	r19, 0xF3	; 243
    a9ee:	41 e0       	ldi	r20, 0x01	; 1
    a9f0:	50 e0       	ldi	r21, 0x00	; 0
    a9f2:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    a9f6:	27 ea       	ldi	r18, 0xA7	; 167
    a9f8:	31 e4       	ldi	r19, 0x41	; 65
    a9fa:	40 e0       	ldi	r20, 0x00	; 0
    a9fc:	50 e0       	ldi	r21, 0x00	; 0
    a9fe:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <__mulsi3>
    aa02:	7b 01       	movw	r14, r22
    aa04:	8c 01       	movw	r16, r24
    aa06:	c6 01       	movw	r24, r12
    aa08:	b5 01       	movw	r22, r10
    aa0a:	2d e1       	ldi	r18, 0x1D	; 29
    aa0c:	33 ef       	ldi	r19, 0xF3	; 243
    aa0e:	41 e0       	ldi	r20, 0x01	; 1
    aa10:	50 e0       	ldi	r21, 0x00	; 0
    aa12:	0e 94 bc 54 	call	0xa978	; 0xa978 <__divmodsi4>
    aa16:	ca 01       	movw	r24, r20
    aa18:	b9 01       	movw	r22, r18
    aa1a:	2c ee       	ldi	r18, 0xEC	; 236
    aa1c:	34 ef       	ldi	r19, 0xF4	; 244
    aa1e:	4f ef       	ldi	r20, 0xFF	; 255
    aa20:	5f ef       	ldi	r21, 0xFF	; 255
    aa22:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <__mulsi3>
    aa26:	6e 0d       	add	r22, r14
    aa28:	7f 1d       	adc	r23, r15
    aa2a:	80 1f       	adc	r24, r16
    aa2c:	91 1f       	adc	r25, r17
    aa2e:	97 ff       	sbrs	r25, 7
    aa30:	04 c0       	rjmp	.+8      	; 0xaa3a <do_rand+0x8c>
    aa32:	61 50       	subi	r22, 0x01	; 1
    aa34:	70 40       	sbci	r23, 0x00	; 0
    aa36:	80 40       	sbci	r24, 0x00	; 0
    aa38:	90 48       	sbci	r25, 0x80	; 128
    aa3a:	68 83       	st	Y, r22
    aa3c:	79 83       	std	Y+1, r23	; 0x01
    aa3e:	8a 83       	std	Y+2, r24	; 0x02
    aa40:	9b 83       	std	Y+3, r25	; 0x03
    aa42:	9b 01       	movw	r18, r22
    aa44:	3f 77       	andi	r19, 0x7F	; 127
    aa46:	c9 01       	movw	r24, r18
    aa48:	df 91       	pop	r29
    aa4a:	cf 91       	pop	r28
    aa4c:	1f 91       	pop	r17
    aa4e:	0f 91       	pop	r16
    aa50:	ff 90       	pop	r15
    aa52:	ef 90       	pop	r14
    aa54:	df 90       	pop	r13
    aa56:	cf 90       	pop	r12
    aa58:	bf 90       	pop	r11
    aa5a:	af 90       	pop	r10
    aa5c:	08 95       	ret

0000aa5e <rand_r>:
    aa5e:	0e 94 d7 54 	call	0xa9ae	; 0xa9ae <do_rand>
    aa62:	08 95       	ret

0000aa64 <rand>:
    aa64:	88 e3       	ldi	r24, 0x38	; 56
    aa66:	91 e0       	ldi	r25, 0x01	; 1
    aa68:	0e 94 d7 54 	call	0xa9ae	; 0xa9ae <do_rand>
    aa6c:	08 95       	ret

0000aa6e <srand>:
    aa6e:	a0 e0       	ldi	r26, 0x00	; 0
    aa70:	b0 e0       	ldi	r27, 0x00	; 0
    aa72:	80 93 38 01 	sts	0x0138, r24
    aa76:	90 93 39 01 	sts	0x0139, r25
    aa7a:	a0 93 3a 01 	sts	0x013A, r26
    aa7e:	b0 93 3b 01 	sts	0x013B, r27
    aa82:	08 95       	ret

0000aa84 <__eerd_block_m128>:
    aa84:	dc 01       	movw	r26, r24
    aa86:	cb 01       	movw	r24, r22

0000aa88 <__eerd_blraw_m128>:
    aa88:	fc 01       	movw	r30, r24
    aa8a:	e1 99       	sbic	0x1c, 1	; 28
    aa8c:	fe cf       	rjmp	.-4      	; 0xaa8a <__eerd_blraw_m128+0x2>
    aa8e:	06 c0       	rjmp	.+12     	; 0xaa9c <__eerd_blraw_m128+0x14>
    aa90:	ff bb       	out	0x1f, r31	; 31
    aa92:	ee bb       	out	0x1e, r30	; 30
    aa94:	e0 9a       	sbi	0x1c, 0	; 28
    aa96:	31 96       	adiw	r30, 0x01	; 1
    aa98:	0d b2       	in	r0, 0x1d	; 29
    aa9a:	0d 92       	st	X+, r0
    aa9c:	41 50       	subi	r20, 0x01	; 1
    aa9e:	50 40       	sbci	r21, 0x00	; 0
    aaa0:	b8 f7       	brcc	.-18     	; 0xaa90 <__eerd_blraw_m128+0x8>
    aaa2:	08 95       	ret

0000aaa4 <__eerd_byte_m128>:
    aaa4:	e1 99       	sbic	0x1c, 1	; 28
    aaa6:	fe cf       	rjmp	.-4      	; 0xaaa4 <__eerd_byte_m128>
    aaa8:	9f bb       	out	0x1f, r25	; 31
    aaaa:	8e bb       	out	0x1e, r24	; 30
    aaac:	e0 9a       	sbi	0x1c, 0	; 28
    aaae:	99 27       	eor	r25, r25
    aab0:	8d b3       	in	r24, 0x1d	; 29
    aab2:	08 95       	ret

0000aab4 <__eerd_word_m128>:
    aab4:	a8 e1       	ldi	r26, 0x18	; 24
    aab6:	b0 e0       	ldi	r27, 0x00	; 0
    aab8:	42 e0       	ldi	r20, 0x02	; 2
    aaba:	50 e0       	ldi	r21, 0x00	; 0
    aabc:	0c 94 44 55 	jmp	0xaa88	; 0xaa88 <__eerd_blraw_m128>

0000aac0 <__eewr_block_m128>:
    aac0:	dc 01       	movw	r26, r24
    aac2:	cb 01       	movw	r24, r22
    aac4:	03 c0       	rjmp	.+6      	; 0xaacc <__eewr_block_m128+0xc>
    aac6:	2d 91       	ld	r18, X+
    aac8:	0e 94 6b 55 	call	0xaad6	; 0xaad6 <__eewr_r18_m128>
    aacc:	41 50       	subi	r20, 0x01	; 1
    aace:	50 40       	sbci	r21, 0x00	; 0
    aad0:	d0 f7       	brcc	.-12     	; 0xaac6 <__eewr_block_m128+0x6>
    aad2:	08 95       	ret

0000aad4 <__eewr_byte_m128>:
    aad4:	26 2f       	mov	r18, r22

0000aad6 <__eewr_r18_m128>:
    aad6:	e1 99       	sbic	0x1c, 1	; 28
    aad8:	fe cf       	rjmp	.-4      	; 0xaad6 <__eewr_r18_m128>
    aada:	9f bb       	out	0x1f, r25	; 31
    aadc:	8e bb       	out	0x1e, r24	; 30
    aade:	2d bb       	out	0x1d, r18	; 29
    aae0:	0f b6       	in	r0, 0x3f	; 63
    aae2:	f8 94       	cli
    aae4:	e2 9a       	sbi	0x1c, 2	; 28
    aae6:	e1 9a       	sbi	0x1c, 1	; 28
    aae8:	0f be       	out	0x3f, r0	; 63
    aaea:	01 96       	adiw	r24, 0x01	; 1
    aaec:	08 95       	ret

0000aaee <__eewr_word_m128>:
    aaee:	0e 94 6a 55 	call	0xaad4	; 0xaad4 <__eewr_byte_m128>
    aaf2:	27 2f       	mov	r18, r23
    aaf4:	0c 94 6b 55 	jmp	0xaad6	; 0xaad6 <__eewr_r18_m128>

0000aaf8 <_exit>:
    aaf8:	f8 94       	cli

0000aafa <__stop_program>:
    aafa:	ff cf       	rjmp	.-2      	; 0xaafa <__stop_program>
Disassembly of section .bootloader:

0001e000 <ProgramSetPage>:
        0xEF,
    0x91, 0xFF, 0xFF
};
void __attribute__ ((section(".bootloader"))) ProgramSetPage(uint16_t pageno)
{
   1e000:	e0 e4       	ldi	r30, 0x40	; 64
   1e002:	f1 e0       	ldi	r31, 0x01	; 1
    int i;

    for (i = 0; i < 512; i++)
    {
        pagebuffer[i] = 0;
   1e004:	11 92       	st	Z+, r1
   1e006:	23 e0       	ldi	r18, 0x03	; 3
   1e008:	e0 34       	cpi	r30, 0x40	; 64
   1e00a:	f2 07       	cpc	r31, r18
   1e00c:	d9 f7       	brne	.-10     	; 0x1e004 <ProgramSetPage+0x4>
    }
    pageindex = pageno;
   1e00e:	90 93 3f 01 	sts	0x013F, r25
   1e012:	80 93 3e 01 	sts	0x013E, r24
    currentpageindex = 0;
   1e016:	10 92 41 03 	sts	0x0341, r1
   1e01a:	10 92 40 03 	sts	0x0340, r1
}
   1e01e:	08 95       	ret

0001e020 <boot_program_page>:

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramString(char *buffer)
{
    int i;

    for (i = 0; i < 16; i++)
    {
        pagebuffer[currentpageindex + i] = buffer[i];
    }
    currentpageindex += 16;
    if (currentpageindex == 512)
    {
        reprogramall(pagebuffer);
        currentpageindex = 0;
    }
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramRemains()
{
    if (currentpageindex != 0)
    {
        reprogramall(pagebuffer);
    }
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) ProgramLastString(char *buffer,
                                                                uint8_t length)
{
    int i;

    for (i = 0; i < length; i++)
    {
        pagebuffer[currentpageindex + i] = buffer[i];
    }
    reprogramall(pagebuffer);
    currentpageindex = 0;
}

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogramall(unsigned char
                                                          *program)
{
    //unsigned char buffer[256];
    unsigned char a, b;
    int j;
    int high, low, all;

    for (j = 0; j < 256; j++)
    {
        a = program[j * 2];
        b = program[j * 2 + 1];
        if ((a >= '0') && (a <= '9'))
        {
            high = a - '0';
        }
        else
        {
            high = a - 'A' + 10;
        }
        if ((b >= '0') && (b <= '9'))
        {
            low = b - '0';
        }
        else
        {
            low = b - 'A' + 10;
        }

        all = high * 16 + low;
        //This might introduce bugs.
        program[j] = (unsigned char)all;
    }
    reprogram(program, pageindex);
    pageindex++;
    return 0;
}

//-------------------------------------------------------------------------
int __attribute__ ((section(".bootloader"))) reprogram(unsigned char *buffer,
                                                       uint16_t codepage)
{
    boot_program_page((uint32_t) SPM_PAGESIZE * ((uint32_t) codepage), buffer);
    return 0;
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader"))) boot_insertBreakPoint(uint16_t
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    instructions)
{
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
    {
        instructions[i] = pagebuffer[index + i];
        pagebuffer[index + i] = breakpointstring[i];
    }
    reprogram(pagebuffer, pagenum);
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader"))) boot_insertTracePoint(uint16_t
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset)
{
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    //assuming that the index as 230 or smaller, then enough for the 26 bytes othersise not 
    //say 234, then it is 22 bytes 
    //Now this part needs to be changed to 16 bytes
    //index is 242, then 14 bytes. 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
    }
    reprogram(pagebuffer, pagenum);
    if (programmore == 0)
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
    }
    reprogram(pagebuffer, pagenum + 1);
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_insertTracePointLong(uint16_t pagenum, uint8_t pageoffset)
{
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    //assuming that the index as 228 or smaller, then enough for the 28 bytes othersise not 
    //say 234, then it is 22 bytes 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = tracepointstring[i];
    }
    reprogram(pagebuffer, pagenum);
    if (programmore == 0)
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = tracepointstring[endindex + i];
    }
    reprogram(pagebuffer, pagenum + 1);
}

//-------------------------------------------------------------------------
//remove a breakpoint by patching the 8 bytes at the location specified at the pagenum and offset
void __attribute__ ((section(".bootloader"))) boot_removeBreakPoint(uint16_t
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    instructions)
{
    //first read the page, then change the string, then write back the page. 
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    index = pageoffset;
    for (i = 0; i < 6; i++)
    {
        pagebuffer[index + i] = instructions[i];
    }
    reprogram(pagebuffer, pagenum);
}

//-------------------------------------------------------------------------
void __attribute__ ((section(".bootloader"))) boot_program_page(uint32_t page,
                                                                uint8_t * buf)
{
   1e020:	af 92       	push	r10
   1e022:	bf 92       	push	r11
   1e024:	cf 92       	push	r12
   1e026:	df 92       	push	r13
   1e028:	ef 92       	push	r14
   1e02a:	ff 92       	push	r15
   1e02c:	0f 93       	push	r16
   1e02e:	1f 93       	push	r17
   1e030:	cf 93       	push	r28
   1e032:	df 93       	push	r29
   1e034:	5b 01       	movw	r10, r22
   1e036:	6c 01       	movw	r12, r24
   1e038:	ea 01       	movw	r28, r20
    uint16_t i;
    uint8_t sreg;

    // Disable interrupts.
    sreg = SREG;
   1e03a:	7f b7       	in	r23, 0x3f	; 63
    cli();
   1e03c:	f8 94       	cli
    eeprom_busy_wait();
   1e03e:	e1 99       	sbic	0x1c, 1	; 28
   1e040:	fe cf       	rjmp	.-4      	; 0x1e03e <boot_program_page+0x1e>
    boot_page_erase(page);
   1e042:	83 e0       	ldi	r24, 0x03	; 3
   1e044:	f5 01       	movw	r30, r10
   1e046:	c0 92 5b 00 	sts	0x005B, r12
   1e04a:	80 93 68 00 	sts	0x0068, r24
   1e04e:	e8 95       	spm
    boot_spm_busy_wait();       // Wait until the memory is erased.
   1e050:	80 91 68 00 	lds	r24, 0x0068
   1e054:	80 fd       	sbrc	r24, 0
   1e056:	fc cf       	rjmp	.-8      	; 0x1e050 <boot_program_page+0x30>
   1e058:	ee 24       	eor	r14, r14
   1e05a:	ff 24       	eor	r15, r15
   1e05c:	87 01       	movw	r16, r14
    for (i = 0; i < SPM_PAGESIZE; i += 2)
    {
        // Set up little-endian word.
        uint16_t w = *buf++;

        w += (*buf++) << 8;
        boot_page_fill(page + i, w);
   1e05e:	61 e0       	ldi	r22, 0x01	; 1
   1e060:	88 81       	ld	r24, Y
   1e062:	59 81       	ldd	r21, Y+1	; 0x01
   1e064:	40 e0       	ldi	r20, 0x00	; 0
   1e066:	9a 01       	movw	r18, r20
   1e068:	28 0f       	add	r18, r24
   1e06a:	31 1d       	adc	r19, r1
   1e06c:	22 96       	adiw	r28, 0x02	; 2
   1e06e:	d8 01       	movw	r26, r16
   1e070:	c7 01       	movw	r24, r14
   1e072:	8a 0d       	add	r24, r10
   1e074:	9b 1d       	adc	r25, r11
   1e076:	ac 1d       	adc	r26, r12
   1e078:	bd 1d       	adc	r27, r13
   1e07a:	09 01       	movw	r0, r18
   1e07c:	fc 01       	movw	r30, r24
   1e07e:	a0 93 5b 00 	sts	0x005B, r26
   1e082:	60 93 68 00 	sts	0x0068, r22
   1e086:	e8 95       	spm
   1e088:	11 24       	eor	r1, r1
   1e08a:	82 e0       	ldi	r24, 0x02	; 2
   1e08c:	90 e0       	ldi	r25, 0x00	; 0
   1e08e:	a0 e0       	ldi	r26, 0x00	; 0
   1e090:	b0 e0       	ldi	r27, 0x00	; 0
   1e092:	e8 0e       	add	r14, r24
   1e094:	f9 1e       	adc	r15, r25
   1e096:	0a 1f       	adc	r16, r26
   1e098:	1b 1f       	adc	r17, r27
   1e09a:	90 e0       	ldi	r25, 0x00	; 0
   1e09c:	e9 16       	cp	r14, r25
   1e09e:	91 e0       	ldi	r25, 0x01	; 1
   1e0a0:	f9 06       	cpc	r15, r25
   1e0a2:	90 e0       	ldi	r25, 0x00	; 0
   1e0a4:	09 07       	cpc	r16, r25
   1e0a6:	90 e0       	ldi	r25, 0x00	; 0
   1e0a8:	19 07       	cpc	r17, r25
   1e0aa:	d1 f6       	brne	.-76     	; 0x1e060 <boot_program_page+0x40>
    }
    boot_spm_busy_wait();
   1e0ac:	80 91 68 00 	lds	r24, 0x0068
   1e0b0:	80 fd       	sbrc	r24, 0
   1e0b2:	fc cf       	rjmp	.-8      	; 0x1e0ac <boot_program_page+0x8c>
    boot_page_write(page);      // Store buffer in flash page.
   1e0b4:	85 e0       	ldi	r24, 0x05	; 5
   1e0b6:	f5 01       	movw	r30, r10
   1e0b8:	c0 92 5b 00 	sts	0x005B, r12
   1e0bc:	80 93 68 00 	sts	0x0068, r24
   1e0c0:	e8 95       	spm
    boot_spm_busy_wait();       // Wait until the memory is written.
   1e0c2:	80 91 68 00 	lds	r24, 0x0068
   1e0c6:	80 fd       	sbrc	r24, 0
   1e0c8:	fc cf       	rjmp	.-8      	; 0x1e0c2 <boot_program_page+0xa2>
    // Reenable RWW-section again. We need this if we want to jump back
    // to the application after bootloading.
    boot_rww_enable();
   1e0ca:	81 e1       	ldi	r24, 0x11	; 17
   1e0cc:	80 93 68 00 	sts	0x0068, r24
   1e0d0:	e8 95       	spm
    // Re-enable interrupts (if they were ever enabled).
    SREG = sreg;
   1e0d2:	7f bf       	out	0x3f, r23	; 63
}
   1e0d4:	df 91       	pop	r29
   1e0d6:	cf 91       	pop	r28
   1e0d8:	1f 91       	pop	r17
   1e0da:	0f 91       	pop	r16
   1e0dc:	ff 90       	pop	r15
   1e0de:	ef 90       	pop	r14
   1e0e0:	df 90       	pop	r13
   1e0e2:	cf 90       	pop	r12
   1e0e4:	bf 90       	pop	r11
   1e0e6:	af 90       	pop	r10
   1e0e8:	08 95       	ret

0001e0ea <reprogram>:
   1e0ea:	ac 01       	movw	r20, r24
   1e0ec:	80 e0       	ldi	r24, 0x00	; 0
   1e0ee:	90 e0       	ldi	r25, 0x00	; 0
   1e0f0:	98 2f       	mov	r25, r24
   1e0f2:	87 2f       	mov	r24, r23
   1e0f4:	76 2f       	mov	r23, r22
   1e0f6:	66 27       	eor	r22, r22
   1e0f8:	0e 94 10 f0 	call	0x1e020	; 0x1e020 <boot_program_page>
   1e0fc:	80 e0       	ldi	r24, 0x00	; 0
   1e0fe:	90 e0       	ldi	r25, 0x00	; 0
   1e100:	08 95       	ret

0001e102 <reprogramall>:
   1e102:	0f 93       	push	r16
   1e104:	1f 93       	push	r17
   1e106:	cf 93       	push	r28
   1e108:	df 93       	push	r29
   1e10a:	ec 01       	movw	r28, r24
   1e10c:	dc 01       	movw	r26, r24
   1e10e:	60 e0       	ldi	r22, 0x00	; 0
   1e110:	70 e0       	ldi	r23, 0x00	; 0
   1e112:	1f c0       	rjmp	.+62     	; 0x1e152 <reprogramall+0x50>
   1e114:	42 2f       	mov	r20, r18
   1e116:	50 e0       	ldi	r21, 0x00	; 0
   1e118:	40 53       	subi	r20, 0x30	; 48
   1e11a:	50 40       	sbci	r21, 0x00	; 0
   1e11c:	83 2f       	mov	r24, r19
   1e11e:	80 53       	subi	r24, 0x30	; 48
   1e120:	8a 30       	cpi	r24, 0x0A	; 10
   1e122:	38 f5       	brcc	.+78     	; 0x1e172 <reprogramall+0x70>
   1e124:	23 2f       	mov	r18, r19
   1e126:	30 e0       	ldi	r19, 0x00	; 0
   1e128:	20 53       	subi	r18, 0x30	; 48
   1e12a:	30 40       	sbci	r19, 0x00	; 0
   1e12c:	fe 01       	movw	r30, r28
   1e12e:	e6 0f       	add	r30, r22
   1e130:	f7 1f       	adc	r31, r23
   1e132:	42 95       	swap	r20
   1e134:	52 95       	swap	r21
   1e136:	50 7f       	andi	r21, 0xF0	; 240
   1e138:	54 27       	eor	r21, r20
   1e13a:	40 7f       	andi	r20, 0xF0	; 240
   1e13c:	54 27       	eor	r21, r20
   1e13e:	24 0f       	add	r18, r20
   1e140:	35 1f       	adc	r19, r21
   1e142:	20 83       	st	Z, r18
   1e144:	6f 5f       	subi	r22, 0xFF	; 255
   1e146:	7f 4f       	sbci	r23, 0xFF	; 255
   1e148:	12 96       	adiw	r26, 0x02	; 2
   1e14a:	81 e0       	ldi	r24, 0x01	; 1
   1e14c:	60 30       	cpi	r22, 0x00	; 0
   1e14e:	78 07       	cpc	r23, r24
   1e150:	a9 f0       	breq	.+42     	; 0x1e17c <reprogramall+0x7a>
   1e152:	2c 91       	ld	r18, X
   1e154:	11 96       	adiw	r26, 0x01	; 1
   1e156:	3c 91       	ld	r19, X
   1e158:	11 97       	sbiw	r26, 0x01	; 1
   1e15a:	82 2f       	mov	r24, r18
   1e15c:	80 53       	subi	r24, 0x30	; 48
   1e15e:	8a 30       	cpi	r24, 0x0A	; 10
   1e160:	c8 f2       	brcs	.-78     	; 0x1e114 <reprogramall+0x12>
   1e162:	42 2f       	mov	r20, r18
   1e164:	50 e0       	ldi	r21, 0x00	; 0
   1e166:	47 53       	subi	r20, 0x37	; 55
   1e168:	50 40       	sbci	r21, 0x00	; 0
   1e16a:	83 2f       	mov	r24, r19
   1e16c:	80 53       	subi	r24, 0x30	; 48
   1e16e:	8a 30       	cpi	r24, 0x0A	; 10
   1e170:	c8 f2       	brcs	.-78     	; 0x1e124 <reprogramall+0x22>
   1e172:	23 2f       	mov	r18, r19
   1e174:	30 e0       	ldi	r19, 0x00	; 0
   1e176:	27 53       	subi	r18, 0x37	; 55
   1e178:	30 40       	sbci	r19, 0x00	; 0
   1e17a:	d8 cf       	rjmp	.-80     	; 0x1e12c <reprogramall+0x2a>
   1e17c:	00 91 3e 01 	lds	r16, 0x013E
   1e180:	10 91 3f 01 	lds	r17, 0x013F
   1e184:	ce 01       	movw	r24, r28
   1e186:	b8 01       	movw	r22, r16
   1e188:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
   1e18c:	0f 5f       	subi	r16, 0xFF	; 255
   1e18e:	1f 4f       	sbci	r17, 0xFF	; 255
   1e190:	10 93 3f 01 	sts	0x013F, r17
   1e194:	00 93 3e 01 	sts	0x013E, r16
   1e198:	80 e0       	ldi	r24, 0x00	; 0
   1e19a:	90 e0       	ldi	r25, 0x00	; 0
   1e19c:	df 91       	pop	r29
   1e19e:	cf 91       	pop	r28
   1e1a0:	1f 91       	pop	r17
   1e1a2:	0f 91       	pop	r16
   1e1a4:	08 95       	ret

0001e1a6 <ProgramLastString>:
   1e1a6:	ac 01       	movw	r20, r24
   1e1a8:	70 e0       	ldi	r23, 0x00	; 0
   1e1aa:	61 15       	cp	r22, r1
   1e1ac:	71 05       	cpc	r23, r1
   1e1ae:	91 f0       	breq	.+36     	; 0x1e1d4 <ProgramLastString+0x2e>
   1e1b0:	a0 91 40 03 	lds	r26, 0x0340
   1e1b4:	b0 91 41 03 	lds	r27, 0x0341
   1e1b8:	a0 5c       	subi	r26, 0xC0	; 192
   1e1ba:	be 4f       	sbci	r27, 0xFE	; 254
   1e1bc:	20 e0       	ldi	r18, 0x00	; 0
   1e1be:	30 e0       	ldi	r19, 0x00	; 0
   1e1c0:	fa 01       	movw	r30, r20
   1e1c2:	e2 0f       	add	r30, r18
   1e1c4:	f3 1f       	adc	r31, r19
   1e1c6:	80 81       	ld	r24, Z
   1e1c8:	8d 93       	st	X+, r24
   1e1ca:	2f 5f       	subi	r18, 0xFF	; 255
   1e1cc:	3f 4f       	sbci	r19, 0xFF	; 255
   1e1ce:	26 17       	cp	r18, r22
   1e1d0:	37 07       	cpc	r19, r23
   1e1d2:	b4 f3       	brlt	.-20     	; 0x1e1c0 <ProgramLastString+0x1a>
   1e1d4:	80 e4       	ldi	r24, 0x40	; 64
   1e1d6:	91 e0       	ldi	r25, 0x01	; 1
   1e1d8:	0e 94 81 f0 	call	0x1e102	; 0x1e102 <reprogramall>
   1e1dc:	10 92 41 03 	sts	0x0341, r1
   1e1e0:	10 92 40 03 	sts	0x0340, r1
   1e1e4:	08 95       	ret

0001e1e6 <ProgramRemains>:
   1e1e6:	80 91 40 03 	lds	r24, 0x0340
   1e1ea:	90 91 41 03 	lds	r25, 0x0341
   1e1ee:	89 2b       	or	r24, r25
   1e1f0:	09 f4       	brne	.+2      	; 0x1e1f4 <ProgramRemains+0xe>
   1e1f2:	08 95       	ret
   1e1f4:	80 e4       	ldi	r24, 0x40	; 64
   1e1f6:	91 e0       	ldi	r25, 0x01	; 1
   1e1f8:	0e 94 81 f0 	call	0x1e102	; 0x1e102 <reprogramall>
   1e1fc:	08 95       	ret

0001e1fe <ProgramString>:
   1e1fe:	ac 01       	movw	r20, r24
   1e200:	60 91 40 03 	lds	r22, 0x0340
   1e204:	70 91 41 03 	lds	r23, 0x0341
   1e208:	db 01       	movw	r26, r22
   1e20a:	a0 5c       	subi	r26, 0xC0	; 192
   1e20c:	be 4f       	sbci	r27, 0xFE	; 254
   1e20e:	20 e0       	ldi	r18, 0x00	; 0
   1e210:	30 e0       	ldi	r19, 0x00	; 0
   1e212:	fa 01       	movw	r30, r20
   1e214:	e2 0f       	add	r30, r18
   1e216:	f3 1f       	adc	r31, r19
   1e218:	80 81       	ld	r24, Z
   1e21a:	8d 93       	st	X+, r24
   1e21c:	2f 5f       	subi	r18, 0xFF	; 255
   1e21e:	3f 4f       	sbci	r19, 0xFF	; 255
   1e220:	20 31       	cpi	r18, 0x10	; 16
   1e222:	31 05       	cpc	r19, r1
   1e224:	b1 f7       	brne	.-20     	; 0x1e212 <ProgramString+0x14>
   1e226:	cb 01       	movw	r24, r22
   1e228:	40 96       	adiw	r24, 0x10	; 16
   1e22a:	90 93 41 03 	sts	0x0341, r25
   1e22e:	80 93 40 03 	sts	0x0340, r24
   1e232:	80 50       	subi	r24, 0x00	; 0
   1e234:	92 40       	sbci	r25, 0x02	; 2
   1e236:	09 f0       	breq	.+2      	; 0x1e23a <ProgramString+0x3c>
   1e238:	08 95       	ret
   1e23a:	80 e4       	ldi	r24, 0x40	; 64
   1e23c:	91 e0       	ldi	r25, 0x01	; 1
   1e23e:	0e 94 81 f0 	call	0x1e102	; 0x1e102 <reprogramall>
   1e242:	10 92 41 03 	sts	0x0341, r1
   1e246:	10 92 40 03 	sts	0x0340, r1
   1e24a:	08 95       	ret

0001e24c <boot_removeTracePointLong>:

//-------------------------------------------------------------------------------
//This function allows remove tracepoint by repatching it 
void __attribute__ ((section(".bootloader"))) boot_removeTracePoint(uint16_t
                                                                    pagenum,
                                                                    uint8_t
                                                                    pageoffset,
                                                                    uint8_t *
                                                                    buffer)
{
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;

    //read the page content 
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    //assuming that the index as 230 or smaller, then enough for the 26 bytes othersise not 
    //say 234, then it is 22 bytes 
    //Now this part needs to be changed to 16 bytes
    //index is 242, then 14 bytes. 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 242)
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
        endindex = 14;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
    }
    reprogram(pagebuffer, pagenum);
    if (programmore == 0)
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
            pagebuffer[i * 2 + 1] = data / 256;
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
        }
    }
    endindex2 = 14 - endindex;
    programmore = 0;
    for (i = 0; i < endindex2; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
    }
    reprogram(pagebuffer, pagenum);
}

//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void __attribute__ ((section(".bootloader")))
boot_removeTracePointLong(uint16_t pagenum, uint8_t pageoffset,
                          uint8_t * buffer)
{
   1e24c:	2f 92       	push	r2
   1e24e:	3f 92       	push	r3
   1e250:	4f 92       	push	r4
   1e252:	5f 92       	push	r5
   1e254:	6f 92       	push	r6
   1e256:	7f 92       	push	r7
   1e258:	8f 92       	push	r8
   1e25a:	9f 92       	push	r9
   1e25c:	af 92       	push	r10
   1e25e:	bf 92       	push	r11
   1e260:	cf 92       	push	r12
   1e262:	df 92       	push	r13
   1e264:	ef 92       	push	r14
   1e266:	ff 92       	push	r15
   1e268:	0f 93       	push	r16
   1e26a:	1f 93       	push	r17
   1e26c:	df 93       	push	r29
   1e26e:	cf 93       	push	r28
   1e270:	00 d0       	rcall	.+0      	; 0x1e272 <boot_removeTracePointLong+0x26>
   1e272:	00 d0       	rcall	.+0      	; 0x1e274 <boot_removeTracePointLong+0x28>
   1e274:	cd b7       	in	r28, 0x3d	; 61
   1e276:	de b7       	in	r29, 0x3e	; 62
   1e278:	6c 01       	movw	r12, r24
   1e27a:	36 2e       	mov	r3, r22
   1e27c:	2a 01       	movw	r4, r20
    //first read the page, then change the string, then write back the page
    int i;
    uint32_t addr;
    uint8_t index;
    uint16_t data;
    uint8_t programmore = 0;
    uint8_t endindex, endindex2;

    //Read the page content
    addr = (uint32_t) pagenum *(uint32_t) SPM_PAGESIZE;
   1e27e:	a0 e0       	ldi	r26, 0x00	; 0
   1e280:	b0 e0       	ldi	r27, 0x00	; 0
   1e282:	ee 24       	eor	r14, r14
   1e284:	f8 2e       	mov	r15, r24
   1e286:	09 2f       	mov	r16, r25
   1e288:	1a 2f       	mov	r17, r26
   1e28a:	20 e4       	ldi	r18, 0x40	; 64
   1e28c:	62 2e       	mov	r6, r18
   1e28e:	21 e0       	ldi	r18, 0x01	; 1
   1e290:	72 2e       	mov	r7, r18
   1e292:	53 01       	movw	r10, r6
   1e294:	15 c0       	rjmp	.+42     	; 0x1e2c0 <boot_removeTracePointLong+0x74>

    //read the page content 
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e296:	d5 01       	movw	r26, r10
   1e298:	8c 92       	st	X, r8
            pagebuffer[i * 2 + 1] = data / 256;
   1e29a:	11 96       	adiw	r26, 0x01	; 1
   1e29c:	9c 92       	st	X, r9
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e29e:	82 e0       	ldi	r24, 0x02	; 2
   1e2a0:	90 e0       	ldi	r25, 0x00	; 0
   1e2a2:	a0 e0       	ldi	r26, 0x00	; 0
   1e2a4:	b0 e0       	ldi	r27, 0x00	; 0
   1e2a6:	e8 0e       	add	r14, r24
   1e2a8:	f9 1e       	adc	r15, r25
   1e2aa:	0a 1f       	adc	r16, r26
   1e2ac:	1b 1f       	adc	r17, r27
   1e2ae:	a2 e0       	ldi	r26, 0x02	; 2
   1e2b0:	b0 e0       	ldi	r27, 0x00	; 0
   1e2b2:	aa 0e       	add	r10, r26
   1e2b4:	bb 1e       	adc	r11, r27
   1e2b6:	b0 e4       	ldi	r27, 0x40	; 64
   1e2b8:	ab 16       	cp	r10, r27
   1e2ba:	b2 e0       	ldi	r27, 0x02	; 2
   1e2bc:	bb 06       	cpc	r11, r27
   1e2be:	61 f0       	breq	.+24     	; 0x1e2d8 <boot_removeTracePointLong+0x8c>
   1e2c0:	0b bf       	out	0x3b, r16	; 59
   1e2c2:	f7 01       	movw	r30, r14
   1e2c4:	87 90       	elpm	r8, Z+
   1e2c6:	96 90       	elpm	r9, Z
   1e2c8:	0e 94 2d 3a 	call	0x745a	; 0x745a <is_host_lsb>
   1e2cc:	89 2b       	or	r24, r25
   1e2ce:	19 f7       	brne	.-58     	; 0x1e296 <boot_removeTracePointLong+0x4a>
   1e2d0:	f5 01       	movw	r30, r10
   1e2d2:	81 82       	std	Z+1, r8	; 0x01
   1e2d4:	90 82       	st	Z, r9
   1e2d6:	e3 cf       	rjmp	.-58     	; 0x1e29e <boot_removeTracePointLong+0x52>
        }
    }
    //assuming that the index as 228 or smaller, then enough for the 28 bytes othersise not 
    //say 234, then it is 22 bytes 
    index = pageoffset;
    programmore = 0;
    if (pageoffset > 240)
   1e2d8:	e0 ef       	ldi	r30, 0xF0	; 240
   1e2da:	e3 15       	cp	r30, r3
   1e2dc:	08 f4       	brcc	.+2      	; 0x1e2e0 <boot_removeTracePointLong+0x94>
   1e2de:	7f c0       	rjmp	.+254    	; 0x1e3de <boot_removeTracePointLong+0x192>
   1e2e0:	10 e0       	ldi	r17, 0x00	; 0
   1e2e2:	90 e1       	ldi	r25, 0x10	; 16
   1e2e4:	29 2e       	mov	r2, r25
   1e2e6:	80 e1       	ldi	r24, 0x10	; 16
   1e2e8:	88 2e       	mov	r8, r24
   1e2ea:	91 2c       	mov	r9, r1
   1e2ec:	a3 2d       	mov	r26, r3
   1e2ee:	b0 e0       	ldi	r27, 0x00	; 0
   1e2f0:	a0 5c       	subi	r26, 0xC0	; 192
   1e2f2:	be 4f       	sbci	r27, 0xFE	; 254
   1e2f4:	20 e0       	ldi	r18, 0x00	; 0
   1e2f6:	30 e0       	ldi	r19, 0x00	; 0
    {
        programmore = 1;
        endindex = (uint8_t) ((uint16_t) 256 - (uint16_t) pageoffset);
    }
    else
    {
        programmore = 0;
        endindex = 16;
    }
    //for the 234 example, 22 here, then 0, 21 are copied 
    for (i = 0; i < endindex; i++)
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[index + i] = buffer[i];
   1e2f8:	f2 01       	movw	r30, r4
   1e2fa:	e2 0f       	add	r30, r18
   1e2fc:	f3 1f       	adc	r31, r19
   1e2fe:	80 81       	ld	r24, Z
   1e300:	8d 93       	st	X+, r24
   1e302:	2f 5f       	subi	r18, 0xFF	; 255
   1e304:	3f 4f       	sbci	r19, 0xFF	; 255
   1e306:	28 15       	cp	r18, r8
   1e308:	39 05       	cpc	r19, r9
   1e30a:	b4 f3       	brlt	.-20     	; 0x1e2f8 <boot_removeTracePointLong+0xac>
    }
    reprogram(pagebuffer, pagenum);
   1e30c:	80 e4       	ldi	r24, 0x40	; 64
   1e30e:	91 e0       	ldi	r25, 0x01	; 1
   1e310:	b6 01       	movw	r22, r12
   1e312:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
    if (programmore == 0)
   1e316:	11 23       	and	r17, r17
   1e318:	09 f4       	brne	.+2      	; 0x1e31c <boot_removeTracePointLong+0xd0>
   1e31a:	4a c0       	rjmp	.+148    	; 0x1e3b0 <boot_removeTracePointLong+0x164>
    {
        return;
    }
    //next page
    addr = (uint32_t) (pagenum + 1) * (uint32_t) SPM_PAGESIZE;
   1e31c:	96 01       	movw	r18, r12
   1e31e:	2f 5f       	subi	r18, 0xFF	; 255
   1e320:	3f 4f       	sbci	r19, 0xFF	; 255
   1e322:	3a 83       	std	Y+2, r19	; 0x02
   1e324:	29 83       	std	Y+1, r18	; 0x01
   1e326:	c9 01       	movw	r24, r18
   1e328:	a0 e0       	ldi	r26, 0x00	; 0
   1e32a:	b0 e0       	ldi	r27, 0x00	; 0
   1e32c:	ee 24       	eor	r14, r14
   1e32e:	f8 2e       	mov	r15, r24
   1e330:	09 2f       	mov	r16, r25
   1e332:	1a 2f       	mov	r17, r26
   1e334:	80 e4       	ldi	r24, 0x40	; 64
   1e336:	91 e0       	ldi	r25, 0x01	; 1
   1e338:	9c 83       	std	Y+4, r25	; 0x04
   1e33a:	8b 83       	std	Y+3, r24	; 0x03
   1e33c:	15 c0       	rjmp	.+42     	; 0x1e368 <boot_removeTracePointLong+0x11c>
    for (i = 0; i < 128; i++)
    {
        data = pgm_read_word_far(addr + ((uint32_t) i) * 2);
        if (is_host_lsb())
        {
            pagebuffer[i * 2] = data % 256;
   1e33e:	ab 81       	ldd	r26, Y+3	; 0x03
   1e340:	bc 81       	ldd	r27, Y+4	; 0x04
   1e342:	cc 92       	st	X, r12
            pagebuffer[i * 2 + 1] = data / 256;
   1e344:	11 96       	adiw	r26, 0x01	; 1
   1e346:	dc 92       	st	X, r13
        }
        else
        {
            pagebuffer[i * 2 + 1] = data % 256;
            pagebuffer[i * 2] = data / 256;
   1e348:	82 e0       	ldi	r24, 0x02	; 2
   1e34a:	90 e0       	ldi	r25, 0x00	; 0
   1e34c:	a0 e0       	ldi	r26, 0x00	; 0
   1e34e:	b0 e0       	ldi	r27, 0x00	; 0
   1e350:	e8 0e       	add	r14, r24
   1e352:	f9 1e       	adc	r15, r25
   1e354:	0a 1f       	adc	r16, r26
   1e356:	1b 1f       	adc	r17, r27
   1e358:	ab 81       	ldd	r26, Y+3	; 0x03
   1e35a:	bc 81       	ldd	r27, Y+4	; 0x04
   1e35c:	12 96       	adiw	r26, 0x02	; 2
   1e35e:	bc 83       	std	Y+4, r27	; 0x04
   1e360:	ab 83       	std	Y+3, r26	; 0x03
   1e362:	aa 16       	cp	r10, r26
   1e364:	bb 06       	cpc	r11, r27
   1e366:	69 f0       	breq	.+26     	; 0x1e382 <boot_removeTracePointLong+0x136>
   1e368:	0b bf       	out	0x3b, r16	; 59
   1e36a:	f7 01       	movw	r30, r14
   1e36c:	c7 90       	elpm	r12, Z+
   1e36e:	d6 90       	elpm	r13, Z
   1e370:	0e 94 2d 3a 	call	0x745a	; 0x745a <is_host_lsb>
   1e374:	89 2b       	or	r24, r25
   1e376:	19 f7       	brne	.-58     	; 0x1e33e <boot_removeTracePointLong+0xf2>
   1e378:	eb 81       	ldd	r30, Y+3	; 0x03
   1e37a:	fc 81       	ldd	r31, Y+4	; 0x04
   1e37c:	c1 82       	std	Z+1, r12	; 0x01
   1e37e:	d0 82       	st	Z, r13
   1e380:	e3 cf       	rjmp	.-58     	; 0x1e348 <boot_removeTracePointLong+0xfc>
        }
    }
    //PREVIOUSLY like 22 then the value is 6
    endindex2 = 16 - endindex;
   1e382:	80 e1       	ldi	r24, 0x10	; 16
   1e384:	82 19       	sub	r24, r2
    programmore = 0;
    for (i = 0; i < endindex2; i++)
   1e386:	71 f0       	breq	.+28     	; 0x1e3a4 <boot_removeTracePointLong+0x158>
   1e388:	f2 01       	movw	r30, r4
   1e38a:	e8 0d       	add	r30, r8
   1e38c:	f9 1d       	adc	r31, r9
   1e38e:	28 2f       	mov	r18, r24
   1e390:	30 e0       	ldi	r19, 0x00	; 0
   1e392:	20 5c       	subi	r18, 0xC0	; 192
   1e394:	3e 4f       	sbci	r19, 0xFE	; 254
    {
        //   instructions[ i ] = pagebuffer[ index + i ];
        pagebuffer[i] = buffer[endindex + i];
   1e396:	81 91       	ld	r24, Z+
   1e398:	d3 01       	movw	r26, r6
   1e39a:	8d 93       	st	X+, r24
   1e39c:	3d 01       	movw	r6, r26
   1e39e:	a2 17       	cp	r26, r18
   1e3a0:	b3 07       	cpc	r27, r19
   1e3a2:	c9 f7       	brne	.-14     	; 0x1e396 <boot_removeTracePointLong+0x14a>
    }
    reprogram(pagebuffer, pagenum + 1);
   1e3a4:	80 e4       	ldi	r24, 0x40	; 64
   1e3a6:	91 e0       	ldi	r25, 0x01	; 1
   1e3a8:	69 81       	ldd	r22, Y+1	; 0x01
   1e3aa:	7a 81       	ldd	r23, Y+2	; 0x02
   1e3ac:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
}
   1e3b0:	0f 90       	pop	r0
   1e3b2:	0f 90       	pop	r0
   1e3b4:	0f 90       	pop	r0
   1e3b6:	0f 90       	pop	r0
   1e3b8:	cf 91       	pop	r28
   1e3ba:	df 91       	pop	r29
   1e3bc:	1f 91       	pop	r17
   1e3be:	0f 91       	pop	r16
   1e3c0:	ff 90       	pop	r15
   1e3c2:	ef 90       	pop	r14
   1e3c4:	df 90       	pop	r13
   1e3c6:	cf 90       	pop	r12
   1e3c8:	bf 90       	pop	r11
   1e3ca:	af 90       	pop	r10
   1e3cc:	9f 90       	pop	r9
   1e3ce:	8f 90       	pop	r8
   1e3d0:	7f 90       	pop	r7
   1e3d2:	6f 90       	pop	r6
   1e3d4:	5f 90       	pop	r5
   1e3d6:	4f 90       	pop	r4
   1e3d8:	3f 90       	pop	r3
   1e3da:	2f 90       	pop	r2
   1e3dc:	08 95       	ret
   1e3de:	23 2c       	mov	r2, r3
   1e3e0:	21 94       	neg	r2
   1e3e2:	82 2c       	mov	r8, r2
   1e3e4:	99 24       	eor	r9, r9
   1e3e6:	11 e0       	ldi	r17, 0x01	; 1
   1e3e8:	81 cf       	rjmp	.-254    	; 0x1e2ec <boot_removeTracePointLong+0xa0>

0001e3ea <boot_removeTracePoint>:
   1e3ea:	2f 92       	push	r2
   1e3ec:	3f 92       	push	r3
   1e3ee:	4f 92       	push	r4
   1e3f0:	5f 92       	push	r5
   1e3f2:	6f 92       	push	r6
   1e3f4:	7f 92       	push	r7
   1e3f6:	8f 92       	push	r8
   1e3f8:	9f 92       	push	r9
   1e3fa:	af 92       	push	r10
   1e3fc:	bf 92       	push	r11
   1e3fe:	cf 92       	push	r12
   1e400:	df 92       	push	r13
   1e402:	ef 92       	push	r14
   1e404:	ff 92       	push	r15
   1e406:	0f 93       	push	r16
   1e408:	1f 93       	push	r17
   1e40a:	df 93       	push	r29
   1e40c:	cf 93       	push	r28
   1e40e:	00 d0       	rcall	.+0      	; 0x1e410 <boot_removeTracePoint+0x26>
   1e410:	0f 92       	push	r0
   1e412:	cd b7       	in	r28, 0x3d	; 61
   1e414:	de b7       	in	r29, 0x3e	; 62
   1e416:	1c 01       	movw	r2, r24
   1e418:	d6 2e       	mov	r13, r22
   1e41a:	2a 01       	movw	r4, r20
   1e41c:	a0 e0       	ldi	r26, 0x00	; 0
   1e41e:	b0 e0       	ldi	r27, 0x00	; 0
   1e420:	ee 24       	eor	r14, r14
   1e422:	f8 2e       	mov	r15, r24
   1e424:	09 2f       	mov	r16, r25
   1e426:	1a 2f       	mov	r17, r26
   1e428:	60 e4       	ldi	r22, 0x40	; 64
   1e42a:	66 2e       	mov	r6, r22
   1e42c:	61 e0       	ldi	r22, 0x01	; 1
   1e42e:	76 2e       	mov	r7, r22
   1e430:	53 01       	movw	r10, r6
   1e432:	15 c0       	rjmp	.+42     	; 0x1e45e <boot_removeTracePoint+0x74>
   1e434:	d5 01       	movw	r26, r10
   1e436:	8c 92       	st	X, r8
   1e438:	11 96       	adiw	r26, 0x01	; 1
   1e43a:	9c 92       	st	X, r9
   1e43c:	82 e0       	ldi	r24, 0x02	; 2
   1e43e:	90 e0       	ldi	r25, 0x00	; 0
   1e440:	a0 e0       	ldi	r26, 0x00	; 0
   1e442:	b0 e0       	ldi	r27, 0x00	; 0
   1e444:	e8 0e       	add	r14, r24
   1e446:	f9 1e       	adc	r15, r25
   1e448:	0a 1f       	adc	r16, r26
   1e44a:	1b 1f       	adc	r17, r27
   1e44c:	a2 e0       	ldi	r26, 0x02	; 2
   1e44e:	b0 e0       	ldi	r27, 0x00	; 0
   1e450:	aa 0e       	add	r10, r26
   1e452:	bb 1e       	adc	r11, r27
   1e454:	b0 e4       	ldi	r27, 0x40	; 64
   1e456:	ab 16       	cp	r10, r27
   1e458:	b2 e0       	ldi	r27, 0x02	; 2
   1e45a:	bb 06       	cpc	r11, r27
   1e45c:	61 f0       	breq	.+24     	; 0x1e476 <boot_removeTracePoint+0x8c>
   1e45e:	0b bf       	out	0x3b, r16	; 59
   1e460:	f7 01       	movw	r30, r14
   1e462:	87 90       	elpm	r8, Z+
   1e464:	96 90       	elpm	r9, Z
   1e466:	0e 94 2d 3a 	call	0x745a	; 0x745a <is_host_lsb>
   1e46a:	89 2b       	or	r24, r25
   1e46c:	19 f7       	brne	.-58     	; 0x1e434 <boot_removeTracePoint+0x4a>
   1e46e:	f5 01       	movw	r30, r10
   1e470:	81 82       	std	Z+1, r8	; 0x01
   1e472:	90 82       	st	Z, r9
   1e474:	e3 cf       	rjmp	.-58     	; 0x1e43c <boot_removeTracePoint+0x52>
   1e476:	e2 ef       	ldi	r30, 0xF2	; 242
   1e478:	ed 15       	cp	r30, r13
   1e47a:	08 f4       	brcc	.+2      	; 0x1e47e <boot_removeTracePoint+0x94>
   1e47c:	80 c0       	rjmp	.+256    	; 0x1e57e <boot_removeTracePoint+0x194>
   1e47e:	10 e0       	ldi	r17, 0x00	; 0
   1e480:	fe e0       	ldi	r31, 0x0E	; 14
   1e482:	f9 83       	std	Y+1, r31	; 0x01
   1e484:	5e e0       	ldi	r21, 0x0E	; 14
   1e486:	85 2e       	mov	r8, r21
   1e488:	91 2c       	mov	r9, r1
   1e48a:	ad 2d       	mov	r26, r13
   1e48c:	b0 e0       	ldi	r27, 0x00	; 0
   1e48e:	a0 5c       	subi	r26, 0xC0	; 192
   1e490:	be 4f       	sbci	r27, 0xFE	; 254
   1e492:	20 e0       	ldi	r18, 0x00	; 0
   1e494:	30 e0       	ldi	r19, 0x00	; 0
   1e496:	f2 01       	movw	r30, r4
   1e498:	e2 0f       	add	r30, r18
   1e49a:	f3 1f       	adc	r31, r19
   1e49c:	80 81       	ld	r24, Z
   1e49e:	8d 93       	st	X+, r24
   1e4a0:	2f 5f       	subi	r18, 0xFF	; 255
   1e4a2:	3f 4f       	sbci	r19, 0xFF	; 255
   1e4a4:	28 15       	cp	r18, r8
   1e4a6:	39 05       	cpc	r19, r9
   1e4a8:	b4 f3       	brlt	.-20     	; 0x1e496 <boot_removeTracePoint+0xac>
   1e4aa:	80 e4       	ldi	r24, 0x40	; 64
   1e4ac:	91 e0       	ldi	r25, 0x01	; 1
   1e4ae:	b1 01       	movw	r22, r2
   1e4b0:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
   1e4b4:	11 23       	and	r17, r17
   1e4b6:	09 f4       	brne	.+2      	; 0x1e4ba <boot_removeTracePoint+0xd0>
   1e4b8:	4c c0       	rjmp	.+152    	; 0x1e552 <boot_removeTracePoint+0x168>
   1e4ba:	08 94       	sec
   1e4bc:	21 1c       	adc	r2, r1
   1e4be:	31 1c       	adc	r3, r1
   1e4c0:	c1 01       	movw	r24, r2
   1e4c2:	a0 e0       	ldi	r26, 0x00	; 0
   1e4c4:	b0 e0       	ldi	r27, 0x00	; 0
   1e4c6:	08 94       	sec
   1e4c8:	21 08       	sbc	r2, r1
   1e4ca:	31 08       	sbc	r3, r1
   1e4cc:	ee 24       	eor	r14, r14
   1e4ce:	f8 2e       	mov	r15, r24
   1e4d0:	09 2f       	mov	r16, r25
   1e4d2:	1a 2f       	mov	r17, r26
   1e4d4:	a0 e4       	ldi	r26, 0x40	; 64
   1e4d6:	b1 e0       	ldi	r27, 0x01	; 1
   1e4d8:	bb 83       	std	Y+3, r27	; 0x03
   1e4da:	aa 83       	std	Y+2, r26	; 0x02
   1e4dc:	14 c0       	rjmp	.+40     	; 0x1e506 <boot_removeTracePoint+0x11c>
   1e4de:	ea 81       	ldd	r30, Y+2	; 0x02
   1e4e0:	fb 81       	ldd	r31, Y+3	; 0x03
   1e4e2:	c0 82       	st	Z, r12
   1e4e4:	d1 82       	std	Z+1, r13	; 0x01
   1e4e6:	82 e0       	ldi	r24, 0x02	; 2
   1e4e8:	90 e0       	ldi	r25, 0x00	; 0
   1e4ea:	a0 e0       	ldi	r26, 0x00	; 0
   1e4ec:	b0 e0       	ldi	r27, 0x00	; 0
   1e4ee:	e8 0e       	add	r14, r24
   1e4f0:	f9 1e       	adc	r15, r25
   1e4f2:	0a 1f       	adc	r16, r26
   1e4f4:	1b 1f       	adc	r17, r27
   1e4f6:	aa 81       	ldd	r26, Y+2	; 0x02
   1e4f8:	bb 81       	ldd	r27, Y+3	; 0x03
   1e4fa:	12 96       	adiw	r26, 0x02	; 2
   1e4fc:	bb 83       	std	Y+3, r27	; 0x03
   1e4fe:	aa 83       	std	Y+2, r26	; 0x02
   1e500:	aa 16       	cp	r10, r26
   1e502:	bb 06       	cpc	r11, r27
   1e504:	79 f0       	breq	.+30     	; 0x1e524 <boot_removeTracePoint+0x13a>
   1e506:	0b bf       	out	0x3b, r16	; 59
   1e508:	f7 01       	movw	r30, r14
   1e50a:	c7 90       	elpm	r12, Z+
   1e50c:	d6 90       	elpm	r13, Z
   1e50e:	0e 94 2d 3a 	call	0x745a	; 0x745a <is_host_lsb>
   1e512:	89 2b       	or	r24, r25
   1e514:	21 f7       	brne	.-56     	; 0x1e4de <boot_removeTracePoint+0xf4>
   1e516:	aa 81       	ldd	r26, Y+2	; 0x02
   1e518:	bb 81       	ldd	r27, Y+3	; 0x03
   1e51a:	11 96       	adiw	r26, 0x01	; 1
   1e51c:	cc 92       	st	X, r12
   1e51e:	11 97       	sbiw	r26, 0x01	; 1
   1e520:	dc 92       	st	X, r13
   1e522:	e1 cf       	rjmp	.-62     	; 0x1e4e6 <boot_removeTracePoint+0xfc>
   1e524:	8e e0       	ldi	r24, 0x0E	; 14
   1e526:	b9 81       	ldd	r27, Y+1	; 0x01
   1e528:	8b 1b       	sub	r24, r27
   1e52a:	71 f0       	breq	.+28     	; 0x1e548 <boot_removeTracePoint+0x15e>
   1e52c:	f2 01       	movw	r30, r4
   1e52e:	e8 0d       	add	r30, r8
   1e530:	f9 1d       	adc	r31, r9
   1e532:	28 2f       	mov	r18, r24
   1e534:	30 e0       	ldi	r19, 0x00	; 0
   1e536:	20 5c       	subi	r18, 0xC0	; 192
   1e538:	3e 4f       	sbci	r19, 0xFE	; 254
   1e53a:	81 91       	ld	r24, Z+
   1e53c:	d3 01       	movw	r26, r6
   1e53e:	8d 93       	st	X+, r24
   1e540:	3d 01       	movw	r6, r26
   1e542:	a2 17       	cp	r26, r18
   1e544:	b3 07       	cpc	r27, r19
   1e546:	c9 f7       	brne	.-14     	; 0x1e53a <boot_removeTracePoint+0x150>
   1e548:	80 e4       	ldi	r24, 0x40	; 64
   1e54a:	91 e0       	ldi	r25, 0x01	; 1
   1e54c:	b1 01       	movw	r22, r2
   1e54e:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
   1e552:	0f 90       	pop	r0
   1e554:	0f 90       	pop	r0
   1e556:	0f 90       	pop	r0
   1e558:	cf 91       	pop	r28
   1e55a:	df 91       	pop	r29
   1e55c:	1f 91       	pop	r17
   1e55e:	0f 91       	pop	r16
   1e560:	ff 90       	pop	r15
   1e562:	ef 90       	pop	r14
   1e564:	df 90       	pop	r13
   1e566:	cf 90       	pop	r12
   1e568:	bf 90       	pop	r11
   1e56a:	af 90       	pop	r10
   1e56c:	9f 90       	pop	r9
   1e56e:	8f 90       	pop	r8
   1e570:	7f 90       	pop	r7
   1e572:	6f 90       	pop	r6
   1e574:	5f 90       	pop	r5
   1e576:	4f 90       	pop	r4
   1e578:	3f 90       	pop	r3
   1e57a:	2f 90       	pop	r2
   1e57c:	08 95       	ret
   1e57e:	8d 2d       	mov	r24, r13
   1e580:	81 95       	neg	r24
   1e582:	89 83       	std	Y+1, r24	; 0x01
   1e584:	88 2e       	mov	r8, r24
   1e586:	99 24       	eor	r9, r9
   1e588:	11 e0       	ldi	r17, 0x01	; 1
   1e58a:	7f cf       	rjmp	.-258    	; 0x1e48a <boot_removeTracePoint+0xa0>

0001e58c <boot_removeBreakPoint>:
   1e58c:	7f 92       	push	r7
   1e58e:	8f 92       	push	r8
   1e590:	9f 92       	push	r9
   1e592:	af 92       	push	r10
   1e594:	bf 92       	push	r11
   1e596:	cf 92       	push	r12
   1e598:	df 92       	push	r13
   1e59a:	ef 92       	push	r14
   1e59c:	ff 92       	push	r15
   1e59e:	0f 93       	push	r16
   1e5a0:	1f 93       	push	r17
   1e5a2:	cf 93       	push	r28
   1e5a4:	df 93       	push	r29
   1e5a6:	5c 01       	movw	r10, r24
   1e5a8:	76 2e       	mov	r7, r22
   1e5aa:	94 2e       	mov	r9, r20
   1e5ac:	85 2e       	mov	r8, r21
   1e5ae:	a0 e0       	ldi	r26, 0x00	; 0
   1e5b0:	b0 e0       	ldi	r27, 0x00	; 0
   1e5b2:	ee 24       	eor	r14, r14
   1e5b4:	f8 2e       	mov	r15, r24
   1e5b6:	09 2f       	mov	r16, r25
   1e5b8:	1a 2f       	mov	r17, r26
   1e5ba:	c0 e4       	ldi	r28, 0x40	; 64
   1e5bc:	d1 e0       	ldi	r29, 0x01	; 1
   1e5be:	0f c0       	rjmp	.+30     	; 0x1e5de <boot_removeBreakPoint+0x52>
   1e5c0:	c8 82       	st	Y, r12
   1e5c2:	d9 82       	std	Y+1, r13	; 0x01
   1e5c4:	82 e0       	ldi	r24, 0x02	; 2
   1e5c6:	90 e0       	ldi	r25, 0x00	; 0
   1e5c8:	a0 e0       	ldi	r26, 0x00	; 0
   1e5ca:	b0 e0       	ldi	r27, 0x00	; 0
   1e5cc:	e8 0e       	add	r14, r24
   1e5ce:	f9 1e       	adc	r15, r25
   1e5d0:	0a 1f       	adc	r16, r26
   1e5d2:	1b 1f       	adc	r17, r27
   1e5d4:	22 96       	adiw	r28, 0x02	; 2
   1e5d6:	92 e0       	ldi	r25, 0x02	; 2
   1e5d8:	c0 34       	cpi	r28, 0x40	; 64
   1e5da:	d9 07       	cpc	r29, r25
   1e5dc:	59 f0       	breq	.+22     	; 0x1e5f4 <boot_removeBreakPoint+0x68>
   1e5de:	0b bf       	out	0x3b, r16	; 59
   1e5e0:	f7 01       	movw	r30, r14
   1e5e2:	c7 90       	elpm	r12, Z+
   1e5e4:	d6 90       	elpm	r13, Z
   1e5e6:	0e 94 2d 3a 	call	0x745a	; 0x745a <is_host_lsb>
   1e5ea:	89 2b       	or	r24, r25
   1e5ec:	49 f7       	brne	.-46     	; 0x1e5c0 <boot_removeBreakPoint+0x34>
   1e5ee:	c9 82       	std	Y+1, r12	; 0x01
   1e5f0:	d8 82       	st	Y, r13
   1e5f2:	e8 cf       	rjmp	.-48     	; 0x1e5c4 <boot_removeBreakPoint+0x38>
   1e5f4:	29 2d       	mov	r18, r9
   1e5f6:	38 2d       	mov	r19, r8
   1e5f8:	c9 01       	movw	r24, r18
   1e5fa:	dc 01       	movw	r26, r24
   1e5fc:	87 2d       	mov	r24, r7
   1e5fe:	90 e0       	ldi	r25, 0x00	; 0
   1e600:	fc 01       	movw	r30, r24
   1e602:	e0 5c       	subi	r30, 0xC0	; 192
   1e604:	fe 4f       	sbci	r31, 0xFE	; 254
   1e606:	bc 01       	movw	r22, r24
   1e608:	6a 5b       	subi	r22, 0xBA	; 186
   1e60a:	7e 4f       	sbci	r23, 0xFE	; 254
   1e60c:	8d 91       	ld	r24, X+
   1e60e:	81 93       	st	Z+, r24
   1e610:	e6 17       	cp	r30, r22
   1e612:	f7 07       	cpc	r31, r23
   1e614:	d9 f7       	brne	.-10     	; 0x1e60c <boot_removeBreakPoint+0x80>
   1e616:	80 e4       	ldi	r24, 0x40	; 64
   1e618:	91 e0       	ldi	r25, 0x01	; 1
   1e61a:	b5 01       	movw	r22, r10
   1e61c:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
   1e620:	df 91       	pop	r29
   1e622:	cf 91       	pop	r28
   1e624:	1f 91       	pop	r17
   1e626:	0f 91       	pop	r16
   1e628:	ff 90       	pop	r15
   1e62a:	ef 90       	pop	r14
   1e62c:	df 90       	pop	r13
   1e62e:	cf 90       	pop	r12
   1e630:	bf 90       	pop	r11
   1e632:	af 90       	pop	r10
   1e634:	9f 90       	pop	r9
   1e636:	8f 90       	pop	r8
   1e638:	7f 90       	pop	r7
   1e63a:	08 95       	ret

0001e63c <boot_insertTracePointLong>:
   1e63c:	2f 92       	push	r2
   1e63e:	3f 92       	push	r3
   1e640:	4f 92       	push	r4
   1e642:	5f 92       	push	r5
   1e644:	6f 92       	push	r6
   1e646:	7f 92       	push	r7
   1e648:	8f 92       	push	r8
   1e64a:	9f 92       	push	r9
   1e64c:	af 92       	push	r10
   1e64e:	bf 92       	push	r11
   1e650:	cf 92       	push	r12
   1e652:	df 92       	push	r13
   1e654:	ef 92       	push	r14
   1e656:	ff 92       	push	r15
   1e658:	0f 93       	push	r16
   1e65a:	1f 93       	push	r17
   1e65c:	cf 93       	push	r28
   1e65e:	df 93       	push	r29
   1e660:	6c 01       	movw	r12, r24
   1e662:	56 2e       	mov	r5, r22
   1e664:	a0 e0       	ldi	r26, 0x00	; 0
   1e666:	b0 e0       	ldi	r27, 0x00	; 0
   1e668:	ee 24       	eor	r14, r14
   1e66a:	f8 2e       	mov	r15, r24
   1e66c:	09 2f       	mov	r16, r25
   1e66e:	1a 2f       	mov	r17, r26
   1e670:	80 e4       	ldi	r24, 0x40	; 64
   1e672:	68 2e       	mov	r6, r24
   1e674:	81 e0       	ldi	r24, 0x01	; 1
   1e676:	78 2e       	mov	r7, r24
   1e678:	53 01       	movw	r10, r6
   1e67a:	15 c0       	rjmp	.+42     	; 0x1e6a6 <boot_insertTracePointLong+0x6a>
   1e67c:	d5 01       	movw	r26, r10
   1e67e:	cc 93       	st	X, r28
   1e680:	11 96       	adiw	r26, 0x01	; 1
   1e682:	dc 93       	st	X, r29
   1e684:	82 e0       	ldi	r24, 0x02	; 2
   1e686:	90 e0       	ldi	r25, 0x00	; 0
   1e688:	a0 e0       	ldi	r26, 0x00	; 0
   1e68a:	b0 e0       	ldi	r27, 0x00	; 0
   1e68c:	e8 0e       	add	r14, r24
   1e68e:	f9 1e       	adc	r15, r25
   1e690:	0a 1f       	adc	r16, r26
   1e692:	1b 1f       	adc	r17, r27
   1e694:	a2 e0       	ldi	r26, 0x02	; 2
   1e696:	b0 e0       	ldi	r27, 0x00	; 0
   1e698:	aa 0e       	add	r10, r26
   1e69a:	bb 1e       	adc	r11, r27
   1e69c:	b0 e4       	ldi	r27, 0x40	; 64
   1e69e:	ab 16       	cp	r10, r27
   1e6a0:	b2 e0       	ldi	r27, 0x02	; 2
   1e6a2:	bb 06       	cpc	r11, r27
   1e6a4:	61 f0       	breq	.+24     	; 0x1e6be <boot_insertTracePointLong+0x82>
   1e6a6:	0b bf       	out	0x3b, r16	; 59
   1e6a8:	f7 01       	movw	r30, r14
   1e6aa:	c7 91       	elpm	r28, Z+
   1e6ac:	d6 91       	elpm	r29, Z
   1e6ae:	0e 94 2d 3a 	call	0x745a	; 0x745a <is_host_lsb>
   1e6b2:	89 2b       	or	r24, r25
   1e6b4:	19 f7       	brne	.-58     	; 0x1e67c <boot_insertTracePointLong+0x40>
   1e6b6:	f5 01       	movw	r30, r10
   1e6b8:	c1 83       	std	Z+1, r28	; 0x01
   1e6ba:	d0 83       	st	Z, r29
   1e6bc:	e3 cf       	rjmp	.-58     	; 0x1e684 <boot_insertTracePointLong+0x48>
   1e6be:	e0 ef       	ldi	r30, 0xF0	; 240
   1e6c0:	e5 15       	cp	r30, r5
   1e6c2:	08 f4       	brcc	.+2      	; 0x1e6c6 <boot_insertTracePointLong+0x8a>
   1e6c4:	6e c0       	rjmp	.+220    	; 0x1e7a2 <boot_insertTracePointLong+0x166>
   1e6c6:	10 e0       	ldi	r17, 0x00	; 0
   1e6c8:	b0 e1       	ldi	r27, 0x10	; 16
   1e6ca:	4b 2e       	mov	r4, r27
   1e6cc:	a0 e1       	ldi	r26, 0x10	; 16
   1e6ce:	8a 2e       	mov	r8, r26
   1e6d0:	91 2c       	mov	r9, r1
   1e6d2:	a5 2d       	mov	r26, r5
   1e6d4:	b0 e0       	ldi	r27, 0x00	; 0
   1e6d6:	a0 5c       	subi	r26, 0xC0	; 192
   1e6d8:	be 4f       	sbci	r27, 0xFE	; 254
   1e6da:	20 e0       	ldi	r18, 0x00	; 0
   1e6dc:	30 e0       	ldi	r19, 0x00	; 0
   1e6de:	f9 01       	movw	r30, r18
   1e6e0:	e1 5f       	subi	r30, 0xF1	; 241
   1e6e2:	fe 4f       	sbci	r31, 0xFE	; 254
   1e6e4:	80 81       	ld	r24, Z
   1e6e6:	8d 93       	st	X+, r24
   1e6e8:	2f 5f       	subi	r18, 0xFF	; 255
   1e6ea:	3f 4f       	sbci	r19, 0xFF	; 255
   1e6ec:	28 15       	cp	r18, r8
   1e6ee:	39 05       	cpc	r19, r9
   1e6f0:	b4 f3       	brlt	.-20     	; 0x1e6de <boot_insertTracePointLong+0xa2>
   1e6f2:	80 e4       	ldi	r24, 0x40	; 64
   1e6f4:	91 e0       	ldi	r25, 0x01	; 1
   1e6f6:	b6 01       	movw	r22, r12
   1e6f8:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
   1e6fc:	11 23       	and	r17, r17
   1e6fe:	09 f4       	brne	.+2      	; 0x1e702 <boot_insertTracePointLong+0xc6>
   1e700:	3d c0       	rjmp	.+122    	; 0x1e77c <boot_insertTracePointLong+0x140>
   1e702:	16 01       	movw	r2, r12
   1e704:	08 94       	sec
   1e706:	21 1c       	adc	r2, r1
   1e708:	31 1c       	adc	r3, r1
   1e70a:	c1 01       	movw	r24, r2
   1e70c:	a0 e0       	ldi	r26, 0x00	; 0
   1e70e:	b0 e0       	ldi	r27, 0x00	; 0
   1e710:	ee 24       	eor	r14, r14
   1e712:	f8 2e       	mov	r15, r24
   1e714:	09 2f       	mov	r16, r25
   1e716:	1a 2f       	mov	r17, r26
   1e718:	c0 e4       	ldi	r28, 0x40	; 64
   1e71a:	d1 e0       	ldi	r29, 0x01	; 1
   1e71c:	0e c0       	rjmp	.+28     	; 0x1e73a <boot_insertTracePointLong+0xfe>
   1e71e:	c8 82       	st	Y, r12
   1e720:	d9 82       	std	Y+1, r13	; 0x01
   1e722:	82 e0       	ldi	r24, 0x02	; 2
   1e724:	90 e0       	ldi	r25, 0x00	; 0
   1e726:	a0 e0       	ldi	r26, 0x00	; 0
   1e728:	b0 e0       	ldi	r27, 0x00	; 0
   1e72a:	e8 0e       	add	r14, r24
   1e72c:	f9 1e       	adc	r15, r25
   1e72e:	0a 1f       	adc	r16, r26
   1e730:	1b 1f       	adc	r17, r27
   1e732:	22 96       	adiw	r28, 0x02	; 2
   1e734:	ac 16       	cp	r10, r28
   1e736:	bd 06       	cpc	r11, r29
   1e738:	59 f0       	breq	.+22     	; 0x1e750 <boot_insertTracePointLong+0x114>
   1e73a:	0b bf       	out	0x3b, r16	; 59
   1e73c:	f7 01       	movw	r30, r14
   1e73e:	c7 90       	elpm	r12, Z+
   1e740:	d6 90       	elpm	r13, Z
   1e742:	0e 94 2d 3a 	call	0x745a	; 0x745a <is_host_lsb>
   1e746:	89 2b       	or	r24, r25
   1e748:	51 f7       	brne	.-44     	; 0x1e71e <boot_insertTracePointLong+0xe2>
   1e74a:	c9 82       	std	Y+1, r12	; 0x01
   1e74c:	d8 82       	st	Y, r13
   1e74e:	e9 cf       	rjmp	.-46     	; 0x1e722 <boot_insertTracePointLong+0xe6>
   1e750:	80 e1       	ldi	r24, 0x10	; 16
   1e752:	84 19       	sub	r24, r4
   1e754:	71 f0       	breq	.+28     	; 0x1e772 <boot_insertTracePointLong+0x136>
   1e756:	f4 01       	movw	r30, r8
   1e758:	e1 5f       	subi	r30, 0xF1	; 241
   1e75a:	fe 4f       	sbci	r31, 0xFE	; 254
   1e75c:	28 2f       	mov	r18, r24
   1e75e:	30 e0       	ldi	r19, 0x00	; 0
   1e760:	20 5c       	subi	r18, 0xC0	; 192
   1e762:	3e 4f       	sbci	r19, 0xFE	; 254
   1e764:	81 91       	ld	r24, Z+
   1e766:	d3 01       	movw	r26, r6
   1e768:	8d 93       	st	X+, r24
   1e76a:	3d 01       	movw	r6, r26
   1e76c:	a2 17       	cp	r26, r18
   1e76e:	b3 07       	cpc	r27, r19
   1e770:	c9 f7       	brne	.-14     	; 0x1e764 <boot_insertTracePointLong+0x128>
   1e772:	80 e4       	ldi	r24, 0x40	; 64
   1e774:	91 e0       	ldi	r25, 0x01	; 1
   1e776:	b1 01       	movw	r22, r2
   1e778:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
   1e77c:	df 91       	pop	r29
   1e77e:	cf 91       	pop	r28
   1e780:	1f 91       	pop	r17
   1e782:	0f 91       	pop	r16
   1e784:	ff 90       	pop	r15
   1e786:	ef 90       	pop	r14
   1e788:	df 90       	pop	r13
   1e78a:	cf 90       	pop	r12
   1e78c:	bf 90       	pop	r11
   1e78e:	af 90       	pop	r10
   1e790:	9f 90       	pop	r9
   1e792:	8f 90       	pop	r8
   1e794:	7f 90       	pop	r7
   1e796:	6f 90       	pop	r6
   1e798:	5f 90       	pop	r5
   1e79a:	4f 90       	pop	r4
   1e79c:	3f 90       	pop	r3
   1e79e:	2f 90       	pop	r2
   1e7a0:	08 95       	ret
   1e7a2:	45 2c       	mov	r4, r5
   1e7a4:	41 94       	neg	r4
   1e7a6:	84 2c       	mov	r8, r4
   1e7a8:	99 24       	eor	r9, r9
   1e7aa:	11 e0       	ldi	r17, 0x01	; 1
   1e7ac:	92 cf       	rjmp	.-220    	; 0x1e6d2 <boot_insertTracePointLong+0x96>

0001e7ae <boot_insertTracePoint>:
   1e7ae:	2f 92       	push	r2
   1e7b0:	3f 92       	push	r3
   1e7b2:	4f 92       	push	r4
   1e7b4:	5f 92       	push	r5
   1e7b6:	6f 92       	push	r6
   1e7b8:	7f 92       	push	r7
   1e7ba:	8f 92       	push	r8
   1e7bc:	9f 92       	push	r9
   1e7be:	af 92       	push	r10
   1e7c0:	bf 92       	push	r11
   1e7c2:	cf 92       	push	r12
   1e7c4:	df 92       	push	r13
   1e7c6:	ef 92       	push	r14
   1e7c8:	ff 92       	push	r15
   1e7ca:	0f 93       	push	r16
   1e7cc:	1f 93       	push	r17
   1e7ce:	cf 93       	push	r28
   1e7d0:	df 93       	push	r29
   1e7d2:	6c 01       	movw	r12, r24
   1e7d4:	56 2e       	mov	r5, r22
   1e7d6:	a0 e0       	ldi	r26, 0x00	; 0
   1e7d8:	b0 e0       	ldi	r27, 0x00	; 0
   1e7da:	ee 24       	eor	r14, r14
   1e7dc:	f8 2e       	mov	r15, r24
   1e7de:	09 2f       	mov	r16, r25
   1e7e0:	1a 2f       	mov	r17, r26
   1e7e2:	60 e4       	ldi	r22, 0x40	; 64
   1e7e4:	66 2e       	mov	r6, r22
   1e7e6:	61 e0       	ldi	r22, 0x01	; 1
   1e7e8:	76 2e       	mov	r7, r22
   1e7ea:	53 01       	movw	r10, r6
   1e7ec:	15 c0       	rjmp	.+42     	; 0x1e818 <boot_insertTracePoint+0x6a>
   1e7ee:	d5 01       	movw	r26, r10
   1e7f0:	cc 93       	st	X, r28
   1e7f2:	11 96       	adiw	r26, 0x01	; 1
   1e7f4:	dc 93       	st	X, r29
   1e7f6:	82 e0       	ldi	r24, 0x02	; 2
   1e7f8:	90 e0       	ldi	r25, 0x00	; 0
   1e7fa:	a0 e0       	ldi	r26, 0x00	; 0
   1e7fc:	b0 e0       	ldi	r27, 0x00	; 0
   1e7fe:	e8 0e       	add	r14, r24
   1e800:	f9 1e       	adc	r15, r25
   1e802:	0a 1f       	adc	r16, r26
   1e804:	1b 1f       	adc	r17, r27
   1e806:	a2 e0       	ldi	r26, 0x02	; 2
   1e808:	b0 e0       	ldi	r27, 0x00	; 0
   1e80a:	aa 0e       	add	r10, r26
   1e80c:	bb 1e       	adc	r11, r27
   1e80e:	b0 e4       	ldi	r27, 0x40	; 64
   1e810:	ab 16       	cp	r10, r27
   1e812:	b2 e0       	ldi	r27, 0x02	; 2
   1e814:	bb 06       	cpc	r11, r27
   1e816:	61 f0       	breq	.+24     	; 0x1e830 <boot_insertTracePoint+0x82>
   1e818:	0b bf       	out	0x3b, r16	; 59
   1e81a:	f7 01       	movw	r30, r14
   1e81c:	c7 91       	elpm	r28, Z+
   1e81e:	d6 91       	elpm	r29, Z
   1e820:	0e 94 2d 3a 	call	0x745a	; 0x745a <is_host_lsb>
   1e824:	89 2b       	or	r24, r25
   1e826:	19 f7       	brne	.-58     	; 0x1e7ee <boot_insertTracePoint+0x40>
   1e828:	f5 01       	movw	r30, r10
   1e82a:	c1 83       	std	Z+1, r28	; 0x01
   1e82c:	d0 83       	st	Z, r29
   1e82e:	e3 cf       	rjmp	.-58     	; 0x1e7f6 <boot_insertTracePoint+0x48>
   1e830:	e2 ef       	ldi	r30, 0xF2	; 242
   1e832:	e5 15       	cp	r30, r5
   1e834:	08 f4       	brcc	.+2      	; 0x1e838 <boot_insertTracePoint+0x8a>
   1e836:	6e c0       	rjmp	.+220    	; 0x1e914 <boot_insertTracePoint+0x166>
   1e838:	10 e0       	ldi	r17, 0x00	; 0
   1e83a:	5e e0       	ldi	r21, 0x0E	; 14
   1e83c:	45 2e       	mov	r4, r21
   1e83e:	4e e0       	ldi	r20, 0x0E	; 14
   1e840:	84 2e       	mov	r8, r20
   1e842:	91 2c       	mov	r9, r1
   1e844:	a5 2d       	mov	r26, r5
   1e846:	b0 e0       	ldi	r27, 0x00	; 0
   1e848:	a0 5c       	subi	r26, 0xC0	; 192
   1e84a:	be 4f       	sbci	r27, 0xFE	; 254
   1e84c:	20 e0       	ldi	r18, 0x00	; 0
   1e84e:	30 e0       	ldi	r19, 0x00	; 0
   1e850:	f9 01       	movw	r30, r18
   1e852:	e1 5f       	subi	r30, 0xF1	; 241
   1e854:	fe 4f       	sbci	r31, 0xFE	; 254
   1e856:	80 81       	ld	r24, Z
   1e858:	8d 93       	st	X+, r24
   1e85a:	2f 5f       	subi	r18, 0xFF	; 255
   1e85c:	3f 4f       	sbci	r19, 0xFF	; 255
   1e85e:	28 15       	cp	r18, r8
   1e860:	39 05       	cpc	r19, r9
   1e862:	b4 f3       	brlt	.-20     	; 0x1e850 <boot_insertTracePoint+0xa2>
   1e864:	80 e4       	ldi	r24, 0x40	; 64
   1e866:	91 e0       	ldi	r25, 0x01	; 1
   1e868:	b6 01       	movw	r22, r12
   1e86a:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
   1e86e:	11 23       	and	r17, r17
   1e870:	09 f4       	brne	.+2      	; 0x1e874 <boot_insertTracePoint+0xc6>
   1e872:	3d c0       	rjmp	.+122    	; 0x1e8ee <boot_insertTracePoint+0x140>
   1e874:	16 01       	movw	r2, r12
   1e876:	08 94       	sec
   1e878:	21 1c       	adc	r2, r1
   1e87a:	31 1c       	adc	r3, r1
   1e87c:	c1 01       	movw	r24, r2
   1e87e:	a0 e0       	ldi	r26, 0x00	; 0
   1e880:	b0 e0       	ldi	r27, 0x00	; 0
   1e882:	ee 24       	eor	r14, r14
   1e884:	f8 2e       	mov	r15, r24
   1e886:	09 2f       	mov	r16, r25
   1e888:	1a 2f       	mov	r17, r26
   1e88a:	c0 e4       	ldi	r28, 0x40	; 64
   1e88c:	d1 e0       	ldi	r29, 0x01	; 1
   1e88e:	0e c0       	rjmp	.+28     	; 0x1e8ac <boot_insertTracePoint+0xfe>
   1e890:	c8 82       	st	Y, r12
   1e892:	d9 82       	std	Y+1, r13	; 0x01
   1e894:	82 e0       	ldi	r24, 0x02	; 2
   1e896:	90 e0       	ldi	r25, 0x00	; 0
   1e898:	a0 e0       	ldi	r26, 0x00	; 0
   1e89a:	b0 e0       	ldi	r27, 0x00	; 0
   1e89c:	e8 0e       	add	r14, r24
   1e89e:	f9 1e       	adc	r15, r25
   1e8a0:	0a 1f       	adc	r16, r26
   1e8a2:	1b 1f       	adc	r17, r27
   1e8a4:	22 96       	adiw	r28, 0x02	; 2
   1e8a6:	ac 16       	cp	r10, r28
   1e8a8:	bd 06       	cpc	r11, r29
   1e8aa:	59 f0       	breq	.+22     	; 0x1e8c2 <boot_insertTracePoint+0x114>
   1e8ac:	0b bf       	out	0x3b, r16	; 59
   1e8ae:	f7 01       	movw	r30, r14
   1e8b0:	c7 90       	elpm	r12, Z+
   1e8b2:	d6 90       	elpm	r13, Z
   1e8b4:	0e 94 2d 3a 	call	0x745a	; 0x745a <is_host_lsb>
   1e8b8:	89 2b       	or	r24, r25
   1e8ba:	51 f7       	brne	.-44     	; 0x1e890 <boot_insertTracePoint+0xe2>
   1e8bc:	c9 82       	std	Y+1, r12	; 0x01
   1e8be:	d8 82       	st	Y, r13
   1e8c0:	e9 cf       	rjmp	.-46     	; 0x1e894 <boot_insertTracePoint+0xe6>
   1e8c2:	8e e0       	ldi	r24, 0x0E	; 14
   1e8c4:	84 19       	sub	r24, r4
   1e8c6:	71 f0       	breq	.+28     	; 0x1e8e4 <boot_insertTracePoint+0x136>
   1e8c8:	f4 01       	movw	r30, r8
   1e8ca:	e1 5f       	subi	r30, 0xF1	; 241
   1e8cc:	fe 4f       	sbci	r31, 0xFE	; 254
   1e8ce:	28 2f       	mov	r18, r24
   1e8d0:	30 e0       	ldi	r19, 0x00	; 0
   1e8d2:	20 5c       	subi	r18, 0xC0	; 192
   1e8d4:	3e 4f       	sbci	r19, 0xFE	; 254
   1e8d6:	81 91       	ld	r24, Z+
   1e8d8:	d3 01       	movw	r26, r6
   1e8da:	8d 93       	st	X+, r24
   1e8dc:	3d 01       	movw	r6, r26
   1e8de:	a2 17       	cp	r26, r18
   1e8e0:	b3 07       	cpc	r27, r19
   1e8e2:	c9 f7       	brne	.-14     	; 0x1e8d6 <boot_insertTracePoint+0x128>
   1e8e4:	80 e4       	ldi	r24, 0x40	; 64
   1e8e6:	91 e0       	ldi	r25, 0x01	; 1
   1e8e8:	b1 01       	movw	r22, r2
   1e8ea:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
   1e8ee:	df 91       	pop	r29
   1e8f0:	cf 91       	pop	r28
   1e8f2:	1f 91       	pop	r17
   1e8f4:	0f 91       	pop	r16
   1e8f6:	ff 90       	pop	r15
   1e8f8:	ef 90       	pop	r14
   1e8fa:	df 90       	pop	r13
   1e8fc:	cf 90       	pop	r12
   1e8fe:	bf 90       	pop	r11
   1e900:	af 90       	pop	r10
   1e902:	9f 90       	pop	r9
   1e904:	8f 90       	pop	r8
   1e906:	7f 90       	pop	r7
   1e908:	6f 90       	pop	r6
   1e90a:	5f 90       	pop	r5
   1e90c:	4f 90       	pop	r4
   1e90e:	3f 90       	pop	r3
   1e910:	2f 90       	pop	r2
   1e912:	08 95       	ret
   1e914:	45 2c       	mov	r4, r5
   1e916:	41 94       	neg	r4
   1e918:	84 2c       	mov	r8, r4
   1e91a:	99 24       	eor	r9, r9
   1e91c:	11 e0       	ldi	r17, 0x01	; 1
   1e91e:	92 cf       	rjmp	.-220    	; 0x1e844 <boot_insertTracePoint+0x96>

0001e920 <boot_insertBreakPoint>:
   1e920:	7f 92       	push	r7
   1e922:	8f 92       	push	r8
   1e924:	9f 92       	push	r9
   1e926:	af 92       	push	r10
   1e928:	bf 92       	push	r11
   1e92a:	cf 92       	push	r12
   1e92c:	df 92       	push	r13
   1e92e:	ef 92       	push	r14
   1e930:	ff 92       	push	r15
   1e932:	0f 93       	push	r16
   1e934:	1f 93       	push	r17
   1e936:	cf 93       	push	r28
   1e938:	df 93       	push	r29
   1e93a:	4c 01       	movw	r8, r24
   1e93c:	76 2e       	mov	r7, r22
   1e93e:	5a 01       	movw	r10, r20
   1e940:	a0 e0       	ldi	r26, 0x00	; 0
   1e942:	b0 e0       	ldi	r27, 0x00	; 0
   1e944:	ee 24       	eor	r14, r14
   1e946:	f8 2e       	mov	r15, r24
   1e948:	09 2f       	mov	r16, r25
   1e94a:	1a 2f       	mov	r17, r26
   1e94c:	c0 e4       	ldi	r28, 0x40	; 64
   1e94e:	d1 e0       	ldi	r29, 0x01	; 1
   1e950:	0f c0       	rjmp	.+30     	; 0x1e970 <boot_insertBreakPoint+0x50>
   1e952:	c8 82       	st	Y, r12
   1e954:	d9 82       	std	Y+1, r13	; 0x01
   1e956:	82 e0       	ldi	r24, 0x02	; 2
   1e958:	90 e0       	ldi	r25, 0x00	; 0
   1e95a:	a0 e0       	ldi	r26, 0x00	; 0
   1e95c:	b0 e0       	ldi	r27, 0x00	; 0
   1e95e:	e8 0e       	add	r14, r24
   1e960:	f9 1e       	adc	r15, r25
   1e962:	0a 1f       	adc	r16, r26
   1e964:	1b 1f       	adc	r17, r27
   1e966:	22 96       	adiw	r28, 0x02	; 2
   1e968:	92 e0       	ldi	r25, 0x02	; 2
   1e96a:	c0 34       	cpi	r28, 0x40	; 64
   1e96c:	d9 07       	cpc	r29, r25
   1e96e:	59 f0       	breq	.+22     	; 0x1e986 <boot_insertBreakPoint+0x66>
   1e970:	0b bf       	out	0x3b, r16	; 59
   1e972:	f7 01       	movw	r30, r14
   1e974:	c7 90       	elpm	r12, Z+
   1e976:	d6 90       	elpm	r13, Z
   1e978:	0e 94 2d 3a 	call	0x745a	; 0x745a <is_host_lsb>
   1e97c:	89 2b       	or	r24, r25
   1e97e:	49 f7       	brne	.-46     	; 0x1e952 <boot_insertBreakPoint+0x32>
   1e980:	c9 82       	std	Y+1, r12	; 0x01
   1e982:	d8 82       	st	Y, r13
   1e984:	e8 cf       	rjmp	.-48     	; 0x1e956 <boot_insertBreakPoint+0x36>
   1e986:	a7 2d       	mov	r26, r7
   1e988:	b0 e0       	ldi	r27, 0x00	; 0
   1e98a:	a0 5c       	subi	r26, 0xC0	; 192
   1e98c:	be 4f       	sbci	r27, 0xFE	; 254
   1e98e:	20 e0       	ldi	r18, 0x00	; 0
   1e990:	30 e0       	ldi	r19, 0x00	; 0
   1e992:	f5 01       	movw	r30, r10
   1e994:	e2 0f       	add	r30, r18
   1e996:	f3 1f       	adc	r31, r19
   1e998:	8c 91       	ld	r24, X
   1e99a:	80 83       	st	Z, r24
   1e99c:	f9 01       	movw	r30, r18
   1e99e:	e1 5e       	subi	r30, 0xE1	; 225
   1e9a0:	fe 4f       	sbci	r31, 0xFE	; 254
   1e9a2:	80 81       	ld	r24, Z
   1e9a4:	8d 93       	st	X+, r24
   1e9a6:	2f 5f       	subi	r18, 0xFF	; 255
   1e9a8:	3f 4f       	sbci	r19, 0xFF	; 255
   1e9aa:	26 30       	cpi	r18, 0x06	; 6
   1e9ac:	31 05       	cpc	r19, r1
   1e9ae:	89 f7       	brne	.-30     	; 0x1e992 <boot_insertBreakPoint+0x72>
   1e9b0:	80 e4       	ldi	r24, 0x40	; 64
   1e9b2:	91 e0       	ldi	r25, 0x01	; 1
   1e9b4:	b4 01       	movw	r22, r8
   1e9b6:	0e 94 75 f0 	call	0x1e0ea	; 0x1e0ea <reprogram>
   1e9ba:	df 91       	pop	r29
   1e9bc:	cf 91       	pop	r28
   1e9be:	1f 91       	pop	r17
   1e9c0:	0f 91       	pop	r16
   1e9c2:	ff 90       	pop	r15
   1e9c4:	ef 90       	pop	r14
   1e9c6:	df 90       	pop	r13
   1e9c8:	cf 90       	pop	r12
   1e9ca:	bf 90       	pop	r11
   1e9cc:	af 90       	pop	r10
   1e9ce:	9f 90       	pop	r9
   1e9d0:	8f 90       	pop	r8
   1e9d2:	7f 90       	pop	r7
   1e9d4:	08 95       	ret
Disassembly of section .systemcall.1:

0001d400 <getNodeID>:
   1d400:	0e 94 b3 46 	call	0x8d66	; 0x8d66 <getNodeIdTask_Logger>
   1d404:	00 00       	nop
   1d406:	08 95       	ret

0001d408 <setNodeID>:
   1d408:	0e 94 df 46 	call	0x8dbe	; 0x8dbe <setNodeIdTask_Logger>
   1d40c:	00 00       	nop
   1d40e:	08 95       	ret

0001d410 <getRandomNumberSyscall>:
   1d410:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <getRandomTask_Logger>
   1d414:	00 00       	nop
   1d416:	08 95       	ret
Disassembly of section .systemcall.2:

0001d500 <getCurrentThreadAddressSyscall>:
   1d500:	0e 94 37 47 	call	0x8e6e	; 0x8e6e <getCurrentThreadAddress_Logger>
   1d504:	00 00       	nop
   1d506:	08 95       	ret

0001d508 <getCurrentThreadIndex>:
   1d508:	0e 94 63 47 	call	0x8ec6	; 0x8ec6 <getThreadIndexAddress_Logger>
   1d50c:	00 00       	nop
   1d50e:	08 95       	ret

0001d510 <getThreadTableStartSyscall>:
   1d510:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <getThreadTableStart_Logger>
   1d514:	00 00       	nop
   1d516:	08 95       	ret

0001d518 <yieldfunction>:
   1d518:	0e 94 a9 47 	call	0x8f52	; 0x8f52 <thread_yield_logger>
   1d51c:	00 00       	nop
   1d51e:	08 95       	ret

0001d520 <postThreadTask>:
   1d520:	0e 94 c3 47 	call	0x8f86	; 0x8f86 <postNewThreadTask_Logger>
   1d524:	00 00       	nop
   1d526:	08 95       	ret

0001d528 <postThreadTaskNoLog>:
   1d528:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <postNewThreadTask>
   1d52c:	00 00       	nop
   1d52e:	08 95       	ret
Disassembly of section .systemcall.3:

0001d600 <postTaskSysCall>:
   1d600:	0e 94 f8 47 	call	0x8ff0	; 0x8ff0 <postNewTask_Logger>
   1d604:	00 00       	nop
   1d606:	08 95       	ret
Disassembly of section .systemcall.4:

0001d700 <getStackPtr>:
   1d700:	0e 94 12 48 	call	0x9024	; 0x9024 <getStackPtrTask>
   1d704:	00 00       	nop
   1d706:	08 95       	ret
Disassembly of section .systemcall.5:

0001d800 <setRadioFrequency>:
   1d800:	0e 94 3e 48 	call	0x907c	; 0x907c <setRadioFrequencyTask_Logger>
   1d804:	00 00       	nop
   1d806:	08 95       	ret

0001d808 <setRadioChannel>:
   1d808:	0e 94 58 48 	call	0x90b0	; 0x90b0 <setRadioChannelTask_Logger>
   1d80c:	00 00       	nop
   1d80e:	08 95       	ret

0001d810 <setRadioPower>:
   1d810:	0e 94 72 48 	call	0x90e4	; 0x90e4 <setRadioPowerTask_Logger>
   1d814:	00 00       	nop
   1d816:	08 95       	ret

0001d818 <getRadioSendingBuffer>:
   1d818:	0e 94 9e 48 	call	0x913c	; 0x913c <getRadioSendingBuffer_Logger>
   1d81c:	00 00       	nop
   1d81e:	08 95       	ret

0001d820 <invokeSocketRadioSend>:
   1d820:	0e 94 b8 48 	call	0x9170	; 0x9170 <SocketRadioSend_Logger>
   1d824:	00 00       	nop
   1d826:	08 95       	ret

0001d828 <getRadioReceivingBuffer>:
   1d828:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <getReceiverBuffer_Logger>
   1d82c:	00 00       	nop
   1d82e:	08 95       	ret

0001d830 <setCurrentRadioHandle>:
   1d830:	0e 94 fe 48 	call	0x91fc	; 0x91fc <syscall_registerEvent_Logger>
   1d834:	00 00       	nop
   1d836:	08 95       	ret
Disassembly of section .systemcall.6:

0001d900 <redtogglefunction>:
   1d900:	0e 94 18 49 	call	0x9230	; 0x9230 <Leds_redToggle_Logger>
   1d904:	00 00       	nop
   1d906:	08 95       	ret

0001d908 <yellowtogglefunction>:
   1d908:	0e 94 32 49 	call	0x9264	; 0x9264 <Leds_yellowToggle_Logger>
   1d90c:	00 00       	nop
   1d90e:	08 95       	ret

0001d910 <greentogglefunction>:
   1d910:	0e 94 4c 49 	call	0x9298	; 0x9298 <Leds_greenToggle_Logger>
   1d914:	00 00       	nop
   1d916:	08 95       	ret

0001d918 <redonfunction>:
   1d918:	0e 94 66 49 	call	0x92cc	; 0x92cc <Leds_redOn_Logger>
   1d91c:	00 00       	nop
   1d91e:	08 95       	ret

0001d920 <redofffunction>:
   1d920:	0e 94 80 49 	call	0x9300	; 0x9300 <Leds_redOff_Logger>
   1d924:	00 00       	nop
   1d926:	08 95       	ret

0001d928 <yellowonfunction>:
   1d928:	0e 94 9a 49 	call	0x9334	; 0x9334 <Leds_yellowOn_Logger>
   1d92c:	00 00       	nop
   1d92e:	08 95       	ret

0001d930 <yellowofffunction>:
   1d930:	0e 94 b4 49 	call	0x9368	; 0x9368 <Leds_yellowOff_Logger>
   1d934:	00 00       	nop
   1d936:	08 95       	ret

0001d938 <greenonfunction>:
   1d938:	0e 94 ce 49 	call	0x939c	; 0x939c <Leds_greenOn_Logger>
   1d93c:	00 00       	nop
   1d93e:	08 95       	ret

0001d940 <greenofffunction>:
   1d940:	0e 94 e8 49 	call	0x93d0	; 0x93d0 <Leds_greenOff_Logger>
   1d944:	00 00       	nop
   1d946:	08 95       	ret
Disassembly of section .systemcall.7:

0001da00 <ADCLightSysCall>:
   1da00:	0e 94 02 4a 	call	0x9404	; 0x9404 <ADCLight_Logger>
   1da04:	00 00       	nop
   1da06:	08 95       	ret

0001da08 <ADCTempSysCall>:
   1da08:	0e 94 1c 4a 	call	0x9438	; 0x9438 <ADCTemp_Logger>
   1da0c:	00 00       	nop
   1da0e:	08 95       	ret

0001da10 <ADCMagXSysCall>:
   1da10:	0e 94 36 4a 	call	0x946c	; 0x946c <ADCMagX_Logger>
   1da14:	00 00       	nop
   1da16:	08 95       	ret

0001da18 <ADCMagYSysCall>:
   1da18:	0e 94 50 4a 	call	0x94a0	; 0x94a0 <ADCMagY_Logger>
   1da1c:	00 00       	nop
   1da1e:	08 95       	ret

0001da20 <ADCAccXSysCall>:
   1da20:	0e 94 6a 4a 	call	0x94d4	; 0x94d4 <ADCAccX_Logger>
   1da24:	00 00       	nop
   1da26:	08 95       	ret

0001da28 <ADCAccYSysCall>:
   1da28:	0e 94 84 4a 	call	0x9508	; 0x9508 <ADCAccY_Logger>
   1da2c:	00 00       	nop
   1da2e:	08 95       	ret

0001da30 <sounderonfunction>:
   1da30:	0e 94 9e 4a 	call	0x953c	; 0x953c <sounderOn_Logger>
   1da34:	00 00       	nop
   1da36:	08 95       	ret

0001da38 <sounderofffunction>:
   1da38:	0e 94 b8 4a 	call	0x9570	; 0x9570 <sounderOff_Logger>
   1da3c:	00 00       	nop
   1da3e:	08 95       	ret
Disassembly of section .systemcall.8:

0001db00 <getCurrentEEPROMHandleAddress>:
   1db00:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <getEEPROMHandleInfo_Logger>
   1db04:	00 00       	nop
   1db06:	08 95       	ret

0001db08 <readFromEEPROM>:
   1db08:	0e 94 07 4b 	call	0x960e	; 0x960e <readEEPROMTask_Logger>
   1db0c:	00 00       	nop
   1db0e:	08 95       	ret

0001db10 <writeToEEPROM>:
   1db10:	0e 94 2a 4b 	call	0x9654	; 0x9654 <writeEEPROMTask_Logger>
   1db14:	00 00       	nop
   1db16:	08 95       	ret
Disassembly of section .systemcall.9:

0001dc00 <getFilePathAddr>:
   1dc00:	0e 94 56 4b 	call	0x96ac	; 0x96ac <getFilePathAddress_Logger>
   1dc04:	00 00       	nop
   1dc06:	08 95       	ret

0001dc08 <getFileModeAddr>:
   1dc08:	0e 94 82 4b 	call	0x9704	; 0x9704 <getFileModeAddress_Logger>
   1dc0c:	00 00       	nop
   1dc0e:	08 95       	ret

0001dc10 <openFileSysCall>:
   1dc10:	0e 94 9c 4b 	call	0x9738	; 0x9738 <openFileTask_Logger>
   1dc14:	00 00       	nop
   1dc16:	08 95       	ret

0001dc18 <closeFileSysCall>:
   1dc18:	0e 94 b6 4b 	call	0x976c	; 0x976c <closeFileTask_Logger>
   1dc1c:	00 00       	nop
   1dc1e:	08 95       	ret

0001dc20 <readFileSysCall>:
   1dc20:	0e 94 d0 4b 	call	0x97a0	; 0x97a0 <readFileTask_Logger>
   1dc24:	00 00       	nop
   1dc26:	08 95       	ret

0001dc28 <writeFileSysCall>:
   1dc28:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <writeFileTask_Logger>
   1dc2c:	00 00       	nop
   1dc2e:	08 95       	ret

0001dc30 <seekFileSysCall>:
   1dc30:	0e 94 04 4c 	call	0x9808	; 0x9808 <seekFileTask_Logger>

/**\ingroup syscall 
Change file opener handle address. 
*/
void seekFileSysCall() __attribute__ ((section(".systemcall.9")))
    __attribute__ ((naked));
void seekFileSysCall()
{
#ifdef TRACE_ENABLE_SYSCALLEVENT
#ifdef TRACE_ENABLE_SYSCALL_SEEKFILESYSCALL
    seekFileTask_Logger();
#endif
#else
    seekFileTask();
#endif
    asm volatile ("nop"::);
   1dc34:	00 00       	nop
    asm volatile ("ret"::);
   1dc36:	08 95       	ret
