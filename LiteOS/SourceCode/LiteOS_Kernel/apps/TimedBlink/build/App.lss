
App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ec  00015e00  00015e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800af0  00800af0  00000260  2**0
                  ALLOC
  2 .stab         00000408  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000084  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000001b  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e96  00000000  00000000  00000727  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001fd  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021b  00000000  00000000  000017ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  000019d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fa  00000000  00000000  00001a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000018  00000000  00000000  00001d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00015e00 <__vectors>:
   15e00:	0c 94 46 af 	jmp	0x15e8c
   15e04:	0c 94 63 af 	jmp	0x15ec6
   15e08:	0c 94 63 af 	jmp	0x15ec6
   15e0c:	0c 94 63 af 	jmp	0x15ec6
   15e10:	0c 94 63 af 	jmp	0x15ec6
   15e14:	0c 94 63 af 	jmp	0x15ec6
   15e18:	0c 94 63 af 	jmp	0x15ec6
   15e1c:	0c 94 63 af 	jmp	0x15ec6
   15e20:	0c 94 63 af 	jmp	0x15ec6
   15e24:	0c 94 63 af 	jmp	0x15ec6
   15e28:	0c 94 63 af 	jmp	0x15ec6
   15e2c:	0c 94 63 af 	jmp	0x15ec6
   15e30:	0c 94 63 af 	jmp	0x15ec6
   15e34:	0c 94 63 af 	jmp	0x15ec6
   15e38:	0c 94 63 af 	jmp	0x15ec6
   15e3c:	0c 94 63 af 	jmp	0x15ec6
   15e40:	0c 94 63 af 	jmp	0x15ec6
   15e44:	0c 94 63 af 	jmp	0x15ec6
   15e48:	0c 94 63 af 	jmp	0x15ec6
   15e4c:	0c 94 63 af 	jmp	0x15ec6
   15e50:	0c 94 63 af 	jmp	0x15ec6
   15e54:	0c 94 63 af 	jmp	0x15ec6
   15e58:	0c 94 63 af 	jmp	0x15ec6
   15e5c:	0c 94 63 af 	jmp	0x15ec6
   15e60:	0c 94 63 af 	jmp	0x15ec6
   15e64:	0c 94 63 af 	jmp	0x15ec6
   15e68:	0c 94 63 af 	jmp	0x15ec6
   15e6c:	0c 94 63 af 	jmp	0x15ec6
   15e70:	0c 94 63 af 	jmp	0x15ec6
   15e74:	0c 94 63 af 	jmp	0x15ec6
   15e78:	0c 94 63 af 	jmp	0x15ec6
   15e7c:	0c 94 63 af 	jmp	0x15ec6
   15e80:	0c 94 63 af 	jmp	0x15ec6
   15e84:	0c 94 63 af 	jmp	0x15ec6
   15e88:	0c 94 63 af 	jmp	0x15ec6

00015e8c <__ctors_end>:
   15e8c:	11 24       	eor	r1, r1
   15e8e:	1f be       	out	0x3f, r1	; 63
   15e90:	c0 ef       	ldi	r28, 0xF0	; 240
   15e92:	db e0       	ldi	r29, 0x0B	; 11
   15e94:	de bf       	out	0x3e, r29	; 62
   15e96:	cd bf       	out	0x3d, r28	; 61

00015e98 <__do_copy_data>:
   15e98:	1a e0       	ldi	r17, 0x0A	; 10
   15e9a:	a0 ef       	ldi	r26, 0xF0	; 240
   15e9c:	ba e0       	ldi	r27, 0x0A	; 10
   15e9e:	ec ee       	ldi	r30, 0xEC	; 236
   15ea0:	ff e5       	ldi	r31, 0x5F	; 95
   15ea2:	01 e0       	ldi	r16, 0x01	; 1
   15ea4:	0b bf       	out	0x3b, r16	; 59
   15ea6:	02 c0       	rjmp	.+4      	; 0x15eac
   15ea8:	07 90       	elpm	r0, Z+
   15eaa:	0d 92       	st	X+, r0
   15eac:	a0 3f       	cpi	r26, 0xF0	; 240
   15eae:	b1 07       	cpc	r27, r17
   15eb0:	d9 f7       	brne	.-10     	; 0x15ea8

00015eb2 <__do_clear_bss>:
   15eb2:	1a e0       	ldi	r17, 0x0A	; 10
   15eb4:	a0 ef       	ldi	r26, 0xF0	; 240
   15eb6:	ba e0       	ldi	r27, 0x0A	; 10
   15eb8:	01 c0       	rjmp	.+2      	; 0x15ebc

00015eba <.do_clear_bss_loop>:
   15eba:	1d 92       	st	X+, r1

00015ebc <.do_clear_bss_start>:
   15ebc:	a4 3f       	cpi	r26, 0xF4	; 244
   15ebe:	b1 07       	cpc	r27, r17
   15ec0:	e1 f7       	brne	.-8      	; 0x15eba
   15ec2:	0c 94 a9 af 	jmp	0x15f52

00015ec6 <__bad_interrupt>:
   15ec6:	0c 94 00 af 	jmp	0x15e00

00015eca <timer>:


void timer()
{
	PUSH_GPR();
   15eca:	0f 92       	push	r0
   15ecc:	1f 92       	push	r1
   15ece:	2f 92       	push	r2
   15ed0:	3f 92       	push	r3
   15ed2:	4f 92       	push	r4
   15ed4:	5f 92       	push	r5
   15ed6:	6f 92       	push	r6
   15ed8:	7f 92       	push	r7
   15eda:	8f 92       	push	r8
   15edc:	9f 92       	push	r9
   15ede:	af 92       	push	r10
   15ee0:	bf 92       	push	r11
   15ee2:	cf 92       	push	r12
   15ee4:	df 92       	push	r13
   15ee6:	ef 92       	push	r14
   15ee8:	ff 92       	push	r15
   15eea:	0f 93       	push	r16
   15eec:	1f 93       	push	r17
   15eee:	2f 93       	push	r18
   15ef0:	3f 93       	push	r19
   15ef2:	4f 93       	push	r20
   15ef4:	5f 93       	push	r21
   15ef6:	6f 93       	push	r22
   15ef8:	7f 93       	push	r23
   15efa:	8f 93       	push	r24
   15efc:	9f 93       	push	r25
   15efe:	af 93       	push	r26
   15f00:	bf 93       	push	r27
   15f02:	cf 93       	push	r28
   15f04:	df 93       	push	r29
   15f06:	ef 93       	push	r30
   15f08:	ff 93       	push	r31

void greenToggle()
{
 void (*greenfp)() = (void (*)(void))GREEN_LED_TOGGLE_FUNCTION; 
 greenfp();                              
   15f0a:	e4 e0       	ldi	r30, 0x04	; 4
   15f0c:	fa ee       	ldi	r31, 0xEA	; 234
   15f0e:	09 95       	icall
	greenToggle();
	POP_GPR();
   15f10:	ff 91       	pop	r31
   15f12:	ef 91       	pop	r30
   15f14:	df 91       	pop	r29
   15f16:	cf 91       	pop	r28
   15f18:	bf 91       	pop	r27
   15f1a:	af 91       	pop	r26
   15f1c:	9f 91       	pop	r25
   15f1e:	8f 91       	pop	r24
   15f20:	7f 91       	pop	r23
   15f22:	6f 91       	pop	r22
   15f24:	5f 91       	pop	r21
   15f26:	4f 91       	pop	r20
   15f28:	3f 91       	pop	r19
   15f2a:	2f 91       	pop	r18
   15f2c:	1f 91       	pop	r17
   15f2e:	0f 91       	pop	r16
   15f30:	ff 90       	pop	r15
   15f32:	ef 90       	pop	r14
   15f34:	df 90       	pop	r13
   15f36:	cf 90       	pop	r12
   15f38:	bf 90       	pop	r11
   15f3a:	af 90       	pop	r10
   15f3c:	9f 90       	pop	r9
   15f3e:	8f 90       	pop	r8
   15f40:	7f 90       	pop	r7
   15f42:	6f 90       	pop	r6
   15f44:	5f 90       	pop	r5
   15f46:	4f 90       	pop	r4
   15f48:	3f 90       	pop	r3
   15f4a:	2f 90       	pop	r2
   15f4c:	1f 90       	pop	r1
   15f4e:	0f 90       	pop	r0
   15f50:	08 95       	ret

00015f52 <main>:
}

int main()
{
	__asm__ __volatile__("sei" ::);
   15f52:	78 94       	sei
 	 uint16_t type16; 

   type16 = type; 
   
   asm volatile("push r18" "\n\t"
   15f54:	2f 93       	push	r18
   15f56:	3f 93       	push	r19
   15f58:	4f 93       	push	r20
   15f5a:	5f 93       	push	r21
   15f5c:	6f 93       	push	r22
   15f5e:	7f 93       	push	r23
                "push r19" "\n\t"
								"push r20" "\n\t"
								"push r21" "\n\t"
								"push r22" "\n\t"
								"push r23" "\n\t"								
                ::);
   
   asm volatile(" mov r18, %A0" "\n\t"
   15f60:	82 e3       	ldi	r24, 0x32	; 50
   15f62:	90 e0       	ldi	r25, 0x00	; 0
   15f64:	28 2f       	mov	r18, r24
   15f66:	39 2f       	mov	r19, r25
	               "mov r19, %B0" "\n\t"
				 :
				 :"r" (period)
                );



   asm volatile(" mov r20, %A0" "\n\t"
   15f68:	80 e0       	ldi	r24, 0x00	; 0
   15f6a:	90 e0       	ldi	r25, 0x00	; 0
   15f6c:	48 2f       	mov	r20, r24
   15f6e:	59 2f       	mov	r21, r25
	               "mov r21, %B0" "\n\t"
				 :
				 :"r" (type16)
                );


   asm volatile(" mov r22, %A0" "\n\t"
   15f70:	85 e6       	ldi	r24, 0x65	; 101
   15f72:	9f ea       	ldi	r25, 0xAF	; 175
   15f74:	68 2f       	mov	r22, r24
   15f76:	79 2f       	mov	r23, r25
	              " mov r23, %B0" "\n\t"
				 :
				 :"r" (callback)
                );

  fp(); 
   15f78:	e4 e0       	ldi	r30, 0x04	; 4
   15f7a:	fb ee       	ldi	r31, 0xEB	; 235
   15f7c:	09 95       	icall

  asm volatile("pop r23" "\n\t"
   15f7e:	7f 91       	pop	r23
   15f80:	6f 91       	pop	r22
	             "pop r22" "\n\t"
	              ::);

  asm volatile("pop r21" "\n\t"
   15f82:	5f 91       	pop	r21
   15f84:	4f 91       	pop	r20
	             "pop r20" "\n\t"
	              ::);
	              	
	asm volatile("pop r19" "\n\t"
   15f86:	3f 91       	pop	r19
   15f88:	2f 91       	pop	r18



}

void redToggle()
{
                          
  void (*redfp)() = (void (*)(void))RED_LED_TOGGLE_FUNCTION; 
  redfp();    
   15f8a:	e8 e0       	ldi	r30, 0x08	; 8
   15f8c:	fa ee       	ldi	r31, 0xEA	; 234
   15f8e:	09 95       	icall
   15f90:	4f 93       	push	r20
   15f92:	5f 93       	push	r21
   15f94:	ec e0       	ldi	r30, 0x0C	; 12
   15f96:	fa ee       	ldi	r31, 0xEA	; 234
   15f98:	09 95       	icall
   15f9a:	a4 2f       	mov	r26, r20
   15f9c:	b5 2f       	mov	r27, r21
   15f9e:	5f 91       	pop	r21
   15fa0:	4f 91       	pop	r20
   15fa2:	ed 91       	ld	r30, X+
   15fa4:	fc 91       	ld	r31, X
   15fa6:	11 97       	sbiw	r26, 0x01	; 1
   15fa8:	84 e0       	ldi	r24, 0x04	; 4
   15faa:	82 83       	std	Z+2, r24	; 0x02
   15fac:	ed 91       	ld	r30, X+
   15fae:	fc 91       	ld	r31, X
   15fb0:	84 e6       	ldi	r24, 0x64	; 100
   15fb2:	90 e0       	ldi	r25, 0x00	; 0
   15fb4:	94 8f       	std	Z+28, r25	; 0x1c
   15fb6:	83 8f       	std	Z+27, r24	; 0x1b
   15fb8:	e0 e0       	ldi	r30, 0x00	; 0
   15fba:	fa ee       	ldi	r31, 0xEA	; 234
   15fbc:	09 95       	icall
   15fbe:	e5 cf       	rjmp	.-54     	; 0x15f8a

00015fc0 <syscall_postThreadTask.1400>:
   15fc0:	e8 e6       	ldi	r30, 0x68	; 104
   15fc2:	fa ee       	ldi	r31, 0xEA	; 234
   15fc4:	09 95       	icall
   15fc6:	08 95       	ret

00015fc8 <wakeupMe.3397>:
//wakeup the current thread once an incoming packet arrives

void wakeupMe()
{
  mythread->state = STATE_ACTIVE;
   15fc8:	e0 91 f0 0a 	lds	r30, 0x0AF0
   15fcc:	f0 91 f1 0a 	lds	r31, 0x0AF1
   15fd0:	82 e0       	ldi	r24, 0x02	; 2
   15fd2:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   15fd4:	0e 94 e0 af 	call	0x15fc0
   15fd8:	08 95       	ret

00015fda <wakeupMeSerial.3704>:
//wakeup the current thread once an incoming packet arrives

void wakeupMeSerial()
{
  mythreadserial->state = STATE_ACTIVE;
   15fda:	e0 91 f2 0a 	lds	r30, 0x0AF2
   15fde:	f0 91 f3 0a 	lds	r31, 0x0AF3
   15fe2:	82 e0       	ldi	r24, 0x02	; 2
   15fe4:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   15fe6:	0e 94 e0 af 	call	0x15fc0
   15fea:	08 95       	ret
