
App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000406  00019000  00019000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000040  00800b54  00800b54  0000047a  2**0
                  ALLOC
  2 .stab         00000408  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000084  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000001b  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000143f  00000000  00000000  00000943  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000236  00000000  00000000  00001d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070a  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000026c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000429  00000000  00000000  00002712  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c0  00000000  00000000  00002b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00019000 <__vectors>:
   19000:	0c 94 46 c8 	jmp	0x1908c
   19004:	0c 94 63 c8 	jmp	0x190c6
   19008:	0c 94 63 c8 	jmp	0x190c6
   1900c:	0c 94 63 c8 	jmp	0x190c6
   19010:	0c 94 63 c8 	jmp	0x190c6
   19014:	0c 94 63 c8 	jmp	0x190c6
   19018:	0c 94 63 c8 	jmp	0x190c6
   1901c:	0c 94 63 c8 	jmp	0x190c6
   19020:	0c 94 63 c8 	jmp	0x190c6
   19024:	0c 94 63 c8 	jmp	0x190c6
   19028:	0c 94 63 c8 	jmp	0x190c6
   1902c:	0c 94 63 c8 	jmp	0x190c6
   19030:	0c 94 63 c8 	jmp	0x190c6
   19034:	0c 94 63 c8 	jmp	0x190c6
   19038:	0c 94 63 c8 	jmp	0x190c6
   1903c:	0c 94 63 c8 	jmp	0x190c6
   19040:	0c 94 63 c8 	jmp	0x190c6
   19044:	0c 94 63 c8 	jmp	0x190c6
   19048:	0c 94 63 c8 	jmp	0x190c6
   1904c:	0c 94 63 c8 	jmp	0x190c6
   19050:	0c 94 63 c8 	jmp	0x190c6
   19054:	0c 94 63 c8 	jmp	0x190c6
   19058:	0c 94 63 c8 	jmp	0x190c6
   1905c:	0c 94 63 c8 	jmp	0x190c6
   19060:	0c 94 63 c8 	jmp	0x190c6
   19064:	0c 94 63 c8 	jmp	0x190c6
   19068:	0c 94 63 c8 	jmp	0x190c6
   1906c:	0c 94 63 c8 	jmp	0x190c6
   19070:	0c 94 63 c8 	jmp	0x190c6
   19074:	0c 94 63 c8 	jmp	0x190c6
   19078:	0c 94 63 c8 	jmp	0x190c6
   1907c:	0c 94 63 c8 	jmp	0x190c6
   19080:	0c 94 63 c8 	jmp	0x190c6
   19084:	0c 94 63 c8 	jmp	0x190c6
   19088:	0c 94 63 c8 	jmp	0x190c6

0001908c <__ctors_end>:
   1908c:	11 24       	eor	r1, r1
   1908e:	1f be       	out	0x3f, r1	; 63
   19090:	c4 ee       	ldi	r28, 0xE4	; 228
   19092:	dc e0       	ldi	r29, 0x0C	; 12
   19094:	de bf       	out	0x3e, r29	; 62
   19096:	cd bf       	out	0x3d, r28	; 61

00019098 <__do_copy_data>:
   19098:	1b e0       	ldi	r17, 0x0B	; 11
   1909a:	a4 e5       	ldi	r26, 0x54	; 84
   1909c:	bb e0       	ldi	r27, 0x0B	; 11
   1909e:	e6 e0       	ldi	r30, 0x06	; 6
   190a0:	f4 e9       	ldi	r31, 0x94	; 148
   190a2:	01 e0       	ldi	r16, 0x01	; 1
   190a4:	0b bf       	out	0x3b, r16	; 59
   190a6:	02 c0       	rjmp	.+4      	; 0x190ac
   190a8:	07 90       	elpm	r0, Z+
   190aa:	0d 92       	st	X+, r0
   190ac:	a4 35       	cpi	r26, 0x54	; 84
   190ae:	b1 07       	cpc	r27, r17
   190b0:	d9 f7       	brne	.-10     	; 0x190a8

000190b2 <__do_clear_bss>:
   190b2:	1b e0       	ldi	r17, 0x0B	; 11
   190b4:	a4 e5       	ldi	r26, 0x54	; 84
   190b6:	bb e0       	ldi	r27, 0x0B	; 11
   190b8:	01 c0       	rjmp	.+2      	; 0x190bc

000190ba <.do_clear_bss_loop>:
   190ba:	1d 92       	st	X+, r1

000190bc <.do_clear_bss_start>:
   190bc:	a4 39       	cpi	r26, 0x94	; 148
   190be:	b1 07       	cpc	r27, r17
   190c0:	e1 f7       	brne	.-8      	; 0x190ba
   190c2:	0c 94 05 c9 	jmp	0x1920a

000190c6 <__bad_interrupt>:
   190c6:	0c 94 00 c8 	jmp	0x19000

000190ca <tracingcontroluser>:
	  uint16_t *sp;



    asm volatile (
   190ca:	ed b7       	in	r30, 0x3d	; 61
   190cc:	fe b7       	in	r31, 0x3e	; 62
    "in %A0, 0x3d" "\n\t"
    "in %B0, 0x3e" "\n\t"
    : "=r" (SPvalue)
    :
    );
   
       
    SPvalue = SPvalue+5+4; 
    sp = (uint16_t*)SPvalue; 
    regsource = (uint16_t)*(uint16_t*)sp;
   190ce:	81 85       	ldd	r24, Z+9	; 0x09
   190d0:	92 85       	ldd	r25, Z+10	; 0x0a
   190d2:	90 93 5f 0b 	sts	0x0B5F, r25
   190d6:	80 93 5e 0b 	sts	0x0B5E, r24
    //reghigh = *(sp+1); 
    SPvalue = SPvalue-7; 
    
     asm volatile (
   190da:	32 96       	adiw	r30, 0x02	; 2
   190dc:	ed bf       	out	0x3d, r30	; 61
   190de:	fe bf       	out	0x3e, r31	; 62
    "out 0x3d, %A0" "\n\t"
    "out 0x3e, %B0" "\n\t"
    :: "r" (SPvalue)
    
    );
    
    //APPJUMPSTART$$$$$
if (regsource == APPTRACEPOINT0COMPARE)
   190e0:	80 91 5e 0b 	lds	r24, 0x0B5E
   190e4:	90 91 5f 0b 	lds	r25, 0x0B5F
   190e8:	84 5b       	subi	r24, 0xB4	; 180
   190ea:	9a 46       	sbci	r25, 0x6A	; 106
   190ec:	09 f4       	brne	.+2      	; 0x190f0
   190ee:	4b c0       	rjmp	.+150    	; 0x19186

{

__asm__ __volatile__("pop r29" ::);
__asm__ __volatile__("pop r28" ::);
__asm__ __volatile__("pop r25" ::);
__asm__ __volatile__("pop r24" ::);

__asm__ __volatile__("pop r31" ::);
__asm__ __volatile__("pop r30" ::);
__asm__ __volatile__("pop r31" ::);
__asm__ __volatile__("pop r30" ::);

__asm__ __volatile__("pop r31" ::);
__asm__ __volatile__("pop r30" ::);
	
__asm__ __volatile__("push r30" ::);
__asm__ __volatile__("push r31" ::);	
__asm__ __volatile__("push r30" ::);
__asm__ __volatile__("push r31" ::);
__asm__ __volatile__("push r25" ::);
__asm__ __volatile__("push r24" ::);
__asm__ __volatile__("push r29" ::);
__asm__ __volatile__("push r28" ::);

 asm volatile (
    "in %A0, 0x3d" "\n\t"
    "in %B0, 0x3e" "\n\t"
    : "=r" (canaryaddr)
    :
    );
   
   
     
  canaryaddr = canaryaddr + 7; 
  (*(uint16_t*)canaryaddr) = 0x1234;
  
__asm__ __volatile__("pop r28" ::);
__asm__ __volatile__("pop r29" ::);
__asm__ __volatile__("pop r24" ::);
__asm__ __volatile__("pop r25" ::); 
__asm__ __volatile__("pop r31" ::);
__asm__ __volatile__("pop r30" ::);
    
__asm__ __volatile__("push r28"::);

__asm__ __volatile__("push r29"::);

__asm__ __volatile__("in r28, 0x3d"::);

__asm__ __volatile__("in r29, 0x3e"::);

__asm__ __volatile__("sbiw r28, 0x0a"::);

__asm__ __volatile__("in r0, 0x3f"::);

__asm__ __volatile__("cli"::);

}

else if (regsource == APPTRACEPOINT1COMPARE)
   190f0:	80 91 5e 0b 	lds	r24, 0x0B5E
   190f4:	90 91 5f 0b 	lds	r25, 0x0B5F
   190f8:	84 5b       	subi	r24, 0xB4	; 180
   190fa:	95 47       	sbci	r25, 0x75	; 117
   190fc:	09 f0       	breq	.+2      	; 0x19100
   190fe:	68 c0       	rjmp	.+208    	; 0x191d0

{

__asm__ __volatile__("pop r29" ::);
   19100:	df 91       	pop	r29
__asm__ __volatile__("pop r28" ::);
   19102:	cf 91       	pop	r28
__asm__ __volatile__("pop r25" ::);
   19104:	9f 91       	pop	r25
__asm__ __volatile__("pop r24" ::);
   19106:	8f 91       	pop	r24

__asm__ __volatile__("pop r31" ::);
   19108:	ff 91       	pop	r31
__asm__ __volatile__("pop r30" ::);
   1910a:	ef 91       	pop	r30
__asm__ __volatile__("pop r31" ::);
   1910c:	ff 91       	pop	r31
__asm__ __volatile__("pop r30" ::);
   1910e:	ef 91       	pop	r30

__asm__ __volatile__("pop r31" ::);
   19110:	ff 91       	pop	r31
__asm__ __volatile__("pop r30" ::);
   19112:	ef 91       	pop	r30

__asm__ __volatile__("in r0, 0x3f"::);
   19114:	0f b6       	in	r0, 0x3f	; 63

__asm__ __volatile__("cli"::);
   19116:	f8 94       	cli

__asm__ __volatile__("out 0x3e, r29"::);
   19118:	de bf       	out	0x3e, r29	; 62

__asm__ __volatile__("out 0x3f, r0"::);
   1911a:	0f be       	out	0x3f, r0	; 63

__asm__ __volatile__("out 0x3d, r28"::);
   1911c:	cd bf       	out	0x3d, r28	; 61

__asm__ __volatile__("pop r29"::);
   1911e:	df 91       	pop	r29

__asm__ __volatile__("pop r28"::);
   19120:	cf 91       	pop	r28


__asm__ __volatile__("push r31" ::);
   19122:	ff 93       	push	r31
__asm__ __volatile__("push r30" ::);	
   19124:	ef 93       	push	r30
__asm__ __volatile__("push r29" ::);
   19126:	df 93       	push	r29
__asm__ __volatile__("push r28" ::);
   19128:	cf 93       	push	r28
__asm__ __volatile__("push r25" ::);
   1912a:	9f 93       	push	r25
__asm__ __volatile__("push r24" ::);
   1912c:	8f 93       	push	r24
__asm__ __volatile__("push r29" ::);
   1912e:	df 93       	push	r29
__asm__ __volatile__("push r28" ::);
   19130:	cf 93       	push	r28

 asm volatile (
   19132:	ed b7       	in	r30, 0x3d	; 61
   19134:	fe b7       	in	r31, 0x3e	; 62
    "in %A0, 0x3d" "\n\t"
    "in %B0, 0x3e" "\n\t"
    : "=r" (canaryaddr)
    :
    );
   
   
     
  canaryaddr = canaryaddr + 9; 
  popcanary = *(uint16_t*)canaryaddr;
   19136:	81 85       	ldd	r24, Z+9	; 0x09
   19138:	92 85       	ldd	r25, Z+10	; 0x0a
   1913a:	90 93 66 0b 	sts	0x0B66, r25
   1913e:	80 93 65 0b 	sts	0x0B65, r24
  if (popcanary != 0x1234)
   19142:	84 53       	subi	r24, 0x34	; 52
   19144:	92 41       	sbci	r25, 0x12	; 18
   19146:	31 f0       	breq	.+12     	; 0x19154
  	 {
        	
__asm__ __volatile__("push r29" ::);
   19148:	df 93       	push	r29
__asm__ __volatile__("push r28" ::);
   1914a:	cf 93       	push	r28
__asm__ __volatile__("push r25" ::);
   1914c:	9f 93       	push	r25
__asm__ __volatile__("push r24" ::);
   1914e:	8f 93       	push	r24
__asm__ __volatile__("push r29" ::);
   19150:	df 93       	push	r29
__asm__ __volatile__("push r28" ::); 	
   19152:	cf 93       	push	r28
  	 }
  
  canaryaddr = canaryaddr+1;

  *(uint8_t*)canaryaddr =*(uint8_t*)(canaryaddr-2) ;
   19154:	80 85       	ldd	r24, Z+8	; 0x08
   19156:	82 87       	std	Z+10, r24	; 0x0a
  canaryaddr = canaryaddr -1; 
  *(uint8_t*)canaryaddr =*(uint8_t*)(canaryaddr-2) ;
   19158:	87 81       	ldd	r24, Z+7	; 0x07
   1915a:	81 87       	std	Z+9, r24	; 0x09
  canaryaddr = canaryaddr -1; 
  *(uint8_t*)canaryaddr =*(uint8_t*)(canaryaddr-2) ;
   1915c:	86 81       	ldd	r24, Z+6	; 0x06
   1915e:	80 87       	std	Z+8, r24	; 0x08
    canaryaddr = canaryaddr -1; 
  *(uint8_t*)canaryaddr =*(uint8_t*)(canaryaddr-2) ;
   19160:	85 81       	ldd	r24, Z+5	; 0x05
   19162:	87 83       	std	Z+7, r24	; 0x07
    canaryaddr = canaryaddr -1; 
  *(uint8_t*)canaryaddr =*(uint8_t*)(canaryaddr-2) ;
   19164:	84 81       	ldd	r24, Z+4	; 0x04
   19166:	86 83       	std	Z+6, r24	; 0x06
    canaryaddr = canaryaddr -1; 
  *(uint8_t*)canaryaddr =*(uint8_t*)(canaryaddr-2) ;
   19168:	83 81       	ldd	r24, Z+3	; 0x03
   1916a:	85 83       	std	Z+5, r24	; 0x05
    canaryaddr = canaryaddr -1; 
  *(uint8_t*)canaryaddr =*(uint8_t*)(canaryaddr-2) ;  
   1916c:	82 81       	ldd	r24, Z+2	; 0x02
   1916e:	84 83       	std	Z+4, r24	; 0x04
    canaryaddr = canaryaddr -1; 
  *(uint8_t*)canaryaddr =*(uint8_t*)(canaryaddr-2) ;
   19170:	81 81       	ldd	r24, Z+1	; 0x01
   19172:	83 83       	std	Z+3, r24	; 0x03
    	 
  __asm__ __volatile__("pop r28" ::);
   19174:	cf 91       	pop	r28
__asm__ __volatile__("pop r29" ::);
   19176:	df 91       	pop	r29
__asm__ __volatile__("pop r24" ::);
   19178:	8f 91       	pop	r24
__asm__ __volatile__("pop r25" ::);
   1917a:	9f 91       	pop	r25
__asm__ __volatile__("pop r28" ::);
   1917c:	cf 91       	pop	r28
__asm__ __volatile__("pop r29" ::);
   1917e:	df 91       	pop	r29
__asm__ __volatile__("pop r30" ::);
   19180:	ef 91       	pop	r30
__asm__ __volatile__("pop r31" ::);	
   19182:	ff 91       	pop	r31
   19184:	25 c0       	rjmp	.+74     	; 0x191d0
   19186:	df 91       	pop	r29
   19188:	cf 91       	pop	r28
   1918a:	9f 91       	pop	r25
   1918c:	8f 91       	pop	r24
   1918e:	ff 91       	pop	r31
   19190:	ef 91       	pop	r30
   19192:	ff 91       	pop	r31
   19194:	ef 91       	pop	r30
   19196:	ff 91       	pop	r31
   19198:	ef 91       	pop	r30
   1919a:	ef 93       	push	r30
   1919c:	ff 93       	push	r31
   1919e:	ef 93       	push	r30
   191a0:	ff 93       	push	r31
   191a2:	9f 93       	push	r25
   191a4:	8f 93       	push	r24
   191a6:	df 93       	push	r29
   191a8:	cf 93       	push	r28
   191aa:	ed b7       	in	r30, 0x3d	; 61
   191ac:	fe b7       	in	r31, 0x3e	; 62
   191ae:	84 e3       	ldi	r24, 0x34	; 52
   191b0:	92 e1       	ldi	r25, 0x12	; 18
   191b2:	90 87       	std	Z+8, r25	; 0x08
   191b4:	87 83       	std	Z+7, r24	; 0x07
   191b6:	cf 91       	pop	r28
   191b8:	df 91       	pop	r29
   191ba:	8f 91       	pop	r24
   191bc:	9f 91       	pop	r25
   191be:	ff 91       	pop	r31
   191c0:	ef 91       	pop	r30
   191c2:	cf 93       	push	r28
   191c4:	df 93       	push	r29
   191c6:	cd b7       	in	r28, 0x3d	; 61
   191c8:	de b7       	in	r29, 0x3e	; 62
   191ca:	2a 97       	sbiw	r28, 0x0a	; 10
   191cc:	0f b6       	in	r0, 0x3f	; 63
   191ce:	f8 94       	cli

}

    
    
    
    
	  __asm__ __volatile__("push r30" ::); 	
   191d0:	ef 93       	push	r30
	  __asm__ __volatile__("push r31" ::); 
   191d2:	ff 93       	push	r31
	  	
    
   asm volatile(" mov r31, %A0" "\n\t"
   191d4:	80 91 5e 0b 	lds	r24, 0x0B5E
   191d8:	90 91 5f 0b 	lds	r25, 0x0B5F
   191dc:	f8 2f       	mov	r31, r24
   191de:	e9 2f       	mov	r30, r25
	              " mov r30, %B0" "\n\t"
				 :
				 :"r" (regsource)
                );
    
  
   __asm__ __volatile__("ijmp" ::); 
   191e0:	09 94       	ijmp

000191e2 <wakeupMeSerial.3931>:
//wakeup the current thread once an incoming packet arrives

void wakeupMeSerial()
{
  mythreadserial->state = STATE_ACTIVE;
   191e2:	e0 91 92 0b 	lds	r30, 0x0B92
   191e6:	f0 91 93 0b 	lds	r31, 0x0B93
   191ea:	82 e0       	ldi	r24, 0x02	; 2
   191ec:	82 83       	std	Z+2, r24	; 0x02

void syscall_postThreadTask()
{
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK; 
 postthreadfp();                              
   191ee:	e8 e6       	ldi	r30, 0x68	; 104
   191f0:	fa ee       	ldi	r31, 0xEA	; 234
   191f2:	09 95       	icall
   191f4:	08 95       	ret

000191f6 <wakeupMe.3628>:
//wakeup the current thread once an incoming packet arrives

void wakeupMe()
{
  mythread->state = STATE_ACTIVE;
   191f6:	e0 91 90 0b 	lds	r30, 0x0B90
   191fa:	f0 91 91 0b 	lds	r31, 0x0B91
   191fe:	82 e0       	ldi	r24, 0x02	; 2
   19200:	82 83       	std	Z+2, r24	; 0x02
   19202:	e8 e6       	ldi	r30, 0x68	; 104
   19204:	fa ee       	ldi	r31, 0xEA	; 234
   19206:	09 95       	icall
   19208:	08 95       	ret

0001920a <main>:
    
   
}


 
//////////////////////////////////////////////////////////////////////////////////////
/// Clean up task for the thread
//////////////////////////////////////////////////////////////////////////////////////


//The trace arrays should be application specific here
void cleanUpTraceFunction() {

//CLEANTRACESTART$$$$$                     


{
uint32_t tracepointlocation = ((uint32_t)APPTRACEPOINT0*2);

pagenum = tracepointlocation/2/128;

pageoffset = tracepointlocation%256;

removeUserTracePoint( pagenum,  pageoffset , tracepatch0);

}




{
uint32_t tracepointlocation = ((uint32_t)APPTRACEPOINT1*2);

pagenum = tracepointlocation/2/128;

pageoffset = tracepointlocation%256;

removeUserTracePoint( pagenum,  pageoffset , tracepatch1);

}


//CLEANTRACEEND$$$$$
	
}




int main()
{ 
   1920a:	1f 93       	push	r17


  
  __asm__ __volatile__("sei" ::); 
   1920c:	78 94       	sei
 
 
 writetask = 0; 
   1920e:	10 92 64 0b 	sts	0x0B64, r1
 stacklevel = 0; 
   19212:	10 92 57 0b 	sts	0x0B57, r1
 currentindex = 0; 
   19216:	10 92 5b 0b 	sts	0x0B5B, r1
   1921a:	10 92 5a 0b 	sts	0x0B5A, r1

void enableTracing()
{    
   void (*getaddrfp)(void) = (void (*)(void))ENABLE_TRACING_SYSCALL;
   getaddrfp();
   1921e:	e4 ee       	ldi	r30, 0xE4	; 228
   19220:	fa ee       	ldi	r31, 0xEA	; 234
   19222:	09 95       	icall
   19224:	4f 93       	push	r20
   19226:	5f 93       	push	r21
   19228:	e0 ee       	ldi	r30, 0xE0	; 224
   1922a:	fa ee       	ldi	r31, 0xEA	; 234
   1922c:	09 95       	icall
   1922e:	e4 2f       	mov	r30, r20
   19230:	f5 2f       	mov	r31, r21
   19232:	5f 91       	pop	r21
   19234:	4f 91       	pop	r20
 //fileptr = mfopen("/logtrace", "w");
 enableTracing();  

 blockaddr = (tracingblock *)getEventBlockAddress();
   19236:	f0 93 56 0b 	sts	0x0B56, r31
   1923a:	e0 93 55 0b 	sts	0x0B55, r30
 eventid = &(blockaddr->internaleventid); 
   1923e:	f0 93 59 0b 	sts	0x0B59, r31
   19242:	e0 93 58 0b 	sts	0x0B58, r30
 threadid = &(blockaddr->threadid); 
   19246:	31 96       	adiw	r30, 0x01	; 1
   19248:	f0 93 5d 0b 	sts	0x0B5D, r31
   1924c:	e0 93 5c 0b 	sts	0x0B5C, r30
   19250:	31 97       	sbiw	r30, 0x01	; 1
 //blockaddr->externaladdtracefp = tracingcontrol; 
 blockaddr->externalapptracefp = tracingcontroluser; 
   19252:	85 e6       	ldi	r24, 0x65	; 101
   19254:	98 ec       	ldi	r25, 0xC8	; 200
   19256:	95 83       	std	Z+5, r25	; 0x05
   19258:	84 83       	std	Z+4, r24	; 0x04
   1925a:	4f 93       	push	r20
   1925c:	5f 93       	push	r21
   1925e:	ec e0       	ldi	r30, 0x0C	; 12
   19260:	fa ee       	ldi	r31, 0xEA	; 234
   19262:	09 95       	icall
   19264:	e4 2f       	mov	r30, r20
   19266:	f5 2f       	mov	r31, r21
   19268:	5f 91       	pop	r21
   1926a:	4f 91       	pop	r20
 
 thiscurrentthread = getCurrentThread(); 
   1926c:	f0 93 61 0b 	sts	0x0B61, r31
   19270:	e0 93 60 0b 	sts	0x0B60, r30
 thisthread = *thiscurrentthread; 
   19274:	80 81       	ld	r24, Z
   19276:	91 81       	ldd	r25, Z+1	; 0x01
   19278:	90 93 63 0b 	sts	0x0B63, r25
   1927c:	80 93 62 0b 	sts	0x0B62, r24
   19280:	4f 93       	push	r20
   19282:	5f 93       	push	r21
   19284:	e8 e0       	ldi	r30, 0x08	; 8
   19286:	fb ee       	ldi	r31, 0xEB	; 235
   19288:	09 95       	icall
   1928a:	84 2f       	mov	r24, r20
   1928c:	95 2f       	mov	r25, r21
   1928e:	5f 91       	pop	r21
   19290:	4f 91       	pop	r20
 
 //setTimerFunction(500, 0, traceMemory);
 
 
 oldstackptraddr = (uint16_t**)getKernelStackPtr(); 
   19292:	90 93 88 0b 	sts	0x0B88, r25
   19296:	80 93 87 0b 	sts	0x0B87, r24
 
 //setThreadTerminateHandler(cleanUpTraceFunction); 
 
 // setTimerFunction(50, 0, testUpdate);
 
//CLEANDEFSTART$$$$$
tracepatch0[0] = 0xcf;
   1929a:	5f ec       	ldi	r21, 0xCF	; 207
   1929c:	50 93 67 0b 	sts	0x0B67, r21

tracepatch0[1] = 0x93;
   192a0:	83 e9       	ldi	r24, 0x93	; 147
   192a2:	80 93 68 0b 	sts	0x0B68, r24

tracepatch0[2] = 0xdf;
   192a6:	6f ed       	ldi	r22, 0xDF	; 223
   192a8:	60 93 69 0b 	sts	0x0B69, r22

tracepatch0[3] = 0x93;
   192ac:	80 93 6a 0b 	sts	0x0B6A, r24

tracepatch0[4] = 0xcd;
   192b0:	7d ec       	ldi	r23, 0xCD	; 205
   192b2:	70 93 6b 0b 	sts	0x0B6B, r23

tracepatch0[5] = 0xb7;
   192b6:	87 eb       	ldi	r24, 0xB7	; 183
   192b8:	80 93 6c 0b 	sts	0x0B6C, r24

tracepatch0[6] = 0xde;
   192bc:	ee ed       	ldi	r30, 0xDE	; 222
   192be:	e0 93 6d 0b 	sts	0x0B6D, r30

tracepatch0[7] = 0xb7;
   192c2:	80 93 6e 0b 	sts	0x0B6E, r24

tracepatch0[8] = 0x2a;
   192c6:	8a e2       	ldi	r24, 0x2A	; 42
   192c8:	80 93 6f 0b 	sts	0x0B6F, r24

tracepatch0[9] = 0x97;
   192cc:	87 e9       	ldi	r24, 0x97	; 151
   192ce:	80 93 70 0b 	sts	0x0B70, r24

tracepatch0[10] = 0x0f;
   192d2:	8f e0       	ldi	r24, 0x0F	; 15
   192d4:	80 93 71 0b 	sts	0x0B71, r24

tracepatch0[11] = 0xb6;
   192d8:	26 eb       	ldi	r18, 0xB6	; 182
   192da:	20 93 72 0b 	sts	0x0B72, r18

tracepatch0[12] = 0xf8;
   192de:	38 ef       	ldi	r19, 0xF8	; 248
   192e0:	30 93 73 0b 	sts	0x0B73, r19

tracepatch0[13] = 0x94;
   192e4:	44 e9       	ldi	r20, 0x94	; 148
   192e6:	40 93 74 0b 	sts	0x0B74, r20

tracepatch0[ 14 ] = 0xff;
   192ea:	9f ef       	ldi	r25, 0xFF	; 255
   192ec:	90 93 75 0b 	sts	0x0B75, r25

tracepatch0[ 15 ] = 0xff;
   192f0:	90 93 76 0b 	sts	0x0B76, r25

tracepatch1[0] = 0x0f;
   192f4:	80 93 77 0b 	sts	0x0B77, r24

tracepatch1[1] = 0xb6;
   192f8:	20 93 78 0b 	sts	0x0B78, r18

tracepatch1[2] = 0xf8;
   192fc:	30 93 79 0b 	sts	0x0B79, r19

tracepatch1[3] = 0x94;
   19300:	40 93 7a 0b 	sts	0x0B7A, r20

tracepatch1[4] = 0xde;
   19304:	e0 93 7b 0b 	sts	0x0B7B, r30

tracepatch1[5] = 0xbf;
   19308:	2f eb       	ldi	r18, 0xBF	; 191
   1930a:	20 93 7c 0b 	sts	0x0B7C, r18

tracepatch1[6] = 0x0f;
   1930e:	80 93 7d 0b 	sts	0x0B7D, r24

tracepatch1[7] = 0xbe;
   19312:	8e eb       	ldi	r24, 0xBE	; 190
   19314:	80 93 7e 0b 	sts	0x0B7E, r24

tracepatch1[8] = 0xcd;
   19318:	70 93 7f 0b 	sts	0x0B7F, r23

tracepatch1[9] = 0xbf;
   1931c:	20 93 80 0b 	sts	0x0B80, r18

tracepatch1[10] = 0xdf;
   19320:	60 93 81 0b 	sts	0x0B81, r22

tracepatch1[11] = 0x91;
   19324:	81 e9       	ldi	r24, 0x91	; 145
   19326:	80 93 82 0b 	sts	0x0B82, r24

tracepatch1[12] = 0xcf;
   1932a:	50 93 83 0b 	sts	0x0B83, r21

tracepatch1[13] = 0x91;
   1932e:	80 93 84 0b 	sts	0x0B84, r24

tracepatch1[ 14 ] = 0xff;
   19332:	90 93 85 0b 	sts	0x0B85, r25

tracepatch1[ 15 ] = 0xff;
   19336:	90 93 86 0b 	sts	0x0B86, r25

//CLEANDEFEND$$$$$
 
//ADDTRACESTART$$$$$


{
uint32_t tracepointlocation = ((uint32_t)APPTRACEPOINT0*2);

pagenum = tracepointlocation/2/128;
   1933a:	28 e6       	ldi	r18, 0x68	; 104
   1933c:	31 e0       	ldi	r19, 0x01	; 1
   1933e:	30 93 8a 0b 	sts	0x0B8A, r19
   19342:	20 93 89 0b 	sts	0x0B89, r18

pageoffset = tracepointlocation%256;
   19346:	8a ec       	ldi	r24, 0xCA	; 202
   19348:	80 93 8b 0b 	sts	0x0B8B, r24
   return;
}



void disableTracing()
{     
   void (*getaddrfp)(void) = (void (*)(void))DISABLE_TRACING_SYSCALL;
   getaddrfp();
   return;
}





void addUserTracePoint(uint16_t pagenum, uint16_t pageoffset)
{
   void (*fp)(void) = (void (*)(void))SYSCALL_USER_ADD_TRACE_POINT; 
   globalpagenum = pagenum;
   1934c:	30 93 8d 0b 	sts	0x0B8D, r19
   19350:	20 93 8c 0b 	sts	0x0B8C, r18
   globalpageoffset = pageoffset; 
   19354:	8a ec       	ldi	r24, 0xCA	; 202
   19356:	90 e0       	ldi	r25, 0x00	; 0
   19358:	90 93 8f 0b 	sts	0x0B8F, r25
   1935c:	80 93 8e 0b 	sts	0x0B8E, r24
   
   asm volatile("push r20" "\n\t"
   19360:	4f 93       	push	r20
   19362:	5f 93       	push	r21
   19364:	6f 93       	push	r22
   19366:	7f 93       	push	r23
                "push r21" "\n\t"
								"push r22" "\n\t"
								"push r23" "\n\t"
                ::);
   
   asm volatile(" mov r20, %A0" "\n\t"
   19368:	80 91 8c 0b 	lds	r24, 0x0B8C
   1936c:	90 91 8d 0b 	lds	r25, 0x0B8D
   19370:	48 2f       	mov	r20, r24
   19372:	59 2f       	mov	r21, r25
	             	" mov r21, %B0" "\n\t"
				 :
				 :"r" (globalpagenum)
                );


   asm volatile(" mov r22, %A0" "\n\t"
   19374:	80 91 8e 0b 	lds	r24, 0x0B8E
   19378:	90 91 8f 0b 	lds	r25, 0x0B8F
   1937c:	68 2f       	mov	r22, r24
   1937e:	79 2f       	mov	r23, r25
	             	" mov r23, %B0" "\n\t"
				 :
				 :"r" (globalpageoffset)
                );

  fp(); 
   19380:	e8 ef       	ldi	r30, 0xF8	; 248
   19382:	fa ee       	ldi	r31, 0xEA	; 234
   19384:	09 95       	icall

  asm volatile("pop r23" "\n\t"
   19386:	7f 91       	pop	r23
   19388:	6f 91       	pop	r22
	           "pop r22" "\n\t"
	              ::);

  asm volatile("pop r21" "\n\t"
   1938a:	5f 91       	pop	r21
   1938c:	4f 91       	pop	r20

addUserTracePoint( pagenum,  pageoffset);

}




{
uint32_t tracepointlocation = ((uint32_t)APPTRACEPOINT1*2);

pagenum = tracepointlocation/2/128;
   1938e:	28 e6       	ldi	r18, 0x68	; 104
   19390:	31 e0       	ldi	r19, 0x01	; 1
   19392:	30 93 8a 0b 	sts	0x0B8A, r19
   19396:	20 93 89 0b 	sts	0x0B89, r18

pageoffset = tracepointlocation%256;
   1939a:	80 ee       	ldi	r24, 0xE0	; 224
   1939c:	80 93 8b 0b 	sts	0x0B8B, r24
   193a0:	30 93 8d 0b 	sts	0x0B8D, r19
   193a4:	20 93 8c 0b 	sts	0x0B8C, r18
   193a8:	80 ee       	ldi	r24, 0xE0	; 224
   193aa:	90 e0       	ldi	r25, 0x00	; 0
   193ac:	90 93 8f 0b 	sts	0x0B8F, r25
   193b0:	80 93 8e 0b 	sts	0x0B8E, r24
   193b4:	4f 93       	push	r20
   193b6:	5f 93       	push	r21
   193b8:	6f 93       	push	r22
   193ba:	7f 93       	push	r23
   193bc:	80 91 8c 0b 	lds	r24, 0x0B8C
   193c0:	90 91 8d 0b 	lds	r25, 0x0B8D
   193c4:	48 2f       	mov	r20, r24
   193c6:	59 2f       	mov	r21, r25
   193c8:	80 91 8e 0b 	lds	r24, 0x0B8E
   193cc:	90 91 8f 0b 	lds	r25, 0x0B8F
   193d0:	68 2f       	mov	r22, r24
   193d2:	79 2f       	mov	r23, r25
   193d4:	e8 ef       	ldi	r30, 0xF8	; 248
   193d6:	fa ee       	ldi	r31, 0xEA	; 234
   193d8:	09 95       	icall
   193da:	7f 91       	pop	r23
   193dc:	6f 91       	pop	r22
   193de:	5f 91       	pop	r21
   193e0:	4f 91       	pop	r20
   193e2:	15 e0       	ldi	r17, 0x05	; 5
   193e4:	4f 93       	push	r20
   193e6:	5f 93       	push	r21
   193e8:	ec e0       	ldi	r30, 0x0C	; 12
   193ea:	fa ee       	ldi	r31, 0xEA	; 234
   193ec:	09 95       	icall
   193ee:	e4 2f       	mov	r30, r20
   193f0:	f5 2f       	mov	r31, r21
   193f2:	5f 91       	pop	r21
   193f4:	4f 91       	pop	r20
   193f6:	01 90       	ld	r0, Z+
   193f8:	f0 81       	ld	r31, Z
   193fa:	e0 2d       	mov	r30, r0
   193fc:	12 83       	std	Z+2, r17	; 0x02
   193fe:	e0 e0       	ldi	r30, 0x00	; 0
   19400:	fa ee       	ldi	r31, 0xEA	; 234
   19402:	09 95       	icall
   19404:	ef cf       	rjmp	.-34     	; 0x193e4
