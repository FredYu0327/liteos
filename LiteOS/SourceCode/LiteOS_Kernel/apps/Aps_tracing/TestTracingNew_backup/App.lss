
LiteOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00014864  00014938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00014864  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   000012de  0001e000  0001e000  00014bde  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .systemcall   00000228  0001d400  0001d400  000149b6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .bss          00000895  0080017e  0080017e  00015ebc  2**0
                  ALLOC
  5 .stab         00000408  00000000  00000000  00015ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000162c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000850  00000000  00000000  00016348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000650b  00000000  00000000  00016b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000161cb  00000000  00000000  0001d0a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000319f  00000000  00000000  0003326e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000dfa0  00000000  00000000  0003640d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003cc0  00000000  00000000  000443ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000ec7  00000000  00000000  0004806d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 f8 4c 	jmp	0x99f0	; 0x99f0 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 fa 52 	jmp	0xa5f4	; 0xa5f4 <__vector_11>
      30:	0c 94 96 53 	jmp	0xa72c	; 0xa72c <__vector_12>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 d5 2d 	jmp	0x5baa	; 0x5baa <__vector_15>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__vector_18>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 42 3e 	jmp	0x7c84	; 0x7c84 <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e6       	ldi	r30, 0x64	; 100
      a0:	f8 e4       	ldi	r31, 0x48	; 72
      a2:	01 e0       	ldi	r16, 0x01	; 1
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 37       	cpi	r26, 0x7E	; 126
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	1a e0       	ldi	r17, 0x0A	; 10
      b4:	ae e7       	ldi	r26, 0x7E	; 126
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 31       	cpi	r26, 0x13	; 19
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0c 94 ed 6a 	jmp	0xd5da	; 0xd5da <main>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <filesocketInit>:
uint16_t nBytes;
int offset, position;


void filesocketInit() {
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
   filemutex.lock = filemutex.waiting = filemutex.lockingthreadid = 0;
      d2:	10 92 01 04 	sts	0x0401, r1
      d6:	80 91 01 04 	lds	r24, 0x0401
      da:	80 93 00 04 	sts	0x0400, r24
      de:	80 91 00 04 	lds	r24, 0x0400
      e2:	80 93 ff 03 	sts	0x03FF, r24
      e6:	df 91       	pop	r29
      e8:	cf 91       	pop	r28
      ea:	08 95       	ret

000000ec <getFileMutexAddress>:
   return ;
}



//Get the file mutex address
//void getFileMutexAddress()  __attribute__((naked));
void* getFileMutexAddress() {
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	22 97       	sbiw	r28, 0x02	; 2
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	f8 94       	cli
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	cd bf       	out	0x3d, r28	; 61
   volatile mutex *mfile = &filemutex;
     100:	8f ef       	ldi	r24, 0xFF	; 255
     102:	93 e0       	ldi	r25, 0x03	; 3
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	89 83       	std	Y+1, r24	; 0x01

   return (void*) mfile; 
     108:	89 81       	ldd	r24, Y+1	; 0x01
     10a:	9a 81       	ldd	r25, Y+2	; 0x02
     10c:	22 96       	adiw	r28, 0x02	; 2
     10e:	0f b6       	in	r0, 0x3f	; 63
     110:	f8 94       	cli
     112:	de bf       	out	0x3e, r29	; 62
     114:	0f be       	out	0x3f, r0	; 63
     116:	cd bf       	out	0x3d, r28	; 61
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	08 95       	ret

0000011e <getFilePathAddress>:
   //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( mfile ) );
   // asm volatile("ret"::); 
}
//Get the file path address
//void getFilePathAddress()  __attribute__((naked));
void* getFilePathAddress() {
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62

     return (void *)filepathaddr; 
     126:	86 e0       	ldi	r24, 0x06	; 6
     128:	94 e0       	ldi	r25, 0x04	; 4
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <getFileModeAddress>:

    //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( filepathaddr ) );
   //  asm volatile("ret"::); 
}
//Get the file mode address
//void getFileModeAddress()  __attribute__((naked)) ;
void* getFileModeAddress() {
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
    return (void *)filemodeaddr; 
     138:	8a ef       	ldi	r24, 0xFA	; 250
     13a:	93 e0       	ldi	r25, 0x03	; 3
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	08 95       	ret

00000142 <openfile_task>:
   //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( filemodeaddr ) );
   //asm volatile("ret"::); 
}

//-------------------------------------------------------------------------
void openfile_task() {
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	22 97       	sbiw	r28, 0x02	; 2
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
   MYFILE *temp = fopen2( filepathaddr, filemodeaddr );
     156:	8a ef       	ldi	r24, 0xFA	; 250
     158:	93 e0       	ldi	r25, 0x03	; 3
     15a:	26 e0       	ldi	r18, 0x06	; 6
     15c:	34 e0       	ldi	r19, 0x04	; 4
     15e:	bc 01       	movw	r22, r24
     160:	c9 01       	movw	r24, r18
     162:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <fopen2>
     166:	9a 83       	std	Y+2, r25	; 0x02
     168:	89 83       	std	Y+1, r24	; 0x01
   openthread->filedata.filestate.fileptr = ( uint8_t* )temp;
     16a:	e0 91 04 04 	lds	r30, 0x0404
     16e:	f0 91 05 04 	lds	r31, 0x0405
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	9a 81       	ldd	r25, Y+2	; 0x02
     176:	90 a3       	std	Z+32, r25	; 0x20
     178:	87 8f       	std	Z+31, r24	; 0x1f
   //unblock the file thread 
   Barrier_unblock( 7, 1 );
     17a:	61 e0       	ldi	r22, 0x01	; 1
     17c:	87 e0       	ldi	r24, 0x07	; 7
     17e:	0e 94 56 98 	call	0x130ac	; 0x130ac <Barrier_unblock>
     182:	22 96       	adiw	r28, 0x02	; 2
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <openFileTask>:
   return ;
}

//-------------------------------------------------------------------------
void openFileTask() {
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
   openthread = current_thread;
     19c:	80 91 da 08 	lds	r24, 0x08DA
     1a0:	90 91 db 08 	lds	r25, 0x08DB
     1a4:	90 93 05 04 	sts	0x0405, r25
     1a8:	80 93 04 04 	sts	0x0404, r24
   postTask( openfile_task, 5 );
     1ac:	81 ea       	ldi	r24, 0xA1	; 161
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	65 e0       	ldi	r22, 0x05	; 5
     1b2:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <closefile_task>:
   return ;
}

//-------------------------------------------------------------------------
void closefile_task() {
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
   fclose2( filehandle );
     1c4:	80 91 f8 03 	lds	r24, 0x03F8
     1c8:	90 91 f9 03 	lds	r25, 0x03F9
     1cc:	0e 94 77 03 	call	0x6ee	; 0x6ee <fclose2>
   Barrier_unblock( 7, 2 );
     1d0:	62 e0       	ldi	r22, 0x02	; 2
     1d2:	87 e0       	ldi	r24, 0x07	; 7
     1d4:	0e 94 56 98 	call	0x130ac	; 0x130ac <Barrier_unblock>
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	08 95       	ret

000001de <closeFileTask>:
}

//-------------------------------------------------------------------------
void closeFileTask() {
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
   filehandle = ( MYFILE* )current_thread->filedata.filestate.fileptr;
     1e6:	e0 91 da 08 	lds	r30, 0x08DA
     1ea:	f0 91 db 08 	lds	r31, 0x08DB
     1ee:	87 8d       	ldd	r24, Z+31	; 0x1f
     1f0:	90 a1       	ldd	r25, Z+32	; 0x20
     1f2:	90 93 f9 03 	sts	0x03F9, r25
     1f6:	80 93 f8 03 	sts	0x03F8, r24
   postTask( closefile_task, 5 );
     1fa:	8e ed       	ldi	r24, 0xDE	; 222
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	65 e0       	ldi	r22, 0x05	; 5
     200:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <readfile_task>:
}

//-------------------------------------------------------------------------
void readfile_task() {
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
   fread2( filehandle, databuffer, nBytes );
     212:	80 91 02 04 	lds	r24, 0x0402
     216:	90 91 03 04 	lds	r25, 0x0403
     21a:	20 91 1d 04 	lds	r18, 0x041D
     21e:	30 91 1e 04 	lds	r19, 0x041E
     222:	e0 91 f8 03 	lds	r30, 0x03F8
     226:	f0 91 f9 03 	lds	r31, 0x03F9
     22a:	ac 01       	movw	r20, r24
     22c:	b9 01       	movw	r22, r18
     22e:	cf 01       	movw	r24, r30
     230:	0e 94 49 05 	call	0xa92	; 0xa92 <fread2>
   Barrier_unblock( 7, 3 );
     234:	63 e0       	ldi	r22, 0x03	; 3
     236:	87 e0       	ldi	r24, 0x07	; 7
     238:	0e 94 56 98 	call	0x130ac	; 0x130ac <Barrier_unblock>
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <readFileTask>:
   //check the barrier
}

//-------------------------------------------------------------------------
void readFileTask() {
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
   filehandle = ( MYFILE* )current_thread->filedata.filestate.fileptr;
     24a:	e0 91 da 08 	lds	r30, 0x08DA
     24e:	f0 91 db 08 	lds	r31, 0x08DB
     252:	87 8d       	ldd	r24, Z+31	; 0x1f
     254:	90 a1       	ldd	r25, Z+32	; 0x20
     256:	90 93 f9 03 	sts	0x03F9, r25
     25a:	80 93 f8 03 	sts	0x03F8, r24
   databuffer = current_thread->filedata.filestate.bufferptr;
     25e:	e0 91 da 08 	lds	r30, 0x08DA
     262:	f0 91 db 08 	lds	r31, 0x08DB
     266:	81 a1       	ldd	r24, Z+33	; 0x21
     268:	92 a1       	ldd	r25, Z+34	; 0x22
     26a:	90 93 1e 04 	sts	0x041E, r25
     26e:	80 93 1d 04 	sts	0x041D, r24
   nBytes = current_thread->filedata.filestate.bytes;
     272:	e0 91 da 08 	lds	r30, 0x08DA
     276:	f0 91 db 08 	lds	r31, 0x08DB
     27a:	83 a1       	ldd	r24, Z+35	; 0x23
     27c:	94 a1       	ldd	r25, Z+36	; 0x24
     27e:	90 93 03 04 	sts	0x0403, r25
     282:	80 93 02 04 	sts	0x0402, r24
   postTask( readfile_task, 5 );
     286:	85 e0       	ldi	r24, 0x05	; 5
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	65 e0       	ldi	r22, 0x05	; 5
     28c:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <writefile_task>:
}

//-------------------------------------------------------------------------
void writefile_task() {
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
   fwrite2( filehandle, databuffer, nBytes );
     29e:	80 91 02 04 	lds	r24, 0x0402
     2a2:	90 91 03 04 	lds	r25, 0x0403
     2a6:	20 91 1d 04 	lds	r18, 0x041D
     2aa:	30 91 1e 04 	lds	r19, 0x041E
     2ae:	e0 91 f8 03 	lds	r30, 0x03F8
     2b2:	f0 91 f9 03 	lds	r31, 0x03F9
     2b6:	ac 01       	movw	r20, r24
     2b8:	b9 01       	movw	r22, r18
     2ba:	cf 01       	movw	r24, r30
     2bc:	0e 94 e5 06 	call	0xdca	; 0xdca <fwrite2>
   Barrier_unblock( 7, 4 );
     2c0:	64 e0       	ldi	r22, 0x04	; 4
     2c2:	87 e0       	ldi	r24, 0x07	; 7
     2c4:	0e 94 56 98 	call	0x130ac	; 0x130ac <Barrier_unblock>
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <writeFileTask>:
}

//-------------------------------------------------------------------------
void writeFileTask() {
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
   filehandle = ( MYFILE* )current_thread->filedata.filestate.fileptr;
     2d6:	e0 91 da 08 	lds	r30, 0x08DA
     2da:	f0 91 db 08 	lds	r31, 0x08DB
     2de:	87 8d       	ldd	r24, Z+31	; 0x1f
     2e0:	90 a1       	ldd	r25, Z+32	; 0x20
     2e2:	90 93 f9 03 	sts	0x03F9, r25
     2e6:	80 93 f8 03 	sts	0x03F8, r24
   databuffer = current_thread->filedata.filestate.bufferptr;
     2ea:	e0 91 da 08 	lds	r30, 0x08DA
     2ee:	f0 91 db 08 	lds	r31, 0x08DB
     2f2:	81 a1       	ldd	r24, Z+33	; 0x21
     2f4:	92 a1       	ldd	r25, Z+34	; 0x22
     2f6:	90 93 1e 04 	sts	0x041E, r25
     2fa:	80 93 1d 04 	sts	0x041D, r24
   nBytes = current_thread->filedata.filestate.bytes;
     2fe:	e0 91 da 08 	lds	r30, 0x08DA
     302:	f0 91 db 08 	lds	r31, 0x08DB
     306:	83 a1       	ldd	r24, Z+35	; 0x23
     308:	94 a1       	ldd	r25, Z+36	; 0x24
     30a:	90 93 03 04 	sts	0x0403, r25
     30e:	80 93 02 04 	sts	0x0402, r24
   postTask( writefile_task, 5 );
     312:	8b e4       	ldi	r24, 0x4B	; 75
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	65 e0       	ldi	r22, 0x05	; 5
     318:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <seekFileTask>:
}

//-------------------------------------------------------------------------
void seekFileTask() {
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
   filehandle = ( MYFILE* )current_thread->filedata.fileseekstate.fileptr;
     32a:	e0 91 da 08 	lds	r30, 0x08DA
     32e:	f0 91 db 08 	lds	r31, 0x08DB
     332:	87 8d       	ldd	r24, Z+31	; 0x1f
     334:	90 a1       	ldd	r25, Z+32	; 0x20
     336:	90 93 f9 03 	sts	0x03F9, r25
     33a:	80 93 f8 03 	sts	0x03F8, r24
   offset = current_thread->filedata.fileseekstate.offset;
     33e:	e0 91 da 08 	lds	r30, 0x08DA
     342:	f0 91 db 08 	lds	r31, 0x08DB
     346:	81 a1       	ldd	r24, Z+33	; 0x21
     348:	92 a1       	ldd	r25, Z+34	; 0x22
     34a:	90 93 1c 04 	sts	0x041C, r25
     34e:	80 93 1b 04 	sts	0x041B, r24
   position = current_thread->filedata.fileseekstate.position;
     352:	e0 91 da 08 	lds	r30, 0x08DA
     356:	f0 91 db 08 	lds	r31, 0x08DB
     35a:	83 a1       	ldd	r24, Z+35	; 0x23
     35c:	94 a1       	ldd	r25, Z+36	; 0x24
     35e:	90 93 f7 03 	sts	0x03F7, r25
     362:	80 93 f6 03 	sts	0x03F6, r24
   fseek2( filehandle, ( int32_t )offset, position );
     366:	20 91 f6 03 	lds	r18, 0x03F6
     36a:	30 91 f7 03 	lds	r19, 0x03F7
     36e:	80 91 1b 04 	lds	r24, 0x041B
     372:	90 91 1c 04 	lds	r25, 0x041C
     376:	aa 27       	eor	r26, r26
     378:	97 fd       	sbrc	r25, 7
     37a:	a0 95       	com	r26
     37c:	ba 2f       	mov	r27, r26
     37e:	e0 91 f8 03 	lds	r30, 0x03F8
     382:	f0 91 f9 03 	lds	r31, 0x03F9
     386:	ac 01       	movw	r20, r24
     388:	bd 01       	movw	r22, r26
     38a:	cf 01       	movw	r24, r30
     38c:	0e 94 94 03 	call	0x728	; 0x728 <fseek2>
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <checkFsValid>:

fid fidtable[ 4 ];


int checkFsValid() {
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	22 97       	sbiw	r28, 0x02	; 2
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
   if ( checkNodeValid( FSROOTNODE ) == DIRNODE ) {
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 20 10 	call	0x2040	; 0x2040 <checkNodeValid>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	91 05       	cpc	r25, r1
     3b6:	29 f4       	brne	.+10     	; 0x3c2 <checkFsValid+0x2c>
      return 1;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	9a 83       	std	Y+2, r25	; 0x02
     3be:	89 83       	std	Y+1, r24	; 0x01
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <checkFsValid+0x30>
   } else {
      return 0;
     3c2:	1a 82       	std	Y+2, r1	; 0x02
     3c4:	19 82       	std	Y+1, r1	; 0x01
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ca:	22 96       	adiw	r28, 0x02	; 2
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <initFidTable>:
   }
}
//-------------------------------------------------------------------------
void initFidTable() {
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	22 97       	sbiw	r28, 0x02	; 2
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
   int i;
   for ( i = 0; i < 8; i ++ ) {
     3f0:	1a 82       	std	Y+2, r1	; 0x02
     3f2:	19 82       	std	Y+1, r1	; 0x01
     3f4:	14 c0       	rjmp	.+40     	; 0x41e <initFidTable+0x42>
      fidtable[ i ].valid = 0;
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	9a 81       	ldd	r25, Y+2	; 0x02
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	9c 01       	movw	r18, r24
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	22 0f       	add	r18, r18
     406:	33 1f       	adc	r19, r19
     408:	82 0f       	add	r24, r18
     40a:	93 1f       	adc	r25, r19
     40c:	fc 01       	movw	r30, r24
     40e:	e1 5e       	subi	r30, 0xE1	; 225
     410:	fb 4f       	sbci	r31, 0xFB	; 251
     412:	10 82       	st	Z, r1
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	9a 81       	ldd	r25, Y+2	; 0x02
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	9a 83       	std	Y+2, r25	; 0x02
     41c:	89 83       	std	Y+1, r24	; 0x01
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	88 30       	cpi	r24, 0x08	; 8
     424:	91 05       	cpc	r25, r1
     426:	3c f3       	brlt	.-50     	; 0x3f6 <initFidTable+0x1a>
     428:	22 96       	adiw	r28, 0x02	; 2
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <getFreeFid>:
   }
}
//-------------------------------------------------------------------------
int getFreeFid() {
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	22 97       	sbiw	r28, 0x02	; 2
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
   int i;
   for ( i = 0; i < 8; i ++ ) {
     44e:	1a 82       	std	Y+2, r1	; 0x02
     450:	19 82       	std	Y+1, r1	; 0x01
     452:	16 c0       	rjmp	.+44     	; 0x480 <getFreeFid+0x46>
      if ( fidtable[ i ].valid == 0 ) {
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	9c 01       	movw	r18, r24
     45e:	22 0f       	add	r18, r18
     460:	33 1f       	adc	r19, r19
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	82 0f       	add	r24, r18
     468:	93 1f       	adc	r25, r19
     46a:	fc 01       	movw	r30, r24
     46c:	e1 5e       	subi	r30, 0xE1	; 225
     46e:	fb 4f       	sbci	r31, 0xFB	; 251
     470:	80 81       	ld	r24, Z
     472:	88 23       	and	r24, r24
     474:	51 f0       	breq	.+20     	; 0x48a <getFreeFid+0x50>
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	9a 83       	std	Y+2, r25	; 0x02
     47e:	89 83       	std	Y+1, r24	; 0x01
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	9a 81       	ldd	r25, Y+2	; 0x02
     484:	88 30       	cpi	r24, 0x08	; 8
     486:	91 05       	cpc	r25, r1
     488:	2c f3       	brlt	.-54     	; 0x454 <getFreeFid+0x1a>
         break;
      }
   }
   fidtable[ i ].valid = 1;
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	88 0f       	add	r24, r24
     490:	99 1f       	adc	r25, r25
     492:	9c 01       	movw	r18, r24
     494:	22 0f       	add	r18, r18
     496:	33 1f       	adc	r19, r19
     498:	22 0f       	add	r18, r18
     49a:	33 1f       	adc	r19, r19
     49c:	82 0f       	add	r24, r18
     49e:	93 1f       	adc	r25, r19
     4a0:	fc 01       	movw	r30, r24
     4a2:	e1 5e       	subi	r30, 0xE1	; 225
     4a4:	fb 4f       	sbci	r31, 0xFB	; 251
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	80 83       	st	Z, r24
   fidtable[ i ].index = i;
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	49 81       	ldd	r20, Y+1	; 0x01
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	9c 01       	movw	r18, r24
     4b6:	22 0f       	add	r18, r18
     4b8:	33 1f       	adc	r19, r19
     4ba:	22 0f       	add	r18, r18
     4bc:	33 1f       	adc	r19, r19
     4be:	82 0f       	add	r24, r18
     4c0:	93 1f       	adc	r25, r19
     4c2:	fc 01       	movw	r30, r24
     4c4:	e0 5e       	subi	r30, 0xE0	; 224
     4c6:	fb 4f       	sbci	r31, 0xFB	; 251
     4c8:	40 83       	st	Z, r20
   fidtable[ i ].addr = fidtable[ i ].mode = 0;
     4ca:	69 81       	ldd	r22, Y+1	; 0x01
     4cc:	7a 81       	ldd	r23, Y+2	; 0x02
     4ce:	49 81       	ldd	r20, Y+1	; 0x01
     4d0:	5a 81       	ldd	r21, Y+2	; 0x02
     4d2:	ca 01       	movw	r24, r20
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	9c 01       	movw	r18, r24
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	22 0f       	add	r18, r18
     4e0:	33 1f       	adc	r19, r19
     4e2:	82 0f       	add	r24, r18
     4e4:	93 1f       	adc	r25, r19
     4e6:	fc 01       	movw	r30, r24
     4e8:	ee 5d       	subi	r30, 0xDE	; 222
     4ea:	fb 4f       	sbci	r31, 0xFB	; 251
     4ec:	10 82       	st	Z, r1
     4ee:	ca 01       	movw	r24, r20
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	9c 01       	movw	r18, r24
     4f6:	22 0f       	add	r18, r18
     4f8:	33 1f       	adc	r19, r19
     4fa:	22 0f       	add	r18, r18
     4fc:	33 1f       	adc	r19, r19
     4fe:	82 0f       	add	r24, r18
     500:	93 1f       	adc	r25, r19
     502:	fc 01       	movw	r30, r24
     504:	ee 5d       	subi	r30, 0xDE	; 222
     506:	fb 4f       	sbci	r31, 0xFB	; 251
     508:	40 81       	ld	r20, Z
     50a:	cb 01       	movw	r24, r22
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	9c 01       	movw	r18, r24
     512:	22 0f       	add	r18, r18
     514:	33 1f       	adc	r19, r19
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	82 0f       	add	r24, r18
     51c:	93 1f       	adc	r25, r19
     51e:	fc 01       	movw	r30, r24
     520:	ef 5d       	subi	r30, 0xDF	; 223
     522:	fb 4f       	sbci	r31, 0xFB	; 251
     524:	40 83       	st	Z, r20
   fidtable[ i ].fpos =  - 1;
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	9a 81       	ldd	r25, Y+2	; 0x02
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	9c 01       	movw	r18, r24
     530:	22 0f       	add	r18, r18
     532:	33 1f       	adc	r19, r19
     534:	22 0f       	add	r18, r18
     536:	33 1f       	adc	r19, r19
     538:	82 0f       	add	r24, r18
     53a:	93 1f       	adc	r25, r19
     53c:	fc 01       	movw	r30, r24
     53e:	eb 5d       	subi	r30, 0xDB	; 219
     540:	fb 4f       	sbci	r31, 0xFB	; 251
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	9f ef       	ldi	r25, 0xFF	; 255
     546:	af ef       	ldi	r26, 0xFF	; 255
     548:	bf ef       	ldi	r27, 0xFF	; 255
     54a:	80 83       	st	Z, r24
     54c:	91 83       	std	Z+1, r25	; 0x01
     54e:	a2 83       	std	Z+2, r26	; 0x02
     550:	b3 83       	std	Z+3, r27	; 0x03
   return i;
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	9a 81       	ldd	r25, Y+2	; 0x02
     556:	22 96       	adiw	r28, 0x02	; 2
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <releaseFid>:
}
//-------------------------------------------------------------------------
void releaseFid( int fid ) {
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	22 97       	sbiw	r28, 0x02	; 2
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	9a 83       	std	Y+2, r25	; 0x02
     57e:	89 83       	std	Y+1, r24	; 0x01
   fidtable[ fid ].valid = 0;
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	9a 81       	ldd	r25, Y+2	; 0x02
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	9c 01       	movw	r18, r24
     58a:	22 0f       	add	r18, r18
     58c:	33 1f       	adc	r19, r19
     58e:	22 0f       	add	r18, r18
     590:	33 1f       	adc	r19, r19
     592:	82 0f       	add	r24, r18
     594:	93 1f       	adc	r25, r19
     596:	fc 01       	movw	r30, r24
     598:	e1 5e       	subi	r30, 0xE1	; 225
     59a:	fb 4f       	sbci	r31, 0xFB	; 251
     59c:	10 82       	st	Z, r1
     59e:	22 96       	adiw	r28, 0x02	; 2
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <fopen2>:

extern fid fidtable[ 4 ];


MYFILE *fopen2( char *pathname, char *mode ) {
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	64 97       	sbiw	r28, 0x14	; 20
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	98 8b       	std	Y+16, r25	; 0x10
     5c6:	8f 87       	std	Y+15, r24	; 0x0f
     5c8:	7a 8b       	std	Y+18, r23	; 0x12
     5ca:	69 8b       	std	Y+17, r22	; 0x11
   int retaddr, state;
   int openmode;

   retaddr = locateFileName( pathname, &state );
     5cc:	ce 01       	movw	r24, r28
     5ce:	0d 96       	adiw	r24, 0x0d	; 13
     5d0:	2f 85       	ldd	r18, Y+15	; 0x0f
     5d2:	38 89       	ldd	r19, Y+16	; 0x10
     5d4:	bc 01       	movw	r22, r24
     5d6:	c9 01       	movw	r24, r18
     5d8:	0e 94 95 18 	call	0x312a	; 0x312a <locateFileName>
     5dc:	9c 87       	std	Y+12, r25	; 0x0c
     5de:	8b 87       	std	Y+11, r24	; 0x0b
   openmode = fileMode( mode );
     5e0:	89 89       	ldd	r24, Y+17	; 0x11
     5e2:	9a 89       	ldd	r25, Y+18	; 0x12
     5e4:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <fileMode>
     5e8:	9a 87       	std	Y+10, r25	; 0x0a
     5ea:	89 87       	std	Y+9, r24	; 0x09
   
   //ERROR in open mode 
   if ( openmode == 0 ) {
     5ec:	89 85       	ldd	r24, Y+9	; 0x09
     5ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f0:	00 97       	sbiw	r24, 0x00	; 0
     5f2:	19 f4       	brne	.+6      	; 0x5fa <fopen2+0x4a>
      return NULL;
     5f4:	1c 8a       	std	Y+20, r1	; 0x14
     5f6:	1b 8a       	std	Y+19, r1	; 0x13
     5f8:	6f c0       	rjmp	.+222    	; 0x6d8 <fopen2+0x128>
   } 
   //If the file location fails, return -1 
   if ( retaddr ==  - 1 ) {
     5fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     5fc:	9c 85       	ldd	r25, Y+12	; 0x0c
     5fe:	2f ef       	ldi	r18, 0xFF	; 255
     600:	8f 3f       	cpi	r24, 0xFF	; 255
     602:	92 07       	cpc	r25, r18
     604:	19 f4       	brne	.+6      	; 0x60c <fopen2+0x5c>
      return NULL;
     606:	1c 8a       	std	Y+20, r1	; 0x14
     608:	1b 8a       	std	Y+19, r1	; 0x13
     60a:	66 c0       	rjmp	.+204    	; 0x6d8 <fopen2+0x128>
   } 
   //first, file does not exist
   if ( state == 0 ) {
     60c:	8d 85       	ldd	r24, Y+13	; 0x0d
     60e:	9e 85       	ldd	r25, Y+14	; 0x0e
     610:	00 97       	sbiw	r24, 0x00	; 0
     612:	d1 f5       	brne	.+116    	; 0x688 <fopen2+0xd8>
      if ( openmode == 2 ) {
     614:	89 85       	ldd	r24, Y+9	; 0x09
     616:	9a 85       	ldd	r25, Y+10	; 0x0a
     618:	82 30       	cpi	r24, 0x02	; 2
     61a:	91 05       	cpc	r25, r1
     61c:	91 f5       	brne	.+100    	; 0x682 <fopen2+0xd2>
         int blockaddr;
         int fid;
         char *temp;
         temp = extractLastName( pathname );
     61e:	8f 85       	ldd	r24, Y+15	; 0x0f
     620:	98 89       	ldd	r25, Y+16	; 0x10
     622:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <extractLastName>
     626:	9c 83       	std	Y+4, r25	; 0x04
     628:	8b 83       	std	Y+3, r24	; 0x03
         blockaddr = createFileFromDirectory( temp, retaddr );
     62a:	8b 85       	ldd	r24, Y+11	; 0x0b
     62c:	9c 85       	ldd	r25, Y+12	; 0x0c
     62e:	2b 81       	ldd	r18, Y+3	; 0x03
     630:	3c 81       	ldd	r19, Y+4	; 0x04
     632:	bc 01       	movw	r22, r24
     634:	c9 01       	movw	r24, r18
     636:	0e 94 28 18 	call	0x3050	; 0x3050 <createFileFromDirectory>
     63a:	99 27       	eor	r25, r25
     63c:	98 87       	std	Y+8, r25	; 0x08
     63e:	8f 83       	std	Y+7, r24	; 0x07
         fid = getFreeFid();
     640:	0e 94 1d 02 	call	0x43a	; 0x43a <getFreeFid>
     644:	9e 83       	std	Y+6, r25	; 0x06
     646:	8d 83       	std	Y+5, r24	; 0x05
         openFile( blockaddr, fid, openmode );
     648:	89 85       	ldd	r24, Y+9	; 0x09
     64a:	9a 85       	ldd	r25, Y+10	; 0x0a
     64c:	2d 81       	ldd	r18, Y+5	; 0x05
     64e:	3e 81       	ldd	r19, Y+6	; 0x06
     650:	ef 81       	ldd	r30, Y+7	; 0x07
     652:	f8 85       	ldd	r31, Y+8	; 0x08
     654:	ac 01       	movw	r20, r24
     656:	b9 01       	movw	r22, r18
     658:	cf 01       	movw	r24, r30
     65a:	0e 94 f7 19 	call	0x33ee	; 0x33ee <openFile>
         return & fidtable[ fid ];
     65e:	8d 81       	ldd	r24, Y+5	; 0x05
     660:	9e 81       	ldd	r25, Y+6	; 0x06
     662:	9c 01       	movw	r18, r24
     664:	22 0f       	add	r18, r18
     666:	33 1f       	adc	r19, r19
     668:	c9 01       	movw	r24, r18
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	82 0f       	add	r24, r18
     674:	93 1f       	adc	r25, r19
     676:	9c 01       	movw	r18, r24
     678:	21 5e       	subi	r18, 0xE1	; 225
     67a:	3b 4f       	sbci	r19, 0xFB	; 251
     67c:	3c 8b       	std	Y+20, r19	; 0x14
     67e:	2b 8b       	std	Y+19, r18	; 0x13
     680:	2b c0       	rjmp	.+86     	; 0x6d8 <fopen2+0x128>
      }
       else {
         return NULL;
     682:	1c 8a       	std	Y+20, r1	; 0x14
     684:	1b 8a       	std	Y+19, r1	; 0x13
     686:	28 c0       	rjmp	.+80     	; 0x6d8 <fopen2+0x128>
      } 
   }
   if ( state != FILENODE ) {
     688:	8d 85       	ldd	r24, Y+13	; 0x0d
     68a:	9e 85       	ldd	r25, Y+14	; 0x0e
     68c:	82 30       	cpi	r24, 0x02	; 2
     68e:	91 05       	cpc	r25, r1
     690:	19 f0       	breq	.+6      	; 0x698 <fopen2+0xe8>
      return NULL;
     692:	1c 8a       	std	Y+20, r1	; 0x14
     694:	1b 8a       	std	Y+19, r1	; 0x13
     696:	20 c0       	rjmp	.+64     	; 0x6d8 <fopen2+0x128>
   } 
    {
      int fid;
      fid = getFreeFid();
     698:	0e 94 1d 02 	call	0x43a	; 0x43a <getFreeFid>
     69c:	9a 83       	std	Y+2, r25	; 0x02
     69e:	89 83       	std	Y+1, r24	; 0x01
      openFile( retaddr, fid, openmode );
     6a0:	89 85       	ldd	r24, Y+9	; 0x09
     6a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a4:	29 81       	ldd	r18, Y+1	; 0x01
     6a6:	3a 81       	ldd	r19, Y+2	; 0x02
     6a8:	eb 85       	ldd	r30, Y+11	; 0x0b
     6aa:	fc 85       	ldd	r31, Y+12	; 0x0c
     6ac:	ac 01       	movw	r20, r24
     6ae:	b9 01       	movw	r22, r18
     6b0:	cf 01       	movw	r24, r30
     6b2:	0e 94 f7 19 	call	0x33ee	; 0x33ee <openFile>
      return & fidtable[ fid ];
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ba:	9c 01       	movw	r18, r24
     6bc:	22 0f       	add	r18, r18
     6be:	33 1f       	adc	r19, r19
     6c0:	c9 01       	movw	r24, r18
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	82 0f       	add	r24, r18
     6cc:	93 1f       	adc	r25, r19
     6ce:	9c 01       	movw	r18, r24
     6d0:	21 5e       	subi	r18, 0xE1	; 225
     6d2:	3b 4f       	sbci	r19, 0xFB	; 251
     6d4:	3c 8b       	std	Y+20, r19	; 0x14
     6d6:	2b 8b       	std	Y+19, r18	; 0x13
     6d8:	8b 89       	ldd	r24, Y+19	; 0x13
     6da:	9c 89       	ldd	r25, Y+20	; 0x14
     6dc:	64 96       	adiw	r28, 0x14	; 20
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <fclose2>:
   }
}


//-------------------------------------------------------------------------
void fclose2( MYFILE *fp ) {
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	22 97       	sbiw	r28, 0x02	; 2
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	9a 83       	std	Y+2, r25	; 0x02
     704:	89 83       	std	Y+1, r24	; 0x01
   releaseFid( fp->index );
     706:	e9 81       	ldd	r30, Y+1	; 0x01
     708:	fa 81       	ldd	r31, Y+2	; 0x02
     70a:	81 81       	ldd	r24, Z+1	; 0x01
     70c:	99 27       	eor	r25, r25
     70e:	0e 94 b4 02 	call	0x568	; 0x568 <releaseFid>
   fp = NULL;
     712:	1a 82       	std	Y+2, r1	; 0x02
     714:	19 82       	std	Y+1, r1	; 0x01
     716:	22 96       	adiw	r28, 0x02	; 2
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <fseek2>:
   return ;
}

	
//-------------------------------------------------------------------------
int fseek2( MYFILE *fp, int32_t offset, int position ) {
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	2c 97       	sbiw	r28, 0x0c	; 12
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	9c 83       	std	Y+4, r25	; 0x04
     73e:	8b 83       	std	Y+3, r24	; 0x03
     740:	4d 83       	std	Y+5, r20	; 0x05
     742:	5e 83       	std	Y+6, r21	; 0x06
     744:	6f 83       	std	Y+7, r22	; 0x07
     746:	78 87       	std	Y+8, r23	; 0x08
     748:	3a 87       	std	Y+10, r19	; 0x0a
     74a:	29 87       	std	Y+9, r18	; 0x09
   int temp;
   if ( position == 0 ) {
     74c:	89 85       	ldd	r24, Y+9	; 0x09
     74e:	9a 85       	ldd	r25, Y+10	; 0x0a
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	11 f5       	brne	.+68     	; 0x798 <fseek2+0x70>
      if ( offset > fp->size ) {
     754:	eb 81       	ldd	r30, Y+3	; 0x03
     756:	fc 81       	ldd	r31, Y+4	; 0x04
     758:	84 81       	ldd	r24, Z+4	; 0x04
     75a:	95 81       	ldd	r25, Z+5	; 0x05
     75c:	9c 01       	movw	r18, r24
     75e:	44 27       	eor	r20, r20
     760:	55 27       	eor	r21, r21
     762:	8d 81       	ldd	r24, Y+5	; 0x05
     764:	9e 81       	ldd	r25, Y+6	; 0x06
     766:	af 81       	ldd	r26, Y+7	; 0x07
     768:	b8 85       	ldd	r27, Y+8	; 0x08
     76a:	28 17       	cp	r18, r24
     76c:	39 07       	cpc	r19, r25
     76e:	4a 07       	cpc	r20, r26
     770:	5b 07       	cpc	r21, r27
     772:	2c f4       	brge	.+10     	; 0x77e <fseek2+0x56>
         return  - 1;
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	9f ef       	ldi	r25, 0xFF	; 255
     778:	9c 87       	std	Y+12, r25	; 0x0c
     77a:	8b 87       	std	Y+11, r24	; 0x0b
     77c:	9e c0       	rjmp	.+316    	; 0x8ba <fseek2+0x192>
      } 
      fp->fpos = offset;
     77e:	eb 81       	ldd	r30, Y+3	; 0x03
     780:	fc 81       	ldd	r31, Y+4	; 0x04
     782:	8d 81       	ldd	r24, Y+5	; 0x05
     784:	9e 81       	ldd	r25, Y+6	; 0x06
     786:	af 81       	ldd	r26, Y+7	; 0x07
     788:	b8 85       	ldd	r27, Y+8	; 0x08
     78a:	86 83       	std	Z+6, r24	; 0x06
     78c:	97 83       	std	Z+7, r25	; 0x07
     78e:	a0 87       	std	Z+8, r26	; 0x08
     790:	b1 87       	std	Z+9, r27	; 0x09
      return 0;
     792:	1c 86       	std	Y+12, r1	; 0x0c
     794:	1b 86       	std	Y+11, r1	; 0x0b
     796:	91 c0       	rjmp	.+290    	; 0x8ba <fseek2+0x192>
   }
   temp = fp->fpos;
     798:	eb 81       	ldd	r30, Y+3	; 0x03
     79a:	fc 81       	ldd	r31, Y+4	; 0x04
     79c:	86 81       	ldd	r24, Z+6	; 0x06
     79e:	97 81       	ldd	r25, Z+7	; 0x07
     7a0:	a0 85       	ldd	r26, Z+8	; 0x08
     7a2:	b1 85       	ldd	r27, Z+9	; 0x09
     7a4:	9a 83       	std	Y+2, r25	; 0x02
     7a6:	89 83       	std	Y+1, r24	; 0x01
   if ( position == 1 ) {
     7a8:	89 85       	ldd	r24, Y+9	; 0x09
     7aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	91 05       	cpc	r25, r1
     7b0:	a1 f4       	brne	.+40     	; 0x7da <fseek2+0xb2>
      fp->fpos = fp->fpos + offset;
     7b2:	eb 81       	ldd	r30, Y+3	; 0x03
     7b4:	fc 81       	ldd	r31, Y+4	; 0x04
     7b6:	26 81       	ldd	r18, Z+6	; 0x06
     7b8:	37 81       	ldd	r19, Z+7	; 0x07
     7ba:	40 85       	ldd	r20, Z+8	; 0x08
     7bc:	51 85       	ldd	r21, Z+9	; 0x09
     7be:	8d 81       	ldd	r24, Y+5	; 0x05
     7c0:	9e 81       	ldd	r25, Y+6	; 0x06
     7c2:	af 81       	ldd	r26, Y+7	; 0x07
     7c4:	b8 85       	ldd	r27, Y+8	; 0x08
     7c6:	82 0f       	add	r24, r18
     7c8:	93 1f       	adc	r25, r19
     7ca:	a4 1f       	adc	r26, r20
     7cc:	b5 1f       	adc	r27, r21
     7ce:	eb 81       	ldd	r30, Y+3	; 0x03
     7d0:	fc 81       	ldd	r31, Y+4	; 0x04
     7d2:	86 83       	std	Z+6, r24	; 0x06
     7d4:	97 83       	std	Z+7, r25	; 0x07
     7d6:	a0 87       	std	Z+8, r26	; 0x08
     7d8:	b1 87       	std	Z+9, r27	; 0x09
   } 
   if (( fp->fpos < 0 ) || ( fp->fpos > fp->size )) {
     7da:	eb 81       	ldd	r30, Y+3	; 0x03
     7dc:	fc 81       	ldd	r31, Y+4	; 0x04
     7de:	86 81       	ldd	r24, Z+6	; 0x06
     7e0:	97 81       	ldd	r25, Z+7	; 0x07
     7e2:	a0 85       	ldd	r26, Z+8	; 0x08
     7e4:	b1 85       	ldd	r27, Z+9	; 0x09
     7e6:	bb 23       	and	r27, r27
     7e8:	8c f0       	brlt	.+34     	; 0x80c <fseek2+0xe4>
     7ea:	eb 81       	ldd	r30, Y+3	; 0x03
     7ec:	fc 81       	ldd	r31, Y+4	; 0x04
     7ee:	26 81       	ldd	r18, Z+6	; 0x06
     7f0:	37 81       	ldd	r19, Z+7	; 0x07
     7f2:	40 85       	ldd	r20, Z+8	; 0x08
     7f4:	51 85       	ldd	r21, Z+9	; 0x09
     7f6:	eb 81       	ldd	r30, Y+3	; 0x03
     7f8:	fc 81       	ldd	r31, Y+4	; 0x04
     7fa:	84 81       	ldd	r24, Z+4	; 0x04
     7fc:	95 81       	ldd	r25, Z+5	; 0x05
     7fe:	aa 27       	eor	r26, r26
     800:	bb 27       	eor	r27, r27
     802:	82 17       	cp	r24, r18
     804:	93 07       	cpc	r25, r19
     806:	a4 07       	cpc	r26, r20
     808:	b5 07       	cpc	r27, r21
     80a:	8c f4       	brge	.+34     	; 0x82e <fseek2+0x106>
      fp->fpos = temp;
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	9a 81       	ldd	r25, Y+2	; 0x02
     810:	aa 27       	eor	r26, r26
     812:	97 fd       	sbrc	r25, 7
     814:	a0 95       	com	r26
     816:	ba 2f       	mov	r27, r26
     818:	eb 81       	ldd	r30, Y+3	; 0x03
     81a:	fc 81       	ldd	r31, Y+4	; 0x04
     81c:	86 83       	std	Z+6, r24	; 0x06
     81e:	97 83       	std	Z+7, r25	; 0x07
     820:	a0 87       	std	Z+8, r26	; 0x08
     822:	b1 87       	std	Z+9, r27	; 0x09
      return  - 1;
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	9f ef       	ldi	r25, 0xFF	; 255
     828:	9c 87       	std	Y+12, r25	; 0x0c
     82a:	8b 87       	std	Y+11, r24	; 0x0b
     82c:	46 c0       	rjmp	.+140    	; 0x8ba <fseek2+0x192>
   }
   if ( position == 2 ) {
     82e:	89 85       	ldd	r24, Y+9	; 0x09
     830:	9a 85       	ldd	r25, Y+10	; 0x0a
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	91 05       	cpc	r25, r1
     836:	a9 f4       	brne	.+42     	; 0x862 <fseek2+0x13a>
      fp->fpos = fp->size + offset;
     838:	eb 81       	ldd	r30, Y+3	; 0x03
     83a:	fc 81       	ldd	r31, Y+4	; 0x04
     83c:	84 81       	ldd	r24, Z+4	; 0x04
     83e:	95 81       	ldd	r25, Z+5	; 0x05
     840:	9c 01       	movw	r18, r24
     842:	44 27       	eor	r20, r20
     844:	55 27       	eor	r21, r21
     846:	8d 81       	ldd	r24, Y+5	; 0x05
     848:	9e 81       	ldd	r25, Y+6	; 0x06
     84a:	af 81       	ldd	r26, Y+7	; 0x07
     84c:	b8 85       	ldd	r27, Y+8	; 0x08
     84e:	82 0f       	add	r24, r18
     850:	93 1f       	adc	r25, r19
     852:	a4 1f       	adc	r26, r20
     854:	b5 1f       	adc	r27, r21
     856:	eb 81       	ldd	r30, Y+3	; 0x03
     858:	fc 81       	ldd	r31, Y+4	; 0x04
     85a:	86 83       	std	Z+6, r24	; 0x06
     85c:	97 83       	std	Z+7, r25	; 0x07
     85e:	a0 87       	std	Z+8, r26	; 0x08
     860:	b1 87       	std	Z+9, r27	; 0x09
   } 
   if (( fp->fpos < 0 ) || ( fp->fpos > fp->size )) {
     862:	eb 81       	ldd	r30, Y+3	; 0x03
     864:	fc 81       	ldd	r31, Y+4	; 0x04
     866:	86 81       	ldd	r24, Z+6	; 0x06
     868:	97 81       	ldd	r25, Z+7	; 0x07
     86a:	a0 85       	ldd	r26, Z+8	; 0x08
     86c:	b1 85       	ldd	r27, Z+9	; 0x09
     86e:	bb 23       	and	r27, r27
     870:	8c f0       	brlt	.+34     	; 0x894 <fseek2+0x16c>
     872:	eb 81       	ldd	r30, Y+3	; 0x03
     874:	fc 81       	ldd	r31, Y+4	; 0x04
     876:	26 81       	ldd	r18, Z+6	; 0x06
     878:	37 81       	ldd	r19, Z+7	; 0x07
     87a:	40 85       	ldd	r20, Z+8	; 0x08
     87c:	51 85       	ldd	r21, Z+9	; 0x09
     87e:	eb 81       	ldd	r30, Y+3	; 0x03
     880:	fc 81       	ldd	r31, Y+4	; 0x04
     882:	84 81       	ldd	r24, Z+4	; 0x04
     884:	95 81       	ldd	r25, Z+5	; 0x05
     886:	aa 27       	eor	r26, r26
     888:	bb 27       	eor	r27, r27
     88a:	82 17       	cp	r24, r18
     88c:	93 07       	cpc	r25, r19
     88e:	a4 07       	cpc	r26, r20
     890:	b5 07       	cpc	r27, r21
     892:	8c f4       	brge	.+34     	; 0x8b6 <fseek2+0x18e>
      fp->fpos = temp;
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	9a 81       	ldd	r25, Y+2	; 0x02
     898:	aa 27       	eor	r26, r26
     89a:	97 fd       	sbrc	r25, 7
     89c:	a0 95       	com	r26
     89e:	ba 2f       	mov	r27, r26
     8a0:	eb 81       	ldd	r30, Y+3	; 0x03
     8a2:	fc 81       	ldd	r31, Y+4	; 0x04
     8a4:	86 83       	std	Z+6, r24	; 0x06
     8a6:	97 83       	std	Z+7, r25	; 0x07
     8a8:	a0 87       	std	Z+8, r26	; 0x08
     8aa:	b1 87       	std	Z+9, r27	; 0x09
      return  - 1;
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	9f ef       	ldi	r25, 0xFF	; 255
     8b0:	9c 87       	std	Y+12, r25	; 0x0c
     8b2:	8b 87       	std	Y+11, r24	; 0x0b
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <fseek2+0x192>
   }
   return 0;
     8b6:	1c 86       	std	Y+12, r1	; 0x0c
     8b8:	1b 86       	std	Y+11, r1	; 0x0b
     8ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     8bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     8be:	2c 96       	adiw	r28, 0x0c	; 12
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <fexist2>:
}



//-------------------------------------------------------------------------
int fexist2( char *pathname ) {
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	28 97       	sbiw	r28, 0x08	; 8
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	9e 83       	std	Y+6, r25	; 0x06
     8e6:	8d 83       	std	Y+5, r24	; 0x05
   int retaddr, state;
   retaddr = locateFileName( pathname, &state );
     8e8:	ce 01       	movw	r24, r28
     8ea:	03 96       	adiw	r24, 0x03	; 3
     8ec:	2d 81       	ldd	r18, Y+5	; 0x05
     8ee:	3e 81       	ldd	r19, Y+6	; 0x06
     8f0:	bc 01       	movw	r22, r24
     8f2:	c9 01       	movw	r24, r18
     8f4:	0e 94 95 18 	call	0x312a	; 0x312a <locateFileName>
     8f8:	9a 83       	std	Y+2, r25	; 0x02
     8fa:	89 83       	std	Y+1, r24	; 0x01
   if (( retaddr ==  - 1 ) || ( state == 0 )) {
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	9a 81       	ldd	r25, Y+2	; 0x02
     900:	2f ef       	ldi	r18, 0xFF	; 255
     902:	8f 3f       	cpi	r24, 0xFF	; 255
     904:	92 07       	cpc	r25, r18
     906:	21 f0       	breq	.+8      	; 0x910 <fexist2+0x40>
     908:	8b 81       	ldd	r24, Y+3	; 0x03
     90a:	9c 81       	ldd	r25, Y+4	; 0x04
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	29 f4       	brne	.+10     	; 0x91a <fexist2+0x4a>
      return  - 1;
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	9f ef       	ldi	r25, 0xFF	; 255
     914:	98 87       	std	Y+8, r25	; 0x08
     916:	8f 83       	std	Y+7, r24	; 0x07
     918:	04 c0       	rjmp	.+8      	; 0x922 <fexist2+0x52>
   } 
   else {
      return retaddr;
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02
     91e:	98 87       	std	Y+8, r25	; 0x08
     920:	8f 83       	std	Y+7, r24	; 0x07
     922:	8f 81       	ldd	r24, Y+7	; 0x07
     924:	98 85       	ldd	r25, Y+8	; 0x08
     926:	28 96       	adiw	r28, 0x08	; 8
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <fcreatedir2>:
   } 
}

//-------------------------------------------------------------------------
int fcreatedir2( char *pathname ) {
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	28 97       	sbiw	r28, 0x08	; 8
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	9e 83       	std	Y+6, r25	; 0x06
     94e:	8d 83       	std	Y+5, r24	; 0x05
   int retaddr, state;
   retaddr = locateFileName( pathname, &state );
     950:	ce 01       	movw	r24, r28
     952:	03 96       	adiw	r24, 0x03	; 3
     954:	2d 81       	ldd	r18, Y+5	; 0x05
     956:	3e 81       	ldd	r19, Y+6	; 0x06
     958:	bc 01       	movw	r22, r24
     95a:	c9 01       	movw	r24, r18
     95c:	0e 94 95 18 	call	0x312a	; 0x312a <locateFileName>
     960:	9a 83       	std	Y+2, r25	; 0x02
     962:	89 83       	std	Y+1, r24	; 0x01
   if ( retaddr ==  - 1 ) {
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	9a 81       	ldd	r25, Y+2	; 0x02
     968:	2f ef       	ldi	r18, 0xFF	; 255
     96a:	8f 3f       	cpi	r24, 0xFF	; 255
     96c:	92 07       	cpc	r25, r18
     96e:	29 f4       	brne	.+10     	; 0x97a <fcreatedir2+0x42>
      return  - 1;
     970:	8f ef       	ldi	r24, 0xFF	; 255
     972:	9f ef       	ldi	r25, 0xFF	; 255
     974:	98 87       	std	Y+8, r25	; 0x08
     976:	8f 83       	std	Y+7, r24	; 0x07
     978:	16 c0       	rjmp	.+44     	; 0x9a6 <fcreatedir2+0x6e>
   } 
   //first, file does not exist
   if ( state == 0 ) {
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	9c 81       	ldd	r25, Y+4	; 0x04
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	71 f4       	brne	.+28     	; 0x99e <fcreatedir2+0x66>
      createDir( extractLastName( pathname ), retaddr );
     982:	8d 81       	ldd	r24, Y+5	; 0x05
     984:	9e 81       	ldd	r25, Y+6	; 0x06
     986:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <extractLastName>
     98a:	9c 01       	movw	r18, r24
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	bc 01       	movw	r22, r24
     992:	c9 01       	movw	r24, r18
     994:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <createDir>
      return 0;
     998:	18 86       	std	Y+8, r1	; 0x08
     99a:	1f 82       	std	Y+7, r1	; 0x07
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <fcreatedir2+0x6e>
   }
   return  - 1;
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	9f ef       	ldi	r25, 0xFF	; 255
     9a2:	98 87       	std	Y+8, r25	; 0x08
     9a4:	8f 83       	std	Y+7, r24	; 0x07
     9a6:	8f 81       	ldd	r24, Y+7	; 0x07
     9a8:	98 85       	ldd	r25, Y+8	; 0x08
     9aa:	28 96       	adiw	r28, 0x08	; 8
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <fdelete2>:
}

//-------------------------------------------------------------------------
int fdelete2( char *pathname ) {
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
     9c4:	26 97       	sbiw	r28, 0x06	; 6
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	9c 83       	std	Y+4, r25	; 0x04
     9d2:	8b 83       	std	Y+3, r24	; 0x03
   int ret;
   if (( ret = fexist2( pathname )) ==  - 1 ) {
     9d4:	8b 81       	ldd	r24, Y+3	; 0x03
     9d6:	9c 81       	ldd	r25, Y+4	; 0x04
     9d8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fexist2>
     9dc:	9a 83       	std	Y+2, r25	; 0x02
     9de:	89 83       	std	Y+1, r24	; 0x01
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	9a 81       	ldd	r25, Y+2	; 0x02
     9e4:	2f ef       	ldi	r18, 0xFF	; 255
     9e6:	8f 3f       	cpi	r24, 0xFF	; 255
     9e8:	92 07       	cpc	r25, r18
     9ea:	29 f4       	brne	.+10     	; 0x9f6 <fdelete2+0x3a>
      return  - 1;
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	9f ef       	ldi	r25, 0xFF	; 255
     9f0:	9e 83       	std	Y+6, r25	; 0x06
     9f2:	8d 83       	std	Y+5, r24	; 0x05
     9f4:	06 c0       	rjmp	.+12     	; 0xa02 <fdelete2+0x46>
   } else {
      deleteNode( ret );
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	0e 94 61 12 	call	0x24c2	; 0x24c2 <deleteNode>
      return 0;
     9fe:	1e 82       	std	Y+6, r1	; 0x06
     a00:	1d 82       	std	Y+5, r1	; 0x05
     a02:	8d 81       	ldd	r24, Y+5	; 0x05
     a04:	9e 81       	ldd	r25, Y+6	; 0x06
     a06:	26 96       	adiw	r28, 0x06	; 6
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <fcheckFSAllocation>:
   }
}

//-------------------------------------------------------------------------
int fcheckFSAllocation() {
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
   return countVectorNode();
     a20:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <countVectorNode>
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <fcheckStorageAllocation>:
}

//-------------------------------------------------------------------------
int fcheckStorageAllocation() {
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
   return countVectorFlash();
     a32:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <countVectorFlash>
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <fsprintall>:
}


//vs patch
void fsprintall() {
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	22 97       	sbiw	r28, 0x02	; 2
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
   int i;
   //  printf("*****************************************************************\n");
   for ( i = 0; i <= 96; i ++ ) {
     a50:	1a 82       	std	Y+2, r1	; 0x02
     a52:	19 82       	std	Y+1, r1	; 0x01
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <fsprintall+0x3a>
      if ( checkNodeValid( i ) > 0 ) {
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	9a 81       	ldd	r25, Y+2	; 0x02
     a5a:	0e 94 20 10 	call	0x2040	; 0x2040 <checkNodeValid>
     a5e:	18 16       	cp	r1, r24
     a60:	19 06       	cpc	r1, r25
     a62:	24 f4       	brge	.+8      	; 0xa6c <fsprintall+0x30>
         printNode( i );
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	9a 81       	ldd	r25, Y+2	; 0x02
     a68:	0e 94 9d 11 	call	0x233a	; 0x233a <printNode>
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	9a 81       	ldd	r25, Y+2	; 0x02
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	9a 83       	std	Y+2, r25	; 0x02
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	9a 81       	ldd	r25, Y+2	; 0x02
     a7a:	81 36       	cpi	r24, 0x61	; 97
     a7c:	91 05       	cpc	r25, r1
     a7e:	5c f3       	brlt	.-42     	; 0xa56 <fsprintall+0x1a>
     a80:	22 96       	adiw	r28, 0x02	; 2
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <fread2>:
      } 
   }
}

//-------------------------------------------------------------------------
int fread2( MYFILE *fp, void *buffer, int nBytes ) {
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	6b 97       	sbiw	r28, 0x1b	; 27
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	9f 87       	std	Y+15, r25	; 0x0f
     aa8:	8e 87       	std	Y+14, r24	; 0x0e
     aaa:	79 8b       	std	Y+17, r23	; 0x11
     aac:	68 8b       	std	Y+16, r22	; 0x10
     aae:	5b 8b       	std	Y+19, r21	; 0x13
     ab0:	4a 8b       	std	Y+18, r20	; 0x12
   int startsector;
   int endsector;
   uint8_t realsector;
   int readbytes;
   int pagenum, blockoffset, pageoffset;
   
   if ( fp->fpos + nBytes > fp->size ) {
     ab2:	ee 85       	ldd	r30, Y+14	; 0x0e
     ab4:	ff 85       	ldd	r31, Y+15	; 0x0f
     ab6:	26 81       	ldd	r18, Z+6	; 0x06
     ab8:	37 81       	ldd	r19, Z+7	; 0x07
     aba:	40 85       	ldd	r20, Z+8	; 0x08
     abc:	51 85       	ldd	r21, Z+9	; 0x09
     abe:	8a 89       	ldd	r24, Y+18	; 0x12
     ac0:	9b 89       	ldd	r25, Y+19	; 0x13
     ac2:	aa 27       	eor	r26, r26
     ac4:	97 fd       	sbrc	r25, 7
     ac6:	a0 95       	com	r26
     ac8:	ba 2f       	mov	r27, r26
     aca:	28 0f       	add	r18, r24
     acc:	39 1f       	adc	r19, r25
     ace:	4a 1f       	adc	r20, r26
     ad0:	5b 1f       	adc	r21, r27
     ad2:	ee 85       	ldd	r30, Y+14	; 0x0e
     ad4:	ff 85       	ldd	r31, Y+15	; 0x0f
     ad6:	84 81       	ldd	r24, Z+4	; 0x04
     ad8:	95 81       	ldd	r25, Z+5	; 0x05
     ada:	aa 27       	eor	r26, r26
     adc:	bb 27       	eor	r27, r27
     ade:	82 17       	cp	r24, r18
     ae0:	93 07       	cpc	r25, r19
     ae2:	a4 07       	cpc	r26, r20
     ae4:	b5 07       	cpc	r27, r21
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <fread2+0x60>
      return  - 1;
     ae8:	2f ef       	ldi	r18, 0xFF	; 255
     aea:	3f ef       	ldi	r19, 0xFF	; 255
     aec:	3d 8b       	std	Y+21, r19	; 0x15
     aee:	2c 8b       	std	Y+20, r18	; 0x14
     af0:	61 c1       	rjmp	.+706    	; 0xdb4 <fread2+0x322>
   }
   
   startsector = fp->fpos / 2048;
     af2:	ee 85       	ldd	r30, Y+14	; 0x0e
     af4:	ff 85       	ldd	r31, Y+15	; 0x0f
     af6:	86 81       	ldd	r24, Z+6	; 0x06
     af8:	97 81       	ldd	r25, Z+7	; 0x07
     afa:	a0 85       	ldd	r26, Z+8	; 0x08
     afc:	b1 85       	ldd	r27, Z+9	; 0x09
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	38 e0       	ldi	r19, 0x08	; 8
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	bc 01       	movw	r22, r24
     b08:	cd 01       	movw	r24, r26
     b0a:	0e 94 a3 a3 	call	0x14746	; 0x14746 <__divmodsi4>
     b0e:	da 01       	movw	r26, r20
     b10:	c9 01       	movw	r24, r18
     b12:	9d 87       	std	Y+13, r25	; 0x0d
     b14:	8c 87       	std	Y+12, r24	; 0x0c
   endsector = ( fp->fpos + nBytes - 1 ) / 2048;
     b16:	ee 85       	ldd	r30, Y+14	; 0x0e
     b18:	ff 85       	ldd	r31, Y+15	; 0x0f
     b1a:	26 81       	ldd	r18, Z+6	; 0x06
     b1c:	37 81       	ldd	r19, Z+7	; 0x07
     b1e:	40 85       	ldd	r20, Z+8	; 0x08
     b20:	51 85       	ldd	r21, Z+9	; 0x09
     b22:	8a 89       	ldd	r24, Y+18	; 0x12
     b24:	9b 89       	ldd	r25, Y+19	; 0x13
     b26:	aa 27       	eor	r26, r26
     b28:	97 fd       	sbrc	r25, 7
     b2a:	a0 95       	com	r26
     b2c:	ba 2f       	mov	r27, r26
     b2e:	82 0f       	add	r24, r18
     b30:	93 1f       	adc	r25, r19
     b32:	a4 1f       	adc	r26, r20
     b34:	b5 1f       	adc	r27, r21
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	a1 09       	sbc	r26, r1
     b3a:	b1 09       	sbc	r27, r1
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	38 e0       	ldi	r19, 0x08	; 8
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	bc 01       	movw	r22, r24
     b46:	cd 01       	movw	r24, r26
     b48:	0e 94 a3 a3 	call	0x14746	; 0x14746 <__divmodsi4>
     b4c:	da 01       	movw	r26, r20
     b4e:	c9 01       	movw	r24, r18
     b50:	9b 87       	std	Y+11, r25	; 0x0b
     b52:	8a 87       	std	Y+10, r24	; 0x0a
   if ( startsector == endsector ) {
     b54:	2c 85       	ldd	r18, Y+12	; 0x0c
     b56:	3d 85       	ldd	r19, Y+13	; 0x0d
     b58:	8a 85       	ldd	r24, Y+10	; 0x0a
     b5a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b5c:	28 17       	cp	r18, r24
     b5e:	39 07       	cpc	r19, r25
     b60:	09 f0       	breq	.+2      	; 0xb64 <fread2+0xd2>
     b62:	55 c0       	rjmp	.+170    	; 0xc0e <fread2+0x17c>
      blockoffset = fp->fpos % 2048;
     b64:	ee 85       	ldd	r30, Y+14	; 0x0e
     b66:	ff 85       	ldd	r31, Y+15	; 0x0f
     b68:	86 81       	ldd	r24, Z+6	; 0x06
     b6a:	97 81       	ldd	r25, Z+7	; 0x07
     b6c:	a0 85       	ldd	r26, Z+8	; 0x08
     b6e:	b1 85       	ldd	r27, Z+9	; 0x09
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	38 e0       	ldi	r19, 0x08	; 8
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	bc 01       	movw	r22, r24
     b7a:	cd 01       	movw	r24, r26
     b7c:	0e 94 a3 a3 	call	0x14746	; 0x14746 <__divmodsi4>
     b80:	dc 01       	movw	r26, r24
     b82:	cb 01       	movw	r24, r22
     b84:	9c 83       	std	Y+4, r25	; 0x04
     b86:	8b 83       	std	Y+3, r24	; 0x03
      pageoffset = blockoffset % 256;
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	31 e0       	ldi	r19, 0x01	; 1
     b90:	b9 01       	movw	r22, r18
     b92:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
      pagenum = blockoffset / 256;
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	9c 81       	ldd	r25, Y+4	; 0x04
     b9e:	9f 8b       	std	Y+23, r25	; 0x17
     ba0:	8e 8b       	std	Y+22, r24	; 0x16
     ba2:	4e 89       	ldd	r20, Y+22	; 0x16
     ba4:	5f 89       	ldd	r21, Y+23	; 0x17
     ba6:	55 23       	and	r21, r21
     ba8:	34 f4       	brge	.+12     	; 0xbb6 <fread2+0x124>
     baa:	8e 89       	ldd	r24, Y+22	; 0x16
     bac:	9f 89       	ldd	r25, Y+23	; 0x17
     bae:	81 50       	subi	r24, 0x01	; 1
     bb0:	9f 4f       	sbci	r25, 0xFF	; 255
     bb2:	9f 8b       	std	Y+23, r25	; 0x17
     bb4:	8e 8b       	std	Y+22, r24	; 0x16
     bb6:	2e 89       	ldd	r18, Y+22	; 0x16
     bb8:	3f 89       	ldd	r19, Y+23	; 0x17
     bba:	83 2f       	mov	r24, r19
     bbc:	99 27       	eor	r25, r25
     bbe:	87 fd       	sbrc	r24, 7
     bc0:	9a 95       	dec	r25
     bc2:	9e 83       	std	Y+6, r25	; 0x06
     bc4:	8d 83       	std	Y+5, r24	; 0x05
      //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
      //  realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
      realsector = getRealSector( fp->addr, startsector );
     bc6:	9c 85       	ldd	r25, Y+12	; 0x0c
     bc8:	ee 85       	ldd	r30, Y+14	; 0x0e
     bca:	ff 85       	ldd	r31, Y+15	; 0x0f
     bcc:	82 81       	ldd	r24, Z+2	; 0x02
     bce:	69 2f       	mov	r22, r25
     bd0:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <getRealSector>
     bd4:	89 87       	std	Y+9, r24	; 0x09
      pagenum = pagenum + ( realsector - 1 ) *8;
     bd6:	89 85       	ldd	r24, Y+9	; 0x09
     bd8:	99 27       	eor	r25, r25
     bda:	9c 01       	movw	r18, r24
     bdc:	22 0f       	add	r18, r18
     bde:	33 1f       	adc	r19, r19
     be0:	22 0f       	add	r18, r18
     be2:	33 1f       	adc	r19, r19
     be4:	22 0f       	add	r18, r18
     be6:	33 1f       	adc	r19, r19
     be8:	8d 81       	ldd	r24, Y+5	; 0x05
     bea:	9e 81       	ldd	r25, Y+6	; 0x06
     bec:	82 0f       	add	r24, r18
     bee:	93 1f       	adc	r25, r19
     bf0:	08 97       	sbiw	r24, 0x08	; 8
     bf2:	9e 83       	std	Y+6, r25	; 0x06
     bf4:	8d 83       	std	Y+5, r24	; 0x05
      //now pagenum, offset2 means the actual start location just read it
      readpagestorage( pagenum, pageoffset, buffer, nBytes );
     bf6:	69 81       	ldd	r22, Y+1	; 0x01
     bf8:	8a 89       	ldd	r24, Y+18	; 0x12
     bfa:	9b 89       	ldd	r25, Y+19	; 0x13
     bfc:	48 89       	ldd	r20, Y+16	; 0x10
     bfe:	59 89       	ldd	r21, Y+17	; 0x11
     c00:	ed 81       	ldd	r30, Y+5	; 0x05
     c02:	fe 81       	ldd	r31, Y+6	; 0x06
     c04:	9c 01       	movw	r18, r24
     c06:	cf 01       	movw	r24, r30
     c08:	0e 94 2c 8a 	call	0x11458	; 0x11458 <readpagestorage>
     c0c:	d1 c0       	rjmp	.+418    	; 0xdb0 <fread2+0x31e>
   } else {
      blockoffset = fp->fpos % 2048;
     c0e:	ee 85       	ldd	r30, Y+14	; 0x0e
     c10:	ff 85       	ldd	r31, Y+15	; 0x0f
     c12:	86 81       	ldd	r24, Z+6	; 0x06
     c14:	97 81       	ldd	r25, Z+7	; 0x07
     c16:	a0 85       	ldd	r26, Z+8	; 0x08
     c18:	b1 85       	ldd	r27, Z+9	; 0x09
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	38 e0       	ldi	r19, 0x08	; 8
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 a3 a3 	call	0x14746	; 0x14746 <__divmodsi4>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	8b 83       	std	Y+3, r24	; 0x03
      pageoffset = blockoffset % 256;
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	31 e0       	ldi	r19, 0x01	; 1
     c3a:	b9 01       	movw	r22, r18
     c3c:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	89 83       	std	Y+1, r24	; 0x01
      pagenum = blockoffset / 256;
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	9c 81       	ldd	r25, Y+4	; 0x04
     c48:	99 8f       	std	Y+25, r25	; 0x19
     c4a:	88 8f       	std	Y+24, r24	; 0x18
     c4c:	48 8d       	ldd	r20, Y+24	; 0x18
     c4e:	59 8d       	ldd	r21, Y+25	; 0x19
     c50:	55 23       	and	r21, r21
     c52:	34 f4       	brge	.+12     	; 0xc60 <fread2+0x1ce>
     c54:	88 8d       	ldd	r24, Y+24	; 0x18
     c56:	99 8d       	ldd	r25, Y+25	; 0x19
     c58:	81 50       	subi	r24, 0x01	; 1
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	99 8f       	std	Y+25, r25	; 0x19
     c5e:	88 8f       	std	Y+24, r24	; 0x18
     c60:	28 8d       	ldd	r18, Y+24	; 0x18
     c62:	39 8d       	ldd	r19, Y+25	; 0x19
     c64:	83 2f       	mov	r24, r19
     c66:	99 27       	eor	r25, r25
     c68:	87 fd       	sbrc	r24, 7
     c6a:	9a 95       	dec	r25
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
      //	realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
      //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
      realsector = getRealSector( fp->addr, startsector );
     c70:	9c 85       	ldd	r25, Y+12	; 0x0c
     c72:	ee 85       	ldd	r30, Y+14	; 0x0e
     c74:	ff 85       	ldd	r31, Y+15	; 0x0f
     c76:	82 81       	ldd	r24, Z+2	; 0x02
     c78:	69 2f       	mov	r22, r25
     c7a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <getRealSector>
     c7e:	89 87       	std	Y+9, r24	; 0x09
      pagenum = pagenum + ( realsector - 1 ) *8;
     c80:	89 85       	ldd	r24, Y+9	; 0x09
     c82:	99 27       	eor	r25, r25
     c84:	9c 01       	movw	r18, r24
     c86:	22 0f       	add	r18, r18
     c88:	33 1f       	adc	r19, r19
     c8a:	22 0f       	add	r18, r18
     c8c:	33 1f       	adc	r19, r19
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	8d 81       	ldd	r24, Y+5	; 0x05
     c94:	9e 81       	ldd	r25, Y+6	; 0x06
     c96:	82 0f       	add	r24, r18
     c98:	93 1f       	adc	r25, r19
     c9a:	08 97       	sbiw	r24, 0x08	; 8
     c9c:	9e 83       	std	Y+6, r25	; 0x06
     c9e:	8d 83       	std	Y+5, r24	; 0x05
      readbytes = 256-pageoffset;
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	31 e0       	ldi	r19, 0x01	; 1
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	a9 01       	movw	r20, r18
     caa:	48 1b       	sub	r20, r24
     cac:	59 0b       	sbc	r21, r25
     cae:	ca 01       	movw	r24, r20
     cb0:	98 87       	std	Y+8, r25	; 0x08
     cb2:	8f 83       	std	Y+7, r24	; 0x07
      //now pagenum, offset2 means the actual start location just read it
      readpagestorage( pagenum, pageoffset, buffer, readbytes );
     cb4:	69 81       	ldd	r22, Y+1	; 0x01
     cb6:	8f 81       	ldd	r24, Y+7	; 0x07
     cb8:	98 85       	ldd	r25, Y+8	; 0x08
     cba:	48 89       	ldd	r20, Y+16	; 0x10
     cbc:	59 89       	ldd	r21, Y+17	; 0x11
     cbe:	ed 81       	ldd	r30, Y+5	; 0x05
     cc0:	fe 81       	ldd	r31, Y+6	; 0x06
     cc2:	9c 01       	movw	r18, r24
     cc4:	cf 01       	movw	r24, r30
     cc6:	0e 94 2c 8a 	call	0x11458	; 0x11458 <readpagestorage>
      buffer = ( void* )(( char* )buffer + readbytes );
     cca:	28 89       	ldd	r18, Y+16	; 0x10
     ccc:	39 89       	ldd	r19, Y+17	; 0x11
     cce:	8f 81       	ldd	r24, Y+7	; 0x07
     cd0:	98 85       	ldd	r25, Y+8	; 0x08
     cd2:	82 0f       	add	r24, r18
     cd4:	93 1f       	adc	r25, r19
     cd6:	99 8b       	std	Y+17, r25	; 0x11
     cd8:	88 8b       	std	Y+16, r24	; 0x10
      blockoffset = ( fp->fpos + nBytes - 1 ) % 2048;
     cda:	ee 85       	ldd	r30, Y+14	; 0x0e
     cdc:	ff 85       	ldd	r31, Y+15	; 0x0f
     cde:	26 81       	ldd	r18, Z+6	; 0x06
     ce0:	37 81       	ldd	r19, Z+7	; 0x07
     ce2:	40 85       	ldd	r20, Z+8	; 0x08
     ce4:	51 85       	ldd	r21, Z+9	; 0x09
     ce6:	8a 89       	ldd	r24, Y+18	; 0x12
     ce8:	9b 89       	ldd	r25, Y+19	; 0x13
     cea:	aa 27       	eor	r26, r26
     cec:	97 fd       	sbrc	r25, 7
     cee:	a0 95       	com	r26
     cf0:	ba 2f       	mov	r27, r26
     cf2:	82 0f       	add	r24, r18
     cf4:	93 1f       	adc	r25, r19
     cf6:	a4 1f       	adc	r26, r20
     cf8:	b5 1f       	adc	r27, r21
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	a1 09       	sbc	r26, r1
     cfe:	b1 09       	sbc	r27, r1
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	38 e0       	ldi	r19, 0x08	; 8
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	bc 01       	movw	r22, r24
     d0a:	cd 01       	movw	r24, r26
     d0c:	0e 94 a3 a3 	call	0x14746	; 0x14746 <__divmodsi4>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	9c 83       	std	Y+4, r25	; 0x04
     d16:	8b 83       	std	Y+3, r24	; 0x03
      pageoffset = blockoffset % 256;
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	9c 81       	ldd	r25, Y+4	; 0x04
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	31 e0       	ldi	r19, 0x01	; 1
     d20:	b9 01       	movw	r22, r18
     d22:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
     d26:	9a 83       	std	Y+2, r25	; 0x02
     d28:	89 83       	std	Y+1, r24	; 0x01
      pagenum = blockoffset / 256;
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	9c 81       	ldd	r25, Y+4	; 0x04
     d2e:	9b 8f       	std	Y+27, r25	; 0x1b
     d30:	8a 8f       	std	Y+26, r24	; 0x1a
     d32:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d34:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d36:	99 23       	and	r25, r25
     d38:	34 f4       	brge	.+12     	; 0xd46 <fread2+0x2b4>
     d3a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     d3c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     d3e:	21 50       	subi	r18, 0x01	; 1
     d40:	3f 4f       	sbci	r19, 0xFF	; 255
     d42:	3b 8f       	std	Y+27, r19	; 0x1b
     d44:	2a 8f       	std	Y+26, r18	; 0x1a
     d46:	4a 8d       	ldd	r20, Y+26	; 0x1a
     d48:	5b 8d       	ldd	r21, Y+27	; 0x1b
     d4a:	85 2f       	mov	r24, r21
     d4c:	99 27       	eor	r25, r25
     d4e:	87 fd       	sbrc	r24, 7
     d50:	9a 95       	dec	r25
     d52:	9e 83       	std	Y+6, r25	; 0x06
     d54:	8d 83       	std	Y+5, r24	; 0x05
      //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
      //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
      realsector = getRealSector( fp->addr, endsector );
     d56:	9a 85       	ldd	r25, Y+10	; 0x0a
     d58:	ee 85       	ldd	r30, Y+14	; 0x0e
     d5a:	ff 85       	ldd	r31, Y+15	; 0x0f
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	69 2f       	mov	r22, r25
     d60:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <getRealSector>
     d64:	89 87       	std	Y+9, r24	; 0x09
      pagenum = pagenum + ( realsector - 1 ) *8;
     d66:	89 85       	ldd	r24, Y+9	; 0x09
     d68:	99 27       	eor	r25, r25
     d6a:	9c 01       	movw	r18, r24
     d6c:	22 0f       	add	r18, r18
     d6e:	33 1f       	adc	r19, r19
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	22 0f       	add	r18, r18
     d76:	33 1f       	adc	r19, r19
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
     d7a:	9e 81       	ldd	r25, Y+6	; 0x06
     d7c:	82 0f       	add	r24, r18
     d7e:	93 1f       	adc	r25, r19
     d80:	08 97       	sbiw	r24, 0x08	; 8
     d82:	9e 83       	std	Y+6, r25	; 0x06
     d84:	8d 83       	std	Y+5, r24	; 0x05
      readbytes = nBytes - readbytes;
     d86:	2a 89       	ldd	r18, Y+18	; 0x12
     d88:	3b 89       	ldd	r19, Y+19	; 0x13
     d8a:	8f 81       	ldd	r24, Y+7	; 0x07
     d8c:	98 85       	ldd	r25, Y+8	; 0x08
     d8e:	a9 01       	movw	r20, r18
     d90:	48 1b       	sub	r20, r24
     d92:	59 0b       	sbc	r21, r25
     d94:	ca 01       	movw	r24, r20
     d96:	98 87       	std	Y+8, r25	; 0x08
     d98:	8f 83       	std	Y+7, r24	; 0x07
      //now pagenum, offset2 means the actual start location just read it
      readpagestorage( pagenum, 0, buffer, readbytes );
     d9a:	8f 81       	ldd	r24, Y+7	; 0x07
     d9c:	98 85       	ldd	r25, Y+8	; 0x08
     d9e:	48 89       	ldd	r20, Y+16	; 0x10
     da0:	59 89       	ldd	r21, Y+17	; 0x11
     da2:	ed 81       	ldd	r30, Y+5	; 0x05
     da4:	fe 81       	ldd	r31, Y+6	; 0x06
     da6:	9c 01       	movw	r18, r24
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	cf 01       	movw	r24, r30
     dac:	0e 94 2c 8a 	call	0x11458	; 0x11458 <readpagestorage>
   }
   return 0;
     db0:	1d 8a       	std	Y+21, r1	; 0x15
     db2:	1c 8a       	std	Y+20, r1	; 0x14
     db4:	8c 89       	ldd	r24, Y+20	; 0x14
     db6:	9d 89       	ldd	r25, Y+21	; 0x15
     db8:	6b 96       	adiw	r28, 0x1b	; 27
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret

00000dca <fwrite2>:
}

//-------------------------------------------------------------------------
int fwrite2( MYFILE *fp, void *buffer, int nBytes ) {
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	6b 97       	sbiw	r28, 0x1b	; 27
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	99 8b       	std	Y+17, r25	; 0x11
     de0:	88 8b       	std	Y+16, r24	; 0x10
     de2:	7b 8b       	std	Y+19, r23	; 0x13
     de4:	6a 8b       	std	Y+18, r22	; 0x12
     de6:	5d 8b       	std	Y+21, r21	; 0x15
     de8:	4c 8b       	std	Y+20, r20	; 0x14
   int startsector;
   int endsector;
   uint8_t realsector;
   int readbytes;
   int pagenum, blockoffset, pageoffset;
   //first it checks whether there is enough space for the writing to take place, then it does the actual writing in the same way as above 
   if ( fp->fpos + nBytes <= fp->size ) {
     dea:	e8 89       	ldd	r30, Y+16	; 0x10
     dec:	f9 89       	ldd	r31, Y+17	; 0x11
     dee:	26 81       	ldd	r18, Z+6	; 0x06
     df0:	37 81       	ldd	r19, Z+7	; 0x07
     df2:	40 85       	ldd	r20, Z+8	; 0x08
     df4:	51 85       	ldd	r21, Z+9	; 0x09
     df6:	8c 89       	ldd	r24, Y+20	; 0x14
     df8:	9d 89       	ldd	r25, Y+21	; 0x15
     dfa:	aa 27       	eor	r26, r26
     dfc:	97 fd       	sbrc	r25, 7
     dfe:	a0 95       	com	r26
     e00:	ba 2f       	mov	r27, r26
     e02:	28 0f       	add	r18, r24
     e04:	39 1f       	adc	r19, r25
     e06:	4a 1f       	adc	r20, r26
     e08:	5b 1f       	adc	r21, r27
     e0a:	e8 89       	ldd	r30, Y+16	; 0x10
     e0c:	f9 89       	ldd	r31, Y+17	; 0x11
     e0e:	84 81       	ldd	r24, Z+4	; 0x04
     e10:	95 81       	ldd	r25, Z+5	; 0x05
     e12:	aa 27       	eor	r26, r26
     e14:	bb 27       	eor	r27, r27
     e16:	82 17       	cp	r24, r18
     e18:	93 07       	cpc	r25, r19
     e1a:	a4 07       	cpc	r26, r20
     e1c:	b5 07       	cpc	r27, r21
     e1e:	0c f0       	brlt	.+2      	; 0xe22 <fwrite2+0x58>
     e20:	84 c0       	rjmp	.+264    	; 0xf2a <fwrite2+0x160>
      //there is no need to change the size or allocate more space for the write
   } else {
      uint16_t allocate;
      allocate = ( fp->size / 2048 ) *2048;
     e22:	e8 89       	ldd	r30, Y+16	; 0x10
     e24:	f9 89       	ldd	r31, Y+17	; 0x11
     e26:	84 81       	ldd	r24, Z+4	; 0x04
     e28:	95 81       	ldd	r25, Z+5	; 0x05
     e2a:	89 2f       	mov	r24, r25
     e2c:	99 27       	eor	r25, r25
     e2e:	86 95       	lsr	r24
     e30:	86 95       	lsr	r24
     e32:	86 95       	lsr	r24
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	9a 83       	std	Y+2, r25	; 0x02
     e62:	89 83       	std	Y+1, r24	; 0x01
      if ( fp->size % 2048 > 0 ) {
     e64:	e8 89       	ldd	r30, Y+16	; 0x10
     e66:	f9 89       	ldd	r31, Y+17	; 0x11
     e68:	84 81       	ldd	r24, Z+4	; 0x04
     e6a:	95 81       	ldd	r25, Z+5	; 0x05
     e6c:	97 70       	andi	r25, 0x07	; 7
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	31 f0       	breq	.+12     	; 0xe7e <fwrite2+0xb4>
         allocate += 2048;
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	80 50       	subi	r24, 0x00	; 0
     e78:	98 4f       	sbci	r25, 0xF8	; 248
     e7a:	9a 83       	std	Y+2, r25	; 0x02
     e7c:	89 83       	std	Y+1, r24	; 0x01
      } 
      //     if ((allocate == 32768)&&(fp->fpos + nBytes > 32768))
      //	   foobar(); 
      if ( fp->fpos + nBytes > allocate ) {
     e7e:	e8 89       	ldd	r30, Y+16	; 0x10
     e80:	f9 89       	ldd	r31, Y+17	; 0x11
     e82:	26 81       	ldd	r18, Z+6	; 0x06
     e84:	37 81       	ldd	r19, Z+7	; 0x07
     e86:	40 85       	ldd	r20, Z+8	; 0x08
     e88:	51 85       	ldd	r21, Z+9	; 0x09
     e8a:	8c 89       	ldd	r24, Y+20	; 0x14
     e8c:	9d 89       	ldd	r25, Y+21	; 0x15
     e8e:	aa 27       	eor	r26, r26
     e90:	97 fd       	sbrc	r25, 7
     e92:	a0 95       	com	r26
     e94:	ba 2f       	mov	r27, r26
     e96:	28 0f       	add	r18, r24
     e98:	39 1f       	adc	r19, r25
     e9a:	4a 1f       	adc	r20, r26
     e9c:	5b 1f       	adc	r21, r27
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	aa 27       	eor	r26, r26
     ea4:	bb 27       	eor	r27, r27
     ea6:	82 17       	cp	r24, r18
     ea8:	93 07       	cpc	r25, r19
     eaa:	a4 07       	cpc	r26, r20
     eac:	b5 07       	cpc	r27, r21
     eae:	34 f4       	brge	.+12     	; 0xebc <fwrite2+0xf2>
         newSector( fp->addr );
     eb0:	e8 89       	ldd	r30, Y+16	; 0x10
     eb2:	f9 89       	ldd	r31, Y+17	; 0x11
     eb4:	82 81       	ldd	r24, Z+2	; 0x02
     eb6:	99 27       	eor	r25, r25
     eb8:	0e 94 07 1b 	call	0x360e	; 0x360e <newSector>
      } if ( fp->fpos + nBytes > fp->size ) {
     ebc:	e8 89       	ldd	r30, Y+16	; 0x10
     ebe:	f9 89       	ldd	r31, Y+17	; 0x11
     ec0:	26 81       	ldd	r18, Z+6	; 0x06
     ec2:	37 81       	ldd	r19, Z+7	; 0x07
     ec4:	40 85       	ldd	r20, Z+8	; 0x08
     ec6:	51 85       	ldd	r21, Z+9	; 0x09
     ec8:	8c 89       	ldd	r24, Y+20	; 0x14
     eca:	9d 89       	ldd	r25, Y+21	; 0x15
     ecc:	aa 27       	eor	r26, r26
     ece:	97 fd       	sbrc	r25, 7
     ed0:	a0 95       	com	r26
     ed2:	ba 2f       	mov	r27, r26
     ed4:	28 0f       	add	r18, r24
     ed6:	39 1f       	adc	r19, r25
     ed8:	4a 1f       	adc	r20, r26
     eda:	5b 1f       	adc	r21, r27
     edc:	e8 89       	ldd	r30, Y+16	; 0x10
     ede:	f9 89       	ldd	r31, Y+17	; 0x11
     ee0:	84 81       	ldd	r24, Z+4	; 0x04
     ee2:	95 81       	ldd	r25, Z+5	; 0x05
     ee4:	aa 27       	eor	r26, r26
     ee6:	bb 27       	eor	r27, r27
     ee8:	82 17       	cp	r24, r18
     eea:	93 07       	cpc	r25, r19
     eec:	a4 07       	cpc	r26, r20
     eee:	b5 07       	cpc	r27, r21
     ef0:	e4 f4       	brge	.+56     	; 0xf2a <fwrite2+0x160>
         fp->size = fp->fpos + nBytes;
     ef2:	e8 89       	ldd	r30, Y+16	; 0x10
     ef4:	f9 89       	ldd	r31, Y+17	; 0x11
     ef6:	86 81       	ldd	r24, Z+6	; 0x06
     ef8:	97 81       	ldd	r25, Z+7	; 0x07
     efa:	a0 85       	ldd	r26, Z+8	; 0x08
     efc:	b1 85       	ldd	r27, Z+9	; 0x09
     efe:	9c 01       	movw	r18, r24
     f00:	8c 89       	ldd	r24, Y+20	; 0x14
     f02:	9d 89       	ldd	r25, Y+21	; 0x15
     f04:	82 0f       	add	r24, r18
     f06:	93 1f       	adc	r25, r19
     f08:	e8 89       	ldd	r30, Y+16	; 0x10
     f0a:	f9 89       	ldd	r31, Y+17	; 0x11
     f0c:	95 83       	std	Z+5, r25	; 0x05
     f0e:	84 83       	std	Z+4, r24	; 0x04
         fswrite16uint( fp->addr, FILE_SIZEOFFSET, fp->size );
     f10:	e8 89       	ldd	r30, Y+16	; 0x10
     f12:	f9 89       	ldd	r31, Y+17	; 0x11
     f14:	24 81       	ldd	r18, Z+4	; 0x04
     f16:	35 81       	ldd	r19, Z+5	; 0x05
     f18:	e8 89       	ldd	r30, Y+16	; 0x10
     f1a:	f9 89       	ldd	r31, Y+17	; 0x11
     f1c:	82 81       	ldd	r24, Z+2	; 0x02
     f1e:	99 27       	eor	r25, r25
     f20:	a9 01       	movw	r20, r18
     f22:	6d e1       	ldi	r22, 0x1D	; 29
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <fswrite16uint>
      }
   }
   startsector = fp->fpos / 2048;
     f2a:	e8 89       	ldd	r30, Y+16	; 0x10
     f2c:	f9 89       	ldd	r31, Y+17	; 0x11
     f2e:	86 81       	ldd	r24, Z+6	; 0x06
     f30:	97 81       	ldd	r25, Z+7	; 0x07
     f32:	a0 85       	ldd	r26, Z+8	; 0x08
     f34:	b1 85       	ldd	r27, Z+9	; 0x09
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	38 e0       	ldi	r19, 0x08	; 8
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	0e 94 a3 a3 	call	0x14746	; 0x14746 <__divmodsi4>
     f46:	da 01       	movw	r26, r20
     f48:	c9 01       	movw	r24, r18
     f4a:	9f 87       	std	Y+15, r25	; 0x0f
     f4c:	8e 87       	std	Y+14, r24	; 0x0e
   endsector = ( fp->fpos + nBytes - 1 ) / 2048;
     f4e:	e8 89       	ldd	r30, Y+16	; 0x10
     f50:	f9 89       	ldd	r31, Y+17	; 0x11
     f52:	26 81       	ldd	r18, Z+6	; 0x06
     f54:	37 81       	ldd	r19, Z+7	; 0x07
     f56:	40 85       	ldd	r20, Z+8	; 0x08
     f58:	51 85       	ldd	r21, Z+9	; 0x09
     f5a:	8c 89       	ldd	r24, Y+20	; 0x14
     f5c:	9d 89       	ldd	r25, Y+21	; 0x15
     f5e:	aa 27       	eor	r26, r26
     f60:	97 fd       	sbrc	r25, 7
     f62:	a0 95       	com	r26
     f64:	ba 2f       	mov	r27, r26
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	a4 1f       	adc	r26, r20
     f6c:	b5 1f       	adc	r27, r21
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	a1 09       	sbc	r26, r1
     f72:	b1 09       	sbc	r27, r1
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	38 e0       	ldi	r19, 0x08	; 8
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	bc 01       	movw	r22, r24
     f7e:	cd 01       	movw	r24, r26
     f80:	0e 94 a3 a3 	call	0x14746	; 0x14746 <__divmodsi4>
     f84:	da 01       	movw	r26, r20
     f86:	c9 01       	movw	r24, r18
     f88:	9d 87       	std	Y+13, r25	; 0x0d
     f8a:	8c 87       	std	Y+12, r24	; 0x0c
   if ( startsector == endsector ) {
     f8c:	2e 85       	ldd	r18, Y+14	; 0x0e
     f8e:	3f 85       	ldd	r19, Y+15	; 0x0f
     f90:	8c 85       	ldd	r24, Y+12	; 0x0c
     f92:	9d 85       	ldd	r25, Y+13	; 0x0d
     f94:	28 17       	cp	r18, r24
     f96:	39 07       	cpc	r19, r25
     f98:	09 f0       	breq	.+2      	; 0xf9c <fwrite2+0x1d2>
     f9a:	55 c0       	rjmp	.+170    	; 0x1046 <fwrite2+0x27c>
      blockoffset = fp->fpos % 2048;
     f9c:	e8 89       	ldd	r30, Y+16	; 0x10
     f9e:	f9 89       	ldd	r31, Y+17	; 0x11
     fa0:	86 81       	ldd	r24, Z+6	; 0x06
     fa2:	97 81       	ldd	r25, Z+7	; 0x07
     fa4:	a0 85       	ldd	r26, Z+8	; 0x08
     fa6:	b1 85       	ldd	r27, Z+9	; 0x09
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	38 e0       	ldi	r19, 0x08	; 8
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	0e 94 a3 a3 	call	0x14746	; 0x14746 <__divmodsi4>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	9e 83       	std	Y+6, r25	; 0x06
     fbe:	8d 83       	std	Y+5, r24	; 0x05
      pageoffset = blockoffset % 256;
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	9e 81       	ldd	r25, Y+6	; 0x06
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	31 e0       	ldi	r19, 0x01	; 1
     fc8:	b9 01       	movw	r22, r18
     fca:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
     fce:	9c 83       	std	Y+4, r25	; 0x04
     fd0:	8b 83       	std	Y+3, r24	; 0x03
      pagenum = blockoffset / 256;
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	9f 8b       	std	Y+23, r25	; 0x17
     fd8:	8e 8b       	std	Y+22, r24	; 0x16
     fda:	2e 89       	ldd	r18, Y+22	; 0x16
     fdc:	3f 89       	ldd	r19, Y+23	; 0x17
     fde:	33 23       	and	r19, r19
     fe0:	34 f4       	brge	.+12     	; 0xfee <fwrite2+0x224>
     fe2:	4e 89       	ldd	r20, Y+22	; 0x16
     fe4:	5f 89       	ldd	r21, Y+23	; 0x17
     fe6:	41 50       	subi	r20, 0x01	; 1
     fe8:	5f 4f       	sbci	r21, 0xFF	; 255
     fea:	5f 8b       	std	Y+23, r21	; 0x17
     fec:	4e 8b       	std	Y+22, r20	; 0x16
     fee:	2e 89       	ldd	r18, Y+22	; 0x16
     ff0:	3f 89       	ldd	r19, Y+23	; 0x17
     ff2:	83 2f       	mov	r24, r19
     ff4:	99 27       	eor	r25, r25
     ff6:	87 fd       	sbrc	r24, 7
     ff8:	9a 95       	dec	r25
     ffa:	98 87       	std	Y+8, r25	; 0x08
     ffc:	8f 83       	std	Y+7, r24	; 0x07
      //	realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
      //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
      realsector = getRealSector( fp->addr, startsector );
     ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1000:	e8 89       	ldd	r30, Y+16	; 0x10
    1002:	f9 89       	ldd	r31, Y+17	; 0x11
    1004:	82 81       	ldd	r24, Z+2	; 0x02
    1006:	69 2f       	mov	r22, r25
    1008:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <getRealSector>
    100c:	8b 87       	std	Y+11, r24	; 0x0b
      pagenum = pagenum + ( realsector - 1 ) *8;
    100e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1010:	99 27       	eor	r25, r25
    1012:	9c 01       	movw	r18, r24
    1014:	22 0f       	add	r18, r18
    1016:	33 1f       	adc	r19, r19
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	8f 81       	ldd	r24, Y+7	; 0x07
    1022:	98 85       	ldd	r25, Y+8	; 0x08
    1024:	82 0f       	add	r24, r18
    1026:	93 1f       	adc	r25, r19
    1028:	08 97       	sbiw	r24, 0x08	; 8
    102a:	98 87       	std	Y+8, r25	; 0x08
    102c:	8f 83       	std	Y+7, r24	; 0x07
      //now pagenum, offset2 means the actual start location just read it
      writepagestorage( pagenum, pageoffset, buffer, nBytes );
    102e:	6b 81       	ldd	r22, Y+3	; 0x03
    1030:	8c 89       	ldd	r24, Y+20	; 0x14
    1032:	9d 89       	ldd	r25, Y+21	; 0x15
    1034:	4a 89       	ldd	r20, Y+18	; 0x12
    1036:	5b 89       	ldd	r21, Y+19	; 0x13
    1038:	ef 81       	ldd	r30, Y+7	; 0x07
    103a:	f8 85       	ldd	r31, Y+8	; 0x08
    103c:	9c 01       	movw	r18, r24
    103e:	cf 01       	movw	r24, r30
    1040:	0e 94 51 8a 	call	0x114a2	; 0x114a2 <writepagestorage>
    1044:	d1 c0       	rjmp	.+418    	; 0x11e8 <__stack+0xe9>
   } else {
      blockoffset = fp->fpos % 2048;
    1046:	e8 89       	ldd	r30, Y+16	; 0x10
    1048:	f9 89       	ldd	r31, Y+17	; 0x11
    104a:	86 81       	ldd	r24, Z+6	; 0x06
    104c:	97 81       	ldd	r25, Z+7	; 0x07
    104e:	a0 85       	ldd	r26, Z+8	; 0x08
    1050:	b1 85       	ldd	r27, Z+9	; 0x09
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	38 e0       	ldi	r19, 0x08	; 8
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	0e 94 a3 a3 	call	0x14746	; 0x14746 <__divmodsi4>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	9e 83       	std	Y+6, r25	; 0x06
    1068:	8d 83       	std	Y+5, r24	; 0x05
      pageoffset = blockoffset % 256;
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	31 e0       	ldi	r19, 0x01	; 1
    1072:	b9 01       	movw	r22, r18
    1074:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	8b 83       	std	Y+3, r24	; 0x03
      pagenum = blockoffset / 256;
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	9e 81       	ldd	r25, Y+6	; 0x06
    1080:	99 8f       	std	Y+25, r25	; 0x19
    1082:	88 8f       	std	Y+24, r24	; 0x18
    1084:	48 8d       	ldd	r20, Y+24	; 0x18
    1086:	59 8d       	ldd	r21, Y+25	; 0x19
    1088:	55 23       	and	r21, r21
    108a:	34 f4       	brge	.+12     	; 0x1098 <fwrite2+0x2ce>
    108c:	88 8d       	ldd	r24, Y+24	; 0x18
    108e:	99 8d       	ldd	r25, Y+25	; 0x19
    1090:	81 50       	subi	r24, 0x01	; 1
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	99 8f       	std	Y+25, r25	; 0x19
    1096:	88 8f       	std	Y+24, r24	; 0x18
    1098:	28 8d       	ldd	r18, Y+24	; 0x18
    109a:	39 8d       	ldd	r19, Y+25	; 0x19
    109c:	83 2f       	mov	r24, r19
    109e:	99 27       	eor	r25, r25
    10a0:	87 fd       	sbrc	r24, 7
    10a2:	9a 95       	dec	r25
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	8f 83       	std	Y+7, r24	; 0x07
      //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
      //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
      realsector = getRealSector( fp->addr, startsector );
    10a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10aa:	e8 89       	ldd	r30, Y+16	; 0x10
    10ac:	f9 89       	ldd	r31, Y+17	; 0x11
    10ae:	82 81       	ldd	r24, Z+2	; 0x02
    10b0:	69 2f       	mov	r22, r25
    10b2:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <getRealSector>
    10b6:	8b 87       	std	Y+11, r24	; 0x0b
      pagenum = pagenum + ( realsector - 1 ) *8;
    10b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    10ba:	99 27       	eor	r25, r25
    10bc:	9c 01       	movw	r18, r24
    10be:	22 0f       	add	r18, r18
    10c0:	33 1f       	adc	r19, r19
    10c2:	22 0f       	add	r18, r18
    10c4:	33 1f       	adc	r19, r19
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	8f 81       	ldd	r24, Y+7	; 0x07
    10cc:	98 85       	ldd	r25, Y+8	; 0x08
    10ce:	82 0f       	add	r24, r18
    10d0:	93 1f       	adc	r25, r19
    10d2:	08 97       	sbiw	r24, 0x08	; 8
    10d4:	98 87       	std	Y+8, r25	; 0x08
    10d6:	8f 83       	std	Y+7, r24	; 0x07
      readbytes = 256-pageoffset;
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	31 e0       	ldi	r19, 0x01	; 1
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	a9 01       	movw	r20, r18
    10e2:	48 1b       	sub	r20, r24
    10e4:	59 0b       	sbc	r21, r25
    10e6:	ca 01       	movw	r24, r20
    10e8:	9a 87       	std	Y+10, r25	; 0x0a
    10ea:	89 87       	std	Y+9, r24	; 0x09
      //now pagenum, offset2 means the actual start location just read it
      writepagestorage( pagenum, pageoffset, buffer, readbytes );
    10ec:	6b 81       	ldd	r22, Y+3	; 0x03
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	4a 89       	ldd	r20, Y+18	; 0x12
    10f4:	5b 89       	ldd	r21, Y+19	; 0x13
    10f6:	ef 81       	ldd	r30, Y+7	; 0x07
    10f8:	f8 85       	ldd	r31, Y+8	; 0x08
    10fa:	9c 01       	movw	r18, r24
    10fc:	cf 01       	movw	r24, r30
    10fe:	0e 94 51 8a 	call	0x114a2	; 0x114a2 <writepagestorage>
      buffer = ( void* )(( char* )buffer + readbytes );
    1102:	2a 89       	ldd	r18, Y+18	; 0x12
    1104:	3b 89       	ldd	r19, Y+19	; 0x13
    1106:	89 85       	ldd	r24, Y+9	; 0x09
    1108:	9a 85       	ldd	r25, Y+10	; 0x0a
    110a:	82 0f       	add	r24, r18
    110c:	93 1f       	adc	r25, r19
    110e:	9b 8b       	std	Y+19, r25	; 0x13
    1110:	8a 8b       	std	Y+18, r24	; 0x12
      blockoffset = ( fp->fpos + nBytes - 1 ) % 2048;
    1112:	e8 89       	ldd	r30, Y+16	; 0x10
    1114:	f9 89       	ldd	r31, Y+17	; 0x11
    1116:	26 81       	ldd	r18, Z+6	; 0x06
    1118:	37 81       	ldd	r19, Z+7	; 0x07
    111a:	40 85       	ldd	r20, Z+8	; 0x08
    111c:	51 85       	ldd	r21, Z+9	; 0x09
    111e:	8c 89       	ldd	r24, Y+20	; 0x14
    1120:	9d 89       	ldd	r25, Y+21	; 0x15
    1122:	aa 27       	eor	r26, r26
    1124:	97 fd       	sbrc	r25, 7
    1126:	a0 95       	com	r26
    1128:	ba 2f       	mov	r27, r26
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	a4 1f       	adc	r26, r20
    1130:	b5 1f       	adc	r27, r21
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	a1 09       	sbc	r26, r1
    1136:	b1 09       	sbc	r27, r1
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	38 e0       	ldi	r19, 0x08	; 8
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 a3 a3 	call	0x14746	; 0x14746 <__divmodsi4>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
      pageoffset = blockoffset % 256;
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	31 e0       	ldi	r19, 0x01	; 1
    1158:	b9 01       	movw	r22, r18
    115a:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
    115e:	9c 83       	std	Y+4, r25	; 0x04
    1160:	8b 83       	std	Y+3, r24	; 0x03
      pagenum = blockoffset / 256;
    1162:	8d 81       	ldd	r24, Y+5	; 0x05
    1164:	9e 81       	ldd	r25, Y+6	; 0x06
    1166:	9b 8f       	std	Y+27, r25	; 0x1b
    1168:	8a 8f       	std	Y+26, r24	; 0x1a
    116a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    116c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    116e:	99 23       	and	r25, r25
    1170:	34 f4       	brge	.+12     	; 0x117e <__stack+0x7f>
    1172:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1174:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1176:	21 50       	subi	r18, 0x01	; 1
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	3b 8f       	std	Y+27, r19	; 0x1b
    117c:	2a 8f       	std	Y+26, r18	; 0x1a
    117e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1180:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1182:	85 2f       	mov	r24, r21
    1184:	99 27       	eor	r25, r25
    1186:	87 fd       	sbrc	r24, 7
    1188:	9a 95       	dec	r25
    118a:	98 87       	std	Y+8, r25	; 0x08
    118c:	8f 83       	std	Y+7, r24	; 0x07
      //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+endsector);
      //realsector = read8uint(fp->addr, FILE_ADDRPAGEOFFSET+startsector);
      realsector = getRealSector( fp->addr, endsector );
    118e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1190:	e8 89       	ldd	r30, Y+16	; 0x10
    1192:	f9 89       	ldd	r31, Y+17	; 0x11
    1194:	82 81       	ldd	r24, Z+2	; 0x02
    1196:	69 2f       	mov	r22, r25
    1198:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <getRealSector>
    119c:	8b 87       	std	Y+11, r24	; 0x0b
      pagenum = pagenum + ( realsector - 1 ) *8;
    119e:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a0:	99 27       	eor	r25, r25
    11a2:	9c 01       	movw	r18, r24
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	22 0f       	add	r18, r18
    11aa:	33 1f       	adc	r19, r19
    11ac:	22 0f       	add	r18, r18
    11ae:	33 1f       	adc	r19, r19
    11b0:	8f 81       	ldd	r24, Y+7	; 0x07
    11b2:	98 85       	ldd	r25, Y+8	; 0x08
    11b4:	82 0f       	add	r24, r18
    11b6:	93 1f       	adc	r25, r19
    11b8:	08 97       	sbiw	r24, 0x08	; 8
    11ba:	98 87       	std	Y+8, r25	; 0x08
    11bc:	8f 83       	std	Y+7, r24	; 0x07
      readbytes = nBytes - readbytes;
    11be:	2c 89       	ldd	r18, Y+20	; 0x14
    11c0:	3d 89       	ldd	r19, Y+21	; 0x15
    11c2:	89 85       	ldd	r24, Y+9	; 0x09
    11c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c6:	a9 01       	movw	r20, r18
    11c8:	48 1b       	sub	r20, r24
    11ca:	59 0b       	sbc	r21, r25
    11cc:	ca 01       	movw	r24, r20
    11ce:	9a 87       	std	Y+10, r25	; 0x0a
    11d0:	89 87       	std	Y+9, r24	; 0x09
      //now pagenum, offset2 means the actual start location just read it
      writepagestorage( pagenum, 0, buffer, readbytes );
    11d2:	89 85       	ldd	r24, Y+9	; 0x09
    11d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d6:	4a 89       	ldd	r20, Y+18	; 0x12
    11d8:	5b 89       	ldd	r21, Y+19	; 0x13
    11da:	ef 81       	ldd	r30, Y+7	; 0x07
    11dc:	f8 85       	ldd	r31, Y+8	; 0x08
    11de:	9c 01       	movw	r18, r24
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	cf 01       	movw	r24, r30
    11e4:	0e 94 51 8a 	call	0x114a2	; 0x114a2 <writepagestorage>
   }
   return 0;
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	6b 96       	adiw	r28, 0x1b	; 27
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	08 95       	ret

000011fe <fmove>:
}

//-------------------------------------------------------------------------
int fmove( char *source, char *target ) {
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	62 97       	sbiw	r28, 0x12	; 18
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	98 8b       	std	Y+16, r25	; 0x10
    1214:	8f 87       	std	Y+15, r24	; 0x0f
    1216:	7a 8b       	std	Y+18, r23	; 0x12
    1218:	69 8b       	std	Y+17, r22	; 0x11
   //if ((ret = fexist(pathname))==-1)
   int ret1, ret2;
   int state1, state2;
   uint8_t parent;
   char *p,  *q;
   uint8_t namelength;
   p = extractLastName( target );
    121a:	89 89       	ldd	r24, Y+17	; 0x11
    121c:	9a 89       	ldd	r25, Y+18	; 0x12
    121e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <extractLastName>
    1222:	9d 83       	std	Y+5, r25	; 0x05
    1224:	8c 83       	std	Y+4, r24	; 0x04
   q = target + mystrlen( target );
    1226:	89 89       	ldd	r24, Y+17	; 0x11
    1228:	9a 89       	ldd	r25, Y+18	; 0x12
    122a:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    122e:	9c 01       	movw	r18, r24
    1230:	89 89       	ldd	r24, Y+17	; 0x11
    1232:	9a 89       	ldd	r25, Y+18	; 0x12
    1234:	82 0f       	add	r24, r18
    1236:	93 1f       	adc	r25, r19
    1238:	9b 83       	std	Y+3, r25	; 0x03
    123a:	8a 83       	std	Y+2, r24	; 0x02
   namelength = q - p;
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	9b 81       	ldd	r25, Y+3	; 0x03
    1240:	28 2f       	mov	r18, r24
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	92 2f       	mov	r25, r18
    1248:	98 1b       	sub	r25, r24
    124a:	89 2f       	mov	r24, r25
    124c:	89 83       	std	Y+1, r24	; 0x01
   ret1 = locateFileName( source, &state1 );
    124e:	ce 01       	movw	r24, r28
    1250:	0b 96       	adiw	r24, 0x0b	; 11
    1252:	2f 85       	ldd	r18, Y+15	; 0x0f
    1254:	38 89       	ldd	r19, Y+16	; 0x10
    1256:	bc 01       	movw	r22, r24
    1258:	c9 01       	movw	r24, r18
    125a:	0e 94 95 18 	call	0x312a	; 0x312a <locateFileName>
    125e:	9a 87       	std	Y+10, r25	; 0x0a
    1260:	89 87       	std	Y+9, r24	; 0x09
   parent = fsread8uint( ret1, FILE_PARENTOFFSET );
    1262:	89 85       	ldd	r24, Y+9	; 0x09
    1264:	9a 85       	ldd	r25, Y+10	; 0x0a
    1266:	6f e1       	ldi	r22, 0x1F	; 31
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    126e:	8e 83       	std	Y+6, r24	; 0x06
   removeChildNode( parent, ret1 );
    1270:	89 85       	ldd	r24, Y+9	; 0x09
    1272:	68 2f       	mov	r22, r24
    1274:	8e 81       	ldd	r24, Y+6	; 0x06
    1276:	0e 94 a1 1b 	call	0x3742	; 0x3742 <removeChildNode>
   ret2 = locateFileName( target, &state2 );
    127a:	ce 01       	movw	r24, r28
    127c:	0d 96       	adiw	r24, 0x0d	; 13
    127e:	29 89       	ldd	r18, Y+17	; 0x11
    1280:	3a 89       	ldd	r19, Y+18	; 0x12
    1282:	bc 01       	movw	r22, r24
    1284:	c9 01       	movw	r24, r18
    1286:	0e 94 95 18 	call	0x312a	; 0x312a <locateFileName>
    128a:	98 87       	std	Y+8, r25	; 0x08
    128c:	8f 83       	std	Y+7, r24	; 0x07
   fswrite8uint( ret1, FILE_PARENTOFFSET, ret2 );
    128e:	2f 81       	ldd	r18, Y+7	; 0x07
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	42 2f       	mov	r20, r18
    1296:	6f e1       	ldi	r22, 0x1F	; 31
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
   fswriteBytes( ret1, FILENAMEOFFSET, namelength, p );
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	48 2f       	mov	r20, r24
    12a2:	55 27       	eor	r21, r21
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	e9 85       	ldd	r30, Y+9	; 0x09
    12aa:	fa 85       	ldd	r31, Y+10	; 0x0a
    12ac:	9c 01       	movw	r18, r24
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	cf 01       	movw	r24, r30
    12b4:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <fswriteBytes>
   fswrite8uint( ret1, FILENAMEOFFSET + namelength, 0 );
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	99 27       	eor	r25, r25
    12bc:	29 85       	ldd	r18, Y+9	; 0x09
    12be:	3a 85       	ldd	r19, Y+10	; 0x0a
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	bc 01       	movw	r22, r24
    12c4:	c9 01       	movw	r24, r18
    12c6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
   addChildNode( ret2, ret1 );
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	68 2f       	mov	r22, r24
    12d0:	89 2f       	mov	r24, r25
    12d2:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <addChildNode>
   return 0;
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	62 96       	adiw	r28, 0x12	; 18
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <fcopy>:
}

//-------------------------------------------------------------------------
int fcopy( char *source, char *target ) {
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	66 97       	sbiw	r28, 0x16	; 22
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	9c 8b       	std	Y+20, r25	; 0x14
    1302:	8b 8b       	std	Y+19, r24	; 0x13
    1304:	7e 8b       	std	Y+22, r23	; 0x16
    1306:	6d 8b       	std	Y+21, r22	; 0x15
   //if ((ret = fexist(pathname))==-1)
   int ret1, ret2;
   int state1, state2;
   uint8_t i;
   char *p;
   char *q;
   int NewNode;
   uint8_t namelength;
   p = extractLastName( target );
    1308:	8d 89       	ldd	r24, Y+21	; 0x15
    130a:	9e 89       	ldd	r25, Y+22	; 0x16
    130c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <extractLastName>
    1310:	99 87       	std	Y+9, r25	; 0x09
    1312:	88 87       	std	Y+8, r24	; 0x08
   q = target + mystrlen( target );
    1314:	8d 89       	ldd	r24, Y+21	; 0x15
    1316:	9e 89       	ldd	r25, Y+22	; 0x16
    1318:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    131c:	9c 01       	movw	r18, r24
    131e:	8d 89       	ldd	r24, Y+21	; 0x15
    1320:	9e 89       	ldd	r25, Y+22	; 0x16
    1322:	82 0f       	add	r24, r18
    1324:	93 1f       	adc	r25, r19
    1326:	9f 83       	std	Y+7, r25	; 0x07
    1328:	8e 83       	std	Y+6, r24	; 0x06
   namelength = q - p;
    132a:	8e 81       	ldd	r24, Y+6	; 0x06
    132c:	9f 81       	ldd	r25, Y+7	; 0x07
    132e:	28 2f       	mov	r18, r24
    1330:	88 85       	ldd	r24, Y+8	; 0x08
    1332:	99 85       	ldd	r25, Y+9	; 0x09
    1334:	92 2f       	mov	r25, r18
    1336:	98 1b       	sub	r25, r24
    1338:	89 2f       	mov	r24, r25
    133a:	8b 83       	std	Y+3, r24	; 0x03
   ret1 = locateFileName( source, &state1 );
    133c:	ce 01       	movw	r24, r28
    133e:	0f 96       	adiw	r24, 0x0f	; 15
    1340:	2b 89       	ldd	r18, Y+19	; 0x13
    1342:	3c 89       	ldd	r19, Y+20	; 0x14
    1344:	bc 01       	movw	r22, r24
    1346:	c9 01       	movw	r24, r18
    1348:	0e 94 95 18 	call	0x312a	; 0x312a <locateFileName>
    134c:	9e 87       	std	Y+14, r25	; 0x0e
    134e:	8d 87       	std	Y+13, r24	; 0x0d
   ret2 = locateFileName( target, &state2 );
    1350:	ce 01       	movw	r24, r28
    1352:	41 96       	adiw	r24, 0x11	; 17
    1354:	2d 89       	ldd	r18, Y+21	; 0x15
    1356:	3e 89       	ldd	r19, Y+22	; 0x16
    1358:	bc 01       	movw	r22, r24
    135a:	c9 01       	movw	r24, r18
    135c:	0e 94 95 18 	call	0x312a	; 0x312a <locateFileName>
    1360:	9c 87       	std	Y+12, r25	; 0x0c
    1362:	8b 87       	std	Y+11, r24	; 0x0b
   NewNode = getVectorNode();
    1364:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <getVectorNode>
    1368:	9d 83       	std	Y+5, r25	; 0x05
    136a:	8c 83       	std	Y+4, r24	; 0x04
   copyVectorNode( ret1, NewNode );
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	9d 81       	ldd	r25, Y+5	; 0x05
    1370:	2d 85       	ldd	r18, Y+13	; 0x0d
    1372:	3e 85       	ldd	r19, Y+14	; 0x0e
    1374:	bc 01       	movw	r22, r24
    1376:	c9 01       	movw	r24, r18
    1378:	0e 94 cb 14 	call	0x2996	; 0x2996 <copyVectorNode>
   fswriteBytes( NewNode, FILENAMEOFFSET, namelength, p );
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	48 2f       	mov	r20, r24
    1380:	55 27       	eor	r21, r21
    1382:	88 85       	ldd	r24, Y+8	; 0x08
    1384:	99 85       	ldd	r25, Y+9	; 0x09
    1386:	ec 81       	ldd	r30, Y+4	; 0x04
    1388:	fd 81       	ldd	r31, Y+5	; 0x05
    138a:	9c 01       	movw	r18, r24
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	cf 01       	movw	r24, r30
    1392:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <fswriteBytes>
   fswrite8uint( NewNode, FILENAMEOFFSET + namelength, 0 );
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	99 27       	eor	r25, r25
    139a:	2c 81       	ldd	r18, Y+4	; 0x04
    139c:	3d 81       	ldd	r19, Y+5	; 0x05
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	bc 01       	movw	r22, r24
    13a2:	c9 01       	movw	r24, r18
    13a4:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
   fswrite8uint( NewNode, FILE_PARENTOFFSET, ret2 );
    13a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    13aa:	8c 81       	ldd	r24, Y+4	; 0x04
    13ac:	9d 81       	ldd	r25, Y+5	; 0x05
    13ae:	42 2f       	mov	r20, r18
    13b0:	6f e1       	ldi	r22, 0x1F	; 31
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
   addChildNode( ret2, NewNode );
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    13bc:	68 2f       	mov	r22, r24
    13be:	89 2f       	mov	r24, r25
    13c0:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <addChildNode>
   for ( i = 0; i < 8; i ++ ) {
    13c4:	1a 86       	std	Y+10, r1	; 0x0a
    13c6:	25 c0       	rjmp	.+74     	; 0x1412 <fcopy+0x126>
      uint8_t temp, temp1;
      temp = fsread8uint( ret1, FILE_ADDRPAGEOFFSET + i );
    13c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ca:	99 27       	eor	r25, r25
    13cc:	0e 96       	adiw	r24, 0x0e	; 14
    13ce:	2d 85       	ldd	r18, Y+13	; 0x0d
    13d0:	3e 85       	ldd	r19, Y+14	; 0x0e
    13d2:	bc 01       	movw	r22, r24
    13d4:	c9 01       	movw	r24, r18
    13d6:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    13da:	8a 83       	std	Y+2, r24	; 0x02
      if ( temp > 0 ) {
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	88 23       	and	r24, r24
    13e0:	a9 f0       	breq	.+42     	; 0x140c <fcopy+0x120>
         temp1 = getFlashPage();
    13e2:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <getFlashPage>
    13e6:	89 83       	std	Y+1, r24	; 0x01
         fswrite8uint( NewNode, FILE_ADDRPAGEOFFSET + i, temp1 );
    13e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ea:	99 27       	eor	r25, r25
    13ec:	0e 96       	adiw	r24, 0x0e	; 14
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	49 81       	ldd	r20, Y+1	; 0x01
    13f4:	bc 01       	movw	r22, r24
    13f6:	c9 01       	movw	r24, r18
    13f8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
         copyVectorPage( temp, temp1 );
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	28 2f       	mov	r18, r24
    1400:	33 27       	eor	r19, r19
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	99 27       	eor	r25, r25
    1406:	b9 01       	movw	r22, r18
    1408:	0e 94 01 15 	call	0x2a02	; 0x2a02 <copyVectorPage>
    140c:	8a 85       	ldd	r24, Y+10	; 0x0a
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	8a 87       	std	Y+10, r24	; 0x0a
    1412:	8a 85       	ldd	r24, Y+10	; 0x0a
    1414:	88 30       	cpi	r24, 0x08	; 8
    1416:	c0 f2       	brcs	.-80     	; 0x13c8 <fcopy+0xdc>
      }
   }
   return 0;
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	66 96       	adiw	r28, 0x16	; 22
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <fchangedir>:
}

//-------------------------------------------------------------------------
void fchangedir( char *path ) {
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	26 97       	sbiw	r28, 0x06	; 6
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
   int ret, state;
   ret = locateFileName( path, &state );
    1446:	ce 01       	movw	r24, r28
    1448:	03 96       	adiw	r24, 0x03	; 3
    144a:	2d 81       	ldd	r18, Y+5	; 0x05
    144c:	3e 81       	ldd	r19, Y+6	; 0x06
    144e:	bc 01       	movw	r22, r24
    1450:	c9 01       	movw	r24, r18
    1452:	0e 94 95 18 	call	0x312a	; 0x312a <locateFileName>
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
   setPwd( ret );
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <setPwd>
    1462:	26 96       	adiw	r28, 0x06	; 6
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <fcurrentdir>:
   return ;
}

//-------------------------------------------------------------------------
void fcurrentdir( char *buffer, int size ) {
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	6b 97       	sbiw	r28, 0x1b	; 27
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	99 8f       	std	Y+25, r25	; 0x19
    148a:	88 8f       	std	Y+24, r24	; 0x18
    148c:	7b 8f       	std	Y+27, r23	; 0x1b
    148e:	6a 8f       	std	Y+26, r22	; 0x1a
   int currentP;
   char *p;
   int len;
   char namebuffer[ 13 ];
   int i;
   char *q;
   p = buffer + size - 1;
    1490:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1492:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1494:	9c 01       	movw	r18, r24
    1496:	88 8d       	ldd	r24, Y+24	; 0x18
    1498:	99 8d       	ldd	r25, Y+25	; 0x19
    149a:	82 0f       	add	r24, r18
    149c:	93 1f       	adc	r25, r19
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	98 87       	std	Y+8, r25	; 0x08
    14a2:	8f 83       	std	Y+7, r24	; 0x07
   *p = '\0';
    14a4:	ef 81       	ldd	r30, Y+7	; 0x07
    14a6:	f8 85       	ldd	r31, Y+8	; 0x08
    14a8:	10 82       	st	Z, r1
   p --;
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	98 87       	std	Y+8, r25	; 0x08
    14b2:	8f 83       	std	Y+7, r24	; 0x07
   currentP = getPwd();
    14b4:	0e 94 82 17 	call	0x2f04	; 0x2f04 <getPwd>
    14b8:	9a 87       	std	Y+10, r25	; 0x0a
    14ba:	89 87       	std	Y+9, r24	; 0x09
   while ( 1 ) {
      getName( namebuffer, currentP );
    14bc:	89 85       	ldd	r24, Y+9	; 0x09
    14be:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c0:	9e 01       	movw	r18, r28
    14c2:	25 5f       	subi	r18, 0xF5	; 245
    14c4:	3f 4f       	sbci	r19, 0xFF	; 255
    14c6:	bc 01       	movw	r22, r24
    14c8:	c9 01       	movw	r24, r18
    14ca:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <getName>
      len = mystrlen( namebuffer );
    14ce:	ce 01       	movw	r24, r28
    14d0:	0b 96       	adiw	r24, 0x0b	; 11
    14d2:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    14d6:	9e 83       	std	Y+6, r25	; 0x06
    14d8:	8d 83       	std	Y+5, r24	; 0x05
      mystrncpy( p - len, namebuffer, len );
    14da:	4d 81       	ldd	r20, Y+5	; 0x05
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	9c 01       	movw	r18, r24
    14e2:	8f 81       	ldd	r24, Y+7	; 0x07
    14e4:	98 85       	ldd	r25, Y+8	; 0x08
    14e6:	bc 01       	movw	r22, r24
    14e8:	62 1b       	sub	r22, r18
    14ea:	73 0b       	sbc	r23, r19
    14ec:	9b 01       	movw	r18, r22
    14ee:	ce 01       	movw	r24, r28
    14f0:	0b 96       	adiw	r24, 0x0b	; 11
    14f2:	bc 01       	movw	r22, r24
    14f4:	c9 01       	movw	r24, r18
    14f6:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
      *p = '/';
    14fa:	ef 81       	ldd	r30, Y+7	; 0x07
    14fc:	f8 85       	ldd	r31, Y+8	; 0x08
    14fe:	8f e2       	ldi	r24, 0x2F	; 47
    1500:	80 83       	st	Z, r24
      p = p - len - 1;
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	9c 01       	movw	r18, r24
    1508:	8f 81       	ldd	r24, Y+7	; 0x07
    150a:	98 85       	ldd	r25, Y+8	; 0x08
    150c:	82 1b       	sub	r24, r18
    150e:	93 0b       	sbc	r25, r19
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	98 87       	std	Y+8, r25	; 0x08
    1514:	8f 83       	std	Y+7, r24	; 0x07
      currentP = fsread8uint( currentP, 31 );
    1516:	89 85       	ldd	r24, Y+9	; 0x09
    1518:	9a 85       	ldd	r25, Y+10	; 0x0a
    151a:	6f e1       	ldi	r22, 0x1F	; 31
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    1522:	99 27       	eor	r25, r25
    1524:	9a 87       	std	Y+10, r25	; 0x0a
    1526:	89 87       	std	Y+9, r24	; 0x09
      if ( currentP == 0 ) {
    1528:	89 85       	ldd	r24, Y+9	; 0x09
    152a:	9a 85       	ldd	r25, Y+10	; 0x0a
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	09 f0       	breq	.+2      	; 0x1532 <fcurrentdir+0xbe>
         break;
      } 
   }
    1530:	c5 cf       	rjmp	.-118    	; 0x14bc <fcurrentdir+0x48>
   *p = '/';
    1532:	ef 81       	ldd	r30, Y+7	; 0x07
    1534:	f8 85       	ldd	r31, Y+8	; 0x08
    1536:	8f e2       	ldi	r24, 0x2F	; 47
    1538:	80 83       	st	Z, r24
   len = buffer + size - 1-p;
    153a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    153c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    153e:	9c 01       	movw	r18, r24
    1540:	88 8d       	ldd	r24, Y+24	; 0x18
    1542:	99 8d       	ldd	r25, Y+25	; 0x19
    1544:	82 0f       	add	r24, r18
    1546:	93 1f       	adc	r25, r19
    1548:	9c 01       	movw	r18, r24
    154a:	8f 81       	ldd	r24, Y+7	; 0x07
    154c:	98 85       	ldd	r25, Y+8	; 0x08
    154e:	a9 01       	movw	r20, r18
    1550:	48 1b       	sub	r20, r24
    1552:	59 0b       	sbc	r21, r25
    1554:	ca 01       	movw	r24, r20
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
   q = buffer;
    155c:	88 8d       	ldd	r24, Y+24	; 0x18
    155e:	99 8d       	ldd	r25, Y+25	; 0x19
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	89 83       	std	Y+1, r24	; 0x01
   for ( i = 0; i < len; i ++ ) {
    1564:	1c 82       	std	Y+4, r1	; 0x04
    1566:	1b 82       	std	Y+3, r1	; 0x03
    1568:	15 c0       	rjmp	.+42     	; 0x1594 <fcurrentdir+0x120>
      *q ++ =  *p ++;
    156a:	ef 81       	ldd	r30, Y+7	; 0x07
    156c:	f8 85       	ldd	r31, Y+8	; 0x08
    156e:	80 81       	ld	r24, Z
    1570:	e9 81       	ldd	r30, Y+1	; 0x01
    1572:	fa 81       	ldd	r31, Y+2	; 0x02
    1574:	80 83       	st	Z, r24
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	9a 81       	ldd	r25, Y+2	; 0x02
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	8f 81       	ldd	r24, Y+7	; 0x07
    1582:	98 85       	ldd	r25, Y+8	; 0x08
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	98 87       	std	Y+8, r25	; 0x08
    1588:	8f 83       	std	Y+7, r24	; 0x07
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	9c 83       	std	Y+4, r25	; 0x04
    1592:	8b 83       	std	Y+3, r24	; 0x03
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	28 17       	cp	r18, r24
    159e:	39 07       	cpc	r19, r25
    15a0:	24 f3       	brlt	.-56     	; 0x156a <fcurrentdir+0xf6>
   } q --;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	89 83       	std	Y+1, r24	; 0x01
   *q = '\0';
    15ac:	e9 81       	ldd	r30, Y+1	; 0x01
    15ae:	fa 81       	ldd	r31, Y+2	; 0x02
    15b0:	10 82       	st	Z, r1
    15b2:	6b 96       	adiw	r28, 0x1b	; 27
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	08 95       	ret

000015c4 <finfonode>:
   return ;
}

//-------------------------------------------------------------------------
void finfonode( char *buffer, int addr ) {
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	24 97       	sbiw	r28, 0x04	; 4
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	7c 83       	std	Y+4, r23	; 0x04
    15e2:	6b 83       	std	Y+3, r22	; 0x03
   fsreadBytes( addr, FILENAMEOFFSET, 12, buffer );
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ea:	fc 81       	ldd	r31, Y+4	; 0x04
    15ec:	9c 01       	movw	r18, r24
    15ee:	4c e0       	ldi	r20, 0x0C	; 12
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	cf 01       	movw	r24, r30
    15f8:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fsreadBytes>
   buffer[ 12 ] = fsread8uint( addr, TYPEOFFSET );
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	8c 01       	movw	r16, r24
    1602:	04 5f       	subi	r16, 0xF4	; 244
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	6c e0       	ldi	r22, 0x0C	; 12
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    1612:	f8 01       	movw	r30, r16
    1614:	80 83       	st	Z, r24
   buffer[ 13 ] = fsread8uint( addr, 29 );
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	8c 01       	movw	r16, r24
    161c:	03 5f       	subi	r16, 0xF3	; 243
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	6d e1       	ldi	r22, 0x1D	; 29
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    162c:	f8 01       	movw	r30, r16
    162e:	80 83       	st	Z, r24
   buffer[ 14 ] = fsread8uint( addr, 30 );
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	8c 01       	movw	r16, r24
    1636:	02 5f       	subi	r16, 0xF2	; 242
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	6e e1       	ldi	r22, 0x1E	; 30
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    1646:	f8 01       	movw	r30, r16
    1648:	80 83       	st	Z, r24
    164a:	24 96       	adiw	r28, 0x04	; 4
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	08 95       	ret

00001660 <fsearch>:
}

//-------------------------------------------------------------------------
void fsearch( uint8_t *addrlist, uint8_t *size, char *string ) {
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	29 97       	sbiw	r28, 0x09	; 9
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	9d 83       	std	Y+5, r25	; 0x05
    1676:	8c 83       	std	Y+4, r24	; 0x04
    1678:	7f 83       	std	Y+7, r23	; 0x07
    167a:	6e 83       	std	Y+6, r22	; 0x06
    167c:	59 87       	std	Y+9, r21	; 0x09
    167e:	48 87       	std	Y+8, r20	; 0x08
   uint8_t i;
   uint8_t *p;
   p = addrlist;
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	9d 81       	ldd	r25, Y+5	; 0x05
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	89 83       	std	Y+1, r24	; 0x01
   *size = 0;
    1688:	ee 81       	ldd	r30, Y+6	; 0x06
    168a:	ff 81       	ldd	r31, Y+7	; 0x07
    168c:	10 82       	st	Z, r1
   for ( i = 1; i <= INODENUM; i ++ ) {
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	1f c0       	rjmp	.+62     	; 0x16d2 <fsearch+0x72>
      if ( inodeMatch( i, string ) == 1 ) {
    1694:	88 85       	ldd	r24, Y+8	; 0x08
    1696:	99 85       	ldd	r25, Y+9	; 0x09
    1698:	bc 01       	movw	r22, r24
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <inodeMatch>
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	91 05       	cpc	r25, r1
    16a4:	99 f4       	brne	.+38     	; 0x16cc <fsearch+0x6c>
         p[  *size ] = i;
    16a6:	ee 81       	ldd	r30, Y+6	; 0x06
    16a8:	ff 81       	ldd	r31, Y+7	; 0x07
    16aa:	80 81       	ld	r24, Z
    16ac:	99 27       	eor	r25, r25
    16ae:	9c 01       	movw	r18, r24
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	f9 01       	movw	r30, r18
    16b6:	e8 0f       	add	r30, r24
    16b8:	f9 1f       	adc	r31, r25
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	80 83       	st	Z, r24
         ( *size ) ++;
    16be:	ee 81       	ldd	r30, Y+6	; 0x06
    16c0:	ff 81       	ldd	r31, Y+7	; 0x07
    16c2:	80 81       	ld	r24, Z
    16c4:	8f 5f       	subi	r24, 0xFF	; 255
    16c6:	ee 81       	ldd	r30, Y+6	; 0x06
    16c8:	ff 81       	ldd	r31, Y+7	; 0x07
    16ca:	80 83       	st	Z, r24
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	8f 5f       	subi	r24, 0xFF	; 255
    16d0:	8b 83       	std	Y+3, r24	; 0x03
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	81 36       	cpi	r24, 0x61	; 97
    16d6:	f0 f2       	brcs	.-68     	; 0x1694 <fsearch+0x34>
    16d8:	29 96       	adiw	r28, 0x09	; 9
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	08 95       	ret

000016ea <formatSystem>:
      }
   }
   return ;
}

//-------------------------------------------------------------------------
void formatSystem() {
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
   formatFS();
    16f2:	0e 94 29 12 	call	0x2452	; 0x2452 <formatFS>
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <fdirnode>:
}

//-------------------------------------------------------------------------
void fdirnode( char *buffer, int size, int addr ) {
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	6d 97       	sbiw	r28, 0x1d	; 29
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	99 8f       	std	Y+25, r25	; 0x19
    1712:	88 8f       	std	Y+24, r24	; 0x18
    1714:	7b 8f       	std	Y+27, r23	; 0x1b
    1716:	6a 8f       	std	Y+26, r22	; 0x1a
    1718:	5d 8f       	std	Y+29, r21	; 0x1d
    171a:	4c 8f       	std	Y+28, r20	; 0x1c
   int currentP;
   char *p;
   int len;
   char namebuffer[ 13 ];
   int i;
   char *q;
   p = buffer + size - 1;
    171c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    171e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1720:	9c 01       	movw	r18, r24
    1722:	88 8d       	ldd	r24, Y+24	; 0x18
    1724:	99 8d       	ldd	r25, Y+25	; 0x19
    1726:	82 0f       	add	r24, r18
    1728:	93 1f       	adc	r25, r19
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	98 87       	std	Y+8, r25	; 0x08
    172e:	8f 83       	std	Y+7, r24	; 0x07
   *p = '\0';
    1730:	ef 81       	ldd	r30, Y+7	; 0x07
    1732:	f8 85       	ldd	r31, Y+8	; 0x08
    1734:	10 82       	st	Z, r1
   p --;
    1736:	8f 81       	ldd	r24, Y+7	; 0x07
    1738:	98 85       	ldd	r25, Y+8	; 0x08
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	98 87       	std	Y+8, r25	; 0x08
    173e:	8f 83       	std	Y+7, r24	; 0x07
   currentP = addr;
    1740:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1742:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1744:	9a 87       	std	Y+10, r25	; 0x0a
    1746:	89 87       	std	Y+9, r24	; 0x09
   while ( 1 ) {
      getName( namebuffer, currentP );
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	9e 01       	movw	r18, r28
    174e:	25 5f       	subi	r18, 0xF5	; 245
    1750:	3f 4f       	sbci	r19, 0xFF	; 255
    1752:	bc 01       	movw	r22, r24
    1754:	c9 01       	movw	r24, r18
    1756:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <getName>
      len = mystrlen( namebuffer );
    175a:	ce 01       	movw	r24, r28
    175c:	0b 96       	adiw	r24, 0x0b	; 11
    175e:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
      mystrncpy( p - len, namebuffer, len );
    1766:	4d 81       	ldd	r20, Y+5	; 0x05
    1768:	8d 81       	ldd	r24, Y+5	; 0x05
    176a:	9e 81       	ldd	r25, Y+6	; 0x06
    176c:	9c 01       	movw	r18, r24
    176e:	8f 81       	ldd	r24, Y+7	; 0x07
    1770:	98 85       	ldd	r25, Y+8	; 0x08
    1772:	bc 01       	movw	r22, r24
    1774:	62 1b       	sub	r22, r18
    1776:	73 0b       	sbc	r23, r19
    1778:	9b 01       	movw	r18, r22
    177a:	ce 01       	movw	r24, r28
    177c:	0b 96       	adiw	r24, 0x0b	; 11
    177e:	bc 01       	movw	r22, r24
    1780:	c9 01       	movw	r24, r18
    1782:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
      *p = '/';
    1786:	ef 81       	ldd	r30, Y+7	; 0x07
    1788:	f8 85       	ldd	r31, Y+8	; 0x08
    178a:	8f e2       	ldi	r24, 0x2F	; 47
    178c:	80 83       	st	Z, r24
      p = p - len - 1;
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	9e 81       	ldd	r25, Y+6	; 0x06
    1792:	9c 01       	movw	r18, r24
    1794:	8f 81       	ldd	r24, Y+7	; 0x07
    1796:	98 85       	ldd	r25, Y+8	; 0x08
    1798:	82 1b       	sub	r24, r18
    179a:	93 0b       	sbc	r25, r19
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	98 87       	std	Y+8, r25	; 0x08
    17a0:	8f 83       	std	Y+7, r24	; 0x07
      currentP = fsread8uint( currentP, 31 );
    17a2:	89 85       	ldd	r24, Y+9	; 0x09
    17a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a6:	6f e1       	ldi	r22, 0x1F	; 31
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    17ae:	99 27       	eor	r25, r25
    17b0:	9a 87       	std	Y+10, r25	; 0x0a
    17b2:	89 87       	std	Y+9, r24	; 0x09
      if ( currentP == 0 ) {
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	09 f0       	breq	.+2      	; 0x17be <fdirnode+0xc2>
         break;
      } 
   }
    17bc:	c5 cf       	rjmp	.-118    	; 0x1748 <fdirnode+0x4c>
   *p = '/';
    17be:	ef 81       	ldd	r30, Y+7	; 0x07
    17c0:	f8 85       	ldd	r31, Y+8	; 0x08
    17c2:	8f e2       	ldi	r24, 0x2F	; 47
    17c4:	80 83       	st	Z, r24
   len = buffer + size - 1-p;
    17c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17ca:	9c 01       	movw	r18, r24
    17cc:	88 8d       	ldd	r24, Y+24	; 0x18
    17ce:	99 8d       	ldd	r25, Y+25	; 0x19
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	9c 01       	movw	r18, r24
    17d6:	8f 81       	ldd	r24, Y+7	; 0x07
    17d8:	98 85       	ldd	r25, Y+8	; 0x08
    17da:	a9 01       	movw	r20, r18
    17dc:	48 1b       	sub	r20, r24
    17de:	59 0b       	sbc	r21, r25
    17e0:	ca 01       	movw	r24, r20
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
   q = buffer;
    17e8:	88 8d       	ldd	r24, Y+24	; 0x18
    17ea:	99 8d       	ldd	r25, Y+25	; 0x19
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
   for ( i = 0; i < len; i ++ ) {
    17f0:	1c 82       	std	Y+4, r1	; 0x04
    17f2:	1b 82       	std	Y+3, r1	; 0x03
    17f4:	15 c0       	rjmp	.+42     	; 0x1820 <fdirnode+0x124>
      *q ++ =  *p ++;
    17f6:	ef 81       	ldd	r30, Y+7	; 0x07
    17f8:	f8 85       	ldd	r31, Y+8	; 0x08
    17fa:	80 81       	ld	r24, Z
    17fc:	e9 81       	ldd	r30, Y+1	; 0x01
    17fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1800:	80 83       	st	Z, r24
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	8f 81       	ldd	r24, Y+7	; 0x07
    180e:	98 85       	ldd	r25, Y+8	; 0x08
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	98 87       	std	Y+8, r25	; 0x08
    1814:	8f 83       	std	Y+7, r24	; 0x07
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	8b 83       	std	Y+3, r24	; 0x03
    1820:	2b 81       	ldd	r18, Y+3	; 0x03
    1822:	3c 81       	ldd	r19, Y+4	; 0x04
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	28 17       	cp	r18, r24
    182a:	39 07       	cpc	r19, r25
    182c:	24 f3       	brlt	.-56     	; 0x17f6 <fdirnode+0xfa>
   } q --;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
   *q = '\0';
    1838:	e9 81       	ldd	r30, Y+1	; 0x01
    183a:	fa 81       	ldd	r31, Y+2	; 0x02
    183c:	10 82       	st	Z, r1
    183e:	6d 96       	adiw	r28, 0x1d	; 29
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	08 95       	ret

00001850 <fsread8uint>:
#include "../system/bytestorage.h"


uint8_t  fsread8uint (int inode, int offset)
{
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	26 97       	sbiw	r28, 0x06	; 6
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	9c 83       	std	Y+4, r25	; 0x04
    1866:	8b 83       	std	Y+3, r24	; 0x03
    1868:	7e 83       	std	Y+6, r23	; 0x06
    186a:	6d 83       	std	Y+5, r22	; 0x05
  uint16_t addr; 
  addr = inode * INODESIZE + offset;
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	9c 01       	movw	r18, r24
    1872:	22 0f       	add	r18, r18
    1874:	33 1f       	adc	r19, r19
    1876:	22 95       	swap	r18
    1878:	32 95       	swap	r19
    187a:	30 7f       	andi	r19, 0xF0	; 240
    187c:	32 27       	eor	r19, r18
    187e:	20 7f       	andi	r18, 0xF0	; 240
    1880:	32 27       	eor	r19, r18
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	82 0f       	add	r24, r18
    1888:	93 1f       	adc	r25, r19
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
  return read8uint(addr);  
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	9a 81       	ldd	r25, Y+2	; 0x02
    1892:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <read8uint>
    1896:	99 27       	eor	r25, r25
    1898:	26 96       	adiw	r28, 0x06	; 6
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <fsread8int>:
}


int8_t   fsread8int  (int inode, int offset)
{
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	26 97       	sbiw	r28, 0x06	; 6
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	9c 83       	std	Y+4, r25	; 0x04
    18c0:	8b 83       	std	Y+3, r24	; 0x03
    18c2:	7e 83       	std	Y+6, r23	; 0x06
    18c4:	6d 83       	std	Y+5, r22	; 0x05
  uint16_t addr; 
  addr = inode * INODESIZE + offset; 
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	9c 01       	movw	r18, r24
    18cc:	22 0f       	add	r18, r18
    18ce:	33 1f       	adc	r19, r19
    18d0:	22 95       	swap	r18
    18d2:	32 95       	swap	r19
    18d4:	30 7f       	andi	r19, 0xF0	; 240
    18d6:	32 27       	eor	r19, r18
    18d8:	20 7f       	andi	r18, 0xF0	; 240
    18da:	32 27       	eor	r19, r18
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	82 0f       	add	r24, r18
    18e2:	93 1f       	adc	r25, r19
    18e4:	9a 83       	std	Y+2, r25	; 0x02
    18e6:	89 83       	std	Y+1, r24	; 0x01
  return read8int(addr); 
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	9a 81       	ldd	r25, Y+2	; 0x02
    18ec:	0e 94 0b 6f 	call	0xde16	; 0xde16 <read8int>
    18f0:	99 27       	eor	r25, r25
    18f2:	87 fd       	sbrc	r24, 7
    18f4:	90 95       	com	r25
    18f6:	26 96       	adiw	r28, 0x06	; 6
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	08 95       	ret

00001908 <fsread16uint>:
}


uint16_t fsread16uint(int inode, int offset)
{
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	26 97       	sbiw	r28, 0x06	; 6
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	9c 83       	std	Y+4, r25	; 0x04
    191e:	8b 83       	std	Y+3, r24	; 0x03
    1920:	7e 83       	std	Y+6, r23	; 0x06
    1922:	6d 83       	std	Y+5, r22	; 0x05
  uint16_t addr;
  addr = inode * INODESIZE + offset; 
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	9c 01       	movw	r18, r24
    192a:	22 0f       	add	r18, r18
    192c:	33 1f       	adc	r19, r19
    192e:	22 95       	swap	r18
    1930:	32 95       	swap	r19
    1932:	30 7f       	andi	r19, 0xF0	; 240
    1934:	32 27       	eor	r19, r18
    1936:	20 7f       	andi	r18, 0xF0	; 240
    1938:	32 27       	eor	r19, r18
    193a:	8d 81       	ldd	r24, Y+5	; 0x05
    193c:	9e 81       	ldd	r25, Y+6	; 0x06
    193e:	82 0f       	add	r24, r18
    1940:	93 1f       	adc	r25, r19
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
  return read16uint(addr); 
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	0e 94 27 6f 	call	0xde4e	; 0xde4e <read16uint>
    194e:	26 96       	adiw	r28, 0x06	; 6
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <fsread16int>:
}


int16_t  fsread16int (int inode, int offset)
{
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	26 97       	sbiw	r28, 0x06	; 6
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	9c 83       	std	Y+4, r25	; 0x04
    1976:	8b 83       	std	Y+3, r24	; 0x03
    1978:	7e 83       	std	Y+6, r23	; 0x06
    197a:	6d 83       	std	Y+5, r22	; 0x05
  uint16_t addr;
  addr = inode * INODESIZE + offset; 
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	9c 01       	movw	r18, r24
    1982:	22 0f       	add	r18, r18
    1984:	33 1f       	adc	r19, r19
    1986:	22 95       	swap	r18
    1988:	32 95       	swap	r19
    198a:	30 7f       	andi	r19, 0xF0	; 240
    198c:	32 27       	eor	r19, r18
    198e:	20 7f       	andi	r18, 0xF0	; 240
    1990:	32 27       	eor	r19, r18
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	82 0f       	add	r24, r18
    1998:	93 1f       	adc	r25, r19
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
  return read16int(addr);   
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	0e 94 40 6f 	call	0xde80	; 0xde80 <read16int>
    19a6:	26 96       	adiw	r28, 0x06	; 6
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	08 95       	ret

000019b8 <fsread32uint>:
  
}


uint32_t fsread32uint(int inode, int offset)
{
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	26 97       	sbiw	r28, 0x06	; 6
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	9c 83       	std	Y+4, r25	; 0x04
    19ce:	8b 83       	std	Y+3, r24	; 0x03
    19d0:	7e 83       	std	Y+6, r23	; 0x06
    19d2:	6d 83       	std	Y+5, r22	; 0x05
  uint16_t addr; 
  addr = inode * INODESIZE + offset; 
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	9c 01       	movw	r18, r24
    19da:	22 0f       	add	r18, r18
    19dc:	33 1f       	adc	r19, r19
    19de:	22 95       	swap	r18
    19e0:	32 95       	swap	r19
    19e2:	30 7f       	andi	r19, 0xF0	; 240
    19e4:	32 27       	eor	r19, r18
    19e6:	20 7f       	andi	r18, 0xF0	; 240
    19e8:	32 27       	eor	r19, r18
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	9e 81       	ldd	r25, Y+6	; 0x06
    19ee:	82 0f       	add	r24, r18
    19f0:	93 1f       	adc	r25, r19
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
  return read32uint(addr);  
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	9a 81       	ldd	r25, Y+2	; 0x02
    19fa:	0e 94 59 6f 	call	0xdeb2	; 0xdeb2 <read32uint>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
}
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	26 96       	adiw	r28, 0x06	; 6
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	08 95       	ret

00001a18 <fsread32int>:


int32_t  fsread32int (int inode, int offset)
{
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	26 97       	sbiw	r28, 0x06	; 6
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	9c 83       	std	Y+4, r25	; 0x04
    1a2e:	8b 83       	std	Y+3, r24	; 0x03
    1a30:	7e 83       	std	Y+6, r23	; 0x06
    1a32:	6d 83       	std	Y+5, r22	; 0x05
   uint16_t addr; 
   addr = inode * INODESIZE + offset;
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	9c 01       	movw	r18, r24
    1a3a:	22 0f       	add	r18, r18
    1a3c:	33 1f       	adc	r19, r19
    1a3e:	22 95       	swap	r18
    1a40:	32 95       	swap	r19
    1a42:	30 7f       	andi	r19, 0xF0	; 240
    1a44:	32 27       	eor	r19, r18
    1a46:	20 7f       	andi	r18, 0xF0	; 240
    1a48:	32 27       	eor	r19, r18
    1a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	82 0f       	add	r24, r18
    1a50:	93 1f       	adc	r25, r19
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
   return read32int(addr); 
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5a:	0e 94 76 6f 	call	0xdeec	; 0xdeec <read32int>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22

}
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	26 96       	adiw	r28, 0x06	; 6
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	08 95       	ret

00001a78 <fswrite8uint>:



void  fswrite8uint (int inode, int offset, uint8_t value)
{
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	27 97       	sbiw	r28, 0x07	; 7
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	9c 83       	std	Y+4, r25	; 0x04
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	7e 83       	std	Y+6, r23	; 0x06
    1a92:	6d 83       	std	Y+5, r22	; 0x05
    1a94:	4f 83       	std	Y+7, r20	; 0x07
    uint16_t addr; 
    addr = inode * INODESIZE + offset;
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	9c 01       	movw	r18, r24
    1a9c:	22 0f       	add	r18, r18
    1a9e:	33 1f       	adc	r19, r19
    1aa0:	22 95       	swap	r18
    1aa2:	32 95       	swap	r19
    1aa4:	30 7f       	andi	r19, 0xF0	; 240
    1aa6:	32 27       	eor	r19, r18
    1aa8:	20 7f       	andi	r18, 0xF0	; 240
    1aaa:	32 27       	eor	r19, r18
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	82 0f       	add	r24, r18
    1ab2:	93 1f       	adc	r25, r19
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    write8uint(addr, value);  
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	9a 81       	ldd	r25, Y+2	; 0x02
    1abc:	6f 81       	ldd	r22, Y+7	; 0x07
    1abe:	0e 94 93 6f 	call	0xdf26	; 0xdf26 <write8uint>
    1ac2:	27 96       	adiw	r28, 0x07	; 7
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <fswrite8int>:
}


void  fswrite8int  (int inode, int offset, int8_t value)
{
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	27 97       	sbiw	r28, 0x07	; 7
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	9c 83       	std	Y+4, r25	; 0x04
    1aea:	8b 83       	std	Y+3, r24	; 0x03
    1aec:	7e 83       	std	Y+6, r23	; 0x06
    1aee:	6d 83       	std	Y+5, r22	; 0x05
    1af0:	4f 83       	std	Y+7, r20	; 0x07
    uint16_t addr; 
    addr = inode * INODESIZE + offset;
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	9c 01       	movw	r18, r24
    1af8:	22 0f       	add	r18, r18
    1afa:	33 1f       	adc	r19, r19
    1afc:	22 95       	swap	r18
    1afe:	32 95       	swap	r19
    1b00:	30 7f       	andi	r19, 0xF0	; 240
    1b02:	32 27       	eor	r19, r18
    1b04:	20 7f       	andi	r18, 0xF0	; 240
    1b06:	32 27       	eor	r19, r18
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	82 0f       	add	r24, r18
    1b0e:	93 1f       	adc	r25, r19
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01
    write8int(addr, value);  
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	0e 94 ae 6f 	call	0xdf5c	; 0xdf5c <write8int>
    1b1e:	27 96       	adiw	r28, 0x07	; 7
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	08 95       	ret

00001b30 <fswrite16uint>:
}


void  fswrite16uint(int inode, int offset, uint16_t value)
{
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	28 97       	sbiw	r28, 0x08	; 8
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	8b 83       	std	Y+3, r24	; 0x03
    1b48:	7e 83       	std	Y+6, r23	; 0x06
    1b4a:	6d 83       	std	Y+5, r22	; 0x05
    1b4c:	58 87       	std	Y+8, r21	; 0x08
    1b4e:	4f 83       	std	Y+7, r20	; 0x07
    uint16_t addr; 
    addr = inode * INODESIZE + offset;
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	9c 01       	movw	r18, r24
    1b56:	22 0f       	add	r18, r18
    1b58:	33 1f       	adc	r19, r19
    1b5a:	22 95       	swap	r18
    1b5c:	32 95       	swap	r19
    1b5e:	30 7f       	andi	r19, 0xF0	; 240
    1b60:	32 27       	eor	r19, r18
    1b62:	20 7f       	andi	r18, 0xF0	; 240
    1b64:	32 27       	eor	r19, r18
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	82 0f       	add	r24, r18
    1b6c:	93 1f       	adc	r25, r19
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
    write16uint(addr, value);  
    1b72:	8f 81       	ldd	r24, Y+7	; 0x07
    1b74:	98 85       	ldd	r25, Y+8	; 0x08
    1b76:	29 81       	ldd	r18, Y+1	; 0x01
    1b78:	3a 81       	ldd	r19, Y+2	; 0x02
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	c9 01       	movw	r24, r18
    1b7e:	0e 94 c9 6f 	call	0xdf92	; 0xdf92 <write16uint>
    1b82:	28 96       	adiw	r28, 0x08	; 8
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	08 95       	ret

00001b94 <fswrite16int>:

}


void  fswrite16int (int inode, int offset, int16_t value)
{
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	28 97       	sbiw	r28, 0x08	; 8
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	9c 83       	std	Y+4, r25	; 0x04
    1baa:	8b 83       	std	Y+3, r24	; 0x03
    1bac:	7e 83       	std	Y+6, r23	; 0x06
    1bae:	6d 83       	std	Y+5, r22	; 0x05
    1bb0:	58 87       	std	Y+8, r21	; 0x08
    1bb2:	4f 83       	std	Y+7, r20	; 0x07
    uint16_t addr; 
    addr = inode * INODESIZE + offset;
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	9c 01       	movw	r18, r24
    1bba:	22 0f       	add	r18, r18
    1bbc:	33 1f       	adc	r19, r19
    1bbe:	22 95       	swap	r18
    1bc0:	32 95       	swap	r19
    1bc2:	30 7f       	andi	r19, 0xF0	; 240
    1bc4:	32 27       	eor	r19, r18
    1bc6:	20 7f       	andi	r18, 0xF0	; 240
    1bc8:	32 27       	eor	r19, r18
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	82 0f       	add	r24, r18
    1bd0:	93 1f       	adc	r25, r19
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    write16int(addr, value);  
    1bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd8:	98 85       	ldd	r25, Y+8	; 0x08
    1bda:	29 81       	ldd	r18, Y+1	; 0x01
    1bdc:	3a 81       	ldd	r19, Y+2	; 0x02
    1bde:	bc 01       	movw	r22, r24
    1be0:	c9 01       	movw	r24, r18
    1be2:	0e 94 e8 6f 	call	0xdfd0	; 0xdfd0 <write16int>
    1be6:	28 96       	adiw	r28, 0x08	; 8
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	08 95       	ret

00001bf8 <fswrite32uint>:
}



void  fswrite32uint(int inode, int offset, uint32_t value)
{
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	2a 97       	sbiw	r28, 0x0a	; 10
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	9c 83       	std	Y+4, r25	; 0x04
    1c0e:	8b 83       	std	Y+3, r24	; 0x03
    1c10:	7e 83       	std	Y+6, r23	; 0x06
    1c12:	6d 83       	std	Y+5, r22	; 0x05
    1c14:	2f 83       	std	Y+7, r18	; 0x07
    1c16:	38 87       	std	Y+8, r19	; 0x08
    1c18:	49 87       	std	Y+9, r20	; 0x09
    1c1a:	5a 87       	std	Y+10, r21	; 0x0a
    uint16_t addr; 
    addr = inode * INODESIZE + offset;
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	9c 01       	movw	r18, r24
    1c22:	22 0f       	add	r18, r18
    1c24:	33 1f       	adc	r19, r19
    1c26:	22 95       	swap	r18
    1c28:	32 95       	swap	r19
    1c2a:	30 7f       	andi	r19, 0xF0	; 240
    1c2c:	32 27       	eor	r19, r18
    1c2e:	20 7f       	andi	r18, 0xF0	; 240
    1c30:	32 27       	eor	r19, r18
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	82 0f       	add	r24, r18
    1c38:	93 1f       	adc	r25, r19
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    write32uint(addr, value);  
    1c3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c40:	98 85       	ldd	r25, Y+8	; 0x08
    1c42:	a9 85       	ldd	r26, Y+9	; 0x09
    1c44:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c46:	29 81       	ldd	r18, Y+1	; 0x01
    1c48:	3a 81       	ldd	r19, Y+2	; 0x02
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	bd 01       	movw	r22, r26
    1c4e:	c9 01       	movw	r24, r18
    1c50:	0e 94 07 70 	call	0xe00e	; 0xe00e <write32uint>
    1c54:	2a 96       	adiw	r28, 0x0a	; 10
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	08 95       	ret

00001c66 <fswrite32int>:
}


void  fswrite32int (int inode, int offset, int32_t value)
{
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	2a 97       	sbiw	r28, 0x0a	; 10
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	9c 83       	std	Y+4, r25	; 0x04
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
    1c7e:	7e 83       	std	Y+6, r23	; 0x06
    1c80:	6d 83       	std	Y+5, r22	; 0x05
    1c82:	2f 83       	std	Y+7, r18	; 0x07
    1c84:	38 87       	std	Y+8, r19	; 0x08
    1c86:	49 87       	std	Y+9, r20	; 0x09
    1c88:	5a 87       	std	Y+10, r21	; 0x0a
    uint16_t addr; 
    addr = inode * INODESIZE + offset;
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	9c 01       	movw	r18, r24
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	22 95       	swap	r18
    1c96:	32 95       	swap	r19
    1c98:	30 7f       	andi	r19, 0xF0	; 240
    1c9a:	32 27       	eor	r19, r18
    1c9c:	20 7f       	andi	r18, 0xF0	; 240
    1c9e:	32 27       	eor	r19, r18
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	82 0f       	add	r24, r18
    1ca6:	93 1f       	adc	r25, r19
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	89 83       	std	Y+1, r24	; 0x01
    write32uint(addr, value);  
    1cac:	8f 81       	ldd	r24, Y+7	; 0x07
    1cae:	98 85       	ldd	r25, Y+8	; 0x08
    1cb0:	a9 85       	ldd	r26, Y+9	; 0x09
    1cb2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1cb4:	29 81       	ldd	r18, Y+1	; 0x01
    1cb6:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb8:	ac 01       	movw	r20, r24
    1cba:	bd 01       	movw	r22, r26
    1cbc:	c9 01       	movw	r24, r18
    1cbe:	0e 94 07 70 	call	0xe00e	; 0xe00e <write32uint>
    1cc2:	2a 96       	adiw	r28, 0x0a	; 10
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <fsreadBytes>:
}


void fsreadBytes (int inode, int offset, int nBytes, void *buffer)
{
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	2a 97       	sbiw	r28, 0x0a	; 10
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	9c 83       	std	Y+4, r25	; 0x04
    1cea:	8b 83       	std	Y+3, r24	; 0x03
    1cec:	7e 83       	std	Y+6, r23	; 0x06
    1cee:	6d 83       	std	Y+5, r22	; 0x05
    1cf0:	58 87       	std	Y+8, r21	; 0x08
    1cf2:	4f 83       	std	Y+7, r20	; 0x07
    1cf4:	3a 87       	std	Y+10, r19	; 0x0a
    1cf6:	29 87       	std	Y+9, r18	; 0x09
   uint16_t addr;
   addr = inode * INODESIZE + offset;
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	9c 01       	movw	r18, r24
    1cfe:	22 0f       	add	r18, r18
    1d00:	33 1f       	adc	r19, r19
    1d02:	22 95       	swap	r18
    1d04:	32 95       	swap	r19
    1d06:	30 7f       	andi	r19, 0xF0	; 240
    1d08:	32 27       	eor	r19, r18
    1d0a:	20 7f       	andi	r18, 0xF0	; 240
    1d0c:	32 27       	eor	r19, r18
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	82 0f       	add	r24, r18
    1d14:	93 1f       	adc	r25, r19
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
   genericreadBytes( addr, nBytes, buffer);
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1d20:	38 85       	ldd	r19, Y+8	; 0x08
    1d22:	e9 81       	ldd	r30, Y+1	; 0x01
    1d24:	fa 81       	ldd	r31, Y+2	; 0x02
    1d26:	ac 01       	movw	r20, r24
    1d28:	b9 01       	movw	r22, r18
    1d2a:	cf 01       	movw	r24, r30
    1d2c:	0e 94 88 6e 	call	0xdd10	; 0xdd10 <genericreadBytes>
    1d30:	2a 96       	adiw	r28, 0x0a	; 10
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <fswriteBytes>:

}


void fswriteBytes(int inode, int offset, int nBytes, void *buffer)
{
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	2a 97       	sbiw	r28, 0x0a	; 10
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	9c 83       	std	Y+4, r25	; 0x04
    1d58:	8b 83       	std	Y+3, r24	; 0x03
    1d5a:	7e 83       	std	Y+6, r23	; 0x06
    1d5c:	6d 83       	std	Y+5, r22	; 0x05
    1d5e:	58 87       	std	Y+8, r21	; 0x08
    1d60:	4f 83       	std	Y+7, r20	; 0x07
    1d62:	3a 87       	std	Y+10, r19	; 0x0a
    1d64:	29 87       	std	Y+9, r18	; 0x09
   uint16_t addr;
   addr = inode * INODESIZE + offset; 
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	9c 01       	movw	r18, r24
    1d6c:	22 0f       	add	r18, r18
    1d6e:	33 1f       	adc	r19, r19
    1d70:	22 95       	swap	r18
    1d72:	32 95       	swap	r19
    1d74:	30 7f       	andi	r19, 0xF0	; 240
    1d76:	32 27       	eor	r19, r18
    1d78:	20 7f       	andi	r18, 0xF0	; 240
    1d7a:	32 27       	eor	r19, r18
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	82 0f       	add	r24, r18
    1d82:	93 1f       	adc	r25, r19
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	89 83       	std	Y+1, r24	; 0x01
   genericwriteBytes ( addr, nBytes, buffer); 
    1d88:	89 85       	ldd	r24, Y+9	; 0x09
    1d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8c:	2f 81       	ldd	r18, Y+7	; 0x07
    1d8e:	38 85       	ldd	r19, Y+8	; 0x08
    1d90:	e9 81       	ldd	r30, Y+1	; 0x01
    1d92:	fa 81       	ldd	r31, Y+2	; 0x02
    1d94:	ac 01       	movw	r20, r24
    1d96:	b9 01       	movw	r22, r18
    1d98:	cf 01       	movw	r24, r30
    1d9a:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <genericwriteBytes>
    1d9e:	2a 96       	adiw	r28, 0x0a	; 10
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	08 95       	ret

00001db0 <fsinitBytes>:
}


void fsinitBytes( int inode, int offset, int nBytes, uint8_t value)
{
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	29 97       	sbiw	r28, 0x09	; 9
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	9c 83       	std	Y+4, r25	; 0x04
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
    1dc8:	7e 83       	std	Y+6, r23	; 0x06
    1dca:	6d 83       	std	Y+5, r22	; 0x05
    1dcc:	58 87       	std	Y+8, r21	; 0x08
    1dce:	4f 83       	std	Y+7, r20	; 0x07
    1dd0:	29 87       	std	Y+9, r18	; 0x09
   uint16_t addr; 
   addr = inode * INODESIZE + offset; 
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd6:	9c 01       	movw	r18, r24
    1dd8:	22 0f       	add	r18, r18
    1dda:	33 1f       	adc	r19, r19
    1ddc:	22 95       	swap	r18
    1dde:	32 95       	swap	r19
    1de0:	30 7f       	andi	r19, 0xF0	; 240
    1de2:	32 27       	eor	r19, r18
    1de4:	20 7f       	andi	r18, 0xF0	; 240
    1de6:	32 27       	eor	r19, r18
    1de8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dea:	9e 81       	ldd	r25, Y+6	; 0x06
    1dec:	82 0f       	add	r24, r18
    1dee:	93 1f       	adc	r25, r19
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
   initBytes(addr, nBytes, value); 
    1df4:	8f 81       	ldd	r24, Y+7	; 0x07
    1df6:	98 85       	ldd	r25, Y+8	; 0x08
    1df8:	29 81       	ldd	r18, Y+1	; 0x01
    1dfa:	3a 81       	ldd	r19, Y+2	; 0x02
    1dfc:	49 85       	ldd	r20, Y+9	; 0x09
    1dfe:	bc 01       	movw	r22, r24
    1e00:	c9 01       	movw	r24, r18
    1e02:	0e 94 d0 6e 	call	0xdda0	; 0xdda0 <initBytes>
    1e06:	29 96       	adiw	r28, 0x09	; 9
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	08 95       	ret

00001e18 <extractString>:
#include "fsstring.h"
#include "../types/types.h"
#include "../types/string.h"

char *extractString( char *start, char *buffer ) {
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	28 97       	sbiw	r28, 0x08	; 8
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	78 87       	std	Y+8, r23	; 0x08
    1e32:	6f 83       	std	Y+7, r22	; 0x07
   char *p,  *q;
   q = buffer;
    1e34:	8f 81       	ldd	r24, Y+7	; 0x07
    1e36:	98 85       	ldd	r25, Y+8	; 0x08
    1e38:	9a 83       	std	Y+2, r25	; 0x02
    1e3a:	89 83       	std	Y+1, r24	; 0x01
   p = start;
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	9c 83       	std	Y+4, r25	; 0x04
    1e42:	8b 83       	std	Y+3, r24	; 0x03
   if ( *p == '/' ) {
    1e44:	eb 81       	ldd	r30, Y+3	; 0x03
    1e46:	fc 81       	ldd	r31, Y+4	; 0x04
    1e48:	80 81       	ld	r24, Z
    1e4a:	8f 32       	cpi	r24, 0x2F	; 47
    1e4c:	b1 f4       	brne	.+44     	; 0x1e7a <extractString+0x62>
      p ++;
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	9c 81       	ldd	r25, Y+4	; 0x04
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
   } 
   while (( isLetter( *p )) || ( *p == '_' ) || ( *p == '.' ) || ( isDigit( *p ))) {
    1e58:	10 c0       	rjmp	.+32     	; 0x1e7a <extractString+0x62>
      *q ++ =  *p ++;
    1e5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e5e:	80 81       	ld	r24, Z
    1e60:	e9 81       	ldd	r30, Y+1	; 0x01
    1e62:	fa 81       	ldd	r31, Y+2	; 0x02
    1e64:	80 83       	st	Z, r24
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6a:	01 96       	adiw	r24, 0x01	; 1
    1e6c:	9a 83       	std	Y+2, r25	; 0x02
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	01 96       	adiw	r24, 0x01	; 1
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
    1e7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e7e:	80 81       	ld	r24, Z
    1e80:	81 36       	cpi	r24, 0x61	; 97
    1e82:	2c f0       	brlt	.+10     	; 0x1e8e <extractString+0x76>
    1e84:	eb 81       	ldd	r30, Y+3	; 0x03
    1e86:	fc 81       	ldd	r31, Y+4	; 0x04
    1e88:	80 81       	ld	r24, Z
    1e8a:	8b 37       	cpi	r24, 0x7B	; 123
    1e8c:	34 f3       	brlt	.-52     	; 0x1e5a <extractString+0x42>
    1e8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e90:	fc 81       	ldd	r31, Y+4	; 0x04
    1e92:	80 81       	ld	r24, Z
    1e94:	81 34       	cpi	r24, 0x41	; 65
    1e96:	2c f0       	brlt	.+10     	; 0x1ea2 <extractString+0x8a>
    1e98:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8b 35       	cpi	r24, 0x5B	; 91
    1ea0:	e4 f2       	brlt	.-72     	; 0x1e5a <extractString+0x42>
    1ea2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8f 35       	cpi	r24, 0x5F	; 95
    1eaa:	b9 f2       	breq	.-82     	; 0x1e5a <extractString+0x42>
    1eac:	eb 81       	ldd	r30, Y+3	; 0x03
    1eae:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8e 32       	cpi	r24, 0x2E	; 46
    1eb4:	91 f2       	breq	.-92     	; 0x1e5a <extractString+0x42>
    1eb6:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eba:	80 81       	ld	r24, Z
    1ebc:	80 33       	cpi	r24, 0x30	; 48
    1ebe:	2c f0       	brlt	.+10     	; 0x1eca <extractString+0xb2>
    1ec0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec4:	80 81       	ld	r24, Z
    1ec6:	8a 33       	cpi	r24, 0x3A	; 58
    1ec8:	44 f2       	brlt	.-112    	; 0x1e5a <extractString+0x42>
   } *q = '\0';
    1eca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ece:	10 82       	st	Z, r1
   return p;
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	28 96       	adiw	r28, 0x08	; 8
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	08 95       	ret

00001ee6 <extractLastName>:
}

//-------------------------------------------------------------------------
char *extractLastName( char *pathname ) {
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	2a 97       	sbiw	r28, 0x0a	; 10
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	98 87       	std	Y+8, r25	; 0x08
    1efc:	8f 83       	std	Y+7, r24	; 0x07
   char *p,  *start;
   int length;
   length = mystrlen( pathname );
    1efe:	8f 81       	ldd	r24, Y+7	; 0x07
    1f00:	98 85       	ldd	r25, Y+8	; 0x08
    1f02:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
   p = pathname + ( length - 1 );
    1f0a:	29 81       	ldd	r18, Y+1	; 0x01
    1f0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f10:	98 85       	ldd	r25, Y+8	; 0x08
    1f12:	82 0f       	add	r24, r18
    1f14:	93 1f       	adc	r25, r19
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
   start = pathname;
    1f1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f1e:	98 85       	ldd	r25, Y+8	; 0x08
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03
   while (( *p != '/' ) && ( p != start )) {
    1f24:	05 c0       	rjmp	.+10     	; 0x1f30 <extractLastName+0x4a>
      p --;
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	ed 81       	ldd	r30, Y+5	; 0x05
    1f32:	fe 81       	ldd	r31, Y+6	; 0x06
    1f34:	80 81       	ld	r24, Z
    1f36:	8f 32       	cpi	r24, 0x2F	; 47
    1f38:	39 f0       	breq	.+14     	; 0x1f48 <extractLastName+0x62>
    1f3a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f3c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	28 17       	cp	r18, r24
    1f44:	39 07       	cpc	r19, r25
    1f46:	79 f7       	brne	.-34     	; 0x1f26 <extractLastName+0x40>
   } if (( p == start ) && (( *start ) != '/' )) {
    1f48:	2d 81       	ldd	r18, Y+5	; 0x05
    1f4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	28 17       	cp	r18, r24
    1f52:	39 07       	cpc	r19, r25
    1f54:	51 f4       	brne	.+20     	; 0x1f6a <extractLastName+0x84>
    1f56:	eb 81       	ldd	r30, Y+3	; 0x03
    1f58:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5a:	80 81       	ld	r24, Z
    1f5c:	8f 32       	cpi	r24, 0x2F	; 47
    1f5e:	29 f0       	breq	.+10     	; 0x1f6a <extractLastName+0x84>
      return p;
    1f60:	8d 81       	ldd	r24, Y+5	; 0x05
    1f62:	9e 81       	ldd	r25, Y+6	; 0x06
    1f64:	9a 87       	std	Y+10, r25	; 0x0a
    1f66:	89 87       	std	Y+9, r24	; 0x09
    1f68:	09 c0       	rjmp	.+18     	; 0x1f7c <extractLastName+0x96>
   } else {
      return  ++p;
    1f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	9a 87       	std	Y+10, r25	; 0x0a
    1f7a:	89 87       	std	Y+9, r24	; 0x09
    1f7c:	89 85       	ldd	r24, Y+9	; 0x09
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	2a 96       	adiw	r28, 0x0a	; 10
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	08 95       	ret

00001f92 <fileMode>:
   } 
}


//-------------------------------------------------------------------------
int fileMode( char *s ) {
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	24 97       	sbiw	r28, 0x04	; 4
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
   if ( mystrlen( s ) == 1 ) {
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	59 f5       	brne	.+86     	; 0x200e <fileMode+0x7c>
      if ( s[ 0 ] == 'r' ) {
    1fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fba:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbc:	80 81       	ld	r24, Z
    1fbe:	82 37       	cpi	r24, 0x72	; 114
    1fc0:	29 f4       	brne	.+10     	; 0x1fcc <fileMode+0x3a>
         return 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9c 83       	std	Y+4, r25	; 0x04
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
    1fca:	2f c0       	rjmp	.+94     	; 0x202a <fileMode+0x98>
      } if ( s[ 0 ] == 'w' ) {
    1fcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fce:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd0:	80 81       	ld	r24, Z
    1fd2:	87 37       	cpi	r24, 0x77	; 119
    1fd4:	29 f4       	brne	.+10     	; 0x1fe0 <fileMode+0x4e>
         return 2;
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9c 83       	std	Y+4, r25	; 0x04
    1fdc:	8b 83       	std	Y+3, r24	; 0x03
    1fde:	25 c0       	rjmp	.+74     	; 0x202a <fileMode+0x98>
      } if ( s[ 0 ] == 'a' ) {
    1fe0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe4:	80 81       	ld	r24, Z
    1fe6:	81 36       	cpi	r24, 0x61	; 97
    1fe8:	29 f4       	brne	.+10     	; 0x1ff4 <fileMode+0x62>
         return 3;
    1fea:	83 e0       	ldi	r24, 0x03	; 3
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9c 83       	std	Y+4, r25	; 0x04
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
    1ff2:	1b c0       	rjmp	.+54     	; 0x202a <fileMode+0x98>
      } if ( s[ 0 ] == 't' ) {
    1ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff8:	80 81       	ld	r24, Z
    1ffa:	84 37       	cpi	r24, 0x74	; 116
    1ffc:	29 f4       	brne	.+10     	; 0x2008 <fileMode+0x76>
         return 4;
    1ffe:	84 e0       	ldi	r24, 0x04	; 4
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9c 83       	std	Y+4, r25	; 0x04
    2004:	8b 83       	std	Y+3, r24	; 0x03
    2006:	11 c0       	rjmp	.+34     	; 0x202a <fileMode+0x98>
      } 
   } else if ( mystrlen( s ) == 2 ) {
      return 5;
   } 
   else {
      return 0;
   } 
   return 0;
    2008:	1c 82       	std	Y+4, r1	; 0x04
    200a:	1b 82       	std	Y+3, r1	; 0x03
    200c:	0e c0       	rjmp	.+28     	; 0x202a <fileMode+0x98>
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	91 05       	cpc	r25, r1
    201a:	29 f4       	brne	.+10     	; 0x2026 <fileMode+0x94>
    201c:	85 e0       	ldi	r24, 0x05	; 5
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9c 83       	std	Y+4, r25	; 0x04
    2022:	8b 83       	std	Y+3, r24	; 0x03
    2024:	02 c0       	rjmp	.+4      	; 0x202a <fileMode+0x98>
    2026:	1c 82       	std	Y+4, r1	; 0x04
    2028:	1b 82       	std	Y+3, r1	; 0x03
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	24 96       	adiw	r28, 0x04	; 4
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	de bf       	out	0x3e, r29	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	08 95       	ret

00002040 <checkNodeValid>:
extern uint8_t adc_parameter[ 6 ];
extern uint16_t adc_returnvalue;


int checkNodeValid( int nodeaddr ) {
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	26 97       	sbiw	r28, 0x06	; 6
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	9c 83       	std	Y+4, r25	; 0x04
    2056:	8b 83       	std	Y+3, r24	; 0x03
   uint8_t validness;
   uint8_t nodetype;
   validness = fsread8uint( nodeaddr, VALIDOFFSET );
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	6d e0       	ldi	r22, 0x0D	; 13
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2064:	8a 83       	std	Y+2, r24	; 0x02
   nodetype = fsread8uint( nodeaddr, TYPEOFFSET );
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	6c e0       	ldi	r22, 0x0C	; 12
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2072:	89 83       	std	Y+1, r24	; 0x01
   if ( validness == 0 ) {
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	88 23       	and	r24, r24
    2078:	19 f4       	brne	.+6      	; 0x2080 <checkNodeValid+0x40>
      return 0;
    207a:	1e 82       	std	Y+6, r1	; 0x06
    207c:	1d 82       	std	Y+5, r1	; 0x05
    207e:	05 c0       	rjmp	.+10     	; 0x208a <checkNodeValid+0x4a>
   } else {
      return ( int )nodetype;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	28 2f       	mov	r18, r24
    2084:	33 27       	eor	r19, r19
    2086:	3e 83       	std	Y+6, r19	; 0x06
    2088:	2d 83       	std	Y+5, r18	; 0x05
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	26 96       	adiw	r28, 0x06	; 6
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	08 95       	ret

000020a0 <buildNewNode>:
   } 
}

//-------------------------------------------------------------------------
void buildNewNode( int addr, char *name, uint8_t uid, uint8_t parent, uint8_t type ) {
    20a0:	0f 93       	push	r16
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	2b 97       	sbiw	r28, 0x0b	; 11
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
    20b6:	9e 83       	std	Y+6, r25	; 0x06
    20b8:	8d 83       	std	Y+5, r24	; 0x05
    20ba:	78 87       	std	Y+8, r23	; 0x08
    20bc:	6f 83       	std	Y+7, r22	; 0x07
    20be:	49 87       	std	Y+9, r20	; 0x09
    20c0:	2a 87       	std	Y+10, r18	; 0x0a
    20c2:	0b 87       	std	Y+11, r16	; 0x0b
   uint8_t namelength;
   namelength = mystrlen( name );
    20c4:	8f 81       	ldd	r24, Y+7	; 0x07
    20c6:	98 85       	ldd	r25, Y+8	; 0x08
    20c8:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    20cc:	8c 83       	std	Y+4, r24	; 0x04
   if ( namelength < 12 ) {
    20ce:	8c 81       	ldd	r24, Y+4	; 0x04
    20d0:	8c 30       	cpi	r24, 0x0C	; 12
    20d2:	18 f4       	brcc	.+6      	; 0x20da <buildNewNode+0x3a>
      namelength ++;
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	8f 5f       	subi	r24, 0xFF	; 255
    20d8:	8c 83       	std	Y+4, r24	; 0x04
   } 
   //consider several types of type
   if ( type == DIRNODE ) {
    20da:	8b 85       	ldd	r24, Y+11	; 0x0b
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	d9 f5       	brne	.+118    	; 0x2156 <buildNewNode+0xb6>
      fswriteBytes( addr, FILENAMEOFFSET, namelength, name );
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	48 2f       	mov	r20, r24
    20e4:	55 27       	eor	r21, r21
    20e6:	8f 81       	ldd	r24, Y+7	; 0x07
    20e8:	98 85       	ldd	r25, Y+8	; 0x08
    20ea:	ed 81       	ldd	r30, Y+5	; 0x05
    20ec:	fe 81       	ldd	r31, Y+6	; 0x06
    20ee:	9c 01       	movw	r18, r24
    20f0:	60 e0       	ldi	r22, 0x00	; 0
    20f2:	70 e0       	ldi	r23, 0x00	; 0
    20f4:	cf 01       	movw	r24, r30
    20f6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <fswriteBytes>
      fswrite8uint( addr, TYPEOFFSET, type );
    20fa:	8d 81       	ldd	r24, Y+5	; 0x05
    20fc:	9e 81       	ldd	r25, Y+6	; 0x06
    20fe:	4b 85       	ldd	r20, Y+11	; 0x0b
    2100:	6c e0       	ldi	r22, 0x0C	; 12
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fswrite8uint( addr, VALIDOFFSET, 1 );
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	6d e0       	ldi	r22, 0x0D	; 13
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fsinitBytes( addr, DIR_ADDRSUBOFFSET, 14, 0 );
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	4e e0       	ldi	r20, 0x0E	; 14
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	6e e0       	ldi	r22, 0x0E	; 14
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <fsinitBytes>
      fswrite8uint( addr, DIR_UIDOFFSET, uid );
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	49 85       	ldd	r20, Y+9	; 0x09
    212e:	6c e1       	ldi	r22, 0x1C	; 28
    2130:	70 e0       	ldi	r23, 0x00	; 0
    2132:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fswrite16uint( addr, DIR_SIZEOFFSET, 0 );
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	6d e1       	ldi	r22, 0x1D	; 29
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <fswrite16uint>
      fswrite8uint( addr, DIR_PARENTOFFSET, parent );
    2146:	8d 81       	ldd	r24, Y+5	; 0x05
    2148:	9e 81       	ldd	r25, Y+6	; 0x06
    214a:	4a 85       	ldd	r20, Y+10	; 0x0a
    214c:	6f e1       	ldi	r22, 0x1F	; 31
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
    2154:	b9 c0       	rjmp	.+370    	; 0x22c8 <buildNewNode+0x228>
   } else if ( type == FILENODE ) {
    2156:	8b 85       	ldd	r24, Y+11	; 0x0b
    2158:	82 30       	cpi	r24, 0x02	; 2
    215a:	d9 f5       	brne	.+118    	; 0x21d2 <buildNewNode+0x132>
      fswriteBytes( addr, FILENAMEOFFSET, namelength, name );
    215c:	8c 81       	ldd	r24, Y+4	; 0x04
    215e:	48 2f       	mov	r20, r24
    2160:	55 27       	eor	r21, r21
    2162:	8f 81       	ldd	r24, Y+7	; 0x07
    2164:	98 85       	ldd	r25, Y+8	; 0x08
    2166:	ed 81       	ldd	r30, Y+5	; 0x05
    2168:	fe 81       	ldd	r31, Y+6	; 0x06
    216a:	9c 01       	movw	r18, r24
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	cf 01       	movw	r24, r30
    2172:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <fswriteBytes>
      fswrite8uint( addr, TYPEOFFSET, type );
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	9e 81       	ldd	r25, Y+6	; 0x06
    217a:	4b 85       	ldd	r20, Y+11	; 0x0b
    217c:	6c e0       	ldi	r22, 0x0C	; 12
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fswrite8uint( addr, VALIDOFFSET, 1 );
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	41 e0       	ldi	r20, 0x01	; 1
    218a:	6d e0       	ldi	r22, 0x0D	; 13
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fsinitBytes( addr, FILE_ADDRPAGEOFFSET, 14, 0 );
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	4e e0       	ldi	r20, 0x0E	; 14
    219a:	50 e0       	ldi	r21, 0x00	; 0
    219c:	6e e0       	ldi	r22, 0x0E	; 14
    219e:	70 e0       	ldi	r23, 0x00	; 0
    21a0:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <fsinitBytes>
      fswrite8uint( addr, FILE_UIDOFFSET, uid );
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	9e 81       	ldd	r25, Y+6	; 0x06
    21a8:	49 85       	ldd	r20, Y+9	; 0x09
    21aa:	6c e1       	ldi	r22, 0x1C	; 28
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fswrite16uint( addr, FILE_SIZEOFFSET, 0 );
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	6d e1       	ldi	r22, 0x1D	; 29
    21bc:	70 e0       	ldi	r23, 0x00	; 0
    21be:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <fswrite16uint>
      fswrite8uint( addr, FILE_PARENTOFFSET, parent );
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	4a 85       	ldd	r20, Y+10	; 0x0a
    21c8:	6f e1       	ldi	r22, 0x1F	; 31
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
    21d0:	7b c0       	rjmp	.+246    	; 0x22c8 <buildNewNode+0x228>
   }
    else if ( type == DEVNODE ) {
    21d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    21d4:	83 30       	cpi	r24, 0x03	; 3
    21d6:	d9 f5       	brne	.+118    	; 0x224e <buildNewNode+0x1ae>
      fswriteBytes( addr, FILENAMEOFFSET, namelength, name );
    21d8:	8c 81       	ldd	r24, Y+4	; 0x04
    21da:	48 2f       	mov	r20, r24
    21dc:	55 27       	eor	r21, r21
    21de:	8f 81       	ldd	r24, Y+7	; 0x07
    21e0:	98 85       	ldd	r25, Y+8	; 0x08
    21e2:	ed 81       	ldd	r30, Y+5	; 0x05
    21e4:	fe 81       	ldd	r31, Y+6	; 0x06
    21e6:	9c 01       	movw	r18, r24
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	cf 01       	movw	r24, r30
    21ee:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <fswriteBytes>
      fswrite8uint( addr, TYPEOFFSET, type );
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	4b 85       	ldd	r20, Y+11	; 0x0b
    21f8:	6c e0       	ldi	r22, 0x0C	; 12
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fswrite8uint( addr, VALIDOFFSET, 1 );
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	6d e0       	ldi	r22, 0x0D	; 13
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fsinitBytes( addr, DEV_PROGRAMENTRYOFFSET, 14, 0 );
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	4e e0       	ldi	r20, 0x0E	; 14
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	6e e0       	ldi	r22, 0x0E	; 14
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <fsinitBytes>
      fswrite8uint( addr, DEV_UIDOFFSET, uid );
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	9e 81       	ldd	r25, Y+6	; 0x06
    2224:	49 85       	ldd	r20, Y+9	; 0x09
    2226:	6c e1       	ldi	r22, 0x1C	; 28
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fswrite16uint( addr, DEV_SIZEOFFSET, 0 );
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	6d e1       	ldi	r22, 0x1D	; 29
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <fswrite16uint>
      fswrite8uint( addr, DEV_PARENTOFFSET, parent );
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	4a 85       	ldd	r20, Y+10	; 0x0a
    2244:	6f e1       	ldi	r22, 0x1F	; 31
    2246:	70 e0       	ldi	r23, 0x00	; 0
    2248:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
    224c:	3d c0       	rjmp	.+122    	; 0x22c8 <buildNewNode+0x228>
   }
    else if ( type == APPNODE ) {
    224e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2250:	84 30       	cpi	r24, 0x04	; 4
    2252:	d1 f5       	brne	.+116    	; 0x22c8 <buildNewNode+0x228>
      fswriteBytes( addr, FILENAMEOFFSET, namelength, name );
    2254:	8c 81       	ldd	r24, Y+4	; 0x04
    2256:	48 2f       	mov	r20, r24
    2258:	55 27       	eor	r21, r21
    225a:	8f 81       	ldd	r24, Y+7	; 0x07
    225c:	98 85       	ldd	r25, Y+8	; 0x08
    225e:	ed 81       	ldd	r30, Y+5	; 0x05
    2260:	fe 81       	ldd	r31, Y+6	; 0x06
    2262:	9c 01       	movw	r18, r24
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	cf 01       	movw	r24, r30
    226a:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <fswriteBytes>
      fswrite8uint( addr, TYPEOFFSET, type );
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	4b 85       	ldd	r20, Y+11	; 0x0b
    2274:	6c e0       	ldi	r22, 0x0C	; 12
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fswrite8uint( addr, VALIDOFFSET, 1 );
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	6d e0       	ldi	r22, 0x0D	; 13
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fsinitBytes( addr, APP_ENTRYOFFSET, 14, 0 );
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	4e e0       	ldi	r20, 0x0E	; 14
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	6e e0       	ldi	r22, 0x0E	; 14
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <fsinitBytes>
      fswrite8uint( addr, APP_UIDOFFSET, uid );
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	49 85       	ldd	r20, Y+9	; 0x09
    22a2:	6c e1       	ldi	r22, 0x1C	; 28
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      fswrite16uint( addr, APP_SIZEOFFSET, 0 );
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	6d e1       	ldi	r22, 0x1D	; 29
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <fswrite16uint>
      fswrite8uint( addr, APP_PARENTOFFSET, parent );
    22ba:	8d 81       	ldd	r24, Y+5	; 0x05
    22bc:	9e 81       	ldd	r25, Y+6	; 0x06
    22be:	4a 85       	ldd	r20, Y+10	; 0x0a
    22c0:	6f e1       	ldi	r22, 0x1F	; 31
    22c2:	70 e0       	ldi	r23, 0x00	; 0
    22c4:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
   }
   if (( addr == 0 ) && ( parent == 0 )){}
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	21 f4       	brne	.+8      	; 0x22d8 <buildNewNode+0x238>
    22d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d2:	88 23       	and	r24, r24
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <buildNewNode+0x238>
    22d6:	27 c0       	rjmp	.+78     	; 0x2326 <buildNewNode+0x286>
    else {
      int i;
      for ( i = 0; i < 10; i ++ ) {
    22d8:	1b 82       	std	Y+3, r1	; 0x03
    22da:	1a 82       	std	Y+2, r1	; 0x02
    22dc:	1f c0       	rjmp	.+62     	; 0x231c <buildNewNode+0x27c>
         uint8_t subaddr;
         subaddr = fsread8uint( parent, DIR_ADDRSUBOFFSET + i );
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	9b 81       	ldd	r25, Y+3	; 0x03
    22e2:	9c 01       	movw	r18, r24
    22e4:	22 5f       	subi	r18, 0xF2	; 242
    22e6:	3f 4f       	sbci	r19, 0xFF	; 255
    22e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ea:	99 27       	eor	r25, r25
    22ec:	b9 01       	movw	r22, r18
    22ee:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    22f2:	89 83       	std	Y+1, r24	; 0x01
         if ( subaddr == 0 ) {
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	88 23       	and	r24, r24
    22f8:	61 f4       	brne	.+24     	; 0x2312 <buildNewNode+0x272>
            fswrite8uint( parent, DIR_ADDRSUBOFFSET + i, addr );
    22fa:	4d 81       	ldd	r20, Y+5	; 0x05
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2300:	9c 01       	movw	r18, r24
    2302:	22 5f       	subi	r18, 0xF2	; 242
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	8a 85       	ldd	r24, Y+10	; 0x0a
    2308:	99 27       	eor	r25, r25
    230a:	b9 01       	movw	r22, r18
    230c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
            break;
    2310:	0a c0       	rjmp	.+20     	; 0x2326 <buildNewNode+0x286>
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	9b 81       	ldd	r25, Y+3	; 0x03
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	9b 83       	std	Y+3, r25	; 0x03
    231a:	8a 83       	std	Y+2, r24	; 0x02
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	8a 30       	cpi	r24, 0x0A	; 10
    2322:	91 05       	cpc	r25, r1
    2324:	e4 f2       	brlt	.-72     	; 0x22de <buildNewNode+0x23e>
    2326:	2b 96       	adiw	r28, 0x0b	; 11
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	0f 91       	pop	r16
    2338:	08 95       	ret

0000233a <printNode>:
         }
      }
   }
   return ;
}

//-------------------------------------------------------------------------
void printNode( int addr ) {
    233a:	0f 93       	push	r16
    233c:	1f 93       	push	r17
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	a7 97       	sbiw	r28, 0x27	; 39
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	9f a3       	std	Y+39, r25	; 0x27
    2354:	8e a3       	std	Y+38, r24	; 0x26
   char filename[ 13 ];
   uint8_t uid, parent, type, valid;
   uint8_t subdirectory[ 10 ];
   int i;
   uint8_t flashdirectory[ 8 ];
   filename[ 12 ] = '\0';
    2356:	1b 8a       	std	Y+19, r1	; 0x13
   fsreadBytes( addr, FILENAMEOFFSET, 12, filename );
    2358:	ce 01       	movw	r24, r28
    235a:	07 96       	adiw	r24, 0x07	; 7
    235c:	ee a1       	ldd	r30, Y+38	; 0x26
    235e:	ff a1       	ldd	r31, Y+39	; 0x27
    2360:	9c 01       	movw	r18, r24
    2362:	4c e0       	ldi	r20, 0x0C	; 12
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	cf 01       	movw	r24, r30
    236c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fsreadBytes>
   type = fsread8uint( addr, TYPEOFFSET );
    2370:	8e a1       	ldd	r24, Y+38	; 0x26
    2372:	9f a1       	ldd	r25, Y+39	; 0x27
    2374:	6c e0       	ldi	r22, 0x0C	; 12
    2376:	70 e0       	ldi	r23, 0x00	; 0
    2378:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    237c:	8c 83       	std	Y+4, r24	; 0x04
   valid = fsread8uint( addr, VALIDOFFSET );
    237e:	8e a1       	ldd	r24, Y+38	; 0x26
    2380:	9f a1       	ldd	r25, Y+39	; 0x27
    2382:	6d e0       	ldi	r22, 0x0D	; 13
    2384:	70 e0       	ldi	r23, 0x00	; 0
    2386:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    238a:	8b 83       	std	Y+3, r24	; 0x03
   if (( valid > 0 ) && ( type == DIRNODE )) {
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	88 23       	and	r24, r24
    2390:	11 f1       	breq	.+68     	; 0x23d6 <printNode+0x9c>
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	81 30       	cpi	r24, 0x01	; 1
    2396:	f9 f4       	brne	.+62     	; 0x23d6 <printNode+0x9c>
      for ( i = 0; i < 10; i ++ ) {
    2398:	1a 82       	std	Y+2, r1	; 0x02
    239a:	19 82       	std	Y+1, r1	; 0x01
    239c:	17 c0       	rjmp	.+46     	; 0x23cc <printNode+0x92>
         subdirectory[ i ] = fsread8uint( addr, DIR_ADDRSUBOFFSET + i );
    239e:	09 81       	ldd	r16, Y+1	; 0x01
    23a0:	1a 81       	ldd	r17, Y+2	; 0x02
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	9a 81       	ldd	r25, Y+2	; 0x02
    23a6:	0e 96       	adiw	r24, 0x0e	; 14
    23a8:	2e a1       	ldd	r18, Y+38	; 0x26
    23aa:	3f a1       	ldd	r19, Y+39	; 0x27
    23ac:	bc 01       	movw	r22, r24
    23ae:	c9 01       	movw	r24, r18
    23b0:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    23b4:	28 2f       	mov	r18, r24
    23b6:	ce 01       	movw	r24, r28
    23b8:	44 96       	adiw	r24, 0x14	; 20
    23ba:	fc 01       	movw	r30, r24
    23bc:	e0 0f       	add	r30, r16
    23be:	f1 1f       	adc	r31, r17
    23c0:	20 83       	st	Z, r18
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	01 96       	adiw	r24, 0x01	; 1
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	9a 81       	ldd	r25, Y+2	; 0x02
    23d0:	8a 30       	cpi	r24, 0x0A	; 10
    23d2:	91 05       	cpc	r25, r1
    23d4:	24 f3       	brlt	.-56     	; 0x239e <printNode+0x64>
      } 
   }
   if (( valid > 0 ) && ( type == FILENODE )) {
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	88 23       	and	r24, r24
    23da:	11 f1       	breq	.+68     	; 0x2420 <printNode+0xe6>
    23dc:	8c 81       	ldd	r24, Y+4	; 0x04
    23de:	82 30       	cpi	r24, 0x02	; 2
    23e0:	f9 f4       	brne	.+62     	; 0x2420 <printNode+0xe6>
      for ( i = 0; i < 8; i ++ ) {
    23e2:	1a 82       	std	Y+2, r1	; 0x02
    23e4:	19 82       	std	Y+1, r1	; 0x01
    23e6:	17 c0       	rjmp	.+46     	; 0x2416 <printNode+0xdc>
         flashdirectory[ i ] = fsread8uint( addr, FILE_ADDRPAGEOFFSET + i );
    23e8:	09 81       	ldd	r16, Y+1	; 0x01
    23ea:	1a 81       	ldd	r17, Y+2	; 0x02
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	0e 96       	adiw	r24, 0x0e	; 14
    23f2:	2e a1       	ldd	r18, Y+38	; 0x26
    23f4:	3f a1       	ldd	r19, Y+39	; 0x27
    23f6:	bc 01       	movw	r22, r24
    23f8:	c9 01       	movw	r24, r18
    23fa:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    23fe:	28 2f       	mov	r18, r24
    2400:	ce 01       	movw	r24, r28
    2402:	4e 96       	adiw	r24, 0x1e	; 30
    2404:	fc 01       	movw	r30, r24
    2406:	e0 0f       	add	r30, r16
    2408:	f1 1f       	adc	r31, r17
    240a:	20 83       	st	Z, r18
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	9a 81       	ldd	r25, Y+2	; 0x02
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	88 30       	cpi	r24, 0x08	; 8
    241c:	91 05       	cpc	r25, r1
    241e:	24 f3       	brlt	.-56     	; 0x23e8 <printNode+0xae>
      } 
   }
   uid = fsread8uint( addr, 28 );
    2420:	8e a1       	ldd	r24, Y+38	; 0x26
    2422:	9f a1       	ldd	r25, Y+39	; 0x27
    2424:	6c e1       	ldi	r22, 0x1C	; 28
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    242c:	8e 83       	std	Y+6, r24	; 0x06
   parent = fsread8uint( addr, 31 );
    242e:	8e a1       	ldd	r24, Y+38	; 0x26
    2430:	9f a1       	ldd	r25, Y+39	; 0x27
    2432:	6f e1       	ldi	r22, 0x1F	; 31
    2434:	70 e0       	ldi	r23, 0x00	; 0
    2436:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    243a:	8d 83       	std	Y+5, r24	; 0x05
    243c:	a7 96       	adiw	r28, 0x27	; 39
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	08 95       	ret

00002452 <formatFS>:
   //vs patch 
   //	  printf("****Node %d*************\n", addr);
   //	  printf("filename: %s\n", filename);
   //	  printf("type (dir, file, dev, app) %d\n", type);
   //	  printf("valid is %d\n", valid);
   //	  if (type == DIRNODE)
   //	  {for (i=0;i<10;i++)
   //	  printf("The %d sub directory is %d\n", i, subdirectory[i]);
   //	  }
   if ( type == FILENODE ) {
      //		  for (i=0;i<8;i++)
      //			  printf("The %d sub flash is %d\n", i, flashdirectory[i]);
   }
   //	  printf("The node parent is %d\n", parent);
   //	  printf("*************************\n");
   return ;
}

//-------------------------------------------------------------------------
void formatFS() {
    2452:	cf 93       	push	r28
    2454:	df 93       	push	r29
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	22 97       	sbiw	r28, 0x02	; 2
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
   int i;
   for ( i = 0; i <= 96; i ++ ) {
    2466:	1a 82       	std	Y+2, r1	; 0x02
    2468:	19 82       	std	Y+1, r1	; 0x01
    246a:	0e c0       	rjmp	.+28     	; 0x2488 <formatFS+0x36>
      fsinitBytes( i, 0, 32, 0 );
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <fsinitBytes>
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	81 36       	cpi	r24, 0x61	; 97
    248e:	91 05       	cpc	r25, r1
    2490:	6c f3       	brlt	.-38     	; 0x246c <formatFS+0x1a>
   } 
   //  write8uint(i, VALIDOFFSET, 0); 
   initVectorFlash();
    2492:	0e 94 ab 1c 	call	0x3956	; 0x3956 <initVectorFlash>
   initVectorNode();
    2496:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <initVectorNode>
    249a:	22 96       	adiw	r28, 0x02	; 2
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	08 95       	ret

000024ac <formatFSLite>:
}

//-------------------------------------------------------------------------

void formatFSLite() {
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
  
   initVectorFlash();
    24b4:	0e 94 ab 1c 	call	0x3956	; 0x3956 <initVectorFlash>
   initVectorNode();
    24b8:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <initVectorNode>
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	08 95       	ret

000024c2 <deleteNode>:
}


//-------------------------------------------------------------------------
void deleteNode( int addr ) {
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	62 97       	sbiw	r28, 0x12	; 18
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	9a 8b       	std	Y+18, r25	; 0x12
    24d8:	89 8b       	std	Y+17, r24	; 0x11
   uint8_t type;
   uint8_t parent;
   type = fsread8uint( addr, TYPEOFFSET );
    24da:	89 89       	ldd	r24, Y+17	; 0x11
    24dc:	9a 89       	ldd	r25, Y+18	; 0x12
    24de:	6c e0       	ldi	r22, 0x0C	; 12
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    24e6:	88 8b       	std	Y+16, r24	; 0x10
   parent = fsread8uint( addr, 31 );
    24e8:	89 89       	ldd	r24, Y+17	; 0x11
    24ea:	9a 89       	ldd	r25, Y+18	; 0x12
    24ec:	6f e1       	ldi	r22, 0x1F	; 31
    24ee:	70 e0       	ldi	r23, 0x00	; 0
    24f0:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    24f4:	8f 87       	std	Y+15, r24	; 0x0f
   if ( type == DIRNODE ) {
    24f6:	88 89       	ldd	r24, Y+16	; 0x10
    24f8:	81 30       	cpi	r24, 0x01	; 1
    24fa:	09 f0       	breq	.+2      	; 0x24fe <deleteNode+0x3c>
    24fc:	50 c0       	rjmp	.+160    	; 0x259e <deleteNode+0xdc>
      uint8_t i;
      for ( i = 0; i < 10; i ++ ) {
    24fe:	1e 86       	std	Y+14, r1	; 0x0e
    2500:	14 c0       	rjmp	.+40     	; 0x252a <deleteNode+0x68>
         uint8_t subaddr;
         subaddr = fsread8uint( addr, DIR_ADDRSUBOFFSET + i );
    2502:	8e 85       	ldd	r24, Y+14	; 0x0e
    2504:	99 27       	eor	r25, r25
    2506:	0e 96       	adiw	r24, 0x0e	; 14
    2508:	29 89       	ldd	r18, Y+17	; 0x11
    250a:	3a 89       	ldd	r19, Y+18	; 0x12
    250c:	bc 01       	movw	r22, r24
    250e:	c9 01       	movw	r24, r18
    2510:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2514:	8d 87       	std	Y+13, r24	; 0x0d
         if ( subaddr > 0 ) {
    2516:	8d 85       	ldd	r24, Y+13	; 0x0d
    2518:	88 23       	and	r24, r24
    251a:	21 f0       	breq	.+8      	; 0x2524 <deleteNode+0x62>
            deleteNode( subaddr );
    251c:	8d 85       	ldd	r24, Y+13	; 0x0d
    251e:	99 27       	eor	r25, r25
    2520:	0e 94 61 12 	call	0x24c2	; 0x24c2 <deleteNode>
    2524:	8e 85       	ldd	r24, Y+14	; 0x0e
    2526:	8f 5f       	subi	r24, 0xFF	; 255
    2528:	8e 87       	std	Y+14, r24	; 0x0e
    252a:	8e 85       	ldd	r24, Y+14	; 0x0e
    252c:	8a 30       	cpi	r24, 0x0A	; 10
    252e:	48 f3       	brcs	.-46     	; 0x2502 <deleteNode+0x40>
         }
      }
      fswrite8uint( addr, VALIDOFFSET, 0 );
    2530:	89 89       	ldd	r24, Y+17	; 0x11
    2532:	9a 89       	ldd	r25, Y+18	; 0x12
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	6d e0       	ldi	r22, 0x0D	; 13
    2538:	70 e0       	ldi	r23, 0x00	; 0
    253a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      if (( addr == 0 ) && ( parent == 0 )){}
    253e:	89 89       	ldd	r24, Y+17	; 0x11
    2540:	9a 89       	ldd	r25, Y+18	; 0x12
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	21 f4       	brne	.+8      	; 0x254e <deleteNode+0x8c>
    2546:	8f 85       	ldd	r24, Y+15	; 0x0f
    2548:	88 23       	and	r24, r24
    254a:	09 f4       	brne	.+2      	; 0x254e <deleteNode+0x8c>
    254c:	2d c1       	rjmp	.+602    	; 0x27a8 <deleteNode+0x2e6>
       else {
         uint8_t i;
         for ( i = 0; i < 10; i ++ ) {
    254e:	1c 86       	std	Y+12, r1	; 0x0c
    2550:	22 c0       	rjmp	.+68     	; 0x2596 <deleteNode+0xd4>
            uint8_t subaddr;
            subaddr = fsread8uint( parent, DIR_ADDRSUBOFFSET + i );
    2552:	8c 85       	ldd	r24, Y+12	; 0x0c
    2554:	99 27       	eor	r25, r25
    2556:	9c 01       	movw	r18, r24
    2558:	22 5f       	subi	r18, 0xF2	; 242
    255a:	3f 4f       	sbci	r19, 0xFF	; 255
    255c:	8f 85       	ldd	r24, Y+15	; 0x0f
    255e:	99 27       	eor	r25, r25
    2560:	b9 01       	movw	r22, r18
    2562:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2566:	8b 87       	std	Y+11, r24	; 0x0b
            if ( subaddr == addr ) {
    2568:	8b 85       	ldd	r24, Y+11	; 0x0b
    256a:	28 2f       	mov	r18, r24
    256c:	33 27       	eor	r19, r19
    256e:	89 89       	ldd	r24, Y+17	; 0x11
    2570:	9a 89       	ldd	r25, Y+18	; 0x12
    2572:	28 17       	cp	r18, r24
    2574:	39 07       	cpc	r19, r25
    2576:	61 f4       	brne	.+24     	; 0x2590 <deleteNode+0xce>
               fswrite8uint( parent, DIR_ADDRSUBOFFSET + i, 0 );
    2578:	8c 85       	ldd	r24, Y+12	; 0x0c
    257a:	99 27       	eor	r25, r25
    257c:	9c 01       	movw	r18, r24
    257e:	22 5f       	subi	r18, 0xF2	; 242
    2580:	3f 4f       	sbci	r19, 0xFF	; 255
    2582:	8f 85       	ldd	r24, Y+15	; 0x0f
    2584:	99 27       	eor	r25, r25
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	b9 01       	movw	r22, r18
    258a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
               break;
    258e:	0c c1       	rjmp	.+536    	; 0x27a8 <deleteNode+0x2e6>
    2590:	8c 85       	ldd	r24, Y+12	; 0x0c
    2592:	8f 5f       	subi	r24, 0xFF	; 255
    2594:	8c 87       	std	Y+12, r24	; 0x0c
    2596:	8c 85       	ldd	r24, Y+12	; 0x0c
    2598:	8a 30       	cpi	r24, 0x0A	; 10
    259a:	d8 f2       	brcs	.-74     	; 0x2552 <deleteNode+0x90>
    259c:	05 c1       	rjmp	.+522    	; 0x27a8 <deleteNode+0x2e6>
            }
         }
      }
   } else if ( type == FILENODE ) {
    259e:	88 89       	ldd	r24, Y+16	; 0x10
    25a0:	82 30       	cpi	r24, 0x02	; 2
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <deleteNode+0xe4>
    25a4:	84 c0       	rjmp	.+264    	; 0x26ae <deleteNode+0x1ec>
      char i;
      uint8_t readpage;
      fswrite8uint( addr, VALIDOFFSET, 0 );
    25a6:	89 89       	ldd	r24, Y+17	; 0x11
    25a8:	9a 89       	ldd	r25, Y+18	; 0x12
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	6d e0       	ldi	r22, 0x0D	; 13
    25ae:	70 e0       	ldi	r23, 0x00	; 0
    25b0:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      if (( addr == 0 ) && ( parent == 0 )){}
    25b4:	89 89       	ldd	r24, Y+17	; 0x11
    25b6:	9a 89       	ldd	r25, Y+18	; 0x12
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	21 f4       	brne	.+8      	; 0x25c4 <deleteNode+0x102>
    25bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25be:	88 23       	and	r24, r24
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <deleteNode+0x102>
    25c2:	2b c0       	rjmp	.+86     	; 0x261a <deleteNode+0x158>
       else {
         for ( i = 0; i < 10; i ++ ) {
    25c4:	1a 86       	std	Y+10, r1	; 0x0a
    25c6:	26 c0       	rjmp	.+76     	; 0x2614 <deleteNode+0x152>
            uint8_t subaddr;
            subaddr = fsread8uint( parent, DIR_ADDRSUBOFFSET + i );
    25c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ca:	99 27       	eor	r25, r25
    25cc:	87 fd       	sbrc	r24, 7
    25ce:	90 95       	com	r25
    25d0:	9c 01       	movw	r18, r24
    25d2:	22 5f       	subi	r18, 0xF2	; 242
    25d4:	3f 4f       	sbci	r19, 0xFF	; 255
    25d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d8:	99 27       	eor	r25, r25
    25da:	b9 01       	movw	r22, r18
    25dc:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    25e0:	88 87       	std	Y+8, r24	; 0x08
            if ( subaddr == addr ) {
    25e2:	88 85       	ldd	r24, Y+8	; 0x08
    25e4:	28 2f       	mov	r18, r24
    25e6:	33 27       	eor	r19, r19
    25e8:	89 89       	ldd	r24, Y+17	; 0x11
    25ea:	9a 89       	ldd	r25, Y+18	; 0x12
    25ec:	28 17       	cp	r18, r24
    25ee:	39 07       	cpc	r19, r25
    25f0:	71 f4       	brne	.+28     	; 0x260e <deleteNode+0x14c>
               fswrite8uint( parent, DIR_ADDRSUBOFFSET + i, 0 );
    25f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25f4:	99 27       	eor	r25, r25
    25f6:	87 fd       	sbrc	r24, 7
    25f8:	90 95       	com	r25
    25fa:	9c 01       	movw	r18, r24
    25fc:	22 5f       	subi	r18, 0xF2	; 242
    25fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2600:	8f 85       	ldd	r24, Y+15	; 0x0f
    2602:	99 27       	eor	r25, r25
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	b9 01       	movw	r22, r18
    2608:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
               break;
    260c:	06 c0       	rjmp	.+12     	; 0x261a <deleteNode+0x158>
    260e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2610:	8f 5f       	subi	r24, 0xFF	; 255
    2612:	8a 87       	std	Y+10, r24	; 0x0a
    2614:	8a 85       	ldd	r24, Y+10	; 0x0a
    2616:	8a 30       	cpi	r24, 0x0A	; 10
    2618:	bc f2       	brlt	.-82     	; 0x25c8 <deleteNode+0x106>
            }
         }
      }
      /*   for (i=0;i<8;i++)
      {
      readpage = read8uint(addr, FILE_ADDRPAGEOFFSET+i);
      if (readpage==0)
      break;
      else
      releaseFlashPage(readpage);
      }
       */
      for ( i = 0; i < 8; i ++ ) {
    261a:	1a 86       	std	Y+10, r1	; 0x0a
    261c:	16 c0       	rjmp	.+44     	; 0x264a <deleteNode+0x188>
         readpage = fsread8uint( addr, FILE_ADDRPAGEOFFSET + i );
    261e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2620:	99 27       	eor	r25, r25
    2622:	87 fd       	sbrc	r24, 7
    2624:	90 95       	com	r25
    2626:	0e 96       	adiw	r24, 0x0e	; 14
    2628:	29 89       	ldd	r18, Y+17	; 0x11
    262a:	3a 89       	ldd	r19, Y+18	; 0x12
    262c:	bc 01       	movw	r22, r24
    262e:	c9 01       	movw	r24, r18
    2630:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2634:	89 87       	std	Y+9, r24	; 0x09
         if ( readpage == 0 ) {
    2636:	89 85       	ldd	r24, Y+9	; 0x09
    2638:	88 23       	and	r24, r24
    263a:	51 f0       	breq	.+20     	; 0x2650 <deleteNode+0x18e>
            break;
         } else {
            releaseFlashPage( readpage );
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	99 27       	eor	r25, r25
    2640:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <releaseFlashPage>
    2644:	8a 85       	ldd	r24, Y+10	; 0x0a
    2646:	8f 5f       	subi	r24, 0xFF	; 255
    2648:	8a 87       	std	Y+10, r24	; 0x0a
    264a:	8a 85       	ldd	r24, Y+10	; 0x0a
    264c:	88 30       	cpi	r24, 0x08	; 8
    264e:	3c f3       	brlt	.-50     	; 0x261e <deleteNode+0x15c>
         } 
      }
       {
         uint8_t currentaddr;
         //	   uint8_t currentstep;
         currentaddr = addr;
    2650:	89 89       	ldd	r24, Y+17	; 0x11
    2652:	8f 83       	std	Y+7, r24	; 0x07
    2654:	00 c0       	rjmp	.+0      	; 0x2656 <deleteNode+0x194>
         while ( 1 ) {
            currentaddr = fsread8uint( currentaddr, FILE_NEXTOFFSET );
    2656:	8f 81       	ldd	r24, Y+7	; 0x07
    2658:	99 27       	eor	r25, r25
    265a:	68 e1       	ldi	r22, 0x18	; 24
    265c:	70 e0       	ldi	r23, 0x00	; 0
    265e:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2662:	8f 83       	std	Y+7, r24	; 0x07
            if ( currentaddr > 0 ) {
    2664:	8f 81       	ldd	r24, Y+7	; 0x07
    2666:	88 23       	and	r24, r24
    2668:	09 f4       	brne	.+2      	; 0x266c <deleteNode+0x1aa>
    266a:	9e c0       	rjmp	.+316    	; 0x27a8 <deleteNode+0x2e6>
               releaseVectorNode( currentaddr );
    266c:	8f 81       	ldd	r24, Y+7	; 0x07
    266e:	99 27       	eor	r25, r25
    2670:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <releaseVectorNode>
               for ( i = 0; i < 8; i ++ ) {
    2674:	1a 86       	std	Y+10, r1	; 0x0a
    2676:	17 c0       	rjmp	.+46     	; 0x26a6 <deleteNode+0x1e4>
                  readpage = fsread8uint( currentaddr, FILE_ADDRPAGEOFFSET + i );
    2678:	8a 85       	ldd	r24, Y+10	; 0x0a
    267a:	99 27       	eor	r25, r25
    267c:	87 fd       	sbrc	r24, 7
    267e:	90 95       	com	r25
    2680:	9c 01       	movw	r18, r24
    2682:	22 5f       	subi	r18, 0xF2	; 242
    2684:	3f 4f       	sbci	r19, 0xFF	; 255
    2686:	8f 81       	ldd	r24, Y+7	; 0x07
    2688:	99 27       	eor	r25, r25
    268a:	b9 01       	movw	r22, r18
    268c:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2690:	89 87       	std	Y+9, r24	; 0x09
                  if ( readpage == 0 ) {
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	88 23       	and	r24, r24
    2696:	f9 f2       	breq	.-66     	; 0x2656 <deleteNode+0x194>
                     break;
                  } else {
                     releaseFlashPage( readpage );
    2698:	89 85       	ldd	r24, Y+9	; 0x09
    269a:	99 27       	eor	r25, r25
    269c:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <releaseFlashPage>
    26a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    26a2:	8f 5f       	subi	r24, 0xFF	; 255
    26a4:	8a 87       	std	Y+10, r24	; 0x0a
    26a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    26a8:	88 30       	cpi	r24, 0x08	; 8
    26aa:	34 f3       	brlt	.-52     	; 0x2678 <deleteNode+0x1b6>
                  } 
               }
            } else {
               break;
            } 
         }
    26ac:	d4 cf       	rjmp	.-88     	; 0x2656 <deleteNode+0x194>
      }
   }
    else if ( type == DEVNODE ) {
    26ae:	88 89       	ldd	r24, Y+16	; 0x10
    26b0:	83 30       	cpi	r24, 0x03	; 3
    26b2:	e1 f5       	brne	.+120    	; 0x272c <deleteNode+0x26a>
      fswrite8uint( addr, VALIDOFFSET, 0 );
    26b4:	89 89       	ldd	r24, Y+17	; 0x11
    26b6:	9a 89       	ldd	r25, Y+18	; 0x12
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	6d e0       	ldi	r22, 0x0D	; 13
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      if (( addr == 0 ) && ( parent == 0 )){}
    26c2:	89 89       	ldd	r24, Y+17	; 0x11
    26c4:	9a 89       	ldd	r25, Y+18	; 0x12
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	21 f4       	brne	.+8      	; 0x26d2 <deleteNode+0x210>
    26ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    26cc:	88 23       	and	r24, r24
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <deleteNode+0x210>
    26d0:	6b c0       	rjmp	.+214    	; 0x27a8 <deleteNode+0x2e6>
       else {
         int i;
         for ( i = 0; i < 10; i ++ ) {
    26d2:	1e 82       	std	Y+6, r1	; 0x06
    26d4:	1d 82       	std	Y+5, r1	; 0x05
    26d6:	24 c0       	rjmp	.+72     	; 0x2720 <deleteNode+0x25e>
            uint8_t subaddr;
            subaddr = fsread8uint( parent, DIR_ADDRSUBOFFSET + i );
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	9e 81       	ldd	r25, Y+6	; 0x06
    26dc:	9c 01       	movw	r18, r24
    26de:	22 5f       	subi	r18, 0xF2	; 242
    26e0:	3f 4f       	sbci	r19, 0xFF	; 255
    26e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e4:	99 27       	eor	r25, r25
    26e6:	b9 01       	movw	r22, r18
    26e8:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    26ec:	8c 83       	std	Y+4, r24	; 0x04
            if ( subaddr == addr ) {
    26ee:	8c 81       	ldd	r24, Y+4	; 0x04
    26f0:	28 2f       	mov	r18, r24
    26f2:	33 27       	eor	r19, r19
    26f4:	89 89       	ldd	r24, Y+17	; 0x11
    26f6:	9a 89       	ldd	r25, Y+18	; 0x12
    26f8:	28 17       	cp	r18, r24
    26fa:	39 07       	cpc	r19, r25
    26fc:	61 f4       	brne	.+24     	; 0x2716 <deleteNode+0x254>
               fswrite8uint( parent, DIR_ADDRSUBOFFSET + i, 0 );
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	9e 81       	ldd	r25, Y+6	; 0x06
    2702:	9c 01       	movw	r18, r24
    2704:	22 5f       	subi	r18, 0xF2	; 242
    2706:	3f 4f       	sbci	r19, 0xFF	; 255
    2708:	8f 85       	ldd	r24, Y+15	; 0x0f
    270a:	99 27       	eor	r25, r25
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	b9 01       	movw	r22, r18
    2710:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
               break;
    2714:	49 c0       	rjmp	.+146    	; 0x27a8 <deleteNode+0x2e6>
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	8a 30       	cpi	r24, 0x0A	; 10
    2726:	91 05       	cpc	r25, r1
    2728:	bc f2       	brlt	.-82     	; 0x26d8 <deleteNode+0x216>
    272a:	3e c0       	rjmp	.+124    	; 0x27a8 <deleteNode+0x2e6>
            }
         }
      }
   }
    else if ( type == APPNODE ) {
    272c:	88 89       	ldd	r24, Y+16	; 0x10
    272e:	84 30       	cpi	r24, 0x04	; 4
    2730:	d9 f5       	brne	.+118    	; 0x27a8 <deleteNode+0x2e6>
      fswrite8uint( addr, VALIDOFFSET, 0 );
    2732:	89 89       	ldd	r24, Y+17	; 0x11
    2734:	9a 89       	ldd	r25, Y+18	; 0x12
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	6d e0       	ldi	r22, 0x0D	; 13
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
      if (( addr == 0 ) && ( parent == 0 )){}
    2740:	89 89       	ldd	r24, Y+17	; 0x11
    2742:	9a 89       	ldd	r25, Y+18	; 0x12
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	21 f4       	brne	.+8      	; 0x2750 <deleteNode+0x28e>
    2748:	8f 85       	ldd	r24, Y+15	; 0x0f
    274a:	88 23       	and	r24, r24
    274c:	09 f4       	brne	.+2      	; 0x2750 <deleteNode+0x28e>
    274e:	2c c0       	rjmp	.+88     	; 0x27a8 <deleteNode+0x2e6>
       else {
         int i;
         for ( i = 0; i < 10; i ++ ) {
    2750:	1b 82       	std	Y+3, r1	; 0x03
    2752:	1a 82       	std	Y+2, r1	; 0x02
    2754:	24 c0       	rjmp	.+72     	; 0x279e <deleteNode+0x2dc>
            uint8_t subaddr;
            subaddr = fsread8uint( parent, DIR_ADDRSUBOFFSET + i );
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	9b 81       	ldd	r25, Y+3	; 0x03
    275a:	9c 01       	movw	r18, r24
    275c:	22 5f       	subi	r18, 0xF2	; 242
    275e:	3f 4f       	sbci	r19, 0xFF	; 255
    2760:	8f 85       	ldd	r24, Y+15	; 0x0f
    2762:	99 27       	eor	r25, r25
    2764:	b9 01       	movw	r22, r18
    2766:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    276a:	89 83       	std	Y+1, r24	; 0x01
            if ( subaddr == addr ) {
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	28 2f       	mov	r18, r24
    2770:	33 27       	eor	r19, r19
    2772:	89 89       	ldd	r24, Y+17	; 0x11
    2774:	9a 89       	ldd	r25, Y+18	; 0x12
    2776:	28 17       	cp	r18, r24
    2778:	39 07       	cpc	r19, r25
    277a:	61 f4       	brne	.+24     	; 0x2794 <deleteNode+0x2d2>
              fswrite8uint( parent, DIR_ADDRSUBOFFSET + i, 0 );
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	9b 81       	ldd	r25, Y+3	; 0x03
    2780:	9c 01       	movw	r18, r24
    2782:	22 5f       	subi	r18, 0xF2	; 242
    2784:	3f 4f       	sbci	r19, 0xFF	; 255
    2786:	8f 85       	ldd	r24, Y+15	; 0x0f
    2788:	99 27       	eor	r25, r25
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	b9 01       	movw	r22, r18
    278e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
               break;
    2792:	0a c0       	rjmp	.+20     	; 0x27a8 <deleteNode+0x2e6>
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	9b 81       	ldd	r25, Y+3	; 0x03
    2798:	01 96       	adiw	r24, 0x01	; 1
    279a:	9b 83       	std	Y+3, r25	; 0x03
    279c:	8a 83       	std	Y+2, r24	; 0x02
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	9b 81       	ldd	r25, Y+3	; 0x03
    27a2:	8a 30       	cpi	r24, 0x0A	; 10
    27a4:	91 05       	cpc	r25, r1
    27a6:	bc f2       	brlt	.-82     	; 0x2756 <deleteNode+0x294>
            }
         }
      }
   }
   releaseVectorNode( addr );
    27a8:	89 89       	ldd	r24, Y+17	; 0x11
    27aa:	9a 89       	ldd	r25, Y+18	; 0x12
    27ac:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <releaseVectorNode>
    27b0:	62 96       	adiw	r28, 0x12	; 18
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	cd bf       	out	0x3d, r28	; 61
    27bc:	df 91       	pop	r29
    27be:	cf 91       	pop	r28
    27c0:	08 95       	ret

000027c2 <buildRootNode>:
}

//-------------------------------------------------------------------------
void buildRootNode() {
    27c2:	0f 93       	push	r16
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
   buildNewNode( FSROOTNODE, "root", 0, 0, DIRNODE );
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	91 e0       	ldi	r25, 0x01	; 1
    27d0:	01 e0       	ldi	r16, 0x01	; 1
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	bc 01       	movw	r22, r24
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 50 10 	call	0x20a0	; 0x20a0 <buildNewNode>
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	0f 91       	pop	r16
    27e6:	08 95       	ret

000027e8 <SocketSendRadioThroughCommandandAdcTask>:
}

void SocketSendRadioThroughCommandandAdcTask()
{
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	08 95       	ret

000027f6 <buildDeviceDirectory>:
  //dummy now. to fix. 

}

//-------------------------------------------------------------------------
void buildDeviceDirectory() {
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	25 97       	sbiw	r28, 0x05	; 5
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
   uint8_t newaddr;
   newaddr = getVectorNode();
    280e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <getVectorNode>
    2812:	8d 83       	std	Y+5, r24	; 0x05
   buildNewNode( newaddr, "dev", 0, FSROOTNODE, DIRNODE );
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	e8 2f       	mov	r30, r24
    2818:	ff 27       	eor	r31, r31
    281a:	85 e0       	ldi	r24, 0x05	; 5
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	01 e0       	ldi	r16, 0x01	; 1
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	bc 01       	movw	r22, r24
    2826:	cf 01       	movw	r24, r30
    2828:	0e 94 50 10 	call	0x20a0	; 0x20a0 <buildNewNode>
   //Now start building the device nodes 
   //platform dependent
   
   #ifdef PLATFORM_AVR
   {
   	uint8_t *adc_parameter;
   	uint8_t *adc_returnvalue; 
   	adc_parameter = getAdcParameterAddr();
    282c:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <getAdcParameterAddr>
    2830:	9c 83       	std	Y+4, r25	; 0x04
    2832:	8b 83       	std	Y+3, r24	; 0x03
   	adc_returnvalue = getAdcReturnValueAddr();
    2834:	0e 94 39 3e 	call	0x7c72	; 0x7c72 <getAdcReturnValueAddr>
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
   buildDeviceNode( newaddr, "led", set_led_task, ( uint8_t* )adc_parameter, ( uint8_t* ) adc_returnvalue );
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	2b 81       	ldd	r18, Y+3	; 0x03
    2842:	3c 81       	ldd	r19, Y+4	; 0x04
    2844:	40 e7       	ldi	r20, 0x70	; 112
    2846:	59 e5       	ldi	r21, 0x59	; 89
    2848:	69 e0       	ldi	r22, 0x09	; 9
    284a:	71 e0       	ldi	r23, 0x01	; 1
    284c:	8c 01       	movw	r16, r24
    284e:	8d 81       	ldd	r24, Y+5	; 0x05
    2850:	0e 94 71 14 	call	0x28e2	; 0x28e2 <buildDeviceNode>
   buildDeviceNode( newaddr, "light", get_light_task, ( uint8_t* )adc_parameter, ( uint8_t* ) adc_returnvalue );
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	9a 81       	ldd	r25, Y+2	; 0x02
    2858:	2b 81       	ldd	r18, Y+3	; 0x03
    285a:	3c 81       	ldd	r19, Y+4	; 0x04
    285c:	4f e3       	ldi	r20, 0x3F	; 63
    285e:	50 e4       	ldi	r21, 0x40	; 64
    2860:	6d e0       	ldi	r22, 0x0D	; 13
    2862:	71 e0       	ldi	r23, 0x01	; 1
    2864:	8c 01       	movw	r16, r24
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	0e 94 71 14 	call	0x28e2	; 0x28e2 <buildDeviceNode>
   buildDeviceNode( newaddr, "temp", get_temp_task, ( uint8_t* )adc_parameter, ( uint8_t* )adc_returnvalue );
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	9a 81       	ldd	r25, Y+2	; 0x02
    2870:	2b 81       	ldd	r18, Y+3	; 0x03
    2872:	3c 81       	ldd	r19, Y+4	; 0x04
    2874:	4c e5       	ldi	r20, 0x5C	; 92
    2876:	50 e4       	ldi	r21, 0x40	; 64
    2878:	63 e1       	ldi	r22, 0x13	; 19
    287a:	71 e0       	ldi	r23, 0x01	; 1
    287c:	8c 01       	movw	r16, r24
    287e:	8d 81       	ldd	r24, Y+5	; 0x05
    2880:	0e 94 71 14 	call	0x28e2	; 0x28e2 <buildDeviceNode>
   buildDeviceNode( newaddr, "magnet", get_mag_task_x, ( uint8_t* )adc_parameter, ( uint8_t* ) adc_returnvalue );
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	2b 81       	ldd	r18, Y+3	; 0x03
    288a:	3c 81       	ldd	r19, Y+4	; 0x04
    288c:	43 eb       	ldi	r20, 0xB3	; 179
    288e:	50 e4       	ldi	r21, 0x40	; 64
    2890:	68 e1       	ldi	r22, 0x18	; 24
    2892:	71 e0       	ldi	r23, 0x01	; 1
    2894:	8c 01       	movw	r16, r24
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	0e 94 71 14 	call	0x28e2	; 0x28e2 <buildDeviceNode>
   buildDeviceNode( newaddr, "accel", get_acc_task_x, ( uint8_t* )adc_parameter, ( uint8_t* ) adc_returnvalue );
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	2b 81       	ldd	r18, Y+3	; 0x03
    28a2:	3c 81       	ldd	r19, Y+4	; 0x04
    28a4:	49 e7       	ldi	r20, 0x79	; 121
    28a6:	50 e4       	ldi	r21, 0x40	; 64
    28a8:	6f e1       	ldi	r22, 0x1F	; 31
    28aa:	71 e0       	ldi	r23, 0x01	; 1
    28ac:	8c 01       	movw	r16, r24
    28ae:	8d 81       	ldd	r24, Y+5	; 0x05
    28b0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <buildDeviceNode>
   buildDeviceNode( newaddr, "radio", SocketSendRadioThroughCommandandAdcTask, ( uint8_t* )adc_parameter, ( uint8_t* ) adc_returnvalue );
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	9a 81       	ldd	r25, Y+2	; 0x02
    28b8:	2b 81       	ldd	r18, Y+3	; 0x03
    28ba:	3c 81       	ldd	r19, Y+4	; 0x04
    28bc:	44 ef       	ldi	r20, 0xF4	; 244
    28be:	53 e1       	ldi	r21, 0x13	; 19
    28c0:	65 e2       	ldi	r22, 0x25	; 37
    28c2:	71 e0       	ldi	r23, 0x01	; 1
    28c4:	8c 01       	movw	r16, r24
    28c6:	8d 81       	ldd	r24, Y+5	; 0x05
    28c8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <buildDeviceNode>
    28cc:	25 96       	adiw	r28, 0x05	; 5
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	08 95       	ret

000028e2 <buildDeviceNode>:
   }
   #endif
}

//-------------------------------------------------------------------------
void buildDeviceNode( uint8_t parentnode, char *name, void( *entryfunc )( void ), uint8_t *ramparameterstart, uint8_t *ramreturnstart ) {
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	2c 97       	sbiw	r28, 0x0c	; 12
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	8c 83       	std	Y+4, r24	; 0x04
    28fc:	7e 83       	std	Y+6, r23	; 0x06
    28fe:	6d 83       	std	Y+5, r22	; 0x05
    2900:	58 87       	std	Y+8, r21	; 0x08
    2902:	4f 83       	std	Y+7, r20	; 0x07
    2904:	3a 87       	std	Y+10, r19	; 0x0a
    2906:	29 87       	std	Y+9, r18	; 0x09
    2908:	1c 87       	std	Y+12, r17	; 0x0c
    290a:	0b 87       	std	Y+11, r16	; 0x0b
   uint8_t newaddr;
   uint16_t temp;
   newaddr = getVectorNode();
    290c:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <getVectorNode>
    2910:	8b 83       	std	Y+3, r24	; 0x03
   buildNewNode( newaddr, name, 0, parentnode, DEVNODE );
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	e8 2f       	mov	r30, r24
    2916:	ff 27       	eor	r31, r31
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	9e 81       	ldd	r25, Y+6	; 0x06
    291c:	03 e0       	ldi	r16, 0x03	; 3
    291e:	2c 81       	ldd	r18, Y+4	; 0x04
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	bc 01       	movw	r22, r24
    2924:	cf 01       	movw	r24, r30
    2926:	0e 94 50 10 	call	0x20a0	; 0x20a0 <buildNewNode>
   temp = ( uint16_t )entryfunc;
    292a:	8f 81       	ldd	r24, Y+7	; 0x07
    292c:	98 85       	ldd	r25, Y+8	; 0x08
    292e:	9a 83       	std	Y+2, r25	; 0x02
    2930:	89 83       	std	Y+1, r24	; 0x01
   fswrite16uint( newaddr, DEV_PROGRAMENTRYOFFSET, temp );
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	28 2f       	mov	r18, r24
    2936:	33 27       	eor	r19, r19
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	ac 01       	movw	r20, r24
    293e:	6e e0       	ldi	r22, 0x0E	; 14
    2940:	70 e0       	ldi	r23, 0x00	; 0
    2942:	c9 01       	movw	r24, r18
    2944:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <fswrite16uint>
   temp = ( uint16_t )ramparameterstart;
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
   fswrite16int( newaddr, DEV_PROGRAMENTRYOFFSET + 2, temp );
    2950:	29 81       	ldd	r18, Y+1	; 0x01
    2952:	3a 81       	ldd	r19, Y+2	; 0x02
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	99 27       	eor	r25, r25
    2958:	a9 01       	movw	r20, r18
    295a:	60 e1       	ldi	r22, 0x10	; 16
    295c:	70 e0       	ldi	r23, 0x00	; 0
    295e:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <fswrite16int>
   temp = ( uint16_t )ramreturnstart;
    2962:	8b 85       	ldd	r24, Y+11	; 0x0b
    2964:	9c 85       	ldd	r25, Y+12	; 0x0c
    2966:	9a 83       	std	Y+2, r25	; 0x02
    2968:	89 83       	std	Y+1, r24	; 0x01
   fswrite16uint( newaddr, DEV_PROGRAMENTRYOFFSET + 4, temp );
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	28 2f       	mov	r18, r24
    296e:	33 27       	eor	r19, r19
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	ac 01       	movw	r20, r24
    2976:	62 e1       	ldi	r22, 0x12	; 18
    2978:	70 e0       	ldi	r23, 0x00	; 0
    297a:	c9 01       	movw	r24, r18
    297c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <fswrite16uint>
    2980:	2c 96       	adiw	r28, 0x0c	; 12
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	1f 91       	pop	r17
    2992:	0f 91       	pop	r16
    2994:	08 95       	ret

00002996 <copyVectorNode>:
}

//-------------------------------------------------------------------------
void copyVectorNode( int from, int to ) {
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	27 97       	sbiw	r28, 0x07	; 7
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	9d 83       	std	Y+5, r25	; 0x05
    29ac:	8c 83       	std	Y+4, r24	; 0x04
    29ae:	7f 83       	std	Y+7, r23	; 0x07
    29b0:	6e 83       	std	Y+6, r22	; 0x06
   int i;
   for ( i = 0; i < 32; i ++ ) {
    29b2:	1b 82       	std	Y+3, r1	; 0x03
    29b4:	1a 82       	std	Y+2, r1	; 0x02
    29b6:	17 c0       	rjmp	.+46     	; 0x29e6 <copyVectorNode+0x50>
      uint8_t temp;
      temp = fsread8uint( from, i );
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	9b 81       	ldd	r25, Y+3	; 0x03
    29bc:	2c 81       	ldd	r18, Y+4	; 0x04
    29be:	3d 81       	ldd	r19, Y+5	; 0x05
    29c0:	bc 01       	movw	r22, r24
    29c2:	c9 01       	movw	r24, r18
    29c4:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    29c8:	89 83       	std	Y+1, r24	; 0x01
      fswrite8uint( to, i, temp );
    29ca:	8a 81       	ldd	r24, Y+2	; 0x02
    29cc:	9b 81       	ldd	r25, Y+3	; 0x03
    29ce:	2e 81       	ldd	r18, Y+6	; 0x06
    29d0:	3f 81       	ldd	r19, Y+7	; 0x07
    29d2:	49 81       	ldd	r20, Y+1	; 0x01
    29d4:	bc 01       	movw	r22, r24
    29d6:	c9 01       	movw	r24, r18
    29d8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
    29dc:	8a 81       	ldd	r24, Y+2	; 0x02
    29de:	9b 81       	ldd	r25, Y+3	; 0x03
    29e0:	01 96       	adiw	r24, 0x01	; 1
    29e2:	9b 83       	std	Y+3, r25	; 0x03
    29e4:	8a 83       	std	Y+2, r24	; 0x02
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ea:	80 32       	cpi	r24, 0x20	; 32
    29ec:	91 05       	cpc	r25, r1
    29ee:	24 f3       	brlt	.-56     	; 0x29b8 <copyVectorNode+0x22>
    29f0:	27 96       	adiw	r28, 0x07	; 7
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	08 95       	ret

00002a02 <copyVectorPage>:
   }
}

//-------------------------------------------------------------------------
void copyVectorPage( int from, int to ) {
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	2a 97       	sbiw	r28, 0x0a	; 10
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	98 87       	std	Y+8, r25	; 0x08
    2a18:	8f 83       	std	Y+7, r24	; 0x07
    2a1a:	7a 87       	std	Y+10, r23	; 0x0a
    2a1c:	69 87       	std	Y+9, r22	; 0x09
   int i;
   int pagefrom, pageto;
   for ( i = 0; i < 8; i ++ ) {
    2a1e:	1e 82       	std	Y+6, r1	; 0x06
    2a20:	1d 82       	std	Y+5, r1	; 0x05
    2a22:	2d c0       	rjmp	.+90     	; 0x2a7e <copyVectorPage+0x7c>
      pagefrom = i + ( from - 1 ) *8;
    2a24:	8f 81       	ldd	r24, Y+7	; 0x07
    2a26:	98 85       	ldd	r25, Y+8	; 0x08
    2a28:	9c 01       	movw	r18, r24
    2a2a:	22 0f       	add	r18, r18
    2a2c:	33 1f       	adc	r19, r19
    2a2e:	22 0f       	add	r18, r18
    2a30:	33 1f       	adc	r19, r19
    2a32:	22 0f       	add	r18, r18
    2a34:	33 1f       	adc	r19, r19
    2a36:	8d 81       	ldd	r24, Y+5	; 0x05
    2a38:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3a:	82 0f       	add	r24, r18
    2a3c:	93 1f       	adc	r25, r19
    2a3e:	08 97       	sbiw	r24, 0x08	; 8
    2a40:	9c 83       	std	Y+4, r25	; 0x04
    2a42:	8b 83       	std	Y+3, r24	; 0x03
      pageto = i + ( to - 1 ) *8;
    2a44:	89 85       	ldd	r24, Y+9	; 0x09
    2a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a48:	9c 01       	movw	r18, r24
    2a4a:	22 0f       	add	r18, r18
    2a4c:	33 1f       	adc	r19, r19
    2a4e:	22 0f       	add	r18, r18
    2a50:	33 1f       	adc	r19, r19
    2a52:	22 0f       	add	r18, r18
    2a54:	33 1f       	adc	r19, r19
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	82 0f       	add	r24, r18
    2a5c:	93 1f       	adc	r25, r19
    2a5e:	08 97       	sbiw	r24, 0x08	; 8
    2a60:	9a 83       	std	Y+2, r25	; 0x02
    2a62:	89 83       	std	Y+1, r24	; 0x01
      copyFlash( pagefrom, pageto );
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	9a 81       	ldd	r25, Y+2	; 0x02
    2a68:	2b 81       	ldd	r18, Y+3	; 0x03
    2a6a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a6c:	bc 01       	movw	r22, r24
    2a6e:	c9 01       	movw	r24, r18
    2a70:	0e 94 af 43 	call	0x875e	; 0x875e <copyFlash>
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	88 30       	cpi	r24, 0x08	; 8
    2a84:	91 05       	cpc	r25, r1
    2a86:	74 f2       	brlt	.-100    	; 0x2a24 <copyVectorPage+0x22>
    2a88:	2a 96       	adiw	r28, 0x0a	; 10
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	df 91       	pop	r29
    2a96:	cf 91       	pop	r28
    2a98:	08 95       	ret

00002a9a <inodeMatch>:
   }
   return ;
}

//-------------------------------------------------------------------------
int inodeMatch( uint8_t addr, char *string ) {
    2a9a:	cf 93       	push	r28
    2a9c:	df 93       	push	r29
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	65 97       	sbiw	r28, 0x15	; 21
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	89 8b       	std	Y+17, r24	; 0x11
    2ab0:	7b 8b       	std	Y+19, r23	; 0x13
    2ab2:	6a 8b       	std	Y+18, r22	; 0x12
   char temp[ 13 ];
   uint8_t length;
   uint8_t i;
   uint8_t valid;
   valid = fsread8uint( addr, VALIDOFFSET );
    2ab4:	89 89       	ldd	r24, Y+17	; 0x11
    2ab6:	99 27       	eor	r25, r25
    2ab8:	6d e0       	ldi	r22, 0x0D	; 13
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2ac0:	89 83       	std	Y+1, r24	; 0x01
   if ( valid == 0 ) {
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	88 23       	and	r24, r24
    2ac6:	19 f4       	brne	.+6      	; 0x2ace <inodeMatch+0x34>
      return 0;
    2ac8:	1d 8a       	std	Y+21, r1	; 0x15
    2aca:	1c 8a       	std	Y+20, r1	; 0x14
    2acc:	31 c0       	rjmp	.+98     	; 0x2b30 <inodeMatch+0x96>
   } 
   fsreadBytes( addr, FILENAMEOFFSET, 12, temp );
    2ace:	89 89       	ldd	r24, Y+17	; 0x11
    2ad0:	e8 2f       	mov	r30, r24
    2ad2:	ff 27       	eor	r31, r31
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	04 96       	adiw	r24, 0x04	; 4
    2ad8:	9c 01       	movw	r18, r24
    2ada:	4c e0       	ldi	r20, 0x0C	; 12
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	cf 01       	movw	r24, r30
    2ae4:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <fsreadBytes>
   temp[ 12 ] = '\0';
    2ae8:	18 8a       	std	Y+16, r1	; 0x10
   length = mystrlen( temp );
    2aea:	ce 01       	movw	r24, r28
    2aec:	04 96       	adiw	r24, 0x04	; 4
    2aee:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    2af2:	8b 83       	std	Y+3, r24	; 0x03
   for ( i = 0; i < length; i ++ ) {
    2af4:	1a 82       	std	Y+2, r1	; 0x02
    2af6:	16 c0       	rjmp	.+44     	; 0x2b24 <inodeMatch+0x8a>
      if ( superstring( temp + i, string ) == 0 ) {
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	99 27       	eor	r25, r25
    2afc:	9c 01       	movw	r18, r24
    2afe:	ce 01       	movw	r24, r28
    2b00:	04 96       	adiw	r24, 0x04	; 4
    2b02:	82 0f       	add	r24, r18
    2b04:	93 1f       	adc	r25, r19
    2b06:	2a 89       	ldd	r18, Y+18	; 0x12
    2b08:	3b 89       	ldd	r19, Y+19	; 0x13
    2b0a:	b9 01       	movw	r22, r18
    2b0c:	0e 94 e5 9a 	call	0x135ca	; 0x135ca <superstring>
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	29 f4       	brne	.+10     	; 0x2b1e <inodeMatch+0x84>
         return 1;
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9d 8b       	std	Y+21, r25	; 0x15
    2b1a:	8c 8b       	std	Y+20, r24	; 0x14
    2b1c:	09 c0       	rjmp	.+18     	; 0x2b30 <inodeMatch+0x96>
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	8f 5f       	subi	r24, 0xFF	; 255
    2b22:	8a 83       	std	Y+2, r24	; 0x02
    2b24:	9a 81       	ldd	r25, Y+2	; 0x02
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	98 17       	cp	r25, r24
    2b2a:	30 f3       	brcs	.-52     	; 0x2af8 <inodeMatch+0x5e>
      } 
   }
   return 0;
    2b2c:	1d 8a       	std	Y+21, r1	; 0x15
    2b2e:	1c 8a       	std	Y+20, r1	; 0x14
    2b30:	8c 89       	ldd	r24, Y+20	; 0x14
    2b32:	9d 89       	ldd	r25, Y+21	; 0x15
    2b34:	65 96       	adiw	r28, 0x15	; 21
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	cd bf       	out	0x3d, r28	; 61
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	08 95       	ret

00002b46 <checkName>:
//filename should be no more than 12 bytes and must end with \0
//the checking goes as follows. It checks the bytes by bytes and make sure that 
//the string mathces. if not match then 1 if \0 and match then 0 otherwise proceeds 
//and the filename must be valid 
int checkName( char *filename, int addr ) {
    2b46:	1f 93       	push	r17
    2b48:	cf 93       	push	r28
    2b4a:	df 93       	push	r29
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
    2b50:	2a 97       	sbiw	r28, 0x0a	; 10
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	cd bf       	out	0x3d, r28	; 61
    2b5c:	9e 83       	std	Y+6, r25	; 0x06
    2b5e:	8d 83       	std	Y+5, r24	; 0x05
    2b60:	78 87       	std	Y+8, r23	; 0x08
    2b62:	6f 83       	std	Y+7, r22	; 0x07
   char *p;
   int i;
   i = 0;
    2b64:	1a 82       	std	Y+2, r1	; 0x02
    2b66:	19 82       	std	Y+1, r1	; 0x01
   if ( mystrlen( filename ) > 12 ) {
    2b68:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6c:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    2b70:	8d 30       	cpi	r24, 0x0D	; 13
    2b72:	91 05       	cpc	r25, r1
    2b74:	2c f0       	brlt	.+10     	; 0x2b80 <checkName+0x3a>
      return 1;
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9a 87       	std	Y+10, r25	; 0x0a
    2b7c:	89 87       	std	Y+9, r24	; 0x09
    2b7e:	42 c0       	rjmp	.+132    	; 0x2c04 <checkName+0xbe>
   } 
   if ( checkNodeValid( addr ) == 0 ) {
    2b80:	8f 81       	ldd	r24, Y+7	; 0x07
    2b82:	98 85       	ldd	r25, Y+8	; 0x08
    2b84:	0e 94 20 10 	call	0x2040	; 0x2040 <checkNodeValid>
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	29 f4       	brne	.+10     	; 0x2b96 <checkName+0x50>
      return 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9a 87       	std	Y+10, r25	; 0x0a
    2b92:	89 87       	std	Y+9, r24	; 0x09
    2b94:	37 c0       	rjmp	.+110    	; 0x2c04 <checkName+0xbe>
   } 
   for ( i = 0; i < 12; i ++ ) {
    2b96:	1a 82       	std	Y+2, r1	; 0x02
    2b98:	19 82       	std	Y+1, r1	; 0x01
    2b9a:	2d c0       	rjmp	.+90     	; 0x2bf6 <checkName+0xb0>
      p = filename;
    2b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba0:	9c 83       	std	Y+4, r25	; 0x04
    2ba2:	8b 83       	std	Y+3, r24	; 0x03
      p += i;
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba8:	9c 01       	movw	r18, r24
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	9c 81       	ldd	r25, Y+4	; 0x04
    2bae:	82 0f       	add	r24, r18
    2bb0:	93 1f       	adc	r25, r19
    2bb2:	9c 83       	std	Y+4, r25	; 0x04
    2bb4:	8b 83       	std	Y+3, r24	; 0x03
      if (( uint8_t )( *p ) != fsread8uint( addr, FILENAMEOFFSET + i )) {
    2bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bba:	80 81       	ld	r24, Z
    2bbc:	18 2f       	mov	r17, r24
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc2:	2f 81       	ldd	r18, Y+7	; 0x07
    2bc4:	38 85       	ldd	r19, Y+8	; 0x08
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	c9 01       	movw	r24, r18
    2bca:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2bce:	18 17       	cp	r17, r24
    2bd0:	29 f0       	breq	.+10     	; 0x2bdc <checkName+0x96>
         return 1;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	9a 87       	std	Y+10, r25	; 0x0a
    2bd8:	89 87       	std	Y+9, r24	; 0x09
    2bda:	14 c0       	rjmp	.+40     	; 0x2c04 <checkName+0xbe>
      } else {
         if (( *p ) == '\0' ) {
    2bdc:	eb 81       	ldd	r30, Y+3	; 0x03
    2bde:	fc 81       	ldd	r31, Y+4	; 0x04
    2be0:	80 81       	ld	r24, Z
    2be2:	88 23       	and	r24, r24
    2be4:	19 f4       	brne	.+6      	; 0x2bec <checkName+0xa6>
            return 0;
    2be6:	1a 86       	std	Y+10, r1	; 0x0a
    2be8:	19 86       	std	Y+9, r1	; 0x09
    2bea:	0c c0       	rjmp	.+24     	; 0x2c04 <checkName+0xbe>
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf0:	01 96       	adiw	r24, 0x01	; 1
    2bf2:	9a 83       	std	Y+2, r25	; 0x02
    2bf4:	89 83       	std	Y+1, r24	; 0x01
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfa:	8c 30       	cpi	r24, 0x0C	; 12
    2bfc:	91 05       	cpc	r25, r1
    2bfe:	74 f2       	brlt	.-100    	; 0x2b9c <checkName+0x56>
         } else {
            continue;
         } 
      }
   }
   return 0;
    2c00:	1a 86       	std	Y+10, r1	; 0x0a
    2c02:	19 86       	std	Y+9, r1	; 0x09
    2c04:	89 85       	ldd	r24, Y+9	; 0x09
    2c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c08:	2a 96       	adiw	r28, 0x0a	; 10
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	1f 91       	pop	r17
    2c1a:	08 95       	ret

00002c1c <fullBlock>:
}
//if the directory is full return 1 else return 0
uint8_t fullBlock( int directory ) {
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	cd b7       	in	r28, 0x3d	; 61
    2c22:	de b7       	in	r29, 0x3e	; 62
    2c24:	27 97       	sbiw	r28, 0x07	; 7
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	cd bf       	out	0x3d, r28	; 61
    2c30:	9d 83       	std	Y+5, r25	; 0x05
    2c32:	8c 83       	std	Y+4, r24	; 0x04
   int i;
   for ( i = 0; i < 10; i ++ ) {
    2c34:	1b 82       	std	Y+3, r1	; 0x03
    2c36:	1a 82       	std	Y+2, r1	; 0x02
    2c38:	15 c0       	rjmp	.+42     	; 0x2c64 <fullBlock+0x48>
      uint8_t subaddr;
      subaddr = fsread8uint( directory, DIR_ADDRSUBOFFSET + i );
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3e:	0e 96       	adiw	r24, 0x0e	; 14
    2c40:	2c 81       	ldd	r18, Y+4	; 0x04
    2c42:	3d 81       	ldd	r19, Y+5	; 0x05
    2c44:	bc 01       	movw	r22, r24
    2c46:	c9 01       	movw	r24, r18
    2c48:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2c4c:	89 83       	std	Y+1, r24	; 0x01
      if ( subaddr == 0 ) {
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	88 23       	and	r24, r24
    2c52:	19 f4       	brne	.+6      	; 0x2c5a <fullBlock+0x3e>
         return 0;
    2c54:	1f 82       	std	Y+7, r1	; 0x07
    2c56:	1e 82       	std	Y+6, r1	; 0x06
    2c58:	0e c0       	rjmp	.+28     	; 0x2c76 <fullBlock+0x5a>
    2c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5e:	01 96       	adiw	r24, 0x01	; 1
    2c60:	9b 83       	std	Y+3, r25	; 0x03
    2c62:	8a 83       	std	Y+2, r24	; 0x02
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	9b 81       	ldd	r25, Y+3	; 0x03
    2c68:	8a 30       	cpi	r24, 0x0A	; 10
    2c6a:	91 05       	cpc	r25, r1
    2c6c:	34 f3       	brlt	.-52     	; 0x2c3a <fullBlock+0x1e>
      }
   }
   return 1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9f 83       	std	Y+7, r25	; 0x07
    2c74:	8e 83       	std	Y+6, r24	; 0x06
    2c76:	8e 81       	ldd	r24, Y+6	; 0x06
    2c78:	9f 81       	ldd	r25, Y+7	; 0x07
    2c7a:	27 96       	adiw	r28, 0x07	; 7
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	08 95       	ret

00002c8c <getName>:
}

//-------------------------------------------------------------------------
void getName( char *buffer, int addr ) {
    2c8c:	cf 93       	push	r28
    2c8e:	df 93       	push	r29
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	28 97       	sbiw	r28, 0x08	; 8
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	8d 83       	std	Y+5, r24	; 0x05
    2ca4:	78 87       	std	Y+8, r23	; 0x08
    2ca6:	6f 83       	std	Y+7, r22	; 0x07
   int i;
   char *p;
   p = buffer;
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cac:	9a 83       	std	Y+2, r25	; 0x02
    2cae:	89 83       	std	Y+1, r24	; 0x01
   for ( i = 0; i < 12; i ++ ) {
    2cb0:	1c 82       	std	Y+4, r1	; 0x04
    2cb2:	1b 82       	std	Y+3, r1	; 0x03
    2cb4:	1a c0       	rjmp	.+52     	; 0x2cea <getName+0x5e>
      *p = fsread8uint( addr, FILENAMEOFFSET + i );
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cba:	2f 81       	ldd	r18, Y+7	; 0x07
    2cbc:	38 85       	ldd	r19, Y+8	; 0x08
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	c9 01       	movw	r24, r18
    2cc2:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cca:	80 83       	st	Z, r24
      if (( *p ) == '\0' ) {
    2ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cce:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd0:	80 81       	ld	r24, Z
    2cd2:	88 23       	and	r24, r24
    2cd4:	79 f0       	breq	.+30     	; 0x2cf4 <getName+0x68>
         break;
      } p ++;
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cda:	01 96       	adiw	r24, 0x01	; 1
    2cdc:	9a 83       	std	Y+2, r25	; 0x02
    2cde:	89 83       	std	Y+1, r24	; 0x01
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	9c 83       	std	Y+4, r25	; 0x04
    2ce8:	8b 83       	std	Y+3, r24	; 0x03
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	9c 81       	ldd	r25, Y+4	; 0x04
    2cee:	8c 30       	cpi	r24, 0x0C	; 12
    2cf0:	91 05       	cpc	r25, r1
    2cf2:	0c f3       	brlt	.-62     	; 0x2cb6 <getName+0x2a>
   }
   *p = '\0';
    2cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cf8:	10 82       	st	Z, r1
    2cfa:	28 96       	adiw	r28, 0x08	; 8
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	08 95       	ret

00002d0c <changeDirectory>:
   return ;
}
//in this one, the directory is checked to see if the file is out there if not return -1 
int changeDirectory( char *filename, int directory ) {
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	29 97       	sbiw	r28, 0x09	; 9
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	9d 83       	std	Y+5, r25	; 0x05
    2d22:	8c 83       	std	Y+4, r24	; 0x04
    2d24:	7f 83       	std	Y+7, r23	; 0x07
    2d26:	6e 83       	std	Y+6, r22	; 0x06
   int i;
   for ( i = 0; i < 10; i ++ ) {
    2d28:	1b 82       	std	Y+3, r1	; 0x03
    2d2a:	1a 82       	std	Y+2, r1	; 0x02
    2d2c:	1f c0       	rjmp	.+62     	; 0x2d6c <changeDirectory+0x60>
      uint8_t subaddr;
      subaddr = fsread8uint( directory, DIR_ADDRSUBOFFSET + i );
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	9b 81       	ldd	r25, Y+3	; 0x03
    2d32:	0e 96       	adiw	r24, 0x0e	; 14
    2d34:	2e 81       	ldd	r18, Y+6	; 0x06
    2d36:	3f 81       	ldd	r19, Y+7	; 0x07
    2d38:	bc 01       	movw	r22, r24
    2d3a:	c9 01       	movw	r24, r18
    2d3c:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2d40:	89 83       	std	Y+1, r24	; 0x01
      if ( checkName( filename, subaddr ) == 0 ) {
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	99 27       	eor	r25, r25
    2d46:	2c 81       	ldd	r18, Y+4	; 0x04
    2d48:	3d 81       	ldd	r19, Y+5	; 0x05
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	c9 01       	movw	r24, r18
    2d4e:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <checkName>
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	31 f4       	brne	.+12     	; 0x2d62 <changeDirectory+0x56>
         return subaddr;
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	28 2f       	mov	r18, r24
    2d5a:	33 27       	eor	r19, r19
    2d5c:	39 87       	std	Y+9, r19	; 0x09
    2d5e:	28 87       	std	Y+8, r18	; 0x08
    2d60:	0e c0       	rjmp	.+28     	; 0x2d7e <changeDirectory+0x72>
    2d62:	8a 81       	ldd	r24, Y+2	; 0x02
    2d64:	9b 81       	ldd	r25, Y+3	; 0x03
    2d66:	01 96       	adiw	r24, 0x01	; 1
    2d68:	9b 83       	std	Y+3, r25	; 0x03
    2d6a:	8a 83       	std	Y+2, r24	; 0x02
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d70:	8a 30       	cpi	r24, 0x0A	; 10
    2d72:	91 05       	cpc	r25, r1
    2d74:	e4 f2       	brlt	.-72     	; 0x2d2e <changeDirectory+0x22>
      }
   }
   return  - 1;
    2d76:	8f ef       	ldi	r24, 0xFF	; 255
    2d78:	9f ef       	ldi	r25, 0xFF	; 255
    2d7a:	99 87       	std	Y+9, r25	; 0x09
    2d7c:	88 87       	std	Y+8, r24	; 0x08
    2d7e:	88 85       	ldd	r24, Y+8	; 0x08
    2d80:	99 85       	ldd	r25, Y+9	; 0x09
    2d82:	29 96       	adiw	r28, 0x09	; 9
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	08 95       	ret

00002d94 <getParentDirectory>:
}

//-------------------------------------------------------------------------
int getParentDirectory( int directory ) {
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	23 97       	sbiw	r28, 0x03	; 3
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	9b 83       	std	Y+3, r25	; 0x03
    2daa:	8a 83       	std	Y+2, r24	; 0x02
   uint8_t parentnode;
   parentnode = fsread8uint( directory, DIR_PARENTOFFSET );
    2dac:	8a 81       	ldd	r24, Y+2	; 0x02
    2dae:	9b 81       	ldd	r25, Y+3	; 0x03
    2db0:	6f e1       	ldi	r22, 0x1F	; 31
    2db2:	70 e0       	ldi	r23, 0x00	; 0
    2db4:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2db8:	89 83       	std	Y+1, r24	; 0x01
   return parentnode;
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	99 27       	eor	r25, r25
    2dbe:	23 96       	adiw	r28, 0x03	; 3
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	de bf       	out	0x3e, r29	; 62
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	cd bf       	out	0x3d, r28	; 61
    2dca:	df 91       	pop	r29
    2dcc:	cf 91       	pop	r28
    2dce:	08 95       	ret

00002dd0 <existBlock>:
}
//check wehther a block exists. the filename must be single level 
int existBlock( char *filename, int directory ) {
    2dd0:	cf 93       	push	r28
    2dd2:	df 93       	push	r29
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	2a 97       	sbiw	r28, 0x0a	; 10
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
    2de8:	78 87       	std	Y+8, r23	; 0x08
    2dea:	6f 83       	std	Y+7, r22	; 0x07
   int i;
   uint8_t temp;
   for ( i = 0; i < 10; i ++ ) {
    2dec:	1c 82       	std	Y+4, r1	; 0x04
    2dee:	1b 82       	std	Y+3, r1	; 0x03
    2df0:	2a c0       	rjmp	.+84     	; 0x2e46 <existBlock+0x76>
      uint8_t subaddr;
      subaddr = fsread8uint( directory, DIR_ADDRSUBOFFSET + i );
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	9c 81       	ldd	r25, Y+4	; 0x04
    2df6:	0e 96       	adiw	r24, 0x0e	; 14
    2df8:	2f 81       	ldd	r18, Y+7	; 0x07
    2dfa:	38 85       	ldd	r19, Y+8	; 0x08
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	c9 01       	movw	r24, r18
    2e00:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2e04:	89 83       	std	Y+1, r24	; 0x01
      if ( checkName( filename, subaddr ) == 0 ) {
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	99 27       	eor	r25, r25
    2e0a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e0c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e0e:	bc 01       	movw	r22, r24
    2e10:	c9 01       	movw	r24, r18
    2e12:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <checkName>
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	89 f4       	brne	.+34     	; 0x2e3c <existBlock+0x6c>
         if ((( temp = checkNodeValid( subaddr )) > 0 ) && ( subaddr > 0 )) {
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	99 27       	eor	r25, r25
    2e1e:	0e 94 20 10 	call	0x2040	; 0x2040 <checkNodeValid>
    2e22:	8a 83       	std	Y+2, r24	; 0x02
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	88 23       	and	r24, r24
    2e28:	49 f0       	breq	.+18     	; 0x2e3c <existBlock+0x6c>
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	88 23       	and	r24, r24
    2e2e:	31 f0       	breq	.+12     	; 0x2e3c <existBlock+0x6c>
            return temp;
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	28 2f       	mov	r18, r24
    2e34:	33 27       	eor	r19, r19
    2e36:	3a 87       	std	Y+10, r19	; 0x0a
    2e38:	29 87       	std	Y+9, r18	; 0x09
    2e3a:	0c c0       	rjmp	.+24     	; 0x2e54 <existBlock+0x84>
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	9c 83       	std	Y+4, r25	; 0x04
    2e44:	8b 83       	std	Y+3, r24	; 0x03
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4a:	8a 30       	cpi	r24, 0x0A	; 10
    2e4c:	91 05       	cpc	r25, r1
    2e4e:	8c f2       	brlt	.-94     	; 0x2df2 <existBlock+0x22>
         } else {
            continue;
         } 
      }
   }
   return 0;
    2e50:	1a 86       	std	Y+10, r1	; 0x0a
    2e52:	19 86       	std	Y+9, r1	; 0x09
    2e54:	89 85       	ldd	r24, Y+9	; 0x09
    2e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e58:	2a 96       	adiw	r28, 0x0a	; 10
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	08 95       	ret

00002e6a <existBlockAddr>:
}
//check wehther a block exists. the filename must be single level 
int existBlockAddr( char *filename, int directory ) {
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	2a 97       	sbiw	r28, 0x0a	; 10
    2e74:	0f b6       	in	r0, 0x3f	; 63
    2e76:	f8 94       	cli
    2e78:	de bf       	out	0x3e, r29	; 62
    2e7a:	0f be       	out	0x3f, r0	; 63
    2e7c:	cd bf       	out	0x3d, r28	; 61
    2e7e:	9e 83       	std	Y+6, r25	; 0x06
    2e80:	8d 83       	std	Y+5, r24	; 0x05
    2e82:	78 87       	std	Y+8, r23	; 0x08
    2e84:	6f 83       	std	Y+7, r22	; 0x07
   int i;
   uint8_t temp;
   for ( i = 0; i < 10; i ++ ) {
    2e86:	1c 82       	std	Y+4, r1	; 0x04
    2e88:	1b 82       	std	Y+3, r1	; 0x03
    2e8a:	2a c0       	rjmp	.+84     	; 0x2ee0 <existBlockAddr+0x76>
      uint8_t subaddr;
      subaddr = fsread8uint( directory, DIR_ADDRSUBOFFSET + i );
    2e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e90:	0e 96       	adiw	r24, 0x0e	; 14
    2e92:	2f 81       	ldd	r18, Y+7	; 0x07
    2e94:	38 85       	ldd	r19, Y+8	; 0x08
    2e96:	bc 01       	movw	r22, r24
    2e98:	c9 01       	movw	r24, r18
    2e9a:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2e9e:	89 83       	std	Y+1, r24	; 0x01
      if ( checkName( filename, subaddr ) == 0 ) {
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	99 27       	eor	r25, r25
    2ea4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ea6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ea8:	bc 01       	movw	r22, r24
    2eaa:	c9 01       	movw	r24, r18
    2eac:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <checkName>
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	89 f4       	brne	.+34     	; 0x2ed6 <existBlockAddr+0x6c>
         if ((( temp = checkNodeValid( subaddr )) > 0 ) && ( subaddr > 0 )) {
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	99 27       	eor	r25, r25
    2eb8:	0e 94 20 10 	call	0x2040	; 0x2040 <checkNodeValid>
    2ebc:	8a 83       	std	Y+2, r24	; 0x02
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	88 23       	and	r24, r24
    2ec2:	49 f0       	breq	.+18     	; 0x2ed6 <existBlockAddr+0x6c>
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	88 23       	and	r24, r24
    2ec8:	31 f0       	breq	.+12     	; 0x2ed6 <existBlockAddr+0x6c>
            return subaddr;
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	28 2f       	mov	r18, r24
    2ece:	33 27       	eor	r19, r19
    2ed0:	3a 87       	std	Y+10, r19	; 0x0a
    2ed2:	29 87       	std	Y+9, r18	; 0x09
    2ed4:	0c c0       	rjmp	.+24     	; 0x2eee <existBlockAddr+0x84>
    2ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eda:	01 96       	adiw	r24, 0x01	; 1
    2edc:	9c 83       	std	Y+4, r25	; 0x04
    2ede:	8b 83       	std	Y+3, r24	; 0x03
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	8a 30       	cpi	r24, 0x0A	; 10
    2ee6:	91 05       	cpc	r25, r1
    2ee8:	8c f2       	brlt	.-94     	; 0x2e8c <existBlockAddr+0x22>
         } else {
            continue;
         } 
      }
   }
   return 0;
    2eea:	1a 86       	std	Y+10, r1	; 0x0a
    2eec:	19 86       	std	Y+9, r1	; 0x09
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	2a 96       	adiw	r28, 0x0a	; 10
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	08 95       	ret

00002f04 <getPwd>:
}
//return current directory
int getPwd() {
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
   return currentdirectory;
    2f0c:	80 91 7e 01 	lds	r24, 0x017E
    2f10:	90 91 7f 01 	lds	r25, 0x017F
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	08 95       	ret

00002f1a <setPwd>:
}
//set current directory 
void setPwd( int directory ) {
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	22 97       	sbiw	r28, 0x02	; 2
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	9a 83       	std	Y+2, r25	; 0x02
    2f30:	89 83       	std	Y+1, r24	; 0x01
   currentdirectory = directory;
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	9a 81       	ldd	r25, Y+2	; 0x02
    2f36:	90 93 7f 01 	sts	0x017F, r25
    2f3a:	80 93 7e 01 	sts	0x017E, r24
    2f3e:	22 96       	adiw	r28, 0x02	; 2
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	08 95       	ret

00002f50 <emptyDirectory>:
   return ;
}
//check directory empty
//returns 0 if it is empty. Returns 1 if otherwise 
int emptyDirectory( int directory ) {
    2f50:	cf 93       	push	r28
    2f52:	df 93       	push	r29
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	27 97       	sbiw	r28, 0x07	; 7
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	9d 83       	std	Y+5, r25	; 0x05
    2f66:	8c 83       	std	Y+4, r24	; 0x04
   int i;
   for ( i = 0; i < 10; i ++ ) {
    2f68:	1b 82       	std	Y+3, r1	; 0x03
    2f6a:	1a 82       	std	Y+2, r1	; 0x02
    2f6c:	17 c0       	rjmp	.+46     	; 0x2f9c <emptyDirectory+0x4c>
      uint8_t subaddr;
      subaddr = fsread8uint( directory, DIR_ADDRSUBOFFSET + i );
    2f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f70:	9b 81       	ldd	r25, Y+3	; 0x03
    2f72:	0e 96       	adiw	r24, 0x0e	; 14
    2f74:	2c 81       	ldd	r18, Y+4	; 0x04
    2f76:	3d 81       	ldd	r19, Y+5	; 0x05
    2f78:	bc 01       	movw	r22, r24
    2f7a:	c9 01       	movw	r24, r18
    2f7c:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    2f80:	89 83       	std	Y+1, r24	; 0x01
      if ( subaddr > 0 ) {
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	88 23       	and	r24, r24
    2f86:	29 f0       	breq	.+10     	; 0x2f92 <emptyDirectory+0x42>
         return 1;
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9f 83       	std	Y+7, r25	; 0x07
    2f8e:	8e 83       	std	Y+6, r24	; 0x06
    2f90:	0c c0       	rjmp	.+24     	; 0x2faa <emptyDirectory+0x5a>
    2f92:	8a 81       	ldd	r24, Y+2	; 0x02
    2f94:	9b 81       	ldd	r25, Y+3	; 0x03
    2f96:	01 96       	adiw	r24, 0x01	; 1
    2f98:	9b 83       	std	Y+3, r25	; 0x03
    2f9a:	8a 83       	std	Y+2, r24	; 0x02
    2f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa0:	8a 30       	cpi	r24, 0x0A	; 10
    2fa2:	91 05       	cpc	r25, r1
    2fa4:	24 f3       	brlt	.-56     	; 0x2f6e <emptyDirectory+0x1e>
      } 
   }
   return 0;
    2fa6:	1f 82       	std	Y+7, r1	; 0x07
    2fa8:	1e 82       	std	Y+6, r1	; 0x06
    2faa:	8e 81       	ldd	r24, Y+6	; 0x06
    2fac:	9f 81       	ldd	r25, Y+7	; 0x07
    2fae:	27 96       	adiw	r28, 0x07	; 7
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	08 95       	ret

00002fc0 <createDir>:
}
//create a directory
uint8_t createDir( char *filename, int directory ) {
    2fc0:	0f 93       	push	r16
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	27 97       	sbiw	r28, 0x07	; 7
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	9b 83       	std	Y+3, r25	; 0x03
    2fd8:	8a 83       	std	Y+2, r24	; 0x02
    2fda:	7d 83       	std	Y+5, r23	; 0x05
    2fdc:	6c 83       	std	Y+4, r22	; 0x04
   //fix: should first try to see if there is a directory with the same name
   uint8_t getaddr;
   if ( existBlockAddr( filename, directory ) > 0 ) {
    2fde:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe2:	2a 81       	ldd	r18, Y+2	; 0x02
    2fe4:	3b 81       	ldd	r19, Y+3	; 0x03
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	c9 01       	movw	r24, r18
    2fea:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <existBlockAddr>
    2fee:	18 16       	cp	r1, r24
    2ff0:	19 06       	cpc	r1, r25
    2ff2:	1c f4       	brge	.+6      	; 0x2ffa <createDir+0x3a>
      return 0;
    2ff4:	1f 82       	std	Y+7, r1	; 0x07
    2ff6:	1e 82       	std	Y+6, r1	; 0x06
    2ff8:	1f c0       	rjmp	.+62     	; 0x3038 <createDir+0x78>
   } 
   if ( fullBlock( directory ) == 1 ) {
    2ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffe:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <fullBlock>
    3002:	81 30       	cpi	r24, 0x01	; 1
    3004:	29 f4       	brne	.+10     	; 0x3010 <createDir+0x50>
      return 255;
    3006:	2f ef       	ldi	r18, 0xFF	; 255
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	3f 83       	std	Y+7, r19	; 0x07
    300c:	2e 83       	std	Y+6, r18	; 0x06
    300e:	14 c0       	rjmp	.+40     	; 0x3038 <createDir+0x78>
   } 
   //this part first inserts a directory and then creates a node 
   getaddr = ( uint8_t )getVectorNode();
    3010:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <getVectorNode>
    3014:	89 83       	std	Y+1, r24	; 0x01
   buildNewNode( getaddr, filename, 0, ( uint8_t )directory, DIRNODE );
    3016:	2c 81       	ldd	r18, Y+4	; 0x04
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	e8 2f       	mov	r30, r24
    301c:	ff 27       	eor	r31, r31
    301e:	8a 81       	ldd	r24, Y+2	; 0x02
    3020:	9b 81       	ldd	r25, Y+3	; 0x03
    3022:	01 e0       	ldi	r16, 0x01	; 1
    3024:	40 e0       	ldi	r20, 0x00	; 0
    3026:	bc 01       	movw	r22, r24
    3028:	cf 01       	movw	r24, r30
    302a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <buildNewNode>
   return getaddr;
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	28 2f       	mov	r18, r24
    3032:	33 27       	eor	r19, r19
    3034:	3f 83       	std	Y+7, r19	; 0x07
    3036:	2e 83       	std	Y+6, r18	; 0x06
    3038:	8e 81       	ldd	r24, Y+6	; 0x06
    303a:	9f 81       	ldd	r25, Y+7	; 0x07
    303c:	27 96       	adiw	r28, 0x07	; 7
    303e:	0f b6       	in	r0, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	de bf       	out	0x3e, r29	; 62
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	0f 91       	pop	r16
    304e:	08 95       	ret

00003050 <createFileFromDirectory>:
}


//void foobar()
//{}
//create a file
uint8_t createFileFromDirectory( char *filename, int directory ) {
    3050:	0f 93       	push	r16
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	27 97       	sbiw	r28, 0x07	; 7
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	9b 83       	std	Y+3, r25	; 0x03
    3068:	8a 83       	std	Y+2, r24	; 0x02
    306a:	7d 83       	std	Y+5, r23	; 0x05
    306c:	6c 83       	std	Y+4, r22	; 0x04
   //this part first inserts a directory and then creates a node 
   uint8_t getaddr;
   if ( existBlockAddr( filename, directory ) > 0 ) {
    306e:	8c 81       	ldd	r24, Y+4	; 0x04
    3070:	9d 81       	ldd	r25, Y+5	; 0x05
    3072:	2a 81       	ldd	r18, Y+2	; 0x02
    3074:	3b 81       	ldd	r19, Y+3	; 0x03
    3076:	bc 01       	movw	r22, r24
    3078:	c9 01       	movw	r24, r18
    307a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <existBlockAddr>
    307e:	18 16       	cp	r1, r24
    3080:	19 06       	cpc	r1, r25
    3082:	1c f4       	brge	.+6      	; 0x308a <createFileFromDirectory+0x3a>
      return 0;
    3084:	1f 82       	std	Y+7, r1	; 0x07
    3086:	1e 82       	std	Y+6, r1	; 0x06
    3088:	1f c0       	rjmp	.+62     	; 0x30c8 <createFileFromDirectory+0x78>
   } 
   if ( fullBlock( directory ) == 1 ) {
    308a:	8c 81       	ldd	r24, Y+4	; 0x04
    308c:	9d 81       	ldd	r25, Y+5	; 0x05
    308e:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <fullBlock>
    3092:	81 30       	cpi	r24, 0x01	; 1
    3094:	29 f4       	brne	.+10     	; 0x30a0 <createFileFromDirectory+0x50>
      return 255;
    3096:	2f ef       	ldi	r18, 0xFF	; 255
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	3f 83       	std	Y+7, r19	; 0x07
    309c:	2e 83       	std	Y+6, r18	; 0x06
    309e:	14 c0       	rjmp	.+40     	; 0x30c8 <createFileFromDirectory+0x78>
   } 
   getaddr = ( uint8_t )getVectorNode();
    30a0:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <getVectorNode>
    30a4:	89 83       	std	Y+1, r24	; 0x01
   buildNewNode( getaddr, filename, 0, ( uint8_t )directory, FILENODE );
    30a6:	2c 81       	ldd	r18, Y+4	; 0x04
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	e8 2f       	mov	r30, r24
    30ac:	ff 27       	eor	r31, r31
    30ae:	8a 81       	ldd	r24, Y+2	; 0x02
    30b0:	9b 81       	ldd	r25, Y+3	; 0x03
    30b2:	02 e0       	ldi	r16, 0x02	; 2
    30b4:	40 e0       	ldi	r20, 0x00	; 0
    30b6:	bc 01       	movw	r22, r24
    30b8:	cf 01       	movw	r24, r30
    30ba:	0e 94 50 10 	call	0x20a0	; 0x20a0 <buildNewNode>
   return getaddr;
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	28 2f       	mov	r18, r24
    30c2:	33 27       	eor	r19, r19
    30c4:	3f 83       	std	Y+7, r19	; 0x07
    30c6:	2e 83       	std	Y+6, r18	; 0x06
    30c8:	8e 81       	ldd	r24, Y+6	; 0x06
    30ca:	9f 81       	ldd	r25, Y+7	; 0x07
    30cc:	27 96       	adiw	r28, 0x07	; 7
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	cd bf       	out	0x3d, r28	; 61
    30d8:	df 91       	pop	r29
    30da:	cf 91       	pop	r28
    30dc:	0f 91       	pop	r16
    30de:	08 95       	ret

000030e0 <isDirectory>:
}


//check if the addr block is a directory or not 
int isDirectory( int addr ) {
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	24 97       	sbiw	r28, 0x04	; 4
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	9a 83       	std	Y+2, r25	; 0x02
    30f6:	89 83       	std	Y+1, r24	; 0x01
   if ( checkNodeValid( addr ) == DIRNODE ) {
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	9a 81       	ldd	r25, Y+2	; 0x02
    30fc:	0e 94 20 10 	call	0x2040	; 0x2040 <checkNodeValid>
    3100:	81 30       	cpi	r24, 0x01	; 1
    3102:	91 05       	cpc	r25, r1
    3104:	29 f4       	brne	.+10     	; 0x3110 <isDirectory+0x30>
      return 1;
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	9c 83       	std	Y+4, r25	; 0x04
    310c:	8b 83       	std	Y+3, r24	; 0x03
    310e:	02 c0       	rjmp	.+4      	; 0x3114 <isDirectory+0x34>
   } else {
      return 0;
    3110:	1c 82       	std	Y+4, r1	; 0x04
    3112:	1b 82       	std	Y+3, r1	; 0x03
    3114:	8b 81       	ldd	r24, Y+3	; 0x03
    3116:	9c 81       	ldd	r25, Y+4	; 0x04
    3118:	24 96       	adiw	r28, 0x04	; 4
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	f8 94       	cli
    311e:	de bf       	out	0x3e, r29	; 62
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	cd bf       	out	0x3d, r28	; 61
    3124:	df 91       	pop	r29
    3126:	cf 91       	pop	r28
    3128:	08 95       	ret

0000312a <locateFileName>:
   } 
}


//-1 NO SUCH FILE, and the parent direcotry has some problem 
//returns addr of the file and for state

//FILENODE, DIRECTORYNODE, BLAH, BLAH 1, 2, 3, 4
//0, THERE is no such file, but it returns the parent of the path , which does exist
//this function uses the curren tdicreotry if needed
//the pathname is organized as ../ or ./ or name/ or /something and does not end with / 
//sovled
//and the following are the functions this thing uses
//

int locateFileName( char *pathname, int *state ) {
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	6d 97       	sbiw	r28, 0x1d	; 29
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	9f 8b       	std	Y+23, r25	; 0x17
    3140:	8e 8b       	std	Y+22, r24	; 0x16
    3142:	79 8f       	std	Y+25, r23	; 0x19
    3144:	68 8f       	std	Y+24, r22	; 0x18

   char p, q;
   char *relativestart;
   int addrTrack;
   char nextString[ 13 ];
   int ret;
   
   //first classify what type of pathname this is 

   p = pathname[ 0 ];
    3146:	ee 89       	ldd	r30, Y+22	; 0x16
    3148:	ff 89       	ldd	r31, Y+23	; 0x17
    314a:	80 81       	ld	r24, Z
    314c:	88 87       	std	Y+8, r24	; 0x08
   q = pathname[ 1 ];
    314e:	8e 89       	ldd	r24, Y+22	; 0x16
    3150:	9f 89       	ldd	r25, Y+23	; 0x17
    3152:	fc 01       	movw	r30, r24
    3154:	31 96       	adiw	r30, 0x01	; 1
    3156:	80 81       	ld	r24, Z
    3158:	8f 83       	std	Y+7, r24	; 0x07
   
   relativestart = pathname;
    315a:	8e 89       	ldd	r24, Y+22	; 0x16
    315c:	9f 89       	ldd	r25, Y+23	; 0x17
    315e:	9e 83       	std	Y+6, r25	; 0x06
    3160:	8d 83       	std	Y+5, r24	; 0x05
   addrTrack = getPwd();
    3162:	0e 94 82 17 	call	0x2f04	; 0x2f04 <getPwd>
    3166:	9c 83       	std	Y+4, r25	; 0x04
    3168:	8b 83       	std	Y+3, r24	; 0x03
   
   if (( p == '.' ) && ( q == '.' )) {
    316a:	88 85       	ldd	r24, Y+8	; 0x08
    316c:	8e 32       	cpi	r24, 0x2E	; 46
    316e:	79 f4       	brne	.+30     	; 0x318e <locateFileName+0x64>
    3170:	8f 81       	ldd	r24, Y+7	; 0x07
    3172:	8e 32       	cpi	r24, 0x2E	; 46
    3174:	61 f4       	brne	.+24     	; 0x318e <locateFileName+0x64>
      addrTrack = getParentDirectory( addrTrack );
    3176:	8b 81       	ldd	r24, Y+3	; 0x03
    3178:	9c 81       	ldd	r25, Y+4	; 0x04
    317a:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <getParentDirectory>
    317e:	9c 83       	std	Y+4, r25	; 0x04
    3180:	8b 83       	std	Y+3, r24	; 0x03
      relativestart = pathname + 2;
    3182:	8e 89       	ldd	r24, Y+22	; 0x16
    3184:	9f 89       	ldd	r25, Y+23	; 0x17
    3186:	02 96       	adiw	r24, 0x02	; 2
    3188:	9e 83       	std	Y+6, r25	; 0x06
    318a:	8d 83       	std	Y+5, r24	; 0x05
    318c:	8a c0       	rjmp	.+276    	; 0x32a2 <locateFileName+0x178>
   } else if (( p == '.' ) && ( q == '/' )) {
    318e:	88 85       	ldd	r24, Y+8	; 0x08
    3190:	8e 32       	cpi	r24, 0x2E	; 46
    3192:	49 f4       	brne	.+18     	; 0x31a6 <locateFileName+0x7c>
    3194:	8f 81       	ldd	r24, Y+7	; 0x07
    3196:	8f 32       	cpi	r24, 0x2F	; 47
    3198:	31 f4       	brne	.+12     	; 0x31a6 <locateFileName+0x7c>
      relativestart = pathname + 1;
    319a:	8e 89       	ldd	r24, Y+22	; 0x16
    319c:	9f 89       	ldd	r25, Y+23	; 0x17
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	9e 83       	std	Y+6, r25	; 0x06
    31a2:	8d 83       	std	Y+5, r24	; 0x05
    31a4:	7e c0       	rjmp	.+252    	; 0x32a2 <locateFileName+0x178>
   } else if ( p == '/' ) {
    31a6:	88 85       	ldd	r24, Y+8	; 0x08
    31a8:	8f 32       	cpi	r24, 0x2F	; 47
    31aa:	39 f4       	brne	.+14     	; 0x31ba <locateFileName+0x90>
      addrTrack = FSROOTNODE;
    31ac:	1c 82       	std	Y+4, r1	; 0x04
    31ae:	1b 82       	std	Y+3, r1	; 0x03
      relativestart = pathname;
    31b0:	8e 89       	ldd	r24, Y+22	; 0x16
    31b2:	9f 89       	ldd	r25, Y+23	; 0x17
    31b4:	9e 83       	std	Y+6, r25	; 0x06
    31b6:	8d 83       	std	Y+5, r24	; 0x05
    31b8:	74 c0       	rjmp	.+232    	; 0x32a2 <locateFileName+0x178>
   } else if ( isLetter( p ) == 1 ) {
    31ba:	88 85       	ldd	r24, Y+8	; 0x08
    31bc:	81 36       	cpi	r24, 0x61	; 97
    31be:	1c f0       	brlt	.+6      	; 0x31c6 <locateFileName+0x9c>
    31c0:	88 85       	ldd	r24, Y+8	; 0x08
    31c2:	8b 37       	cpi	r24, 0x7B	; 123
    31c4:	34 f0       	brlt	.+12     	; 0x31d2 <locateFileName+0xa8>
    31c6:	88 85       	ldd	r24, Y+8	; 0x08
    31c8:	81 34       	cpi	r24, 0x41	; 65
    31ca:	44 f0       	brlt	.+16     	; 0x31dc <locateFileName+0xb2>
    31cc:	88 85       	ldd	r24, Y+8	; 0x08
    31ce:	8b 35       	cpi	r24, 0x5B	; 91
    31d0:	2c f4       	brge	.+10     	; 0x31dc <locateFileName+0xb2>
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	9d 8f       	std	Y+29, r25	; 0x1d
    31d8:	8c 8f       	std	Y+28, r24	; 0x1c
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <locateFileName+0xb6>
    31dc:	1d 8e       	std	Y+29, r1	; 0x1d
    31de:	1c 8e       	std	Y+28, r1	; 0x1c
    31e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31e2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    31e4:	81 30       	cpi	r24, 0x01	; 1
    31e6:	91 05       	cpc	r25, r1
    31e8:	09 f0       	breq	.+2      	; 0x31ec <locateFileName+0xc2>
    31ea:	5b c0       	rjmp	.+182    	; 0x32a2 <locateFileName+0x178>
      //this case is the "mnae" case, where there may or may not be further stuff behind 
      //buggy place 
      relativestart = extractString( relativestart, ( char* )nextString );
    31ec:	ce 01       	movw	r24, r28
    31ee:	09 96       	adiw	r24, 0x09	; 9
    31f0:	2d 81       	ldd	r18, Y+5	; 0x05
    31f2:	3e 81       	ldd	r19, Y+6	; 0x06
    31f4:	bc 01       	movw	r22, r24
    31f6:	c9 01       	movw	r24, r18
    31f8:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <extractString>
    31fc:	9e 83       	std	Y+6, r25	; 0x06
    31fe:	8d 83       	std	Y+5, r24	; 0x05
      if ( relativestart == '\0' ) {
    3200:	8d 81       	ldd	r24, Y+5	; 0x05
    3202:	9e 81       	ldd	r25, Y+6	; 0x06
    3204:	00 97       	sbiw	r24, 0x00	; 0
    3206:	71 f5       	brne	.+92     	; 0x3264 <locateFileName+0x13a>
         if (( ret = existBlock( nextString, addrTrack )) == 0 ) {
    3208:	8b 81       	ldd	r24, Y+3	; 0x03
    320a:	9c 81       	ldd	r25, Y+4	; 0x04
    320c:	9e 01       	movw	r18, r28
    320e:	27 5f       	subi	r18, 0xF7	; 247
    3210:	3f 4f       	sbci	r19, 0xFF	; 255
    3212:	bc 01       	movw	r22, r24
    3214:	c9 01       	movw	r24, r18
    3216:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <existBlock>
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	89 83       	std	Y+1, r24	; 0x01
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	9a 81       	ldd	r25, Y+2	; 0x02
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	49 f4       	brne	.+18     	; 0x3238 <locateFileName+0x10e>
            //ok there is only one string but no further strings after that. And this string does not exist	
            *state = 0;
    3226:	e8 8d       	ldd	r30, Y+24	; 0x18
    3228:	f9 8d       	ldd	r31, Y+25	; 0x19
    322a:	11 82       	std	Z+1, r1	; 0x01
    322c:	10 82       	st	Z, r1
            return addrTrack;
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	9c 81       	ldd	r25, Y+4	; 0x04
    3232:	9b 8f       	std	Y+27, r25	; 0x1b
    3234:	8a 8f       	std	Y+26, r24	; 0x1a
    3236:	9d c0       	rjmp	.+314    	; 0x3372 <locateFileName+0x248>
         } else {
            *state = ret;
    3238:	e8 8d       	ldd	r30, Y+24	; 0x18
    323a:	f9 8d       	ldd	r31, Y+25	; 0x19
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	9a 81       	ldd	r25, Y+2	; 0x02
    3240:	91 83       	std	Z+1, r25	; 0x01
    3242:	80 83       	st	Z, r24
            ret = changeDirectory( nextString, addrTrack );
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	9c 81       	ldd	r25, Y+4	; 0x04
    3248:	9e 01       	movw	r18, r28
    324a:	27 5f       	subi	r18, 0xF7	; 247
    324c:	3f 4f       	sbci	r19, 0xFF	; 255
    324e:	bc 01       	movw	r22, r24
    3250:	c9 01       	movw	r24, r18
    3252:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <changeDirectory>
    3256:	9a 83       	std	Y+2, r25	; 0x02
    3258:	89 83       	std	Y+1, r24	; 0x01
            return ret;
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	9b 8f       	std	Y+27, r25	; 0x1b
    3260:	8a 8f       	std	Y+26, r24	; 0x1a
    3262:	87 c0       	rjmp	.+270    	; 0x3372 <locateFileName+0x248>
         }
      } else {
         if (( ret = existBlock( nextString, addrTrack )) == 0 ) {
    3264:	8b 81       	ldd	r24, Y+3	; 0x03
    3266:	9c 81       	ldd	r25, Y+4	; 0x04
    3268:	9e 01       	movw	r18, r28
    326a:	27 5f       	subi	r18, 0xF7	; 247
    326c:	3f 4f       	sbci	r19, 0xFF	; 255
    326e:	bc 01       	movw	r22, r24
    3270:	c9 01       	movw	r24, r18
    3272:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <existBlock>
    3276:	9a 83       	std	Y+2, r25	; 0x02
    3278:	89 83       	std	Y+1, r24	; 0x01
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	9a 81       	ldd	r25, Y+2	; 0x02
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	29 f4       	brne	.+10     	; 0x328c <locateFileName+0x162>
            //ok there is only one string but further strings after that. And this string does not exist	
            return  - 1;
    3282:	8f ef       	ldi	r24, 0xFF	; 255
    3284:	9f ef       	ldi	r25, 0xFF	; 255
    3286:	9b 8f       	std	Y+27, r25	; 0x1b
    3288:	8a 8f       	std	Y+26, r24	; 0x1a
    328a:	73 c0       	rjmp	.+230    	; 0x3372 <locateFileName+0x248>
         } else {
            addrTrack = changeDirectory( nextString, addrTrack );
    328c:	8b 81       	ldd	r24, Y+3	; 0x03
    328e:	9c 81       	ldd	r25, Y+4	; 0x04
    3290:	9e 01       	movw	r18, r28
    3292:	27 5f       	subi	r18, 0xF7	; 247
    3294:	3f 4f       	sbci	r19, 0xFF	; 255
    3296:	bc 01       	movw	r22, r24
    3298:	c9 01       	movw	r24, r18
    329a:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <changeDirectory>
    329e:	9c 83       	std	Y+4, r25	; 0x04
    32a0:	8b 83       	std	Y+3, r24	; 0x03
         }
      }
   }
   while ( 1 ) {
      //Now all cases have been uniform now. It is like /a/b/c type 
      if ( isDirectory( addrTrack ) == 0 ) {
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	9c 81       	ldd	r25, Y+4	; 0x04
    32a6:	0e 94 70 18 	call	0x30e0	; 0x30e0 <isDirectory>
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	29 f4       	brne	.+10     	; 0x32b8 <locateFileName+0x18e>
         return  - 1;
    32ae:	8f ef       	ldi	r24, 0xFF	; 255
    32b0:	9f ef       	ldi	r25, 0xFF	; 255
    32b2:	9b 8f       	std	Y+27, r25	; 0x1b
    32b4:	8a 8f       	std	Y+26, r24	; 0x1a
    32b6:	5d c0       	rjmp	.+186    	; 0x3372 <locateFileName+0x248>
      } 
      relativestart = extractString( relativestart, nextString );
    32b8:	ce 01       	movw	r24, r28
    32ba:	09 96       	adiw	r24, 0x09	; 9
    32bc:	2d 81       	ldd	r18, Y+5	; 0x05
    32be:	3e 81       	ldd	r19, Y+6	; 0x06
    32c0:	bc 01       	movw	r22, r24
    32c2:	c9 01       	movw	r24, r18
    32c4:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <extractString>
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
      if ( *relativestart == '\0' ) {
    32cc:	ed 81       	ldd	r30, Y+5	; 0x05
    32ce:	fe 81       	ldd	r31, Y+6	; 0x06
    32d0:	80 81       	ld	r24, Z
    32d2:	88 23       	and	r24, r24
    32d4:	71 f5       	brne	.+92     	; 0x3332 <locateFileName+0x208>
         if (( ret = existBlock( nextString, addrTrack )) == 0 ) {
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	9c 81       	ldd	r25, Y+4	; 0x04
    32da:	9e 01       	movw	r18, r28
    32dc:	27 5f       	subi	r18, 0xF7	; 247
    32de:	3f 4f       	sbci	r19, 0xFF	; 255
    32e0:	bc 01       	movw	r22, r24
    32e2:	c9 01       	movw	r24, r18
    32e4:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <existBlock>
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	9a 81       	ldd	r25, Y+2	; 0x02
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	49 f4       	brne	.+18     	; 0x3306 <locateFileName+0x1dc>
            //ok there is only one string but no further strings after that. And this string does not exist	
            *state = 0;
    32f4:	e8 8d       	ldd	r30, Y+24	; 0x18
    32f6:	f9 8d       	ldd	r31, Y+25	; 0x19
    32f8:	11 82       	std	Z+1, r1	; 0x01
    32fa:	10 82       	st	Z, r1
            return addrTrack;
    32fc:	8b 81       	ldd	r24, Y+3	; 0x03
    32fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3300:	9b 8f       	std	Y+27, r25	; 0x1b
    3302:	8a 8f       	std	Y+26, r24	; 0x1a
    3304:	36 c0       	rjmp	.+108    	; 0x3372 <locateFileName+0x248>
         } else {
            *state = ret;
    3306:	e8 8d       	ldd	r30, Y+24	; 0x18
    3308:	f9 8d       	ldd	r31, Y+25	; 0x19
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	9a 81       	ldd	r25, Y+2	; 0x02
    330e:	91 83       	std	Z+1, r25	; 0x01
    3310:	80 83       	st	Z, r24
            ret = changeDirectory( nextString, addrTrack );
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	9c 81       	ldd	r25, Y+4	; 0x04
    3316:	9e 01       	movw	r18, r28
    3318:	27 5f       	subi	r18, 0xF7	; 247
    331a:	3f 4f       	sbci	r19, 0xFF	; 255
    331c:	bc 01       	movw	r22, r24
    331e:	c9 01       	movw	r24, r18
    3320:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <changeDirectory>
    3324:	9a 83       	std	Y+2, r25	; 0x02
    3326:	89 83       	std	Y+1, r24	; 0x01
            return ret;
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	9b 8f       	std	Y+27, r25	; 0x1b
    332e:	8a 8f       	std	Y+26, r24	; 0x1a
    3330:	20 c0       	rjmp	.+64     	; 0x3372 <locateFileName+0x248>
         }
      } else {
         if (( ret = existBlock( nextString, addrTrack )) == 0 ) {
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	9c 81       	ldd	r25, Y+4	; 0x04
    3336:	9e 01       	movw	r18, r28
    3338:	27 5f       	subi	r18, 0xF7	; 247
    333a:	3f 4f       	sbci	r19, 0xFF	; 255
    333c:	bc 01       	movw	r22, r24
    333e:	c9 01       	movw	r24, r18
    3340:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <existBlock>
    3344:	9a 83       	std	Y+2, r25	; 0x02
    3346:	89 83       	std	Y+1, r24	; 0x01
    3348:	89 81       	ldd	r24, Y+1	; 0x01
    334a:	9a 81       	ldd	r25, Y+2	; 0x02
    334c:	00 97       	sbiw	r24, 0x00	; 0
    334e:	29 f4       	brne	.+10     	; 0x335a <locateFileName+0x230>
            //ok there is only one string but further strings after that. And this string does not exist	
            return  - 1;
    3350:	8f ef       	ldi	r24, 0xFF	; 255
    3352:	9f ef       	ldi	r25, 0xFF	; 255
    3354:	9b 8f       	std	Y+27, r25	; 0x1b
    3356:	8a 8f       	std	Y+26, r24	; 0x1a
    3358:	0c c0       	rjmp	.+24     	; 0x3372 <locateFileName+0x248>
         } else {
            addrTrack = changeDirectory( nextString, addrTrack );
    335a:	8b 81       	ldd	r24, Y+3	; 0x03
    335c:	9c 81       	ldd	r25, Y+4	; 0x04
    335e:	9e 01       	movw	r18, r28
    3360:	27 5f       	subi	r18, 0xF7	; 247
    3362:	3f 4f       	sbci	r19, 0xFF	; 255
    3364:	bc 01       	movw	r22, r24
    3366:	c9 01       	movw	r24, r18
    3368:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <changeDirectory>
    336c:	9c 83       	std	Y+4, r25	; 0x04
    336e:	8b 83       	std	Y+3, r24	; 0x03
         }
      }
   }
    3370:	98 cf       	rjmp	.-208    	; 0x32a2 <locateFileName+0x178>
    3372:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3374:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3376:	6d 96       	adiw	r28, 0x1d	; 29
    3378:	0f b6       	in	r0, 0x3f	; 63
    337a:	f8 94       	cli
    337c:	de bf       	out	0x3e, r29	; 62
    337e:	0f be       	out	0x3f, r0	; 63
    3380:	cd bf       	out	0x3d, r28	; 61
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	08 95       	ret

00003388 <freeBlocks>:
}

//-------------------------------------------------------------------------
void freeBlocks( int addr ) {
    3388:	cf 93       	push	r28
    338a:	df 93       	push	r29
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	25 97       	sbiw	r28, 0x05	; 5
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61
    339c:	9d 83       	std	Y+5, r25	; 0x05
    339e:	8c 83       	std	Y+4, r24	; 0x04
   int i;
   uint8_t readpage;
   for ( i = 0; i < 8; i ++ ) {
    33a0:	1b 82       	std	Y+3, r1	; 0x03
    33a2:	1a 82       	std	Y+2, r1	; 0x02
    33a4:	16 c0       	rjmp	.+44     	; 0x33d2 <freeBlocks+0x4a>
      readpage = fsread8uint( addr, FILE_ADDRPAGEOFFSET + i );
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	9b 81       	ldd	r25, Y+3	; 0x03
    33aa:	0e 96       	adiw	r24, 0x0e	; 14
    33ac:	2c 81       	ldd	r18, Y+4	; 0x04
    33ae:	3d 81       	ldd	r19, Y+5	; 0x05
    33b0:	bc 01       	movw	r22, r24
    33b2:	c9 01       	movw	r24, r18
    33b4:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    33b8:	89 83       	std	Y+1, r24	; 0x01
      if ( readpage == 0 ) {
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	88 23       	and	r24, r24
    33be:	71 f0       	breq	.+28     	; 0x33dc <freeBlocks+0x54>
         break;
      } else {
         releaseFlashPage( readpage );
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	99 27       	eor	r25, r25
    33c4:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <releaseFlashPage>
    33c8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ca:	9b 81       	ldd	r25, Y+3	; 0x03
    33cc:	01 96       	adiw	r24, 0x01	; 1
    33ce:	9b 83       	std	Y+3, r25	; 0x03
    33d0:	8a 83       	std	Y+2, r24	; 0x02
    33d2:	8a 81       	ldd	r24, Y+2	; 0x02
    33d4:	9b 81       	ldd	r25, Y+3	; 0x03
    33d6:	88 30       	cpi	r24, 0x08	; 8
    33d8:	91 05       	cpc	r25, r1
    33da:	2c f3       	brlt	.-54     	; 0x33a6 <freeBlocks+0x1e>
    33dc:	25 96       	adiw	r28, 0x05	; 5
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	f8 94       	cli
    33e2:	de bf       	out	0x3e, r29	; 62
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	cd bf       	out	0x3d, r28	; 61
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	08 95       	ret

000033ee <openFile>:
      } 
   }
   return ;
}
//open a file according to the mode and populate the fid section 
void openFile( int addr, int fid, int mode ) {
    33ee:	0f 93       	push	r16
    33f0:	1f 93       	push	r17
    33f2:	cf 93       	push	r28
    33f4:	df 93       	push	r29
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
    33fa:	26 97       	sbiw	r28, 0x06	; 6
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	f8 94       	cli
    3400:	de bf       	out	0x3e, r29	; 62
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	cd bf       	out	0x3d, r28	; 61
    3406:	9a 83       	std	Y+2, r25	; 0x02
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	7c 83       	std	Y+4, r23	; 0x04
    340c:	6b 83       	std	Y+3, r22	; 0x03
    340e:	5e 83       	std	Y+6, r21	; 0x06
    3410:	4d 83       	std	Y+5, r20	; 0x05
   fidtable[ fid ].addr = ( uint8_t )addr;
    3412:	8b 81       	ldd	r24, Y+3	; 0x03
    3414:	9c 81       	ldd	r25, Y+4	; 0x04
    3416:	49 81       	ldd	r20, Y+1	; 0x01
    3418:	88 0f       	add	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	9c 01       	movw	r18, r24
    341e:	22 0f       	add	r18, r18
    3420:	33 1f       	adc	r19, r19
    3422:	22 0f       	add	r18, r18
    3424:	33 1f       	adc	r19, r19
    3426:	82 0f       	add	r24, r18
    3428:	93 1f       	adc	r25, r19
    342a:	fc 01       	movw	r30, r24
    342c:	ef 5d       	subi	r30, 0xDF	; 223
    342e:	fb 4f       	sbci	r31, 0xFB	; 251
    3430:	40 83       	st	Z, r20
   fidtable[ fid ].mode = ( uint8_t )mode;
    3432:	8b 81       	ldd	r24, Y+3	; 0x03
    3434:	9c 81       	ldd	r25, Y+4	; 0x04
    3436:	4d 81       	ldd	r20, Y+5	; 0x05
    3438:	88 0f       	add	r24, r24
    343a:	99 1f       	adc	r25, r25
    343c:	9c 01       	movw	r18, r24
    343e:	22 0f       	add	r18, r18
    3440:	33 1f       	adc	r19, r19
    3442:	22 0f       	add	r18, r18
    3444:	33 1f       	adc	r19, r19
    3446:	82 0f       	add	r24, r18
    3448:	93 1f       	adc	r25, r19
    344a:	fc 01       	movw	r30, r24
    344c:	ee 5d       	subi	r30, 0xDE	; 222
    344e:	fb 4f       	sbci	r31, 0xFB	; 251
    3450:	40 83       	st	Z, r20
   fidtable[ fid ].size = fsread16uint( addr, 29 );
    3452:	0b 81       	ldd	r16, Y+3	; 0x03
    3454:	1c 81       	ldd	r17, Y+4	; 0x04
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	9a 81       	ldd	r25, Y+2	; 0x02
    345a:	6d e1       	ldi	r22, 0x1D	; 29
    345c:	70 e0       	ldi	r23, 0x00	; 0
    345e:	0e 94 84 0c 	call	0x1908	; 0x1908 <fsread16uint>
    3462:	ac 01       	movw	r20, r24
    3464:	c8 01       	movw	r24, r16
    3466:	88 0f       	add	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	9c 01       	movw	r18, r24
    346c:	22 0f       	add	r18, r18
    346e:	33 1f       	adc	r19, r19
    3470:	22 0f       	add	r18, r18
    3472:	33 1f       	adc	r19, r19
    3474:	82 0f       	add	r24, r18
    3476:	93 1f       	adc	r25, r19
    3478:	fc 01       	movw	r30, r24
    347a:	ed 5d       	subi	r30, 0xDD	; 221
    347c:	fb 4f       	sbci	r31, 0xFB	; 251
    347e:	51 83       	std	Z+1, r21	; 0x01
    3480:	40 83       	st	Z, r20
   //mode: 1 read 2 write 3 append 4 truncate 5 rw
   if ( mode == 1 ) {
    3482:	8d 81       	ldd	r24, Y+5	; 0x05
    3484:	9e 81       	ldd	r25, Y+6	; 0x06
    3486:	81 30       	cpi	r24, 0x01	; 1
    3488:	91 05       	cpc	r25, r1
    348a:	91 f4       	brne	.+36     	; 0x34b0 <openFile+0xc2>
      fidtable[ fid ].fpos = 0;
    348c:	8b 81       	ldd	r24, Y+3	; 0x03
    348e:	9c 81       	ldd	r25, Y+4	; 0x04
    3490:	88 0f       	add	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	9c 01       	movw	r18, r24
    3496:	22 0f       	add	r18, r18
    3498:	33 1f       	adc	r19, r19
    349a:	22 0f       	add	r18, r18
    349c:	33 1f       	adc	r19, r19
    349e:	82 0f       	add	r24, r18
    34a0:	93 1f       	adc	r25, r19
    34a2:	fc 01       	movw	r30, r24
    34a4:	eb 5d       	subi	r30, 0xDB	; 219
    34a6:	fb 4f       	sbci	r31, 0xFB	; 251
    34a8:	10 82       	st	Z, r1
    34aa:	11 82       	std	Z+1, r1	; 0x01
    34ac:	12 82       	std	Z+2, r1	; 0x02
    34ae:	13 82       	std	Z+3, r1	; 0x03
   }
   if ( mode == 2 ) {
    34b0:	8d 81       	ldd	r24, Y+5	; 0x05
    34b2:	9e 81       	ldd	r25, Y+6	; 0x06
    34b4:	82 30       	cpi	r24, 0x02	; 2
    34b6:	91 05       	cpc	r25, r1
    34b8:	91 f4       	brne	.+36     	; 0x34de <openFile+0xf0>
      fidtable[ fid ].fpos = 0;
    34ba:	8b 81       	ldd	r24, Y+3	; 0x03
    34bc:	9c 81       	ldd	r25, Y+4	; 0x04
    34be:	88 0f       	add	r24, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	9c 01       	movw	r18, r24
    34c4:	22 0f       	add	r18, r18
    34c6:	33 1f       	adc	r19, r19
    34c8:	22 0f       	add	r18, r18
    34ca:	33 1f       	adc	r19, r19
    34cc:	82 0f       	add	r24, r18
    34ce:	93 1f       	adc	r25, r19
    34d0:	fc 01       	movw	r30, r24
    34d2:	eb 5d       	subi	r30, 0xDB	; 219
    34d4:	fb 4f       	sbci	r31, 0xFB	; 251
    34d6:	10 82       	st	Z, r1
    34d8:	11 82       	std	Z+1, r1	; 0x01
    34da:	12 82       	std	Z+2, r1	; 0x02
    34dc:	13 82       	std	Z+3, r1	; 0x03
   }
   if ( mode == 3 ) {
    34de:	8d 81       	ldd	r24, Y+5	; 0x05
    34e0:	9e 81       	ldd	r25, Y+6	; 0x06
    34e2:	83 30       	cpi	r24, 0x03	; 3
    34e4:	91 05       	cpc	r25, r1
    34e6:	31 f5       	brne	.+76     	; 0x3534 <openFile+0x146>
      fidtable[ fid ].fpos = fidtable[ fid ].size;
    34e8:	ab 81       	ldd	r26, Y+3	; 0x03
    34ea:	bc 81       	ldd	r27, Y+4	; 0x04
    34ec:	8b 81       	ldd	r24, Y+3	; 0x03
    34ee:	9c 81       	ldd	r25, Y+4	; 0x04
    34f0:	88 0f       	add	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	9c 01       	movw	r18, r24
    34f6:	22 0f       	add	r18, r18
    34f8:	33 1f       	adc	r19, r19
    34fa:	22 0f       	add	r18, r18
    34fc:	33 1f       	adc	r19, r19
    34fe:	82 0f       	add	r24, r18
    3500:	93 1f       	adc	r25, r19
    3502:	fc 01       	movw	r30, r24
    3504:	ed 5d       	subi	r30, 0xDD	; 221
    3506:	fb 4f       	sbci	r31, 0xFB	; 251
    3508:	80 81       	ld	r24, Z
    350a:	91 81       	ldd	r25, Z+1	; 0x01
    350c:	ac 01       	movw	r20, r24
    350e:	66 27       	eor	r22, r22
    3510:	77 27       	eor	r23, r23
    3512:	cd 01       	movw	r24, r26
    3514:	88 0f       	add	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	9c 01       	movw	r18, r24
    351a:	22 0f       	add	r18, r18
    351c:	33 1f       	adc	r19, r19
    351e:	22 0f       	add	r18, r18
    3520:	33 1f       	adc	r19, r19
    3522:	82 0f       	add	r24, r18
    3524:	93 1f       	adc	r25, r19
    3526:	fc 01       	movw	r30, r24
    3528:	eb 5d       	subi	r30, 0xDB	; 219
    352a:	fb 4f       	sbci	r31, 0xFB	; 251
    352c:	40 83       	st	Z, r20
    352e:	51 83       	std	Z+1, r21	; 0x01
    3530:	62 83       	std	Z+2, r22	; 0x02
    3532:	73 83       	std	Z+3, r23	; 0x03
   }
   if ( mode == 4 ) {
    3534:	8d 81       	ldd	r24, Y+5	; 0x05
    3536:	9e 81       	ldd	r25, Y+6	; 0x06
    3538:	84 30       	cpi	r24, 0x04	; 4
    353a:	91 05       	cpc	r25, r1
    353c:	b1 f4       	brne	.+44     	; 0x356a <openFile+0x17c>
      freeBlocks( addr );
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	9a 81       	ldd	r25, Y+2	; 0x02
    3542:	0e 94 c4 19 	call	0x3388	; 0x3388 <freeBlocks>
      fidtable[ fid ].fpos = 0;
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	9c 81       	ldd	r25, Y+4	; 0x04
    354a:	88 0f       	add	r24, r24
    354c:	99 1f       	adc	r25, r25
    354e:	9c 01       	movw	r18, r24
    3550:	22 0f       	add	r18, r18
    3552:	33 1f       	adc	r19, r19
    3554:	22 0f       	add	r18, r18
    3556:	33 1f       	adc	r19, r19
    3558:	82 0f       	add	r24, r18
    355a:	93 1f       	adc	r25, r19
    355c:	fc 01       	movw	r30, r24
    355e:	eb 5d       	subi	r30, 0xDB	; 219
    3560:	fb 4f       	sbci	r31, 0xFB	; 251
    3562:	10 82       	st	Z, r1
    3564:	11 82       	std	Z+1, r1	; 0x01
    3566:	12 82       	std	Z+2, r1	; 0x02
    3568:	13 82       	std	Z+3, r1	; 0x03
   }
   if ( mode == 5 ) {
    356a:	8d 81       	ldd	r24, Y+5	; 0x05
    356c:	9e 81       	ldd	r25, Y+6	; 0x06
    356e:	85 30       	cpi	r24, 0x05	; 5
    3570:	91 05       	cpc	r25, r1
    3572:	91 f4       	brne	.+36     	; 0x3598 <openFile+0x1aa>
      fidtable[ fid ].fpos = 0;
    3574:	8b 81       	ldd	r24, Y+3	; 0x03
    3576:	9c 81       	ldd	r25, Y+4	; 0x04
    3578:	88 0f       	add	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	9c 01       	movw	r18, r24
    357e:	22 0f       	add	r18, r18
    3580:	33 1f       	adc	r19, r19
    3582:	22 0f       	add	r18, r18
    3584:	33 1f       	adc	r19, r19
    3586:	82 0f       	add	r24, r18
    3588:	93 1f       	adc	r25, r19
    358a:	fc 01       	movw	r30, r24
    358c:	eb 5d       	subi	r30, 0xDB	; 219
    358e:	fb 4f       	sbci	r31, 0xFB	; 251
    3590:	10 82       	st	Z, r1
    3592:	11 82       	std	Z+1, r1	; 0x01
    3594:	12 82       	std	Z+2, r1	; 0x02
    3596:	13 82       	std	Z+3, r1	; 0x03
    3598:	26 96       	adiw	r28, 0x06	; 6
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	1f 91       	pop	r17
    35aa:	0f 91       	pop	r16
    35ac:	08 95       	ret

000035ae <getRealSector>:
   }
}

//-------------------------------------------------------------------------
uint8_t getRealSector( uint8_t addr, uint8_t sectornum ) {
    35ae:	cf 93       	push	r28
    35b0:	df 93       	push	r29
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	23 97       	sbiw	r28, 0x03	; 3
    35b8:	0f b6       	in	r0, 0x3f	; 63
    35ba:	f8 94       	cli
    35bc:	de bf       	out	0x3e, r29	; 62
    35be:	0f be       	out	0x3f, r0	; 63
    35c0:	cd bf       	out	0x3d, r28	; 61
    35c2:	8a 83       	std	Y+2, r24	; 0x02
    35c4:	6b 83       	std	Y+3, r22	; 0x03
   uint8_t currentaddr;
   currentaddr = addr;
    35c6:	8a 81       	ldd	r24, Y+2	; 0x02
    35c8:	89 83       	std	Y+1, r24	; 0x01
   while ( sectornum >= 8 ) {
    35ca:	0a c0       	rjmp	.+20     	; 0x35e0 <getRealSector+0x32>
      currentaddr = fsread8uint( currentaddr, FILE_NEXTOFFSET );
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	99 27       	eor	r25, r25
    35d0:	68 e1       	ldi	r22, 0x18	; 24
    35d2:	70 e0       	ldi	r23, 0x00	; 0
    35d4:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    35d8:	89 83       	std	Y+1, r24	; 0x01
      sectornum -= 8;
    35da:	8b 81       	ldd	r24, Y+3	; 0x03
    35dc:	88 50       	subi	r24, 0x08	; 8
    35de:	8b 83       	std	Y+3, r24	; 0x03
    35e0:	8b 81       	ldd	r24, Y+3	; 0x03
    35e2:	88 30       	cpi	r24, 0x08	; 8
    35e4:	98 f7       	brcc	.-26     	; 0x35cc <getRealSector+0x1e>
   }
   return fsread8uint( currentaddr, FILE_ADDRPAGEOFFSET + sectornum );
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	99 27       	eor	r25, r25
    35ea:	9c 01       	movw	r18, r24
    35ec:	22 5f       	subi	r18, 0xF2	; 242
    35ee:	3f 4f       	sbci	r19, 0xFF	; 255
    35f0:	89 81       	ldd	r24, Y+1	; 0x01
    35f2:	99 27       	eor	r25, r25
    35f4:	b9 01       	movw	r22, r18
    35f6:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    35fa:	99 27       	eor	r25, r25
    35fc:	23 96       	adiw	r28, 0x03	; 3
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	f8 94       	cli
    3602:	de bf       	out	0x3e, r29	; 62
    3604:	0f be       	out	0x3f, r0	; 63
    3606:	cd bf       	out	0x3d, r28	; 61
    3608:	df 91       	pop	r29
    360a:	cf 91       	pop	r28
    360c:	08 95       	ret

0000360e <newSector>:
}

//-------------------------------------------------------------------------
void newSector( int addr ) {
    360e:	cf 93       	push	r28
    3610:	df 93       	push	r29
    3612:	cd b7       	in	r28, 0x3d	; 61
    3614:	de b7       	in	r29, 0x3e	; 62
    3616:	27 97       	sbiw	r28, 0x07	; 7
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	f8 94       	cli
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	9f 83       	std	Y+7, r25	; 0x07
    3624:	8e 83       	std	Y+6, r24	; 0x06
   uint8_t i, readpage;
   uint8_t next, currentaddr, getnode;
   currentaddr = addr;
    3626:	8e 81       	ldd	r24, Y+6	; 0x06
    3628:	8a 83       	std	Y+2, r24	; 0x02
   //begin rounds of 
   // 1 check whether the current 8 pages are occupied or not
   // 2 check the next field is ok or not
   // 3 get to the next addr and loop 
   while ( 1 ) {
      for ( i = 0; i < 8; i ++ ) {
    362a:	1d 82       	std	Y+5, r1	; 0x05
    362c:	11 c0       	rjmp	.+34     	; 0x3650 <newSector+0x42>
         readpage = fsread8uint( currentaddr, FILE_ADDRPAGEOFFSET + i );
    362e:	8d 81       	ldd	r24, Y+5	; 0x05
    3630:	99 27       	eor	r25, r25
    3632:	9c 01       	movw	r18, r24
    3634:	22 5f       	subi	r18, 0xF2	; 242
    3636:	3f 4f       	sbci	r19, 0xFF	; 255
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	99 27       	eor	r25, r25
    363c:	b9 01       	movw	r22, r18
    363e:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    3642:	8c 83       	std	Y+4, r24	; 0x04
         if ( readpage == 0 ) {
    3644:	8c 81       	ldd	r24, Y+4	; 0x04
    3646:	88 23       	and	r24, r24
    3648:	31 f0       	breq	.+12     	; 0x3656 <newSector+0x48>
    364a:	8d 81       	ldd	r24, Y+5	; 0x05
    364c:	8f 5f       	subi	r24, 0xFF	; 255
    364e:	8d 83       	std	Y+5, r24	; 0x05
    3650:	8d 81       	ldd	r24, Y+5	; 0x05
    3652:	88 30       	cpi	r24, 0x08	; 8
    3654:	60 f3       	brcs	.-40     	; 0x362e <newSector+0x20>
            break;
         } 
      }
      if ( i < 8 ) {
    3656:	8d 81       	ldd	r24, Y+5	; 0x05
    3658:	88 30       	cpi	r24, 0x08	; 8
    365a:	78 f4       	brcc	.+30     	; 0x367a <newSector+0x6c>
         readpage = getFlashPage();
    365c:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <getFlashPage>
    3660:	8c 83       	std	Y+4, r24	; 0x04
         fswrite8uint( currentaddr, FILE_ADDRPAGEOFFSET + i, readpage );
    3662:	8d 81       	ldd	r24, Y+5	; 0x05
    3664:	99 27       	eor	r25, r25
    3666:	9c 01       	movw	r18, r24
    3668:	22 5f       	subi	r18, 0xF2	; 242
    366a:	3f 4f       	sbci	r19, 0xFF	; 255
    366c:	8a 81       	ldd	r24, Y+2	; 0x02
    366e:	99 27       	eor	r25, r25
    3670:	4c 81       	ldd	r20, Y+4	; 0x04
    3672:	b9 01       	movw	r22, r18
    3674:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
         return ;
    3678:	24 c0       	rjmp	.+72     	; 0x36c2 <newSector+0xb4>
      }
      next = fsread8uint( currentaddr, FILE_NEXTOFFSET );
    367a:	8a 81       	ldd	r24, Y+2	; 0x02
    367c:	99 27       	eor	r25, r25
    367e:	68 e1       	ldi	r22, 0x18	; 24
    3680:	70 e0       	ldi	r23, 0x00	; 0
    3682:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    3686:	8b 83       	std	Y+3, r24	; 0x03
      if ( next == 0 ) {
    3688:	8b 81       	ldd	r24, Y+3	; 0x03
    368a:	88 23       	and	r24, r24
    368c:	b9 f4       	brne	.+46     	; 0x36bc <newSector+0xae>
         getnode = getVectorNode();
    368e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <getVectorNode>
    3692:	89 83       	std	Y+1, r24	; 0x01
         fswrite8uint( currentaddr, FILE_NEXTOFFSET, getnode );
    3694:	8a 81       	ldd	r24, Y+2	; 0x02
    3696:	99 27       	eor	r25, r25
    3698:	49 81       	ldd	r20, Y+1	; 0x01
    369a:	68 e1       	ldi	r22, 0x18	; 24
    369c:	70 e0       	ldi	r23, 0x00	; 0
    369e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
         currentaddr = getnode;
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	8a 83       	std	Y+2, r24	; 0x02
         readpage = getFlashPage();
    36a6:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <getFlashPage>
    36aa:	8c 83       	std	Y+4, r24	; 0x04
         fswrite8uint( currentaddr, FILE_ADDRPAGEOFFSET, readpage );
    36ac:	8a 81       	ldd	r24, Y+2	; 0x02
    36ae:	99 27       	eor	r25, r25
    36b0:	4c 81       	ldd	r20, Y+4	; 0x04
    36b2:	6e e0       	ldi	r22, 0x0E	; 14
    36b4:	70 e0       	ldi	r23, 0x00	; 0
    36b6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
         return ;
    36ba:	03 c0       	rjmp	.+6      	; 0x36c2 <newSector+0xb4>
      }
      currentaddr = next;
    36bc:	8b 81       	ldd	r24, Y+3	; 0x03
    36be:	8a 83       	std	Y+2, r24	; 0x02
   }
    36c0:	b4 cf       	rjmp	.-152    	; 0x362a <newSector+0x1c>
    36c2:	27 96       	adiw	r28, 0x07	; 7
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	f8 94       	cli
    36c8:	de bf       	out	0x3e, r29	; 62
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	cd bf       	out	0x3d, r28	; 61
    36ce:	df 91       	pop	r29
    36d0:	cf 91       	pop	r28
    36d2:	08 95       	ret

000036d4 <addChildNode>:
}

//-------------------------------------------------------------------------
void addChildNode( uint8_t addr, uint8_t child ) {
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
    36dc:	24 97       	sbiw	r28, 0x04	; 4
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	de bf       	out	0x3e, r29	; 62
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	cd bf       	out	0x3d, r28	; 61
    36e8:	8b 83       	std	Y+3, r24	; 0x03
    36ea:	6c 83       	std	Y+4, r22	; 0x04
   uint8_t i;
   for ( i = 0; i < 10; i ++ ) {
    36ec:	1a 82       	std	Y+2, r1	; 0x02
    36ee:	1d c0       	rjmp	.+58     	; 0x372a <addChildNode+0x56>
      uint8_t subaddr;
      subaddr = fsread8uint( addr, DIR_ADDRSUBOFFSET + i );
    36f0:	8a 81       	ldd	r24, Y+2	; 0x02
    36f2:	99 27       	eor	r25, r25
    36f4:	9c 01       	movw	r18, r24
    36f6:	22 5f       	subi	r18, 0xF2	; 242
    36f8:	3f 4f       	sbci	r19, 0xFF	; 255
    36fa:	8b 81       	ldd	r24, Y+3	; 0x03
    36fc:	99 27       	eor	r25, r25
    36fe:	b9 01       	movw	r22, r18
    3700:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    3704:	89 83       	std	Y+1, r24	; 0x01
      if ( subaddr == 0 ) {
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	88 23       	and	r24, r24
    370a:	61 f4       	brne	.+24     	; 0x3724 <addChildNode+0x50>
         fswrite8uint( addr, DIR_ADDRSUBOFFSET + i, child );
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	99 27       	eor	r25, r25
    3710:	9c 01       	movw	r18, r24
    3712:	22 5f       	subi	r18, 0xF2	; 242
    3714:	3f 4f       	sbci	r19, 0xFF	; 255
    3716:	8b 81       	ldd	r24, Y+3	; 0x03
    3718:	99 27       	eor	r25, r25
    371a:	4c 81       	ldd	r20, Y+4	; 0x04
    371c:	b9 01       	movw	r22, r18
    371e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
         return ;
    3722:	06 c0       	rjmp	.+12     	; 0x3730 <addChildNode+0x5c>
    3724:	8a 81       	ldd	r24, Y+2	; 0x02
    3726:	8f 5f       	subi	r24, 0xFF	; 255
    3728:	8a 83       	std	Y+2, r24	; 0x02
    372a:	8a 81       	ldd	r24, Y+2	; 0x02
    372c:	8a 30       	cpi	r24, 0x0A	; 10
    372e:	00 f3       	brcs	.-64     	; 0x36f0 <addChildNode+0x1c>
    3730:	24 96       	adiw	r28, 0x04	; 4
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	f8 94       	cli
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	cd bf       	out	0x3d, r28	; 61
    373c:	df 91       	pop	r29
    373e:	cf 91       	pop	r28
    3740:	08 95       	ret

00003742 <removeChildNode>:
      }
   }
   return ;
}

//-------------------------------------------------------------------------
void removeChildNode( uint8_t addr, uint8_t child ) {
    3742:	cf 93       	push	r28
    3744:	df 93       	push	r29
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
    374a:	24 97       	sbiw	r28, 0x04	; 4
    374c:	0f b6       	in	r0, 0x3f	; 63
    374e:	f8 94       	cli
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	0f be       	out	0x3f, r0	; 63
    3754:	cd bf       	out	0x3d, r28	; 61
    3756:	8b 83       	std	Y+3, r24	; 0x03
    3758:	6c 83       	std	Y+4, r22	; 0x04
   uint8_t i;
   for ( i = 0; i < 10; i ++ ) {
    375a:	1a 82       	std	Y+2, r1	; 0x02
    375c:	1e c0       	rjmp	.+60     	; 0x379a <removeChildNode+0x58>
      uint8_t subaddr;
      subaddr = fsread8uint( addr, DIR_ADDRSUBOFFSET + i );
    375e:	8a 81       	ldd	r24, Y+2	; 0x02
    3760:	99 27       	eor	r25, r25
    3762:	9c 01       	movw	r18, r24
    3764:	22 5f       	subi	r18, 0xF2	; 242
    3766:	3f 4f       	sbci	r19, 0xFF	; 255
    3768:	8b 81       	ldd	r24, Y+3	; 0x03
    376a:	99 27       	eor	r25, r25
    376c:	b9 01       	movw	r22, r18
    376e:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    3772:	89 83       	std	Y+1, r24	; 0x01
      if ( subaddr == child ) {
    3774:	99 81       	ldd	r25, Y+1	; 0x01
    3776:	8c 81       	ldd	r24, Y+4	; 0x04
    3778:	98 17       	cp	r25, r24
    377a:	61 f4       	brne	.+24     	; 0x3794 <removeChildNode+0x52>
         fswrite8uint( addr, DIR_ADDRSUBOFFSET + i, 0 );
    377c:	8a 81       	ldd	r24, Y+2	; 0x02
    377e:	99 27       	eor	r25, r25
    3780:	9c 01       	movw	r18, r24
    3782:	22 5f       	subi	r18, 0xF2	; 242
    3784:	3f 4f       	sbci	r19, 0xFF	; 255
    3786:	8b 81       	ldd	r24, Y+3	; 0x03
    3788:	99 27       	eor	r25, r25
    378a:	40 e0       	ldi	r20, 0x00	; 0
    378c:	b9 01       	movw	r22, r18
    378e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fswrite8uint>
         return ;
    3792:	06 c0       	rjmp	.+12     	; 0x37a0 <removeChildNode+0x5e>
    3794:	8a 81       	ldd	r24, Y+2	; 0x02
    3796:	8f 5f       	subi	r24, 0xFF	; 255
    3798:	8a 83       	std	Y+2, r24	; 0x02
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	8a 30       	cpi	r24, 0x0A	; 10
    379e:	f8 f2       	brcs	.-66     	; 0x375e <removeChildNode+0x1c>
    37a0:	24 96       	adiw	r28, 0x04	; 4
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	f8 94       	cli
    37a6:	de bf       	out	0x3e, r29	; 62
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	08 95       	ret

000037b2 <writeVectorFlashToExternalStorage>:

static char vectorflash[ 32 ];

void writeVectorFlashToExternalStorage()	
{
    37b2:	cf 93       	push	r28
    37b4:	df 93       	push	r29
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
	 #ifdef PLATFORM_AVR	  
     genericwriteBytes(FLASHVECTORSTART,32,vectorflash); 
    37ba:	80 e8       	ldi	r24, 0x80	; 128
    37bc:	91 e0       	ldi	r25, 0x01	; 1
    37be:	ac 01       	movw	r20, r24
    37c0:	60 e2       	ldi	r22, 0x20	; 32
    37c2:	70 e0       	ldi	r23, 0x00	; 0
    37c4:	8e e4       	ldi	r24, 0x4E	; 78
    37c6:	9c e0       	ldi	r25, 0x0C	; 12
    37c8:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <genericwriteBytes>
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	08 95       	ret

000037d2 <readVectorFlashFromExternalStorage>:
    #endif
}

void readVectorFlashFromExternalStorage()
{
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
	  #ifdef PLATFORM_AVR
     genericreadBytes(FLASHVECTORSTART, 32, vectorflash); 
    37da:	80 e8       	ldi	r24, 0x80	; 128
    37dc:	91 e0       	ldi	r25, 0x01	; 1
    37de:	ac 01       	movw	r20, r24
    37e0:	60 e2       	ldi	r22, 0x20	; 32
    37e2:	70 e0       	ldi	r23, 0x00	; 0
    37e4:	8e e4       	ldi	r24, 0x4E	; 78
    37e6:	9c e0       	ldi	r25, 0x0C	; 12
    37e8:	0e 94 88 6e 	call	0xdd10	; 0xdd10 <genericreadBytes>
    37ec:	df 91       	pop	r29
    37ee:	cf 91       	pop	r28
    37f0:	08 95       	ret

000037f2 <getbit>:
    #endif
}

static int getbit( char *set, int number ) {
    37f2:	cf 93       	push	r28
    37f4:	df 93       	push	r29
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
    37fa:	26 97       	sbiw	r28, 0x06	; 6
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	f8 94       	cli
    3800:	de bf       	out	0x3e, r29	; 62
    3802:	0f be       	out	0x3f, r0	; 63
    3804:	cd bf       	out	0x3d, r28	; 61
    3806:	9a 83       	std	Y+2, r25	; 0x02
    3808:	89 83       	std	Y+1, r24	; 0x01
    380a:	7c 83       	std	Y+4, r23	; 0x04
    380c:	6b 83       	std	Y+3, r22	; 0x03
   set += number / 8;
    380e:	8b 81       	ldd	r24, Y+3	; 0x03
    3810:	9c 81       	ldd	r25, Y+4	; 0x04
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
    3816:	2d 81       	ldd	r18, Y+5	; 0x05
    3818:	3e 81       	ldd	r19, Y+6	; 0x06
    381a:	33 23       	and	r19, r19
    381c:	2c f4       	brge	.+10     	; 0x3828 <getbit+0x36>
    381e:	8d 81       	ldd	r24, Y+5	; 0x05
    3820:	9e 81       	ldd	r25, Y+6	; 0x06
    3822:	07 96       	adiw	r24, 0x07	; 7
    3824:	9e 83       	std	Y+6, r25	; 0x06
    3826:	8d 83       	std	Y+5, r24	; 0x05
    3828:	8d 81       	ldd	r24, Y+5	; 0x05
    382a:	9e 81       	ldd	r25, Y+6	; 0x06
    382c:	95 95       	asr	r25
    382e:	87 95       	ror	r24
    3830:	95 95       	asr	r25
    3832:	87 95       	ror	r24
    3834:	95 95       	asr	r25
    3836:	87 95       	ror	r24
    3838:	9c 01       	movw	r18, r24
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	9a 81       	ldd	r25, Y+2	; 0x02
    383e:	82 0f       	add	r24, r18
    3840:	93 1f       	adc	r25, r19
    3842:	9a 83       	std	Y+2, r25	; 0x02
    3844:	89 83       	std	Y+1, r24	; 0x01
   return ( *set& ( 1 << ( number % 8 ))) != 0; /* 0 or 1       */
    3846:	e9 81       	ldd	r30, Y+1	; 0x01
    3848:	fa 81       	ldd	r31, Y+2	; 0x02
    384a:	80 81       	ld	r24, Z
    384c:	e8 2f       	mov	r30, r24
    384e:	ff 27       	eor	r31, r31
    3850:	e7 fd       	sbrc	r30, 7
    3852:	f0 95       	com	r31
    3854:	8b 81       	ldd	r24, Y+3	; 0x03
    3856:	9c 81       	ldd	r25, Y+4	; 0x04
    3858:	28 e0       	ldi	r18, 0x08	; 8
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	b9 01       	movw	r22, r18
    385e:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
    3862:	9f 01       	movw	r18, r30
    3864:	02 c0       	rjmp	.+4      	; 0x386a <getbit+0x78>
    3866:	35 95       	asr	r19
    3868:	27 95       	ror	r18
    386a:	8a 95       	dec	r24
    386c:	e2 f7       	brpl	.-8      	; 0x3866 <getbit+0x74>
    386e:	c9 01       	movw	r24, r18
    3870:	81 70       	andi	r24, 0x01	; 1
    3872:	90 70       	andi	r25, 0x00	; 0
    3874:	26 96       	adiw	r28, 0x06	; 6
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	08 95       	ret

00003886 <setbit>:
}

//-------------------------------------------------------------------------
static void setbit( char *set, int number, int value ) {
    3886:	cf 93       	push	r28
    3888:	df 93       	push	r29
    388a:	cd b7       	in	r28, 0x3d	; 61
    388c:	de b7       	in	r29, 0x3e	; 62
    388e:	28 97       	sbiw	r28, 0x08	; 8
    3890:	0f b6       	in	r0, 0x3f	; 63
    3892:	f8 94       	cli
    3894:	de bf       	out	0x3e, r29	; 62
    3896:	0f be       	out	0x3f, r0	; 63
    3898:	cd bf       	out	0x3d, r28	; 61
    389a:	9a 83       	std	Y+2, r25	; 0x02
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	7c 83       	std	Y+4, r23	; 0x04
    38a0:	6b 83       	std	Y+3, r22	; 0x03
    38a2:	5e 83       	std	Y+6, r21	; 0x06
    38a4:	4d 83       	std	Y+5, r20	; 0x05
   set += number / 8;
    38a6:	8b 81       	ldd	r24, Y+3	; 0x03
    38a8:	9c 81       	ldd	r25, Y+4	; 0x04
    38aa:	98 87       	std	Y+8, r25	; 0x08
    38ac:	8f 83       	std	Y+7, r24	; 0x07
    38ae:	8f 81       	ldd	r24, Y+7	; 0x07
    38b0:	98 85       	ldd	r25, Y+8	; 0x08
    38b2:	99 23       	and	r25, r25
    38b4:	2c f4       	brge	.+10     	; 0x38c0 <setbit+0x3a>
    38b6:	8f 81       	ldd	r24, Y+7	; 0x07
    38b8:	98 85       	ldd	r25, Y+8	; 0x08
    38ba:	07 96       	adiw	r24, 0x07	; 7
    38bc:	98 87       	std	Y+8, r25	; 0x08
    38be:	8f 83       	std	Y+7, r24	; 0x07
    38c0:	8f 81       	ldd	r24, Y+7	; 0x07
    38c2:	98 85       	ldd	r25, Y+8	; 0x08
    38c4:	95 95       	asr	r25
    38c6:	87 95       	ror	r24
    38c8:	95 95       	asr	r25
    38ca:	87 95       	ror	r24
    38cc:	95 95       	asr	r25
    38ce:	87 95       	ror	r24
    38d0:	9c 01       	movw	r18, r24
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	9a 81       	ldd	r25, Y+2	; 0x02
    38d6:	82 0f       	add	r24, r18
    38d8:	93 1f       	adc	r25, r19
    38da:	9a 83       	std	Y+2, r25	; 0x02
    38dc:	89 83       	std	Y+1, r24	; 0x01
   if ( value ) {
    38de:	8d 81       	ldd	r24, Y+5	; 0x05
    38e0:	9e 81       	ldd	r25, Y+6	; 0x06
    38e2:	00 97       	sbiw	r24, 0x00	; 0
    38e4:	c1 f0       	breq	.+48     	; 0x3916 <setbit+0x90>
      *set |= 1 << ( number % 8 );
    38e6:	e9 81       	ldd	r30, Y+1	; 0x01
    38e8:	fa 81       	ldd	r31, Y+2	; 0x02
    38ea:	40 81       	ld	r20, Z
    38ec:	8b 81       	ldd	r24, Y+3	; 0x03
    38ee:	9c 81       	ldd	r25, Y+4	; 0x04
    38f0:	28 e0       	ldi	r18, 0x08	; 8
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	b9 01       	movw	r22, r18
    38f6:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
    38fa:	9c 01       	movw	r18, r24
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	02 2e       	mov	r0, r18
    3902:	02 c0       	rjmp	.+4      	; 0x3908 <setbit+0x82>
    3904:	88 0f       	add	r24, r24
    3906:	99 1f       	adc	r25, r25
    3908:	0a 94       	dec	r0
    390a:	e2 f7       	brpl	.-8      	; 0x3904 <setbit+0x7e>
    390c:	84 2b       	or	r24, r20
    390e:	e9 81       	ldd	r30, Y+1	; 0x01
    3910:	fa 81       	ldd	r31, Y+2	; 0x02
    3912:	80 83       	st	Z, r24
    3914:	17 c0       	rjmp	.+46     	; 0x3944 <setbit+0xbe>
   }  /* set bit      */
   else {
       *set &=  ~ ( 1 << ( number % 8 ));
    3916:	e9 81       	ldd	r30, Y+1	; 0x01
    3918:	fa 81       	ldd	r31, Y+2	; 0x02
    391a:	40 81       	ld	r20, Z
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	9c 81       	ldd	r25, Y+4	; 0x04
    3920:	28 e0       	ldi	r18, 0x08	; 8
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	b9 01       	movw	r22, r18
    3926:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
    392a:	9c 01       	movw	r18, r24
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	02 c0       	rjmp	.+4      	; 0x3936 <setbit+0xb0>
    3932:	88 0f       	add	r24, r24
    3934:	99 1f       	adc	r25, r25
    3936:	2a 95       	dec	r18
    3938:	e2 f7       	brpl	.-8      	; 0x3932 <setbit+0xac>
    393a:	80 95       	com	r24
    393c:	84 23       	and	r24, r20
    393e:	e9 81       	ldd	r30, Y+1	; 0x01
    3940:	fa 81       	ldd	r31, Y+2	; 0x02
    3942:	80 83       	st	Z, r24
    3944:	28 96       	adiw	r28, 0x08	; 8
    3946:	0f b6       	in	r0, 0x3f	; 63
    3948:	f8 94       	cli
    394a:	de bf       	out	0x3e, r29	; 62
    394c:	0f be       	out	0x3f, r0	; 63
    394e:	cd bf       	out	0x3d, r28	; 61
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	08 95       	ret

00003956 <initVectorFlash>:
   }  /* clear bit    */
}

//-------------------------------------------------------------------------
void initVectorFlash() {
    3956:	cf 93       	push	r28
    3958:	df 93       	push	r29
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
    395e:	22 97       	sbiw	r28, 0x02	; 2
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	f8 94       	cli
    3964:	de bf       	out	0x3e, r29	; 62
    3966:	0f be       	out	0x3f, r0	; 63
    3968:	cd bf       	out	0x3d, r28	; 61
   int i;
   for ( i = 0; i < 32; i ++ ) {
    396a:	1a 82       	std	Y+2, r1	; 0x02
    396c:	19 82       	std	Y+1, r1	; 0x01
    396e:	0b c0       	rjmp	.+22     	; 0x3986 <initVectorFlash+0x30>
      vectorflash[ i ] = 0;
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	9a 81       	ldd	r25, Y+2	; 0x02
    3974:	fc 01       	movw	r30, r24
    3976:	e0 58       	subi	r30, 0x80	; 128
    3978:	fe 4f       	sbci	r31, 0xFE	; 254
    397a:	10 82       	st	Z, r1
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	9a 81       	ldd	r25, Y+2	; 0x02
    3980:	01 96       	adiw	r24, 0x01	; 1
    3982:	9a 83       	std	Y+2, r25	; 0x02
    3984:	89 83       	std	Y+1, r24	; 0x01
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	9a 81       	ldd	r25, Y+2	; 0x02
    398a:	80 32       	cpi	r24, 0x20	; 32
    398c:	91 05       	cpc	r25, r1
    398e:	84 f3       	brlt	.-32     	; 0x3970 <initVectorFlash+0x1a>
    3990:	22 96       	adiw	r28, 0x02	; 2
    3992:	0f b6       	in	r0, 0x3f	; 63
    3994:	f8 94       	cli
    3996:	de bf       	out	0x3e, r29	; 62
    3998:	0f be       	out	0x3f, r0	; 63
    399a:	cd bf       	out	0x3d, r28	; 61
    399c:	df 91       	pop	r29
    399e:	cf 91       	pop	r28
    39a0:	08 95       	ret

000039a2 <getFlashPage>:
   } 
}

//-------------------------------------------------------------------------
int getFlashPage() {
    39a2:	cf 93       	push	r28
    39a4:	df 93       	push	r29
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	24 97       	sbiw	r28, 0x04	; 4
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
   int num;
   for ( num = 0; num < 256; num ++ ) {
    39b6:	1a 82       	std	Y+2, r1	; 0x02
    39b8:	19 82       	std	Y+1, r1	; 0x01
    39ba:	21 c0       	rjmp	.+66     	; 0x39fe <getFlashPage+0x5c>
      if ( getbit( vectorflash, num ) == 0 ) {
    39bc:	89 81       	ldd	r24, Y+1	; 0x01
    39be:	9a 81       	ldd	r25, Y+2	; 0x02
    39c0:	20 e8       	ldi	r18, 0x80	; 128
    39c2:	31 e0       	ldi	r19, 0x01	; 1
    39c4:	bc 01       	movw	r22, r24
    39c6:	c9 01       	movw	r24, r18
    39c8:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <getbit>
    39cc:	00 97       	sbiw	r24, 0x00	; 0
    39ce:	91 f4       	brne	.+36     	; 0x39f4 <getFlashPage+0x52>
         setbit( vectorflash, num, 1 );
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	9a 81       	ldd	r25, Y+2	; 0x02
    39d4:	20 e8       	ldi	r18, 0x80	; 128
    39d6:	31 e0       	ldi	r19, 0x01	; 1
    39d8:	41 e0       	ldi	r20, 0x01	; 1
    39da:	50 e0       	ldi	r21, 0x00	; 0
    39dc:	bc 01       	movw	r22, r24
    39de:	c9 01       	movw	r24, r18
    39e0:	0e 94 43 1c 	call	0x3886	; 0x3886 <setbit>
         return num + 1;
    39e4:	89 81       	ldd	r24, Y+1	; 0x01
    39e6:	9a 81       	ldd	r25, Y+2	; 0x02
    39e8:	9c 01       	movw	r18, r24
    39ea:	2f 5f       	subi	r18, 0xFF	; 255
    39ec:	3f 4f       	sbci	r19, 0xFF	; 255
    39ee:	3c 83       	std	Y+4, r19	; 0x04
    39f0:	2b 83       	std	Y+3, r18	; 0x03
    39f2:	0f c0       	rjmp	.+30     	; 0x3a12 <getFlashPage+0x70>
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	9a 81       	ldd	r25, Y+2	; 0x02
    39f8:	01 96       	adiw	r24, 0x01	; 1
    39fa:	9a 83       	std	Y+2, r25	; 0x02
    39fc:	89 83       	std	Y+1, r24	; 0x01
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	9a 81       	ldd	r25, Y+2	; 0x02
    3a02:	8f 3f       	cpi	r24, 0xFF	; 255
    3a04:	91 05       	cpc	r25, r1
    3a06:	d1 f2       	breq	.-76     	; 0x39bc <getFlashPage+0x1a>
    3a08:	cc f2       	brlt	.-78     	; 0x39bc <getFlashPage+0x1a>
      }
   }
   return  - 1;
    3a0a:	8f ef       	ldi	r24, 0xFF	; 255
    3a0c:	9f ef       	ldi	r25, 0xFF	; 255
    3a0e:	9c 83       	std	Y+4, r25	; 0x04
    3a10:	8b 83       	std	Y+3, r24	; 0x03
    3a12:	8b 81       	ldd	r24, Y+3	; 0x03
    3a14:	9c 81       	ldd	r25, Y+4	; 0x04
    3a16:	24 96       	adiw	r28, 0x04	; 4
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	df 91       	pop	r29
    3a24:	cf 91       	pop	r28
    3a26:	08 95       	ret

00003a28 <scanVectorFlash>:
}

//-------------------------------------------------------------------------
void scanVectorFlash() {
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	28 97       	sbiw	r28, 0x08	; 8
    3a32:	0f b6       	in	r0, 0x3f	; 63
    3a34:	f8 94       	cli
    3a36:	de bf       	out	0x3e, r29	; 62
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	cd bf       	out	0x3d, r28	; 61
   int num, addr;
   uint8_t valid;
   uint8_t type;
   uint8_t readpage;
   for ( num = 0; num < 96; num ++ ) {
    3a3c:	18 86       	std	Y+8, r1	; 0x08
    3a3e:	1f 82       	std	Y+7, r1	; 0x07
    3a40:	40 c0       	rjmp	.+128    	; 0x3ac2 <scanVectorFlash+0x9a>
      addr = num + 1;
    3a42:	8f 81       	ldd	r24, Y+7	; 0x07
    3a44:	98 85       	ldd	r25, Y+8	; 0x08
    3a46:	01 96       	adiw	r24, 0x01	; 1
    3a48:	9e 83       	std	Y+6, r25	; 0x06
    3a4a:	8d 83       	std	Y+5, r24	; 0x05
      valid = fsread8uint( addr, VALIDOFFSET );
    3a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a50:	6d e0       	ldi	r22, 0x0D	; 13
    3a52:	70 e0       	ldi	r23, 0x00	; 0
    3a54:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    3a58:	8c 83       	std	Y+4, r24	; 0x04
      type =  fsread8uint( addr, TYPEOFFSET );
    3a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5e:	6c e0       	ldi	r22, 0x0C	; 12
    3a60:	70 e0       	ldi	r23, 0x00	; 0
    3a62:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    3a66:	8b 83       	std	Y+3, r24	; 0x03
      if (( valid == 1 ) && ( type == FILENODE )) {
    3a68:	8c 81       	ldd	r24, Y+4	; 0x04
    3a6a:	81 30       	cpi	r24, 0x01	; 1
    3a6c:	29 f5       	brne	.+74     	; 0x3ab8 <scanVectorFlash+0x90>
    3a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a70:	82 30       	cpi	r24, 0x02	; 2
    3a72:	11 f5       	brne	.+68     	; 0x3ab8 <scanVectorFlash+0x90>
         char i;
         for ( i = 0; i < 8; i ++ ) {
    3a74:	19 82       	std	Y+1, r1	; 0x01
    3a76:	1d c0       	rjmp	.+58     	; 0x3ab2 <scanVectorFlash+0x8a>
            readpage = fsread8uint( addr, FILE_ADDRPAGEOFFSET + i );
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
    3a7a:	99 27       	eor	r25, r25
    3a7c:	87 fd       	sbrc	r24, 7
    3a7e:	90 95       	com	r25
    3a80:	0e 96       	adiw	r24, 0x0e	; 14
    3a82:	2d 81       	ldd	r18, Y+5	; 0x05
    3a84:	3e 81       	ldd	r19, Y+6	; 0x06
    3a86:	bc 01       	movw	r22, r24
    3a88:	c9 01       	movw	r24, r18
    3a8a:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    3a8e:	8a 83       	std	Y+2, r24	; 0x02
            if ( readpage > 0 ) {
    3a90:	8a 81       	ldd	r24, Y+2	; 0x02
    3a92:	88 23       	and	r24, r24
    3a94:	59 f0       	breq	.+22     	; 0x3aac <scanVectorFlash+0x84>
               setbit( vectorflash, readpage - 1, 1 );
    3a96:	8a 81       	ldd	r24, Y+2	; 0x02
    3a98:	99 27       	eor	r25, r25
    3a9a:	01 97       	sbiw	r24, 0x01	; 1
    3a9c:	20 e8       	ldi	r18, 0x80	; 128
    3a9e:	31 e0       	ldi	r19, 0x01	; 1
    3aa0:	41 e0       	ldi	r20, 0x01	; 1
    3aa2:	50 e0       	ldi	r21, 0x00	; 0
    3aa4:	bc 01       	movw	r22, r24
    3aa6:	c9 01       	movw	r24, r18
    3aa8:	0e 94 43 1c 	call	0x3886	; 0x3886 <setbit>
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	8f 5f       	subi	r24, 0xFF	; 255
    3ab0:	89 83       	std	Y+1, r24	; 0x01
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	88 30       	cpi	r24, 0x08	; 8
    3ab6:	04 f3       	brlt	.-64     	; 0x3a78 <scanVectorFlash+0x50>
    3ab8:	8f 81       	ldd	r24, Y+7	; 0x07
    3aba:	98 85       	ldd	r25, Y+8	; 0x08
    3abc:	01 96       	adiw	r24, 0x01	; 1
    3abe:	98 87       	std	Y+8, r25	; 0x08
    3ac0:	8f 83       	std	Y+7, r24	; 0x07
    3ac2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ac4:	98 85       	ldd	r25, Y+8	; 0x08
    3ac6:	80 36       	cpi	r24, 0x60	; 96
    3ac8:	91 05       	cpc	r25, r1
    3aca:	0c f4       	brge	.+2      	; 0x3ace <scanVectorFlash+0xa6>
    3acc:	ba cf       	rjmp	.-140    	; 0x3a42 <scanVectorFlash+0x1a>
    3ace:	28 96       	adiw	r28, 0x08	; 8
    3ad0:	0f b6       	in	r0, 0x3f	; 63
    3ad2:	f8 94       	cli
    3ad4:	de bf       	out	0x3e, r29	; 62
    3ad6:	0f be       	out	0x3f, r0	; 63
    3ad8:	cd bf       	out	0x3d, r28	; 61
    3ada:	df 91       	pop	r29
    3adc:	cf 91       	pop	r28
    3ade:	08 95       	ret

00003ae0 <releaseFlashPage>:
            } 
         }
      }
   }
}

//-------------------------------------------------------------------------
void releaseFlashPage( int num ) {
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
    3ae8:	22 97       	sbiw	r28, 0x02	; 2
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	de bf       	out	0x3e, r29	; 62
    3af0:	0f be       	out	0x3f, r0	; 63
    3af2:	cd bf       	out	0x3d, r28	; 61
    3af4:	9a 83       	std	Y+2, r25	; 0x02
    3af6:	89 83       	std	Y+1, r24	; 0x01
   setbit( vectorflash, num - 1, 0 );
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	9a 81       	ldd	r25, Y+2	; 0x02
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	20 e8       	ldi	r18, 0x80	; 128
    3b00:	31 e0       	ldi	r19, 0x01	; 1
    3b02:	40 e0       	ldi	r20, 0x00	; 0
    3b04:	50 e0       	ldi	r21, 0x00	; 0
    3b06:	bc 01       	movw	r22, r24
    3b08:	c9 01       	movw	r24, r18
    3b0a:	0e 94 43 1c 	call	0x3886	; 0x3886 <setbit>
    3b0e:	22 96       	adiw	r28, 0x02	; 2
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	de bf       	out	0x3e, r29	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	cd bf       	out	0x3d, r28	; 61
    3b1a:	df 91       	pop	r29
    3b1c:	cf 91       	pop	r28
    3b1e:	08 95       	ret

00003b20 <countVectorFlash>:
}

//-------------------------------------------------------------------------
int countVectorFlash() {
    3b20:	cf 93       	push	r28
    3b22:	df 93       	push	r29
    3b24:	cd b7       	in	r28, 0x3d	; 61
    3b26:	de b7       	in	r29, 0x3e	; 62
    3b28:	24 97       	sbiw	r28, 0x04	; 4
    3b2a:	0f b6       	in	r0, 0x3f	; 63
    3b2c:	f8 94       	cli
    3b2e:	de bf       	out	0x3e, r29	; 62
    3b30:	0f be       	out	0x3f, r0	; 63
    3b32:	cd bf       	out	0x3d, r28	; 61
   int count, num;
   count = 0;
    3b34:	1c 82       	std	Y+4, r1	; 0x04
    3b36:	1b 82       	std	Y+3, r1	; 0x03
   for ( num = 0; num < 256; num ++ ) {
    3b38:	1a 82       	std	Y+2, r1	; 0x02
    3b3a:	19 82       	std	Y+1, r1	; 0x01
    3b3c:	15 c0       	rjmp	.+42     	; 0x3b68 <countVectorFlash+0x48>
      if ( getbit( vectorflash, num ) == 1 ) {
    3b3e:	89 81       	ldd	r24, Y+1	; 0x01
    3b40:	9a 81       	ldd	r25, Y+2	; 0x02
    3b42:	20 e8       	ldi	r18, 0x80	; 128
    3b44:	31 e0       	ldi	r19, 0x01	; 1
    3b46:	bc 01       	movw	r22, r24
    3b48:	c9 01       	movw	r24, r18
    3b4a:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <getbit>
    3b4e:	81 30       	cpi	r24, 0x01	; 1
    3b50:	91 05       	cpc	r25, r1
    3b52:	29 f4       	brne	.+10     	; 0x3b5e <countVectorFlash+0x3e>
         count ++;
    3b54:	8b 81       	ldd	r24, Y+3	; 0x03
    3b56:	9c 81       	ldd	r25, Y+4	; 0x04
    3b58:	01 96       	adiw	r24, 0x01	; 1
    3b5a:	9c 83       	std	Y+4, r25	; 0x04
    3b5c:	8b 83       	std	Y+3, r24	; 0x03
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
    3b60:	9a 81       	ldd	r25, Y+2	; 0x02
    3b62:	01 96       	adiw	r24, 0x01	; 1
    3b64:	9a 83       	std	Y+2, r25	; 0x02
    3b66:	89 83       	std	Y+1, r24	; 0x01
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
    3b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6c:	8f 3f       	cpi	r24, 0xFF	; 255
    3b6e:	91 05       	cpc	r25, r1
    3b70:	31 f3       	breq	.-52     	; 0x3b3e <countVectorFlash+0x1e>
    3b72:	2c f3       	brlt	.-54     	; 0x3b3e <countVectorFlash+0x1e>
      } 
   }
   return 256-count;
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	31 e0       	ldi	r19, 0x01	; 1
    3b78:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b7c:	a9 01       	movw	r20, r18
    3b7e:	48 1b       	sub	r20, r24
    3b80:	59 0b       	sbc	r21, r25
    3b82:	ca 01       	movw	r24, r20
    3b84:	24 96       	adiw	r28, 0x04	; 4
    3b86:	0f b6       	in	r0, 0x3f	; 63
    3b88:	f8 94       	cli
    3b8a:	de bf       	out	0x3e, r29	; 62
    3b8c:	0f be       	out	0x3f, r0	; 63
    3b8e:	cd bf       	out	0x3d, r28	; 61
    3b90:	df 91       	pop	r29
    3b92:	cf 91       	pop	r28
    3b94:	08 95       	ret

00003b96 <printVectorFlash>:
}

//-------------------------------------------------------------------------
void printVectorFlash() {
    3b96:	cf 93       	push	r28
    3b98:	df 93       	push	r29
    3b9a:	cd b7       	in	r28, 0x3d	; 61
    3b9c:	de b7       	in	r29, 0x3e	; 62
    3b9e:	c2 50       	subi	r28, 0x02	; 2
    3ba0:	d2 40       	sbci	r29, 0x02	; 2
    3ba2:	0f b6       	in	r0, 0x3f	; 63
    3ba4:	f8 94       	cli
    3ba6:	de bf       	out	0x3e, r29	; 62
    3ba8:	0f be       	out	0x3f, r0	; 63
    3baa:	cd bf       	out	0x3d, r28	; 61
   int data[ 256 ];
   int i;
   for ( i = 0; i < 256; i ++ ) {
    3bac:	1a 82       	std	Y+2, r1	; 0x02
    3bae:	19 82       	std	Y+1, r1	; 0x01
    3bb0:	2c c0       	rjmp	.+88     	; 0x3c0a <printVectorFlash+0x74>
      if ( getbit( vectorflash, i ) == 0 ) {
    3bb2:	89 81       	ldd	r24, Y+1	; 0x01
    3bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb6:	20 e8       	ldi	r18, 0x80	; 128
    3bb8:	31 e0       	ldi	r19, 0x01	; 1
    3bba:	bc 01       	movw	r22, r24
    3bbc:	c9 01       	movw	r24, r18
    3bbe:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <getbit>
    3bc2:	00 97       	sbiw	r24, 0x00	; 0
    3bc4:	71 f4       	brne	.+28     	; 0x3be2 <printVectorFlash+0x4c>
         data[ i ] = 0;
    3bc6:	89 81       	ldd	r24, Y+1	; 0x01
    3bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bca:	9c 01       	movw	r18, r24
    3bcc:	22 0f       	add	r18, r18
    3bce:	33 1f       	adc	r19, r19
    3bd0:	ce 01       	movw	r24, r28
    3bd2:	01 96       	adiw	r24, 0x01	; 1
    3bd4:	82 0f       	add	r24, r18
    3bd6:	93 1f       	adc	r25, r19
    3bd8:	fc 01       	movw	r30, r24
    3bda:	32 96       	adiw	r30, 0x02	; 2
    3bdc:	11 82       	std	Z+1, r1	; 0x01
    3bde:	10 82       	st	Z, r1
    3be0:	0f c0       	rjmp	.+30     	; 0x3c00 <printVectorFlash+0x6a>
      } else {
         data[ i ] = 1;
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
    3be4:	9a 81       	ldd	r25, Y+2	; 0x02
    3be6:	9c 01       	movw	r18, r24
    3be8:	22 0f       	add	r18, r18
    3bea:	33 1f       	adc	r19, r19
    3bec:	ce 01       	movw	r24, r28
    3bee:	01 96       	adiw	r24, 0x01	; 1
    3bf0:	82 0f       	add	r24, r18
    3bf2:	93 1f       	adc	r25, r19
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	32 96       	adiw	r30, 0x02	; 2
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	91 83       	std	Z+1, r25	; 0x01
    3bfe:	80 83       	st	Z, r24
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	9a 81       	ldd	r25, Y+2	; 0x02
    3c04:	01 96       	adiw	r24, 0x01	; 1
    3c06:	9a 83       	std	Y+2, r25	; 0x02
    3c08:	89 83       	std	Y+1, r24	; 0x01
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c10:	91 05       	cpc	r25, r1
    3c12:	79 f2       	breq	.-98     	; 0x3bb2 <printVectorFlash+0x1c>
    3c14:	74 f2       	brlt	.-100    	; 0x3bb2 <printVectorFlash+0x1c>
    3c16:	ce 5f       	subi	r28, 0xFE	; 254
    3c18:	dd 4f       	sbci	r29, 0xFD	; 253
    3c1a:	0f b6       	in	r0, 0x3f	; 63
    3c1c:	f8 94       	cli
    3c1e:	de bf       	out	0x3e, r29	; 62
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	cd bf       	out	0x3d, r28	; 61
    3c24:	df 91       	pop	r29
    3c26:	cf 91       	pop	r28
    3c28:	08 95       	ret

00003c2a <writeVectorNodeToExternalStorage>:
char vectornode[ 12 ];


void writeVectorNodeToExternalStorage()
{
    3c2a:	cf 93       	push	r28
    3c2c:	df 93       	push	r29
    3c2e:	cd b7       	in	r28, 0x3d	; 61
    3c30:	de b7       	in	r29, 0x3e	; 62
    
    genericreadBytes(EEPROMVECTORSTART,12, vectornode);
    3c32:	87 e4       	ldi	r24, 0x47	; 71
    3c34:	94 e0       	ldi	r25, 0x04	; 4
    3c36:	ac 01       	movw	r20, r24
    3c38:	6c e0       	ldi	r22, 0x0C	; 12
    3c3a:	70 e0       	ldi	r23, 0x00	; 0
    3c3c:	82 e4       	ldi	r24, 0x42	; 66
    3c3e:	9c e0       	ldi	r25, 0x0C	; 12
    3c40:	0e 94 88 6e 	call	0xdd10	; 0xdd10 <genericreadBytes>
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	08 95       	ret

00003c4a <readVectorNodeFromExternalStorage>:
}


void readVectorNodeFromExternalStorage()
{
    3c4a:	cf 93       	push	r28
    3c4c:	df 93       	push	r29
    3c4e:	cd b7       	in	r28, 0x3d	; 61
    3c50:	de b7       	in	r29, 0x3e	; 62
    genericwriteBytes(EEPROMVECTORSTART, 12, vectornode);
    3c52:	87 e4       	ldi	r24, 0x47	; 71
    3c54:	94 e0       	ldi	r25, 0x04	; 4
    3c56:	ac 01       	movw	r20, r24
    3c58:	6c e0       	ldi	r22, 0x0C	; 12
    3c5a:	70 e0       	ldi	r23, 0x00	; 0
    3c5c:	82 e4       	ldi	r24, 0x42	; 66
    3c5e:	9c e0       	ldi	r25, 0x0C	; 12
    3c60:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <genericwriteBytes>
    3c64:	df 91       	pop	r29
    3c66:	cf 91       	pop	r28
    3c68:	08 95       	ret

00003c6a <getbit>:
  
}


int getbit( char *set, int number ) {
    3c6a:	cf 93       	push	r28
    3c6c:	df 93       	push	r29
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	26 97       	sbiw	r28, 0x06	; 6
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	f8 94       	cli
    3c78:	de bf       	out	0x3e, r29	; 62
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	cd bf       	out	0x3d, r28	; 61
    3c7e:	9a 83       	std	Y+2, r25	; 0x02
    3c80:	89 83       	std	Y+1, r24	; 0x01
    3c82:	7c 83       	std	Y+4, r23	; 0x04
    3c84:	6b 83       	std	Y+3, r22	; 0x03
   set += number / 8;
    3c86:	8b 81       	ldd	r24, Y+3	; 0x03
    3c88:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8a:	9e 83       	std	Y+6, r25	; 0x06
    3c8c:	8d 83       	std	Y+5, r24	; 0x05
    3c8e:	2d 81       	ldd	r18, Y+5	; 0x05
    3c90:	3e 81       	ldd	r19, Y+6	; 0x06
    3c92:	33 23       	and	r19, r19
    3c94:	2c f4       	brge	.+10     	; 0x3ca0 <getbit+0x36>
    3c96:	8d 81       	ldd	r24, Y+5	; 0x05
    3c98:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9a:	07 96       	adiw	r24, 0x07	; 7
    3c9c:	9e 83       	std	Y+6, r25	; 0x06
    3c9e:	8d 83       	std	Y+5, r24	; 0x05
    3ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca4:	95 95       	asr	r25
    3ca6:	87 95       	ror	r24
    3ca8:	95 95       	asr	r25
    3caa:	87 95       	ror	r24
    3cac:	95 95       	asr	r25
    3cae:	87 95       	ror	r24
    3cb0:	9c 01       	movw	r18, r24
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
    3cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb6:	82 0f       	add	r24, r18
    3cb8:	93 1f       	adc	r25, r19
    3cba:	9a 83       	std	Y+2, r25	; 0x02
    3cbc:	89 83       	std	Y+1, r24	; 0x01
   return ( *set& ( 1 << ( number % 8 ))) != 0; /* 0 or 1       */
    3cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc0:	fa 81       	ldd	r31, Y+2	; 0x02
    3cc2:	80 81       	ld	r24, Z
    3cc4:	e8 2f       	mov	r30, r24
    3cc6:	ff 27       	eor	r31, r31
    3cc8:	e7 fd       	sbrc	r30, 7
    3cca:	f0 95       	com	r31
    3ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cce:	9c 81       	ldd	r25, Y+4	; 0x04
    3cd0:	28 e0       	ldi	r18, 0x08	; 8
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	b9 01       	movw	r22, r18
    3cd6:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
    3cda:	9f 01       	movw	r18, r30
    3cdc:	02 c0       	rjmp	.+4      	; 0x3ce2 <getbit+0x78>
    3cde:	35 95       	asr	r19
    3ce0:	27 95       	ror	r18
    3ce2:	8a 95       	dec	r24
    3ce4:	e2 f7       	brpl	.-8      	; 0x3cde <getbit+0x74>
    3ce6:	c9 01       	movw	r24, r18
    3ce8:	81 70       	andi	r24, 0x01	; 1
    3cea:	90 70       	andi	r25, 0x00	; 0
    3cec:	26 96       	adiw	r28, 0x06	; 6
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	f8 94       	cli
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	cd bf       	out	0x3d, r28	; 61
    3cf8:	df 91       	pop	r29
    3cfa:	cf 91       	pop	r28
    3cfc:	08 95       	ret

00003cfe <setbit>:
}

//-------------------------------------------------------------------------
void setbit( char *set, int number, int value ) {
    3cfe:	cf 93       	push	r28
    3d00:	df 93       	push	r29
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
    3d06:	28 97       	sbiw	r28, 0x08	; 8
    3d08:	0f b6       	in	r0, 0x3f	; 63
    3d0a:	f8 94       	cli
    3d0c:	de bf       	out	0x3e, r29	; 62
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	cd bf       	out	0x3d, r28	; 61
    3d12:	9a 83       	std	Y+2, r25	; 0x02
    3d14:	89 83       	std	Y+1, r24	; 0x01
    3d16:	7c 83       	std	Y+4, r23	; 0x04
    3d18:	6b 83       	std	Y+3, r22	; 0x03
    3d1a:	5e 83       	std	Y+6, r21	; 0x06
    3d1c:	4d 83       	std	Y+5, r20	; 0x05
   set += number / 8;
    3d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d20:	9c 81       	ldd	r25, Y+4	; 0x04
    3d22:	98 87       	std	Y+8, r25	; 0x08
    3d24:	8f 83       	std	Y+7, r24	; 0x07
    3d26:	8f 81       	ldd	r24, Y+7	; 0x07
    3d28:	98 85       	ldd	r25, Y+8	; 0x08
    3d2a:	99 23       	and	r25, r25
    3d2c:	2c f4       	brge	.+10     	; 0x3d38 <setbit+0x3a>
    3d2e:	8f 81       	ldd	r24, Y+7	; 0x07
    3d30:	98 85       	ldd	r25, Y+8	; 0x08
    3d32:	07 96       	adiw	r24, 0x07	; 7
    3d34:	98 87       	std	Y+8, r25	; 0x08
    3d36:	8f 83       	std	Y+7, r24	; 0x07
    3d38:	8f 81       	ldd	r24, Y+7	; 0x07
    3d3a:	98 85       	ldd	r25, Y+8	; 0x08
    3d3c:	95 95       	asr	r25
    3d3e:	87 95       	ror	r24
    3d40:	95 95       	asr	r25
    3d42:	87 95       	ror	r24
    3d44:	95 95       	asr	r25
    3d46:	87 95       	ror	r24
    3d48:	9c 01       	movw	r18, r24
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
    3d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4e:	82 0f       	add	r24, r18
    3d50:	93 1f       	adc	r25, r19
    3d52:	9a 83       	std	Y+2, r25	; 0x02
    3d54:	89 83       	std	Y+1, r24	; 0x01
   if ( value ) {
    3d56:	8d 81       	ldd	r24, Y+5	; 0x05
    3d58:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5a:	00 97       	sbiw	r24, 0x00	; 0
    3d5c:	c1 f0       	breq	.+48     	; 0x3d8e <setbit+0x90>
      *set |= 1 << ( number % 8 );
    3d5e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d60:	fa 81       	ldd	r31, Y+2	; 0x02
    3d62:	40 81       	ld	r20, Z
    3d64:	8b 81       	ldd	r24, Y+3	; 0x03
    3d66:	9c 81       	ldd	r25, Y+4	; 0x04
    3d68:	28 e0       	ldi	r18, 0x08	; 8
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	b9 01       	movw	r22, r18
    3d6e:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
    3d72:	9c 01       	movw	r18, r24
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	02 2e       	mov	r0, r18
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <setbit+0x82>
    3d7c:	88 0f       	add	r24, r24
    3d7e:	99 1f       	adc	r25, r25
    3d80:	0a 94       	dec	r0
    3d82:	e2 f7       	brpl	.-8      	; 0x3d7c <setbit+0x7e>
    3d84:	84 2b       	or	r24, r20
    3d86:	e9 81       	ldd	r30, Y+1	; 0x01
    3d88:	fa 81       	ldd	r31, Y+2	; 0x02
    3d8a:	80 83       	st	Z, r24
    3d8c:	17 c0       	rjmp	.+46     	; 0x3dbc <setbit+0xbe>
   }  /* set bit      */
   else {
       *set &=  ~ ( 1 << ( number % 8 ));
    3d8e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d90:	fa 81       	ldd	r31, Y+2	; 0x02
    3d92:	40 81       	ld	r20, Z
    3d94:	8b 81       	ldd	r24, Y+3	; 0x03
    3d96:	9c 81       	ldd	r25, Y+4	; 0x04
    3d98:	28 e0       	ldi	r18, 0x08	; 8
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	b9 01       	movw	r22, r18
    3d9e:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
    3da2:	9c 01       	movw	r18, r24
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	02 c0       	rjmp	.+4      	; 0x3dae <setbit+0xb0>
    3daa:	88 0f       	add	r24, r24
    3dac:	99 1f       	adc	r25, r25
    3dae:	2a 95       	dec	r18
    3db0:	e2 f7       	brpl	.-8      	; 0x3daa <setbit+0xac>
    3db2:	80 95       	com	r24
    3db4:	84 23       	and	r24, r20
    3db6:	e9 81       	ldd	r30, Y+1	; 0x01
    3db8:	fa 81       	ldd	r31, Y+2	; 0x02
    3dba:	80 83       	st	Z, r24
    3dbc:	28 96       	adiw	r28, 0x08	; 8
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	f8 94       	cli
    3dc2:	de bf       	out	0x3e, r29	; 62
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	cd bf       	out	0x3d, r28	; 61
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28
    3dcc:	08 95       	ret

00003dce <initVectorNode>:
   }  /* clear bit    */
}

//-------------------------------------------------------------------------
void initVectorNode() {
    3dce:	cf 93       	push	r28
    3dd0:	df 93       	push	r29
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	22 97       	sbiw	r28, 0x02	; 2
    3dd8:	0f b6       	in	r0, 0x3f	; 63
    3dda:	f8 94       	cli
    3ddc:	de bf       	out	0x3e, r29	; 62
    3dde:	0f be       	out	0x3f, r0	; 63
    3de0:	cd bf       	out	0x3d, r28	; 61
   int i;
   for ( i = 0; i < 12; i ++ ) {
    3de2:	1a 82       	std	Y+2, r1	; 0x02
    3de4:	19 82       	std	Y+1, r1	; 0x01
    3de6:	0b c0       	rjmp	.+22     	; 0x3dfe <initVectorNode+0x30>
      vectornode[ i ] = 0;
    3de8:	89 81       	ldd	r24, Y+1	; 0x01
    3dea:	9a 81       	ldd	r25, Y+2	; 0x02
    3dec:	fc 01       	movw	r30, r24
    3dee:	e9 5b       	subi	r30, 0xB9	; 185
    3df0:	fb 4f       	sbci	r31, 0xFB	; 251
    3df2:	10 82       	st	Z, r1
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	9a 81       	ldd	r25, Y+2	; 0x02
    3df8:	01 96       	adiw	r24, 0x01	; 1
    3dfa:	9a 83       	std	Y+2, r25	; 0x02
    3dfc:	89 83       	std	Y+1, r24	; 0x01
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	9a 81       	ldd	r25, Y+2	; 0x02
    3e02:	8c 30       	cpi	r24, 0x0C	; 12
    3e04:	91 05       	cpc	r25, r1
    3e06:	84 f3       	brlt	.-32     	; 0x3de8 <initVectorNode+0x1a>
    3e08:	22 96       	adiw	r28, 0x02	; 2
    3e0a:	0f b6       	in	r0, 0x3f	; 63
    3e0c:	f8 94       	cli
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	0f be       	out	0x3f, r0	; 63
    3e12:	cd bf       	out	0x3d, r28	; 61
    3e14:	df 91       	pop	r29
    3e16:	cf 91       	pop	r28
    3e18:	08 95       	ret

00003e1a <getVectorNode>:
   } 
}

//-------------------------------------------------------------------------
int getVectorNode() {
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	cd b7       	in	r28, 0x3d	; 61
    3e20:	de b7       	in	r29, 0x3e	; 62
    3e22:	24 97       	sbiw	r28, 0x04	; 4
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	f8 94       	cli
    3e28:	de bf       	out	0x3e, r29	; 62
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	cd bf       	out	0x3d, r28	; 61
   int num;
   for ( num = 0; num < 96; num ++ ) {
    3e2e:	1a 82       	std	Y+2, r1	; 0x02
    3e30:	19 82       	std	Y+1, r1	; 0x01
    3e32:	21 c0       	rjmp	.+66     	; 0x3e76 <getVectorNode+0x5c>
      if ( getbit( vectornode, num ) == 0 ) {
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	9a 81       	ldd	r25, Y+2	; 0x02
    3e38:	27 e4       	ldi	r18, 0x47	; 71
    3e3a:	34 e0       	ldi	r19, 0x04	; 4
    3e3c:	bc 01       	movw	r22, r24
    3e3e:	c9 01       	movw	r24, r18
    3e40:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <getbit>
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	91 f4       	brne	.+36     	; 0x3e6c <getVectorNode+0x52>
         setbit( vectornode, num, 1 );
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4c:	27 e4       	ldi	r18, 0x47	; 71
    3e4e:	34 e0       	ldi	r19, 0x04	; 4
    3e50:	41 e0       	ldi	r20, 0x01	; 1
    3e52:	50 e0       	ldi	r21, 0x00	; 0
    3e54:	bc 01       	movw	r22, r24
    3e56:	c9 01       	movw	r24, r18
    3e58:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <setbit>
         return num + 1;
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e60:	9c 01       	movw	r18, r24
    3e62:	2f 5f       	subi	r18, 0xFF	; 255
    3e64:	3f 4f       	sbci	r19, 0xFF	; 255
    3e66:	3c 83       	std	Y+4, r19	; 0x04
    3e68:	2b 83       	std	Y+3, r18	; 0x03
    3e6a:	0e c0       	rjmp	.+28     	; 0x3e88 <getVectorNode+0x6e>
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e70:	01 96       	adiw	r24, 0x01	; 1
    3e72:	9a 83       	std	Y+2, r25	; 0x02
    3e74:	89 83       	std	Y+1, r24	; 0x01
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7a:	80 36       	cpi	r24, 0x60	; 96
    3e7c:	91 05       	cpc	r25, r1
    3e7e:	d4 f2       	brlt	.-76     	; 0x3e34 <getVectorNode+0x1a>
      }
   }
   return  - 1;
    3e80:	8f ef       	ldi	r24, 0xFF	; 255
    3e82:	9f ef       	ldi	r25, 0xFF	; 255
    3e84:	9c 83       	std	Y+4, r25	; 0x04
    3e86:	8b 83       	std	Y+3, r24	; 0x03
    3e88:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8c:	24 96       	adiw	r28, 0x04	; 4
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
    3e98:	df 91       	pop	r29
    3e9a:	cf 91       	pop	r28
    3e9c:	08 95       	ret

00003e9e <scanVectorNode>:
}

//-------------------------------------------------------------------------
void scanVectorNode() {
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	25 97       	sbiw	r28, 0x05	; 5
    3ea8:	0f b6       	in	r0, 0x3f	; 63
    3eaa:	f8 94       	cli
    3eac:	de bf       	out	0x3e, r29	; 62
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	cd bf       	out	0x3d, r28	; 61
   int num, addr;
   uint8_t valid;
   for ( num = 0; num < 96; num ++ ) {
    3eb2:	1d 82       	std	Y+5, r1	; 0x05
    3eb4:	1c 82       	std	Y+4, r1	; 0x04
    3eb6:	29 c0       	rjmp	.+82     	; 0x3f0a <scanVectorNode+0x6c>
      addr = num + 1;
    3eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    3eba:	9d 81       	ldd	r25, Y+5	; 0x05
    3ebc:	01 96       	adiw	r24, 0x01	; 1
    3ebe:	9b 83       	std	Y+3, r25	; 0x03
    3ec0:	8a 83       	std	Y+2, r24	; 0x02
      valid = fsread8uint( addr, VALIDOFFSET );
    3ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec6:	6d e0       	ldi	r22, 0x0D	; 13
    3ec8:	70 e0       	ldi	r23, 0x00	; 0
    3eca:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    3ece:	89 83       	std	Y+1, r24	; 0x01
      if ( valid == 0 ) {
    3ed0:	89 81       	ldd	r24, Y+1	; 0x01
    3ed2:	88 23       	and	r24, r24
    3ed4:	59 f4       	brne	.+22     	; 0x3eec <scanVectorNode+0x4e>
         setbit( vectornode, num, 0 );
    3ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    3eda:	27 e4       	ldi	r18, 0x47	; 71
    3edc:	34 e0       	ldi	r19, 0x04	; 4
    3ede:	40 e0       	ldi	r20, 0x00	; 0
    3ee0:	50 e0       	ldi	r21, 0x00	; 0
    3ee2:	bc 01       	movw	r22, r24
    3ee4:	c9 01       	movw	r24, r18
    3ee6:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <setbit>
    3eea:	0a c0       	rjmp	.+20     	; 0x3f00 <scanVectorNode+0x62>
      } else {
         setbit( vectornode, num, 1 );
    3eec:	8c 81       	ldd	r24, Y+4	; 0x04
    3eee:	9d 81       	ldd	r25, Y+5	; 0x05
    3ef0:	27 e4       	ldi	r18, 0x47	; 71
    3ef2:	34 e0       	ldi	r19, 0x04	; 4
    3ef4:	41 e0       	ldi	r20, 0x01	; 1
    3ef6:	50 e0       	ldi	r21, 0x00	; 0
    3ef8:	bc 01       	movw	r22, r24
    3efa:	c9 01       	movw	r24, r18
    3efc:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <setbit>
    3f00:	8c 81       	ldd	r24, Y+4	; 0x04
    3f02:	9d 81       	ldd	r25, Y+5	; 0x05
    3f04:	01 96       	adiw	r24, 0x01	; 1
    3f06:	9d 83       	std	Y+5, r25	; 0x05
    3f08:	8c 83       	std	Y+4, r24	; 0x04
    3f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f0c:	9d 81       	ldd	r25, Y+5	; 0x05
    3f0e:	80 36       	cpi	r24, 0x60	; 96
    3f10:	91 05       	cpc	r25, r1
    3f12:	94 f2       	brlt	.-92     	; 0x3eb8 <scanVectorNode+0x1a>
    3f14:	25 96       	adiw	r28, 0x05	; 5
    3f16:	0f b6       	in	r0, 0x3f	; 63
    3f18:	f8 94       	cli
    3f1a:	de bf       	out	0x3e, r29	; 62
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	cd bf       	out	0x3d, r28	; 61
    3f20:	df 91       	pop	r29
    3f22:	cf 91       	pop	r28
    3f24:	08 95       	ret

00003f26 <releaseVectorNode>:
      } 
   }
}

//-------------------------------------------------------------------------
void releaseVectorNode( int num ) {
    3f26:	cf 93       	push	r28
    3f28:	df 93       	push	r29
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
    3f2e:	22 97       	sbiw	r28, 0x02	; 2
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	9a 83       	std	Y+2, r25	; 0x02
    3f3c:	89 83       	std	Y+1, r24	; 0x01
   setbit( vectornode, num - 1, 0 );
    3f3e:	89 81       	ldd	r24, Y+1	; 0x01
    3f40:	9a 81       	ldd	r25, Y+2	; 0x02
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	27 e4       	ldi	r18, 0x47	; 71
    3f46:	34 e0       	ldi	r19, 0x04	; 4
    3f48:	40 e0       	ldi	r20, 0x00	; 0
    3f4a:	50 e0       	ldi	r21, 0x00	; 0
    3f4c:	bc 01       	movw	r22, r24
    3f4e:	c9 01       	movw	r24, r18
    3f50:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <setbit>
    3f54:	22 96       	adiw	r28, 0x02	; 2
    3f56:	0f b6       	in	r0, 0x3f	; 63
    3f58:	f8 94       	cli
    3f5a:	de bf       	out	0x3e, r29	; 62
    3f5c:	0f be       	out	0x3f, r0	; 63
    3f5e:	cd bf       	out	0x3d, r28	; 61
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	08 95       	ret

00003f66 <countVectorNode>:
}

//-------------------------------------------------------------------------
int countVectorNode() {
    3f66:	cf 93       	push	r28
    3f68:	df 93       	push	r29
    3f6a:	cd b7       	in	r28, 0x3d	; 61
    3f6c:	de b7       	in	r29, 0x3e	; 62
    3f6e:	24 97       	sbiw	r28, 0x04	; 4
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	f8 94       	cli
    3f74:	de bf       	out	0x3e, r29	; 62
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	cd bf       	out	0x3d, r28	; 61
   int num, count;
   count = 0;
    3f7a:	1a 82       	std	Y+2, r1	; 0x02
    3f7c:	19 82       	std	Y+1, r1	; 0x01
   for ( num = 0; num < 96; num ++ ) {
    3f7e:	1c 82       	std	Y+4, r1	; 0x04
    3f80:	1b 82       	std	Y+3, r1	; 0x03
    3f82:	15 c0       	rjmp	.+42     	; 0x3fae <countVectorNode+0x48>
      if ( getbit( vectornode, num ) == 1 ) {
    3f84:	8b 81       	ldd	r24, Y+3	; 0x03
    3f86:	9c 81       	ldd	r25, Y+4	; 0x04
    3f88:	27 e4       	ldi	r18, 0x47	; 71
    3f8a:	34 e0       	ldi	r19, 0x04	; 4
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	c9 01       	movw	r24, r18
    3f90:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <getbit>
    3f94:	81 30       	cpi	r24, 0x01	; 1
    3f96:	91 05       	cpc	r25, r1
    3f98:	29 f4       	brne	.+10     	; 0x3fa4 <countVectorNode+0x3e>
         count ++;
    3f9a:	89 81       	ldd	r24, Y+1	; 0x01
    3f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9e:	01 96       	adiw	r24, 0x01	; 1
    3fa0:	9a 83       	std	Y+2, r25	; 0x02
    3fa2:	89 83       	std	Y+1, r24	; 0x01
    3fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa8:	01 96       	adiw	r24, 0x01	; 1
    3faa:	9c 83       	std	Y+4, r25	; 0x04
    3fac:	8b 83       	std	Y+3, r24	; 0x03
    3fae:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb2:	80 36       	cpi	r24, 0x60	; 96
    3fb4:	91 05       	cpc	r25, r1
    3fb6:	34 f3       	brlt	.-52     	; 0x3f84 <countVectorNode+0x1e>
      } 
   }
   return 96-count;
    3fb8:	20 e6       	ldi	r18, 0x60	; 96
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	89 81       	ldd	r24, Y+1	; 0x01
    3fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc0:	a9 01       	movw	r20, r18
    3fc2:	48 1b       	sub	r20, r24
    3fc4:	59 0b       	sbc	r21, r25
    3fc6:	ca 01       	movw	r24, r20
    3fc8:	24 96       	adiw	r28, 0x04	; 4
    3fca:	0f b6       	in	r0, 0x3f	; 63
    3fcc:	f8 94       	cli
    3fce:	de bf       	out	0x3e, r29	; 62
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	cd bf       	out	0x3d, r28	; 61
    3fd4:	df 91       	pop	r29
    3fd6:	cf 91       	pop	r28
    3fd8:	08 95       	ret

00003fda <initUSART>:
uint8_t dataToSend[128]; 
#endif

//No need to be called from main 
void initUSART() {
    3fda:	cf 93       	push	r28
    3fdc:	df 93       	push	r29
    3fde:	cd b7       	in	r28, 0x3d	; 61
    3fe0:	de b7       	in	r29, 0x3e	; 62
   UBRR0H = 0;
    3fe2:	e0 e9       	ldi	r30, 0x90	; 144
    3fe4:	f0 e0       	ldi	r31, 0x00	; 0
    3fe6:	10 82       	st	Z, r1
   UBRR0L = 15;
    3fe8:	e9 e2       	ldi	r30, 0x29	; 41
    3fea:	f0 e0       	ldi	r31, 0x00	; 0
    3fec:	8f e0       	ldi	r24, 0x0F	; 15
    3fee:	80 83       	st	Z, r24
   UCSR0A |= _BV( U2X0 ); // double speed
    3ff0:	ab e2       	ldi	r26, 0x2B	; 43
    3ff2:	b0 e0       	ldi	r27, 0x00	; 0
    3ff4:	eb e2       	ldi	r30, 0x2B	; 43
    3ff6:	f0 e0       	ldi	r31, 0x00	; 0
    3ff8:	80 81       	ld	r24, Z
    3ffa:	82 60       	ori	r24, 0x02	; 2
    3ffc:	8c 93       	st	X, r24
   UCSR0C |= _BV( UCSZ01 ) | _BV( UCSZ00 ); // 8 data-bits, 1 stop-bit
    3ffe:	a5 e9       	ldi	r26, 0x95	; 149
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	e5 e9       	ldi	r30, 0x95	; 149
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	80 81       	ld	r24, Z
    4008:	86 60       	ori	r24, 0x06	; 6
    400a:	8c 93       	st	X, r24
   UCSR0B |= _BV( RXCIE0 ) | _BV( RXEN0 ) | _BV( TXEN0); // Enable recieve/transmit/interrupts
    400c:	aa e2       	ldi	r26, 0x2A	; 42
    400e:	b0 e0       	ldi	r27, 0x00	; 0
    4010:	ea e2       	ldi	r30, 0x2A	; 42
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	80 81       	ld	r24, Z
    4016:	88 69       	ori	r24, 0x98	; 152
    4018:	8c 93       	st	X, r24
   cFlag = 1;
    401a:	81 e0       	ldi	r24, 0x01	; 1
    401c:	80 93 a0 01 	sts	0x01A0, r24
   //	  currentindex = 0; 
   previous = 0;
    4020:	10 92 c2 01 	sts	0x01C2, r1
   status = 0;
    4024:	10 92 c3 01 	sts	0x01C3, r1
    4028:	df 91       	pop	r29
    402a:	cf 91       	pop	r28
    402c:	08 95       	ret

0000402e <usartPrint>:
}

//-------------------------------------------------------------------------
void usartPrint( uint8_t c )
 {
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	21 97       	sbiw	r28, 0x01	; 1
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	f8 94       	cli
    403c:	de bf       	out	0x3e, r29	; 62
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	cd bf       	out	0x3d, r28	; 61
    4042:	89 83       	std	Y+1, r24	; 0x01
   if ( cFlag == 0 ) {
    4044:	80 91 a0 01 	lds	r24, 0x01A0
    4048:	88 23       	and	r24, r24
    404a:	11 f4       	brne	.+4      	; 0x4050 <usartPrint+0x22>
      initUSART();
    404c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <initUSART>
   } 
   // Loop until UDR register is empty
   while (( UCSR0A& ( 1 << UDRE0 )) == 0 )
    4050:	eb e2       	ldi	r30, 0x2B	; 43
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	80 81       	ld	r24, Z
    4056:	99 27       	eor	r25, r25
    4058:	80 72       	andi	r24, 0x20	; 32
    405a:	90 70       	andi	r25, 0x00	; 0
    405c:	00 97       	sbiw	r24, 0x00	; 0
    405e:	c1 f3       	breq	.-16     	; 0x4050 <usartPrint+0x22>
      ;
   // Transmit letter a
   UDR0 = c;
    4060:	ec e2       	ldi	r30, 0x2C	; 44
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	89 81       	ldd	r24, Y+1	; 0x01
    4066:	80 83       	st	Z, r24
    4068:	21 96       	adiw	r28, 0x01	; 1
    406a:	0f b6       	in	r0, 0x3f	; 63
    406c:	f8 94       	cli
    406e:	de bf       	out	0x3e, r29	; 62
    4070:	0f be       	out	0x3f, r0	; 63
    4072:	cd bf       	out	0x3d, r28	; 61
    4074:	df 91       	pop	r29
    4076:	cf 91       	pop	r28
    4078:	08 95       	ret

0000407a <printString>:
}

//-------------------------------------------------------------------------
void printString( char *p ) {
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
    4082:	22 97       	sbiw	r28, 0x02	; 2
    4084:	0f b6       	in	r0, 0x3f	; 63
    4086:	f8 94       	cli
    4088:	de bf       	out	0x3e, r29	; 62
    408a:	0f be       	out	0x3f, r0	; 63
    408c:	cd bf       	out	0x3d, r28	; 61
    408e:	9a 83       	std	Y+2, r25	; 0x02
    4090:	89 83       	std	Y+1, r24	; 0x01
   //usartPrint(0);
   while (( *p ) != '\0' ) {
    4092:	0a c0       	rjmp	.+20     	; 0x40a8 <printString+0x2e>
      usartPrint( *p );
    4094:	e9 81       	ldd	r30, Y+1	; 0x01
    4096:	fa 81       	ldd	r31, Y+2	; 0x02
    4098:	80 81       	ld	r24, Z
    409a:	0e 94 17 20 	call	0x402e	; 0x402e <usartPrint>
      p ++;
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	9a 81       	ldd	r25, Y+2	; 0x02
    40a2:	01 96       	adiw	r24, 0x01	; 1
    40a4:	9a 83       	std	Y+2, r25	; 0x02
    40a6:	89 83       	std	Y+1, r24	; 0x01
    40a8:	e9 81       	ldd	r30, Y+1	; 0x01
    40aa:	fa 81       	ldd	r31, Y+2	; 0x02
    40ac:	80 81       	ld	r24, Z
    40ae:	88 23       	and	r24, r24
    40b0:	89 f7       	brne	.-30     	; 0x4094 <printString+0x1a>
    40b2:	22 96       	adiw	r28, 0x02	; 2
    40b4:	0f b6       	in	r0, 0x3f	; 63
    40b6:	f8 94       	cli
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	0f be       	out	0x3f, r0	; 63
    40bc:	cd bf       	out	0x3d, r28	; 61
    40be:	df 91       	pop	r29
    40c0:	cf 91       	pop	r28
    40c2:	08 95       	ret

000040c4 <printStringN>:
   }
}

//-------------------------------------------------------------------------
void printStringN( char *p, uint8_t n ) {
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
    40c8:	cd b7       	in	r28, 0x3d	; 61
    40ca:	de b7       	in	r29, 0x3e	; 62
    40cc:	24 97       	sbiw	r28, 0x04	; 4
    40ce:	0f b6       	in	r0, 0x3f	; 63
    40d0:	f8 94       	cli
    40d2:	de bf       	out	0x3e, r29	; 62
    40d4:	0f be       	out	0x3f, r0	; 63
    40d6:	cd bf       	out	0x3d, r28	; 61
    40d8:	9b 83       	std	Y+3, r25	; 0x03
    40da:	8a 83       	std	Y+2, r24	; 0x02
    40dc:	6c 83       	std	Y+4, r22	; 0x04
   uint8_t i;
   for ( i = 0; i < n; i ++ ) {
    40de:	19 82       	std	Y+1, r1	; 0x01
    40e0:	0d c0       	rjmp	.+26     	; 0x40fc <printStringN+0x38>
      usartPrint( *p );
    40e2:	ea 81       	ldd	r30, Y+2	; 0x02
    40e4:	fb 81       	ldd	r31, Y+3	; 0x03
    40e6:	80 81       	ld	r24, Z
    40e8:	0e 94 17 20 	call	0x402e	; 0x402e <usartPrint>
      p ++;
    40ec:	8a 81       	ldd	r24, Y+2	; 0x02
    40ee:	9b 81       	ldd	r25, Y+3	; 0x03
    40f0:	01 96       	adiw	r24, 0x01	; 1
    40f2:	9b 83       	std	Y+3, r25	; 0x03
    40f4:	8a 83       	std	Y+2, r24	; 0x02
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	8f 5f       	subi	r24, 0xFF	; 255
    40fa:	89 83       	std	Y+1, r24	; 0x01
    40fc:	99 81       	ldd	r25, Y+1	; 0x01
    40fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4100:	98 17       	cp	r25, r24
    4102:	78 f3       	brcs	.-34     	; 0x40e2 <printStringN+0x1e>
    4104:	24 96       	adiw	r28, 0x04	; 4
    4106:	0f b6       	in	r0, 0x3f	; 63
    4108:	f8 94       	cli
    410a:	de bf       	out	0x3e, r29	; 62
    410c:	0f be       	out	0x3f, r0	; 63
    410e:	cd bf       	out	0x3d, r28	; 61
    4110:	df 91       	pop	r29
    4112:	cf 91       	pop	r28
    4114:	08 95       	ret

00004116 <usartPutChipHex>:
   }
}
//This function prints the value of uint8_t using '0','1',...'f'
void usartPutChipHex( uint8_t cChip ) {
    4116:	cf 93       	push	r28
    4118:	df 93       	push	r29
    411a:	cd b7       	in	r28, 0x3d	; 61
    411c:	de b7       	in	r29, 0x3e	; 62
    411e:	21 97       	sbiw	r28, 0x01	; 1
    4120:	0f b6       	in	r0, 0x3f	; 63
    4122:	f8 94       	cli
    4124:	de bf       	out	0x3e, r29	; 62
    4126:	0f be       	out	0x3f, r0	; 63
    4128:	cd bf       	out	0x3d, r28	; 61
    412a:	89 83       	std	Y+1, r24	; 0x01
   if ( cChip > 9 ) {
    412c:	89 81       	ldd	r24, Y+1	; 0x01
    412e:	8a 30       	cpi	r24, 0x0A	; 10
    4130:	28 f0       	brcs	.+10     	; 0x413c <usartPutChipHex+0x26>
      usartPrint( 'a' + cChip - 10 );
    4132:	89 81       	ldd	r24, Y+1	; 0x01
    4134:	89 5a       	subi	r24, 0xA9	; 169
    4136:	0e 94 17 20 	call	0x402e	; 0x402e <usartPrint>
    413a:	04 c0       	rjmp	.+8      	; 0x4144 <usartPutChipHex+0x2e>
   } else {
      usartPrint( '0' + cChip );
    413c:	89 81       	ldd	r24, Y+1	; 0x01
    413e:	80 5d       	subi	r24, 0xD0	; 208
    4140:	0e 94 17 20 	call	0x402e	; 0x402e <usartPrint>
    4144:	21 96       	adiw	r28, 0x01	; 1
    4146:	0f b6       	in	r0, 0x3f	; 63
    4148:	f8 94       	cli
    414a:	de bf       	out	0x3e, r29	; 62
    414c:	0f be       	out	0x3f, r0	; 63
    414e:	cd bf       	out	0x3d, r28	; 61
    4150:	df 91       	pop	r29
    4152:	cf 91       	pop	r28
    4154:	08 95       	ret

00004156 <usartPutHex>:
   }
}
//this function outputs the value of c
void usartPutHex( uint8_t c ) {
    4156:	cf 93       	push	r28
    4158:	df 93       	push	r29
    415a:	cd b7       	in	r28, 0x3d	; 61
    415c:	de b7       	in	r29, 0x3e	; 62
    415e:	21 97       	sbiw	r28, 0x01	; 1
    4160:	0f b6       	in	r0, 0x3f	; 63
    4162:	f8 94       	cli
    4164:	de bf       	out	0x3e, r29	; 62
    4166:	0f be       	out	0x3f, r0	; 63
    4168:	cd bf       	out	0x3d, r28	; 61
    416a:	89 83       	std	Y+1, r24	; 0x01
   usartPutChipHex( c >> 4 );
    416c:	89 81       	ldd	r24, Y+1	; 0x01
    416e:	82 95       	swap	r24
    4170:	8f 70       	andi	r24, 0x0F	; 15
    4172:	0e 94 8b 20 	call	0x4116	; 0x4116 <usartPutChipHex>
   usartPutChipHex( c& 0xf );
    4176:	89 81       	ldd	r24, Y+1	; 0x01
    4178:	8f 70       	andi	r24, 0x0F	; 15
    417a:	0e 94 8b 20 	call	0x4116	; 0x4116 <usartPutChipHex>
    417e:	21 96       	adiw	r28, 0x01	; 1
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	f8 94       	cli
    4184:	de bf       	out	0x3e, r29	; 62
    4186:	0f be       	out	0x3f, r0	; 63
    4188:	cd bf       	out	0x3d, r28	; 61
    418a:	df 91       	pop	r29
    418c:	cf 91       	pop	r28
    418e:	08 95       	ret

00004190 <usartPutLong>:
}
//this function outputs the value of l . note avr is small-endian so the result is from the right-hand start 
void usartPutLong( uint32_t l ) {
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
    4198:	26 97       	sbiw	r28, 0x06	; 6
    419a:	0f b6       	in	r0, 0x3f	; 63
    419c:	f8 94       	cli
    419e:	de bf       	out	0x3e, r29	; 62
    41a0:	0f be       	out	0x3f, r0	; 63
    41a2:	cd bf       	out	0x3d, r28	; 61
    41a4:	6b 83       	std	Y+3, r22	; 0x03
    41a6:	7c 83       	std	Y+4, r23	; 0x04
    41a8:	8d 83       	std	Y+5, r24	; 0x05
    41aa:	9e 83       	std	Y+6, r25	; 0x06
   uint8_t *pcByte = (( uint8_t* )( &l )) + 3;
    41ac:	ce 01       	movw	r24, r28
    41ae:	03 96       	adiw	r24, 0x03	; 3
    41b0:	03 96       	adiw	r24, 0x03	; 3
    41b2:	9a 83       	std	Y+2, r25	; 0x02
    41b4:	89 83       	std	Y+1, r24	; 0x01
   usartPrint( '0' );
    41b6:	80 e3       	ldi	r24, 0x30	; 48
    41b8:	0e 94 17 20 	call	0x402e	; 0x402e <usartPrint>
   usartPrint( 'x' );
    41bc:	88 e7       	ldi	r24, 0x78	; 120
    41be:	0e 94 17 20 	call	0x402e	; 0x402e <usartPrint>
   usartPutHex( *pcByte );
    41c2:	e9 81       	ldd	r30, Y+1	; 0x01
    41c4:	fa 81       	ldd	r31, Y+2	; 0x02
    41c6:	80 81       	ld	r24, Z
    41c8:	0e 94 ab 20 	call	0x4156	; 0x4156 <usartPutHex>
   pcByte --;
    41cc:	89 81       	ldd	r24, Y+1	; 0x01
    41ce:	9a 81       	ldd	r25, Y+2	; 0x02
    41d0:	01 97       	sbiw	r24, 0x01	; 1
    41d2:	9a 83       	std	Y+2, r25	; 0x02
    41d4:	89 83       	std	Y+1, r24	; 0x01
   usartPutHex( *pcByte );
    41d6:	e9 81       	ldd	r30, Y+1	; 0x01
    41d8:	fa 81       	ldd	r31, Y+2	; 0x02
    41da:	80 81       	ld	r24, Z
    41dc:	0e 94 ab 20 	call	0x4156	; 0x4156 <usartPutHex>
   pcByte --;
    41e0:	89 81       	ldd	r24, Y+1	; 0x01
    41e2:	9a 81       	ldd	r25, Y+2	; 0x02
    41e4:	01 97       	sbiw	r24, 0x01	; 1
    41e6:	9a 83       	std	Y+2, r25	; 0x02
    41e8:	89 83       	std	Y+1, r24	; 0x01
   usartPutHex( *pcByte );
    41ea:	e9 81       	ldd	r30, Y+1	; 0x01
    41ec:	fa 81       	ldd	r31, Y+2	; 0x02
    41ee:	80 81       	ld	r24, Z
    41f0:	0e 94 ab 20 	call	0x4156	; 0x4156 <usartPutHex>
   pcByte --;
    41f4:	89 81       	ldd	r24, Y+1	; 0x01
    41f6:	9a 81       	ldd	r25, Y+2	; 0x02
    41f8:	01 97       	sbiw	r24, 0x01	; 1
    41fa:	9a 83       	std	Y+2, r25	; 0x02
    41fc:	89 83       	std	Y+1, r24	; 0x01
   usartPutHex( *pcByte );
    41fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4200:	fa 81       	ldd	r31, Y+2	; 0x02
    4202:	80 81       	ld	r24, Z
    4204:	0e 94 ab 20 	call	0x4156	; 0x4156 <usartPutHex>
    4208:	26 96       	adiw	r28, 0x06	; 6
    420a:	0f b6       	in	r0, 0x3f	; 63
    420c:	f8 94       	cli
    420e:	de bf       	out	0x3e, r29	; 62
    4210:	0f be       	out	0x3f, r0	; 63
    4212:	cd bf       	out	0x3d, r28	; 61
    4214:	df 91       	pop	r29
    4216:	cf 91       	pop	r28
    4218:	08 95       	ret

0000421a <printInteger>:
}

//-------------------------------------------------------------------------
void printInteger( int32_t a, int32_t b, int32_t c, int32_t d ) {
    421a:	af 92       	push	r10
    421c:	bf 92       	push	r11
    421e:	cf 92       	push	r12
    4220:	df 92       	push	r13
    4222:	ef 92       	push	r14
    4224:	ff 92       	push	r15
    4226:	0f 93       	push	r16
    4228:	1f 93       	push	r17
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	cd b7       	in	r28, 0x3d	; 61
    4230:	de b7       	in	r29, 0x3e	; 62
    4232:	60 97       	sbiw	r28, 0x10	; 16
    4234:	0f b6       	in	r0, 0x3f	; 63
    4236:	f8 94       	cli
    4238:	de bf       	out	0x3e, r29	; 62
    423a:	0f be       	out	0x3f, r0	; 63
    423c:	cd bf       	out	0x3d, r28	; 61
    423e:	69 83       	std	Y+1, r22	; 0x01
    4240:	7a 83       	std	Y+2, r23	; 0x02
    4242:	8b 83       	std	Y+3, r24	; 0x03
    4244:	9c 83       	std	Y+4, r25	; 0x04
    4246:	2d 83       	std	Y+5, r18	; 0x05
    4248:	3e 83       	std	Y+6, r19	; 0x06
    424a:	4f 83       	std	Y+7, r20	; 0x07
    424c:	58 87       	std	Y+8, r21	; 0x08
    424e:	e9 86       	std	Y+9, r14	; 0x09
    4250:	fa 86       	std	Y+10, r15	; 0x0a
    4252:	0b 87       	std	Y+11, r16	; 0x0b
    4254:	1c 87       	std	Y+12, r17	; 0x0c
    4256:	ad 86       	std	Y+13, r10	; 0x0d
    4258:	be 86       	std	Y+14, r11	; 0x0e
    425a:	cf 86       	std	Y+15, r12	; 0x0f
    425c:	d8 8a       	std	Y+16, r13	; 0x10
   usartPrint( 1 );
    425e:	81 e0       	ldi	r24, 0x01	; 1
    4260:	0e 94 17 20 	call	0x402e	; 0x402e <usartPrint>
   usartPutLong( *( uint32_t* )( &a ));
    4264:	fe 01       	movw	r30, r28
    4266:	31 96       	adiw	r30, 0x01	; 1
    4268:	80 81       	ld	r24, Z
    426a:	91 81       	ldd	r25, Z+1	; 0x01
    426c:	a2 81       	ldd	r26, Z+2	; 0x02
    426e:	b3 81       	ldd	r27, Z+3	; 0x03
    4270:	bc 01       	movw	r22, r24
    4272:	cd 01       	movw	r24, r26
    4274:	0e 94 c8 20 	call	0x4190	; 0x4190 <usartPutLong>
   usartPutLong( *( uint32_t* )( &b ));
    4278:	fe 01       	movw	r30, r28
    427a:	35 96       	adiw	r30, 0x05	; 5
    427c:	80 81       	ld	r24, Z
    427e:	91 81       	ldd	r25, Z+1	; 0x01
    4280:	a2 81       	ldd	r26, Z+2	; 0x02
    4282:	b3 81       	ldd	r27, Z+3	; 0x03
    4284:	bc 01       	movw	r22, r24
    4286:	cd 01       	movw	r24, r26
    4288:	0e 94 c8 20 	call	0x4190	; 0x4190 <usartPutLong>
   usartPutLong( *( uint32_t* )( &c ));
    428c:	fe 01       	movw	r30, r28
    428e:	39 96       	adiw	r30, 0x09	; 9
    4290:	80 81       	ld	r24, Z
    4292:	91 81       	ldd	r25, Z+1	; 0x01
    4294:	a2 81       	ldd	r26, Z+2	; 0x02
    4296:	b3 81       	ldd	r27, Z+3	; 0x03
    4298:	bc 01       	movw	r22, r24
    429a:	cd 01       	movw	r24, r26
    429c:	0e 94 c8 20 	call	0x4190	; 0x4190 <usartPutLong>
   usartPutLong( *( uint32_t* )( &d ));
    42a0:	fe 01       	movw	r30, r28
    42a2:	3d 96       	adiw	r30, 0x0d	; 13
    42a4:	80 81       	ld	r24, Z
    42a6:	91 81       	ldd	r25, Z+1	; 0x01
    42a8:	a2 81       	ldd	r26, Z+2	; 0x02
    42aa:	b3 81       	ldd	r27, Z+3	; 0x03
    42ac:	bc 01       	movw	r22, r24
    42ae:	cd 01       	movw	r24, r26
    42b0:	0e 94 c8 20 	call	0x4190	; 0x4190 <usartPutLong>
    42b4:	60 96       	adiw	r28, 0x10	; 16
    42b6:	0f b6       	in	r0, 0x3f	; 63
    42b8:	f8 94       	cli
    42ba:	de bf       	out	0x3e, r29	; 62
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	cd bf       	out	0x3d, r28	; 61
    42c0:	df 91       	pop	r29
    42c2:	cf 91       	pop	r28
    42c4:	1f 91       	pop	r17
    42c6:	0f 91       	pop	r16
    42c8:	ff 90       	pop	r15
    42ca:	ef 90       	pop	r14
    42cc:	df 90       	pop	r13
    42ce:	cf 90       	pop	r12
    42d0:	bf 90       	pop	r11
    42d2:	af 90       	pop	r10
    42d4:	08 95       	ret

000042d6 <__vector_18>:
}


/*
int main()
{
printString("hello, world! Here ai amdfasdsafffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n");
printInteger(-32, 32, 0,0);
printInteger(-332, 2232, -232,0);
printInteger(332, 1132, 340,0);
printInteger(432, 111132, 3430,0);
printInteger(532, 343432, 0,45);
while(1);
return 0; 
}
 */
/*
SIGNAL(SIG_UART0_RECV)
{
uint8_t dummy = UDR0; 
currentindex ++; 
if (currentindex ==3)
{  printString("hello, reply\n\0"); 
currentindex = 0;
}
} 
 */






///Must get two sync to begin record. 
///Receive two sync to stop record. ad then use the commandHandle to handle it. 
///Serves two goals:
///1 the initilization starts with z 2 the comm where two starting bytes tell the port and the message length 


//SIGNAL( SIG_UART0_RECV ) {



#ifdef SERIAL_COMMAND_REPLY
Radio_Msg broadcastmsg; 
#endif

#if defined(PLATFORM_AVR_IRIS) && (SERIAL_COMMAND_REPLY)

SIGNAL(USART0_RX_vect)
{


 uint8_t dummy = UDR0;
 uint8_t currentindex = 0; 
 uint8_t i; 


 if (dummy == 'a')
  {

   _atomic_t _atomic = _atomic_start();

    for (i=0;i<31;i++)
	{
    while (!(UCSR0A & (1<<RXC0)));
	receivebuffer[currentindex++] = UDR0; 
	}  

   _atomic_end(_atomic); 
		
		//Leds_greenToggle(); 
		
		
     { _atomic_t _atomic = _atomic_start();
	    uint8_t reallength = receivebuffer[0]; 
	    broadcastmsg.port = 0xfefe; 
		broadcastmsg.length = reallength;  
    
     {
	  uint8_t *pack; 
	  pack = (uint8_t *)broadcastmsg.data;

      for (i=0;i<reallength; i++)
	    pack[i] = receivebuffer[i]; 
     }
     _atomic_end(_atomic); }  


		

		//broadcastCommand(receivebuffer, currentindex); 
		//tryoutCommand(receivebuffer); 

		Standard_Receive_Packet(0xfefe, &broadcastmsg);

  }
 else if (dummy == 'l')
  {
   _atomic_t _atomic = _atomic_start();
    for (i=0;i<63;i++)
	{
    while (!(UCSR0A & (1<<RXC0)));
	receivebuffer[currentindex++] = UDR0; 
	}  
    _atomic_end(_atomic); 
	   	
		
     { _atomic_t _atomic = _atomic_start();
	    uint8_t reallength = receivebuffer[0]; 
	    broadcastmsg.port = 0xfefe; 
		broadcastmsg.length = reallength;  
    
     {
	  uint8_t *pack;
	  pack = (uint8_t *)broadcastmsg.data;

      for (i=0;i<reallength; i++)
	    pack[i] = receivebuffer[i]; 
     }
     _atomic_end(_atomic); }  


		

		//broadcastCommand(receivebuffer, currentindex); 
		//tryoutCommand(receivebuffer); 

		Standard_Receive_Packet(0xfefe, &broadcastmsg);

   }
 
  

} 






#elif defined(PLATFORM_AVR)
SIGNAL(USART0_RX_vect)
{
    42d6:	1f 92       	push	r1
    42d8:	0f 92       	push	r0
    42da:	0f b6       	in	r0, 0x3f	; 63
    42dc:	0f 92       	push	r0
    42de:	11 24       	eor	r1, r1
    42e0:	2f 93       	push	r18
    42e2:	3f 93       	push	r19
    42e4:	4f 93       	push	r20
    42e6:	5f 93       	push	r21
    42e8:	6f 93       	push	r22
    42ea:	7f 93       	push	r23
    42ec:	8f 93       	push	r24
    42ee:	9f 93       	push	r25
    42f0:	af 93       	push	r26
    42f2:	bf 93       	push	r27
    42f4:	ef 93       	push	r30
    42f6:	ff 93       	push	r31
    42f8:	cf 93       	push	r28
    42fa:	df 93       	push	r29
    42fc:	cd b7       	in	r28, 0x3d	; 61
    42fe:	de b7       	in	r29, 0x3e	; 62
    4300:	29 97       	sbiw	r28, 0x09	; 9
    4302:	de bf       	out	0x3e, r29	; 62
    4304:	cd bf       	out	0x3d, r28	; 61
 
   uint8_t dummy = UDR0;
    4306:	ec e2       	ldi	r30, 0x2C	; 44
    4308:	f0 e0       	ldi	r31, 0x00	; 0
    430a:	80 81       	ld	r24, Z
    430c:	89 87       	std	Y+9, r24	; 0x09
   uint8_t currentindex = 0;
    430e:	18 86       	std	Y+8, r1	; 0x08
   uint8_t portnum, length;
   uint8_t i;


   uint8_t isthreadtrue;


   _atomic_t _atomic ; 

   isthreadtrue = 0; 
    4310:	1c 82       	std	Y+4, r1	; 0x04
    
    _atomic = _atomic_start();
    4312:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    4316:	8b 83       	std	Y+3, r24	; 0x03

   if (is_thread())
    4318:	0e 94 0b 91 	call	0x12216	; 0x12216 <is_thread>
    431c:	88 23       	and	r24, r24
    431e:	71 f0       	breq	.+28     	; 0x433c <__vector_18+0x66>
   {
   isthreadtrue = 1; 
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	8c 83       	std	Y+4, r24	; 0x04
   SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);  
    4324:	8d b7       	in	r24, 0x3d	; 61
    4326:	9e b7       	in	r25, 0x3e	; 62
    4328:	90 93 09 0a 	sts	0x0A09, r25
    432c:	80 93 08 0a 	sts	0x0A08, r24
    4330:	80 91 cf 08 	lds	r24, 0x08CF
    4334:	90 91 d0 08 	lds	r25, 0x08D0
    4338:	9e bf       	out	0x3e, r25	; 62
    433a:	8d bf       	out	0x3d, r24	; 61
   
   }

   _atomic_end( _atomic );
    433c:	8b 81       	ldd	r24, Y+3	; 0x03
    433e:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>

   


   if ( dummy == 'a' ) {
    4342:	89 85       	ldd	r24, Y+9	; 0x09
    4344:	81 36       	cpi	r24, 0x61	; 97
    4346:	09 f0       	breq	.+2      	; 0x434a <__vector_18+0x74>
    4348:	44 c0       	rjmp	.+136    	; 0x43d2 <__vector_18+0xfc>
      _atomic_t _atomic = _atomic_start();
    434a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    434e:	8a 83       	std	Y+2, r24	; 0x02
	   while (  ! ( UCSR0A& ( 1 << RXC0 )))
    4350:	eb e2       	ldi	r30, 0x2B	; 43
    4352:	f0 e0       	ldi	r31, 0x00	; 0
    4354:	80 81       	ld	r24, Z
    4356:	88 23       	and	r24, r24
    4358:	dc f7       	brge	.-10     	; 0x4350 <__vector_18+0x7a>
            ;
	   portnum= UDR0;
    435a:	ec e2       	ldi	r30, 0x2C	; 44
    435c:	f0 e0       	ldi	r31, 0x00	; 0
    435e:	80 81       	ld	r24, Z
    4360:	8f 83       	std	Y+7, r24	; 0x07
	   portnum = portnum - 48; 
    4362:	8f 81       	ldd	r24, Y+7	; 0x07
    4364:	80 53       	subi	r24, 0x30	; 48
    4366:	8f 83       	std	Y+7, r24	; 0x07

       while (  ! ( UCSR0A& ( 1 << RXC0 )))
    4368:	eb e2       	ldi	r30, 0x2B	; 43
    436a:	f0 e0       	ldi	r31, 0x00	; 0
    436c:	80 81       	ld	r24, Z
    436e:	88 23       	and	r24, r24
    4370:	dc f7       	brge	.-10     	; 0x4368 <__vector_18+0x92>
            ;
	   length = UDR0;
    4372:	ec e2       	ldi	r30, 0x2C	; 44
    4374:	f0 e0       	ldi	r31, 0x00	; 0
    4376:	80 81       	ld	r24, Z
    4378:	8e 83       	std	Y+6, r24	; 0x06
	   length = length - 48; 
    437a:	8e 81       	ldd	r24, Y+6	; 0x06
    437c:	80 53       	subi	r24, 0x30	; 48
    437e:	8e 83       	std	Y+6, r24	; 0x06

	   
	   
      for ( i = 0; i < length; i ++ ) {
    4380:	1d 82       	std	Y+5, r1	; 0x05
    4382:	14 c0       	rjmp	.+40     	; 0x43ac <__vector_18+0xd6>
         while (  ! ( UCSR0A& ( 1 << RXC0 )))
    4384:	eb e2       	ldi	r30, 0x2B	; 43
    4386:	f0 e0       	ldi	r31, 0x00	; 0
    4388:	80 81       	ld	r24, Z
    438a:	88 23       	and	r24, r24
    438c:	dc f7       	brge	.-10     	; 0x4384 <__vector_18+0xae>
            ;
         receivebuffer[ currentindex ++ ] = UDR0;
    438e:	88 85       	ldd	r24, Y+8	; 0x08
    4390:	99 27       	eor	r25, r25
    4392:	ec e2       	ldi	r30, 0x2C	; 44
    4394:	f0 e0       	ldi	r31, 0x00	; 0
    4396:	20 81       	ld	r18, Z
    4398:	fc 01       	movw	r30, r24
    439a:	ef 55       	subi	r30, 0x5F	; 95
    439c:	fe 4f       	sbci	r31, 0xFE	; 254
    439e:	20 83       	st	Z, r18
    43a0:	88 85       	ldd	r24, Y+8	; 0x08
    43a2:	8f 5f       	subi	r24, 0xFF	; 255
    43a4:	88 87       	std	Y+8, r24	; 0x08
    43a6:	8d 81       	ldd	r24, Y+5	; 0x05
    43a8:	8f 5f       	subi	r24, 0xFF	; 255
    43aa:	8d 83       	std	Y+5, r24	; 0x05
    43ac:	9d 81       	ldd	r25, Y+5	; 0x05
    43ae:	8e 81       	ldd	r24, Y+6	; 0x06
    43b0:	98 17       	cp	r25, r24
    43b2:	40 f3       	brcs	.-48     	; 0x4384 <__vector_18+0xae>
      }
      _atomic_end( _atomic );
    43b4:	8a 81       	ldd	r24, Y+2	; 0x02
    43b6:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
     
      //commandHandle(receivebuffer, currentindex); 
      //initCommandReceived(receivebuffer); 
      serialDeliverPacket((( uint16_t )portnum ), (( uint8_t )length ), &receivebuffer[ 0 ] );
    43ba:	8f 81       	ldd	r24, Y+7	; 0x07
    43bc:	28 2f       	mov	r18, r24
    43be:	33 27       	eor	r19, r19
    43c0:	81 ea       	ldi	r24, 0xA1	; 161
    43c2:	91 e0       	ldi	r25, 0x01	; 1
    43c4:	ac 01       	movw	r20, r24
    43c6:	6e 81       	ldd	r22, Y+6	; 0x06
    43c8:	c9 01       	movw	r24, r18
    43ca:	0e 94 c6 8f 	call	0x11f8c	; 0x11f8c <serialDeliverPacket>
	  currentindex = 0; 
    43ce:	18 86       	std	Y+8, r1	; 0x08
    43d0:	27 c0       	rjmp	.+78     	; 0x4420 <__vector_18+0x14a>
   	}
    else if ( dummy == 'z' ) {
    43d2:	89 85       	ldd	r24, Y+9	; 0x09
    43d4:	8a 37       	cpi	r24, 0x7A	; 122
    43d6:	21 f5       	brne	.+72     	; 0x4420 <__vector_18+0x14a>
      _atomic_t _atomic = _atomic_start();
    43d8:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    43dc:	89 83       	std	Y+1, r24	; 0x01
      for ( i = 0; i < 33; i ++ ) {
    43de:	1d 82       	std	Y+5, r1	; 0x05
    43e0:	14 c0       	rjmp	.+40     	; 0x440a <__vector_18+0x134>
         while (  ! ( UCSR0A& ( 1 << RXC0 )))
    43e2:	eb e2       	ldi	r30, 0x2B	; 43
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	80 81       	ld	r24, Z
    43e8:	88 23       	and	r24, r24
    43ea:	dc f7       	brge	.-10     	; 0x43e2 <__vector_18+0x10c>
            ;
         receivebuffer[ currentindex ++ ] = UDR0;
    43ec:	88 85       	ldd	r24, Y+8	; 0x08
    43ee:	99 27       	eor	r25, r25
    43f0:	ec e2       	ldi	r30, 0x2C	; 44
    43f2:	f0 e0       	ldi	r31, 0x00	; 0
    43f4:	20 81       	ld	r18, Z
    43f6:	fc 01       	movw	r30, r24
    43f8:	ef 55       	subi	r30, 0x5F	; 95
    43fa:	fe 4f       	sbci	r31, 0xFE	; 254
    43fc:	20 83       	st	Z, r18
    43fe:	88 85       	ldd	r24, Y+8	; 0x08
    4400:	8f 5f       	subi	r24, 0xFF	; 255
    4402:	88 87       	std	Y+8, r24	; 0x08
    4404:	8d 81       	ldd	r24, Y+5	; 0x05
    4406:	8f 5f       	subi	r24, 0xFF	; 255
    4408:	8d 83       	std	Y+5, r24	; 0x05
    440a:	8d 81       	ldd	r24, Y+5	; 0x05
    440c:	81 32       	cpi	r24, 0x21	; 33
    440e:	48 f3       	brcs	.-46     	; 0x43e2 <__vector_18+0x10c>
      }
      _atomic_end( _atomic );
    4410:	89 81       	ldd	r24, Y+1	; 0x01
    4412:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      initCommandReceived( receivebuffer );
    4416:	81 ea       	ldi	r24, 0xA1	; 161
    4418:	91 e0       	ldi	r25, 0x01	; 1
    441a:	0e 94 a5 6a 	call	0xd54a	; 0xd54a <initCommandReceived>
	  currentindex = 0; 
    441e:	18 86       	std	Y+8, r1	; 0x08
     
   }


    

	
  
     _atomic = _atomic_start();
    4420:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    4424:	8b 83       	std	Y+3, r24	; 0x03
   
    if (isthreadtrue == 1)
    4426:	8c 81       	ldd	r24, Y+4	; 0x04
    4428:	81 30       	cpi	r24, 0x01	; 1
    442a:	69 f4       	brne	.+26     	; 0x4446 <__vector_18+0x170>
   {
     isthreadtrue = 0; 
    442c:	1c 82       	std	Y+4, r1	; 0x04
     SWAP_STACK_PTR( old_stack_ptr, stackinterrupt_ptr);
    442e:	8d b7       	in	r24, 0x3d	; 61
    4430:	9e b7       	in	r25, 0x3e	; 62
    4432:	90 93 d0 08 	sts	0x08D0, r25
    4436:	80 93 cf 08 	sts	0x08CF, r24
    443a:	80 91 08 0a 	lds	r24, 0x0A08
    443e:	90 91 09 0a 	lds	r25, 0x0A09
    4442:	9e bf       	out	0x3e, r25	; 62
    4444:	8d bf       	out	0x3d, r24	; 61
     //thread_yield();   
   }
    _atomic_end( _atomic );
    4446:	8b 81       	ldd	r24, Y+3	; 0x03
    4448:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    444c:	29 96       	adiw	r28, 0x09	; 9
    444e:	f8 94       	cli
    4450:	de bf       	out	0x3e, r29	; 62
    4452:	cd bf       	out	0x3d, r28	; 61
    4454:	df 91       	pop	r29
    4456:	cf 91       	pop	r28
    4458:	ff 91       	pop	r31
    445a:	ef 91       	pop	r30
    445c:	bf 91       	pop	r27
    445e:	af 91       	pop	r26
    4460:	9f 91       	pop	r25
    4462:	8f 91       	pop	r24
    4464:	7f 91       	pop	r23
    4466:	6f 91       	pop	r22
    4468:	5f 91       	pop	r21
    446a:	4f 91       	pop	r20
    446c:	3f 91       	pop	r19
    446e:	2f 91       	pop	r18
    4470:	0f 90       	pop	r0
    4472:	0f be       	out	0x3f, r0	; 63
    4474:	0f 90       	pop	r0
    4476:	1f 90       	pop	r1
    4478:	18 95       	reti

0000447a <cc2420controlm_SplitControl_init>:
uint8_t CC2420_CHANNEL;
uint8_t CC2420_RFPOWER;
uint8_t cc2420controlm_state;
uint16_t cc2420controlm_gCurrentParameters[ 14 ];
inline result_t cc2420controlm_SplitControl_init( void ) {
    447a:	cf 93       	push	r28
    447c:	df 93       	push	r29
    447e:	cd b7       	in	r28, 0x3d	; 61
    4480:	de b7       	in	r29, 0x3e	; 62
    4482:	25 97       	sbiw	r28, 0x05	; 5
    4484:	0f b6       	in	r0, 0x3f	; 63
    4486:	f8 94       	cli
    4488:	de bf       	out	0x3e, r29	; 62
    448a:	0f be       	out	0x3f, r0	; 63
    448c:	cd bf       	out	0x3d, r28	; 61
   uint8_t _state = FALSE;
    448e:	1b 82       	std	Y+3, r1	; 0x03
    {
      _atomic_t _atomic = _atomic_start();
    4490:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    4494:	8a 83       	std	Y+2, r24	; 0x02
       {
         if ( cc2420controlm_state == cc2420controlm_IDLE_STATE ) {
    4496:	80 91 53 04 	lds	r24, 0x0453
    449a:	88 23       	and	r24, r24
    449c:	29 f4       	brne	.+10     	; 0x44a8 <cc2420controlm_SplitControl_init+0x2e>
            cc2420controlm_state = cc2420controlm_INIT_STATE;
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	80 93 53 04 	sts	0x0453, r24
            _state = TRUE;
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	8b 83       	std	Y+3, r24	; 0x03
         }
      }
      //Qing Revision
      //IDLE state
      cc2420controlm_state = cc2420controlm_IDLE_STATE;
    44a8:	10 92 53 04 	sts	0x0453, r1
      CC2420_CHANNEL = CC2420_DEF_CHANNEL;
    44ac:	8b e0       	ldi	r24, 0x0B	; 11
    44ae:	80 93 71 04 	sts	0x0471, r24
      CC2420_RFPOWER = CC2420_DEF_RFPOWER;
    44b2:	8f e1       	ldi	r24, 0x1F	; 31
    44b4:	80 93 54 04 	sts	0x0454, r24
      _atomic_end( _atomic );
    44b8:	8a 81       	ldd	r24, Y+2	; 0x02
    44ba:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   if (  ! _state ) {
    44be:	8b 81       	ldd	r24, Y+3	; 0x03
    44c0:	88 23       	and	r24, r24
    44c2:	19 f4       	brne	.+6      	; 0x44ca <cc2420controlm_SplitControl_init+0x50>
      return FAIL;
    44c4:	1d 82       	std	Y+5, r1	; 0x05
    44c6:	1c 82       	std	Y+4, r1	; 0x04
    44c8:	71 c0       	rjmp	.+226    	; 0x45ac <cc2420controlm_SplitControl_init+0x132>
   }
   cc2420controlm_HPLChipconControl_init();
    44ca:	0e 94 57 26 	call	0x4cae	; 0x4cae <cc2420controlm_HPLChipconControl_init>
   //Basically, reset everything page 64
   cc2420controlm_gCurrentParameters[ CP_MAIN ] = 0xf800;
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	98 ef       	ldi	r25, 0xF8	; 248
    44d2:	90 93 56 04 	sts	0x0456, r25
    44d6:	80 93 55 04 	sts	0x0455, r24
   //Basically, check page 65. Very easy 
   cc2420controlm_gCurrentParameters[ CP_MDMCTRL0 ] = (((( 0 << 11 ) | ( 2 << 8 )) | ( 3 << 6 )) | ( 1 << 5 )) | ( 2 << 0 );
    44da:	82 ee       	ldi	r24, 0xE2	; 226
    44dc:	92 e0       	ldi	r25, 0x02	; 2
    44de:	90 93 58 04 	sts	0x0458, r25
    44e2:	80 93 57 04 	sts	0x0457, r24
   //Page 66
   cc2420controlm_gCurrentParameters[ CP_MDMCTRL1 ] = 20 << 6;
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	95 e0       	ldi	r25, 0x05	; 5
    44ea:	90 93 5a 04 	sts	0x045A, r25
    44ee:	80 93 59 04 	sts	0x0459, r24
   //reset values
   cc2420controlm_gCurrentParameters[ CP_RSSI ] = 0xE080;
    44f2:	80 e8       	ldi	r24, 0x80	; 128
    44f4:	90 ee       	ldi	r25, 0xE0	; 224
    44f6:	90 93 5c 04 	sts	0x045C, r25
    44fa:	80 93 5b 04 	sts	0x045B, r24
   //reset
   cc2420controlm_gCurrentParameters[ CP_SYNCWORD ] = 0xA70F;
    44fe:	8f e0       	ldi	r24, 0x0F	; 15
    4500:	97 ea       	ldi	r25, 0xA7	; 167
    4502:	90 93 5e 04 	sts	0x045E, r25
    4506:	80 93 5d 04 	sts	0x045D, r24
   //the last one, according to page 52 of the data sheet and page 67, default to output 0dbm 
   cc2420controlm_gCurrentParameters[ CP_TXCTRL ] = (((( 1 << 14 ) | ( 1 << 13 )) | ( 3 << 6 )) | ( 1 << 5 )) | ( CC2420_RFPOWER << 0 );
    450a:	80 91 54 04 	lds	r24, 0x0454
    450e:	99 27       	eor	r25, r25
    4510:	80 6e       	ori	r24, 0xE0	; 224
    4512:	90 66       	ori	r25, 0x60	; 96
    4514:	90 93 60 04 	sts	0x0460, r25
    4518:	80 93 5f 04 	sts	0x045F, r24
   cc2420controlm_gCurrentParameters[ CP_RXCTRL0 ] = ((((( 1 << 12 ) | ( 2 << 8 )) | ( 3 << 6 )) | ( 2 << 4 )) | ( 1 << 2 )) | ( 1 << 0 );
    451c:	85 ee       	ldi	r24, 0xE5	; 229
    451e:	92 e1       	ldi	r25, 0x12	; 18
    4520:	90 93 62 04 	sts	0x0462, r25
    4524:	80 93 61 04 	sts	0x0461, r24
   cc2420controlm_gCurrentParameters[ CP_RXCTRL1 ] = ((((( 1 << 11 ) | ( 1 << 9 )) | ( 1 << 6 )) | ( 1 << 4 )) | ( 1 << 2 )) | ( 2 << 0 );
    4528:	86 e5       	ldi	r24, 0x56	; 86
    452a:	9a e0       	ldi	r25, 0x0A	; 10
    452c:	90 93 64 04 	sts	0x0464, r25
    4530:	80 93 63 04 	sts	0x0463, r24
   //PAGE 51 of the manual 
   cc2420controlm_gCurrentParameters[ CP_FSCTRL ] = ( 1 << 14 ) | (( 357+5 *( CC2420_CHANNEL - 11 )) << 0 );
    4534:	80 91 71 04 	lds	r24, 0x0471
    4538:	28 2f       	mov	r18, r24
    453a:	33 27       	eor	r19, r19
    453c:	c9 01       	movw	r24, r18
    453e:	88 0f       	add	r24, r24
    4540:	99 1f       	adc	r25, r25
    4542:	88 0f       	add	r24, r24
    4544:	99 1f       	adc	r25, r25
    4546:	82 0f       	add	r24, r18
    4548:	93 1f       	adc	r25, r19
    454a:	82 5d       	subi	r24, 0xD2	; 210
    454c:	9e 4f       	sbci	r25, 0xFE	; 254
    454e:	90 64       	ori	r25, 0x40	; 64
    4550:	90 93 66 04 	sts	0x0466, r25
    4554:	80 93 65 04 	sts	0x0465, r24
   cc2420controlm_gCurrentParameters[ CP_SECCTRL0 ] = ((( 1 << 8 ) | ( 1 << 7 )) | ( 1 << 6 )) | ( 1 << 2 );
    4558:	84 ec       	ldi	r24, 0xC4	; 196
    455a:	91 e0       	ldi	r25, 0x01	; 1
    455c:	90 93 68 04 	sts	0x0468, r25
    4560:	80 93 67 04 	sts	0x0467, r24
   cc2420controlm_gCurrentParameters[ CP_SECCTRL1 ] = 0;
    4564:	10 92 6a 04 	sts	0x046A, r1
    4568:	10 92 69 04 	sts	0x0469, r1
   cc2420controlm_gCurrentParameters[ CP_BATTMON ] = 0;
    456c:	10 92 6c 04 	sts	0x046C, r1
    4570:	10 92 6b 04 	sts	0x046B, r1
   //fifop and cca polarity are inversed
   cc2420controlm_gCurrentParameters[ CP_IOCFG0 ] = ( 127 << 0 ) | ( 1 << 9 );
    4574:	8f e7       	ldi	r24, 0x7F	; 127
    4576:	92 e0       	ldi	r25, 0x02	; 2
    4578:	90 93 6e 04 	sts	0x046E, r25
    457c:	80 93 6d 04 	sts	0x046D, r24
   cc2420controlm_gCurrentParameters[ CP_IOCFG1 ] = 0;
    4580:	10 92 70 04 	sts	0x0470, r1
    4584:	10 92 6f 04 	sts	0x046F, r1
    {
      _atomic_t _atomic = _atomic_start();
    4588:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    458c:	89 83       	std	Y+1, r24	; 0x01
      cc2420controlm_state = cc2420controlm_INIT_STATE_DONE;
    458e:	82 e0       	ldi	r24, 0x02	; 2
    4590:	80 93 53 04 	sts	0x0453, r24
      _atomic_end( _atomic );
    4594:	89 81       	ldd	r24, Y+1	; 0x01
    4596:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   postTask( cc2420controlm_taskInitDone, 5 );
    459a:	81 e3       	ldi	r24, 0x31	; 49
    459c:	93 e2       	ldi	r25, 0x23	; 35
    459e:	65 e0       	ldi	r22, 0x05	; 5
    45a0:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
   return SUCCESS;
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	9d 83       	std	Y+5, r25	; 0x05
    45aa:	8c 83       	std	Y+4, r24	; 0x04
    45ac:	8c 81       	ldd	r24, Y+4	; 0x04
    45ae:	9d 81       	ldd	r25, Y+5	; 0x05
    45b0:	25 96       	adiw	r28, 0x05	; 5
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	de bf       	out	0x3e, r29	; 62
    45b8:	0f be       	out	0x3f, r0	; 63
    45ba:	cd bf       	out	0x3d, r28	; 61
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	08 95       	ret

000045c2 <cc2420controlm_CCA_startWait>:
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_startWait( bool arg_0xa422588 ) {
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	cd b7       	in	r28, 0x3d	; 61
    45c8:	de b7       	in	r29, 0x3e	; 62
    45ca:	22 97       	sbiw	r28, 0x02	; 2
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	f8 94       	cli
    45d0:	de bf       	out	0x3e, r29	; 62
    45d2:	0f be       	out	0x3f, r0	; 63
    45d4:	cd bf       	out	0x3d, r28	; 61
    45d6:	8a 83       	std	Y+2, r24	; 0x02
   unsigned char result;
   result = hplcc2420interruptm_CCA_startWait( arg_0xa422588 );
    45d8:	8a 81       	ldd	r24, Y+2	; 0x02
    45da:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <hplcc2420interruptm_CCA_startWait>
    45de:	89 83       	std	Y+1, r24	; 0x01
   return result;
    45e0:	89 81       	ldd	r24, Y+1	; 0x01
    45e2:	99 27       	eor	r25, r25
    45e4:	22 96       	adiw	r28, 0x02	; 2
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	f8 94       	cli
    45ea:	de bf       	out	0x3e, r29	; 62
    45ec:	0f be       	out	0x3f, r0	; 63
    45ee:	cd bf       	out	0x3d, r28	; 61
    45f0:	df 91       	pop	r29
    45f2:	cf 91       	pop	r28
    45f4:	08 95       	ret

000045f6 <cc2420controlm_CC2420Control_VREFOn>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420controlm_CC2420Control_VREFOn( void )
 {
    45f6:	cf 93       	push	r28
    45f8:	df 93       	push	r29
    45fa:	cd b7       	in	r28, 0x3d	; 61
    45fc:	de b7       	in	r29, 0x3e	; 62
   LITE_SET_CC_VREN_PIN();
    45fe:	0e 94 a8 5c 	call	0xb950	; 0xb950 <LITE_SET_CC_VREN_PIN>
   LITE_uwait( 600 );
    4602:	88 e5       	ldi	r24, 0x58	; 88
    4604:	92 e0       	ldi	r25, 0x02	; 2
    4606:	0e 94 e3 59 	call	0xb3c6	; 0xb3c6 <LITE_uwait>
   return SUCCESS;
    460a:	81 e0       	ldi	r24, 0x01	; 1
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	df 91       	pop	r29
    4610:	cf 91       	pop	r28
    4612:	08 95       	ret

00004614 <cc2420controlm_CC2420Control_VREFOff>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420controlm_CC2420Control_VREFOff( void )
 {
    4614:	cf 93       	push	r28
    4616:	df 93       	push	r29
    4618:	cd b7       	in	r28, 0x3d	; 61
    461a:	de b7       	in	r29, 0x3e	; 62
   LITE_CLR_CC_VREN_PIN();
    461c:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <LITE_CLR_CC_VREN_PIN>
   LITE_uwait( 600 );
    4620:	88 e5       	ldi	r24, 0x58	; 88
    4622:	92 e0       	ldi	r25, 0x02	; 2
    4624:	0e 94 e3 59 	call	0xb3c6	; 0xb3c6 <LITE_uwait>
   return SUCCESS;
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	df 91       	pop	r29
    462e:	cf 91       	pop	r28
    4630:	08 95       	ret

00004632 <cc2420controlm_SplitControl_initDone>:
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_initDone( void ) {
    4632:	cf 93       	push	r28
    4634:	df 93       	push	r29
    4636:	cd b7       	in	r28, 0x3d	; 61
    4638:	de b7       	in	r29, 0x3e	; 62
    463a:	21 97       	sbiw	r28, 0x01	; 1
    463c:	0f b6       	in	r0, 0x3f	; 63
    463e:	f8 94       	cli
    4640:	de bf       	out	0x3e, r29	; 62
    4642:	0f be       	out	0x3f, r0	; 63
    4644:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = cc2420radiom_CC2420SplitControl_initDone();
    4646:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <cc2420radiom_CC2420SplitControl_initDone>
    464a:	89 83       	std	Y+1, r24	; 0x01
   return result;
    464c:	89 81       	ldd	r24, Y+1	; 0x01
    464e:	99 27       	eor	r25, r25
    4650:	21 96       	adiw	r28, 0x01	; 1
    4652:	0f b6       	in	r0, 0x3f	; 63
    4654:	f8 94       	cli
    4656:	de bf       	out	0x3e, r29	; 62
    4658:	0f be       	out	0x3f, r0	; 63
    465a:	cd bf       	out	0x3d, r28	; 61
    465c:	df 91       	pop	r29
    465e:	cf 91       	pop	r28
    4660:	08 95       	ret

00004662 <cc2420controlm_taskInitDone>:
}

//-------------------------------------------------------------------------
inline 
void cc2420controlm_taskInitDone( void )
 {
    4662:	cf 93       	push	r28
    4664:	df 93       	push	r29
    4666:	cd b7       	in	r28, 0x3d	; 61
    4668:	de b7       	in	r29, 0x3e	; 62
   cc2420controlm_SplitControl_initDone();
    466a:	0e 94 19 23 	call	0x4632	; 0x4632 <cc2420controlm_SplitControl_initDone>
    466e:	df 91       	pop	r29
    4670:	cf 91       	pop	r28
    4672:	08 95       	ret

00004674 <cc2420controlm_HPLChipcon_cmd>:
}

//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_cmd( uint8_t arg_0xa403928 ) {
    4674:	cf 93       	push	r28
    4676:	df 93       	push	r29
    4678:	cd b7       	in	r28, 0x3d	; 61
    467a:	de b7       	in	r29, 0x3e	; 62
    467c:	22 97       	sbiw	r28, 0x02	; 2
    467e:	0f b6       	in	r0, 0x3f	; 63
    4680:	f8 94       	cli
    4682:	de bf       	out	0x3e, r29	; 62
    4684:	0f be       	out	0x3f, r0	; 63
    4686:	cd bf       	out	0x3d, r28	; 61
    4688:	8a 83       	std	Y+2, r24	; 0x02
   unsigned char result;
   result = HPLCC2420M_HPLCC2420_cmd( arg_0xa403928 );
    468a:	8a 81       	ldd	r24, Y+2	; 0x02
    468c:	0e 94 17 51 	call	0xa22e	; 0xa22e <HPLCC2420M_HPLCC2420_cmd>
    4690:	89 83       	std	Y+1, r24	; 0x01
   return result;
    4692:	89 81       	ldd	r24, Y+1	; 0x01
    4694:	99 27       	eor	r25, r25
    4696:	22 96       	adiw	r28, 0x02	; 2
    4698:	0f b6       	in	r0, 0x3f	; 63
    469a:	f8 94       	cli
    469c:	de bf       	out	0x3e, r29	; 62
    469e:	0f be       	out	0x3f, r0	; 63
    46a0:	cd bf       	out	0x3d, r28	; 61
    46a2:	df 91       	pop	r29
    46a4:	cf 91       	pop	r28
    46a6:	08 95       	ret

000046a8 <cc2420controlm_HPLChipcon_write>:
}

//-------------------------------------------------------------------------
inline uint8_t cc2420controlm_HPLChipcon_write( uint8_t arg_0xa403d80, uint16_t arg_0xa403ed0 ) {
    46a8:	cf 93       	push	r28
    46aa:	df 93       	push	r29
    46ac:	cd b7       	in	r28, 0x3d	; 61
    46ae:	de b7       	in	r29, 0x3e	; 62
    46b0:	24 97       	sbiw	r28, 0x04	; 4
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	f8 94       	cli
    46b6:	de bf       	out	0x3e, r29	; 62
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	cd bf       	out	0x3d, r28	; 61
    46bc:	8a 83       	std	Y+2, r24	; 0x02
    46be:	7c 83       	std	Y+4, r23	; 0x04
    46c0:	6b 83       	std	Y+3, r22	; 0x03
   unsigned char result;
   result = HPLCC2420M_HPLCC2420_write( arg_0xa403d80, arg_0xa403ed0 );
    46c2:	8b 81       	ldd	r24, Y+3	; 0x03
    46c4:	9c 81       	ldd	r25, Y+4	; 0x04
    46c6:	bc 01       	movw	r22, r24
    46c8:	8a 81       	ldd	r24, Y+2	; 0x02
    46ca:	0e 94 cb 50 	call	0xa196	; 0xa196 <HPLCC2420M_HPLCC2420_write>
    46ce:	89 83       	std	Y+1, r24	; 0x01
   return result;
    46d0:	89 81       	ldd	r24, Y+1	; 0x01
    46d2:	99 27       	eor	r25, r25
    46d4:	24 96       	adiw	r28, 0x04	; 4
    46d6:	0f b6       	in	r0, 0x3f	; 63
    46d8:	f8 94       	cli
    46da:	de bf       	out	0x3e, r29	; 62
    46dc:	0f be       	out	0x3f, r0	; 63
    46de:	cd bf       	out	0x3d, r28	; 61
    46e0:	df 91       	pop	r29
    46e2:	cf 91       	pop	r28
    46e4:	08 95       	ret

000046e6 <cc2420controlm_CC2420Control_OscillatorOn>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420controlm_CC2420Control_OscillatorOn( void )
 {
    46e6:	cf 93       	push	r28
    46e8:	df 93       	push	r29
    46ea:	cd b7       	in	r28, 0x3d	; 61
    46ec:	de b7       	in	r29, 0x3e	; 62
    46ee:	23 97       	sbiw	r28, 0x03	; 3
    46f0:	0f b6       	in	r0, 0x3f	; 63
    46f2:	f8 94       	cli
    46f4:	de bf       	out	0x3e, r29	; 62
    46f6:	0f be       	out	0x3f, r0	; 63
    46f8:	cd bf       	out	0x3d, r28	; 61
   uint16_t i;
   uint8_t status;
   i = 0;
    46fa:	1b 82       	std	Y+3, r1	; 0x03
    46fc:	1a 82       	std	Y+2, r1	; 0x02
   cc2420controlm_HPLChipcon_write( 0x1D, 24 );
    46fe:	68 e1       	ldi	r22, 0x18	; 24
    4700:	70 e0       	ldi	r23, 0x00	; 0
    4702:	8d e1       	ldi	r24, 0x1D	; 29
    4704:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_CCA_startWait( TRUE );
    4708:	81 e0       	ldi	r24, 0x01	; 1
    470a:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <cc2420controlm_CCA_startWait>
   status = cc2420controlm_HPLChipcon_cmd( 0x01 );
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	0e 94 3a 23 	call	0x4674	; 0x4674 <cc2420controlm_HPLChipcon_cmd>
    4714:	89 83       	std	Y+1, r24	; 0x01
   return SUCCESS;
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	23 96       	adiw	r28, 0x03	; 3
    471c:	0f b6       	in	r0, 0x3f	; 63
    471e:	f8 94       	cli
    4720:	de bf       	out	0x3e, r29	; 62
    4722:	0f be       	out	0x3f, r0	; 63
    4724:	cd bf       	out	0x3d, r28	; 61
    4726:	df 91       	pop	r29
    4728:	cf 91       	pop	r28
    472a:	08 95       	ret

0000472c <cc2420controlm_HPLChipconControl_start>:
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_start( void ) {
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	cd b7       	in	r28, 0x3d	; 61
    4732:	de b7       	in	r29, 0x3e	; 62
    4734:	21 97       	sbiw	r28, 0x01	; 1
    4736:	0f b6       	in	r0, 0x3f	; 63
    4738:	f8 94       	cli
    473a:	de bf       	out	0x3e, r29	; 62
    473c:	0f be       	out	0x3f, r0	; 63
    473e:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = HPLTimer1M_StdControl_start();
    4740:	0e 94 bf 51 	call	0xa37e	; 0xa37e <HPLTimer1M_StdControl_start>
    4744:	89 83       	std	Y+1, r24	; 0x01
   return result;
    4746:	89 81       	ldd	r24, Y+1	; 0x01
    4748:	99 27       	eor	r25, r25
    474a:	21 96       	adiw	r28, 0x01	; 1
    474c:	0f b6       	in	r0, 0x3f	; 63
    474e:	f8 94       	cli
    4750:	de bf       	out	0x3e, r29	; 62
    4752:	0f be       	out	0x3f, r0	; 63
    4754:	cd bf       	out	0x3d, r28	; 61
    4756:	df 91       	pop	r29
    4758:	cf 91       	pop	r28
    475a:	08 95       	ret

0000475c <cc2420controlm_SplitControl_start>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420controlm_SplitControl_start( void )
 {
    475c:	cf 93       	push	r28
    475e:	df 93       	push	r29
    4760:	cd b7       	in	r28, 0x3d	; 61
    4762:	de b7       	in	r29, 0x3e	; 62
    4764:	25 97       	sbiw	r28, 0x05	; 5
    4766:	0f b6       	in	r0, 0x3f	; 63
    4768:	f8 94       	cli
    476a:	de bf       	out	0x3e, r29	; 62
    476c:	0f be       	out	0x3f, r0	; 63
    476e:	cd bf       	out	0x3d, r28	; 61
   result_t status;
   uint8_t _state = FALSE;
    4770:	1a 82       	std	Y+2, r1	; 0x02
    {
      _atomic_t _atomic = _atomic_start();
    4772:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    4776:	89 83       	std	Y+1, r24	; 0x01
       {
         if ( cc2420controlm_state == cc2420controlm_INIT_STATE_DONE ) {
    4778:	80 91 53 04 	lds	r24, 0x0453
    477c:	82 30       	cpi	r24, 0x02	; 2
    477e:	29 f4       	brne	.+10     	; 0x478a <cc2420controlm_SplitControl_start+0x2e>
            cc2420controlm_state = cc2420controlm_START_STATE;
    4780:	83 e0       	ldi	r24, 0x03	; 3
    4782:	80 93 53 04 	sts	0x0453, r24
            _state = TRUE;
    4786:	81 e0       	ldi	r24, 0x01	; 1
    4788:	8a 83       	std	Y+2, r24	; 0x02
         }
      }
      _atomic_end( _atomic );
    478a:	89 81       	ldd	r24, Y+1	; 0x01
    478c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   if (  ! _state ) {
    4790:	8a 81       	ldd	r24, Y+2	; 0x02
    4792:	88 23       	and	r24, r24
    4794:	19 f4       	brne	.+6      	; 0x479c <cc2420controlm_SplitControl_start+0x40>
      return FAIL;
    4796:	1d 82       	std	Y+5, r1	; 0x05
    4798:	1c 82       	std	Y+4, r1	; 0x04
    479a:	14 c0       	rjmp	.+40     	; 0x47c4 <cc2420controlm_SplitControl_start+0x68>
   }
   cc2420controlm_HPLChipconControl_start();
    479c:	0e 94 96 23 	call	0x472c	; 0x472c <cc2420controlm_HPLChipconControl_start>
   cc2420controlm_CC2420Control_VREFOn();
    47a0:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <cc2420controlm_CC2420Control_VREFOn>
   LITE_CLR_CC_RSTN_PIN();
    47a4:	0e 94 59 5c 	call	0xb8b2	; 0xb8b2 <LITE_CLR_CC_RSTN_PIN>
   wait_cycle();
    47a8:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <wait_cycle>
   LITE_SET_CC_RSTN_PIN();
    47ac:	0e 94 4b 5c 	call	0xb896	; 0xb896 <LITE_SET_CC_RSTN_PIN>
   wait_cycle();
    47b0:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <wait_cycle>
   status = cc2420controlm_CC2420Control_OscillatorOn();
    47b4:	0e 94 73 23 	call	0x46e6	; 0x46e6 <cc2420controlm_CC2420Control_OscillatorOn>
    47b8:	8b 83       	std	Y+3, r24	; 0x03
   return status;
    47ba:	8b 81       	ldd	r24, Y+3	; 0x03
    47bc:	28 2f       	mov	r18, r24
    47be:	33 27       	eor	r19, r19
    47c0:	3d 83       	std	Y+5, r19	; 0x05
    47c2:	2c 83       	std	Y+4, r18	; 0x04
    47c4:	8c 81       	ldd	r24, Y+4	; 0x04
    47c6:	9d 81       	ldd	r25, Y+5	; 0x05
    47c8:	25 96       	adiw	r28, 0x05	; 5
    47ca:	0f b6       	in	r0, 0x3f	; 63
    47cc:	f8 94       	cli
    47ce:	de bf       	out	0x3e, r29	; 62
    47d0:	0f be       	out	0x3f, r0	; 63
    47d2:	cd bf       	out	0x3d, r28	; 61
    47d4:	df 91       	pop	r29
    47d6:	cf 91       	pop	r28
    47d8:	08 95       	ret

000047da <cc2420controlm_CC2420Control_RxMode>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420controlm_CC2420Control_RxMode( void )
 {
    47da:	cf 93       	push	r28
    47dc:	df 93       	push	r29
    47de:	cd b7       	in	r28, 0x3d	; 61
    47e0:	de b7       	in	r29, 0x3e	; 62
   cc2420controlm_HPLChipcon_cmd( 0x03 );
    47e2:	83 e0       	ldi	r24, 0x03	; 3
    47e4:	0e 94 3a 23 	call	0x4674	; 0x4674 <cc2420controlm_HPLChipcon_cmd>
   return SUCCESS;
    47e8:	81 e0       	ldi	r24, 0x01	; 1
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	df 91       	pop	r29
    47ee:	cf 91       	pop	r28
    47f0:	08 95       	ret

000047f2 <cc2420controlm_SplitControl_startDone>:
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_SplitControl_startDone( void ) {
    47f2:	cf 93       	push	r28
    47f4:	df 93       	push	r29
    47f6:	cd b7       	in	r28, 0x3d	; 61
    47f8:	de b7       	in	r29, 0x3e	; 62
    47fa:	21 97       	sbiw	r28, 0x01	; 1
    47fc:	0f b6       	in	r0, 0x3f	; 63
    47fe:	f8 94       	cli
    4800:	de bf       	out	0x3e, r29	; 62
    4802:	0f be       	out	0x3f, r0	; 63
    4804:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = cc2420radiom_CC2420SplitControl_startDone();
    4806:	0e 94 2c 29 	call	0x5258	; 0x5258 <cc2420radiom_CC2420SplitControl_startDone>
    480a:	89 83       	std	Y+1, r24	; 0x01
   return result;
    480c:	89 81       	ldd	r24, Y+1	; 0x01
    480e:	99 27       	eor	r25, r25
    4810:	21 96       	adiw	r28, 0x01	; 1
    4812:	0f b6       	in	r0, 0x3f	; 63
    4814:	f8 94       	cli
    4816:	de bf       	out	0x3e, r29	; 62
    4818:	0f be       	out	0x3f, r0	; 63
    481a:	cd bf       	out	0x3d, r28	; 61
    481c:	df 91       	pop	r29
    481e:	cf 91       	pop	r28
    4820:	08 95       	ret

00004822 <cc2420controlm_CC2420Control_TuneManual>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420controlm_CC2420Control_TuneManual( uint16_t DesiredFreq )
 {
    4822:	cf 93       	push	r28
    4824:	df 93       	push	r29
    4826:	cd b7       	in	r28, 0x3d	; 61
    4828:	de b7       	in	r29, 0x3e	; 62
    482a:	25 97       	sbiw	r28, 0x05	; 5
    482c:	0f b6       	in	r0, 0x3f	; 63
    482e:	f8 94       	cli
    4830:	de bf       	out	0x3e, r29	; 62
    4832:	0f be       	out	0x3f, r0	; 63
    4834:	cd bf       	out	0x3d, r28	; 61
    4836:	9d 83       	std	Y+5, r25	; 0x05
    4838:	8c 83       	std	Y+4, r24	; 0x04
   int fsctrl;
   uint8_t status;
   fsctrl = DesiredFreq - 2048;
    483a:	8c 81       	ldd	r24, Y+4	; 0x04
    483c:	9d 81       	ldd	r25, Y+5	; 0x05
    483e:	80 50       	subi	r24, 0x00	; 0
    4840:	98 40       	sbci	r25, 0x08	; 8
    4842:	9b 83       	std	Y+3, r25	; 0x03
    4844:	8a 83       	std	Y+2, r24	; 0x02
   cc2420controlm_gCurrentParameters[ CP_FSCTRL ] = ( cc2420controlm_gCurrentParameters[ CP_FSCTRL ]& 0xfc00 ) | ( fsctrl << 0 );
    4846:	80 91 65 04 	lds	r24, 0x0465
    484a:	90 91 66 04 	lds	r25, 0x0466
    484e:	9c 01       	movw	r18, r24
    4850:	20 70       	andi	r18, 0x00	; 0
    4852:	3c 7f       	andi	r19, 0xFC	; 252
    4854:	8a 81       	ldd	r24, Y+2	; 0x02
    4856:	9b 81       	ldd	r25, Y+3	; 0x03
    4858:	82 2b       	or	r24, r18
    485a:	93 2b       	or	r25, r19
    485c:	90 93 66 04 	sts	0x0466, r25
    4860:	80 93 65 04 	sts	0x0465, r24
   status = cc2420controlm_HPLChipcon_write( 0x18, cc2420controlm_gCurrentParameters[ CP_FSCTRL ] );
    4864:	80 91 65 04 	lds	r24, 0x0465
    4868:	90 91 66 04 	lds	r25, 0x0466
    486c:	bc 01       	movw	r22, r24
    486e:	88 e1       	ldi	r24, 0x18	; 24
    4870:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
    4874:	89 83       	std	Y+1, r24	; 0x01
   //IF THE oscillator is running, turn on the rx mode 
   // STATUS bit 06 means that the oscillator is running or not 
   if ( status& ( 1 << 6 )) {
    4876:	89 81       	ldd	r24, Y+1	; 0x01
    4878:	99 27       	eor	r25, r25
    487a:	80 74       	andi	r24, 0x40	; 64
    487c:	90 70       	andi	r25, 0x00	; 0
    487e:	00 97       	sbiw	r24, 0x00	; 0
    4880:	19 f0       	breq	.+6      	; 0x4888 <cc2420controlm_CC2420Control_TuneManual+0x66>
      cc2420controlm_HPLChipcon_cmd( 0x03 );
    4882:	83 e0       	ldi	r24, 0x03	; 3
    4884:	0e 94 3a 23 	call	0x4674	; 0x4674 <cc2420controlm_HPLChipcon_cmd>
   }
   return SUCCESS;
    4888:	81 e0       	ldi	r24, 0x01	; 1
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	25 96       	adiw	r28, 0x05	; 5
    488e:	0f b6       	in	r0, 0x3f	; 63
    4890:	f8 94       	cli
    4892:	de bf       	out	0x3e, r29	; 62
    4894:	0f be       	out	0x3f, r0	; 63
    4896:	cd bf       	out	0x3d, r28	; 61
    4898:	df 91       	pop	r29
    489a:	cf 91       	pop	r28
    489c:	08 95       	ret

0000489e <cc2420controlm_CC2420Control_TuneChannel>:
}
//the channel must be 11 to 26
inline result_t cc2420controlm_CC2420Control_TuneChannel( uint8_t channel )
 {
    489e:	cf 93       	push	r28
    48a0:	df 93       	push	r29
    48a2:	cd b7       	in	r28, 0x3d	; 61
    48a4:	de b7       	in	r29, 0x3e	; 62
    48a6:	23 97       	sbiw	r28, 0x03	; 3
    48a8:	0f b6       	in	r0, 0x3f	; 63
    48aa:	f8 94       	cli
    48ac:	de bf       	out	0x3e, r29	; 62
    48ae:	0f be       	out	0x3f, r0	; 63
    48b0:	cd bf       	out	0x3d, r28	; 61
    48b2:	8b 83       	std	Y+3, r24	; 0x03
   uint16_t freq;
   freq = 2405+5 *( channel - 11 );
    48b4:	8b 81       	ldd	r24, Y+3	; 0x03
    48b6:	28 2f       	mov	r18, r24
    48b8:	33 27       	eor	r19, r19
    48ba:	c9 01       	movw	r24, r18
    48bc:	88 0f       	add	r24, r24
    48be:	99 1f       	adc	r25, r25
    48c0:	88 0f       	add	r24, r24
    48c2:	99 1f       	adc	r25, r25
    48c4:	82 0f       	add	r24, r18
    48c6:	93 1f       	adc	r25, r19
    48c8:	82 5d       	subi	r24, 0xD2	; 210
    48ca:	96 4f       	sbci	r25, 0xF6	; 246
    48cc:	9a 83       	std	Y+2, r25	; 0x02
    48ce:	89 83       	std	Y+1, r24	; 0x01
   cc2420controlm_CC2420Control_TuneManual( freq );
    48d0:	89 81       	ldd	r24, Y+1	; 0x01
    48d2:	9a 81       	ldd	r25, Y+2	; 0x02
    48d4:	0e 94 11 24 	call	0x4822	; 0x4822 <cc2420controlm_CC2420Control_TuneManual>
   return SUCCESS;
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	23 96       	adiw	r28, 0x03	; 3
    48de:	0f b6       	in	r0, 0x3f	; 63
    48e0:	f8 94       	cli
    48e2:	de bf       	out	0x3e, r29	; 62
    48e4:	0f be       	out	0x3f, r0	; 63
    48e6:	cd bf       	out	0x3d, r28	; 61
    48e8:	df 91       	pop	r29
    48ea:	cf 91       	pop	r28
    48ec:	08 95       	ret

000048ee <cc2420controlm_CC2420Control_TunePower>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420controlm_CC2420Control_TunePower( uint8_t powerlevel )
 {
    48ee:	cf 93       	push	r28
    48f0:	df 93       	push	r29
    48f2:	cd b7       	in	r28, 0x3d	; 61
    48f4:	de b7       	in	r29, 0x3e	; 62
    48f6:	22 97       	sbiw	r28, 0x02	; 2
    48f8:	0f b6       	in	r0, 0x3f	; 63
    48fa:	f8 94       	cli
    48fc:	de bf       	out	0x3e, r29	; 62
    48fe:	0f be       	out	0x3f, r0	; 63
    4900:	cd bf       	out	0x3d, r28	; 61
    4902:	8a 83       	std	Y+2, r24	; 0x02
   uint8_t status;
   //  cc2420controlm_gCurrentParameters[CP_FSCTRL] = (cc2420controlm_gCurrentParameters[CP_FSCTRL] & 0xfc00) | (fsctrl << 0);
   cc2420controlm_gCurrentParameters[ CP_TXCTRL ] = ( cc2420controlm_gCurrentParameters[ CP_TXCTRL ]& 0xffe0 ) | ( powerlevel& 0x1f );
    4904:	80 91 5f 04 	lds	r24, 0x045F
    4908:	90 91 60 04 	lds	r25, 0x0460
    490c:	9c 01       	movw	r18, r24
    490e:	20 7e       	andi	r18, 0xE0	; 224
    4910:	8a 81       	ldd	r24, Y+2	; 0x02
    4912:	99 27       	eor	r25, r25
    4914:	8f 71       	andi	r24, 0x1F	; 31
    4916:	90 70       	andi	r25, 0x00	; 0
    4918:	82 2b       	or	r24, r18
    491a:	93 2b       	or	r25, r19
    491c:	90 93 60 04 	sts	0x0460, r25
    4920:	80 93 5f 04 	sts	0x045F, r24
   status = cc2420controlm_HPLChipcon_write( 0x15, cc2420controlm_gCurrentParameters[ CP_FSCTRL ] );
    4924:	80 91 65 04 	lds	r24, 0x0465
    4928:	90 91 66 04 	lds	r25, 0x0466
    492c:	bc 01       	movw	r22, r24
    492e:	85 e1       	ldi	r24, 0x15	; 21
    4930:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
    4934:	89 83       	std	Y+1, r24	; 0x01
   //IF THE oscillator is running, turn on the rx mode 
   // STATUS bit 06 means that the oscillator is running or not 
   if ( status& ( 1 << 6 )) {
    4936:	89 81       	ldd	r24, Y+1	; 0x01
    4938:	99 27       	eor	r25, r25
    493a:	80 74       	andi	r24, 0x40	; 64
    493c:	90 70       	andi	r25, 0x00	; 0
    493e:	00 97       	sbiw	r24, 0x00	; 0
    4940:	19 f0       	breq	.+6      	; 0x4948 <cc2420controlm_CC2420Control_TunePower+0x5a>
      cc2420controlm_HPLChipcon_cmd( 0x03 );
    4942:	83 e0       	ldi	r24, 0x03	; 3
    4944:	0e 94 3a 23 	call	0x4674	; 0x4674 <cc2420controlm_HPLChipcon_cmd>
   }
   return SUCCESS;
    4948:	81 e0       	ldi	r24, 0x01	; 1
    494a:	90 e0       	ldi	r25, 0x00	; 0
    494c:	22 96       	adiw	r28, 0x02	; 2
    494e:	0f b6       	in	r0, 0x3f	; 63
    4950:	f8 94       	cli
    4952:	de bf       	out	0x3e, r29	; 62
    4954:	0f be       	out	0x3f, r0	; 63
    4956:	cd bf       	out	0x3d, r28	; 61
    4958:	df 91       	pop	r29
    495a:	cf 91       	pop	r28
    495c:	08 95       	ret

0000495e <setRadioFrequencyTask>:
}

//-------------------------------------------------------------------------
void setRadioFrequencyTask() {
    495e:	cf 93       	push	r28
    4960:	df 93       	push	r29
    4962:	cd b7       	in	r28, 0x3d	; 61
    4964:	de b7       	in	r29, 0x3e	; 62
    4966:	22 97       	sbiw	r28, 0x02	; 2
    4968:	0f b6       	in	r0, 0x3f	; 63
    496a:	f8 94       	cli
    496c:	de bf       	out	0x3e, r29	; 62
    496e:	0f be       	out	0x3f, r0	; 63
    4970:	cd bf       	out	0x3d, r28	; 61
   volatile uint16_t freq;
   asm volatile( "mov  %A0, r20""\n\t""mov  %B0, r21""\n\t": "=r"( freq ):  );
    4972:	84 2f       	mov	r24, r20
    4974:	95 2f       	mov	r25, r21
    4976:	9a 83       	std	Y+2, r25	; 0x02
    4978:	89 83       	std	Y+1, r24	; 0x01
   cc2420controlm_CC2420Control_TuneManual( freq );
    497a:	89 81       	ldd	r24, Y+1	; 0x01
    497c:	9a 81       	ldd	r25, Y+2	; 0x02
    497e:	0e 94 11 24 	call	0x4822	; 0x4822 <cc2420controlm_CC2420Control_TuneManual>
    4982:	22 96       	adiw	r28, 0x02	; 2
    4984:	0f b6       	in	r0, 0x3f	; 63
    4986:	f8 94       	cli
    4988:	de bf       	out	0x3e, r29	; 62
    498a:	0f be       	out	0x3f, r0	; 63
    498c:	cd bf       	out	0x3d, r28	; 61
    498e:	df 91       	pop	r29
    4990:	cf 91       	pop	r28
    4992:	08 95       	ret

00004994 <setRadioChannelTask>:
   return ;
}

//-------------------------------------------------------------------------
void setRadioChannelTask() {
    4994:	cf 93       	push	r28
    4996:	df 93       	push	r29
    4998:	cd b7       	in	r28, 0x3d	; 61
    499a:	de b7       	in	r29, 0x3e	; 62
    499c:	22 97       	sbiw	r28, 0x02	; 2
    499e:	0f b6       	in	r0, 0x3f	; 63
    49a0:	f8 94       	cli
    49a2:	de bf       	out	0x3e, r29	; 62
    49a4:	0f be       	out	0x3f, r0	; 63
    49a6:	cd bf       	out	0x3d, r28	; 61
   volatile uint16_t freq;
   asm volatile( "mov  %A0, r20""\n\t""mov  %B0, r21""\n\t": "=r"( freq ):  );
    49a8:	84 2f       	mov	r24, r20
    49aa:	95 2f       	mov	r25, r21
    49ac:	9a 83       	std	Y+2, r25	; 0x02
    49ae:	89 83       	std	Y+1, r24	; 0x01
   cc2420controlm_CC2420Control_TuneChannel( freq );
    49b0:	89 81       	ldd	r24, Y+1	; 0x01
    49b2:	9a 81       	ldd	r25, Y+2	; 0x02
    49b4:	0e 94 4f 24 	call	0x489e	; 0x489e <cc2420controlm_CC2420Control_TuneChannel>
    49b8:	22 96       	adiw	r28, 0x02	; 2
    49ba:	0f b6       	in	r0, 0x3f	; 63
    49bc:	f8 94       	cli
    49be:	de bf       	out	0x3e, r29	; 62
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	cd bf       	out	0x3d, r28	; 61
    49c4:	df 91       	pop	r29
    49c6:	cf 91       	pop	r28
    49c8:	08 95       	ret

000049ca <setRadioPowerTask>:
   return ;
}

//-------------------------------------------------------------------------
void setRadioPowerTask() {
    49ca:	cf 93       	push	r28
    49cc:	df 93       	push	r29
    49ce:	cd b7       	in	r28, 0x3d	; 61
    49d0:	de b7       	in	r29, 0x3e	; 62
    49d2:	22 97       	sbiw	r28, 0x02	; 2
    49d4:	0f b6       	in	r0, 0x3f	; 63
    49d6:	f8 94       	cli
    49d8:	de bf       	out	0x3e, r29	; 62
    49da:	0f be       	out	0x3f, r0	; 63
    49dc:	cd bf       	out	0x3d, r28	; 61
   volatile uint16_t powerlevel;
   asm volatile( "mov  %A0, r20""\n\t""mov  %B0, r21""\n\t": "=r"( powerlevel ):  );
    49de:	84 2f       	mov	r24, r20
    49e0:	95 2f       	mov	r25, r21
    49e2:	9a 83       	std	Y+2, r25	; 0x02
    49e4:	89 83       	std	Y+1, r24	; 0x01
   cc2420controlm_CC2420Control_TunePower( powerlevel );
    49e6:	89 81       	ldd	r24, Y+1	; 0x01
    49e8:	9a 81       	ldd	r25, Y+2	; 0x02
    49ea:	0e 94 77 24 	call	0x48ee	; 0x48ee <cc2420controlm_CC2420Control_TunePower>
    49ee:	22 96       	adiw	r28, 0x02	; 2
    49f0:	0f b6       	in	r0, 0x3f	; 63
    49f2:	f8 94       	cli
    49f4:	de bf       	out	0x3e, r29	; 62
    49f6:	0f be       	out	0x3f, r0	; 63
    49f8:	cd bf       	out	0x3d, r28	; 61
    49fa:	df 91       	pop	r29
    49fc:	cf 91       	pop	r28
    49fe:	08 95       	ret

00004a00 <cc2420controlm_HPLChipconRAM_writeDone>:
   return ;
}

//-------------------------------------------------------------------------
inline 
result_t cc2420controlm_HPLChipconRAM_writeDone( uint16_t addr, uint8_t length, uint8_t *buffer )
 {
    4a00:	cf 93       	push	r28
    4a02:	df 93       	push	r29
    4a04:	cd b7       	in	r28, 0x3d	; 61
    4a06:	de b7       	in	r29, 0x3e	; 62
    4a08:	25 97       	sbiw	r28, 0x05	; 5
    4a0a:	0f b6       	in	r0, 0x3f	; 63
    4a0c:	f8 94       	cli
    4a0e:	de bf       	out	0x3e, r29	; 62
    4a10:	0f be       	out	0x3f, r0	; 63
    4a12:	cd bf       	out	0x3d, r28	; 61
    4a14:	9a 83       	std	Y+2, r25	; 0x02
    4a16:	89 83       	std	Y+1, r24	; 0x01
    4a18:	6b 83       	std	Y+3, r22	; 0x03
    4a1a:	5d 83       	std	Y+5, r21	; 0x05
    4a1c:	4c 83       	std	Y+4, r20	; 0x04
   return SUCCESS;
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	25 96       	adiw	r28, 0x05	; 5
    4a24:	0f b6       	in	r0, 0x3f	; 63
    4a26:	f8 94       	cli
    4a28:	de bf       	out	0x3e, r29	; 62
    4a2a:	0f be       	out	0x3f, r0	; 63
    4a2c:	cd bf       	out	0x3d, r28	; 61
    4a2e:	df 91       	pop	r29
    4a30:	cf 91       	pop	r28
    4a32:	08 95       	ret

00004a34 <cc2420controlm_HPLChipconRAM_write>:
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconRAM_write( uint16_t arg_0xa45ad38, uint8_t arg_0xa45ae80, uint8_t *arg_0xa45afe0 ) {
    4a34:	cf 93       	push	r28
    4a36:	df 93       	push	r29
    4a38:	cd b7       	in	r28, 0x3d	; 61
    4a3a:	de b7       	in	r29, 0x3e	; 62
    4a3c:	26 97       	sbiw	r28, 0x06	; 6
    4a3e:	0f b6       	in	r0, 0x3f	; 63
    4a40:	f8 94       	cli
    4a42:	de bf       	out	0x3e, r29	; 62
    4a44:	0f be       	out	0x3f, r0	; 63
    4a46:	cd bf       	out	0x3d, r28	; 61
    4a48:	9b 83       	std	Y+3, r25	; 0x03
    4a4a:	8a 83       	std	Y+2, r24	; 0x02
    4a4c:	6c 83       	std	Y+4, r22	; 0x04
    4a4e:	5e 83       	std	Y+6, r21	; 0x06
    4a50:	4d 83       	std	Y+5, r20	; 0x05
   unsigned char result;
   result = HPLCC2420M_HPLCC2420RAM_write( arg_0xa45ad38, arg_0xa45ae80, arg_0xa45afe0 );
    4a52:	8d 81       	ldd	r24, Y+5	; 0x05
    4a54:	9e 81       	ldd	r25, Y+6	; 0x06
    4a56:	2a 81       	ldd	r18, Y+2	; 0x02
    4a58:	3b 81       	ldd	r19, Y+3	; 0x03
    4a5a:	ac 01       	movw	r20, r24
    4a5c:	6c 81       	ldd	r22, Y+4	; 0x04
    4a5e:	c9 01       	movw	r24, r18
    4a60:	0e 94 42 50 	call	0xa084	; 0xa084 <HPLCC2420M_HPLCC2420RAM_write>
    4a64:	89 83       	std	Y+1, r24	; 0x01
   return result;
    4a66:	89 81       	ldd	r24, Y+1	; 0x01
    4a68:	99 27       	eor	r25, r25
    4a6a:	26 96       	adiw	r28, 0x06	; 6
    4a6c:	0f b6       	in	r0, 0x3f	; 63
    4a6e:	f8 94       	cli
    4a70:	de bf       	out	0x3e, r29	; 62
    4a72:	0f be       	out	0x3f, r0	; 63
    4a74:	cd bf       	out	0x3d, r28	; 61
    4a76:	df 91       	pop	r29
    4a78:	cf 91       	pop	r28
    4a7a:	08 95       	ret

00004a7c <cc2420controlm_CC2420Control_setShortAddress>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420controlm_CC2420Control_setShortAddress( uint16_t addr )
 {
    4a7c:	cf 93       	push	r28
    4a7e:	df 93       	push	r29
    4a80:	cd b7       	in	r28, 0x3d	; 61
    4a82:	de b7       	in	r29, 0x3e	; 62
    4a84:	22 97       	sbiw	r28, 0x02	; 2
    4a86:	0f b6       	in	r0, 0x3f	; 63
    4a88:	f8 94       	cli
    4a8a:	de bf       	out	0x3e, r29	; 62
    4a8c:	0f be       	out	0x3f, r0	; 63
    4a8e:	cd bf       	out	0x3d, r28	; 61
    4a90:	9a 83       	std	Y+2, r25	; 0x02
    4a92:	89 83       	std	Y+1, r24	; 0x01
   addr = toLSB16( addr );
    4a94:	89 81       	ldd	r24, Y+1	; 0x01
    4a96:	9a 81       	ldd	r25, Y+2	; 0x02
    4a98:	0e 94 3e 99 	call	0x1327c	; 0x1327c <toLSB16>
    4a9c:	9a 83       	std	Y+2, r25	; 0x02
    4a9e:	89 83       	std	Y+1, r24	; 0x01
   return cc2420controlm_HPLChipconRAM_write( 0x16A, 2, ( uint8_t* )& addr );
    4aa0:	ce 01       	movw	r24, r28
    4aa2:	01 96       	adiw	r24, 0x01	; 1
    4aa4:	ac 01       	movw	r20, r24
    4aa6:	62 e0       	ldi	r22, 0x02	; 2
    4aa8:	8a e6       	ldi	r24, 0x6A	; 106
    4aaa:	91 e0       	ldi	r25, 0x01	; 1
    4aac:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <cc2420controlm_HPLChipconRAM_write>
    4ab0:	99 27       	eor	r25, r25
    4ab2:	22 96       	adiw	r28, 0x02	; 2
    4ab4:	0f b6       	in	r0, 0x3f	; 63
    4ab6:	f8 94       	cli
    4ab8:	de bf       	out	0x3e, r29	; 62
    4aba:	0f be       	out	0x3f, r0	; 63
    4abc:	cd bf       	out	0x3d, r28	; 61
    4abe:	df 91       	pop	r29
    4ac0:	cf 91       	pop	r28
    4ac2:	08 95       	ret

00004ac4 <cc2420controlm_HPLChipcon_read>:
}

//-------------------------------------------------------------------------
inline uint16_t cc2420controlm_HPLChipcon_read( uint8_t arg_0xa4103b0 ) {
    4ac4:	cf 93       	push	r28
    4ac6:	df 93       	push	r29
    4ac8:	cd b7       	in	r28, 0x3d	; 61
    4aca:	de b7       	in	r29, 0x3e	; 62
    4acc:	23 97       	sbiw	r28, 0x03	; 3
    4ace:	0f b6       	in	r0, 0x3f	; 63
    4ad0:	f8 94       	cli
    4ad2:	de bf       	out	0x3e, r29	; 62
    4ad4:	0f be       	out	0x3f, r0	; 63
    4ad6:	cd bf       	out	0x3d, r28	; 61
    4ad8:	8b 83       	std	Y+3, r24	; 0x03
   unsigned int result;
   result = HPLCC2420M_HPLCC2420_read( arg_0xa4103b0 );
    4ada:	8b 81       	ldd	r24, Y+3	; 0x03
    4adc:	0e 94 44 51 	call	0xa288	; 0xa288 <HPLCC2420M_HPLCC2420_read>
    4ae0:	9a 83       	std	Y+2, r25	; 0x02
    4ae2:	89 83       	std	Y+1, r24	; 0x01
   return result;
    4ae4:	89 81       	ldd	r24, Y+1	; 0x01
    4ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae8:	23 96       	adiw	r28, 0x03	; 3
    4aea:	0f b6       	in	r0, 0x3f	; 63
    4aec:	f8 94       	cli
    4aee:	de bf       	out	0x3e, r29	; 62
    4af0:	0f be       	out	0x3f, r0	; 63
    4af2:	cd bf       	out	0x3d, r28	; 61
    4af4:	df 91       	pop	r29
    4af6:	cf 91       	pop	r28
    4af8:	08 95       	ret

00004afa <cc2420controlm_SetRegs>:
}

//-------------------------------------------------------------------------
inline 
bool cc2420controlm_SetRegs( void )
 {
    4afa:	cf 93       	push	r28
    4afc:	df 93       	push	r29
    4afe:	cd b7       	in	r28, 0x3d	; 61
    4b00:	de b7       	in	r29, 0x3e	; 62
    4b02:	24 97       	sbiw	r28, 0x04	; 4
    4b04:	0f b6       	in	r0, 0x3f	; 63
    4b06:	f8 94       	cli
    4b08:	de bf       	out	0x3e, r29	; 62
    4b0a:	0f be       	out	0x3f, r0	; 63
    4b0c:	cd bf       	out	0x3d, r28	; 61
   uint16_t data;
   cc2420controlm_HPLChipcon_write( 0x10, cc2420controlm_gCurrentParameters[ CP_MAIN ] );
    4b0e:	80 91 55 04 	lds	r24, 0x0455
    4b12:	90 91 56 04 	lds	r25, 0x0456
    4b16:	bc 01       	movw	r22, r24
    4b18:	80 e1       	ldi	r24, 0x10	; 16
    4b1a:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_write( 0x11, cc2420controlm_gCurrentParameters[ CP_MDMCTRL0 ] );
    4b1e:	80 91 57 04 	lds	r24, 0x0457
    4b22:	90 91 58 04 	lds	r25, 0x0458
    4b26:	bc 01       	movw	r22, r24
    4b28:	81 e1       	ldi	r24, 0x11	; 17
    4b2a:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   data = cc2420controlm_HPLChipcon_read( 0x11 );
    4b2e:	81 e1       	ldi	r24, 0x11	; 17
    4b30:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <cc2420controlm_HPLChipcon_read>
    4b34:	9a 83       	std	Y+2, r25	; 0x02
    4b36:	89 83       	std	Y+1, r24	; 0x01
   if ( data != cc2420controlm_gCurrentParameters[ CP_MDMCTRL0 ] ) {
    4b38:	20 91 57 04 	lds	r18, 0x0457
    4b3c:	30 91 58 04 	lds	r19, 0x0458
    4b40:	89 81       	ldd	r24, Y+1	; 0x01
    4b42:	9a 81       	ldd	r25, Y+2	; 0x02
    4b44:	28 17       	cp	r18, r24
    4b46:	39 07       	cpc	r19, r25
    4b48:	19 f0       	breq	.+6      	; 0x4b50 <cc2420controlm_SetRegs+0x56>
      return FALSE;
    4b4a:	1c 82       	std	Y+4, r1	; 0x04
    4b4c:	1b 82       	std	Y+3, r1	; 0x03
    4b4e:	62 c0       	rjmp	.+196    	; 0x4c14 <cc2420controlm_SetRegs+0x11a>
   }
   cc2420controlm_HPLChipcon_write( 0x12, cc2420controlm_gCurrentParameters[ CP_MDMCTRL1 ] );
    4b50:	80 91 59 04 	lds	r24, 0x0459
    4b54:	90 91 5a 04 	lds	r25, 0x045A
    4b58:	bc 01       	movw	r22, r24
    4b5a:	82 e1       	ldi	r24, 0x12	; 18
    4b5c:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_write( 0x13, cc2420controlm_gCurrentParameters[ CP_RSSI ] );
    4b60:	80 91 5b 04 	lds	r24, 0x045B
    4b64:	90 91 5c 04 	lds	r25, 0x045C
    4b68:	bc 01       	movw	r22, r24
    4b6a:	83 e1       	ldi	r24, 0x13	; 19
    4b6c:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_write( 0x14, cc2420controlm_gCurrentParameters[ CP_SYNCWORD ] );
    4b70:	80 91 5d 04 	lds	r24, 0x045D
    4b74:	90 91 5e 04 	lds	r25, 0x045E
    4b78:	bc 01       	movw	r22, r24
    4b7a:	84 e1       	ldi	r24, 0x14	; 20
    4b7c:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_write( 0x15, cc2420controlm_gCurrentParameters[ CP_TXCTRL ] );
    4b80:	80 91 5f 04 	lds	r24, 0x045F
    4b84:	90 91 60 04 	lds	r25, 0x0460
    4b88:	bc 01       	movw	r22, r24
    4b8a:	85 e1       	ldi	r24, 0x15	; 21
    4b8c:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_write( 0x16, cc2420controlm_gCurrentParameters[ CP_RXCTRL0 ] );
    4b90:	80 91 61 04 	lds	r24, 0x0461
    4b94:	90 91 62 04 	lds	r25, 0x0462
    4b98:	bc 01       	movw	r22, r24
    4b9a:	86 e1       	ldi	r24, 0x16	; 22
    4b9c:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_write( 0x17, cc2420controlm_gCurrentParameters[ CP_RXCTRL1 ] );
    4ba0:	80 91 63 04 	lds	r24, 0x0463
    4ba4:	90 91 64 04 	lds	r25, 0x0464
    4ba8:	bc 01       	movw	r22, r24
    4baa:	87 e1       	ldi	r24, 0x17	; 23
    4bac:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_write( 0x18, cc2420controlm_gCurrentParameters[ CP_FSCTRL ] );
    4bb0:	80 91 65 04 	lds	r24, 0x0465
    4bb4:	90 91 66 04 	lds	r25, 0x0466
    4bb8:	bc 01       	movw	r22, r24
    4bba:	88 e1       	ldi	r24, 0x18	; 24
    4bbc:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_write( 0x19, cc2420controlm_gCurrentParameters[ CP_SECCTRL0 ] );
    4bc0:	80 91 67 04 	lds	r24, 0x0467
    4bc4:	90 91 68 04 	lds	r25, 0x0468
    4bc8:	bc 01       	movw	r22, r24
    4bca:	89 e1       	ldi	r24, 0x19	; 25
    4bcc:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_write( 0x1A, cc2420controlm_gCurrentParameters[ CP_SECCTRL1 ] );
    4bd0:	80 91 69 04 	lds	r24, 0x0469
    4bd4:	90 91 6a 04 	lds	r25, 0x046A
    4bd8:	bc 01       	movw	r22, r24
    4bda:	8a e1       	ldi	r24, 0x1A	; 26
    4bdc:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_write( 0x1C, cc2420controlm_gCurrentParameters[ CP_IOCFG0 ] );
    4be0:	80 91 6d 04 	lds	r24, 0x046D
    4be4:	90 91 6e 04 	lds	r25, 0x046E
    4be8:	bc 01       	movw	r22, r24
    4bea:	8c e1       	ldi	r24, 0x1C	; 28
    4bec:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_write( 0x1D, cc2420controlm_gCurrentParameters[ CP_IOCFG1 ] );
    4bf0:	80 91 6f 04 	lds	r24, 0x046F
    4bf4:	90 91 70 04 	lds	r25, 0x0470
    4bf8:	bc 01       	movw	r22, r24
    4bfa:	8d e1       	ldi	r24, 0x1D	; 29
    4bfc:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   cc2420controlm_HPLChipcon_cmd( 0x09 );
    4c00:	89 e0       	ldi	r24, 0x09	; 9
    4c02:	0e 94 3a 23 	call	0x4674	; 0x4674 <cc2420controlm_HPLChipcon_cmd>
   cc2420controlm_HPLChipcon_cmd( 0x08 );
    4c06:	88 e0       	ldi	r24, 0x08	; 8
    4c08:	0e 94 3a 23 	call	0x4674	; 0x4674 <cc2420controlm_HPLChipcon_cmd>
   return TRUE;
    4c0c:	81 e0       	ldi	r24, 0x01	; 1
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	9c 83       	std	Y+4, r25	; 0x04
    4c12:	8b 83       	std	Y+3, r24	; 0x03
    4c14:	8b 81       	ldd	r24, Y+3	; 0x03
    4c16:	9c 81       	ldd	r25, Y+4	; 0x04
    4c18:	24 96       	adiw	r28, 0x04	; 4
    4c1a:	0f b6       	in	r0, 0x3f	; 63
    4c1c:	f8 94       	cli
    4c1e:	de bf       	out	0x3e, r29	; 62
    4c20:	0f be       	out	0x3f, r0	; 63
    4c22:	cd bf       	out	0x3d, r28	; 61
    4c24:	df 91       	pop	r29
    4c26:	cf 91       	pop	r28
    4c28:	08 95       	ret

00004c2a <cc2420controlm_PostOscillatorOn>:
}

//-------------------------------------------------------------------------
inline 
void cc2420controlm_PostOscillatorOn( void )
 {
    4c2a:	cf 93       	push	r28
    4c2c:	df 93       	push	r29
    4c2e:	cd b7       	in	r28, 0x3d	; 61
    4c30:	de b7       	in	r29, 0x3e	; 62
    4c32:	21 97       	sbiw	r28, 0x01	; 1
    4c34:	0f b6       	in	r0, 0x3f	; 63
    4c36:	f8 94       	cli
    4c38:	de bf       	out	0x3e, r29	; 62
    4c3a:	0f be       	out	0x3f, r0	; 63
    4c3c:	cd bf       	out	0x3d, r28	; 61
   //This fucntion sets up all the registers of the radio module 
   cc2420controlm_SetRegs();
    4c3e:	0e 94 7d 25 	call	0x4afa	; 0x4afa <cc2420controlm_SetRegs>
   //This function sets up the short address of the node, and therefore, if the mac frame includes a short address, it should be matched
   cc2420controlm_CC2420Control_setShortAddress( CURRENT_NODE_ID );
    4c42:	80 91 80 07 	lds	r24, 0x0780
    4c46:	90 91 81 07 	lds	r25, 0x0781
    4c4a:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <cc2420controlm_CC2420Control_setShortAddress>
   //tHIS TURNS THE CHANELL
   cc2420controlm_CC2420Control_TuneManual((( cc2420controlm_gCurrentParameters[ CP_FSCTRL ] << 0 )& 0x1FF ) + 2048 );
    4c4e:	80 91 65 04 	lds	r24, 0x0465
    4c52:	90 91 66 04 	lds	r25, 0x0466
    4c56:	91 70       	andi	r25, 0x01	; 1
    4c58:	80 50       	subi	r24, 0x00	; 0
    4c5a:	98 4f       	sbci	r25, 0xF8	; 248
    4c5c:	0e 94 11 24 	call	0x4822	; 0x4822 <cc2420controlm_CC2420Control_TuneManual>
    {
      _atomic_t _atomic = _atomic_start();
    4c60:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    4c64:	89 83       	std	Y+1, r24	; 0x01
      cc2420controlm_state = cc2420controlm_START_STATE_DONE;
    4c66:	84 e0       	ldi	r24, 0x04	; 4
    4c68:	80 93 53 04 	sts	0x0453, r24
      _atomic_end( _atomic );
    4c6c:	89 81       	ldd	r24, Y+1	; 0x01
    4c6e:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   cc2420controlm_SplitControl_startDone();
    4c72:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <cc2420controlm_SplitControl_startDone>
    4c76:	21 96       	adiw	r28, 0x01	; 1
    4c78:	0f b6       	in	r0, 0x3f	; 63
    4c7a:	f8 94       	cli
    4c7c:	de bf       	out	0x3e, r29	; 62
    4c7e:	0f be       	out	0x3f, r0	; 63
    4c80:	cd bf       	out	0x3d, r28	; 61
    4c82:	df 91       	pop	r29
    4c84:	cf 91       	pop	r28
    4c86:	08 95       	ret

00004c88 <cc2420controlm_CCA_fired>:
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_CCA_fired( void )
 {
    4c88:	cf 93       	push	r28
    4c8a:	df 93       	push	r29
    4c8c:	cd b7       	in	r28, 0x3d	; 61
    4c8e:	de b7       	in	r29, 0x3e	; 62
   cc2420controlm_HPLChipcon_write( 0x1D, 0 );
    4c90:	60 e0       	ldi	r22, 0x00	; 0
    4c92:	70 e0       	ldi	r23, 0x00	; 0
    4c94:	8d e1       	ldi	r24, 0x1D	; 29
    4c96:	0e 94 54 23 	call	0x46a8	; 0x46a8 <cc2420controlm_HPLChipcon_write>
   postTask( cc2420controlm_PostOscillatorOn, 5 );
    4c9a:	85 e1       	ldi	r24, 0x15	; 21
    4c9c:	96 e2       	ldi	r25, 0x26	; 38
    4c9e:	65 e0       	ldi	r22, 0x05	; 5
    4ca0:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
   return FAIL;
    4ca4:	80 e0       	ldi	r24, 0x00	; 0
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	df 91       	pop	r29
    4caa:	cf 91       	pop	r28
    4cac:	08 95       	ret

00004cae <cc2420controlm_HPLChipconControl_init>:
}

//-------------------------------------------------------------------------
inline result_t cc2420controlm_HPLChipconControl_init( void ) {
    4cae:	cf 93       	push	r28
    4cb0:	df 93       	push	r29
    4cb2:	cd b7       	in	r28, 0x3d	; 61
    4cb4:	de b7       	in	r29, 0x3e	; 62
    4cb6:	21 97       	sbiw	r28, 0x01	; 1
    4cb8:	0f b6       	in	r0, 0x3f	; 63
    4cba:	f8 94       	cli
    4cbc:	de bf       	out	0x3e, r29	; 62
    4cbe:	0f be       	out	0x3f, r0	; 63
    4cc0:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = HPLCC2420M_StdControl_init();
    4cc2:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <HPLCC2420M_StdControl_init>
    4cc6:	89 83       	std	Y+1, r24	; 0x01
   result = rcombine( result, HPLTimer1M_StdControl_init());
    4cc8:	0e 94 9b 51 	call	0xa336	; 0xa336 <HPLTimer1M_StdControl_init>
    4ccc:	68 2f       	mov	r22, r24
    4cce:	89 81       	ldd	r24, Y+1	; 0x01
    4cd0:	0e 94 b2 9b 	call	0x13764	; 0x13764 <rcombine>
    4cd4:	89 83       	std	Y+1, r24	; 0x01
   return result;
    4cd6:	89 81       	ldd	r24, Y+1	; 0x01
    4cd8:	99 27       	eor	r25, r25
    4cda:	21 96       	adiw	r28, 0x01	; 1
    4cdc:	0f b6       	in	r0, 0x3f	; 63
    4cde:	f8 94       	cli
    4ce0:	de bf       	out	0x3e, r29	; 62
    4ce2:	0f be       	out	0x3f, r0	; 63
    4ce4:	cd bf       	out	0x3d, r28	; 61
    4ce6:	df 91       	pop	r29
    4ce8:	cf 91       	pop	r28
    4cea:	08 95       	ret

00004cec <cc2420radiom_SplitControl_default_initDone>:
volatile uint16_t cc2420radiom_LocalAddr;
 */
inline 
result_t cc2420radiom_SplitControl_default_initDone( void )
 {
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
    4cf0:	cd b7       	in	r28, 0x3d	; 61
    4cf2:	de b7       	in	r29, 0x3e	; 62
   return SUCCESS;
    4cf4:	81 e0       	ldi	r24, 0x01	; 1
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	df 91       	pop	r29
    4cfa:	cf 91       	pop	r28
    4cfc:	08 95       	ret

00004cfe <cc2420radiom_CC2420SplitControl_initDone>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420radiom_CC2420SplitControl_initDone( void )
 {
    4cfe:	cf 93       	push	r28
    4d00:	df 93       	push	r29
    4d02:	cd b7       	in	r28, 0x3d	; 61
    4d04:	de b7       	in	r29, 0x3e	; 62
   return cc2420radiom_SplitControl_initDone();
    4d06:	0e 94 bb 2c 	call	0x5976	; 0x5976 <cc2420radiom_SplitControl_initDone>
    4d0a:	99 27       	eor	r25, r25
    4d0c:	df 91       	pop	r29
    4d0e:	cf 91       	pop	r28
    4d10:	08 95       	ret

00004d12 <cc2420radiom_SplitControl_init>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_init( void ) {
    4d12:	cf 93       	push	r28
    4d14:	df 93       	push	r29
    4d16:	cd b7       	in	r28, 0x3d	; 61
    4d18:	de b7       	in	r29, 0x3e	; 62
    4d1a:	21 97       	sbiw	r28, 0x01	; 1
    4d1c:	0f b6       	in	r0, 0x3f	; 63
    4d1e:	f8 94       	cli
    4d20:	de bf       	out	0x3e, r29	; 62
    4d22:	0f be       	out	0x3f, r0	; 63
    4d24:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    4d26:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    4d2a:	89 83       	std	Y+1, r24	; 0x01
       {
         cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
    4d2c:	10 92 f0 04 	sts	0x04F0, r1
         cc2420radiom_currentDSN = 0;
    4d30:	10 92 74 04 	sts	0x0474, r1
         cc2420radiom_bAckEnable = FALSE;
    4d34:	10 92 ea 04 	sts	0x04EA, r1
         cc2420radiom_bPacketReceiving = FALSE;
    4d38:	10 92 75 04 	sts	0x0475, r1
         cc2420radiom_rxbufptr = &cc2420radiom_RxBuf;
    4d3c:	86 e7       	ldi	r24, 0x76	; 118
    4d3e:	94 e0       	ldi	r25, 0x04	; 4
    4d40:	90 93 73 04 	sts	0x0473, r25
    4d44:	80 93 72 04 	sts	0x0472, r24
         cc2420radiom_rxbufptr->length = 0;
    4d48:	e0 91 72 04 	lds	r30, 0x0472
    4d4c:	f0 91 73 04 	lds	r31, 0x0473
    4d50:	10 82       	st	Z, r1
      }
      _atomic_end( _atomic );
    4d52:	89 81       	ldd	r24, Y+1	; 0x01
    4d54:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   cc2420radiom_LocalAddr = CURRENT_NODE_ID;
    4d58:	80 91 80 07 	lds	r24, 0x0780
    4d5c:	90 91 81 07 	lds	r25, 0x0781
    4d60:	90 93 ed 04 	sts	0x04ED, r25
    4d64:	80 93 ec 04 	sts	0x04EC, r24
   return cc2420controlm_SplitControl_init();
    4d68:	0e 94 3d 22 	call	0x447a	; 0x447a <cc2420controlm_SplitControl_init>
    4d6c:	99 27       	eor	r25, r25
    4d6e:	21 96       	adiw	r28, 0x01	; 1
    4d70:	0f b6       	in	r0, 0x3f	; 63
    4d72:	f8 94       	cli
    4d74:	de bf       	out	0x3e, r29	; 62
    4d76:	0f be       	out	0x3f, r0	; 63
    4d78:	cd bf       	out	0x3d, r28	; 61
    4d7a:	df 91       	pop	r29
    4d7c:	cf 91       	pop	r28
    4d7e:	08 95       	ret

00004d80 <cc2420radiom_CC2420SplitControl_start>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420SplitControl_start( void ) {
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	cd b7       	in	r28, 0x3d	; 61
    4d86:	de b7       	in	r29, 0x3e	; 62
    4d88:	21 97       	sbiw	r28, 0x01	; 1
    4d8a:	0f b6       	in	r0, 0x3f	; 63
    4d8c:	f8 94       	cli
    4d8e:	de bf       	out	0x3e, r29	; 62
    4d90:	0f be       	out	0x3f, r0	; 63
    4d92:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = cc2420controlm_SplitControl_start();
    4d94:	0e 94 ae 23 	call	0x475c	; 0x475c <cc2420controlm_SplitControl_start>
    4d98:	89 83       	std	Y+1, r24	; 0x01
   return result;
    4d9a:	89 81       	ldd	r24, Y+1	; 0x01
    4d9c:	99 27       	eor	r25, r25
    4d9e:	21 96       	adiw	r28, 0x01	; 1
    4da0:	0f b6       	in	r0, 0x3f	; 63
    4da2:	f8 94       	cli
    4da4:	de bf       	out	0x3e, r29	; 62
    4da6:	0f be       	out	0x3f, r0	; 63
    4da8:	cd bf       	out	0x3d, r28	; 61
    4daa:	df 91       	pop	r29
    4dac:	cf 91       	pop	r28
    4dae:	08 95       	ret

00004db0 <cc2420radiom_SplitControl_start>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420radiom_SplitControl_start( void )
 {
    4db0:	cf 93       	push	r28
    4db2:	df 93       	push	r29
    4db4:	cd b7       	in	r28, 0x3d	; 61
    4db6:	de b7       	in	r29, 0x3e	; 62
    4db8:	25 97       	sbiw	r28, 0x05	; 5
    4dba:	0f b6       	in	r0, 0x3f	; 63
    4dbc:	f8 94       	cli
    4dbe:	de bf       	out	0x3e, r29	; 62
    4dc0:	0f be       	out	0x3f, r0	; 63
    4dc2:	cd bf       	out	0x3d, r28	; 61
   uint8_t chkstateRadio;
    {
      _atomic_t _atomic = _atomic_start();
    4dc4:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    4dc8:	8a 83       	std	Y+2, r24	; 0x02
      chkstateRadio = cc2420radiom_stateRadio;
    4dca:	80 91 f0 04 	lds	r24, 0x04F0
    4dce:	8b 83       	std	Y+3, r24	; 0x03
      _atomic_end( _atomic );
    4dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd2:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   if ( chkstateRadio == cc2420radiom_DISABLED_STATE ) {
    4dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    4dd8:	88 23       	and	r24, r24
    4dda:	b9 f4       	brne	.+46     	; 0x4e0a <cc2420radiom_SplitControl_start+0x5a>
       {
         _atomic_t _atomic = _atomic_start();
    4ddc:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    4de0:	89 83       	std	Y+1, r24	; 0x01
          {
            cc2420radiom_stateRadio = cc2420radiom_WARMUP_STATE;
    4de2:	8a e0       	ldi	r24, 0x0A	; 10
    4de4:	80 93 f0 04 	sts	0x04F0, r24
            cc2420radiom_countRetry = 0;
    4de8:	10 92 eb 04 	sts	0x04EB, r1
            cc2420radiom_rxbufptr->length = 0;
    4dec:	e0 91 72 04 	lds	r30, 0x0472
    4df0:	f0 91 73 04 	lds	r31, 0x0473
    4df4:	10 82       	st	Z, r1
         }
         _atomic_end( _atomic );
    4df6:	89 81       	ldd	r24, Y+1	; 0x01
    4df8:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      }
      return cc2420radiom_CC2420SplitControl_start();
    4dfc:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <cc2420radiom_CC2420SplitControl_start>
    4e00:	28 2f       	mov	r18, r24
    4e02:	33 27       	eor	r19, r19
    4e04:	3d 83       	std	Y+5, r19	; 0x05
    4e06:	2c 83       	std	Y+4, r18	; 0x04
    4e08:	02 c0       	rjmp	.+4      	; 0x4e0e <cc2420radiom_SplitControl_start+0x5e>
   }
   return FAIL;
    4e0a:	1d 82       	std	Y+5, r1	; 0x05
    4e0c:	1c 82       	std	Y+4, r1	; 0x04
    4e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e10:	9d 81       	ldd	r25, Y+5	; 0x05
    4e12:	25 96       	adiw	r28, 0x05	; 5
    4e14:	0f b6       	in	r0, 0x3f	; 63
    4e16:	f8 94       	cli
    4e18:	de bf       	out	0x3e, r29	; 62
    4e1a:	0f be       	out	0x3f, r0	; 63
    4e1c:	cd bf       	out	0x3d, r28	; 61
    4e1e:	df 91       	pop	r29
    4e20:	cf 91       	pop	r28
    4e22:	08 95       	ret

00004e24 <cc2420radiom_startRadio>:
}

//-------------------------------------------------------------------------
inline 
void cc2420radiom_startRadio( void )
 {
    4e24:	cf 93       	push	r28
    4e26:	df 93       	push	r29
    4e28:	cd b7       	in	r28, 0x3d	; 61
    4e2a:	de b7       	in	r29, 0x3e	; 62
    4e2c:	22 97       	sbiw	r28, 0x02	; 2
    4e2e:	0f b6       	in	r0, 0x3f	; 63
    4e30:	f8 94       	cli
    4e32:	de bf       	out	0x3e, r29	; 62
    4e34:	0f be       	out	0x3f, r0	; 63
    4e36:	cd bf       	out	0x3d, r28	; 61
   result_t success = FAIL;
    4e38:	1a 82       	std	Y+2, r1	; 0x02
    {
      _atomic_t _atomic = _atomic_start();
    4e3a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    4e3e:	89 83       	std	Y+1, r24	; 0x01
       {
         if ( cc2420radiom_stateRadio == cc2420radiom_DISABLED_STATE_STARTTASK ) {
    4e40:	80 91 f0 04 	lds	r24, 0x04F0
    4e44:	81 30       	cpi	r24, 0x01	; 1
    4e46:	21 f4       	brne	.+8      	; 0x4e50 <cc2420radiom_startRadio+0x2c>
            cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE;
    4e48:	10 92 f0 04 	sts	0x04F0, r1
            success = SUCCESS;
    4e4c:	81 e0       	ldi	r24, 0x01	; 1
    4e4e:	8a 83       	std	Y+2, r24	; 0x02
         }
      }
      _atomic_end( _atomic );
    4e50:	89 81       	ldd	r24, Y+1	; 0x01
    4e52:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   if ( success == SUCCESS ) {
    4e56:	8a 81       	ldd	r24, Y+2	; 0x02
    4e58:	81 30       	cpi	r24, 0x01	; 1
    4e5a:	11 f4       	brne	.+4      	; 0x4e60 <cc2420radiom_startRadio+0x3c>
      cc2420radiom_SplitControl_start();
    4e5c:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <cc2420radiom_SplitControl_start>
    4e60:	22 96       	adiw	r28, 0x02	; 2
    4e62:	0f b6       	in	r0, 0x3f	; 63
    4e64:	f8 94       	cli
    4e66:	de bf       	out	0x3e, r29	; 62
    4e68:	0f be       	out	0x3f, r0	; 63
    4e6a:	cd bf       	out	0x3d, r28	; 61
    4e6c:	df 91       	pop	r29
    4e6e:	cf 91       	pop	r28
    4e70:	08 95       	ret

00004e72 <cc2420radiom_StdControl_start>:
   }
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_StdControl_start( void )
 {
    4e72:	cf 93       	push	r28
    4e74:	df 93       	push	r29
    4e76:	cd b7       	in	r28, 0x3d	; 61
    4e78:	de b7       	in	r29, 0x3e	; 62
    4e7a:	22 97       	sbiw	r28, 0x02	; 2
    4e7c:	0f b6       	in	r0, 0x3f	; 63
    4e7e:	f8 94       	cli
    4e80:	de bf       	out	0x3e, r29	; 62
    4e82:	0f be       	out	0x3f, r0	; 63
    4e84:	cd bf       	out	0x3d, r28	; 61
   result_t success = FAIL;
    4e86:	1a 82       	std	Y+2, r1	; 0x02
    {
      _atomic_t _atomic = _atomic_start();
    4e88:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    4e8c:	89 83       	std	Y+1, r24	; 0x01
       {
         if ( cc2420radiom_stateRadio == cc2420radiom_DISABLED_STATE ) {
    4e8e:	80 91 f0 04 	lds	r24, 0x04F0
    4e92:	88 23       	and	r24, r24
    4e94:	61 f4       	brne	.+24     	; 0x4eae <cc2420radiom_StdControl_start+0x3c>
            if ( postTask( cc2420radiom_startRadio, 5 )) {
    4e96:	82 e1       	ldi	r24, 0x12	; 18
    4e98:	97 e2       	ldi	r25, 0x27	; 39
    4e9a:	65 e0       	ldi	r22, 0x05	; 5
    4e9c:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    4ea0:	88 23       	and	r24, r24
    4ea2:	29 f0       	breq	.+10     	; 0x4eae <cc2420radiom_StdControl_start+0x3c>
               success = SUCCESS;
    4ea4:	81 e0       	ldi	r24, 0x01	; 1
    4ea6:	8a 83       	std	Y+2, r24	; 0x02
               cc2420radiom_stateRadio = cc2420radiom_DISABLED_STATE_STARTTASK;
    4ea8:	81 e0       	ldi	r24, 0x01	; 1
    4eaa:	80 93 f0 04 	sts	0x04F0, r24
            }
         }
      }
      _atomic_end( _atomic );
    4eae:	89 81       	ldd	r24, Y+1	; 0x01
    4eb0:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   return success;
    4eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb6:	99 27       	eor	r25, r25
    4eb8:	22 96       	adiw	r28, 0x02	; 2
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	f8 94       	cli
    4ebe:	de bf       	out	0x3e, r29	; 62
    4ec0:	0f be       	out	0x3f, r0	; 63
    4ec2:	cd bf       	out	0x3d, r28	; 61
    4ec4:	df 91       	pop	r29
    4ec6:	cf 91       	pop	r28
    4ec8:	08 95       	ret

00004eca <cc2420radiom_SplitControl_default_startDone>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420radiom_SplitControl_default_startDone( void )
 {
    4eca:	cf 93       	push	r28
    4ecc:	df 93       	push	r29
    4ece:	cd b7       	in	r28, 0x3d	; 61
    4ed0:	de b7       	in	r29, 0x3e	; 62
   return SUCCESS;
    4ed2:	81 e0       	ldi	r24, 0x01	; 1
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	df 91       	pop	r29
    4ed8:	cf 91       	pop	r28
    4eda:	08 95       	ret

00004edc <cc2420radiom_SplitControl_startDone>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_startDone( void ) {
    4edc:	cf 93       	push	r28
    4ede:	df 93       	push	r29
    4ee0:	cd b7       	in	r28, 0x3d	; 61
    4ee2:	de b7       	in	r29, 0x3e	; 62
    4ee4:	21 97       	sbiw	r28, 0x01	; 1
    4ee6:	0f b6       	in	r0, 0x3f	; 63
    4ee8:	f8 94       	cli
    4eea:	de bf       	out	0x3e, r29	; 62
    4eec:	0f be       	out	0x3f, r0	; 63
    4eee:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = cc2420radiom_SplitControl_default_startDone();
    4ef0:	0e 94 65 27 	call	0x4eca	; 0x4eca <cc2420radiom_SplitControl_default_startDone>
    4ef4:	89 83       	std	Y+1, r24	; 0x01
   return result;
    4ef6:	89 81       	ldd	r24, Y+1	; 0x01
    4ef8:	99 27       	eor	r25, r25
    4efa:	21 96       	adiw	r28, 0x01	; 1
    4efc:	0f b6       	in	r0, 0x3f	; 63
    4efe:	f8 94       	cli
    4f00:	de bf       	out	0x3e, r29	; 62
    4f02:	0f be       	out	0x3f, r0	; 63
    4f04:	cd bf       	out	0x3d, r28	; 61
    4f06:	df 91       	pop	r29
    4f08:	cf 91       	pop	r28
    4f0a:	08 95       	ret

00004f0c <cc2420radiom_SFD_enableCapture>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_enableCapture( bool arg_0xa41e260 ) {
    4f0c:	cf 93       	push	r28
    4f0e:	df 93       	push	r29
    4f10:	cd b7       	in	r28, 0x3d	; 61
    4f12:	de b7       	in	r29, 0x3e	; 62
    4f14:	22 97       	sbiw	r28, 0x02	; 2
    4f16:	0f b6       	in	r0, 0x3f	; 63
    4f18:	f8 94       	cli
    4f1a:	de bf       	out	0x3e, r29	; 62
    4f1c:	0f be       	out	0x3f, r0	; 63
    4f1e:	cd bf       	out	0x3d, r28	; 61
    4f20:	8a 83       	std	Y+2, r24	; 0x02
   unsigned char result;
   result = hplcc2420interruptm_SFD_enableCapture( arg_0xa41e260 );
    4f22:	8a 81       	ldd	r24, Y+2	; 0x02
    4f24:	0e 94 14 4f 	call	0x9e28	; 0x9e28 <hplcc2420interruptm_SFD_enableCapture>
    4f28:	89 83       	std	Y+1, r24	; 0x01
   return result;
    4f2a:	89 81       	ldd	r24, Y+1	; 0x01
    4f2c:	99 27       	eor	r25, r25
    4f2e:	22 96       	adiw	r28, 0x02	; 2
    4f30:	0f b6       	in	r0, 0x3f	; 63
    4f32:	f8 94       	cli
    4f34:	de bf       	out	0x3e, r29	; 62
    4f36:	0f be       	out	0x3f, r0	; 63
    4f38:	cd bf       	out	0x3d, r28	; 61
    4f3a:	df 91       	pop	r29
    4f3c:	cf 91       	pop	r28
    4f3e:	08 95       	ret

00004f40 <cc2420radiom_HPLChipcon_cmd>:
}

//-------------------------------------------------------------------------
inline uint8_t cc2420radiom_HPLChipcon_cmd( uint8_t arg_0xa403928 ) {
    4f40:	cf 93       	push	r28
    4f42:	df 93       	push	r29
    4f44:	cd b7       	in	r28, 0x3d	; 61
    4f46:	de b7       	in	r29, 0x3e	; 62
    4f48:	22 97       	sbiw	r28, 0x02	; 2
    4f4a:	0f b6       	in	r0, 0x3f	; 63
    4f4c:	f8 94       	cli
    4f4e:	de bf       	out	0x3e, r29	; 62
    4f50:	0f be       	out	0x3f, r0	; 63
    4f52:	cd bf       	out	0x3d, r28	; 61
    4f54:	8a 83       	std	Y+2, r24	; 0x02
   unsigned char result;
   result = HPLCC2420M_HPLCC2420_cmd( arg_0xa403928 );
    4f56:	8a 81       	ldd	r24, Y+2	; 0x02
    4f58:	0e 94 17 51 	call	0xa22e	; 0xa22e <HPLCC2420M_HPLCC2420_cmd>
    4f5c:	89 83       	std	Y+1, r24	; 0x01
   return result;
    4f5e:	89 81       	ldd	r24, Y+1	; 0x01
    4f60:	99 27       	eor	r25, r25
    4f62:	22 96       	adiw	r28, 0x02	; 2
    4f64:	0f b6       	in	r0, 0x3f	; 63
    4f66:	f8 94       	cli
    4f68:	de bf       	out	0x3e, r29	; 62
    4f6a:	0f be       	out	0x3f, r0	; 63
    4f6c:	cd bf       	out	0x3d, r28	; 61
    4f6e:	df 91       	pop	r29
    4f70:	cf 91       	pop	r28
    4f72:	08 95       	ret

00004f74 <cc2420radiom_sendPacket>:
}

//-------------------------------------------------------------------------
inline 
void cc2420radiom_sendPacket( void )
 {
    4f74:	cf 93       	push	r28
    4f76:	df 93       	push	r29
    4f78:	cd b7       	in	r28, 0x3d	; 61
    4f7a:	de b7       	in	r29, 0x3e	; 62
    4f7c:	21 97       	sbiw	r28, 0x01	; 1
    4f7e:	0f b6       	in	r0, 0x3f	; 63
    4f80:	f8 94       	cli
    4f82:	de bf       	out	0x3e, r29	; 62
    4f84:	0f be       	out	0x3f, r0	; 63
    4f86:	cd bf       	out	0x3d, r28	; 61
   uint8_t status;
   cc2420radiom_HPLChipcon_cmd( 0x05 );
    4f88:	85 e0       	ldi	r24, 0x05	; 5
    4f8a:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <cc2420radiom_HPLChipcon_cmd>
   status = cc2420radiom_HPLChipcon_cmd( 0x00 );
    4f8e:	80 e0       	ldi	r24, 0x00	; 0
    4f90:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <cc2420radiom_HPLChipcon_cmd>
    4f94:	89 83       	std	Y+1, r24	; 0x01
   if (( status >> 3 )& 0x01 ) {
    4f96:	89 81       	ldd	r24, Y+1	; 0x01
    4f98:	86 95       	lsr	r24
    4f9a:	86 95       	lsr	r24
    4f9c:	86 95       	lsr	r24
    4f9e:	99 27       	eor	r25, r25
    4fa0:	81 70       	andi	r24, 0x01	; 1
    4fa2:	90 70       	andi	r25, 0x00	; 0
    4fa4:	88 23       	and	r24, r24
    4fa6:	21 f0       	breq	.+8      	; 0x4fb0 <cc2420radiom_sendPacket+0x3c>
      cc2420radiom_SFD_enableCapture( TRUE );
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <cc2420radiom_SFD_enableCapture>
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <cc2420radiom_sendPacket+0x40>
   } else {
      cc2420radiom_sendFailed();
    4fb0:	0e 94 0a 2c 	call	0x5814	; 0x5814 <cc2420radiom_sendFailed>
    4fb4:	21 96       	adiw	r28, 0x01	; 1
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	f8 94       	cli
    4fba:	de bf       	out	0x3e, r29	; 62
    4fbc:	0f be       	out	0x3f, r0	; 63
    4fbe:	cd bf       	out	0x3d, r28	; 61
    4fc0:	df 91       	pop	r29
    4fc2:	cf 91       	pop	r28
    4fc4:	08 95       	ret

00004fc6 <cc2420radiom_tryToSend>:
   }
}

//-------------------------------------------------------------------------
inline 
void cc2420radiom_tryToSend( void )
 {
    4fc6:	cf 93       	push	r28
    4fc8:	df 93       	push	r29
    4fca:	cd b7       	in	r28, 0x3d	; 61
    4fcc:	de b7       	in	r29, 0x3e	; 62
    4fce:	23 97       	sbiw	r28, 0x03	; 3
    4fd0:	0f b6       	in	r0, 0x3f	; 63
    4fd2:	f8 94       	cli
    4fd4:	de bf       	out	0x3e, r29	; 62
    4fd6:	0f be       	out	0x3f, r0	; 63
    4fd8:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentstate;
    {
      _atomic_t _atomic = _atomic_start();
    4fda:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    4fde:	8a 83       	std	Y+2, r24	; 0x02
      currentstate = cc2420radiom_stateRadio;
    4fe0:	80 91 f0 04 	lds	r24, 0x04F0
    4fe4:	8b 83       	std	Y+3, r24	; 0x03
      _atomic_end( _atomic );
    4fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe8:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   if ( currentstate == cc2420radiom_PRE_TX_STATE ) {
    4fec:	8b 81       	ldd	r24, Y+3	; 0x03
    4fee:	85 30       	cpi	r24, 0x05	; 5
    4ff0:	d1 f4       	brne	.+52     	; 0x5026 <cc2420radiom_tryToSend+0x60>
      if (  ! LITE_READ_CC_FIFO_PIN() &&  ! LITE_READ_CC_FIFOP_PIN()) {
    4ff2:	0e 94 db 5e 	call	0xbdb6	; 0xbdb6 <LITE_READ_CC_FIFO_PIN>
    4ff6:	00 97       	sbiw	r24, 0x00	; 0
    4ff8:	31 f4       	brne	.+12     	; 0x5006 <cc2420radiom_tryToSend+0x40>
    4ffa:	0e 94 21 5d 	call	0xba42	; 0xba42 <LITE_READ_CC_FIFOP_PIN>
    4ffe:	00 97       	sbiw	r24, 0x00	; 0
    5000:	11 f4       	brne	.+4      	; 0x5006 <cc2420radiom_tryToSend+0x40>
         cc2420radiom_flushRXFIFO();
    5002:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
      }
      if ( LITE_READ_RADIO_CCA_PIN()) {
    5006:	0e 94 34 5f 	call	0xbe68	; 0xbe68 <LITE_READ_RADIO_CCA_PIN>
    500a:	00 97       	sbiw	r24, 0x00	; 0
    500c:	71 f0       	breq	.+28     	; 0x502a <cc2420radiom_tryToSend+0x64>
          {
            _atomic_t _atomic = _atomic_start();
    500e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5012:	89 83       	std	Y+1, r24	; 0x01
            cc2420radiom_stateRadio = cc2420radiom_TX_STATE;
    5014:	83 e0       	ldi	r24, 0x03	; 3
    5016:	80 93 f0 04 	sts	0x04F0, r24
            _atomic_end( _atomic );
    501a:	89 81       	ldd	r24, Y+1	; 0x01
    501c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
         }
         cc2420radiom_sendPacket();
    5020:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <cc2420radiom_sendPacket>
    5024:	02 c0       	rjmp	.+4      	; 0x502a <cc2420radiom_tryToSend+0x64>
      }
   } else {
      cc2420radiom_flushRXFIFO();
    5026:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
    502a:	23 96       	adiw	r28, 0x03	; 3
    502c:	0f b6       	in	r0, 0x3f	; 63
    502e:	f8 94       	cli
    5030:	de bf       	out	0x3e, r29	; 62
    5032:	0f be       	out	0x3f, r0	; 63
    5034:	cd bf       	out	0x3d, r28	; 61
    5036:	df 91       	pop	r29
    5038:	cf 91       	pop	r28
    503a:	08 95       	ret

0000503c <cc2420radiom_HPLChipconFIFO_TXFIFODone>:
   } 
}

//-------------------------------------------------------------------------
inline 
result_t cc2420radiom_HPLChipconFIFO_TXFIFODone( uint8_t length, uint8_t *data )
 {
    503c:	cf 93       	push	r28
    503e:	df 93       	push	r29
    5040:	cd b7       	in	r28, 0x3d	; 61
    5042:	de b7       	in	r29, 0x3e	; 62
    5044:	23 97       	sbiw	r28, 0x03	; 3
    5046:	0f b6       	in	r0, 0x3f	; 63
    5048:	f8 94       	cli
    504a:	de bf       	out	0x3e, r29	; 62
    504c:	0f be       	out	0x3f, r0	; 63
    504e:	cd bf       	out	0x3d, r28	; 61
    5050:	89 83       	std	Y+1, r24	; 0x01
    5052:	7b 83       	std	Y+3, r23	; 0x03
    5054:	6a 83       	std	Y+2, r22	; 0x02
   cc2420radiom_tryToSend();
    5056:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <cc2420radiom_tryToSend>
   return SUCCESS;
    505a:	81 e0       	ldi	r24, 0x01	; 1
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	23 96       	adiw	r28, 0x03	; 3
    5060:	0f b6       	in	r0, 0x3f	; 63
    5062:	f8 94       	cli
    5064:	de bf       	out	0x3e, r29	; 62
    5066:	0f be       	out	0x3f, r0	; 63
    5068:	cd bf       	out	0x3d, r28	; 61
    506a:	df 91       	pop	r29
    506c:	cf 91       	pop	r28
    506e:	08 95       	ret

00005070 <cc2420radiom_HPLChipconFIFO_writeTXFIFO>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_HPLChipconFIFO_writeTXFIFO( uint8_t arg_0xa40c010, uint8_t *arg_0xa40c170 ) {
    5070:	cf 93       	push	r28
    5072:	df 93       	push	r29
    5074:	cd b7       	in	r28, 0x3d	; 61
    5076:	de b7       	in	r29, 0x3e	; 62
    5078:	24 97       	sbiw	r28, 0x04	; 4
    507a:	0f b6       	in	r0, 0x3f	; 63
    507c:	f8 94       	cli
    507e:	de bf       	out	0x3e, r29	; 62
    5080:	0f be       	out	0x3f, r0	; 63
    5082:	cd bf       	out	0x3d, r28	; 61
    5084:	8a 83       	std	Y+2, r24	; 0x02
    5086:	7c 83       	std	Y+4, r23	; 0x04
    5088:	6b 83       	std	Y+3, r22	; 0x03
   unsigned char result;
   result = hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO( arg_0xa40c010, arg_0xa40c170 );
    508a:	8b 81       	ldd	r24, Y+3	; 0x03
    508c:	9c 81       	ldd	r25, Y+4	; 0x04
    508e:	bc 01       	movw	r22, r24
    5090:	8a 81       	ldd	r24, Y+2	; 0x02
    5092:	0e 94 76 4b 	call	0x96ec	; 0x96ec <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>
    5096:	89 83       	std	Y+1, r24	; 0x01
   return result;
    5098:	89 81       	ldd	r24, Y+1	; 0x01
    509a:	99 27       	eor	r25, r25
    509c:	24 96       	adiw	r28, 0x04	; 4
    509e:	0f b6       	in	r0, 0x3f	; 63
    50a0:	f8 94       	cli
    50a2:	de bf       	out	0x3e, r29	; 62
    50a4:	0f be       	out	0x3f, r0	; 63
    50a6:	cd bf       	out	0x3d, r28	; 61
    50a8:	df 91       	pop	r29
    50aa:	cf 91       	pop	r28
    50ac:	08 95       	ret

000050ae <cc2420radiom_startSend>:
}

//-------------------------------------------------------------------------
inline 
void cc2420radiom_startSend( void )
 {
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
    50b2:	cd b7       	in	r28, 0x3d	; 61
    50b4:	de b7       	in	r29, 0x3e	; 62
   if (  ! cc2420radiom_HPLChipcon_cmd( 0x09 )) {
    50b6:	89 e0       	ldi	r24, 0x09	; 9
    50b8:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <cc2420radiom_HPLChipcon_cmd>
    50bc:	88 23       	and	r24, r24
    50be:	19 f4       	brne	.+6      	; 0x50c6 <cc2420radiom_startSend+0x18>
      cc2420radiom_sendFailed();
    50c0:	0e 94 0a 2c 	call	0x5814	; 0x5814 <cc2420radiom_sendFailed>
      return ;
    50c4:	0f c0       	rjmp	.+30     	; 0x50e4 <cc2420radiom_startSend+0x36>
   }
   if (  ! cc2420radiom_HPLChipconFIFO_writeTXFIFO( cc2420radiom_txlength + 1, ( uint8_t* )cc2420radiom_txbufptr )) {
    50c6:	80 91 ee 04 	lds	r24, 0x04EE
    50ca:	90 91 ef 04 	lds	r25, 0x04EF
    50ce:	9c 01       	movw	r18, r24
    50d0:	80 91 f1 04 	lds	r24, 0x04F1
    50d4:	8f 5f       	subi	r24, 0xFF	; 255
    50d6:	b9 01       	movw	r22, r18
    50d8:	0e 94 38 28 	call	0x5070	; 0x5070 <cc2420radiom_HPLChipconFIFO_writeTXFIFO>
    50dc:	88 23       	and	r24, r24
    50de:	11 f4       	brne	.+4      	; 0x50e4 <cc2420radiom_startSend+0x36>
      cc2420radiom_sendFailed();
    50e0:	0e 94 0a 2c 	call	0x5814	; 0x5814 <cc2420radiom_sendFailed>
    50e4:	df 91       	pop	r29
    50e6:	cf 91       	pop	r28
    50e8:	08 95       	ret

000050ea <cc2420radiom_Send_send>:
      return ;
   }
}

//-------------------------------------------------------------------------
inline 
result_t cc2420radiom_Send_send( Radio_MsgPtr pMsg )
 {
    50ea:	cf 93       	push	r28
    50ec:	df 93       	push	r29
    50ee:	cd b7       	in	r28, 0x3d	; 61
    50f0:	de b7       	in	r29, 0x3e	; 62
    50f2:	27 97       	sbiw	r28, 0x07	; 7
    50f4:	0f b6       	in	r0, 0x3f	; 63
    50f6:	f8 94       	cli
    50f8:	de bf       	out	0x3e, r29	; 62
    50fa:	0f be       	out	0x3f, r0	; 63
    50fc:	cd bf       	out	0x3d, r28	; 61
    50fe:	9d 83       	std	Y+5, r25	; 0x05
    5100:	8c 83       	std	Y+4, r24	; 0x04
   uint8_t currentstate;
    {
      _atomic_t _atomic = _atomic_start();
    5102:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5106:	8a 83       	std	Y+2, r24	; 0x02
      currentstate = cc2420radiom_stateRadio;
    5108:	80 91 f0 04 	lds	r24, 0x04F0
    510c:	8b 83       	std	Y+3, r24	; 0x03
      _atomic_end( _atomic );
    510e:	8a 81       	ldd	r24, Y+2	; 0x02
    5110:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   if ( currentstate == cc2420radiom_IDLE_STATE ) {
    5114:	8b 81       	ldd	r24, Y+3	; 0x03
    5116:	82 30       	cpi	r24, 0x02	; 2
    5118:	09 f0       	breq	.+2      	; 0x511c <cc2420radiom_Send_send+0x32>
    511a:	5f c0       	rjmp	.+190    	; 0x51da <cc2420radiom_Send_send+0xf0>
      pMsg->fcflo = 0x08;
    511c:	ec 81       	ldd	r30, Y+4	; 0x04
    511e:	fd 81       	ldd	r31, Y+5	; 0x05
    5120:	88 e0       	ldi	r24, 0x08	; 8
    5122:	82 83       	std	Z+2, r24	; 0x02
      if ( cc2420radiom_bAckEnable ) {
    5124:	80 91 ea 04 	lds	r24, 0x04EA
    5128:	88 23       	and	r24, r24
    512a:	29 f0       	breq	.+10     	; 0x5136 <cc2420radiom_Send_send+0x4c>
         pMsg->fcfhi = 0x21;
    512c:	ec 81       	ldd	r30, Y+4	; 0x04
    512e:	fd 81       	ldd	r31, Y+5	; 0x05
    5130:	81 e2       	ldi	r24, 0x21	; 33
    5132:	81 83       	std	Z+1, r24	; 0x01
    5134:	04 c0       	rjmp	.+8      	; 0x513e <cc2420radiom_Send_send+0x54>
      } else {
         pMsg->fcfhi = 0x01;
    5136:	ec 81       	ldd	r30, Y+4	; 0x04
    5138:	fd 81       	ldd	r31, Y+5	; 0x05
    513a:	81 e0       	ldi	r24, 0x01	; 1
    513c:	81 83       	std	Z+1, r24	; 0x01
      }
      pMsg->destpan = BCAST_ADDRESS;
    513e:	ec 81       	ldd	r30, Y+4	; 0x04
    5140:	fd 81       	ldd	r31, Y+5	; 0x05
    5142:	8f ef       	ldi	r24, 0xFF	; 255
    5144:	9f ef       	ldi	r25, 0xFF	; 255
    5146:	95 83       	std	Z+5, r25	; 0x05
    5148:	84 83       	std	Z+4, r24	; 0x04
      //don't understand why it has to be LSB. Must check later. 
      pMsg->addr = toLSB16( pMsg->addr );
    514a:	ec 81       	ldd	r30, Y+4	; 0x04
    514c:	fd 81       	ldd	r31, Y+5	; 0x05
    514e:	86 81       	ldd	r24, Z+6	; 0x06
    5150:	97 81       	ldd	r25, Z+7	; 0x07
    5152:	0e 94 3e 99 	call	0x1327c	; 0x1327c <toLSB16>
    5156:	ec 81       	ldd	r30, Y+4	; 0x04
    5158:	fd 81       	ldd	r31, Y+5	; 0x05
    515a:	97 83       	std	Z+7, r25	; 0x07
    515c:	86 83       	std	Z+6, r24	; 0x06
      //The length now includes both the 
      pMsg->length = pMsg->length + MSG_HEADER_SIZE + MSG_FOOTER_SIZE;
    515e:	ec 81       	ldd	r30, Y+4	; 0x04
    5160:	fd 81       	ldd	r31, Y+5	; 0x05
    5162:	80 81       	ld	r24, Z
    5164:	85 5f       	subi	r24, 0xF5	; 245
    5166:	ec 81       	ldd	r30, Y+4	; 0x04
    5168:	fd 81       	ldd	r31, Y+5	; 0x05
    516a:	80 83       	st	Z, r24
      pMsg->dsn =  ++cc2420radiom_currentDSN;
    516c:	80 91 74 04 	lds	r24, 0x0474
    5170:	8f 5f       	subi	r24, 0xFF	; 255
    5172:	80 93 74 04 	sts	0x0474, r24
    5176:	80 91 74 04 	lds	r24, 0x0474
    517a:	ec 81       	ldd	r30, Y+4	; 0x04
    517c:	fd 81       	ldd	r31, Y+5	; 0x05
    517e:	83 83       	std	Z+3, r24	; 0x03
      pMsg->time = 0;
    5180:	8c 81       	ldd	r24, Y+4	; 0x04
    5182:	9d 81       	ldd	r25, Y+5	; 0x05
    5184:	fc 01       	movw	r30, r24
    5186:	ee 58       	subi	r30, 0x8E	; 142
    5188:	ff 4f       	sbci	r31, 0xFF	; 255
    518a:	11 82       	std	Z+1, r1	; 0x01
    518c:	10 82       	st	Z, r1
      cc2420radiom_txlength = pMsg->length - MSG_FOOTER_SIZE;
    518e:	ec 81       	ldd	r30, Y+4	; 0x04
    5190:	fd 81       	ldd	r31, Y+5	; 0x05
    5192:	80 81       	ld	r24, Z
    5194:	82 50       	subi	r24, 0x02	; 2
    5196:	80 93 f1 04 	sts	0x04F1, r24
      cc2420radiom_txbufptr = pMsg;
    519a:	8c 81       	ldd	r24, Y+4	; 0x04
    519c:	9d 81       	ldd	r25, Y+5	; 0x05
    519e:	90 93 ef 04 	sts	0x04EF, r25
    51a2:	80 93 ee 04 	sts	0x04EE, r24
      cc2420radiom_countRetry = 8;
    51a6:	88 e0       	ldi	r24, 0x08	; 8
    51a8:	80 93 eb 04 	sts	0x04EB, r24
	  
       {
         _atomic_t _atomic = _atomic_start();
    51ac:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    51b0:	89 83       	std	Y+1, r24	; 0x01
         cc2420radiom_stateRadio = cc2420radiom_PRE_TX_STATE;
    51b2:	85 e0       	ldi	r24, 0x05	; 5
    51b4:	80 93 f0 04 	sts	0x04F0, r24
         _atomic_end( _atomic );
    51b8:	89 81       	ldd	r24, Y+1	; 0x01
    51ba:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      }
      if (  ! postTask( cc2420radiom_startSend, 5 )) {
    51be:	87 e5       	ldi	r24, 0x57	; 87
    51c0:	98 e2       	ldi	r25, 0x28	; 40
    51c2:	65 e0       	ldi	r22, 0x05	; 5
    51c4:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    51c8:	88 23       	and	r24, r24
    51ca:	11 f4       	brne	.+4      	; 0x51d0 <cc2420radiom_Send_send+0xe6>
         cc2420radiom_sendFailed();
    51cc:	0e 94 0a 2c 	call	0x5814	; 0x5814 <cc2420radiom_sendFailed>
      }
      return SUCCESS;
    51d0:	81 e0       	ldi	r24, 0x01	; 1
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	9f 83       	std	Y+7, r25	; 0x07
    51d6:	8e 83       	std	Y+6, r24	; 0x06
    51d8:	02 c0       	rjmp	.+4      	; 0x51de <cc2420radiom_Send_send+0xf4>
   }
   return FAIL;
    51da:	1f 82       	std	Y+7, r1	; 0x07
    51dc:	1e 82       	std	Y+6, r1	; 0x06
    51de:	8e 81       	ldd	r24, Y+6	; 0x06
    51e0:	9f 81       	ldd	r25, Y+7	; 0x07
    51e2:	27 96       	adiw	r28, 0x07	; 7
    51e4:	0f b6       	in	r0, 0x3f	; 63
    51e6:	f8 94       	cli
    51e8:	de bf       	out	0x3e, r29	; 62
    51ea:	0f be       	out	0x3f, r0	; 63
    51ec:	cd bf       	out	0x3d, r28	; 61
    51ee:	df 91       	pop	r29
    51f0:	cf 91       	pop	r28
    51f2:	08 95       	ret

000051f4 <cc2420radiom_FIFOP_startWait>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_startWait( bool arg_0xa422588 ) {
    51f4:	cf 93       	push	r28
    51f6:	df 93       	push	r29
    51f8:	cd b7       	in	r28, 0x3d	; 61
    51fa:	de b7       	in	r29, 0x3e	; 62
    51fc:	22 97       	sbiw	r28, 0x02	; 2
    51fe:	0f b6       	in	r0, 0x3f	; 63
    5200:	f8 94       	cli
    5202:	de bf       	out	0x3e, r29	; 62
    5204:	0f be       	out	0x3f, r0	; 63
    5206:	cd bf       	out	0x3d, r28	; 61
    5208:	8a 83       	std	Y+2, r24	; 0x02
   unsigned char result;
   result = hplcc2420interruptm_FIFOP_startWait( arg_0xa422588 );
    520a:	8a 81       	ldd	r24, Y+2	; 0x02
    520c:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <hplcc2420interruptm_FIFOP_startWait>
    5210:	89 83       	std	Y+1, r24	; 0x01
   return result;
    5212:	89 81       	ldd	r24, Y+1	; 0x01
    5214:	99 27       	eor	r25, r25
    5216:	22 96       	adiw	r28, 0x02	; 2
    5218:	0f b6       	in	r0, 0x3f	; 63
    521a:	f8 94       	cli
    521c:	de bf       	out	0x3e, r29	; 62
    521e:	0f be       	out	0x3f, r0	; 63
    5220:	cd bf       	out	0x3d, r28	; 61
    5222:	df 91       	pop	r29
    5224:	cf 91       	pop	r28
    5226:	08 95       	ret

00005228 <cc2420radiom_CC2420Control_RxMode>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_CC2420Control_RxMode( void ) {
    5228:	cf 93       	push	r28
    522a:	df 93       	push	r29
    522c:	cd b7       	in	r28, 0x3d	; 61
    522e:	de b7       	in	r29, 0x3e	; 62
    5230:	21 97       	sbiw	r28, 0x01	; 1
    5232:	0f b6       	in	r0, 0x3f	; 63
    5234:	f8 94       	cli
    5236:	de bf       	out	0x3e, r29	; 62
    5238:	0f be       	out	0x3f, r0	; 63
    523a:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = cc2420controlm_CC2420Control_RxMode();
    523c:	0e 94 ed 23 	call	0x47da	; 0x47da <cc2420controlm_CC2420Control_RxMode>
    5240:	89 83       	std	Y+1, r24	; 0x01
   return result;
    5242:	89 81       	ldd	r24, Y+1	; 0x01
    5244:	99 27       	eor	r25, r25
    5246:	21 96       	adiw	r28, 0x01	; 1
    5248:	0f b6       	in	r0, 0x3f	; 63
    524a:	f8 94       	cli
    524c:	de bf       	out	0x3e, r29	; 62
    524e:	0f be       	out	0x3f, r0	; 63
    5250:	cd bf       	out	0x3d, r28	; 61
    5252:	df 91       	pop	r29
    5254:	cf 91       	pop	r28
    5256:	08 95       	ret

00005258 <cc2420radiom_CC2420SplitControl_startDone>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420radiom_CC2420SplitControl_startDone( void )
 {
    5258:	cf 93       	push	r28
    525a:	df 93       	push	r29
    525c:	cd b7       	in	r28, 0x3d	; 61
    525e:	de b7       	in	r29, 0x3e	; 62
    5260:	23 97       	sbiw	r28, 0x03	; 3
    5262:	0f b6       	in	r0, 0x3f	; 63
    5264:	f8 94       	cli
    5266:	de bf       	out	0x3e, r29	; 62
    5268:	0f be       	out	0x3f, r0	; 63
    526a:	cd bf       	out	0x3d, r28	; 61
   uint8_t chkstateRadio;
    {
      _atomic_t _atomic = _atomic_start();
    526c:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5270:	8a 83       	std	Y+2, r24	; 0x02
      chkstateRadio = cc2420radiom_stateRadio;
    5272:	80 91 f0 04 	lds	r24, 0x04F0
    5276:	8b 83       	std	Y+3, r24	; 0x03
      _atomic_end( _atomic );
    5278:	8a 81       	ldd	r24, Y+2	; 0x02
    527a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   if ( chkstateRadio == cc2420radiom_WARMUP_STATE ) {
    527e:	8b 81       	ldd	r24, Y+3	; 0x03
    5280:	8a 30       	cpi	r24, 0x0A	; 10
    5282:	89 f4       	brne	.+34     	; 0x52a6 <cc2420radiom_CC2420SplitControl_startDone+0x4e>
      cc2420radiom_CC2420Control_RxMode();
    5284:	0e 94 14 29 	call	0x5228	; 0x5228 <cc2420radiom_CC2420Control_RxMode>
      cc2420radiom_FIFOP_startWait( FALSE );
    5288:	80 e0       	ldi	r24, 0x00	; 0
    528a:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <cc2420radiom_FIFOP_startWait>
      cc2420radiom_SFD_enableCapture( TRUE );
    528e:	81 e0       	ldi	r24, 0x01	; 1
    5290:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <cc2420radiom_SFD_enableCapture>
       {
         _atomic_t _atomic = _atomic_start();
    5294:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5298:	89 83       	std	Y+1, r24	; 0x01
         cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    529a:	82 e0       	ldi	r24, 0x02	; 2
    529c:	80 93 f0 04 	sts	0x04F0, r24
         _atomic_end( _atomic );
    52a0:	89 81       	ldd	r24, Y+1	; 0x01
    52a2:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      }
   }
   cc2420radiom_SplitControl_startDone();
    52a6:	0e 94 6e 27 	call	0x4edc	; 0x4edc <cc2420radiom_SplitControl_startDone>
   return SUCCESS;
    52aa:	81 e0       	ldi	r24, 0x01	; 1
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	23 96       	adiw	r28, 0x03	; 3
    52b0:	0f b6       	in	r0, 0x3f	; 63
    52b2:	f8 94       	cli
    52b4:	de bf       	out	0x3e, r29	; 62
    52b6:	0f be       	out	0x3f, r0	; 63
    52b8:	cd bf       	out	0x3d, r28	; 61
    52ba:	df 91       	pop	r29
    52bc:	cf 91       	pop	r28
    52be:	08 95       	ret

000052c0 <cc2420radiom_HPLChipcon_read>:
}

//-------------------------------------------------------------------------
inline uint16_t cc2420radiom_HPLChipcon_read( uint8_t arg_0xa4103b0 ) {
    52c0:	cf 93       	push	r28
    52c2:	df 93       	push	r29
    52c4:	cd b7       	in	r28, 0x3d	; 61
    52c6:	de b7       	in	r29, 0x3e	; 62
    52c8:	23 97       	sbiw	r28, 0x03	; 3
    52ca:	0f b6       	in	r0, 0x3f	; 63
    52cc:	f8 94       	cli
    52ce:	de bf       	out	0x3e, r29	; 62
    52d0:	0f be       	out	0x3f, r0	; 63
    52d2:	cd bf       	out	0x3d, r28	; 61
    52d4:	8b 83       	std	Y+3, r24	; 0x03
   unsigned int result;
   result = HPLCC2420M_HPLCC2420_read( arg_0xa4103b0 );
    52d6:	8b 81       	ldd	r24, Y+3	; 0x03
    52d8:	0e 94 44 51 	call	0xa288	; 0xa288 <HPLCC2420M_HPLCC2420_read>
    52dc:	9a 83       	std	Y+2, r25	; 0x02
    52de:	89 83       	std	Y+1, r24	; 0x01
   return result;
    52e0:	89 81       	ldd	r24, Y+1	; 0x01
    52e2:	9a 81       	ldd	r25, Y+2	; 0x02
    52e4:	23 96       	adiw	r28, 0x03	; 3
    52e6:	0f b6       	in	r0, 0x3f	; 63
    52e8:	f8 94       	cli
    52ea:	de bf       	out	0x3e, r29	; 62
    52ec:	0f be       	out	0x3f, r0	; 63
    52ee:	cd bf       	out	0x3d, r28	; 61
    52f0:	df 91       	pop	r29
    52f2:	cf 91       	pop	r28
    52f4:	08 95       	ret

000052f6 <cc2420radiom_FIFOP_disable>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_FIFOP_disable( void ) {
    52f6:	cf 93       	push	r28
    52f8:	df 93       	push	r29
    52fa:	cd b7       	in	r28, 0x3d	; 61
    52fc:	de b7       	in	r29, 0x3e	; 62
    52fe:	21 97       	sbiw	r28, 0x01	; 1
    5300:	0f b6       	in	r0, 0x3f	; 63
    5302:	f8 94       	cli
    5304:	de bf       	out	0x3e, r29	; 62
    5306:	0f be       	out	0x3f, r0	; 63
    5308:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = hplcc2420interruptm_FIFOP_disable();
    530a:	0e 94 92 4d 	call	0x9b24	; 0x9b24 <hplcc2420interruptm_FIFOP_disable>
    530e:	89 83       	std	Y+1, r24	; 0x01
   return result;
    5310:	89 81       	ldd	r24, Y+1	; 0x01
    5312:	99 27       	eor	r25, r25
    5314:	21 96       	adiw	r28, 0x01	; 1
    5316:	0f b6       	in	r0, 0x3f	; 63
    5318:	f8 94       	cli
    531a:	de bf       	out	0x3e, r29	; 62
    531c:	0f be       	out	0x3f, r0	; 63
    531e:	cd bf       	out	0x3d, r28	; 61
    5320:	df 91       	pop	r29
    5322:	cf 91       	pop	r28
    5324:	08 95       	ret

00005326 <cc2420radiom_delayedRXFIFOtask>:
}

//-------------------------------------------------------------------------
inline 
void cc2420radiom_delayedRXFIFOtask( void )
 {
    5326:	cf 93       	push	r28
    5328:	df 93       	push	r29
    532a:	cd b7       	in	r28, 0x3d	; 61
    532c:	de b7       	in	r29, 0x3e	; 62
   cc2420radiom_delayedRXFIFO();
    532e:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <cc2420radiom_delayedRXFIFO>
    5332:	df 91       	pop	r29
    5334:	cf 91       	pop	r28
    5336:	08 95       	ret

00005338 <cc2420radiom_FIFOP_fired>:
}

//-------------------------------------------------------------------------
inline 
result_t cc2420radiom_FIFOP_fired( void )
 {
    5338:	cf 93       	push	r28
    533a:	df 93       	push	r29
    533c:	cd b7       	in	r28, 0x3d	; 61
    533e:	de b7       	in	r29, 0x3e	; 62
    5340:	23 97       	sbiw	r28, 0x03	; 3
    5342:	0f b6       	in	r0, 0x3f	; 63
    5344:	f8 94       	cli
    5346:	de bf       	out	0x3e, r29	; 62
    5348:	0f be       	out	0x3f, r0	; 63
    534a:	cd bf       	out	0x3d, r28	; 61
   if (  ! LITE_READ_CC_FIFO_PIN()) {
    534c:	0e 94 db 5e 	call	0xbdb6	; 0xbdb6 <LITE_READ_CC_FIFO_PIN>
    5350:	00 97       	sbiw	r24, 0x00	; 0
    5352:	39 f4       	brne	.+14     	; 0x5362 <cc2420radiom_FIFOP_fired+0x2a>
      cc2420radiom_flushRXFIFO();
    5354:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
      return SUCCESS;
    5358:	81 e0       	ldi	r24, 0x01	; 1
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	9b 83       	std	Y+3, r25	; 0x03
    535e:	8a 83       	std	Y+2, r24	; 0x02
    5360:	16 c0       	rjmp	.+44     	; 0x538e <cc2420radiom_FIFOP_fired+0x56>
   }
    {
      _atomic_t _atomic = _atomic_start();
    5362:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5366:	89 83       	std	Y+1, r24	; 0x01
       {
         if ( postTask( cc2420radiom_delayedRXFIFOtask, 5 )) {
    5368:	83 e9       	ldi	r24, 0x93	; 147
    536a:	99 e2       	ldi	r25, 0x29	; 41
    536c:	65 e0       	ldi	r22, 0x05	; 5
    536e:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    5372:	88 23       	and	r24, r24
    5374:	19 f0       	breq	.+6      	; 0x537c <cc2420radiom_FIFOP_fired+0x44>
            cc2420radiom_FIFOP_disable();
    5376:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <cc2420radiom_FIFOP_disable>
    537a:	02 c0       	rjmp	.+4      	; 0x5380 <cc2420radiom_FIFOP_fired+0x48>
         } else {
            cc2420radiom_flushRXFIFO();
    537c:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
         }
      }
      _atomic_end( _atomic );
    5380:	89 81       	ldd	r24, Y+1	; 0x01
    5382:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   return SUCCESS;
    5386:	81 e0       	ldi	r24, 0x01	; 1
    5388:	90 e0       	ldi	r25, 0x00	; 0
    538a:	9b 83       	std	Y+3, r25	; 0x03
    538c:	8a 83       	std	Y+2, r24	; 0x02
    538e:	8a 81       	ldd	r24, Y+2	; 0x02
    5390:	9b 81       	ldd	r25, Y+3	; 0x03
    5392:	23 96       	adiw	r28, 0x03	; 3
    5394:	0f b6       	in	r0, 0x3f	; 63
    5396:	f8 94       	cli
    5398:	de bf       	out	0x3e, r29	; 62
    539a:	0f be       	out	0x3f, r0	; 63
    539c:	cd bf       	out	0x3d, r28	; 61
    539e:	df 91       	pop	r29
    53a0:	cf 91       	pop	r28
    53a2:	08 95       	ret

000053a4 <cc2420radiom_Receive_receive>:
}

//-------------------------------------------------------------------------
inline Radio_MsgPtr cc2420radiom_Receive_receive( Radio_MsgPtr arg_0xa31b650 ) {
    53a4:	cf 93       	push	r28
    53a6:	df 93       	push	r29
    53a8:	cd b7       	in	r28, 0x3d	; 61
    53aa:	de b7       	in	r29, 0x3e	; 62
    53ac:	24 97       	sbiw	r28, 0x04	; 4
    53ae:	0f b6       	in	r0, 0x3f	; 63
    53b0:	f8 94       	cli
    53b2:	de bf       	out	0x3e, r29	; 62
    53b4:	0f be       	out	0x3f, r0	; 63
    53b6:	cd bf       	out	0x3d, r28	; 61
    53b8:	9c 83       	std	Y+4, r25	; 0x04
    53ba:	8b 83       	std	Y+3, r24	; 0x03
   struct Radio_Msg *result;
   result = AMStandard_RadioReceive_receive( arg_0xa31b650 );
    53bc:	8b 81       	ldd	r24, Y+3	; 0x03
    53be:	9c 81       	ldd	r25, Y+4	; 0x04
    53c0:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <AMStandard_RadioReceive_receive>
    53c4:	9a 83       	std	Y+2, r25	; 0x02
    53c6:	89 83       	std	Y+1, r24	; 0x01
   return result;
    53c8:	89 81       	ldd	r24, Y+1	; 0x01
    53ca:	9a 81       	ldd	r25, Y+2	; 0x02
    53cc:	24 96       	adiw	r28, 0x04	; 4
    53ce:	0f b6       	in	r0, 0x3f	; 63
    53d0:	f8 94       	cli
    53d2:	de bf       	out	0x3e, r29	; 62
    53d4:	0f be       	out	0x3f, r0	; 63
    53d6:	cd bf       	out	0x3d, r28	; 61
    53d8:	df 91       	pop	r29
    53da:	cf 91       	pop	r28
    53dc:	08 95       	ret

000053de <cc2420radiom_PacketRcvd>:
}

//-------------------------------------------------------------------------
inline 
void cc2420radiom_PacketRcvd( void )
 {
    53de:	cf 93       	push	r28
    53e0:	df 93       	push	r29
    53e2:	cd b7       	in	r28, 0x3d	; 61
    53e4:	de b7       	in	r29, 0x3e	; 62
    53e6:	24 97       	sbiw	r28, 0x04	; 4
    53e8:	0f b6       	in	r0, 0x3f	; 63
    53ea:	f8 94       	cli
    53ec:	de bf       	out	0x3e, r29	; 62
    53ee:	0f be       	out	0x3f, r0	; 63
    53f0:	cd bf       	out	0x3d, r28	; 61
   Radio_MsgPtr pBuf;
    {
      _atomic_t _atomic = _atomic_start();
    53f2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    53f6:	8a 83       	std	Y+2, r24	; 0x02
       {
         pBuf = cc2420radiom_rxbufptr;
    53f8:	80 91 72 04 	lds	r24, 0x0472
    53fc:	90 91 73 04 	lds	r25, 0x0473
    5400:	9c 83       	std	Y+4, r25	; 0x04
    5402:	8b 83       	std	Y+3, r24	; 0x03
      } 
      _atomic_end( _atomic );
    5404:	8a 81       	ldd	r24, Y+2	; 0x02
    5406:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   pBuf = cc2420radiom_Receive_receive(( Radio_MsgPtr )pBuf );
    540a:	8b 81       	ldd	r24, Y+3	; 0x03
    540c:	9c 81       	ldd	r25, Y+4	; 0x04
    540e:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <cc2420radiom_Receive_receive>
    5412:	9c 83       	std	Y+4, r25	; 0x04
    5414:	8b 83       	std	Y+3, r24	; 0x03
    {
      _atomic_t _atomic = _atomic_start();
    5416:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    541a:	89 83       	std	Y+1, r24	; 0x01
       {
         if ( pBuf ) {
    541c:	8b 81       	ldd	r24, Y+3	; 0x03
    541e:	9c 81       	ldd	r25, Y+4	; 0x04
    5420:	00 97       	sbiw	r24, 0x00	; 0
    5422:	31 f0       	breq	.+12     	; 0x5430 <cc2420radiom_PacketRcvd+0x52>
            cc2420radiom_rxbufptr = pBuf;
    5424:	8b 81       	ldd	r24, Y+3	; 0x03
    5426:	9c 81       	ldd	r25, Y+4	; 0x04
    5428:	90 93 73 04 	sts	0x0473, r25
    542c:	80 93 72 04 	sts	0x0472, r24
         }
         cc2420radiom_rxbufptr->length = 0;
    5430:	e0 91 72 04 	lds	r30, 0x0472
    5434:	f0 91 73 04 	lds	r31, 0x0473
    5438:	10 82       	st	Z, r1
         cc2420radiom_bPacketReceiving = FALSE;
    543a:	10 92 75 04 	sts	0x0475, r1
      }
      _atomic_end( _atomic );
    543e:	89 81       	ldd	r24, Y+1	; 0x01
    5440:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    5444:	24 96       	adiw	r28, 0x04	; 4
    5446:	0f b6       	in	r0, 0x3f	; 63
    5448:	f8 94       	cli
    544a:	de bf       	out	0x3e, r29	; 62
    544c:	0f be       	out	0x3f, r0	; 63
    544e:	cd bf       	out	0x3d, r28	; 61
    5450:	df 91       	pop	r29
    5452:	cf 91       	pop	r28
    5454:	08 95       	ret

00005456 <cc2420radiom_HPLChipconFIFO_RXFIFODone>:
   }
}
//ALL THE DATA IN LENGTH IS THE CORRECT FRAME 
inline 
result_t cc2420radiom_HPLChipconFIFO_RXFIFODone( uint8_t length, uint8_t *data )
 {
    5456:	0f 93       	push	r16
    5458:	1f 93       	push	r17
    545a:	cf 93       	push	r28
    545c:	df 93       	push	r29
    545e:	cd b7       	in	r28, 0x3d	; 61
    5460:	de b7       	in	r29, 0x3e	; 62
    5462:	2b 97       	sbiw	r28, 0x0b	; 11
    5464:	0f b6       	in	r0, 0x3f	; 63
    5466:	f8 94       	cli
    5468:	de bf       	out	0x3e, r29	; 62
    546a:	0f be       	out	0x3f, r0	; 63
    546c:	cd bf       	out	0x3d, r28	; 61
    546e:	8f 83       	std	Y+7, r24	; 0x07
    5470:	79 87       	std	Y+9, r23	; 0x09
    5472:	68 87       	std	Y+8, r22	; 0x08
   //The data now contains the full packet, starting with a packet length which is the remaining part of the packet, not including itself
   //The length, however, includes everything 
   uint8_t currentstate;
    {
      _atomic_t _atomic = _atomic_start();
    5474:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5478:	8d 83       	std	Y+5, r24	; 0x05
       {
         currentstate = cc2420radiom_stateRadio;
    547a:	80 91 f0 04 	lds	r24, 0x04F0
    547e:	8e 83       	std	Y+6, r24	; 0x06
      }
      _atomic_end( _atomic );
    5480:	8d 81       	ldd	r24, Y+5	; 0x05
    5482:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   if ((( 
    5486:	0e 94 db 5e 	call	0xbdb6	; 0xbdb6 <LITE_READ_CC_FIFO_PIN>
    548a:	00 97       	sbiw	r24, 0x00	; 0
    548c:	21 f4       	brne	.+8      	; 0x5496 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x40>
    548e:	0e 94 21 5d 	call	0xba42	; 0xba42 <LITE_READ_CC_FIFOP_PIN>
    5492:	00 97       	sbiw	r24, 0x00	; 0
    5494:	31 f0       	breq	.+12     	; 0x54a2 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x4c>
    5496:	8f 81       	ldd	r24, Y+7	; 0x07
    5498:	88 23       	and	r24, r24
    549a:	19 f0       	breq	.+6      	; 0x54a2 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x4c>
    549c:	8f 81       	ldd	r24, Y+7	; 0x07
    549e:	81 37       	cpi	r24, 0x71	; 113
    54a0:	78 f0       	brcs	.+30     	; 0x54c0 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x6a>
    ! LITE_READ_CC_FIFO_PIN() &&  ! LITE_READ_CC_FIFOP_PIN()) || length == 0 ) || length > MSG_DATA_SIZE ) {
      cc2420radiom_flushRXFIFO();
    54a2:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
       {
         _atomic_t _atomic = _atomic_start();
    54a6:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    54aa:	8c 83       	std	Y+4, r24	; 0x04
         cc2420radiom_bPacketReceiving = FALSE;
    54ac:	10 92 75 04 	sts	0x0475, r1
         _atomic_end( _atomic );
    54b0:	8c 81       	ldd	r24, Y+4	; 0x04
    54b2:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      }
      return SUCCESS;
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	9b 87       	std	Y+11, r25	; 0x0b
    54bc:	8a 87       	std	Y+10, r24	; 0x0a
    54be:	c5 c0       	rjmp	.+394    	; 0x564a <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1f4>
   }
   cc2420radiom_rxbufptr = ( Radio_MsgPtr )data;
    54c0:	88 85       	ldd	r24, Y+8	; 0x08
    54c2:	99 85       	ldd	r25, Y+9	; 0x09
    54c4:	90 93 73 04 	sts	0x0473, r25
    54c8:	80 93 72 04 	sts	0x0472, r24
   if (( cc2420radiom_rxbufptr->fcfhi& 0x07 ) != 0x01 || cc2420radiom_rxbufptr->fcflo != 0x08 ) {
    54cc:	e0 91 72 04 	lds	r30, 0x0472
    54d0:	f0 91 73 04 	lds	r31, 0x0473
    54d4:	81 81       	ldd	r24, Z+1	; 0x01
    54d6:	99 27       	eor	r25, r25
    54d8:	87 70       	andi	r24, 0x07	; 7
    54da:	90 70       	andi	r25, 0x00	; 0
    54dc:	81 30       	cpi	r24, 0x01	; 1
    54de:	91 05       	cpc	r25, r1
    54e0:	39 f4       	brne	.+14     	; 0x54f0 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x9a>
    54e2:	e0 91 72 04 	lds	r30, 0x0472
    54e6:	f0 91 73 04 	lds	r31, 0x0473
    54ea:	82 81       	ldd	r24, Z+2	; 0x02
    54ec:	88 30       	cpi	r24, 0x08	; 8
    54ee:	79 f0       	breq	.+30     	; 0x550e <cc2420radiom_HPLChipconFIFO_RXFIFODone+0xb8>
      cc2420radiom_flushRXFIFO();
    54f0:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
       {
         _atomic_t _atomic = _atomic_start();
    54f4:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    54f8:	8b 83       	std	Y+3, r24	; 0x03
         cc2420radiom_bPacketReceiving = FALSE;
    54fa:	10 92 75 04 	sts	0x0475, r1
         _atomic_end( _atomic );
    54fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5500:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      }
      return SUCCESS;
    5504:	e1 e0       	ldi	r30, 0x01	; 1
    5506:	f0 e0       	ldi	r31, 0x00	; 0
    5508:	fb 87       	std	Y+11, r31	; 0x0b
    550a:	ea 87       	std	Y+10, r30	; 0x0a
    550c:	9e c0       	rjmp	.+316    	; 0x564a <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1f4>
   }
   //Now modifies the length such that it only points to the actual payload defined by the user 
   cc2420radiom_rxbufptr->length = cc2420radiom_rxbufptr->length - MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    550e:	a0 91 72 04 	lds	r26, 0x0472
    5512:	b0 91 73 04 	lds	r27, 0x0473
    5516:	e0 91 72 04 	lds	r30, 0x0472
    551a:	f0 91 73 04 	lds	r31, 0x0473
    551e:	80 81       	ld	r24, Z
    5520:	8b 50       	subi	r24, 0x0B	; 11
    5522:	8c 93       	st	X, r24
   //Revised by Qing, from 29 to PAYLOAD_LENGTH 
   if ( cc2420radiom_rxbufptr->length > PAYLOAD_LENGTH ) {
    5524:	e0 91 72 04 	lds	r30, 0x0472
    5528:	f0 91 73 04 	lds	r31, 0x0473
    552c:	80 81       	ld	r24, Z
    552e:	85 36       	cpi	r24, 0x65	; 101
    5530:	78 f0       	brcs	.+30     	; 0x5550 <cc2420radiom_HPLChipconFIFO_RXFIFODone+0xfa>
      cc2420radiom_flushRXFIFO();
    5532:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
       {
         _atomic_t _atomic = _atomic_start();
    5536:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    553a:	8a 83       	std	Y+2, r24	; 0x02
         cc2420radiom_bPacketReceiving = FALSE;
    553c:	10 92 75 04 	sts	0x0475, r1
         _atomic_end( _atomic );
    5540:	8a 81       	ldd	r24, Y+2	; 0x02
    5542:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      }
      return SUCCESS;
    5546:	81 e0       	ldi	r24, 0x01	; 1
    5548:	90 e0       	ldi	r25, 0x00	; 0
    554a:	9b 87       	std	Y+11, r25	; 0x0b
    554c:	8a 87       	std	Y+10, r24	; 0x0a
    554e:	7d c0       	rjmp	.+250    	; 0x564a <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1f4>
   }
   cc2420radiom_rxbufptr->addr = fromLSB16( cc2420radiom_rxbufptr->addr );
    5550:	00 91 72 04 	lds	r16, 0x0472
    5554:	10 91 73 04 	lds	r17, 0x0473
    5558:	e0 91 72 04 	lds	r30, 0x0472
    555c:	f0 91 73 04 	lds	r31, 0x0473
    5560:	86 81       	ldd	r24, Z+6	; 0x06
    5562:	97 81       	ldd	r25, Z+7	; 0x07
    5564:	0e 94 62 99 	call	0x132c4	; 0x132c4 <fromLSB16>
    5568:	f8 01       	movw	r30, r16
    556a:	97 83       	std	Z+7, r25	; 0x07
    556c:	86 83       	std	Z+6, r24	; 0x06
   //CRC and LQI share the information 
   cc2420radiom_rxbufptr->crc = data[ length - 1 ] >> 7;
    556e:	40 91 72 04 	lds	r20, 0x0472
    5572:	50 91 73 04 	lds	r21, 0x0473
    5576:	8f 81       	ldd	r24, Y+7	; 0x07
    5578:	99 27       	eor	r25, r25
    557a:	9c 01       	movw	r18, r24
    557c:	88 85       	ldd	r24, Y+8	; 0x08
    557e:	99 85       	ldd	r25, Y+9	; 0x09
    5580:	82 0f       	add	r24, r18
    5582:	93 1f       	adc	r25, r19
    5584:	fc 01       	movw	r30, r24
    5586:	31 97       	sbiw	r30, 0x01	; 1
    5588:	80 81       	ld	r24, Z
    558a:	88 1f       	adc	r24, r24
    558c:	88 27       	eor	r24, r24
    558e:	88 1f       	adc	r24, r24
    5590:	fa 01       	movw	r30, r20
    5592:	e0 59       	subi	r30, 0x90	; 144
    5594:	ff 4f       	sbci	r31, 0xFF	; 255
    5596:	80 83       	st	Z, r24
   cc2420radiom_rxbufptr->strength = data[ length - 2 ];
    5598:	40 91 72 04 	lds	r20, 0x0472
    559c:	50 91 73 04 	lds	r21, 0x0473
    55a0:	8f 81       	ldd	r24, Y+7	; 0x07
    55a2:	99 27       	eor	r25, r25
    55a4:	9c 01       	movw	r18, r24
    55a6:	88 85       	ldd	r24, Y+8	; 0x08
    55a8:	99 85       	ldd	r25, Y+9	; 0x09
    55aa:	82 0f       	add	r24, r18
    55ac:	93 1f       	adc	r25, r19
    55ae:	fc 01       	movw	r30, r24
    55b0:	32 97       	sbiw	r30, 0x02	; 2
    55b2:	80 81       	ld	r24, Z
    55b4:	fa 01       	movw	r30, r20
    55b6:	e2 59       	subi	r30, 0x92	; 146
    55b8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ba:	80 83       	st	Z, r24
   cc2420radiom_rxbufptr->lqi = data[ length - 1 ]& 0x7F;
    55bc:	40 91 72 04 	lds	r20, 0x0472
    55c0:	50 91 73 04 	lds	r21, 0x0473
    55c4:	8f 81       	ldd	r24, Y+7	; 0x07
    55c6:	99 27       	eor	r25, r25
    55c8:	9c 01       	movw	r18, r24
    55ca:	88 85       	ldd	r24, Y+8	; 0x08
    55cc:	99 85       	ldd	r25, Y+9	; 0x09
    55ce:	82 0f       	add	r24, r18
    55d0:	93 1f       	adc	r25, r19
    55d2:	fc 01       	movw	r30, r24
    55d4:	31 97       	sbiw	r30, 0x01	; 1
    55d6:	80 81       	ld	r24, Z
    55d8:	8f 77       	andi	r24, 0x7F	; 127
    55da:	fa 01       	movw	r30, r20
    55dc:	e1 59       	subi	r30, 0x91	; 145
    55de:	ff 4f       	sbci	r31, 0xFF	; 255
    55e0:	80 83       	st	Z, r24
    {
      _atomic_t _atomic = _atomic_start();
    55e2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    55e6:	89 83       	std	Y+1, r24	; 0x01
       {
         if (  ! postTask( cc2420radiom_PacketRcvd, 5 )) {
    55e8:	8f ee       	ldi	r24, 0xEF	; 239
    55ea:	99 e2       	ldi	r25, 0x29	; 41
    55ec:	65 e0       	ldi	r22, 0x05	; 5
    55ee:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    55f2:	88 23       	and	r24, r24
    55f4:	11 f4       	brne	.+4      	; 0x55fa <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1a4>
            cc2420radiom_bPacketReceiving = FALSE;
    55f6:	10 92 75 04 	sts	0x0475, r1
         }
      }
      _atomic_end( _atomic );
    55fa:	89 81       	ldd	r24, Y+1	; 0x01
    55fc:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   if (  ! LITE_READ_CC_FIFO_PIN() &&  ! LITE_READ_CC_FIFOP_PIN()) {
    5600:	0e 94 db 5e 	call	0xbdb6	; 0xbdb6 <LITE_READ_CC_FIFO_PIN>
    5604:	00 97       	sbiw	r24, 0x00	; 0
    5606:	59 f4       	brne	.+22     	; 0x561e <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1c8>
    5608:	0e 94 21 5d 	call	0xba42	; 0xba42 <LITE_READ_CC_FIFOP_PIN>
    560c:	00 97       	sbiw	r24, 0x00	; 0
    560e:	39 f4       	brne	.+14     	; 0x561e <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1c8>
      cc2420radiom_flushRXFIFO();
    5610:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
      return SUCCESS;
    5614:	81 e0       	ldi	r24, 0x01	; 1
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	9b 87       	std	Y+11, r25	; 0x0b
    561a:	8a 87       	std	Y+10, r24	; 0x0a
    561c:	16 c0       	rjmp	.+44     	; 0x564a <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1f4>
   }
   if (  ! LITE_READ_CC_FIFOP_PIN()) {
    561e:	0e 94 21 5d 	call	0xba42	; 0xba42 <LITE_READ_CC_FIFOP_PIN>
    5622:	00 97       	sbiw	r24, 0x00	; 0
    5624:	61 f4       	brne	.+24     	; 0x563e <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1e8>
      if ( postTask( cc2420radiom_delayedRXFIFOtask, 5 )) {
    5626:	83 e9       	ldi	r24, 0x93	; 147
    5628:	99 e2       	ldi	r25, 0x29	; 41
    562a:	65 e0       	ldi	r22, 0x05	; 5
    562c:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    5630:	88 23       	and	r24, r24
    5632:	29 f0       	breq	.+10     	; 0x563e <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1e8>
         return SUCCESS;
    5634:	e1 e0       	ldi	r30, 0x01	; 1
    5636:	f0 e0       	ldi	r31, 0x00	; 0
    5638:	fb 87       	std	Y+11, r31	; 0x0b
    563a:	ea 87       	std	Y+10, r30	; 0x0a
    563c:	06 c0       	rjmp	.+12     	; 0x564a <cc2420radiom_HPLChipconFIFO_RXFIFODone+0x1f4>
      }
   }
   cc2420radiom_flushRXFIFO();
    563e:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
   return SUCCESS;
    5642:	81 e0       	ldi	r24, 0x01	; 1
    5644:	90 e0       	ldi	r25, 0x00	; 0
    5646:	9b 87       	std	Y+11, r25	; 0x0b
    5648:	8a 87       	std	Y+10, r24	; 0x0a
    564a:	8a 85       	ldd	r24, Y+10	; 0x0a
    564c:	9b 85       	ldd	r25, Y+11	; 0x0b
    564e:	2b 96       	adiw	r28, 0x0b	; 11
    5650:	0f b6       	in	r0, 0x3f	; 63
    5652:	f8 94       	cli
    5654:	de bf       	out	0x3e, r29	; 62
    5656:	0f be       	out	0x3f, r0	; 63
    5658:	cd bf       	out	0x3d, r28	; 61
    565a:	df 91       	pop	r29
    565c:	cf 91       	pop	r28
    565e:	1f 91       	pop	r17
    5660:	0f 91       	pop	r16
    5662:	08 95       	ret

00005664 <cc2420radiom_HPLChipconFIFO_readRXFIFO>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_HPLChipconFIFO_readRXFIFO( uint8_t arg_0xa4118a0, uint8_t *arg_0xa411a00 ) {
    5664:	cf 93       	push	r28
    5666:	df 93       	push	r29
    5668:	cd b7       	in	r28, 0x3d	; 61
    566a:	de b7       	in	r29, 0x3e	; 62
    566c:	24 97       	sbiw	r28, 0x04	; 4
    566e:	0f b6       	in	r0, 0x3f	; 63
    5670:	f8 94       	cli
    5672:	de bf       	out	0x3e, r29	; 62
    5674:	0f be       	out	0x3f, r0	; 63
    5676:	cd bf       	out	0x3d, r28	; 61
    5678:	8a 83       	std	Y+2, r24	; 0x02
    567a:	7c 83       	std	Y+4, r23	; 0x04
    567c:	6b 83       	std	Y+3, r22	; 0x03
   unsigned char result;
   result = hplcc2420fifom_HPLCC2420FIFO_readRXFIFO( arg_0xa4118a0, arg_0xa411a00 );
    567e:	8b 81       	ldd	r24, Y+3	; 0x03
    5680:	9c 81       	ldd	r25, Y+4	; 0x04
    5682:	bc 01       	movw	r22, r24
    5684:	8a 81       	ldd	r24, Y+2	; 0x02
    5686:	0e 94 4b 4c 	call	0x9896	; 0x9896 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>
    568a:	89 83       	std	Y+1, r24	; 0x01
   return result;
    568c:	89 81       	ldd	r24, Y+1	; 0x01
    568e:	99 27       	eor	r25, r25
    5690:	24 96       	adiw	r28, 0x04	; 4
    5692:	0f b6       	in	r0, 0x3f	; 63
    5694:	f8 94       	cli
    5696:	de bf       	out	0x3e, r29	; 62
    5698:	0f be       	out	0x3f, r0	; 63
    569a:	cd bf       	out	0x3d, r28	; 61
    569c:	df 91       	pop	r29
    569e:	cf 91       	pop	r28
    56a0:	08 95       	ret

000056a2 <cc2420radiom_Send_sendDone>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_Send_sendDone( Radio_MsgPtr arg_0xa3c3710, result_t arg_0xa3c3860 ) {
    56a2:	cf 93       	push	r28
    56a4:	df 93       	push	r29
    56a6:	cd b7       	in	r28, 0x3d	; 61
    56a8:	de b7       	in	r29, 0x3e	; 62
    56aa:	24 97       	sbiw	r28, 0x04	; 4
    56ac:	0f b6       	in	r0, 0x3f	; 63
    56ae:	f8 94       	cli
    56b0:	de bf       	out	0x3e, r29	; 62
    56b2:	0f be       	out	0x3f, r0	; 63
    56b4:	cd bf       	out	0x3d, r28	; 61
    56b6:	9b 83       	std	Y+3, r25	; 0x03
    56b8:	8a 83       	std	Y+2, r24	; 0x02
    56ba:	6c 83       	std	Y+4, r22	; 0x04
   unsigned char result;
   result = AMStandard_RadioSend_sendDone( arg_0xa3c3710, arg_0xa3c3860 );
    56bc:	8a 81       	ldd	r24, Y+2	; 0x02
    56be:	9b 81       	ldd	r25, Y+3	; 0x03
    56c0:	6c 81       	ldd	r22, Y+4	; 0x04
    56c2:	0e 94 10 6e 	call	0xdc20	; 0xdc20 <AMStandard_RadioSend_sendDone>
    56c6:	89 83       	std	Y+1, r24	; 0x01
   return result;
    56c8:	89 81       	ldd	r24, Y+1	; 0x01
    56ca:	99 27       	eor	r25, r25
    56cc:	24 96       	adiw	r28, 0x04	; 4
    56ce:	0f b6       	in	r0, 0x3f	; 63
    56d0:	f8 94       	cli
    56d2:	de bf       	out	0x3e, r29	; 62
    56d4:	0f be       	out	0x3f, r0	; 63
    56d6:	cd bf       	out	0x3d, r28	; 61
    56d8:	df 91       	pop	r29
    56da:	cf 91       	pop	r28
    56dc:	08 95       	ret

000056de <cc2420radiom_PacketSent>:
}

//-------------------------------------------------------------------------
inline 
void cc2420radiom_PacketSent( void )
 {
    56de:	cf 93       	push	r28
    56e0:	df 93       	push	r29
    56e2:	cd b7       	in	r28, 0x3d	; 61
    56e4:	de b7       	in	r29, 0x3e	; 62
    56e6:	23 97       	sbiw	r28, 0x03	; 3
    56e8:	0f b6       	in	r0, 0x3f	; 63
    56ea:	f8 94       	cli
    56ec:	de bf       	out	0x3e, r29	; 62
    56ee:	0f be       	out	0x3f, r0	; 63
    56f0:	cd bf       	out	0x3d, r28	; 61
   Radio_MsgPtr pBuf;
    {
      _atomic_t _atomic = _atomic_start();
    56f2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    56f6:	89 83       	std	Y+1, r24	; 0x01
       {
         cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    56f8:	82 e0       	ldi	r24, 0x02	; 2
    56fa:	80 93 f0 04 	sts	0x04F0, r24
         pBuf = cc2420radiom_txbufptr;
    56fe:	80 91 ee 04 	lds	r24, 0x04EE
    5702:	90 91 ef 04 	lds	r25, 0x04EF
    5706:	9b 83       	std	Y+3, r25	; 0x03
    5708:	8a 83       	std	Y+2, r24	; 0x02
         pBuf->length = pBuf->length - MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    570a:	ea 81       	ldd	r30, Y+2	; 0x02
    570c:	fb 81       	ldd	r31, Y+3	; 0x03
    570e:	80 81       	ld	r24, Z
    5710:	8b 50       	subi	r24, 0x0B	; 11
    5712:	ea 81       	ldd	r30, Y+2	; 0x02
    5714:	fb 81       	ldd	r31, Y+3	; 0x03
    5716:	80 83       	st	Z, r24
      }
      _atomic_end( _atomic );
    5718:	89 81       	ldd	r24, Y+1	; 0x01
    571a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   cc2420radiom_Send_sendDone( pBuf, SUCCESS );
    571e:	8a 81       	ldd	r24, Y+2	; 0x02
    5720:	9b 81       	ldd	r25, Y+3	; 0x03
    5722:	61 e0       	ldi	r22, 0x01	; 1
    5724:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <cc2420radiom_Send_sendDone>
    5728:	23 96       	adiw	r28, 0x03	; 3
    572a:	0f b6       	in	r0, 0x3f	; 63
    572c:	f8 94       	cli
    572e:	de bf       	out	0x3e, r29	; 62
    5730:	0f be       	out	0x3f, r0	; 63
    5732:	cd bf       	out	0x3d, r28	; 61
    5734:	df 91       	pop	r29
    5736:	cf 91       	pop	r28
    5738:	08 95       	ret

0000573a <cc2420radiom_SFD_disable>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SFD_disable( void ) {
    573a:	cf 93       	push	r28
    573c:	df 93       	push	r29
    573e:	cd b7       	in	r28, 0x3d	; 61
    5740:	de b7       	in	r29, 0x3e	; 62
    5742:	21 97       	sbiw	r28, 0x01	; 1
    5744:	0f b6       	in	r0, 0x3f	; 63
    5746:	f8 94       	cli
    5748:	de bf       	out	0x3e, r29	; 62
    574a:	0f be       	out	0x3f, r0	; 63
    574c:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = hplcc2420interruptm_SFD_disable();
    574e:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <hplcc2420interruptm_SFD_disable>
    5752:	89 83       	std	Y+1, r24	; 0x01
   return result;
    5754:	89 81       	ldd	r24, Y+1	; 0x01
    5756:	99 27       	eor	r25, r25
    5758:	21 96       	adiw	r28, 0x01	; 1
    575a:	0f b6       	in	r0, 0x3f	; 63
    575c:	f8 94       	cli
    575e:	de bf       	out	0x3e, r29	; 62
    5760:	0f be       	out	0x3f, r0	; 63
    5762:	cd bf       	out	0x3d, r28	; 61
    5764:	df 91       	pop	r29
    5766:	cf 91       	pop	r28
    5768:	08 95       	ret

0000576a <cc2420radiom_SFD_captured>:
}

//-------------------------------------------------------------------------

inline 
result_t cc2420radiom_SFD_captured( uint16_t time )
 {
    576a:	cf 93       	push	r28
    576c:	df 93       	push	r29
    576e:	cd b7       	in	r28, 0x3d	; 61
    5770:	de b7       	in	r29, 0x3e	; 62
    5772:	24 97       	sbiw	r28, 0x04	; 4
    5774:	0f b6       	in	r0, 0x3f	; 63
    5776:	f8 94       	cli
    5778:	de bf       	out	0x3e, r29	; 62
    577a:	0f be       	out	0x3f, r0	; 63
    577c:	cd bf       	out	0x3d, r28	; 61
    577e:	9a 83       	std	Y+2, r25	; 0x02
    5780:	89 83       	std	Y+1, r24	; 0x01
   switch ( cc2420radiom_stateRadio ) {
    5782:	80 91 f0 04 	lds	r24, 0x04F0
    5786:	28 2f       	mov	r18, r24
    5788:	33 27       	eor	r19, r19
    578a:	3c 83       	std	Y+4, r19	; 0x04
    578c:	2b 83       	std	Y+3, r18	; 0x03
    578e:	8b 81       	ldd	r24, Y+3	; 0x03
    5790:	9c 81       	ldd	r25, Y+4	; 0x04
    5792:	83 30       	cpi	r24, 0x03	; 3
    5794:	91 05       	cpc	r25, r1
    5796:	31 f0       	breq	.+12     	; 0x57a4 <cc2420radiom_SFD_captured+0x3a>
    5798:	2b 81       	ldd	r18, Y+3	; 0x03
    579a:	3c 81       	ldd	r19, Y+4	; 0x04
    579c:	24 30       	cpi	r18, 0x04	; 4
    579e:	31 05       	cpc	r19, r1
    57a0:	e9 f0       	breq	.+58     	; 0x57dc <cc2420radiom_SFD_captured+0x72>
    57a2:	2d c0       	rjmp	.+90     	; 0x57fe <cc2420radiom_SFD_captured+0x94>
      case cc2420radiom_TX_STATE:
      cc2420radiom_SFD_enableCapture( FALSE );
    57a4:	80 e0       	ldi	r24, 0x00	; 0
    57a6:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <cc2420radiom_SFD_enableCapture>
      if (  ! LITE_READ_CC_SFD_PIN()) {
    57aa:	0e 94 38 5e 	call	0xbc70	; 0xbc70 <LITE_READ_CC_SFD_PIN>
    57ae:	00 97       	sbiw	r24, 0x00	; 0
    57b0:	19 f4       	brne	.+6      	; 0x57b8 <cc2420radiom_SFD_captured+0x4e>
         cc2420radiom_SFD_disable();
    57b2:	0e 94 9d 2b 	call	0x573a	; 0x573a <cc2420radiom_SFD_disable>
    57b6:	03 c0       	rjmp	.+6      	; 0x57be <cc2420radiom_SFD_captured+0x54>
      }
       else {
         cc2420radiom_stateRadio = cc2420radiom_TX_WAIT;
    57b8:	84 e0       	ldi	r24, 0x04	; 4
    57ba:	80 93 f0 04 	sts	0x04F0, r24
      }
      cc2420radiom_txbufptr->time = time;
    57be:	80 91 ee 04 	lds	r24, 0x04EE
    57c2:	90 91 ef 04 	lds	r25, 0x04EF
    57c6:	fc 01       	movw	r30, r24
    57c8:	ee 58       	subi	r30, 0x8E	; 142
    57ca:	ff 4f       	sbci	r31, 0xFF	; 255
    57cc:	89 81       	ldd	r24, Y+1	; 0x01
    57ce:	9a 81       	ldd	r25, Y+2	; 0x02
    57d0:	91 83       	std	Z+1, r25	; 0x01
    57d2:	80 83       	st	Z, r24
      if ( cc2420radiom_stateRadio == cc2420radiom_TX_WAIT ) {
    57d4:	80 91 f0 04 	lds	r24, 0x04F0
    57d8:	84 30       	cpi	r24, 0x04	; 4
    57da:	89 f0       	breq	.+34     	; 0x57fe <cc2420radiom_SFD_captured+0x94>
         break;
      }
      case cc2420radiom_TX_WAIT:
      cc2420radiom_stateRadio = cc2420radiom_POST_TX_STATE;
    57dc:	86 e0       	ldi	r24, 0x06	; 6
    57de:	80 93 f0 04 	sts	0x04F0, r24
      cc2420radiom_SFD_disable();
    57e2:	0e 94 9d 2b 	call	0x573a	; 0x573a <cc2420radiom_SFD_disable>
      cc2420radiom_SFD_enableCapture( TRUE );
    57e6:	81 e0       	ldi	r24, 0x01	; 1
    57e8:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <cc2420radiom_SFD_enableCapture>
      if (  ! postTask( cc2420radiom_PacketSent, 5 )) {
    57ec:	8f e6       	ldi	r24, 0x6F	; 111
    57ee:	9b e2       	ldi	r25, 0x2B	; 43
    57f0:	65 e0       	ldi	r22, 0x05	; 5
    57f2:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    57f6:	88 23       	and	r24, r24
    57f8:	11 f4       	brne	.+4      	; 0x57fe <cc2420radiom_SFD_captured+0x94>
         cc2420radiom_sendFailed();
    57fa:	0e 94 0a 2c 	call	0x5814	; 0x5814 <cc2420radiom_sendFailed>
      }
      break;
      default:
      ;
   }
   return SUCCESS;
    57fe:	81 e0       	ldi	r24, 0x01	; 1
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	24 96       	adiw	r28, 0x04	; 4
    5804:	0f b6       	in	r0, 0x3f	; 63
    5806:	f8 94       	cli
    5808:	de bf       	out	0x3e, r29	; 62
    580a:	0f be       	out	0x3f, r0	; 63
    580c:	cd bf       	out	0x3d, r28	; 61
    580e:	df 91       	pop	r29
    5810:	cf 91       	pop	r28
    5812:	08 95       	ret

00005814 <cc2420radiom_sendFailed>:
}

//-------------------------------------------------------------------------
void cc2420radiom_sendFailed( void )
 {
    5814:	cf 93       	push	r28
    5816:	df 93       	push	r29
    5818:	cd b7       	in	r28, 0x3d	; 61
    581a:	de b7       	in	r29, 0x3e	; 62
    581c:	21 97       	sbiw	r28, 0x01	; 1
    581e:	0f b6       	in	r0, 0x3f	; 63
    5820:	f8 94       	cli
    5822:	de bf       	out	0x3e, r29	; 62
    5824:	0f be       	out	0x3f, r0	; 63
    5826:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    5828:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    582c:	89 83       	std	Y+1, r24	; 0x01
      cc2420radiom_stateRadio = cc2420radiom_IDLE_STATE;
    582e:	82 e0       	ldi	r24, 0x02	; 2
    5830:	80 93 f0 04 	sts	0x04F0, r24
      _atomic_end( _atomic );
    5834:	89 81       	ldd	r24, Y+1	; 0x01
    5836:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   cc2420radiom_txbufptr->length = cc2420radiom_txbufptr->length - MSG_HEADER_SIZE - MSG_FOOTER_SIZE;
    583a:	a0 91 ee 04 	lds	r26, 0x04EE
    583e:	b0 91 ef 04 	lds	r27, 0x04EF
    5842:	e0 91 ee 04 	lds	r30, 0x04EE
    5846:	f0 91 ef 04 	lds	r31, 0x04EF
    584a:	80 81       	ld	r24, Z
    584c:	8b 50       	subi	r24, 0x0B	; 11
    584e:	8c 93       	st	X, r24
   cc2420radiom_Send_sendDone( cc2420radiom_txbufptr, FAIL );
    5850:	80 91 ee 04 	lds	r24, 0x04EE
    5854:	90 91 ef 04 	lds	r25, 0x04EF
    5858:	60 e0       	ldi	r22, 0x00	; 0
    585a:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <cc2420radiom_Send_sendDone>
    585e:	21 96       	adiw	r28, 0x01	; 1
    5860:	0f b6       	in	r0, 0x3f	; 63
    5862:	f8 94       	cli
    5864:	de bf       	out	0x3e, r29	; 62
    5866:	0f be       	out	0x3f, r0	; 63
    5868:	cd bf       	out	0x3d, r28	; 61
    586a:	df 91       	pop	r29
    586c:	cf 91       	pop	r28
    586e:	08 95       	ret

00005870 <cc2420radiom_flushRXFIFO>:
}

//-------------------------------------------------------------------------
void cc2420radiom_flushRXFIFO( void )
 {
    5870:	cf 93       	push	r28
    5872:	df 93       	push	r29
    5874:	cd b7       	in	r28, 0x3d	; 61
    5876:	de b7       	in	r29, 0x3e	; 62
    5878:	21 97       	sbiw	r28, 0x01	; 1
    587a:	0f b6       	in	r0, 0x3f	; 63
    587c:	f8 94       	cli
    587e:	de bf       	out	0x3e, r29	; 62
    5880:	0f be       	out	0x3f, r0	; 63
    5882:	cd bf       	out	0x3d, r28	; 61
   cc2420radiom_FIFOP_disable();
    5884:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <cc2420radiom_FIFOP_disable>
   cc2420radiom_HPLChipcon_read( 0x3F );
    5888:	8f e3       	ldi	r24, 0x3F	; 63
    588a:	0e 94 60 29 	call	0x52c0	; 0x52c0 <cc2420radiom_HPLChipcon_read>
   cc2420radiom_HPLChipcon_cmd( 0x08 );
    588e:	88 e0       	ldi	r24, 0x08	; 8
    5890:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <cc2420radiom_HPLChipcon_cmd>
   cc2420radiom_HPLChipcon_cmd( 0x08 );
    5894:	88 e0       	ldi	r24, 0x08	; 8
    5896:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <cc2420radiom_HPLChipcon_cmd>
    {
      _atomic_t _atomic = _atomic_start();
    589a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    589e:	89 83       	std	Y+1, r24	; 0x01
      cc2420radiom_bPacketReceiving = FALSE;
    58a0:	10 92 75 04 	sts	0x0475, r1
      _atomic_end( _atomic );
    58a4:	89 81       	ldd	r24, Y+1	; 0x01
    58a6:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   cc2420radiom_FIFOP_startWait( FALSE );
    58aa:	80 e0       	ldi	r24, 0x00	; 0
    58ac:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <cc2420radiom_FIFOP_startWait>
    58b0:	21 96       	adiw	r28, 0x01	; 1
    58b2:	0f b6       	in	r0, 0x3f	; 63
    58b4:	f8 94       	cli
    58b6:	de bf       	out	0x3e, r29	; 62
    58b8:	0f be       	out	0x3f, r0	; 63
    58ba:	cd bf       	out	0x3d, r28	; 61
    58bc:	df 91       	pop	r29
    58be:	cf 91       	pop	r28
    58c0:	08 95       	ret

000058c2 <cc2420radiom_delayedRXFIFO>:
}

//-------------------------------------------------------------------------
void cc2420radiom_delayedRXFIFO( void )
 {
    58c2:	cf 93       	push	r28
    58c4:	df 93       	push	r29
    58c6:	cd b7       	in	r28, 0x3d	; 61
    58c8:	de b7       	in	r29, 0x3e	; 62
    58ca:	24 97       	sbiw	r28, 0x04	; 4
    58cc:	0f b6       	in	r0, 0x3f	; 63
    58ce:	f8 94       	cli
    58d0:	de bf       	out	0x3e, r29	; 62
    58d2:	0f be       	out	0x3f, r0	; 63
    58d4:	cd bf       	out	0x3d, r28	; 61
   //The MSG_DATA_SIZE is defined such that it contains the total length of data plus 2 bytes of the RSSI and LQI 
   uint8_t len = MSG_DATA_SIZE;
    58d6:	80 e7       	ldi	r24, 0x70	; 112
    58d8:	8c 83       	std	Y+4, r24	; 0x04
   uint8_t _bPacketReceiving;
   if (  ! LITE_READ_CC_FIFO_PIN() &&  ! LITE_READ_CC_FIFOP_PIN()) {
    58da:	0e 94 db 5e 	call	0xbdb6	; 0xbdb6 <LITE_READ_CC_FIFO_PIN>
    58de:	00 97       	sbiw	r24, 0x00	; 0
    58e0:	39 f4       	brne	.+14     	; 0x58f0 <cc2420radiom_delayedRXFIFO+0x2e>
    58e2:	0e 94 21 5d 	call	0xba42	; 0xba42 <LITE_READ_CC_FIFOP_PIN>
    58e6:	00 97       	sbiw	r24, 0x00	; 0
    58e8:	19 f4       	brne	.+6      	; 0x58f0 <cc2420radiom_delayedRXFIFO+0x2e>
      cc2420radiom_flushRXFIFO();
    58ea:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
      return ;
    58ee:	3a c0       	rjmp	.+116    	; 0x5964 <cc2420radiom_delayedRXFIFO+0xa2>
   }
    {
      _atomic_t _atomic = _atomic_start();
    58f0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    58f4:	8a 83       	std	Y+2, r24	; 0x02
       {
         _bPacketReceiving = cc2420radiom_bPacketReceiving;
    58f6:	80 91 75 04 	lds	r24, 0x0475
    58fa:	8b 83       	std	Y+3, r24	; 0x03
         if ( _bPacketReceiving ) {
    58fc:	8b 81       	ldd	r24, Y+3	; 0x03
    58fe:	88 23       	and	r24, r24
    5900:	51 f0       	breq	.+20     	; 0x5916 <cc2420radiom_delayedRXFIFO+0x54>
            if (  ! postTask( cc2420radiom_delayedRXFIFOtask, 5 )) {
    5902:	83 e9       	ldi	r24, 0x93	; 147
    5904:	99 e2       	ldi	r25, 0x29	; 41
    5906:	65 e0       	ldi	r22, 0x05	; 5
    5908:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    590c:	88 23       	and	r24, r24
    590e:	31 f4       	brne	.+12     	; 0x591c <cc2420radiom_delayedRXFIFO+0x5a>
               cc2420radiom_flushRXFIFO();
    5910:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
    5914:	03 c0       	rjmp	.+6      	; 0x591c <cc2420radiom_delayedRXFIFO+0x5a>
            }
         } else
          {
            cc2420radiom_bPacketReceiving = TRUE;
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	80 93 75 04 	sts	0x0475, r24
         }
      }
      _atomic_end( _atomic );
    591c:	8a 81       	ldd	r24, Y+2	; 0x02
    591e:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   //Now read the RX to get the data 
   if (  ! _bPacketReceiving ) {
    5922:	8b 81       	ldd	r24, Y+3	; 0x03
    5924:	88 23       	and	r24, r24
    5926:	e1 f4       	brne	.+56     	; 0x5960 <cc2420radiom_delayedRXFIFO+0x9e>
      if (  ! cc2420radiom_HPLChipconFIFO_readRXFIFO( len, ( uint8_t* )cc2420radiom_rxbufptr )) {
    5928:	80 91 72 04 	lds	r24, 0x0472
    592c:	90 91 73 04 	lds	r25, 0x0473
    5930:	bc 01       	movw	r22, r24
    5932:	8c 81       	ldd	r24, Y+4	; 0x04
    5934:	0e 94 32 2b 	call	0x5664	; 0x5664 <cc2420radiom_HPLChipconFIFO_readRXFIFO>
    5938:	88 23       	and	r24, r24
    593a:	91 f4       	brne	.+36     	; 0x5960 <cc2420radiom_delayedRXFIFO+0x9e>
          {
            _atomic_t _atomic = _atomic_start();
    593c:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5940:	89 83       	std	Y+1, r24	; 0x01
            cc2420radiom_bPacketReceiving = FALSE;
    5942:	10 92 75 04 	sts	0x0475, r1
            _atomic_end( _atomic );
    5946:	89 81       	ldd	r24, Y+1	; 0x01
    5948:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
         }
         if (  ! postTask( cc2420radiom_delayedRXFIFOtask, 5 )) {
    594c:	83 e9       	ldi	r24, 0x93	; 147
    594e:	99 e2       	ldi	r25, 0x29	; 41
    5950:	65 e0       	ldi	r22, 0x05	; 5
    5952:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    5956:	88 23       	and	r24, r24
    5958:	29 f4       	brne	.+10     	; 0x5964 <cc2420radiom_delayedRXFIFO+0xa2>
            cc2420radiom_flushRXFIFO();
    595a:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
         }
         return ;
    595e:	02 c0       	rjmp	.+4      	; 0x5964 <cc2420radiom_delayedRXFIFO+0xa2>
      }
   }
   cc2420radiom_flushRXFIFO();
    5960:	0e 94 38 2c 	call	0x5870	; 0x5870 <cc2420radiom_flushRXFIFO>
    5964:	24 96       	adiw	r28, 0x04	; 4
    5966:	0f b6       	in	r0, 0x3f	; 63
    5968:	f8 94       	cli
    596a:	de bf       	out	0x3e, r29	; 62
    596c:	0f be       	out	0x3f, r0	; 63
    596e:	cd bf       	out	0x3d, r28	; 61
    5970:	df 91       	pop	r29
    5972:	cf 91       	pop	r28
    5974:	08 95       	ret

00005976 <cc2420radiom_SplitControl_initDone>:
}

//-------------------------------------------------------------------------
inline result_t cc2420radiom_SplitControl_initDone( void ) {
    5976:	cf 93       	push	r28
    5978:	df 93       	push	r29
    597a:	cd b7       	in	r28, 0x3d	; 61
    597c:	de b7       	in	r29, 0x3e	; 62
    597e:	21 97       	sbiw	r28, 0x01	; 1
    5980:	0f b6       	in	r0, 0x3f	; 63
    5982:	f8 94       	cli
    5984:	de bf       	out	0x3e, r29	; 62
    5986:	0f be       	out	0x3f, r0	; 63
    5988:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = cc2420radiom_SplitControl_default_initDone();
    598a:	0e 94 76 26 	call	0x4cec	; 0x4cec <cc2420radiom_SplitControl_default_initDone>
    598e:	89 83       	std	Y+1, r24	; 0x01
   return result;
    5990:	89 81       	ldd	r24, Y+1	; 0x01
    5992:	99 27       	eor	r25, r25
    5994:	21 96       	adiw	r28, 0x01	; 1
    5996:	0f b6       	in	r0, 0x3f	; 63
    5998:	f8 94       	cli
    599a:	de bf       	out	0x3e, r29	; 62
    599c:	0f be       	out	0x3f, r0	; 63
    599e:	cd bf       	out	0x3d, r28	; 61
    59a0:	df 91       	pop	r29
    59a2:	cf 91       	pop	r28
    59a4:	08 95       	ret

000059a6 <restorecc2420state>:
}


inline void restorecc2420state() {
    59a6:	cf 93       	push	r28
    59a8:	df 93       	push	r29
    59aa:	cd b7       	in	r28, 0x3d	; 61
    59ac:	de b7       	in	r29, 0x3e	; 62
  cc2420radiom_stateRadio = 2;
    59ae:	82 e0       	ldi	r24, 0x02	; 2
    59b0:	80 93 f0 04 	sts	0x04F0, r24
    59b4:	df 91       	pop	r29
    59b6:	cf 91       	pop	r28
    59b8:	08 95       	ret

000059ba <wait_cycle>:
 
#include "avrhardware.h"


void wait_cycle() {
    59ba:	cf 93       	push	r28
    59bc:	df 93       	push	r29
    59be:	cd b7       	in	r28, 0x3d	; 61
    59c0:	de b7       	in	r29, 0x3e	; 62
   asm volatile( "nop" );
    59c2:	00 00       	nop
   asm volatile( "nop" );
    59c4:	00 00       	nop
    59c6:	df 91       	pop	r29
    59c8:	cf 91       	pop	r28
    59ca:	08 95       	ret

000059cc <_atomic_sleep>:
}

//-------------------------------------------------------------------------
inline void _atomic_sleep() {
    59cc:	cf 93       	push	r28
    59ce:	df 93       	push	r29
    59d0:	cd b7       	in	r28, 0x3d	; 61
    59d2:	de b7       	in	r29, 0x3e	; 62
   /* Atomically enable interrupts and sleep */
   sei(); // Make sure interrupts are on, so we can wake up!
    59d4:	78 94       	sei
   asm volatile( "sleep" );
    59d6:	88 95       	sleep
   wait_cycle();
    59d8:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <wait_cycle>
    59dc:	df 91       	pop	r29
    59de:	cf 91       	pop	r28
    59e0:	08 95       	ret

000059e2 <_avr_sleep>:
}


inline void _avr_sleep(){
    59e2:	cf 93       	push	r28
    59e4:	df 93       	push	r29
    59e6:	cd b7       	in	r28, 0x3d	; 61
    59e8:	de b7       	in	r29, 0x3e	; 62
	  asm volatile( "sleep" ); 
    59ea:	88 95       	sleep
    59ec:	df 91       	pop	r29
    59ee:	cf 91       	pop	r28
    59f0:	08 95       	ret

000059f2 <_avr_enable_interrupt>:
}

//-------------------------------------------------------------------------
inline void _avr_enable_interrupt() {
    59f2:	cf 93       	push	r28
    59f4:	df 93       	push	r29
    59f6:	cd b7       	in	r28, 0x3d	; 61
    59f8:	de b7       	in	r29, 0x3e	; 62
   sei();
    59fa:	78 94       	sei
    59fc:	df 91       	pop	r29
    59fe:	cf 91       	pop	r28
    5a00:	08 95       	ret

00005a02 <_avr_disable_interrupt>:
}

//-------------------------------------------------------------------------
inline void _avr_disable_interrupt() {
    5a02:	cf 93       	push	r28
    5a04:	df 93       	push	r29
    5a06:	cd b7       	in	r28, 0x3d	; 61
    5a08:	de b7       	in	r29, 0x3e	; 62
   cli();
    5a0a:	f8 94       	cli
    5a0c:	df 91       	pop	r29
    5a0e:	cf 91       	pop	r28
    5a10:	08 95       	ret

00005a12 <_atomic_start_avr>:
}

//-------------------------------------------------------------------------
_atomic_t _atomic_start_avr( void ) {
    5a12:	cf 93       	push	r28
    5a14:	df 93       	push	r29
    5a16:	cd b7       	in	r28, 0x3d	; 61
    5a18:	de b7       	in	r29, 0x3e	; 62
    5a1a:	21 97       	sbiw	r28, 0x01	; 1
    5a1c:	0f b6       	in	r0, 0x3f	; 63
    5a1e:	f8 94       	cli
    5a20:	de bf       	out	0x3e, r29	; 62
    5a22:	0f be       	out	0x3f, r0	; 63
    5a24:	cd bf       	out	0x3d, r28	; 61
   _atomic_t result = inp( SREG );
    5a26:	ef e5       	ldi	r30, 0x5F	; 95
    5a28:	f0 e0       	ldi	r31, 0x00	; 0
    5a2a:	80 81       	ld	r24, Z
    5a2c:	89 83       	std	Y+1, r24	; 0x01
   cli();
    5a2e:	f8 94       	cli
   return result;
    5a30:	89 81       	ldd	r24, Y+1	; 0x01
    5a32:	99 27       	eor	r25, r25
    5a34:	21 96       	adiw	r28, 0x01	; 1
    5a36:	0f b6       	in	r0, 0x3f	; 63
    5a38:	f8 94       	cli
    5a3a:	de bf       	out	0x3e, r29	; 62
    5a3c:	0f be       	out	0x3f, r0	; 63
    5a3e:	cd bf       	out	0x3d, r28	; 61
    5a40:	df 91       	pop	r29
    5a42:	cf 91       	pop	r28
    5a44:	08 95       	ret

00005a46 <_atomic_end_avr>:
}

//-------------------------------------------------------------------------
void _atomic_end_avr( _atomic_t oldSreg ) {
    5a46:	cf 93       	push	r28
    5a48:	df 93       	push	r29
    5a4a:	cd b7       	in	r28, 0x3d	; 61
    5a4c:	de b7       	in	r29, 0x3e	; 62
    5a4e:	21 97       	sbiw	r28, 0x01	; 1
    5a50:	0f b6       	in	r0, 0x3f	; 63
    5a52:	f8 94       	cli
    5a54:	de bf       	out	0x3e, r29	; 62
    5a56:	0f be       	out	0x3f, r0	; 63
    5a58:	cd bf       	out	0x3d, r28	; 61
    5a5a:	89 83       	std	Y+1, r24	; 0x01
   outp( oldSreg, SREG );
    5a5c:	ef e5       	ldi	r30, 0x5F	; 95
    5a5e:	f0 e0       	ldi	r31, 0x00	; 0
    5a60:	89 81       	ldd	r24, Y+1	; 0x01
    5a62:	80 83       	st	Z, r24
    5a64:	21 96       	adiw	r28, 0x01	; 1
    5a66:	0f b6       	in	r0, 0x3f	; 63
    5a68:	f8 94       	cli
    5a6a:	de bf       	out	0x3e, r29	; 62
    5a6c:	0f be       	out	0x3f, r0	; 63
    5a6e:	cd bf       	out	0x3d, r28	; 61
    5a70:	df 91       	pop	r29
    5a72:	cf 91       	pop	r28
    5a74:	08 95       	ret

00005a76 <avr_resetNode>:
}


void avr_resetNode() {
    5a76:	cf 93       	push	r28
    5a78:	df 93       	push	r29
    5a7a:	cd b7       	in	r28, 0x3d	; 61
    5a7c:	de b7       	in	r29, 0x3e	; 62
   asm volatile( "ldi	r30, 0x00":: );
    5a7e:	e0 e0       	ldi	r30, 0x00	; 0
   asm volatile( "ldi	r31, 0x00":: );
    5a80:	f0 e0       	ldi	r31, 0x00	; 0
   asm volatile( "icall":: );
    5a82:	09 95       	icall
    5a84:	df 91       	pop	r29
    5a86:	cf 91       	pop	r28
    5a88:	08 95       	ret

00005a8a <HPLClock_Clock_readCounter>:
extern volatile uint16_t *stackinterrupt_ptr; 

inline   
uint8_t HPLClock_Clock_readCounter(void)
{
    5a8a:	cf 93       	push	r28
    5a8c:	df 93       	push	r29
    5a8e:	cd b7       	in	r28, 0x3d	; 61
    5a90:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    5a92:	e2 e5       	ldi	r30, 0x52	; 82
    5a94:	f0 e0       	ldi	r31, 0x00	; 0
    5a96:	80 81       	ld	r24, Z
    5a98:	99 27       	eor	r25, r25
    5a9a:	df 91       	pop	r29
    5a9c:	cf 91       	pop	r28
    5a9e:	08 95       	ret

00005aa0 <HPLClock_Clock_getInterval>:
  //return * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x32 + 0x20);
}
inline   
uint8_t HPLClock_Clock_getInterval(void)
{
    5aa0:	cf 93       	push	r28
    5aa2:	df 93       	push	r29
    5aa4:	cd b7       	in	r28, 0x3d	; 61
    5aa6:	de b7       	in	r29, 0x3e	; 62
   return OCR0;
    5aa8:	e1 e5       	ldi	r30, 0x51	; 81
    5aaa:	f0 e0       	ldi	r31, 0x00	; 0
    5aac:	80 81       	ld	r24, Z
    5aae:	99 27       	eor	r25, r25
    5ab0:	df 91       	pop	r29
    5ab2:	cf 91       	pop	r28
    5ab4:	08 95       	ret

00005ab6 <HPLClock_Clock_fire>:
  //return * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20);
}


inline  result_t HPLClock_Clock_fire(void){
    5ab6:	cf 93       	push	r28
    5ab8:	df 93       	push	r29
    5aba:	cd b7       	in	r28, 0x3d	; 61
    5abc:	de b7       	in	r29, 0x3e	; 62
    5abe:	21 97       	sbiw	r28, 0x01	; 1
    5ac0:	0f b6       	in	r0, 0x3f	; 63
    5ac2:	f8 94       	cli
    5ac4:	de bf       	out	0x3e, r29	; 62
    5ac6:	0f be       	out	0x3f, r0	; 63
    5ac8:	cd bf       	out	0x3d, r28	; 61
  unsigned char result;
  result = TimerM_Clock_fire();
    5aca:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <TimerM_Clock_fire>
    5ace:	89 83       	std	Y+1, r24	; 0x01
  return result;
    5ad0:	89 81       	ldd	r24, Y+1	; 0x01
    5ad2:	99 27       	eor	r25, r25
    5ad4:	21 96       	adiw	r28, 0x01	; 1
    5ad6:	0f b6       	in	r0, 0x3f	; 63
    5ad8:	f8 94       	cli
    5ada:	de bf       	out	0x3e, r29	; 62
    5adc:	0f be       	out	0x3f, r0	; 63
    5ade:	cd bf       	out	0x3d, r28	; 61
    5ae0:	df 91       	pop	r29
    5ae2:	cf 91       	pop	r28
    5ae4:	08 95       	ret

00005ae6 <HPLClock_Clock_setInterval>:
}


inline   
void HPLClock_Clock_setInterval(uint8_t value)
{
    5ae6:	cf 93       	push	r28
    5ae8:	df 93       	push	r29
    5aea:	cd b7       	in	r28, 0x3d	; 61
    5aec:	de b7       	in	r29, 0x3e	; 62
    5aee:	21 97       	sbiw	r28, 0x01	; 1
    5af0:	0f b6       	in	r0, 0x3f	; 63
    5af2:	f8 94       	cli
    5af4:	de bf       	out	0x3e, r29	; 62
    5af6:	0f be       	out	0x3f, r0	; 63
    5af8:	cd bf       	out	0x3d, r28	; 61
    5afa:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = value;
    5afc:	e1 e5       	ldi	r30, 0x51	; 81
    5afe:	f0 e0       	ldi	r31, 0x00	; 0
    5b00:	89 81       	ldd	r24, Y+1	; 0x01
    5b02:	80 83       	st	Z, r24
    5b04:	21 96       	adiw	r28, 0x01	; 1
    5b06:	0f b6       	in	r0, 0x3f	; 63
    5b08:	f8 94       	cli
    5b0a:	de bf       	out	0x3e, r29	; 62
    5b0c:	0f be       	out	0x3f, r0	; 63
    5b0e:	cd bf       	out	0x3d, r28	; 61
    5b10:	df 91       	pop	r29
    5b12:	cf 91       	pop	r28
    5b14:	08 95       	ret

00005b16 <HPLClock_Clock_setRate>:
  //* (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20) = value;
}

inline
result_t HPLClock_Clock_setRate(char interval, char scale)
{
    5b16:	cf 93       	push	r28
    5b18:	df 93       	push	r29
    5b1a:	cd b7       	in	r28, 0x3d	; 61
    5b1c:	de b7       	in	r29, 0x3e	; 62
    5b1e:	23 97       	sbiw	r28, 0x03	; 3
    5b20:	0f b6       	in	r0, 0x3f	; 63
    5b22:	f8 94       	cli
    5b24:	de bf       	out	0x3e, r29	; 62
    5b26:	0f be       	out	0x3f, r0	; 63
    5b28:	cd bf       	out	0x3d, r28	; 61
    5b2a:	8a 83       	std	Y+2, r24	; 0x02
    5b2c:	6b 83       	std	Y+3, r22	; 0x03
	
  scale &= 0x7;
    5b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b30:	87 70       	andi	r24, 0x07	; 7
    5b32:	8b 83       	std	Y+3, r24	; 0x03
  scale |= 0x8;
    5b34:	8b 81       	ldd	r24, Y+3	; 0x03
    5b36:	88 60       	ori	r24, 0x08	; 8
    5b38:	8b 83       	std	Y+3, r24	; 0x03
  //shoudl be 1011 here in scale 
  { _atomic_t _atomic = _atomic_start();
    5b3a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5b3e:	89 83       	std	Y+1, r24	; 0x01
    {
    	
    	
      cbi(TIMSK, TOIE0);
    5b40:	a7 e5       	ldi	r26, 0x57	; 87
    5b42:	b0 e0       	ldi	r27, 0x00	; 0
    5b44:	e7 e5       	ldi	r30, 0x57	; 87
    5b46:	f0 e0       	ldi	r31, 0x00	; 0
    5b48:	80 81       	ld	r24, Z
    5b4a:	8e 7f       	andi	r24, 0xFE	; 254
    5b4c:	8c 93       	st	X, r24
      cbi(TIMSK, OCIE0);     //Disable TC0 interrupt
    5b4e:	a7 e5       	ldi	r26, 0x57	; 87
    5b50:	b0 e0       	ldi	r27, 0x00	; 0
    5b52:	e7 e5       	ldi	r30, 0x57	; 87
    5b54:	f0 e0       	ldi	r31, 0x00	; 0
    5b56:	80 81       	ld	r24, Z
    5b58:	8d 7f       	andi	r24, 0xFD	; 253
    5b5a:	8c 93       	st	X, r24
      sbi(ASSR, AS0);        //set Timer/Counter0 to be asynchronous
    5b5c:	a0 e5       	ldi	r26, 0x50	; 80
    5b5e:	b0 e0       	ldi	r27, 0x00	; 0
    5b60:	e0 e5       	ldi	r30, 0x50	; 80
    5b62:	f0 e0       	ldi	r31, 0x00	; 0
    5b64:	80 81       	ld	r24, Z
    5b66:	88 60       	ori	r24, 0x08	; 8
    5b68:	8c 93       	st	X, r24
      //from the CPU clock with a second external
      //clock(32,768kHz)driving it.
      outp(scale, TCCR0);    //prescale the timer to be clock/128 to make it
    5b6a:	e3 e5       	ldi	r30, 0x53	; 83
    5b6c:	f0 e0       	ldi	r31, 0x00	; 0
    5b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b70:	80 83       	st	Z, r24
      outp(0, TCNT0);
    5b72:	e2 e5       	ldi	r30, 0x52	; 82
    5b74:	f0 e0       	ldi	r31, 0x00	; 0
    5b76:	10 82       	st	Z, r1
      outp(interval, OCR0);
    5b78:	e1 e5       	ldi	r30, 0x51	; 81
    5b7a:	f0 e0       	ldi	r31, 0x00	; 0
    5b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b7e:	80 83       	st	Z, r24
      sbi(TIMSK, OCIE0);
    5b80:	a7 e5       	ldi	r26, 0x57	; 87
    5b82:	b0 e0       	ldi	r27, 0x00	; 0
    5b84:	e7 e5       	ldi	r30, 0x57	; 87
    5b86:	f0 e0       	ldi	r31, 0x00	; 0
    5b88:	80 81       	ld	r24, Z
    5b8a:	82 60       	ori	r24, 0x02	; 2
    5b8c:	8c 93       	st	X, r24
      
      
     /* * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x37 + 0x20) &= ~(1 << 0);
      * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x37 + 0x20) &= ~(1 << 1);
      * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x30 + 0x20) |= 1 << 3;


      * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x33 + 0x20) = scale;
      * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x32 + 0x20) = 0;
      * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x31 + 0x20) = interval;
      * (volatile unsigned char *)(unsigned int )& * (volatile unsigned char *)(0x37 + 0x20) |= 1 << 1;
      */
    }
    _atomic_end(_atomic); }
    5b8e:	89 81       	ldd	r24, Y+1	; 0x01
    5b90:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
  return SUCCESS;
    5b94:	81 e0       	ldi	r24, 0x01	; 1
    5b96:	90 e0       	ldi	r25, 0x00	; 0
    5b98:	23 96       	adiw	r28, 0x03	; 3
    5b9a:	0f b6       	in	r0, 0x3f	; 63
    5b9c:	f8 94       	cli
    5b9e:	de bf       	out	0x3e, r29	; 62
    5ba0:	0f be       	out	0x3f, r0	; 63
    5ba2:	cd bf       	out	0x3d, r28	; 61
    5ba4:	df 91       	pop	r29
    5ba6:	cf 91       	pop	r28
    5ba8:	08 95       	ret

00005baa <__vector_15>:
}




_INTERRUPT(SIG_OUTPUT_COMPARE0)
{
    5baa:	78 94       	sei
    5bac:	1f 92       	push	r1
    5bae:	0f 92       	push	r0
    5bb0:	0f b6       	in	r0, 0x3f	; 63
    5bb2:	0f 92       	push	r0
    5bb4:	11 24       	eor	r1, r1
    5bb6:	2f 93       	push	r18
    5bb8:	3f 93       	push	r19
    5bba:	4f 93       	push	r20
    5bbc:	5f 93       	push	r21
    5bbe:	6f 93       	push	r22
    5bc0:	7f 93       	push	r23
    5bc2:	8f 93       	push	r24
    5bc4:	9f 93       	push	r25
    5bc6:	af 93       	push	r26
    5bc8:	bf 93       	push	r27
    5bca:	ef 93       	push	r30
    5bcc:	ff 93       	push	r31
    5bce:	cf 93       	push	r28
    5bd0:	df 93       	push	r29
    5bd2:	cd b7       	in	r28, 0x3d	; 61
    5bd4:	de b7       	in	r29, 0x3e	; 62
    5bd6:	22 97       	sbiw	r28, 0x02	; 2
    5bd8:	f8 94       	cli
    5bda:	de bf       	out	0x3e, r29	; 62
    5bdc:	78 94       	sei
    5bde:	cd bf       	out	0x3d, r28	; 61

  _atomic_t _atomic;
  uint8_t isthreadtrue; 
  
   
  isthreadtrue = 0;
    5be0:	19 82       	std	Y+1, r1	; 0x01
  
   _atomic = _atomic_start();
    5be2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5be6:	8a 83       	std	Y+2, r24	; 0x02
  if (is_thread())
    5be8:	0e 94 0b 91 	call	0x12216	; 0x12216 <is_thread>
    5bec:	88 23       	and	r24, r24
    5bee:	71 f0       	breq	.+28     	; 0x5c0c <__vector_15+0x62>
   {
   isthreadtrue = 1; 
    5bf0:	81 e0       	ldi	r24, 0x01	; 1
    5bf2:	89 83       	std	Y+1, r24	; 0x01
   SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);  }
    5bf4:	8d b7       	in	r24, 0x3d	; 61
    5bf6:	9e b7       	in	r25, 0x3e	; 62
    5bf8:	90 93 09 0a 	sts	0x0A09, r25
    5bfc:	80 93 08 0a 	sts	0x0A08, r24
    5c00:	80 91 cf 08 	lds	r24, 0x08CF
    5c04:	90 91 d0 08 	lds	r25, 0x08D0
    5c08:	9e bf       	out	0x3e, r25	; 62
    5c0a:	8d bf       	out	0x3d, r24	; 61
   _atomic_end(_atomic);
    5c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c0e:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>


  { _atomic = _atomic_start();
    5c12:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5c16:	8a 83       	std	Y+2, r24	; 0x02
   

    {
      if (HPLClock_set_flag) {
    5c18:	80 91 f4 04 	lds	r24, 0x04F4
    5c1c:	88 23       	and	r24, r24
    5c1e:	a9 f0       	breq	.+42     	; 0x5c4a <__vector_15+0xa0>
          HPLClock_mscale = HPLClock_nextScale;
    5c20:	80 91 f3 04 	lds	r24, 0x04F3
    5c24:	80 93 f2 04 	sts	0x04F2, r24
          HPLClock_nextScale |= 0x8;
    5c28:	80 91 f3 04 	lds	r24, 0x04F3
    5c2c:	88 60       	ori	r24, 0x08	; 8
    5c2e:	80 93 f3 04 	sts	0x04F3, r24
          
          outp(HPLClock_nextScale, TCCR0);
    5c32:	e3 e5       	ldi	r30, 0x53	; 83
    5c34:	f0 e0       	ldi	r31, 0x00	; 0
    5c36:	80 91 f3 04 	lds	r24, 0x04F3
    5c3a:	80 83       	st	Z, r24
	
	        outp(HPLClock_minterval, OCR0);
    5c3c:	e1 e5       	ldi	r30, 0x51	; 81
    5c3e:	f0 e0       	ldi	r31, 0x00	; 0
    5c40:	80 91 f5 04 	lds	r24, 0x04F5
    5c44:	80 83       	st	Z, r24
	
          HPLClock_set_flag = 0;
    5c46:	10 92 f4 04 	sts	0x04F4, r1
        }
    }
    _atomic_end(_atomic); }
    5c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c4c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
  HPLClock_Clock_fire();
    5c50:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <HPLClock_Clock_fire>

  _atomic = _atomic_start();
    5c54:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5c58:	8a 83       	std	Y+2, r24	; 0x02
 if (isthreadtrue == 1)
    5c5a:	89 81       	ldd	r24, Y+1	; 0x01
    5c5c:	81 30       	cpi	r24, 0x01	; 1
    5c5e:	69 f4       	brne	.+26     	; 0x5c7a <__vector_15+0xd0>
 {
  isthreadtrue = 0; 
    5c60:	19 82       	std	Y+1, r1	; 0x01
  SWAP_STACK_PTR(old_stack_ptr, stackinterrupt_ptr);  
    5c62:	8d b7       	in	r24, 0x3d	; 61
    5c64:	9e b7       	in	r25, 0x3e	; 62
    5c66:	90 93 d0 08 	sts	0x08D0, r25
    5c6a:	80 93 cf 08 	sts	0x08CF, r24
    5c6e:	80 91 08 0a 	lds	r24, 0x0A08
    5c72:	90 91 09 0a 	lds	r25, 0x0A09
    5c76:	9e bf       	out	0x3e, r25	; 62
    5c78:	8d bf       	out	0x3d, r24	; 61
  //thread_yield();
 }
 _atomic_end(_atomic); 
    5c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c7c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    5c80:	22 96       	adiw	r28, 0x02	; 2
    5c82:	f8 94       	cli
    5c84:	de bf       	out	0x3e, r29	; 62
    5c86:	cd bf       	out	0x3d, r28	; 61
    5c88:	df 91       	pop	r29
    5c8a:	cf 91       	pop	r28
    5c8c:	ff 91       	pop	r31
    5c8e:	ef 91       	pop	r30
    5c90:	bf 91       	pop	r27
    5c92:	af 91       	pop	r26
    5c94:	9f 91       	pop	r25
    5c96:	8f 91       	pop	r24
    5c98:	7f 91       	pop	r23
    5c9a:	6f 91       	pop	r22
    5c9c:	5f 91       	pop	r21
    5c9e:	4f 91       	pop	r20
    5ca0:	3f 91       	pop	r19
    5ca2:	2f 91       	pop	r18
    5ca4:	0f 90       	pop	r0
    5ca6:	0f be       	out	0x3f, r0	; 63
    5ca8:	0f 90       	pop	r0
    5caa:	1f 90       	pop	r1
    5cac:	18 95       	reti

00005cae <thread_yield_logger>:
//EA00


void thread_yield_logger()
{
    5cae:	cf 93       	push	r28
    5cb0:	df 93       	push	r29
    5cb2:	cd b7       	in	r28, 0x3d	; 61
    5cb4:	de b7       	in	r29, 0x3e	; 62
    5cb6:	22 97       	sbiw	r28, 0x02	; 2
    5cb8:	0f b6       	in	r0, 0x3f	; 63
    5cba:	f8 94       	cli
    5cbc:	de bf       	out	0x3e, r29	; 62
    5cbe:	0f be       	out	0x3f, r0	; 63
    5cc0:	cd bf       	out	0x3d, r28	; 61

 uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    5cc2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5cc6:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    5cc8:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    5ccc:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    5cce:	89 81       	ldd	r24, Y+1	; 0x01
    5cd0:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_YIELDFUNCTION, currentindex);
    5cd4:	6a 81       	ldd	r22, Y+2	; 0x02
    5cd6:	85 e6       	ldi	r24, 0x65	; 101
    5cd8:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   thread_yield();
    5cdc:	0e 94 9e 93 	call	0x1273c	; 0x1273c <thread_yield>
    5ce0:	22 96       	adiw	r28, 0x02	; 2
    5ce2:	0f b6       	in	r0, 0x3f	; 63
    5ce4:	f8 94       	cli
    5ce6:	de bf       	out	0x3e, r29	; 62
    5ce8:	0f be       	out	0x3f, r0	; 63
    5cea:	cd bf       	out	0x3d, r28	; 61
    5cec:	df 91       	pop	r29
    5cee:	cf 91       	pop	r28
    5cf0:	08 95       	ret

00005cf2 <Leds_greenToggle_Logger>:
}

/**\ingroup syscall 
     Yield current thread.
*/
void yieldfunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void yieldfunction() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
    #ifdef TRACE_ENABLE_SYSCALL_YIELDFUNCTION
     thread_yield_logger();
	#endif
   #else
     thread_yield();
   #endif
   
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void Leds_greenToggle_Logger()
{
    5cf2:	cf 93       	push	r28
    5cf4:	df 93       	push	r29
    5cf6:	cd b7       	in	r28, 0x3d	; 61
    5cf8:	de b7       	in	r29, 0x3e	; 62
    5cfa:	22 97       	sbiw	r28, 0x02	; 2
    5cfc:	0f b6       	in	r0, 0x3f	; 63
    5cfe:	f8 94       	cli
    5d00:	de bf       	out	0x3e, r29	; 62
    5d02:	0f be       	out	0x3f, r0	; 63
    5d04:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    5d06:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5d0a:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    5d0c:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    5d10:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    5d12:	89 81       	ldd	r24, Y+1	; 0x01
    5d14:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GREENTOGGLEFUNCTION, currentindex);
    5d18:	6a 81       	ldd	r22, Y+2	; 0x02
    5d1a:	86 e6       	ldi	r24, 0x66	; 102
    5d1c:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  Leds_greenToggle();
    5d20:	0e 94 e6 58 	call	0xb1cc	; 0xb1cc <Leds_greenToggle>
    5d24:	22 96       	adiw	r28, 0x02	; 2
    5d26:	0f b6       	in	r0, 0x3f	; 63
    5d28:	f8 94       	cli
    5d2a:	de bf       	out	0x3e, r29	; 62
    5d2c:	0f be       	out	0x3f, r0	; 63
    5d2e:	cd bf       	out	0x3d, r28	; 61
    5d30:	df 91       	pop	r29
    5d32:	cf 91       	pop	r28
    5d34:	08 95       	ret

00005d36 <Leds_redToggle_Logger>:
}

/**\ingroup syscall 
     Toggle the green LED.
*/
void greentogglefunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void greentogglefunction() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_GREENTOGGLEFUNCTION
     Leds_greenToggle_Logger();
   #endif
  #else   
   Leds_greenToggle();
  #endif 
  
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void Leds_redToggle_Logger()
{
    5d36:	cf 93       	push	r28
    5d38:	df 93       	push	r29
    5d3a:	cd b7       	in	r28, 0x3d	; 61
    5d3c:	de b7       	in	r29, 0x3e	; 62
    5d3e:	22 97       	sbiw	r28, 0x02	; 2
    5d40:	0f b6       	in	r0, 0x3f	; 63
    5d42:	f8 94       	cli
    5d44:	de bf       	out	0x3e, r29	; 62
    5d46:	0f be       	out	0x3f, r0	; 63
    5d48:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    5d4a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5d4e:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    5d50:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    5d54:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    5d56:	89 81       	ldd	r24, Y+1	; 0x01
    5d58:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_REDTOGGLEFUNCTION, currentindex);
    5d5c:	6a 81       	ldd	r22, Y+2	; 0x02
    5d5e:	87 e6       	ldi	r24, 0x67	; 103
    5d60:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  Leds_redToggle();
    5d64:	0e 94 81 58 	call	0xb102	; 0xb102 <Leds_redToggle>
    5d68:	22 96       	adiw	r28, 0x02	; 2
    5d6a:	0f b6       	in	r0, 0x3f	; 63
    5d6c:	f8 94       	cli
    5d6e:	de bf       	out	0x3e, r29	; 62
    5d70:	0f be       	out	0x3f, r0	; 63
    5d72:	cd bf       	out	0x3d, r28	; 61
    5d74:	df 91       	pop	r29
    5d76:	cf 91       	pop	r28
    5d78:	08 95       	ret

00005d7a <getThreadAddress_avr>:
}


/**\ingroup syscall 
     Toggle the red LED. 
*/


void redtogglefunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void redtogglefunction() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_REDTOGGLEFUNCTION
   Leds_redToggle_Logger();
   #endif
  #else
   Leds_redToggle();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void getThreadAddress_avr()
{
    5d7a:	cf 93       	push	r28
    5d7c:	df 93       	push	r29
    5d7e:	cd b7       	in	r28, 0x3d	; 61
    5d80:	de b7       	in	r29, 0x3e	; 62
    5d82:	22 97       	sbiw	r28, 0x02	; 2
    5d84:	0f b6       	in	r0, 0x3f	; 63
    5d86:	f8 94       	cli
    5d88:	de bf       	out	0x3e, r29	; 62
    5d8a:	0f be       	out	0x3f, r0	; 63
    5d8c:	cd bf       	out	0x3d, r28	; 61
  thread **returnthreadaddr; 
  returnthreadaddr = getThreadAddress(); 
    5d8e:	0e 94 e1 97 	call	0x12fc2	; 0x12fc2 <getThreadAddress>
    5d92:	9a 83       	std	Y+2, r25	; 0x02
    5d94:	89 83       	std	Y+1, r24	; 0x01
  asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( returnthreadaddr ) );
    5d96:	89 81       	ldd	r24, Y+1	; 0x01
    5d98:	9a 81       	ldd	r25, Y+2	; 0x02
    5d9a:	48 2f       	mov	r20, r24
    5d9c:	59 2f       	mov	r21, r25
    5d9e:	22 96       	adiw	r28, 0x02	; 2
    5da0:	0f b6       	in	r0, 0x3f	; 63
    5da2:	f8 94       	cli
    5da4:	de bf       	out	0x3e, r29	; 62
    5da6:	0f be       	out	0x3f, r0	; 63
    5da8:	cd bf       	out	0x3d, r28	; 61
    5daa:	df 91       	pop	r29
    5dac:	cf 91       	pop	r28
    5dae:	08 95       	ret

00005db0 <getThreadAddress_Logger>:
}
  


void getThreadAddress_Logger()
{
    5db0:	cf 93       	push	r28
    5db2:	df 93       	push	r29
    5db4:	cd b7       	in	r28, 0x3d	; 61
    5db6:	de b7       	in	r29, 0x3e	; 62
    5db8:	22 97       	sbiw	r28, 0x02	; 2
    5dba:	0f b6       	in	r0, 0x3f	; 63
    5dbc:	f8 94       	cli
    5dbe:	de bf       	out	0x3e, r29	; 62
    5dc0:	0f be       	out	0x3f, r0	; 63
    5dc2:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    5dc4:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5dc8:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    5dca:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    5dce:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    5dd0:	89 81       	ldd	r24, Y+1	; 0x01
    5dd2:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETCURRENTTHREADADDRESS, currentindex); 
    5dd6:	6a 81       	ldd	r22, Y+2	; 0x02
    5dd8:	88 e6       	ldi	r24, 0x68	; 104
    5dda:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  getThreadAddress_avr(); 
    5dde:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <getThreadAddress_avr>
    5de2:	22 96       	adiw	r28, 0x02	; 2
    5de4:	0f b6       	in	r0, 0x3f	; 63
    5de6:	f8 94       	cli
    5de8:	de bf       	out	0x3e, r29	; 62
    5dea:	0f be       	out	0x3f, r0	; 63
    5dec:	cd bf       	out	0x3d, r28	; 61
    5dee:	df 91       	pop	r29
    5df0:	cf 91       	pop	r28
    5df2:	08 95       	ret

00005df4 <getRadioMutexAddress_avr>:
}


//EA09
/**\ingroup syscall 
     This function is going to put the address into two registers, R24 and R25
*/

void getCurrentThreadAddress()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getCurrentThreadAddress() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_GETCURRENTTHREADADDRESS
   getThreadAddress_Logger();
   #endif
  #else
   getThreadAddress_avr(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}

void getRadioMutexAddress_avr()
{
    5df4:	cf 93       	push	r28
    5df6:	df 93       	push	r29
    5df8:	cd b7       	in	r28, 0x3d	; 61
    5dfa:	de b7       	in	r29, 0x3e	; 62
    5dfc:	22 97       	sbiw	r28, 0x02	; 2
    5dfe:	0f b6       	in	r0, 0x3f	; 63
    5e00:	f8 94       	cli
    5e02:	de bf       	out	0x3e, r29	; 62
    5e04:	0f be       	out	0x3f, r0	; 63
    5e06:	cd bf       	out	0x3d, r28	; 61
   mutex *msendaddr  = getRadioMutexAddress();
    5e08:	0e 94 1a 8e 	call	0x11c34	; 0x11c34 <getRadioMutexAddress>
    5e0c:	9a 83       	std	Y+2, r25	; 0x02
    5e0e:	89 83       	std	Y+1, r24	; 0x01
   asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( msendaddr ) );
    5e10:	89 81       	ldd	r24, Y+1	; 0x01
    5e12:	9a 81       	ldd	r25, Y+2	; 0x02
    5e14:	48 2f       	mov	r20, r24
    5e16:	59 2f       	mov	r21, r25
    5e18:	22 96       	adiw	r28, 0x02	; 2
    5e1a:	0f b6       	in	r0, 0x3f	; 63
    5e1c:	f8 94       	cli
    5e1e:	de bf       	out	0x3e, r29	; 62
    5e20:	0f be       	out	0x3f, r0	; 63
    5e22:	cd bf       	out	0x3d, r28	; 61
    5e24:	df 91       	pop	r29
    5e26:	cf 91       	pop	r28
    5e28:	08 95       	ret

00005e2a <getRadioMutexAddress_Logger>:

}

void getRadioMutexAddress_Logger()
{
    5e2a:	cf 93       	push	r28
    5e2c:	df 93       	push	r29
    5e2e:	cd b7       	in	r28, 0x3d	; 61
    5e30:	de b7       	in	r29, 0x3e	; 62
    5e32:	22 97       	sbiw	r28, 0x02	; 2
    5e34:	0f b6       	in	r0, 0x3f	; 63
    5e36:	f8 94       	cli
    5e38:	de bf       	out	0x3e, r29	; 62
    5e3a:	0f be       	out	0x3f, r0	; 63
    5e3c:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    5e3e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5e42:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    5e44:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    5e48:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    5e4a:	89 81       	ldd	r24, Y+1	; 0x01
    5e4c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETRADIOMUTEX, currentindex); 
    5e50:	6a 81       	ldd	r22, Y+2	; 0x02
    5e52:	89 e6       	ldi	r24, 0x69	; 105
    5e54:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   getRadioMutexAddress_avr();
    5e58:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <getRadioMutexAddress_avr>
    5e5c:	22 96       	adiw	r28, 0x02	; 2
    5e5e:	0f b6       	in	r0, 0x3f	; 63
    5e60:	f8 94       	cli
    5e62:	de bf       	out	0x3e, r29	; 62
    5e64:	0f be       	out	0x3f, r0	; 63
    5e66:	cd bf       	out	0x3d, r28	; 61
    5e68:	df 91       	pop	r29
    5e6a:	cf 91       	pop	r28
    5e6c:	08 95       	ret

00005e6e <SocketRadioSend_Logger>:
}


/**\ingroup syscall 
  Get the mutex of radio send address.
*/
void getRadioMutex()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getRadioMutex() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
     #ifdef TRACE_ENABLE_SYSCALL_GETRADIOMUTEX
	  getRadioMutexAddress_Logger();
     #endif
	 #else
      getRadioMutexAddress_avr();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void SocketRadioSend_Logger()
{
    5e6e:	cf 93       	push	r28
    5e70:	df 93       	push	r29
    5e72:	cd b7       	in	r28, 0x3d	; 61
    5e74:	de b7       	in	r29, 0x3e	; 62
    5e76:	22 97       	sbiw	r28, 0x02	; 2
    5e78:	0f b6       	in	r0, 0x3f	; 63
    5e7a:	f8 94       	cli
    5e7c:	de bf       	out	0x3e, r29	; 62
    5e7e:	0f be       	out	0x3f, r0	; 63
    5e80:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    5e82:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5e86:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    5e88:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    5e8c:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    5e8e:	89 81       	ldd	r24, Y+1	; 0x01
    5e90:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETRADIOSENDFUNCTION, currentindex); 
    5e94:	6a 81       	ldd	r22, Y+2	; 0x02
    5e96:	8a e6       	ldi	r24, 0x6A	; 106
    5e98:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   SocketRadioSend();  
    5e9c:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <SocketRadioSend>
    5ea0:	22 96       	adiw	r28, 0x02	; 2
    5ea2:	0f b6       	in	r0, 0x3f	; 63
    5ea4:	f8 94       	cli
    5ea6:	de bf       	out	0x3e, r29	; 62
    5ea8:	0f be       	out	0x3f, r0	; 63
    5eaa:	cd bf       	out	0x3d, r28	; 61
    5eac:	df 91       	pop	r29
    5eae:	cf 91       	pop	r28
    5eb0:	08 95       	ret

00005eb2 <mutexUnlockFunction>:
}


/**\ingroup syscall 
     Call the radio send function indirectly. 
*/


void getRadioSendFunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getRadioSendFunction() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_GETRADIOSENDFUNCTION
     SocketRadioSend_Logger();
   #endif
   #else
     SocketRadioSend();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}

//bug
void mutexUnlockFunction()
{
    5eb2:	cf 93       	push	r28
    5eb4:	df 93       	push	r29
    5eb6:	cd b7       	in	r28, 0x3d	; 61
    5eb8:	de b7       	in	r29, 0x3e	; 62
    5eba:	22 97       	sbiw	r28, 0x02	; 2
    5ebc:	0f b6       	in	r0, 0x3f	; 63
    5ebe:	f8 94       	cli
    5ec0:	de bf       	out	0x3e, r29	; 62
    5ec2:	0f be       	out	0x3f, r0	; 63
    5ec4:	cd bf       	out	0x3d, r28	; 61
  void *addr; 
  asm volatile( "mov %A0, r20""\n\t""mov %B0, r21""\n\t": "=r"( addr ) : );
    5ec6:	84 2f       	mov	r24, r20
    5ec8:	95 2f       	mov	r25, r21
    5eca:	9a 83       	std	Y+2, r25	; 0x02
    5ecc:	89 83       	std	Y+1, r24	; 0x01
  Mutex_unlock((volatile mutex*)addr); 
    5ece:	89 81       	ldd	r24, Y+1	; 0x01
    5ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed2:	0e 94 9f 8d 	call	0x11b3e	; 0x11b3e <Mutex_unlock>
    5ed6:	22 96       	adiw	r28, 0x02	; 2
    5ed8:	0f b6       	in	r0, 0x3f	; 63
    5eda:	f8 94       	cli
    5edc:	de bf       	out	0x3e, r29	; 62
    5ede:	0f be       	out	0x3f, r0	; 63
    5ee0:	cd bf       	out	0x3d, r28	; 61
    5ee2:	df 91       	pop	r29
    5ee4:	cf 91       	pop	r28
    5ee6:	08 95       	ret

00005ee8 <mutexUnlockFunction_Logger>:

}

void mutexUnlockFunction_Logger()
{
    5ee8:	cf 93       	push	r28
    5eea:	df 93       	push	r29
    5eec:	cd b7       	in	r28, 0x3d	; 61
    5eee:	de b7       	in	r29, 0x3e	; 62
    5ef0:	22 97       	sbiw	r28, 0x02	; 2
    5ef2:	0f b6       	in	r0, 0x3f	; 63
    5ef4:	f8 94       	cli
    5ef6:	de bf       	out	0x3e, r29	; 62
    5ef8:	0f be       	out	0x3f, r0	; 63
    5efa:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    5efc:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5f00:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    5f02:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    5f06:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    5f08:	89 81       	ldd	r24, Y+1	; 0x01
    5f0a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_MUTEXUNLOCKFUNCTION, currentindex); 
    5f0e:	6a 81       	ldd	r22, Y+2	; 0x02
    5f10:	8b e6       	ldi	r24, 0x6B	; 107
    5f12:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  mutexUnlockFunction(); 
    5f16:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <mutexUnlockFunction>
    5f1a:	22 96       	adiw	r28, 0x02	; 2
    5f1c:	0f b6       	in	r0, 0x3f	; 63
    5f1e:	f8 94       	cli
    5f20:	de bf       	out	0x3e, r29	; 62
    5f22:	0f be       	out	0x3f, r0	; 63
    5f24:	cd bf       	out	0x3d, r28	; 61
    5f26:	df 91       	pop	r29
    5f28:	cf 91       	pop	r28
    5f2a:	08 95       	ret

00005f2c <getThreadIndexAddress_avr>:
}

/**\ingroup syscall 
      Unlock the mutex. 
*/
void unlockMutex()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void unlockMutex() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_MUTEXUNLOCKFUNCTION
     mutexUnlockFunction_Logger();
   #endif
   #else
     mutexUnlockFunction();
  #endif 
  
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void getThreadIndexAddress_avr()
{
    5f2c:	cf 93       	push	r28
    5f2e:	df 93       	push	r29
    5f30:	cd b7       	in	r28, 0x3d	; 61
    5f32:	de b7       	in	r29, 0x3e	; 62
    5f34:	22 97       	sbiw	r28, 0x02	; 2
    5f36:	0f b6       	in	r0, 0x3f	; 63
    5f38:	f8 94       	cli
    5f3a:	de bf       	out	0x3e, r29	; 62
    5f3c:	0f be       	out	0x3f, r0	; 63
    5f3e:	cd bf       	out	0x3d, r28	; 61
   int index; 
   index = getThreadIndexAddress();
    5f40:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    5f44:	9a 83       	std	Y+2, r25	; 0x02
    5f46:	89 83       	std	Y+1, r24	; 0x01
   asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( index ) );
    5f48:	89 81       	ldd	r24, Y+1	; 0x01
    5f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    5f4c:	48 2f       	mov	r20, r24
    5f4e:	59 2f       	mov	r21, r25
    5f50:	22 96       	adiw	r28, 0x02	; 2
    5f52:	0f b6       	in	r0, 0x3f	; 63
    5f54:	f8 94       	cli
    5f56:	de bf       	out	0x3e, r29	; 62
    5f58:	0f be       	out	0x3f, r0	; 63
    5f5a:	cd bf       	out	0x3d, r28	; 61
    5f5c:	df 91       	pop	r29
    5f5e:	cf 91       	pop	r28
    5f60:	08 95       	ret

00005f62 <getThreadIndexAddress_Logger>:
}

void getThreadIndexAddress_Logger()
{
    5f62:	cf 93       	push	r28
    5f64:	df 93       	push	r29
    5f66:	cd b7       	in	r28, 0x3d	; 61
    5f68:	de b7       	in	r29, 0x3e	; 62
    5f6a:	22 97       	sbiw	r28, 0x02	; 2
    5f6c:	0f b6       	in	r0, 0x3f	; 63
    5f6e:	f8 94       	cli
    5f70:	de bf       	out	0x3e, r29	; 62
    5f72:	0f be       	out	0x3f, r0	; 63
    5f74:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    5f76:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5f7a:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    5f7c:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    5f80:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    5f82:	89 81       	ldd	r24, Y+1	; 0x01
    5f84:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETCURRENTTHREADINDEX, currentindex);
    5f88:	6a 81       	ldd	r22, Y+2	; 0x02
    5f8a:	8c e6       	ldi	r24, 0x6C	; 108
    5f8c:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   getThreadIndexAddress_avr(); 
    5f90:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <getThreadIndexAddress_avr>
    5f94:	22 96       	adiw	r28, 0x02	; 2
    5f96:	0f b6       	in	r0, 0x3f	; 63
    5f98:	f8 94       	cli
    5f9a:	de bf       	out	0x3e, r29	; 62
    5f9c:	0f be       	out	0x3f, r0	; 63
    5f9e:	cd bf       	out	0x3d, r28	; 61
    5fa0:	df 91       	pop	r29
    5fa2:	cf 91       	pop	r28
    5fa4:	08 95       	ret

00005fa6 <getFilePathAddress_avr>:
}


/**\ingroup syscall
     Get the index number of the current thread in the thread table. 
     This function is going to put the address into two registers, R24 and R25.
*/

void getCurrentThreadIndex()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getCurrentThreadIndex() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
    #ifdef  TRACE_ENABLE_SYSCALL_GETCURRENTTHREADINDEX
	  getThreadIndexAddress_Logger(); 
    #endif
	#else
      getThreadIndexAddress_avr();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void getFilePathAddress_avr()
{
    5fa6:	cf 93       	push	r28
    5fa8:	df 93       	push	r29
    5faa:	cd b7       	in	r28, 0x3d	; 61
    5fac:	de b7       	in	r29, 0x3e	; 62
    5fae:	22 97       	sbiw	r28, 0x02	; 2
    5fb0:	0f b6       	in	r0, 0x3f	; 63
    5fb2:	f8 94       	cli
    5fb4:	de bf       	out	0x3e, r29	; 62
    5fb6:	0f be       	out	0x3f, r0	; 63
    5fb8:	cd bf       	out	0x3d, r28	; 61
   void *filepathaddr;
   filepathaddr = getFilePathAddress(); 
    5fba:	0e 94 8f 00 	call	0x11e	; 0x11e <getFilePathAddress>
    5fbe:	9a 83       	std	Y+2, r25	; 0x02
    5fc0:	89 83       	std	Y+1, r24	; 0x01
   asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( filepathaddr ) ); 
    5fc2:	89 81       	ldd	r24, Y+1	; 0x01
    5fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fc6:	48 2f       	mov	r20, r24
    5fc8:	59 2f       	mov	r21, r25
    5fca:	22 96       	adiw	r28, 0x02	; 2
    5fcc:	0f b6       	in	r0, 0x3f	; 63
    5fce:	f8 94       	cli
    5fd0:	de bf       	out	0x3e, r29	; 62
    5fd2:	0f be       	out	0x3f, r0	; 63
    5fd4:	cd bf       	out	0x3d, r28	; 61
    5fd6:	df 91       	pop	r29
    5fd8:	cf 91       	pop	r28
    5fda:	08 95       	ret

00005fdc <getFilePathAddress_Logger>:
}

void getFilePathAddress_Logger()
{
    5fdc:	cf 93       	push	r28
    5fde:	df 93       	push	r29
    5fe0:	cd b7       	in	r28, 0x3d	; 61
    5fe2:	de b7       	in	r29, 0x3e	; 62
    5fe4:	22 97       	sbiw	r28, 0x02	; 2
    5fe6:	0f b6       	in	r0, 0x3f	; 63
    5fe8:	f8 94       	cli
    5fea:	de bf       	out	0x3e, r29	; 62
    5fec:	0f be       	out	0x3f, r0	; 63
    5fee:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    5ff0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    5ff4:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    5ff6:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    5ffa:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    5ffc:	89 81       	ldd	r24, Y+1	; 0x01
    5ffe:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETFILEPATHADDR, currentindex); 
    6002:	6a 81       	ldd	r22, Y+2	; 0x02
    6004:	8d e6       	ldi	r24, 0x6D	; 109
    6006:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  getFilePathAddress_avr(); 
    600a:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <getFilePathAddress_avr>
    600e:	22 96       	adiw	r28, 0x02	; 2
    6010:	0f b6       	in	r0, 0x3f	; 63
    6012:	f8 94       	cli
    6014:	de bf       	out	0x3e, r29	; 62
    6016:	0f be       	out	0x3f, r0	; 63
    6018:	cd bf       	out	0x3d, r28	; 61
    601a:	df 91       	pop	r29
    601c:	cf 91       	pop	r28
    601e:	08 95       	ret

00006020 <getFileModeAddress_avr>:
}


/**\ingroup syscall 
     Get the file path locator, such as /abc/efg, etc. 
*/
void getFilePathAddr()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getFilePathAddr() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
    #ifdef  TRACE_ENABLE_SYSCALL_GETFILEPATHADDR
	  getFilePathAddress_Logger(); 
    #endif
	#else
      getFilePathAddress_avr();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void getFileModeAddress_avr()
{
    6020:	cf 93       	push	r28
    6022:	df 93       	push	r29
    6024:	cd b7       	in	r28, 0x3d	; 61
    6026:	de b7       	in	r29, 0x3e	; 62
    6028:	22 97       	sbiw	r28, 0x02	; 2
    602a:	0f b6       	in	r0, 0x3f	; 63
    602c:	f8 94       	cli
    602e:	de bf       	out	0x3e, r29	; 62
    6030:	0f be       	out	0x3f, r0	; 63
    6032:	cd bf       	out	0x3d, r28	; 61
   void *addr; 
   addr = getFileModeAddress();
    6034:	0e 94 98 00 	call	0x130	; 0x130 <getFileModeAddress>
    6038:	9a 83       	std	Y+2, r25	; 0x02
    603a:	89 83       	std	Y+1, r24	; 0x01
   asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr) );
    603c:	89 81       	ldd	r24, Y+1	; 0x01
    603e:	9a 81       	ldd	r25, Y+2	; 0x02
    6040:	48 2f       	mov	r20, r24
    6042:	59 2f       	mov	r21, r25
    6044:	22 96       	adiw	r28, 0x02	; 2
    6046:	0f b6       	in	r0, 0x3f	; 63
    6048:	f8 94       	cli
    604a:	de bf       	out	0x3e, r29	; 62
    604c:	0f be       	out	0x3f, r0	; 63
    604e:	cd bf       	out	0x3d, r28	; 61
    6050:	df 91       	pop	r29
    6052:	cf 91       	pop	r28
    6054:	08 95       	ret

00006056 <getFileModeAddress_Logger>:

}

void getFileModeAddress_Logger()
{
    6056:	cf 93       	push	r28
    6058:	df 93       	push	r29
    605a:	cd b7       	in	r28, 0x3d	; 61
    605c:	de b7       	in	r29, 0x3e	; 62
    605e:	22 97       	sbiw	r28, 0x02	; 2
    6060:	0f b6       	in	r0, 0x3f	; 63
    6062:	f8 94       	cli
    6064:	de bf       	out	0x3e, r29	; 62
    6066:	0f be       	out	0x3f, r0	; 63
    6068:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    606a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    606e:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6070:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6074:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6076:	89 81       	ldd	r24, Y+1	; 0x01
    6078:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETFILEMODEADDR, currentindex); 
    607c:	6a 81       	ldd	r22, Y+2	; 0x02
    607e:	8e e6       	ldi	r24, 0x6E	; 110
    6080:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  getFileModeAddress_avr(); 
    6084:	0e 94 10 30 	call	0x6020	; 0x6020 <getFileModeAddress_avr>
    6088:	22 96       	adiw	r28, 0x02	; 2
    608a:	0f b6       	in	r0, 0x3f	; 63
    608c:	f8 94       	cli
    608e:	de bf       	out	0x3e, r29	; 62
    6090:	0f be       	out	0x3f, r0	; 63
    6092:	cd bf       	out	0x3d, r28	; 61
    6094:	df 91       	pop	r29
    6096:	cf 91       	pop	r28
    6098:	08 95       	ret

0000609a <getFileMutexAddress_avr>:
}


/**\ingroup syscall 
    Get the file mode for read or write. 
*/
void getFileModeAddr()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getFileModeAddr() {

  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_GETFILEMODEADDR
		getFileModeAddress_Logger(); 
   #endif
   #else
		getFileModeAddress_avr();
  #endif

   
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void getFileMutexAddress_avr(){
    609a:	cf 93       	push	r28
    609c:	df 93       	push	r29
    609e:	cd b7       	in	r28, 0x3d	; 61
    60a0:	de b7       	in	r29, 0x3e	; 62
    60a2:	22 97       	sbiw	r28, 0x02	; 2
    60a4:	0f b6       	in	r0, 0x3f	; 63
    60a6:	f8 94       	cli
    60a8:	de bf       	out	0x3e, r29	; 62
    60aa:	0f be       	out	0x3f, r0	; 63
    60ac:	cd bf       	out	0x3d, r28	; 61
	   void *addr; 
	   addr = getFileMutexAddress(); 
    60ae:	0e 94 76 00 	call	0xec	; 0xec <getFileMutexAddress>
    60b2:	9a 83       	std	Y+2, r25	; 0x02
    60b4:	89 83       	std	Y+1, r24	; 0x01
	   asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr) );
    60b6:	89 81       	ldd	r24, Y+1	; 0x01
    60b8:	9a 81       	ldd	r25, Y+2	; 0x02
    60ba:	48 2f       	mov	r20, r24
    60bc:	59 2f       	mov	r21, r25
    60be:	22 96       	adiw	r28, 0x02	; 2
    60c0:	0f b6       	in	r0, 0x3f	; 63
    60c2:	f8 94       	cli
    60c4:	de bf       	out	0x3e, r29	; 62
    60c6:	0f be       	out	0x3f, r0	; 63
    60c8:	cd bf       	out	0x3d, r28	; 61
    60ca:	df 91       	pop	r29
    60cc:	cf 91       	pop	r28
    60ce:	08 95       	ret

000060d0 <getFileMutexAddress_Logger>:


}


void getFileMutexAddress_Logger()
{
    60d0:	cf 93       	push	r28
    60d2:	df 93       	push	r29
    60d4:	cd b7       	in	r28, 0x3d	; 61
    60d6:	de b7       	in	r29, 0x3e	; 62
    60d8:	22 97       	sbiw	r28, 0x02	; 2
    60da:	0f b6       	in	r0, 0x3f	; 63
    60dc:	f8 94       	cli
    60de:	de bf       	out	0x3e, r29	; 62
    60e0:	0f be       	out	0x3f, r0	; 63
    60e2:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    60e4:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    60e8:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    60ea:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    60ee:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    60f0:	89 81       	ldd	r24, Y+1	; 0x01
    60f2:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETFILEMUTEXADDR, currentindex);
    60f6:	6a 81       	ldd	r22, Y+2	; 0x02
    60f8:	8f e6       	ldi	r24, 0x6F	; 111
    60fa:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  getFileMutexAddress_avr(); 
    60fe:	0e 94 4d 30 	call	0x609a	; 0x609a <getFileMutexAddress_avr>
    6102:	22 96       	adiw	r28, 0x02	; 2
    6104:	0f b6       	in	r0, 0x3f	; 63
    6106:	f8 94       	cli
    6108:	de bf       	out	0x3e, r29	; 62
    610a:	0f be       	out	0x3f, r0	; 63
    610c:	cd bf       	out	0x3d, r28	; 61
    610e:	df 91       	pop	r29
    6110:	cf 91       	pop	r28
    6112:	08 95       	ret

00006114 <openFileTask_Logger>:
}


/**\ingroup syscall 
     Get the file operation mutex. 
*/
void getFileMutexAddr()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getFileMutexAddr() {

  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_GETFILEMUTEXADDR
		getFileMutexAddress_Logger(); 
   #endif
   #else
		getFileMutexAddress_avr(); 
  #endif
  
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void openFileTask_Logger()
{
    6114:	cf 93       	push	r28
    6116:	df 93       	push	r29
    6118:	cd b7       	in	r28, 0x3d	; 61
    611a:	de b7       	in	r29, 0x3e	; 62
    611c:	22 97       	sbiw	r28, 0x02	; 2
    611e:	0f b6       	in	r0, 0x3f	; 63
    6120:	f8 94       	cli
    6122:	de bf       	out	0x3e, r29	; 62
    6124:	0f be       	out	0x3f, r0	; 63
    6126:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6128:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    612c:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    612e:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6132:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6134:	89 81       	ldd	r24, Y+1	; 0x01
    6136:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_OPENFILESYSCALL, currentindex); 
    613a:	6a 81       	ldd	r22, Y+2	; 0x02
    613c:	80 e7       	ldi	r24, 0x70	; 112
    613e:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  openFileTask();   
    6142:	0e 94 ca 00 	call	0x194	; 0x194 <openFileTask>
    6146:	22 96       	adiw	r28, 0x02	; 2
    6148:	0f b6       	in	r0, 0x3f	; 63
    614a:	f8 94       	cli
    614c:	de bf       	out	0x3e, r29	; 62
    614e:	0f be       	out	0x3f, r0	; 63
    6150:	cd bf       	out	0x3d, r28	; 61
    6152:	df 91       	pop	r29
    6154:	cf 91       	pop	r28
    6156:	08 95       	ret

00006158 <closeFileTask_Logger>:
}


/**\ingroup syscall 
     Open a file. The file handle is stored in the current thread table as well as internally by the kernel. 
*/
void openFileSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void openFileSysCall() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_OPENFILESYSCALL
		openFileTask_Logger(); 
   #endif
   #else
		openFileTask();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void closeFileTask_Logger()
{
    6158:	cf 93       	push	r28
    615a:	df 93       	push	r29
    615c:	cd b7       	in	r28, 0x3d	; 61
    615e:	de b7       	in	r29, 0x3e	; 62
    6160:	22 97       	sbiw	r28, 0x02	; 2
    6162:	0f b6       	in	r0, 0x3f	; 63
    6164:	f8 94       	cli
    6166:	de bf       	out	0x3e, r29	; 62
    6168:	0f be       	out	0x3f, r0	; 63
    616a:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    616c:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6170:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6172:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6176:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6178:	89 81       	ldd	r24, Y+1	; 0x01
    617a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_CLOSEFILESYSCALL, currentindex); 
    617e:	6a 81       	ldd	r22, Y+2	; 0x02
    6180:	81 e7       	ldi	r24, 0x71	; 113
    6182:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  closeFileTask(); 
    6186:	0e 94 ef 00 	call	0x1de	; 0x1de <closeFileTask>
    618a:	22 96       	adiw	r28, 0x02	; 2
    618c:	0f b6       	in	r0, 0x3f	; 63
    618e:	f8 94       	cli
    6190:	de bf       	out	0x3e, r29	; 62
    6192:	0f be       	out	0x3f, r0	; 63
    6194:	cd bf       	out	0x3d, r28	; 61
    6196:	df 91       	pop	r29
    6198:	cf 91       	pop	r28
    619a:	08 95       	ret

0000619c <readFileTask_Logger>:
}


/**\ingroup syscall 
     Close a file. 
*/

void closeFileSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void closeFileSysCall() {

  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_CLOSEFILESYSCALL
		   closeFileTask_Logger(); 
   #endif 
   #else
		   closeFileTask();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void readFileTask_Logger()
{
    619c:	cf 93       	push	r28
    619e:	df 93       	push	r29
    61a0:	cd b7       	in	r28, 0x3d	; 61
    61a2:	de b7       	in	r29, 0x3e	; 62
    61a4:	22 97       	sbiw	r28, 0x02	; 2
    61a6:	0f b6       	in	r0, 0x3f	; 63
    61a8:	f8 94       	cli
    61aa:	de bf       	out	0x3e, r29	; 62
    61ac:	0f be       	out	0x3f, r0	; 63
    61ae:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    61b0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    61b4:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    61b6:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    61ba:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    61bc:	89 81       	ldd	r24, Y+1	; 0x01
    61be:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_READFILESYSCALL, currentindex);
    61c2:	6a 81       	ldd	r22, Y+2	; 0x02
    61c4:	82 e7       	ldi	r24, 0x72	; 114
    61c6:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   readFileTask(); 
    61ca:	0e 94 21 01 	call	0x242	; 0x242 <readFileTask>
    61ce:	22 96       	adiw	r28, 0x02	; 2
    61d0:	0f b6       	in	r0, 0x3f	; 63
    61d2:	f8 94       	cli
    61d4:	de bf       	out	0x3e, r29	; 62
    61d6:	0f be       	out	0x3f, r0	; 63
    61d8:	cd bf       	out	0x3d, r28	; 61
    61da:	df 91       	pop	r29
    61dc:	cf 91       	pop	r28
    61de:	08 95       	ret

000061e0 <writeFileTask_Logger>:
}

/**\ingroup syscall 
     Read from a file. 
*/


void readFileSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void readFileSysCall() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_READFILESYSCALL
		   readFileTask_Logger(); 
   #endif
   #else
		   readFileTask();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void writeFileTask_Logger()
{
    61e0:	cf 93       	push	r28
    61e2:	df 93       	push	r29
    61e4:	cd b7       	in	r28, 0x3d	; 61
    61e6:	de b7       	in	r29, 0x3e	; 62
    61e8:	22 97       	sbiw	r28, 0x02	; 2
    61ea:	0f b6       	in	r0, 0x3f	; 63
    61ec:	f8 94       	cli
    61ee:	de bf       	out	0x3e, r29	; 62
    61f0:	0f be       	out	0x3f, r0	; 63
    61f2:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    61f4:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    61f8:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    61fa:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    61fe:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6200:	89 81       	ldd	r24, Y+1	; 0x01
    6202:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_WRITEFILESYSCALL, currentindex); 
    6206:	6a 81       	ldd	r22, Y+2	; 0x02
    6208:	83 e7       	ldi	r24, 0x73	; 115
    620a:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  writeFileTask(); 
    620e:	0e 94 67 01 	call	0x2ce	; 0x2ce <writeFileTask>
    6212:	22 96       	adiw	r28, 0x02	; 2
    6214:	0f b6       	in	r0, 0x3f	; 63
    6216:	f8 94       	cli
    6218:	de bf       	out	0x3e, r29	; 62
    621a:	0f be       	out	0x3f, r0	; 63
    621c:	cd bf       	out	0x3d, r28	; 61
    621e:	df 91       	pop	r29
    6220:	cf 91       	pop	r28
    6222:	08 95       	ret

00006224 <seekFileTask_Logger>:
}



/**\ingroup syscall 
     Write to a file. 
*/
void writeFileSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void writeFileSysCall() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_WRITEFILESYSCALL
     writeFileTask_Logger();
   #endif
   #else
     writeFileTask(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void seekFileTask_Logger()
{
    6224:	cf 93       	push	r28
    6226:	df 93       	push	r29
    6228:	cd b7       	in	r28, 0x3d	; 61
    622a:	de b7       	in	r29, 0x3e	; 62
    622c:	22 97       	sbiw	r28, 0x02	; 2
    622e:	0f b6       	in	r0, 0x3f	; 63
    6230:	f8 94       	cli
    6232:	de bf       	out	0x3e, r29	; 62
    6234:	0f be       	out	0x3f, r0	; 63
    6236:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6238:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    623c:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    623e:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6242:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6244:	89 81       	ldd	r24, Y+1	; 0x01
    6246:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_SEEKFILESYSCALL, currentindex); 
    624a:	6a 81       	ldd	r22, Y+2	; 0x02
    624c:	84 e7       	ldi	r24, 0x74	; 116
    624e:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   seekFileTask(); 
    6252:	0e 94 91 01 	call	0x322	; 0x322 <seekFileTask>
    6256:	22 96       	adiw	r28, 0x02	; 2
    6258:	0f b6       	in	r0, 0x3f	; 63
    625a:	f8 94       	cli
    625c:	de bf       	out	0x3e, r29	; 62
    625e:	0f be       	out	0x3f, r0	; 63
    6260:	cd bf       	out	0x3d, r28	; 61
    6262:	df 91       	pop	r29
    6264:	cf 91       	pop	r28
    6266:	08 95       	ret

00006268 <ADCLight_Logger>:
}



/**\ingroup syscall 
     Change file opener handle address. 
*/
void seekFileSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void seekFileSysCall() {

   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_SEEKFILESYSCALL
     seekFileTask_Logger();
   #endif
   #else
     seekFileTask(); 
   #endif
   
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void ADCLight_Logger()
{
    6268:	cf 93       	push	r28
    626a:	df 93       	push	r29
    626c:	cd b7       	in	r28, 0x3d	; 61
    626e:	de b7       	in	r29, 0x3e	; 62
    6270:	22 97       	sbiw	r28, 0x02	; 2
    6272:	0f b6       	in	r0, 0x3f	; 63
    6274:	f8 94       	cli
    6276:	de bf       	out	0x3e, r29	; 62
    6278:	0f be       	out	0x3f, r0	; 63
    627a:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    627c:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6280:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6282:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6286:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6288:	89 81       	ldd	r24, Y+1	; 0x01
    628a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_ADCLIGHTSYSCALL, currentindex); 
    628e:	6a 81       	ldd	r22, Y+2	; 0x02
    6290:	85 e7       	ldi	r24, 0x75	; 117
    6292:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   ADCLight(); 
    6296:	0e 94 ed 40 	call	0x81da	; 0x81da <ADCLight>
    629a:	22 96       	adiw	r28, 0x02	; 2
    629c:	0f b6       	in	r0, 0x3f	; 63
    629e:	f8 94       	cli
    62a0:	de bf       	out	0x3e, r29	; 62
    62a2:	0f be       	out	0x3f, r0	; 63
    62a4:	cd bf       	out	0x3d, r28	; 61
    62a6:	df 91       	pop	r29
    62a8:	cf 91       	pop	r28
    62aa:	08 95       	ret

000062ac <ADCTemp_Logger>:
}


/**\ingroup syscall 
     Get the reading from light sensor and store the result in the thread table. 
*/
void ADCLightSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void ADCLightSysCall() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_ADCLIGHTSYSCALL
     ADCLight_Logger();
   #endif
   #else
     ADCLight(); 
   #endif
	
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void ADCTemp_Logger()
{
    62ac:	cf 93       	push	r28
    62ae:	df 93       	push	r29
    62b0:	cd b7       	in	r28, 0x3d	; 61
    62b2:	de b7       	in	r29, 0x3e	; 62
    62b4:	22 97       	sbiw	r28, 0x02	; 2
    62b6:	0f b6       	in	r0, 0x3f	; 63
    62b8:	f8 94       	cli
    62ba:	de bf       	out	0x3e, r29	; 62
    62bc:	0f be       	out	0x3f, r0	; 63
    62be:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    62c0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    62c4:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    62c6:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    62ca:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    62cc:	89 81       	ldd	r24, Y+1	; 0x01
    62ce:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_ADCTEMPSYSCALL, currentindex); 
    62d2:	6a 81       	ldd	r22, Y+2	; 0x02
    62d4:	86 e7       	ldi	r24, 0x76	; 118
    62d6:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   ADCTemp(); 
    62da:	0e 94 0c 41 	call	0x8218	; 0x8218 <ADCTemp>
    62de:	22 96       	adiw	r28, 0x02	; 2
    62e0:	0f b6       	in	r0, 0x3f	; 63
    62e2:	f8 94       	cli
    62e4:	de bf       	out	0x3e, r29	; 62
    62e6:	0f be       	out	0x3f, r0	; 63
    62e8:	cd bf       	out	0x3d, r28	; 61
    62ea:	df 91       	pop	r29
    62ec:	cf 91       	pop	r28
    62ee:	08 95       	ret

000062f0 <ADCMagX_Logger>:
}


/**\ingroup syscall 
     Get the reading from temperature and store the result in the thread table. 
*/
void ADCTempSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void ADCTempSysCall() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_ADCTEMPSYSCALL
     ADCTemp_Logger();
   #endif
   #else
     ADCTemp(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void ADCMagX_Logger()
{
    62f0:	cf 93       	push	r28
    62f2:	df 93       	push	r29
    62f4:	cd b7       	in	r28, 0x3d	; 61
    62f6:	de b7       	in	r29, 0x3e	; 62
    62f8:	22 97       	sbiw	r28, 0x02	; 2
    62fa:	0f b6       	in	r0, 0x3f	; 63
    62fc:	f8 94       	cli
    62fe:	de bf       	out	0x3e, r29	; 62
    6300:	0f be       	out	0x3f, r0	; 63
    6302:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6304:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6308:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    630a:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    630e:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6310:	89 81       	ldd	r24, Y+1	; 0x01
    6312:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_ADCMAGXSYSCALL, currentindex); 
    6316:	6a 81       	ldd	r22, Y+2	; 0x02
    6318:	87 e7       	ldi	r24, 0x77	; 119
    631a:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  ADCMagX(); 
    631e:	0e 94 2b 41 	call	0x8256	; 0x8256 <ADCMagX>
    6322:	22 96       	adiw	r28, 0x02	; 2
    6324:	0f b6       	in	r0, 0x3f	; 63
    6326:	f8 94       	cli
    6328:	de bf       	out	0x3e, r29	; 62
    632a:	0f be       	out	0x3f, r0	; 63
    632c:	cd bf       	out	0x3d, r28	; 61
    632e:	df 91       	pop	r29
    6330:	cf 91       	pop	r28
    6332:	08 95       	ret

00006334 <ADCMagY_Logger>:
}

 /**\ingroup syscall 
       Get the reading from the X axis for the magnetic sensor and store the result in the thread table.  
 */
void ADCMagXSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void ADCMagXSysCall() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_ADCMAGXSYSCALL
     ADCMagX_Logger();
   #endif
   #else
     ADCMagX(); 
   #endif

   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void ADCMagY_Logger()
{
    6334:	cf 93       	push	r28
    6336:	df 93       	push	r29
    6338:	cd b7       	in	r28, 0x3d	; 61
    633a:	de b7       	in	r29, 0x3e	; 62
    633c:	22 97       	sbiw	r28, 0x02	; 2
    633e:	0f b6       	in	r0, 0x3f	; 63
    6340:	f8 94       	cli
    6342:	de bf       	out	0x3e, r29	; 62
    6344:	0f be       	out	0x3f, r0	; 63
    6346:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6348:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    634c:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    634e:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6352:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6354:	89 81       	ldd	r24, Y+1	; 0x01
    6356:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_ADCMAGYSYSCALL, currentindex); 
    635a:	6a 81       	ldd	r22, Y+2	; 0x02
    635c:	88 e7       	ldi	r24, 0x78	; 120
    635e:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  ADCMagY(); 
    6362:	0e 94 4a 41 	call	0x8294	; 0x8294 <ADCMagY>
    6366:	22 96       	adiw	r28, 0x02	; 2
    6368:	0f b6       	in	r0, 0x3f	; 63
    636a:	f8 94       	cli
    636c:	de bf       	out	0x3e, r29	; 62
    636e:	0f be       	out	0x3f, r0	; 63
    6370:	cd bf       	out	0x3d, r28	; 61
    6372:	df 91       	pop	r29
    6374:	cf 91       	pop	r28
    6376:	08 95       	ret

00006378 <ADCAccX_Logger>:
}


/**\ingroup syscall 
     Get the reading from the Y axis for the magnetic sensor and store the result in the thread table. 
*/
void ADCMagYSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void ADCMagYSysCall() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_ADCMAGYSYSCALL
     ADCMagY_Logger();
   #endif
   #else
     ADCMagY(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void ADCAccX_Logger()
{
    6378:	cf 93       	push	r28
    637a:	df 93       	push	r29
    637c:	cd b7       	in	r28, 0x3d	; 61
    637e:	de b7       	in	r29, 0x3e	; 62
    6380:	22 97       	sbiw	r28, 0x02	; 2
    6382:	0f b6       	in	r0, 0x3f	; 63
    6384:	f8 94       	cli
    6386:	de bf       	out	0x3e, r29	; 62
    6388:	0f be       	out	0x3f, r0	; 63
    638a:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    638c:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6390:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6392:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6396:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6398:	89 81       	ldd	r24, Y+1	; 0x01
    639a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_ADCACCXSYSCALL, currentindex); 
    639e:	6a 81       	ldd	r22, Y+2	; 0x02
    63a0:	89 e7       	ldi	r24, 0x79	; 121
    63a2:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  ADCAccX(); 
    63a6:	0e 94 69 41 	call	0x82d2	; 0x82d2 <ADCAccX>
    63aa:	22 96       	adiw	r28, 0x02	; 2
    63ac:	0f b6       	in	r0, 0x3f	; 63
    63ae:	f8 94       	cli
    63b0:	de bf       	out	0x3e, r29	; 62
    63b2:	0f be       	out	0x3f, r0	; 63
    63b4:	cd bf       	out	0x3d, r28	; 61
    63b6:	df 91       	pop	r29
    63b8:	cf 91       	pop	r28
    63ba:	08 95       	ret

000063bc <ADCAccY_Logger>:
}


/**\ingroup syscall 
      Get the reading from the X axis for the accelerator and store the result in the thread table. 
*/
 
void ADCAccXSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void ADCAccXSysCall() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_ADCACCXSYSCALL
    ADCAccX_Logger();
   #endif
   #else
    ADCAccX(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void ADCAccY_Logger()
{
    63bc:	cf 93       	push	r28
    63be:	df 93       	push	r29
    63c0:	cd b7       	in	r28, 0x3d	; 61
    63c2:	de b7       	in	r29, 0x3e	; 62
    63c4:	22 97       	sbiw	r28, 0x02	; 2
    63c6:	0f b6       	in	r0, 0x3f	; 63
    63c8:	f8 94       	cli
    63ca:	de bf       	out	0x3e, r29	; 62
    63cc:	0f be       	out	0x3f, r0	; 63
    63ce:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    63d0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    63d4:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    63d6:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    63da:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    63dc:	89 81       	ldd	r24, Y+1	; 0x01
    63de:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_ADCACCYSYSCALL, currentindex); 
    63e2:	6a 81       	ldd	r22, Y+2	; 0x02
    63e4:	8a e7       	ldi	r24, 0x7A	; 122
    63e6:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  ADCAccY(); 
    63ea:	0e 94 88 41 	call	0x8310	; 0x8310 <ADCAccY>
    63ee:	22 96       	adiw	r28, 0x02	; 2
    63f0:	0f b6       	in	r0, 0x3f	; 63
    63f2:	f8 94       	cli
    63f4:	de bf       	out	0x3e, r29	; 62
    63f6:	0f be       	out	0x3f, r0	; 63
    63f8:	cd bf       	out	0x3d, r28	; 61
    63fa:	df 91       	pop	r29
    63fc:	cf 91       	pop	r28
    63fe:	08 95       	ret

00006400 <postNewTask_avr>:
}



/**\ingroup syscall 
     Get the reading from the Y axis for the accelerator and store the result in the thread table. 
*/
void ADCAccYSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void ADCAccYSysCall() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_ADCACCYSYSCALL
    ADCAccY_Logger();
   #endif
   #else
    ADCAccY(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}




void postNewTask_avr() {
    6400:	cf 93       	push	r28
    6402:	df 93       	push	r29
    6404:	cd b7       	in	r28, 0x3d	; 61
    6406:	de b7       	in	r29, 0x3e	; 62
    6408:	24 97       	sbiw	r28, 0x04	; 4
    640a:	0f b6       	in	r0, 0x3f	; 63
    640c:	f8 94       	cli
    640e:	de bf       	out	0x3e, r29	; 62
    6410:	0f be       	out	0x3f, r0	; 63
    6412:	cd bf       	out	0x3d, r28	; 61

  void (*fp)(void);
  uint16_t priority; 
  
  asm volatile( "mov %A0, r20""\n\t""mov %B0, r21""\n\t": "=r"( fp):  );
    6414:	84 2f       	mov	r24, r20
    6416:	95 2f       	mov	r25, r21
    6418:	9c 83       	std	Y+4, r25	; 0x04
    641a:	8b 83       	std	Y+3, r24	; 0x03
  asm volatile( "mov %A0, r22""\n\t""mov %B0, r23""\n\t": "=r"( priority):  );  
    641c:	86 2f       	mov	r24, r22
    641e:	97 2f       	mov	r25, r23
    6420:	9a 83       	std	Y+2, r25	; 0x02
    6422:	89 83       	std	Y+1, r24	; 0x01
  
  postTask(fp, priority); 
    6424:	29 81       	ldd	r18, Y+1	; 0x01
    6426:	8b 81       	ldd	r24, Y+3	; 0x03
    6428:	9c 81       	ldd	r25, Y+4	; 0x04
    642a:	62 2f       	mov	r22, r18
    642c:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    6430:	24 96       	adiw	r28, 0x04	; 4
    6432:	0f b6       	in	r0, 0x3f	; 63
    6434:	f8 94       	cli
    6436:	de bf       	out	0x3e, r29	; 62
    6438:	0f be       	out	0x3f, r0	; 63
    643a:	cd bf       	out	0x3d, r28	; 61
    643c:	df 91       	pop	r29
    643e:	cf 91       	pop	r28
    6440:	08 95       	ret

00006442 <postNewTask_Logger>:
  

}

void postNewTask_Logger(){
    6442:	cf 93       	push	r28
    6444:	df 93       	push	r29
    6446:	cd b7       	in	r28, 0x3d	; 61
    6448:	de b7       	in	r29, 0x3e	; 62
    644a:	22 97       	sbiw	r28, 0x02	; 2
    644c:	0f b6       	in	r0, 0x3f	; 63
    644e:	f8 94       	cli
    6450:	de bf       	out	0x3e, r29	; 62
    6452:	0f be       	out	0x3f, r0	; 63
    6454:	cd bf       	out	0x3d, r28	; 61
    
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6456:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    645a:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    645c:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6460:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6462:	89 81       	ldd	r24, Y+1	; 0x01
    6464:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_POSTTASKSYSCALL, currentindex); 
    6468:	6a 81       	ldd	r22, Y+2	; 0x02
    646a:	8b e7       	ldi	r24, 0x7B	; 123
    646c:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  postNewTask_avr();   
    6470:	0e 94 00 32 	call	0x6400	; 0x6400 <postNewTask_avr>
    6474:	22 96       	adiw	r28, 0x02	; 2
    6476:	0f b6       	in	r0, 0x3f	; 63
    6478:	f8 94       	cli
    647a:	de bf       	out	0x3e, r29	; 62
    647c:	0f be       	out	0x3f, r0	; 63
    647e:	cd bf       	out	0x3d, r28	; 61
    6480:	df 91       	pop	r29
    6482:	cf 91       	pop	r28
    6484:	08 95       	ret

00006486 <getRadioInfo_avr>:
}



/**\ingroup syscall 
     Posttask here for backward compatibility
     Bug to be fixed here. 
*/
void postTaskSysCall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void postTaskSysCall() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_POSTTASKSYSCALL
    postNewTask_Logger();
   #endif
   #else
    postNewTask_avr(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void getRadioInfo_avr(){
    6486:	cf 93       	push	r28
    6488:	df 93       	push	r29
    648a:	cd b7       	in	r28, 0x3d	; 61
    648c:	de b7       	in	r29, 0x3e	; 62
    648e:	22 97       	sbiw	r28, 0x02	; 2
    6490:	0f b6       	in	r0, 0x3f	; 63
    6492:	f8 94       	cli
    6494:	de bf       	out	0x3e, r29	; 62
    6496:	0f be       	out	0x3f, r0	; 63
    6498:	cd bf       	out	0x3d, r28	; 61
  void *addr; 
  addr = getRadioInfo(); 
    649a:	0e 94 b3 8c 	call	0x11966	; 0x11966 <getRadioInfo>
    649e:	9a 83       	std	Y+2, r25	; 0x02
    64a0:	89 83       	std	Y+1, r24	; 0x01
  asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) ); 
    64a2:	89 81       	ldd	r24, Y+1	; 0x01
    64a4:	9a 81       	ldd	r25, Y+2	; 0x02
    64a6:	48 2f       	mov	r20, r24
    64a8:	59 2f       	mov	r21, r25
    64aa:	22 96       	adiw	r28, 0x02	; 2
    64ac:	0f b6       	in	r0, 0x3f	; 63
    64ae:	f8 94       	cli
    64b0:	de bf       	out	0x3e, r29	; 62
    64b2:	0f be       	out	0x3f, r0	; 63
    64b4:	cd bf       	out	0x3d, r28	; 61
    64b6:	df 91       	pop	r29
    64b8:	cf 91       	pop	r28
    64ba:	08 95       	ret

000064bc <getRadioInfo_Logger>:
}


void getRadioInfo_Logger()
{
    64bc:	cf 93       	push	r28
    64be:	df 93       	push	r29
    64c0:	cd b7       	in	r28, 0x3d	; 61
    64c2:	de b7       	in	r29, 0x3e	; 62
    64c4:	22 97       	sbiw	r28, 0x02	; 2
    64c6:	0f b6       	in	r0, 0x3f	; 63
    64c8:	f8 94       	cli
    64ca:	de bf       	out	0x3e, r29	; 62
    64cc:	0f be       	out	0x3f, r0	; 63
    64ce:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    64d0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    64d4:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    64d6:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    64da:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    64dc:	89 81       	ldd	r24, Y+1	; 0x01
    64de:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETCURRENTRADIOINFOADDRESS, currentindex); 
    64e2:	6a 81       	ldd	r22, Y+2	; 0x02
    64e4:	8c e7       	ldi	r24, 0x7C	; 124
    64e6:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   getRadioInfo_avr(); 
    64ea:	0e 94 43 32 	call	0x6486	; 0x6486 <getRadioInfo_avr>
    64ee:	22 96       	adiw	r28, 0x02	; 2
    64f0:	0f b6       	in	r0, 0x3f	; 63
    64f2:	f8 94       	cli
    64f4:	de bf       	out	0x3e, r29	; 62
    64f6:	0f be       	out	0x3f, r0	; 63
    64f8:	cd bf       	out	0x3d, r28	; 61
    64fa:	df 91       	pop	r29
    64fc:	cf 91       	pop	r28
    64fe:	08 95       	ret

00006500 <getHandleInfo_avr>:
}


/**\ingroup syscall 
  Get the Radio info address for populate it to send the radio packet info to the kernel. 
*/
void getCurrentRadioInfoAddress()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getCurrentRadioInfoAddress() {
#ifdef TRACE_ENABLE_SYSCALLEVENT
  #ifdef  TRACE_ENABLE_SYSCALL_GETCURRENTRADIOINFOADDRESS
	   getRadioInfo_Logger();
  #endif
  #else
   getRadioInfo_avr();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}

void getHandleInfo_avr(){
    6500:	cf 93       	push	r28
    6502:	df 93       	push	r29
    6504:	cd b7       	in	r28, 0x3d	; 61
    6506:	de b7       	in	r29, 0x3e	; 62
    6508:	22 97       	sbiw	r28, 0x02	; 2
    650a:	0f b6       	in	r0, 0x3f	; 63
    650c:	f8 94       	cli
    650e:	de bf       	out	0x3e, r29	; 62
    6510:	0f be       	out	0x3f, r0	; 63
    6512:	cd bf       	out	0x3d, r28	; 61
	void *addr; 
	addr = getHandleInfo(); 
    6514:	0e 94 ec 86 	call	0x10dd8	; 0x10dd8 <getHandleInfo>
    6518:	9a 83       	std	Y+2, r25	; 0x02
    651a:	89 83       	std	Y+1, r24	; 0x01
	asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );	
    651c:	89 81       	ldd	r24, Y+1	; 0x01
    651e:	9a 81       	ldd	r25, Y+2	; 0x02
    6520:	48 2f       	mov	r20, r24
    6522:	59 2f       	mov	r21, r25
    6524:	22 96       	adiw	r28, 0x02	; 2
    6526:	0f b6       	in	r0, 0x3f	; 63
    6528:	f8 94       	cli
    652a:	de bf       	out	0x3e, r29	; 62
    652c:	0f be       	out	0x3f, r0	; 63
    652e:	cd bf       	out	0x3d, r28	; 61
    6530:	df 91       	pop	r29
    6532:	cf 91       	pop	r28
    6534:	08 95       	ret

00006536 <getHandleInfo_Logger>:
}


void getHandleInfo_Logger()
{
    6536:	cf 93       	push	r28
    6538:	df 93       	push	r29
    653a:	cd b7       	in	r28, 0x3d	; 61
    653c:	de b7       	in	r29, 0x3e	; 62
    653e:	22 97       	sbiw	r28, 0x02	; 2
    6540:	0f b6       	in	r0, 0x3f	; 63
    6542:	f8 94       	cli
    6544:	de bf       	out	0x3e, r29	; 62
    6546:	0f be       	out	0x3f, r0	; 63
    6548:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    654a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    654e:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6550:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6554:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6556:	89 81       	ldd	r24, Y+1	; 0x01
    6558:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETCURRENTRADIOHANDLEADDRESS, currentindex);
    655c:	6a 81       	ldd	r22, Y+2	; 0x02
    655e:	8d e7       	ldi	r24, 0x7D	; 125
    6560:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  getHandleInfo_avr(); 
    6564:	0e 94 80 32 	call	0x6500	; 0x6500 <getHandleInfo_avr>
    6568:	22 96       	adiw	r28, 0x02	; 2
    656a:	0f b6       	in	r0, 0x3f	; 63
    656c:	f8 94       	cli
    656e:	de bf       	out	0x3e, r29	; 62
    6570:	0f be       	out	0x3f, r0	; 63
    6572:	cd bf       	out	0x3d, r28	; 61
    6574:	df 91       	pop	r29
    6576:	cf 91       	pop	r28
    6578:	08 95       	ret

0000657a <syscall_registerEvent_Logger>:
}



 /**\ingroup syscall
      Get the radio handle for registering a receiving handle. 
 */
void getCurrentRadioHandleAddress()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getCurrentRadioHandleAddress() {
 #ifdef TRACE_ENABLE_SYSCALLEVENT
  #ifdef  TRACE_ENABLE_SYSCALL_GETCURRENTRADIOHANDLEADDRESS
	   getHandleInfo_Logger();
  #endif
  #else
       getHandleInfo_avr();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void syscall_registerEvent_Logger()
{
    657a:	cf 93       	push	r28
    657c:	df 93       	push	r29
    657e:	cd b7       	in	r28, 0x3d	; 61
    6580:	de b7       	in	r29, 0x3e	; 62
    6582:	22 97       	sbiw	r28, 0x02	; 2
    6584:	0f b6       	in	r0, 0x3f	; 63
    6586:	f8 94       	cli
    6588:	de bf       	out	0x3e, r29	; 62
    658a:	0f be       	out	0x3f, r0	; 63
    658c:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    658e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6592:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6594:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6598:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    659a:	89 81       	ldd	r24, Y+1	; 0x01
    659c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETCURRENTRADIOHANDLE, currentindex);
    65a0:	6a 81       	ldd	r22, Y+2	; 0x02
    65a2:	8e e7       	ldi	r24, 0x7E	; 126
    65a4:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  registerReceiverHandle_syscall(); 
    65a8:	0e 94 f5 86 	call	0x10dea	; 0x10dea <registerReceiverHandle_syscall>
    65ac:	22 96       	adiw	r28, 0x02	; 2
    65ae:	0f b6       	in	r0, 0x3f	; 63
    65b0:	f8 94       	cli
    65b2:	de bf       	out	0x3e, r29	; 62
    65b4:	0f be       	out	0x3f, r0	; 63
    65b6:	cd bf       	out	0x3d, r28	; 61
    65b8:	df 91       	pop	r29
    65ba:	cf 91       	pop	r28
    65bc:	08 95       	ret

000065be <postNewThreadTask_Logger>:
}


/**\ingroup syscall 
     Register a receiving handle for incoming packet. 
*/
void setCurrentRadioHandle()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void setCurrentRadioHandle() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
  #ifdef  TRACE_ENABLE_SYSCALL_GETCURRENTRADIOHANDLE
	   syscall_registerEvent_Logger();
  #endif
  #else
       registerReceiverHandle_syscall();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void postNewThreadTask_Logger()
{
    65be:	cf 93       	push	r28
    65c0:	df 93       	push	r29
    65c2:	cd b7       	in	r28, 0x3d	; 61
    65c4:	de b7       	in	r29, 0x3e	; 62
    65c6:	22 97       	sbiw	r28, 0x02	; 2
    65c8:	0f b6       	in	r0, 0x3f	; 63
    65ca:	f8 94       	cli
    65cc:	de bf       	out	0x3e, r29	; 62
    65ce:	0f be       	out	0x3f, r0	; 63
    65d0:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    65d2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    65d6:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    65d8:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    65dc:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    65de:	89 81       	ldd	r24, Y+1	; 0x01
    65e0:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_POSTTHREADTASK, currentindex);
    65e4:	6a 81       	ldd	r22, Y+2	; 0x02
    65e6:	8f e7       	ldi	r24, 0x7F	; 127
    65e8:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  postNewThreadTask(); 
    65ec:	0e 94 ad 97 	call	0x12f5a	; 0x12f5a <postNewThreadTask>
    65f0:	22 96       	adiw	r28, 0x02	; 2
    65f2:	0f b6       	in	r0, 0x3f	; 63
    65f4:	f8 94       	cli
    65f6:	de bf       	out	0x3e, r29	; 62
    65f8:	0f be       	out	0x3f, r0	; 63
    65fa:	cd bf       	out	0x3d, r28	; 61
    65fc:	df 91       	pop	r29
    65fe:	cf 91       	pop	r28
    6600:	08 95       	ret

00006602 <debugInfoVariable>:
}


/**\ingroup syscall 
     Trigger the thread scheduling task. 
*/
void postThreadTask()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void postThreadTask() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_POSTTHREADTASK
     postNewThreadTask_Logger();
   #endif
   #else
     postNewThreadTask(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void debugInfoVariable(){
    6602:	cf 93       	push	r28
    6604:	df 93       	push	r29
    6606:	cd b7       	in	r28, 0x3d	; 61
    6608:	de b7       	in	r29, 0x3e	; 62


   asm volatile( "mov %A0, r8""\n\t""mov %B0, r9""\n\t": "=r"( variable_debug ):  );
    660a:	88 2d       	mov	r24, r8
    660c:	99 2d       	mov	r25, r9
    660e:	90 93 f9 04 	sts	0x04F9, r25
    6612:	80 93 f8 04 	sts	0x04F8, r24
   variable_debug = variable_debug + 2;
    6616:	80 91 f8 04 	lds	r24, 0x04F8
    661a:	90 91 f9 04 	lds	r25, 0x04F9
    661e:	02 96       	adiw	r24, 0x02	; 2
    6620:	90 93 f9 04 	sts	0x04F9, r25
    6624:	80 93 f8 04 	sts	0x04F8, r24
   asm volatile( "mov %A0, r10""\n\t""mov %B0, r11""\n\t": "=r"( variable_debug ):  );
    6628:	8a 2d       	mov	r24, r10
    662a:	9b 2d       	mov	r25, r11
    662c:	90 93 f9 04 	sts	0x04F9, r25
    6630:	80 93 f8 04 	sts	0x04F8, r24
   variable_debug = variable_debug + 2;
    6634:	80 91 f8 04 	lds	r24, 0x04F8
    6638:	90 91 f9 04 	lds	r25, 0x04F9
    663c:	02 96       	adiw	r24, 0x02	; 2
    663e:	90 93 f9 04 	sts	0x04F9, r25
    6642:	80 93 f8 04 	sts	0x04F8, r24
   asm volatile( "mov %A0, r12""\n\t""mov %B0, r13""\n\t": "=r"( variable_debug ):  );
    6646:	8c 2d       	mov	r24, r12
    6648:	9d 2d       	mov	r25, r13
    664a:	90 93 f9 04 	sts	0x04F9, r25
    664e:	80 93 f8 04 	sts	0x04F8, r24
   variable_debug = variable_debug + 2;
    6652:	80 91 f8 04 	lds	r24, 0x04F8
    6656:	90 91 f9 04 	lds	r25, 0x04F9
    665a:	02 96       	adiw	r24, 0x02	; 2
    665c:	90 93 f9 04 	sts	0x04F9, r25
    6660:	80 93 f8 04 	sts	0x04F8, r24
    6664:	df 91       	pop	r29
    6666:	cf 91       	pop	r28
    6668:	08 95       	ret

0000666a <debugInfoVariable_Logger>:
   //asm volatile("ret"::); 
}




void debugInfoVariable_Logger()
{
    666a:	cf 93       	push	r28
    666c:	df 93       	push	r29
    666e:	cd b7       	in	r28, 0x3d	; 61
    6670:	de b7       	in	r29, 0x3e	; 62
    6672:	22 97       	sbiw	r28, 0x02	; 2
    6674:	0f b6       	in	r0, 0x3f	; 63
    6676:	f8 94       	cli
    6678:	de bf       	out	0x3e, r29	; 62
    667a:	0f be       	out	0x3f, r0	; 63
    667c:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    667e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6682:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6684:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6688:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    668a:	89 81       	ldd	r24, Y+1	; 0x01
    668c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_DEBUGINFOTASK, currentindex); 
    6690:	6a 81       	ldd	r22, Y+2	; 0x02
    6692:	80 e8       	ldi	r24, 0x80	; 128
    6694:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  debugInfoVariable(); 
    6698:	0e 94 01 33 	call	0x6602	; 0x6602 <debugInfoVariable>
    669c:	22 96       	adiw	r28, 0x02	; 2
    669e:	0f b6       	in	r0, 0x3f	; 63
    66a0:	f8 94       	cli
    66a2:	de bf       	out	0x3e, r29	; 62
    66a4:	0f be       	out	0x3f, r0	; 63
    66a6:	cd bf       	out	0x3d, r28	; 61
    66a8:	df 91       	pop	r29
    66aa:	cf 91       	pop	r28
    66ac:	08 95       	ret

000066ae <Leds_yellowToggle_Logger>:
}

/**\ingroup syscall 
     for system call debugging purposes
*/
void debugInfoTask()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void debugInfoTask() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_DEBUGINFOTASK	
   debugInfoVariable_Logger();
   #endif
   #else
   debugInfoVariable();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}

void Leds_yellowToggle_Logger()
{
    66ae:	cf 93       	push	r28
    66b0:	df 93       	push	r29
    66b2:	cd b7       	in	r28, 0x3d	; 61
    66b4:	de b7       	in	r29, 0x3e	; 62
    66b6:	22 97       	sbiw	r28, 0x02	; 2
    66b8:	0f b6       	in	r0, 0x3f	; 63
    66ba:	f8 94       	cli
    66bc:	de bf       	out	0x3e, r29	; 62
    66be:	0f be       	out	0x3f, r0	; 63
    66c0:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    66c2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    66c6:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    66c8:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    66cc:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    66ce:	89 81       	ldd	r24, Y+1	; 0x01
    66d0:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_YELLOWTOGGLEFUNCTION, currentindex); 
    66d4:	6a 81       	ldd	r22, Y+2	; 0x02
    66d6:	81 e8       	ldi	r24, 0x81	; 129
    66d8:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  Leds_yellowToggle(); 
    66dc:	0e 94 4b 59 	call	0xb296	; 0xb296 <Leds_yellowToggle>
    66e0:	22 96       	adiw	r28, 0x02	; 2
    66e2:	0f b6       	in	r0, 0x3f	; 63
    66e4:	f8 94       	cli
    66e6:	de bf       	out	0x3e, r29	; 62
    66e8:	0f be       	out	0x3f, r0	; 63
    66ea:	cd bf       	out	0x3d, r28	; 61
    66ec:	df 91       	pop	r29
    66ee:	cf 91       	pop	r28
    66f0:	08 95       	ret

000066f2 <Leds_redOn_Logger>:
}

/**\ingroup syscall 
      Toggle the yellow LED. 
*/
void yellowtogglefunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void yellowtogglefunction() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_YELLOWTOGGLEFUNCTION
   Leds_yellowToggle_Logger();
   #endif
   #else
   Leds_yellowToggle(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void Leds_redOn_Logger()
{
    66f2:	cf 93       	push	r28
    66f4:	df 93       	push	r29
    66f6:	cd b7       	in	r28, 0x3d	; 61
    66f8:	de b7       	in	r29, 0x3e	; 62
    66fa:	22 97       	sbiw	r28, 0x02	; 2
    66fc:	0f b6       	in	r0, 0x3f	; 63
    66fe:	f8 94       	cli
    6700:	de bf       	out	0x3e, r29	; 62
    6702:	0f be       	out	0x3f, r0	; 63
    6704:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6706:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    670a:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    670c:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6710:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6712:	89 81       	ldd	r24, Y+1	; 0x01
    6714:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_REDONFUNCTION, currentindex); 
    6718:	6a 81       	ldd	r22, Y+2	; 0x02
    671a:	82 e8       	ldi	r24, 0x82	; 130
    671c:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   Leds_redOn(); 
    6720:	0e 94 41 58 	call	0xb082	; 0xb082 <Leds_redOn>
    6724:	22 96       	adiw	r28, 0x02	; 2
    6726:	0f b6       	in	r0, 0x3f	; 63
    6728:	f8 94       	cli
    672a:	de bf       	out	0x3e, r29	; 62
    672c:	0f be       	out	0x3f, r0	; 63
    672e:	cd bf       	out	0x3d, r28	; 61
    6730:	df 91       	pop	r29
    6732:	cf 91       	pop	r28
    6734:	08 95       	ret

00006736 <Leds_redOff_Logger>:
}


/**\ingroup syscall 
     Turn the red LED on. 
*/
void redonfunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void redonfunction() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_REDONFUNCTION
     Leds_redOn_Logger();
   #endif
   #else
   Leds_redOn(); 
   #endif
   
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void Leds_redOff_Logger()
{
    6736:	cf 93       	push	r28
    6738:	df 93       	push	r29
    673a:	cd b7       	in	r28, 0x3d	; 61
    673c:	de b7       	in	r29, 0x3e	; 62
    673e:	22 97       	sbiw	r28, 0x02	; 2
    6740:	0f b6       	in	r0, 0x3f	; 63
    6742:	f8 94       	cli
    6744:	de bf       	out	0x3e, r29	; 62
    6746:	0f be       	out	0x3f, r0	; 63
    6748:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    674a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    674e:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6750:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6754:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6756:	89 81       	ldd	r24, Y+1	; 0x01
    6758:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_REDOFFFUNCTION, currentindex); 
    675c:	6a 81       	ldd	r22, Y+2	; 0x02
    675e:	83 e8       	ldi	r24, 0x83	; 131
    6760:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   Leds_redOff(); 
    6764:	0e 94 61 58 	call	0xb0c2	; 0xb0c2 <Leds_redOff>
    6768:	22 96       	adiw	r28, 0x02	; 2
    676a:	0f b6       	in	r0, 0x3f	; 63
    676c:	f8 94       	cli
    676e:	de bf       	out	0x3e, r29	; 62
    6770:	0f be       	out	0x3f, r0	; 63
    6772:	cd bf       	out	0x3d, r28	; 61
    6774:	df 91       	pop	r29
    6776:	cf 91       	pop	r28
    6778:	08 95       	ret

0000677a <Leds_yellowOn_Logger>:
}


/**\ingroup syscall 
      Turn the red LED off. 
*/
void redofffunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void redofffunction() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_REDOFFFUNCTION
     Leds_redOff_Logger();
   #endif
   #else
   Leds_redOff(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void Leds_yellowOn_Logger()
{
    677a:	cf 93       	push	r28
    677c:	df 93       	push	r29
    677e:	cd b7       	in	r28, 0x3d	; 61
    6780:	de b7       	in	r29, 0x3e	; 62
    6782:	22 97       	sbiw	r28, 0x02	; 2
    6784:	0f b6       	in	r0, 0x3f	; 63
    6786:	f8 94       	cli
    6788:	de bf       	out	0x3e, r29	; 62
    678a:	0f be       	out	0x3f, r0	; 63
    678c:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    678e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6792:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6794:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6798:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    679a:	89 81       	ldd	r24, Y+1	; 0x01
    679c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_YELLOWONFUNCTION, currentindex);
    67a0:	6a 81       	ldd	r22, Y+2	; 0x02
    67a2:	84 e8       	ldi	r24, 0x84	; 132
    67a4:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  Leds_yellowOn(); 
    67a8:	0e 94 0b 59 	call	0xb216	; 0xb216 <Leds_yellowOn>
    67ac:	22 96       	adiw	r28, 0x02	; 2
    67ae:	0f b6       	in	r0, 0x3f	; 63
    67b0:	f8 94       	cli
    67b2:	de bf       	out	0x3e, r29	; 62
    67b4:	0f be       	out	0x3f, r0	; 63
    67b6:	cd bf       	out	0x3d, r28	; 61
    67b8:	df 91       	pop	r29
    67ba:	cf 91       	pop	r28
    67bc:	08 95       	ret

000067be <Leds_yellowOff_Logger>:
}


/**\ingroup syscall 
     Turn the yellow LED on.
*/
void yellowonfunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void yellowonfunction() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_YELLOWONFUNCTION
   Leds_yellowOn_Logger();
   #endif
   #else
   Leds_yellowOn();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void Leds_yellowOff_Logger()
{
    67be:	cf 93       	push	r28
    67c0:	df 93       	push	r29
    67c2:	cd b7       	in	r28, 0x3d	; 61
    67c4:	de b7       	in	r29, 0x3e	; 62
    67c6:	22 97       	sbiw	r28, 0x02	; 2
    67c8:	0f b6       	in	r0, 0x3f	; 63
    67ca:	f8 94       	cli
    67cc:	de bf       	out	0x3e, r29	; 62
    67ce:	0f be       	out	0x3f, r0	; 63
    67d0:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    67d2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    67d6:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    67d8:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    67dc:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    67de:	89 81       	ldd	r24, Y+1	; 0x01
    67e0:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_YELLOWOFFFUNCTION, currentindex);
    67e4:	6a 81       	ldd	r22, Y+2	; 0x02
    67e6:	85 e8       	ldi	r24, 0x85	; 133
    67e8:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  Leds_yellowOff(); 
    67ec:	0e 94 2b 59 	call	0xb256	; 0xb256 <Leds_yellowOff>
    67f0:	22 96       	adiw	r28, 0x02	; 2
    67f2:	0f b6       	in	r0, 0x3f	; 63
    67f4:	f8 94       	cli
    67f6:	de bf       	out	0x3e, r29	; 62
    67f8:	0f be       	out	0x3f, r0	; 63
    67fa:	cd bf       	out	0x3d, r28	; 61
    67fc:	df 91       	pop	r29
    67fe:	cf 91       	pop	r28
    6800:	08 95       	ret

00006802 <Leds_greenOn_Logger>:
}


/**\ingroup syscall 
     Turn the yellow LED off. 
*/
void yellowofffunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void yellowofffunction() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
  #ifdef TRACE_ENABLE_SYSCALL_YELLOWOFFFUNCTION
    Leds_yellowOff_Logger();
  #endif
  #else
    Leds_yellowOff();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void Leds_greenOn_Logger()
{
    6802:	cf 93       	push	r28
    6804:	df 93       	push	r29
    6806:	cd b7       	in	r28, 0x3d	; 61
    6808:	de b7       	in	r29, 0x3e	; 62
    680a:	22 97       	sbiw	r28, 0x02	; 2
    680c:	0f b6       	in	r0, 0x3f	; 63
    680e:	f8 94       	cli
    6810:	de bf       	out	0x3e, r29	; 62
    6812:	0f be       	out	0x3f, r0	; 63
    6814:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6816:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    681a:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    681c:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6820:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6822:	89 81       	ldd	r24, Y+1	; 0x01
    6824:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GREENONFUNCTION, currentindex);
    6828:	6a 81       	ldd	r22, Y+2	; 0x02
    682a:	86 e8       	ldi	r24, 0x86	; 134
    682c:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  Leds_greenOn(); 
    6830:	0e 94 a6 58 	call	0xb14c	; 0xb14c <Leds_greenOn>
    6834:	22 96       	adiw	r28, 0x02	; 2
    6836:	0f b6       	in	r0, 0x3f	; 63
    6838:	f8 94       	cli
    683a:	de bf       	out	0x3e, r29	; 62
    683c:	0f be       	out	0x3f, r0	; 63
    683e:	cd bf       	out	0x3d, r28	; 61
    6840:	df 91       	pop	r29
    6842:	cf 91       	pop	r28
    6844:	08 95       	ret

00006846 <Leds_greenOff_Logger>:
}


/**\ingroup syscall 
     Turn the green LED on. 
*/
void greenonfunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void greenonfunction() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
  #ifdef TRACE_ENABLE_SYSCALL_GREENONFUNCTION
     Leds_greenOn_Logger();
  #endif
  #else
     Leds_greenOn();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}

void Leds_greenOff_Logger()
{
    6846:	cf 93       	push	r28
    6848:	df 93       	push	r29
    684a:	cd b7       	in	r28, 0x3d	; 61
    684c:	de b7       	in	r29, 0x3e	; 62
    684e:	22 97       	sbiw	r28, 0x02	; 2
    6850:	0f b6       	in	r0, 0x3f	; 63
    6852:	f8 94       	cli
    6854:	de bf       	out	0x3e, r29	; 62
    6856:	0f be       	out	0x3f, r0	; 63
    6858:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    685a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    685e:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6860:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6864:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6866:	89 81       	ldd	r24, Y+1	; 0x01
    6868:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GREENOFFFUNCTION, currentindex);
    686c:	6a 81       	ldd	r22, Y+2	; 0x02
    686e:	87 e8       	ldi	r24, 0x87	; 135
    6870:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  Leds_greenOff(); 
    6874:	0e 94 c6 58 	call	0xb18c	; 0xb18c <Leds_greenOff>
    6878:	22 96       	adiw	r28, 0x02	; 2
    687a:	0f b6       	in	r0, 0x3f	; 63
    687c:	f8 94       	cli
    687e:	de bf       	out	0x3e, r29	; 62
    6880:	0f be       	out	0x3f, r0	; 63
    6882:	cd bf       	out	0x3d, r28	; 61
    6884:	df 91       	pop	r29
    6886:	cf 91       	pop	r28
    6888:	08 95       	ret

0000688a <break_point_function_Logger>:
}

/**\ingroup syscall 
     Turn the green LED off. 
*/
void greenofffunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void greenofffunction() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
  #ifdef TRACE_ENABLE_SYSCALL_GREENOFFFUNCTION
     Leds_greenOff_Logger();
  #endif
  #else
     Leds_greenOff();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}




void break_point_function_Logger()
{
    688a:	cf 93       	push	r28
    688c:	df 93       	push	r29
    688e:	cd b7       	in	r28, 0x3d	; 61
    6890:	de b7       	in	r29, 0x3e	; 62
    6892:	22 97       	sbiw	r28, 0x02	; 2
    6894:	0f b6       	in	r0, 0x3f	; 63
    6896:	f8 94       	cli
    6898:	de bf       	out	0x3e, r29	; 62
    689a:	0f be       	out	0x3f, r0	; 63
    689c:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    689e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    68a2:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    68a4:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    68a8:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    68aa:	89 81       	ldd	r24, Y+1	; 0x01
    68ac:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_BREAKFUNCTION, currentindex);
    68b0:	6a 81       	ldd	r22, Y+2	; 0x02
    68b2:	88 e8       	ldi	r24, 0x88	; 136
    68b4:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  break_point_function(); 
    68b8:	0e 94 c9 98 	call	0x13192	; 0x13192 <break_point_function>
    68bc:	22 96       	adiw	r28, 0x02	; 2
    68be:	0f b6       	in	r0, 0x3f	; 63
    68c0:	f8 94       	cli
    68c2:	de bf       	out	0x3e, r29	; 62
    68c4:	0f be       	out	0x3f, r0	; 63
    68c6:	cd bf       	out	0x3d, r28	; 61
    68c8:	df 91       	pop	r29
    68ca:	cf 91       	pop	r28
    68cc:	08 95       	ret

000068ce <getSerialMutexAddress_avr>:
}

/**\ingroup syscall
     Break the current thread. 
*/
void breakfunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void breakfunction() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
  #ifdef TRACE_ENABLE_SYSCALL_BREAKFUNCTION
   break_point_function_Logger();
  #endif
  #else
   break_point_function();   
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void getSerialMutexAddress_avr(){
    68ce:	cf 93       	push	r28
    68d0:	df 93       	push	r29
    68d2:	cd b7       	in	r28, 0x3d	; 61
    68d4:	de b7       	in	r29, 0x3e	; 62
    68d6:	22 97       	sbiw	r28, 0x02	; 2
    68d8:	0f b6       	in	r0, 0x3f	; 63
    68da:	f8 94       	cli
    68dc:	de bf       	out	0x3e, r29	; 62
    68de:	0f be       	out	0x3f, r0	; 63
    68e0:	cd bf       	out	0x3d, r28	; 61
   void *addr; 
   addr = getSerialMutexAddress(); 
    68e2:	0e 94 33 8e 	call	0x11c66	; 0x11c66 <getSerialMutexAddress>
    68e6:	9a 83       	std	Y+2, r25	; 0x02
    68e8:	89 83       	std	Y+1, r24	; 0x01
   asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
    68ea:	89 81       	ldd	r24, Y+1	; 0x01
    68ec:	9a 81       	ldd	r25, Y+2	; 0x02
    68ee:	48 2f       	mov	r20, r24
    68f0:	59 2f       	mov	r21, r25
    68f2:	22 96       	adiw	r28, 0x02	; 2
    68f4:	0f b6       	in	r0, 0x3f	; 63
    68f6:	f8 94       	cli
    68f8:	de bf       	out	0x3e, r29	; 62
    68fa:	0f be       	out	0x3f, r0	; 63
    68fc:	cd bf       	out	0x3d, r28	; 61
    68fe:	df 91       	pop	r29
    6900:	cf 91       	pop	r28
    6902:	08 95       	ret

00006904 <getSerialMutexAddress_Logger>:
}


void getSerialMutexAddress_Logger()
{
    6904:	cf 93       	push	r28
    6906:	df 93       	push	r29
    6908:	cd b7       	in	r28, 0x3d	; 61
    690a:	de b7       	in	r29, 0x3e	; 62
    690c:	22 97       	sbiw	r28, 0x02	; 2
    690e:	0f b6       	in	r0, 0x3f	; 63
    6910:	f8 94       	cli
    6912:	de bf       	out	0x3e, r29	; 62
    6914:	0f be       	out	0x3f, r0	; 63
    6916:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6918:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    691c:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    691e:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6922:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6924:	89 81       	ldd	r24, Y+1	; 0x01
    6926:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETSERIALMUTEX, currentindex);
    692a:	6a 81       	ldd	r22, Y+2	; 0x02
    692c:	89 e8       	ldi	r24, 0x89	; 137
    692e:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   getSerialMutexAddress_avr(); 
    6932:	0e 94 67 34 	call	0x68ce	; 0x68ce <getSerialMutexAddress_avr>
    6936:	22 96       	adiw	r28, 0x02	; 2
    6938:	0f b6       	in	r0, 0x3f	; 63
    693a:	f8 94       	cli
    693c:	de bf       	out	0x3e, r29	; 62
    693e:	0f be       	out	0x3f, r0	; 63
    6940:	cd bf       	out	0x3d, r28	; 61
    6942:	df 91       	pop	r29
    6944:	cf 91       	pop	r28
    6946:	08 95       	ret

00006948 <getSerialInfo_avr>:
}


/**\ingroup syscall 
     Get the serial mutex. 
*/
void getSerialMutex()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getSerialMutex() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_GETSERIALMUTEX
    getSerialMutexAddress_Logger();
   #endif
   #else
    getSerialMutexAddress_avr();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}

void getSerialInfo_avr()
{ 
    6948:	cf 93       	push	r28
    694a:	df 93       	push	r29
    694c:	cd b7       	in	r28, 0x3d	; 61
    694e:	de b7       	in	r29, 0x3e	; 62
    6950:	22 97       	sbiw	r28, 0x02	; 2
    6952:	0f b6       	in	r0, 0x3f	; 63
    6954:	f8 94       	cli
    6956:	de bf       	out	0x3e, r29	; 62
    6958:	0f be       	out	0x3f, r0	; 63
    695a:	cd bf       	out	0x3d, r28	; 61
   void *addr; 
   addr = getSerialInfo(); 
    695c:	0e 94 bc 8c 	call	0x11978	; 0x11978 <getSerialInfo>
    6960:	9a 83       	std	Y+2, r25	; 0x02
    6962:	89 83       	std	Y+1, r24	; 0x01
   asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );   
    6964:	89 81       	ldd	r24, Y+1	; 0x01
    6966:	9a 81       	ldd	r25, Y+2	; 0x02
    6968:	48 2f       	mov	r20, r24
    696a:	59 2f       	mov	r21, r25
    696c:	22 96       	adiw	r28, 0x02	; 2
    696e:	0f b6       	in	r0, 0x3f	; 63
    6970:	f8 94       	cli
    6972:	de bf       	out	0x3e, r29	; 62
    6974:	0f be       	out	0x3f, r0	; 63
    6976:	cd bf       	out	0x3d, r28	; 61
    6978:	df 91       	pop	r29
    697a:	cf 91       	pop	r28
    697c:	08 95       	ret

0000697e <getSerialInfo_Logger>:
}

void getSerialInfo_Logger()
{
    697e:	cf 93       	push	r28
    6980:	df 93       	push	r29
    6982:	cd b7       	in	r28, 0x3d	; 61
    6984:	de b7       	in	r29, 0x3e	; 62
    6986:	22 97       	sbiw	r28, 0x02	; 2
    6988:	0f b6       	in	r0, 0x3f	; 63
    698a:	f8 94       	cli
    698c:	de bf       	out	0x3e, r29	; 62
    698e:	0f be       	out	0x3f, r0	; 63
    6990:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6992:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6996:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6998:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    699c:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    699e:	89 81       	ldd	r24, Y+1	; 0x01
    69a0:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETCURRENTSERIALINFOADDRESS, currentindex);
    69a4:	6a 81       	ldd	r22, Y+2	; 0x02
    69a6:	8a e8       	ldi	r24, 0x8A	; 138
    69a8:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  getSerialInfo_avr(); 
    69ac:	0e 94 a4 34 	call	0x6948	; 0x6948 <getSerialInfo_avr>
    69b0:	22 96       	adiw	r28, 0x02	; 2
    69b2:	0f b6       	in	r0, 0x3f	; 63
    69b4:	f8 94       	cli
    69b6:	de bf       	out	0x3e, r29	; 62
    69b8:	0f be       	out	0x3f, r0	; 63
    69ba:	cd bf       	out	0x3d, r28	; 61
    69bc:	df 91       	pop	r29
    69be:	cf 91       	pop	r28
    69c0:	08 95       	ret

000069c2 <SocketSerialSend_Logger>:
}


/**\ingroup syscall
      Get the serial handle for sending a serial packet. 
*/
void getCurrentSerialInfoAddress()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getCurrentSerialInfoAddress() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_GETCURRENTSERIALINFOADDRESS
    getSerialInfo_Logger();
   #endif
  #else
    getSerialInfo_avr();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void SocketSerialSend_Logger()
{
    69c2:	cf 93       	push	r28
    69c4:	df 93       	push	r29
    69c6:	cd b7       	in	r28, 0x3d	; 61
    69c8:	de b7       	in	r29, 0x3e	; 62
    69ca:	22 97       	sbiw	r28, 0x02	; 2
    69cc:	0f b6       	in	r0, 0x3f	; 63
    69ce:	f8 94       	cli
    69d0:	de bf       	out	0x3e, r29	; 62
    69d2:	0f be       	out	0x3f, r0	; 63
    69d4:	cd bf       	out	0x3d, r28	; 61
    uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    69d6:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    69da:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    69dc:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    69e0:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    69e2:	89 81       	ldd	r24, Y+1	; 0x01
    69e4:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETSERIALSENDFUNCTION, currentindex); 
    69e8:	6a 81       	ldd	r22, Y+2	; 0x02
    69ea:	8b e8       	ldi	r24, 0x8B	; 139
    69ec:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
	SocketSerialSend(); 
    69f0:	0e 94 d6 8c 	call	0x119ac	; 0x119ac <SocketSerialSend>
    69f4:	22 96       	adiw	r28, 0x02	; 2
    69f6:	0f b6       	in	r0, 0x3f	; 63
    69f8:	f8 94       	cli
    69fa:	de bf       	out	0x3e, r29	; 62
    69fc:	0f be       	out	0x3f, r0	; 63
    69fe:	cd bf       	out	0x3d, r28	; 61
    6a00:	df 91       	pop	r29
    6a02:	cf 91       	pop	r28
    6a04:	08 95       	ret

00006a06 <getSerialHandleInfo_avr>:
}

/**\ingroup syscall 
     Send a message through the serial port. 
*/


void getSerialSendFunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getSerialSendFunction() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_GETSERIALSENDFUNCTION
     SocketSerialSend_Logger();
   #endif
  #else
     SocketSerialSend();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void getSerialHandleInfo_avr(){
    6a06:	cf 93       	push	r28
    6a08:	df 93       	push	r29
    6a0a:	cd b7       	in	r28, 0x3d	; 61
    6a0c:	de b7       	in	r29, 0x3e	; 62
    6a0e:	22 97       	sbiw	r28, 0x02	; 2
    6a10:	0f b6       	in	r0, 0x3f	; 63
    6a12:	f8 94       	cli
    6a14:	de bf       	out	0x3e, r29	; 62
    6a16:	0f be       	out	0x3f, r0	; 63
    6a18:	cd bf       	out	0x3d, r28	; 61
      void *addr;
	  addr = getSerialHandleInfo(); 
    6a1a:	0e 94 ab 8e 	call	0x11d56	; 0x11d56 <getSerialHandleInfo>
    6a1e:	9a 83       	std	Y+2, r25	; 0x02
    6a20:	89 83       	std	Y+1, r24	; 0x01
	  asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
    6a22:	89 81       	ldd	r24, Y+1	; 0x01
    6a24:	9a 81       	ldd	r25, Y+2	; 0x02
    6a26:	48 2f       	mov	r20, r24
    6a28:	59 2f       	mov	r21, r25
    6a2a:	22 96       	adiw	r28, 0x02	; 2
    6a2c:	0f b6       	in	r0, 0x3f	; 63
    6a2e:	f8 94       	cli
    6a30:	de bf       	out	0x3e, r29	; 62
    6a32:	0f be       	out	0x3f, r0	; 63
    6a34:	cd bf       	out	0x3d, r28	; 61
    6a36:	df 91       	pop	r29
    6a38:	cf 91       	pop	r28
    6a3a:	08 95       	ret

00006a3c <getSerialHandleInfo_Logger>:
}

void getSerialHandleInfo_Logger()
{
    6a3c:	cf 93       	push	r28
    6a3e:	df 93       	push	r29
    6a40:	cd b7       	in	r28, 0x3d	; 61
    6a42:	de b7       	in	r29, 0x3e	; 62
    6a44:	22 97       	sbiw	r28, 0x02	; 2
    6a46:	0f b6       	in	r0, 0x3f	; 63
    6a48:	f8 94       	cli
    6a4a:	de bf       	out	0x3e, r29	; 62
    6a4c:	0f be       	out	0x3f, r0	; 63
    6a4e:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6a50:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6a54:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6a56:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6a5a:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6a5c:	89 81       	ldd	r24, Y+1	; 0x01
    6a5e:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETCURRENTSERIALHANDLEADDRESS, currentindex);
    6a62:	6a 81       	ldd	r22, Y+2	; 0x02
    6a64:	8c e8       	ldi	r24, 0x8C	; 140
    6a66:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  getSerialHandleInfo_avr();    
    6a6a:	0e 94 03 35 	call	0x6a06	; 0x6a06 <getSerialHandleInfo_avr>
    6a6e:	22 96       	adiw	r28, 0x02	; 2
    6a70:	0f b6       	in	r0, 0x3f	; 63
    6a72:	f8 94       	cli
    6a74:	de bf       	out	0x3e, r29	; 62
    6a76:	0f be       	out	0x3f, r0	; 63
    6a78:	cd bf       	out	0x3d, r28	; 61
    6a7a:	df 91       	pop	r29
    6a7c:	cf 91       	pop	r28
    6a7e:	08 95       	ret

00006a80 <syscall_registerEventSerial_Logger>:
}

/**\ingroup syscall 
      Get the serial receiving handle. 
*/
void getCurrentSerialHandleAddress()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getCurrentSerialHandleAddress() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
    #ifdef TRACE_ENABLE_SYSCALL_GETCURRENTSERIALHANDLEADDRESS
	    getSerialHandleInfo_Logger();
	#endif
   #else
	    getSerialHandleInfo_avr();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void syscall_registerEventSerial_Logger()
{
    6a80:	cf 93       	push	r28
    6a82:	df 93       	push	r29
    6a84:	cd b7       	in	r28, 0x3d	; 61
    6a86:	de b7       	in	r29, 0x3e	; 62
    6a88:	22 97       	sbiw	r28, 0x02	; 2
    6a8a:	0f b6       	in	r0, 0x3f	; 63
    6a8c:	f8 94       	cli
    6a8e:	de bf       	out	0x3e, r29	; 62
    6a90:	0f be       	out	0x3f, r0	; 63
    6a92:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6a94:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6a98:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6a9a:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6a9e:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6aa0:	89 81       	ldd	r24, Y+1	; 0x01
    6aa2:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_SETCURRENTSERIALHANDLEADDRESS, currentindex);
    6aa6:	6a 81       	ldd	r22, Y+2	; 0x02
    6aa8:	8d e8       	ldi	r24, 0x8D	; 141
    6aaa:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   syscall_registerEventSerial(); 
    6aae:	0e 94 b4 8e 	call	0x11d68	; 0x11d68 <syscall_registerEventSerial>
    6ab2:	22 96       	adiw	r28, 0x02	; 2
    6ab4:	0f b6       	in	r0, 0x3f	; 63
    6ab6:	f8 94       	cli
    6ab8:	de bf       	out	0x3e, r29	; 62
    6aba:	0f be       	out	0x3f, r0	; 63
    6abc:	cd bf       	out	0x3d, r28	; 61
    6abe:	df 91       	pop	r29
    6ac0:	cf 91       	pop	r28
    6ac2:	08 95       	ret

00006ac4 <getEEPROMHandleInfo>:
}


/**\ingroup syscall 
     Register a serial event receiving handle. 
*/

void setCurrentSerialHandleAddress()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void setCurrentSerialHandleAddress() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
  #ifdef TRACE_ENABLE_SYSCALL_SETCURRENTSERIALHANDLEADDRESS
     syscall_registerEventSerial_Logger();
  #endif
  #else
     syscall_registerEventSerial();
  #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void getEEPROMHandleInfo() {
    6ac4:	cf 93       	push	r28
    6ac6:	df 93       	push	r29
    6ac8:	cd b7       	in	r28, 0x3d	; 61
    6aca:	de b7       	in	r29, 0x3e	; 62
    6acc:	22 97       	sbiw	r28, 0x02	; 2
    6ace:	0f b6       	in	r0, 0x3f	; 63
    6ad0:	f8 94       	cli
    6ad2:	de bf       	out	0x3e, r29	; 62
    6ad4:	0f be       	out	0x3f, r0	; 63
    6ad6:	cd bf       	out	0x3d, r28	; 61
 void *addr;
 addr = getGenericStorageNodeAddress(); 
    6ad8:	0e 94 51 6e 	call	0xdca2	; 0xdca2 <getGenericStorageNodeAddress>
    6adc:	9a 83       	std	Y+2, r25	; 0x02
    6ade:	89 83       	std	Y+1, r24	; 0x01
 asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) ); 
    6ae0:	89 81       	ldd	r24, Y+1	; 0x01
    6ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae4:	48 2f       	mov	r20, r24
    6ae6:	59 2f       	mov	r21, r25
    6ae8:	22 96       	adiw	r28, 0x02	; 2
    6aea:	0f b6       	in	r0, 0x3f	; 63
    6aec:	f8 94       	cli
    6aee:	de bf       	out	0x3e, r29	; 62
    6af0:	0f be       	out	0x3f, r0	; 63
    6af2:	cd bf       	out	0x3d, r28	; 61
    6af4:	df 91       	pop	r29
    6af6:	cf 91       	pop	r28
    6af8:	08 95       	ret

00006afa <getEEPROMHandleInfo_Logger>:

}

void getEEPROMHandleInfo_Logger(){
    6afa:	cf 93       	push	r28
    6afc:	df 93       	push	r29
    6afe:	cd b7       	in	r28, 0x3d	; 61
    6b00:	de b7       	in	r29, 0x3e	; 62
    6b02:	22 97       	sbiw	r28, 0x02	; 2
    6b04:	0f b6       	in	r0, 0x3f	; 63
    6b06:	f8 94       	cli
    6b08:	de bf       	out	0x3e, r29	; 62
    6b0a:	0f be       	out	0x3f, r0	; 63
    6b0c:	cd bf       	out	0x3d, r28	; 61
	 uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6b0e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6b12:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6b14:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6b18:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6b1a:	89 81       	ldd	r24, Y+1	; 0x01
    6b1c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETCURRENTEEPROMHANDLEADDRESS, currentindex);
    6b20:	6a 81       	ldd	r22, Y+2	; 0x02
    6b22:	8e e8       	ldi	r24, 0x8E	; 142
    6b24:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
	 getEEPROMHandleInfo();
    6b28:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <getEEPROMHandleInfo>
    6b2c:	22 96       	adiw	r28, 0x02	; 2
    6b2e:	0f b6       	in	r0, 0x3f	; 63
    6b30:	f8 94       	cli
    6b32:	de bf       	out	0x3e, r29	; 62
    6b34:	0f be       	out	0x3f, r0	; 63
    6b36:	cd bf       	out	0x3d, r28	; 61
    6b38:	df 91       	pop	r29
    6b3a:	cf 91       	pop	r28
    6b3c:	08 95       	ret

00006b3e <readEEPROMTask>:
}

/**\ingroup syscall 
     Get the EEPROM handle address for read/write. 
*/
void getCurrentEEPROMHandleAddress()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getCurrentEEPROMHandleAddress() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_GETCURRENTEEPROMHANDLEADDRESS
     getEEPROMHandleInfo_Logger();
   #endif
   #else
     getEEPROMHandleInfo(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}




void readEEPROMTask(){
    6b3e:	cf 93       	push	r28
    6b40:	df 93       	push	r29
    6b42:	cd b7       	in	r28, 0x3d	; 61
    6b44:	de b7       	in	r29, 0x3e	; 62
    genericReadTask(); 
    6b46:	0e 94 5a 6e 	call	0xdcb4	; 0xdcb4 <genericReadTask>
    6b4a:	df 91       	pop	r29
    6b4c:	cf 91       	pop	r28
    6b4e:	08 95       	ret

00006b50 <readEEPROMTask_Logger>:
}

void readEEPROMTask_Logger(){
    6b50:	cf 93       	push	r28
    6b52:	df 93       	push	r29
    6b54:	cd b7       	in	r28, 0x3d	; 61
    6b56:	de b7       	in	r29, 0x3e	; 62
    6b58:	22 97       	sbiw	r28, 0x02	; 2
    6b5a:	0f b6       	in	r0, 0x3f	; 63
    6b5c:	f8 94       	cli
    6b5e:	de bf       	out	0x3e, r29	; 62
    6b60:	0f be       	out	0x3f, r0	; 63
    6b62:	cd bf       	out	0x3d, r28	; 61
	 uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6b64:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6b68:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6b6a:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6b6e:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6b70:	89 81       	ldd	r24, Y+1	; 0x01
    6b72:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_READFROMEEPROM, currentindex);
    6b76:	6a 81       	ldd	r22, Y+2	; 0x02
    6b78:	8f e8       	ldi	r24, 0x8F	; 143
    6b7a:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
	 readEEPROMTask();
    6b7e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <readEEPROMTask>
    6b82:	22 96       	adiw	r28, 0x02	; 2
    6b84:	0f b6       	in	r0, 0x3f	; 63
    6b86:	f8 94       	cli
    6b88:	de bf       	out	0x3e, r29	; 62
    6b8a:	0f be       	out	0x3f, r0	; 63
    6b8c:	cd bf       	out	0x3d, r28	; 61
    6b8e:	df 91       	pop	r29
    6b90:	cf 91       	pop	r28
    6b92:	08 95       	ret

00006b94 <writeEEPROMTask>:
}


/**\ingroup syscall 
      Read from EEPROM. 
*/
void readFromEEPROM()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void readFromEEPROM() {
   
   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_READFROMEEPROM
     readEEPROMTask_Logger();
   #endif
   #else
     readEEPROMTask(); 
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}

void writeEEPROMTask(){
    6b94:	cf 93       	push	r28
    6b96:	df 93       	push	r29
    6b98:	cd b7       	in	r28, 0x3d	; 61
    6b9a:	de b7       	in	r29, 0x3e	; 62
	genericWriteTask(); 
    6b9c:	0e 94 71 6e 	call	0xdce2	; 0xdce2 <genericWriteTask>
    6ba0:	df 91       	pop	r29
    6ba2:	cf 91       	pop	r28
    6ba4:	08 95       	ret

00006ba6 <writeEEPROMTask_Logger>:
}


void writeEEPROMTask_Logger()
{
    6ba6:	cf 93       	push	r28
    6ba8:	df 93       	push	r29
    6baa:	cd b7       	in	r28, 0x3d	; 61
    6bac:	de b7       	in	r29, 0x3e	; 62
    6bae:	22 97       	sbiw	r28, 0x02	; 2
    6bb0:	0f b6       	in	r0, 0x3f	; 63
    6bb2:	f8 94       	cli
    6bb4:	de bf       	out	0x3e, r29	; 62
    6bb6:	0f be       	out	0x3f, r0	; 63
    6bb8:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6bba:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6bbe:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6bc0:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6bc4:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6bc6:	89 81       	ldd	r24, Y+1	; 0x01
    6bc8:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_WRITETOEEPROM, currentindex);
    6bcc:	6a 81       	ldd	r22, Y+2	; 0x02
    6bce:	80 e9       	ldi	r24, 0x90	; 144
    6bd0:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   writeEEPROMTask(); 
    6bd4:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <writeEEPROMTask>
    6bd8:	22 96       	adiw	r28, 0x02	; 2
    6bda:	0f b6       	in	r0, 0x3f	; 63
    6bdc:	f8 94       	cli
    6bde:	de bf       	out	0x3e, r29	; 62
    6be0:	0f be       	out	0x3f, r0	; 63
    6be2:	cd bf       	out	0x3d, r28	; 61
    6be4:	df 91       	pop	r29
    6be6:	cf 91       	pop	r28
    6be8:	08 95       	ret

00006bea <getMalloc>:
}

/**\ingroup syscall 
      Write to EEPROM. 
*/
void writeToEEPROM()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void writeToEEPROM() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
    #ifdef TRACE_ENABLE_SYSCALL_WRITETOEEPROM
	   writeEEPROMTask_Logger();
	#endif
    #else
	   writeEEPROMTask();
	#endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}

//bug
void getMalloc() {
    6bea:	cf 93       	push	r28
    6bec:	df 93       	push	r29
    6bee:	cd b7       	in	r28, 0x3d	; 61
    6bf0:	de b7       	in	r29, 0x3e	; 62
    6bf2:	df 91       	pop	r29
    6bf4:	cf 91       	pop	r28
    6bf6:	08 95       	ret

00006bf8 <getMalloc_Logger>:


}

void getMalloc_Logger()
{
    6bf8:	cf 93       	push	r28
    6bfa:	df 93       	push	r29
    6bfc:	cd b7       	in	r28, 0x3d	; 61
    6bfe:	de b7       	in	r29, 0x3e	; 62
    6c00:	22 97       	sbiw	r28, 0x02	; 2
    6c02:	0f b6       	in	r0, 0x3f	; 63
    6c04:	f8 94       	cli
    6c06:	de bf       	out	0x3e, r29	; 62
    6c08:	0f be       	out	0x3f, r0	; 63
    6c0a:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6c0c:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6c10:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6c12:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6c16:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6c18:	89 81       	ldd	r24, Y+1	; 0x01
    6c1a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_MALLOCFUNCTION, currentindex);
    6c1e:	6a 81       	ldd	r22, Y+2	; 0x02
    6c20:	81 e9       	ldi	r24, 0x91	; 145
    6c22:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   getMalloc(); 
    6c26:	0e 94 f5 35 	call	0x6bea	; 0x6bea <getMalloc>
    6c2a:	22 96       	adiw	r28, 0x02	; 2
    6c2c:	0f b6       	in	r0, 0x3f	; 63
    6c2e:	f8 94       	cli
    6c30:	de bf       	out	0x3e, r29	; 62
    6c32:	0f be       	out	0x3f, r0	; 63
    6c34:	cd bf       	out	0x3d, r28	; 61
    6c36:	df 91       	pop	r29
    6c38:	cf 91       	pop	r28
    6c3a:	08 95       	ret

00006c3c <freeMemory>:
}



/**\ingroup syscall 
     Get a chunk of memory and store the return address into registers. 
*/
void mallocFunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void mallocFunction() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
    #ifdef TRACE_ENABLE_SYSCALL_MALLOCFUNCTION
	 getMalloc_Logger();
	#endif
	#else
	  getMalloc(); 
	#endif
	
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


//bug 
void freeMemory(){}
    6c3c:	cf 93       	push	r28
    6c3e:	df 93       	push	r29
    6c40:	cd b7       	in	r28, 0x3d	; 61
    6c42:	de b7       	in	r29, 0x3e	; 62
    6c44:	df 91       	pop	r29
    6c46:	cf 91       	pop	r28
    6c48:	08 95       	ret

00006c4a <freeMemory_Logger>:


void freeMemory_Logger()
{
    6c4a:	cf 93       	push	r28
    6c4c:	df 93       	push	r29
    6c4e:	cd b7       	in	r28, 0x3d	; 61
    6c50:	de b7       	in	r29, 0x3e	; 62
    6c52:	22 97       	sbiw	r28, 0x02	; 2
    6c54:	0f b6       	in	r0, 0x3f	; 63
    6c56:	f8 94       	cli
    6c58:	de bf       	out	0x3e, r29	; 62
    6c5a:	0f be       	out	0x3f, r0	; 63
    6c5c:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6c5e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6c62:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6c64:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6c68:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6c6a:	89 81       	ldd	r24, Y+1	; 0x01
    6c6c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_FREEFUNCTION, currentindex);
    6c70:	6a 81       	ldd	r22, Y+2	; 0x02
    6c72:	82 e9       	ldi	r24, 0x92	; 146
    6c74:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   freeMemory(); 
    6c78:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <freeMemory>
    6c7c:	22 96       	adiw	r28, 0x02	; 2
    6c7e:	0f b6       	in	r0, 0x3f	; 63
    6c80:	f8 94       	cli
    6c82:	de bf       	out	0x3e, r29	; 62
    6c84:	0f be       	out	0x3f, r0	; 63
    6c86:	cd bf       	out	0x3d, r28	; 61
    6c88:	df 91       	pop	r29
    6c8a:	cf 91       	pop	r28
    6c8c:	08 95       	ret

00006c8e <disableSocketRadioState_Logger>:
}



/**\ingroup syscall 
     Free a chunk of memory by using an address in the memory stored in registers. 
*/
void freeFunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void freeFunction() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
    #ifdef TRACE_ENABLE_SYSCALL_FREEFUNCTION
	 freeMemory_Logger();
	#endif
	#else
	 freeMemory(); 
	#endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void disableSocketRadioState_Logger()
{
    6c8e:	cf 93       	push	r28
    6c90:	df 93       	push	r29
    6c92:	cd b7       	in	r28, 0x3d	; 61
    6c94:	de b7       	in	r29, 0x3e	; 62
    6c96:	22 97       	sbiw	r28, 0x02	; 2
    6c98:	0f b6       	in	r0, 0x3f	; 63
    6c9a:	f8 94       	cli
    6c9c:	de bf       	out	0x3e, r29	; 62
    6c9e:	0f be       	out	0x3f, r0	; 63
    6ca0:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6ca2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6ca6:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6ca8:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6cac:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6cae:	89 81       	ldd	r24, Y+1	; 0x01
    6cb0:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_DISABLERADIOSTATE, currentindex);
    6cb4:	6a 81       	ldd	r22, Y+2	; 0x02
    6cb6:	83 e9       	ldi	r24, 0x93	; 147
    6cb8:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   restoreRadioState(); 
    6cbc:	0e 94 46 6e 	call	0xdc8c	; 0xdc8c <restoreRadioState>
    6cc0:	22 96       	adiw	r28, 0x02	; 2
    6cc2:	0f b6       	in	r0, 0x3f	; 63
    6cc4:	f8 94       	cli
    6cc6:	de bf       	out	0x3e, r29	; 62
    6cc8:	0f be       	out	0x3f, r0	; 63
    6cca:	cd bf       	out	0x3d, r28	; 61
    6ccc:	df 91       	pop	r29
    6cce:	cf 91       	pop	r28
    6cd0:	08 95       	ret

00006cd2 <getRandomTask>:
}

/**\ingroup syscall 
     Reset radio. Useful for sending out packets. Otherwise sometimes the radio will stop working. 
*/
void disableRadioState()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void disableRadioState() {

    #ifdef TRACE_ENABLE_SYSCALLEVENT
    #ifdef TRACE_ENABLE_SYSCALL_DISABLERADIOSTATE
	 disableSocketRadioState_Logger();
	#endif
	#else
	 restoreRadioState(); 
	#endif
	
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void getRandomTask(){
    6cd2:	cf 93       	push	r28
    6cd4:	df 93       	push	r29
    6cd6:	cd b7       	in	r28, 0x3d	; 61
    6cd8:	de b7       	in	r29, 0x3e	; 62
    6cda:	22 97       	sbiw	r28, 0x02	; 2
    6cdc:	0f b6       	in	r0, 0x3f	; 63
    6cde:	f8 94       	cli
    6ce0:	de bf       	out	0x3e, r29	; 62
    6ce2:	0f be       	out	0x3f, r0	; 63
    6ce4:	cd bf       	out	0x3d, r28	; 61
  uint16_t num;
  num = getRandomNumber();
    6ce6:	0e 94 f2 9c 	call	0x139e4	; 0x139e4 <getRandomNumber>
    6cea:	9a 83       	std	Y+2, r25	; 0x02
    6cec:	89 83       	std	Y+1, r24	; 0x01
  asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( num ) ); 
    6cee:	89 81       	ldd	r24, Y+1	; 0x01
    6cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    6cf2:	48 2f       	mov	r20, r24
    6cf4:	59 2f       	mov	r21, r25
    6cf6:	22 96       	adiw	r28, 0x02	; 2
    6cf8:	0f b6       	in	r0, 0x3f	; 63
    6cfa:	f8 94       	cli
    6cfc:	de bf       	out	0x3e, r29	; 62
    6cfe:	0f be       	out	0x3f, r0	; 63
    6d00:	cd bf       	out	0x3d, r28	; 61
    6d02:	df 91       	pop	r29
    6d04:	cf 91       	pop	r28
    6d06:	08 95       	ret

00006d08 <getRandomTask_Logger>:
  

}
void getRandomTask_Logger()
{
    6d08:	cf 93       	push	r28
    6d0a:	df 93       	push	r29
    6d0c:	cd b7       	in	r28, 0x3d	; 61
    6d0e:	de b7       	in	r29, 0x3e	; 62
    6d10:	22 97       	sbiw	r28, 0x02	; 2
    6d12:	0f b6       	in	r0, 0x3f	; 63
    6d14:	f8 94       	cli
    6d16:	de bf       	out	0x3e, r29	; 62
    6d18:	0f be       	out	0x3f, r0	; 63
    6d1a:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6d1c:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6d20:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6d22:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6d26:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6d28:	89 81       	ldd	r24, Y+1	; 0x01
    6d2a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETRANDOMNUMBER, currentindex);
    6d2e:	6a 81       	ldd	r22, Y+2	; 0x02
    6d30:	84 e9       	ldi	r24, 0x94	; 148
    6d32:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  getRandomTask(); 
    6d36:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <getRandomTask>
    6d3a:	22 96       	adiw	r28, 0x02	; 2
    6d3c:	0f b6       	in	r0, 0x3f	; 63
    6d3e:	f8 94       	cli
    6d40:	de bf       	out	0x3e, r29	; 62
    6d42:	0f be       	out	0x3f, r0	; 63
    6d44:	cd bf       	out	0x3d, r28	; 61
    6d46:	df 91       	pop	r29
    6d48:	cf 91       	pop	r28
    6d4a:	08 95       	ret

00006d4c <setRadioFrequencyTask_Logger>:
}

//-------------------------------------------------------------------------
/**\ingroup syscall 
     Get a random number from the kernel.
*/
void getRandomNumberSyscall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getRandomNumberSyscall() {

   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_GETRANDOMNUMBER
       getRandomTask_Logger();
   #endif
   #else
       getRandomTask();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


//because this system call directly links into the radio module, therefore, we do not need to consider the problem of directly using registers. 

void setRadioFrequencyTask_Logger()
{ 
    6d4c:	cf 93       	push	r28
    6d4e:	df 93       	push	r29
    6d50:	cd b7       	in	r28, 0x3d	; 61
    6d52:	de b7       	in	r29, 0x3e	; 62
    6d54:	22 97       	sbiw	r28, 0x02	; 2
    6d56:	0f b6       	in	r0, 0x3f	; 63
    6d58:	f8 94       	cli
    6d5a:	de bf       	out	0x3e, r29	; 62
    6d5c:	0f be       	out	0x3f, r0	; 63
    6d5e:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6d60:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6d64:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6d66:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6d6a:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6d6c:	89 81       	ldd	r24, Y+1	; 0x01
    6d6e:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_SETRADIOFREQUENCY, currentindex);
    6d72:	6a 81       	ldd	r22, Y+2	; 0x02
    6d74:	85 e9       	ldi	r24, 0x95	; 149
    6d76:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
 
  #ifdef RADIO_CC2420
  setRadioFrequencyTask(); 
    6d7a:	0e 94 af 24 	call	0x495e	; 0x495e <setRadioFrequencyTask>
    6d7e:	22 96       	adiw	r28, 0x02	; 2
    6d80:	0f b6       	in	r0, 0x3f	; 63
    6d82:	f8 94       	cli
    6d84:	de bf       	out	0x3e, r29	; 62
    6d86:	0f be       	out	0x3f, r0	; 63
    6d88:	cd bf       	out	0x3d, r28	; 61
    6d8a:	df 91       	pop	r29
    6d8c:	cf 91       	pop	r28
    6d8e:	08 95       	ret

00006d90 <setRadioChannelTask_Logger>:
  #endif
}

/**\ingroup syscall 
      Set the radio frequency, stored in the registers. 
*/
//inline result_t cc2420controlm_CC2420Control_TuneManual(uint16_t DesiredFreq);
void setRadioFrequency()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void setRadioFrequency() {
	
   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_SETRADIOFREQUENCY
       setRadioFrequencyTask_Logger();
   #endif
   #else
        #ifdef RADIO_CC2420
       setRadioFrequencyTask();
	    #endif
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}




void setRadioChannelTask_Logger()
{
    6d90:	cf 93       	push	r28
    6d92:	df 93       	push	r29
    6d94:	cd b7       	in	r28, 0x3d	; 61
    6d96:	de b7       	in	r29, 0x3e	; 62
    6d98:	22 97       	sbiw	r28, 0x02	; 2
    6d9a:	0f b6       	in	r0, 0x3f	; 63
    6d9c:	f8 94       	cli
    6d9e:	de bf       	out	0x3e, r29	; 62
    6da0:	0f be       	out	0x3f, r0	; 63
    6da2:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6da4:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6da8:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6daa:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6dae:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6db0:	89 81       	ldd	r24, Y+1	; 0x01
    6db2:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_SETRADIOCHANNEL, currentindex); 
    6db6:	6a 81       	ldd	r22, Y+2	; 0x02
    6db8:	86 e9       	ldi	r24, 0x96	; 150
    6dba:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   #ifdef RADIO_CC2420
   setRadioChannelTask(); 
    6dbe:	0e 94 ca 24 	call	0x4994	; 0x4994 <setRadioChannelTask>
    6dc2:	22 96       	adiw	r28, 0x02	; 2
    6dc4:	0f b6       	in	r0, 0x3f	; 63
    6dc6:	f8 94       	cli
    6dc8:	de bf       	out	0x3e, r29	; 62
    6dca:	0f be       	out	0x3f, r0	; 63
    6dcc:	cd bf       	out	0x3d, r28	; 61
    6dce:	df 91       	pop	r29
    6dd0:	cf 91       	pop	r28
    6dd2:	08 95       	ret

00006dd4 <setRadioPowerTask_Logger>:
   #endif
}


/**\ingroup syscall 
     Set the channel, stored in the registers. 
*/
//inline result_t cc2420controlm_CC2420Control_TuneChannel(uint8_t channel); 
void setRadioChannel()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void setRadioChannel() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_SETRADIOCHANNEL
       setRadioChannelTask_Logger();
   #endif
   #else
        #ifdef RADIO_CC2420
       setRadioChannelTask();
	    #endif
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void setRadioPowerTask_Logger()
{
    6dd4:	cf 93       	push	r28
    6dd6:	df 93       	push	r29
    6dd8:	cd b7       	in	r28, 0x3d	; 61
    6dda:	de b7       	in	r29, 0x3e	; 62
    6ddc:	22 97       	sbiw	r28, 0x02	; 2
    6dde:	0f b6       	in	r0, 0x3f	; 63
    6de0:	f8 94       	cli
    6de2:	de bf       	out	0x3e, r29	; 62
    6de4:	0f be       	out	0x3f, r0	; 63
    6de6:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6de8:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6dec:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6dee:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6df2:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6df4:	89 81       	ldd	r24, Y+1	; 0x01
    6df6:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_SETRADIOPOWER, currentindex); 
    6dfa:	6a 81       	ldd	r22, Y+2	; 0x02
    6dfc:	87 e9       	ldi	r24, 0x97	; 151
    6dfe:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   #ifdef RADIO_CC2420
   setRadioPowerTask();
    6e02:	0e 94 e5 24 	call	0x49ca	; 0x49ca <setRadioPowerTask>
    6e06:	22 96       	adiw	r28, 0x02	; 2
    6e08:	0f b6       	in	r0, 0x3f	; 63
    6e0a:	f8 94       	cli
    6e0c:	de bf       	out	0x3e, r29	; 62
    6e0e:	0f be       	out	0x3f, r0	; 63
    6e10:	cd bf       	out	0x3d, r28	; 61
    6e12:	df 91       	pop	r29
    6e14:	cf 91       	pop	r28
    6e16:	08 95       	ret

00006e18 <getNodeIdTask>:
   #endif 
}



/**\ingroup syscall 
     Set the radio power, stored in the registers. 
*/
//inline result_t cc2420controlm_CC2420Control_TunePower(uint8_t powerlevel);
void setRadioPower()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void setRadioPower() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_SETRADIOPOWER
       setRadioPowerTask_Logger();
   #endif
   #else
      #ifdef RADIO_CC2420
       setRadioPowerTask();
      #endif
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void getNodeIdTask(){
    6e18:	cf 93       	push	r28
    6e1a:	df 93       	push	r29
    6e1c:	cd b7       	in	r28, 0x3d	; 61
    6e1e:	de b7       	in	r29, 0x3e	; 62
    6e20:	22 97       	sbiw	r28, 0x02	; 2
    6e22:	0f b6       	in	r0, 0x3f	; 63
    6e24:	f8 94       	cli
    6e26:	de bf       	out	0x3e, r29	; 62
    6e28:	0f be       	out	0x3f, r0	; 63
    6e2a:	cd bf       	out	0x3d, r28	; 61
  uint16_t nodeid; 
  
  nodeid = node_readnodeid();
    6e2c:	0e 94 73 86 	call	0x10ce6	; 0x10ce6 <node_readnodeid>
    6e30:	9a 83       	std	Y+2, r25	; 0x02
    6e32:	89 83       	std	Y+1, r24	; 0x01
  asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( nodeid ) ); 
    6e34:	89 81       	ldd	r24, Y+1	; 0x01
    6e36:	9a 81       	ldd	r25, Y+2	; 0x02
    6e38:	48 2f       	mov	r20, r24
    6e3a:	59 2f       	mov	r21, r25
    6e3c:	22 96       	adiw	r28, 0x02	; 2
    6e3e:	0f b6       	in	r0, 0x3f	; 63
    6e40:	f8 94       	cli
    6e42:	de bf       	out	0x3e, r29	; 62
    6e44:	0f be       	out	0x3f, r0	; 63
    6e46:	cd bf       	out	0x3d, r28	; 61
    6e48:	df 91       	pop	r29
    6e4a:	cf 91       	pop	r28
    6e4c:	08 95       	ret

00006e4e <getNodeIdTask_Logger>:


}
void getNodeIdTask_Logger()
{
    6e4e:	cf 93       	push	r28
    6e50:	df 93       	push	r29
    6e52:	cd b7       	in	r28, 0x3d	; 61
    6e54:	de b7       	in	r29, 0x3e	; 62
    6e56:	22 97       	sbiw	r28, 0x02	; 2
    6e58:	0f b6       	in	r0, 0x3f	; 63
    6e5a:	f8 94       	cli
    6e5c:	de bf       	out	0x3e, r29	; 62
    6e5e:	0f be       	out	0x3f, r0	; 63
    6e60:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6e62:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6e66:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6e68:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6e6c:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6e6e:	89 81       	ldd	r24, Y+1	; 0x01
    6e70:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETNODEID, currentindex); 
    6e74:	6a 81       	ldd	r22, Y+2	; 0x02
    6e76:	88 e9       	ldi	r24, 0x98	; 152
    6e78:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   getNodeIdTask(); 
    6e7c:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <getNodeIdTask>
    6e80:	22 96       	adiw	r28, 0x02	; 2
    6e82:	0f b6       	in	r0, 0x3f	; 63
    6e84:	f8 94       	cli
    6e86:	de bf       	out	0x3e, r29	; 62
    6e88:	0f be       	out	0x3f, r0	; 63
    6e8a:	cd bf       	out	0x3d, r28	; 61
    6e8c:	df 91       	pop	r29
    6e8e:	cf 91       	pop	r28
    6e90:	08 95       	ret

00006e92 <setNodeIdTask>:
}



void getNodeID() __attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getNodeID() {
  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_GETNODEID
       getNodeIdTask_Logger();
   #endif
   #else
       getNodeIdTask();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void setNodeIdTask(){
    6e92:	cf 93       	push	r28
    6e94:	df 93       	push	r29
    6e96:	cd b7       	in	r28, 0x3d	; 61
    6e98:	de b7       	in	r29, 0x3e	; 62
    6e9a:	22 97       	sbiw	r28, 0x02	; 2
    6e9c:	0f b6       	in	r0, 0x3f	; 63
    6e9e:	f8 94       	cli
    6ea0:	de bf       	out	0x3e, r29	; 62
    6ea2:	0f be       	out	0x3f, r0	; 63
    6ea4:	cd bf       	out	0x3d, r28	; 61
	
   	  uint16_t nodeid; 	  
	  
	  asm volatile( "mov %A0, r20""\n\t""mov %B0, r21""\n\t": "=r"( nodeid ): ); 
    6ea6:	84 2f       	mov	r24, r20
    6ea8:	95 2f       	mov	r25, r21
    6eaa:	9a 83       	std	Y+2, r25	; 0x02
    6eac:	89 83       	std	Y+1, r24	; 0x01

	  
	  node_writenodeid ( nodeid ); 
    6eae:	89 81       	ldd	r24, Y+1	; 0x01
    6eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    6eb2:	0e 94 57 86 	call	0x10cae	; 0x10cae <node_writenodeid>
    6eb6:	22 96       	adiw	r28, 0x02	; 2
    6eb8:	0f b6       	in	r0, 0x3f	; 63
    6eba:	f8 94       	cli
    6ebc:	de bf       	out	0x3e, r29	; 62
    6ebe:	0f be       	out	0x3f, r0	; 63
    6ec0:	cd bf       	out	0x3d, r28	; 61
    6ec2:	df 91       	pop	r29
    6ec4:	cf 91       	pop	r28
    6ec6:	08 95       	ret

00006ec8 <setNodeIdTask_Logger>:


}

void setNodeIdTask_Logger()
{
    6ec8:	cf 93       	push	r28
    6eca:	df 93       	push	r29
    6ecc:	cd b7       	in	r28, 0x3d	; 61
    6ece:	de b7       	in	r29, 0x3e	; 62
    6ed0:	22 97       	sbiw	r28, 0x02	; 2
    6ed2:	0f b6       	in	r0, 0x3f	; 63
    6ed4:	f8 94       	cli
    6ed6:	de bf       	out	0x3e, r29	; 62
    6ed8:	0f be       	out	0x3f, r0	; 63
    6eda:	cd bf       	out	0x3d, r28	; 61
   uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6edc:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6ee0:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6ee2:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6ee6:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6ee8:	89 81       	ldd	r24, Y+1	; 0x01
    6eea:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_SETNODEID, currentindex); 
    6eee:	6a 81       	ldd	r22, Y+2	; 0x02
    6ef0:	89 e9       	ldi	r24, 0x99	; 153
    6ef2:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
   setNodeIdTask(); 
    6ef6:	0e 94 49 37 	call	0x6e92	; 0x6e92 <setNodeIdTask>
    6efa:	22 96       	adiw	r28, 0x02	; 2
    6efc:	0f b6       	in	r0, 0x3f	; 63
    6efe:	f8 94       	cli
    6f00:	de bf       	out	0x3e, r29	; 62
    6f02:	0f be       	out	0x3f, r0	; 63
    6f04:	cd bf       	out	0x3d, r28	; 61
    6f06:	df 91       	pop	r29
    6f08:	cf 91       	pop	r28
    6f0a:	08 95       	ret

00006f0c <getThreadControlBlock_avr>:
}


void setNodeID() __attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void setNodeID() {
   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_SETNODEID
       setNodeIdTask_Logger();
   #endif
   #else
       setNodeIdTask();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void getThreadControlBlock_avr()
{
    6f0c:	cf 93       	push	r28
    6f0e:	df 93       	push	r29
    6f10:	cd b7       	in	r28, 0x3d	; 61
    6f12:	de b7       	in	r29, 0x3e	; 62
    6f14:	22 97       	sbiw	r28, 0x02	; 2
    6f16:	0f b6       	in	r0, 0x3f	; 63
    6f18:	f8 94       	cli
    6f1a:	de bf       	out	0x3e, r29	; 62
    6f1c:	0f be       	out	0x3f, r0	; 63
    6f1e:	cd bf       	out	0x3d, r28	; 61
   void *addr; 
   addr = getNewThreadBlock();
    6f20:	0e 94 35 91 	call	0x1226a	; 0x1226a <getNewThreadBlock>
    6f24:	9a 83       	std	Y+2, r25	; 0x02
    6f26:	89 83       	std	Y+1, r24	; 0x01
   asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr) );
    6f28:	89 81       	ldd	r24, Y+1	; 0x01
    6f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    6f2c:	48 2f       	mov	r20, r24
    6f2e:	59 2f       	mov	r21, r25
    6f30:	22 96       	adiw	r28, 0x02	; 2
    6f32:	0f b6       	in	r0, 0x3f	; 63
    6f34:	f8 94       	cli
    6f36:	de bf       	out	0x3e, r29	; 62
    6f38:	0f be       	out	0x3f, r0	; 63
    6f3a:	cd bf       	out	0x3d, r28	; 61
    6f3c:	df 91       	pop	r29
    6f3e:	cf 91       	pop	r28
    6f40:	08 95       	ret

00006f42 <getThreadControlBlockAddress_Logger>:

}

void getThreadControlBlockAddress_Logger()
{
    6f42:	cf 93       	push	r28
    6f44:	df 93       	push	r29
    6f46:	cd b7       	in	r28, 0x3d	; 61
    6f48:	de b7       	in	r29, 0x3e	; 62
    6f4a:	22 97       	sbiw	r28, 0x02	; 2
    6f4c:	0f b6       	in	r0, 0x3f	; 63
    6f4e:	f8 94       	cli
    6f50:	de bf       	out	0x3e, r29	; 62
    6f52:	0f be       	out	0x3f, r0	; 63
    6f54:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6f56:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6f5a:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6f5c:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6f60:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6f62:	89 81       	ldd	r24, Y+1	; 0x01
    6f64:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETTHREADCONTROLBLOCK, currentindex); 
    6f68:	6a 81       	ldd	r22, Y+2	; 0x02
    6f6a:	8a e9       	ldi	r24, 0x9A	; 154
    6f6c:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  getThreadControlBlock_avr(); 
    6f70:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <getThreadControlBlock_avr>
    6f74:	22 96       	adiw	r28, 0x02	; 2
    6f76:	0f b6       	in	r0, 0x3f	; 63
    6f78:	f8 94       	cli
    6f7a:	de bf       	out	0x3e, r29	; 62
    6f7c:	0f be       	out	0x3f, r0	; 63
    6f7e:	cd bf       	out	0x3d, r28	; 61
    6f80:	df 91       	pop	r29
    6f82:	cf 91       	pop	r28
    6f84:	08 95       	ret

00006f86 <getThreadControlMutex_avr>:
}


/**\ingroup syscall 
*/
void getThreadControlBlockAddress()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getThreadControlBlockAddress() {

  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_GETTHREADCONTROLBLOCK
		getThreadControlBlockAddress_Logger(); 
   #endif
   #else
		getThreadControlBlock_avr();
  #endif

   
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


void getThreadControlMutex_avr()
{
    6f86:	cf 93       	push	r28
    6f88:	df 93       	push	r29
    6f8a:	cd b7       	in	r28, 0x3d	; 61
    6f8c:	de b7       	in	r29, 0x3e	; 62
    6f8e:	22 97       	sbiw	r28, 0x02	; 2
    6f90:	0f b6       	in	r0, 0x3f	; 63
    6f92:	f8 94       	cli
    6f94:	de bf       	out	0x3e, r29	; 62
    6f96:	0f be       	out	0x3f, r0	; 63
    6f98:	cd bf       	out	0x3d, r28	; 61
   void *addr; 
   addr = getCreateThreadMutex();
    6f9a:	0e 94 3e 91 	call	0x1227c	; 0x1227c <getCreateThreadMutex>
    6f9e:	9a 83       	std	Y+2, r25	; 0x02
    6fa0:	89 83       	std	Y+1, r24	; 0x01
   asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr) );
    6fa2:	89 81       	ldd	r24, Y+1	; 0x01
    6fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    6fa6:	48 2f       	mov	r20, r24
    6fa8:	59 2f       	mov	r21, r25
    6faa:	22 96       	adiw	r28, 0x02	; 2
    6fac:	0f b6       	in	r0, 0x3f	; 63
    6fae:	f8 94       	cli
    6fb0:	de bf       	out	0x3e, r29	; 62
    6fb2:	0f be       	out	0x3f, r0	; 63
    6fb4:	cd bf       	out	0x3d, r28	; 61
    6fb6:	df 91       	pop	r29
    6fb8:	cf 91       	pop	r28
    6fba:	08 95       	ret

00006fbc <getThreadControlBlockMutex_Logger>:

}

void getThreadControlBlockMutex_Logger()
{
    6fbc:	cf 93       	push	r28
    6fbe:	df 93       	push	r29
    6fc0:	cd b7       	in	r28, 0x3d	; 61
    6fc2:	de b7       	in	r29, 0x3e	; 62
    6fc4:	22 97       	sbiw	r28, 0x02	; 2
    6fc6:	0f b6       	in	r0, 0x3f	; 63
    6fc8:	f8 94       	cli
    6fca:	de bf       	out	0x3e, r29	; 62
    6fcc:	0f be       	out	0x3f, r0	; 63
    6fce:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    6fd0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    6fd4:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    6fd6:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    6fda:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    6fdc:	89 81       	ldd	r24, Y+1	; 0x01
    6fde:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_GETTHREADCONTROLBLOCK, currentindex); 
    6fe2:	6a 81       	ldd	r22, Y+2	; 0x02
    6fe4:	8a e9       	ldi	r24, 0x9A	; 154
    6fe6:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  getThreadControlMutex_avr(); 
    6fea:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <getThreadControlMutex_avr>
    6fee:	22 96       	adiw	r28, 0x02	; 2
    6ff0:	0f b6       	in	r0, 0x3f	; 63
    6ff2:	f8 94       	cli
    6ff4:	de bf       	out	0x3e, r29	; 62
    6ff6:	0f be       	out	0x3f, r0	; 63
    6ff8:	cd bf       	out	0x3d, r28	; 61
    6ffa:	df 91       	pop	r29
    6ffc:	cf 91       	pop	r28
    6ffe:	08 95       	ret

00007000 <createThreadSyscallTask_Logger>:
}


/**\ingroup syscall 
*/
void getThreadControlBlockMutex()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getThreadControlBlockMutex() {

  #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef  TRACE_ENABLE_SYSCALL_GETTHREADCONTROLMUTEX
		getThreadControlBlockMutex_Logger(); 
   #endif
   #else
		getThreadControlMutex_avr();
  #endif

   
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}





void createThreadSyscallTask_Logger()
{ 
    7000:	cf 93       	push	r28
    7002:	df 93       	push	r29
    7004:	cd b7       	in	r28, 0x3d	; 61
    7006:	de b7       	in	r29, 0x3e	; 62
    7008:	22 97       	sbiw	r28, 0x02	; 2
    700a:	0f b6       	in	r0, 0x3f	; 63
    700c:	f8 94       	cli
    700e:	de bf       	out	0x3e, r29	; 62
    7010:	0f be       	out	0x3f, r0	; 63
    7012:	cd bf       	out	0x3d, r28	; 61
  uint8_t currentindex; 
 _atomic_t _atomic = _atomic_start();
    7014:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    7018:	89 83       	std	Y+1, r24	; 0x01
 currentindex = getThreadIndexAddress();
    701a:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    701e:	8a 83       	std	Y+2, r24	; 0x02
 _atomic_end(_atomic); 
    7020:	89 81       	ldd	r24, Y+1	; 0x01
    7022:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
 addTrace(TRACE_SYSCALL_CREATETHREAD, currentindex);
    7026:	6a 81       	ldd	r22, Y+2	; 0x02
    7028:	8c e9       	ldi	r24, 0x9C	; 156
    702a:	0e 94 ac 9c 	call	0x13958	; 0x13958 <addTrace>
  createThreadTask(); 
    702e:	0e 94 7b 91 	call	0x122f6	; 0x122f6 <createThreadTask>
    7032:	22 96       	adiw	r28, 0x02	; 2
    7034:	0f b6       	in	r0, 0x3f	; 63
    7036:	f8 94       	cli
    7038:	de bf       	out	0x3e, r29	; 62
    703a:	0f be       	out	0x3f, r0	; 63
    703c:	cd bf       	out	0x3d, r28	; 61
    703e:	df 91       	pop	r29
    7040:	cf 91       	pop	r28
    7042:	08 95       	ret

00007044 <getInternalTracingBlockAddress>:
}

/**\ingroup syscall 
      Set the radio frequency, stored in the registers. 
*/
//inline result_t cc2420controlm_CC2420Control_TuneManual(uint16_t DesiredFreq);
void createThreadSyscall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void createThreadSyscall() {
	
   #ifdef TRACE_ENABLE_SYSCALLEVENT
   #ifdef TRACE_ENABLE_SYSCALL_CREATETHREAD
       createThreadSyscallTask_Logger();
   #endif
   #else
       createThreadTask();
   #endif
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void getInternalTracingBlockAddress()
{
    7044:	cf 93       	push	r28
    7046:	df 93       	push	r29
    7048:	cd b7       	in	r28, 0x3d	; 61
    704a:	de b7       	in	r29, 0x3e	; 62
    704c:	22 97       	sbiw	r28, 0x02	; 2
    704e:	0f b6       	in	r0, 0x3f	; 63
    7050:	f8 94       	cli
    7052:	de bf       	out	0x3e, r29	; 62
    7054:	0f be       	out	0x3f, r0	; 63
    7056:	cd bf       	out	0x3d, r28	; 61
   void *addr; 
   addr = getTracingBlockAddress();
    7058:	0e 94 e9 9c 	call	0x139d2	; 0x139d2 <getTracingBlockAddress>
    705c:	9a 83       	std	Y+2, r25	; 0x02
    705e:	89 83       	std	Y+1, r24	; 0x01
   asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr) );
    7060:	89 81       	ldd	r24, Y+1	; 0x01
    7062:	9a 81       	ldd	r25, Y+2	; 0x02
    7064:	48 2f       	mov	r20, r24
    7066:	59 2f       	mov	r21, r25
    7068:	22 96       	adiw	r28, 0x02	; 2
    706a:	0f b6       	in	r0, 0x3f	; 63
    706c:	f8 94       	cli
    706e:	de bf       	out	0x3e, r29	; 62
    7070:	0f be       	out	0x3f, r0	; 63
    7072:	cd bf       	out	0x3d, r28	; 61
    7074:	df 91       	pop	r29
    7076:	cf 91       	pop	r28
    7078:	08 95       	ret

0000707a <insertTracePoint>:

}

/**\ingroup syscall 
*/
void getInternalTracingBlockAddressSyscall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getInternalTracingBlockAddressSyscall() {

 		getInternalTracingBlockAddress(); 
    asm volatile( "nop":: );
    asm volatile( "ret":: );
}





/**\ingroup syscall 
*/
void enableTracingSyscall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void enableTracingSyscall() {

 		enabletracingfunction(); 
    asm volatile( "nop":: );
    asm volatile( "ret":: );
}





/**\ingroup syscall 
*/
void disableTracingSyscall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void disableTracingSyscall() {

 		disabletracingfunction(); 
    asm volatile( "nop":: );
    asm volatile( "ret":: );
}





/**\ingroup syscall 
     Posttask here for backward compatibility
     Bug to be fixed here. 
*/
void postTaskSysCallWithoutAnyLogging()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void postTaskSysCallWithoutAnyLogging() {
 
    postNewTask_avr(); 

   asm volatile( "nop":: );
   asm volatile( "ret":: );
}




/**\ingroup syscall 
     Trigger the thread scheduling task. 
*/
void postThreadTaskNoLogging()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void postThreadTaskNoLogging() {
  

     postNewThreadTask(); 

   asm volatile( "nop":: );
   asm volatile( "ret":: );
}


/**\ingroup syscall 
*
*/

void jumpToTracePointSyscall()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void jumpToTracePointSyscall() {

 	  apptracepointfunction(); 
    asm volatile( "nop":: );
    asm volatile( "ret":: );
}



void insertTracePoint()
{
    707a:	cf 93       	push	r28
    707c:	df 93       	push	r29
    707e:	cd b7       	in	r28, 0x3d	; 61
    7080:	de b7       	in	r29, 0x3e	; 62
    7082:	24 97       	sbiw	r28, 0x04	; 4
    7084:	0f b6       	in	r0, 0x3f	; 63
    7086:	f8 94       	cli
    7088:	de bf       	out	0x3e, r29	; 62
    708a:	0f be       	out	0x3f, r0	; 63
    708c:	cd bf       	out	0x3d, r28	; 61

  uint16_t pagenum; 
  uint16_t pageoffset;  
  
  asm volatile( "mov %A0, r20""\n\t""mov %B0, r21""\n\t": "=r"( pagenum ):  );
    708e:	84 2f       	mov	r24, r20
    7090:	95 2f       	mov	r25, r21
    7092:	9c 83       	std	Y+4, r25	; 0x04
    7094:	8b 83       	std	Y+3, r24	; 0x03
  asm volatile( "mov %A0, r22""\n\t""mov %B0, r23""\n\t": "=r"( pageoffset ):  );  
    7096:	86 2f       	mov	r24, r22
    7098:	97 2f       	mov	r25, r23
    709a:	9a 83       	std	Y+2, r25	; 0x02
    709c:	89 83       	std	Y+1, r24	; 0x01
  
  boot_insertTracePoint( pagenum, (uint8_t)pageoffset); 
    709e:	29 81       	ldd	r18, Y+1	; 0x01
    70a0:	8b 81       	ldd	r24, Y+3	; 0x03
    70a2:	9c 81       	ldd	r25, Y+4	; 0x04
    70a4:	62 2f       	mov	r22, r18
    70a6:	0e 94 5a f2 	call	0x1e4b4	; 0x1e4b4 <boot_insertTracePoint>
    70aa:	24 96       	adiw	r28, 0x04	; 4
    70ac:	0f b6       	in	r0, 0x3f	; 63
    70ae:	f8 94       	cli
    70b0:	de bf       	out	0x3e, r29	; 62
    70b2:	0f be       	out	0x3f, r0	; 63
    70b4:	cd bf       	out	0x3d, r28	; 61
    70b6:	df 91       	pop	r29
    70b8:	cf 91       	pop	r28
    70ba:	08 95       	ret

000070bc <insertTracePointLong>:
  

}




/**\ingroup syscall 
*
*/

void insertTracePointToUser()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void insertTracePointToUser() {

 	insertTracePoint(); 
    asm volatile( "nop":: );
    asm volatile( "ret":: );
}




void insertTracePointLong()
{
    70bc:	cf 93       	push	r28
    70be:	df 93       	push	r29
    70c0:	cd b7       	in	r28, 0x3d	; 61
    70c2:	de b7       	in	r29, 0x3e	; 62
    70c4:	24 97       	sbiw	r28, 0x04	; 4
    70c6:	0f b6       	in	r0, 0x3f	; 63
    70c8:	f8 94       	cli
    70ca:	de bf       	out	0x3e, r29	; 62
    70cc:	0f be       	out	0x3f, r0	; 63
    70ce:	cd bf       	out	0x3d, r28	; 61

  uint16_t pagenum; 
  uint16_t pageoffset;  
  
  asm volatile( "mov %A0, r20""\n\t""mov %B0, r21""\n\t": "=r"( pagenum ):  );
    70d0:	84 2f       	mov	r24, r20
    70d2:	95 2f       	mov	r25, r21
    70d4:	9c 83       	std	Y+4, r25	; 0x04
    70d6:	8b 83       	std	Y+3, r24	; 0x03
  asm volatile( "mov %A0, r22""\n\t""mov %B0, r23""\n\t": "=r"( pageoffset ):  );  
    70d8:	86 2f       	mov	r24, r22
    70da:	97 2f       	mov	r25, r23
    70dc:	9a 83       	std	Y+2, r25	; 0x02
    70de:	89 83       	std	Y+1, r24	; 0x01
  
  boot_insertTracePointLong( pagenum, (uint8_t)pageoffset); 
    70e0:	29 81       	ldd	r18, Y+1	; 0x01
    70e2:	8b 81       	ldd	r24, Y+3	; 0x03
    70e4:	9c 81       	ldd	r25, Y+4	; 0x04
    70e6:	62 2f       	mov	r22, r18
    70e8:	0e 94 c5 f3 	call	0x1e78a	; 0x1e78a <boot_insertTracePointLong>
    70ec:	24 96       	adiw	r28, 0x04	; 4
    70ee:	0f b6       	in	r0, 0x3f	; 63
    70f0:	f8 94       	cli
    70f2:	de bf       	out	0x3e, r29	; 62
    70f4:	0f be       	out	0x3f, r0	; 63
    70f6:	cd bf       	out	0x3d, r28	; 61
    70f8:	df 91       	pop	r29
    70fa:	cf 91       	pop	r28
    70fc:	08 95       	ret

000070fe <terminateThreadFunctionAvr>:
  

}




/**\ingroup syscall 
*
*/

void insertTracePointToUserLong()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void insertTracePointToUserLong() {

 	insertTracePointLong(); 
    asm volatile( "nop":: );
    asm volatile( "ret":: );
}


void terminateThreadFunctionAvr() {
    70fe:	cf 93       	push	r28
    7100:	df 93       	push	r29
    7102:	cd b7       	in	r28, 0x3d	; 61
    7104:	de b7       	in	r29, 0x3e	; 62
    7106:	23 97       	sbiw	r28, 0x03	; 3
    7108:	0f b6       	in	r0, 0x3f	; 63
    710a:	f8 94       	cli
    710c:	de bf       	out	0x3e, r29	; 62
    710e:	0f be       	out	0x3f, r0	; 63
    7110:	cd bf       	out	0x3d, r28	; 61

  void (*fp)(void);
  uint8_t currentthreadindex; 
  asm volatile( "mov %A0, r20""\n\t""mov %B0, r21""\n\t": "=r"( fp):  );
    7112:	84 2f       	mov	r24, r20
    7114:	95 2f       	mov	r25, r21
    7116:	9b 83       	std	Y+3, r25	; 0x03
    7118:	8a 83       	std	Y+2, r24	; 0x02
  currentthreadindex = getThreadIndexAddress();
    711a:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    711e:	89 83       	std	Y+1, r24	; 0x01
  setThreadTerminateFunction(currentthreadindex, fp); 
    7120:	8a 81       	ldd	r24, Y+2	; 0x02
    7122:	9b 81       	ldd	r25, Y+3	; 0x03
    7124:	bc 01       	movw	r22, r24
    7126:	89 81       	ldd	r24, Y+1	; 0x01
    7128:	0e 94 c4 92 	call	0x12588	; 0x12588 <setThreadTerminateFunction>
    712c:	23 96       	adiw	r28, 0x03	; 3
    712e:	0f b6       	in	r0, 0x3f	; 63
    7130:	f8 94       	cli
    7132:	de bf       	out	0x3e, r29	; 62
    7134:	0f be       	out	0x3f, r0	; 63
    7136:	cd bf       	out	0x3d, r28	; 61
    7138:	df 91       	pop	r29
    713a:	cf 91       	pop	r28
    713c:	08 95       	ret

0000713e <setupTimerTask>:
  

}



/**\ingroup syscall 
    This system call allows the user thread to define a clean-up function that releases the resources currently allocated by the user thread function
*/

void terminateThreadFunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void terminateThreadFunction() {
 
   terminateThreadFunctionAvr(); 

   asm volatile( "nop":: );
   asm volatile( "ret":: );
}




void setupTimerTask() {
    713e:	cf 93       	push	r28
    7140:	df 93       	push	r29
    7142:	cd b7       	in	r28, 0x3d	; 61
    7144:	de b7       	in	r29, 0x3e	; 62
    7146:	27 97       	sbiw	r28, 0x07	; 7
    7148:	0f b6       	in	r0, 0x3f	; 63
    714a:	f8 94       	cli
    714c:	de bf       	out	0x3e, r29	; 62
    714e:	0f be       	out	0x3f, r0	; 63
    7150:	cd bf       	out	0x3d, r28	; 61

  void (*fp)(void);
  uint8_t currentthreadindex; 
  uint16_t period;
  uint16_t type;
 
  asm volatile( "mov %A0, r18""\n\t""mov %B0, r19""\n\t": "=r"( period):  );
    7152:	82 2f       	mov	r24, r18
    7154:	93 2f       	mov	r25, r19
    7156:	9c 83       	std	Y+4, r25	; 0x04
    7158:	8b 83       	std	Y+3, r24	; 0x03
  asm volatile( "mov %A0, r20""\n\t""mov %B0, r21""\n\t": "=r"( type):  );
    715a:	84 2f       	mov	r24, r20
    715c:	95 2f       	mov	r25, r21
    715e:	9a 83       	std	Y+2, r25	; 0x02
    7160:	89 83       	std	Y+1, r24	; 0x01
  asm volatile( "mov %A0, r22""\n\t""mov %B0, r23""\n\t": "=r"( fp):  );
    7162:	86 2f       	mov	r24, r22
    7164:	97 2f       	mov	r25, r23
    7166:	9f 83       	std	Y+7, r25	; 0x07
    7168:	8e 83       	std	Y+6, r24	; 0x06

  currentthreadindex = getThreadIndexAddress();
    716a:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
    716e:	8d 83       	std	Y+5, r24	; 0x05
  setTimerCallBackFunction(currentthreadindex, period, type, fp);
    7170:	8e 81       	ldd	r24, Y+6	; 0x06
    7172:	9f 81       	ldd	r25, Y+7	; 0x07
    7174:	49 81       	ldd	r20, Y+1	; 0x01
    7176:	5a 81       	ldd	r21, Y+2	; 0x02
    7178:	6b 81       	ldd	r22, Y+3	; 0x03
    717a:	7c 81       	ldd	r23, Y+4	; 0x04
    717c:	9c 01       	movw	r18, r24
    717e:	8d 81       	ldd	r24, Y+5	; 0x05
    7180:	0e 94 46 85 	call	0x10a8c	; 0x10a8c <setTimerCallBackFunction>
    7184:	27 96       	adiw	r28, 0x07	; 7
    7186:	0f b6       	in	r0, 0x3f	; 63
    7188:	f8 94       	cli
    718a:	de bf       	out	0x3e, r29	; 62
    718c:	0f be       	out	0x3f, r0	; 63
    718e:	cd bf       	out	0x3d, r28	; 61
    7190:	df 91       	pop	r29
    7192:	cf 91       	pop	r28
    7194:	08 95       	ret

00007196 <getStackPtrTask>:
  
   
  

}



/**\ingroup syscall 
    This system call allows the user thread to define a clean-up function that releases the resources currently allocated by the user thread function
*/

void setTimerFunction()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void setTimerFunction() {
 
   setupTimerTask(); 

   asm volatile( "nop":: );
   asm volatile( "ret":: );
}



void getStackPtrTask(){ 
    7196:	cf 93       	push	r28
    7198:	df 93       	push	r29
    719a:	cd b7       	in	r28, 0x3d	; 61
    719c:	de b7       	in	r29, 0x3e	; 62
    719e:	22 97       	sbiw	r28, 0x02	; 2
    71a0:	0f b6       	in	r0, 0x3f	; 63
    71a2:	f8 94       	cli
    71a4:	de bf       	out	0x3e, r29	; 62
    71a6:	0f be       	out	0x3f, r0	; 63
    71a8:	cd bf       	out	0x3d, r28	; 61

void **returnthreadaddr; 
  returnthreadaddr = getKernelStackAddress(); 
    71aa:	0e 94 fa 97 	call	0x12ff4	; 0x12ff4 <getKernelStackAddress>
    71ae:	9a 83       	std	Y+2, r25	; 0x02
    71b0:	89 83       	std	Y+1, r24	; 0x01
  asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( returnthreadaddr ) );
    71b2:	89 81       	ldd	r24, Y+1	; 0x01
    71b4:	9a 81       	ldd	r25, Y+2	; 0x02
    71b6:	48 2f       	mov	r20, r24
    71b8:	59 2f       	mov	r21, r25
    71ba:	22 96       	adiw	r28, 0x02	; 2
    71bc:	0f b6       	in	r0, 0x3f	; 63
    71be:	f8 94       	cli
    71c0:	de bf       	out	0x3e, r29	; 62
    71c2:	0f be       	out	0x3f, r0	; 63
    71c4:	cd bf       	out	0x3d, r28	; 61
    71c6:	df 91       	pop	r29
    71c8:	cf 91       	pop	r28
    71ca:	08 95       	ret

000071cc <removeTracePointTask>:

}

//Get the address of the kernel stack 

void getStackPtr()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void getStackPtr()
{
  getStackPtrTask();
  asm volatile( "nop":: );
   asm volatile( "ret":: );

}






//Get the address of the kernel stack 
void removeTracePointTask(){
    71cc:	cf 93       	push	r28
    71ce:	df 93       	push	r29
    71d0:	cd b7       	in	r28, 0x3d	; 61
    71d2:	de b7       	in	r29, 0x3e	; 62
    71d4:	26 97       	sbiw	r28, 0x06	; 6
    71d6:	0f b6       	in	r0, 0x3f	; 63
    71d8:	f8 94       	cli
    71da:	de bf       	out	0x3e, r29	; 62
    71dc:	0f be       	out	0x3f, r0	; 63
    71de:	cd bf       	out	0x3d, r28	; 61

  uint16_t pagenum; 
  uint16_t pageoffset; 
  uint8_t *buffer;  
  
  asm volatile( "mov %A0, r20""\n\t""mov %B0, r21""\n\t": "=r"( pagenum ):  );
    71e0:	84 2f       	mov	r24, r20
    71e2:	95 2f       	mov	r25, r21
    71e4:	9e 83       	std	Y+6, r25	; 0x06
    71e6:	8d 83       	std	Y+5, r24	; 0x05
  asm volatile( "mov %A0, r22""\n\t""mov %B0, r23""\n\t": "=r"( pageoffset ):  );  
    71e8:	86 2f       	mov	r24, r22
    71ea:	97 2f       	mov	r25, r23
    71ec:	9c 83       	std	Y+4, r25	; 0x04
    71ee:	8b 83       	std	Y+3, r24	; 0x03
  asm volatile( "mov %A0, r18""\n\t""mov %B0, r19""\n\t": "=r"( buffer ):  ); 
    71f0:	82 2f       	mov	r24, r18
    71f2:	93 2f       	mov	r25, r19
    71f4:	9a 83       	std	Y+2, r25	; 0x02
    71f6:	89 83       	std	Y+1, r24	; 0x01
 

 SWAP_STACK_PTR(syscallptr, old_stack_ptr);  
    71f8:	8d b7       	in	r24, 0x3d	; 61
    71fa:	9e b7       	in	r25, 0x3e	; 62
    71fc:	90 93 f7 04 	sts	0x04F7, r25
    7200:	80 93 f6 04 	sts	0x04F6, r24
    7204:	80 91 cf 08 	lds	r24, 0x08CF
    7208:	90 91 d0 08 	lds	r25, 0x08D0
    720c:	9e bf       	out	0x3e, r25	; 62
    720e:	8d bf       	out	0x3d, r24	; 61

  boot_removeTracePoint( pagenum, (uint8_t)pageoffset, buffer); 
    7210:	6b 81       	ldd	r22, Y+3	; 0x03
    7212:	89 81       	ldd	r24, Y+1	; 0x01
    7214:	9a 81       	ldd	r25, Y+2	; 0x02
    7216:	2d 81       	ldd	r18, Y+5	; 0x05
    7218:	3e 81       	ldd	r19, Y+6	; 0x06
    721a:	ac 01       	movw	r20, r24
    721c:	c9 01       	movw	r24, r18
    721e:	0e 94 88 f6 	call	0x1ed10	; 0x1ed10 <boot_removeTracePoint>

 SWAP_STACK_PTR( old_stack_ptr , syscallptr);  
    7222:	8d b7       	in	r24, 0x3d	; 61
    7224:	9e b7       	in	r25, 0x3e	; 62
    7226:	90 93 d0 08 	sts	0x08D0, r25
    722a:	80 93 cf 08 	sts	0x08CF, r24
    722e:	80 91 f6 04 	lds	r24, 0x04F6
    7232:	90 91 f7 04 	lds	r25, 0x04F7
    7236:	9e bf       	out	0x3e, r25	; 62
    7238:	8d bf       	out	0x3d, r24	; 61
    723a:	26 96       	adiw	r28, 0x06	; 6
    723c:	0f b6       	in	r0, 0x3f	; 63
    723e:	f8 94       	cli
    7240:	de bf       	out	0x3e, r29	; 62
    7242:	0f be       	out	0x3f, r0	; 63
    7244:	cd bf       	out	0x3d, r28	; 61
    7246:	df 91       	pop	r29
    7248:	cf 91       	pop	r28
    724a:	08 95       	ret

0000724c <removeTracePointLongTask>:

}



void removeTracePoint()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void removeTracePoint()
{
   removeTracePointTask();
   asm volatile( "nop":: );
   asm volatile( "ret":: );
}

//Get the address of the kernel stack 


void removeTracePointLongTask()
{
    724c:	cf 93       	push	r28
    724e:	df 93       	push	r29
    7250:	cd b7       	in	r28, 0x3d	; 61
    7252:	de b7       	in	r29, 0x3e	; 62
    7254:	26 97       	sbiw	r28, 0x06	; 6
    7256:	0f b6       	in	r0, 0x3f	; 63
    7258:	f8 94       	cli
    725a:	de bf       	out	0x3e, r29	; 62
    725c:	0f be       	out	0x3f, r0	; 63
    725e:	cd bf       	out	0x3d, r28	; 61
  uint16_t pagenum; 
  uint16_t pageoffset; 
  uint8_t *buffer;  
  
  asm volatile( "mov %A0, r20""\n\t""mov %B0, r21""\n\t": "=r"( pagenum ):  );
    7260:	84 2f       	mov	r24, r20
    7262:	95 2f       	mov	r25, r21
    7264:	9e 83       	std	Y+6, r25	; 0x06
    7266:	8d 83       	std	Y+5, r24	; 0x05
  asm volatile( "mov %A0, r22""\n\t""mov %B0, r23""\n\t": "=r"( pageoffset ):  );  
    7268:	86 2f       	mov	r24, r22
    726a:	97 2f       	mov	r25, r23
    726c:	9c 83       	std	Y+4, r25	; 0x04
    726e:	8b 83       	std	Y+3, r24	; 0x03
  asm volatile( "mov %A0, r18""\n\t""mov %B0, r19""\n\t": "=r"( buffer ):  ); 
    7270:	82 2f       	mov	r24, r18
    7272:	93 2f       	mov	r25, r19
    7274:	9a 83       	std	Y+2, r25	; 0x02
    7276:	89 83       	std	Y+1, r24	; 0x01


 SWAP_STACK_PTR(syscallptr, old_stack_ptr);  
    7278:	8d b7       	in	r24, 0x3d	; 61
    727a:	9e b7       	in	r25, 0x3e	; 62
    727c:	90 93 f7 04 	sts	0x04F7, r25
    7280:	80 93 f6 04 	sts	0x04F6, r24
    7284:	80 91 cf 08 	lds	r24, 0x08CF
    7288:	90 91 d0 08 	lds	r25, 0x08D0
    728c:	9e bf       	out	0x3e, r25	; 62
    728e:	8d bf       	out	0x3d, r24	; 61

   boot_removeTracePointLong( pagenum, (uint8_t)pageoffset, buffer); 
    7290:	6b 81       	ldd	r22, Y+3	; 0x03
    7292:	89 81       	ldd	r24, Y+1	; 0x01
    7294:	9a 81       	ldd	r25, Y+2	; 0x02
    7296:	2d 81       	ldd	r18, Y+5	; 0x05
    7298:	3e 81       	ldd	r19, Y+6	; 0x06
    729a:	ac 01       	movw	r20, r24
    729c:	c9 01       	movw	r24, r18
    729e:	0e 94 fb f7 	call	0x1eff6	; 0x1eff6 <boot_removeTracePointLong>

 SWAP_STACK_PTR( old_stack_ptr , syscallptr);  
    72a2:	8d b7       	in	r24, 0x3d	; 61
    72a4:	9e b7       	in	r25, 0x3e	; 62
    72a6:	90 93 d0 08 	sts	0x08D0, r25
    72aa:	80 93 cf 08 	sts	0x08CF, r24
    72ae:	80 91 f6 04 	lds	r24, 0x04F6
    72b2:	90 91 f7 04 	lds	r25, 0x04F7
    72b6:	9e bf       	out	0x3e, r25	; 62
    72b8:	8d bf       	out	0x3d, r24	; 61
    72ba:	26 96       	adiw	r28, 0x06	; 6
    72bc:	0f b6       	in	r0, 0x3f	; 63
    72be:	f8 94       	cli
    72c0:	de bf       	out	0x3e, r29	; 62
    72c2:	0f be       	out	0x3f, r0	; 63
    72c4:	cd bf       	out	0x3d, r28	; 61
    72c6:	df 91       	pop	r29
    72c8:	cf 91       	pop	r28
    72ca:	08 95       	ret

000072cc <TimerM_StdControl_init>:


inline  
result_t TimerM_StdControl_init(void)
{
    72cc:	cf 93       	push	r28
    72ce:	df 93       	push	r29
    72d0:	cd b7       	in	r28, 0x3d	; 61
    72d2:	de b7       	in	r29, 0x3e	; 62
  TimerM_mState = 0;
    72d4:	10 92 fb 04 	sts	0x04FB, r1
    72d8:	10 92 fc 04 	sts	0x04FC, r1
    72dc:	10 92 fd 04 	sts	0x04FD, r1
    72e0:	10 92 fe 04 	sts	0x04FE, r1
  TimerM_setIntervalFlag = 0;
    72e4:	10 92 02 05 	sts	0x0502, r1
  TimerM_queue_head = TimerM_queue_tail = -1;
    72e8:	8f ef       	ldi	r24, 0xFF	; 255
    72ea:	80 93 fa 04 	sts	0x04FA, r24
    72ee:	80 91 fa 04 	lds	r24, 0x04FA
    72f2:	80 93 15 05 	sts	0x0515, r24
  TimerM_queue_size = 0;
    72f6:	10 92 ff 04 	sts	0x04FF, r1
  TimerM_mScale = 3;
    72fa:	83 e0       	ldi	r24, 0x03	; 3
    72fc:	80 93 00 05 	sts	0x0500, r24
  TimerM_mInterval = TimerM_maxTimerInterval;
    7300:	86 ee       	ldi	r24, 0xE6	; 230
    7302:	80 93 01 05 	sts	0x0501, r24
  return TimerM_Clock_setRate(TimerM_mInterval, TimerM_mScale);
    7306:	80 91 00 05 	lds	r24, 0x0500
    730a:	98 2f       	mov	r25, r24
    730c:	80 91 01 05 	lds	r24, 0x0501
    7310:	69 2f       	mov	r22, r25
    7312:	0e 94 df 3a 	call	0x75be	; 0x75be <TimerM_Clock_setRate>
    7316:	99 27       	eor	r25, r25
    7318:	df 91       	pop	r29
    731a:	cf 91       	pop	r28
    731c:	08 95       	ret

0000731e <TimerM_Timer_stop>:
}


inline uint8_t TimerM_Timer_stop(uint8_t id)
{
    731e:	cf 93       	push	r28
    7320:	df 93       	push	r29
    7322:	cd b7       	in	r28, 0x3d	; 61
    7324:	de b7       	in	r29, 0x3e	; 62
    7326:	24 97       	sbiw	r28, 0x04	; 4
    7328:	0f b6       	in	r0, 0x3f	; 63
    732a:	f8 94       	cli
    732c:	de bf       	out	0x3e, r29	; 62
    732e:	0f be       	out	0x3f, r0	; 63
    7330:	cd bf       	out	0x3d, r28	; 61
    7332:	8a 83       	std	Y+2, r24	; 0x02
   if (id > NUM_TIMERS)
    7334:	8a 81       	ldd	r24, Y+2	; 0x02
    7336:	81 31       	cpi	r24, 0x11	; 17
    7338:	18 f0       	brcs	.+6      	; 0x7340 <TimerM_Timer_stop+0x22>
      return FAIL; 
    733a:	1c 82       	std	Y+4, r1	; 0x04
    733c:	1b 82       	std	Y+3, r1	; 0x03
    733e:	65 c0       	rjmp	.+202    	; 0x740a <TimerM_Timer_stop+0xec>
   if (TimerM_mState & (0x1L << id)) { 
    7340:	8a 81       	ldd	r24, Y+2	; 0x02
    7342:	28 2f       	mov	r18, r24
    7344:	33 27       	eor	r19, r19
    7346:	81 e0       	ldi	r24, 0x01	; 1
    7348:	90 e0       	ldi	r25, 0x00	; 0
    734a:	a0 e0       	ldi	r26, 0x00	; 0
    734c:	b0 e0       	ldi	r27, 0x00	; 0
    734e:	04 c0       	rjmp	.+8      	; 0x7358 <TimerM_Timer_stop+0x3a>
    7350:	88 0f       	add	r24, r24
    7352:	99 1f       	adc	r25, r25
    7354:	aa 1f       	adc	r26, r26
    7356:	bb 1f       	adc	r27, r27
    7358:	2a 95       	dec	r18
    735a:	d2 f7       	brpl	.-12     	; 0x7350 <TimerM_Timer_stop+0x32>
    735c:	9c 01       	movw	r18, r24
    735e:	ad 01       	movw	r20, r26
    7360:	80 91 fb 04 	lds	r24, 0x04FB
    7364:	90 91 fc 04 	lds	r25, 0x04FC
    7368:	a0 91 fd 04 	lds	r26, 0x04FD
    736c:	b0 91 fe 04 	lds	r27, 0x04FE
    7370:	82 23       	and	r24, r18
    7372:	93 23       	and	r25, r19
    7374:	a4 23       	and	r26, r20
    7376:	b5 23       	and	r27, r21
    7378:	00 97       	sbiw	r24, 0x00	; 0
    737a:	a1 05       	cpc	r26, r1
    737c:	b1 05       	cpc	r27, r1
    737e:	09 f4       	brne	.+2      	; 0x7382 <TimerM_Timer_stop+0x64>
    7380:	42 c0       	rjmp	.+132    	; 0x7406 <TimerM_Timer_stop+0xe8>
     _atomic_t _atomic = _atomic_start();
    7382:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    7386:	89 83       	std	Y+1, r24	; 0x01
	 TimerM_mState &= ~(0x1L << id);
    7388:	8a 81       	ldd	r24, Y+2	; 0x02
    738a:	28 2f       	mov	r18, r24
    738c:	33 27       	eor	r19, r19
    738e:	81 e0       	ldi	r24, 0x01	; 1
    7390:	90 e0       	ldi	r25, 0x00	; 0
    7392:	a0 e0       	ldi	r26, 0x00	; 0
    7394:	b0 e0       	ldi	r27, 0x00	; 0
    7396:	04 c0       	rjmp	.+8      	; 0x73a0 <TimerM_Timer_stop+0x82>
    7398:	88 0f       	add	r24, r24
    739a:	99 1f       	adc	r25, r25
    739c:	aa 1f       	adc	r26, r26
    739e:	bb 1f       	adc	r27, r27
    73a0:	2a 95       	dec	r18
    73a2:	d2 f7       	brpl	.-12     	; 0x7398 <TimerM_Timer_stop+0x7a>
    73a4:	80 95       	com	r24
    73a6:	90 95       	com	r25
    73a8:	a0 95       	com	r26
    73aa:	b0 95       	com	r27
    73ac:	9c 01       	movw	r18, r24
    73ae:	ad 01       	movw	r20, r26
    73b0:	80 91 fb 04 	lds	r24, 0x04FB
    73b4:	90 91 fc 04 	lds	r25, 0x04FC
    73b8:	a0 91 fd 04 	lds	r26, 0x04FD
    73bc:	b0 91 fe 04 	lds	r27, 0x04FE
    73c0:	82 23       	and	r24, r18
    73c2:	93 23       	and	r25, r19
    73c4:	a4 23       	and	r26, r20
    73c6:	b5 23       	and	r27, r21
    73c8:	80 93 fb 04 	sts	0x04FB, r24
    73cc:	90 93 fc 04 	sts	0x04FC, r25
    73d0:	a0 93 fd 04 	sts	0x04FD, r26
    73d4:	b0 93 fe 04 	sts	0x04FE, r27
	 _atomic_end(_atomic); 
    73d8:	89 81       	ldd	r24, Y+1	; 0x01
    73da:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>

	 if (!TimerM_mState){
    73de:	80 91 fb 04 	lds	r24, 0x04FB
    73e2:	90 91 fc 04 	lds	r25, 0x04FC
    73e6:	a0 91 fd 04 	lds	r26, 0x04FD
    73ea:	b0 91 fe 04 	lds	r27, 0x04FE
    73ee:	00 97       	sbiw	r24, 0x00	; 0
    73f0:	a1 05       	cpc	r26, r1
    73f2:	b1 05       	cpc	r27, r1
    73f4:	19 f4       	brne	.+6      	; 0x73fc <TimerM_Timer_stop+0xde>
	   TimerM_setIntervalFlag = 1; 
    73f6:	81 e0       	ldi	r24, 0x01	; 1
    73f8:	80 93 02 05 	sts	0x0502, r24
	  }
	  return SUCCESS;
    73fc:	81 e0       	ldi	r24, 0x01	; 1
    73fe:	90 e0       	ldi	r25, 0x00	; 0
    7400:	9c 83       	std	Y+4, r25	; 0x04
    7402:	8b 83       	std	Y+3, r24	; 0x03
    7404:	02 c0       	rjmp	.+4      	; 0x740a <TimerM_Timer_stop+0xec>
  }
  return FAIL;      
    7406:	1c 82       	std	Y+4, r1	; 0x04
    7408:	1b 82       	std	Y+3, r1	; 0x03
    740a:	8b 81       	ldd	r24, Y+3	; 0x03
    740c:	9c 81       	ldd	r25, Y+4	; 0x04
    740e:	24 96       	adiw	r28, 0x04	; 4
    7410:	0f b6       	in	r0, 0x3f	; 63
    7412:	f8 94       	cli
    7414:	de bf       	out	0x3e, r29	; 62
    7416:	0f be       	out	0x3f, r0	; 63
    7418:	cd bf       	out	0x3d, r28	; 61
    741a:	df 91       	pop	r29
    741c:	cf 91       	pop	r28
    741e:	08 95       	ret

00007420 <TimerM_Timer_start>:
      

}



inline  
result_t TimerM_Timer_start(uint8_t id, char type, 
uint32_t interval)
{
    7420:	cf 93       	push	r28
    7422:	df 93       	push	r29
    7424:	cd b7       	in	r28, 0x3d	; 61
    7426:	de b7       	in	r29, 0x3e	; 62
    7428:	2a 97       	sbiw	r28, 0x0a	; 10
    742a:	0f b6       	in	r0, 0x3f	; 63
    742c:	f8 94       	cli
    742e:	de bf       	out	0x3e, r29	; 62
    7430:	0f be       	out	0x3f, r0	; 63
    7432:	cd bf       	out	0x3d, r28	; 61
    7434:	8b 83       	std	Y+3, r24	; 0x03
    7436:	6c 83       	std	Y+4, r22	; 0x04
    7438:	2d 83       	std	Y+5, r18	; 0x05
    743a:	3e 83       	std	Y+6, r19	; 0x06
    743c:	4f 83       	std	Y+7, r20	; 0x07
    743e:	58 87       	std	Y+8, r21	; 0x08
  uint8_t diff;

  if (id >= NUM_TIMERS) {
    7440:	8b 81       	ldd	r24, Y+3	; 0x03
    7442:	80 31       	cpi	r24, 0x10	; 16
    7444:	18 f0       	brcs	.+6      	; 0x744c <TimerM_Timer_start+0x2c>
    return FAIL;
    7446:	1a 86       	std	Y+10, r1	; 0x0a
    7448:	19 86       	std	Y+9, r1	; 0x09
    744a:	ae c0       	rjmp	.+348    	; 0x75a8 <TimerM_Timer_start+0x188>
    }
  if (type > TIMER_ONE_SHOT) {
    744c:	8c 81       	ldd	r24, Y+4	; 0x04
    744e:	82 30       	cpi	r24, 0x02	; 2
    7450:	1c f0       	brlt	.+6      	; 0x7458 <TimerM_Timer_start+0x38>
    return FAIL;
    7452:	1a 86       	std	Y+10, r1	; 0x0a
    7454:	19 86       	std	Y+9, r1	; 0x09
    7456:	a8 c0       	rjmp	.+336    	; 0x75a8 <TimerM_Timer_start+0x188>
    }

  if (type == TIMER_REPEAT && interval <= 2) {
    7458:	8c 81       	ldd	r24, Y+4	; 0x04
    745a:	88 23       	and	r24, r24
    745c:	61 f4       	brne	.+24     	; 0x7476 <TimerM_Timer_start+0x56>
    745e:	8d 81       	ldd	r24, Y+5	; 0x05
    7460:	9e 81       	ldd	r25, Y+6	; 0x06
    7462:	af 81       	ldd	r26, Y+7	; 0x07
    7464:	b8 85       	ldd	r27, Y+8	; 0x08
    7466:	83 30       	cpi	r24, 0x03	; 3
    7468:	91 05       	cpc	r25, r1
    746a:	a1 05       	cpc	r26, r1
    746c:	b1 05       	cpc	r27, r1
    746e:	18 f4       	brcc	.+6      	; 0x7476 <TimerM_Timer_start+0x56>
    return FAIL;
    7470:	1a 86       	std	Y+10, r1	; 0x0a
    7472:	19 86       	std	Y+9, r1	; 0x09
    7474:	99 c0       	rjmp	.+306    	; 0x75a8 <TimerM_Timer_start+0x188>
    }
  TimerM_mTimerList[id].ticks = interval;
    7476:	8b 81       	ldd	r24, Y+3	; 0x03
    7478:	68 2f       	mov	r22, r24
    747a:	77 27       	eor	r23, r23
    747c:	2d 81       	ldd	r18, Y+5	; 0x05
    747e:	3e 81       	ldd	r19, Y+6	; 0x06
    7480:	4f 81       	ldd	r20, Y+7	; 0x07
    7482:	58 85       	ldd	r21, Y+8	; 0x08
    7484:	cb 01       	movw	r24, r22
    7486:	88 0f       	add	r24, r24
    7488:	99 1f       	adc	r25, r25
    748a:	88 0f       	add	r24, r24
    748c:	99 1f       	adc	r25, r25
    748e:	88 0f       	add	r24, r24
    7490:	99 1f       	adc	r25, r25
    7492:	86 0f       	add	r24, r22
    7494:	97 1f       	adc	r25, r23
    7496:	fc 01       	movw	r30, r24
    7498:	e9 5e       	subi	r30, 0xE9	; 233
    749a:	fa 4f       	sbci	r31, 0xFA	; 250
    749c:	20 83       	st	Z, r18
    749e:	31 83       	std	Z+1, r19	; 0x01
    74a0:	42 83       	std	Z+2, r20	; 0x02
    74a2:	53 83       	std	Z+3, r21	; 0x03
  TimerM_mTimerList[id].type = type;
    74a4:	8b 81       	ldd	r24, Y+3	; 0x03
    74a6:	28 2f       	mov	r18, r24
    74a8:	33 27       	eor	r19, r19
    74aa:	4c 81       	ldd	r20, Y+4	; 0x04
    74ac:	c9 01       	movw	r24, r18
    74ae:	88 0f       	add	r24, r24
    74b0:	99 1f       	adc	r25, r25
    74b2:	88 0f       	add	r24, r24
    74b4:	99 1f       	adc	r25, r25
    74b6:	88 0f       	add	r24, r24
    74b8:	99 1f       	adc	r25, r25
    74ba:	82 0f       	add	r24, r18
    74bc:	93 1f       	adc	r25, r19
    74be:	fc 01       	movw	r30, r24
    74c0:	ea 5e       	subi	r30, 0xEA	; 234
    74c2:	fa 4f       	sbci	r31, 0xFA	; 250
    74c4:	40 83       	st	Z, r20

  { _atomic_t _atomic = _atomic_start();
    74c6:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    74ca:	89 83       	std	Y+1, r24	; 0x01
    {
      diff = TimerM_Clock_readCounter();
    74cc:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <TimerM_Clock_readCounter>
    74d0:	8a 83       	std	Y+2, r24	; 0x02
      interval += diff;
    74d2:	8a 81       	ldd	r24, Y+2	; 0x02
    74d4:	28 2f       	mov	r18, r24
    74d6:	33 27       	eor	r19, r19
    74d8:	44 27       	eor	r20, r20
    74da:	55 27       	eor	r21, r21
    74dc:	8d 81       	ldd	r24, Y+5	; 0x05
    74de:	9e 81       	ldd	r25, Y+6	; 0x06
    74e0:	af 81       	ldd	r26, Y+7	; 0x07
    74e2:	b8 85       	ldd	r27, Y+8	; 0x08
    74e4:	82 0f       	add	r24, r18
    74e6:	93 1f       	adc	r25, r19
    74e8:	a4 1f       	adc	r26, r20
    74ea:	b5 1f       	adc	r27, r21
    74ec:	8d 83       	std	Y+5, r24	; 0x05
    74ee:	9e 83       	std	Y+6, r25	; 0x06
    74f0:	af 83       	std	Y+7, r26	; 0x07
    74f2:	b8 87       	std	Y+8, r27	; 0x08
      TimerM_mTimerList[id].ticksLeft = interval;
    74f4:	8b 81       	ldd	r24, Y+3	; 0x03
    74f6:	68 2f       	mov	r22, r24
    74f8:	77 27       	eor	r23, r23
    74fa:	2d 81       	ldd	r18, Y+5	; 0x05
    74fc:	3e 81       	ldd	r19, Y+6	; 0x06
    74fe:	4f 81       	ldd	r20, Y+7	; 0x07
    7500:	58 85       	ldd	r21, Y+8	; 0x08
    7502:	cb 01       	movw	r24, r22
    7504:	88 0f       	add	r24, r24
    7506:	99 1f       	adc	r25, r25
    7508:	88 0f       	add	r24, r24
    750a:	99 1f       	adc	r25, r25
    750c:	88 0f       	add	r24, r24
    750e:	99 1f       	adc	r25, r25
    7510:	86 0f       	add	r24, r22
    7512:	97 1f       	adc	r25, r23
    7514:	fc 01       	movw	r30, r24
    7516:	e5 5e       	subi	r30, 0xE5	; 229
    7518:	fa 4f       	sbci	r31, 0xFA	; 250
    751a:	20 83       	st	Z, r18
    751c:	31 83       	std	Z+1, r19	; 0x01
    751e:	42 83       	std	Z+2, r20	; 0x02
    7520:	53 83       	std	Z+3, r21	; 0x03
      TimerM_mState |= 0x1L << id;
    7522:	8b 81       	ldd	r24, Y+3	; 0x03
    7524:	28 2f       	mov	r18, r24
    7526:	33 27       	eor	r19, r19
    7528:	81 e0       	ldi	r24, 0x01	; 1
    752a:	90 e0       	ldi	r25, 0x00	; 0
    752c:	a0 e0       	ldi	r26, 0x00	; 0
    752e:	b0 e0       	ldi	r27, 0x00	; 0
    7530:	04 c0       	rjmp	.+8      	; 0x753a <TimerM_Timer_start+0x11a>
    7532:	88 0f       	add	r24, r24
    7534:	99 1f       	adc	r25, r25
    7536:	aa 1f       	adc	r26, r26
    7538:	bb 1f       	adc	r27, r27
    753a:	2a 95       	dec	r18
    753c:	d2 f7       	brpl	.-12     	; 0x7532 <TimerM_Timer_start+0x112>
    753e:	9c 01       	movw	r18, r24
    7540:	ad 01       	movw	r20, r26
    7542:	80 91 fb 04 	lds	r24, 0x04FB
    7546:	90 91 fc 04 	lds	r25, 0x04FC
    754a:	a0 91 fd 04 	lds	r26, 0x04FD
    754e:	b0 91 fe 04 	lds	r27, 0x04FE
    7552:	82 2b       	or	r24, r18
    7554:	93 2b       	or	r25, r19
    7556:	a4 2b       	or	r26, r20
    7558:	b5 2b       	or	r27, r21
    755a:	80 93 fb 04 	sts	0x04FB, r24
    755e:	90 93 fc 04 	sts	0x04FC, r25
    7562:	a0 93 fd 04 	sts	0x04FD, r26
    7566:	b0 93 fe 04 	sts	0x04FE, r27
      if (interval < TimerM_mInterval) {
    756a:	80 91 01 05 	lds	r24, 0x0501
    756e:	28 2f       	mov	r18, r24
    7570:	33 27       	eor	r19, r19
    7572:	44 27       	eor	r20, r20
    7574:	55 27       	eor	r21, r21
    7576:	8d 81       	ldd	r24, Y+5	; 0x05
    7578:	9e 81       	ldd	r25, Y+6	; 0x06
    757a:	af 81       	ldd	r26, Y+7	; 0x07
    757c:	b8 85       	ldd	r27, Y+8	; 0x08
    757e:	82 17       	cp	r24, r18
    7580:	93 07       	cpc	r25, r19
    7582:	a4 07       	cpc	r26, r20
    7584:	b5 07       	cpc	r27, r21
    7586:	48 f4       	brcc	.+18     	; 0x759a <TimerM_Timer_start+0x17a>
          TimerM_mInterval = interval;
    7588:	8d 81       	ldd	r24, Y+5	; 0x05
    758a:	80 93 01 05 	sts	0x0501, r24
          TimerM_Clock_setInterval(TimerM_mInterval);
    758e:	80 91 01 05 	lds	r24, 0x0501
    7592:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <TimerM_Clock_setInterval>
          TimerM_setIntervalFlag = 0;
    7596:	10 92 02 05 	sts	0x0502, r1
         
        }
    }
    _atomic_end(_atomic); }
    759a:	89 81       	ldd	r24, Y+1	; 0x01
    759c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
  return SUCCESS;
    75a0:	81 e0       	ldi	r24, 0x01	; 1
    75a2:	90 e0       	ldi	r25, 0x00	; 0
    75a4:	9a 87       	std	Y+10, r25	; 0x0a
    75a6:	89 87       	std	Y+9, r24	; 0x09
    75a8:	89 85       	ldd	r24, Y+9	; 0x09
    75aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    75ac:	2a 96       	adiw	r28, 0x0a	; 10
    75ae:	0f b6       	in	r0, 0x3f	; 63
    75b0:	f8 94       	cli
    75b2:	de bf       	out	0x3e, r29	; 62
    75b4:	0f be       	out	0x3f, r0	; 63
    75b6:	cd bf       	out	0x3d, r28	; 61
    75b8:	df 91       	pop	r29
    75ba:	cf 91       	pop	r28
    75bc:	08 95       	ret

000075be <TimerM_Clock_setRate>:
}



inline result_t TimerM_Clock_setRate(char arg_0xa369e18, char arg_0xa369f58){
    75be:	cf 93       	push	r28
    75c0:	df 93       	push	r29
    75c2:	cd b7       	in	r28, 0x3d	; 61
    75c4:	de b7       	in	r29, 0x3e	; 62
    75c6:	23 97       	sbiw	r28, 0x03	; 3
    75c8:	0f b6       	in	r0, 0x3f	; 63
    75ca:	f8 94       	cli
    75cc:	de bf       	out	0x3e, r29	; 62
    75ce:	0f be       	out	0x3f, r0	; 63
    75d0:	cd bf       	out	0x3d, r28	; 61
    75d2:	8a 83       	std	Y+2, r24	; 0x02
    75d4:	6b 83       	std	Y+3, r22	; 0x03
  unsigned char result;
  result = HPLClock_Clock_setRate(arg_0xa369e18, arg_0xa369f58);
    75d6:	6b 81       	ldd	r22, Y+3	; 0x03
    75d8:	8a 81       	ldd	r24, Y+2	; 0x02
    75da:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <HPLClock_Clock_setRate>
    75de:	89 83       	std	Y+1, r24	; 0x01
  return result;
    75e0:	89 81       	ldd	r24, Y+1	; 0x01
    75e2:	99 27       	eor	r25, r25
    75e4:	23 96       	adiw	r28, 0x03	; 3
    75e6:	0f b6       	in	r0, 0x3f	; 63
    75e8:	f8 94       	cli
    75ea:	de bf       	out	0x3e, r29	; 62
    75ec:	0f be       	out	0x3f, r0	; 63
    75ee:	cd bf       	out	0x3d, r28	; 61
    75f0:	df 91       	pop	r29
    75f2:	cf 91       	pop	r28
    75f4:	08 95       	ret

000075f6 <TimerM_adjustInterval>:
}



void TimerM_adjustInterval(void)
{
    75f6:	cf 93       	push	r28
    75f8:	df 93       	push	r29
    75fa:	cd b7       	in	r28, 0x3d	; 61
    75fc:	de b7       	in	r29, 0x3e	; 62
    75fe:	24 97       	sbiw	r28, 0x04	; 4
    7600:	0f b6       	in	r0, 0x3f	; 63
    7602:	f8 94       	cli
    7604:	de bf       	out	0x3e, r29	; 62
    7606:	0f be       	out	0x3f, r0	; 63
    7608:	cd bf       	out	0x3d, r28	; 61
  uint8_t i;
  uint8_t val = TimerM_maxTimerInterval;
    760a:	86 ee       	ldi	r24, 0xE6	; 230
    760c:	8b 83       	std	Y+3, r24	; 0x03

  if (TimerM_mState) {
    760e:	80 91 fb 04 	lds	r24, 0x04FB
    7612:	90 91 fc 04 	lds	r25, 0x04FC
    7616:	a0 91 fd 04 	lds	r26, 0x04FD
    761a:	b0 91 fe 04 	lds	r27, 0x04FE
    761e:	00 97       	sbiw	r24, 0x00	; 0
    7620:	a1 05       	cpc	r26, r1
    7622:	b1 05       	cpc	r27, r1
    7624:	09 f4       	brne	.+2      	; 0x7628 <TimerM_adjustInterval+0x32>
    7626:	73 c0       	rjmp	.+230    	; 0x770e <TimerM_adjustInterval+0x118>
      for (i = 0; i < NUM_TIMERS; i++) {
    7628:	1c 82       	std	Y+4, r1	; 0x04
    762a:	53 c0       	rjmp	.+166    	; 0x76d2 <TimerM_adjustInterval+0xdc>
          if (TimerM_mState & (0x1L << i) && TimerM_mTimerList[i].ticksLeft < val) {
    762c:	8c 81       	ldd	r24, Y+4	; 0x04
    762e:	28 2f       	mov	r18, r24
    7630:	33 27       	eor	r19, r19
    7632:	81 e0       	ldi	r24, 0x01	; 1
    7634:	90 e0       	ldi	r25, 0x00	; 0
    7636:	a0 e0       	ldi	r26, 0x00	; 0
    7638:	b0 e0       	ldi	r27, 0x00	; 0
    763a:	04 c0       	rjmp	.+8      	; 0x7644 <TimerM_adjustInterval+0x4e>
    763c:	88 0f       	add	r24, r24
    763e:	99 1f       	adc	r25, r25
    7640:	aa 1f       	adc	r26, r26
    7642:	bb 1f       	adc	r27, r27
    7644:	2a 95       	dec	r18
    7646:	d2 f7       	brpl	.-12     	; 0x763c <TimerM_adjustInterval+0x46>
    7648:	9c 01       	movw	r18, r24
    764a:	ad 01       	movw	r20, r26
    764c:	80 91 fb 04 	lds	r24, 0x04FB
    7650:	90 91 fc 04 	lds	r25, 0x04FC
    7654:	a0 91 fd 04 	lds	r26, 0x04FD
    7658:	b0 91 fe 04 	lds	r27, 0x04FE
    765c:	82 23       	and	r24, r18
    765e:	93 23       	and	r25, r19
    7660:	a4 23       	and	r26, r20
    7662:	b5 23       	and	r27, r21
    7664:	00 97       	sbiw	r24, 0x00	; 0
    7666:	a1 05       	cpc	r26, r1
    7668:	b1 05       	cpc	r27, r1
    766a:	81 f1       	breq	.+96     	; 0x76cc <TimerM_adjustInterval+0xd6>
    766c:	8c 81       	ldd	r24, Y+4	; 0x04
    766e:	28 2f       	mov	r18, r24
    7670:	33 27       	eor	r19, r19
    7672:	c9 01       	movw	r24, r18
    7674:	88 0f       	add	r24, r24
    7676:	99 1f       	adc	r25, r25
    7678:	88 0f       	add	r24, r24
    767a:	99 1f       	adc	r25, r25
    767c:	88 0f       	add	r24, r24
    767e:	99 1f       	adc	r25, r25
    7680:	82 0f       	add	r24, r18
    7682:	93 1f       	adc	r25, r19
    7684:	fc 01       	movw	r30, r24
    7686:	e5 5e       	subi	r30, 0xE5	; 229
    7688:	fa 4f       	sbci	r31, 0xFA	; 250
    768a:	20 81       	ld	r18, Z
    768c:	31 81       	ldd	r19, Z+1	; 0x01
    768e:	42 81       	ldd	r20, Z+2	; 0x02
    7690:	53 81       	ldd	r21, Z+3	; 0x03
    7692:	8b 81       	ldd	r24, Y+3	; 0x03
    7694:	99 27       	eor	r25, r25
    7696:	aa 27       	eor	r26, r26
    7698:	bb 27       	eor	r27, r27
    769a:	28 17       	cp	r18, r24
    769c:	39 07       	cpc	r19, r25
    769e:	4a 07       	cpc	r20, r26
    76a0:	5b 07       	cpc	r21, r27
    76a2:	a4 f4       	brge	.+40     	; 0x76cc <TimerM_adjustInterval+0xd6>
              val = TimerM_mTimerList[i].ticksLeft;
    76a4:	8c 81       	ldd	r24, Y+4	; 0x04
    76a6:	28 2f       	mov	r18, r24
    76a8:	33 27       	eor	r19, r19
    76aa:	c9 01       	movw	r24, r18
    76ac:	88 0f       	add	r24, r24
    76ae:	99 1f       	adc	r25, r25
    76b0:	88 0f       	add	r24, r24
    76b2:	99 1f       	adc	r25, r25
    76b4:	88 0f       	add	r24, r24
    76b6:	99 1f       	adc	r25, r25
    76b8:	82 0f       	add	r24, r18
    76ba:	93 1f       	adc	r25, r19
    76bc:	fc 01       	movw	r30, r24
    76be:	e5 5e       	subi	r30, 0xE5	; 229
    76c0:	fa 4f       	sbci	r31, 0xFA	; 250
    76c2:	80 81       	ld	r24, Z
    76c4:	91 81       	ldd	r25, Z+1	; 0x01
    76c6:	a2 81       	ldd	r26, Z+2	; 0x02
    76c8:	b3 81       	ldd	r27, Z+3	; 0x03
    76ca:	8b 83       	std	Y+3, r24	; 0x03
    76cc:	8c 81       	ldd	r24, Y+4	; 0x04
    76ce:	8f 5f       	subi	r24, 0xFF	; 255
    76d0:	8c 83       	std	Y+4, r24	; 0x04
    76d2:	8c 81       	ldd	r24, Y+4	; 0x04
    76d4:	80 31       	cpi	r24, 0x10	; 16
    76d6:	08 f4       	brcc	.+2      	; 0x76da <TimerM_adjustInterval+0xe4>
    76d8:	a9 cf       	rjmp	.-174    	; 0x762c <TimerM_adjustInterval+0x36>
            }
        }
      { _atomic_t _atomic = _atomic_start();
    76da:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    76de:	8a 83       	std	Y+2, r24	; 0x02
        {
          i = TimerM_Clock_readCounter() + 3;
    76e0:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <TimerM_Clock_readCounter>
    76e4:	8d 5f       	subi	r24, 0xFD	; 253
    76e6:	8c 83       	std	Y+4, r24	; 0x04
          if (val < i) {
    76e8:	9b 81       	ldd	r25, Y+3	; 0x03
    76ea:	8c 81       	ldd	r24, Y+4	; 0x04
    76ec:	98 17       	cp	r25, r24
    76ee:	10 f4       	brcc	.+4      	; 0x76f4 <TimerM_adjustInterval+0xfe>
              val = i;
    76f0:	8c 81       	ldd	r24, Y+4	; 0x04
    76f2:	8b 83       	std	Y+3, r24	; 0x03
            }
          TimerM_mInterval = val;
    76f4:	8b 81       	ldd	r24, Y+3	; 0x03
    76f6:	80 93 01 05 	sts	0x0501, r24
          TimerM_Clock_setInterval(TimerM_mInterval);
    76fa:	80 91 01 05 	lds	r24, 0x0501
    76fe:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <TimerM_Clock_setInterval>
          TimerM_setIntervalFlag = 0;
    7702:	10 92 02 05 	sts	0x0502, r1
        }
        _atomic_end(_atomic); }
    7706:	8a 81       	ldd	r24, Y+2	; 0x02
    7708:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    770c:	0f c0       	rjmp	.+30     	; 0x772c <TimerM_adjustInterval+0x136>
    }
  else {
      { _atomic_t _atomic = _atomic_start();
    770e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    7712:	89 83       	std	Y+1, r24	; 0x01
        {
          TimerM_mInterval = TimerM_maxTimerInterval;
    7714:	86 ee       	ldi	r24, 0xE6	; 230
    7716:	80 93 01 05 	sts	0x0501, r24
          TimerM_Clock_setInterval(TimerM_mInterval);
    771a:	80 91 01 05 	lds	r24, 0x0501
    771e:	0e 94 19 3e 	call	0x7c32	; 0x7c32 <TimerM_Clock_setInterval>
          TimerM_setIntervalFlag = 0;
    7722:	10 92 02 05 	sts	0x0502, r1
        }
        _atomic_end(_atomic); }
    7726:	89 81       	ldd	r24, Y+1	; 0x01
    7728:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    772c:	24 96       	adiw	r28, 0x04	; 4
    772e:	0f b6       	in	r0, 0x3f	; 63
    7730:	f8 94       	cli
    7732:	de bf       	out	0x3e, r29	; 62
    7734:	0f be       	out	0x3f, r0	; 63
    7736:	cd bf       	out	0x3d, r28	; 61
    7738:	df 91       	pop	r29
    773a:	cf 91       	pop	r28
    773c:	08 95       	ret

0000773e <TimerM_enqueue>:
    }
}

inline 
void TimerM_enqueue(uint8_t value)
{
    773e:	cf 93       	push	r28
    7740:	df 93       	push	r29
    7742:	cd b7       	in	r28, 0x3d	; 61
    7744:	de b7       	in	r29, 0x3e	; 62
    7746:	21 97       	sbiw	r28, 0x01	; 1
    7748:	0f b6       	in	r0, 0x3f	; 63
    774a:	f8 94       	cli
    774c:	de bf       	out	0x3e, r29	; 62
    774e:	0f be       	out	0x3f, r0	; 63
    7750:	cd bf       	out	0x3d, r28	; 61
    7752:	89 83       	std	Y+1, r24	; 0x01
  if (TimerM_queue_tail == NUM_TIMERS - 1) {
    7754:	80 91 fa 04 	lds	r24, 0x04FA
    7758:	8f 30       	cpi	r24, 0x0F	; 15
    775a:	19 f4       	brne	.+6      	; 0x7762 <TimerM_enqueue+0x24>
    TimerM_queue_tail = -1;
    775c:	8f ef       	ldi	r24, 0xFF	; 255
    775e:	80 93 fa 04 	sts	0x04FA, r24
    }
  TimerM_queue_tail++;
    7762:	80 91 fa 04 	lds	r24, 0x04FA
    7766:	8f 5f       	subi	r24, 0xFF	; 255
    7768:	80 93 fa 04 	sts	0x04FA, r24
  TimerM_queue_size++;
    776c:	80 91 ff 04 	lds	r24, 0x04FF
    7770:	8f 5f       	subi	r24, 0xFF	; 255
    7772:	80 93 ff 04 	sts	0x04FF, r24
  TimerM_queue[(uint8_t )TimerM_queue_tail] = value;
    7776:	80 91 fa 04 	lds	r24, 0x04FA
    777a:	99 27       	eor	r25, r25
    777c:	fc 01       	movw	r30, r24
    777e:	ed 5f       	subi	r30, 0xFD	; 253
    7780:	fa 4f       	sbci	r31, 0xFA	; 250
    7782:	89 81       	ldd	r24, Y+1	; 0x01
    7784:	80 83       	st	Z, r24
    7786:	21 96       	adiw	r28, 0x01	; 1
    7788:	0f b6       	in	r0, 0x3f	; 63
    778a:	f8 94       	cli
    778c:	de bf       	out	0x3e, r29	; 62
    778e:	0f be       	out	0x3f, r0	; 63
    7790:	cd bf       	out	0x3d, r28	; 61
    7792:	df 91       	pop	r29
    7794:	cf 91       	pop	r28
    7796:	08 95       	ret

00007798 <TimerM_Timer_default_fired>:
}





inline   
result_t TimerM_Timer_default_fired(uint8_t id)
{
    7798:	cf 93       	push	r28
    779a:	df 93       	push	r29
    779c:	cd b7       	in	r28, 0x3d	; 61
    779e:	de b7       	in	r29, 0x3e	; 62
    77a0:	21 97       	sbiw	r28, 0x01	; 1
    77a2:	0f b6       	in	r0, 0x3f	; 63
    77a4:	f8 94       	cli
    77a6:	de bf       	out	0x3e, r29	; 62
    77a8:	0f be       	out	0x3f, r0	; 63
    77aa:	cd bf       	out	0x3d, r28	; 61
    77ac:	89 83       	std	Y+1, r24	; 0x01
  return SUCCESS;
    77ae:	81 e0       	ldi	r24, 0x01	; 1
    77b0:	90 e0       	ldi	r25, 0x00	; 0
    77b2:	21 96       	adiw	r28, 0x01	; 1
    77b4:	0f b6       	in	r0, 0x3f	; 63
    77b6:	f8 94       	cli
    77b8:	de bf       	out	0x3e, r29	; 62
    77ba:	0f be       	out	0x3f, r0	; 63
    77bc:	cd bf       	out	0x3d, r28	; 61
    77be:	df 91       	pop	r29
    77c0:	cf 91       	pop	r28
    77c2:	08 95       	ret

000077c4 <TimerM_Timer_fired>:
}


inline result_t TimerM_Timer_fired(uint8_t id){
    77c4:	cf 93       	push	r28
    77c6:	df 93       	push	r29
    77c8:	cd b7       	in	r28, 0x3d	; 61
    77ca:	de b7       	in	r29, 0x3e	; 62
    77cc:	21 97       	sbiw	r28, 0x01	; 1
    77ce:	0f b6       	in	r0, 0x3f	; 63
    77d0:	f8 94       	cli
    77d2:	de bf       	out	0x3e, r29	; 62
    77d4:	0f be       	out	0x3f, r0	; 63
    77d6:	cd bf       	out	0x3d, r28	; 61
    77d8:	89 83       	std	Y+1, r24	; 0x01
  GenericTimerFired(id); 
    77da:	89 81       	ldd	r24, Y+1	; 0x01
    77dc:	0e 94 a5 85 	call	0x10b4a	; 0x10b4a <GenericTimerFired>
  return SUCCESS;
    77e0:	81 e0       	ldi	r24, 0x01	; 1
    77e2:	90 e0       	ldi	r25, 0x00	; 0
    77e4:	21 96       	adiw	r28, 0x01	; 1
    77e6:	0f b6       	in	r0, 0x3f	; 63
    77e8:	f8 94       	cli
    77ea:	de bf       	out	0x3e, r29	; 62
    77ec:	0f be       	out	0x3f, r0	; 63
    77ee:	cd bf       	out	0x3d, r28	; 61
    77f0:	df 91       	pop	r29
    77f2:	cf 91       	pop	r28
    77f4:	08 95       	ret

000077f6 <TimerM_dequeue>:
}


inline 
uint8_t TimerM_dequeue(void)
{
    77f6:	cf 93       	push	r28
    77f8:	df 93       	push	r29
    77fa:	cd b7       	in	r28, 0x3d	; 61
    77fc:	de b7       	in	r29, 0x3e	; 62
    77fe:	22 97       	sbiw	r28, 0x02	; 2
    7800:	0f b6       	in	r0, 0x3f	; 63
    7802:	f8 94       	cli
    7804:	de bf       	out	0x3e, r29	; 62
    7806:	0f be       	out	0x3f, r0	; 63
    7808:	cd bf       	out	0x3d, r28	; 61
  if (TimerM_queue_size == 0) {
    780a:	80 91 ff 04 	lds	r24, 0x04FF
    780e:	88 23       	and	r24, r24
    7810:	29 f4       	brne	.+10     	; 0x781c <TimerM_dequeue+0x26>
    return NUM_TIMERS;
    7812:	20 e1       	ldi	r18, 0x10	; 16
    7814:	30 e0       	ldi	r19, 0x00	; 0
    7816:	3a 83       	std	Y+2, r19	; 0x02
    7818:	29 83       	std	Y+1, r18	; 0x01
    781a:	1c c0       	rjmp	.+56     	; 0x7854 <TimerM_dequeue+0x5e>
    }
  if (TimerM_queue_head == NUM_TIMERS - 1) {
    781c:	80 91 15 05 	lds	r24, 0x0515
    7820:	8f 30       	cpi	r24, 0x0F	; 15
    7822:	19 f4       	brne	.+6      	; 0x782a <TimerM_dequeue+0x34>
    TimerM_queue_head = -1;
    7824:	8f ef       	ldi	r24, 0xFF	; 255
    7826:	80 93 15 05 	sts	0x0515, r24
    }
  TimerM_queue_head++;
    782a:	80 91 15 05 	lds	r24, 0x0515
    782e:	8f 5f       	subi	r24, 0xFF	; 255
    7830:	80 93 15 05 	sts	0x0515, r24
  TimerM_queue_size--;
    7834:	80 91 ff 04 	lds	r24, 0x04FF
    7838:	81 50       	subi	r24, 0x01	; 1
    783a:	80 93 ff 04 	sts	0x04FF, r24
  return TimerM_queue[(uint8_t )TimerM_queue_head];
    783e:	80 91 15 05 	lds	r24, 0x0515
    7842:	99 27       	eor	r25, r25
    7844:	fc 01       	movw	r30, r24
    7846:	ed 5f       	subi	r30, 0xFD	; 253
    7848:	fa 4f       	sbci	r31, 0xFA	; 250
    784a:	80 81       	ld	r24, Z
    784c:	28 2f       	mov	r18, r24
    784e:	33 27       	eor	r19, r19
    7850:	3a 83       	std	Y+2, r19	; 0x02
    7852:	29 83       	std	Y+1, r18	; 0x01
    7854:	89 81       	ldd	r24, Y+1	; 0x01
    7856:	9a 81       	ldd	r25, Y+2	; 0x02
    7858:	22 96       	adiw	r28, 0x02	; 2
    785a:	0f b6       	in	r0, 0x3f	; 63
    785c:	f8 94       	cli
    785e:	de bf       	out	0x3e, r29	; 62
    7860:	0f be       	out	0x3f, r0	; 63
    7862:	cd bf       	out	0x3d, r28	; 61
    7864:	df 91       	pop	r29
    7866:	cf 91       	pop	r28
    7868:	08 95       	ret

0000786a <TimerM_signalOneTimer>:
}


inline  void TimerM_signalOneTimer(void)
{
    786a:	cf 93       	push	r28
    786c:	df 93       	push	r29
    786e:	cd b7       	in	r28, 0x3d	; 61
    7870:	de b7       	in	r29, 0x3e	; 62
    7872:	21 97       	sbiw	r28, 0x01	; 1
    7874:	0f b6       	in	r0, 0x3f	; 63
    7876:	f8 94       	cli
    7878:	de bf       	out	0x3e, r29	; 62
    787a:	0f be       	out	0x3f, r0	; 63
    787c:	cd bf       	out	0x3d, r28	; 61
  uint8_t itimer = TimerM_dequeue();
    787e:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <TimerM_dequeue>
    7882:	89 83       	std	Y+1, r24	; 0x01

  if (itimer < NUM_TIMERS) {
    7884:	89 81       	ldd	r24, Y+1	; 0x01
    7886:	80 31       	cpi	r24, 0x10	; 16
    7888:	18 f4       	brcc	.+6      	; 0x7890 <TimerM_signalOneTimer+0x26>
    TimerM_Timer_fired(itimer);
    788a:	89 81       	ldd	r24, Y+1	; 0x01
    788c:	0e 94 e2 3b 	call	0x77c4	; 0x77c4 <TimerM_Timer_fired>
    7890:	21 96       	adiw	r28, 0x01	; 1
    7892:	0f b6       	in	r0, 0x3f	; 63
    7894:	f8 94       	cli
    7896:	de bf       	out	0x3e, r29	; 62
    7898:	0f be       	out	0x3f, r0	; 63
    789a:	cd bf       	out	0x3d, r28	; 61
    789c:	df 91       	pop	r29
    789e:	cf 91       	pop	r28
    78a0:	08 95       	ret

000078a2 <TimerM_HandleFire>:
    }
}

inline  
void TimerM_HandleFire(void)
{
    78a2:	0f 93       	push	r16
    78a4:	1f 93       	push	r17
    78a6:	cf 93       	push	r28
    78a8:	df 93       	push	r29
    78aa:	cd b7       	in	r28, 0x3d	; 61
    78ac:	de b7       	in	r29, 0x3e	; 62
    78ae:	25 97       	sbiw	r28, 0x05	; 5
    78b0:	0f b6       	in	r0, 0x3f	; 63
    78b2:	f8 94       	cli
    78b4:	de bf       	out	0x3e, r29	; 62
    78b6:	0f be       	out	0x3f, r0	; 63
    78b8:	cd bf       	out	0x3d, r28	; 61
  uint8_t i;
  uint16_t int_out;

  TimerM_setIntervalFlag = 1;
    78ba:	81 e0       	ldi	r24, 0x01	; 1
    78bc:	80 93 02 05 	sts	0x0502, r24


  { _atomic_t _atomic = _atomic_start();
    78c0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    78c4:	8a 83       	std	Y+2, r24	; 0x02
    {
      int_out = TimerM_interval_outstanding;
    78c6:	80 91 13 05 	lds	r24, 0x0513
    78ca:	90 91 14 05 	lds	r25, 0x0514
    78ce:	9c 83       	std	Y+4, r25	; 0x04
    78d0:	8b 83       	std	Y+3, r24	; 0x03
      TimerM_interval_outstanding = 0;
    78d2:	10 92 14 05 	sts	0x0514, r1
    78d6:	10 92 13 05 	sts	0x0513, r1
    }
    _atomic_end(_atomic); }
    78da:	8a 81       	ldd	r24, Y+2	; 0x02
    78dc:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
  if (TimerM_mState) {
    78e0:	80 91 fb 04 	lds	r24, 0x04FB
    78e4:	90 91 fc 04 	lds	r25, 0x04FC
    78e8:	a0 91 fd 04 	lds	r26, 0x04FD
    78ec:	b0 91 fe 04 	lds	r27, 0x04FE
    78f0:	00 97       	sbiw	r24, 0x00	; 0
    78f2:	a1 05       	cpc	r26, r1
    78f4:	b1 05       	cpc	r27, r1
    78f6:	09 f4       	brne	.+2      	; 0x78fa <TimerM_HandleFire+0x58>
    78f8:	11 c1       	rjmp	.+546    	; 0x7b1c <TimerM_HandleFire+0x27a>
      for (i = 0; i < NUM_TIMERS; i++) {
    78fa:	1d 82       	std	Y+5, r1	; 0x05
    78fc:	0b c1       	rjmp	.+534    	; 0x7b14 <TimerM_HandleFire+0x272>
          if (TimerM_mState & (0x1L << i)) {
    78fe:	8d 81       	ldd	r24, Y+5	; 0x05
    7900:	28 2f       	mov	r18, r24
    7902:	33 27       	eor	r19, r19
    7904:	81 e0       	ldi	r24, 0x01	; 1
    7906:	90 e0       	ldi	r25, 0x00	; 0
    7908:	a0 e0       	ldi	r26, 0x00	; 0
    790a:	b0 e0       	ldi	r27, 0x00	; 0
    790c:	04 c0       	rjmp	.+8      	; 0x7916 <TimerM_HandleFire+0x74>
    790e:	88 0f       	add	r24, r24
    7910:	99 1f       	adc	r25, r25
    7912:	aa 1f       	adc	r26, r26
    7914:	bb 1f       	adc	r27, r27
    7916:	2a 95       	dec	r18
    7918:	d2 f7       	brpl	.-12     	; 0x790e <TimerM_HandleFire+0x6c>
    791a:	9c 01       	movw	r18, r24
    791c:	ad 01       	movw	r20, r26
    791e:	80 91 fb 04 	lds	r24, 0x04FB
    7922:	90 91 fc 04 	lds	r25, 0x04FC
    7926:	a0 91 fd 04 	lds	r26, 0x04FD
    792a:	b0 91 fe 04 	lds	r27, 0x04FE
    792e:	82 23       	and	r24, r18
    7930:	93 23       	and	r25, r19
    7932:	a4 23       	and	r26, r20
    7934:	b5 23       	and	r27, r21
    7936:	00 97       	sbiw	r24, 0x00	; 0
    7938:	a1 05       	cpc	r26, r1
    793a:	b1 05       	cpc	r27, r1
    793c:	09 f4       	brne	.+2      	; 0x7940 <TimerM_HandleFire+0x9e>
    793e:	e7 c0       	rjmp	.+462    	; 0x7b0e <TimerM_HandleFire+0x26c>
              TimerM_mTimerList[i].ticksLeft -= int_out;
    7940:	8d 81       	ldd	r24, Y+5	; 0x05
    7942:	68 2f       	mov	r22, r24
    7944:	77 27       	eor	r23, r23
    7946:	8d 81       	ldd	r24, Y+5	; 0x05
    7948:	28 2f       	mov	r18, r24
    794a:	33 27       	eor	r19, r19
    794c:	c9 01       	movw	r24, r18
    794e:	88 0f       	add	r24, r24
    7950:	99 1f       	adc	r25, r25
    7952:	88 0f       	add	r24, r24
    7954:	99 1f       	adc	r25, r25
    7956:	88 0f       	add	r24, r24
    7958:	99 1f       	adc	r25, r25
    795a:	82 0f       	add	r24, r18
    795c:	93 1f       	adc	r25, r19
    795e:	fc 01       	movw	r30, r24
    7960:	e5 5e       	subi	r30, 0xE5	; 229
    7962:	fa 4f       	sbci	r31, 0xFA	; 250
    7964:	20 81       	ld	r18, Z
    7966:	31 81       	ldd	r19, Z+1	; 0x01
    7968:	42 81       	ldd	r20, Z+2	; 0x02
    796a:	53 81       	ldd	r21, Z+3	; 0x03
    796c:	8b 81       	ldd	r24, Y+3	; 0x03
    796e:	9c 81       	ldd	r25, Y+4	; 0x04
    7970:	aa 27       	eor	r26, r26
    7972:	bb 27       	eor	r27, r27
    7974:	28 1b       	sub	r18, r24
    7976:	39 0b       	sbc	r19, r25
    7978:	4a 0b       	sbc	r20, r26
    797a:	5b 0b       	sbc	r21, r27
    797c:	cb 01       	movw	r24, r22
    797e:	88 0f       	add	r24, r24
    7980:	99 1f       	adc	r25, r25
    7982:	88 0f       	add	r24, r24
    7984:	99 1f       	adc	r25, r25
    7986:	88 0f       	add	r24, r24
    7988:	99 1f       	adc	r25, r25
    798a:	86 0f       	add	r24, r22
    798c:	97 1f       	adc	r25, r23
    798e:	fc 01       	movw	r30, r24
    7990:	e5 5e       	subi	r30, 0xE5	; 229
    7992:	fa 4f       	sbci	r31, 0xFA	; 250
    7994:	20 83       	st	Z, r18
    7996:	31 83       	std	Z+1, r19	; 0x01
    7998:	42 83       	std	Z+2, r20	; 0x02
    799a:	53 83       	std	Z+3, r21	; 0x03
              if (TimerM_mTimerList[i].ticksLeft <= 2) {
    799c:	8d 81       	ldd	r24, Y+5	; 0x05
    799e:	28 2f       	mov	r18, r24
    79a0:	33 27       	eor	r19, r19
    79a2:	c9 01       	movw	r24, r18
    79a4:	88 0f       	add	r24, r24
    79a6:	99 1f       	adc	r25, r25
    79a8:	88 0f       	add	r24, r24
    79aa:	99 1f       	adc	r25, r25
    79ac:	88 0f       	add	r24, r24
    79ae:	99 1f       	adc	r25, r25
    79b0:	82 0f       	add	r24, r18
    79b2:	93 1f       	adc	r25, r19
    79b4:	fc 01       	movw	r30, r24
    79b6:	e5 5e       	subi	r30, 0xE5	; 229
    79b8:	fa 4f       	sbci	r31, 0xFA	; 250
    79ba:	80 81       	ld	r24, Z
    79bc:	91 81       	ldd	r25, Z+1	; 0x01
    79be:	a2 81       	ldd	r26, Z+2	; 0x02
    79c0:	b3 81       	ldd	r27, Z+3	; 0x03
    79c2:	83 30       	cpi	r24, 0x03	; 3
    79c4:	91 05       	cpc	r25, r1
    79c6:	a1 05       	cpc	r26, r1
    79c8:	b1 05       	cpc	r27, r1
    79ca:	0c f0       	brlt	.+2      	; 0x79ce <TimerM_HandleFire+0x12c>
    79cc:	a0 c0       	rjmp	.+320    	; 0x7b0e <TimerM_HandleFire+0x26c>


                  if (postTask(TimerM_signalOneTimer, 7)) {
    79ce:	85 e3       	ldi	r24, 0x35	; 53
    79d0:	9c e3       	ldi	r25, 0x3C	; 60
    79d2:	67 e0       	ldi	r22, 0x07	; 7
    79d4:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    79d8:	88 23       	and	r24, r24
    79da:	09 f4       	brne	.+2      	; 0x79de <TimerM_HandleFire+0x13c>
    79dc:	7f c0       	rjmp	.+254    	; 0x7adc <TimerM_HandleFire+0x23a>
                      if (TimerM_mTimerList[i].type == TIMER_REPEAT) {
    79de:	8d 81       	ldd	r24, Y+5	; 0x05
    79e0:	28 2f       	mov	r18, r24
    79e2:	33 27       	eor	r19, r19
    79e4:	c9 01       	movw	r24, r18
    79e6:	88 0f       	add	r24, r24
    79e8:	99 1f       	adc	r25, r25
    79ea:	88 0f       	add	r24, r24
    79ec:	99 1f       	adc	r25, r25
    79ee:	88 0f       	add	r24, r24
    79f0:	99 1f       	adc	r25, r25
    79f2:	82 0f       	add	r24, r18
    79f4:	93 1f       	adc	r25, r19
    79f6:	fc 01       	movw	r30, r24
    79f8:	ea 5e       	subi	r30, 0xEA	; 234
    79fa:	fa 4f       	sbci	r31, 0xFA	; 250
    79fc:	80 81       	ld	r24, Z
    79fe:	88 23       	and	r24, r24
    7a00:	09 f0       	breq	.+2      	; 0x7a04 <TimerM_HandleFire+0x162>
    7a02:	40 c0       	rjmp	.+128    	; 0x7a84 <TimerM_HandleFire+0x1e2>
                          TimerM_mTimerList[i].ticksLeft += TimerM_mTimerList[i].ticks;
    7a04:	8d 81       	ldd	r24, Y+5	; 0x05
    7a06:	08 2f       	mov	r16, r24
    7a08:	11 27       	eor	r17, r17
    7a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    7a0c:	28 2f       	mov	r18, r24
    7a0e:	33 27       	eor	r19, r19
    7a10:	c9 01       	movw	r24, r18
    7a12:	88 0f       	add	r24, r24
    7a14:	99 1f       	adc	r25, r25
    7a16:	88 0f       	add	r24, r24
    7a18:	99 1f       	adc	r25, r25
    7a1a:	88 0f       	add	r24, r24
    7a1c:	99 1f       	adc	r25, r25
    7a1e:	82 0f       	add	r24, r18
    7a20:	93 1f       	adc	r25, r19
    7a22:	fc 01       	movw	r30, r24
    7a24:	e5 5e       	subi	r30, 0xE5	; 229
    7a26:	fa 4f       	sbci	r31, 0xFA	; 250
    7a28:	40 81       	ld	r20, Z
    7a2a:	51 81       	ldd	r21, Z+1	; 0x01
    7a2c:	62 81       	ldd	r22, Z+2	; 0x02
    7a2e:	73 81       	ldd	r23, Z+3	; 0x03
    7a30:	8d 81       	ldd	r24, Y+5	; 0x05
    7a32:	28 2f       	mov	r18, r24
    7a34:	33 27       	eor	r19, r19
    7a36:	c9 01       	movw	r24, r18
    7a38:	88 0f       	add	r24, r24
    7a3a:	99 1f       	adc	r25, r25
    7a3c:	88 0f       	add	r24, r24
    7a3e:	99 1f       	adc	r25, r25
    7a40:	88 0f       	add	r24, r24
    7a42:	99 1f       	adc	r25, r25
    7a44:	82 0f       	add	r24, r18
    7a46:	93 1f       	adc	r25, r19
    7a48:	fc 01       	movw	r30, r24
    7a4a:	e9 5e       	subi	r30, 0xE9	; 233
    7a4c:	fa 4f       	sbci	r31, 0xFA	; 250
    7a4e:	80 81       	ld	r24, Z
    7a50:	91 81       	ldd	r25, Z+1	; 0x01
    7a52:	a2 81       	ldd	r26, Z+2	; 0x02
    7a54:	b3 81       	ldd	r27, Z+3	; 0x03
    7a56:	9a 01       	movw	r18, r20
    7a58:	ab 01       	movw	r20, r22
    7a5a:	28 0f       	add	r18, r24
    7a5c:	39 1f       	adc	r19, r25
    7a5e:	4a 1f       	adc	r20, r26
    7a60:	5b 1f       	adc	r21, r27
    7a62:	c8 01       	movw	r24, r16
    7a64:	88 0f       	add	r24, r24
    7a66:	99 1f       	adc	r25, r25
    7a68:	88 0f       	add	r24, r24
    7a6a:	99 1f       	adc	r25, r25
    7a6c:	88 0f       	add	r24, r24
    7a6e:	99 1f       	adc	r25, r25
    7a70:	80 0f       	add	r24, r16
    7a72:	91 1f       	adc	r25, r17
    7a74:	fc 01       	movw	r30, r24
    7a76:	e5 5e       	subi	r30, 0xE5	; 229
    7a78:	fa 4f       	sbci	r31, 0xFA	; 250
    7a7a:	20 83       	st	Z, r18
    7a7c:	31 83       	std	Z+1, r19	; 0x01
    7a7e:	42 83       	std	Z+2, r20	; 0x02
    7a80:	53 83       	std	Z+3, r21	; 0x03
    7a82:	28 c0       	rjmp	.+80     	; 0x7ad4 <TimerM_HandleFire+0x232>
                        }
                      else 
                        {
                          TimerM_mState &= ~(0x1L << i);
    7a84:	8d 81       	ldd	r24, Y+5	; 0x05
    7a86:	28 2f       	mov	r18, r24
    7a88:	33 27       	eor	r19, r19
    7a8a:	81 e0       	ldi	r24, 0x01	; 1
    7a8c:	90 e0       	ldi	r25, 0x00	; 0
    7a8e:	a0 e0       	ldi	r26, 0x00	; 0
    7a90:	b0 e0       	ldi	r27, 0x00	; 0
    7a92:	04 c0       	rjmp	.+8      	; 0x7a9c <TimerM_HandleFire+0x1fa>
    7a94:	88 0f       	add	r24, r24
    7a96:	99 1f       	adc	r25, r25
    7a98:	aa 1f       	adc	r26, r26
    7a9a:	bb 1f       	adc	r27, r27
    7a9c:	2a 95       	dec	r18
    7a9e:	d2 f7       	brpl	.-12     	; 0x7a94 <TimerM_HandleFire+0x1f2>
    7aa0:	80 95       	com	r24
    7aa2:	90 95       	com	r25
    7aa4:	a0 95       	com	r26
    7aa6:	b0 95       	com	r27
    7aa8:	9c 01       	movw	r18, r24
    7aaa:	ad 01       	movw	r20, r26
    7aac:	80 91 fb 04 	lds	r24, 0x04FB
    7ab0:	90 91 fc 04 	lds	r25, 0x04FC
    7ab4:	a0 91 fd 04 	lds	r26, 0x04FD
    7ab8:	b0 91 fe 04 	lds	r27, 0x04FE
    7abc:	82 23       	and	r24, r18
    7abe:	93 23       	and	r25, r19
    7ac0:	a4 23       	and	r26, r20
    7ac2:	b5 23       	and	r27, r21
    7ac4:	80 93 fb 04 	sts	0x04FB, r24
    7ac8:	90 93 fc 04 	sts	0x04FC, r25
    7acc:	a0 93 fd 04 	sts	0x04FD, r26
    7ad0:	b0 93 fe 04 	sts	0x04FE, r27
                        }
                      TimerM_enqueue(i);
    7ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    7ad6:	0e 94 9f 3b 	call	0x773e	; 0x773e <TimerM_enqueue>
    7ada:	19 c0       	rjmp	.+50     	; 0x7b0e <TimerM_HandleFire+0x26c>
                    }
                  else {
                      {
                      }
                      ;


                      TimerM_mTimerList[i].ticksLeft = TimerM_mInterval;
    7adc:	8d 81       	ldd	r24, Y+5	; 0x05
    7ade:	68 2f       	mov	r22, r24
    7ae0:	77 27       	eor	r23, r23
    7ae2:	80 91 01 05 	lds	r24, 0x0501
    7ae6:	28 2f       	mov	r18, r24
    7ae8:	33 27       	eor	r19, r19
    7aea:	44 27       	eor	r20, r20
    7aec:	55 27       	eor	r21, r21
    7aee:	cb 01       	movw	r24, r22
    7af0:	88 0f       	add	r24, r24
    7af2:	99 1f       	adc	r25, r25
    7af4:	88 0f       	add	r24, r24
    7af6:	99 1f       	adc	r25, r25
    7af8:	88 0f       	add	r24, r24
    7afa:	99 1f       	adc	r25, r25
    7afc:	86 0f       	add	r24, r22
    7afe:	97 1f       	adc	r25, r23
    7b00:	fc 01       	movw	r30, r24
    7b02:	e5 5e       	subi	r30, 0xE5	; 229
    7b04:	fa 4f       	sbci	r31, 0xFA	; 250
    7b06:	20 83       	st	Z, r18
    7b08:	31 83       	std	Z+1, r19	; 0x01
    7b0a:	42 83       	std	Z+2, r20	; 0x02
    7b0c:	53 83       	std	Z+3, r21	; 0x03
    7b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    7b10:	8f 5f       	subi	r24, 0xFF	; 255
    7b12:	8d 83       	std	Y+5, r24	; 0x05
    7b14:	8d 81       	ldd	r24, Y+5	; 0x05
    7b16:	80 31       	cpi	r24, 0x10	; 16
    7b18:	08 f4       	brcc	.+2      	; 0x7b1c <TimerM_HandleFire+0x27a>
    7b1a:	f1 ce       	rjmp	.-542    	; 0x78fe <TimerM_HandleFire+0x5c>
                    }
                }
            }
        }
    }


  { _atomic_t _atomic = _atomic_start();
    7b1c:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    7b20:	89 83       	std	Y+1, r24	; 0x01
    int_out = TimerM_interval_outstanding;
    7b22:	80 91 13 05 	lds	r24, 0x0513
    7b26:	90 91 14 05 	lds	r25, 0x0514
    7b2a:	9c 83       	std	Y+4, r25	; 0x04
    7b2c:	8b 83       	std	Y+3, r24	; 0x03
    _atomic_end(_atomic); }
    7b2e:	89 81       	ldd	r24, Y+1	; 0x01
    7b30:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
  if (int_out == 0) {
    7b34:	8b 81       	ldd	r24, Y+3	; 0x03
    7b36:	9c 81       	ldd	r25, Y+4	; 0x04
    7b38:	00 97       	sbiw	r24, 0x00	; 0
    7b3a:	11 f4       	brne	.+4      	; 0x7b40 <TimerM_HandleFire+0x29e>
    TimerM_adjustInterval();
    7b3c:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <TimerM_adjustInterval>
    7b40:	25 96       	adiw	r28, 0x05	; 5
    7b42:	0f b6       	in	r0, 0x3f	; 63
    7b44:	f8 94       	cli
    7b46:	de bf       	out	0x3e, r29	; 62
    7b48:	0f be       	out	0x3f, r0	; 63
    7b4a:	cd bf       	out	0x3d, r28	; 61
    7b4c:	df 91       	pop	r29
    7b4e:	cf 91       	pop	r28
    7b50:	1f 91       	pop	r17
    7b52:	0f 91       	pop	r16
    7b54:	08 95       	ret

00007b56 <TimerM_Clock_fire>:
    }
}

inline result_t TimerM_Clock_fire(void)
{
    7b56:	cf 93       	push	r28
    7b58:	df 93       	push	r29
    7b5a:	cd b7       	in	r28, 0x3d	; 61
    7b5c:	de b7       	in	r29, 0x3e	; 62
    7b5e:	21 97       	sbiw	r28, 0x01	; 1
    7b60:	0f b6       	in	r0, 0x3f	; 63
    7b62:	f8 94       	cli
    7b64:	de bf       	out	0x3e, r29	; 62
    7b66:	0f be       	out	0x3f, r0	; 63
    7b68:	cd bf       	out	0x3d, r28	; 61
  { _atomic_t _atomic = _atomic_start();
    7b6a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    7b6e:	89 83       	std	Y+1, r24	; 0x01
    {

      if (TimerM_interval_outstanding == 0) {
    7b70:	80 91 13 05 	lds	r24, 0x0513
    7b74:	90 91 14 05 	lds	r25, 0x0514
    7b78:	00 97       	sbiw	r24, 0x00	; 0
    7b7a:	29 f4       	brne	.+10     	; 0x7b86 <TimerM_Clock_fire+0x30>
        postTask(TimerM_HandleFire,7);
    7b7c:	81 e5       	ldi	r24, 0x51	; 81
    7b7e:	9c e3       	ldi	r25, 0x3C	; 60
    7b80:	67 e0       	ldi	r22, 0x07	; 7
    7b82:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
        }
      else {
        }
      ;

      TimerM_interval_outstanding += TimerM_Clock_getInterval() + 1;
    7b86:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <TimerM_Clock_getInterval>
    7b8a:	28 2f       	mov	r18, r24
    7b8c:	33 27       	eor	r19, r19
    7b8e:	80 91 13 05 	lds	r24, 0x0513
    7b92:	90 91 14 05 	lds	r25, 0x0514
    7b96:	82 0f       	add	r24, r18
    7b98:	93 1f       	adc	r25, r19
    7b9a:	01 96       	adiw	r24, 0x01	; 1
    7b9c:	90 93 14 05 	sts	0x0514, r25
    7ba0:	80 93 13 05 	sts	0x0513, r24
    }
    _atomic_end(_atomic); }
    7ba4:	89 81       	ldd	r24, Y+1	; 0x01
    7ba6:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
  return SUCCESS;
    7baa:	81 e0       	ldi	r24, 0x01	; 1
    7bac:	90 e0       	ldi	r25, 0x00	; 0
    7bae:	21 96       	adiw	r28, 0x01	; 1
    7bb0:	0f b6       	in	r0, 0x3f	; 63
    7bb2:	f8 94       	cli
    7bb4:	de bf       	out	0x3e, r29	; 62
    7bb6:	0f be       	out	0x3f, r0	; 63
    7bb8:	cd bf       	out	0x3d, r28	; 61
    7bba:	df 91       	pop	r29
    7bbc:	cf 91       	pop	r28
    7bbe:	08 95       	ret

00007bc0 <TimerM_StdControl_start>:
}


inline  
result_t TimerM_StdControl_start(void)
{
    7bc0:	cf 93       	push	r28
    7bc2:	df 93       	push	r29
    7bc4:	cd b7       	in	r28, 0x3d	; 61
    7bc6:	de b7       	in	r29, 0x3e	; 62
  return SUCCESS;
    7bc8:	81 e0       	ldi	r24, 0x01	; 1
    7bca:	90 e0       	ldi	r25, 0x00	; 0
    7bcc:	df 91       	pop	r29
    7bce:	cf 91       	pop	r28
    7bd0:	08 95       	ret

00007bd2 <TimerM_Clock_readCounter>:
}

inline uint8_t TimerM_Clock_readCounter(void){
    7bd2:	cf 93       	push	r28
    7bd4:	df 93       	push	r29
    7bd6:	cd b7       	in	r28, 0x3d	; 61
    7bd8:	de b7       	in	r29, 0x3e	; 62
    7bda:	21 97       	sbiw	r28, 0x01	; 1
    7bdc:	0f b6       	in	r0, 0x3f	; 63
    7bde:	f8 94       	cli
    7be0:	de bf       	out	0x3e, r29	; 62
    7be2:	0f be       	out	0x3f, r0	; 63
    7be4:	cd bf       	out	0x3d, r28	; 61
  unsigned char result;
  result = HPLClock_Clock_readCounter();
    7be6:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <HPLClock_Clock_readCounter>
    7bea:	89 83       	std	Y+1, r24	; 0x01
  return result;
    7bec:	89 81       	ldd	r24, Y+1	; 0x01
    7bee:	99 27       	eor	r25, r25
    7bf0:	21 96       	adiw	r28, 0x01	; 1
    7bf2:	0f b6       	in	r0, 0x3f	; 63
    7bf4:	f8 94       	cli
    7bf6:	de bf       	out	0x3e, r29	; 62
    7bf8:	0f be       	out	0x3f, r0	; 63
    7bfa:	cd bf       	out	0x3d, r28	; 61
    7bfc:	df 91       	pop	r29
    7bfe:	cf 91       	pop	r28
    7c00:	08 95       	ret

00007c02 <TimerM_Clock_getInterval>:
}


inline uint8_t TimerM_Clock_getInterval(void){
    7c02:	cf 93       	push	r28
    7c04:	df 93       	push	r29
    7c06:	cd b7       	in	r28, 0x3d	; 61
    7c08:	de b7       	in	r29, 0x3e	; 62
    7c0a:	21 97       	sbiw	r28, 0x01	; 1
    7c0c:	0f b6       	in	r0, 0x3f	; 63
    7c0e:	f8 94       	cli
    7c10:	de bf       	out	0x3e, r29	; 62
    7c12:	0f be       	out	0x3f, r0	; 63
    7c14:	cd bf       	out	0x3d, r28	; 61
  unsigned char result;

  result = HPLClock_Clock_getInterval();
    7c16:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <HPLClock_Clock_getInterval>
    7c1a:	89 83       	std	Y+1, r24	; 0x01

  return result;
    7c1c:	89 81       	ldd	r24, Y+1	; 0x01
    7c1e:	99 27       	eor	r25, r25
    7c20:	21 96       	adiw	r28, 0x01	; 1
    7c22:	0f b6       	in	r0, 0x3f	; 63
    7c24:	f8 94       	cli
    7c26:	de bf       	out	0x3e, r29	; 62
    7c28:	0f be       	out	0x3f, r0	; 63
    7c2a:	cd bf       	out	0x3d, r28	; 61
    7c2c:	df 91       	pop	r29
    7c2e:	cf 91       	pop	r28
    7c30:	08 95       	ret

00007c32 <TimerM_Clock_setInterval>:
}

inline void TimerM_Clock_setInterval(uint8_t arg_0xa362928){
    7c32:	cf 93       	push	r28
    7c34:	df 93       	push	r29
    7c36:	cd b7       	in	r28, 0x3d	; 61
    7c38:	de b7       	in	r29, 0x3e	; 62
    7c3a:	21 97       	sbiw	r28, 0x01	; 1
    7c3c:	0f b6       	in	r0, 0x3f	; 63
    7c3e:	f8 94       	cli
    7c40:	de bf       	out	0x3e, r29	; 62
    7c42:	0f be       	out	0x3f, r0	; 63
    7c44:	cd bf       	out	0x3d, r28	; 61
    7c46:	89 83       	std	Y+1, r24	; 0x01
  HPLClock_Clock_setInterval(arg_0xa362928);
    7c48:	89 81       	ldd	r24, Y+1	; 0x01
    7c4a:	0e 94 73 2d 	call	0x5ae6	; 0x5ae6 <HPLClock_Clock_setInterval>
    7c4e:	21 96       	adiw	r28, 0x01	; 1
    7c50:	0f b6       	in	r0, 0x3f	; 63
    7c52:	f8 94       	cli
    7c54:	de bf       	out	0x3e, r29	; 62
    7c56:	0f be       	out	0x3f, r0	; 63
    7c58:	cd bf       	out	0x3d, r28	; 61
    7c5a:	df 91       	pop	r29
    7c5c:	cf 91       	pop	r28
    7c5e:	08 95       	ret

00007c60 <getAdcParameterAddr>:
static uint16_t adc_returnvalue;


void* getAdcParameterAddr()
{
    7c60:	cf 93       	push	r28
    7c62:	df 93       	push	r29
    7c64:	cd b7       	in	r28, 0x3d	; 61
    7c66:	de b7       	in	r29, 0x3e	; 62
	 return (void *)adc_parameter;   	
    7c68:	88 ec       	ldi	r24, 0xC8	; 200
    7c6a:	93 e0       	ldi	r25, 0x03	; 3
    7c6c:	df 91       	pop	r29
    7c6e:	cf 91       	pop	r28
    7c70:	08 95       	ret

00007c72 <getAdcReturnValueAddr>:
}


void* getAdcReturnValueAddr()
{
    7c72:	cf 93       	push	r28
    7c74:	df 93       	push	r29
    7c76:	cd b7       	in	r28, 0x3d	; 61
    7c78:	de b7       	in	r29, 0x3e	; 62
   return (void *)&adc_returnvalue;	
    7c7a:	84 ed       	ldi	r24, 0xD4	; 212
    7c7c:	93 e0       	ldi	r25, 0x03	; 3
    7c7e:	df 91       	pop	r29
    7c80:	cf 91       	pop	r28
    7c82:	08 95       	ret

00007c84 <__vector_21>:
}


//the definitions of adc implementations 

#define adc_on() ADCSRA |= (1 << ADEN) | (1 << ADIE) | (1 << ADIF)
#define adc_off() ADCSRA &= ~(1 << ADEN)

//The critical ISR function to come back when the interrupt of ADC finishes 
ISR( ADC_vect ) {
    7c84:	1f 92       	push	r1
    7c86:	0f 92       	push	r0
    7c88:	0f b6       	in	r0, 0x3f	; 63
    7c8a:	0f 92       	push	r0
    7c8c:	11 24       	eor	r1, r1
    7c8e:	8f 93       	push	r24
    7c90:	9f 93       	push	r25
    7c92:	af 93       	push	r26
    7c94:	bf 93       	push	r27
    7c96:	ef 93       	push	r30
    7c98:	ff 93       	push	r31
    7c9a:	cf 93       	push	r28
    7c9c:	df 93       	push	r29
    7c9e:	cd b7       	in	r28, 0x3d	; 61
    7ca0:	de b7       	in	r29, 0x3e	; 62

   ADCSRA |= _BV( ADIF );
    7ca2:	a6 e2       	ldi	r26, 0x26	; 38
    7ca4:	b0 e0       	ldi	r27, 0x00	; 0
    7ca6:	e6 e2       	ldi	r30, 0x26	; 38
    7ca8:	f0 e0       	ldi	r31, 0x00	; 0
    7caa:	80 81       	ld	r24, Z
    7cac:	80 61       	ori	r24, 0x10	; 16
    7cae:	8c 93       	st	X, r24
   ADCSRA &=  ~ _BV( ADEN ); // disable interrupt
    7cb0:	a6 e2       	ldi	r26, 0x26	; 38
    7cb2:	b0 e0       	ldi	r27, 0x00	; 0
    7cb4:	e6 e2       	ldi	r30, 0x26	; 38
    7cb6:	f0 e0       	ldi	r31, 0x00	; 0
    7cb8:	90 81       	ld	r25, Z
    7cba:	8f e7       	ldi	r24, 0x7F	; 127
    7cbc:	89 23       	and	r24, r25
    7cbe:	8c 93       	st	X, r24
    7cc0:	df 91       	pop	r29
    7cc2:	cf 91       	pop	r28
    7cc4:	ff 91       	pop	r31
    7cc6:	ef 91       	pop	r30
    7cc8:	bf 91       	pop	r27
    7cca:	af 91       	pop	r26
    7ccc:	9f 91       	pop	r25
    7cce:	8f 91       	pop	r24
    7cd0:	0f 90       	pop	r0
    7cd2:	0f be       	out	0x3f, r0	; 63
    7cd4:	0f 90       	pop	r0
    7cd6:	1f 90       	pop	r1
    7cd8:	18 95       	reti

00007cda <adcdriver_init_adc>:
//   flag = 1;
}

//-------------------------------------------------------------------------
void adcdriver_init_adc() {
    7cda:	cf 93       	push	r28
    7cdc:	df 93       	push	r29
    7cde:	cd b7       	in	r28, 0x3d	; 61
    7ce0:	de b7       	in	r29, 0x3e	; 62
   ADMUX = 0;
    7ce2:	e7 e2       	ldi	r30, 0x27	; 39
    7ce4:	f0 e0       	ldi	r31, 0x00	; 0
    7ce6:	10 82       	st	Z, r1
   ADCSRA = _BV( ADIE ) | 6; // does not enable interrupt and set prescaler to 64
    7ce8:	e6 e2       	ldi	r30, 0x26	; 38
    7cea:	f0 e0       	ldi	r31, 0x00	; 0
    7cec:	8e e0       	ldi	r24, 0x0E	; 14
    7cee:	80 83       	st	Z, r24
    7cf0:	df 91       	pop	r29
    7cf2:	cf 91       	pop	r28
    7cf4:	08 95       	ret

00007cf6 <get_adc>:
}

//poll based approach. After all, requrieing another adc thread is just too expensive!
uint16_t get_adc( int channel ) {
    7cf6:	cf 93       	push	r28
    7cf8:	df 93       	push	r29
    7cfa:	cd b7       	in	r28, 0x3d	; 61
    7cfc:	de b7       	in	r29, 0x3e	; 62
    7cfe:	24 97       	sbiw	r28, 0x04	; 4
    7d00:	0f b6       	in	r0, 0x3f	; 63
    7d02:	f8 94       	cli
    7d04:	de bf       	out	0x3e, r29	; 62
    7d06:	0f be       	out	0x3f, r0	; 63
    7d08:	cd bf       	out	0x3d, r28	; 61
    7d0a:	9c 83       	std	Y+4, r25	; 0x04
    7d0c:	8b 83       	std	Y+3, r24	; 0x03
   uint16_t reading;
   ADMUX = 0;
    7d0e:	e7 e2       	ldi	r30, 0x27	; 39
    7d10:	f0 e0       	ldi	r31, 0x00	; 0
    7d12:	10 82       	st	Z, r1
   ADMUX |= ( channel& 0x1F );
    7d14:	a7 e2       	ldi	r26, 0x27	; 39
    7d16:	b0 e0       	ldi	r27, 0x00	; 0
    7d18:	e7 e2       	ldi	r30, 0x27	; 39
    7d1a:	f0 e0       	ldi	r31, 0x00	; 0
    7d1c:	80 81       	ld	r24, Z
    7d1e:	98 2f       	mov	r25, r24
    7d20:	8b 81       	ldd	r24, Y+3	; 0x03
    7d22:	8f 71       	andi	r24, 0x1F	; 31
    7d24:	89 2b       	or	r24, r25
    7d26:	8c 93       	st	X, r24
   ADCSRA &=  ~ ( 1 << ADIE );
    7d28:	a6 e2       	ldi	r26, 0x26	; 38
    7d2a:	b0 e0       	ldi	r27, 0x00	; 0
    7d2c:	e6 e2       	ldi	r30, 0x26	; 38
    7d2e:	f0 e0       	ldi	r31, 0x00	; 0
    7d30:	80 81       	ld	r24, Z
    7d32:	87 7f       	andi	r24, 0xF7	; 247
    7d34:	8c 93       	st	X, r24
   ADCSRA |= ( 1 << ADIF );
    7d36:	a6 e2       	ldi	r26, 0x26	; 38
    7d38:	b0 e0       	ldi	r27, 0x00	; 0
    7d3a:	e6 e2       	ldi	r30, 0x26	; 38
    7d3c:	f0 e0       	ldi	r31, 0x00	; 0
    7d3e:	80 81       	ld	r24, Z
    7d40:	80 61       	ori	r24, 0x10	; 16
    7d42:	8c 93       	st	X, r24
   ADCSRA |= ( 1 << ADEN ) | ( 1 << ADSC );
    7d44:	a6 e2       	ldi	r26, 0x26	; 38
    7d46:	b0 e0       	ldi	r27, 0x00	; 0
    7d48:	e6 e2       	ldi	r30, 0x26	; 38
    7d4a:	f0 e0       	ldi	r31, 0x00	; 0
    7d4c:	80 81       	ld	r24, Z
    7d4e:	80 6c       	ori	r24, 0xC0	; 192
    7d50:	8c 93       	st	X, r24

   // start conversion
   while ( ADCSRA& ( 1 << ADSC ))
    7d52:	e6 e2       	ldi	r30, 0x26	; 38
    7d54:	f0 e0       	ldi	r31, 0x00	; 0
    7d56:	80 81       	ld	r24, Z
    7d58:	99 27       	eor	r25, r25
    7d5a:	80 74       	andi	r24, 0x40	; 64
    7d5c:	90 70       	andi	r25, 0x00	; 0
    7d5e:	00 97       	sbiw	r24, 0x00	; 0
    7d60:	c1 f7       	brne	.-16     	; 0x7d52 <get_adc+0x5c>
      ;
   //the interrupt based adc is currently not used. 
   
   //while (flag == 0); 
   //flag = 0; 
   
   reading = ADCL;
    7d62:	e4 e2       	ldi	r30, 0x24	; 36
    7d64:	f0 e0       	ldi	r31, 0x00	; 0
    7d66:	80 81       	ld	r24, Z
    7d68:	99 27       	eor	r25, r25
    7d6a:	9a 83       	std	Y+2, r25	; 0x02
    7d6c:	89 83       	std	Y+1, r24	; 0x01
   reading |= ( ADCH& 3 ) << 8;
    7d6e:	e5 e2       	ldi	r30, 0x25	; 37
    7d70:	f0 e0       	ldi	r31, 0x00	; 0
    7d72:	80 81       	ld	r24, Z
    7d74:	99 27       	eor	r25, r25
    7d76:	83 70       	andi	r24, 0x03	; 3
    7d78:	90 70       	andi	r25, 0x00	; 0
    7d7a:	98 2f       	mov	r25, r24
    7d7c:	88 27       	eor	r24, r24
    7d7e:	9c 01       	movw	r18, r24
    7d80:	89 81       	ldd	r24, Y+1	; 0x01
    7d82:	9a 81       	ldd	r25, Y+2	; 0x02
    7d84:	82 2b       	or	r24, r18
    7d86:	93 2b       	or	r25, r19
    7d88:	9a 83       	std	Y+2, r25	; 0x02
    7d8a:	89 83       	std	Y+1, r24	; 0x01
   ADCSRA &=  ~ _BV( ADEN );
    7d8c:	a6 e2       	ldi	r26, 0x26	; 38
    7d8e:	b0 e0       	ldi	r27, 0x00	; 0
    7d90:	e6 e2       	ldi	r30, 0x26	; 38
    7d92:	f0 e0       	ldi	r31, 0x00	; 0
    7d94:	90 81       	ld	r25, Z
    7d96:	8f e7       	ldi	r24, 0x7F	; 127
    7d98:	89 23       	and	r24, r25
    7d9a:	8c 93       	st	X, r24
   return reading;
    7d9c:	89 81       	ldd	r24, Y+1	; 0x01
    7d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    7da0:	24 96       	adiw	r28, 0x04	; 4
    7da2:	0f b6       	in	r0, 0x3f	; 63
    7da4:	f8 94       	cli
    7da6:	de bf       	out	0x3e, r29	; 62
    7da8:	0f be       	out	0x3f, r0	; 63
    7daa:	cd bf       	out	0x3d, r28	; 61
    7dac:	df 91       	pop	r29
    7dae:	cf 91       	pop	r28
    7db0:	08 95       	ret

00007db2 <get_light>:
}

//-------------------------------------------------------------------------
uint16_t get_light() {
    7db2:	cf 93       	push	r28
    7db4:	df 93       	push	r29
    7db6:	cd b7       	in	r28, 0x3d	; 61
    7db8:	de b7       	in	r29, 0x3e	; 62
    7dba:	22 97       	sbiw	r28, 0x02	; 2
    7dbc:	0f b6       	in	r0, 0x3f	; 63
    7dbe:	f8 94       	cli
    7dc0:	de bf       	out	0x3e, r29	; 62
    7dc2:	0f be       	out	0x3f, r0	; 63
    7dc4:	cd bf       	out	0x3d, r28	; 61
   uint16_t reading;
   PORTE &=  ~ _BV( 6 );
    7dc6:	a3 e2       	ldi	r26, 0x23	; 35
    7dc8:	b0 e0       	ldi	r27, 0x00	; 0
    7dca:	e3 e2       	ldi	r30, 0x23	; 35
    7dcc:	f0 e0       	ldi	r31, 0x00	; 0
    7dce:	80 81       	ld	r24, Z
    7dd0:	8f 7b       	andi	r24, 0xBF	; 191
    7dd2:	8c 93       	st	X, r24
   DDRE &=  ~ _BV( 6 );
    7dd4:	a2 e2       	ldi	r26, 0x22	; 34
    7dd6:	b0 e0       	ldi	r27, 0x00	; 0
    7dd8:	e2 e2       	ldi	r30, 0x22	; 34
    7dda:	f0 e0       	ldi	r31, 0x00	; 0
    7ddc:	80 81       	ld	r24, Z
    7dde:	8f 7b       	andi	r24, 0xBF	; 191
    7de0:	8c 93       	st	X, r24
   PORTE |= _BV( 5 );
    7de2:	a3 e2       	ldi	r26, 0x23	; 35
    7de4:	b0 e0       	ldi	r27, 0x00	; 0
    7de6:	e3 e2       	ldi	r30, 0x23	; 35
    7de8:	f0 e0       	ldi	r31, 0x00	; 0
    7dea:	80 81       	ld	r24, Z
    7dec:	80 62       	ori	r24, 0x20	; 32
    7dee:	8c 93       	st	X, r24
   DDRE |= _BV( 5 );
    7df0:	a2 e2       	ldi	r26, 0x22	; 34
    7df2:	b0 e0       	ldi	r27, 0x00	; 0
    7df4:	e2 e2       	ldi	r30, 0x22	; 34
    7df6:	f0 e0       	ldi	r31, 0x00	; 0
    7df8:	80 81       	ld	r24, Z
    7dfa:	80 62       	ori	r24, 0x20	; 32
    7dfc:	8c 93       	st	X, r24
   reading = get_adc( LIGHT_CHANNEL );
    7dfe:	81 e0       	ldi	r24, 0x01	; 1
    7e00:	90 e0       	ldi	r25, 0x00	; 0
    7e02:	0e 94 7b 3e 	call	0x7cf6	; 0x7cf6 <get_adc>
    7e06:	9a 83       	std	Y+2, r25	; 0x02
    7e08:	89 83       	std	Y+1, r24	; 0x01
   PORTE &=  ~ _BV( 5 );
    7e0a:	a3 e2       	ldi	r26, 0x23	; 35
    7e0c:	b0 e0       	ldi	r27, 0x00	; 0
    7e0e:	e3 e2       	ldi	r30, 0x23	; 35
    7e10:	f0 e0       	ldi	r31, 0x00	; 0
    7e12:	80 81       	ld	r24, Z
    7e14:	8f 7d       	andi	r24, 0xDF	; 223
    7e16:	8c 93       	st	X, r24
   DDRE &=  ~ _BV( 5 );
    7e18:	a2 e2       	ldi	r26, 0x22	; 34
    7e1a:	b0 e0       	ldi	r27, 0x00	; 0
    7e1c:	e2 e2       	ldi	r30, 0x22	; 34
    7e1e:	f0 e0       	ldi	r31, 0x00	; 0
    7e20:	80 81       	ld	r24, Z
    7e22:	8f 7d       	andi	r24, 0xDF	; 223
    7e24:	8c 93       	st	X, r24
   return reading;
    7e26:	89 81       	ldd	r24, Y+1	; 0x01
    7e28:	9a 81       	ldd	r25, Y+2	; 0x02
    7e2a:	22 96       	adiw	r28, 0x02	; 2
    7e2c:	0f b6       	in	r0, 0x3f	; 63
    7e2e:	f8 94       	cli
    7e30:	de bf       	out	0x3e, r29	; 62
    7e32:	0f be       	out	0x3f, r0	; 63
    7e34:	cd bf       	out	0x3d, r28	; 61
    7e36:	df 91       	pop	r29
    7e38:	cf 91       	pop	r28
    7e3a:	08 95       	ret

00007e3c <get_temp>:
}


//-------------------------------------------------------------------------
uint16_t get_temp() {
    7e3c:	cf 93       	push	r28
    7e3e:	df 93       	push	r29
    7e40:	cd b7       	in	r28, 0x3d	; 61
    7e42:	de b7       	in	r29, 0x3e	; 62
    7e44:	22 97       	sbiw	r28, 0x02	; 2
    7e46:	0f b6       	in	r0, 0x3f	; 63
    7e48:	f8 94       	cli
    7e4a:	de bf       	out	0x3e, r29	; 62
    7e4c:	0f be       	out	0x3f, r0	; 63
    7e4e:	cd bf       	out	0x3d, r28	; 61
   uint16_t reading;
   PORTE &=  ~ _BV( 5 );
    7e50:	a3 e2       	ldi	r26, 0x23	; 35
    7e52:	b0 e0       	ldi	r27, 0x00	; 0
    7e54:	e3 e2       	ldi	r30, 0x23	; 35
    7e56:	f0 e0       	ldi	r31, 0x00	; 0
    7e58:	80 81       	ld	r24, Z
    7e5a:	8f 7d       	andi	r24, 0xDF	; 223
    7e5c:	8c 93       	st	X, r24
   DDRE &=  ~ _BV( 5 );
    7e5e:	a2 e2       	ldi	r26, 0x22	; 34
    7e60:	b0 e0       	ldi	r27, 0x00	; 0
    7e62:	e2 e2       	ldi	r30, 0x22	; 34
    7e64:	f0 e0       	ldi	r31, 0x00	; 0
    7e66:	80 81       	ld	r24, Z
    7e68:	8f 7d       	andi	r24, 0xDF	; 223
    7e6a:	8c 93       	st	X, r24
   PORTE |= _BV( 6 );
    7e6c:	a3 e2       	ldi	r26, 0x23	; 35
    7e6e:	b0 e0       	ldi	r27, 0x00	; 0
    7e70:	e3 e2       	ldi	r30, 0x23	; 35
    7e72:	f0 e0       	ldi	r31, 0x00	; 0
    7e74:	80 81       	ld	r24, Z
    7e76:	80 64       	ori	r24, 0x40	; 64
    7e78:	8c 93       	st	X, r24
   DDRE |= _BV( 6 );
    7e7a:	a2 e2       	ldi	r26, 0x22	; 34
    7e7c:	b0 e0       	ldi	r27, 0x00	; 0
    7e7e:	e2 e2       	ldi	r30, 0x22	; 34
    7e80:	f0 e0       	ldi	r31, 0x00	; 0
    7e82:	80 81       	ld	r24, Z
    7e84:	80 64       	ori	r24, 0x40	; 64
    7e86:	8c 93       	st	X, r24
   reading = get_adc( TEMP_CHANNEL );
    7e88:	81 e0       	ldi	r24, 0x01	; 1
    7e8a:	90 e0       	ldi	r25, 0x00	; 0
    7e8c:	0e 94 7b 3e 	call	0x7cf6	; 0x7cf6 <get_adc>
    7e90:	9a 83       	std	Y+2, r25	; 0x02
    7e92:	89 83       	std	Y+1, r24	; 0x01
   PORTE &=  ~ _BV( 6 );
    7e94:	a3 e2       	ldi	r26, 0x23	; 35
    7e96:	b0 e0       	ldi	r27, 0x00	; 0
    7e98:	e3 e2       	ldi	r30, 0x23	; 35
    7e9a:	f0 e0       	ldi	r31, 0x00	; 0
    7e9c:	80 81       	ld	r24, Z
    7e9e:	8f 7b       	andi	r24, 0xBF	; 191
    7ea0:	8c 93       	st	X, r24
   DDRE &=  ~ _BV( 6 );
    7ea2:	a2 e2       	ldi	r26, 0x22	; 34
    7ea4:	b0 e0       	ldi	r27, 0x00	; 0
    7ea6:	e2 e2       	ldi	r30, 0x22	; 34
    7ea8:	f0 e0       	ldi	r31, 0x00	; 0
    7eaa:	80 81       	ld	r24, Z
    7eac:	8f 7b       	andi	r24, 0xBF	; 191
    7eae:	8c 93       	st	X, r24
   return reading;
    7eb0:	89 81       	ldd	r24, Y+1	; 0x01
    7eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    7eb4:	22 96       	adiw	r28, 0x02	; 2
    7eb6:	0f b6       	in	r0, 0x3f	; 63
    7eb8:	f8 94       	cli
    7eba:	de bf       	out	0x3e, r29	; 62
    7ebc:	0f be       	out	0x3f, r0	; 63
    7ebe:	cd bf       	out	0x3d, r28	; 61
    7ec0:	df 91       	pop	r29
    7ec2:	cf 91       	pop	r28
    7ec4:	08 95       	ret

00007ec6 <get_magx>:
}

//-------------------------------------------------------------------------
uint16_t get_magx() {
    7ec6:	cf 93       	push	r28
    7ec8:	df 93       	push	r29
    7eca:	cd b7       	in	r28, 0x3d	; 61
    7ecc:	de b7       	in	r29, 0x3e	; 62
    7ece:	22 97       	sbiw	r28, 0x02	; 2
    7ed0:	0f b6       	in	r0, 0x3f	; 63
    7ed2:	f8 94       	cli
    7ed4:	de bf       	out	0x3e, r29	; 62
    7ed6:	0f be       	out	0x3f, r0	; 63
    7ed8:	cd bf       	out	0x3d, r28	; 61
   uint16_t reading;
   DDRC |= _BV( 5 );
    7eda:	a4 e3       	ldi	r26, 0x34	; 52
    7edc:	b0 e0       	ldi	r27, 0x00	; 0
    7ede:	e4 e3       	ldi	r30, 0x34	; 52
    7ee0:	f0 e0       	ldi	r31, 0x00	; 0
    7ee2:	80 81       	ld	r24, Z
    7ee4:	80 62       	ori	r24, 0x20	; 32
    7ee6:	8c 93       	st	X, r24
   PORTC |= _BV( 5 );
    7ee8:	a5 e3       	ldi	r26, 0x35	; 53
    7eea:	b0 e0       	ldi	r27, 0x00	; 0
    7eec:	e5 e3       	ldi	r30, 0x35	; 53
    7eee:	f0 e0       	ldi	r31, 0x00	; 0
    7ef0:	80 81       	ld	r24, Z
    7ef2:	80 62       	ori	r24, 0x20	; 32
    7ef4:	8c 93       	st	X, r24
   reading = get_adc( MAGX_CHANNEL );
    7ef6:	85 e0       	ldi	r24, 0x05	; 5
    7ef8:	90 e0       	ldi	r25, 0x00	; 0
    7efa:	0e 94 7b 3e 	call	0x7cf6	; 0x7cf6 <get_adc>
    7efe:	9a 83       	std	Y+2, r25	; 0x02
    7f00:	89 83       	std	Y+1, r24	; 0x01
   DDRC &=  ~ _BV( 5 );
    7f02:	a4 e3       	ldi	r26, 0x34	; 52
    7f04:	b0 e0       	ldi	r27, 0x00	; 0
    7f06:	e4 e3       	ldi	r30, 0x34	; 52
    7f08:	f0 e0       	ldi	r31, 0x00	; 0
    7f0a:	80 81       	ld	r24, Z
    7f0c:	8f 7d       	andi	r24, 0xDF	; 223
    7f0e:	8c 93       	st	X, r24
   PORTC &=  ~ _BV( 5 );
    7f10:	a5 e3       	ldi	r26, 0x35	; 53
    7f12:	b0 e0       	ldi	r27, 0x00	; 0
    7f14:	e5 e3       	ldi	r30, 0x35	; 53
    7f16:	f0 e0       	ldi	r31, 0x00	; 0
    7f18:	80 81       	ld	r24, Z
    7f1a:	8f 7d       	andi	r24, 0xDF	; 223
    7f1c:	8c 93       	st	X, r24
   return reading;
    7f1e:	89 81       	ldd	r24, Y+1	; 0x01
    7f20:	9a 81       	ldd	r25, Y+2	; 0x02
    7f22:	22 96       	adiw	r28, 0x02	; 2
    7f24:	0f b6       	in	r0, 0x3f	; 63
    7f26:	f8 94       	cli
    7f28:	de bf       	out	0x3e, r29	; 62
    7f2a:	0f be       	out	0x3f, r0	; 63
    7f2c:	cd bf       	out	0x3d, r28	; 61
    7f2e:	df 91       	pop	r29
    7f30:	cf 91       	pop	r28
    7f32:	08 95       	ret

00007f34 <get_magy>:
}

//-------------------------------------------------------------------------
uint16_t get_magy() {
    7f34:	cf 93       	push	r28
    7f36:	df 93       	push	r29
    7f38:	cd b7       	in	r28, 0x3d	; 61
    7f3a:	de b7       	in	r29, 0x3e	; 62
    7f3c:	22 97       	sbiw	r28, 0x02	; 2
    7f3e:	0f b6       	in	r0, 0x3f	; 63
    7f40:	f8 94       	cli
    7f42:	de bf       	out	0x3e, r29	; 62
    7f44:	0f be       	out	0x3f, r0	; 63
    7f46:	cd bf       	out	0x3d, r28	; 61
   uint16_t reading;
   DDRC |= _BV( 5 );
    7f48:	a4 e3       	ldi	r26, 0x34	; 52
    7f4a:	b0 e0       	ldi	r27, 0x00	; 0
    7f4c:	e4 e3       	ldi	r30, 0x34	; 52
    7f4e:	f0 e0       	ldi	r31, 0x00	; 0
    7f50:	80 81       	ld	r24, Z
    7f52:	80 62       	ori	r24, 0x20	; 32
    7f54:	8c 93       	st	X, r24
   PORTC |= _BV( 5 );
    7f56:	a5 e3       	ldi	r26, 0x35	; 53
    7f58:	b0 e0       	ldi	r27, 0x00	; 0
    7f5a:	e5 e3       	ldi	r30, 0x35	; 53
    7f5c:	f0 e0       	ldi	r31, 0x00	; 0
    7f5e:	80 81       	ld	r24, Z
    7f60:	80 62       	ori	r24, 0x20	; 32
    7f62:	8c 93       	st	X, r24
   reading = get_adc( MAGY_CHANNEL );
    7f64:	86 e0       	ldi	r24, 0x06	; 6
    7f66:	90 e0       	ldi	r25, 0x00	; 0
    7f68:	0e 94 7b 3e 	call	0x7cf6	; 0x7cf6 <get_adc>
    7f6c:	9a 83       	std	Y+2, r25	; 0x02
    7f6e:	89 83       	std	Y+1, r24	; 0x01
   DDRC &=  ~ _BV( 5 );
    7f70:	a4 e3       	ldi	r26, 0x34	; 52
    7f72:	b0 e0       	ldi	r27, 0x00	; 0
    7f74:	e4 e3       	ldi	r30, 0x34	; 52
    7f76:	f0 e0       	ldi	r31, 0x00	; 0
    7f78:	80 81       	ld	r24, Z
    7f7a:	8f 7d       	andi	r24, 0xDF	; 223
    7f7c:	8c 93       	st	X, r24
   PORTC &=  ~ _BV( 5 );
    7f7e:	a5 e3       	ldi	r26, 0x35	; 53
    7f80:	b0 e0       	ldi	r27, 0x00	; 0
    7f82:	e5 e3       	ldi	r30, 0x35	; 53
    7f84:	f0 e0       	ldi	r31, 0x00	; 0
    7f86:	80 81       	ld	r24, Z
    7f88:	8f 7d       	andi	r24, 0xDF	; 223
    7f8a:	8c 93       	st	X, r24
   return reading;
    7f8c:	89 81       	ldd	r24, Y+1	; 0x01
    7f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    7f90:	22 96       	adiw	r28, 0x02	; 2
    7f92:	0f b6       	in	r0, 0x3f	; 63
    7f94:	f8 94       	cli
    7f96:	de bf       	out	0x3e, r29	; 62
    7f98:	0f be       	out	0x3f, r0	; 63
    7f9a:	cd bf       	out	0x3d, r28	; 61
    7f9c:	df 91       	pop	r29
    7f9e:	cf 91       	pop	r28
    7fa0:	08 95       	ret

00007fa2 <get_accx>:
}

//-------------------------------------------------------------------------
uint16_t get_accx() {
    7fa2:	cf 93       	push	r28
    7fa4:	df 93       	push	r29
    7fa6:	cd b7       	in	r28, 0x3d	; 61
    7fa8:	de b7       	in	r29, 0x3e	; 62
    7faa:	22 97       	sbiw	r28, 0x02	; 2
    7fac:	0f b6       	in	r0, 0x3f	; 63
    7fae:	f8 94       	cli
    7fb0:	de bf       	out	0x3e, r29	; 62
    7fb2:	0f be       	out	0x3f, r0	; 63
    7fb4:	cd bf       	out	0x3d, r28	; 61
   uint16_t reading;
   DDRC |= _BV( 4 );
    7fb6:	a4 e3       	ldi	r26, 0x34	; 52
    7fb8:	b0 e0       	ldi	r27, 0x00	; 0
    7fba:	e4 e3       	ldi	r30, 0x34	; 52
    7fbc:	f0 e0       	ldi	r31, 0x00	; 0
    7fbe:	80 81       	ld	r24, Z
    7fc0:	80 61       	ori	r24, 0x10	; 16
    7fc2:	8c 93       	st	X, r24
   PORTC |= _BV( 4 );
    7fc4:	a5 e3       	ldi	r26, 0x35	; 53
    7fc6:	b0 e0       	ldi	r27, 0x00	; 0
    7fc8:	e5 e3       	ldi	r30, 0x35	; 53
    7fca:	f0 e0       	ldi	r31, 0x00	; 0
    7fcc:	80 81       	ld	r24, Z
    7fce:	80 61       	ori	r24, 0x10	; 16
    7fd0:	8c 93       	st	X, r24
   reading = get_adc( ACCX_CHANNEL );
    7fd2:	83 e0       	ldi	r24, 0x03	; 3
    7fd4:	90 e0       	ldi	r25, 0x00	; 0
    7fd6:	0e 94 7b 3e 	call	0x7cf6	; 0x7cf6 <get_adc>
    7fda:	9a 83       	std	Y+2, r25	; 0x02
    7fdc:	89 83       	std	Y+1, r24	; 0x01
   DDRC &=  ~ _BV( 4 );
    7fde:	a4 e3       	ldi	r26, 0x34	; 52
    7fe0:	b0 e0       	ldi	r27, 0x00	; 0
    7fe2:	e4 e3       	ldi	r30, 0x34	; 52
    7fe4:	f0 e0       	ldi	r31, 0x00	; 0
    7fe6:	80 81       	ld	r24, Z
    7fe8:	8f 7e       	andi	r24, 0xEF	; 239
    7fea:	8c 93       	st	X, r24
   PORTC &=  ~ _BV( 4 );
    7fec:	a5 e3       	ldi	r26, 0x35	; 53
    7fee:	b0 e0       	ldi	r27, 0x00	; 0
    7ff0:	e5 e3       	ldi	r30, 0x35	; 53
    7ff2:	f0 e0       	ldi	r31, 0x00	; 0
    7ff4:	80 81       	ld	r24, Z
    7ff6:	8f 7e       	andi	r24, 0xEF	; 239
    7ff8:	8c 93       	st	X, r24
   return reading;
    7ffa:	89 81       	ldd	r24, Y+1	; 0x01
    7ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    7ffe:	22 96       	adiw	r28, 0x02	; 2
    8000:	0f b6       	in	r0, 0x3f	; 63
    8002:	f8 94       	cli
    8004:	de bf       	out	0x3e, r29	; 62
    8006:	0f be       	out	0x3f, r0	; 63
    8008:	cd bf       	out	0x3d, r28	; 61
    800a:	df 91       	pop	r29
    800c:	cf 91       	pop	r28
    800e:	08 95       	ret

00008010 <get_accy>:
}

//-------------------------------------------------------------------------
uint16_t get_accy() {
    8010:	cf 93       	push	r28
    8012:	df 93       	push	r29
    8014:	cd b7       	in	r28, 0x3d	; 61
    8016:	de b7       	in	r29, 0x3e	; 62
    8018:	22 97       	sbiw	r28, 0x02	; 2
    801a:	0f b6       	in	r0, 0x3f	; 63
    801c:	f8 94       	cli
    801e:	de bf       	out	0x3e, r29	; 62
    8020:	0f be       	out	0x3f, r0	; 63
    8022:	cd bf       	out	0x3d, r28	; 61
   uint16_t reading;
   DDRC |= _BV( 4 );
    8024:	a4 e3       	ldi	r26, 0x34	; 52
    8026:	b0 e0       	ldi	r27, 0x00	; 0
    8028:	e4 e3       	ldi	r30, 0x34	; 52
    802a:	f0 e0       	ldi	r31, 0x00	; 0
    802c:	80 81       	ld	r24, Z
    802e:	80 61       	ori	r24, 0x10	; 16
    8030:	8c 93       	st	X, r24
   PORTC |= _BV( 4 );
    8032:	a5 e3       	ldi	r26, 0x35	; 53
    8034:	b0 e0       	ldi	r27, 0x00	; 0
    8036:	e5 e3       	ldi	r30, 0x35	; 53
    8038:	f0 e0       	ldi	r31, 0x00	; 0
    803a:	80 81       	ld	r24, Z
    803c:	80 61       	ori	r24, 0x10	; 16
    803e:	8c 93       	st	X, r24
   reading = get_adc( ACCY_CHANNEL );
    8040:	84 e0       	ldi	r24, 0x04	; 4
    8042:	90 e0       	ldi	r25, 0x00	; 0
    8044:	0e 94 7b 3e 	call	0x7cf6	; 0x7cf6 <get_adc>
    8048:	9a 83       	std	Y+2, r25	; 0x02
    804a:	89 83       	std	Y+1, r24	; 0x01
   DDRC &=  ~ _BV( 4 );
    804c:	a4 e3       	ldi	r26, 0x34	; 52
    804e:	b0 e0       	ldi	r27, 0x00	; 0
    8050:	e4 e3       	ldi	r30, 0x34	; 52
    8052:	f0 e0       	ldi	r31, 0x00	; 0
    8054:	80 81       	ld	r24, Z
    8056:	8f 7e       	andi	r24, 0xEF	; 239
    8058:	8c 93       	st	X, r24
   PORTC &=  ~ _BV( 4 );
    805a:	a5 e3       	ldi	r26, 0x35	; 53
    805c:	b0 e0       	ldi	r27, 0x00	; 0
    805e:	e5 e3       	ldi	r30, 0x35	; 53
    8060:	f0 e0       	ldi	r31, 0x00	; 0
    8062:	80 81       	ld	r24, Z
    8064:	8f 7e       	andi	r24, 0xEF	; 239
    8066:	8c 93       	st	X, r24
   return reading;
    8068:	89 81       	ldd	r24, Y+1	; 0x01
    806a:	9a 81       	ldd	r25, Y+2	; 0x02
    806c:	22 96       	adiw	r28, 0x02	; 2
    806e:	0f b6       	in	r0, 0x3f	; 63
    8070:	f8 94       	cli
    8072:	de bf       	out	0x3e, r29	; 62
    8074:	0f be       	out	0x3f, r0	; 63
    8076:	cd bf       	out	0x3d, r28	; 61
    8078:	df 91       	pop	r29
    807a:	cf 91       	pop	r28
    807c:	08 95       	ret

0000807e <get_light_task>:
}


//-------------------------------------------------------------------------
void get_light_task() {
    807e:	cf 93       	push	r28
    8080:	df 93       	push	r29
    8082:	cd b7       	in	r28, 0x3d	; 61
    8084:	de b7       	in	r29, 0x3e	; 62
    8086:	22 97       	sbiw	r28, 0x02	; 2
    8088:	0f b6       	in	r0, 0x3f	; 63
    808a:	f8 94       	cli
    808c:	de bf       	out	0x3e, r29	; 62
    808e:	0f be       	out	0x3f, r0	; 63
    8090:	cd bf       	out	0x3d, r28	; 61
   uint16_t reading;
   reading = get_light();
    8092:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <get_light>
    8096:	9a 83       	std	Y+2, r25	; 0x02
    8098:	89 83       	std	Y+1, r24	; 0x01
   adc_returnvalue = reading;
    809a:	89 81       	ldd	r24, Y+1	; 0x01
    809c:	9a 81       	ldd	r25, Y+2	; 0x02
    809e:	90 93 d5 03 	sts	0x03D5, r25
    80a2:	80 93 d4 03 	sts	0x03D4, r24
    80a6:	22 96       	adiw	r28, 0x02	; 2
    80a8:	0f b6       	in	r0, 0x3f	; 63
    80aa:	f8 94       	cli
    80ac:	de bf       	out	0x3e, r29	; 62
    80ae:	0f be       	out	0x3f, r0	; 63
    80b0:	cd bf       	out	0x3d, r28	; 61
    80b2:	df 91       	pop	r29
    80b4:	cf 91       	pop	r28
    80b6:	08 95       	ret

000080b8 <get_temp_task>:
   return ;
}

//-------------------------------------------------------------------------
void get_temp_task() {
    80b8:	cf 93       	push	r28
    80ba:	df 93       	push	r29
    80bc:	cd b7       	in	r28, 0x3d	; 61
    80be:	de b7       	in	r29, 0x3e	; 62
    80c0:	22 97       	sbiw	r28, 0x02	; 2
    80c2:	0f b6       	in	r0, 0x3f	; 63
    80c4:	f8 94       	cli
    80c6:	de bf       	out	0x3e, r29	; 62
    80c8:	0f be       	out	0x3f, r0	; 63
    80ca:	cd bf       	out	0x3d, r28	; 61
   uint16_t reading;
   reading = get_temp();
    80cc:	0e 94 1e 3f 	call	0x7e3c	; 0x7e3c <get_temp>
    80d0:	9a 83       	std	Y+2, r25	; 0x02
    80d2:	89 83       	std	Y+1, r24	; 0x01
   adc_returnvalue = reading;
    80d4:	89 81       	ldd	r24, Y+1	; 0x01
    80d6:	9a 81       	ldd	r25, Y+2	; 0x02
    80d8:	90 93 d5 03 	sts	0x03D5, r25
    80dc:	80 93 d4 03 	sts	0x03D4, r24
    80e0:	22 96       	adiw	r28, 0x02	; 2
    80e2:	0f b6       	in	r0, 0x3f	; 63
    80e4:	f8 94       	cli
    80e6:	de bf       	out	0x3e, r29	; 62
    80e8:	0f be       	out	0x3f, r0	; 63
    80ea:	cd bf       	out	0x3d, r28	; 61
    80ec:	df 91       	pop	r29
    80ee:	cf 91       	pop	r28
    80f0:	08 95       	ret

000080f2 <get_acc_task_x>:
   return ;
}

//-------------------------------------------------------------------------
void get_acc_task_x() {
    80f2:	cf 93       	push	r28
    80f4:	df 93       	push	r29
    80f6:	cd b7       	in	r28, 0x3d	; 61
    80f8:	de b7       	in	r29, 0x3e	; 62
    80fa:	22 97       	sbiw	r28, 0x02	; 2
    80fc:	0f b6       	in	r0, 0x3f	; 63
    80fe:	f8 94       	cli
    8100:	de bf       	out	0x3e, r29	; 62
    8102:	0f be       	out	0x3f, r0	; 63
    8104:	cd bf       	out	0x3d, r28	; 61
	uint16_t reading; 
  reading = get_accx();
    8106:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <get_accx>
    810a:	9a 83       	std	Y+2, r25	; 0x02
    810c:	89 83       	std	Y+1, r24	; 0x01
  adc_returnvalue = reading;
    810e:	89 81       	ldd	r24, Y+1	; 0x01
    8110:	9a 81       	ldd	r25, Y+2	; 0x02
    8112:	90 93 d5 03 	sts	0x03D5, r25
    8116:	80 93 d4 03 	sts	0x03D4, r24
    811a:	22 96       	adiw	r28, 0x02	; 2
    811c:	0f b6       	in	r0, 0x3f	; 63
    811e:	f8 94       	cli
    8120:	de bf       	out	0x3e, r29	; 62
    8122:	0f be       	out	0x3f, r0	; 63
    8124:	cd bf       	out	0x3d, r28	; 61
    8126:	df 91       	pop	r29
    8128:	cf 91       	pop	r28
    812a:	08 95       	ret

0000812c <get_acc_task_y>:
  return ;
}


//-------------------------------------------------------------------------
void get_acc_task_y() {
    812c:	cf 93       	push	r28
    812e:	df 93       	push	r29
    8130:	cd b7       	in	r28, 0x3d	; 61
    8132:	de b7       	in	r29, 0x3e	; 62
    8134:	22 97       	sbiw	r28, 0x02	; 2
    8136:	0f b6       	in	r0, 0x3f	; 63
    8138:	f8 94       	cli
    813a:	de bf       	out	0x3e, r29	; 62
    813c:	0f be       	out	0x3f, r0	; 63
    813e:	cd bf       	out	0x3d, r28	; 61
		uint16_t reading; 
  reading = get_accy();
    8140:	0e 94 08 40 	call	0x8010	; 0x8010 <get_accy>
    8144:	9a 83       	std	Y+2, r25	; 0x02
    8146:	89 83       	std	Y+1, r24	; 0x01
  adc_returnvalue = reading;
    8148:	89 81       	ldd	r24, Y+1	; 0x01
    814a:	9a 81       	ldd	r25, Y+2	; 0x02
    814c:	90 93 d5 03 	sts	0x03D5, r25
    8150:	80 93 d4 03 	sts	0x03D4, r24
    8154:	22 96       	adiw	r28, 0x02	; 2
    8156:	0f b6       	in	r0, 0x3f	; 63
    8158:	f8 94       	cli
    815a:	de bf       	out	0x3e, r29	; 62
    815c:	0f be       	out	0x3f, r0	; 63
    815e:	cd bf       	out	0x3d, r28	; 61
    8160:	df 91       	pop	r29
    8162:	cf 91       	pop	r28
    8164:	08 95       	ret

00008166 <get_mag_task_x>:
  return ;
}


//-------------------------------------------------------------------------
void get_mag_task_x() {
    8166:	cf 93       	push	r28
    8168:	df 93       	push	r29
    816a:	cd b7       	in	r28, 0x3d	; 61
    816c:	de b7       	in	r29, 0x3e	; 62
    816e:	22 97       	sbiw	r28, 0x02	; 2
    8170:	0f b6       	in	r0, 0x3f	; 63
    8172:	f8 94       	cli
    8174:	de bf       	out	0x3e, r29	; 62
    8176:	0f be       	out	0x3f, r0	; 63
    8178:	cd bf       	out	0x3d, r28	; 61
		uint16_t reading; 
  reading = get_magx();
    817a:	0e 94 63 3f 	call	0x7ec6	; 0x7ec6 <get_magx>
    817e:	9a 83       	std	Y+2, r25	; 0x02
    8180:	89 83       	std	Y+1, r24	; 0x01
  adc_returnvalue = reading;
    8182:	89 81       	ldd	r24, Y+1	; 0x01
    8184:	9a 81       	ldd	r25, Y+2	; 0x02
    8186:	90 93 d5 03 	sts	0x03D5, r25
    818a:	80 93 d4 03 	sts	0x03D4, r24
    818e:	22 96       	adiw	r28, 0x02	; 2
    8190:	0f b6       	in	r0, 0x3f	; 63
    8192:	f8 94       	cli
    8194:	de bf       	out	0x3e, r29	; 62
    8196:	0f be       	out	0x3f, r0	; 63
    8198:	cd bf       	out	0x3d, r28	; 61
    819a:	df 91       	pop	r29
    819c:	cf 91       	pop	r28
    819e:	08 95       	ret

000081a0 <get_mag_task_y>:
  return ;
}


//-------------------------------------------------------------------------
void get_mag_task_y() {
    81a0:	cf 93       	push	r28
    81a2:	df 93       	push	r29
    81a4:	cd b7       	in	r28, 0x3d	; 61
    81a6:	de b7       	in	r29, 0x3e	; 62
    81a8:	22 97       	sbiw	r28, 0x02	; 2
    81aa:	0f b6       	in	r0, 0x3f	; 63
    81ac:	f8 94       	cli
    81ae:	de bf       	out	0x3e, r29	; 62
    81b0:	0f be       	out	0x3f, r0	; 63
    81b2:	cd bf       	out	0x3d, r28	; 61
		uint16_t reading; 
  reading = get_magy();
    81b4:	0e 94 9a 3f 	call	0x7f34	; 0x7f34 <get_magy>
    81b8:	9a 83       	std	Y+2, r25	; 0x02
    81ba:	89 83       	std	Y+1, r24	; 0x01
  adc_returnvalue = reading;
    81bc:	89 81       	ldd	r24, Y+1	; 0x01
    81be:	9a 81       	ldd	r25, Y+2	; 0x02
    81c0:	90 93 d5 03 	sts	0x03D5, r25
    81c4:	80 93 d4 03 	sts	0x03D4, r24
    81c8:	22 96       	adiw	r28, 0x02	; 2
    81ca:	0f b6       	in	r0, 0x3f	; 63
    81cc:	f8 94       	cli
    81ce:	de bf       	out	0x3e, r29	; 62
    81d0:	0f be       	out	0x3f, r0	; 63
    81d2:	cd bf       	out	0x3d, r28	; 61
    81d4:	df 91       	pop	r29
    81d6:	cf 91       	pop	r28
    81d8:	08 95       	ret

000081da <ADCLight>:
#include "../../system/threads.h"

/** \brief the thread handle of the current thread */

void ADCLight() {
    81da:	cf 93       	push	r28
    81dc:	df 93       	push	r29
    81de:	cd b7       	in	r28, 0x3d	; 61
    81e0:	de b7       	in	r29, 0x3e	; 62
    81e2:	22 97       	sbiw	r28, 0x02	; 2
    81e4:	0f b6       	in	r0, 0x3f	; 63
    81e6:	f8 94       	cli
    81e8:	de bf       	out	0x3e, r29	; 62
    81ea:	0f be       	out	0x3f, r0	; 63
    81ec:	cd bf       	out	0x3d, r28	; 61
   int temp;
   temp = get_light();
    81ee:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <get_light>
    81f2:	9a 83       	std	Y+2, r25	; 0x02
    81f4:	89 83       	std	Y+1, r24	; 0x01
   current_thread->data.adcstate.adcreading = temp;
    81f6:	e0 91 da 08 	lds	r30, 0x08DA
    81fa:	f0 91 db 08 	lds	r31, 0x08DB
    81fe:	89 81       	ldd	r24, Y+1	; 0x01
    8200:	9a 81       	ldd	r25, Y+2	; 0x02
    8202:	94 8f       	std	Z+28, r25	; 0x1c
    8204:	83 8f       	std	Z+27, r24	; 0x1b
    8206:	22 96       	adiw	r28, 0x02	; 2
    8208:	0f b6       	in	r0, 0x3f	; 63
    820a:	f8 94       	cli
    820c:	de bf       	out	0x3e, r29	; 62
    820e:	0f be       	out	0x3f, r0	; 63
    8210:	cd bf       	out	0x3d, r28	; 61
    8212:	df 91       	pop	r29
    8214:	cf 91       	pop	r28
    8216:	08 95       	ret

00008218 <ADCTemp>:
   return ;
}

//-------------------------------------------------------------------------
void ADCTemp() {
    8218:	cf 93       	push	r28
    821a:	df 93       	push	r29
    821c:	cd b7       	in	r28, 0x3d	; 61
    821e:	de b7       	in	r29, 0x3e	; 62
    8220:	22 97       	sbiw	r28, 0x02	; 2
    8222:	0f b6       	in	r0, 0x3f	; 63
    8224:	f8 94       	cli
    8226:	de bf       	out	0x3e, r29	; 62
    8228:	0f be       	out	0x3f, r0	; 63
    822a:	cd bf       	out	0x3d, r28	; 61
   int temp;
   temp = get_temp();
    822c:	0e 94 1e 3f 	call	0x7e3c	; 0x7e3c <get_temp>
    8230:	9a 83       	std	Y+2, r25	; 0x02
    8232:	89 83       	std	Y+1, r24	; 0x01
   current_thread->data.adcstate.adcreading = temp;
    8234:	e0 91 da 08 	lds	r30, 0x08DA
    8238:	f0 91 db 08 	lds	r31, 0x08DB
    823c:	89 81       	ldd	r24, Y+1	; 0x01
    823e:	9a 81       	ldd	r25, Y+2	; 0x02
    8240:	94 8f       	std	Z+28, r25	; 0x1c
    8242:	83 8f       	std	Z+27, r24	; 0x1b
    8244:	22 96       	adiw	r28, 0x02	; 2
    8246:	0f b6       	in	r0, 0x3f	; 63
    8248:	f8 94       	cli
    824a:	de bf       	out	0x3e, r29	; 62
    824c:	0f be       	out	0x3f, r0	; 63
    824e:	cd bf       	out	0x3d, r28	; 61
    8250:	df 91       	pop	r29
    8252:	cf 91       	pop	r28
    8254:	08 95       	ret

00008256 <ADCMagX>:
   return ;
}

//-------------------------------------------------------------------------
void ADCMagX() {
    8256:	cf 93       	push	r28
    8258:	df 93       	push	r29
    825a:	cd b7       	in	r28, 0x3d	; 61
    825c:	de b7       	in	r29, 0x3e	; 62
    825e:	22 97       	sbiw	r28, 0x02	; 2
    8260:	0f b6       	in	r0, 0x3f	; 63
    8262:	f8 94       	cli
    8264:	de bf       	out	0x3e, r29	; 62
    8266:	0f be       	out	0x3f, r0	; 63
    8268:	cd bf       	out	0x3d, r28	; 61
   int temp;
   temp = get_magx();
    826a:	0e 94 63 3f 	call	0x7ec6	; 0x7ec6 <get_magx>
    826e:	9a 83       	std	Y+2, r25	; 0x02
    8270:	89 83       	std	Y+1, r24	; 0x01
   current_thread->data.adcstate.adcreading = temp;
    8272:	e0 91 da 08 	lds	r30, 0x08DA
    8276:	f0 91 db 08 	lds	r31, 0x08DB
    827a:	89 81       	ldd	r24, Y+1	; 0x01
    827c:	9a 81       	ldd	r25, Y+2	; 0x02
    827e:	94 8f       	std	Z+28, r25	; 0x1c
    8280:	83 8f       	std	Z+27, r24	; 0x1b
    8282:	22 96       	adiw	r28, 0x02	; 2
    8284:	0f b6       	in	r0, 0x3f	; 63
    8286:	f8 94       	cli
    8288:	de bf       	out	0x3e, r29	; 62
    828a:	0f be       	out	0x3f, r0	; 63
    828c:	cd bf       	out	0x3d, r28	; 61
    828e:	df 91       	pop	r29
    8290:	cf 91       	pop	r28
    8292:	08 95       	ret

00008294 <ADCMagY>:
   return ;
}

//-------------------------------------------------------------------------
void ADCMagY() {
    8294:	cf 93       	push	r28
    8296:	df 93       	push	r29
    8298:	cd b7       	in	r28, 0x3d	; 61
    829a:	de b7       	in	r29, 0x3e	; 62
    829c:	22 97       	sbiw	r28, 0x02	; 2
    829e:	0f b6       	in	r0, 0x3f	; 63
    82a0:	f8 94       	cli
    82a2:	de bf       	out	0x3e, r29	; 62
    82a4:	0f be       	out	0x3f, r0	; 63
    82a6:	cd bf       	out	0x3d, r28	; 61
   int temp;
   temp = get_magy();
    82a8:	0e 94 9a 3f 	call	0x7f34	; 0x7f34 <get_magy>
    82ac:	9a 83       	std	Y+2, r25	; 0x02
    82ae:	89 83       	std	Y+1, r24	; 0x01
   current_thread->data.adcstate.adcreading = temp;
    82b0:	e0 91 da 08 	lds	r30, 0x08DA
    82b4:	f0 91 db 08 	lds	r31, 0x08DB
    82b8:	89 81       	ldd	r24, Y+1	; 0x01
    82ba:	9a 81       	ldd	r25, Y+2	; 0x02
    82bc:	94 8f       	std	Z+28, r25	; 0x1c
    82be:	83 8f       	std	Z+27, r24	; 0x1b
    82c0:	22 96       	adiw	r28, 0x02	; 2
    82c2:	0f b6       	in	r0, 0x3f	; 63
    82c4:	f8 94       	cli
    82c6:	de bf       	out	0x3e, r29	; 62
    82c8:	0f be       	out	0x3f, r0	; 63
    82ca:	cd bf       	out	0x3d, r28	; 61
    82cc:	df 91       	pop	r29
    82ce:	cf 91       	pop	r28
    82d0:	08 95       	ret

000082d2 <ADCAccX>:
   return ;
}

//-------------------------------------------------------------------------
void ADCAccX() {
    82d2:	cf 93       	push	r28
    82d4:	df 93       	push	r29
    82d6:	cd b7       	in	r28, 0x3d	; 61
    82d8:	de b7       	in	r29, 0x3e	; 62
    82da:	22 97       	sbiw	r28, 0x02	; 2
    82dc:	0f b6       	in	r0, 0x3f	; 63
    82de:	f8 94       	cli
    82e0:	de bf       	out	0x3e, r29	; 62
    82e2:	0f be       	out	0x3f, r0	; 63
    82e4:	cd bf       	out	0x3d, r28	; 61
   int temp;
   temp = get_accx();
    82e6:	0e 94 d1 3f 	call	0x7fa2	; 0x7fa2 <get_accx>
    82ea:	9a 83       	std	Y+2, r25	; 0x02
    82ec:	89 83       	std	Y+1, r24	; 0x01
   current_thread->data.adcstate.adcreading = temp;
    82ee:	e0 91 da 08 	lds	r30, 0x08DA
    82f2:	f0 91 db 08 	lds	r31, 0x08DB
    82f6:	89 81       	ldd	r24, Y+1	; 0x01
    82f8:	9a 81       	ldd	r25, Y+2	; 0x02
    82fa:	94 8f       	std	Z+28, r25	; 0x1c
    82fc:	83 8f       	std	Z+27, r24	; 0x1b
    82fe:	22 96       	adiw	r28, 0x02	; 2
    8300:	0f b6       	in	r0, 0x3f	; 63
    8302:	f8 94       	cli
    8304:	de bf       	out	0x3e, r29	; 62
    8306:	0f be       	out	0x3f, r0	; 63
    8308:	cd bf       	out	0x3d, r28	; 61
    830a:	df 91       	pop	r29
    830c:	cf 91       	pop	r28
    830e:	08 95       	ret

00008310 <ADCAccY>:
   return ;
}

//-------------------------------------------------------------------------
void ADCAccY() {
    8310:	cf 93       	push	r28
    8312:	df 93       	push	r29
    8314:	cd b7       	in	r28, 0x3d	; 61
    8316:	de b7       	in	r29, 0x3e	; 62
    8318:	22 97       	sbiw	r28, 0x02	; 2
    831a:	0f b6       	in	r0, 0x3f	; 63
    831c:	f8 94       	cli
    831e:	de bf       	out	0x3e, r29	; 62
    8320:	0f be       	out	0x3f, r0	; 63
    8322:	cd bf       	out	0x3d, r28	; 61
   int temp;
   temp = get_accy();
    8324:	0e 94 08 40 	call	0x8010	; 0x8010 <get_accy>
    8328:	9a 83       	std	Y+2, r25	; 0x02
    832a:	89 83       	std	Y+1, r24	; 0x01
   current_thread->data.adcstate.adcreading = temp;
    832c:	e0 91 da 08 	lds	r30, 0x08DA
    8330:	f0 91 db 08 	lds	r31, 0x08DB
    8334:	89 81       	ldd	r24, Y+1	; 0x01
    8336:	9a 81       	ldd	r25, Y+2	; 0x02
    8338:	94 8f       	std	Z+28, r25	; 0x1c
    833a:	83 8f       	std	Z+27, r24	; 0x1b
    833c:	22 96       	adiw	r28, 0x02	; 2
    833e:	0f b6       	in	r0, 0x3f	; 63
    8340:	f8 94       	cli
    8342:	de bf       	out	0x3e, r29	; 62
    8344:	0f be       	out	0x3f, r0	; 63
    8346:	cd bf       	out	0x3d, r28	; 61
    8348:	df 91       	pop	r29
    834a:	cf 91       	pop	r28
    834c:	08 95       	ret

0000834e <atmel_flash_init>:



/* device-specific functions */
void atmel_flash_init( void ) {
    834e:	cf 93       	push	r28
    8350:	df 93       	push	r29
    8352:	cd b7       	in	r28, 0x3d	; 61
    8354:	de b7       	in	r29, 0x3e	; 62
    8356:	2d 97       	sbiw	r28, 0x0d	; 13
    8358:	0f b6       	in	r0, 0x3f	; 63
    835a:	f8 94       	cli
    835c:	de bf       	out	0x3e, r29	; 62
    835e:	0f be       	out	0x3f, r0	; 63
    8360:	cd bf       	out	0x3d, r28	; 61
   uint8_t sreg;
   sreg = SREG;
    8362:	ef e5       	ldi	r30, 0x5F	; 95
    8364:	f0 e0       	ldi	r31, 0x00	; 0
    8366:	80 81       	ld	r24, Z
    8368:	8d 87       	std	Y+13, r24	; 0x0d
   cli();
    836a:	f8 94       	cli
   // set the flash select pin
   DDRA |= 1 << ATMEL_FLASH_SELECT_PIN;
    836c:	aa e3       	ldi	r26, 0x3A	; 58
    836e:	b0 e0       	ldi	r27, 0x00	; 0
    8370:	ea e3       	ldi	r30, 0x3A	; 58
    8372:	f0 e0       	ldi	r31, 0x00	; 0
    8374:	80 81       	ld	r24, Z
    8376:	88 60       	ori	r24, 0x08	; 8
    8378:	8c 93       	st	X, r24
   // set the pin high
   ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
    837a:	ab e3       	ldi	r26, 0x3B	; 59
    837c:	b0 e0       	ldi	r27, 0x00	; 0
    837e:	eb e3       	ldi	r30, 0x3B	; 59
    8380:	f0 e0       	ldi	r31, 0x00	; 0
    8382:	80 81       	ld	r24, Z
    8384:	88 60       	ori	r24, 0x08	; 8
    8386:	8c 93       	st	X, r24
   // clear flash clock
   ATMEL_FLASH_PORT &=  ~ ( 1 << ATMEL_FLASH_CLK );
    8388:	a2 e3       	ldi	r26, 0x32	; 50
    838a:	b0 e0       	ldi	r27, 0x00	; 0
    838c:	e2 e3       	ldi	r30, 0x32	; 50
    838e:	f0 e0       	ldi	r31, 0x00	; 0
    8390:	80 81       	ld	r24, Z
    8392:	8f 7d       	andi	r24, 0xDF	; 223
    8394:	8c 93       	st	X, r24
   // set flash clock output direction
   ATMEL_FLASH_DIRE |= 1 << ATMEL_FLASH_CLK;
    8396:	a1 e3       	ldi	r26, 0x31	; 49
    8398:	b0 e0       	ldi	r27, 0x00	; 0
    839a:	e1 e3       	ldi	r30, 0x31	; 49
    839c:	f0 e0       	ldi	r31, 0x00	; 0
    839e:	80 81       	ld	r24, Z
    83a0:	80 62       	ori	r24, 0x20	; 32
    83a2:	8c 93       	st	X, r24
   // clear flash out pin
   ATMEL_FLASH_PORT &=  ~ ( 1 << ATMEL_FLASH_OUT );
    83a4:	a2 e3       	ldi	r26, 0x32	; 50
    83a6:	b0 e0       	ldi	r27, 0x00	; 0
    83a8:	e2 e3       	ldi	r30, 0x32	; 50
    83aa:	f0 e0       	ldi	r31, 0x00	; 0
    83ac:	80 81       	ld	r24, Z
    83ae:	8b 7f       	andi	r24, 0xFB	; 251
    83b0:	8c 93       	st	X, r24
   // set flash out pin direction
   ATMEL_FLASH_DIRE &=  ~ ( 1 << ATMEL_FLASH_OUT );
    83b2:	a1 e3       	ldi	r26, 0x31	; 49
    83b4:	b0 e0       	ldi	r27, 0x00	; 0
    83b6:	e1 e3       	ldi	r30, 0x31	; 49
    83b8:	f0 e0       	ldi	r31, 0x00	; 0
    83ba:	80 81       	ld	r24, Z
    83bc:	8b 7f       	andi	r24, 0xFB	; 251
    83be:	8c 93       	st	X, r24
   // clear flash in pin
   ATMEL_FLASH_PORT |= 1 << ATMEL_FLASH_IN;
    83c0:	a2 e3       	ldi	r26, 0x32	; 50
    83c2:	b0 e0       	ldi	r27, 0x00	; 0
    83c4:	e2 e3       	ldi	r30, 0x32	; 50
    83c6:	f0 e0       	ldi	r31, 0x00	; 0
    83c8:	80 81       	ld	r24, Z
    83ca:	88 60       	ori	r24, 0x08	; 8
    83cc:	8c 93       	st	X, r24
   // set flash in pin direction
   ATMEL_FLASH_DIRE |= 1 << ATMEL_FLASH_IN;
    83ce:	a1 e3       	ldi	r26, 0x31	; 49
    83d0:	b0 e0       	ldi	r27, 0x00	; 0
    83d2:	e1 e3       	ldi	r30, 0x31	; 49
    83d4:	f0 e0       	ldi	r31, 0x00	; 0
    83d6:	80 81       	ld	r24, Z
    83d8:	88 60       	ori	r24, 0x08	; 8
    83da:	8c 93       	st	X, r24
   SREG = sreg;
    83dc:	ef e5       	ldi	r30, 0x5F	; 95
    83de:	f0 e0       	ldi	r31, 0x00	; 0
    83e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    83e2:	80 83       	st	Z, r24
   atmel_flash_addr = 0;
    83e4:	10 92 d6 03 	sts	0x03D6, r1
    83e8:	10 92 d7 03 	sts	0x03D7, r1
    83ec:	10 92 d8 03 	sts	0x03D8, r1
    83f0:	10 92 d9 03 	sts	0x03D9, r1
   cur_buff = ATMEL_FLASH_BUFFER_1;
    83f4:	81 e0       	ldi	r24, 0x01	; 1
    83f6:	80 93 da 03 	sts	0x03DA, r24
   cur_page = ATMEL_FLASH_MAX_PAGES;
    83fa:	80 e0       	ldi	r24, 0x00	; 0
    83fc:	98 e0       	ldi	r25, 0x08	; 8
    83fe:	90 93 dc 03 	sts	0x03DC, r25
    8402:	80 93 db 03 	sts	0x03DB, r24
   dirty = 0;
    8406:	10 92 dd 03 	sts	0x03DD, r1
   initdone = 1;
    840a:	81 e0       	ldi	r24, 0x01	; 1
    840c:	80 93 de 03 	sts	0x03DE, r24
    8410:	80 e0       	ldi	r24, 0x00	; 0
    8412:	90 e0       	ldi	r25, 0x00	; 0
    8414:	a0 ea       	ldi	r26, 0xA0	; 160
    8416:	b1 e4       	ldi	r27, 0x41	; 65
    8418:	8b 83       	std	Y+3, r24	; 0x03
    841a:	9c 83       	std	Y+4, r25	; 0x04
    841c:	ad 83       	std	Y+5, r26	; 0x05
    841e:	be 83       	std	Y+6, r27	; 0x06
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8420:	20 e0       	ldi	r18, 0x00	; 0
    8422:	30 e0       	ldi	r19, 0x00	; 0
    8424:	4a ef       	ldi	r20, 0xFA	; 250
    8426:	54 e4       	ldi	r21, 0x44	; 68
    8428:	6b 81       	ldd	r22, Y+3	; 0x03
    842a:	7c 81       	ldd	r23, Y+4	; 0x04
    842c:	8d 81       	ldd	r24, Y+5	; 0x05
    842e:	9e 81       	ldd	r25, Y+6	; 0x06
    8430:	0e 94 bc 9e 	call	0x13d78	; 0x13d78 <__mulsf3>
    8434:	dc 01       	movw	r26, r24
    8436:	cb 01       	movw	r24, r22
    8438:	89 87       	std	Y+9, r24	; 0x09
    843a:	9a 87       	std	Y+10, r25	; 0x0a
    843c:	ab 87       	std	Y+11, r26	; 0x0b
    843e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    8440:	20 e0       	ldi	r18, 0x00	; 0
    8442:	30 e0       	ldi	r19, 0x00	; 0
    8444:	40 e8       	ldi	r20, 0x80	; 128
    8446:	5f e3       	ldi	r21, 0x3F	; 63
    8448:	69 85       	ldd	r22, Y+9	; 0x09
    844a:	7a 85       	ldd	r23, Y+10	; 0x0a
    844c:	8b 85       	ldd	r24, Y+11	; 0x0b
    844e:	9c 85       	ldd	r25, Y+12	; 0x0c
    8450:	0e 94 46 a0 	call	0x1408c	; 0x1408c <__ltsf2>
    8454:	88 23       	and	r24, r24
    8456:	0c f0       	brlt	.+2      	; 0x845a <atmel_flash_init+0x10c>
    8458:	05 c0       	rjmp	.+10     	; 0x8464 <atmel_flash_init+0x116>
		__ticks = 1;
    845a:	81 e0       	ldi	r24, 0x01	; 1
    845c:	90 e0       	ldi	r25, 0x00	; 0
    845e:	98 87       	std	Y+8, r25	; 0x08
    8460:	8f 83       	std	Y+7, r24	; 0x07
    8462:	1a c0       	rjmp	.+52     	; 0x8498 <atmel_flash_init+0x14a>
	else if (__tmp > 65535)
    8464:	20 e0       	ldi	r18, 0x00	; 0
    8466:	3f ef       	ldi	r19, 0xFF	; 255
    8468:	4f e7       	ldi	r20, 0x7F	; 127
    846a:	57 e4       	ldi	r21, 0x47	; 71
    846c:	69 85       	ldd	r22, Y+9	; 0x09
    846e:	7a 85       	ldd	r23, Y+10	; 0x0a
    8470:	8b 85       	ldd	r24, Y+11	; 0x0b
    8472:	9c 85       	ldd	r25, Y+12	; 0x0c
    8474:	0e 94 da 9f 	call	0x13fb4	; 0x13fb4 <__gtsf2>
    8478:	18 16       	cp	r1, r24
    847a:	0c f0       	brlt	.+2      	; 0x847e <atmel_flash_init+0x130>
    847c:	03 c0       	rjmp	.+6      	; 0x8484 <atmel_flash_init+0x136>
		__ticks = 0;	/* i.e. 65536 */
    847e:	18 86       	std	Y+8, r1	; 0x08
    8480:	1f 82       	std	Y+7, r1	; 0x07
    8482:	0a c0       	rjmp	.+20     	; 0x8498 <atmel_flash_init+0x14a>
	else
		__ticks = (uint16_t)__tmp;
    8484:	69 85       	ldd	r22, Y+9	; 0x09
    8486:	7a 85       	ldd	r23, Y+10	; 0x0a
    8488:	8b 85       	ldd	r24, Y+11	; 0x0b
    848a:	9c 85       	ldd	r25, Y+12	; 0x0c
    848c:	0e 94 0b 9d 	call	0x13a16	; 0x13a16 <__fixunssfsi>
    8490:	dc 01       	movw	r26, r24
    8492:	cb 01       	movw	r24, r22
    8494:	98 87       	std	Y+8, r25	; 0x08
    8496:	8f 83       	std	Y+7, r24	; 0x07
    8498:	8f 81       	ldd	r24, Y+7	; 0x07
    849a:	98 85       	ldd	r25, Y+8	; 0x08
    849c:	9a 83       	std	Y+2, r25	; 0x02
    849e:	89 83       	std	Y+1, r24	; 0x01
    84a0:	89 81       	ldd	r24, Y+1	; 0x01
    84a2:	9a 81       	ldd	r25, Y+2	; 0x02
    84a4:	01 97       	sbiw	r24, 0x01	; 1
    84a6:	f1 f7       	brne	.-4      	; 0x84a4 <atmel_flash_init+0x156>
    84a8:	9a 83       	std	Y+2, r25	; 0x02
    84aa:	89 83       	std	Y+1, r24	; 0x01
    84ac:	2d 96       	adiw	r28, 0x0d	; 13
    84ae:	0f b6       	in	r0, 0x3f	; 63
    84b0:	f8 94       	cli
    84b2:	de bf       	out	0x3e, r29	; 62
    84b4:	0f be       	out	0x3f, r0	; 63
    84b6:	cd bf       	out	0x3d, r28	; 61
    84b8:	df 91       	pop	r29
    84ba:	cf 91       	pop	r28
    84bc:	08 95       	ret

000084be <readFlash>:
   _delay_ms( 20 );
}


void readFlash( int pagenum, uint8_t offset, void *buffer, int NumOfBytes ) {
    84be:	cf 93       	push	r28
    84c0:	df 93       	push	r29
    84c2:	cd b7       	in	r28, 0x3d	; 61
    84c4:	de b7       	in	r29, 0x3e	; 62
    84c6:	29 97       	sbiw	r28, 0x09	; 9
    84c8:	0f b6       	in	r0, 0x3f	; 63
    84ca:	f8 94       	cli
    84cc:	de bf       	out	0x3e, r29	; 62
    84ce:	0f be       	out	0x3f, r0	; 63
    84d0:	cd bf       	out	0x3d, r28	; 61
    84d2:	9c 83       	std	Y+4, r25	; 0x04
    84d4:	8b 83       	std	Y+3, r24	; 0x03
    84d6:	6d 83       	std	Y+5, r22	; 0x05
    84d8:	5f 83       	std	Y+7, r21	; 0x07
    84da:	4e 83       	std	Y+6, r20	; 0x06
    84dc:	39 87       	std	Y+9, r19	; 0x09
    84de:	28 87       	std	Y+8, r18	; 0x08
   uint16_t count;
   if ( initdone == 0 ) {
    84e0:	80 91 de 03 	lds	r24, 0x03DE
    84e4:	88 23       	and	r24, r24
    84e6:	11 f4       	brne	.+4      	; 0x84ec <readFlash+0x2e>
      atmel_flash_init();
    84e8:	0e 94 a7 41 	call	0x834e	; 0x834e <atmel_flash_init>
   } 
   atmel_flash_addr = pagenum * 264+offset;
    84ec:	2b 81       	ldd	r18, Y+3	; 0x03
    84ee:	3c 81       	ldd	r19, Y+4	; 0x04
    84f0:	88 e0       	ldi	r24, 0x08	; 8
    84f2:	91 e0       	ldi	r25, 0x01	; 1
    84f4:	a9 01       	movw	r20, r18
    84f6:	48 9f       	mul	r20, r24
    84f8:	90 01       	movw	r18, r0
    84fa:	49 9f       	mul	r20, r25
    84fc:	30 0d       	add	r19, r0
    84fe:	58 9f       	mul	r21, r24
    8500:	30 0d       	add	r19, r0
    8502:	11 24       	eor	r1, r1
    8504:	8d 81       	ldd	r24, Y+5	; 0x05
    8506:	99 27       	eor	r25, r25
    8508:	82 0f       	add	r24, r18
    850a:	93 1f       	adc	r25, r19
    850c:	aa 27       	eor	r26, r26
    850e:	97 fd       	sbrc	r25, 7
    8510:	a0 95       	com	r26
    8512:	ba 2f       	mov	r27, r26
    8514:	80 93 d6 03 	sts	0x03D6, r24
    8518:	90 93 d7 03 	sts	0x03D7, r25
    851c:	a0 93 d8 03 	sts	0x03D8, r26
    8520:	b0 93 d9 03 	sts	0x03D9, r27
   if ( offset + NumOfBytes > 256 ) {
    8524:	8d 81       	ldd	r24, Y+5	; 0x05
    8526:	28 2f       	mov	r18, r24
    8528:	33 27       	eor	r19, r19
    852a:	88 85       	ldd	r24, Y+8	; 0x08
    852c:	99 85       	ldd	r25, Y+9	; 0x09
    852e:	82 0f       	add	r24, r18
    8530:	93 1f       	adc	r25, r19
    8532:	51 e0       	ldi	r21, 0x01	; 1
    8534:	81 30       	cpi	r24, 0x01	; 1
    8536:	95 07       	cpc	r25, r21
    8538:	54 f0       	brlt	.+20     	; 0x854e <readFlash+0x90>
      count = 256-offset;
    853a:	8d 81       	ldd	r24, Y+5	; 0x05
    853c:	28 2f       	mov	r18, r24
    853e:	33 27       	eor	r19, r19
    8540:	80 e0       	ldi	r24, 0x00	; 0
    8542:	91 e0       	ldi	r25, 0x01	; 1
    8544:	82 1b       	sub	r24, r18
    8546:	93 0b       	sbc	r25, r19
    8548:	9a 83       	std	Y+2, r25	; 0x02
    854a:	89 83       	std	Y+1, r24	; 0x01
    854c:	04 c0       	rjmp	.+8      	; 0x8556 <readFlash+0x98>
   } else {
      count = NumOfBytes;
    854e:	88 85       	ldd	r24, Y+8	; 0x08
    8550:	99 85       	ldd	r25, Y+9	; 0x09
    8552:	9a 83       	std	Y+2, r25	; 0x02
    8554:	89 83       	std	Y+1, r24	; 0x01
   } 
   while ( atmel_flash_busy())
    8556:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    855a:	88 23       	and	r24, r24
    855c:	e1 f7       	brne	.-8      	; 0x8556 <readFlash+0x98>
      ;
   dev_read_atmel_flash( buffer, count );
    855e:	89 81       	ldd	r24, Y+1	; 0x01
    8560:	9a 81       	ldd	r25, Y+2	; 0x02
    8562:	2e 81       	ldd	r18, Y+6	; 0x06
    8564:	3f 81       	ldd	r19, Y+7	; 0x07
    8566:	bc 01       	movw	r22, r24
    8568:	c9 01       	movw	r24, r18
    856a:	0e 94 de 43 	call	0x87bc	; 0x87bc <dev_read_atmel_flash>
   while ( atmel_flash_busy())
    856e:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    8572:	88 23       	and	r24, r24
    8574:	e1 f7       	brne	.-8      	; 0x856e <readFlash+0xb0>
      ;
   buffer = ( void* )(( char* )buffer + count );
    8576:	2e 81       	ldd	r18, Y+6	; 0x06
    8578:	3f 81       	ldd	r19, Y+7	; 0x07
    857a:	89 81       	ldd	r24, Y+1	; 0x01
    857c:	9a 81       	ldd	r25, Y+2	; 0x02
    857e:	82 0f       	add	r24, r18
    8580:	93 1f       	adc	r25, r19
    8582:	9f 83       	std	Y+7, r25	; 0x07
    8584:	8e 83       	std	Y+6, r24	; 0x06
   if ( count < NumOfBytes ) {
    8586:	28 85       	ldd	r18, Y+8	; 0x08
    8588:	39 85       	ldd	r19, Y+9	; 0x09
    858a:	89 81       	ldd	r24, Y+1	; 0x01
    858c:	9a 81       	ldd	r25, Y+2	; 0x02
    858e:	82 17       	cp	r24, r18
    8590:	93 07       	cpc	r25, r19
    8592:	a0 f5       	brcc	.+104    	; 0x85fc <readFlash+0x13e>
      atmel_flash_addr = ( pagenum + 1 ) *264;
    8594:	2b 81       	ldd	r18, Y+3	; 0x03
    8596:	3c 81       	ldd	r19, Y+4	; 0x04
    8598:	88 e0       	ldi	r24, 0x08	; 8
    859a:	91 e0       	ldi	r25, 0x01	; 1
    859c:	ac 01       	movw	r20, r24
    859e:	24 9f       	mul	r18, r20
    85a0:	c0 01       	movw	r24, r0
    85a2:	25 9f       	mul	r18, r21
    85a4:	90 0d       	add	r25, r0
    85a6:	34 9f       	mul	r19, r20
    85a8:	90 0d       	add	r25, r0
    85aa:	11 24       	eor	r1, r1
    85ac:	88 5f       	subi	r24, 0xF8	; 248
    85ae:	9e 4f       	sbci	r25, 0xFE	; 254
    85b0:	aa 27       	eor	r26, r26
    85b2:	97 fd       	sbrc	r25, 7
    85b4:	a0 95       	com	r26
    85b6:	ba 2f       	mov	r27, r26
    85b8:	80 93 d6 03 	sts	0x03D6, r24
    85bc:	90 93 d7 03 	sts	0x03D7, r25
    85c0:	a0 93 d8 03 	sts	0x03D8, r26
    85c4:	b0 93 d9 03 	sts	0x03D9, r27
      count = NumOfBytes - count;
    85c8:	28 85       	ldd	r18, Y+8	; 0x08
    85ca:	39 85       	ldd	r19, Y+9	; 0x09
    85cc:	89 81       	ldd	r24, Y+1	; 0x01
    85ce:	9a 81       	ldd	r25, Y+2	; 0x02
    85d0:	a9 01       	movw	r20, r18
    85d2:	48 1b       	sub	r20, r24
    85d4:	59 0b       	sbc	r21, r25
    85d6:	ca 01       	movw	r24, r20
    85d8:	9a 83       	std	Y+2, r25	; 0x02
    85da:	89 83       	std	Y+1, r24	; 0x01
      while ( atmel_flash_busy())
    85dc:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    85e0:	88 23       	and	r24, r24
    85e2:	e1 f7       	brne	.-8      	; 0x85dc <readFlash+0x11e>
         ;
      dev_read_atmel_flash( buffer, count );
    85e4:	89 81       	ldd	r24, Y+1	; 0x01
    85e6:	9a 81       	ldd	r25, Y+2	; 0x02
    85e8:	2e 81       	ldd	r18, Y+6	; 0x06
    85ea:	3f 81       	ldd	r19, Y+7	; 0x07
    85ec:	bc 01       	movw	r22, r24
    85ee:	c9 01       	movw	r24, r18
    85f0:	0e 94 de 43 	call	0x87bc	; 0x87bc <dev_read_atmel_flash>
      while ( atmel_flash_busy())
    85f4:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    85f8:	88 23       	and	r24, r24
    85fa:	e1 f7       	brne	.-8      	; 0x85f4 <readFlash+0x136>
    85fc:	29 96       	adiw	r28, 0x09	; 9
    85fe:	0f b6       	in	r0, 0x3f	; 63
    8600:	f8 94       	cli
    8602:	de bf       	out	0x3e, r29	; 62
    8604:	0f be       	out	0x3f, r0	; 63
    8606:	cd bf       	out	0x3d, r28	; 61
    8608:	df 91       	pop	r29
    860a:	cf 91       	pop	r28
    860c:	08 95       	ret

0000860e <writeFlash>:
         ;
   }
   return ;
}

//-------------------------------------------------------------------------
void writeFlash( int pagenum, uint8_t offset, void *buffer, int NumOfBytes ) {
    860e:	cf 93       	push	r28
    8610:	df 93       	push	r29
    8612:	cd b7       	in	r28, 0x3d	; 61
    8614:	de b7       	in	r29, 0x3e	; 62
    8616:	29 97       	sbiw	r28, 0x09	; 9
    8618:	0f b6       	in	r0, 0x3f	; 63
    861a:	f8 94       	cli
    861c:	de bf       	out	0x3e, r29	; 62
    861e:	0f be       	out	0x3f, r0	; 63
    8620:	cd bf       	out	0x3d, r28	; 61
    8622:	9c 83       	std	Y+4, r25	; 0x04
    8624:	8b 83       	std	Y+3, r24	; 0x03
    8626:	6d 83       	std	Y+5, r22	; 0x05
    8628:	5f 83       	std	Y+7, r21	; 0x07
    862a:	4e 83       	std	Y+6, r20	; 0x06
    862c:	39 87       	std	Y+9, r19	; 0x09
    862e:	28 87       	std	Y+8, r18	; 0x08
   uint16_t count;
   if ( initdone == 0 ) {
    8630:	80 91 de 03 	lds	r24, 0x03DE
    8634:	88 23       	and	r24, r24
    8636:	11 f4       	brne	.+4      	; 0x863c <writeFlash+0x2e>
      atmel_flash_init();
    8638:	0e 94 a7 41 	call	0x834e	; 0x834e <atmel_flash_init>
   } 
   atmel_flash_addr = pagenum * 264+offset;
    863c:	2b 81       	ldd	r18, Y+3	; 0x03
    863e:	3c 81       	ldd	r19, Y+4	; 0x04
    8640:	88 e0       	ldi	r24, 0x08	; 8
    8642:	91 e0       	ldi	r25, 0x01	; 1
    8644:	a9 01       	movw	r20, r18
    8646:	48 9f       	mul	r20, r24
    8648:	90 01       	movw	r18, r0
    864a:	49 9f       	mul	r20, r25
    864c:	30 0d       	add	r19, r0
    864e:	58 9f       	mul	r21, r24
    8650:	30 0d       	add	r19, r0
    8652:	11 24       	eor	r1, r1
    8654:	8d 81       	ldd	r24, Y+5	; 0x05
    8656:	99 27       	eor	r25, r25
    8658:	82 0f       	add	r24, r18
    865a:	93 1f       	adc	r25, r19
    865c:	aa 27       	eor	r26, r26
    865e:	97 fd       	sbrc	r25, 7
    8660:	a0 95       	com	r26
    8662:	ba 2f       	mov	r27, r26
    8664:	80 93 d6 03 	sts	0x03D6, r24
    8668:	90 93 d7 03 	sts	0x03D7, r25
    866c:	a0 93 d8 03 	sts	0x03D8, r26
    8670:	b0 93 d9 03 	sts	0x03D9, r27
   if ( offset + NumOfBytes > 256 ) {
    8674:	8d 81       	ldd	r24, Y+5	; 0x05
    8676:	28 2f       	mov	r18, r24
    8678:	33 27       	eor	r19, r19
    867a:	88 85       	ldd	r24, Y+8	; 0x08
    867c:	99 85       	ldd	r25, Y+9	; 0x09
    867e:	82 0f       	add	r24, r18
    8680:	93 1f       	adc	r25, r19
    8682:	51 e0       	ldi	r21, 0x01	; 1
    8684:	81 30       	cpi	r24, 0x01	; 1
    8686:	95 07       	cpc	r25, r21
    8688:	54 f0       	brlt	.+20     	; 0x869e <writeFlash+0x90>
      count = 256-offset;
    868a:	8d 81       	ldd	r24, Y+5	; 0x05
    868c:	28 2f       	mov	r18, r24
    868e:	33 27       	eor	r19, r19
    8690:	80 e0       	ldi	r24, 0x00	; 0
    8692:	91 e0       	ldi	r25, 0x01	; 1
    8694:	82 1b       	sub	r24, r18
    8696:	93 0b       	sbc	r25, r19
    8698:	9a 83       	std	Y+2, r25	; 0x02
    869a:	89 83       	std	Y+1, r24	; 0x01
    869c:	04 c0       	rjmp	.+8      	; 0x86a6 <writeFlash+0x98>
   } else {
      count = NumOfBytes;
    869e:	88 85       	ldd	r24, Y+8	; 0x08
    86a0:	99 85       	ldd	r25, Y+9	; 0x09
    86a2:	9a 83       	std	Y+2, r25	; 0x02
    86a4:	89 83       	std	Y+1, r24	; 0x01
   } 
   while ( atmel_flash_busy())
    86a6:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    86aa:	88 23       	and	r24, r24
    86ac:	e1 f7       	brne	.-8      	; 0x86a6 <writeFlash+0x98>
      ;
   dev_write_atmel_flash( buffer, count );
    86ae:	89 81       	ldd	r24, Y+1	; 0x01
    86b0:	9a 81       	ldd	r25, Y+2	; 0x02
    86b2:	2e 81       	ldd	r18, Y+6	; 0x06
    86b4:	3f 81       	ldd	r19, Y+7	; 0x07
    86b6:	bc 01       	movw	r22, r24
    86b8:	c9 01       	movw	r24, r18
    86ba:	0e 94 68 44 	call	0x88d0	; 0x88d0 <dev_write_atmel_flash>
   while ( atmel_flash_busy())
    86be:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    86c2:	88 23       	and	r24, r24
    86c4:	e1 f7       	brne	.-8      	; 0x86be <writeFlash+0xb0>
      ;
   buffer = ( void* )(( char* )buffer + count );
    86c6:	2e 81       	ldd	r18, Y+6	; 0x06
    86c8:	3f 81       	ldd	r19, Y+7	; 0x07
    86ca:	89 81       	ldd	r24, Y+1	; 0x01
    86cc:	9a 81       	ldd	r25, Y+2	; 0x02
    86ce:	82 0f       	add	r24, r18
    86d0:	93 1f       	adc	r25, r19
    86d2:	9f 83       	std	Y+7, r25	; 0x07
    86d4:	8e 83       	std	Y+6, r24	; 0x06
   if ( count < NumOfBytes ) {
    86d6:	28 85       	ldd	r18, Y+8	; 0x08
    86d8:	39 85       	ldd	r19, Y+9	; 0x09
    86da:	89 81       	ldd	r24, Y+1	; 0x01
    86dc:	9a 81       	ldd	r25, Y+2	; 0x02
    86de:	82 17       	cp	r24, r18
    86e0:	93 07       	cpc	r25, r19
    86e2:	a0 f5       	brcc	.+104    	; 0x874c <writeFlash+0x13e>
      atmel_flash_addr = ( pagenum + 1 ) *264;
    86e4:	2b 81       	ldd	r18, Y+3	; 0x03
    86e6:	3c 81       	ldd	r19, Y+4	; 0x04
    86e8:	88 e0       	ldi	r24, 0x08	; 8
    86ea:	91 e0       	ldi	r25, 0x01	; 1
    86ec:	ac 01       	movw	r20, r24
    86ee:	24 9f       	mul	r18, r20
    86f0:	c0 01       	movw	r24, r0
    86f2:	25 9f       	mul	r18, r21
    86f4:	90 0d       	add	r25, r0
    86f6:	34 9f       	mul	r19, r20
    86f8:	90 0d       	add	r25, r0
    86fa:	11 24       	eor	r1, r1
    86fc:	88 5f       	subi	r24, 0xF8	; 248
    86fe:	9e 4f       	sbci	r25, 0xFE	; 254
    8700:	aa 27       	eor	r26, r26
    8702:	97 fd       	sbrc	r25, 7
    8704:	a0 95       	com	r26
    8706:	ba 2f       	mov	r27, r26
    8708:	80 93 d6 03 	sts	0x03D6, r24
    870c:	90 93 d7 03 	sts	0x03D7, r25
    8710:	a0 93 d8 03 	sts	0x03D8, r26
    8714:	b0 93 d9 03 	sts	0x03D9, r27
      count = NumOfBytes - count;
    8718:	28 85       	ldd	r18, Y+8	; 0x08
    871a:	39 85       	ldd	r19, Y+9	; 0x09
    871c:	89 81       	ldd	r24, Y+1	; 0x01
    871e:	9a 81       	ldd	r25, Y+2	; 0x02
    8720:	a9 01       	movw	r20, r18
    8722:	48 1b       	sub	r20, r24
    8724:	59 0b       	sbc	r21, r25
    8726:	ca 01       	movw	r24, r20
    8728:	9a 83       	std	Y+2, r25	; 0x02
    872a:	89 83       	std	Y+1, r24	; 0x01
      while ( atmel_flash_busy())
    872c:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    8730:	88 23       	and	r24, r24
    8732:	e1 f7       	brne	.-8      	; 0x872c <writeFlash+0x11e>
         ;
      dev_write_atmel_flash( buffer, count );
    8734:	89 81       	ldd	r24, Y+1	; 0x01
    8736:	9a 81       	ldd	r25, Y+2	; 0x02
    8738:	2e 81       	ldd	r18, Y+6	; 0x06
    873a:	3f 81       	ldd	r19, Y+7	; 0x07
    873c:	bc 01       	movw	r22, r24
    873e:	c9 01       	movw	r24, r18
    8740:	0e 94 68 44 	call	0x88d0	; 0x88d0 <dev_write_atmel_flash>
      while ( atmel_flash_busy())
    8744:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    8748:	88 23       	and	r24, r24
    874a:	e1 f7       	brne	.-8      	; 0x8744 <writeFlash+0x136>
    874c:	29 96       	adiw	r28, 0x09	; 9
    874e:	0f b6       	in	r0, 0x3f	; 63
    8750:	f8 94       	cli
    8752:	de bf       	out	0x3e, r29	; 62
    8754:	0f be       	out	0x3f, r0	; 63
    8756:	cd bf       	out	0x3d, r28	; 61
    8758:	df 91       	pop	r29
    875a:	cf 91       	pop	r28
    875c:	08 95       	ret

0000875e <copyFlash>:
         ;
   }
   return ;
}

//-------------------------------------------------------------------------
void copyFlash( int sourcepage, int targetpage ) {
    875e:	cf 93       	push	r28
    8760:	df 93       	push	r29
    8762:	cd b7       	in	r28, 0x3d	; 61
    8764:	de b7       	in	r29, 0x3e	; 62
    8766:	24 97       	sbiw	r28, 0x04	; 4
    8768:	0f b6       	in	r0, 0x3f	; 63
    876a:	f8 94       	cli
    876c:	de bf       	out	0x3e, r29	; 62
    876e:	0f be       	out	0x3f, r0	; 63
    8770:	cd bf       	out	0x3d, r28	; 61
    8772:	9a 83       	std	Y+2, r25	; 0x02
    8774:	89 83       	std	Y+1, r24	; 0x01
    8776:	7c 83       	std	Y+4, r23	; 0x04
    8778:	6b 83       	std	Y+3, r22	; 0x03
   while ( atmel_flash_busy())
    877a:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    877e:	88 23       	and	r24, r24
    8780:	e1 f7       	brne	.-8      	; 0x877a <copyFlash+0x1c>
      ;
   atmel_flash_fill_buffer( 1, sourcepage );
    8782:	89 81       	ldd	r24, Y+1	; 0x01
    8784:	9a 81       	ldd	r25, Y+2	; 0x02
    8786:	bc 01       	movw	r22, r24
    8788:	81 e0       	ldi	r24, 0x01	; 1
    878a:	0e 94 8a 4a 	call	0x9514	; 0x9514 <atmel_flash_fill_buffer>
   while ( atmel_flash_busy())
    878e:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    8792:	88 23       	and	r24, r24
    8794:	e1 f7       	brne	.-8      	; 0x878e <copyFlash+0x30>
      ;
   atmel_flash_flush_buffer( 1, targetpage );
    8796:	8b 81       	ldd	r24, Y+3	; 0x03
    8798:	9c 81       	ldd	r25, Y+4	; 0x04
    879a:	bc 01       	movw	r22, r24
    879c:	81 e0       	ldi	r24, 0x01	; 1
    879e:	0e 94 f5 49 	call	0x93ea	; 0x93ea <atmel_flash_flush_buffer>
   while ( atmel_flash_busy())
    87a2:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    87a6:	88 23       	and	r24, r24
    87a8:	e1 f7       	brne	.-8      	; 0x87a2 <copyFlash+0x44>
    87aa:	24 96       	adiw	r28, 0x04	; 4
    87ac:	0f b6       	in	r0, 0x3f	; 63
    87ae:	f8 94       	cli
    87b0:	de bf       	out	0x3e, r29	; 62
    87b2:	0f be       	out	0x3f, r0	; 63
    87b4:	cd bf       	out	0x3d, r28	; 61
    87b6:	df 91       	pop	r29
    87b8:	cf 91       	pop	r28
    87ba:	08 95       	ret

000087bc <dev_read_atmel_flash>:
      ;
}
/** @brief Read from the current flash address into p, for count bytes
 */
static uint16_t dev_read_atmel_flash( void *p, uint16_t count ) {
    87bc:	cf 93       	push	r28
    87be:	df 93       	push	r29
    87c0:	cd b7       	in	r28, 0x3d	; 61
    87c2:	de b7       	in	r29, 0x3e	; 62
    87c4:	2a 97       	sbiw	r28, 0x0a	; 10
    87c6:	0f b6       	in	r0, 0x3f	; 63
    87c8:	f8 94       	cli
    87ca:	de bf       	out	0x3e, r29	; 62
    87cc:	0f be       	out	0x3f, r0	; 63
    87ce:	cd bf       	out	0x3d, r28	; 61
    87d0:	98 87       	std	Y+8, r25	; 0x08
    87d2:	8f 83       	std	Y+7, r24	; 0x07
    87d4:	7a 87       	std	Y+10, r23	; 0x0a
    87d6:	69 87       	std	Y+9, r22	; 0x09
   uint16_t page, offset;
   uint8_t *buf = ( uint8_t* )p;
    87d8:	8f 81       	ldd	r24, Y+7	; 0x07
    87da:	98 85       	ldd	r25, Y+8	; 0x08
    87dc:	9a 83       	std	Y+2, r25	; 0x02
    87de:	89 83       	std	Y+1, r24	; 0x01
   page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    87e0:	80 91 d6 03 	lds	r24, 0x03D6
    87e4:	90 91 d7 03 	lds	r25, 0x03D7
    87e8:	a0 91 d8 03 	lds	r26, 0x03D8
    87ec:	b0 91 d9 03 	lds	r27, 0x03D9
    87f0:	28 e0       	ldi	r18, 0x08	; 8
    87f2:	31 e0       	ldi	r19, 0x01	; 1
    87f4:	40 e0       	ldi	r20, 0x00	; 0
    87f6:	50 e0       	ldi	r21, 0x00	; 0
    87f8:	bc 01       	movw	r22, r24
    87fa:	cd 01       	movw	r24, r26
    87fc:	0e 94 81 a3 	call	0x14702	; 0x14702 <__udivmodsi4>
    8800:	da 01       	movw	r26, r20
    8802:	c9 01       	movw	r24, r18
    8804:	9e 83       	std	Y+6, r25	; 0x06
    8806:	8d 83       	std	Y+5, r24	; 0x05
   offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    8808:	80 91 d6 03 	lds	r24, 0x03D6
    880c:	90 91 d7 03 	lds	r25, 0x03D7
    8810:	a0 91 d8 03 	lds	r26, 0x03D8
    8814:	b0 91 d9 03 	lds	r27, 0x03D9
    8818:	28 e0       	ldi	r18, 0x08	; 8
    881a:	31 e0       	ldi	r19, 0x01	; 1
    881c:	40 e0       	ldi	r20, 0x00	; 0
    881e:	50 e0       	ldi	r21, 0x00	; 0
    8820:	bc 01       	movw	r22, r24
    8822:	cd 01       	movw	r24, r26
    8824:	0e 94 81 a3 	call	0x14702	; 0x14702 <__udivmodsi4>
    8828:	dc 01       	movw	r26, r24
    882a:	cb 01       	movw	r24, r22
    882c:	9c 83       	std	Y+4, r25	; 0x04
    882e:	8b 83       	std	Y+3, r24	; 0x03
   if ( dirty && page <= cur_page && page + ( offset + count ) / ATMEL_FLASH_PAGE_SIZE >= cur_page ) {
    8830:	80 91 dd 03 	lds	r24, 0x03DD
    8834:	88 23       	and	r24, r24
    8836:	89 f1       	breq	.+98     	; 0x889a <dev_read_atmel_flash+0xde>
    8838:	20 91 db 03 	lds	r18, 0x03DB
    883c:	30 91 dc 03 	lds	r19, 0x03DC
    8840:	8d 81       	ldd	r24, Y+5	; 0x05
    8842:	9e 81       	ldd	r25, Y+6	; 0x06
    8844:	28 17       	cp	r18, r24
    8846:	39 07       	cpc	r19, r25
    8848:	40 f1       	brcs	.+80     	; 0x889a <dev_read_atmel_flash+0xde>
    884a:	2b 81       	ldd	r18, Y+3	; 0x03
    884c:	3c 81       	ldd	r19, Y+4	; 0x04
    884e:	89 85       	ldd	r24, Y+9	; 0x09
    8850:	9a 85       	ldd	r25, Y+10	; 0x0a
    8852:	82 0f       	add	r24, r18
    8854:	93 1f       	adc	r25, r19
    8856:	28 e0       	ldi	r18, 0x08	; 8
    8858:	31 e0       	ldi	r19, 0x01	; 1
    885a:	b9 01       	movw	r22, r18
    885c:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <__udivmodhi4>
    8860:	cb 01       	movw	r24, r22
    8862:	9c 01       	movw	r18, r24
    8864:	8d 81       	ldd	r24, Y+5	; 0x05
    8866:	9e 81       	ldd	r25, Y+6	; 0x06
    8868:	28 0f       	add	r18, r24
    886a:	39 1f       	adc	r19, r25
    886c:	80 91 db 03 	lds	r24, 0x03DB
    8870:	90 91 dc 03 	lds	r25, 0x03DC
    8874:	28 17       	cp	r18, r24
    8876:	39 07       	cpc	r19, r25
    8878:	80 f0       	brcs	.+32     	; 0x889a <dev_read_atmel_flash+0xde>
      while ( atmel_flash_busy())
    887a:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    887e:	88 23       	and	r24, r24
    8880:	e1 f7       	brne	.-8      	; 0x887a <dev_read_atmel_flash+0xbe>
         ;
      atmel_flash_flush_buffer( cur_buff, cur_page );
    8882:	80 91 db 03 	lds	r24, 0x03DB
    8886:	90 91 dc 03 	lds	r25, 0x03DC
    888a:	20 91 da 03 	lds	r18, 0x03DA
    888e:	bc 01       	movw	r22, r24
    8890:	82 2f       	mov	r24, r18
    8892:	0e 94 f5 49 	call	0x93ea	; 0x93ea <atmel_flash_flush_buffer>
      dirty = 0;
    8896:	10 92 dd 03 	sts	0x03DD, r1
   }
   // Wait for any previous actions to complete
   while ( atmel_flash_busy())
    889a:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    889e:	88 23       	and	r24, r24
    88a0:	e1 f7       	brne	.-8      	; 0x889a <dev_read_atmel_flash+0xde>
      ;
   atmel_flash_read_memory( page, offset, buf, count );
    88a2:	89 85       	ldd	r24, Y+9	; 0x09
    88a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    88a6:	49 81       	ldd	r20, Y+1	; 0x01
    88a8:	5a 81       	ldd	r21, Y+2	; 0x02
    88aa:	6b 81       	ldd	r22, Y+3	; 0x03
    88ac:	7c 81       	ldd	r23, Y+4	; 0x04
    88ae:	ed 81       	ldd	r30, Y+5	; 0x05
    88b0:	fe 81       	ldd	r31, Y+6	; 0x06
    88b2:	9c 01       	movw	r18, r24
    88b4:	cf 01       	movw	r24, r30
    88b6:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <atmel_flash_read_memory>
   return count;
    88ba:	89 85       	ldd	r24, Y+9	; 0x09
    88bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    88be:	2a 96       	adiw	r28, 0x0a	; 10
    88c0:	0f b6       	in	r0, 0x3f	; 63
    88c2:	f8 94       	cli
    88c4:	de bf       	out	0x3e, r29	; 62
    88c6:	0f be       	out	0x3f, r0	; 63
    88c8:	cd bf       	out	0x3d, r28	; 61
    88ca:	df 91       	pop	r29
    88cc:	cf 91       	pop	r28
    88ce:	08 95       	ret

000088d0 <dev_write_atmel_flash>:
}
/** @brief Write p into the current flash address, for count bytes
 */
static uint16_t dev_write_atmel_flash( const void *p, uint16_t count ) {
    88d0:	cf 93       	push	r28
    88d2:	df 93       	push	r29
    88d4:	cd b7       	in	r28, 0x3d	; 61
    88d6:	de b7       	in	r29, 0x3e	; 62
    88d8:	2f 97       	sbiw	r28, 0x0f	; 15
    88da:	0f b6       	in	r0, 0x3f	; 63
    88dc:	f8 94       	cli
    88de:	de bf       	out	0x3e, r29	; 62
    88e0:	0f be       	out	0x3f, r0	; 63
    88e2:	cd bf       	out	0x3d, r28	; 61
    88e4:	9c 87       	std	Y+12, r25	; 0x0c
    88e6:	8b 87       	std	Y+11, r24	; 0x0b
    88e8:	7e 87       	std	Y+14, r23	; 0x0e
    88ea:	6d 87       	std	Y+13, r22	; 0x0d
   uint16_t page, offset, num_bytes;
   uint16_t index = 0;
    88ec:	1c 82       	std	Y+4, r1	; 0x04
    88ee:	1b 82       	std	Y+3, r1	; 0x03
   uint8_t *buf = ( uint8_t* )p;
    88f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    88f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    88f4:	9a 83       	std	Y+2, r25	; 0x02
    88f6:	89 83       	std	Y+1, r24	; 0x01
   page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    88f8:	80 91 d6 03 	lds	r24, 0x03D6
    88fc:	90 91 d7 03 	lds	r25, 0x03D7
    8900:	a0 91 d8 03 	lds	r26, 0x03D8
    8904:	b0 91 d9 03 	lds	r27, 0x03D9
    8908:	28 e0       	ldi	r18, 0x08	; 8
    890a:	31 e0       	ldi	r19, 0x01	; 1
    890c:	40 e0       	ldi	r20, 0x00	; 0
    890e:	50 e0       	ldi	r21, 0x00	; 0
    8910:	bc 01       	movw	r22, r24
    8912:	cd 01       	movw	r24, r26
    8914:	0e 94 81 a3 	call	0x14702	; 0x14702 <__udivmodsi4>
    8918:	da 01       	movw	r26, r20
    891a:	c9 01       	movw	r24, r18
    891c:	9a 87       	std	Y+10, r25	; 0x0a
    891e:	89 87       	std	Y+9, r24	; 0x09
   offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    8920:	80 91 d6 03 	lds	r24, 0x03D6
    8924:	90 91 d7 03 	lds	r25, 0x03D7
    8928:	a0 91 d8 03 	lds	r26, 0x03D8
    892c:	b0 91 d9 03 	lds	r27, 0x03D9
    8930:	28 e0       	ldi	r18, 0x08	; 8
    8932:	31 e0       	ldi	r19, 0x01	; 1
    8934:	40 e0       	ldi	r20, 0x00	; 0
    8936:	50 e0       	ldi	r21, 0x00	; 0
    8938:	bc 01       	movw	r22, r24
    893a:	cd 01       	movw	r24, r26
    893c:	0e 94 81 a3 	call	0x14702	; 0x14702 <__udivmodsi4>
    8940:	dc 01       	movw	r26, r24
    8942:	cb 01       	movw	r24, r22
    8944:	98 87       	std	Y+8, r25	; 0x08
    8946:	8f 83       	std	Y+7, r24	; 0x07
   while ( atmel_flash_busy())
    8948:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    894c:	88 23       	and	r24, r24
    894e:	e1 f7       	brne	.-8      	; 0x8948 <dev_write_atmel_flash+0x78>
      ;
   while ( count > 0 ) {
    8950:	a7 c0       	rjmp	.+334    	; 0x8aa0 <dev_write_atmel_flash+0x1d0>
      if ( count + offset > ATMEL_FLASH_PAGE_SIZE ) {
    8952:	8d 85       	ldd	r24, Y+13	; 0x0d
    8954:	9e 85       	ldd	r25, Y+14	; 0x0e
    8956:	2f 81       	ldd	r18, Y+7	; 0x07
    8958:	38 85       	ldd	r19, Y+8	; 0x08
    895a:	82 0f       	add	r24, r18
    895c:	93 1f       	adc	r25, r19
    895e:	21 e0       	ldi	r18, 0x01	; 1
    8960:	89 30       	cpi	r24, 0x09	; 9
    8962:	92 07       	cpc	r25, r18
    8964:	48 f0       	brcs	.+18     	; 0x8978 <dev_write_atmel_flash+0xa8>
         num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
    8966:	88 e0       	ldi	r24, 0x08	; 8
    8968:	91 e0       	ldi	r25, 0x01	; 1
    896a:	2f 81       	ldd	r18, Y+7	; 0x07
    896c:	38 85       	ldd	r19, Y+8	; 0x08
    896e:	82 1b       	sub	r24, r18
    8970:	93 0b       	sbc	r25, r19
    8972:	9e 83       	std	Y+6, r25	; 0x06
    8974:	8d 83       	std	Y+5, r24	; 0x05
    8976:	04 c0       	rjmp	.+8      	; 0x8980 <dev_write_atmel_flash+0xb0>
      } else {
         num_bytes = count;
    8978:	8d 85       	ldd	r24, Y+13	; 0x0d
    897a:	9e 85       	ldd	r25, Y+14	; 0x0e
    897c:	9e 83       	std	Y+6, r25	; 0x06
    897e:	8d 83       	std	Y+5, r24	; 0x05
      } 
      if ( page != cur_page ) {
    8980:	20 91 db 03 	lds	r18, 0x03DB
    8984:	30 91 dc 03 	lds	r19, 0x03DC
    8988:	89 85       	ldd	r24, Y+9	; 0x09
    898a:	9a 85       	ldd	r25, Y+10	; 0x0a
    898c:	82 17       	cp	r24, r18
    898e:	93 07       	cpc	r25, r19
    8990:	09 f4       	brne	.+2      	; 0x8994 <dev_write_atmel_flash+0xc4>
    8992:	40 c0       	rjmp	.+128    	; 0x8a14 <dev_write_atmel_flash+0x144>
         if ( dirty ) {
    8994:	80 91 dd 03 	lds	r24, 0x03DD
    8998:	88 23       	and	r24, r24
    899a:	81 f0       	breq	.+32     	; 0x89bc <dev_write_atmel_flash+0xec>
            while ( atmel_flash_busy())
    899c:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    89a0:	88 23       	and	r24, r24
    89a2:	e1 f7       	brne	.-8      	; 0x899c <dev_write_atmel_flash+0xcc>
               ;
            atmel_flash_flush_buffer( cur_buff, cur_page );
    89a4:	80 91 db 03 	lds	r24, 0x03DB
    89a8:	90 91 dc 03 	lds	r25, 0x03DC
    89ac:	20 91 da 03 	lds	r18, 0x03DA
    89b0:	bc 01       	movw	r22, r24
    89b2:	82 2f       	mov	r24, r18
    89b4:	0e 94 f5 49 	call	0x93ea	; 0x93ea <atmel_flash_flush_buffer>
            dirty = 0;
    89b8:	10 92 dd 03 	sts	0x03DD, r1
         }
         cur_buff = ( cur_buff == ATMEL_FLASH_BUFFER_1 ? ATMEL_FLASH_BUFFER_2: ATMEL_FLASH_BUFFER_1 );
    89bc:	80 91 da 03 	lds	r24, 0x03DA
    89c0:	81 30       	cpi	r24, 0x01	; 1
    89c2:	19 f4       	brne	.+6      	; 0x89ca <dev_write_atmel_flash+0xfa>
    89c4:	42 e0       	ldi	r20, 0x02	; 2
    89c6:	4f 87       	std	Y+15, r20	; 0x0f
    89c8:	02 c0       	rjmp	.+4      	; 0x89ce <dev_write_atmel_flash+0xfe>
    89ca:	51 e0       	ldi	r21, 0x01	; 1
    89cc:	5f 87       	std	Y+15, r21	; 0x0f
    89ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    89d0:	80 93 da 03 	sts	0x03DA, r24
         cur_page = page;
    89d4:	89 85       	ldd	r24, Y+9	; 0x09
    89d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    89d8:	90 93 dc 03 	sts	0x03DC, r25
    89dc:	80 93 db 03 	sts	0x03DB, r24
         if ( num_bytes < ATMEL_FLASH_PAGE_SIZE ) {
    89e0:	8d 81       	ldd	r24, Y+5	; 0x05
    89e2:	9e 81       	ldd	r25, Y+6	; 0x06
    89e4:	21 e0       	ldi	r18, 0x01	; 1
    89e6:	88 30       	cpi	r24, 0x08	; 8
    89e8:	92 07       	cpc	r25, r18
    89ea:	60 f4       	brcc	.+24     	; 0x8a04 <dev_write_atmel_flash+0x134>
            while ( atmel_flash_busy())
    89ec:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    89f0:	88 23       	and	r24, r24
    89f2:	e1 f7       	brne	.-8      	; 0x89ec <dev_write_atmel_flash+0x11c>
               ;
            atmel_flash_fill_buffer( cur_buff, page );
    89f4:	20 91 da 03 	lds	r18, 0x03DA
    89f8:	89 85       	ldd	r24, Y+9	; 0x09
    89fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    89fc:	bc 01       	movw	r22, r24
    89fe:	82 2f       	mov	r24, r18
    8a00:	0e 94 8a 4a 	call	0x9514	; 0x9514 <atmel_flash_fill_buffer>
         }
         // Erase next page right now
         while ( atmel_flash_busy())
    8a04:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    8a08:	88 23       	and	r24, r24
    8a0a:	e1 f7       	brne	.-8      	; 0x8a04 <dev_write_atmel_flash+0x134>
            ;
         atmel_flash_erase_page( page );
    8a0c:	89 85       	ldd	r24, Y+9	; 0x09
    8a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    8a10:	0e 94 df 4a 	call	0x95be	; 0x95be <atmel_flash_erase_page>
      }
      atmel_flash_write_buffer( cur_buff, offset, &buf[ index ], num_bytes );
    8a14:	2b 81       	ldd	r18, Y+3	; 0x03
    8a16:	3c 81       	ldd	r19, Y+4	; 0x04
    8a18:	89 81       	ldd	r24, Y+1	; 0x01
    8a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    8a1c:	a9 01       	movw	r20, r18
    8a1e:	48 0f       	add	r20, r24
    8a20:	59 1f       	adc	r21, r25
    8a22:	e0 91 da 03 	lds	r30, 0x03DA
    8a26:	8d 81       	ldd	r24, Y+5	; 0x05
    8a28:	9e 81       	ldd	r25, Y+6	; 0x06
    8a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    8a2c:	78 85       	ldd	r23, Y+8	; 0x08
    8a2e:	9c 01       	movw	r18, r24
    8a30:	8e 2f       	mov	r24, r30
    8a32:	0e 94 91 49 	call	0x9322	; 0x9322 <atmel_flash_write_buffer>
      dirty = 1;
    8a36:	81 e0       	ldi	r24, 0x01	; 1
    8a38:	80 93 dd 03 	sts	0x03DD, r24
      index += num_bytes;
    8a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    8a3e:	3c 81       	ldd	r19, Y+4	; 0x04
    8a40:	8d 81       	ldd	r24, Y+5	; 0x05
    8a42:	9e 81       	ldd	r25, Y+6	; 0x06
    8a44:	82 0f       	add	r24, r18
    8a46:	93 1f       	adc	r25, r19
    8a48:	9c 83       	std	Y+4, r25	; 0x04
    8a4a:	8b 83       	std	Y+3, r24	; 0x03
      atmel_flash_addr += num_bytes;
    8a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    8a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    8a50:	9c 01       	movw	r18, r24
    8a52:	44 27       	eor	r20, r20
    8a54:	55 27       	eor	r21, r21
    8a56:	80 91 d6 03 	lds	r24, 0x03D6
    8a5a:	90 91 d7 03 	lds	r25, 0x03D7
    8a5e:	a0 91 d8 03 	lds	r26, 0x03D8
    8a62:	b0 91 d9 03 	lds	r27, 0x03D9
    8a66:	82 0f       	add	r24, r18
    8a68:	93 1f       	adc	r25, r19
    8a6a:	a4 1f       	adc	r26, r20
    8a6c:	b5 1f       	adc	r27, r21
    8a6e:	80 93 d6 03 	sts	0x03D6, r24
    8a72:	90 93 d7 03 	sts	0x03D7, r25
    8a76:	a0 93 d8 03 	sts	0x03D8, r26
    8a7a:	b0 93 d9 03 	sts	0x03D9, r27
      count -= num_bytes;
    8a7e:	2d 85       	ldd	r18, Y+13	; 0x0d
    8a80:	3e 85       	ldd	r19, Y+14	; 0x0e
    8a82:	8d 81       	ldd	r24, Y+5	; 0x05
    8a84:	9e 81       	ldd	r25, Y+6	; 0x06
    8a86:	a9 01       	movw	r20, r18
    8a88:	48 1b       	sub	r20, r24
    8a8a:	59 0b       	sbc	r21, r25
    8a8c:	ca 01       	movw	r24, r20
    8a8e:	9e 87       	std	Y+14, r25	; 0x0e
    8a90:	8d 87       	std	Y+13, r24	; 0x0d
      page ++;
    8a92:	89 85       	ldd	r24, Y+9	; 0x09
    8a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    8a96:	01 96       	adiw	r24, 0x01	; 1
    8a98:	9a 87       	std	Y+10, r25	; 0x0a
    8a9a:	89 87       	std	Y+9, r24	; 0x09
      offset = 0;
    8a9c:	18 86       	std	Y+8, r1	; 0x08
    8a9e:	1f 82       	std	Y+7, r1	; 0x07
    8aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    8aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    8aa4:	00 97       	sbiw	r24, 0x00	; 0
    8aa6:	09 f0       	breq	.+2      	; 0x8aaa <dev_write_atmel_flash+0x1da>
    8aa8:	54 cf       	rjmp	.-344    	; 0x8952 <dev_write_atmel_flash+0x82>
   }
   return count;
    8aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    8aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    8aae:	2f 96       	adiw	r28, 0x0f	; 15
    8ab0:	0f b6       	in	r0, 0x3f	; 63
    8ab2:	f8 94       	cli
    8ab4:	de bf       	out	0x3e, r29	; 62
    8ab6:	0f be       	out	0x3f, r0	; 63
    8ab8:	cd bf       	out	0x3d, r28	; 61
    8aba:	df 91       	pop	r29
    8abc:	cf 91       	pop	r28
    8abe:	08 95       	ret

00008ac0 <atmel_flash_compare>:
}

/** @brief Compare buf to the current flash address, for count bytes
 */
uint8_t atmel_flash_compare( uint8_t *buf, uint16_t count ) {
    8ac0:	cf 93       	push	r28
    8ac2:	df 93       	push	r29
    8ac4:	cd b7       	in	r28, 0x3d	; 61
    8ac6:	de b7       	in	r29, 0x3e	; 62
    8ac8:	2d 97       	sbiw	r28, 0x0d	; 13
    8aca:	0f b6       	in	r0, 0x3f	; 63
    8acc:	f8 94       	cli
    8ace:	de bf       	out	0x3e, r29	; 62
    8ad0:	0f be       	out	0x3f, r0	; 63
    8ad2:	cd bf       	out	0x3d, r28	; 61
    8ad4:	9b 87       	std	Y+11, r25	; 0x0b
    8ad6:	8a 87       	std	Y+10, r24	; 0x0a
    8ad8:	7d 87       	std	Y+13, r23	; 0x0d
    8ada:	6c 87       	std	Y+12, r22	; 0x0c
   uint16_t page, offset, num_bytes;
   uint16_t index = 0;
    8adc:	1b 82       	std	Y+3, r1	; 0x03
    8ade:	1a 82       	std	Y+2, r1	; 0x02
   uint8_t compare = 0;
    8ae0:	19 82       	std	Y+1, r1	; 0x01
   if ( dirty ) {
    8ae2:	80 91 dd 03 	lds	r24, 0x03DD
    8ae6:	88 23       	and	r24, r24
    8ae8:	81 f0       	breq	.+32     	; 0x8b0a <atmel_flash_compare+0x4a>
      while ( atmel_flash_busy())
    8aea:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    8aee:	88 23       	and	r24, r24
    8af0:	e1 f7       	brne	.-8      	; 0x8aea <atmel_flash_compare+0x2a>
         ;
      atmel_flash_flush_buffer( cur_buff, cur_page );
    8af2:	80 91 db 03 	lds	r24, 0x03DB
    8af6:	90 91 dc 03 	lds	r25, 0x03DC
    8afa:	20 91 da 03 	lds	r18, 0x03DA
    8afe:	bc 01       	movw	r22, r24
    8b00:	82 2f       	mov	r24, r18
    8b02:	0e 94 f5 49 	call	0x93ea	; 0x93ea <atmel_flash_flush_buffer>
      dirty = 0;
    8b06:	10 92 dd 03 	sts	0x03DD, r1
   }
   // Wait for any previous actions to complete
   while ( atmel_flash_busy())
    8b0a:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    8b0e:	88 23       	and	r24, r24
    8b10:	e1 f7       	brne	.-8      	; 0x8b0a <atmel_flash_compare+0x4a>
      ;
   while ( count > 0 ) {
    8b12:	94 c0       	rjmp	.+296    	; 0x8c3c <atmel_flash_compare+0x17c>
      page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    8b14:	80 91 d6 03 	lds	r24, 0x03D6
    8b18:	90 91 d7 03 	lds	r25, 0x03D7
    8b1c:	a0 91 d8 03 	lds	r26, 0x03D8
    8b20:	b0 91 d9 03 	lds	r27, 0x03D9
    8b24:	28 e0       	ldi	r18, 0x08	; 8
    8b26:	31 e0       	ldi	r19, 0x01	; 1
    8b28:	40 e0       	ldi	r20, 0x00	; 0
    8b2a:	50 e0       	ldi	r21, 0x00	; 0
    8b2c:	bc 01       	movw	r22, r24
    8b2e:	cd 01       	movw	r24, r26
    8b30:	0e 94 81 a3 	call	0x14702	; 0x14702 <__udivmodsi4>
    8b34:	da 01       	movw	r26, r20
    8b36:	c9 01       	movw	r24, r18
    8b38:	99 87       	std	Y+9, r25	; 0x09
    8b3a:	88 87       	std	Y+8, r24	; 0x08
      offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    8b3c:	80 91 d6 03 	lds	r24, 0x03D6
    8b40:	90 91 d7 03 	lds	r25, 0x03D7
    8b44:	a0 91 d8 03 	lds	r26, 0x03D8
    8b48:	b0 91 d9 03 	lds	r27, 0x03D9
    8b4c:	28 e0       	ldi	r18, 0x08	; 8
    8b4e:	31 e0       	ldi	r19, 0x01	; 1
    8b50:	40 e0       	ldi	r20, 0x00	; 0
    8b52:	50 e0       	ldi	r21, 0x00	; 0
    8b54:	bc 01       	movw	r22, r24
    8b56:	cd 01       	movw	r24, r26
    8b58:	0e 94 81 a3 	call	0x14702	; 0x14702 <__udivmodsi4>
    8b5c:	dc 01       	movw	r26, r24
    8b5e:	cb 01       	movw	r24, r22
    8b60:	9f 83       	std	Y+7, r25	; 0x07
    8b62:	8e 83       	std	Y+6, r24	; 0x06
      if ( count + offset > ATMEL_FLASH_PAGE_SIZE ) {
    8b64:	2c 85       	ldd	r18, Y+12	; 0x0c
    8b66:	3d 85       	ldd	r19, Y+13	; 0x0d
    8b68:	8e 81       	ldd	r24, Y+6	; 0x06
    8b6a:	9f 81       	ldd	r25, Y+7	; 0x07
    8b6c:	82 0f       	add	r24, r18
    8b6e:	93 1f       	adc	r25, r19
    8b70:	21 e0       	ldi	r18, 0x01	; 1
    8b72:	89 30       	cpi	r24, 0x09	; 9
    8b74:	92 07       	cpc	r25, r18
    8b76:	48 f0       	brcs	.+18     	; 0x8b8a <atmel_flash_compare+0xca>
         num_bytes = ATMEL_FLASH_PAGE_SIZE - offset;
    8b78:	88 e0       	ldi	r24, 0x08	; 8
    8b7a:	91 e0       	ldi	r25, 0x01	; 1
    8b7c:	2e 81       	ldd	r18, Y+6	; 0x06
    8b7e:	3f 81       	ldd	r19, Y+7	; 0x07
    8b80:	82 1b       	sub	r24, r18
    8b82:	93 0b       	sbc	r25, r19
    8b84:	9d 83       	std	Y+5, r25	; 0x05
    8b86:	8c 83       	std	Y+4, r24	; 0x04
    8b88:	04 c0       	rjmp	.+8      	; 0x8b92 <atmel_flash_compare+0xd2>
      } else {
         num_bytes = count;
    8b8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    8b8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    8b8e:	9d 83       	std	Y+5, r25	; 0x05
    8b90:	8c 83       	std	Y+4, r24	; 0x04
      } 
      // Are we not comparing a whole page?
      if ( num_bytes < ATMEL_FLASH_PAGE_SIZE ) {
    8b92:	8c 81       	ldd	r24, Y+4	; 0x04
    8b94:	9d 81       	ldd	r25, Y+5	; 0x05
    8b96:	41 e0       	ldi	r20, 0x01	; 1
    8b98:	88 30       	cpi	r24, 0x08	; 8
    8b9a:	94 07       	cpc	r25, r20
    8b9c:	50 f4       	brcc	.+20     	; 0x8bb2 <atmel_flash_compare+0xf2>
         atmel_flash_fill_buffer( ATMEL_FLASH_DEFAULT_BUFFER, page );
    8b9e:	88 85       	ldd	r24, Y+8	; 0x08
    8ba0:	99 85       	ldd	r25, Y+9	; 0x09
    8ba2:	bc 01       	movw	r22, r24
    8ba4:	81 e0       	ldi	r24, 0x01	; 1
    8ba6:	0e 94 8a 4a 	call	0x9514	; 0x9514 <atmel_flash_fill_buffer>
         while ( atmel_flash_busy())
    8baa:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    8bae:	88 23       	and	r24, r24
    8bb0:	e1 f7       	brne	.-8      	; 0x8baa <atmel_flash_compare+0xea>
            ;
      }
      // Write the data we want to compare to the buffer
      atmel_flash_write_buffer( ATMEL_FLASH_DEFAULT_BUFFER, offset, &buf[ index ], num_bytes );
    8bb2:	2a 81       	ldd	r18, Y+2	; 0x02
    8bb4:	3b 81       	ldd	r19, Y+3	; 0x03
    8bb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    8bb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    8bba:	a9 01       	movw	r20, r18
    8bbc:	48 0f       	add	r20, r24
    8bbe:	59 1f       	adc	r21, r25
    8bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    8bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    8bc4:	6e 81       	ldd	r22, Y+6	; 0x06
    8bc6:	7f 81       	ldd	r23, Y+7	; 0x07
    8bc8:	9c 01       	movw	r18, r24
    8bca:	81 e0       	ldi	r24, 0x01	; 1
    8bcc:	0e 94 91 49 	call	0x9322	; 0x9322 <atmel_flash_write_buffer>
      // Compare the buffer to main memory
      if ( atmel_flash_compare_buffer( ATMEL_FLASH_DEFAULT_BUFFER, page )) {
    8bd0:	88 85       	ldd	r24, Y+8	; 0x08
    8bd2:	99 85       	ldd	r25, Y+9	; 0x09
    8bd4:	bc 01       	movw	r22, r24
    8bd6:	81 e0       	ldi	r24, 0x01	; 1
    8bd8:	0e 94 38 4a 	call	0x9470	; 0x9470 <atmel_flash_compare_buffer>
    8bdc:	88 23       	and	r24, r24
    8bde:	19 f0       	breq	.+6      	; 0x8be6 <atmel_flash_compare+0x126>
         compare = 1;
    8be0:	81 e0       	ldi	r24, 0x01	; 1
    8be2:	89 83       	std	Y+1, r24	; 0x01
         break;
    8be4:	30 c0       	rjmp	.+96     	; 0x8c46 <atmel_flash_compare+0x186>
      }
      index += num_bytes;
    8be6:	2a 81       	ldd	r18, Y+2	; 0x02
    8be8:	3b 81       	ldd	r19, Y+3	; 0x03
    8bea:	8c 81       	ldd	r24, Y+4	; 0x04
    8bec:	9d 81       	ldd	r25, Y+5	; 0x05
    8bee:	82 0f       	add	r24, r18
    8bf0:	93 1f       	adc	r25, r19
    8bf2:	9b 83       	std	Y+3, r25	; 0x03
    8bf4:	8a 83       	std	Y+2, r24	; 0x02
      atmel_flash_addr += num_bytes;
    8bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    8bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    8bfa:	9c 01       	movw	r18, r24
    8bfc:	44 27       	eor	r20, r20
    8bfe:	55 27       	eor	r21, r21
    8c00:	80 91 d6 03 	lds	r24, 0x03D6
    8c04:	90 91 d7 03 	lds	r25, 0x03D7
    8c08:	a0 91 d8 03 	lds	r26, 0x03D8
    8c0c:	b0 91 d9 03 	lds	r27, 0x03D9
    8c10:	82 0f       	add	r24, r18
    8c12:	93 1f       	adc	r25, r19
    8c14:	a4 1f       	adc	r26, r20
    8c16:	b5 1f       	adc	r27, r21
    8c18:	80 93 d6 03 	sts	0x03D6, r24
    8c1c:	90 93 d7 03 	sts	0x03D7, r25
    8c20:	a0 93 d8 03 	sts	0x03D8, r26
    8c24:	b0 93 d9 03 	sts	0x03D9, r27
      count -= num_bytes;
    8c28:	2c 85       	ldd	r18, Y+12	; 0x0c
    8c2a:	3d 85       	ldd	r19, Y+13	; 0x0d
    8c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    8c2e:	9d 81       	ldd	r25, Y+5	; 0x05
    8c30:	a9 01       	movw	r20, r18
    8c32:	48 1b       	sub	r20, r24
    8c34:	59 0b       	sbc	r21, r25
    8c36:	ca 01       	movw	r24, r20
    8c38:	9d 87       	std	Y+13, r25	; 0x0d
    8c3a:	8c 87       	std	Y+12, r24	; 0x0c
    8c3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    8c3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    8c40:	00 97       	sbiw	r24, 0x00	; 0
    8c42:	09 f0       	breq	.+2      	; 0x8c46 <atmel_flash_compare+0x186>
    8c44:	67 cf       	rjmp	.-306    	; 0x8b14 <atmel_flash_compare+0x54>
   }
   // In case we exited the loop early, act like we read the whole range
   atmel_flash_addr += count;
    8c46:	8c 85       	ldd	r24, Y+12	; 0x0c
    8c48:	9d 85       	ldd	r25, Y+13	; 0x0d
    8c4a:	9c 01       	movw	r18, r24
    8c4c:	44 27       	eor	r20, r20
    8c4e:	55 27       	eor	r21, r21
    8c50:	80 91 d6 03 	lds	r24, 0x03D6
    8c54:	90 91 d7 03 	lds	r25, 0x03D7
    8c58:	a0 91 d8 03 	lds	r26, 0x03D8
    8c5c:	b0 91 d9 03 	lds	r27, 0x03D9
    8c60:	82 0f       	add	r24, r18
    8c62:	93 1f       	adc	r25, r19
    8c64:	a4 1f       	adc	r26, r20
    8c66:	b5 1f       	adc	r27, r21
    8c68:	80 93 d6 03 	sts	0x03D6, r24
    8c6c:	90 93 d7 03 	sts	0x03D7, r25
    8c70:	a0 93 d8 03 	sts	0x03D8, r26
    8c74:	b0 93 d9 03 	sts	0x03D9, r27
   return compare;
    8c78:	89 81       	ldd	r24, Y+1	; 0x01
    8c7a:	99 27       	eor	r25, r25
    8c7c:	2d 96       	adiw	r28, 0x0d	; 13
    8c7e:	0f b6       	in	r0, 0x3f	; 63
    8c80:	f8 94       	cli
    8c82:	de bf       	out	0x3e, r29	; 62
    8c84:	0f be       	out	0x3f, r0	; 63
    8c86:	cd bf       	out	0x3d, r28	; 61
    8c88:	df 91       	pop	r29
    8c8a:	cf 91       	pop	r28
    8c8c:	08 95       	ret

00008c8e <atmel_flash_crc>:
}
/** @brief Compute the crc from the current flash address, for count bytes
 */
uint16_t atmel_flash_crc( uint32_t count ) {
    8c8e:	ef 92       	push	r14
    8c90:	ff 92       	push	r15
    8c92:	0f 93       	push	r16
    8c94:	1f 93       	push	r17
    8c96:	cf 93       	push	r28
    8c98:	df 93       	push	r29
    8c9a:	cd b7       	in	r28, 0x3d	; 61
    8c9c:	de b7       	in	r29, 0x3e	; 62
    8c9e:	2a 97       	sbiw	r28, 0x0a	; 10
    8ca0:	0f b6       	in	r0, 0x3f	; 63
    8ca2:	f8 94       	cli
    8ca4:	de bf       	out	0x3e, r29	; 62
    8ca6:	0f be       	out	0x3f, r0	; 63
    8ca8:	cd bf       	out	0x3d, r28	; 61
    8caa:	6f 83       	std	Y+7, r22	; 0x07
    8cac:	78 87       	std	Y+8, r23	; 0x08
    8cae:	89 87       	std	Y+9, r24	; 0x09
    8cb0:	9a 87       	std	Y+10, r25	; 0x0a
   uint16_t page, offset, crc;
   page = atmel_flash_addr / ATMEL_FLASH_PAGE_SIZE;
    8cb2:	80 91 d6 03 	lds	r24, 0x03D6
    8cb6:	90 91 d7 03 	lds	r25, 0x03D7
    8cba:	a0 91 d8 03 	lds	r26, 0x03D8
    8cbe:	b0 91 d9 03 	lds	r27, 0x03D9
    8cc2:	28 e0       	ldi	r18, 0x08	; 8
    8cc4:	31 e0       	ldi	r19, 0x01	; 1
    8cc6:	40 e0       	ldi	r20, 0x00	; 0
    8cc8:	50 e0       	ldi	r21, 0x00	; 0
    8cca:	bc 01       	movw	r22, r24
    8ccc:	cd 01       	movw	r24, r26
    8cce:	0e 94 81 a3 	call	0x14702	; 0x14702 <__udivmodsi4>
    8cd2:	da 01       	movw	r26, r20
    8cd4:	c9 01       	movw	r24, r18
    8cd6:	9e 83       	std	Y+6, r25	; 0x06
    8cd8:	8d 83       	std	Y+5, r24	; 0x05
   offset = atmel_flash_addr % ATMEL_FLASH_PAGE_SIZE;
    8cda:	80 91 d6 03 	lds	r24, 0x03D6
    8cde:	90 91 d7 03 	lds	r25, 0x03D7
    8ce2:	a0 91 d8 03 	lds	r26, 0x03D8
    8ce6:	b0 91 d9 03 	lds	r27, 0x03D9
    8cea:	28 e0       	ldi	r18, 0x08	; 8
    8cec:	31 e0       	ldi	r19, 0x01	; 1
    8cee:	40 e0       	ldi	r20, 0x00	; 0
    8cf0:	50 e0       	ldi	r21, 0x00	; 0
    8cf2:	bc 01       	movw	r22, r24
    8cf4:	cd 01       	movw	r24, r26
    8cf6:	0e 94 81 a3 	call	0x14702	; 0x14702 <__udivmodsi4>
    8cfa:	dc 01       	movw	r26, r24
    8cfc:	cb 01       	movw	r24, r22
    8cfe:	9c 83       	std	Y+4, r25	; 0x04
    8d00:	8b 83       	std	Y+3, r24	; 0x03
   if ( dirty && page <= cur_page && page + ( offset + count ) / ATMEL_FLASH_PAGE_SIZE >= cur_page ) {
    8d02:	80 91 dd 03 	lds	r24, 0x03DD
    8d06:	88 23       	and	r24, r24
    8d08:	09 f4       	brne	.+2      	; 0x8d0c <atmel_flash_crc+0x7e>
    8d0a:	46 c0       	rjmp	.+140    	; 0x8d98 <atmel_flash_crc+0x10a>
    8d0c:	20 91 db 03 	lds	r18, 0x03DB
    8d10:	30 91 dc 03 	lds	r19, 0x03DC
    8d14:	8d 81       	ldd	r24, Y+5	; 0x05
    8d16:	9e 81       	ldd	r25, Y+6	; 0x06
    8d18:	28 17       	cp	r18, r24
    8d1a:	39 07       	cpc	r19, r25
    8d1c:	e8 f1       	brcs	.+122    	; 0x8d98 <atmel_flash_crc+0x10a>
    8d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    8d20:	9e 81       	ldd	r25, Y+6	; 0x06
    8d22:	7c 01       	movw	r14, r24
    8d24:	00 27       	eor	r16, r16
    8d26:	11 27       	eor	r17, r17
    8d28:	8b 81       	ldd	r24, Y+3	; 0x03
    8d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    8d2c:	9c 01       	movw	r18, r24
    8d2e:	44 27       	eor	r20, r20
    8d30:	55 27       	eor	r21, r21
    8d32:	8f 81       	ldd	r24, Y+7	; 0x07
    8d34:	98 85       	ldd	r25, Y+8	; 0x08
    8d36:	a9 85       	ldd	r26, Y+9	; 0x09
    8d38:	ba 85       	ldd	r27, Y+10	; 0x0a
    8d3a:	82 0f       	add	r24, r18
    8d3c:	93 1f       	adc	r25, r19
    8d3e:	a4 1f       	adc	r26, r20
    8d40:	b5 1f       	adc	r27, r21
    8d42:	28 e0       	ldi	r18, 0x08	; 8
    8d44:	31 e0       	ldi	r19, 0x01	; 1
    8d46:	40 e0       	ldi	r20, 0x00	; 0
    8d48:	50 e0       	ldi	r21, 0x00	; 0
    8d4a:	bc 01       	movw	r22, r24
    8d4c:	cd 01       	movw	r24, r26
    8d4e:	0e 94 81 a3 	call	0x14702	; 0x14702 <__udivmodsi4>
    8d52:	da 01       	movw	r26, r20
    8d54:	c9 01       	movw	r24, r18
    8d56:	a8 01       	movw	r20, r16
    8d58:	97 01       	movw	r18, r14
    8d5a:	28 0f       	add	r18, r24
    8d5c:	39 1f       	adc	r19, r25
    8d5e:	4a 1f       	adc	r20, r26
    8d60:	5b 1f       	adc	r21, r27
    8d62:	80 91 db 03 	lds	r24, 0x03DB
    8d66:	90 91 dc 03 	lds	r25, 0x03DC
    8d6a:	aa 27       	eor	r26, r26
    8d6c:	bb 27       	eor	r27, r27
    8d6e:	28 17       	cp	r18, r24
    8d70:	39 07       	cpc	r19, r25
    8d72:	4a 07       	cpc	r20, r26
    8d74:	5b 07       	cpc	r21, r27
    8d76:	80 f0       	brcs	.+32     	; 0x8d98 <atmel_flash_crc+0x10a>
      while ( atmel_flash_busy())
    8d78:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    8d7c:	88 23       	and	r24, r24
    8d7e:	e1 f7       	brne	.-8      	; 0x8d78 <atmel_flash_crc+0xea>
         ;
      atmel_flash_flush_buffer( cur_buff, cur_page );
    8d80:	80 91 db 03 	lds	r24, 0x03DB
    8d84:	90 91 dc 03 	lds	r25, 0x03DC
    8d88:	20 91 da 03 	lds	r18, 0x03DA
    8d8c:	bc 01       	movw	r22, r24
    8d8e:	82 2f       	mov	r24, r18
    8d90:	0e 94 f5 49 	call	0x93ea	; 0x93ea <atmel_flash_flush_buffer>
      dirty = 0;
    8d94:	10 92 dd 03 	sts	0x03DD, r1
   }
   // Wait for any previous actions to complete
   while ( atmel_flash_busy())
    8d98:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    8d9c:	88 23       	and	r24, r24
    8d9e:	e1 f7       	brne	.-8      	; 0x8d98 <atmel_flash_crc+0x10a>
      ;
   crc = atmel_flash_crc_memory( page, offset, count );
    8da0:	8f 81       	ldd	r24, Y+7	; 0x07
    8da2:	98 85       	ldd	r25, Y+8	; 0x08
    8da4:	a9 85       	ldd	r26, Y+9	; 0x09
    8da6:	ba 85       	ldd	r27, Y+10	; 0x0a
    8da8:	6b 81       	ldd	r22, Y+3	; 0x03
    8daa:	7c 81       	ldd	r23, Y+4	; 0x04
    8dac:	ed 81       	ldd	r30, Y+5	; 0x05
    8dae:	fe 81       	ldd	r31, Y+6	; 0x06
    8db0:	9c 01       	movw	r18, r24
    8db2:	ad 01       	movw	r20, r26
    8db4:	cf 01       	movw	r24, r30
    8db6:	0e 94 88 48 	call	0x9110	; 0x9110 <atmel_flash_crc_memory>
    8dba:	9a 83       	std	Y+2, r25	; 0x02
    8dbc:	89 83       	std	Y+1, r24	; 0x01
   return crc;
    8dbe:	89 81       	ldd	r24, Y+1	; 0x01
    8dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    8dc2:	2a 96       	adiw	r28, 0x0a	; 10
    8dc4:	0f b6       	in	r0, 0x3f	; 63
    8dc6:	f8 94       	cli
    8dc8:	de bf       	out	0x3e, r29	; 62
    8dca:	0f be       	out	0x3f, r0	; 63
    8dcc:	cd bf       	out	0x3d, r28	; 61
    8dce:	df 91       	pop	r29
    8dd0:	cf 91       	pop	r28
    8dd2:	1f 91       	pop	r17
    8dd4:	0f 91       	pop	r16
    8dd6:	ff 90       	pop	r15
    8dd8:	ef 90       	pop	r14
    8dda:	08 95       	ret

00008ddc <atmel_flash_get_byte>:
}
/** @brief Set the flash in low
 */
 /*static*/inline void atmel_flash_low( void ) {
   uint8_t sreg;
   sreg = SREG;
   cli();
   // clear flash clock
   ATMEL_FLASH_PORT &=  ~ ( 1 << ATMEL_FLASH_CLK );
   // clear select pin
   ATMEL_FLASH_SELECT &=  ~ ( 1 << ATMEL_FLASH_SELECT_PIN );
   SREG = sreg;
}
/** @brief Set the flash pin high
 */
 /*static*/inline void atmel_flash_high( void ) {
   // set the pin high
   ATMEL_FLASH_SELECT |= 1 << ATMEL_FLASH_SELECT_PIN;
}
// 0x11010111, 3 and 5 pin, pull low FLASH_IN and FLASH_CLK  
/** @brief Init the bit macro.
 */
#define BITINIT  uint8_t clrClkAndData = PORTD & ~0x28 
// first of all, the data is shifted in in rising edge and out in falling
// The I/O address for PORTD is 18, for PIND is 16
// first set the clk to low and the input to low, then 
// check the #n bit in spiOut.  
//  if 0,    then skip the step of writing the #n bit in FLASH_IN to high 
//           else pull the flash_in to high
// then set  clk to rising edge
// then check whether the FLASH_OUT in PIND is 0
// if yes, then skip (i.e. set the spiIn's bit to 0) 
//         else set the spiIn's bit to 1
/** @brief Write one bit of data.
 */
#define WRITEBIT(n)					\
PORTD = clrClkAndData;				\
asm __volatile__					\
(  "sbrc %2," #n "\n"				\
"\tsbi 18,3\n"					\
"\tsbi 18,5\n"					\
: "=d" (spiIn) : "0" (spiIn), "r" (spiOut))
/** @brief Read one bit of data.
 */
#define READBIT(n)				\
PORTD = clrClkAndData;			\
asm __volatile__				\
("\tsbi 18,5\n"				\
"\tsbic 16,2\n"				\
"\tori %0,1<<" #n "\n"			\
: "=d" (spiIn) : "0" (spiIn))
/** @brief Retrieve 1 byte of data from the external flash.
 */
 static uint8_t atmel_flash_get_byte( void ) {
    8ddc:	cf 93       	push	r28
    8dde:	df 93       	push	r29
    8de0:	cd b7       	in	r28, 0x3d	; 61
    8de2:	de b7       	in	r29, 0x3e	; 62
    8de4:	23 97       	sbiw	r28, 0x03	; 3
    8de6:	0f b6       	in	r0, 0x3f	; 63
    8de8:	f8 94       	cli
    8dea:	de bf       	out	0x3e, r29	; 62
    8dec:	0f be       	out	0x3f, r0	; 63
    8dee:	cd bf       	out	0x3d, r28	; 61
   uint8_t spiIn = 0;
    8df0:	1b 82       	std	Y+3, r1	; 0x03
   uint8_t sreg;
   sreg = SREG;
    8df2:	ef e5       	ldi	r30, 0x5F	; 95
    8df4:	f0 e0       	ldi	r31, 0x00	; 0
    8df6:	80 81       	ld	r24, Z
    8df8:	8a 83       	std	Y+2, r24	; 0x02
   cli();
    8dfa:	f8 94       	cli
   BITINIT;
    8dfc:	e2 e3       	ldi	r30, 0x32	; 50
    8dfe:	f0 e0       	ldi	r31, 0x00	; 0
    8e00:	80 81       	ld	r24, Z
    8e02:	87 7d       	andi	r24, 0xD7	; 215
    8e04:	89 83       	std	Y+1, r24	; 0x01
   READBIT( 7 );
    8e06:	e2 e3       	ldi	r30, 0x32	; 50
    8e08:	f0 e0       	ldi	r31, 0x00	; 0
    8e0a:	89 81       	ldd	r24, Y+1	; 0x01
    8e0c:	80 83       	st	Z, r24
    8e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    8e10:	95 9a       	sbi	0x12, 5	; 18
    8e12:	82 99       	sbic	0x10, 2	; 16
    8e14:	80 68       	ori	r24, 0x80	; 128
    8e16:	8b 83       	std	Y+3, r24	; 0x03
   READBIT( 6 );
    8e18:	e2 e3       	ldi	r30, 0x32	; 50
    8e1a:	f0 e0       	ldi	r31, 0x00	; 0
    8e1c:	89 81       	ldd	r24, Y+1	; 0x01
    8e1e:	80 83       	st	Z, r24
    8e20:	8b 81       	ldd	r24, Y+3	; 0x03
    8e22:	95 9a       	sbi	0x12, 5	; 18
    8e24:	82 99       	sbic	0x10, 2	; 16
    8e26:	80 64       	ori	r24, 0x40	; 64
    8e28:	8b 83       	std	Y+3, r24	; 0x03
   READBIT( 5 );
    8e2a:	e2 e3       	ldi	r30, 0x32	; 50
    8e2c:	f0 e0       	ldi	r31, 0x00	; 0
    8e2e:	89 81       	ldd	r24, Y+1	; 0x01
    8e30:	80 83       	st	Z, r24
    8e32:	8b 81       	ldd	r24, Y+3	; 0x03
    8e34:	95 9a       	sbi	0x12, 5	; 18
    8e36:	82 99       	sbic	0x10, 2	; 16
    8e38:	80 62       	ori	r24, 0x20	; 32
    8e3a:	8b 83       	std	Y+3, r24	; 0x03
   READBIT( 4 );
    8e3c:	e2 e3       	ldi	r30, 0x32	; 50
    8e3e:	f0 e0       	ldi	r31, 0x00	; 0
    8e40:	89 81       	ldd	r24, Y+1	; 0x01
    8e42:	80 83       	st	Z, r24
    8e44:	8b 81       	ldd	r24, Y+3	; 0x03
    8e46:	95 9a       	sbi	0x12, 5	; 18
    8e48:	82 99       	sbic	0x10, 2	; 16
    8e4a:	80 61       	ori	r24, 0x10	; 16
    8e4c:	8b 83       	std	Y+3, r24	; 0x03
   READBIT( 3 );
    8e4e:	e2 e3       	ldi	r30, 0x32	; 50
    8e50:	f0 e0       	ldi	r31, 0x00	; 0
    8e52:	89 81       	ldd	r24, Y+1	; 0x01
    8e54:	80 83       	st	Z, r24
    8e56:	8b 81       	ldd	r24, Y+3	; 0x03
    8e58:	95 9a       	sbi	0x12, 5	; 18
    8e5a:	82 99       	sbic	0x10, 2	; 16
    8e5c:	88 60       	ori	r24, 0x08	; 8
    8e5e:	8b 83       	std	Y+3, r24	; 0x03
   READBIT( 2 );
    8e60:	e2 e3       	ldi	r30, 0x32	; 50
    8e62:	f0 e0       	ldi	r31, 0x00	; 0
    8e64:	89 81       	ldd	r24, Y+1	; 0x01
    8e66:	80 83       	st	Z, r24
    8e68:	8b 81       	ldd	r24, Y+3	; 0x03
    8e6a:	95 9a       	sbi	0x12, 5	; 18
    8e6c:	82 99       	sbic	0x10, 2	; 16
    8e6e:	84 60       	ori	r24, 0x04	; 4
    8e70:	8b 83       	std	Y+3, r24	; 0x03
   READBIT( 1 );
    8e72:	e2 e3       	ldi	r30, 0x32	; 50
    8e74:	f0 e0       	ldi	r31, 0x00	; 0
    8e76:	89 81       	ldd	r24, Y+1	; 0x01
    8e78:	80 83       	st	Z, r24
    8e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    8e7c:	95 9a       	sbi	0x12, 5	; 18
    8e7e:	82 99       	sbic	0x10, 2	; 16
    8e80:	82 60       	ori	r24, 0x02	; 2
    8e82:	8b 83       	std	Y+3, r24	; 0x03
   READBIT( 0 );
    8e84:	e2 e3       	ldi	r30, 0x32	; 50
    8e86:	f0 e0       	ldi	r31, 0x00	; 0
    8e88:	89 81       	ldd	r24, Y+1	; 0x01
    8e8a:	80 83       	st	Z, r24
    8e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    8e8e:	95 9a       	sbi	0x12, 5	; 18
    8e90:	82 99       	sbic	0x10, 2	; 16
    8e92:	81 60       	ori	r24, 0x01	; 1
    8e94:	8b 83       	std	Y+3, r24	; 0x03
   SREG = sreg;
    8e96:	ef e5       	ldi	r30, 0x5F	; 95
    8e98:	f0 e0       	ldi	r31, 0x00	; 0
    8e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    8e9c:	80 83       	st	Z, r24
   return spiIn;
    8e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    8ea0:	99 27       	eor	r25, r25
    8ea2:	23 96       	adiw	r28, 0x03	; 3
    8ea4:	0f b6       	in	r0, 0x3f	; 63
    8ea6:	f8 94       	cli
    8ea8:	de bf       	out	0x3e, r29	; 62
    8eaa:	0f be       	out	0x3f, r0	; 63
    8eac:	cd bf       	out	0x3d, r28	; 61
    8eae:	df 91       	pop	r29
    8eb0:	cf 91       	pop	r28
    8eb2:	08 95       	ret

00008eb4 <atmel_flash_send_byte>:
}
/** @brief Send 1 byte of data from the external flash.
 */
 static uint8_t atmel_flash_send_byte( uint8_t spiOut ) {
    8eb4:	cf 93       	push	r28
    8eb6:	df 93       	push	r29
    8eb8:	cd b7       	in	r28, 0x3d	; 61
    8eba:	de b7       	in	r29, 0x3e	; 62
    8ebc:	24 97       	sbiw	r28, 0x04	; 4
    8ebe:	0f b6       	in	r0, 0x3f	; 63
    8ec0:	f8 94       	cli
    8ec2:	de bf       	out	0x3e, r29	; 62
    8ec4:	0f be       	out	0x3f, r0	; 63
    8ec6:	cd bf       	out	0x3d, r28	; 61
    8ec8:	8c 83       	std	Y+4, r24	; 0x04
   uint8_t spiIn = 0;
    8eca:	1b 82       	std	Y+3, r1	; 0x03
   uint8_t sreg;
   sreg = SREG;
    8ecc:	ef e5       	ldi	r30, 0x5F	; 95
    8ece:	f0 e0       	ldi	r31, 0x00	; 0
    8ed0:	80 81       	ld	r24, Z
    8ed2:	8a 83       	std	Y+2, r24	; 0x02
   cli();
    8ed4:	f8 94       	cli
   BITINIT;
    8ed6:	e2 e3       	ldi	r30, 0x32	; 50
    8ed8:	f0 e0       	ldi	r31, 0x00	; 0
    8eda:	80 81       	ld	r24, Z
    8edc:	87 7d       	andi	r24, 0xD7	; 215
    8ede:	89 83       	std	Y+1, r24	; 0x01
   WRITEBIT( 7 );
    8ee0:	e2 e3       	ldi	r30, 0x32	; 50
    8ee2:	f0 e0       	ldi	r31, 0x00	; 0
    8ee4:	89 81       	ldd	r24, Y+1	; 0x01
    8ee6:	80 83       	st	Z, r24
    8ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    8eea:	8c 81       	ldd	r24, Y+4	; 0x04
    8eec:	29 2f       	mov	r18, r25
    8eee:	87 fd       	sbrc	r24, 7
    8ef0:	93 9a       	sbi	0x12, 3	; 18
    8ef2:	95 9a       	sbi	0x12, 5	; 18
    8ef4:	82 2f       	mov	r24, r18
    8ef6:	8b 83       	std	Y+3, r24	; 0x03
   WRITEBIT( 6 );
    8ef8:	e2 e3       	ldi	r30, 0x32	; 50
    8efa:	f0 e0       	ldi	r31, 0x00	; 0
    8efc:	89 81       	ldd	r24, Y+1	; 0x01
    8efe:	80 83       	st	Z, r24
    8f00:	9b 81       	ldd	r25, Y+3	; 0x03
    8f02:	8c 81       	ldd	r24, Y+4	; 0x04
    8f04:	29 2f       	mov	r18, r25
    8f06:	86 fd       	sbrc	r24, 6
    8f08:	93 9a       	sbi	0x12, 3	; 18
    8f0a:	95 9a       	sbi	0x12, 5	; 18
    8f0c:	82 2f       	mov	r24, r18
    8f0e:	8b 83       	std	Y+3, r24	; 0x03
   WRITEBIT( 5 );
    8f10:	e2 e3       	ldi	r30, 0x32	; 50
    8f12:	f0 e0       	ldi	r31, 0x00	; 0
    8f14:	89 81       	ldd	r24, Y+1	; 0x01
    8f16:	80 83       	st	Z, r24
    8f18:	9b 81       	ldd	r25, Y+3	; 0x03
    8f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    8f1c:	29 2f       	mov	r18, r25
    8f1e:	85 fd       	sbrc	r24, 5
    8f20:	93 9a       	sbi	0x12, 3	; 18
    8f22:	95 9a       	sbi	0x12, 5	; 18
    8f24:	82 2f       	mov	r24, r18
    8f26:	8b 83       	std	Y+3, r24	; 0x03
   WRITEBIT( 4 );
    8f28:	e2 e3       	ldi	r30, 0x32	; 50
    8f2a:	f0 e0       	ldi	r31, 0x00	; 0
    8f2c:	89 81       	ldd	r24, Y+1	; 0x01
    8f2e:	80 83       	st	Z, r24
    8f30:	9b 81       	ldd	r25, Y+3	; 0x03
    8f32:	8c 81       	ldd	r24, Y+4	; 0x04
    8f34:	29 2f       	mov	r18, r25
    8f36:	84 fd       	sbrc	r24, 4
    8f38:	93 9a       	sbi	0x12, 3	; 18
    8f3a:	95 9a       	sbi	0x12, 5	; 18
    8f3c:	82 2f       	mov	r24, r18
    8f3e:	8b 83       	std	Y+3, r24	; 0x03
   WRITEBIT( 3 );
    8f40:	e2 e3       	ldi	r30, 0x32	; 50
    8f42:	f0 e0       	ldi	r31, 0x00	; 0
    8f44:	89 81       	ldd	r24, Y+1	; 0x01
    8f46:	80 83       	st	Z, r24
    8f48:	9b 81       	ldd	r25, Y+3	; 0x03
    8f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    8f4c:	29 2f       	mov	r18, r25
    8f4e:	83 fd       	sbrc	r24, 3
    8f50:	93 9a       	sbi	0x12, 3	; 18
    8f52:	95 9a       	sbi	0x12, 5	; 18
    8f54:	82 2f       	mov	r24, r18
    8f56:	8b 83       	std	Y+3, r24	; 0x03
   WRITEBIT( 2 );
    8f58:	e2 e3       	ldi	r30, 0x32	; 50
    8f5a:	f0 e0       	ldi	r31, 0x00	; 0
    8f5c:	89 81       	ldd	r24, Y+1	; 0x01
    8f5e:	80 83       	st	Z, r24
    8f60:	9b 81       	ldd	r25, Y+3	; 0x03
    8f62:	8c 81       	ldd	r24, Y+4	; 0x04
    8f64:	29 2f       	mov	r18, r25
    8f66:	82 fd       	sbrc	r24, 2
    8f68:	93 9a       	sbi	0x12, 3	; 18
    8f6a:	95 9a       	sbi	0x12, 5	; 18
    8f6c:	82 2f       	mov	r24, r18
    8f6e:	8b 83       	std	Y+3, r24	; 0x03
   WRITEBIT( 1 );
    8f70:	e2 e3       	ldi	r30, 0x32	; 50
    8f72:	f0 e0       	ldi	r31, 0x00	; 0
    8f74:	89 81       	ldd	r24, Y+1	; 0x01
    8f76:	80 83       	st	Z, r24
    8f78:	9b 81       	ldd	r25, Y+3	; 0x03
    8f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    8f7c:	29 2f       	mov	r18, r25
    8f7e:	81 fd       	sbrc	r24, 1
    8f80:	93 9a       	sbi	0x12, 3	; 18
    8f82:	95 9a       	sbi	0x12, 5	; 18
    8f84:	82 2f       	mov	r24, r18
    8f86:	8b 83       	std	Y+3, r24	; 0x03
   WRITEBIT( 0 );
    8f88:	e2 e3       	ldi	r30, 0x32	; 50
    8f8a:	f0 e0       	ldi	r31, 0x00	; 0
    8f8c:	89 81       	ldd	r24, Y+1	; 0x01
    8f8e:	80 83       	st	Z, r24
    8f90:	9b 81       	ldd	r25, Y+3	; 0x03
    8f92:	8c 81       	ldd	r24, Y+4	; 0x04
    8f94:	29 2f       	mov	r18, r25
    8f96:	80 fd       	sbrc	r24, 0
    8f98:	93 9a       	sbi	0x12, 3	; 18
    8f9a:	95 9a       	sbi	0x12, 5	; 18
    8f9c:	82 2f       	mov	r24, r18
    8f9e:	8b 83       	std	Y+3, r24	; 0x03
   SREG = sreg;
    8fa0:	ef e5       	ldi	r30, 0x5F	; 95
    8fa2:	f0 e0       	ldi	r31, 0x00	; 0
    8fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    8fa6:	80 83       	st	Z, r24
   return spiIn;
    8fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    8faa:	99 27       	eor	r25, r25
    8fac:	24 96       	adiw	r28, 0x04	; 4
    8fae:	0f b6       	in	r0, 0x3f	; 63
    8fb0:	f8 94       	cli
    8fb2:	de bf       	out	0x3e, r29	; 62
    8fb4:	0f be       	out	0x3f, r0	; 63
    8fb6:	cd bf       	out	0x3d, r28	; 61
    8fb8:	df 91       	pop	r29
    8fba:	cf 91       	pop	r28
    8fbc:	08 95       	ret

00008fbe <atmel_flash_read_memory>:
}
/* Directly Read Through the Memory, doesn't change the buffer
 * It works when writing/reading the characters, but doesn't work
 * when writing the long data.  Sometimes it just doesn't work
 * need to use logic analysis figure out later. 
 */
/** @brief Directly read through the memory.
 */
 static void atmel_flash_read_memory( uint16_t page, uint16_t offset, void *reqData, uint16_t len ) {
    8fbe:	0f 93       	push	r16
    8fc0:	1f 93       	push	r17
    8fc2:	cf 93       	push	r28
    8fc4:	df 93       	push	r29
    8fc6:	cd b7       	in	r28, 0x3d	; 61
    8fc8:	de b7       	in	r29, 0x3e	; 62
    8fca:	64 97       	sbiw	r28, 0x14	; 20
    8fcc:	0f b6       	in	r0, 0x3f	; 63
    8fce:	f8 94       	cli
    8fd0:	de bf       	out	0x3e, r29	; 62
    8fd2:	0f be       	out	0x3f, r0	; 63
    8fd4:	cd bf       	out	0x3d, r28	; 61
    8fd6:	9e 87       	std	Y+14, r25	; 0x0e
    8fd8:	8d 87       	std	Y+13, r24	; 0x0d
    8fda:	78 8b       	std	Y+16, r23	; 0x10
    8fdc:	6f 87       	std	Y+15, r22	; 0x0f
    8fde:	5a 8b       	std	Y+18, r21	; 0x12
    8fe0:	49 8b       	std	Y+17, r20	; 0x11
    8fe2:	3c 8b       	std	Y+20, r19	; 0x14
    8fe4:	2b 8b       	std	Y+19, r18	; 0x13
   uint8_t cmd[ 8 ],  *reqPtr;
   uint16_t i;
   cmd[ 0 ] = C_READ_THROUGH_MEMORY; // 8 bit of op code
    8fe6:	88 ee       	ldi	r24, 0xE8	; 232
    8fe8:	8d 83       	std	Y+5, r24	; 0x05
   cmd[ 1 ] = ( page >> 7 ); // 4 bit reserve and high 4 MSB
    8fea:	8d 85       	ldd	r24, Y+13	; 0x0d
    8fec:	9e 85       	ldd	r25, Y+14	; 0x0e
    8fee:	88 0f       	add	r24, r24
    8ff0:	89 2f       	mov	r24, r25
    8ff2:	88 1f       	adc	r24, r24
    8ff4:	99 0b       	sbc	r25, r25
    8ff6:	91 95       	neg	r25
    8ff8:	8e 83       	std	Y+6, r24	; 0x06
   cmd[ 2 ] = ( page << 1 ) | offset >> 8; // 7 bit page and 1 bit offset MSB
    8ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
    8ffc:	28 2f       	mov	r18, r24
    8ffe:	22 0f       	add	r18, r18
    9000:	8f 85       	ldd	r24, Y+15	; 0x0f
    9002:	98 89       	ldd	r25, Y+16	; 0x10
    9004:	89 2f       	mov	r24, r25
    9006:	99 27       	eor	r25, r25
    9008:	82 2b       	or	r24, r18
    900a:	8f 83       	std	Y+7, r24	; 0x07
   cmd[ 3 ] = offset; // low-order 8 address bits
    900c:	8f 85       	ldd	r24, Y+15	; 0x0f
    900e:	88 87       	std	Y+8, r24	; 0x08
   cmd[ 4 ] = 0x00;
    9010:	19 86       	std	Y+9, r1	; 0x09
   cmd[ 5 ] = 0x00;
    9012:	1a 86       	std	Y+10, r1	; 0x0a
   cmd[ 6 ] = 0x00;
    9014:	1b 86       	std	Y+11, r1	; 0x0b
   cmd[ 7 ] = 0x00;
    9016:	1c 86       	std	Y+12, r1	; 0x0c
   reqPtr = ( uint8_t* )reqData;
    9018:	89 89       	ldd	r24, Y+17	; 0x11
    901a:	9a 89       	ldd	r25, Y+18	; 0x12
    901c:	9c 83       	std	Y+4, r25	; 0x04
    901e:	8b 83       	std	Y+3, r24	; 0x03
   atmel_flash_low();
    9020:	0e 94 50 48 	call	0x90a0	; 0x90a0 <atmel_flash_low>
   for ( i = 0; i < sizeof( cmd ); i ++ ) {
    9024:	1a 82       	std	Y+2, r1	; 0x02
    9026:	19 82       	std	Y+1, r1	; 0x01
    9028:	0f c0       	rjmp	.+30     	; 0x9048 <atmel_flash_read_memory+0x8a>
      atmel_flash_send_byte( cmd[ i ] );
    902a:	29 81       	ldd	r18, Y+1	; 0x01
    902c:	3a 81       	ldd	r19, Y+2	; 0x02
    902e:	ce 01       	movw	r24, r28
    9030:	05 96       	adiw	r24, 0x05	; 5
    9032:	fc 01       	movw	r30, r24
    9034:	e2 0f       	add	r30, r18
    9036:	f3 1f       	adc	r31, r19
    9038:	80 81       	ld	r24, Z
    903a:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <atmel_flash_send_byte>
    903e:	89 81       	ldd	r24, Y+1	; 0x01
    9040:	9a 81       	ldd	r25, Y+2	; 0x02
    9042:	01 96       	adiw	r24, 0x01	; 1
    9044:	9a 83       	std	Y+2, r25	; 0x02
    9046:	89 83       	std	Y+1, r24	; 0x01
    9048:	89 81       	ldd	r24, Y+1	; 0x01
    904a:	9a 81       	ldd	r25, Y+2	; 0x02
    904c:	88 30       	cpi	r24, 0x08	; 8
    904e:	91 05       	cpc	r25, r1
    9050:	60 f3       	brcs	.-40     	; 0x902a <atmel_flash_read_memory+0x6c>
   } 
   for ( i = 0; i < len; i ++ ) {
    9052:	1a 82       	std	Y+2, r1	; 0x02
    9054:	19 82       	std	Y+1, r1	; 0x01
    9056:	10 c0       	rjmp	.+32     	; 0x9078 <atmel_flash_read_memory+0xba>
      reqPtr[ i ] = atmel_flash_get_byte();
    9058:	29 81       	ldd	r18, Y+1	; 0x01
    905a:	3a 81       	ldd	r19, Y+2	; 0x02
    905c:	8b 81       	ldd	r24, Y+3	; 0x03
    905e:	9c 81       	ldd	r25, Y+4	; 0x04
    9060:	89 01       	movw	r16, r18
    9062:	08 0f       	add	r16, r24
    9064:	19 1f       	adc	r17, r25
    9066:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <atmel_flash_get_byte>
    906a:	f8 01       	movw	r30, r16
    906c:	80 83       	st	Z, r24
    906e:	89 81       	ldd	r24, Y+1	; 0x01
    9070:	9a 81       	ldd	r25, Y+2	; 0x02
    9072:	01 96       	adiw	r24, 0x01	; 1
    9074:	9a 83       	std	Y+2, r25	; 0x02
    9076:	89 83       	std	Y+1, r24	; 0x01
    9078:	29 81       	ldd	r18, Y+1	; 0x01
    907a:	3a 81       	ldd	r19, Y+2	; 0x02
    907c:	8b 89       	ldd	r24, Y+19	; 0x13
    907e:	9c 89       	ldd	r25, Y+20	; 0x14
    9080:	28 17       	cp	r18, r24
    9082:	39 07       	cpc	r19, r25
    9084:	48 f3       	brcs	.-46     	; 0x9058 <atmel_flash_read_memory+0x9a>
   } 
   atmel_flash_high();
    9086:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <atmel_flash_high>
    908a:	64 96       	adiw	r28, 0x14	; 20
    908c:	0f b6       	in	r0, 0x3f	; 63
    908e:	f8 94       	cli
    9090:	de bf       	out	0x3e, r29	; 62
    9092:	0f be       	out	0x3f, r0	; 63
    9094:	cd bf       	out	0x3d, r28	; 61
    9096:	df 91       	pop	r29
    9098:	cf 91       	pop	r28
    909a:	1f 91       	pop	r17
    909c:	0f 91       	pop	r16
    909e:	08 95       	ret

000090a0 <atmel_flash_low>:
    90a0:	cf 93       	push	r28
    90a2:	df 93       	push	r29
    90a4:	cd b7       	in	r28, 0x3d	; 61
    90a6:	de b7       	in	r29, 0x3e	; 62
    90a8:	21 97       	sbiw	r28, 0x01	; 1
    90aa:	0f b6       	in	r0, 0x3f	; 63
    90ac:	f8 94       	cli
    90ae:	de bf       	out	0x3e, r29	; 62
    90b0:	0f be       	out	0x3f, r0	; 63
    90b2:	cd bf       	out	0x3d, r28	; 61
    90b4:	ef e5       	ldi	r30, 0x5F	; 95
    90b6:	f0 e0       	ldi	r31, 0x00	; 0
    90b8:	80 81       	ld	r24, Z
    90ba:	89 83       	std	Y+1, r24	; 0x01
    90bc:	f8 94       	cli
    90be:	a2 e3       	ldi	r26, 0x32	; 50
    90c0:	b0 e0       	ldi	r27, 0x00	; 0
    90c2:	e2 e3       	ldi	r30, 0x32	; 50
    90c4:	f0 e0       	ldi	r31, 0x00	; 0
    90c6:	80 81       	ld	r24, Z
    90c8:	8f 7d       	andi	r24, 0xDF	; 223
    90ca:	8c 93       	st	X, r24
    90cc:	ab e3       	ldi	r26, 0x3B	; 59
    90ce:	b0 e0       	ldi	r27, 0x00	; 0
    90d0:	eb e3       	ldi	r30, 0x3B	; 59
    90d2:	f0 e0       	ldi	r31, 0x00	; 0
    90d4:	80 81       	ld	r24, Z
    90d6:	87 7f       	andi	r24, 0xF7	; 247
    90d8:	8c 93       	st	X, r24
    90da:	ef e5       	ldi	r30, 0x5F	; 95
    90dc:	f0 e0       	ldi	r31, 0x00	; 0
    90de:	89 81       	ldd	r24, Y+1	; 0x01
    90e0:	80 83       	st	Z, r24
    90e2:	21 96       	adiw	r28, 0x01	; 1
    90e4:	0f b6       	in	r0, 0x3f	; 63
    90e6:	f8 94       	cli
    90e8:	de bf       	out	0x3e, r29	; 62
    90ea:	0f be       	out	0x3f, r0	; 63
    90ec:	cd bf       	out	0x3d, r28	; 61
    90ee:	df 91       	pop	r29
    90f0:	cf 91       	pop	r28
    90f2:	08 95       	ret

000090f4 <atmel_flash_high>:
    90f4:	cf 93       	push	r28
    90f6:	df 93       	push	r29
    90f8:	cd b7       	in	r28, 0x3d	; 61
    90fa:	de b7       	in	r29, 0x3e	; 62
    90fc:	ab e3       	ldi	r26, 0x3B	; 59
    90fe:	b0 e0       	ldi	r27, 0x00	; 0
    9100:	eb e3       	ldi	r30, 0x3B	; 59
    9102:	f0 e0       	ldi	r31, 0x00	; 0
    9104:	80 81       	ld	r24, Z
    9106:	88 60       	ori	r24, 0x08	; 8
    9108:	8c 93       	st	X, r24
    910a:	df 91       	pop	r29
    910c:	cf 91       	pop	r28
    910e:	08 95       	ret

00009110 <atmel_flash_crc_memory>:
}
/** @brief Compute crc on main memory without using a buffer.
 */
 static uint16_t atmel_flash_crc_memory( uint16_t page, uint16_t offset, uint32_t len ) {
    9110:	cf 93       	push	r28
    9112:	df 93       	push	r29
    9114:	cd b7       	in	r28, 0x3d	; 61
    9116:	de b7       	in	r29, 0x3e	; 62
    9118:	6a 97       	sbiw	r28, 0x1a	; 26
    911a:	0f b6       	in	r0, 0x3f	; 63
    911c:	f8 94       	cli
    911e:	de bf       	out	0x3e, r29	; 62
    9120:	0f be       	out	0x3f, r0	; 63
    9122:	cd bf       	out	0x3d, r28	; 61
    9124:	9c 8b       	std	Y+20, r25	; 0x14
    9126:	8b 8b       	std	Y+19, r24	; 0x13
    9128:	7e 8b       	std	Y+22, r23	; 0x16
    912a:	6d 8b       	std	Y+21, r22	; 0x15
    912c:	2f 8b       	std	Y+23, r18	; 0x17
    912e:	38 8f       	std	Y+24, r19	; 0x18
    9130:	49 8f       	std	Y+25, r20	; 0x19
    9132:	5a 8f       	std	Y+26, r21	; 0x1a
   uint8_t cmd[ 8 ];
   uint16_t crc;
   uint32_t i;
   cmd[ 0 ] = C_READ_THROUGH_MEMORY; // 8 bit of op code
    9134:	88 ee       	ldi	r24, 0xE8	; 232
    9136:	8b 87       	std	Y+11, r24	; 0x0b
   cmd[ 1 ] = ( page >> 7 ); // 4 bit reserve and high 4 MSB
    9138:	8b 89       	ldd	r24, Y+19	; 0x13
    913a:	9c 89       	ldd	r25, Y+20	; 0x14
    913c:	88 0f       	add	r24, r24
    913e:	89 2f       	mov	r24, r25
    9140:	88 1f       	adc	r24, r24
    9142:	99 0b       	sbc	r25, r25
    9144:	91 95       	neg	r25
    9146:	8c 87       	std	Y+12, r24	; 0x0c
   cmd[ 2 ] = ( page << 1 ) | offset >> 8; // 7 bit page and 1 bit offset MSB
    9148:	8b 89       	ldd	r24, Y+19	; 0x13
    914a:	28 2f       	mov	r18, r24
    914c:	22 0f       	add	r18, r18
    914e:	8d 89       	ldd	r24, Y+21	; 0x15
    9150:	9e 89       	ldd	r25, Y+22	; 0x16
    9152:	89 2f       	mov	r24, r25
    9154:	99 27       	eor	r25, r25
    9156:	82 2b       	or	r24, r18
    9158:	8d 87       	std	Y+13, r24	; 0x0d
   cmd[ 3 ] = offset; // low-order 8 address bits
    915a:	8d 89       	ldd	r24, Y+21	; 0x15
    915c:	8e 87       	std	Y+14, r24	; 0x0e
   cmd[ 4 ] = 0x00;
    915e:	1f 86       	std	Y+15, r1	; 0x0f
   cmd[ 5 ] = 0x00;
    9160:	18 8a       	std	Y+16, r1	; 0x10
   cmd[ 6 ] = 0x00;
    9162:	19 8a       	std	Y+17, r1	; 0x11
   cmd[ 7 ] = 0x00;
    9164:	1a 8a       	std	Y+18, r1	; 0x12
   atmel_flash_low();
    9166:	0e 94 50 48 	call	0x90a0	; 0x90a0 <atmel_flash_low>
   for ( i = 0; i < sizeof( cmd ); i ++ ) {
    916a:	1d 82       	std	Y+5, r1	; 0x05
    916c:	1e 82       	std	Y+6, r1	; 0x06
    916e:	1f 82       	std	Y+7, r1	; 0x07
    9170:	18 86       	std	Y+8, r1	; 0x08
    9172:	18 c0       	rjmp	.+48     	; 0x91a4 <atmel_flash_crc_memory+0x94>
      atmel_flash_send_byte( cmd[ i ] );
    9174:	8d 81       	ldd	r24, Y+5	; 0x05
    9176:	9e 81       	ldd	r25, Y+6	; 0x06
    9178:	af 81       	ldd	r26, Y+7	; 0x07
    917a:	b8 85       	ldd	r27, Y+8	; 0x08
    917c:	9e 01       	movw	r18, r28
    917e:	25 5f       	subi	r18, 0xF5	; 245
    9180:	3f 4f       	sbci	r19, 0xFF	; 255
    9182:	f9 01       	movw	r30, r18
    9184:	e8 0f       	add	r30, r24
    9186:	f9 1f       	adc	r31, r25
    9188:	80 81       	ld	r24, Z
    918a:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <atmel_flash_send_byte>
    918e:	8d 81       	ldd	r24, Y+5	; 0x05
    9190:	9e 81       	ldd	r25, Y+6	; 0x06
    9192:	af 81       	ldd	r26, Y+7	; 0x07
    9194:	b8 85       	ldd	r27, Y+8	; 0x08
    9196:	01 96       	adiw	r24, 0x01	; 1
    9198:	a1 1d       	adc	r26, r1
    919a:	b1 1d       	adc	r27, r1
    919c:	8d 83       	std	Y+5, r24	; 0x05
    919e:	9e 83       	std	Y+6, r25	; 0x06
    91a0:	af 83       	std	Y+7, r26	; 0x07
    91a2:	b8 87       	std	Y+8, r27	; 0x08
    91a4:	8d 81       	ldd	r24, Y+5	; 0x05
    91a6:	9e 81       	ldd	r25, Y+6	; 0x06
    91a8:	af 81       	ldd	r26, Y+7	; 0x07
    91aa:	b8 85       	ldd	r27, Y+8	; 0x08
    91ac:	88 30       	cpi	r24, 0x08	; 8
    91ae:	91 05       	cpc	r25, r1
    91b0:	a1 05       	cpc	r26, r1
    91b2:	b1 05       	cpc	r27, r1
    91b4:	f8 f2       	brcs	.-66     	; 0x9174 <atmel_flash_crc_memory+0x64>
   } 
   // The following code was adapted directly from crc.c
    {
      uint8_t v, xor_flag, byte, bit;
      crc = 0xFFFF /*INITIAL_VALUE*/;
    91b6:	8f ef       	ldi	r24, 0xFF	; 255
    91b8:	9f ef       	ldi	r25, 0xFF	; 255
    91ba:	9a 87       	std	Y+10, r25	; 0x0a
    91bc:	89 87       	std	Y+9, r24	; 0x09
      for ( i = 0; i < len; i ++ ) {
    91be:	1d 82       	std	Y+5, r1	; 0x05
    91c0:	1e 82       	std	Y+6, r1	; 0x06
    91c2:	1f 82       	std	Y+7, r1	; 0x07
    91c4:	18 86       	std	Y+8, r1	; 0x08
    91c6:	3e c0       	rjmp	.+124    	; 0x9244 <atmel_flash_crc_memory+0x134>
         // Read the current byte from flash
         byte = atmel_flash_get_byte();
    91c8:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <atmel_flash_get_byte>
    91cc:	8a 83       	std	Y+2, r24	; 0x02
         v = 0x80;
    91ce:	80 e8       	ldi	r24, 0x80	; 128
    91d0:	8c 83       	std	Y+4, r24	; 0x04
         for ( bit = 0; bit < 8; bit ++ ) {
    91d2:	19 82       	std	Y+1, r1	; 0x01
    91d4:	29 c0       	rjmp	.+82     	; 0x9228 <atmel_flash_crc_memory+0x118>
            if ( crc& 0x8000 ) {
    91d6:	89 85       	ldd	r24, Y+9	; 0x09
    91d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    91da:	99 23       	and	r25, r25
    91dc:	1c f4       	brge	.+6      	; 0x91e4 <atmel_flash_crc_memory+0xd4>
               xor_flag = 1;
    91de:	81 e0       	ldi	r24, 0x01	; 1
    91e0:	8b 83       	std	Y+3, r24	; 0x03
    91e2:	01 c0       	rjmp	.+2      	; 0x91e6 <atmel_flash_crc_memory+0xd6>
            } else {
               xor_flag = 0;
    91e4:	1b 82       	std	Y+3, r1	; 0x03
            } crc = crc << 1;
    91e6:	89 85       	ldd	r24, Y+9	; 0x09
    91e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    91ea:	88 0f       	add	r24, r24
    91ec:	99 1f       	adc	r25, r25
    91ee:	9a 87       	std	Y+10, r25	; 0x0a
    91f0:	89 87       	std	Y+9, r24	; 0x09
            if ( byte& v ) {
    91f2:	9a 81       	ldd	r25, Y+2	; 0x02
    91f4:	8c 81       	ldd	r24, Y+4	; 0x04
    91f6:	89 23       	and	r24, r25
    91f8:	88 23       	and	r24, r24
    91fa:	29 f0       	breq	.+10     	; 0x9206 <atmel_flash_crc_memory+0xf6>
               crc = crc + 1;
    91fc:	89 85       	ldd	r24, Y+9	; 0x09
    91fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    9200:	01 96       	adiw	r24, 0x01	; 1
    9202:	9a 87       	std	Y+10, r25	; 0x0a
    9204:	89 87       	std	Y+9, r24	; 0x09
            } if ( xor_flag ) {
    9206:	8b 81       	ldd	r24, Y+3	; 0x03
    9208:	88 23       	and	r24, r24
    920a:	41 f0       	breq	.+16     	; 0x921c <atmel_flash_crc_memory+0x10c>
               crc = crc ^ 0x1021 /*POLY*/;
    920c:	89 85       	ldd	r24, Y+9	; 0x09
    920e:	9a 85       	ldd	r25, Y+10	; 0x0a
    9210:	21 e2       	ldi	r18, 0x21	; 33
    9212:	30 e1       	ldi	r19, 0x10	; 16
    9214:	82 27       	eor	r24, r18
    9216:	93 27       	eor	r25, r19
    9218:	9a 87       	std	Y+10, r25	; 0x0a
    921a:	89 87       	std	Y+9, r24	; 0x09
            } v = v >> 1;
    921c:	8c 81       	ldd	r24, Y+4	; 0x04
    921e:	86 95       	lsr	r24
    9220:	8c 83       	std	Y+4, r24	; 0x04
    9222:	89 81       	ldd	r24, Y+1	; 0x01
    9224:	8f 5f       	subi	r24, 0xFF	; 255
    9226:	89 83       	std	Y+1, r24	; 0x01
    9228:	89 81       	ldd	r24, Y+1	; 0x01
    922a:	88 30       	cpi	r24, 0x08	; 8
    922c:	a0 f2       	brcs	.-88     	; 0x91d6 <atmel_flash_crc_memory+0xc6>
    922e:	8d 81       	ldd	r24, Y+5	; 0x05
    9230:	9e 81       	ldd	r25, Y+6	; 0x06
    9232:	af 81       	ldd	r26, Y+7	; 0x07
    9234:	b8 85       	ldd	r27, Y+8	; 0x08
    9236:	01 96       	adiw	r24, 0x01	; 1
    9238:	a1 1d       	adc	r26, r1
    923a:	b1 1d       	adc	r27, r1
    923c:	8d 83       	std	Y+5, r24	; 0x05
    923e:	9e 83       	std	Y+6, r25	; 0x06
    9240:	af 83       	std	Y+7, r26	; 0x07
    9242:	b8 87       	std	Y+8, r27	; 0x08
    9244:	2d 81       	ldd	r18, Y+5	; 0x05
    9246:	3e 81       	ldd	r19, Y+6	; 0x06
    9248:	4f 81       	ldd	r20, Y+7	; 0x07
    924a:	58 85       	ldd	r21, Y+8	; 0x08
    924c:	8f 89       	ldd	r24, Y+23	; 0x17
    924e:	98 8d       	ldd	r25, Y+24	; 0x18
    9250:	a9 8d       	ldd	r26, Y+25	; 0x19
    9252:	ba 8d       	ldd	r27, Y+26	; 0x1a
    9254:	28 17       	cp	r18, r24
    9256:	39 07       	cpc	r19, r25
    9258:	4a 07       	cpc	r20, r26
    925a:	5b 07       	cpc	r21, r27
    925c:	08 f4       	brcc	.+2      	; 0x9260 <atmel_flash_crc_memory+0x150>
    925e:	b4 cf       	rjmp	.-152    	; 0x91c8 <atmel_flash_crc_memory+0xb8>
         }
      }
      for ( bit = 0; bit < 16; bit ++ ) {
    9260:	19 82       	std	Y+1, r1	; 0x01
    9262:	1c c0       	rjmp	.+56     	; 0x929c <atmel_flash_crc_memory+0x18c>
         if ( crc& 0x8000 ) {
    9264:	89 85       	ldd	r24, Y+9	; 0x09
    9266:	9a 85       	ldd	r25, Y+10	; 0x0a
    9268:	99 23       	and	r25, r25
    926a:	1c f4       	brge	.+6      	; 0x9272 <atmel_flash_crc_memory+0x162>
            xor_flag = 1;
    926c:	81 e0       	ldi	r24, 0x01	; 1
    926e:	8b 83       	std	Y+3, r24	; 0x03
    9270:	01 c0       	rjmp	.+2      	; 0x9274 <atmel_flash_crc_memory+0x164>
         } else {
            xor_flag = 0;
    9272:	1b 82       	std	Y+3, r1	; 0x03
         } crc = crc << 1;
    9274:	89 85       	ldd	r24, Y+9	; 0x09
    9276:	9a 85       	ldd	r25, Y+10	; 0x0a
    9278:	88 0f       	add	r24, r24
    927a:	99 1f       	adc	r25, r25
    927c:	9a 87       	std	Y+10, r25	; 0x0a
    927e:	89 87       	std	Y+9, r24	; 0x09
         if ( xor_flag ) {
    9280:	8b 81       	ldd	r24, Y+3	; 0x03
    9282:	88 23       	and	r24, r24
    9284:	41 f0       	breq	.+16     	; 0x9296 <atmel_flash_crc_memory+0x186>
            crc = crc ^ 0x1021 /*POLY*/;
    9286:	89 85       	ldd	r24, Y+9	; 0x09
    9288:	9a 85       	ldd	r25, Y+10	; 0x0a
    928a:	21 e2       	ldi	r18, 0x21	; 33
    928c:	30 e1       	ldi	r19, 0x10	; 16
    928e:	82 27       	eor	r24, r18
    9290:	93 27       	eor	r25, r19
    9292:	9a 87       	std	Y+10, r25	; 0x0a
    9294:	89 87       	std	Y+9, r24	; 0x09
    9296:	89 81       	ldd	r24, Y+1	; 0x01
    9298:	8f 5f       	subi	r24, 0xFF	; 255
    929a:	89 83       	std	Y+1, r24	; 0x01
    929c:	89 81       	ldd	r24, Y+1	; 0x01
    929e:	80 31       	cpi	r24, 0x10	; 16
    92a0:	08 f3       	brcs	.-62     	; 0x9264 <atmel_flash_crc_memory+0x154>
         } 
      }
   }
   atmel_flash_high();
    92a2:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <atmel_flash_high>
   return crc;
    92a6:	89 85       	ldd	r24, Y+9	; 0x09
    92a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    92aa:	6a 96       	adiw	r28, 0x1a	; 26
    92ac:	0f b6       	in	r0, 0x3f	; 63
    92ae:	f8 94       	cli
    92b0:	de bf       	out	0x3e, r29	; 62
    92b2:	0f be       	out	0x3f, r0	; 63
    92b4:	cd bf       	out	0x3d, r28	; 61
    92b6:	df 91       	pop	r29
    92b8:	cf 91       	pop	r28
    92ba:	08 95       	ret

000092bc <atmel_flash_busy>:
}
/** @brief Get the flash register status.
 * @return Status of external flash
 */
/*
static uint8_t atmel_flash_get_status (void)
{
uint8_t status;
atmel_flash_low();
atmel_flash_send_byte(C_REQ_STATUS); //SEND d7h, op code for register request
status = atmel_flash_get_byte();
atmel_flash_high();
return status;
}
 */
/** @brief Check the status of flash to see whether it's busy or not.
 * 
 * A little bit slower than simply holding the clk low, But
 * easier
 * @return TRUE if busy, else return FALSE
 */
static uint8_t atmel_flash_busy( void ) {
    92bc:	cf 93       	push	r28
    92be:	df 93       	push	r29
    92c0:	cd b7       	in	r28, 0x3d	; 61
    92c2:	de b7       	in	r29, 0x3e	; 62
    92c4:	24 97       	sbiw	r28, 0x04	; 4
    92c6:	0f b6       	in	r0, 0x3f	; 63
    92c8:	f8 94       	cli
    92ca:	de bf       	out	0x3e, r29	; 62
    92cc:	0f be       	out	0x3f, r0	; 63
    92ce:	cd bf       	out	0x3d, r28	; 61
   uint8_t status;
   _atomic_t _atomic = _atomic_start();
    92d0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    92d4:	89 83       	std	Y+1, r24	; 0x01
   atmel_flash_low();
    92d6:	0e 94 50 48 	call	0x90a0	; 0x90a0 <atmel_flash_low>
   atmel_flash_send_byte( C_REQ_STATUS ); //SEND d7h, op code for register request
    92da:	87 ed       	ldi	r24, 0xD7	; 215
    92dc:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <atmel_flash_send_byte>
   status = atmel_flash_get_byte();
    92e0:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <atmel_flash_get_byte>
    92e4:	8a 83       	std	Y+2, r24	; 0x02
   atmel_flash_high();
    92e6:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <atmel_flash_high>
   status &= 0x80;
    92ea:	90 e8       	ldi	r25, 0x80	; 128
    92ec:	8a 81       	ldd	r24, Y+2	; 0x02
    92ee:	89 23       	and	r24, r25
    92f0:	8a 83       	std	Y+2, r24	; 0x02
   _atomic_end( _atomic );
    92f2:	89 81       	ldd	r24, Y+1	; 0x01
    92f4:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   if ( status == 0 ) {
    92f8:	8a 81       	ldd	r24, Y+2	; 0x02
    92fa:	88 23       	and	r24, r24
    92fc:	29 f4       	brne	.+10     	; 0x9308 <atmel_flash_busy+0x4c>
      return TRUE;
    92fe:	81 e0       	ldi	r24, 0x01	; 1
    9300:	90 e0       	ldi	r25, 0x00	; 0
    9302:	9c 83       	std	Y+4, r25	; 0x04
    9304:	8b 83       	std	Y+3, r24	; 0x03
    9306:	02 c0       	rjmp	.+4      	; 0x930c <atmel_flash_busy+0x50>
   } return FALSE;
    9308:	1c 82       	std	Y+4, r1	; 0x04
    930a:	1b 82       	std	Y+3, r1	; 0x03
    930c:	8b 81       	ldd	r24, Y+3	; 0x03
    930e:	9c 81       	ldd	r25, Y+4	; 0x04
    9310:	24 96       	adiw	r28, 0x04	; 4
    9312:	0f b6       	in	r0, 0x3f	; 63
    9314:	f8 94       	cli
    9316:	de bf       	out	0x3e, r29	; 62
    9318:	0f be       	out	0x3f, r0	; 63
    931a:	cd bf       	out	0x3d, r28	; 61
    931c:	df 91       	pop	r29
    931e:	cf 91       	pop	r28
    9320:	08 95       	ret

00009322 <atmel_flash_write_buffer>:
}
/** @brief Write the data to the buffer.
 * @param selected Write buffer to select
 * @param offset How far the data will be offset
 * @param reqdata Data requested
 * @param len Length of data
 * @return TRUE if success, else return FALSE
 */
 static uint8_t atmel_flash_write_buffer( uint8_t selected, uint16_t offset, void *reqdata, uint16_t len ) {
    9322:	cf 93       	push	r28
    9324:	df 93       	push	r29
    9326:	cd b7       	in	r28, 0x3d	; 61
    9328:	de b7       	in	r29, 0x3e	; 62
    932a:	2f 97       	sbiw	r28, 0x0f	; 15
    932c:	0f b6       	in	r0, 0x3f	; 63
    932e:	f8 94       	cli
    9330:	de bf       	out	0x3e, r29	; 62
    9332:	0f be       	out	0x3f, r0	; 63
    9334:	cd bf       	out	0x3d, r28	; 61
    9336:	89 87       	std	Y+9, r24	; 0x09
    9338:	7b 87       	std	Y+11, r23	; 0x0b
    933a:	6a 87       	std	Y+10, r22	; 0x0a
    933c:	5d 87       	std	Y+13, r21	; 0x0d
    933e:	4c 87       	std	Y+12, r20	; 0x0c
    9340:	3f 87       	std	Y+15, r19	; 0x0f
    9342:	2e 87       	std	Y+14, r18	; 0x0e
   uint8_t cmd[ 4 ],  *reqPtr;
   uint16_t i;
   if ( selected == 1 ) {
    9344:	89 85       	ldd	r24, Y+9	; 0x09
    9346:	81 30       	cpi	r24, 0x01	; 1
    9348:	19 f4       	brne	.+6      	; 0x9350 <atmel_flash_write_buffer+0x2e>
      cmd[ 0 ] = C_WRITE_BUFFER1;
    934a:	84 e8       	ldi	r24, 0x84	; 132
    934c:	8d 83       	std	Y+5, r24	; 0x05
    934e:	02 c0       	rjmp	.+4      	; 0x9354 <atmel_flash_write_buffer+0x32>
   }  // 8 bit of op code
   else {
      cmd[ 0 ] = C_WRITE_BUFFER2;
    9350:	87 e8       	ldi	r24, 0x87	; 135
    9352:	8d 83       	std	Y+5, r24	; 0x05
   }  // 8 bit of op code
   cmd[ 1 ] = 0x00; // 8 bit don't care code
    9354:	1e 82       	std	Y+6, r1	; 0x06
   cmd[ 2 ] = offset >> 8; // 7 bit don't care code with 1 bit address
    9356:	8a 85       	ldd	r24, Y+10	; 0x0a
    9358:	9b 85       	ldd	r25, Y+11	; 0x0b
    935a:	89 2f       	mov	r24, r25
    935c:	99 27       	eor	r25, r25
    935e:	8f 83       	std	Y+7, r24	; 0x07
   cmd[ 3 ] = offset; // low-order 8 address bits
    9360:	8a 85       	ldd	r24, Y+10	; 0x0a
    9362:	88 87       	std	Y+8, r24	; 0x08
   reqPtr = ( uint8_t* )reqdata;
    9364:	8c 85       	ldd	r24, Y+12	; 0x0c
    9366:	9d 85       	ldd	r25, Y+13	; 0x0d
    9368:	9c 83       	std	Y+4, r25	; 0x04
    936a:	8b 83       	std	Y+3, r24	; 0x03
   // put the cs to low in order to begin writing
   atmel_flash_low();
    936c:	0e 94 50 48 	call	0x90a0	; 0x90a0 <atmel_flash_low>
   for ( i = 0; i < sizeof( cmd ); i ++ ) {
    9370:	1a 82       	std	Y+2, r1	; 0x02
    9372:	19 82       	std	Y+1, r1	; 0x01
    9374:	0f c0       	rjmp	.+30     	; 0x9394 <atmel_flash_write_buffer+0x72>
      atmel_flash_send_byte( cmd[ i ] );
    9376:	29 81       	ldd	r18, Y+1	; 0x01
    9378:	3a 81       	ldd	r19, Y+2	; 0x02
    937a:	ce 01       	movw	r24, r28
    937c:	05 96       	adiw	r24, 0x05	; 5
    937e:	fc 01       	movw	r30, r24
    9380:	e2 0f       	add	r30, r18
    9382:	f3 1f       	adc	r31, r19
    9384:	80 81       	ld	r24, Z
    9386:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <atmel_flash_send_byte>
    938a:	89 81       	ldd	r24, Y+1	; 0x01
    938c:	9a 81       	ldd	r25, Y+2	; 0x02
    938e:	01 96       	adiw	r24, 0x01	; 1
    9390:	9a 83       	std	Y+2, r25	; 0x02
    9392:	89 83       	std	Y+1, r24	; 0x01
    9394:	89 81       	ldd	r24, Y+1	; 0x01
    9396:	9a 81       	ldd	r25, Y+2	; 0x02
    9398:	84 30       	cpi	r24, 0x04	; 4
    939a:	91 05       	cpc	r25, r1
    939c:	60 f3       	brcs	.-40     	; 0x9376 <atmel_flash_write_buffer+0x54>
   } 
   for ( i = 0; i < len; i ++ ) {
    939e:	1a 82       	std	Y+2, r1	; 0x02
    93a0:	19 82       	std	Y+1, r1	; 0x01
    93a2:	0f c0       	rjmp	.+30     	; 0x93c2 <atmel_flash_write_buffer+0xa0>
      atmel_flash_send_byte( reqPtr[ i ] );
    93a4:	29 81       	ldd	r18, Y+1	; 0x01
    93a6:	3a 81       	ldd	r19, Y+2	; 0x02
    93a8:	8b 81       	ldd	r24, Y+3	; 0x03
    93aa:	9c 81       	ldd	r25, Y+4	; 0x04
    93ac:	f9 01       	movw	r30, r18
    93ae:	e8 0f       	add	r30, r24
    93b0:	f9 1f       	adc	r31, r25
    93b2:	80 81       	ld	r24, Z
    93b4:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <atmel_flash_send_byte>
    93b8:	89 81       	ldd	r24, Y+1	; 0x01
    93ba:	9a 81       	ldd	r25, Y+2	; 0x02
    93bc:	01 96       	adiw	r24, 0x01	; 1
    93be:	9a 83       	std	Y+2, r25	; 0x02
    93c0:	89 83       	std	Y+1, r24	; 0x01
    93c2:	29 81       	ldd	r18, Y+1	; 0x01
    93c4:	3a 81       	ldd	r19, Y+2	; 0x02
    93c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    93c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    93ca:	28 17       	cp	r18, r24
    93cc:	39 07       	cpc	r19, r25
    93ce:	50 f3       	brcs	.-44     	; 0x93a4 <atmel_flash_write_buffer+0x82>
   } 
   atmel_flash_high();
    93d0:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <atmel_flash_high>
   return TRUE;
    93d4:	81 e0       	ldi	r24, 0x01	; 1
    93d6:	90 e0       	ldi	r25, 0x00	; 0
    93d8:	2f 96       	adiw	r28, 0x0f	; 15
    93da:	0f b6       	in	r0, 0x3f	; 63
    93dc:	f8 94       	cli
    93de:	de bf       	out	0x3e, r29	; 62
    93e0:	0f be       	out	0x3f, r0	; 63
    93e2:	cd bf       	out	0x3d, r28	; 61
    93e4:	df 91       	pop	r29
    93e6:	cf 91       	pop	r28
    93e8:	08 95       	ret

000093ea <atmel_flash_flush_buffer>:
}
/** @brief Dump the buffer to the memory. 
 * @param selected Flush buffer to select
 * @param page Page to flush to
 * @return TRUE if success, else return FALSE
 */
 static uint8_t atmel_flash_flush_buffer( uint8_t selected, uint16_t page ) {
    93ea:	cf 93       	push	r28
    93ec:	df 93       	push	r29
    93ee:	cd b7       	in	r28, 0x3d	; 61
    93f0:	de b7       	in	r29, 0x3e	; 62
    93f2:	28 97       	sbiw	r28, 0x08	; 8
    93f4:	0f b6       	in	r0, 0x3f	; 63
    93f6:	f8 94       	cli
    93f8:	de bf       	out	0x3e, r29	; 62
    93fa:	0f be       	out	0x3f, r0	; 63
    93fc:	cd bf       	out	0x3d, r28	; 61
    93fe:	8e 83       	std	Y+6, r24	; 0x06
    9400:	78 87       	std	Y+8, r23	; 0x08
    9402:	6f 83       	std	Y+7, r22	; 0x07
   uint8_t i, cmd[ 4 ];
   if ( selected == 1 ) {
    9404:	8e 81       	ldd	r24, Y+6	; 0x06
    9406:	81 30       	cpi	r24, 0x01	; 1
    9408:	19 f4       	brne	.+6      	; 0x9410 <atmel_flash_flush_buffer+0x26>
      cmd[ 0 ] = C_FLUSH_BUFFER1;
    940a:	83 e8       	ldi	r24, 0x83	; 131
    940c:	8a 83       	std	Y+2, r24	; 0x02
    940e:	02 c0       	rjmp	.+4      	; 0x9414 <atmel_flash_flush_buffer+0x2a>
   }  // 8 bit of op code
   else {
      cmd[ 0 ] = C_FLUSH_BUFFER2;
    9410:	86 e8       	ldi	r24, 0x86	; 134
    9412:	8a 83       	std	Y+2, r24	; 0x02
   }  // 8 bit of op code
   cmd[ 1 ] = page >> 7; // 4 bit reserve and high 4 MSB
    9414:	8f 81       	ldd	r24, Y+7	; 0x07
    9416:	98 85       	ldd	r25, Y+8	; 0x08
    9418:	88 0f       	add	r24, r24
    941a:	89 2f       	mov	r24, r25
    941c:	88 1f       	adc	r24, r24
    941e:	99 0b       	sbc	r25, r25
    9420:	91 95       	neg	r25
    9422:	8b 83       	std	Y+3, r24	; 0x03
   cmd[ 2 ] = page << 1; // 7 bit page and 1 bit offset MSB
    9424:	8f 81       	ldd	r24, Y+7	; 0x07
    9426:	88 0f       	add	r24, r24
    9428:	8c 83       	std	Y+4, r24	; 0x04
   cmd[ 3 ] = 0x00; // 8 bit don't care code
    942a:	1d 82       	std	Y+5, r1	; 0x05
   // put the cs to low in order to begin writing
   atmel_flash_low();
    942c:	0e 94 50 48 	call	0x90a0	; 0x90a0 <atmel_flash_low>
   for ( i = 0; i < sizeof( cmd ); i ++ ) {
    9430:	19 82       	std	Y+1, r1	; 0x01
    9432:	0e c0       	rjmp	.+28     	; 0x9450 <atmel_flash_flush_buffer+0x66>
      atmel_flash_send_byte( cmd[ i ] );
    9434:	89 81       	ldd	r24, Y+1	; 0x01
    9436:	28 2f       	mov	r18, r24
    9438:	33 27       	eor	r19, r19
    943a:	ce 01       	movw	r24, r28
    943c:	02 96       	adiw	r24, 0x02	; 2
    943e:	fc 01       	movw	r30, r24
    9440:	e2 0f       	add	r30, r18
    9442:	f3 1f       	adc	r31, r19
    9444:	80 81       	ld	r24, Z
    9446:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <atmel_flash_send_byte>
    944a:	89 81       	ldd	r24, Y+1	; 0x01
    944c:	8f 5f       	subi	r24, 0xFF	; 255
    944e:	89 83       	std	Y+1, r24	; 0x01
    9450:	89 81       	ldd	r24, Y+1	; 0x01
    9452:	84 30       	cpi	r24, 0x04	; 4
    9454:	78 f3       	brcs	.-34     	; 0x9434 <atmel_flash_flush_buffer+0x4a>
   } 
   atmel_flash_high();
    9456:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <atmel_flash_high>
   return TRUE;
    945a:	81 e0       	ldi	r24, 0x01	; 1
    945c:	90 e0       	ldi	r25, 0x00	; 0
    945e:	28 96       	adiw	r28, 0x08	; 8
    9460:	0f b6       	in	r0, 0x3f	; 63
    9462:	f8 94       	cli
    9464:	de bf       	out	0x3e, r29	; 62
    9466:	0f be       	out	0x3f, r0	; 63
    9468:	cd bf       	out	0x3d, r28	; 61
    946a:	df 91       	pop	r29
    946c:	cf 91       	pop	r28
    946e:	08 95       	ret

00009470 <atmel_flash_compare_buffer>:
}
/** @brief Compare the buffer to the memory. 
 * @param selected Buffer to compare
 * @param page Page to compare to
 * @return 0 if equal, else return 0x40
 */
static uint8_t atmel_flash_compare_buffer( uint8_t selected, uint16_t page ) {
    9470:	cf 93       	push	r28
    9472:	df 93       	push	r29
    9474:	cd b7       	in	r28, 0x3d	; 61
    9476:	de b7       	in	r29, 0x3e	; 62
    9478:	29 97       	sbiw	r28, 0x09	; 9
    947a:	0f b6       	in	r0, 0x3f	; 63
    947c:	f8 94       	cli
    947e:	de bf       	out	0x3e, r29	; 62
    9480:	0f be       	out	0x3f, r0	; 63
    9482:	cd bf       	out	0x3d, r28	; 61
    9484:	8f 83       	std	Y+7, r24	; 0x07
    9486:	79 87       	std	Y+9, r23	; 0x09
    9488:	68 87       	std	Y+8, r22	; 0x08
   uint8_t i, cmd[ 4 ], status;
   if ( selected == 1 ) {
    948a:	8f 81       	ldd	r24, Y+7	; 0x07
    948c:	81 30       	cpi	r24, 0x01	; 1
    948e:	19 f4       	brne	.+6      	; 0x9496 <atmel_flash_compare_buffer+0x26>
      cmd[ 0 ] = C_COMPARE_BUFFER1;
    9490:	80 e6       	ldi	r24, 0x60	; 96
    9492:	8b 83       	std	Y+3, r24	; 0x03
    9494:	02 c0       	rjmp	.+4      	; 0x949a <atmel_flash_compare_buffer+0x2a>
   }  // 8 bit of op code
   else {
      cmd[ 0 ] = C_COMPARE_BUFFER2;
    9496:	81 e6       	ldi	r24, 0x61	; 97
    9498:	8b 83       	std	Y+3, r24	; 0x03
   }  // 8 bit of op code
   cmd[ 1 ] = page >> 7; // 4 bit reserve and high 4 MSB
    949a:	88 85       	ldd	r24, Y+8	; 0x08
    949c:	99 85       	ldd	r25, Y+9	; 0x09
    949e:	88 0f       	add	r24, r24
    94a0:	89 2f       	mov	r24, r25
    94a2:	88 1f       	adc	r24, r24
    94a4:	99 0b       	sbc	r25, r25
    94a6:	91 95       	neg	r25
    94a8:	8c 83       	std	Y+4, r24	; 0x04
   cmd[ 2 ] = page << 1; // 7 bit page and 1 bit offset MSB
    94aa:	88 85       	ldd	r24, Y+8	; 0x08
    94ac:	88 0f       	add	r24, r24
    94ae:	8d 83       	std	Y+5, r24	; 0x05
   cmd[ 3 ] = 0x00; // 8 bit don't care code
    94b0:	1e 82       	std	Y+6, r1	; 0x06
   // put the cs to low in order to begin writing
   atmel_flash_low();
    94b2:	0e 94 50 48 	call	0x90a0	; 0x90a0 <atmel_flash_low>
   for ( i = 0; i < sizeof( cmd ); i ++ ) {
    94b6:	1a 82       	std	Y+2, r1	; 0x02
    94b8:	0e c0       	rjmp	.+28     	; 0x94d6 <atmel_flash_compare_buffer+0x66>
      atmel_flash_send_byte( cmd[ i ] );
    94ba:	8a 81       	ldd	r24, Y+2	; 0x02
    94bc:	28 2f       	mov	r18, r24
    94be:	33 27       	eor	r19, r19
    94c0:	ce 01       	movw	r24, r28
    94c2:	03 96       	adiw	r24, 0x03	; 3
    94c4:	fc 01       	movw	r30, r24
    94c6:	e2 0f       	add	r30, r18
    94c8:	f3 1f       	adc	r31, r19
    94ca:	80 81       	ld	r24, Z
    94cc:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <atmel_flash_send_byte>
    94d0:	8a 81       	ldd	r24, Y+2	; 0x02
    94d2:	8f 5f       	subi	r24, 0xFF	; 255
    94d4:	8a 83       	std	Y+2, r24	; 0x02
    94d6:	8a 81       	ldd	r24, Y+2	; 0x02
    94d8:	84 30       	cpi	r24, 0x04	; 4
    94da:	78 f3       	brcs	.-34     	; 0x94ba <atmel_flash_compare_buffer+0x4a>
   } 
   atmel_flash_high();
    94dc:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <atmel_flash_high>
   do {
      atmel_flash_low();
    94e0:	0e 94 50 48 	call	0x90a0	; 0x90a0 <atmel_flash_low>
      atmel_flash_send_byte( C_REQ_STATUS ); //SEND d7h, op code for register request
    94e4:	87 ed       	ldi	r24, 0xD7	; 215
    94e6:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <atmel_flash_send_byte>
      status = atmel_flash_get_byte();
    94ea:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <atmel_flash_get_byte>
    94ee:	89 83       	std	Y+1, r24	; 0x01
      atmel_flash_high();
    94f0:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <atmel_flash_high>
   } while ( status& 0x80 ); // wait until comparison is complete
    94f4:	89 81       	ldd	r24, Y+1	; 0x01
    94f6:	88 23       	and	r24, r24
    94f8:	9c f3       	brlt	.-26     	; 0x94e0 <atmel_flash_compare_buffer+0x70>
   return status& 0x40; // return result of comparison
    94fa:	89 81       	ldd	r24, Y+1	; 0x01
    94fc:	99 27       	eor	r25, r25
    94fe:	80 74       	andi	r24, 0x40	; 64
    9500:	90 70       	andi	r25, 0x00	; 0
    9502:	29 96       	adiw	r28, 0x09	; 9
    9504:	0f b6       	in	r0, 0x3f	; 63
    9506:	f8 94       	cli
    9508:	de bf       	out	0x3e, r29	; 62
    950a:	0f be       	out	0x3f, r0	; 63
    950c:	cd bf       	out	0x3d, r28	; 61
    950e:	df 91       	pop	r29
    9510:	cf 91       	pop	r28
    9512:	08 95       	ret

00009514 <atmel_flash_fill_buffer>:
}
/** @brief Read a page from flash memory and fill into the buffer. 
 * @param selected Fill buffer to select
 * @param page Page to fill from
 * @return TRUE if success, else return FALSE
 */
static uint8_t atmel_flash_fill_buffer( uint8_t selected, uint16_t page ) {
    9514:	cf 93       	push	r28
    9516:	df 93       	push	r29
    9518:	cd b7       	in	r28, 0x3d	; 61
    951a:	de b7       	in	r29, 0x3e	; 62
    951c:	28 97       	sbiw	r28, 0x08	; 8
    951e:	0f b6       	in	r0, 0x3f	; 63
    9520:	f8 94       	cli
    9522:	de bf       	out	0x3e, r29	; 62
    9524:	0f be       	out	0x3f, r0	; 63
    9526:	cd bf       	out	0x3d, r28	; 61
    9528:	8e 83       	std	Y+6, r24	; 0x06
    952a:	78 87       	std	Y+8, r23	; 0x08
    952c:	6f 83       	std	Y+7, r22	; 0x07
   uint8_t i, cmd[ 4 ];
   while ( atmel_flash_busy())
    952e:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    9532:	88 23       	and	r24, r24
    9534:	e1 f7       	brne	.-8      	; 0x952e <atmel_flash_fill_buffer+0x1a>
      ;
   atmel_flash_flush_buffer( cur_buff, cur_page );
    9536:	80 91 db 03 	lds	r24, 0x03DB
    953a:	90 91 dc 03 	lds	r25, 0x03DC
    953e:	20 91 da 03 	lds	r18, 0x03DA
    9542:	bc 01       	movw	r22, r24
    9544:	82 2f       	mov	r24, r18
    9546:	0e 94 f5 49 	call	0x93ea	; 0x93ea <atmel_flash_flush_buffer>
   while ( atmel_flash_busy())
    954a:	0e 94 5e 49 	call	0x92bc	; 0x92bc <atmel_flash_busy>
    954e:	88 23       	and	r24, r24
    9550:	e1 f7       	brne	.-8      	; 0x954a <atmel_flash_fill_buffer+0x36>
      ;
   if ( selected == 1 ) {
    9552:	8e 81       	ldd	r24, Y+6	; 0x06
    9554:	81 30       	cpi	r24, 0x01	; 1
    9556:	19 f4       	brne	.+6      	; 0x955e <atmel_flash_fill_buffer+0x4a>
      cmd[ 0 ] = C_FILL_BUFFER1;
    9558:	83 e5       	ldi	r24, 0x53	; 83
    955a:	8a 83       	std	Y+2, r24	; 0x02
    955c:	02 c0       	rjmp	.+4      	; 0x9562 <atmel_flash_fill_buffer+0x4e>
   }  // 8 bit of op code
   else {
      cmd[ 0 ] = C_FILL_BUFFER2;
    955e:	85 e5       	ldi	r24, 0x55	; 85
    9560:	8a 83       	std	Y+2, r24	; 0x02
   }  // 8 bit of op code
   cmd[ 1 ] = page >> 7; // 4 bit reserve and high 4 MSB
    9562:	8f 81       	ldd	r24, Y+7	; 0x07
    9564:	98 85       	ldd	r25, Y+8	; 0x08
    9566:	88 0f       	add	r24, r24
    9568:	89 2f       	mov	r24, r25
    956a:	88 1f       	adc	r24, r24
    956c:	99 0b       	sbc	r25, r25
    956e:	91 95       	neg	r25
    9570:	8b 83       	std	Y+3, r24	; 0x03
   cmd[ 2 ] = page << 1; // 7 bit page and 1 bit don't care MSB
    9572:	8f 81       	ldd	r24, Y+7	; 0x07
    9574:	88 0f       	add	r24, r24
    9576:	8c 83       	std	Y+4, r24	; 0x04
   cmd[ 3 ] = 0x00; // 8 bit don't care code
    9578:	1d 82       	std	Y+5, r1	; 0x05
   // put the cs to low in order to begin writing
   atmel_flash_low();
    957a:	0e 94 50 48 	call	0x90a0	; 0x90a0 <atmel_flash_low>
   for ( i = 0; i < sizeof( cmd ); i ++ ) {
    957e:	19 82       	std	Y+1, r1	; 0x01
    9580:	0e c0       	rjmp	.+28     	; 0x959e <atmel_flash_fill_buffer+0x8a>
      atmel_flash_send_byte( cmd[ i ] );
    9582:	89 81       	ldd	r24, Y+1	; 0x01
    9584:	28 2f       	mov	r18, r24
    9586:	33 27       	eor	r19, r19
    9588:	ce 01       	movw	r24, r28
    958a:	02 96       	adiw	r24, 0x02	; 2
    958c:	fc 01       	movw	r30, r24
    958e:	e2 0f       	add	r30, r18
    9590:	f3 1f       	adc	r31, r19
    9592:	80 81       	ld	r24, Z
    9594:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <atmel_flash_send_byte>
    9598:	89 81       	ldd	r24, Y+1	; 0x01
    959a:	8f 5f       	subi	r24, 0xFF	; 255
    959c:	89 83       	std	Y+1, r24	; 0x01
    959e:	89 81       	ldd	r24, Y+1	; 0x01
    95a0:	84 30       	cpi	r24, 0x04	; 4
    95a2:	78 f3       	brcs	.-34     	; 0x9582 <atmel_flash_fill_buffer+0x6e>
   } 
   atmel_flash_high();
    95a4:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <atmel_flash_high>
   return TRUE;
    95a8:	81 e0       	ldi	r24, 0x01	; 1
    95aa:	90 e0       	ldi	r25, 0x00	; 0
    95ac:	28 96       	adiw	r28, 0x08	; 8
    95ae:	0f b6       	in	r0, 0x3f	; 63
    95b0:	f8 94       	cli
    95b2:	de bf       	out	0x3e, r29	; 62
    95b4:	0f be       	out	0x3f, r0	; 63
    95b6:	cd bf       	out	0x3d, r28	; 61
    95b8:	df 91       	pop	r29
    95ba:	cf 91       	pop	r28
    95bc:	08 95       	ret

000095be <atmel_flash_erase_page>:
}
/** @brief Erase a whole page in the memory. 
 * @param page Page to erase 
 * @return TRUE if success, else return FALSE
 */
static uint8_t atmel_flash_erase_page( uint16_t page ) {
    95be:	cf 93       	push	r28
    95c0:	df 93       	push	r29
    95c2:	cd b7       	in	r28, 0x3d	; 61
    95c4:	de b7       	in	r29, 0x3e	; 62
    95c6:	27 97       	sbiw	r28, 0x07	; 7
    95c8:	0f b6       	in	r0, 0x3f	; 63
    95ca:	f8 94       	cli
    95cc:	de bf       	out	0x3e, r29	; 62
    95ce:	0f be       	out	0x3f, r0	; 63
    95d0:	cd bf       	out	0x3d, r28	; 61
    95d2:	9f 83       	std	Y+7, r25	; 0x07
    95d4:	8e 83       	std	Y+6, r24	; 0x06
   uint8_t i, cmd[ 4 ];
   cmd[ 0 ] = C_ERASE_PAGE; // 8 bit of op code
    95d6:	81 e8       	ldi	r24, 0x81	; 129
    95d8:	8a 83       	std	Y+2, r24	; 0x02
   cmd[ 1 ] = page >> 7; // 4 bit reserve and high 4 MSB
    95da:	8e 81       	ldd	r24, Y+6	; 0x06
    95dc:	9f 81       	ldd	r25, Y+7	; 0x07
    95de:	88 0f       	add	r24, r24
    95e0:	89 2f       	mov	r24, r25
    95e2:	88 1f       	adc	r24, r24
    95e4:	99 0b       	sbc	r25, r25
    95e6:	91 95       	neg	r25
    95e8:	8b 83       	std	Y+3, r24	; 0x03
   cmd[ 2 ] = page << 1; // 7 bit page and 1 bit don't care MSB
    95ea:	8e 81       	ldd	r24, Y+6	; 0x06
    95ec:	88 0f       	add	r24, r24
    95ee:	8c 83       	std	Y+4, r24	; 0x04
   cmd[ 3 ] = 0x00; // 8 bit don't care code
    95f0:	1d 82       	std	Y+5, r1	; 0x05
   // put the cs to low in order to begin writing
   atmel_flash_low();
    95f2:	0e 94 50 48 	call	0x90a0	; 0x90a0 <atmel_flash_low>
   for ( i = 0; i < sizeof( cmd ); i ++ ) {
    95f6:	19 82       	std	Y+1, r1	; 0x01
    95f8:	0e c0       	rjmp	.+28     	; 0x9616 <atmel_flash_erase_page+0x58>
      atmel_flash_send_byte( cmd[ i ] );
    95fa:	89 81       	ldd	r24, Y+1	; 0x01
    95fc:	28 2f       	mov	r18, r24
    95fe:	33 27       	eor	r19, r19
    9600:	ce 01       	movw	r24, r28
    9602:	02 96       	adiw	r24, 0x02	; 2
    9604:	fc 01       	movw	r30, r24
    9606:	e2 0f       	add	r30, r18
    9608:	f3 1f       	adc	r31, r19
    960a:	80 81       	ld	r24, Z
    960c:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <atmel_flash_send_byte>
    9610:	89 81       	ldd	r24, Y+1	; 0x01
    9612:	8f 5f       	subi	r24, 0xFF	; 255
    9614:	89 83       	std	Y+1, r24	; 0x01
    9616:	89 81       	ldd	r24, Y+1	; 0x01
    9618:	84 30       	cpi	r24, 0x04	; 4
    961a:	78 f3       	brcs	.-34     	; 0x95fa <atmel_flash_erase_page+0x3c>
   } 
   atmel_flash_high();
    961c:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <atmel_flash_high>
   return TRUE;
    9620:	81 e0       	ldi	r24, 0x01	; 1
    9622:	90 e0       	ldi	r25, 0x00	; 0
    9624:	27 96       	adiw	r28, 0x07	; 7
    9626:	0f b6       	in	r0, 0x3f	; 63
    9628:	f8 94       	cli
    962a:	de bf       	out	0x3e, r29	; 62
    962c:	0f be       	out	0x3f, r0	; 63
    962e:	cd bf       	out	0x3d, r28	; 61
    9630:	df 91       	pop	r29
    9632:	cf 91       	pop	r28
    9634:	08 95       	ret

00009636 <atmel_flash_pagesize>:
}

inline uint16_t atmel_flash_pagesize() { return 256; }
    9636:	cf 93       	push	r28
    9638:	df 93       	push	r29
    963a:	cd b7       	in	r28, 0x3d	; 61
    963c:	de b7       	in	r29, 0x3e	; 62
    963e:	80 e0       	ldi	r24, 0x00	; 0
    9640:	91 e0       	ldi	r25, 0x01	; 1
    9642:	df 91       	pop	r29
    9644:	cf 91       	pop	r28
    9646:	08 95       	ret

00009648 <atmel_flash_pagenumber>:

inline uint16_t atmel_flash_pagenumber() { return 2048; }
    9648:	cf 93       	push	r28
    964a:	df 93       	push	r29
    964c:	cd b7       	in	r28, 0x3d	; 61
    964e:	de b7       	in	r29, 0x3e	; 62
    9650:	80 e0       	ldi	r24, 0x00	; 0
    9652:	98 e0       	ldi	r25, 0x08	; 8
    9654:	df 91       	pop	r29
    9656:	cf 91       	pop	r28
    9658:	08 95       	ret

0000965a <hplcc2420fifom_HPLCC2420FIFO_TXFIFODone>:
uint8_t hplcc2420fifom_txlength;
uint8_t hplcc2420fifom_rxlength;
bool hplcc2420fifom_rxbufBusy;
bool hplcc2420fifom_txbufBusy;
inline result_t hplcc2420fifom_HPLCC2420FIFO_TXFIFODone( uint8_t arg_0xa40cd20, uint8_t *arg_0xa40ce80 ) {
    965a:	cf 93       	push	r28
    965c:	df 93       	push	r29
    965e:	cd b7       	in	r28, 0x3d	; 61
    9660:	de b7       	in	r29, 0x3e	; 62
    9662:	24 97       	sbiw	r28, 0x04	; 4
    9664:	0f b6       	in	r0, 0x3f	; 63
    9666:	f8 94       	cli
    9668:	de bf       	out	0x3e, r29	; 62
    966a:	0f be       	out	0x3f, r0	; 63
    966c:	cd bf       	out	0x3d, r28	; 61
    966e:	8a 83       	std	Y+2, r24	; 0x02
    9670:	7c 83       	std	Y+4, r23	; 0x04
    9672:	6b 83       	std	Y+3, r22	; 0x03
   unsigned char result;
   result = cc2420radiom_HPLChipconFIFO_TXFIFODone( arg_0xa40cd20, arg_0xa40ce80 );
    9674:	8b 81       	ldd	r24, Y+3	; 0x03
    9676:	9c 81       	ldd	r25, Y+4	; 0x04
    9678:	bc 01       	movw	r22, r24
    967a:	8a 81       	ldd	r24, Y+2	; 0x02
    967c:	0e 94 1e 28 	call	0x503c	; 0x503c <cc2420radiom_HPLChipconFIFO_TXFIFODone>
    9680:	89 83       	std	Y+1, r24	; 0x01
   return result;
    9682:	89 81       	ldd	r24, Y+1	; 0x01
    9684:	99 27       	eor	r25, r25
    9686:	24 96       	adiw	r28, 0x04	; 4
    9688:	0f b6       	in	r0, 0x3f	; 63
    968a:	f8 94       	cli
    968c:	de bf       	out	0x3e, r29	; 62
    968e:	0f be       	out	0x3f, r0	; 63
    9690:	cd bf       	out	0x3d, r28	; 61
    9692:	df 91       	pop	r29
    9694:	cf 91       	pop	r28
    9696:	08 95       	ret

00009698 <hplcc2420fifom_signalTXdone>:
}

//-------------------------------------------------------------------------
inline 
void hplcc2420fifom_signalTXdone( void )
 {
    9698:	cf 93       	push	r28
    969a:	df 93       	push	r29
    969c:	cd b7       	in	r28, 0x3d	; 61
    969e:	de b7       	in	r29, 0x3e	; 62
    96a0:	24 97       	sbiw	r28, 0x04	; 4
    96a2:	0f b6       	in	r0, 0x3f	; 63
    96a4:	f8 94       	cli
    96a6:	de bf       	out	0x3e, r29	; 62
    96a8:	0f be       	out	0x3f, r0	; 63
    96aa:	cd bf       	out	0x3d, r28	; 61
   uint8_t _txlen;
   uint8_t *_txbuf;
    {
      _atomic_t _atomic = _atomic_start();
    96ac:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    96b0:	89 83       	std	Y+1, r24	; 0x01
       {
         _txlen = hplcc2420fifom_txlength;
    96b2:	80 91 a6 05 	lds	r24, 0x05A6
    96b6:	8c 83       	std	Y+4, r24	; 0x04
         _txbuf = hplcc2420fifom_txbuf;
    96b8:	80 91 ab 05 	lds	r24, 0x05AB
    96bc:	90 91 ac 05 	lds	r25, 0x05AC
    96c0:	9b 83       	std	Y+3, r25	; 0x03
    96c2:	8a 83       	std	Y+2, r24	; 0x02
         hplcc2420fifom_txbufBusy = FALSE;
    96c4:	10 92 aa 05 	sts	0x05AA, r1
      }
      _atomic_end( _atomic );
    96c8:	89 81       	ldd	r24, Y+1	; 0x01
    96ca:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   hplcc2420fifom_HPLCC2420FIFO_TXFIFODone( _txlen, _txbuf );
    96ce:	8a 81       	ldd	r24, Y+2	; 0x02
    96d0:	9b 81       	ldd	r25, Y+3	; 0x03
    96d2:	bc 01       	movw	r22, r24
    96d4:	8c 81       	ldd	r24, Y+4	; 0x04
    96d6:	0e 94 2d 4b 	call	0x965a	; 0x965a <hplcc2420fifom_HPLCC2420FIFO_TXFIFODone>
    96da:	24 96       	adiw	r28, 0x04	; 4
    96dc:	0f b6       	in	r0, 0x3f	; 63
    96de:	f8 94       	cli
    96e0:	de bf       	out	0x3e, r29	; 62
    96e2:	0f be       	out	0x3f, r0	; 63
    96e4:	cd bf       	out	0x3d, r28	; 61
    96e6:	df 91       	pop	r29
    96e8:	cf 91       	pop	r28
    96ea:	08 95       	ret

000096ec <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO>:
}

//-------------------------------------------------------------------------
inline 
result_t hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO( uint8_t len, uint8_t *msg )
 {
    96ec:	cf 93       	push	r28
    96ee:	df 93       	push	r29
    96f0:	cd b7       	in	r28, 0x3d	; 61
    96f2:	de b7       	in	r29, 0x3e	; 62
    96f4:	2b 97       	sbiw	r28, 0x0b	; 11
    96f6:	0f b6       	in	r0, 0x3f	; 63
    96f8:	f8 94       	cli
    96fa:	de bf       	out	0x3e, r29	; 62
    96fc:	0f be       	out	0x3f, r0	; 63
    96fe:	cd bf       	out	0x3d, r28	; 61
    9700:	8f 83       	std	Y+7, r24	; 0x07
    9702:	79 87       	std	Y+9, r23	; 0x09
    9704:	68 87       	std	Y+8, r22	; 0x08
   uint8_t i = 0;
    9706:	1e 82       	std	Y+6, r1	; 0x06
   uint8_t status;
   bool returnFail = FALSE;
    9708:	1c 82       	std	Y+4, r1	; 0x04
    {
      _atomic_t _atomic = _atomic_start();
    970a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    970e:	8b 83       	std	Y+3, r24	; 0x03
       {
         if ( hplcc2420fifom_txbufBusy ) {
    9710:	80 91 aa 05 	lds	r24, 0x05AA
    9714:	88 23       	and	r24, r24
    9716:	19 f0       	breq	.+6      	; 0x971e <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x32>
            returnFail = TRUE;
    9718:	81 e0       	ldi	r24, 0x01	; 1
    971a:	8c 83       	std	Y+4, r24	; 0x04
    971c:	03 c0       	rjmp	.+6      	; 0x9724 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x38>
         } else {
            hplcc2420fifom_txbufBusy = TRUE;
    971e:	81 e0       	ldi	r24, 0x01	; 1
    9720:	80 93 aa 05 	sts	0x05AA, r24
         }
      }
      _atomic_end( _atomic );
    9724:	8b 81       	ldd	r24, Y+3	; 0x03
    9726:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   if ( returnFail ) {
    972a:	8c 81       	ldd	r24, Y+4	; 0x04
    972c:	88 23       	and	r24, r24
    972e:	19 f0       	breq	.+6      	; 0x9736 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x4a>
      return FAIL;
    9730:	1b 86       	std	Y+11, r1	; 0x0b
    9732:	1a 86       	std	Y+10, r1	; 0x0a
    9734:	5c c0       	rjmp	.+184    	; 0x97ee <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x102>
   }
    {
      _atomic_t _atomic = _atomic_start();
    9736:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    973a:	8a 83       	std	Y+2, r24	; 0x02
       {
         hplcc2420fifom_bSpiAvail = FALSE;
    973c:	10 92 a7 05 	sts	0x05A7, r1
         hplcc2420fifom_txlength = len;
    9740:	8f 81       	ldd	r24, Y+7	; 0x07
    9742:	80 93 a6 05 	sts	0x05A6, r24
         hplcc2420fifom_txbuf = msg;
    9746:	88 85       	ldd	r24, Y+8	; 0x08
    9748:	99 85       	ldd	r25, Y+9	; 0x09
    974a:	90 93 ac 05 	sts	0x05AC, r25
    974e:	80 93 ab 05 	sts	0x05AB, r24
         LITE_CLR_CC_CS_PIN();
    9752:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <LITE_CLR_CC_CS_PIN>
         outp( CC2420_TXFIFO, SPDR );
    9756:	ef e2       	ldi	r30, 0x2F	; 47
    9758:	f0 e0       	ldi	r31, 0x00	; 0
    975a:	8e e3       	ldi	r24, 0x3E	; 62
    975c:	80 83       	st	Z, r24
         while (  ! ( inp( SPSR )& 0x80 )){}
    975e:	ee e2       	ldi	r30, 0x2E	; 46
    9760:	f0 e0       	ldi	r31, 0x00	; 0
    9762:	80 81       	ld	r24, Z
    9764:	88 23       	and	r24, r24
    9766:	dc f7       	brge	.-10     	; 0x975e <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x72>
         ; //wait for spi xfr to complete
         status = inp( SPDR );
    9768:	ef e2       	ldi	r30, 0x2F	; 47
    976a:	f0 e0       	ldi	r31, 0x00	; 0
    976c:	80 81       	ld	r24, Z
    976e:	8d 83       	std	Y+5, r24	; 0x05
         for ( i = 0; i < hplcc2420fifom_txlength; i ++ ) {
    9770:	1e 82       	std	Y+6, r1	; 0x06
    9772:	19 c0       	rjmp	.+50     	; 0x97a6 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0xba>
            outp( *hplcc2420fifom_txbuf, SPDR );
    9774:	af e2       	ldi	r26, 0x2F	; 47
    9776:	b0 e0       	ldi	r27, 0x00	; 0
    9778:	e0 91 ab 05 	lds	r30, 0x05AB
    977c:	f0 91 ac 05 	lds	r31, 0x05AC
    9780:	80 81       	ld	r24, Z
    9782:	8c 93       	st	X, r24
            hplcc2420fifom_txbuf ++;
    9784:	80 91 ab 05 	lds	r24, 0x05AB
    9788:	90 91 ac 05 	lds	r25, 0x05AC
    978c:	01 96       	adiw	r24, 0x01	; 1
    978e:	90 93 ac 05 	sts	0x05AC, r25
    9792:	80 93 ab 05 	sts	0x05AB, r24
            while (  ! ( inp( SPSR )& 0x80 )){}
    9796:	ee e2       	ldi	r30, 0x2E	; 46
    9798:	f0 e0       	ldi	r31, 0x00	; 0
    979a:	80 81       	ld	r24, Z
    979c:	88 23       	and	r24, r24
    979e:	dc f7       	brge	.-10     	; 0x9796 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0xaa>
    97a0:	8e 81       	ldd	r24, Y+6	; 0x06
    97a2:	8f 5f       	subi	r24, 0xFF	; 255
    97a4:	8e 83       	std	Y+6, r24	; 0x06
    97a6:	90 91 a6 05 	lds	r25, 0x05A6
    97aa:	8e 81       	ldd	r24, Y+6	; 0x06
    97ac:	89 17       	cp	r24, r25
    97ae:	10 f3       	brcs	.-60     	; 0x9774 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x88>
            ; //wait for spi xfr to complete
         }
         hplcc2420fifom_bSpiAvail = TRUE;
    97b0:	81 e0       	ldi	r24, 0x01	; 1
    97b2:	80 93 a7 05 	sts	0x05A7, r24
      }
      _atomic_end( _atomic );
    97b6:	8a 81       	ldd	r24, Y+2	; 0x02
    97b8:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   LITE_SET_CC_CS_PIN();
    97bc:	0e 94 79 5e 	call	0xbcf2	; 0xbcf2 <LITE_SET_CC_CS_PIN>
   if ( postTask( hplcc2420fifom_signalTXdone, 5 ) == FAIL ) {
    97c0:	8c e4       	ldi	r24, 0x4C	; 76
    97c2:	9b e4       	ldi	r25, 0x4B	; 75
    97c4:	65 e0       	ldi	r22, 0x05	; 5
    97c6:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    97ca:	88 23       	and	r24, r24
    97cc:	59 f4       	brne	.+22     	; 0x97e4 <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0xf8>
       {
         _atomic_t _atomic = _atomic_start();
    97ce:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    97d2:	89 83       	std	Y+1, r24	; 0x01
         hplcc2420fifom_txbufBusy = FALSE;
    97d4:	10 92 aa 05 	sts	0x05AA, r1
         _atomic_end( _atomic );
    97d8:	89 81       	ldd	r24, Y+1	; 0x01
    97da:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      }
      return FAIL;
    97de:	1b 86       	std	Y+11, r1	; 0x0b
    97e0:	1a 86       	std	Y+10, r1	; 0x0a
    97e2:	05 c0       	rjmp	.+10     	; 0x97ee <hplcc2420fifom_HPLCC2420FIFO_writeTXFIFO+0x102>
   }
   return status;
    97e4:	8d 81       	ldd	r24, Y+5	; 0x05
    97e6:	28 2f       	mov	r18, r24
    97e8:	33 27       	eor	r19, r19
    97ea:	3b 87       	std	Y+11, r19	; 0x0b
    97ec:	2a 87       	std	Y+10, r18	; 0x0a
    97ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    97f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    97f2:	2b 96       	adiw	r28, 0x0b	; 11
    97f4:	0f b6       	in	r0, 0x3f	; 63
    97f6:	f8 94       	cli
    97f8:	de bf       	out	0x3e, r29	; 62
    97fa:	0f be       	out	0x3f, r0	; 63
    97fc:	cd bf       	out	0x3d, r28	; 61
    97fe:	df 91       	pop	r29
    9800:	cf 91       	pop	r28
    9802:	08 95       	ret

00009804 <hplcc2420fifom_HPLCC2420FIFO_RXFIFODone>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420fifom_HPLCC2420FIFO_RXFIFODone( uint8_t arg_0xa40c690, uint8_t *arg_0xa40c7f0 ) {
    9804:	cf 93       	push	r28
    9806:	df 93       	push	r29
    9808:	cd b7       	in	r28, 0x3d	; 61
    980a:	de b7       	in	r29, 0x3e	; 62
    980c:	24 97       	sbiw	r28, 0x04	; 4
    980e:	0f b6       	in	r0, 0x3f	; 63
    9810:	f8 94       	cli
    9812:	de bf       	out	0x3e, r29	; 62
    9814:	0f be       	out	0x3f, r0	; 63
    9816:	cd bf       	out	0x3d, r28	; 61
    9818:	8a 83       	std	Y+2, r24	; 0x02
    981a:	7c 83       	std	Y+4, r23	; 0x04
    981c:	6b 83       	std	Y+3, r22	; 0x03
   unsigned char result;
   result = cc2420radiom_HPLChipconFIFO_RXFIFODone( arg_0xa40c690, arg_0xa40c7f0 );
    981e:	8b 81       	ldd	r24, Y+3	; 0x03
    9820:	9c 81       	ldd	r25, Y+4	; 0x04
    9822:	bc 01       	movw	r22, r24
    9824:	8a 81       	ldd	r24, Y+2	; 0x02
    9826:	0e 94 2b 2a 	call	0x5456	; 0x5456 <cc2420radiom_HPLChipconFIFO_RXFIFODone>
    982a:	89 83       	std	Y+1, r24	; 0x01
   return result;
    982c:	89 81       	ldd	r24, Y+1	; 0x01
    982e:	99 27       	eor	r25, r25
    9830:	24 96       	adiw	r28, 0x04	; 4
    9832:	0f b6       	in	r0, 0x3f	; 63
    9834:	f8 94       	cli
    9836:	de bf       	out	0x3e, r29	; 62
    9838:	0f be       	out	0x3f, r0	; 63
    983a:	cd bf       	out	0x3d, r28	; 61
    983c:	df 91       	pop	r29
    983e:	cf 91       	pop	r28
    9840:	08 95       	ret

00009842 <hplcc2420fifom_signalRXdone>:
}

//-------------------------------------------------------------------------
inline 
void hplcc2420fifom_signalRXdone( void )
 {
    9842:	cf 93       	push	r28
    9844:	df 93       	push	r29
    9846:	cd b7       	in	r28, 0x3d	; 61
    9848:	de b7       	in	r29, 0x3e	; 62
    984a:	24 97       	sbiw	r28, 0x04	; 4
    984c:	0f b6       	in	r0, 0x3f	; 63
    984e:	f8 94       	cli
    9850:	de bf       	out	0x3e, r29	; 62
    9852:	0f be       	out	0x3f, r0	; 63
    9854:	cd bf       	out	0x3d, r28	; 61
   uint8_t _rxlen;
   uint8_t *_rxbuf;
    {
      _atomic_t _atomic = _atomic_start();
    9856:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    985a:	89 83       	std	Y+1, r24	; 0x01
       {
         _rxlen = hplcc2420fifom_rxlength;
    985c:	80 91 ae 05 	lds	r24, 0x05AE
    9860:	8c 83       	std	Y+4, r24	; 0x04
         _rxbuf = hplcc2420fifom_rxbuf;
    9862:	80 91 a8 05 	lds	r24, 0x05A8
    9866:	90 91 a9 05 	lds	r25, 0x05A9
    986a:	9b 83       	std	Y+3, r25	; 0x03
    986c:	8a 83       	std	Y+2, r24	; 0x02
         hplcc2420fifom_rxbufBusy = FALSE;
    986e:	10 92 ad 05 	sts	0x05AD, r1
      }
      _atomic_end( _atomic );
    9872:	89 81       	ldd	r24, Y+1	; 0x01
    9874:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   hplcc2420fifom_HPLCC2420FIFO_RXFIFODone( _rxlen, _rxbuf );
    9878:	8a 81       	ldd	r24, Y+2	; 0x02
    987a:	9b 81       	ldd	r25, Y+3	; 0x03
    987c:	bc 01       	movw	r22, r24
    987e:	8c 81       	ldd	r24, Y+4	; 0x04
    9880:	0e 94 02 4c 	call	0x9804	; 0x9804 <hplcc2420fifom_HPLCC2420FIFO_RXFIFODone>
    9884:	24 96       	adiw	r28, 0x04	; 4
    9886:	0f b6       	in	r0, 0x3f	; 63
    9888:	f8 94       	cli
    988a:	de bf       	out	0x3e, r29	; 62
    988c:	0f be       	out	0x3f, r0	; 63
    988e:	cd bf       	out	0x3d, r28	; 61
    9890:	df 91       	pop	r29
    9892:	cf 91       	pop	r28
    9894:	08 95       	ret

00009896 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO>:
}

//-------------------------------------------------------------------------
inline 
//Seems that the transmitted len is the actual length over the air 
//The first number in the frame is the remaining part 
result_t hplcc2420fifom_HPLCC2420FIFO_readRXFIFO( uint8_t len, uint8_t *msg )
 {
    9896:	cf 93       	push	r28
    9898:	df 93       	push	r29
    989a:	cd b7       	in	r28, 0x3d	; 61
    989c:	de b7       	in	r29, 0x3e	; 62
    989e:	2b 97       	sbiw	r28, 0x0b	; 11
    98a0:	0f b6       	in	r0, 0x3f	; 63
    98a2:	f8 94       	cli
    98a4:	de bf       	out	0x3e, r29	; 62
    98a6:	0f be       	out	0x3f, r0	; 63
    98a8:	cd bf       	out	0x3d, r28	; 61
    98aa:	8f 83       	std	Y+7, r24	; 0x07
    98ac:	79 87       	std	Y+9, r23	; 0x09
    98ae:	68 87       	std	Y+8, r22	; 0x08
   uint8_t status;
   uint8_t i;
   bool returnFail = FALSE;
    98b0:	1c 82       	std	Y+4, r1	; 0x04
    {
      _atomic_t _atomic = _atomic_start();
    98b2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    98b6:	8b 83       	std	Y+3, r24	; 0x03
       {
         if ( hplcc2420fifom_rxbufBusy ) {
    98b8:	80 91 ad 05 	lds	r24, 0x05AD
    98bc:	88 23       	and	r24, r24
    98be:	19 f0       	breq	.+6      	; 0x98c6 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x30>
            returnFail = TRUE;
    98c0:	81 e0       	ldi	r24, 0x01	; 1
    98c2:	8c 83       	std	Y+4, r24	; 0x04
    98c4:	03 c0       	rjmp	.+6      	; 0x98cc <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x36>
         } else {
            hplcc2420fifom_rxbufBusy = TRUE;
    98c6:	81 e0       	ldi	r24, 0x01	; 1
    98c8:	80 93 ad 05 	sts	0x05AD, r24
         }
      }
      _atomic_end( _atomic );
    98cc:	8b 81       	ldd	r24, Y+3	; 0x03
    98ce:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   if ( returnFail ) {
    98d2:	8c 81       	ldd	r24, Y+4	; 0x04
    98d4:	88 23       	and	r24, r24
    98d6:	19 f0       	breq	.+6      	; 0x98de <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x48>
      return FAIL;
    98d8:	1b 86       	std	Y+11, r1	; 0x0b
    98da:	1a 86       	std	Y+10, r1	; 0x0a
    98dc:	7e c0       	rjmp	.+252    	; 0x99da <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x144>
   }
    {
      _atomic_t _atomic = _atomic_start();
    98de:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    98e2:	8a 83       	std	Y+2, r24	; 0x02
       {
         hplcc2420fifom_bSpiAvail = FALSE;
    98e4:	10 92 a7 05 	sts	0x05A7, r1
         hplcc2420fifom_rxbuf = msg;
    98e8:	88 85       	ldd	r24, Y+8	; 0x08
    98ea:	99 85       	ldd	r25, Y+9	; 0x09
    98ec:	90 93 a9 05 	sts	0x05A9, r25
    98f0:	80 93 a8 05 	sts	0x05A8, r24
         LITE_CLR_CC_CS_PIN();
    98f4:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <LITE_CLR_CC_CS_PIN>
         outp( CC2420_RXFIFO | 0x40, SPDR ); //output Rxfifo address
    98f8:	ef e2       	ldi	r30, 0x2F	; 47
    98fa:	f0 e0       	ldi	r31, 0x00	; 0
    98fc:	8f e7       	ldi	r24, 0x7F	; 127
    98fe:	80 83       	st	Z, r24
         while (  ! ( inp( SPSR )& 0x80 )){}
    9900:	ee e2       	ldi	r30, 0x2E	; 46
    9902:	f0 e0       	ldi	r31, 0x00	; 0
    9904:	80 81       	ld	r24, Z
    9906:	88 23       	and	r24, r24
    9908:	dc f7       	brge	.-10     	; 0x9900 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x6a>
         ; //wait for spi xfr to complete
         status = inp( SPDR );
    990a:	ef e2       	ldi	r30, 0x2F	; 47
    990c:	f0 e0       	ldi	r31, 0x00	; 0
    990e:	80 81       	ld	r24, Z
    9910:	8e 83       	std	Y+6, r24	; 0x06
         outp( 0, SPDR );
    9912:	ef e2       	ldi	r30, 0x2F	; 47
    9914:	f0 e0       	ldi	r31, 0x00	; 0
    9916:	10 82       	st	Z, r1
         while (  ! ( inp( SPSR )& 0x80 )){}
    9918:	ee e2       	ldi	r30, 0x2E	; 46
    991a:	f0 e0       	ldi	r31, 0x00	; 0
    991c:	80 81       	ld	r24, Z
    991e:	88 23       	and	r24, r24
    9920:	dc f7       	brge	.-10     	; 0x9918 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x82>
         ; //wait for spi xfr to complete
         hplcc2420fifom_rxlength = inp( SPDR );
    9922:	ef e2       	ldi	r30, 0x2F	; 47
    9924:	f0 e0       	ldi	r31, 0x00	; 0
    9926:	80 81       	ld	r24, Z
    9928:	80 93 ae 05 	sts	0x05AE, r24
         //My revise
         //The first byte, however, only contains a part of the whole, which needs to add 1 to mean that it is the total to be read 
         //and this also defaults to len, which is the MSG_DATA_SIZE
         if ( hplcc2420fifom_rxlength > 0 ) {
    992c:	80 91 ae 05 	lds	r24, 0x05AE
    9930:	88 23       	and	r24, r24
    9932:	a9 f1       	breq	.+106    	; 0x999e <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x108>
            hplcc2420fifom_rxbuf[ 0 ] = hplcc2420fifom_rxlength;
    9934:	e0 91 a8 05 	lds	r30, 0x05A8
    9938:	f0 91 a9 05 	lds	r31, 0x05A9
    993c:	80 91 ae 05 	lds	r24, 0x05AE
    9940:	80 83       	st	Z, r24
            hplcc2420fifom_rxlength ++;
    9942:	80 91 ae 05 	lds	r24, 0x05AE
    9946:	8f 5f       	subi	r24, 0xFF	; 255
    9948:	80 93 ae 05 	sts	0x05AE, r24
            if ( hplcc2420fifom_rxlength > len ) {
    994c:	90 91 ae 05 	lds	r25, 0x05AE
    9950:	8f 81       	ldd	r24, Y+7	; 0x07
    9952:	89 17       	cp	r24, r25
    9954:	18 f4       	brcc	.+6      	; 0x995c <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xc6>
               hplcc2420fifom_rxlength = len;
    9956:	8f 81       	ldd	r24, Y+7	; 0x07
    9958:	80 93 ae 05 	sts	0x05AE, r24
            }
            for ( i = 1; i < hplcc2420fifom_rxlength; i ++ ) {
    995c:	81 e0       	ldi	r24, 0x01	; 1
    995e:	8d 83       	std	Y+5, r24	; 0x05
    9960:	19 c0       	rjmp	.+50     	; 0x9994 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xfe>
               outp( 0, SPDR );
    9962:	ef e2       	ldi	r30, 0x2F	; 47
    9964:	f0 e0       	ldi	r31, 0x00	; 0
    9966:	10 82       	st	Z, r1
               while (  ! ( inp( SPSR )& 0x80 )){}
    9968:	ee e2       	ldi	r30, 0x2E	; 46
    996a:	f0 e0       	ldi	r31, 0x00	; 0
    996c:	80 81       	ld	r24, Z
    996e:	88 23       	and	r24, r24
    9970:	dc f7       	brge	.-10     	; 0x9968 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xd2>
               ; //wait for spi xfr to complete
               hplcc2420fifom_rxbuf[ i ] = inp( SPDR );
    9972:	8d 81       	ldd	r24, Y+5	; 0x05
    9974:	99 27       	eor	r25, r25
    9976:	9c 01       	movw	r18, r24
    9978:	80 91 a8 05 	lds	r24, 0x05A8
    997c:	90 91 a9 05 	lds	r25, 0x05A9
    9980:	d9 01       	movw	r26, r18
    9982:	a8 0f       	add	r26, r24
    9984:	b9 1f       	adc	r27, r25
    9986:	ef e2       	ldi	r30, 0x2F	; 47
    9988:	f0 e0       	ldi	r31, 0x00	; 0
    998a:	80 81       	ld	r24, Z
    998c:	8c 93       	st	X, r24
    998e:	8d 81       	ldd	r24, Y+5	; 0x05
    9990:	8f 5f       	subi	r24, 0xFF	; 255
    9992:	8d 83       	std	Y+5, r24	; 0x05
    9994:	90 91 ae 05 	lds	r25, 0x05AE
    9998:	8d 81       	ldd	r24, Y+5	; 0x05
    999a:	89 17       	cp	r24, r25
    999c:	10 f3       	brcs	.-60     	; 0x9962 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0xcc>
            }
         }
         hplcc2420fifom_bSpiAvail = TRUE;
    999e:	81 e0       	ldi	r24, 0x01	; 1
    99a0:	80 93 a7 05 	sts	0x05A7, r24
      }
      _atomic_end( _atomic );
    99a4:	8a 81       	ldd	r24, Y+2	; 0x02
    99a6:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   LITE_SET_CC_CS_PIN();
    99aa:	0e 94 79 5e 	call	0xbcf2	; 0xbcf2 <LITE_SET_CC_CS_PIN>
   if ( postTask( hplcc2420fifom_signalRXdone, 5 ) == FAIL ) {
    99ae:	81 e2       	ldi	r24, 0x21	; 33
    99b0:	9c e4       	ldi	r25, 0x4C	; 76
    99b2:	65 e0       	ldi	r22, 0x05	; 5
    99b4:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    99b8:	88 23       	and	r24, r24
    99ba:	59 f4       	brne	.+22     	; 0x99d2 <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x13c>
       {
         _atomic_t _atomic = _atomic_start();
    99bc:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    99c0:	89 83       	std	Y+1, r24	; 0x01
         hplcc2420fifom_rxbufBusy = FALSE;
    99c2:	10 92 ad 05 	sts	0x05AD, r1
         _atomic_end( _atomic );
    99c6:	89 81       	ldd	r24, Y+1	; 0x01
    99c8:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      }
      return FAIL;
    99cc:	1b 86       	std	Y+11, r1	; 0x0b
    99ce:	1a 86       	std	Y+10, r1	; 0x0a
    99d0:	04 c0       	rjmp	.+8      	; 0x99da <hplcc2420fifom_HPLCC2420FIFO_readRXFIFO+0x144>
   }
   return SUCCESS;
    99d2:	81 e0       	ldi	r24, 0x01	; 1
    99d4:	90 e0       	ldi	r25, 0x00	; 0
    99d6:	9b 87       	std	Y+11, r25	; 0x0b
    99d8:	8a 87       	std	Y+10, r24	; 0x0a
    99da:	8a 85       	ldd	r24, Y+10	; 0x0a
    99dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    99de:	2b 96       	adiw	r28, 0x0b	; 11
    99e0:	0f b6       	in	r0, 0x3f	; 63
    99e2:	f8 94       	cli
    99e4:	de bf       	out	0x3e, r29	; 62
    99e6:	0f be       	out	0x3f, r0	; 63
    99e8:	cd bf       	out	0x3d, r28	; 61
    99ea:	df 91       	pop	r29
    99ec:	cf 91       	pop	r28
    99ee:	08 95       	ret

000099f0 <__vector_7>:
//void  __vector_7(void) __attribute__((signal, used,   externally_visible)); 
//void __attribute((signal, used, externally_visible)) __vector_7(void)

SIGNAL( INT6_vect )
 {
    99f0:	1f 92       	push	r1
    99f2:	0f 92       	push	r0
    99f4:	0f b6       	in	r0, 0x3f	; 63
    99f6:	0f 92       	push	r0
    99f8:	11 24       	eor	r1, r1
    99fa:	2f 93       	push	r18
    99fc:	3f 93       	push	r19
    99fe:	4f 93       	push	r20
    9a00:	5f 93       	push	r21
    9a02:	6f 93       	push	r22
    9a04:	7f 93       	push	r23
    9a06:	8f 93       	push	r24
    9a08:	9f 93       	push	r25
    9a0a:	af 93       	push	r26
    9a0c:	bf 93       	push	r27
    9a0e:	ef 93       	push	r30
    9a10:	ff 93       	push	r31
    9a12:	cf 93       	push	r28
    9a14:	df 93       	push	r29
    9a16:	cd b7       	in	r28, 0x3d	; 61
    9a18:	de b7       	in	r29, 0x3e	; 62
    9a1a:	23 97       	sbiw	r28, 0x03	; 3
    9a1c:	de bf       	out	0x3e, r29	; 62
    9a1e:	cd bf       	out	0x3d, r28	; 61
   
   result_t val = SUCCESS;
    9a20:	81 e0       	ldi	r24, 0x01	; 1
    9a22:	8b 83       	std	Y+3, r24	; 0x03
   uint8_t isthreadtrue;


   _atomic_t _atomic ; 

   isthreadtrue = 0; 
    9a24:	1a 82       	std	Y+2, r1	; 0x02
    
    _atomic = _atomic_start();
    9a26:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    9a2a:	89 83       	std	Y+1, r24	; 0x01

   if (is_thread())
    9a2c:	0e 94 0b 91 	call	0x12216	; 0x12216 <is_thread>
    9a30:	88 23       	and	r24, r24
    9a32:	71 f0       	breq	.+28     	; 0x9a50 <__vector_7+0x60>
   {
   isthreadtrue = 1; 
    9a34:	81 e0       	ldi	r24, 0x01	; 1
    9a36:	8a 83       	std	Y+2, r24	; 0x02
   SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);  
    9a38:	8d b7       	in	r24, 0x3d	; 61
    9a3a:	9e b7       	in	r25, 0x3e	; 62
    9a3c:	90 93 09 0a 	sts	0x0A09, r25
    9a40:	80 93 08 0a 	sts	0x0A08, r24
    9a44:	80 91 cf 08 	lds	r24, 0x08CF
    9a48:	90 91 d0 08 	lds	r25, 0x08D0
    9a4c:	9e bf       	out	0x3e, r25	; 62
    9a4e:	8d bf       	out	0x3d, r24	; 61
   
   }

   _atomic_end( _atomic );
    9a50:	89 81       	ldd	r24, Y+1	; 0x01
    9a52:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>

   

   val = hplcc2420interruptm_FIFOP_fired();
    9a56:	0e 94 a2 4d 	call	0x9b44	; 0x9b44 <hplcc2420interruptm_FIFOP_fired>
    9a5a:	8b 83       	std	Y+3, r24	; 0x03
   if ( val == FAIL ) {
    9a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    9a5e:	88 23       	and	r24, r24
    9a60:	71 f4       	brne	.+28     	; 0x9a7e <__vector_7+0x8e>
      *( volatile unsigned char* )( unsigned int )& *( volatile unsigned char* )( 0x39 + 0x20 ) &=  ~ ( 1 << 6 );
    9a62:	a9 e5       	ldi	r26, 0x59	; 89
    9a64:	b0 e0       	ldi	r27, 0x00	; 0
    9a66:	e9 e5       	ldi	r30, 0x59	; 89
    9a68:	f0 e0       	ldi	r31, 0x00	; 0
    9a6a:	80 81       	ld	r24, Z
    9a6c:	8f 7b       	andi	r24, 0xBF	; 191
    9a6e:	8c 93       	st	X, r24
      *( volatile unsigned char* )( unsigned int )& *( volatile unsigned char* )( 0x38 + 0x20 ) |= 1 << 6;
    9a70:	a8 e5       	ldi	r26, 0x58	; 88
    9a72:	b0 e0       	ldi	r27, 0x00	; 0
    9a74:	e8 e5       	ldi	r30, 0x58	; 88
    9a76:	f0 e0       	ldi	r31, 0x00	; 0
    9a78:	80 81       	ld	r24, Z
    9a7a:	80 64       	ori	r24, 0x40	; 64
    9a7c:	8c 93       	st	X, r24
   }

     _atomic = _atomic_start();
    9a7e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    9a82:	89 83       	std	Y+1, r24	; 0x01
   
    if (isthreadtrue == 1)
    9a84:	8a 81       	ldd	r24, Y+2	; 0x02
    9a86:	81 30       	cpi	r24, 0x01	; 1
    9a88:	69 f4       	brne	.+26     	; 0x9aa4 <__vector_7+0xb4>
   {
     isthreadtrue = 0; 
    9a8a:	1a 82       	std	Y+2, r1	; 0x02
     SWAP_STACK_PTR( old_stack_ptr, stackinterrupt_ptr);
    9a8c:	8d b7       	in	r24, 0x3d	; 61
    9a8e:	9e b7       	in	r25, 0x3e	; 62
    9a90:	90 93 d0 08 	sts	0x08D0, r25
    9a94:	80 93 cf 08 	sts	0x08CF, r24
    9a98:	80 91 08 0a 	lds	r24, 0x0A08
    9a9c:	90 91 09 0a 	lds	r25, 0x0A09
    9aa0:	9e bf       	out	0x3e, r25	; 62
    9aa2:	8d bf       	out	0x3d, r24	; 61
     //thread_yield();   
   }
    _atomic_end( _atomic );
    9aa4:	89 81       	ldd	r24, Y+1	; 0x01
    9aa6:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    9aaa:	23 96       	adiw	r28, 0x03	; 3
    9aac:	f8 94       	cli
    9aae:	de bf       	out	0x3e, r29	; 62
    9ab0:	cd bf       	out	0x3d, r28	; 61
    9ab2:	df 91       	pop	r29
    9ab4:	cf 91       	pop	r28
    9ab6:	ff 91       	pop	r31
    9ab8:	ef 91       	pop	r30
    9aba:	bf 91       	pop	r27
    9abc:	af 91       	pop	r26
    9abe:	9f 91       	pop	r25
    9ac0:	8f 91       	pop	r24
    9ac2:	7f 91       	pop	r23
    9ac4:	6f 91       	pop	r22
    9ac6:	5f 91       	pop	r21
    9ac8:	4f 91       	pop	r20
    9aca:	3f 91       	pop	r19
    9acc:	2f 91       	pop	r18
    9ace:	0f 90       	pop	r0
    9ad0:	0f be       	out	0x3f, r0	; 63
    9ad2:	0f 90       	pop	r0
    9ad4:	1f 90       	pop	r1
    9ad6:	18 95       	reti

00009ad8 <hplcc2420interruptm_FIFOP_startWait>:

	

}



//-------------------------------------------------------------------------
inline 
result_t hplcc2420interruptm_FIFOP_startWait( bool low_to_high )
 {
    9ad8:	cf 93       	push	r28
    9ada:	df 93       	push	r29
    9adc:	cd b7       	in	r28, 0x3d	; 61
    9ade:	de b7       	in	r29, 0x3e	; 62
    9ae0:	22 97       	sbiw	r28, 0x02	; 2
    9ae2:	0f b6       	in	r0, 0x3f	; 63
    9ae4:	f8 94       	cli
    9ae6:	de bf       	out	0x3e, r29	; 62
    9ae8:	0f be       	out	0x3f, r0	; 63
    9aea:	cd bf       	out	0x3d, r28	; 61
    9aec:	8a 83       	std	Y+2, r24	; 0x02
    {
      _atomic_t _atomic = _atomic_start();
    9aee:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    9af2:	89 83       	std	Y+1, r24	; 0x01
       {
         CC2420_FIFOP_INT_MODE( low_to_high );
    9af4:	8a 81       	ldd	r24, Y+2	; 0x02
    9af6:	0e 94 1e 5c 	call	0xb83c	; 0xb83c <CC2420_FIFOP_INT_MODE>
         *( volatile unsigned char* )( unsigned int )& *( volatile unsigned char* )( 0x39 + 0x20 ) |= 1 << 6;
    9afa:	a9 e5       	ldi	r26, 0x59	; 89
    9afc:	b0 e0       	ldi	r27, 0x00	; 0
    9afe:	e9 e5       	ldi	r30, 0x59	; 89
    9b00:	f0 e0       	ldi	r31, 0x00	; 0
    9b02:	80 81       	ld	r24, Z
    9b04:	80 64       	ori	r24, 0x40	; 64
    9b06:	8c 93       	st	X, r24
      }
      _atomic_end( _atomic );
    9b08:	89 81       	ldd	r24, Y+1	; 0x01
    9b0a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   return SUCCESS;
    9b0e:	81 e0       	ldi	r24, 0x01	; 1
    9b10:	90 e0       	ldi	r25, 0x00	; 0
    9b12:	22 96       	adiw	r28, 0x02	; 2
    9b14:	0f b6       	in	r0, 0x3f	; 63
    9b16:	f8 94       	cli
    9b18:	de bf       	out	0x3e, r29	; 62
    9b1a:	0f be       	out	0x3f, r0	; 63
    9b1c:	cd bf       	out	0x3d, r28	; 61
    9b1e:	df 91       	pop	r29
    9b20:	cf 91       	pop	r28
    9b22:	08 95       	ret

00009b24 <hplcc2420interruptm_FIFOP_disable>:
}

//-------------------------------------------------------------------------
inline 
result_t hplcc2420interruptm_FIFOP_disable( void )
 {
    9b24:	cf 93       	push	r28
    9b26:	df 93       	push	r29
    9b28:	cd b7       	in	r28, 0x3d	; 61
    9b2a:	de b7       	in	r29, 0x3e	; 62
   *( volatile unsigned char* )( unsigned int )& *( volatile unsigned char* )( 0x39 + 0x20 ) &=  ~ ( 1 << 6 );
    9b2c:	a9 e5       	ldi	r26, 0x59	; 89
    9b2e:	b0 e0       	ldi	r27, 0x00	; 0
    9b30:	e9 e5       	ldi	r30, 0x59	; 89
    9b32:	f0 e0       	ldi	r31, 0x00	; 0
    9b34:	80 81       	ld	r24, Z
    9b36:	8f 7b       	andi	r24, 0xBF	; 191
    9b38:	8c 93       	st	X, r24
   return SUCCESS;
    9b3a:	81 e0       	ldi	r24, 0x01	; 1
    9b3c:	90 e0       	ldi	r25, 0x00	; 0
    9b3e:	df 91       	pop	r29
    9b40:	cf 91       	pop	r28
    9b42:	08 95       	ret

00009b44 <hplcc2420interruptm_FIFOP_fired>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOP_fired( void ) {
    9b44:	cf 93       	push	r28
    9b46:	df 93       	push	r29
    9b48:	cd b7       	in	r28, 0x3d	; 61
    9b4a:	de b7       	in	r29, 0x3e	; 62
    9b4c:	21 97       	sbiw	r28, 0x01	; 1
    9b4e:	0f b6       	in	r0, 0x3f	; 63
    9b50:	f8 94       	cli
    9b52:	de bf       	out	0x3e, r29	; 62
    9b54:	0f be       	out	0x3f, r0	; 63
    9b56:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = cc2420radiom_FIFOP_fired();
    9b58:	0e 94 9c 29 	call	0x5338	; 0x5338 <cc2420radiom_FIFOP_fired>
    9b5c:	89 83       	std	Y+1, r24	; 0x01
   return result;
    9b5e:	89 81       	ldd	r24, Y+1	; 0x01
    9b60:	99 27       	eor	r25, r25
    9b62:	21 96       	adiw	r28, 0x01	; 1
    9b64:	0f b6       	in	r0, 0x3f	; 63
    9b66:	f8 94       	cli
    9b68:	de bf       	out	0x3e, r29	; 62
    9b6a:	0f be       	out	0x3f, r0	; 63
    9b6c:	cd bf       	out	0x3d, r28	; 61
    9b6e:	df 91       	pop	r29
    9b70:	cf 91       	pop	r28
    9b72:	08 95       	ret

00009b74 <hplcc2420interruptm_FIFOTimer_start>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFOTimer_start( char arg_0xa315138, uint32_t arg_0xa315290 ) {
    9b74:	cf 93       	push	r28
    9b76:	df 93       	push	r29
    9b78:	cd b7       	in	r28, 0x3d	; 61
    9b7a:	de b7       	in	r29, 0x3e	; 62
    9b7c:	26 97       	sbiw	r28, 0x06	; 6
    9b7e:	0f b6       	in	r0, 0x3f	; 63
    9b80:	f8 94       	cli
    9b82:	de bf       	out	0x3e, r29	; 62
    9b84:	0f be       	out	0x3f, r0	; 63
    9b86:	cd bf       	out	0x3d, r28	; 61
    9b88:	8a 83       	std	Y+2, r24	; 0x02
    9b8a:	4b 83       	std	Y+3, r20	; 0x03
    9b8c:	5c 83       	std	Y+4, r21	; 0x04
    9b8e:	6d 83       	std	Y+5, r22	; 0x05
    9b90:	7e 83       	std	Y+6, r23	; 0x06
   unsigned char result;
   result = GenericTimerStart( 10, arg_0xa315138, arg_0xa315290 );
    9b92:	8b 81       	ldd	r24, Y+3	; 0x03
    9b94:	9c 81       	ldd	r25, Y+4	; 0x04
    9b96:	ad 81       	ldd	r26, Y+5	; 0x05
    9b98:	be 81       	ldd	r27, Y+6	; 0x06
    9b9a:	9c 01       	movw	r18, r24
    9b9c:	ad 01       	movw	r20, r26
    9b9e:	6a 81       	ldd	r22, Y+2	; 0x02
    9ba0:	8a e0       	ldi	r24, 0x0A	; 10
    9ba2:	0e 94 0a 85 	call	0x10a14	; 0x10a14 <GenericTimerStart>
    9ba6:	89 83       	std	Y+1, r24	; 0x01
   return result;
    9ba8:	89 81       	ldd	r24, Y+1	; 0x01
    9baa:	99 27       	eor	r25, r25
    9bac:	26 96       	adiw	r28, 0x06	; 6
    9bae:	0f b6       	in	r0, 0x3f	; 63
    9bb0:	f8 94       	cli
    9bb2:	de bf       	out	0x3e, r29	; 62
    9bb4:	0f be       	out	0x3f, r0	; 63
    9bb6:	cd bf       	out	0x3d, r28	; 61
    9bb8:	df 91       	pop	r29
    9bba:	cf 91       	pop	r28
    9bbc:	08 95       	ret

00009bbe <hplcc2420interruptm_FIFO_default_fired>:
}

//-------------------------------------------------------------------------
inline 
result_t hplcc2420interruptm_FIFO_default_fired( void )
 {
    9bbe:	cf 93       	push	r28
    9bc0:	df 93       	push	r29
    9bc2:	cd b7       	in	r28, 0x3d	; 61
    9bc4:	de b7       	in	r29, 0x3e	; 62
   return FAIL;
    9bc6:	80 e0       	ldi	r24, 0x00	; 0
    9bc8:	90 e0       	ldi	r25, 0x00	; 0
    9bca:	df 91       	pop	r29
    9bcc:	cf 91       	pop	r28
    9bce:	08 95       	ret

00009bd0 <hplcc2420interruptm_FIFO_fired>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_FIFO_fired( void ) {
    9bd0:	cf 93       	push	r28
    9bd2:	df 93       	push	r29
    9bd4:	cd b7       	in	r28, 0x3d	; 61
    9bd6:	de b7       	in	r29, 0x3e	; 62
    9bd8:	21 97       	sbiw	r28, 0x01	; 1
    9bda:	0f b6       	in	r0, 0x3f	; 63
    9bdc:	f8 94       	cli
    9bde:	de bf       	out	0x3e, r29	; 62
    9be0:	0f be       	out	0x3f, r0	; 63
    9be2:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = hplcc2420interruptm_FIFO_default_fired();
    9be4:	0e 94 df 4d 	call	0x9bbe	; 0x9bbe <hplcc2420interruptm_FIFO_default_fired>
    9be8:	89 83       	std	Y+1, r24	; 0x01
   return result;
    9bea:	89 81       	ldd	r24, Y+1	; 0x01
    9bec:	99 27       	eor	r25, r25
    9bee:	21 96       	adiw	r28, 0x01	; 1
    9bf0:	0f b6       	in	r0, 0x3f	; 63
    9bf2:	f8 94       	cli
    9bf4:	de bf       	out	0x3e, r29	; 62
    9bf6:	0f be       	out	0x3f, r0	; 63
    9bf8:	cd bf       	out	0x3d, r28	; 61
    9bfa:	df 91       	pop	r29
    9bfc:	cf 91       	pop	r28
    9bfe:	08 95       	ret

00009c00 <hplcc2420interruptm_FIFOTimer_fired>:
}

//-------------------------------------------------------------------------
inline 
result_t hplcc2420interruptm_FIFOTimer_fired( void )
 {
    9c00:	cf 93       	push	r28
    9c02:	df 93       	push	r29
    9c04:	cd b7       	in	r28, 0x3d	; 61
    9c06:	de b7       	in	r29, 0x3e	; 62
    9c08:	24 97       	sbiw	r28, 0x04	; 4
    9c0a:	0f b6       	in	r0, 0x3f	; 63
    9c0c:	f8 94       	cli
    9c0e:	de bf       	out	0x3e, r29	; 62
    9c10:	0f be       	out	0x3f, r0	; 63
    9c12:	cd bf       	out	0x3d, r28	; 61
   uint8_t FIFOState;
   result_t val = SUCCESS;
    9c14:	81 e0       	ldi	r24, 0x01	; 1
    9c16:	89 83       	std	Y+1, r24	; 0x01
   FIFOState = LITE_READ_CC_FIFO_PIN();
    9c18:	0e 94 db 5e 	call	0xbdb6	; 0xbdb6 <LITE_READ_CC_FIFO_PIN>
    9c1c:	8a 83       	std	Y+2, r24	; 0x02
   if ( hplcc2420interruptm_FIFOLastState != hplcc2420interruptm_FIFOWaitForState && FIFOState == hplcc2420interruptm_FIFOWaitForState ) {
    9c1e:	90 91 b0 05 	lds	r25, 0x05B0
    9c22:	80 91 af 05 	lds	r24, 0x05AF
    9c26:	98 17       	cp	r25, r24
    9c28:	81 f0       	breq	.+32     	; 0x9c4a <hplcc2420interruptm_FIFOTimer_fired+0x4a>
    9c2a:	90 91 af 05 	lds	r25, 0x05AF
    9c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    9c30:	89 17       	cp	r24, r25
    9c32:	59 f4       	brne	.+22     	; 0x9c4a <hplcc2420interruptm_FIFOTimer_fired+0x4a>
      val = hplcc2420interruptm_FIFO_fired();
    9c34:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <hplcc2420interruptm_FIFO_fired>
    9c38:	89 83       	std	Y+1, r24	; 0x01
      if ( val == FAIL ) {
    9c3a:	89 81       	ldd	r24, Y+1	; 0x01
    9c3c:	88 23       	and	r24, r24
    9c3e:	29 f4       	brne	.+10     	; 0x9c4a <hplcc2420interruptm_FIFOTimer_fired+0x4a>
         return SUCCESS;
    9c40:	21 e0       	ldi	r18, 0x01	; 1
    9c42:	30 e0       	ldi	r19, 0x00	; 0
    9c44:	3c 83       	std	Y+4, r19	; 0x04
    9c46:	2b 83       	std	Y+3, r18	; 0x03
    9c48:	0e c0       	rjmp	.+28     	; 0x9c66 <hplcc2420interruptm_FIFOTimer_fired+0x66>
      }
   }
   hplcc2420interruptm_FIFOLastState = FIFOState;
    9c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    9c4c:	80 93 b0 05 	sts	0x05B0, r24
   return hplcc2420interruptm_FIFOTimer_start( TIMER_ONE_SHOT, 1 );
    9c50:	41 e0       	ldi	r20, 0x01	; 1
    9c52:	50 e0       	ldi	r21, 0x00	; 0
    9c54:	60 e0       	ldi	r22, 0x00	; 0
    9c56:	70 e0       	ldi	r23, 0x00	; 0
    9c58:	81 e0       	ldi	r24, 0x01	; 1
    9c5a:	0e 94 ba 4d 	call	0x9b74	; 0x9b74 <hplcc2420interruptm_FIFOTimer_start>
    9c5e:	28 2f       	mov	r18, r24
    9c60:	33 27       	eor	r19, r19
    9c62:	3c 83       	std	Y+4, r19	; 0x04
    9c64:	2b 83       	std	Y+3, r18	; 0x03
    9c66:	8b 81       	ldd	r24, Y+3	; 0x03
    9c68:	9c 81       	ldd	r25, Y+4	; 0x04
    9c6a:	24 96       	adiw	r28, 0x04	; 4
    9c6c:	0f b6       	in	r0, 0x3f	; 63
    9c6e:	f8 94       	cli
    9c70:	de bf       	out	0x3e, r29	; 62
    9c72:	0f be       	out	0x3f, r0	; 63
    9c74:	cd bf       	out	0x3d, r28	; 61
    9c76:	df 91       	pop	r29
    9c78:	cf 91       	pop	r28
    9c7a:	08 95       	ret

00009c7c <hplcc2420interruptm_CCA_fired>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCA_fired( void ) {
    9c7c:	cf 93       	push	r28
    9c7e:	df 93       	push	r29
    9c80:	cd b7       	in	r28, 0x3d	; 61
    9c82:	de b7       	in	r29, 0x3e	; 62
    9c84:	21 97       	sbiw	r28, 0x01	; 1
    9c86:	0f b6       	in	r0, 0x3f	; 63
    9c88:	f8 94       	cli
    9c8a:	de bf       	out	0x3e, r29	; 62
    9c8c:	0f be       	out	0x3f, r0	; 63
    9c8e:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = cc2420controlm_CCA_fired();
    9c90:	0e 94 44 26 	call	0x4c88	; 0x4c88 <cc2420controlm_CCA_fired>
    9c94:	89 83       	std	Y+1, r24	; 0x01
   return result;
    9c96:	89 81       	ldd	r24, Y+1	; 0x01
    9c98:	99 27       	eor	r25, r25
    9c9a:	21 96       	adiw	r28, 0x01	; 1
    9c9c:	0f b6       	in	r0, 0x3f	; 63
    9c9e:	f8 94       	cli
    9ca0:	de bf       	out	0x3e, r29	; 62
    9ca2:	0f be       	out	0x3f, r0	; 63
    9ca4:	cd bf       	out	0x3d, r28	; 61
    9ca6:	df 91       	pop	r29
    9ca8:	cf 91       	pop	r28
    9caa:	08 95       	ret

00009cac <hplcc2420interruptm_CCATimer_fired>:
}

//-------------------------------------------------------------------------
inline 
result_t hplcc2420interruptm_CCATimer_fired( void )
 {
    9cac:	cf 93       	push	r28
    9cae:	df 93       	push	r29
    9cb0:	cd b7       	in	r28, 0x3d	; 61
    9cb2:	de b7       	in	r29, 0x3e	; 62
    9cb4:	24 97       	sbiw	r28, 0x04	; 4
    9cb6:	0f b6       	in	r0, 0x3f	; 63
    9cb8:	f8 94       	cli
    9cba:	de bf       	out	0x3e, r29	; 62
    9cbc:	0f be       	out	0x3f, r0	; 63
    9cbe:	cd bf       	out	0x3d, r28	; 61
   uint8_t CCAState;
   result_t val = SUCCESS;
    9cc0:	81 e0       	ldi	r24, 0x01	; 1
    9cc2:	89 83       	std	Y+1, r24	; 0x01
   CCAState = LITE_READ_CC_CCA_PIN();
    9cc4:	0e 94 db 5d 	call	0xbbb6	; 0xbbb6 <LITE_READ_CC_CCA_PIN>
    9cc8:	8a 83       	std	Y+2, r24	; 0x02
   if ( hplcc2420interruptm_CCALastState != hplcc2420interruptm_CCAWaitForState && CCAState == hplcc2420interruptm_CCAWaitForState ) {
    9cca:	90 91 b1 05 	lds	r25, 0x05B1
    9cce:	80 91 b2 05 	lds	r24, 0x05B2
    9cd2:	98 17       	cp	r25, r24
    9cd4:	81 f0       	breq	.+32     	; 0x9cf6 <hplcc2420interruptm_CCATimer_fired+0x4a>
    9cd6:	90 91 b2 05 	lds	r25, 0x05B2
    9cda:	8a 81       	ldd	r24, Y+2	; 0x02
    9cdc:	89 17       	cp	r24, r25
    9cde:	59 f4       	brne	.+22     	; 0x9cf6 <hplcc2420interruptm_CCATimer_fired+0x4a>
      val = hplcc2420interruptm_CCA_fired();
    9ce0:	0e 94 3e 4e 	call	0x9c7c	; 0x9c7c <hplcc2420interruptm_CCA_fired>
    9ce4:	89 83       	std	Y+1, r24	; 0x01
      if ( val == FAIL ) {
    9ce6:	89 81       	ldd	r24, Y+1	; 0x01
    9ce8:	88 23       	and	r24, r24
    9cea:	29 f4       	brne	.+10     	; 0x9cf6 <hplcc2420interruptm_CCATimer_fired+0x4a>
         return SUCCESS;
    9cec:	21 e0       	ldi	r18, 0x01	; 1
    9cee:	30 e0       	ldi	r19, 0x00	; 0
    9cf0:	3c 83       	std	Y+4, r19	; 0x04
    9cf2:	2b 83       	std	Y+3, r18	; 0x03
    9cf4:	0e c0       	rjmp	.+28     	; 0x9d12 <hplcc2420interruptm_CCATimer_fired+0x66>
      }
   }
   hplcc2420interruptm_CCALastState = CCAState;
    9cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    9cf8:	80 93 b1 05 	sts	0x05B1, r24
   return hplcc2420interruptm_CCATimer_start( TIMER_ONE_SHOT, 1 );
    9cfc:	41 e0       	ldi	r20, 0x01	; 1
    9cfe:	50 e0       	ldi	r21, 0x00	; 0
    9d00:	60 e0       	ldi	r22, 0x00	; 0
    9d02:	70 e0       	ldi	r23, 0x00	; 0
    9d04:	81 e0       	ldi	r24, 0x01	; 1
    9d06:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <hplcc2420interruptm_CCATimer_start>
    9d0a:	28 2f       	mov	r18, r24
    9d0c:	33 27       	eor	r19, r19
    9d0e:	3c 83       	std	Y+4, r19	; 0x04
    9d10:	2b 83       	std	Y+3, r18	; 0x03
    9d12:	8b 81       	ldd	r24, Y+3	; 0x03
    9d14:	9c 81       	ldd	r25, Y+4	; 0x04
    9d16:	24 96       	adiw	r28, 0x04	; 4
    9d18:	0f b6       	in	r0, 0x3f	; 63
    9d1a:	f8 94       	cli
    9d1c:	de bf       	out	0x3e, r29	; 62
    9d1e:	0f be       	out	0x3f, r0	; 63
    9d20:	cd bf       	out	0x3d, r28	; 61
    9d22:	df 91       	pop	r29
    9d24:	cf 91       	pop	r28
    9d26:	08 95       	ret

00009d28 <hplcc2420interruptm_CCA_startWait>:
}

//-------------------------------------------------------------------------
inline 
result_t hplcc2420interruptm_CCA_startWait( bool low_to_high )
 {
    9d28:	cf 93       	push	r28
    9d2a:	df 93       	push	r29
    9d2c:	cd b7       	in	r28, 0x3d	; 61
    9d2e:	de b7       	in	r29, 0x3e	; 62
    9d30:	22 97       	sbiw	r28, 0x02	; 2
    9d32:	0f b6       	in	r0, 0x3f	; 63
    9d34:	f8 94       	cli
    9d36:	de bf       	out	0x3e, r29	; 62
    9d38:	0f be       	out	0x3f, r0	; 63
    9d3a:	cd bf       	out	0x3d, r28	; 61
    9d3c:	8a 83       	std	Y+2, r24	; 0x02
    {
      _atomic_t _atomic = _atomic_start();
    9d3e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    9d42:	89 83       	std	Y+1, r24	; 0x01
      hplcc2420interruptm_CCAWaitForState = low_to_high;
    9d44:	8a 81       	ldd	r24, Y+2	; 0x02
    9d46:	80 93 b2 05 	sts	0x05B2, r24
      _atomic_end( _atomic );
    9d4a:	89 81       	ldd	r24, Y+1	; 0x01
    9d4c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   hplcc2420interruptm_CCALastState = LITE_READ_CC_CCA_PIN();
    9d50:	0e 94 db 5d 	call	0xbbb6	; 0xbbb6 <LITE_READ_CC_CCA_PIN>
    9d54:	80 93 b1 05 	sts	0x05B1, r24
   return hplcc2420interruptm_CCATimer_start( TIMER_ONE_SHOT, 1 );
    9d58:	41 e0       	ldi	r20, 0x01	; 1
    9d5a:	50 e0       	ldi	r21, 0x00	; 0
    9d5c:	60 e0       	ldi	r22, 0x00	; 0
    9d5e:	70 e0       	ldi	r23, 0x00	; 0
    9d60:	81 e0       	ldi	r24, 0x01	; 1
    9d62:	0e 94 bd 4e 	call	0x9d7a	; 0x9d7a <hplcc2420interruptm_CCATimer_start>
    9d66:	99 27       	eor	r25, r25
    9d68:	22 96       	adiw	r28, 0x02	; 2
    9d6a:	0f b6       	in	r0, 0x3f	; 63
    9d6c:	f8 94       	cli
    9d6e:	de bf       	out	0x3e, r29	; 62
    9d70:	0f be       	out	0x3f, r0	; 63
    9d72:	cd bf       	out	0x3d, r28	; 61
    9d74:	df 91       	pop	r29
    9d76:	cf 91       	pop	r28
    9d78:	08 95       	ret

00009d7a <hplcc2420interruptm_CCATimer_start>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_CCATimer_start( char arg_0xa315138, uint32_t arg_0xa315290 ) {
    9d7a:	cf 93       	push	r28
    9d7c:	df 93       	push	r29
    9d7e:	cd b7       	in	r28, 0x3d	; 61
    9d80:	de b7       	in	r29, 0x3e	; 62
    9d82:	26 97       	sbiw	r28, 0x06	; 6
    9d84:	0f b6       	in	r0, 0x3f	; 63
    9d86:	f8 94       	cli
    9d88:	de bf       	out	0x3e, r29	; 62
    9d8a:	0f be       	out	0x3f, r0	; 63
    9d8c:	cd bf       	out	0x3d, r28	; 61
    9d8e:	8a 83       	std	Y+2, r24	; 0x02
    9d90:	4b 83       	std	Y+3, r20	; 0x03
    9d92:	5c 83       	std	Y+4, r21	; 0x04
    9d94:	6d 83       	std	Y+5, r22	; 0x05
    9d96:	7e 83       	std	Y+6, r23	; 0x06
   unsigned char result;
   result = GenericTimerStart( 11, arg_0xa315138, arg_0xa315290 );
    9d98:	8b 81       	ldd	r24, Y+3	; 0x03
    9d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    9d9c:	ad 81       	ldd	r26, Y+5	; 0x05
    9d9e:	be 81       	ldd	r27, Y+6	; 0x06
    9da0:	9c 01       	movw	r18, r24
    9da2:	ad 01       	movw	r20, r26
    9da4:	6a 81       	ldd	r22, Y+2	; 0x02
    9da6:	8b e0       	ldi	r24, 0x0B	; 11
    9da8:	0e 94 0a 85 	call	0x10a14	; 0x10a14 <GenericTimerStart>
    9dac:	89 83       	std	Y+1, r24	; 0x01
   return result;
    9dae:	89 81       	ldd	r24, Y+1	; 0x01
    9db0:	99 27       	eor	r25, r25
    9db2:	26 96       	adiw	r28, 0x06	; 6
    9db4:	0f b6       	in	r0, 0x3f	; 63
    9db6:	f8 94       	cli
    9db8:	de bf       	out	0x3e, r29	; 62
    9dba:	0f be       	out	0x3f, r0	; 63
    9dbc:	cd bf       	out	0x3d, r28	; 61
    9dbe:	df 91       	pop	r29
    9dc0:	cf 91       	pop	r28
    9dc2:	08 95       	ret

00009dc4 <hplcc2420interruptm_SFDCapture_enableEvents>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_enableEvents( void ) {
    9dc4:	cf 93       	push	r28
    9dc6:	df 93       	push	r29
    9dc8:	cd b7       	in	r28, 0x3d	; 61
    9dca:	de b7       	in	r29, 0x3e	; 62
   HPLTimer1M_CaptureT1_enableEvents();
    9dcc:	0e 94 60 52 	call	0xa4c0	; 0xa4c0 <HPLTimer1M_CaptureT1_enableEvents>
    9dd0:	df 91       	pop	r29
    9dd2:	cf 91       	pop	r28
    9dd4:	08 95       	ret

00009dd6 <hplcc2420interruptm_SFDCapture_clearOverflow>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_clearOverflow( void ) {
    9dd6:	cf 93       	push	r28
    9dd8:	df 93       	push	r29
    9dda:	cd b7       	in	r28, 0x3d	; 61
    9ddc:	de b7       	in	r29, 0x3e	; 62
   HPLTimer1M_CaptureT1_clearOverflow();
    9dde:	0e 94 7c 52 	call	0xa4f8	; 0xa4f8 <HPLTimer1M_CaptureT1_clearOverflow>
    9de2:	df 91       	pop	r29
    9de4:	cf 91       	pop	r28
    9de6:	08 95       	ret

00009de8 <hplcc2420interruptm_SFDCapture_setEdge>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_setEdge( uint8_t arg_0xa4c5e80 ) {
    9de8:	cf 93       	push	r28
    9dea:	df 93       	push	r29
    9dec:	cd b7       	in	r28, 0x3d	; 61
    9dee:	de b7       	in	r29, 0x3e	; 62
    9df0:	21 97       	sbiw	r28, 0x01	; 1
    9df2:	0f b6       	in	r0, 0x3f	; 63
    9df4:	f8 94       	cli
    9df6:	de bf       	out	0x3e, r29	; 62
    9df8:	0f be       	out	0x3f, r0	; 63
    9dfa:	cd bf       	out	0x3d, r28	; 61
    9dfc:	89 83       	std	Y+1, r24	; 0x01
   HPLTimer1M_CaptureT1_setEdge( arg_0xa4c5e80 );
    9dfe:	89 81       	ldd	r24, Y+1	; 0x01
    9e00:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <HPLTimer1M_CaptureT1_setEdge>
    9e04:	21 96       	adiw	r28, 0x01	; 1
    9e06:	0f b6       	in	r0, 0x3f	; 63
    9e08:	f8 94       	cli
    9e0a:	de bf       	out	0x3e, r29	; 62
    9e0c:	0f be       	out	0x3f, r0	; 63
    9e0e:	cd bf       	out	0x3d, r28	; 61
    9e10:	df 91       	pop	r29
    9e12:	cf 91       	pop	r28
    9e14:	08 95       	ret

00009e16 <hplcc2420interruptm_SFDCapture_disableEvents>:
}

//-------------------------------------------------------------------------
inline void hplcc2420interruptm_SFDCapture_disableEvents( void ) {
    9e16:	cf 93       	push	r28
    9e18:	df 93       	push	r29
    9e1a:	cd b7       	in	r28, 0x3d	; 61
    9e1c:	de b7       	in	r29, 0x3e	; 62
   HPLTimer1M_CaptureT1_disableEvents();
    9e1e:	0e 94 8a 52 	call	0xa514	; 0xa514 <HPLTimer1M_CaptureT1_disableEvents>
    9e22:	df 91       	pop	r29
    9e24:	cf 91       	pop	r28
    9e26:	08 95       	ret

00009e28 <hplcc2420interruptm_SFD_enableCapture>:
}

//-------------------------------------------------------------------------
inline 
result_t hplcc2420interruptm_SFD_enableCapture( bool low_to_high )
 {
    9e28:	cf 93       	push	r28
    9e2a:	df 93       	push	r29
    9e2c:	cd b7       	in	r28, 0x3d	; 61
    9e2e:	de b7       	in	r29, 0x3e	; 62
    9e30:	22 97       	sbiw	r28, 0x02	; 2
    9e32:	0f b6       	in	r0, 0x3f	; 63
    9e34:	f8 94       	cli
    9e36:	de bf       	out	0x3e, r29	; 62
    9e38:	0f be       	out	0x3f, r0	; 63
    9e3a:	cd bf       	out	0x3d, r28	; 61
    9e3c:	8a 83       	std	Y+2, r24	; 0x02
    {
      _atomic_t _atomic = _atomic_start();
    9e3e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    9e42:	89 83       	std	Y+1, r24	; 0x01
       {
         hplcc2420interruptm_SFDCapture_disableEvents();
    9e44:	0e 94 0b 4f 	call	0x9e16	; 0x9e16 <hplcc2420interruptm_SFDCapture_disableEvents>
         hplcc2420interruptm_SFDCapture_setEdge( low_to_high );
    9e48:	8a 81       	ldd	r24, Y+2	; 0x02
    9e4a:	0e 94 f4 4e 	call	0x9de8	; 0x9de8 <hplcc2420interruptm_SFDCapture_setEdge>
         hplcc2420interruptm_SFDCapture_clearOverflow();
    9e4e:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <hplcc2420interruptm_SFDCapture_clearOverflow>
         hplcc2420interruptm_SFDCapture_enableEvents();
    9e52:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <hplcc2420interruptm_SFDCapture_enableEvents>
      }
      _atomic_end( _atomic );
    9e56:	89 81       	ldd	r24, Y+1	; 0x01
    9e58:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   return SUCCESS;
    9e5c:	81 e0       	ldi	r24, 0x01	; 1
    9e5e:	90 e0       	ldi	r25, 0x00	; 0
    9e60:	22 96       	adiw	r28, 0x02	; 2
    9e62:	0f b6       	in	r0, 0x3f	; 63
    9e64:	f8 94       	cli
    9e66:	de bf       	out	0x3e, r29	; 62
    9e68:	0f be       	out	0x3f, r0	; 63
    9e6a:	cd bf       	out	0x3d, r28	; 61
    9e6c:	df 91       	pop	r29
    9e6e:	cf 91       	pop	r28
    9e70:	08 95       	ret

00009e72 <hplcc2420interruptm_SFD_disable>:
}

//-------------------------------------------------------------------------
inline 
result_t hplcc2420interruptm_SFD_disable( void )
 {
    9e72:	cf 93       	push	r28
    9e74:	df 93       	push	r29
    9e76:	cd b7       	in	r28, 0x3d	; 61
    9e78:	de b7       	in	r29, 0x3e	; 62
   hplcc2420interruptm_SFDCapture_disableEvents();
    9e7a:	0e 94 0b 4f 	call	0x9e16	; 0x9e16 <hplcc2420interruptm_SFDCapture_disableEvents>
   return SUCCESS;
    9e7e:	81 e0       	ldi	r24, 0x01	; 1
    9e80:	90 e0       	ldi	r25, 0x00	; 0
    9e82:	df 91       	pop	r29
    9e84:	cf 91       	pop	r28
    9e86:	08 95       	ret

00009e88 <hplcc2420interruptm_SFD_captured>:
}

//-------------------------------------------------------------------------
inline result_t hplcc2420interruptm_SFD_captured( uint16_t arg_0xa41e788 ) {
    9e88:	cf 93       	push	r28
    9e8a:	df 93       	push	r29
    9e8c:	cd b7       	in	r28, 0x3d	; 61
    9e8e:	de b7       	in	r29, 0x3e	; 62
    9e90:	23 97       	sbiw	r28, 0x03	; 3
    9e92:	0f b6       	in	r0, 0x3f	; 63
    9e94:	f8 94       	cli
    9e96:	de bf       	out	0x3e, r29	; 62
    9e98:	0f be       	out	0x3f, r0	; 63
    9e9a:	cd bf       	out	0x3d, r28	; 61
    9e9c:	9b 83       	std	Y+3, r25	; 0x03
    9e9e:	8a 83       	std	Y+2, r24	; 0x02
   unsigned char result;
   result = cc2420radiom_SFD_captured( arg_0xa41e788 );
    9ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    9ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    9ea4:	0e 94 b5 2b 	call	0x576a	; 0x576a <cc2420radiom_SFD_captured>
    9ea8:	89 83       	std	Y+1, r24	; 0x01
   return result;
    9eaa:	89 81       	ldd	r24, Y+1	; 0x01
    9eac:	99 27       	eor	r25, r25
    9eae:	23 96       	adiw	r28, 0x03	; 3
    9eb0:	0f b6       	in	r0, 0x3f	; 63
    9eb2:	f8 94       	cli
    9eb4:	de bf       	out	0x3e, r29	; 62
    9eb6:	0f be       	out	0x3f, r0	; 63
    9eb8:	cd bf       	out	0x3d, r28	; 61
    9eba:	df 91       	pop	r29
    9ebc:	cf 91       	pop	r28
    9ebe:	08 95       	ret

00009ec0 <hplcc2420interruptm_SFDCapture_isOverflowPending>:
}

//-------------------------------------------------------------------------
inline bool hplcc2420interruptm_SFDCapture_isOverflowPending( void ) {
    9ec0:	cf 93       	push	r28
    9ec2:	df 93       	push	r29
    9ec4:	cd b7       	in	r28, 0x3d	; 61
    9ec6:	de b7       	in	r29, 0x3e	; 62
    9ec8:	21 97       	sbiw	r28, 0x01	; 1
    9eca:	0f b6       	in	r0, 0x3f	; 63
    9ecc:	f8 94       	cli
    9ece:	de bf       	out	0x3e, r29	; 62
    9ed0:	0f be       	out	0x3f, r0	; 63
    9ed2:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = HPLTimer1M_CaptureT1_isOverflowPending();
    9ed4:	0e 94 5c 53 	call	0xa6b8	; 0xa6b8 <HPLTimer1M_CaptureT1_isOverflowPending>
    9ed8:	89 83       	std	Y+1, r24	; 0x01
   return result;
    9eda:	89 81       	ldd	r24, Y+1	; 0x01
    9edc:	99 27       	eor	r25, r25
    9ede:	21 96       	adiw	r28, 0x01	; 1
    9ee0:	0f b6       	in	r0, 0x3f	; 63
    9ee2:	f8 94       	cli
    9ee4:	de bf       	out	0x3e, r29	; 62
    9ee6:	0f be       	out	0x3f, r0	; 63
    9ee8:	cd bf       	out	0x3d, r28	; 61
    9eea:	df 91       	pop	r29
    9eec:	cf 91       	pop	r28
    9eee:	08 95       	ret

00009ef0 <hplcc2420interruptm_SFDCapture_captured>:
}

//-------------------------------------------------------------------------
void hplcc2420interruptm_SFDCapture_captured( uint16_t time )
 {
    9ef0:	cf 93       	push	r28
    9ef2:	df 93       	push	r29
    9ef4:	cd b7       	in	r28, 0x3d	; 61
    9ef6:	de b7       	in	r29, 0x3e	; 62
    9ef8:	23 97       	sbiw	r28, 0x03	; 3
    9efa:	0f b6       	in	r0, 0x3f	; 63
    9efc:	f8 94       	cli
    9efe:	de bf       	out	0x3e, r29	; 62
    9f00:	0f be       	out	0x3f, r0	; 63
    9f02:	cd bf       	out	0x3d, r28	; 61
    9f04:	9b 83       	std	Y+3, r25	; 0x03
    9f06:	8a 83       	std	Y+2, r24	; 0x02
   result_t val = SUCCESS;
    9f08:	81 e0       	ldi	r24, 0x01	; 1
    9f0a:	89 83       	std	Y+1, r24	; 0x01
   val = hplcc2420interruptm_SFD_captured( time );
    9f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    9f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    9f10:	0e 94 44 4f 	call	0x9e88	; 0x9e88 <hplcc2420interruptm_SFD_captured>
    9f14:	89 83       	std	Y+1, r24	; 0x01
   if ( val == FAIL ) {
    9f16:	89 81       	ldd	r24, Y+1	; 0x01
    9f18:	88 23       	and	r24, r24
    9f1a:	19 f4       	brne	.+6      	; 0x9f22 <hplcc2420interruptm_SFDCapture_captured+0x32>
      hplcc2420interruptm_SFDCapture_disableEvents();
    9f1c:	0e 94 0b 4f 	call	0x9e16	; 0x9e16 <hplcc2420interruptm_SFDCapture_disableEvents>
    9f20:	06 c0       	rjmp	.+12     	; 0x9f2e <hplcc2420interruptm_SFDCapture_captured+0x3e>
   } else {
      if ( hplcc2420interruptm_SFDCapture_isOverflowPending()) {
    9f22:	0e 94 60 4f 	call	0x9ec0	; 0x9ec0 <hplcc2420interruptm_SFDCapture_isOverflowPending>
    9f26:	88 23       	and	r24, r24
    9f28:	11 f0       	breq	.+4      	; 0x9f2e <hplcc2420interruptm_SFDCapture_captured+0x3e>
         hplcc2420interruptm_SFDCapture_clearOverflow();
    9f2a:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <hplcc2420interruptm_SFDCapture_clearOverflow>
    9f2e:	23 96       	adiw	r28, 0x03	; 3
    9f30:	0f b6       	in	r0, 0x3f	; 63
    9f32:	f8 94       	cli
    9f34:	de bf       	out	0x3e, r29	; 62
    9f36:	0f be       	out	0x3f, r0	; 63
    9f38:	cd bf       	out	0x3d, r28	; 61
    9f3a:	df 91       	pop	r29
    9f3c:	cf 91       	pop	r28
    9f3e:	08 95       	ret

00009f40 <HPLCC2420M_StdControl_init>:
uint8_t HPLCC2420M_ramlen;
uint16_t HPLCC2420M_ramaddr;
//set up basic settings

inline result_t HPLCC2420M_StdControl_init( void ) {
    9f40:	cf 93       	push	r28
    9f42:	df 93       	push	r29
    9f44:	cd b7       	in	r28, 0x3d	; 61
    9f46:	de b7       	in	r29, 0x3e	; 62
    9f48:	21 97       	sbiw	r28, 0x01	; 1
    9f4a:	0f b6       	in	r0, 0x3f	; 63
    9f4c:	f8 94       	cli
    9f4e:	de bf       	out	0x3e, r29	; 62
    9f50:	0f be       	out	0x3f, r0	; 63
    9f52:	cd bf       	out	0x3d, r28	; 61
   HPLCC2420M_bSpiAvail = TRUE;
    9f54:	81 e0       	ldi	r24, 0x01	; 1
    9f56:	80 93 b6 05 	sts	0x05B6, r24
   LITE_MAKE_MISO_INPUT();
    9f5a:	0e 94 06 63 	call	0xc60c	; 0xc60c <LITE_MAKE_MISO_INPUT>
   LITE_MAKE_MOSI_OUTPUT();
    9f5e:	0e 94 9b 62 	call	0xc536	; 0xc536 <LITE_MAKE_MOSI_OUTPUT>
   LITE_MAKE_SPI_SCK_OUTPUT();
    9f62:	0e 94 55 63 	call	0xc6aa	; 0xc6aa <LITE_MAKE_SPI_SCK_OUTPUT>
   LITE_MAKE_CC_RSTN_OUTPUT();
    9f66:	0e 94 8c 5c 	call	0xb918	; 0xb918 <LITE_MAKE_CC_RSTN_OUTPUT>
   LITE_MAKE_CC_VREN_OUTPUT();
    9f6a:	0e 94 e9 5c 	call	0xb9d2	; 0xb9d2 <LITE_MAKE_CC_VREN_OUTPUT>
   LITE_MAKE_CC_CS_OUTPUT();
    9f6e:	0e 94 a2 5e 	call	0xbd44	; 0xbd44 <LITE_MAKE_CC_CS_OUTPUT>
   LITE_MAKE_CC_FIFOP1_INPUT();
    9f72:	0e 94 b1 5d 	call	0xbb62	; 0xbb62 <LITE_MAKE_CC_FIFOP1_INPUT>
   LITE_MAKE_CC_CCA_INPUT();
    9f76:	0e 94 0e 5e 	call	0xbc1c	; 0xbc1c <LITE_MAKE_CC_CCA_INPUT>
   LITE_MAKE_CC_SFD_INPUT();
    9f7a:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <LITE_MAKE_CC_SFD_INPUT>
   LITE_MAKE_CC_FIFO_INPUT();
    9f7e:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <LITE_MAKE_CC_FIFO_INPUT>
    {
      _atomic_t _atomic = _atomic_start();
    9f82:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    9f86:	89 83       	std	Y+1, r24	; 0x01
       {
         LITE_MAKE_SPI_SCK_OUTPUT();
    9f88:	0e 94 55 63 	call	0xc6aa	; 0xc6aa <LITE_MAKE_SPI_SCK_OUTPUT>
         LITE_MAKE_MISO_INPUT();
    9f8c:	0e 94 06 63 	call	0xc60c	; 0xc60c <LITE_MAKE_MISO_INPUT>
         LITE_MAKE_MOSI_OUTPUT();
    9f90:	0e 94 9b 62 	call	0xc536	; 0xc536 <LITE_MAKE_MOSI_OUTPUT>
         sbi( SPSR, SPI2X ); // Double speed spi clock
    9f94:	ae e2       	ldi	r26, 0x2E	; 46
    9f96:	b0 e0       	ldi	r27, 0x00	; 0
    9f98:	ee e2       	ldi	r30, 0x2E	; 46
    9f9a:	f0 e0       	ldi	r31, 0x00	; 0
    9f9c:	80 81       	ld	r24, Z
    9f9e:	81 60       	ori	r24, 0x01	; 1
    9fa0:	8c 93       	st	X, r24
         sbi( SPCR, MSTR ); // Set master mode
    9fa2:	ad e2       	ldi	r26, 0x2D	; 45
    9fa4:	b0 e0       	ldi	r27, 0x00	; 0
    9fa6:	ed e2       	ldi	r30, 0x2D	; 45
    9fa8:	f0 e0       	ldi	r31, 0x00	; 0
    9faa:	80 81       	ld	r24, Z
    9fac:	80 61       	ori	r24, 0x10	; 16
    9fae:	8c 93       	st	X, r24
         cbi( SPCR, CPOL ); // Set proper polarity...
    9fb0:	ad e2       	ldi	r26, 0x2D	; 45
    9fb2:	b0 e0       	ldi	r27, 0x00	; 0
    9fb4:	ed e2       	ldi	r30, 0x2D	; 45
    9fb6:	f0 e0       	ldi	r31, 0x00	; 0
    9fb8:	80 81       	ld	r24, Z
    9fba:	87 7f       	andi	r24, 0xF7	; 247
    9fbc:	8c 93       	st	X, r24
         cbi( SPCR, CPHA ); // ...and phase
    9fbe:	ad e2       	ldi	r26, 0x2D	; 45
    9fc0:	b0 e0       	ldi	r27, 0x00	; 0
    9fc2:	ed e2       	ldi	r30, 0x2D	; 45
    9fc4:	f0 e0       	ldi	r31, 0x00	; 0
    9fc6:	80 81       	ld	r24, Z
    9fc8:	8b 7f       	andi	r24, 0xFB	; 251
    9fca:	8c 93       	st	X, r24
         cbi( SPCR, SPR1 ); // set clock, fosc/2 (~3.6 Mhz)
    9fcc:	ad e2       	ldi	r26, 0x2D	; 45
    9fce:	b0 e0       	ldi	r27, 0x00	; 0
    9fd0:	ed e2       	ldi	r30, 0x2D	; 45
    9fd2:	f0 e0       	ldi	r31, 0x00	; 0
    9fd4:	80 81       	ld	r24, Z
    9fd6:	8d 7f       	andi	r24, 0xFD	; 253
    9fd8:	8c 93       	st	X, r24
         cbi( SPCR, SPR0 );
    9fda:	ad e2       	ldi	r26, 0x2D	; 45
    9fdc:	b0 e0       	ldi	r27, 0x00	; 0
    9fde:	ed e2       	ldi	r30, 0x2D	; 45
    9fe0:	f0 e0       	ldi	r31, 0x00	; 0
    9fe2:	80 81       	ld	r24, Z
    9fe4:	8e 7f       	andi	r24, 0xFE	; 254
    9fe6:	8c 93       	st	X, r24
         //    sbi(SPCR, SPIE);	           // enable spi port interrupt
         sbi( SPCR, SPE ); // enable spie port
    9fe8:	ad e2       	ldi	r26, 0x2D	; 45
    9fea:	b0 e0       	ldi	r27, 0x00	; 0
    9fec:	ed e2       	ldi	r30, 0x2D	; 45
    9fee:	f0 e0       	ldi	r31, 0x00	; 0
    9ff0:	80 81       	ld	r24, Z
    9ff2:	80 64       	ori	r24, 0x40	; 64
    9ff4:	8c 93       	st	X, r24
      }
      _atomic_end( _atomic );
    9ff6:	89 81       	ldd	r24, Y+1	; 0x01
    9ff8:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   return SUCCESS;
    9ffc:	81 e0       	ldi	r24, 0x01	; 1
    9ffe:	90 e0       	ldi	r25, 0x00	; 0
    a000:	21 96       	adiw	r28, 0x01	; 1
    a002:	0f b6       	in	r0, 0x3f	; 63
    a004:	f8 94       	cli
    a006:	de bf       	out	0x3e, r29	; 62
    a008:	0f be       	out	0x3f, r0	; 63
    a00a:	cd bf       	out	0x3d, r28	; 61
    a00c:	df 91       	pop	r29
    a00e:	cf 91       	pop	r28
    a010:	08 95       	ret

0000a012 <HPLCC2420M_HPLCC2420RAM_writeDone>:
}

//-------------------------------------------------------------------------
inline result_t HPLCC2420M_HPLCC2420RAM_writeDone( uint16_t arg_0xa45b460, uint8_t arg_0xa45b5a8, uint8_t *arg_0xa45b708 ) {
    a012:	cf 93       	push	r28
    a014:	df 93       	push	r29
    a016:	cd b7       	in	r28, 0x3d	; 61
    a018:	de b7       	in	r29, 0x3e	; 62
    a01a:	26 97       	sbiw	r28, 0x06	; 6
    a01c:	0f b6       	in	r0, 0x3f	; 63
    a01e:	f8 94       	cli
    a020:	de bf       	out	0x3e, r29	; 62
    a022:	0f be       	out	0x3f, r0	; 63
    a024:	cd bf       	out	0x3d, r28	; 61
    a026:	9b 83       	std	Y+3, r25	; 0x03
    a028:	8a 83       	std	Y+2, r24	; 0x02
    a02a:	6c 83       	std	Y+4, r22	; 0x04
    a02c:	5e 83       	std	Y+6, r21	; 0x06
    a02e:	4d 83       	std	Y+5, r20	; 0x05
   unsigned char result;
   result = cc2420controlm_HPLChipconRAM_writeDone( arg_0xa45b460, arg_0xa45b5a8, arg_0xa45b708 );
    a030:	8d 81       	ldd	r24, Y+5	; 0x05
    a032:	9e 81       	ldd	r25, Y+6	; 0x06
    a034:	2a 81       	ldd	r18, Y+2	; 0x02
    a036:	3b 81       	ldd	r19, Y+3	; 0x03
    a038:	ac 01       	movw	r20, r24
    a03a:	6c 81       	ldd	r22, Y+4	; 0x04
    a03c:	c9 01       	movw	r24, r18
    a03e:	0e 94 00 25 	call	0x4a00	; 0x4a00 <cc2420controlm_HPLChipconRAM_writeDone>
    a042:	89 83       	std	Y+1, r24	; 0x01
   return result;
    a044:	89 81       	ldd	r24, Y+1	; 0x01
    a046:	99 27       	eor	r25, r25
    a048:	26 96       	adiw	r28, 0x06	; 6
    a04a:	0f b6       	in	r0, 0x3f	; 63
    a04c:	f8 94       	cli
    a04e:	de bf       	out	0x3e, r29	; 62
    a050:	0f be       	out	0x3f, r0	; 63
    a052:	cd bf       	out	0x3d, r28	; 61
    a054:	df 91       	pop	r29
    a056:	cf 91       	pop	r28
    a058:	08 95       	ret

0000a05a <HPLCC2420M_signalRAMWr>:
}

//-------------------------------------------------------------------------
inline 
void HPLCC2420M_signalRAMWr( void )
 {
    a05a:	cf 93       	push	r28
    a05c:	df 93       	push	r29
    a05e:	cd b7       	in	r28, 0x3d	; 61
    a060:	de b7       	in	r29, 0x3e	; 62
   HPLCC2420M_HPLCC2420RAM_writeDone( HPLCC2420M_ramaddr, HPLCC2420M_ramlen, HPLCC2420M_rambuf );
    a062:	80 91 b4 05 	lds	r24, 0x05B4
    a066:	90 91 b5 05 	lds	r25, 0x05B5
    a06a:	60 91 b3 05 	lds	r22, 0x05B3
    a06e:	20 91 b7 05 	lds	r18, 0x05B7
    a072:	30 91 b8 05 	lds	r19, 0x05B8
    a076:	ac 01       	movw	r20, r24
    a078:	c9 01       	movw	r24, r18
    a07a:	0e 94 09 50 	call	0xa012	; 0xa012 <HPLCC2420M_HPLCC2420RAM_writeDone>
    a07e:	df 91       	pop	r29
    a080:	cf 91       	pop	r28
    a082:	08 95       	ret

0000a084 <HPLCC2420M_HPLCC2420RAM_write>:
}

//-------------------------------------------------------------------------
inline result_t HPLCC2420M_HPLCC2420RAM_write( uint16_t addr, uint8_t length, uint8_t *buffer )
 {
    a084:	cf 93       	push	r28
    a086:	df 93       	push	r29
    a088:	cd b7       	in	r28, 0x3d	; 61
    a08a:	de b7       	in	r29, 0x3e	; 62
    a08c:	2a 97       	sbiw	r28, 0x0a	; 10
    a08e:	0f b6       	in	r0, 0x3f	; 63
    a090:	f8 94       	cli
    a092:	de bf       	out	0x3e, r29	; 62
    a094:	0f be       	out	0x3f, r0	; 63
    a096:	cd bf       	out	0x3d, r28	; 61
    a098:	9d 83       	std	Y+5, r25	; 0x05
    a09a:	8c 83       	std	Y+4, r24	; 0x04
    a09c:	6e 83       	std	Y+6, r22	; 0x06
    a09e:	58 87       	std	Y+8, r21	; 0x08
    a0a0:	4f 83       	std	Y+7, r20	; 0x07
   uint8_t i = 0;
    a0a2:	1b 82       	std	Y+3, r1	; 0x03
   uint8_t status;
   if (  ! HPLCC2420M_bSpiAvail ) {
    a0a4:	80 91 b6 05 	lds	r24, 0x05B6
    a0a8:	88 23       	and	r24, r24
    a0aa:	19 f4       	brne	.+6      	; 0xa0b2 <HPLCC2420M_HPLCC2420RAM_write+0x2e>
      return FALSE;
    a0ac:	1a 86       	std	Y+10, r1	; 0x0a
    a0ae:	19 86       	std	Y+9, r1	; 0x09
    a0b0:	67 c0       	rjmp	.+206    	; 0xa180 <HPLCC2420M_HPLCC2420RAM_write+0xfc>
   }
    {
      _atomic_t _atomic = _atomic_start();
    a0b2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a0b6:	89 83       	std	Y+1, r24	; 0x01
       {
         HPLCC2420M_bSpiAvail = FALSE;
    a0b8:	10 92 b6 05 	sts	0x05B6, r1
         HPLCC2420M_ramaddr = addr;
    a0bc:	8c 81       	ldd	r24, Y+4	; 0x04
    a0be:	9d 81       	ldd	r25, Y+5	; 0x05
    a0c0:	90 93 b8 05 	sts	0x05B8, r25
    a0c4:	80 93 b7 05 	sts	0x05B7, r24
         HPLCC2420M_ramlen = length;
    a0c8:	8e 81       	ldd	r24, Y+6	; 0x06
    a0ca:	80 93 b3 05 	sts	0x05B3, r24
         HPLCC2420M_rambuf = buffer;
    a0ce:	8f 81       	ldd	r24, Y+7	; 0x07
    a0d0:	98 85       	ldd	r25, Y+8	; 0x08
    a0d2:	90 93 b5 05 	sts	0x05B5, r25
    a0d6:	80 93 b4 05 	sts	0x05B4, r24
         LITE_CLR_CC_CS_PIN();
    a0da:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <LITE_CLR_CC_CS_PIN>
         outp((( HPLCC2420M_ramaddr& 0x7F ) | 0x80 ), SPDR ); //ls address	and set RAM/Reg flagbit
    a0de:	ef e2       	ldi	r30, 0x2F	; 47
    a0e0:	f0 e0       	ldi	r31, 0x00	; 0
    a0e2:	80 91 b7 05 	lds	r24, 0x05B7
    a0e6:	90 91 b8 05 	lds	r25, 0x05B8
    a0ea:	8f 77       	andi	r24, 0x7F	; 127
    a0ec:	80 68       	ori	r24, 0x80	; 128
    a0ee:	80 83       	st	Z, r24
         while (  ! ( inp( SPSR )& 0x80 )){}
    a0f0:	ee e2       	ldi	r30, 0x2E	; 46
    a0f2:	f0 e0       	ldi	r31, 0x00	; 0
    a0f4:	80 81       	ld	r24, Z
    a0f6:	88 23       	and	r24, r24
    a0f8:	dc f7       	brge	.-10     	; 0xa0f0 <HPLCC2420M_HPLCC2420RAM_write+0x6c>
         ; //wait for spi xfr to complete
         status = inp( SPDR );
    a0fa:	ef e2       	ldi	r30, 0x2F	; 47
    a0fc:	f0 e0       	ldi	r31, 0x00	; 0
    a0fe:	80 81       	ld	r24, Z
    a100:	8a 83       	std	Y+2, r24	; 0x02
         outp((( HPLCC2420M_ramaddr >> 1 )& 0xC0 ), SPDR ); //ms address
    a102:	ef e2       	ldi	r30, 0x2F	; 47
    a104:	f0 e0       	ldi	r31, 0x00	; 0
    a106:	80 91 b7 05 	lds	r24, 0x05B7
    a10a:	90 91 b8 05 	lds	r25, 0x05B8
    a10e:	96 95       	lsr	r25
    a110:	87 95       	ror	r24
    a112:	80 7c       	andi	r24, 0xC0	; 192
    a114:	80 83       	st	Z, r24
         while (  ! ( inp( SPSR )& 0x80 )){}
    a116:	ee e2       	ldi	r30, 0x2E	; 46
    a118:	f0 e0       	ldi	r31, 0x00	; 0
    a11a:	80 81       	ld	r24, Z
    a11c:	88 23       	and	r24, r24
    a11e:	dc f7       	brge	.-10     	; 0xa116 <HPLCC2420M_HPLCC2420RAM_write+0x92>
         ; //wait for spi xfr to complete
         status = inp( SPDR );
    a120:	ef e2       	ldi	r30, 0x2F	; 47
    a122:	f0 e0       	ldi	r31, 0x00	; 0
    a124:	80 81       	ld	r24, Z
    a126:	8a 83       	std	Y+2, r24	; 0x02
         for ( i = 0; i < HPLCC2420M_ramlen; i ++ ) {
    a128:	1b 82       	std	Y+3, r1	; 0x03
    a12a:	16 c0       	rjmp	.+44     	; 0xa158 <HPLCC2420M_HPLCC2420RAM_write+0xd4>
            //buffer write
            outp( HPLCC2420M_rambuf[ i ], SPDR );
    a12c:	af e2       	ldi	r26, 0x2F	; 47
    a12e:	b0 e0       	ldi	r27, 0x00	; 0
    a130:	8b 81       	ldd	r24, Y+3	; 0x03
    a132:	99 27       	eor	r25, r25
    a134:	9c 01       	movw	r18, r24
    a136:	80 91 b4 05 	lds	r24, 0x05B4
    a13a:	90 91 b5 05 	lds	r25, 0x05B5
    a13e:	f9 01       	movw	r30, r18
    a140:	e8 0f       	add	r30, r24
    a142:	f9 1f       	adc	r31, r25
    a144:	80 81       	ld	r24, Z
    a146:	8c 93       	st	X, r24
            //        call USARTControl.tx(rambuf[i]);
            while (  ! ( inp( SPSR )& 0x80 )){}
    a148:	ee e2       	ldi	r30, 0x2E	; 46
    a14a:	f0 e0       	ldi	r31, 0x00	; 0
    a14c:	80 81       	ld	r24, Z
    a14e:	88 23       	and	r24, r24
    a150:	dc f7       	brge	.-10     	; 0xa148 <HPLCC2420M_HPLCC2420RAM_write+0xc4>
    a152:	8b 81       	ldd	r24, Y+3	; 0x03
    a154:	8f 5f       	subi	r24, 0xFF	; 255
    a156:	8b 83       	std	Y+3, r24	; 0x03
    a158:	90 91 b3 05 	lds	r25, 0x05B3
    a15c:	8b 81       	ldd	r24, Y+3	; 0x03
    a15e:	89 17       	cp	r24, r25
    a160:	28 f3       	brcs	.-54     	; 0xa12c <HPLCC2420M_HPLCC2420RAM_write+0xa8>
            ; //wait for spi xfr to complete
         }
      }
      _atomic_end( _atomic );
    a162:	89 81       	ldd	r24, Y+1	; 0x01
    a164:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   HPLCC2420M_bSpiAvail = TRUE;
    a168:	81 e0       	ldi	r24, 0x01	; 1
    a16a:	80 93 b6 05 	sts	0x05B6, r24
   return postTask( HPLCC2420M_signalRAMWr, 5 );
    a16e:	8d e2       	ldi	r24, 0x2D	; 45
    a170:	90 e5       	ldi	r25, 0x50	; 80
    a172:	65 e0       	ldi	r22, 0x05	; 5
    a174:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    a178:	28 2f       	mov	r18, r24
    a17a:	33 27       	eor	r19, r19
    a17c:	3a 87       	std	Y+10, r19	; 0x0a
    a17e:	29 87       	std	Y+9, r18	; 0x09
    a180:	89 85       	ldd	r24, Y+9	; 0x09
    a182:	9a 85       	ldd	r25, Y+10	; 0x0a
    a184:	2a 96       	adiw	r28, 0x0a	; 10
    a186:	0f b6       	in	r0, 0x3f	; 63
    a188:	f8 94       	cli
    a18a:	de bf       	out	0x3e, r29	; 62
    a18c:	0f be       	out	0x3f, r0	; 63
    a18e:	cd bf       	out	0x3d, r28	; 61
    a190:	df 91       	pop	r29
    a192:	cf 91       	pop	r28
    a194:	08 95       	ret

0000a196 <HPLCC2420M_HPLCC2420_write>:
}

//-------------------------------------------------------------------------
inline result_t HPLCC2420M_HPLCC2420_write( uint8_t addr, uint16_t data )
 {
    a196:	cf 93       	push	r28
    a198:	df 93       	push	r29
    a19a:	cd b7       	in	r28, 0x3d	; 61
    a19c:	de b7       	in	r29, 0x3e	; 62
    a19e:	25 97       	sbiw	r28, 0x05	; 5
    a1a0:	0f b6       	in	r0, 0x3f	; 63
    a1a2:	f8 94       	cli
    a1a4:	de bf       	out	0x3e, r29	; 62
    a1a6:	0f be       	out	0x3f, r0	; 63
    a1a8:	cd bf       	out	0x3d, r28	; 61
    a1aa:	8b 83       	std	Y+3, r24	; 0x03
    a1ac:	7d 83       	std	Y+5, r23	; 0x05
    a1ae:	6c 83       	std	Y+4, r22	; 0x04
   uint8_t status;
    {
      _atomic_t _atomic = _atomic_start();
    a1b0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a1b4:	89 83       	std	Y+1, r24	; 0x01
       {
         HPLCC2420M_bSpiAvail = FALSE;
    a1b6:	10 92 b6 05 	sts	0x05B6, r1
         LITE_CLR_CC_CS_PIN();
    a1ba:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <LITE_CLR_CC_CS_PIN>
         outp( addr, SPDR );
    a1be:	ef e2       	ldi	r30, 0x2F	; 47
    a1c0:	f0 e0       	ldi	r31, 0x00	; 0
    a1c2:	8b 81       	ldd	r24, Y+3	; 0x03
    a1c4:	80 83       	st	Z, r24
         while (  ! ( inp( SPSR )& 0x80 )){}
    a1c6:	ee e2       	ldi	r30, 0x2E	; 46
    a1c8:	f0 e0       	ldi	r31, 0x00	; 0
    a1ca:	80 81       	ld	r24, Z
    a1cc:	88 23       	and	r24, r24
    a1ce:	dc f7       	brge	.-10     	; 0xa1c6 <HPLCC2420M_HPLCC2420_write+0x30>
         ; //wait for spi xfr to complete
         status = inp( SPDR );
    a1d0:	ef e2       	ldi	r30, 0x2F	; 47
    a1d2:	f0 e0       	ldi	r31, 0x00	; 0
    a1d4:	80 81       	ld	r24, Z
    a1d6:	8a 83       	std	Y+2, r24	; 0x02
         if ( addr > CC2420_SAES ) {
    a1d8:	8b 81       	ldd	r24, Y+3	; 0x03
    a1da:	8f 30       	cpi	r24, 0x0F	; 15
    a1dc:	a8 f0       	brcs	.+42     	; 0xa208 <HPLCC2420M_HPLCC2420_write+0x72>
            outp( data >> 8, SPDR );
    a1de:	ef e2       	ldi	r30, 0x2F	; 47
    a1e0:	f0 e0       	ldi	r31, 0x00	; 0
    a1e2:	8c 81       	ldd	r24, Y+4	; 0x04
    a1e4:	9d 81       	ldd	r25, Y+5	; 0x05
    a1e6:	89 2f       	mov	r24, r25
    a1e8:	99 27       	eor	r25, r25
    a1ea:	80 83       	st	Z, r24
            while (  ! ( inp( SPSR )& 0x80 )){}
    a1ec:	ee e2       	ldi	r30, 0x2E	; 46
    a1ee:	f0 e0       	ldi	r31, 0x00	; 0
    a1f0:	80 81       	ld	r24, Z
    a1f2:	88 23       	and	r24, r24
    a1f4:	dc f7       	brge	.-10     	; 0xa1ec <HPLCC2420M_HPLCC2420_write+0x56>
            ; //wait for spi xfr to complete
            outp( data& 0xff, SPDR );
    a1f6:	ef e2       	ldi	r30, 0x2F	; 47
    a1f8:	f0 e0       	ldi	r31, 0x00	; 0
    a1fa:	8c 81       	ldd	r24, Y+4	; 0x04
    a1fc:	80 83       	st	Z, r24
            while (  ! ( inp( SPSR )& 0x80 )){}
    a1fe:	ee e2       	ldi	r30, 0x2E	; 46
    a200:	f0 e0       	ldi	r31, 0x00	; 0
    a202:	80 81       	ld	r24, Z
    a204:	88 23       	and	r24, r24
    a206:	dc f7       	brge	.-10     	; 0xa1fe <HPLCC2420M_HPLCC2420_write+0x68>
            ; //wait for spi xfr to complete
         }
         HPLCC2420M_bSpiAvail = TRUE;
    a208:	81 e0       	ldi	r24, 0x01	; 1
    a20a:	80 93 b6 05 	sts	0x05B6, r24
      }
      _atomic_end( _atomic );
    a20e:	89 81       	ldd	r24, Y+1	; 0x01
    a210:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   LITE_SET_CC_CS_PIN(); //disable chip select
    a214:	0e 94 79 5e 	call	0xbcf2	; 0xbcf2 <LITE_SET_CC_CS_PIN>
   return status;
    a218:	8a 81       	ldd	r24, Y+2	; 0x02
    a21a:	99 27       	eor	r25, r25
    a21c:	25 96       	adiw	r28, 0x05	; 5
    a21e:	0f b6       	in	r0, 0x3f	; 63
    a220:	f8 94       	cli
    a222:	de bf       	out	0x3e, r29	; 62
    a224:	0f be       	out	0x3f, r0	; 63
    a226:	cd bf       	out	0x3d, r28	; 61
    a228:	df 91       	pop	r29
    a22a:	cf 91       	pop	r28
    a22c:	08 95       	ret

0000a22e <HPLCC2420M_HPLCC2420_cmd>:
}

//-------------------------------------------------------------------------
inline uint8_t HPLCC2420M_HPLCC2420_cmd( uint8_t addr )
 {
    a22e:	cf 93       	push	r28
    a230:	df 93       	push	r29
    a232:	cd b7       	in	r28, 0x3d	; 61
    a234:	de b7       	in	r29, 0x3e	; 62
    a236:	23 97       	sbiw	r28, 0x03	; 3
    a238:	0f b6       	in	r0, 0x3f	; 63
    a23a:	f8 94       	cli
    a23c:	de bf       	out	0x3e, r29	; 62
    a23e:	0f be       	out	0x3f, r0	; 63
    a240:	cd bf       	out	0x3d, r28	; 61
    a242:	8b 83       	std	Y+3, r24	; 0x03
   uint8_t status;
    {
      _atomic_t _atomic = _atomic_start();
    a244:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a248:	89 83       	std	Y+1, r24	; 0x01
       {
         LITE_CLR_CC_CS_PIN();
    a24a:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <LITE_CLR_CC_CS_PIN>
         outp( addr, SPDR );
    a24e:	ef e2       	ldi	r30, 0x2F	; 47
    a250:	f0 e0       	ldi	r31, 0x00	; 0
    a252:	8b 81       	ldd	r24, Y+3	; 0x03
    a254:	80 83       	st	Z, r24
         while (  ! ( inp( SPSR )& 0x80 )){}
    a256:	ee e2       	ldi	r30, 0x2E	; 46
    a258:	f0 e0       	ldi	r31, 0x00	; 0
    a25a:	80 81       	ld	r24, Z
    a25c:	88 23       	and	r24, r24
    a25e:	dc f7       	brge	.-10     	; 0xa256 <HPLCC2420M_HPLCC2420_cmd+0x28>
         ; //wait for spi xfr to complete
         status = inp( SPDR );
    a260:	ef e2       	ldi	r30, 0x2F	; 47
    a262:	f0 e0       	ldi	r31, 0x00	; 0
    a264:	80 81       	ld	r24, Z
    a266:	8a 83       	std	Y+2, r24	; 0x02
      }
      _atomic_end( _atomic );
    a268:	89 81       	ldd	r24, Y+1	; 0x01
    a26a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   LITE_SET_CC_CS_PIN();
    a26e:	0e 94 79 5e 	call	0xbcf2	; 0xbcf2 <LITE_SET_CC_CS_PIN>
   return status;
    a272:	8a 81       	ldd	r24, Y+2	; 0x02
    a274:	99 27       	eor	r25, r25
    a276:	23 96       	adiw	r28, 0x03	; 3
    a278:	0f b6       	in	r0, 0x3f	; 63
    a27a:	f8 94       	cli
    a27c:	de bf       	out	0x3e, r29	; 62
    a27e:	0f be       	out	0x3f, r0	; 63
    a280:	cd bf       	out	0x3d, r28	; 61
    a282:	df 91       	pop	r29
    a284:	cf 91       	pop	r28
    a286:	08 95       	ret

0000a288 <HPLCC2420M_HPLCC2420_read>:
}

//-------------------------------------------------------------------------
inline uint16_t HPLCC2420M_HPLCC2420_read( uint8_t addr )
 {
    a288:	cf 93       	push	r28
    a28a:	df 93       	push	r29
    a28c:	cd b7       	in	r28, 0x3d	; 61
    a28e:	de b7       	in	r29, 0x3e	; 62
    a290:	25 97       	sbiw	r28, 0x05	; 5
    a292:	0f b6       	in	r0, 0x3f	; 63
    a294:	f8 94       	cli
    a296:	de bf       	out	0x3e, r29	; 62
    a298:	0f be       	out	0x3f, r0	; 63
    a29a:	cd bf       	out	0x3d, r28	; 61
    a29c:	8d 83       	std	Y+5, r24	; 0x05
   uint16_t data = 0;
    a29e:	1c 82       	std	Y+4, r1	; 0x04
    a2a0:	1b 82       	std	Y+3, r1	; 0x03
   uint8_t status;
    {
      _atomic_t _atomic = _atomic_start();
    a2a2:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a2a6:	89 83       	std	Y+1, r24	; 0x01
       {
         HPLCC2420M_bSpiAvail = FALSE;
    a2a8:	10 92 b6 05 	sts	0x05B6, r1
         LITE_CLR_CC_CS_PIN(); //enable chip select
    a2ac:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <LITE_CLR_CC_CS_PIN>
         outp( addr | 0x40, SPDR );
    a2b0:	ef e2       	ldi	r30, 0x2F	; 47
    a2b2:	f0 e0       	ldi	r31, 0x00	; 0
    a2b4:	8d 81       	ldd	r24, Y+5	; 0x05
    a2b6:	80 64       	ori	r24, 0x40	; 64
    a2b8:	80 83       	st	Z, r24
         while (  ! ( inp( SPSR )& 0x80 )){}
    a2ba:	ee e2       	ldi	r30, 0x2E	; 46
    a2bc:	f0 e0       	ldi	r31, 0x00	; 0
    a2be:	80 81       	ld	r24, Z
    a2c0:	88 23       	and	r24, r24
    a2c2:	dc f7       	brge	.-10     	; 0xa2ba <HPLCC2420M_HPLCC2420_read+0x32>
         ; //wait for spi xfr to complete
         status = inp( SPDR );
    a2c4:	ef e2       	ldi	r30, 0x2F	; 47
    a2c6:	f0 e0       	ldi	r31, 0x00	; 0
    a2c8:	80 81       	ld	r24, Z
    a2ca:	8a 83       	std	Y+2, r24	; 0x02
         outp( 0, SPDR );
    a2cc:	ef e2       	ldi	r30, 0x2F	; 47
    a2ce:	f0 e0       	ldi	r31, 0x00	; 0
    a2d0:	10 82       	st	Z, r1
         while (  ! ( inp( SPSR )& 0x80 )){}
    a2d2:	ee e2       	ldi	r30, 0x2E	; 46
    a2d4:	f0 e0       	ldi	r31, 0x00	; 0
    a2d6:	80 81       	ld	r24, Z
    a2d8:	88 23       	and	r24, r24
    a2da:	dc f7       	brge	.-10     	; 0xa2d2 <HPLCC2420M_HPLCC2420_read+0x4a>
         ; //wait for spi xfr to complete
         data = inp( SPDR );
    a2dc:	ef e2       	ldi	r30, 0x2F	; 47
    a2de:	f0 e0       	ldi	r31, 0x00	; 0
    a2e0:	80 81       	ld	r24, Z
    a2e2:	99 27       	eor	r25, r25
    a2e4:	9c 83       	std	Y+4, r25	; 0x04
    a2e6:	8b 83       	std	Y+3, r24	; 0x03
         outp( 0, SPDR );
    a2e8:	ef e2       	ldi	r30, 0x2F	; 47
    a2ea:	f0 e0       	ldi	r31, 0x00	; 0
    a2ec:	10 82       	st	Z, r1
         while (  ! ( inp( SPSR )& 0x80 )){}
    a2ee:	ee e2       	ldi	r30, 0x2E	; 46
    a2f0:	f0 e0       	ldi	r31, 0x00	; 0
    a2f2:	80 81       	ld	r24, Z
    a2f4:	88 23       	and	r24, r24
    a2f6:	dc f7       	brge	.-10     	; 0xa2ee <HPLCC2420M_HPLCC2420_read+0x66>
         ; //wait for spi xfr to complete
         data = ( data << 8 ) | inp( SPDR );
    a2f8:	8b 81       	ldd	r24, Y+3	; 0x03
    a2fa:	9c 81       	ldd	r25, Y+4	; 0x04
    a2fc:	38 2f       	mov	r19, r24
    a2fe:	22 27       	eor	r18, r18
    a300:	ef e2       	ldi	r30, 0x2F	; 47
    a302:	f0 e0       	ldi	r31, 0x00	; 0
    a304:	80 81       	ld	r24, Z
    a306:	99 27       	eor	r25, r25
    a308:	82 2b       	or	r24, r18
    a30a:	93 2b       	or	r25, r19
    a30c:	9c 83       	std	Y+4, r25	; 0x04
    a30e:	8b 83       	std	Y+3, r24	; 0x03
         LITE_SET_CC_CS_PIN(); //disable chip select
    a310:	0e 94 79 5e 	call	0xbcf2	; 0xbcf2 <LITE_SET_CC_CS_PIN>
         HPLCC2420M_bSpiAvail = TRUE;
    a314:	81 e0       	ldi	r24, 0x01	; 1
    a316:	80 93 b6 05 	sts	0x05B6, r24
      }
      _atomic_end( _atomic );
    a31a:	89 81       	ldd	r24, Y+1	; 0x01
    a31c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   }
   return data;
    a320:	8b 81       	ldd	r24, Y+3	; 0x03
    a322:	9c 81       	ldd	r25, Y+4	; 0x04
    a324:	25 96       	adiw	r28, 0x05	; 5
    a326:	0f b6       	in	r0, 0x3f	; 63
    a328:	f8 94       	cli
    a32a:	de bf       	out	0x3e, r29	; 62
    a32c:	0f be       	out	0x3f, r0	; 63
    a32e:	cd bf       	out	0x3d, r28	; 61
    a330:	df 91       	pop	r29
    a332:	cf 91       	pop	r28
    a334:	08 95       	ret

0000a336 <HPLTimer1M_StdControl_init>:


inline  
result_t HPLTimer1M_StdControl_init(void)
{
    a336:	cf 93       	push	r28
    a338:	df 93       	push	r29
    a33a:	cd b7       	in	r28, 0x3d	; 61
    a33c:	de b7       	in	r29, 0x3e	; 62
    a33e:	21 97       	sbiw	r28, 0x01	; 1
    a340:	0f b6       	in	r0, 0x3f	; 63
    a342:	f8 94       	cli
    a344:	de bf       	out	0x3e, r29	; 62
    a346:	0f be       	out	0x3f, r0	; 63
    a348:	cd bf       	out	0x3d, r28	; 61
  { _atomic_t _atomic = _atomic_start();
    a34a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a34e:	89 83       	std	Y+1, r24	; 0x01
    {
      HPLTimer1M_mscale = TCLK_CPU_DIV256;
    a350:	84 e0       	ldi	r24, 0x04	; 4
    a352:	80 93 bd 05 	sts	0x05BD, r24
      HPLTimer1M_minterval = TIMER1_DEFAULT_INTERVAL;
    a356:	8f ef       	ldi	r24, 0xFF	; 255
    a358:	90 e0       	ldi	r25, 0x00	; 0
    a35a:	90 93 bc 05 	sts	0x05BC, r25
    a35e:	80 93 bb 05 	sts	0x05BB, r24
    }
    _atomic_end(_atomic); }
    a362:	89 81       	ldd	r24, Y+1	; 0x01
    a364:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
  return SUCCESS;
    a368:	81 e0       	ldi	r24, 0x01	; 1
    a36a:	90 e0       	ldi	r25, 0x00	; 0
    a36c:	21 96       	adiw	r28, 0x01	; 1
    a36e:	0f b6       	in	r0, 0x3f	; 63
    a370:	f8 94       	cli
    a372:	de bf       	out	0x3e, r29	; 62
    a374:	0f be       	out	0x3f, r0	; 63
    a376:	cd bf       	out	0x3d, r28	; 61
    a378:	df 91       	pop	r29
    a37a:	cf 91       	pop	r28
    a37c:	08 95       	ret

0000a37e <HPLTimer1M_StdControl_start>:
}





inline  

result_t HPLTimer1M_StdControl_start(void)

{
    a37e:	cf 93       	push	r28
    a380:	df 93       	push	r29
    a382:	cd b7       	in	r28, 0x3d	; 61
    a384:	de b7       	in	r29, 0x3e	; 62
    a386:	24 97       	sbiw	r28, 0x04	; 4
    a388:	0f b6       	in	r0, 0x3f	; 63
    a38a:	f8 94       	cli
    a38c:	de bf       	out	0x3e, r29	; 62
    a38e:	0f be       	out	0x3f, r0	; 63
    a390:	cd bf       	out	0x3d, r28	; 61
  uint16_t mi;
  uint8_t ms;


  { _atomic_t _atomic = _atomic_start();
    a392:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a396:	89 83       	std	Y+1, r24	; 0x01

    {
      mi = HPLTimer1M_minterval;
    a398:	80 91 bb 05 	lds	r24, 0x05BB
    a39c:	90 91 bc 05 	lds	r25, 0x05BC
    a3a0:	9c 83       	std	Y+4, r25	; 0x04
    a3a2:	8b 83       	std	Y+3, r24	; 0x03
      ms = HPLTimer1M_mscale;
    a3a4:	80 91 bd 05 	lds	r24, 0x05BD
    a3a8:	8a 83       	std	Y+2, r24	; 0x02
    }

    _atomic_end(_atomic); }
    a3aa:	89 81       	ldd	r24, Y+1	; 0x01
    a3ac:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
  HPLTimer1M_Timer1_setRate(mi, ms);
    a3b0:	2a 81       	ldd	r18, Y+2	; 0x02
    a3b2:	8b 81       	ldd	r24, Y+3	; 0x03
    a3b4:	9c 81       	ldd	r25, Y+4	; 0x04
    a3b6:	62 2f       	mov	r22, r18
    a3b8:	0e 94 0f 52 	call	0xa41e	; 0xa41e <HPLTimer1M_Timer1_setRate>
  return SUCCESS;
    a3bc:	81 e0       	ldi	r24, 0x01	; 1
    a3be:	90 e0       	ldi	r25, 0x00	; 0
    a3c0:	24 96       	adiw	r28, 0x04	; 4
    a3c2:	0f b6       	in	r0, 0x3f	; 63
    a3c4:	f8 94       	cli
    a3c6:	de bf       	out	0x3e, r29	; 62
    a3c8:	0f be       	out	0x3f, r0	; 63
    a3ca:	cd bf       	out	0x3d, r28	; 61
    a3cc:	df 91       	pop	r29
    a3ce:	cf 91       	pop	r28
    a3d0:	08 95       	ret

0000a3d2 <HPLTimer1M_StdControl_stop>:
}



inline  

result_t HPLTimer1M_StdControl_stop(void){
    a3d2:	cf 93       	push	r28
    a3d4:	df 93       	push	r29
    a3d6:	cd b7       	in	r28, 0x3d	; 61
    a3d8:	de b7       	in	r29, 0x3e	; 62
    a3da:	23 97       	sbiw	r28, 0x03	; 3
    a3dc:	0f b6       	in	r0, 0x3f	; 63
    a3de:	f8 94       	cli
    a3e0:	de bf       	out	0x3e, r29	; 62
    a3e2:	0f be       	out	0x3f, r0	; 63
    a3e4:	cd bf       	out	0x3d, r28	; 61
      uint16_t mi;
   { _atomic_t _atomic = _atomic_start();
    a3e6:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a3ea:	89 83       	std	Y+1, r24	; 0x01
   {
		mi = HPLTimer1M_minterval;
    a3ec:	80 91 bb 05 	lds	r24, 0x05BB
    a3f0:	90 91 bc 05 	lds	r25, 0x05BC
    a3f4:	9b 83       	std	Y+3, r25	; 0x03
    a3f6:	8a 83       	std	Y+2, r24	; 0x02
   }
   _atomic_end(_atomic); }
    a3f8:	89 81       	ldd	r24, Y+1	; 0x01
    a3fa:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    HPLTimer1M_Timer1_setRate(mi, 0);	   //default scale=0=OFF
    a3fe:	8a 81       	ldd	r24, Y+2	; 0x02
    a400:	9b 81       	ldd	r25, Y+3	; 0x03
    a402:	60 e0       	ldi	r22, 0x00	; 0
    a404:	0e 94 0f 52 	call	0xa41e	; 0xa41e <HPLTimer1M_Timer1_setRate>
    return SUCCESS;
    a408:	81 e0       	ldi	r24, 0x01	; 1
    a40a:	90 e0       	ldi	r25, 0x00	; 0
    a40c:	23 96       	adiw	r28, 0x03	; 3
    a40e:	0f b6       	in	r0, 0x3f	; 63
    a410:	f8 94       	cli
    a412:	de bf       	out	0x3e, r29	; 62
    a414:	0f be       	out	0x3f, r0	; 63
    a416:	cd bf       	out	0x3d, r28	; 61
    a418:	df 91       	pop	r29
    a41a:	cf 91       	pop	r28
    a41c:	08 95       	ret

0000a41e <HPLTimer1M_Timer1_setRate>:
}





 inline   

result_t HPLTimer1M_Timer1_setRate(uint16_t interval, char scale)

{
    a41e:	cf 93       	push	r28
    a420:	df 93       	push	r29
    a422:	cd b7       	in	r28, 0x3d	; 61
    a424:	de b7       	in	r29, 0x3e	; 62
    a426:	24 97       	sbiw	r28, 0x04	; 4
    a428:	0f b6       	in	r0, 0x3f	; 63
    a42a:	f8 94       	cli
    a42c:	de bf       	out	0x3e, r29	; 62
    a42e:	0f be       	out	0x3f, r0	; 63
    a430:	cd bf       	out	0x3d, r28	; 61
    a432:	9b 83       	std	Y+3, r25	; 0x03
    a434:	8a 83       	std	Y+2, r24	; 0x02
    a436:	6c 83       	std	Y+4, r22	; 0x04


  scale &= 0x7;
    a438:	8c 81       	ldd	r24, Y+4	; 0x04
    a43a:	87 70       	andi	r24, 0x07	; 7
    a43c:	8c 83       	std	Y+4, r24	; 0x04
  scale |= 0x8;
    a43e:	8c 81       	ldd	r24, Y+4	; 0x04
    a440:	88 60       	ori	r24, 0x08	; 8
    a442:	8c 83       	std	Y+4, r24	; 0x04
  { _atomic_t _atomic = _atomic_start();
    a444:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a448:	89 83       	std	Y+1, r24	; 0x01

    {
     outp(0, TCCR1A);	  //stop the timer's clock
    a44a:	ef e4       	ldi	r30, 0x4F	; 79
    a44c:	f0 e0       	ldi	r31, 0x00	; 0
    a44e:	10 82       	st	Z, r1
		 cbi(TIMSK, OCIE1A);	 //disable output compare
    a450:	a7 e5       	ldi	r26, 0x57	; 87
    a452:	b0 e0       	ldi	r27, 0x00	; 0
    a454:	e7 e5       	ldi	r30, 0x57	; 87
    a456:	f0 e0       	ldi	r31, 0x00	; 0
    a458:	80 81       	ld	r24, Z
    a45a:	8f 7e       	andi	r24, 0xEF	; 239
    a45c:	8c 93       	st	X, r24
		 cbi(TIMSK, TOIE1);  //disable Overflow interrupts
    a45e:	a7 e5       	ldi	r26, 0x57	; 87
    a460:	b0 e0       	ldi	r27, 0x00	; 0
    a462:	e7 e5       	ldi	r30, 0x57	; 87
    a464:	f0 e0       	ldi	r31, 0x00	; 0
    a466:	80 81       	ld	r24, Z
    a468:	8b 7f       	andi	r24, 0xFB	; 251
    a46a:	8c 93       	st	X, r24
		 cbi(TIMSK, TICIE1);	 //clear input capture
    a46c:	a7 e5       	ldi	r26, 0x57	; 87
    a46e:	b0 e0       	ldi	r27, 0x00	; 0
    a470:	e7 e5       	ldi	r30, 0x57	; 87
    a472:	f0 e0       	ldi	r31, 0x00	; 0
    a474:	80 81       	ld	r24, Z
    a476:	8f 7d       	andi	r24, 0xDF	; 223
    a478:	8c 93       	st	X, r24
		 outw(TCNT1L,0);		 //clear the 16bit count 
    a47a:	ec e4       	ldi	r30, 0x4C	; 76
    a47c:	f0 e0       	ldi	r31, 0x00	; 0
    a47e:	11 82       	std	Z+1, r1	; 0x01
    a480:	10 82       	st	Z, r1
		 outw(OCR1AL, interval);//set the compare value
    a482:	ea e4       	ldi	r30, 0x4A	; 74
    a484:	f0 e0       	ldi	r31, 0x00	; 0
    a486:	8a 81       	ldd	r24, Y+2	; 0x02
    a488:	9b 81       	ldd	r25, Y+3	; 0x03
    a48a:	91 83       	std	Z+1, r25	; 0x01
    a48c:	80 83       	st	Z, r24
		 sbi(TIFR,OCF1A);	//clear Timer1A OCF flag by writing 1
    a48e:	a6 e5       	ldi	r26, 0x56	; 86
    a490:	b0 e0       	ldi	r27, 0x00	; 0
    a492:	e6 e5       	ldi	r30, 0x56	; 86
    a494:	f0 e0       	ldi	r31, 0x00	; 0
    a496:	80 81       	ld	r24, Z
    a498:	80 61       	ori	r24, 0x10	; 16
    a49a:	8c 93       	st	X, r24
//		sbi(TIMSK, OCIE1A);	  //enable OCIE1A interrupt
		 outp(scale, TCCR1B);	 //starts the timer with sc
    a49c:	ee e4       	ldi	r30, 0x4E	; 78
    a49e:	f0 e0       	ldi	r31, 0x00	; 0
    a4a0:	8c 81       	ldd	r24, Y+4	; 0x04
    a4a2:	80 83       	st	Z, r24
    }

    _atomic_end(_atomic); }
    a4a4:	89 81       	ldd	r24, Y+1	; 0x01
    a4a6:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
  return SUCCESS;
    a4aa:	81 e0       	ldi	r24, 0x01	; 1
    a4ac:	90 e0       	ldi	r25, 0x00	; 0
    a4ae:	24 96       	adiw	r28, 0x04	; 4
    a4b0:	0f b6       	in	r0, 0x3f	; 63
    a4b2:	f8 94       	cli
    a4b4:	de bf       	out	0x3e, r29	; 62
    a4b6:	0f be       	out	0x3f, r0	; 63
    a4b8:	cd bf       	out	0x3d, r28	; 61
    a4ba:	df 91       	pop	r29
    a4bc:	cf 91       	pop	r28
    a4be:	08 95       	ret

0000a4c0 <HPLTimer1M_CaptureT1_enableEvents>:
  
  
  
}



 inline   

void HPLTimer1M_CaptureT1_enableEvents(void)

{
    a4c0:	cf 93       	push	r28
    a4c2:	df 93       	push	r29
    a4c4:	cd b7       	in	r28, 0x3d	; 61
    a4c6:	de b7       	in	r29, 0x3e	; 62

   cbi(TCCR1B,WGM13);
    a4c8:	ae e4       	ldi	r26, 0x4E	; 78
    a4ca:	b0 e0       	ldi	r27, 0x00	; 0
    a4cc:	ee e4       	ldi	r30, 0x4E	; 78
    a4ce:	f0 e0       	ldi	r31, 0x00	; 0
    a4d0:	80 81       	ld	r24, Z
    a4d2:	8f 7e       	andi	r24, 0xEF	; 239
    a4d4:	8c 93       	st	X, r24
   cbi(TCCR1B,WGM12);
    a4d6:	ae e4       	ldi	r26, 0x4E	; 78
    a4d8:	b0 e0       	ldi	r27, 0x00	; 0
    a4da:	ee e4       	ldi	r30, 0x4E	; 78
    a4dc:	f0 e0       	ldi	r31, 0x00	; 0
    a4de:	80 81       	ld	r24, Z
    a4e0:	87 7f       	andi	r24, 0xF7	; 247
    a4e2:	8c 93       	st	X, r24
   sbi(TIMSK, TICIE1);
    a4e4:	a7 e5       	ldi	r26, 0x57	; 87
    a4e6:	b0 e0       	ldi	r27, 0x00	; 0
    a4e8:	e7 e5       	ldi	r30, 0x57	; 87
    a4ea:	f0 e0       	ldi	r31, 0x00	; 0
    a4ec:	80 81       	ld	r24, Z
    a4ee:	80 62       	ori	r24, 0x20	; 32
    a4f0:	8c 93       	st	X, r24
    a4f2:	df 91       	pop	r29
    a4f4:	cf 91       	pop	r28
    a4f6:	08 95       	ret

0000a4f8 <HPLTimer1M_CaptureT1_clearOverflow>:
}




 inline   

void HPLTimer1M_CaptureT1_clearOverflow(void)

{
    a4f8:	cf 93       	push	r28
    a4fa:	df 93       	push	r29
    a4fc:	cd b7       	in	r28, 0x3d	; 61
    a4fe:	de b7       	in	r29, 0x3e	; 62
    sbi(TIFR,TOV1);
    a500:	a6 e5       	ldi	r26, 0x56	; 86
    a502:	b0 e0       	ldi	r27, 0x00	; 0
    a504:	e6 e5       	ldi	r30, 0x56	; 86
    a506:	f0 e0       	ldi	r31, 0x00	; 0
    a508:	80 81       	ld	r24, Z
    a50a:	84 60       	ori	r24, 0x04	; 4
    a50c:	8c 93       	st	X, r24
    a50e:	df 91       	pop	r29
    a510:	cf 91       	pop	r28
    a512:	08 95       	ret

0000a514 <HPLTimer1M_CaptureT1_disableEvents>:
    return;
}




 inline   

void HPLTimer1M_CaptureT1_disableEvents(void)

{
    a514:	cf 93       	push	r28
    a516:	df 93       	push	r29
    a518:	cd b7       	in	r28, 0x3d	; 61
    a51a:	de b7       	in	r29, 0x3e	; 62
   cbi(TIMSK, TICIE1); //disable
    a51c:	a7 e5       	ldi	r26, 0x57	; 87
    a51e:	b0 e0       	ldi	r27, 0x00	; 0
    a520:	e7 e5       	ldi	r30, 0x57	; 87
    a522:	f0 e0       	ldi	r31, 0x00	; 0
    a524:	80 81       	ld	r24, Z
    a526:	8f 7d       	andi	r24, 0xDF	; 223
    a528:	8c 93       	st	X, r24
   sbi(TIFR, ICF1);	//clear any pending interrupt}
    a52a:	a6 e5       	ldi	r26, 0x56	; 86
    a52c:	b0 e0       	ldi	r27, 0x00	; 0
    a52e:	e6 e5       	ldi	r30, 0x56	; 86
    a530:	f0 e0       	ldi	r31, 0x00	; 0
    a532:	80 81       	ld	r24, Z
    a534:	80 62       	ori	r24, 0x20	; 32
    a536:	8c 93       	st	X, r24
    a538:	df 91       	pop	r29
    a53a:	cf 91       	pop	r28
    a53c:	08 95       	ret

0000a53e <HPLTimer1M_Timer1_default_fire>:
}




 inline    

result_t HPLTimer1M_Timer1_default_fire(void)

{
    a53e:	cf 93       	push	r28
    a540:	df 93       	push	r29
    a542:	cd b7       	in	r28, 0x3d	; 61
    a544:	de b7       	in	r29, 0x3e	; 62

  return SUCCESS;
    a546:	81 e0       	ldi	r24, 0x01	; 1
    a548:	90 e0       	ldi	r25, 0x00	; 0
    a54a:	df 91       	pop	r29
    a54c:	cf 91       	pop	r28
    a54e:	08 95       	ret

0000a550 <HPLTimer1M_Timer1_fire>:
}


inline    result_t HPLTimer1M_Timer1_fire(void){
    a550:	cf 93       	push	r28
    a552:	df 93       	push	r29
    a554:	cd b7       	in	r28, 0x3d	; 61
    a556:	de b7       	in	r29, 0x3e	; 62
    a558:	21 97       	sbiw	r28, 0x01	; 1
    a55a:	0f b6       	in	r0, 0x3f	; 63
    a55c:	f8 94       	cli
    a55e:	de bf       	out	0x3e, r29	; 62
    a560:	0f be       	out	0x3f, r0	; 63
    a562:	cd bf       	out	0x3d, r28	; 61

  unsigned char result;



  result = HPLTimer1M_Timer1_default_fire();
    a564:	0e 94 9f 52 	call	0xa53e	; 0xa53e <HPLTimer1M_Timer1_default_fire>
    a568:	89 83       	std	Y+1, r24	; 0x01



  return result;
    a56a:	89 81       	ldd	r24, Y+1	; 0x01
    a56c:	99 27       	eor	r25, r25
    a56e:	21 96       	adiw	r28, 0x01	; 1
    a570:	0f b6       	in	r0, 0x3f	; 63
    a572:	f8 94       	cli
    a574:	de bf       	out	0x3e, r29	; 62
    a576:	0f be       	out	0x3f, r0	; 63
    a578:	cd bf       	out	0x3d, r28	; 61
    a57a:	df 91       	pop	r29
    a57c:	cf 91       	pop	r28
    a57e:	08 95       	ret

0000a580 <HPLTimer1M_CaptureT1_getEvent>:

}

 inline   

uint16_t HPLTimer1M_CaptureT1_getEvent(void)

{
    a580:	cf 93       	push	r28
    a582:	df 93       	push	r29
    a584:	cd b7       	in	r28, 0x3d	; 61
    a586:	de b7       	in	r29, 0x3e	; 62
    a588:	23 97       	sbiw	r28, 0x03	; 3
    a58a:	0f b6       	in	r0, 0x3f	; 63
    a58c:	f8 94       	cli
    a58e:	de bf       	out	0x3e, r29	; 62
    a590:	0f be       	out	0x3f, r0	; 63
    a592:	cd bf       	out	0x3d, r28	; 61
  uint16_t i;


  { _atomic_t _atomic = _atomic_start();
    a594:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a598:	89 83       	std	Y+1, r24	; 0x01

   i = inw(ICR1L);
    a59a:	e6 e4       	ldi	r30, 0x46	; 70
    a59c:	f0 e0       	ldi	r31, 0x00	; 0
    a59e:	80 81       	ld	r24, Z
    a5a0:	91 81       	ldd	r25, Z+1	; 0x01
    a5a2:	9b 83       	std	Y+3, r25	; 0x03
    a5a4:	8a 83       	std	Y+2, r24	; 0x02

    _atomic_end(_atomic); }
    a5a6:	89 81       	ldd	r24, Y+1	; 0x01
    a5a8:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
  return i;
    a5ac:	8a 81       	ldd	r24, Y+2	; 0x02
    a5ae:	9b 81       	ldd	r25, Y+3	; 0x03
    a5b0:	23 96       	adiw	r28, 0x03	; 3
    a5b2:	0f b6       	in	r0, 0x3f	; 63
    a5b4:	f8 94       	cli
    a5b6:	de bf       	out	0x3e, r29	; 62
    a5b8:	0f be       	out	0x3f, r0	; 63
    a5ba:	cd bf       	out	0x3d, r28	; 61
    a5bc:	df 91       	pop	r29
    a5be:	cf 91       	pop	r28
    a5c0:	08 95       	ret

0000a5c2 <HPLTimer1M_CaptureT1_captured>:
}



inline    void HPLTimer1M_CaptureT1_captured(uint16_t arg_0xa4d7ac0){
    a5c2:	cf 93       	push	r28
    a5c4:	df 93       	push	r29
    a5c6:	cd b7       	in	r28, 0x3d	; 61
    a5c8:	de b7       	in	r29, 0x3e	; 62
    a5ca:	22 97       	sbiw	r28, 0x02	; 2
    a5cc:	0f b6       	in	r0, 0x3f	; 63
    a5ce:	f8 94       	cli
    a5d0:	de bf       	out	0x3e, r29	; 62
    a5d2:	0f be       	out	0x3f, r0	; 63
    a5d4:	cd bf       	out	0x3d, r28	; 61
    a5d6:	9a 83       	std	Y+2, r25	; 0x02
    a5d8:	89 83       	std	Y+1, r24	; 0x01

  hplcc2420interruptm_SFDCapture_captured(arg_0xa4d7ac0);
    a5da:	89 81       	ldd	r24, Y+1	; 0x01
    a5dc:	9a 81       	ldd	r25, Y+2	; 0x02
    a5de:	0e 94 78 4f 	call	0x9ef0	; 0x9ef0 <hplcc2420interruptm_SFDCapture_captured>
    a5e2:	22 96       	adiw	r28, 0x02	; 2
    a5e4:	0f b6       	in	r0, 0x3f	; 63
    a5e6:	f8 94       	cli
    a5e8:	de bf       	out	0x3e, r29	; 62
    a5ea:	0f be       	out	0x3f, r0	; 63
    a5ec:	cd bf       	out	0x3d, r28	; 61
    a5ee:	df 91       	pop	r29
    a5f0:	cf 91       	pop	r28
    a5f2:	08 95       	ret

0000a5f4 <__vector_11>:

}



//void   __vector_11(void) __attribute__((signal, used,   externally_visible)); 
//void  __attribute((signal, used, externally_visible))   __vector_11(void) 
SIGNAL(TIMER1_CAPT_vect)

{
    a5f4:	1f 92       	push	r1
    a5f6:	0f 92       	push	r0
    a5f8:	0f b6       	in	r0, 0x3f	; 63
    a5fa:	0f 92       	push	r0
    a5fc:	11 24       	eor	r1, r1
    a5fe:	2f 93       	push	r18
    a600:	3f 93       	push	r19
    a602:	4f 93       	push	r20
    a604:	5f 93       	push	r21
    a606:	6f 93       	push	r22
    a608:	7f 93       	push	r23
    a60a:	8f 93       	push	r24
    a60c:	9f 93       	push	r25
    a60e:	af 93       	push	r26
    a610:	bf 93       	push	r27
    a612:	ef 93       	push	r30
    a614:	ff 93       	push	r31
    a616:	cf 93       	push	r28
    a618:	df 93       	push	r29
    a61a:	cd b7       	in	r28, 0x3d	; 61
    a61c:	de b7       	in	r29, 0x3e	; 62
    a61e:	22 97       	sbiw	r28, 0x02	; 2
    a620:	de bf       	out	0x3e, r29	; 62
    a622:	cd bf       	out	0x3d, r28	; 61
   uint8_t isthreadtrue; 

   _atomic_t _atomic;
   
   isthreadtrue = 0; 
    a624:	1a 82       	std	Y+2, r1	; 0x02
   _atomic = _atomic_start();
    a626:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a62a:	89 83       	std	Y+1, r24	; 0x01

   if (is_thread())
    a62c:	0e 94 0b 91 	call	0x12216	; 0x12216 <is_thread>
    a630:	88 23       	and	r24, r24
    a632:	71 f0       	breq	.+28     	; 0xa650 <__vector_11+0x5c>
   {
    isthreadtrue = 1; 
    a634:	81 e0       	ldi	r24, 0x01	; 1
    a636:	8a 83       	std	Y+2, r24	; 0x02
    SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);  
    a638:	8d b7       	in	r24, 0x3d	; 61
    a63a:	9e b7       	in	r25, 0x3e	; 62
    a63c:	90 93 09 0a 	sts	0x0A09, r25
    a640:	80 93 08 0a 	sts	0x0A08, r24
    a644:	80 91 cf 08 	lds	r24, 0x08CF
    a648:	90 91 d0 08 	lds	r25, 0x08D0
    a64c:	9e bf       	out	0x3e, r25	; 62
    a64e:	8d bf       	out	0x3d, r24	; 61
	}
   _atomic_end( _atomic );
    a650:	89 81       	ldd	r24, Y+1	; 0x01
    a652:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>


 
  HPLTimer1M_CaptureT1_captured(HPLTimer1M_CaptureT1_getEvent());
    a656:	0e 94 c0 52 	call	0xa580	; 0xa580 <HPLTimer1M_CaptureT1_getEvent>
    a65a:	0e 94 e1 52 	call	0xa5c2	; 0xa5c2 <HPLTimer1M_CaptureT1_captured>


  _atomic = _atomic_start();
    a65e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a662:	89 83       	std	Y+1, r24	; 0x01
   if (isthreadtrue == 1)
    a664:	8a 81       	ldd	r24, Y+2	; 0x02
    a666:	81 30       	cpi	r24, 0x01	; 1
    a668:	69 f4       	brne	.+26     	; 0xa684 <__vector_11+0x90>
   {
     isthreadtrue = 0; 
    a66a:	1a 82       	std	Y+2, r1	; 0x02
     SWAP_STACK_PTR( old_stack_ptr, stackinterrupt_ptr);
    a66c:	8d b7       	in	r24, 0x3d	; 61
    a66e:	9e b7       	in	r25, 0x3e	; 62
    a670:	90 93 d0 08 	sts	0x08D0, r25
    a674:	80 93 cf 08 	sts	0x08CF, r24
    a678:	80 91 08 0a 	lds	r24, 0x0A08
    a67c:	90 91 09 0a 	lds	r25, 0x0A09
    a680:	9e bf       	out	0x3e, r25	; 62
    a682:	8d bf       	out	0x3d, r24	; 61
   // thread_yield();   
   }
    _atomic_end( _atomic );
    a684:	89 81       	ldd	r24, Y+1	; 0x01
    a686:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    a68a:	22 96       	adiw	r28, 0x02	; 2
    a68c:	f8 94       	cli
    a68e:	de bf       	out	0x3e, r29	; 62
    a690:	cd bf       	out	0x3d, r28	; 61
    a692:	df 91       	pop	r29
    a694:	cf 91       	pop	r28
    a696:	ff 91       	pop	r31
    a698:	ef 91       	pop	r30
    a69a:	bf 91       	pop	r27
    a69c:	af 91       	pop	r26
    a69e:	9f 91       	pop	r25
    a6a0:	8f 91       	pop	r24
    a6a2:	7f 91       	pop	r23
    a6a4:	6f 91       	pop	r22
    a6a6:	5f 91       	pop	r21
    a6a8:	4f 91       	pop	r20
    a6aa:	3f 91       	pop	r19
    a6ac:	2f 91       	pop	r18
    a6ae:	0f 90       	pop	r0
    a6b0:	0f be       	out	0x3f, r0	; 63
    a6b2:	0f 90       	pop	r0
    a6b4:	1f 90       	pop	r1
    a6b6:	18 95       	reti

0000a6b8 <HPLTimer1M_CaptureT1_isOverflowPending>:
  
}




 inline   

bool HPLTimer1M_CaptureT1_isOverflowPending(void)

{
    a6b8:	cf 93       	push	r28
    a6ba:	df 93       	push	r29
    a6bc:	cd b7       	in	r28, 0x3d	; 61
    a6be:	de b7       	in	r29, 0x3e	; 62
  return( inp(TIFR) & TOV1 );
    a6c0:	e6 e5       	ldi	r30, 0x56	; 86
    a6c2:	f0 e0       	ldi	r31, 0x00	; 0
    a6c4:	80 81       	ld	r24, Z
    a6c6:	99 27       	eor	r25, r25
    a6c8:	82 70       	andi	r24, 0x02	; 2
    a6ca:	90 70       	andi	r25, 0x00	; 0
    a6cc:	df 91       	pop	r29
    a6ce:	cf 91       	pop	r28
    a6d0:	08 95       	ret

0000a6d2 <HPLTimer1M_CaptureT1_setEdge>:
}



inline 

void HPLTimer1M_CaptureT1_setEdge(uint8_t LowToHigh)

{
    a6d2:	cf 93       	push	r28
    a6d4:	df 93       	push	r29
    a6d6:	cd b7       	in	r28, 0x3d	; 61
    a6d8:	de b7       	in	r29, 0x3e	; 62
    a6da:	21 97       	sbiw	r28, 0x01	; 1
    a6dc:	0f b6       	in	r0, 0x3f	; 63
    a6de:	f8 94       	cli
    a6e0:	de bf       	out	0x3e, r29	; 62
    a6e2:	0f be       	out	0x3f, r0	; 63
    a6e4:	cd bf       	out	0x3d, r28	; 61
    a6e6:	89 83       	std	Y+1, r24	; 0x01


   if( LowToHigh )
    a6e8:	89 81       	ldd	r24, Y+1	; 0x01
    a6ea:	88 23       	and	r24, r24
    a6ec:	41 f0       	breq	.+16     	; 0xa6fe <HPLTimer1M_CaptureT1_setEdge+0x2c>
   sbi(TCCR1B,ICES1);	//rising edge
    a6ee:	ae e4       	ldi	r26, 0x4E	; 78
    a6f0:	b0 e0       	ldi	r27, 0x00	; 0
    a6f2:	ee e4       	ldi	r30, 0x4E	; 78
    a6f4:	f0 e0       	ldi	r31, 0x00	; 0
    a6f6:	80 81       	ld	r24, Z
    a6f8:	80 64       	ori	r24, 0x40	; 64
    a6fa:	8c 93       	st	X, r24
    a6fc:	07 c0       	rjmp	.+14     	; 0xa70c <HPLTimer1M_CaptureT1_setEdge+0x3a>
  else
   cbi(TCCR1B,ICES1);	//falling edge
    a6fe:	ae e4       	ldi	r26, 0x4E	; 78
    a700:	b0 e0       	ldi	r27, 0x00	; 0
    a702:	ee e4       	ldi	r30, 0x4E	; 78
    a704:	f0 e0       	ldi	r31, 0x00	; 0
    a706:	80 81       	ld	r24, Z
    a708:	8f 7b       	andi	r24, 0xBF	; 191
    a70a:	8c 93       	st	X, r24

//Set InputCapture pin PortD pin4 as INPUT
//  LITE_MAKE_CC_SFD_INPUT();
  
  sbi(TIFR, ICF1);	//clear any pending interrupt
    a70c:	a6 e5       	ldi	r26, 0x56	; 86
    a70e:	b0 e0       	ldi	r27, 0x00	; 0
    a710:	e6 e5       	ldi	r30, 0x56	; 86
    a712:	f0 e0       	ldi	r31, 0x00	; 0
    a714:	80 81       	ld	r24, Z
    a716:	80 62       	ori	r24, 0x20	; 32
    a718:	8c 93       	st	X, r24
    a71a:	21 96       	adiw	r28, 0x01	; 1
    a71c:	0f b6       	in	r0, 0x3f	; 63
    a71e:	f8 94       	cli
    a720:	de bf       	out	0x3e, r29	; 62
    a722:	0f be       	out	0x3f, r0	; 63
    a724:	cd bf       	out	0x3d, r28	; 61
    a726:	df 91       	pop	r29
    a728:	cf 91       	pop	r28
    a72a:	08 95       	ret

0000a72c <__vector_12>:
  return;
}





//void  __vector_12(void)  __attribute__((signal, used,   externally_visible)); 
//void __attribute((interrupt, used, externally_visible))  __vector_12(void)

ISR(TIMER1_COMPA_vect)
{
    a72c:	1f 92       	push	r1
    a72e:	0f 92       	push	r0
    a730:	0f b6       	in	r0, 0x3f	; 63
    a732:	0f 92       	push	r0
    a734:	11 24       	eor	r1, r1
    a736:	2f 93       	push	r18
    a738:	3f 93       	push	r19
    a73a:	4f 93       	push	r20
    a73c:	5f 93       	push	r21
    a73e:	6f 93       	push	r22
    a740:	7f 93       	push	r23
    a742:	8f 93       	push	r24
    a744:	9f 93       	push	r25
    a746:	af 93       	push	r26
    a748:	bf 93       	push	r27
    a74a:	ef 93       	push	r30
    a74c:	ff 93       	push	r31
    a74e:	cf 93       	push	r28
    a750:	df 93       	push	r29
    a752:	cd b7       	in	r28, 0x3d	; 61
    a754:	de b7       	in	r29, 0x3e	; 62
    a756:	23 97       	sbiw	r28, 0x03	; 3
    a758:	de bf       	out	0x3e, r29	; 62
    a75a:	cd bf       	out	0x3d, r28	; 61


   _atomic_t _atomic;
   uint8_t isthreadtrue; 
   isthreadtrue = 0; 
    a75c:	1a 82       	std	Y+2, r1	; 0x02
   _atomic = _atomic_start();
    a75e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a762:	8b 83       	std	Y+3, r24	; 0x03

   if (is_thread())
    a764:	0e 94 0b 91 	call	0x12216	; 0x12216 <is_thread>
    a768:	88 23       	and	r24, r24
    a76a:	71 f0       	breq	.+28     	; 0xa788 <__vector_12+0x5c>
   {
   isthreadtrue = 1; 
    a76c:	81 e0       	ldi	r24, 0x01	; 1
    a76e:	8a 83       	std	Y+2, r24	; 0x02
   SWAP_STACK_PTR(stackinterrupt_ptr, old_stack_ptr);  }
    a770:	8d b7       	in	r24, 0x3d	; 61
    a772:	9e b7       	in	r25, 0x3e	; 62
    a774:	90 93 09 0a 	sts	0x0A09, r25
    a778:	80 93 08 0a 	sts	0x0A08, r24
    a77c:	80 91 cf 08 	lds	r24, 0x08CF
    a780:	90 91 d0 08 	lds	r25, 0x08D0
    a784:	9e bf       	out	0x3e, r25	; 62
    a786:	8d bf       	out	0x3d, r24	; 61
   _atomic_end( _atomic );
    a788:	8b 81       	ldd	r24, Y+3	; 0x03
    a78a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>




  { _atomic_t _atomic = _atomic_start();
    a78e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a792:	89 83       	std	Y+1, r24	; 0x01

    {
      if (HPLTimer1M_set_flag) {
    a794:	80 91 b9 05 	lds	r24, 0x05B9
    a798:	88 23       	and	r24, r24
    a79a:	c1 f0       	breq	.+48     	; 0xa7cc <__vector_12+0xa0>
          HPLTimer1M_mscale = HPLTimer1M_nextScale;
    a79c:	80 91 ba 05 	lds	r24, 0x05BA
    a7a0:	80 93 bd 05 	sts	0x05BD, r24
          HPLTimer1M_nextScale |= 0x8;
    a7a4:	80 91 ba 05 	lds	r24, 0x05BA
    a7a8:	88 60       	ori	r24, 0x08	; 8
    a7aa:	80 93 ba 05 	sts	0x05BA, r24
          outp(HPLTimer1M_nextScale, TCCR1B);  //update the clock scale
    a7ae:	ee e4       	ldi	r30, 0x4E	; 78
    a7b0:	f0 e0       	ldi	r31, 0x00	; 0
    a7b2:	80 91 ba 05 	lds	r24, 0x05BA
    a7b6:	80 83       	st	Z, r24
		      outw(OCR1AL, HPLTimer1M_minterval); //update the compare value
    a7b8:	ea e4       	ldi	r30, 0x4A	; 74
    a7ba:	f0 e0       	ldi	r31, 0x00	; 0
    a7bc:	80 91 bb 05 	lds	r24, 0x05BB
    a7c0:	90 91 bc 05 	lds	r25, 0x05BC
    a7c4:	91 83       	std	Z+1, r25	; 0x01
    a7c6:	80 83       	st	Z, r24
          HPLTimer1M_set_flag = 0;
    a7c8:	10 92 b9 05 	sts	0x05B9, r1
        }
    }

    _atomic_end(_atomic); }
    a7cc:	89 81       	ldd	r24, Y+1	; 0x01
    a7ce:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
  HPLTimer1M_Timer1_fire();
    a7d2:	0e 94 a8 52 	call	0xa550	; 0xa550 <HPLTimer1M_Timer1_fire>


 
    

    _atomic = _atomic_start();
    a7d6:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a7da:	8b 83       	std	Y+3, r24	; 0x03
   if (isthreadtrue == 1)
    a7dc:	8a 81       	ldd	r24, Y+2	; 0x02
    a7de:	81 30       	cpi	r24, 0x01	; 1
    a7e0:	69 f4       	brne	.+26     	; 0xa7fc <__vector_12+0xd0>
   {
     isthreadtrue = 0; 
    a7e2:	1a 82       	std	Y+2, r1	; 0x02
     SWAP_STACK_PTR( old_stack_ptr, stackinterrupt_ptr);
    a7e4:	8d b7       	in	r24, 0x3d	; 61
    a7e6:	9e b7       	in	r25, 0x3e	; 62
    a7e8:	90 93 d0 08 	sts	0x08D0, r25
    a7ec:	80 93 cf 08 	sts	0x08CF, r24
    a7f0:	80 91 08 0a 	lds	r24, 0x0A08
    a7f4:	90 91 09 0a 	lds	r25, 0x0A09
    a7f8:	9e bf       	out	0x3e, r25	; 62
    a7fa:	8d bf       	out	0x3d, r24	; 61
  //  thread_yield();   
   }
    _atomic_end( _atomic );
    a7fc:	8b 81       	ldd	r24, Y+3	; 0x03
    a7fe:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    a802:	23 96       	adiw	r28, 0x03	; 3
    a804:	f8 94       	cli
    a806:	de bf       	out	0x3e, r29	; 62
    a808:	cd bf       	out	0x3d, r28	; 61
    a80a:	df 91       	pop	r29
    a80c:	cf 91       	pop	r28
    a80e:	ff 91       	pop	r31
    a810:	ef 91       	pop	r30
    a812:	bf 91       	pop	r27
    a814:	af 91       	pop	r26
    a816:	9f 91       	pop	r25
    a818:	8f 91       	pop	r24
    a81a:	7f 91       	pop	r23
    a81c:	6f 91       	pop	r22
    a81e:	5f 91       	pop	r21
    a820:	4f 91       	pop	r20
    a822:	3f 91       	pop	r19
    a824:	2f 91       	pop	r18
    a826:	0f 90       	pop	r0
    a828:	0f be       	out	0x3f, r0	; 63
    a82a:	0f 90       	pop	r0
    a82c:	1f 90       	pop	r1
    a82e:	18 95       	reti

0000a830 <eeprom_readBytes>:

#include <avr/eeprom.h> 

//-------------------------------------------------------------------------
void eeprom_readBytes( uint16_t addr, int nBytes, void *buffer ) {
    a830:	cf 93       	push	r28
    a832:	df 93       	push	r29
    a834:	cd b7       	in	r28, 0x3d	; 61
    a836:	de b7       	in	r29, 0x3e	; 62
    a838:	2e 97       	sbiw	r28, 0x0e	; 14
    a83a:	0f b6       	in	r0, 0x3f	; 63
    a83c:	f8 94       	cli
    a83e:	de bf       	out	0x3e, r29	; 62
    a840:	0f be       	out	0x3f, r0	; 63
    a842:	cd bf       	out	0x3d, r28	; 61
    a844:	9a 87       	std	Y+10, r25	; 0x0a
    a846:	89 87       	std	Y+9, r24	; 0x09
    a848:	7c 87       	std	Y+12, r23	; 0x0c
    a84a:	6b 87       	std	Y+11, r22	; 0x0b
    a84c:	5e 87       	std	Y+14, r21	; 0x0e
    a84e:	4d 87       	std	Y+13, r20	; 0x0d
   eeprom_busy_wait();
    a850:	ec e3       	ldi	r30, 0x3C	; 60
    a852:	f0 e0       	ldi	r31, 0x00	; 0
    a854:	80 81       	ld	r24, Z
    a856:	99 27       	eor	r25, r25
    a858:	82 70       	andi	r24, 0x02	; 2
    a85a:	90 70       	andi	r25, 0x00	; 0
    a85c:	00 97       	sbiw	r24, 0x00	; 0
    a85e:	c1 f7       	brne	.-16     	; 0xa850 <eeprom_readBytes+0x20>
   eeprom_read_block( buffer, ( void* )addr, nBytes );
    a860:	4b 85       	ldd	r20, Y+11	; 0x0b
    a862:	5c 85       	ldd	r21, Y+12	; 0x0c
    a864:	29 85       	ldd	r18, Y+9	; 0x09
    a866:	3a 85       	ldd	r19, Y+10	; 0x0a
    a868:	8d 85       	ldd	r24, Y+13	; 0x0d
    a86a:	9e 85       	ldd	r25, Y+14	; 0x0e
    a86c:	9a 83       	std	Y+2, r25	; 0x02
    a86e:	89 83       	std	Y+1, r24	; 0x01
    a870:	3c 83       	std	Y+4, r19	; 0x04
    a872:	2b 83       	std	Y+3, r18	; 0x03
    a874:	5e 83       	std	Y+6, r21	; 0x06
    a876:	4d 83       	std	Y+5, r20	; 0x05
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 
    a878:	8d 81       	ldd	r24, Y+5	; 0x05
    a87a:	9e 81       	ldd	r25, Y+6	; 0x06
    a87c:	98 87       	std	Y+8, r25	; 0x08
    a87e:	8f 83       	std	Y+7, r24	; 0x07

      __asm__ __volatile__ ( 
    a880:	ab 81       	ldd	r26, Y+3	; 0x03
    a882:	bc 81       	ldd	r27, Y+4	; 0x04
    a884:	e9 81       	ldd	r30, Y+1	; 0x01
    a886:	fa 81       	ldd	r31, Y+2	; 0x02
    a888:	8f 81       	ldd	r24, Y+7	; 0x07
    a88a:	98 85       	ldd	r25, Y+8	; 0x08

0000a88c <.35_start>:
    a88c:	01 97       	sbiw	r24, 0x01	; 1
    a88e:	24 f0       	brlt	.+8      	; 0xa898 <.35_finished>
    a890:	0e 94 f5 a3 	call	0x147ea	; 0x147ea <__eeprom_read_byte_1C1D1E>
    a894:	01 92       	st	Z+, r0
    a896:	fa cf       	rjmp	.-12     	; 0xa88c <.35_start>

0000a898 <.35_finished>:
    a898:	bc 83       	std	Y+4, r27	; 0x04
    a89a:	ab 83       	std	Y+3, r26	; 0x03
    a89c:	fa 83       	std	Y+2, r31	; 0x02
    a89e:	e9 83       	std	Y+1, r30	; 0x01
    a8a0:	98 87       	std	Y+8, r25	; 0x08
    a8a2:	8f 83       	std	Y+7, r24	; 0x07
    a8a4:	2e 96       	adiw	r28, 0x0e	; 14
    a8a6:	0f b6       	in	r0, 0x3f	; 63
    a8a8:	f8 94       	cli
    a8aa:	de bf       	out	0x3e, r29	; 62
    a8ac:	0f be       	out	0x3f, r0	; 63
    a8ae:	cd bf       	out	0x3d, r28	; 61
    a8b0:	df 91       	pop	r29
    a8b2:	cf 91       	pop	r28
    a8b4:	08 95       	ret

0000a8b6 <eeprom_writeBytes>:
   return ;
}

//-------------------------------------------------------------------------
void eeprom_writeBytes( uint16_t addr, int nBytes, void *buffer ) {
    a8b6:	cf 93       	push	r28
    a8b8:	df 93       	push	r29
    a8ba:	cd b7       	in	r28, 0x3d	; 61
    a8bc:	de b7       	in	r29, 0x3e	; 62
    a8be:	2e 97       	sbiw	r28, 0x0e	; 14
    a8c0:	0f b6       	in	r0, 0x3f	; 63
    a8c2:	f8 94       	cli
    a8c4:	de bf       	out	0x3e, r29	; 62
    a8c6:	0f be       	out	0x3f, r0	; 63
    a8c8:	cd bf       	out	0x3d, r28	; 61
    a8ca:	9a 87       	std	Y+10, r25	; 0x0a
    a8cc:	89 87       	std	Y+9, r24	; 0x09
    a8ce:	7c 87       	std	Y+12, r23	; 0x0c
    a8d0:	6b 87       	std	Y+11, r22	; 0x0b
    a8d2:	5e 87       	std	Y+14, r21	; 0x0e
    a8d4:	4d 87       	std	Y+13, r20	; 0x0d
   eeprom_busy_wait();
    a8d6:	ec e3       	ldi	r30, 0x3C	; 60
    a8d8:	f0 e0       	ldi	r31, 0x00	; 0
    a8da:	80 81       	ld	r24, Z
    a8dc:	99 27       	eor	r25, r25
    a8de:	82 70       	andi	r24, 0x02	; 2
    a8e0:	90 70       	andi	r25, 0x00	; 0
    a8e2:	00 97       	sbiw	r24, 0x00	; 0
    a8e4:	c1 f7       	brne	.-16     	; 0xa8d6 <eeprom_writeBytes+0x20>
   eeprom_write_block( buffer, ( void* )addr, nBytes );
    a8e6:	4b 85       	ldd	r20, Y+11	; 0x0b
    a8e8:	5c 85       	ldd	r21, Y+12	; 0x0c
    a8ea:	29 85       	ldd	r18, Y+9	; 0x09
    a8ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    a8ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    a8f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    a8f2:	9a 83       	std	Y+2, r25	; 0x02
    a8f4:	89 83       	std	Y+1, r24	; 0x01
    a8f6:	3c 83       	std	Y+4, r19	; 0x04
    a8f8:	2b 83       	std	Y+3, r18	; 0x03
    a8fa:	5e 83       	std	Y+6, r21	; 0x06
    a8fc:	4d 83       	std	Y+5, r20	; 0x05
  if (!__builtin_constant_p (n)
      || n > 256)
    {
      /* make sure size is a 16 bit variable.  */
      uint16_t size = n; 
    a8fe:	8d 81       	ldd	r24, Y+5	; 0x05
    a900:	9e 81       	ldd	r25, Y+6	; 0x06
    a902:	98 87       	std	Y+8, r25	; 0x08
    a904:	8f 83       	std	Y+7, r24	; 0x07

      __asm__ __volatile__ ( 
    a906:	ab 81       	ldd	r26, Y+3	; 0x03
    a908:	bc 81       	ldd	r27, Y+4	; 0x04
    a90a:	e9 81       	ldd	r30, Y+1	; 0x01
    a90c:	fa 81       	ldd	r31, Y+2	; 0x02
    a90e:	8f 81       	ldd	r24, Y+7	; 0x07
    a910:	98 85       	ldd	r25, Y+8	; 0x08

0000a912 <.78_start>:
    a912:	01 97       	sbiw	r24, 0x01	; 1
    a914:	24 f0       	brlt	.+8      	; 0xa91e <.78_finished>
    a916:	01 90       	ld	r0, Z+
    a918:	0e 94 02 a4 	call	0x14804	; 0x14804 <__eeprom_write_byte_1C1D1E>
    a91c:	fa cf       	rjmp	.-12     	; 0xa912 <.78_start>

0000a91e <.78_finished>:
    a91e:	bc 83       	std	Y+4, r27	; 0x04
    a920:	ab 83       	std	Y+3, r26	; 0x03
    a922:	fa 83       	std	Y+2, r31	; 0x02
    a924:	e9 83       	std	Y+1, r30	; 0x01
    a926:	98 87       	std	Y+8, r25	; 0x08
    a928:	8f 83       	std	Y+7, r24	; 0x07
    a92a:	2e 96       	adiw	r28, 0x0e	; 14
    a92c:	0f b6       	in	r0, 0x3f	; 63
    a92e:	f8 94       	cli
    a930:	de bf       	out	0x3e, r29	; 62
    a932:	0f be       	out	0x3f, r0	; 63
    a934:	cd bf       	out	0x3d, r28	; 61
    a936:	df 91       	pop	r29
    a938:	cf 91       	pop	r28
    a93a:	08 95       	ret

0000a93c <eeprom_read8uint>:
   return ;
}

//-------------------------------------------------------------------------
uint8_t eeprom_read8uint( uint16_t addr) {
    a93c:	cf 93       	push	r28
    a93e:	df 93       	push	r29
    a940:	cd b7       	in	r28, 0x3d	; 61
    a942:	de b7       	in	r29, 0x3e	; 62
    a944:	27 97       	sbiw	r28, 0x07	; 7
    a946:	0f b6       	in	r0, 0x3f	; 63
    a948:	f8 94       	cli
    a94a:	de bf       	out	0x3e, r29	; 62
    a94c:	0f be       	out	0x3f, r0	; 63
    a94e:	cd bf       	out	0x3d, r28	; 61
    a950:	9f 83       	std	Y+7, r25	; 0x07
    a952:	8e 83       	std	Y+6, r24	; 0x06
  
   uint8_t ret;
   _atomic_t _atomic = _atomic_start();
    a954:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a958:	8c 83       	std	Y+4, r24	; 0x04
   eeprom_busy_wait();
    a95a:	ec e3       	ldi	r30, 0x3C	; 60
    a95c:	f0 e0       	ldi	r31, 0x00	; 0
    a95e:	80 81       	ld	r24, Z
    a960:	99 27       	eor	r25, r25
    a962:	82 70       	andi	r24, 0x02	; 2
    a964:	90 70       	andi	r25, 0x00	; 0
    a966:	00 97       	sbiw	r24, 0x00	; 0
    a968:	c1 f7       	brne	.-16     	; 0xa95a <eeprom_read8uint+0x1e>
   ret = eeprom_read_byte(( uint8_t* )addr );
    a96a:	8e 81       	ldd	r24, Y+6	; 0x06
    a96c:	9f 81       	ldd	r25, Y+7	; 0x07
    a96e:	9a 83       	std	Y+2, r25	; 0x02
    a970:	89 83       	std	Y+1, r24	; 0x01
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    a972:	a9 81       	ldd	r26, Y+1	; 0x01
    a974:	ba 81       	ldd	r27, Y+2	; 0x02
    a976:	0e 94 f5 a3 	call	0x147ea	; 0x147ea <__eeprom_read_byte_1C1D1E>
    a97a:	80 2d       	mov	r24, r0
    a97c:	ba 83       	std	Y+2, r27	; 0x02
    a97e:	a9 83       	std	Y+1, r26	; 0x01
    a980:	8b 83       	std	Y+3, r24	; 0x03
      ( XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
        "mov %1,__tmp_reg__"
       : "+x" (addr),
         "=r" (result)
       : );
  return result;
    a982:	8b 81       	ldd	r24, Y+3	; 0x03
    a984:	99 27       	eor	r25, r25
    a986:	8d 83       	std	Y+5, r24	; 0x05
   _atomic_end( _atomic );
    a988:	8c 81       	ldd	r24, Y+4	; 0x04
    a98a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   return ret;
    a98e:	8d 81       	ldd	r24, Y+5	; 0x05
    a990:	99 27       	eor	r25, r25
    a992:	27 96       	adiw	r28, 0x07	; 7
    a994:	0f b6       	in	r0, 0x3f	; 63
    a996:	f8 94       	cli
    a998:	de bf       	out	0x3e, r29	; 62
    a99a:	0f be       	out	0x3f, r0	; 63
    a99c:	cd bf       	out	0x3d, r28	; 61
    a99e:	df 91       	pop	r29
    a9a0:	cf 91       	pop	r28
    a9a2:	08 95       	ret

0000a9a4 <eeprom_read8int>:
}

//-------------------------------------------------------------------------
int8_t eeprom_read8int( uint16_t addr ) {
    a9a4:	cf 93       	push	r28
    a9a6:	df 93       	push	r29
    a9a8:	cd b7       	in	r28, 0x3d	; 61
    a9aa:	de b7       	in	r29, 0x3e	; 62
    a9ac:	27 97       	sbiw	r28, 0x07	; 7
    a9ae:	0f b6       	in	r0, 0x3f	; 63
    a9b0:	f8 94       	cli
    a9b2:	de bf       	out	0x3e, r29	; 62
    a9b4:	0f be       	out	0x3f, r0	; 63
    a9b6:	cd bf       	out	0x3d, r28	; 61
    a9b8:	9f 83       	std	Y+7, r25	; 0x07
    a9ba:	8e 83       	std	Y+6, r24	; 0x06
   uint8_t value;
   _atomic_t _atomic = _atomic_start();
    a9bc:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    a9c0:	8c 83       	std	Y+4, r24	; 0x04
   eeprom_busy_wait();
    a9c2:	ec e3       	ldi	r30, 0x3C	; 60
    a9c4:	f0 e0       	ldi	r31, 0x00	; 0
    a9c6:	80 81       	ld	r24, Z
    a9c8:	99 27       	eor	r25, r25
    a9ca:	82 70       	andi	r24, 0x02	; 2
    a9cc:	90 70       	andi	r25, 0x00	; 0
    a9ce:	00 97       	sbiw	r24, 0x00	; 0
    a9d0:	c1 f7       	brne	.-16     	; 0xa9c2 <eeprom_read8int+0x1e>
   value = eeprom_read_byte(( uint8_t* )addr );
    a9d2:	8e 81       	ldd	r24, Y+6	; 0x06
    a9d4:	9f 81       	ldd	r25, Y+7	; 0x07
    a9d6:	9a 83       	std	Y+2, r25	; 0x02
    a9d8:	89 83       	std	Y+1, r24	; 0x01
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    a9da:	a9 81       	ldd	r26, Y+1	; 0x01
    a9dc:	ba 81       	ldd	r27, Y+2	; 0x02
    a9de:	0e 94 f5 a3 	call	0x147ea	; 0x147ea <__eeprom_read_byte_1C1D1E>
    a9e2:	80 2d       	mov	r24, r0
    a9e4:	ba 83       	std	Y+2, r27	; 0x02
    a9e6:	a9 83       	std	Y+1, r26	; 0x01
    a9e8:	8b 83       	std	Y+3, r24	; 0x03
      ( XCALL " __eeprom_read_byte_" _REG_LOCATION_SUFFIX CR_TAB
        "mov %1,__tmp_reg__"
       : "+x" (addr),
         "=r" (result)
       : );
  return result;
    a9ea:	8b 81       	ldd	r24, Y+3	; 0x03
    a9ec:	99 27       	eor	r25, r25
    a9ee:	8d 83       	std	Y+5, r24	; 0x05
   _atomic_end( _atomic );
    a9f0:	8c 81       	ldd	r24, Y+4	; 0x04
    a9f2:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   return *( int8_t* )& value;
    a9f6:	fe 01       	movw	r30, r28
    a9f8:	35 96       	adiw	r30, 0x05	; 5
    a9fa:	80 81       	ld	r24, Z
    a9fc:	99 27       	eor	r25, r25
    a9fe:	87 fd       	sbrc	r24, 7
    aa00:	90 95       	com	r25
    aa02:	27 96       	adiw	r28, 0x07	; 7
    aa04:	0f b6       	in	r0, 0x3f	; 63
    aa06:	f8 94       	cli
    aa08:	de bf       	out	0x3e, r29	; 62
    aa0a:	0f be       	out	0x3f, r0	; 63
    aa0c:	cd bf       	out	0x3d, r28	; 61
    aa0e:	df 91       	pop	r29
    aa10:	cf 91       	pop	r28
    aa12:	08 95       	ret

0000aa14 <eeprom_read16uint>:
}

//-------------------------------------------------------------------------
uint16_t eeprom_read16uint(uint16_t addr ) {
    aa14:	cf 93       	push	r28
    aa16:	df 93       	push	r29
    aa18:	cd b7       	in	r28, 0x3d	; 61
    aa1a:	de b7       	in	r29, 0x3e	; 62
    aa1c:	29 97       	sbiw	r28, 0x09	; 9
    aa1e:	0f b6       	in	r0, 0x3f	; 63
    aa20:	f8 94       	cli
    aa22:	de bf       	out	0x3e, r29	; 62
    aa24:	0f be       	out	0x3f, r0	; 63
    aa26:	cd bf       	out	0x3d, r28	; 61
    aa28:	99 87       	std	Y+9, r25	; 0x09
    aa2a:	88 87       	std	Y+8, r24	; 0x08
   uint16_t value;
   _atomic_t _atomic = _atomic_start();
    aa2c:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    aa30:	8d 83       	std	Y+5, r24	; 0x05
   eeprom_busy_wait();
    aa32:	ec e3       	ldi	r30, 0x3C	; 60
    aa34:	f0 e0       	ldi	r31, 0x00	; 0
    aa36:	80 81       	ld	r24, Z
    aa38:	99 27       	eor	r25, r25
    aa3a:	82 70       	andi	r24, 0x02	; 2
    aa3c:	90 70       	andi	r25, 0x00	; 0
    aa3e:	00 97       	sbiw	r24, 0x00	; 0
    aa40:	c1 f7       	brne	.-16     	; 0xaa32 <eeprom_read16uint+0x1e>
   value = eeprom_read_word(( uint16_t* )addr );
    aa42:	88 85       	ldd	r24, Y+8	; 0x08
    aa44:	99 85       	ldd	r25, Y+9	; 0x09
    aa46:	9a 83       	std	Y+2, r25	; 0x02
    aa48:	89 83       	std	Y+1, r24	; 0x01
eeprom_read_word (const uint16_t *addr)
{
  uint16_t result;

  __asm__ __volatile__ (
    aa4a:	a9 81       	ldd	r26, Y+1	; 0x01
    aa4c:	ba 81       	ldd	r27, Y+2	; 0x02
    aa4e:	0e 94 fd a3 	call	0x147fa	; 0x147fa <__eeprom_read_word_1C1D1E>
    aa52:	ba 83       	std	Y+2, r27	; 0x02
    aa54:	a9 83       	std	Y+1, r26	; 0x01
    aa56:	fc 83       	std	Y+4, r31	; 0x04
    aa58:	eb 83       	std	Y+3, r30	; 0x03
        XCALL " __eeprom_read_word_" _REG_LOCATION_SUFFIX CR_TAB
       : "+x" (addr),
         "=z" (result)
       : );
  return result;
    aa5a:	8b 81       	ldd	r24, Y+3	; 0x03
    aa5c:	9c 81       	ldd	r25, Y+4	; 0x04
    aa5e:	9f 83       	std	Y+7, r25	; 0x07
    aa60:	8e 83       	std	Y+6, r24	; 0x06
   _atomic_end( _atomic );
    aa62:	8d 81       	ldd	r24, Y+5	; 0x05
    aa64:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   return value;
    aa68:	8e 81       	ldd	r24, Y+6	; 0x06
    aa6a:	9f 81       	ldd	r25, Y+7	; 0x07
    aa6c:	29 96       	adiw	r28, 0x09	; 9
    aa6e:	0f b6       	in	r0, 0x3f	; 63
    aa70:	f8 94       	cli
    aa72:	de bf       	out	0x3e, r29	; 62
    aa74:	0f be       	out	0x3f, r0	; 63
    aa76:	cd bf       	out	0x3d, r28	; 61
    aa78:	df 91       	pop	r29
    aa7a:	cf 91       	pop	r28
    aa7c:	08 95       	ret

0000aa7e <eeprom_read16int>:
}

//-------------------------------------------------------------------------
int16_t eeprom_read16int( uint16_t addr) {
    aa7e:	cf 93       	push	r28
    aa80:	df 93       	push	r29
    aa82:	cd b7       	in	r28, 0x3d	; 61
    aa84:	de b7       	in	r29, 0x3e	; 62
    aa86:	29 97       	sbiw	r28, 0x09	; 9
    aa88:	0f b6       	in	r0, 0x3f	; 63
    aa8a:	f8 94       	cli
    aa8c:	de bf       	out	0x3e, r29	; 62
    aa8e:	0f be       	out	0x3f, r0	; 63
    aa90:	cd bf       	out	0x3d, r28	; 61
    aa92:	99 87       	std	Y+9, r25	; 0x09
    aa94:	88 87       	std	Y+8, r24	; 0x08

   uint16_t value;
   _atomic_t _atomic = _atomic_start();
    aa96:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    aa9a:	8d 83       	std	Y+5, r24	; 0x05
   eeprom_busy_wait();
    aa9c:	ec e3       	ldi	r30, 0x3C	; 60
    aa9e:	f0 e0       	ldi	r31, 0x00	; 0
    aaa0:	80 81       	ld	r24, Z
    aaa2:	99 27       	eor	r25, r25
    aaa4:	82 70       	andi	r24, 0x02	; 2
    aaa6:	90 70       	andi	r25, 0x00	; 0
    aaa8:	00 97       	sbiw	r24, 0x00	; 0
    aaaa:	c1 f7       	brne	.-16     	; 0xaa9c <eeprom_read16int+0x1e>
   value = eeprom_read_word(( uint16_t* )addr );
    aaac:	88 85       	ldd	r24, Y+8	; 0x08
    aaae:	99 85       	ldd	r25, Y+9	; 0x09
    aab0:	9a 83       	std	Y+2, r25	; 0x02
    aab2:	89 83       	std	Y+1, r24	; 0x01
eeprom_read_word (const uint16_t *addr)
{
  uint16_t result;

  __asm__ __volatile__ (
    aab4:	a9 81       	ldd	r26, Y+1	; 0x01
    aab6:	ba 81       	ldd	r27, Y+2	; 0x02
    aab8:	0e 94 fd a3 	call	0x147fa	; 0x147fa <__eeprom_read_word_1C1D1E>
    aabc:	ba 83       	std	Y+2, r27	; 0x02
    aabe:	a9 83       	std	Y+1, r26	; 0x01
    aac0:	fc 83       	std	Y+4, r31	; 0x04
    aac2:	eb 83       	std	Y+3, r30	; 0x03
        XCALL " __eeprom_read_word_" _REG_LOCATION_SUFFIX CR_TAB
       : "+x" (addr),
         "=z" (result)
       : );
  return result;
    aac4:	8b 81       	ldd	r24, Y+3	; 0x03
    aac6:	9c 81       	ldd	r25, Y+4	; 0x04
    aac8:	9f 83       	std	Y+7, r25	; 0x07
    aaca:	8e 83       	std	Y+6, r24	; 0x06
   _atomic_end( _atomic );
    aacc:	8d 81       	ldd	r24, Y+5	; 0x05
    aace:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   return *( int16_t* )& value;
    aad2:	fe 01       	movw	r30, r28
    aad4:	36 96       	adiw	r30, 0x06	; 6
    aad6:	80 81       	ld	r24, Z
    aad8:	91 81       	ldd	r25, Z+1	; 0x01
    aada:	29 96       	adiw	r28, 0x09	; 9
    aadc:	0f b6       	in	r0, 0x3f	; 63
    aade:	f8 94       	cli
    aae0:	de bf       	out	0x3e, r29	; 62
    aae2:	0f be       	out	0x3f, r0	; 63
    aae4:	cd bf       	out	0x3d, r28	; 61
    aae6:	df 91       	pop	r29
    aae8:	cf 91       	pop	r28
    aaea:	08 95       	ret

0000aaec <eeprom_write8uint>:
}

//-------------------------------------------------------------------------
void eeprom_write8uint(  uint16_t addr, uint8_t value ) {
    aaec:	cf 93       	push	r28
    aaee:	df 93       	push	r29
    aaf0:	cd b7       	in	r28, 0x3d	; 61
    aaf2:	de b7       	in	r29, 0x3e	; 62
    aaf4:	27 97       	sbiw	r28, 0x07	; 7
    aaf6:	0f b6       	in	r0, 0x3f	; 63
    aaf8:	f8 94       	cli
    aafa:	de bf       	out	0x3e, r29	; 62
    aafc:	0f be       	out	0x3f, r0	; 63
    aafe:	cd bf       	out	0x3d, r28	; 61
    ab00:	9e 83       	std	Y+6, r25	; 0x06
    ab02:	8d 83       	std	Y+5, r24	; 0x05
    ab04:	6f 83       	std	Y+7, r22	; 0x07
   _atomic_t _atomic = _atomic_start();
    ab06:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    ab0a:	8c 83       	std	Y+4, r24	; 0x04
   eeprom_busy_wait();
    ab0c:	ec e3       	ldi	r30, 0x3C	; 60
    ab0e:	f0 e0       	ldi	r31, 0x00	; 0
    ab10:	80 81       	ld	r24, Z
    ab12:	99 27       	eor	r25, r25
    ab14:	82 70       	andi	r24, 0x02	; 2
    ab16:	90 70       	andi	r25, 0x00	; 0
    ab18:	00 97       	sbiw	r24, 0x00	; 0
    ab1a:	c1 f7       	brne	.-16     	; 0xab0c <eeprom_write8uint+0x20>
   eeprom_write_byte(( uint8_t* )addr, value );
    ab1c:	8d 81       	ldd	r24, Y+5	; 0x05
    ab1e:	9e 81       	ldd	r25, Y+6	; 0x06
    ab20:	9a 83       	std	Y+2, r25	; 0x02
    ab22:	89 83       	std	Y+1, r24	; 0x01
    ab24:	8f 81       	ldd	r24, Y+7	; 0x07
    ab26:	8b 83       	std	Y+3, r24	; 0x03

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    ab28:	8b 81       	ldd	r24, Y+3	; 0x03
    ab2a:	a9 81       	ldd	r26, Y+1	; 0x01
    ab2c:	ba 81       	ldd	r27, Y+2	; 0x02
    ab2e:	08 2e       	mov	r0, r24
    ab30:	0e 94 02 a4 	call	0x14804	; 0x14804 <__eeprom_write_byte_1C1D1E>
    ab34:	ba 83       	std	Y+2, r27	; 0x02
    ab36:	a9 83       	std	Y+1, r26	; 0x01
   _atomic_end( _atomic );
    ab38:	8c 81       	ldd	r24, Y+4	; 0x04
    ab3a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    ab3e:	27 96       	adiw	r28, 0x07	; 7
    ab40:	0f b6       	in	r0, 0x3f	; 63
    ab42:	f8 94       	cli
    ab44:	de bf       	out	0x3e, r29	; 62
    ab46:	0f be       	out	0x3f, r0	; 63
    ab48:	cd bf       	out	0x3d, r28	; 61
    ab4a:	df 91       	pop	r29
    ab4c:	cf 91       	pop	r28
    ab4e:	08 95       	ret

0000ab50 <eeprom_write8int>:
   return ;
}

//-------------------------------------------------------------------------
void eeprom_write8int(  uint16_t addr, int8_t value ) {
    ab50:	cf 93       	push	r28
    ab52:	df 93       	push	r29
    ab54:	cd b7       	in	r28, 0x3d	; 61
    ab56:	de b7       	in	r29, 0x3e	; 62
    ab58:	28 97       	sbiw	r28, 0x08	; 8
    ab5a:	0f b6       	in	r0, 0x3f	; 63
    ab5c:	f8 94       	cli
    ab5e:	de bf       	out	0x3e, r29	; 62
    ab60:	0f be       	out	0x3f, r0	; 63
    ab62:	cd bf       	out	0x3d, r28	; 61
    ab64:	9f 83       	std	Y+7, r25	; 0x07
    ab66:	8e 83       	std	Y+6, r24	; 0x06
    ab68:	68 87       	std	Y+8, r22	; 0x08
   
   uint8_t value2;
   _atomic_t _atomic = _atomic_start();
    ab6a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    ab6e:	8c 83       	std	Y+4, r24	; 0x04
   eeprom_busy_wait();
    ab70:	ec e3       	ldi	r30, 0x3C	; 60
    ab72:	f0 e0       	ldi	r31, 0x00	; 0
    ab74:	80 81       	ld	r24, Z
    ab76:	99 27       	eor	r25, r25
    ab78:	82 70       	andi	r24, 0x02	; 2
    ab7a:	90 70       	andi	r25, 0x00	; 0
    ab7c:	00 97       	sbiw	r24, 0x00	; 0
    ab7e:	c1 f7       	brne	.-16     	; 0xab70 <eeprom_write8int+0x20>
   value2 = *( uint8_t* )& value;
    ab80:	fe 01       	movw	r30, r28
    ab82:	38 96       	adiw	r30, 0x08	; 8
    ab84:	80 81       	ld	r24, Z
    ab86:	8d 83       	std	Y+5, r24	; 0x05
   eeprom_write_byte(( uint8_t* )addr, value2 );
    ab88:	8e 81       	ldd	r24, Y+6	; 0x06
    ab8a:	9f 81       	ldd	r25, Y+7	; 0x07
    ab8c:	9a 83       	std	Y+2, r25	; 0x02
    ab8e:	89 83       	std	Y+1, r24	; 0x01
    ab90:	8d 81       	ldd	r24, Y+5	; 0x05
    ab92:	8b 83       	std	Y+3, r24	; 0x03

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    ab94:	8b 81       	ldd	r24, Y+3	; 0x03
    ab96:	a9 81       	ldd	r26, Y+1	; 0x01
    ab98:	ba 81       	ldd	r27, Y+2	; 0x02
    ab9a:	08 2e       	mov	r0, r24
    ab9c:	0e 94 02 a4 	call	0x14804	; 0x14804 <__eeprom_write_byte_1C1D1E>
    aba0:	ba 83       	std	Y+2, r27	; 0x02
    aba2:	a9 83       	std	Y+1, r26	; 0x01
   _atomic_end( _atomic );
    aba4:	8c 81       	ldd	r24, Y+4	; 0x04
    aba6:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    abaa:	28 96       	adiw	r28, 0x08	; 8
    abac:	0f b6       	in	r0, 0x3f	; 63
    abae:	f8 94       	cli
    abb0:	de bf       	out	0x3e, r29	; 62
    abb2:	0f be       	out	0x3f, r0	; 63
    abb4:	cd bf       	out	0x3d, r28	; 61
    abb6:	df 91       	pop	r29
    abb8:	cf 91       	pop	r28
    abba:	08 95       	ret

0000abbc <eeprom_write16uint>:
   return ;
}

//-------------------------------------------------------------------------
void eeprom_write16uint(  uint16_t addr, uint16_t value ) {
    abbc:	cf 93       	push	r28
    abbe:	df 93       	push	r29
    abc0:	cd b7       	in	r28, 0x3d	; 61
    abc2:	de b7       	in	r29, 0x3e	; 62
    abc4:	29 97       	sbiw	r28, 0x09	; 9
    abc6:	0f b6       	in	r0, 0x3f	; 63
    abc8:	f8 94       	cli
    abca:	de bf       	out	0x3e, r29	; 62
    abcc:	0f be       	out	0x3f, r0	; 63
    abce:	cd bf       	out	0x3d, r28	; 61
    abd0:	9f 83       	std	Y+7, r25	; 0x07
    abd2:	8e 83       	std	Y+6, r24	; 0x06
    abd4:	79 87       	std	Y+9, r23	; 0x09
    abd6:	68 87       	std	Y+8, r22	; 0x08
   _atomic_t _atomic = _atomic_start();
    abd8:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    abdc:	8d 83       	std	Y+5, r24	; 0x05
   eeprom_busy_wait();
    abde:	ec e3       	ldi	r30, 0x3C	; 60
    abe0:	f0 e0       	ldi	r31, 0x00	; 0
    abe2:	80 81       	ld	r24, Z
    abe4:	99 27       	eor	r25, r25
    abe6:	82 70       	andi	r24, 0x02	; 2
    abe8:	90 70       	andi	r25, 0x00	; 0
    abea:	00 97       	sbiw	r24, 0x00	; 0
    abec:	c1 f7       	brne	.-16     	; 0xabde <eeprom_write16uint+0x22>
   eeprom_write_word(( uint16_t* )addr, value );
    abee:	8e 81       	ldd	r24, Y+6	; 0x06
    abf0:	9f 81       	ldd	r25, Y+7	; 0x07
    abf2:	9a 83       	std	Y+2, r25	; 0x02
    abf4:	89 83       	std	Y+1, r24	; 0x01
    abf6:	88 85       	ldd	r24, Y+8	; 0x08
    abf8:	99 85       	ldd	r25, Y+9	; 0x09
    abfa:	9c 83       	std	Y+4, r25	; 0x04
    abfc:	8b 83       	std	Y+3, r24	; 0x03

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
  __asm__ __volatile__ (
    abfe:	8b 81       	ldd	r24, Y+3	; 0x03
    ac00:	9c 81       	ldd	r25, Y+4	; 0x04
    ac02:	a9 81       	ldd	r26, Y+1	; 0x01
    ac04:	ba 81       	ldd	r27, Y+2	; 0x02
    ac06:	0c 01       	movw	r0, r24
    ac08:	0e 94 0e a4 	call	0x1481c	; 0x1481c <__eeprom_write_word_1C1D1E>
    ac0c:	ba 83       	std	Y+2, r27	; 0x02
    ac0e:	a9 83       	std	Y+1, r26	; 0x01
   _atomic_end( _atomic );
    ac10:	8d 81       	ldd	r24, Y+5	; 0x05
    ac12:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    ac16:	29 96       	adiw	r28, 0x09	; 9
    ac18:	0f b6       	in	r0, 0x3f	; 63
    ac1a:	f8 94       	cli
    ac1c:	de bf       	out	0x3e, r29	; 62
    ac1e:	0f be       	out	0x3f, r0	; 63
    ac20:	cd bf       	out	0x3d, r28	; 61
    ac22:	df 91       	pop	r29
    ac24:	cf 91       	pop	r28
    ac26:	08 95       	ret

0000ac28 <eeprom_write16int>:
   return ;
}

//-------------------------------------------------------------------------
void eeprom_write16int(  uint16_t addr, int16_t value ) {
    ac28:	cf 93       	push	r28
    ac2a:	df 93       	push	r29
    ac2c:	cd b7       	in	r28, 0x3d	; 61
    ac2e:	de b7       	in	r29, 0x3e	; 62
    ac30:	2b 97       	sbiw	r28, 0x0b	; 11
    ac32:	0f b6       	in	r0, 0x3f	; 63
    ac34:	f8 94       	cli
    ac36:	de bf       	out	0x3e, r29	; 62
    ac38:	0f be       	out	0x3f, r0	; 63
    ac3a:	cd bf       	out	0x3d, r28	; 61
    ac3c:	99 87       	std	Y+9, r25	; 0x09
    ac3e:	88 87       	std	Y+8, r24	; 0x08
    ac40:	7b 87       	std	Y+11, r23	; 0x0b
    ac42:	6a 87       	std	Y+10, r22	; 0x0a
   uint16_t value2;
   _atomic_t _atomic = _atomic_start();
    ac44:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    ac48:	8d 83       	std	Y+5, r24	; 0x05
   eeprom_busy_wait();
    ac4a:	ec e3       	ldi	r30, 0x3C	; 60
    ac4c:	f0 e0       	ldi	r31, 0x00	; 0
    ac4e:	80 81       	ld	r24, Z
    ac50:	99 27       	eor	r25, r25
    ac52:	82 70       	andi	r24, 0x02	; 2
    ac54:	90 70       	andi	r25, 0x00	; 0
    ac56:	00 97       	sbiw	r24, 0x00	; 0
    ac58:	c1 f7       	brne	.-16     	; 0xac4a <eeprom_write16int+0x22>
   value2 = *( uint16_t* )& value;
    ac5a:	fe 01       	movw	r30, r28
    ac5c:	3a 96       	adiw	r30, 0x0a	; 10
    ac5e:	80 81       	ld	r24, Z
    ac60:	91 81       	ldd	r25, Z+1	; 0x01
    ac62:	9f 83       	std	Y+7, r25	; 0x07
    ac64:	8e 83       	std	Y+6, r24	; 0x06
   eeprom_write_word(( uint16_t* )addr, value2 );
    ac66:	88 85       	ldd	r24, Y+8	; 0x08
    ac68:	99 85       	ldd	r25, Y+9	; 0x09
    ac6a:	9a 83       	std	Y+2, r25	; 0x02
    ac6c:	89 83       	std	Y+1, r24	; 0x01
    ac6e:	8e 81       	ldd	r24, Y+6	; 0x06
    ac70:	9f 81       	ldd	r25, Y+7	; 0x07
    ac72:	9c 83       	std	Y+4, r25	; 0x04
    ac74:	8b 83       	std	Y+3, r24	; 0x03

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
  __asm__ __volatile__ (
    ac76:	8b 81       	ldd	r24, Y+3	; 0x03
    ac78:	9c 81       	ldd	r25, Y+4	; 0x04
    ac7a:	a9 81       	ldd	r26, Y+1	; 0x01
    ac7c:	ba 81       	ldd	r27, Y+2	; 0x02
    ac7e:	0c 01       	movw	r0, r24
    ac80:	0e 94 0e a4 	call	0x1481c	; 0x1481c <__eeprom_write_word_1C1D1E>
    ac84:	ba 83       	std	Y+2, r27	; 0x02
    ac86:	a9 83       	std	Y+1, r26	; 0x01
   _atomic_end( _atomic );
    ac88:	8d 81       	ldd	r24, Y+5	; 0x05
    ac8a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    ac8e:	2b 96       	adiw	r28, 0x0b	; 11
    ac90:	0f b6       	in	r0, 0x3f	; 63
    ac92:	f8 94       	cli
    ac94:	de bf       	out	0x3e, r29	; 62
    ac96:	0f be       	out	0x3f, r0	; 63
    ac98:	cd bf       	out	0x3d, r28	; 61
    ac9a:	df 91       	pop	r29
    ac9c:	cf 91       	pop	r28
    ac9e:	08 95       	ret

0000aca0 <eeprom_read32uint>:
   return ;
}

//-------------------------------------------------------------------------
uint32_t eeprom_read32uint(  uint16_t addr ) {
    aca0:	cf 93       	push	r28
    aca2:	df 93       	push	r29
    aca4:	cd b7       	in	r28, 0x3d	; 61
    aca6:	de b7       	in	r29, 0x3e	; 62
    aca8:	2f 97       	sbiw	r28, 0x0f	; 15
    acaa:	0f b6       	in	r0, 0x3f	; 63
    acac:	f8 94       	cli
    acae:	de bf       	out	0x3e, r29	; 62
    acb0:	0f be       	out	0x3f, r0	; 63
    acb2:	cd bf       	out	0x3d, r28	; 61
    acb4:	9f 87       	std	Y+15, r25	; 0x0f
    acb6:	8e 87       	std	Y+14, r24	; 0x0e
   uint16_t value1;
   uint16_t value2;
   _atomic_t _atomic = _atomic_start();
    acb8:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    acbc:	89 87       	std	Y+9, r24	; 0x09
   eeprom_busy_wait();
    acbe:	ec e3       	ldi	r30, 0x3C	; 60
    acc0:	f0 e0       	ldi	r31, 0x00	; 0
    acc2:	80 81       	ld	r24, Z
    acc4:	99 27       	eor	r25, r25
    acc6:	82 70       	andi	r24, 0x02	; 2
    acc8:	90 70       	andi	r25, 0x00	; 0
    acca:	00 97       	sbiw	r24, 0x00	; 0
    accc:	c1 f7       	brne	.-16     	; 0xacbe <eeprom_read32uint+0x1e>
   value1 = eeprom_read_word(( uint16_t* )addr );
    acce:	8e 85       	ldd	r24, Y+14	; 0x0e
    acd0:	9f 85       	ldd	r25, Y+15	; 0x0f
    acd2:	9e 83       	std	Y+6, r25	; 0x06
    acd4:	8d 83       	std	Y+5, r24	; 0x05
eeprom_read_word (const uint16_t *addr)
{
  uint16_t result;

  __asm__ __volatile__ (
    acd6:	ad 81       	ldd	r26, Y+5	; 0x05
    acd8:	be 81       	ldd	r27, Y+6	; 0x06
    acda:	0e 94 fd a3 	call	0x147fa	; 0x147fa <__eeprom_read_word_1C1D1E>
    acde:	be 83       	std	Y+6, r27	; 0x06
    ace0:	ad 83       	std	Y+5, r26	; 0x05
    ace2:	f8 87       	std	Y+8, r31	; 0x08
    ace4:	ef 83       	std	Y+7, r30	; 0x07
        XCALL " __eeprom_read_word_" _REG_LOCATION_SUFFIX CR_TAB
       : "+x" (addr),
         "=z" (result)
       : );
  return result;
    ace6:	8f 81       	ldd	r24, Y+7	; 0x07
    ace8:	98 85       	ldd	r25, Y+8	; 0x08
    acea:	9d 87       	std	Y+13, r25	; 0x0d
    acec:	8c 87       	std	Y+12, r24	; 0x0c
   eeprom_busy_wait();
    acee:	ec e3       	ldi	r30, 0x3C	; 60
    acf0:	f0 e0       	ldi	r31, 0x00	; 0
    acf2:	80 81       	ld	r24, Z
    acf4:	99 27       	eor	r25, r25
    acf6:	82 70       	andi	r24, 0x02	; 2
    acf8:	90 70       	andi	r25, 0x00	; 0
    acfa:	00 97       	sbiw	r24, 0x00	; 0
    acfc:	c1 f7       	brne	.-16     	; 0xacee <eeprom_read32uint+0x4e>
   value2 = eeprom_read_word(( uint16_t* )( addr + 2 ));
    acfe:	8e 85       	ldd	r24, Y+14	; 0x0e
    ad00:	9f 85       	ldd	r25, Y+15	; 0x0f
    ad02:	02 96       	adiw	r24, 0x02	; 2
    ad04:	9a 83       	std	Y+2, r25	; 0x02
    ad06:	89 83       	std	Y+1, r24	; 0x01
eeprom_read_word (const uint16_t *addr)
{
  uint16_t result;

  __asm__ __volatile__ (
    ad08:	a9 81       	ldd	r26, Y+1	; 0x01
    ad0a:	ba 81       	ldd	r27, Y+2	; 0x02
    ad0c:	0e 94 fd a3 	call	0x147fa	; 0x147fa <__eeprom_read_word_1C1D1E>
    ad10:	ba 83       	std	Y+2, r27	; 0x02
    ad12:	a9 83       	std	Y+1, r26	; 0x01
    ad14:	fc 83       	std	Y+4, r31	; 0x04
    ad16:	eb 83       	std	Y+3, r30	; 0x03
        XCALL " __eeprom_read_word_" _REG_LOCATION_SUFFIX CR_TAB
       : "+x" (addr),
         "=z" (result)
       : );
  return result;
    ad18:	8b 81       	ldd	r24, Y+3	; 0x03
    ad1a:	9c 81       	ldd	r25, Y+4	; 0x04
    ad1c:	9b 87       	std	Y+11, r25	; 0x0b
    ad1e:	8a 87       	std	Y+10, r24	; 0x0a
   _atomic_end( _atomic );
    ad20:	89 85       	ldd	r24, Y+9	; 0x09
    ad22:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   return ((( uint32_t )value2 ) << 16 ) + ( uint32_t )value1;
    ad26:	8a 85       	ldd	r24, Y+10	; 0x0a
    ad28:	9b 85       	ldd	r25, Y+11	; 0x0b
    ad2a:	aa 27       	eor	r26, r26
    ad2c:	bb 27       	eor	r27, r27
    ad2e:	ac 01       	movw	r20, r24
    ad30:	33 27       	eor	r19, r19
    ad32:	22 27       	eor	r18, r18
    ad34:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad36:	9d 85       	ldd	r25, Y+13	; 0x0d
    ad38:	aa 27       	eor	r26, r26
    ad3a:	bb 27       	eor	r27, r27
    ad3c:	82 0f       	add	r24, r18
    ad3e:	93 1f       	adc	r25, r19
    ad40:	a4 1f       	adc	r26, r20
    ad42:	b5 1f       	adc	r27, r21
}
    ad44:	bc 01       	movw	r22, r24
    ad46:	cd 01       	movw	r24, r26
    ad48:	2f 96       	adiw	r28, 0x0f	; 15
    ad4a:	0f b6       	in	r0, 0x3f	; 63
    ad4c:	f8 94       	cli
    ad4e:	de bf       	out	0x3e, r29	; 62
    ad50:	0f be       	out	0x3f, r0	; 63
    ad52:	cd bf       	out	0x3d, r28	; 61
    ad54:	df 91       	pop	r29
    ad56:	cf 91       	pop	r28
    ad58:	08 95       	ret

0000ad5a <eeprom_read32int>:

//-------------------------------------------------------------------------
int32_t eeprom_read32int(  uint16_t addr ) {
    ad5a:	cf 93       	push	r28
    ad5c:	df 93       	push	r29
    ad5e:	cd b7       	in	r28, 0x3d	; 61
    ad60:	de b7       	in	r29, 0x3e	; 62
    ad62:	63 97       	sbiw	r28, 0x13	; 19
    ad64:	0f b6       	in	r0, 0x3f	; 63
    ad66:	f8 94       	cli
    ad68:	de bf       	out	0x3e, r29	; 62
    ad6a:	0f be       	out	0x3f, r0	; 63
    ad6c:	cd bf       	out	0x3d, r28	; 61
    ad6e:	9b 8b       	std	Y+19, r25	; 0x13
    ad70:	8a 8b       	std	Y+18, r24	; 0x12
   uint16_t value1;
   uint16_t value2;
   uint32_t returnvalue;
   _atomic_t _atomic = _atomic_start();
    ad72:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    ad76:	89 87       	std	Y+9, r24	; 0x09
   eeprom_busy_wait();
    ad78:	ec e3       	ldi	r30, 0x3C	; 60
    ad7a:	f0 e0       	ldi	r31, 0x00	; 0
    ad7c:	80 81       	ld	r24, Z
    ad7e:	99 27       	eor	r25, r25
    ad80:	82 70       	andi	r24, 0x02	; 2
    ad82:	90 70       	andi	r25, 0x00	; 0
    ad84:	00 97       	sbiw	r24, 0x00	; 0
    ad86:	c1 f7       	brne	.-16     	; 0xad78 <eeprom_read32int+0x1e>
   value1 = eeprom_read_word(( uint16_t* )addr );
    ad88:	8a 89       	ldd	r24, Y+18	; 0x12
    ad8a:	9b 89       	ldd	r25, Y+19	; 0x13
    ad8c:	9e 83       	std	Y+6, r25	; 0x06
    ad8e:	8d 83       	std	Y+5, r24	; 0x05
eeprom_read_word (const uint16_t *addr)
{
  uint16_t result;

  __asm__ __volatile__ (
    ad90:	ad 81       	ldd	r26, Y+5	; 0x05
    ad92:	be 81       	ldd	r27, Y+6	; 0x06
    ad94:	0e 94 fd a3 	call	0x147fa	; 0x147fa <__eeprom_read_word_1C1D1E>
    ad98:	be 83       	std	Y+6, r27	; 0x06
    ad9a:	ad 83       	std	Y+5, r26	; 0x05
    ad9c:	f8 87       	std	Y+8, r31	; 0x08
    ad9e:	ef 83       	std	Y+7, r30	; 0x07
        XCALL " __eeprom_read_word_" _REG_LOCATION_SUFFIX CR_TAB
       : "+x" (addr),
         "=z" (result)
       : );
  return result;
    ada0:	8f 81       	ldd	r24, Y+7	; 0x07
    ada2:	98 85       	ldd	r25, Y+8	; 0x08
    ada4:	9d 87       	std	Y+13, r25	; 0x0d
    ada6:	8c 87       	std	Y+12, r24	; 0x0c
   eeprom_busy_wait();
    ada8:	ec e3       	ldi	r30, 0x3C	; 60
    adaa:	f0 e0       	ldi	r31, 0x00	; 0
    adac:	80 81       	ld	r24, Z
    adae:	99 27       	eor	r25, r25
    adb0:	82 70       	andi	r24, 0x02	; 2
    adb2:	90 70       	andi	r25, 0x00	; 0
    adb4:	00 97       	sbiw	r24, 0x00	; 0
    adb6:	c1 f7       	brne	.-16     	; 0xada8 <eeprom_read32int+0x4e>
   value2 = eeprom_read_word(( uint16_t* )( addr + 2 ));
    adb8:	8a 89       	ldd	r24, Y+18	; 0x12
    adba:	9b 89       	ldd	r25, Y+19	; 0x13
    adbc:	02 96       	adiw	r24, 0x02	; 2
    adbe:	9a 83       	std	Y+2, r25	; 0x02
    adc0:	89 83       	std	Y+1, r24	; 0x01
eeprom_read_word (const uint16_t *addr)
{
  uint16_t result;

  __asm__ __volatile__ (
    adc2:	a9 81       	ldd	r26, Y+1	; 0x01
    adc4:	ba 81       	ldd	r27, Y+2	; 0x02
    adc6:	0e 94 fd a3 	call	0x147fa	; 0x147fa <__eeprom_read_word_1C1D1E>
    adca:	ba 83       	std	Y+2, r27	; 0x02
    adcc:	a9 83       	std	Y+1, r26	; 0x01
    adce:	fc 83       	std	Y+4, r31	; 0x04
    add0:	eb 83       	std	Y+3, r30	; 0x03
        XCALL " __eeprom_read_word_" _REG_LOCATION_SUFFIX CR_TAB
       : "+x" (addr),
         "=z" (result)
       : );
  return result;
    add2:	8b 81       	ldd	r24, Y+3	; 0x03
    add4:	9c 81       	ldd	r25, Y+4	; 0x04
    add6:	9b 87       	std	Y+11, r25	; 0x0b
    add8:	8a 87       	std	Y+10, r24	; 0x0a
   returnvalue = (((( uint32_t )value2 ) << 16 ) + ( uint32_t )value1 );
    adda:	8a 85       	ldd	r24, Y+10	; 0x0a
    addc:	9b 85       	ldd	r25, Y+11	; 0x0b
    adde:	aa 27       	eor	r26, r26
    ade0:	bb 27       	eor	r27, r27
    ade2:	ac 01       	movw	r20, r24
    ade4:	33 27       	eor	r19, r19
    ade6:	22 27       	eor	r18, r18
    ade8:	8c 85       	ldd	r24, Y+12	; 0x0c
    adea:	9d 85       	ldd	r25, Y+13	; 0x0d
    adec:	aa 27       	eor	r26, r26
    adee:	bb 27       	eor	r27, r27
    adf0:	82 0f       	add	r24, r18
    adf2:	93 1f       	adc	r25, r19
    adf4:	a4 1f       	adc	r26, r20
    adf6:	b5 1f       	adc	r27, r21
    adf8:	8e 87       	std	Y+14, r24	; 0x0e
    adfa:	9f 87       	std	Y+15, r25	; 0x0f
    adfc:	a8 8b       	std	Y+16, r26	; 0x10
    adfe:	b9 8b       	std	Y+17, r27	; 0x11
   _atomic_end( _atomic );
    ae00:	89 85       	ldd	r24, Y+9	; 0x09
    ae02:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   return *( int32_t* )& returnvalue;
    ae06:	fe 01       	movw	r30, r28
    ae08:	3e 96       	adiw	r30, 0x0e	; 14
    ae0a:	80 81       	ld	r24, Z
    ae0c:	91 81       	ldd	r25, Z+1	; 0x01
    ae0e:	a2 81       	ldd	r26, Z+2	; 0x02
    ae10:	b3 81       	ldd	r27, Z+3	; 0x03
}
    ae12:	bc 01       	movw	r22, r24
    ae14:	cd 01       	movw	r24, r26
    ae16:	63 96       	adiw	r28, 0x13	; 19
    ae18:	0f b6       	in	r0, 0x3f	; 63
    ae1a:	f8 94       	cli
    ae1c:	de bf       	out	0x3e, r29	; 62
    ae1e:	0f be       	out	0x3f, r0	; 63
    ae20:	cd bf       	out	0x3d, r28	; 61
    ae22:	df 91       	pop	r29
    ae24:	cf 91       	pop	r28
    ae26:	08 95       	ret

0000ae28 <eeprom_write32uint>:

//-------------------------------------------------------------------------
void eeprom_write32uint(  uint16_t addr, uint32_t value ) {
    ae28:	cf 93       	push	r28
    ae2a:	df 93       	push	r29
    ae2c:	cd b7       	in	r28, 0x3d	; 61
    ae2e:	de b7       	in	r29, 0x3e	; 62
    ae30:	63 97       	sbiw	r28, 0x13	; 19
    ae32:	0f b6       	in	r0, 0x3f	; 63
    ae34:	f8 94       	cli
    ae36:	de bf       	out	0x3e, r29	; 62
    ae38:	0f be       	out	0x3f, r0	; 63
    ae3a:	cd bf       	out	0x3d, r28	; 61
    ae3c:	9f 87       	std	Y+15, r25	; 0x0f
    ae3e:	8e 87       	std	Y+14, r24	; 0x0e
    ae40:	48 8b       	std	Y+16, r20	; 0x10
    ae42:	59 8b       	std	Y+17, r21	; 0x11
    ae44:	6a 8b       	std	Y+18, r22	; 0x12
    ae46:	7b 8b       	std	Y+19, r23	; 0x13
   uint16_t value1;
   uint16_t value2;
   _atomic_t _atomic = _atomic_start();
    ae48:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    ae4c:	89 87       	std	Y+9, r24	; 0x09
   value1 = ( uint16_t )( value >> 16 );
    ae4e:	88 89       	ldd	r24, Y+16	; 0x10
    ae50:	99 89       	ldd	r25, Y+17	; 0x11
    ae52:	aa 89       	ldd	r26, Y+18	; 0x12
    ae54:	bb 89       	ldd	r27, Y+19	; 0x13
    ae56:	cd 01       	movw	r24, r26
    ae58:	aa 27       	eor	r26, r26
    ae5a:	bb 27       	eor	r27, r27
    ae5c:	9d 87       	std	Y+13, r25	; 0x0d
    ae5e:	8c 87       	std	Y+12, r24	; 0x0c
   value2 = ( uint16_t )( value& 0x0000ffff );
    ae60:	88 89       	ldd	r24, Y+16	; 0x10
    ae62:	99 89       	ldd	r25, Y+17	; 0x11
    ae64:	9b 87       	std	Y+11, r25	; 0x0b
    ae66:	8a 87       	std	Y+10, r24	; 0x0a
   eeprom_busy_wait();
    ae68:	ec e3       	ldi	r30, 0x3C	; 60
    ae6a:	f0 e0       	ldi	r31, 0x00	; 0
    ae6c:	80 81       	ld	r24, Z
    ae6e:	99 27       	eor	r25, r25
    ae70:	82 70       	andi	r24, 0x02	; 2
    ae72:	90 70       	andi	r25, 0x00	; 0
    ae74:	00 97       	sbiw	r24, 0x00	; 0
    ae76:	c1 f7       	brne	.-16     	; 0xae68 <eeprom_write32uint+0x40>
   //value2 = *(uint16_t *)&value;
   eeprom_write_word(( uint16_t* )addr, value2 );
    ae78:	8e 85       	ldd	r24, Y+14	; 0x0e
    ae7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    ae7c:	9e 83       	std	Y+6, r25	; 0x06
    ae7e:	8d 83       	std	Y+5, r24	; 0x05
    ae80:	8a 85       	ldd	r24, Y+10	; 0x0a
    ae82:	9b 85       	ldd	r25, Y+11	; 0x0b
    ae84:	98 87       	std	Y+8, r25	; 0x08
    ae86:	8f 83       	std	Y+7, r24	; 0x07

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
  __asm__ __volatile__ (
    ae88:	8f 81       	ldd	r24, Y+7	; 0x07
    ae8a:	98 85       	ldd	r25, Y+8	; 0x08
    ae8c:	ad 81       	ldd	r26, Y+5	; 0x05
    ae8e:	be 81       	ldd	r27, Y+6	; 0x06
    ae90:	0c 01       	movw	r0, r24
    ae92:	0e 94 0e a4 	call	0x1481c	; 0x1481c <__eeprom_write_word_1C1D1E>
    ae96:	be 83       	std	Y+6, r27	; 0x06
    ae98:	ad 83       	std	Y+5, r26	; 0x05
   addr = addr +2; 
    ae9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    ae9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    ae9e:	02 96       	adiw	r24, 0x02	; 2
    aea0:	9f 87       	std	Y+15, r25	; 0x0f
    aea2:	8e 87       	std	Y+14, r24	; 0x0e
   eeprom_busy_wait();
    aea4:	ec e3       	ldi	r30, 0x3C	; 60
    aea6:	f0 e0       	ldi	r31, 0x00	; 0
    aea8:	80 81       	ld	r24, Z
    aeaa:	99 27       	eor	r25, r25
    aeac:	82 70       	andi	r24, 0x02	; 2
    aeae:	90 70       	andi	r25, 0x00	; 0
    aeb0:	00 97       	sbiw	r24, 0x00	; 0
    aeb2:	c1 f7       	brne	.-16     	; 0xaea4 <eeprom_write32uint+0x7c>
   //value2 = *(uint16_t *)&value;
   eeprom_write_word(( uint16_t* )addr, value1 );
    aeb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    aeb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    aeb8:	9a 83       	std	Y+2, r25	; 0x02
    aeba:	89 83       	std	Y+1, r24	; 0x01
    aebc:	8c 85       	ldd	r24, Y+12	; 0x0c
    aebe:	9d 85       	ldd	r25, Y+13	; 0x0d
    aec0:	9c 83       	std	Y+4, r25	; 0x04
    aec2:	8b 83       	std	Y+3, r24	; 0x03

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
  __asm__ __volatile__ (
    aec4:	8b 81       	ldd	r24, Y+3	; 0x03
    aec6:	9c 81       	ldd	r25, Y+4	; 0x04
    aec8:	a9 81       	ldd	r26, Y+1	; 0x01
    aeca:	ba 81       	ldd	r27, Y+2	; 0x02
    aecc:	0c 01       	movw	r0, r24
    aece:	0e 94 0e a4 	call	0x1481c	; 0x1481c <__eeprom_write_word_1C1D1E>
    aed2:	ba 83       	std	Y+2, r27	; 0x02
    aed4:	a9 83       	std	Y+1, r26	; 0x01
   _atomic_end( _atomic );
    aed6:	89 85       	ldd	r24, Y+9	; 0x09
    aed8:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    aedc:	63 96       	adiw	r28, 0x13	; 19
    aede:	0f b6       	in	r0, 0x3f	; 63
    aee0:	f8 94       	cli
    aee2:	de bf       	out	0x3e, r29	; 62
    aee4:	0f be       	out	0x3f, r0	; 63
    aee6:	cd bf       	out	0x3d, r28	; 61
    aee8:	df 91       	pop	r29
    aeea:	cf 91       	pop	r28
    aeec:	08 95       	ret

0000aeee <eeprom_write32int>:
   return ;
}

//-------------------------------------------------------------------------
void eeprom_write32int(  uint16_t addr, int32_t value ) {
    aeee:	cf 93       	push	r28
    aef0:	df 93       	push	r29
    aef2:	cd b7       	in	r28, 0x3d	; 61
    aef4:	de b7       	in	r29, 0x3e	; 62
    aef6:	65 97       	sbiw	r28, 0x15	; 21
    aef8:	0f b6       	in	r0, 0x3f	; 63
    aefa:	f8 94       	cli
    aefc:	de bf       	out	0x3e, r29	; 62
    aefe:	0f be       	out	0x3f, r0	; 63
    af00:	cd bf       	out	0x3d, r28	; 61
    af02:	99 8b       	std	Y+17, r25	; 0x11
    af04:	88 8b       	std	Y+16, r24	; 0x10
    af06:	4a 8b       	std	Y+18, r20	; 0x12
    af08:	5b 8b       	std	Y+19, r21	; 0x13
    af0a:	6c 8b       	std	Y+20, r22	; 0x14
    af0c:	7d 8b       	std	Y+21, r23	; 0x15
   uint16_t value1;
   uint32_t value2;
   _atomic_t _atomic = _atomic_start();
    af0e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    af12:	89 87       	std	Y+9, r24	; 0x09
   value1 = ( uint16_t )(( *( uint32_t* )& value ) >> 16 );
    af14:	fe 01       	movw	r30, r28
    af16:	72 96       	adiw	r30, 0x12	; 18
    af18:	80 81       	ld	r24, Z
    af1a:	91 81       	ldd	r25, Z+1	; 0x01
    af1c:	a2 81       	ldd	r26, Z+2	; 0x02
    af1e:	b3 81       	ldd	r27, Z+3	; 0x03
    af20:	cd 01       	movw	r24, r26
    af22:	aa 27       	eor	r26, r26
    af24:	bb 27       	eor	r27, r27
    af26:	9f 87       	std	Y+15, r25	; 0x0f
    af28:	8e 87       	std	Y+14, r24	; 0x0e
   value2 = ( uint16_t )(( *( uint32_t* )& value )& 0x0000ffff );
    af2a:	fe 01       	movw	r30, r28
    af2c:	72 96       	adiw	r30, 0x12	; 18
    af2e:	80 81       	ld	r24, Z
    af30:	91 81       	ldd	r25, Z+1	; 0x01
    af32:	a2 81       	ldd	r26, Z+2	; 0x02
    af34:	b3 81       	ldd	r27, Z+3	; 0x03
    af36:	aa 27       	eor	r26, r26
    af38:	bb 27       	eor	r27, r27
    af3a:	8a 87       	std	Y+10, r24	; 0x0a
    af3c:	9b 87       	std	Y+11, r25	; 0x0b
    af3e:	ac 87       	std	Y+12, r26	; 0x0c
    af40:	bd 87       	std	Y+13, r27	; 0x0d
   eeprom_busy_wait();
    af42:	ec e3       	ldi	r30, 0x3C	; 60
    af44:	f0 e0       	ldi	r31, 0x00	; 0
    af46:	80 81       	ld	r24, Z
    af48:	99 27       	eor	r25, r25
    af4a:	82 70       	andi	r24, 0x02	; 2
    af4c:	90 70       	andi	r25, 0x00	; 0
    af4e:	00 97       	sbiw	r24, 0x00	; 0
    af50:	c1 f7       	brne	.-16     	; 0xaf42 <eeprom_write32int+0x54>
   //value2 = *(uint16_t *)&value;
   eeprom_write_word(( uint16_t* )addr, value2 );
    af52:	2a 85       	ldd	r18, Y+10	; 0x0a
    af54:	3b 85       	ldd	r19, Y+11	; 0x0b
    af56:	88 89       	ldd	r24, Y+16	; 0x10
    af58:	99 89       	ldd	r25, Y+17	; 0x11
    af5a:	9e 83       	std	Y+6, r25	; 0x06
    af5c:	8d 83       	std	Y+5, r24	; 0x05
    af5e:	38 87       	std	Y+8, r19	; 0x08
    af60:	2f 83       	std	Y+7, r18	; 0x07

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
  __asm__ __volatile__ (
    af62:	8f 81       	ldd	r24, Y+7	; 0x07
    af64:	98 85       	ldd	r25, Y+8	; 0x08
    af66:	ad 81       	ldd	r26, Y+5	; 0x05
    af68:	be 81       	ldd	r27, Y+6	; 0x06
    af6a:	0c 01       	movw	r0, r24
    af6c:	0e 94 0e a4 	call	0x1481c	; 0x1481c <__eeprom_write_word_1C1D1E>
    af70:	be 83       	std	Y+6, r27	; 0x06
    af72:	ad 83       	std	Y+5, r26	; 0x05
   addr = addr + 2;
    af74:	88 89       	ldd	r24, Y+16	; 0x10
    af76:	99 89       	ldd	r25, Y+17	; 0x11
    af78:	02 96       	adiw	r24, 0x02	; 2
    af7a:	99 8b       	std	Y+17, r25	; 0x11
    af7c:	88 8b       	std	Y+16, r24	; 0x10
   eeprom_busy_wait();
    af7e:	ec e3       	ldi	r30, 0x3C	; 60
    af80:	f0 e0       	ldi	r31, 0x00	; 0
    af82:	80 81       	ld	r24, Z
    af84:	99 27       	eor	r25, r25
    af86:	82 70       	andi	r24, 0x02	; 2
    af88:	90 70       	andi	r25, 0x00	; 0
    af8a:	00 97       	sbiw	r24, 0x00	; 0
    af8c:	c1 f7       	brne	.-16     	; 0xaf7e <eeprom_write32int+0x90>
   //value2 = *(uint16_t *)&value;
   eeprom_write_word(( uint16_t* )addr, value1 );
    af8e:	88 89       	ldd	r24, Y+16	; 0x10
    af90:	99 89       	ldd	r25, Y+17	; 0x11
    af92:	9a 83       	std	Y+2, r25	; 0x02
    af94:	89 83       	std	Y+1, r24	; 0x01
    af96:	8e 85       	ldd	r24, Y+14	; 0x0e
    af98:	9f 85       	ldd	r25, Y+15	; 0x0f
    af9a:	9c 83       	std	Y+4, r25	; 0x04
    af9c:	8b 83       	std	Y+3, r24	; 0x03

void 
eeprom_write_word (uint16_t *addr,uint16_t value)
{
  __asm__ __volatile__ (
    af9e:	8b 81       	ldd	r24, Y+3	; 0x03
    afa0:	9c 81       	ldd	r25, Y+4	; 0x04
    afa2:	a9 81       	ldd	r26, Y+1	; 0x01
    afa4:	ba 81       	ldd	r27, Y+2	; 0x02
    afa6:	0c 01       	movw	r0, r24
    afa8:	0e 94 0e a4 	call	0x1481c	; 0x1481c <__eeprom_write_word_1C1D1E>
    afac:	ba 83       	std	Y+2, r27	; 0x02
    afae:	a9 83       	std	Y+1, r26	; 0x01
   _atomic_end( _atomic );
    afb0:	89 85       	ldd	r24, Y+9	; 0x09
    afb2:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    afb6:	65 96       	adiw	r28, 0x15	; 21
    afb8:	0f b6       	in	r0, 0x3f	; 63
    afba:	f8 94       	cli
    afbc:	de bf       	out	0x3e, r29	; 62
    afbe:	0f be       	out	0x3f, r0	; 63
    afc0:	cd bf       	out	0x3d, r28	; 61
    afc2:	df 91       	pop	r29
    afc4:	cf 91       	pop	r28
    afc6:	08 95       	ret

0000afc8 <eeprom_initBytes>:
   return ;
}


void eeprom_initBytes(uint16_t addr, int nBytes,  uint8_t value)
{
    afc8:	cf 93       	push	r28
    afca:	df 93       	push	r29
    afcc:	cd b7       	in	r28, 0x3d	; 61
    afce:	de b7       	in	r29, 0x3e	; 62
    afd0:	28 97       	sbiw	r28, 0x08	; 8
    afd2:	0f b6       	in	r0, 0x3f	; 63
    afd4:	f8 94       	cli
    afd6:	de bf       	out	0x3e, r29	; 62
    afd8:	0f be       	out	0x3f, r0	; 63
    afda:	cd bf       	out	0x3d, r28	; 61
    afdc:	9d 83       	std	Y+5, r25	; 0x05
    afde:	8c 83       	std	Y+4, r24	; 0x04
    afe0:	7f 83       	std	Y+7, r23	; 0x07
    afe2:	6e 83       	std	Y+6, r22	; 0x06
    afe4:	48 87       	std	Y+8, r20	; 0x08
   int i;
   _atomic_t _atomic = _atomic_start();
    afe6:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    afea:	89 83       	std	Y+1, r24	; 0x01
   for ( i = 0; i < nBytes; i ++ ) {
    afec:	1b 82       	std	Y+3, r1	; 0x03
    afee:	1a 82       	std	Y+2, r1	; 0x02
    aff0:	0e c0       	rjmp	.+28     	; 0xb00e <eeprom_initBytes+0x46>
      eeprom_write8uint( addr + i, value );
    aff2:	2a 81       	ldd	r18, Y+2	; 0x02
    aff4:	3b 81       	ldd	r19, Y+3	; 0x03
    aff6:	8c 81       	ldd	r24, Y+4	; 0x04
    aff8:	9d 81       	ldd	r25, Y+5	; 0x05
    affa:	82 0f       	add	r24, r18
    affc:	93 1f       	adc	r25, r19
    affe:	68 85       	ldd	r22, Y+8	; 0x08
    b000:	0e 94 76 55 	call	0xaaec	; 0xaaec <eeprom_write8uint>
    b004:	8a 81       	ldd	r24, Y+2	; 0x02
    b006:	9b 81       	ldd	r25, Y+3	; 0x03
    b008:	01 96       	adiw	r24, 0x01	; 1
    b00a:	9b 83       	std	Y+3, r25	; 0x03
    b00c:	8a 83       	std	Y+2, r24	; 0x02
    b00e:	2a 81       	ldd	r18, Y+2	; 0x02
    b010:	3b 81       	ldd	r19, Y+3	; 0x03
    b012:	8e 81       	ldd	r24, Y+6	; 0x06
    b014:	9f 81       	ldd	r25, Y+7	; 0x07
    b016:	28 17       	cp	r18, r24
    b018:	39 07       	cpc	r19, r25
    b01a:	5c f3       	brlt	.-42     	; 0xaff2 <eeprom_initBytes+0x2a>
   } 
  _atomic_end( _atomic );	
    b01c:	89 81       	ldd	r24, Y+1	; 0x01
    b01e:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    b022:	28 96       	adiw	r28, 0x08	; 8
    b024:	0f b6       	in	r0, 0x3f	; 63
    b026:	f8 94       	cli
    b028:	de bf       	out	0x3e, r29	; 62
    b02a:	0f be       	out	0x3f, r0	; 63
    b02c:	cd bf       	out	0x3d, r28	; 61
    b02e:	df 91       	pop	r29
    b030:	cf 91       	pop	r28
    b032:	08 95       	ret

0000b034 <Leds_Leds>:
uint8_t Leds_ledsOn;
enum {
   Leds_RED_BIT = 1, Leds_GREEN_BIT = 2, Leds_YELLOW_BIT = 4
};
void Leds_Leds() {
    b034:	cf 93       	push	r28
    b036:	df 93       	push	r29
    b038:	cd b7       	in	r28, 0x3d	; 61
    b03a:	de b7       	in	r29, 0x3e	; 62
    b03c:	21 97       	sbiw	r28, 0x01	; 1
    b03e:	0f b6       	in	r0, 0x3f	; 63
    b040:	f8 94       	cli
    b042:	de bf       	out	0x3e, r29	; 62
    b044:	0f be       	out	0x3f, r0	; 63
    b046:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    b048:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    b04c:	89 83       	std	Y+1, r24	; 0x01
      Leds_ledsOn = 0;
    b04e:	10 92 be 05 	sts	0x05BE, r1
      LITE_MAKE_RED_LED_OUTPUT();
    b052:	0e 94 4c 5a 	call	0xb498	; 0xb498 <LITE_MAKE_RED_LED_OUTPUT>
      LITE_MAKE_YELLOW_LED_OUTPUT();
    b056:	0e 94 ee 5a 	call	0xb5dc	; 0xb5dc <LITE_MAKE_YELLOW_LED_OUTPUT>
      LITE_MAKE_GREEN_LED_OUTPUT();
    b05a:	0e 94 a9 5a 	call	0xb552	; 0xb552 <LITE_MAKE_GREEN_LED_OUTPUT>
      LITE_SET_RED_LED_PIN();
    b05e:	0e 94 0b 5a 	call	0xb416	; 0xb416 <LITE_SET_RED_LED_PIN>
      LITE_SET_YELLOW_LED_PIN();
    b062:	0e 94 c5 5a 	call	0xb58a	; 0xb58a <LITE_SET_YELLOW_LED_PIN>
      LITE_SET_GREEN_LED_PIN();
    b066:	0e 94 68 5a 	call	0xb4d0	; 0xb4d0 <LITE_SET_GREEN_LED_PIN>
      _atomic_end( _atomic );
    b06a:	89 81       	ldd	r24, Y+1	; 0x01
    b06c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    b070:	21 96       	adiw	r28, 0x01	; 1
    b072:	0f b6       	in	r0, 0x3f	; 63
    b074:	f8 94       	cli
    b076:	de bf       	out	0x3e, r29	; 62
    b078:	0f be       	out	0x3f, r0	; 63
    b07a:	cd bf       	out	0x3d, r28	; 61
    b07c:	df 91       	pop	r29
    b07e:	cf 91       	pop	r28
    b080:	08 95       	ret

0000b082 <Leds_redOn>:
   }
}

//-------------------------------------------------------------------------
void Leds_redOn() {
    b082:	cf 93       	push	r28
    b084:	df 93       	push	r29
    b086:	cd b7       	in	r28, 0x3d	; 61
    b088:	de b7       	in	r29, 0x3e	; 62
    b08a:	21 97       	sbiw	r28, 0x01	; 1
    b08c:	0f b6       	in	r0, 0x3f	; 63
    b08e:	f8 94       	cli
    b090:	de bf       	out	0x3e, r29	; 62
    b092:	0f be       	out	0x3f, r0	; 63
    b094:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    b096:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    b09a:	89 83       	std	Y+1, r24	; 0x01
      LITE_CLR_RED_LED_PIN();
    b09c:	0e 94 19 5a 	call	0xb432	; 0xb432 <LITE_CLR_RED_LED_PIN>
      Leds_ledsOn |= Leds_RED_BIT;
    b0a0:	80 91 be 05 	lds	r24, 0x05BE
    b0a4:	81 60       	ori	r24, 0x01	; 1
    b0a6:	80 93 be 05 	sts	0x05BE, r24
      _atomic_end( _atomic );
    b0aa:	89 81       	ldd	r24, Y+1	; 0x01
    b0ac:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    b0b0:	21 96       	adiw	r28, 0x01	; 1
    b0b2:	0f b6       	in	r0, 0x3f	; 63
    b0b4:	f8 94       	cli
    b0b6:	de bf       	out	0x3e, r29	; 62
    b0b8:	0f be       	out	0x3f, r0	; 63
    b0ba:	cd bf       	out	0x3d, r28	; 61
    b0bc:	df 91       	pop	r29
    b0be:	cf 91       	pop	r28
    b0c0:	08 95       	ret

0000b0c2 <Leds_redOff>:
   }
   return ;
}

//-------------------------------------------------------------------------
void Leds_redOff() {
    b0c2:	cf 93       	push	r28
    b0c4:	df 93       	push	r29
    b0c6:	cd b7       	in	r28, 0x3d	; 61
    b0c8:	de b7       	in	r29, 0x3e	; 62
    b0ca:	21 97       	sbiw	r28, 0x01	; 1
    b0cc:	0f b6       	in	r0, 0x3f	; 63
    b0ce:	f8 94       	cli
    b0d0:	de bf       	out	0x3e, r29	; 62
    b0d2:	0f be       	out	0x3f, r0	; 63
    b0d4:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    b0d6:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    b0da:	89 83       	std	Y+1, r24	; 0x01
      LITE_SET_RED_LED_PIN();
    b0dc:	0e 94 0b 5a 	call	0xb416	; 0xb416 <LITE_SET_RED_LED_PIN>
      Leds_ledsOn &=  ~ Leds_RED_BIT;
    b0e0:	80 91 be 05 	lds	r24, 0x05BE
    b0e4:	8e 7f       	andi	r24, 0xFE	; 254
    b0e6:	80 93 be 05 	sts	0x05BE, r24
      _atomic_end( _atomic );
    b0ea:	89 81       	ldd	r24, Y+1	; 0x01
    b0ec:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    b0f0:	21 96       	adiw	r28, 0x01	; 1
    b0f2:	0f b6       	in	r0, 0x3f	; 63
    b0f4:	f8 94       	cli
    b0f6:	de bf       	out	0x3e, r29	; 62
    b0f8:	0f be       	out	0x3f, r0	; 63
    b0fa:	cd bf       	out	0x3d, r28	; 61
    b0fc:	df 91       	pop	r29
    b0fe:	cf 91       	pop	r28
    b100:	08 95       	ret

0000b102 <Leds_redToggle>:
   }
   return ;
}

//-------------------------------------------------------------------------
void Leds_redToggle() {
    b102:	cf 93       	push	r28
    b104:	df 93       	push	r29
    b106:	cd b7       	in	r28, 0x3d	; 61
    b108:	de b7       	in	r29, 0x3e	; 62
    b10a:	21 97       	sbiw	r28, 0x01	; 1
    b10c:	0f b6       	in	r0, 0x3f	; 63
    b10e:	f8 94       	cli
    b110:	de bf       	out	0x3e, r29	; 62
    b112:	0f be       	out	0x3f, r0	; 63
    b114:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    b116:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    b11a:	89 83       	std	Y+1, r24	; 0x01
      if ( Leds_ledsOn& Leds_RED_BIT ) {
    b11c:	80 91 be 05 	lds	r24, 0x05BE
    b120:	99 27       	eor	r25, r25
    b122:	81 70       	andi	r24, 0x01	; 1
    b124:	90 70       	andi	r25, 0x00	; 0
    b126:	88 23       	and	r24, r24
    b128:	19 f0       	breq	.+6      	; 0xb130 <Leds_redToggle+0x2e>
         Leds_redOff();
    b12a:	0e 94 61 58 	call	0xb0c2	; 0xb0c2 <Leds_redOff>
    b12e:	02 c0       	rjmp	.+4      	; 0xb134 <Leds_redToggle+0x32>
      } else {
         Leds_redOn();
    b130:	0e 94 41 58 	call	0xb082	; 0xb082 <Leds_redOn>
      } 
      _atomic_end( _atomic );
    b134:	89 81       	ldd	r24, Y+1	; 0x01
    b136:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    b13a:	21 96       	adiw	r28, 0x01	; 1
    b13c:	0f b6       	in	r0, 0x3f	; 63
    b13e:	f8 94       	cli
    b140:	de bf       	out	0x3e, r29	; 62
    b142:	0f be       	out	0x3f, r0	; 63
    b144:	cd bf       	out	0x3d, r28	; 61
    b146:	df 91       	pop	r29
    b148:	cf 91       	pop	r28
    b14a:	08 95       	ret

0000b14c <Leds_greenOn>:
   }

   #ifdef TRACE_ENABLE
    #ifdef TRACE_ENABLE_LEDEVENT
     addTrace(TRACE_LEDEVENT_REDTOGGLE);
	#endif
   #endif
   
   return ;
}

//-------------------------------------------------------------------------
void Leds_greenOn() {
    b14c:	cf 93       	push	r28
    b14e:	df 93       	push	r29
    b150:	cd b7       	in	r28, 0x3d	; 61
    b152:	de b7       	in	r29, 0x3e	; 62
    b154:	21 97       	sbiw	r28, 0x01	; 1
    b156:	0f b6       	in	r0, 0x3f	; 63
    b158:	f8 94       	cli
    b15a:	de bf       	out	0x3e, r29	; 62
    b15c:	0f be       	out	0x3f, r0	; 63
    b15e:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    b160:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    b164:	89 83       	std	Y+1, r24	; 0x01
      LITE_CLR_GREEN_LED_PIN();
    b166:	0e 94 76 5a 	call	0xb4ec	; 0xb4ec <LITE_CLR_GREEN_LED_PIN>
      Leds_ledsOn |= Leds_GREEN_BIT;
    b16a:	80 91 be 05 	lds	r24, 0x05BE
    b16e:	82 60       	ori	r24, 0x02	; 2
    b170:	80 93 be 05 	sts	0x05BE, r24
      _atomic_end( _atomic );
    b174:	89 81       	ldd	r24, Y+1	; 0x01
    b176:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    b17a:	21 96       	adiw	r28, 0x01	; 1
    b17c:	0f b6       	in	r0, 0x3f	; 63
    b17e:	f8 94       	cli
    b180:	de bf       	out	0x3e, r29	; 62
    b182:	0f be       	out	0x3f, r0	; 63
    b184:	cd bf       	out	0x3d, r28	; 61
    b186:	df 91       	pop	r29
    b188:	cf 91       	pop	r28
    b18a:	08 95       	ret

0000b18c <Leds_greenOff>:
   }
   return ;
}

//-------------------------------------------------------------------------
void Leds_greenOff() {
    b18c:	cf 93       	push	r28
    b18e:	df 93       	push	r29
    b190:	cd b7       	in	r28, 0x3d	; 61
    b192:	de b7       	in	r29, 0x3e	; 62
    b194:	21 97       	sbiw	r28, 0x01	; 1
    b196:	0f b6       	in	r0, 0x3f	; 63
    b198:	f8 94       	cli
    b19a:	de bf       	out	0x3e, r29	; 62
    b19c:	0f be       	out	0x3f, r0	; 63
    b19e:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    b1a0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    b1a4:	89 83       	std	Y+1, r24	; 0x01
      LITE_SET_GREEN_LED_PIN();
    b1a6:	0e 94 68 5a 	call	0xb4d0	; 0xb4d0 <LITE_SET_GREEN_LED_PIN>
      Leds_ledsOn &=  ~ Leds_GREEN_BIT;
    b1aa:	80 91 be 05 	lds	r24, 0x05BE
    b1ae:	8d 7f       	andi	r24, 0xFD	; 253
    b1b0:	80 93 be 05 	sts	0x05BE, r24
      _atomic_end( _atomic );
    b1b4:	89 81       	ldd	r24, Y+1	; 0x01
    b1b6:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    b1ba:	21 96       	adiw	r28, 0x01	; 1
    b1bc:	0f b6       	in	r0, 0x3f	; 63
    b1be:	f8 94       	cli
    b1c0:	de bf       	out	0x3e, r29	; 62
    b1c2:	0f be       	out	0x3f, r0	; 63
    b1c4:	cd bf       	out	0x3d, r28	; 61
    b1c6:	df 91       	pop	r29
    b1c8:	cf 91       	pop	r28
    b1ca:	08 95       	ret

0000b1cc <Leds_greenToggle>:
   }
   return ;
}

//-------------------------------------------------------------------------
void Leds_greenToggle() {
    b1cc:	cf 93       	push	r28
    b1ce:	df 93       	push	r29
    b1d0:	cd b7       	in	r28, 0x3d	; 61
    b1d2:	de b7       	in	r29, 0x3e	; 62
    b1d4:	21 97       	sbiw	r28, 0x01	; 1
    b1d6:	0f b6       	in	r0, 0x3f	; 63
    b1d8:	f8 94       	cli
    b1da:	de bf       	out	0x3e, r29	; 62
    b1dc:	0f be       	out	0x3f, r0	; 63
    b1de:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    b1e0:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    b1e4:	89 83       	std	Y+1, r24	; 0x01
      if ( Leds_ledsOn& Leds_GREEN_BIT ) {
    b1e6:	80 91 be 05 	lds	r24, 0x05BE
    b1ea:	99 27       	eor	r25, r25
    b1ec:	82 70       	andi	r24, 0x02	; 2
    b1ee:	90 70       	andi	r25, 0x00	; 0
    b1f0:	00 97       	sbiw	r24, 0x00	; 0
    b1f2:	19 f0       	breq	.+6      	; 0xb1fa <Leds_greenToggle+0x2e>
         Leds_greenOff();
    b1f4:	0e 94 c6 58 	call	0xb18c	; 0xb18c <Leds_greenOff>
    b1f8:	02 c0       	rjmp	.+4      	; 0xb1fe <Leds_greenToggle+0x32>
      } else {
         Leds_greenOn();
    b1fa:	0e 94 a6 58 	call	0xb14c	; 0xb14c <Leds_greenOn>
      } 
      _atomic_end( _atomic );
    b1fe:	89 81       	ldd	r24, Y+1	; 0x01
    b200:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    b204:	21 96       	adiw	r28, 0x01	; 1
    b206:	0f b6       	in	r0, 0x3f	; 63
    b208:	f8 94       	cli
    b20a:	de bf       	out	0x3e, r29	; 62
    b20c:	0f be       	out	0x3f, r0	; 63
    b20e:	cd bf       	out	0x3d, r28	; 61
    b210:	df 91       	pop	r29
    b212:	cf 91       	pop	r28
    b214:	08 95       	ret

0000b216 <Leds_yellowOn>:
   }
   return ;
}

//-------------------------------------------------------------------------
void Leds_yellowOn() {
    b216:	cf 93       	push	r28
    b218:	df 93       	push	r29
    b21a:	cd b7       	in	r28, 0x3d	; 61
    b21c:	de b7       	in	r29, 0x3e	; 62
    b21e:	21 97       	sbiw	r28, 0x01	; 1
    b220:	0f b6       	in	r0, 0x3f	; 63
    b222:	f8 94       	cli
    b224:	de bf       	out	0x3e, r29	; 62
    b226:	0f be       	out	0x3f, r0	; 63
    b228:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    b22a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    b22e:	89 83       	std	Y+1, r24	; 0x01
      LITE_CLR_YELLOW_LED_PIN();
    b230:	0e 94 d3 5a 	call	0xb5a6	; 0xb5a6 <LITE_CLR_YELLOW_LED_PIN>
      Leds_ledsOn |= Leds_YELLOW_BIT;
    b234:	80 91 be 05 	lds	r24, 0x05BE
    b238:	84 60       	ori	r24, 0x04	; 4
    b23a:	80 93 be 05 	sts	0x05BE, r24
      _atomic_end( _atomic );
    b23e:	89 81       	ldd	r24, Y+1	; 0x01
    b240:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    b244:	21 96       	adiw	r28, 0x01	; 1
    b246:	0f b6       	in	r0, 0x3f	; 63
    b248:	f8 94       	cli
    b24a:	de bf       	out	0x3e, r29	; 62
    b24c:	0f be       	out	0x3f, r0	; 63
    b24e:	cd bf       	out	0x3d, r28	; 61
    b250:	df 91       	pop	r29
    b252:	cf 91       	pop	r28
    b254:	08 95       	ret

0000b256 <Leds_yellowOff>:
   }
   return ;
}

//-------------------------------------------------------------------------
void Leds_yellowOff() {
    b256:	cf 93       	push	r28
    b258:	df 93       	push	r29
    b25a:	cd b7       	in	r28, 0x3d	; 61
    b25c:	de b7       	in	r29, 0x3e	; 62
    b25e:	21 97       	sbiw	r28, 0x01	; 1
    b260:	0f b6       	in	r0, 0x3f	; 63
    b262:	f8 94       	cli
    b264:	de bf       	out	0x3e, r29	; 62
    b266:	0f be       	out	0x3f, r0	; 63
    b268:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    b26a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    b26e:	89 83       	std	Y+1, r24	; 0x01
      LITE_SET_YELLOW_LED_PIN();
    b270:	0e 94 c5 5a 	call	0xb58a	; 0xb58a <LITE_SET_YELLOW_LED_PIN>
      Leds_ledsOn &=  ~ Leds_YELLOW_BIT;
    b274:	80 91 be 05 	lds	r24, 0x05BE
    b278:	8b 7f       	andi	r24, 0xFB	; 251
    b27a:	80 93 be 05 	sts	0x05BE, r24
      _atomic_end( _atomic );
    b27e:	89 81       	ldd	r24, Y+1	; 0x01
    b280:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    b284:	21 96       	adiw	r28, 0x01	; 1
    b286:	0f b6       	in	r0, 0x3f	; 63
    b288:	f8 94       	cli
    b28a:	de bf       	out	0x3e, r29	; 62
    b28c:	0f be       	out	0x3f, r0	; 63
    b28e:	cd bf       	out	0x3d, r28	; 61
    b290:	df 91       	pop	r29
    b292:	cf 91       	pop	r28
    b294:	08 95       	ret

0000b296 <Leds_yellowToggle>:
   }
   return ;
}

//-------------------------------------------------------------------------
void Leds_yellowToggle() {
    b296:	cf 93       	push	r28
    b298:	df 93       	push	r29
    b29a:	cd b7       	in	r28, 0x3d	; 61
    b29c:	de b7       	in	r29, 0x3e	; 62
    b29e:	21 97       	sbiw	r28, 0x01	; 1
    b2a0:	0f b6       	in	r0, 0x3f	; 63
    b2a2:	f8 94       	cli
    b2a4:	de bf       	out	0x3e, r29	; 62
    b2a6:	0f be       	out	0x3f, r0	; 63
    b2a8:	cd bf       	out	0x3d, r28	; 61
    {
      _atomic_t _atomic = _atomic_start();
    b2aa:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
    b2ae:	89 83       	std	Y+1, r24	; 0x01
      if ( Leds_ledsOn& Leds_YELLOW_BIT ) {
    b2b0:	80 91 be 05 	lds	r24, 0x05BE
    b2b4:	99 27       	eor	r25, r25
    b2b6:	84 70       	andi	r24, 0x04	; 4
    b2b8:	90 70       	andi	r25, 0x00	; 0
    b2ba:	00 97       	sbiw	r24, 0x00	; 0
    b2bc:	19 f0       	breq	.+6      	; 0xb2c4 <Leds_yellowToggle+0x2e>
         Leds_yellowOff();
    b2be:	0e 94 2b 59 	call	0xb256	; 0xb256 <Leds_yellowOff>
    b2c2:	02 c0       	rjmp	.+4      	; 0xb2c8 <Leds_yellowToggle+0x32>
      } else {
         Leds_yellowOn();
    b2c4:	0e 94 0b 59 	call	0xb216	; 0xb216 <Leds_yellowOn>
      } 
      _atomic_end( _atomic );
    b2c8:	89 81       	ldd	r24, Y+1	; 0x01
    b2ca:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
    b2ce:	21 96       	adiw	r28, 0x01	; 1
    b2d0:	0f b6       	in	r0, 0x3f	; 63
    b2d2:	f8 94       	cli
    b2d4:	de bf       	out	0x3e, r29	; 62
    b2d6:	0f be       	out	0x3f, r0	; 63
    b2d8:	cd bf       	out	0x3d, r28	; 61
    b2da:	df 91       	pop	r29
    b2dc:	cf 91       	pop	r28
    b2de:	08 95       	ret

0000b2e0 <set_led_task>:
   }
   return ;
}

//-------------------------------------------------------------------------
void set_led_task() {
    b2e0:	cf 93       	push	r28
    b2e2:	df 93       	push	r29
    b2e4:	cd b7       	in	r28, 0x3d	; 61
    b2e6:	de b7       	in	r29, 0x3e	; 62
	 adc_parameter = getAdcParameterAddr();
    b2e8:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <getAdcParameterAddr>
    b2ec:	90 93 c0 05 	sts	0x05C0, r25
    b2f0:	80 93 bf 05 	sts	0x05BF, r24
   if ( adc_parameter[ 0 ] == 1 ) {
    b2f4:	e0 91 bf 05 	lds	r30, 0x05BF
    b2f8:	f0 91 c0 05 	lds	r31, 0x05C0
    b2fc:	80 81       	ld	r24, Z
    b2fe:	81 30       	cpi	r24, 0x01	; 1
    b300:	11 f4       	brne	.+4      	; 0xb306 <set_led_task+0x26>
      Leds_redOn();
    b302:	0e 94 41 58 	call	0xb082	; 0xb082 <Leds_redOn>
   } if ( adc_parameter[ 0 ] == 0 ) {
    b306:	e0 91 bf 05 	lds	r30, 0x05BF
    b30a:	f0 91 c0 05 	lds	r31, 0x05C0
    b30e:	80 81       	ld	r24, Z
    b310:	88 23       	and	r24, r24
    b312:	11 f4       	brne	.+4      	; 0xb318 <set_led_task+0x38>
      Leds_redOff();
    b314:	0e 94 61 58 	call	0xb0c2	; 0xb0c2 <Leds_redOff>
   } if ( adc_parameter[ 0 ] == 2 ) {
    b318:	e0 91 bf 05 	lds	r30, 0x05BF
    b31c:	f0 91 c0 05 	lds	r31, 0x05C0
    b320:	80 81       	ld	r24, Z
    b322:	82 30       	cpi	r24, 0x02	; 2
    b324:	11 f4       	brne	.+4      	; 0xb32a <set_led_task+0x4a>
      Leds_redToggle();
    b326:	0e 94 81 58 	call	0xb102	; 0xb102 <Leds_redToggle>
   } 
   if ( adc_parameter[ 1 ] == 1 ) {
    b32a:	80 91 bf 05 	lds	r24, 0x05BF
    b32e:	90 91 c0 05 	lds	r25, 0x05C0
    b332:	fc 01       	movw	r30, r24
    b334:	31 96       	adiw	r30, 0x01	; 1
    b336:	80 81       	ld	r24, Z
    b338:	81 30       	cpi	r24, 0x01	; 1
    b33a:	11 f4       	brne	.+4      	; 0xb340 <set_led_task+0x60>
      Leds_greenOn();
    b33c:	0e 94 a6 58 	call	0xb14c	; 0xb14c <Leds_greenOn>
   } if ( adc_parameter[ 1 ] == 0 ) {
    b340:	80 91 bf 05 	lds	r24, 0x05BF
    b344:	90 91 c0 05 	lds	r25, 0x05C0
    b348:	fc 01       	movw	r30, r24
    b34a:	31 96       	adiw	r30, 0x01	; 1
    b34c:	80 81       	ld	r24, Z
    b34e:	88 23       	and	r24, r24
    b350:	11 f4       	brne	.+4      	; 0xb356 <set_led_task+0x76>
      Leds_greenOff();
    b352:	0e 94 c6 58 	call	0xb18c	; 0xb18c <Leds_greenOff>
   } if ( adc_parameter[ 1 ] == 2 ) {
    b356:	80 91 bf 05 	lds	r24, 0x05BF
    b35a:	90 91 c0 05 	lds	r25, 0x05C0
    b35e:	fc 01       	movw	r30, r24
    b360:	31 96       	adiw	r30, 0x01	; 1
    b362:	80 81       	ld	r24, Z
    b364:	82 30       	cpi	r24, 0x02	; 2
    b366:	11 f4       	brne	.+4      	; 0xb36c <set_led_task+0x8c>
      Leds_greenToggle();
    b368:	0e 94 e6 58 	call	0xb1cc	; 0xb1cc <Leds_greenToggle>
   } 
   if ( adc_parameter[ 2 ] == 1 ) {
    b36c:	80 91 bf 05 	lds	r24, 0x05BF
    b370:	90 91 c0 05 	lds	r25, 0x05C0
    b374:	fc 01       	movw	r30, r24
    b376:	32 96       	adiw	r30, 0x02	; 2
    b378:	80 81       	ld	r24, Z
    b37a:	81 30       	cpi	r24, 0x01	; 1
    b37c:	11 f4       	brne	.+4      	; 0xb382 <set_led_task+0xa2>
      Leds_yellowOn();
    b37e:	0e 94 0b 59 	call	0xb216	; 0xb216 <Leds_yellowOn>
   } if ( adc_parameter[ 2 ] == 0 ) {
    b382:	80 91 bf 05 	lds	r24, 0x05BF
    b386:	90 91 c0 05 	lds	r25, 0x05C0
    b38a:	fc 01       	movw	r30, r24
    b38c:	32 96       	adiw	r30, 0x02	; 2
    b38e:	80 81       	ld	r24, Z
    b390:	88 23       	and	r24, r24
    b392:	11 f4       	brne	.+4      	; 0xb398 <set_led_task+0xb8>
      Leds_yellowOff();
    b394:	0e 94 2b 59 	call	0xb256	; 0xb256 <Leds_yellowOff>
   } if ( adc_parameter[ 2 ] == 2 ) {
    b398:	80 91 bf 05 	lds	r24, 0x05BF
    b39c:	90 91 c0 05 	lds	r25, 0x05C0
    b3a0:	fc 01       	movw	r30, r24
    b3a2:	32 96       	adiw	r30, 0x02	; 2
    b3a4:	80 81       	ld	r24, Z
    b3a6:	82 30       	cpi	r24, 0x02	; 2
    b3a8:	11 f4       	brne	.+4      	; 0xb3ae <set_led_task+0xce>
      Leds_yellowToggle();
    b3aa:	0e 94 4b 59 	call	0xb296	; 0xb296 <Leds_yellowToggle>
    b3ae:	df 91       	pop	r29
    b3b0:	cf 91       	pop	r28
    b3b2:	08 95       	ret

0000b3b4 <LITE_wait_250ns>:
 */
 
#include "micazhardware.h"

void inline LITE_wait_250ns() {
    b3b4:	cf 93       	push	r28
    b3b6:	df 93       	push	r29
    b3b8:	cd b7       	in	r28, 0x3d	; 61
    b3ba:	de b7       	in	r29, 0x3e	; 62
   asm volatile( "nop":: );
    b3bc:	00 00       	nop
   asm volatile( "nop":: );
    b3be:	00 00       	nop
    b3c0:	df 91       	pop	r29
    b3c2:	cf 91       	pop	r28
    b3c4:	08 95       	ret

0000b3c6 <LITE_uwait>:
}

//-------------------------------------------------------------------------
void inline LITE_uwait( int u_sec ) {
    b3c6:	cf 93       	push	r28
    b3c8:	df 93       	push	r29
    b3ca:	cd b7       	in	r28, 0x3d	; 61
    b3cc:	de b7       	in	r29, 0x3e	; 62
    b3ce:	22 97       	sbiw	r28, 0x02	; 2
    b3d0:	0f b6       	in	r0, 0x3f	; 63
    b3d2:	f8 94       	cli
    b3d4:	de bf       	out	0x3e, r29	; 62
    b3d6:	0f be       	out	0x3f, r0	; 63
    b3d8:	cd bf       	out	0x3d, r28	; 61
    b3da:	9a 83       	std	Y+2, r25	; 0x02
    b3dc:	89 83       	std	Y+1, r24	; 0x01
   while ( u_sec > 0 ) {
    b3de:	0d c0       	rjmp	.+26     	; 0xb3fa <LITE_uwait+0x34>
	...
      asm volatile( "nop":: );
      asm volatile( "nop":: );
      asm volatile( "nop":: );
      asm volatile( "nop":: );
      asm volatile( "nop":: );
      asm volatile( "nop":: );
      asm volatile( "nop":: );
      asm volatile( "nop":: );
      u_sec --;
    b3f0:	89 81       	ldd	r24, Y+1	; 0x01
    b3f2:	9a 81       	ldd	r25, Y+2	; 0x02
    b3f4:	01 97       	sbiw	r24, 0x01	; 1
    b3f6:	9a 83       	std	Y+2, r25	; 0x02
    b3f8:	89 83       	std	Y+1, r24	; 0x01
    b3fa:	89 81       	ldd	r24, Y+1	; 0x01
    b3fc:	9a 81       	ldd	r25, Y+2	; 0x02
    b3fe:	18 16       	cp	r1, r24
    b400:	19 06       	cpc	r1, r25
    b402:	74 f3       	brlt	.-36     	; 0xb3e0 <LITE_uwait+0x1a>
    b404:	22 96       	adiw	r28, 0x02	; 2
    b406:	0f b6       	in	r0, 0x3f	; 63
    b408:	f8 94       	cli
    b40a:	de bf       	out	0x3e, r29	; 62
    b40c:	0f be       	out	0x3f, r0	; 63
    b40e:	cd bf       	out	0x3d, r28	; 61
    b410:	df 91       	pop	r29
    b412:	cf 91       	pop	r28
    b414:	08 95       	ret

0000b416 <LITE_SET_RED_LED_PIN>:
   }
}
// LED assignments
LITE_ASSIGN_PIN( RED_LED, A, 2 );
    b416:	cf 93       	push	r28
    b418:	df 93       	push	r29
    b41a:	cd b7       	in	r28, 0x3d	; 61
    b41c:	de b7       	in	r29, 0x3e	; 62
    b41e:	ab e3       	ldi	r26, 0x3B	; 59
    b420:	b0 e0       	ldi	r27, 0x00	; 0
    b422:	eb e3       	ldi	r30, 0x3B	; 59
    b424:	f0 e0       	ldi	r31, 0x00	; 0
    b426:	80 81       	ld	r24, Z
    b428:	84 60       	ori	r24, 0x04	; 4
    b42a:	8c 93       	st	X, r24
    b42c:	df 91       	pop	r29
    b42e:	cf 91       	pop	r28
    b430:	08 95       	ret

0000b432 <LITE_CLR_RED_LED_PIN>:
    b432:	cf 93       	push	r28
    b434:	df 93       	push	r29
    b436:	cd b7       	in	r28, 0x3d	; 61
    b438:	de b7       	in	r29, 0x3e	; 62
    b43a:	ab e3       	ldi	r26, 0x3B	; 59
    b43c:	b0 e0       	ldi	r27, 0x00	; 0
    b43e:	eb e3       	ldi	r30, 0x3B	; 59
    b440:	f0 e0       	ldi	r31, 0x00	; 0
    b442:	80 81       	ld	r24, Z
    b444:	8b 7f       	andi	r24, 0xFB	; 251
    b446:	8c 93       	st	X, r24
    b448:	df 91       	pop	r29
    b44a:	cf 91       	pop	r28
    b44c:	08 95       	ret

0000b44e <LITE_READ_RED_LED_PIN>:
    b44e:	cf 93       	push	r28
    b450:	df 93       	push	r29
    b452:	cd b7       	in	r28, 0x3d	; 61
    b454:	de b7       	in	r29, 0x3e	; 62
    b456:	22 97       	sbiw	r28, 0x02	; 2
    b458:	0f b6       	in	r0, 0x3f	; 63
    b45a:	f8 94       	cli
    b45c:	de bf       	out	0x3e, r29	; 62
    b45e:	0f be       	out	0x3f, r0	; 63
    b460:	cd bf       	out	0x3d, r28	; 61
    b462:	e9 e3       	ldi	r30, 0x39	; 57
    b464:	f0 e0       	ldi	r31, 0x00	; 0
    b466:	80 81       	ld	r24, Z
    b468:	99 27       	eor	r25, r25
    b46a:	84 70       	andi	r24, 0x04	; 4
    b46c:	90 70       	andi	r25, 0x00	; 0
    b46e:	9a 83       	std	Y+2, r25	; 0x02
    b470:	89 83       	std	Y+1, r24	; 0x01
    b472:	89 81       	ldd	r24, Y+1	; 0x01
    b474:	9a 81       	ldd	r25, Y+2	; 0x02
    b476:	00 97       	sbiw	r24, 0x00	; 0
    b478:	21 f0       	breq	.+8      	; 0xb482 <LITE_READ_RED_LED_PIN+0x34>
    b47a:	81 e0       	ldi	r24, 0x01	; 1
    b47c:	90 e0       	ldi	r25, 0x00	; 0
    b47e:	9a 83       	std	Y+2, r25	; 0x02
    b480:	89 83       	std	Y+1, r24	; 0x01
    b482:	89 81       	ldd	r24, Y+1	; 0x01
    b484:	9a 81       	ldd	r25, Y+2	; 0x02
    b486:	22 96       	adiw	r28, 0x02	; 2
    b488:	0f b6       	in	r0, 0x3f	; 63
    b48a:	f8 94       	cli
    b48c:	de bf       	out	0x3e, r29	; 62
    b48e:	0f be       	out	0x3f, r0	; 63
    b490:	cd bf       	out	0x3d, r28	; 61
    b492:	df 91       	pop	r29
    b494:	cf 91       	pop	r28
    b496:	08 95       	ret

0000b498 <LITE_MAKE_RED_LED_OUTPUT>:
    b498:	cf 93       	push	r28
    b49a:	df 93       	push	r29
    b49c:	cd b7       	in	r28, 0x3d	; 61
    b49e:	de b7       	in	r29, 0x3e	; 62
    b4a0:	aa e3       	ldi	r26, 0x3A	; 58
    b4a2:	b0 e0       	ldi	r27, 0x00	; 0
    b4a4:	ea e3       	ldi	r30, 0x3A	; 58
    b4a6:	f0 e0       	ldi	r31, 0x00	; 0
    b4a8:	80 81       	ld	r24, Z
    b4aa:	84 60       	ori	r24, 0x04	; 4
    b4ac:	8c 93       	st	X, r24
    b4ae:	df 91       	pop	r29
    b4b0:	cf 91       	pop	r28
    b4b2:	08 95       	ret

0000b4b4 <LITE_MAKE_RED_LED_INPUT>:
    b4b4:	cf 93       	push	r28
    b4b6:	df 93       	push	r29
    b4b8:	cd b7       	in	r28, 0x3d	; 61
    b4ba:	de b7       	in	r29, 0x3e	; 62
    b4bc:	aa e3       	ldi	r26, 0x3A	; 58
    b4be:	b0 e0       	ldi	r27, 0x00	; 0
    b4c0:	ea e3       	ldi	r30, 0x3A	; 58
    b4c2:	f0 e0       	ldi	r31, 0x00	; 0
    b4c4:	80 81       	ld	r24, Z
    b4c6:	8b 7f       	andi	r24, 0xFB	; 251
    b4c8:	8c 93       	st	X, r24
    b4ca:	df 91       	pop	r29
    b4cc:	cf 91       	pop	r28
    b4ce:	08 95       	ret

0000b4d0 <LITE_SET_GREEN_LED_PIN>:
LITE_ASSIGN_PIN( GREEN_LED, A, 1 );
    b4d0:	cf 93       	push	r28
    b4d2:	df 93       	push	r29
    b4d4:	cd b7       	in	r28, 0x3d	; 61
    b4d6:	de b7       	in	r29, 0x3e	; 62
    b4d8:	ab e3       	ldi	r26, 0x3B	; 59
    b4da:	b0 e0       	ldi	r27, 0x00	; 0
    b4dc:	eb e3       	ldi	r30, 0x3B	; 59
    b4de:	f0 e0       	ldi	r31, 0x00	; 0
    b4e0:	80 81       	ld	r24, Z
    b4e2:	82 60       	ori	r24, 0x02	; 2
    b4e4:	8c 93       	st	X, r24
    b4e6:	df 91       	pop	r29
    b4e8:	cf 91       	pop	r28
    b4ea:	08 95       	ret

0000b4ec <LITE_CLR_GREEN_LED_PIN>:
    b4ec:	cf 93       	push	r28
    b4ee:	df 93       	push	r29
    b4f0:	cd b7       	in	r28, 0x3d	; 61
    b4f2:	de b7       	in	r29, 0x3e	; 62
    b4f4:	ab e3       	ldi	r26, 0x3B	; 59
    b4f6:	b0 e0       	ldi	r27, 0x00	; 0
    b4f8:	eb e3       	ldi	r30, 0x3B	; 59
    b4fa:	f0 e0       	ldi	r31, 0x00	; 0
    b4fc:	80 81       	ld	r24, Z
    b4fe:	8d 7f       	andi	r24, 0xFD	; 253
    b500:	8c 93       	st	X, r24
    b502:	df 91       	pop	r29
    b504:	cf 91       	pop	r28
    b506:	08 95       	ret

0000b508 <LITE_READ_GREEN_LED_PIN>:
    b508:	cf 93       	push	r28
    b50a:	df 93       	push	r29
    b50c:	cd b7       	in	r28, 0x3d	; 61
    b50e:	de b7       	in	r29, 0x3e	; 62
    b510:	22 97       	sbiw	r28, 0x02	; 2
    b512:	0f b6       	in	r0, 0x3f	; 63
    b514:	f8 94       	cli
    b516:	de bf       	out	0x3e, r29	; 62
    b518:	0f be       	out	0x3f, r0	; 63
    b51a:	cd bf       	out	0x3d, r28	; 61
    b51c:	e9 e3       	ldi	r30, 0x39	; 57
    b51e:	f0 e0       	ldi	r31, 0x00	; 0
    b520:	80 81       	ld	r24, Z
    b522:	99 27       	eor	r25, r25
    b524:	82 70       	andi	r24, 0x02	; 2
    b526:	90 70       	andi	r25, 0x00	; 0
    b528:	9a 83       	std	Y+2, r25	; 0x02
    b52a:	89 83       	std	Y+1, r24	; 0x01
    b52c:	89 81       	ldd	r24, Y+1	; 0x01
    b52e:	9a 81       	ldd	r25, Y+2	; 0x02
    b530:	00 97       	sbiw	r24, 0x00	; 0
    b532:	21 f0       	breq	.+8      	; 0xb53c <LITE_READ_GREEN_LED_PIN+0x34>
    b534:	81 e0       	ldi	r24, 0x01	; 1
    b536:	90 e0       	ldi	r25, 0x00	; 0
    b538:	9a 83       	std	Y+2, r25	; 0x02
    b53a:	89 83       	std	Y+1, r24	; 0x01
    b53c:	89 81       	ldd	r24, Y+1	; 0x01
    b53e:	9a 81       	ldd	r25, Y+2	; 0x02
    b540:	22 96       	adiw	r28, 0x02	; 2
    b542:	0f b6       	in	r0, 0x3f	; 63
    b544:	f8 94       	cli
    b546:	de bf       	out	0x3e, r29	; 62
    b548:	0f be       	out	0x3f, r0	; 63
    b54a:	cd bf       	out	0x3d, r28	; 61
    b54c:	df 91       	pop	r29
    b54e:	cf 91       	pop	r28
    b550:	08 95       	ret

0000b552 <LITE_MAKE_GREEN_LED_OUTPUT>:
    b552:	cf 93       	push	r28
    b554:	df 93       	push	r29
    b556:	cd b7       	in	r28, 0x3d	; 61
    b558:	de b7       	in	r29, 0x3e	; 62
    b55a:	aa e3       	ldi	r26, 0x3A	; 58
    b55c:	b0 e0       	ldi	r27, 0x00	; 0
    b55e:	ea e3       	ldi	r30, 0x3A	; 58
    b560:	f0 e0       	ldi	r31, 0x00	; 0
    b562:	80 81       	ld	r24, Z
    b564:	82 60       	ori	r24, 0x02	; 2
    b566:	8c 93       	st	X, r24
    b568:	df 91       	pop	r29
    b56a:	cf 91       	pop	r28
    b56c:	08 95       	ret

0000b56e <LITE_MAKE_GREEN_LED_INPUT>:
    b56e:	cf 93       	push	r28
    b570:	df 93       	push	r29
    b572:	cd b7       	in	r28, 0x3d	; 61
    b574:	de b7       	in	r29, 0x3e	; 62
    b576:	aa e3       	ldi	r26, 0x3A	; 58
    b578:	b0 e0       	ldi	r27, 0x00	; 0
    b57a:	ea e3       	ldi	r30, 0x3A	; 58
    b57c:	f0 e0       	ldi	r31, 0x00	; 0
    b57e:	80 81       	ld	r24, Z
    b580:	8d 7f       	andi	r24, 0xFD	; 253
    b582:	8c 93       	st	X, r24
    b584:	df 91       	pop	r29
    b586:	cf 91       	pop	r28
    b588:	08 95       	ret

0000b58a <LITE_SET_YELLOW_LED_PIN>:
LITE_ASSIGN_PIN( YELLOW_LED, A, 0 );
    b58a:	cf 93       	push	r28
    b58c:	df 93       	push	r29
    b58e:	cd b7       	in	r28, 0x3d	; 61
    b590:	de b7       	in	r29, 0x3e	; 62
    b592:	ab e3       	ldi	r26, 0x3B	; 59
    b594:	b0 e0       	ldi	r27, 0x00	; 0
    b596:	eb e3       	ldi	r30, 0x3B	; 59
    b598:	f0 e0       	ldi	r31, 0x00	; 0
    b59a:	80 81       	ld	r24, Z
    b59c:	81 60       	ori	r24, 0x01	; 1
    b59e:	8c 93       	st	X, r24
    b5a0:	df 91       	pop	r29
    b5a2:	cf 91       	pop	r28
    b5a4:	08 95       	ret

0000b5a6 <LITE_CLR_YELLOW_LED_PIN>:
    b5a6:	cf 93       	push	r28
    b5a8:	df 93       	push	r29
    b5aa:	cd b7       	in	r28, 0x3d	; 61
    b5ac:	de b7       	in	r29, 0x3e	; 62
    b5ae:	ab e3       	ldi	r26, 0x3B	; 59
    b5b0:	b0 e0       	ldi	r27, 0x00	; 0
    b5b2:	eb e3       	ldi	r30, 0x3B	; 59
    b5b4:	f0 e0       	ldi	r31, 0x00	; 0
    b5b6:	80 81       	ld	r24, Z
    b5b8:	8e 7f       	andi	r24, 0xFE	; 254
    b5ba:	8c 93       	st	X, r24
    b5bc:	df 91       	pop	r29
    b5be:	cf 91       	pop	r28
    b5c0:	08 95       	ret

0000b5c2 <LITE_READ_YELLOW_LED_PIN>:
    b5c2:	cf 93       	push	r28
    b5c4:	df 93       	push	r29
    b5c6:	cd b7       	in	r28, 0x3d	; 61
    b5c8:	de b7       	in	r29, 0x3e	; 62
    b5ca:	e9 e3       	ldi	r30, 0x39	; 57
    b5cc:	f0 e0       	ldi	r31, 0x00	; 0
    b5ce:	80 81       	ld	r24, Z
    b5d0:	99 27       	eor	r25, r25
    b5d2:	81 70       	andi	r24, 0x01	; 1
    b5d4:	90 70       	andi	r25, 0x00	; 0
    b5d6:	df 91       	pop	r29
    b5d8:	cf 91       	pop	r28
    b5da:	08 95       	ret

0000b5dc <LITE_MAKE_YELLOW_LED_OUTPUT>:
    b5dc:	cf 93       	push	r28
    b5de:	df 93       	push	r29
    b5e0:	cd b7       	in	r28, 0x3d	; 61
    b5e2:	de b7       	in	r29, 0x3e	; 62
    b5e4:	aa e3       	ldi	r26, 0x3A	; 58
    b5e6:	b0 e0       	ldi	r27, 0x00	; 0
    b5e8:	ea e3       	ldi	r30, 0x3A	; 58
    b5ea:	f0 e0       	ldi	r31, 0x00	; 0
    b5ec:	80 81       	ld	r24, Z
    b5ee:	81 60       	ori	r24, 0x01	; 1
    b5f0:	8c 93       	st	X, r24
    b5f2:	df 91       	pop	r29
    b5f4:	cf 91       	pop	r28
    b5f6:	08 95       	ret

0000b5f8 <LITE_MAKE_YELLOW_LED_INPUT>:
    b5f8:	cf 93       	push	r28
    b5fa:	df 93       	push	r29
    b5fc:	cd b7       	in	r28, 0x3d	; 61
    b5fe:	de b7       	in	r29, 0x3e	; 62
    b600:	aa e3       	ldi	r26, 0x3A	; 58
    b602:	b0 e0       	ldi	r27, 0x00	; 0
    b604:	ea e3       	ldi	r30, 0x3A	; 58
    b606:	f0 e0       	ldi	r31, 0x00	; 0
    b608:	80 81       	ld	r24, Z
    b60a:	8e 7f       	andi	r24, 0xFE	; 254
    b60c:	8c 93       	st	X, r24
    b60e:	df 91       	pop	r29
    b610:	cf 91       	pop	r28
    b612:	08 95       	ret

0000b614 <LITE_SET_SERIAL_ID_PIN>:
LITE_ASSIGN_PIN( SERIAL_ID, A, 4 );
    b614:	cf 93       	push	r28
    b616:	df 93       	push	r29
    b618:	cd b7       	in	r28, 0x3d	; 61
    b61a:	de b7       	in	r29, 0x3e	; 62
    b61c:	ab e3       	ldi	r26, 0x3B	; 59
    b61e:	b0 e0       	ldi	r27, 0x00	; 0
    b620:	eb e3       	ldi	r30, 0x3B	; 59
    b622:	f0 e0       	ldi	r31, 0x00	; 0
    b624:	80 81       	ld	r24, Z
    b626:	80 61       	ori	r24, 0x10	; 16
    b628:	8c 93       	st	X, r24
    b62a:	df 91       	pop	r29
    b62c:	cf 91       	pop	r28
    b62e:	08 95       	ret

0000b630 <LITE_CLR_SERIAL_ID_PIN>:
    b630:	cf 93       	push	r28
    b632:	df 93       	push	r29
    b634:	cd b7       	in	r28, 0x3d	; 61
    b636:	de b7       	in	r29, 0x3e	; 62
    b638:	ab e3       	ldi	r26, 0x3B	; 59
    b63a:	b0 e0       	ldi	r27, 0x00	; 0
    b63c:	eb e3       	ldi	r30, 0x3B	; 59
    b63e:	f0 e0       	ldi	r31, 0x00	; 0
    b640:	80 81       	ld	r24, Z
    b642:	8f 7e       	andi	r24, 0xEF	; 239
    b644:	8c 93       	st	X, r24
    b646:	df 91       	pop	r29
    b648:	cf 91       	pop	r28
    b64a:	08 95       	ret

0000b64c <LITE_READ_SERIAL_ID_PIN>:
    b64c:	cf 93       	push	r28
    b64e:	df 93       	push	r29
    b650:	cd b7       	in	r28, 0x3d	; 61
    b652:	de b7       	in	r29, 0x3e	; 62
    b654:	22 97       	sbiw	r28, 0x02	; 2
    b656:	0f b6       	in	r0, 0x3f	; 63
    b658:	f8 94       	cli
    b65a:	de bf       	out	0x3e, r29	; 62
    b65c:	0f be       	out	0x3f, r0	; 63
    b65e:	cd bf       	out	0x3d, r28	; 61
    b660:	e9 e3       	ldi	r30, 0x39	; 57
    b662:	f0 e0       	ldi	r31, 0x00	; 0
    b664:	80 81       	ld	r24, Z
    b666:	99 27       	eor	r25, r25
    b668:	80 71       	andi	r24, 0x10	; 16
    b66a:	90 70       	andi	r25, 0x00	; 0
    b66c:	9a 83       	std	Y+2, r25	; 0x02
    b66e:	89 83       	std	Y+1, r24	; 0x01
    b670:	89 81       	ldd	r24, Y+1	; 0x01
    b672:	9a 81       	ldd	r25, Y+2	; 0x02
    b674:	00 97       	sbiw	r24, 0x00	; 0
    b676:	21 f0       	breq	.+8      	; 0xb680 <LITE_READ_SERIAL_ID_PIN+0x34>
    b678:	81 e0       	ldi	r24, 0x01	; 1
    b67a:	90 e0       	ldi	r25, 0x00	; 0
    b67c:	9a 83       	std	Y+2, r25	; 0x02
    b67e:	89 83       	std	Y+1, r24	; 0x01
    b680:	89 81       	ldd	r24, Y+1	; 0x01
    b682:	9a 81       	ldd	r25, Y+2	; 0x02
    b684:	22 96       	adiw	r28, 0x02	; 2
    b686:	0f b6       	in	r0, 0x3f	; 63
    b688:	f8 94       	cli
    b68a:	de bf       	out	0x3e, r29	; 62
    b68c:	0f be       	out	0x3f, r0	; 63
    b68e:	cd bf       	out	0x3d, r28	; 61
    b690:	df 91       	pop	r29
    b692:	cf 91       	pop	r28
    b694:	08 95       	ret

0000b696 <LITE_MAKE_SERIAL_ID_OUTPUT>:
    b696:	cf 93       	push	r28
    b698:	df 93       	push	r29
    b69a:	cd b7       	in	r28, 0x3d	; 61
    b69c:	de b7       	in	r29, 0x3e	; 62
    b69e:	aa e3       	ldi	r26, 0x3A	; 58
    b6a0:	b0 e0       	ldi	r27, 0x00	; 0
    b6a2:	ea e3       	ldi	r30, 0x3A	; 58
    b6a4:	f0 e0       	ldi	r31, 0x00	; 0
    b6a6:	80 81       	ld	r24, Z
    b6a8:	80 61       	ori	r24, 0x10	; 16
    b6aa:	8c 93       	st	X, r24
    b6ac:	df 91       	pop	r29
    b6ae:	cf 91       	pop	r28
    b6b0:	08 95       	ret

0000b6b2 <LITE_MAKE_SERIAL_ID_INPUT>:
    b6b2:	cf 93       	push	r28
    b6b4:	df 93       	push	r29
    b6b6:	cd b7       	in	r28, 0x3d	; 61
    b6b8:	de b7       	in	r29, 0x3e	; 62
    b6ba:	aa e3       	ldi	r26, 0x3A	; 58
    b6bc:	b0 e0       	ldi	r27, 0x00	; 0
    b6be:	ea e3       	ldi	r30, 0x3A	; 58
    b6c0:	f0 e0       	ldi	r31, 0x00	; 0
    b6c2:	80 81       	ld	r24, Z
    b6c4:	8f 7e       	andi	r24, 0xEF	; 239
    b6c6:	8c 93       	st	X, r24
    b6c8:	df 91       	pop	r29
    b6ca:	cf 91       	pop	r28
    b6cc:	08 95       	ret

0000b6ce <LITE_SET_BAT_MON_PIN>:
LITE_ASSIGN_PIN( BAT_MON, A, 5 );
    b6ce:	cf 93       	push	r28
    b6d0:	df 93       	push	r29
    b6d2:	cd b7       	in	r28, 0x3d	; 61
    b6d4:	de b7       	in	r29, 0x3e	; 62
    b6d6:	ab e3       	ldi	r26, 0x3B	; 59
    b6d8:	b0 e0       	ldi	r27, 0x00	; 0
    b6da:	eb e3       	ldi	r30, 0x3B	; 59
    b6dc:	f0 e0       	ldi	r31, 0x00	; 0
    b6de:	80 81       	ld	r24, Z
    b6e0:	80 62       	ori	r24, 0x20	; 32
    b6e2:	8c 93       	st	X, r24
    b6e4:	df 91       	pop	r29
    b6e6:	cf 91       	pop	r28
    b6e8:	08 95       	ret

0000b6ea <LITE_CLR_BAT_MON_PIN>:
    b6ea:	cf 93       	push	r28
    b6ec:	df 93       	push	r29
    b6ee:	cd b7       	in	r28, 0x3d	; 61
    b6f0:	de b7       	in	r29, 0x3e	; 62
    b6f2:	ab e3       	ldi	r26, 0x3B	; 59
    b6f4:	b0 e0       	ldi	r27, 0x00	; 0
    b6f6:	eb e3       	ldi	r30, 0x3B	; 59
    b6f8:	f0 e0       	ldi	r31, 0x00	; 0
    b6fa:	80 81       	ld	r24, Z
    b6fc:	8f 7d       	andi	r24, 0xDF	; 223
    b6fe:	8c 93       	st	X, r24
    b700:	df 91       	pop	r29
    b702:	cf 91       	pop	r28
    b704:	08 95       	ret

0000b706 <LITE_READ_BAT_MON_PIN>:
    b706:	cf 93       	push	r28
    b708:	df 93       	push	r29
    b70a:	cd b7       	in	r28, 0x3d	; 61
    b70c:	de b7       	in	r29, 0x3e	; 62
    b70e:	22 97       	sbiw	r28, 0x02	; 2
    b710:	0f b6       	in	r0, 0x3f	; 63
    b712:	f8 94       	cli
    b714:	de bf       	out	0x3e, r29	; 62
    b716:	0f be       	out	0x3f, r0	; 63
    b718:	cd bf       	out	0x3d, r28	; 61
    b71a:	e9 e3       	ldi	r30, 0x39	; 57
    b71c:	f0 e0       	ldi	r31, 0x00	; 0
    b71e:	80 81       	ld	r24, Z
    b720:	99 27       	eor	r25, r25
    b722:	80 72       	andi	r24, 0x20	; 32
    b724:	90 70       	andi	r25, 0x00	; 0
    b726:	9a 83       	std	Y+2, r25	; 0x02
    b728:	89 83       	std	Y+1, r24	; 0x01
    b72a:	89 81       	ldd	r24, Y+1	; 0x01
    b72c:	9a 81       	ldd	r25, Y+2	; 0x02
    b72e:	00 97       	sbiw	r24, 0x00	; 0
    b730:	21 f0       	breq	.+8      	; 0xb73a <LITE_READ_BAT_MON_PIN+0x34>
    b732:	81 e0       	ldi	r24, 0x01	; 1
    b734:	90 e0       	ldi	r25, 0x00	; 0
    b736:	9a 83       	std	Y+2, r25	; 0x02
    b738:	89 83       	std	Y+1, r24	; 0x01
    b73a:	89 81       	ldd	r24, Y+1	; 0x01
    b73c:	9a 81       	ldd	r25, Y+2	; 0x02
    b73e:	22 96       	adiw	r28, 0x02	; 2
    b740:	0f b6       	in	r0, 0x3f	; 63
    b742:	f8 94       	cli
    b744:	de bf       	out	0x3e, r29	; 62
    b746:	0f be       	out	0x3f, r0	; 63
    b748:	cd bf       	out	0x3d, r28	; 61
    b74a:	df 91       	pop	r29
    b74c:	cf 91       	pop	r28
    b74e:	08 95       	ret

0000b750 <LITE_MAKE_BAT_MON_OUTPUT>:
    b750:	cf 93       	push	r28
    b752:	df 93       	push	r29
    b754:	cd b7       	in	r28, 0x3d	; 61
    b756:	de b7       	in	r29, 0x3e	; 62
    b758:	aa e3       	ldi	r26, 0x3A	; 58
    b75a:	b0 e0       	ldi	r27, 0x00	; 0
    b75c:	ea e3       	ldi	r30, 0x3A	; 58
    b75e:	f0 e0       	ldi	r31, 0x00	; 0
    b760:	80 81       	ld	r24, Z
    b762:	80 62       	ori	r24, 0x20	; 32
    b764:	8c 93       	st	X, r24
    b766:	df 91       	pop	r29
    b768:	cf 91       	pop	r28
    b76a:	08 95       	ret

0000b76c <LITE_MAKE_BAT_MON_INPUT>:
    b76c:	cf 93       	push	r28
    b76e:	df 93       	push	r29
    b770:	cd b7       	in	r28, 0x3d	; 61
    b772:	de b7       	in	r29, 0x3e	; 62
    b774:	aa e3       	ldi	r26, 0x3A	; 58
    b776:	b0 e0       	ldi	r27, 0x00	; 0
    b778:	ea e3       	ldi	r30, 0x3A	; 58
    b77a:	f0 e0       	ldi	r31, 0x00	; 0
    b77c:	80 81       	ld	r24, Z
    b77e:	8f 7d       	andi	r24, 0xDF	; 223
    b780:	8c 93       	st	X, r24
    b782:	df 91       	pop	r29
    b784:	cf 91       	pop	r28
    b786:	08 95       	ret

0000b788 <LITE_SET_THERM_PWR_PIN>:
LITE_ASSIGN_PIN( THERM_PWR, A, 7 );
    b788:	cf 93       	push	r28
    b78a:	df 93       	push	r29
    b78c:	cd b7       	in	r28, 0x3d	; 61
    b78e:	de b7       	in	r29, 0x3e	; 62
    b790:	ab e3       	ldi	r26, 0x3B	; 59
    b792:	b0 e0       	ldi	r27, 0x00	; 0
    b794:	eb e3       	ldi	r30, 0x3B	; 59
    b796:	f0 e0       	ldi	r31, 0x00	; 0
    b798:	80 81       	ld	r24, Z
    b79a:	80 68       	ori	r24, 0x80	; 128
    b79c:	8c 93       	st	X, r24
    b79e:	df 91       	pop	r29
    b7a0:	cf 91       	pop	r28
    b7a2:	08 95       	ret

0000b7a4 <LITE_CLR_THERM_PWR_PIN>:
    b7a4:	cf 93       	push	r28
    b7a6:	df 93       	push	r29
    b7a8:	cd b7       	in	r28, 0x3d	; 61
    b7aa:	de b7       	in	r29, 0x3e	; 62
    b7ac:	ab e3       	ldi	r26, 0x3B	; 59
    b7ae:	b0 e0       	ldi	r27, 0x00	; 0
    b7b0:	eb e3       	ldi	r30, 0x3B	; 59
    b7b2:	f0 e0       	ldi	r31, 0x00	; 0
    b7b4:	90 81       	ld	r25, Z
    b7b6:	8f e7       	ldi	r24, 0x7F	; 127
    b7b8:	89 23       	and	r24, r25
    b7ba:	8c 93       	st	X, r24
    b7bc:	df 91       	pop	r29
    b7be:	cf 91       	pop	r28
    b7c0:	08 95       	ret

0000b7c2 <LITE_READ_THERM_PWR_PIN>:
    b7c2:	cf 93       	push	r28
    b7c4:	df 93       	push	r29
    b7c6:	cd b7       	in	r28, 0x3d	; 61
    b7c8:	de b7       	in	r29, 0x3e	; 62
    b7ca:	22 97       	sbiw	r28, 0x02	; 2
    b7cc:	0f b6       	in	r0, 0x3f	; 63
    b7ce:	f8 94       	cli
    b7d0:	de bf       	out	0x3e, r29	; 62
    b7d2:	0f be       	out	0x3f, r0	; 63
    b7d4:	cd bf       	out	0x3d, r28	; 61
    b7d6:	e9 e3       	ldi	r30, 0x39	; 57
    b7d8:	f0 e0       	ldi	r31, 0x00	; 0
    b7da:	80 81       	ld	r24, Z
    b7dc:	1a 82       	std	Y+2, r1	; 0x02
    b7de:	19 82       	std	Y+1, r1	; 0x01
    b7e0:	88 23       	and	r24, r24
    b7e2:	24 f4       	brge	.+8      	; 0xb7ec <LITE_READ_THERM_PWR_PIN+0x2a>
    b7e4:	81 e0       	ldi	r24, 0x01	; 1
    b7e6:	90 e0       	ldi	r25, 0x00	; 0
    b7e8:	9a 83       	std	Y+2, r25	; 0x02
    b7ea:	89 83       	std	Y+1, r24	; 0x01
    b7ec:	89 81       	ldd	r24, Y+1	; 0x01
    b7ee:	9a 81       	ldd	r25, Y+2	; 0x02
    b7f0:	22 96       	adiw	r28, 0x02	; 2
    b7f2:	0f b6       	in	r0, 0x3f	; 63
    b7f4:	f8 94       	cli
    b7f6:	de bf       	out	0x3e, r29	; 62
    b7f8:	0f be       	out	0x3f, r0	; 63
    b7fa:	cd bf       	out	0x3d, r28	; 61
    b7fc:	df 91       	pop	r29
    b7fe:	cf 91       	pop	r28
    b800:	08 95       	ret

0000b802 <LITE_MAKE_THERM_PWR_OUTPUT>:
    b802:	cf 93       	push	r28
    b804:	df 93       	push	r29
    b806:	cd b7       	in	r28, 0x3d	; 61
    b808:	de b7       	in	r29, 0x3e	; 62
    b80a:	aa e3       	ldi	r26, 0x3A	; 58
    b80c:	b0 e0       	ldi	r27, 0x00	; 0
    b80e:	ea e3       	ldi	r30, 0x3A	; 58
    b810:	f0 e0       	ldi	r31, 0x00	; 0
    b812:	80 81       	ld	r24, Z
    b814:	80 68       	ori	r24, 0x80	; 128
    b816:	8c 93       	st	X, r24
    b818:	df 91       	pop	r29
    b81a:	cf 91       	pop	r28
    b81c:	08 95       	ret

0000b81e <LITE_MAKE_THERM_PWR_INPUT>:
    b81e:	cf 93       	push	r28
    b820:	df 93       	push	r29
    b822:	cd b7       	in	r28, 0x3d	; 61
    b824:	de b7       	in	r29, 0x3e	; 62
    b826:	aa e3       	ldi	r26, 0x3A	; 58
    b828:	b0 e0       	ldi	r27, 0x00	; 0
    b82a:	ea e3       	ldi	r30, 0x3A	; 58
    b82c:	f0 e0       	ldi	r31, 0x00	; 0
    b82e:	90 81       	ld	r25, Z
    b830:	8f e7       	ldi	r24, 0x7F	; 127
    b832:	89 23       	and	r24, r25
    b834:	8c 93       	st	X, r24
    b836:	df 91       	pop	r29
    b838:	cf 91       	pop	r28
    b83a:	08 95       	ret

0000b83c <CC2420_FIFOP_INT_MODE>:

void inline CC2420_FIFOP_INT_MODE( bool LowToHigh ) {
    b83c:	cf 93       	push	r28
    b83e:	df 93       	push	r29
    b840:	cd b7       	in	r28, 0x3d	; 61
    b842:	de b7       	in	r29, 0x3e	; 62
    b844:	21 97       	sbiw	r28, 0x01	; 1
    b846:	0f b6       	in	r0, 0x3f	; 63
    b848:	f8 94       	cli
    b84a:	de bf       	out	0x3e, r29	; 62
    b84c:	0f be       	out	0x3f, r0	; 63
    b84e:	cd bf       	out	0x3d, r28	; 61
    b850:	89 83       	std	Y+1, r24	; 0x01
   sbi( EICRB, ISC61 ); // edge mode
    b852:	aa e5       	ldi	r26, 0x5A	; 90
    b854:	b0 e0       	ldi	r27, 0x00	; 0
    b856:	ea e5       	ldi	r30, 0x5A	; 90
    b858:	f0 e0       	ldi	r31, 0x00	; 0
    b85a:	80 81       	ld	r24, Z
    b85c:	80 62       	ori	r24, 0x20	; 32
    b85e:	8c 93       	st	X, r24
   if ( LowToHigh ) {
    b860:	89 81       	ldd	r24, Y+1	; 0x01
    b862:	88 23       	and	r24, r24
    b864:	41 f0       	breq	.+16     	; 0xb876 <CC2420_FIFOP_INT_MODE+0x3a>
      sbi( EICRB, ISC60 );
    b866:	aa e5       	ldi	r26, 0x5A	; 90
    b868:	b0 e0       	ldi	r27, 0x00	; 0
    b86a:	ea e5       	ldi	r30, 0x5A	; 90
    b86c:	f0 e0       	ldi	r31, 0x00	; 0
    b86e:	80 81       	ld	r24, Z
    b870:	80 61       	ori	r24, 0x10	; 16
    b872:	8c 93       	st	X, r24
    b874:	07 c0       	rjmp	.+14     	; 0xb884 <CC2420_FIFOP_INT_MODE+0x48>
   }  //trigger on rising level
   else {
      cbi( EICRB, ISC60 );
    b876:	aa e5       	ldi	r26, 0x5A	; 90
    b878:	b0 e0       	ldi	r27, 0x00	; 0
    b87a:	ea e5       	ldi	r30, 0x5A	; 90
    b87c:	f0 e0       	ldi	r31, 0x00	; 0
    b87e:	80 81       	ld	r24, Z
    b880:	8f 7e       	andi	r24, 0xEF	; 239
    b882:	8c 93       	st	X, r24
    b884:	21 96       	adiw	r28, 0x01	; 1
    b886:	0f b6       	in	r0, 0x3f	; 63
    b888:	f8 94       	cli
    b88a:	de bf       	out	0x3e, r29	; 62
    b88c:	0f be       	out	0x3f, r0	; 63
    b88e:	cd bf       	out	0x3d, r28	; 61
    b890:	df 91       	pop	r29
    b892:	cf 91       	pop	r28
    b894:	08 95       	ret

0000b896 <LITE_SET_CC_RSTN_PIN>:
   }  //trigger on falling level
}

//-------------------------------------------------------------------------
LITE_ASSIGN_PIN( CC_RSTN, A, 6 ); // chipcon reset
    b896:	cf 93       	push	r28
    b898:	df 93       	push	r29
    b89a:	cd b7       	in	r28, 0x3d	; 61
    b89c:	de b7       	in	r29, 0x3e	; 62
    b89e:	ab e3       	ldi	r26, 0x3B	; 59
    b8a0:	b0 e0       	ldi	r27, 0x00	; 0
    b8a2:	eb e3       	ldi	r30, 0x3B	; 59
    b8a4:	f0 e0       	ldi	r31, 0x00	; 0
    b8a6:	80 81       	ld	r24, Z
    b8a8:	80 64       	ori	r24, 0x40	; 64
    b8aa:	8c 93       	st	X, r24
    b8ac:	df 91       	pop	r29
    b8ae:	cf 91       	pop	r28
    b8b0:	08 95       	ret

0000b8b2 <LITE_CLR_CC_RSTN_PIN>:
    b8b2:	cf 93       	push	r28
    b8b4:	df 93       	push	r29
    b8b6:	cd b7       	in	r28, 0x3d	; 61
    b8b8:	de b7       	in	r29, 0x3e	; 62
    b8ba:	ab e3       	ldi	r26, 0x3B	; 59
    b8bc:	b0 e0       	ldi	r27, 0x00	; 0
    b8be:	eb e3       	ldi	r30, 0x3B	; 59
    b8c0:	f0 e0       	ldi	r31, 0x00	; 0
    b8c2:	80 81       	ld	r24, Z
    b8c4:	8f 7b       	andi	r24, 0xBF	; 191
    b8c6:	8c 93       	st	X, r24
    b8c8:	df 91       	pop	r29
    b8ca:	cf 91       	pop	r28
    b8cc:	08 95       	ret

0000b8ce <LITE_READ_CC_RSTN_PIN>:
    b8ce:	cf 93       	push	r28
    b8d0:	df 93       	push	r29
    b8d2:	cd b7       	in	r28, 0x3d	; 61
    b8d4:	de b7       	in	r29, 0x3e	; 62
    b8d6:	22 97       	sbiw	r28, 0x02	; 2
    b8d8:	0f b6       	in	r0, 0x3f	; 63
    b8da:	f8 94       	cli
    b8dc:	de bf       	out	0x3e, r29	; 62
    b8de:	0f be       	out	0x3f, r0	; 63
    b8e0:	cd bf       	out	0x3d, r28	; 61
    b8e2:	e9 e3       	ldi	r30, 0x39	; 57
    b8e4:	f0 e0       	ldi	r31, 0x00	; 0
    b8e6:	80 81       	ld	r24, Z
    b8e8:	99 27       	eor	r25, r25
    b8ea:	80 74       	andi	r24, 0x40	; 64
    b8ec:	90 70       	andi	r25, 0x00	; 0
    b8ee:	9a 83       	std	Y+2, r25	; 0x02
    b8f0:	89 83       	std	Y+1, r24	; 0x01
    b8f2:	89 81       	ldd	r24, Y+1	; 0x01
    b8f4:	9a 81       	ldd	r25, Y+2	; 0x02
    b8f6:	00 97       	sbiw	r24, 0x00	; 0
    b8f8:	21 f0       	breq	.+8      	; 0xb902 <LITE_READ_CC_RSTN_PIN+0x34>
    b8fa:	81 e0       	ldi	r24, 0x01	; 1
    b8fc:	90 e0       	ldi	r25, 0x00	; 0
    b8fe:	9a 83       	std	Y+2, r25	; 0x02
    b900:	89 83       	std	Y+1, r24	; 0x01
    b902:	89 81       	ldd	r24, Y+1	; 0x01
    b904:	9a 81       	ldd	r25, Y+2	; 0x02
    b906:	22 96       	adiw	r28, 0x02	; 2
    b908:	0f b6       	in	r0, 0x3f	; 63
    b90a:	f8 94       	cli
    b90c:	de bf       	out	0x3e, r29	; 62
    b90e:	0f be       	out	0x3f, r0	; 63
    b910:	cd bf       	out	0x3d, r28	; 61
    b912:	df 91       	pop	r29
    b914:	cf 91       	pop	r28
    b916:	08 95       	ret

0000b918 <LITE_MAKE_CC_RSTN_OUTPUT>:
    b918:	cf 93       	push	r28
    b91a:	df 93       	push	r29
    b91c:	cd b7       	in	r28, 0x3d	; 61
    b91e:	de b7       	in	r29, 0x3e	; 62
    b920:	aa e3       	ldi	r26, 0x3A	; 58
    b922:	b0 e0       	ldi	r27, 0x00	; 0
    b924:	ea e3       	ldi	r30, 0x3A	; 58
    b926:	f0 e0       	ldi	r31, 0x00	; 0
    b928:	80 81       	ld	r24, Z
    b92a:	80 64       	ori	r24, 0x40	; 64
    b92c:	8c 93       	st	X, r24
    b92e:	df 91       	pop	r29
    b930:	cf 91       	pop	r28
    b932:	08 95       	ret

0000b934 <LITE_MAKE_CC_RSTN_INPUT>:
    b934:	cf 93       	push	r28
    b936:	df 93       	push	r29
    b938:	cd b7       	in	r28, 0x3d	; 61
    b93a:	de b7       	in	r29, 0x3e	; 62
    b93c:	aa e3       	ldi	r26, 0x3A	; 58
    b93e:	b0 e0       	ldi	r27, 0x00	; 0
    b940:	ea e3       	ldi	r30, 0x3A	; 58
    b942:	f0 e0       	ldi	r31, 0x00	; 0
    b944:	80 81       	ld	r24, Z
    b946:	8f 7b       	andi	r24, 0xBF	; 191
    b948:	8c 93       	st	X, r24
    b94a:	df 91       	pop	r29
    b94c:	cf 91       	pop	r28
    b94e:	08 95       	ret

0000b950 <LITE_SET_CC_VREN_PIN>:
LITE_ASSIGN_PIN( CC_VREN, A, 5 ); // chipcon power enable
    b950:	cf 93       	push	r28
    b952:	df 93       	push	r29
    b954:	cd b7       	in	r28, 0x3d	; 61
    b956:	de b7       	in	r29, 0x3e	; 62
    b958:	ab e3       	ldi	r26, 0x3B	; 59
    b95a:	b0 e0       	ldi	r27, 0x00	; 0
    b95c:	eb e3       	ldi	r30, 0x3B	; 59
    b95e:	f0 e0       	ldi	r31, 0x00	; 0
    b960:	80 81       	ld	r24, Z
    b962:	80 62       	ori	r24, 0x20	; 32
    b964:	8c 93       	st	X, r24
    b966:	df 91       	pop	r29
    b968:	cf 91       	pop	r28
    b96a:	08 95       	ret

0000b96c <LITE_CLR_CC_VREN_PIN>:
    b96c:	cf 93       	push	r28
    b96e:	df 93       	push	r29
    b970:	cd b7       	in	r28, 0x3d	; 61
    b972:	de b7       	in	r29, 0x3e	; 62
    b974:	ab e3       	ldi	r26, 0x3B	; 59
    b976:	b0 e0       	ldi	r27, 0x00	; 0
    b978:	eb e3       	ldi	r30, 0x3B	; 59
    b97a:	f0 e0       	ldi	r31, 0x00	; 0
    b97c:	80 81       	ld	r24, Z
    b97e:	8f 7d       	andi	r24, 0xDF	; 223
    b980:	8c 93       	st	X, r24
    b982:	df 91       	pop	r29
    b984:	cf 91       	pop	r28
    b986:	08 95       	ret

0000b988 <LITE_READ_CC_VREN_PIN>:
    b988:	cf 93       	push	r28
    b98a:	df 93       	push	r29
    b98c:	cd b7       	in	r28, 0x3d	; 61
    b98e:	de b7       	in	r29, 0x3e	; 62
    b990:	22 97       	sbiw	r28, 0x02	; 2
    b992:	0f b6       	in	r0, 0x3f	; 63
    b994:	f8 94       	cli
    b996:	de bf       	out	0x3e, r29	; 62
    b998:	0f be       	out	0x3f, r0	; 63
    b99a:	cd bf       	out	0x3d, r28	; 61
    b99c:	e9 e3       	ldi	r30, 0x39	; 57
    b99e:	f0 e0       	ldi	r31, 0x00	; 0
    b9a0:	80 81       	ld	r24, Z
    b9a2:	99 27       	eor	r25, r25
    b9a4:	80 72       	andi	r24, 0x20	; 32
    b9a6:	90 70       	andi	r25, 0x00	; 0
    b9a8:	9a 83       	std	Y+2, r25	; 0x02
    b9aa:	89 83       	std	Y+1, r24	; 0x01
    b9ac:	89 81       	ldd	r24, Y+1	; 0x01
    b9ae:	9a 81       	ldd	r25, Y+2	; 0x02
    b9b0:	00 97       	sbiw	r24, 0x00	; 0
    b9b2:	21 f0       	breq	.+8      	; 0xb9bc <LITE_READ_CC_VREN_PIN+0x34>
    b9b4:	81 e0       	ldi	r24, 0x01	; 1
    b9b6:	90 e0       	ldi	r25, 0x00	; 0
    b9b8:	9a 83       	std	Y+2, r25	; 0x02
    b9ba:	89 83       	std	Y+1, r24	; 0x01
    b9bc:	89 81       	ldd	r24, Y+1	; 0x01
    b9be:	9a 81       	ldd	r25, Y+2	; 0x02
    b9c0:	22 96       	adiw	r28, 0x02	; 2
    b9c2:	0f b6       	in	r0, 0x3f	; 63
    b9c4:	f8 94       	cli
    b9c6:	de bf       	out	0x3e, r29	; 62
    b9c8:	0f be       	out	0x3f, r0	; 63
    b9ca:	cd bf       	out	0x3d, r28	; 61
    b9cc:	df 91       	pop	r29
    b9ce:	cf 91       	pop	r28
    b9d0:	08 95       	ret

0000b9d2 <LITE_MAKE_CC_VREN_OUTPUT>:
    b9d2:	cf 93       	push	r28
    b9d4:	df 93       	push	r29
    b9d6:	cd b7       	in	r28, 0x3d	; 61
    b9d8:	de b7       	in	r29, 0x3e	; 62
    b9da:	aa e3       	ldi	r26, 0x3A	; 58
    b9dc:	b0 e0       	ldi	r27, 0x00	; 0
    b9de:	ea e3       	ldi	r30, 0x3A	; 58
    b9e0:	f0 e0       	ldi	r31, 0x00	; 0
    b9e2:	80 81       	ld	r24, Z
    b9e4:	80 62       	ori	r24, 0x20	; 32
    b9e6:	8c 93       	st	X, r24
    b9e8:	df 91       	pop	r29
    b9ea:	cf 91       	pop	r28
    b9ec:	08 95       	ret

0000b9ee <LITE_MAKE_CC_VREN_INPUT>:
    b9ee:	cf 93       	push	r28
    b9f0:	df 93       	push	r29
    b9f2:	cd b7       	in	r28, 0x3d	; 61
    b9f4:	de b7       	in	r29, 0x3e	; 62
    b9f6:	aa e3       	ldi	r26, 0x3A	; 58
    b9f8:	b0 e0       	ldi	r27, 0x00	; 0
    b9fa:	ea e3       	ldi	r30, 0x3A	; 58
    b9fc:	f0 e0       	ldi	r31, 0x00	; 0
    b9fe:	80 81       	ld	r24, Z
    ba00:	8f 7d       	andi	r24, 0xDF	; 223
    ba02:	8c 93       	st	X, r24
    ba04:	df 91       	pop	r29
    ba06:	cf 91       	pop	r28
    ba08:	08 95       	ret

0000ba0a <LITE_SET_CC_FIFOP_PIN>:
//LITE_ASSIGN_PIN(CC_FIFOP1, D, 7);  // fifo interrupt
LITE_ASSIGN_PIN( CC_FIFOP, E, 6 ); // fifo interrupt
    ba0a:	cf 93       	push	r28
    ba0c:	df 93       	push	r29
    ba0e:	cd b7       	in	r28, 0x3d	; 61
    ba10:	de b7       	in	r29, 0x3e	; 62
    ba12:	a3 e2       	ldi	r26, 0x23	; 35
    ba14:	b0 e0       	ldi	r27, 0x00	; 0
    ba16:	e3 e2       	ldi	r30, 0x23	; 35
    ba18:	f0 e0       	ldi	r31, 0x00	; 0
    ba1a:	80 81       	ld	r24, Z
    ba1c:	80 64       	ori	r24, 0x40	; 64
    ba1e:	8c 93       	st	X, r24
    ba20:	df 91       	pop	r29
    ba22:	cf 91       	pop	r28
    ba24:	08 95       	ret

0000ba26 <LITE_CLR_CC_FIFOP_PIN>:
    ba26:	cf 93       	push	r28
    ba28:	df 93       	push	r29
    ba2a:	cd b7       	in	r28, 0x3d	; 61
    ba2c:	de b7       	in	r29, 0x3e	; 62
    ba2e:	a3 e2       	ldi	r26, 0x23	; 35
    ba30:	b0 e0       	ldi	r27, 0x00	; 0
    ba32:	e3 e2       	ldi	r30, 0x23	; 35
    ba34:	f0 e0       	ldi	r31, 0x00	; 0
    ba36:	80 81       	ld	r24, Z
    ba38:	8f 7b       	andi	r24, 0xBF	; 191
    ba3a:	8c 93       	st	X, r24
    ba3c:	df 91       	pop	r29
    ba3e:	cf 91       	pop	r28
    ba40:	08 95       	ret

0000ba42 <LITE_READ_CC_FIFOP_PIN>:
    ba42:	cf 93       	push	r28
    ba44:	df 93       	push	r29
    ba46:	cd b7       	in	r28, 0x3d	; 61
    ba48:	de b7       	in	r29, 0x3e	; 62
    ba4a:	22 97       	sbiw	r28, 0x02	; 2
    ba4c:	0f b6       	in	r0, 0x3f	; 63
    ba4e:	f8 94       	cli
    ba50:	de bf       	out	0x3e, r29	; 62
    ba52:	0f be       	out	0x3f, r0	; 63
    ba54:	cd bf       	out	0x3d, r28	; 61
    ba56:	e1 e2       	ldi	r30, 0x21	; 33
    ba58:	f0 e0       	ldi	r31, 0x00	; 0
    ba5a:	80 81       	ld	r24, Z
    ba5c:	99 27       	eor	r25, r25
    ba5e:	80 74       	andi	r24, 0x40	; 64
    ba60:	90 70       	andi	r25, 0x00	; 0
    ba62:	9a 83       	std	Y+2, r25	; 0x02
    ba64:	89 83       	std	Y+1, r24	; 0x01
    ba66:	89 81       	ldd	r24, Y+1	; 0x01
    ba68:	9a 81       	ldd	r25, Y+2	; 0x02
    ba6a:	00 97       	sbiw	r24, 0x00	; 0
    ba6c:	21 f0       	breq	.+8      	; 0xba76 <LITE_READ_CC_FIFOP_PIN+0x34>
    ba6e:	81 e0       	ldi	r24, 0x01	; 1
    ba70:	90 e0       	ldi	r25, 0x00	; 0
    ba72:	9a 83       	std	Y+2, r25	; 0x02
    ba74:	89 83       	std	Y+1, r24	; 0x01
    ba76:	89 81       	ldd	r24, Y+1	; 0x01
    ba78:	9a 81       	ldd	r25, Y+2	; 0x02
    ba7a:	22 96       	adiw	r28, 0x02	; 2
    ba7c:	0f b6       	in	r0, 0x3f	; 63
    ba7e:	f8 94       	cli
    ba80:	de bf       	out	0x3e, r29	; 62
    ba82:	0f be       	out	0x3f, r0	; 63
    ba84:	cd bf       	out	0x3d, r28	; 61
    ba86:	df 91       	pop	r29
    ba88:	cf 91       	pop	r28
    ba8a:	08 95       	ret

0000ba8c <LITE_MAKE_CC_FIFOP_OUTPUT>:
    ba8c:	cf 93       	push	r28
    ba8e:	df 93       	push	r29
    ba90:	cd b7       	in	r28, 0x3d	; 61
    ba92:	de b7       	in	r29, 0x3e	; 62
    ba94:	a2 e2       	ldi	r26, 0x22	; 34
    ba96:	b0 e0       	ldi	r27, 0x00	; 0
    ba98:	e2 e2       	ldi	r30, 0x22	; 34
    ba9a:	f0 e0       	ldi	r31, 0x00	; 0
    ba9c:	80 81       	ld	r24, Z
    ba9e:	80 64       	ori	r24, 0x40	; 64
    baa0:	8c 93       	st	X, r24
    baa2:	df 91       	pop	r29
    baa4:	cf 91       	pop	r28
    baa6:	08 95       	ret

0000baa8 <LITE_MAKE_CC_FIFOP_INPUT>:
    baa8:	cf 93       	push	r28
    baaa:	df 93       	push	r29
    baac:	cd b7       	in	r28, 0x3d	; 61
    baae:	de b7       	in	r29, 0x3e	; 62
    bab0:	a2 e2       	ldi	r26, 0x22	; 34
    bab2:	b0 e0       	ldi	r27, 0x00	; 0
    bab4:	e2 e2       	ldi	r30, 0x22	; 34
    bab6:	f0 e0       	ldi	r31, 0x00	; 0
    bab8:	80 81       	ld	r24, Z
    baba:	8f 7b       	andi	r24, 0xBF	; 191
    babc:	8c 93       	st	X, r24
    babe:	df 91       	pop	r29
    bac0:	cf 91       	pop	r28
    bac2:	08 95       	ret

0000bac4 <LITE_SET_CC_FIFOP1_PIN>:
LITE_ASSIGN_PIN( CC_FIFOP1, E, 6 ); // fifo interrupt
    bac4:	cf 93       	push	r28
    bac6:	df 93       	push	r29
    bac8:	cd b7       	in	r28, 0x3d	; 61
    baca:	de b7       	in	r29, 0x3e	; 62
    bacc:	a3 e2       	ldi	r26, 0x23	; 35
    bace:	b0 e0       	ldi	r27, 0x00	; 0
    bad0:	e3 e2       	ldi	r30, 0x23	; 35
    bad2:	f0 e0       	ldi	r31, 0x00	; 0
    bad4:	80 81       	ld	r24, Z
    bad6:	80 64       	ori	r24, 0x40	; 64
    bad8:	8c 93       	st	X, r24
    bada:	df 91       	pop	r29
    badc:	cf 91       	pop	r28
    bade:	08 95       	ret

0000bae0 <LITE_CLR_CC_FIFOP1_PIN>:
    bae0:	cf 93       	push	r28
    bae2:	df 93       	push	r29
    bae4:	cd b7       	in	r28, 0x3d	; 61
    bae6:	de b7       	in	r29, 0x3e	; 62
    bae8:	a3 e2       	ldi	r26, 0x23	; 35
    baea:	b0 e0       	ldi	r27, 0x00	; 0
    baec:	e3 e2       	ldi	r30, 0x23	; 35
    baee:	f0 e0       	ldi	r31, 0x00	; 0
    baf0:	80 81       	ld	r24, Z
    baf2:	8f 7b       	andi	r24, 0xBF	; 191
    baf4:	8c 93       	st	X, r24
    baf6:	df 91       	pop	r29
    baf8:	cf 91       	pop	r28
    bafa:	08 95       	ret

0000bafc <LITE_READ_CC_FIFOP1_PIN>:
    bafc:	cf 93       	push	r28
    bafe:	df 93       	push	r29
    bb00:	cd b7       	in	r28, 0x3d	; 61
    bb02:	de b7       	in	r29, 0x3e	; 62
    bb04:	22 97       	sbiw	r28, 0x02	; 2
    bb06:	0f b6       	in	r0, 0x3f	; 63
    bb08:	f8 94       	cli
    bb0a:	de bf       	out	0x3e, r29	; 62
    bb0c:	0f be       	out	0x3f, r0	; 63
    bb0e:	cd bf       	out	0x3d, r28	; 61
    bb10:	e1 e2       	ldi	r30, 0x21	; 33
    bb12:	f0 e0       	ldi	r31, 0x00	; 0
    bb14:	80 81       	ld	r24, Z
    bb16:	99 27       	eor	r25, r25
    bb18:	80 74       	andi	r24, 0x40	; 64
    bb1a:	90 70       	andi	r25, 0x00	; 0
    bb1c:	9a 83       	std	Y+2, r25	; 0x02
    bb1e:	89 83       	std	Y+1, r24	; 0x01
    bb20:	89 81       	ldd	r24, Y+1	; 0x01
    bb22:	9a 81       	ldd	r25, Y+2	; 0x02
    bb24:	00 97       	sbiw	r24, 0x00	; 0
    bb26:	21 f0       	breq	.+8      	; 0xbb30 <LITE_READ_CC_FIFOP1_PIN+0x34>
    bb28:	81 e0       	ldi	r24, 0x01	; 1
    bb2a:	90 e0       	ldi	r25, 0x00	; 0
    bb2c:	9a 83       	std	Y+2, r25	; 0x02
    bb2e:	89 83       	std	Y+1, r24	; 0x01
    bb30:	89 81       	ldd	r24, Y+1	; 0x01
    bb32:	9a 81       	ldd	r25, Y+2	; 0x02
    bb34:	22 96       	adiw	r28, 0x02	; 2
    bb36:	0f b6       	in	r0, 0x3f	; 63
    bb38:	f8 94       	cli
    bb3a:	de bf       	out	0x3e, r29	; 62
    bb3c:	0f be       	out	0x3f, r0	; 63
    bb3e:	cd bf       	out	0x3d, r28	; 61
    bb40:	df 91       	pop	r29
    bb42:	cf 91       	pop	r28
    bb44:	08 95       	ret

0000bb46 <LITE_MAKE_CC_FIFOP1_OUTPUT>:
    bb46:	cf 93       	push	r28
    bb48:	df 93       	push	r29
    bb4a:	cd b7       	in	r28, 0x3d	; 61
    bb4c:	de b7       	in	r29, 0x3e	; 62
    bb4e:	a2 e2       	ldi	r26, 0x22	; 34
    bb50:	b0 e0       	ldi	r27, 0x00	; 0
    bb52:	e2 e2       	ldi	r30, 0x22	; 34
    bb54:	f0 e0       	ldi	r31, 0x00	; 0
    bb56:	80 81       	ld	r24, Z
    bb58:	80 64       	ori	r24, 0x40	; 64
    bb5a:	8c 93       	st	X, r24
    bb5c:	df 91       	pop	r29
    bb5e:	cf 91       	pop	r28
    bb60:	08 95       	ret

0000bb62 <LITE_MAKE_CC_FIFOP1_INPUT>:
    bb62:	cf 93       	push	r28
    bb64:	df 93       	push	r29
    bb66:	cd b7       	in	r28, 0x3d	; 61
    bb68:	de b7       	in	r29, 0x3e	; 62
    bb6a:	a2 e2       	ldi	r26, 0x22	; 34
    bb6c:	b0 e0       	ldi	r27, 0x00	; 0
    bb6e:	e2 e2       	ldi	r30, 0x22	; 34
    bb70:	f0 e0       	ldi	r31, 0x00	; 0
    bb72:	80 81       	ld	r24, Z
    bb74:	8f 7b       	andi	r24, 0xBF	; 191
    bb76:	8c 93       	st	X, r24
    bb78:	df 91       	pop	r29
    bb7a:	cf 91       	pop	r28
    bb7c:	08 95       	ret

0000bb7e <LITE_SET_CC_CCA_PIN>:
LITE_ASSIGN_PIN( CC_CCA, D, 6 ); // 
    bb7e:	cf 93       	push	r28
    bb80:	df 93       	push	r29
    bb82:	cd b7       	in	r28, 0x3d	; 61
    bb84:	de b7       	in	r29, 0x3e	; 62
    bb86:	a2 e3       	ldi	r26, 0x32	; 50
    bb88:	b0 e0       	ldi	r27, 0x00	; 0
    bb8a:	e2 e3       	ldi	r30, 0x32	; 50
    bb8c:	f0 e0       	ldi	r31, 0x00	; 0
    bb8e:	80 81       	ld	r24, Z
    bb90:	80 64       	ori	r24, 0x40	; 64
    bb92:	8c 93       	st	X, r24
    bb94:	df 91       	pop	r29
    bb96:	cf 91       	pop	r28
    bb98:	08 95       	ret

0000bb9a <LITE_CLR_CC_CCA_PIN>:
    bb9a:	cf 93       	push	r28
    bb9c:	df 93       	push	r29
    bb9e:	cd b7       	in	r28, 0x3d	; 61
    bba0:	de b7       	in	r29, 0x3e	; 62
    bba2:	a2 e3       	ldi	r26, 0x32	; 50
    bba4:	b0 e0       	ldi	r27, 0x00	; 0
    bba6:	e2 e3       	ldi	r30, 0x32	; 50
    bba8:	f0 e0       	ldi	r31, 0x00	; 0
    bbaa:	80 81       	ld	r24, Z
    bbac:	8f 7b       	andi	r24, 0xBF	; 191
    bbae:	8c 93       	st	X, r24
    bbb0:	df 91       	pop	r29
    bbb2:	cf 91       	pop	r28
    bbb4:	08 95       	ret

0000bbb6 <LITE_READ_CC_CCA_PIN>:
    bbb6:	cf 93       	push	r28
    bbb8:	df 93       	push	r29
    bbba:	cd b7       	in	r28, 0x3d	; 61
    bbbc:	de b7       	in	r29, 0x3e	; 62
    bbbe:	22 97       	sbiw	r28, 0x02	; 2
    bbc0:	0f b6       	in	r0, 0x3f	; 63
    bbc2:	f8 94       	cli
    bbc4:	de bf       	out	0x3e, r29	; 62
    bbc6:	0f be       	out	0x3f, r0	; 63
    bbc8:	cd bf       	out	0x3d, r28	; 61
    bbca:	e0 e3       	ldi	r30, 0x30	; 48
    bbcc:	f0 e0       	ldi	r31, 0x00	; 0
    bbce:	80 81       	ld	r24, Z
    bbd0:	99 27       	eor	r25, r25
    bbd2:	80 74       	andi	r24, 0x40	; 64
    bbd4:	90 70       	andi	r25, 0x00	; 0
    bbd6:	9a 83       	std	Y+2, r25	; 0x02
    bbd8:	89 83       	std	Y+1, r24	; 0x01
    bbda:	89 81       	ldd	r24, Y+1	; 0x01
    bbdc:	9a 81       	ldd	r25, Y+2	; 0x02
    bbde:	00 97       	sbiw	r24, 0x00	; 0
    bbe0:	21 f0       	breq	.+8      	; 0xbbea <LITE_READ_CC_CCA_PIN+0x34>
    bbe2:	81 e0       	ldi	r24, 0x01	; 1
    bbe4:	90 e0       	ldi	r25, 0x00	; 0
    bbe6:	9a 83       	std	Y+2, r25	; 0x02
    bbe8:	89 83       	std	Y+1, r24	; 0x01
    bbea:	89 81       	ldd	r24, Y+1	; 0x01
    bbec:	9a 81       	ldd	r25, Y+2	; 0x02
    bbee:	22 96       	adiw	r28, 0x02	; 2
    bbf0:	0f b6       	in	r0, 0x3f	; 63
    bbf2:	f8 94       	cli
    bbf4:	de bf       	out	0x3e, r29	; 62
    bbf6:	0f be       	out	0x3f, r0	; 63
    bbf8:	cd bf       	out	0x3d, r28	; 61
    bbfa:	df 91       	pop	r29
    bbfc:	cf 91       	pop	r28
    bbfe:	08 95       	ret

0000bc00 <LITE_MAKE_CC_CCA_OUTPUT>:
    bc00:	cf 93       	push	r28
    bc02:	df 93       	push	r29
    bc04:	cd b7       	in	r28, 0x3d	; 61
    bc06:	de b7       	in	r29, 0x3e	; 62
    bc08:	a1 e3       	ldi	r26, 0x31	; 49
    bc0a:	b0 e0       	ldi	r27, 0x00	; 0
    bc0c:	e1 e3       	ldi	r30, 0x31	; 49
    bc0e:	f0 e0       	ldi	r31, 0x00	; 0
    bc10:	80 81       	ld	r24, Z
    bc12:	80 64       	ori	r24, 0x40	; 64
    bc14:	8c 93       	st	X, r24
    bc16:	df 91       	pop	r29
    bc18:	cf 91       	pop	r28
    bc1a:	08 95       	ret

0000bc1c <LITE_MAKE_CC_CCA_INPUT>:
    bc1c:	cf 93       	push	r28
    bc1e:	df 93       	push	r29
    bc20:	cd b7       	in	r28, 0x3d	; 61
    bc22:	de b7       	in	r29, 0x3e	; 62
    bc24:	a1 e3       	ldi	r26, 0x31	; 49
    bc26:	b0 e0       	ldi	r27, 0x00	; 0
    bc28:	e1 e3       	ldi	r30, 0x31	; 49
    bc2a:	f0 e0       	ldi	r31, 0x00	; 0
    bc2c:	80 81       	ld	r24, Z
    bc2e:	8f 7b       	andi	r24, 0xBF	; 191
    bc30:	8c 93       	st	X, r24
    bc32:	df 91       	pop	r29
    bc34:	cf 91       	pop	r28
    bc36:	08 95       	ret

0000bc38 <LITE_SET_CC_SFD_PIN>:
LITE_ASSIGN_PIN( CC_SFD, D, 4 ); // chipcon packet arrival
    bc38:	cf 93       	push	r28
    bc3a:	df 93       	push	r29
    bc3c:	cd b7       	in	r28, 0x3d	; 61
    bc3e:	de b7       	in	r29, 0x3e	; 62
    bc40:	a2 e3       	ldi	r26, 0x32	; 50
    bc42:	b0 e0       	ldi	r27, 0x00	; 0
    bc44:	e2 e3       	ldi	r30, 0x32	; 50
    bc46:	f0 e0       	ldi	r31, 0x00	; 0
    bc48:	80 81       	ld	r24, Z
    bc4a:	80 61       	ori	r24, 0x10	; 16
    bc4c:	8c 93       	st	X, r24
    bc4e:	df 91       	pop	r29
    bc50:	cf 91       	pop	r28
    bc52:	08 95       	ret

0000bc54 <LITE_CLR_CC_SFD_PIN>:
    bc54:	cf 93       	push	r28
    bc56:	df 93       	push	r29
    bc58:	cd b7       	in	r28, 0x3d	; 61
    bc5a:	de b7       	in	r29, 0x3e	; 62
    bc5c:	a2 e3       	ldi	r26, 0x32	; 50
    bc5e:	b0 e0       	ldi	r27, 0x00	; 0
    bc60:	e2 e3       	ldi	r30, 0x32	; 50
    bc62:	f0 e0       	ldi	r31, 0x00	; 0
    bc64:	80 81       	ld	r24, Z
    bc66:	8f 7e       	andi	r24, 0xEF	; 239
    bc68:	8c 93       	st	X, r24
    bc6a:	df 91       	pop	r29
    bc6c:	cf 91       	pop	r28
    bc6e:	08 95       	ret

0000bc70 <LITE_READ_CC_SFD_PIN>:
    bc70:	cf 93       	push	r28
    bc72:	df 93       	push	r29
    bc74:	cd b7       	in	r28, 0x3d	; 61
    bc76:	de b7       	in	r29, 0x3e	; 62
    bc78:	22 97       	sbiw	r28, 0x02	; 2
    bc7a:	0f b6       	in	r0, 0x3f	; 63
    bc7c:	f8 94       	cli
    bc7e:	de bf       	out	0x3e, r29	; 62
    bc80:	0f be       	out	0x3f, r0	; 63
    bc82:	cd bf       	out	0x3d, r28	; 61
    bc84:	e0 e3       	ldi	r30, 0x30	; 48
    bc86:	f0 e0       	ldi	r31, 0x00	; 0
    bc88:	80 81       	ld	r24, Z
    bc8a:	99 27       	eor	r25, r25
    bc8c:	80 71       	andi	r24, 0x10	; 16
    bc8e:	90 70       	andi	r25, 0x00	; 0
    bc90:	9a 83       	std	Y+2, r25	; 0x02
    bc92:	89 83       	std	Y+1, r24	; 0x01
    bc94:	89 81       	ldd	r24, Y+1	; 0x01
    bc96:	9a 81       	ldd	r25, Y+2	; 0x02
    bc98:	00 97       	sbiw	r24, 0x00	; 0
    bc9a:	21 f0       	breq	.+8      	; 0xbca4 <LITE_READ_CC_SFD_PIN+0x34>
    bc9c:	81 e0       	ldi	r24, 0x01	; 1
    bc9e:	90 e0       	ldi	r25, 0x00	; 0
    bca0:	9a 83       	std	Y+2, r25	; 0x02
    bca2:	89 83       	std	Y+1, r24	; 0x01
    bca4:	89 81       	ldd	r24, Y+1	; 0x01
    bca6:	9a 81       	ldd	r25, Y+2	; 0x02
    bca8:	22 96       	adiw	r28, 0x02	; 2
    bcaa:	0f b6       	in	r0, 0x3f	; 63
    bcac:	f8 94       	cli
    bcae:	de bf       	out	0x3e, r29	; 62
    bcb0:	0f be       	out	0x3f, r0	; 63
    bcb2:	cd bf       	out	0x3d, r28	; 61
    bcb4:	df 91       	pop	r29
    bcb6:	cf 91       	pop	r28
    bcb8:	08 95       	ret

0000bcba <LITE_MAKE_CC_SFD_OUTPUT>:
    bcba:	cf 93       	push	r28
    bcbc:	df 93       	push	r29
    bcbe:	cd b7       	in	r28, 0x3d	; 61
    bcc0:	de b7       	in	r29, 0x3e	; 62
    bcc2:	a1 e3       	ldi	r26, 0x31	; 49
    bcc4:	b0 e0       	ldi	r27, 0x00	; 0
    bcc6:	e1 e3       	ldi	r30, 0x31	; 49
    bcc8:	f0 e0       	ldi	r31, 0x00	; 0
    bcca:	80 81       	ld	r24, Z
    bccc:	80 61       	ori	r24, 0x10	; 16
    bcce:	8c 93       	st	X, r24
    bcd0:	df 91       	pop	r29
    bcd2:	cf 91       	pop	r28
    bcd4:	08 95       	ret

0000bcd6 <LITE_MAKE_CC_SFD_INPUT>:
    bcd6:	cf 93       	push	r28
    bcd8:	df 93       	push	r29
    bcda:	cd b7       	in	r28, 0x3d	; 61
    bcdc:	de b7       	in	r29, 0x3e	; 62
    bcde:	a1 e3       	ldi	r26, 0x31	; 49
    bce0:	b0 e0       	ldi	r27, 0x00	; 0
    bce2:	e1 e3       	ldi	r30, 0x31	; 49
    bce4:	f0 e0       	ldi	r31, 0x00	; 0
    bce6:	80 81       	ld	r24, Z
    bce8:	8f 7e       	andi	r24, 0xEF	; 239
    bcea:	8c 93       	st	X, r24
    bcec:	df 91       	pop	r29
    bcee:	cf 91       	pop	r28
    bcf0:	08 95       	ret

0000bcf2 <LITE_SET_CC_CS_PIN>:
LITE_ASSIGN_PIN( CC_CS, B, 0 ); // chipcon enable
    bcf2:	cf 93       	push	r28
    bcf4:	df 93       	push	r29
    bcf6:	cd b7       	in	r28, 0x3d	; 61
    bcf8:	de b7       	in	r29, 0x3e	; 62
    bcfa:	a8 e3       	ldi	r26, 0x38	; 56
    bcfc:	b0 e0       	ldi	r27, 0x00	; 0
    bcfe:	e8 e3       	ldi	r30, 0x38	; 56
    bd00:	f0 e0       	ldi	r31, 0x00	; 0
    bd02:	80 81       	ld	r24, Z
    bd04:	81 60       	ori	r24, 0x01	; 1
    bd06:	8c 93       	st	X, r24
    bd08:	df 91       	pop	r29
    bd0a:	cf 91       	pop	r28
    bd0c:	08 95       	ret

0000bd0e <LITE_CLR_CC_CS_PIN>:
    bd0e:	cf 93       	push	r28
    bd10:	df 93       	push	r29
    bd12:	cd b7       	in	r28, 0x3d	; 61
    bd14:	de b7       	in	r29, 0x3e	; 62
    bd16:	a8 e3       	ldi	r26, 0x38	; 56
    bd18:	b0 e0       	ldi	r27, 0x00	; 0
    bd1a:	e8 e3       	ldi	r30, 0x38	; 56
    bd1c:	f0 e0       	ldi	r31, 0x00	; 0
    bd1e:	80 81       	ld	r24, Z
    bd20:	8e 7f       	andi	r24, 0xFE	; 254
    bd22:	8c 93       	st	X, r24
    bd24:	df 91       	pop	r29
    bd26:	cf 91       	pop	r28
    bd28:	08 95       	ret

0000bd2a <LITE_READ_CC_CS_PIN>:
    bd2a:	cf 93       	push	r28
    bd2c:	df 93       	push	r29
    bd2e:	cd b7       	in	r28, 0x3d	; 61
    bd30:	de b7       	in	r29, 0x3e	; 62
    bd32:	e6 e3       	ldi	r30, 0x36	; 54
    bd34:	f0 e0       	ldi	r31, 0x00	; 0
    bd36:	80 81       	ld	r24, Z
    bd38:	99 27       	eor	r25, r25
    bd3a:	81 70       	andi	r24, 0x01	; 1
    bd3c:	90 70       	andi	r25, 0x00	; 0
    bd3e:	df 91       	pop	r29
    bd40:	cf 91       	pop	r28
    bd42:	08 95       	ret

0000bd44 <LITE_MAKE_CC_CS_OUTPUT>:
    bd44:	cf 93       	push	r28
    bd46:	df 93       	push	r29
    bd48:	cd b7       	in	r28, 0x3d	; 61
    bd4a:	de b7       	in	r29, 0x3e	; 62
    bd4c:	a7 e3       	ldi	r26, 0x37	; 55
    bd4e:	b0 e0       	ldi	r27, 0x00	; 0
    bd50:	e7 e3       	ldi	r30, 0x37	; 55
    bd52:	f0 e0       	ldi	r31, 0x00	; 0
    bd54:	80 81       	ld	r24, Z
    bd56:	81 60       	ori	r24, 0x01	; 1
    bd58:	8c 93       	st	X, r24
    bd5a:	df 91       	pop	r29
    bd5c:	cf 91       	pop	r28
    bd5e:	08 95       	ret

0000bd60 <LITE_MAKE_CC_CS_INPUT>:
    bd60:	cf 93       	push	r28
    bd62:	df 93       	push	r29
    bd64:	cd b7       	in	r28, 0x3d	; 61
    bd66:	de b7       	in	r29, 0x3e	; 62
    bd68:	a7 e3       	ldi	r26, 0x37	; 55
    bd6a:	b0 e0       	ldi	r27, 0x00	; 0
    bd6c:	e7 e3       	ldi	r30, 0x37	; 55
    bd6e:	f0 e0       	ldi	r31, 0x00	; 0
    bd70:	80 81       	ld	r24, Z
    bd72:	8e 7f       	andi	r24, 0xFE	; 254
    bd74:	8c 93       	st	X, r24
    bd76:	df 91       	pop	r29
    bd78:	cf 91       	pop	r28
    bd7a:	08 95       	ret

0000bd7c <LITE_SET_CC_FIFO_PIN>:
LITE_ASSIGN_PIN( CC_FIFO, B, 7 ); // chipcon fifo
    bd7c:	cf 93       	push	r28
    bd7e:	df 93       	push	r29
    bd80:	cd b7       	in	r28, 0x3d	; 61
    bd82:	de b7       	in	r29, 0x3e	; 62
    bd84:	a8 e3       	ldi	r26, 0x38	; 56
    bd86:	b0 e0       	ldi	r27, 0x00	; 0
    bd88:	e8 e3       	ldi	r30, 0x38	; 56
    bd8a:	f0 e0       	ldi	r31, 0x00	; 0
    bd8c:	80 81       	ld	r24, Z
    bd8e:	80 68       	ori	r24, 0x80	; 128
    bd90:	8c 93       	st	X, r24
    bd92:	df 91       	pop	r29
    bd94:	cf 91       	pop	r28
    bd96:	08 95       	ret

0000bd98 <LITE_CLR_CC_FIFO_PIN>:
    bd98:	cf 93       	push	r28
    bd9a:	df 93       	push	r29
    bd9c:	cd b7       	in	r28, 0x3d	; 61
    bd9e:	de b7       	in	r29, 0x3e	; 62
    bda0:	a8 e3       	ldi	r26, 0x38	; 56
    bda2:	b0 e0       	ldi	r27, 0x00	; 0
    bda4:	e8 e3       	ldi	r30, 0x38	; 56
    bda6:	f0 e0       	ldi	r31, 0x00	; 0
    bda8:	90 81       	ld	r25, Z
    bdaa:	8f e7       	ldi	r24, 0x7F	; 127
    bdac:	89 23       	and	r24, r25
    bdae:	8c 93       	st	X, r24
    bdb0:	df 91       	pop	r29
    bdb2:	cf 91       	pop	r28
    bdb4:	08 95       	ret

0000bdb6 <LITE_READ_CC_FIFO_PIN>:
    bdb6:	cf 93       	push	r28
    bdb8:	df 93       	push	r29
    bdba:	cd b7       	in	r28, 0x3d	; 61
    bdbc:	de b7       	in	r29, 0x3e	; 62
    bdbe:	22 97       	sbiw	r28, 0x02	; 2
    bdc0:	0f b6       	in	r0, 0x3f	; 63
    bdc2:	f8 94       	cli
    bdc4:	de bf       	out	0x3e, r29	; 62
    bdc6:	0f be       	out	0x3f, r0	; 63
    bdc8:	cd bf       	out	0x3d, r28	; 61
    bdca:	e6 e3       	ldi	r30, 0x36	; 54
    bdcc:	f0 e0       	ldi	r31, 0x00	; 0
    bdce:	80 81       	ld	r24, Z
    bdd0:	1a 82       	std	Y+2, r1	; 0x02
    bdd2:	19 82       	std	Y+1, r1	; 0x01
    bdd4:	88 23       	and	r24, r24
    bdd6:	24 f4       	brge	.+8      	; 0xbde0 <LITE_READ_CC_FIFO_PIN+0x2a>
    bdd8:	81 e0       	ldi	r24, 0x01	; 1
    bdda:	90 e0       	ldi	r25, 0x00	; 0
    bddc:	9a 83       	std	Y+2, r25	; 0x02
    bdde:	89 83       	std	Y+1, r24	; 0x01
    bde0:	89 81       	ldd	r24, Y+1	; 0x01
    bde2:	9a 81       	ldd	r25, Y+2	; 0x02
    bde4:	22 96       	adiw	r28, 0x02	; 2
    bde6:	0f b6       	in	r0, 0x3f	; 63
    bde8:	f8 94       	cli
    bdea:	de bf       	out	0x3e, r29	; 62
    bdec:	0f be       	out	0x3f, r0	; 63
    bdee:	cd bf       	out	0x3d, r28	; 61
    bdf0:	df 91       	pop	r29
    bdf2:	cf 91       	pop	r28
    bdf4:	08 95       	ret

0000bdf6 <LITE_MAKE_CC_FIFO_OUTPUT>:
    bdf6:	cf 93       	push	r28
    bdf8:	df 93       	push	r29
    bdfa:	cd b7       	in	r28, 0x3d	; 61
    bdfc:	de b7       	in	r29, 0x3e	; 62
    bdfe:	a7 e3       	ldi	r26, 0x37	; 55
    be00:	b0 e0       	ldi	r27, 0x00	; 0
    be02:	e7 e3       	ldi	r30, 0x37	; 55
    be04:	f0 e0       	ldi	r31, 0x00	; 0
    be06:	80 81       	ld	r24, Z
    be08:	80 68       	ori	r24, 0x80	; 128
    be0a:	8c 93       	st	X, r24
    be0c:	df 91       	pop	r29
    be0e:	cf 91       	pop	r28
    be10:	08 95       	ret

0000be12 <LITE_MAKE_CC_FIFO_INPUT>:
    be12:	cf 93       	push	r28
    be14:	df 93       	push	r29
    be16:	cd b7       	in	r28, 0x3d	; 61
    be18:	de b7       	in	r29, 0x3e	; 62
    be1a:	a7 e3       	ldi	r26, 0x37	; 55
    be1c:	b0 e0       	ldi	r27, 0x00	; 0
    be1e:	e7 e3       	ldi	r30, 0x37	; 55
    be20:	f0 e0       	ldi	r31, 0x00	; 0
    be22:	90 81       	ld	r25, Z
    be24:	8f e7       	ldi	r24, 0x7F	; 127
    be26:	89 23       	and	r24, r25
    be28:	8c 93       	st	X, r24
    be2a:	df 91       	pop	r29
    be2c:	cf 91       	pop	r28
    be2e:	08 95       	ret

0000be30 <LITE_SET_RADIO_CCA_PIN>:
LITE_ASSIGN_PIN( RADIO_CCA, D, 6 ); // 
    be30:	cf 93       	push	r28
    be32:	df 93       	push	r29
    be34:	cd b7       	in	r28, 0x3d	; 61
    be36:	de b7       	in	r29, 0x3e	; 62
    be38:	a2 e3       	ldi	r26, 0x32	; 50
    be3a:	b0 e0       	ldi	r27, 0x00	; 0
    be3c:	e2 e3       	ldi	r30, 0x32	; 50
    be3e:	f0 e0       	ldi	r31, 0x00	; 0
    be40:	80 81       	ld	r24, Z
    be42:	80 64       	ori	r24, 0x40	; 64
    be44:	8c 93       	st	X, r24
    be46:	df 91       	pop	r29
    be48:	cf 91       	pop	r28
    be4a:	08 95       	ret

0000be4c <LITE_CLR_RADIO_CCA_PIN>:
    be4c:	cf 93       	push	r28
    be4e:	df 93       	push	r29
    be50:	cd b7       	in	r28, 0x3d	; 61
    be52:	de b7       	in	r29, 0x3e	; 62
    be54:	a2 e3       	ldi	r26, 0x32	; 50
    be56:	b0 e0       	ldi	r27, 0x00	; 0
    be58:	e2 e3       	ldi	r30, 0x32	; 50
    be5a:	f0 e0       	ldi	r31, 0x00	; 0
    be5c:	80 81       	ld	r24, Z
    be5e:	8f 7b       	andi	r24, 0xBF	; 191
    be60:	8c 93       	st	X, r24
    be62:	df 91       	pop	r29
    be64:	cf 91       	pop	r28
    be66:	08 95       	ret

0000be68 <LITE_READ_RADIO_CCA_PIN>:
    be68:	cf 93       	push	r28
    be6a:	df 93       	push	r29
    be6c:	cd b7       	in	r28, 0x3d	; 61
    be6e:	de b7       	in	r29, 0x3e	; 62
    be70:	22 97       	sbiw	r28, 0x02	; 2
    be72:	0f b6       	in	r0, 0x3f	; 63
    be74:	f8 94       	cli
    be76:	de bf       	out	0x3e, r29	; 62
    be78:	0f be       	out	0x3f, r0	; 63
    be7a:	cd bf       	out	0x3d, r28	; 61
    be7c:	e0 e3       	ldi	r30, 0x30	; 48
    be7e:	f0 e0       	ldi	r31, 0x00	; 0
    be80:	80 81       	ld	r24, Z
    be82:	99 27       	eor	r25, r25
    be84:	80 74       	andi	r24, 0x40	; 64
    be86:	90 70       	andi	r25, 0x00	; 0
    be88:	9a 83       	std	Y+2, r25	; 0x02
    be8a:	89 83       	std	Y+1, r24	; 0x01
    be8c:	89 81       	ldd	r24, Y+1	; 0x01
    be8e:	9a 81       	ldd	r25, Y+2	; 0x02
    be90:	00 97       	sbiw	r24, 0x00	; 0
    be92:	21 f0       	breq	.+8      	; 0xbe9c <LITE_READ_RADIO_CCA_PIN+0x34>
    be94:	81 e0       	ldi	r24, 0x01	; 1
    be96:	90 e0       	ldi	r25, 0x00	; 0
    be98:	9a 83       	std	Y+2, r25	; 0x02
    be9a:	89 83       	std	Y+1, r24	; 0x01
    be9c:	89 81       	ldd	r24, Y+1	; 0x01
    be9e:	9a 81       	ldd	r25, Y+2	; 0x02
    bea0:	22 96       	adiw	r28, 0x02	; 2
    bea2:	0f b6       	in	r0, 0x3f	; 63
    bea4:	f8 94       	cli
    bea6:	de bf       	out	0x3e, r29	; 62
    bea8:	0f be       	out	0x3f, r0	; 63
    beaa:	cd bf       	out	0x3d, r28	; 61
    beac:	df 91       	pop	r29
    beae:	cf 91       	pop	r28
    beb0:	08 95       	ret

0000beb2 <LITE_MAKE_RADIO_CCA_OUTPUT>:
    beb2:	cf 93       	push	r28
    beb4:	df 93       	push	r29
    beb6:	cd b7       	in	r28, 0x3d	; 61
    beb8:	de b7       	in	r29, 0x3e	; 62
    beba:	a1 e3       	ldi	r26, 0x31	; 49
    bebc:	b0 e0       	ldi	r27, 0x00	; 0
    bebe:	e1 e3       	ldi	r30, 0x31	; 49
    bec0:	f0 e0       	ldi	r31, 0x00	; 0
    bec2:	80 81       	ld	r24, Z
    bec4:	80 64       	ori	r24, 0x40	; 64
    bec6:	8c 93       	st	X, r24
    bec8:	df 91       	pop	r29
    beca:	cf 91       	pop	r28
    becc:	08 95       	ret

0000bece <LITE_MAKE_RADIO_CCA_INPUT>:
    bece:	cf 93       	push	r28
    bed0:	df 93       	push	r29
    bed2:	cd b7       	in	r28, 0x3d	; 61
    bed4:	de b7       	in	r29, 0x3e	; 62
    bed6:	a1 e3       	ldi	r26, 0x31	; 49
    bed8:	b0 e0       	ldi	r27, 0x00	; 0
    beda:	e1 e3       	ldi	r30, 0x31	; 49
    bedc:	f0 e0       	ldi	r31, 0x00	; 0
    bede:	80 81       	ld	r24, Z
    bee0:	8f 7b       	andi	r24, 0xBF	; 191
    bee2:	8c 93       	st	X, r24
    bee4:	df 91       	pop	r29
    bee6:	cf 91       	pop	r28
    bee8:	08 95       	ret

0000beea <LITE_SET_FLASH_SELECT_PIN>:
// Flash assignments
LITE_ASSIGN_PIN( FLASH_SELECT, A, 3 );
    beea:	cf 93       	push	r28
    beec:	df 93       	push	r29
    beee:	cd b7       	in	r28, 0x3d	; 61
    bef0:	de b7       	in	r29, 0x3e	; 62
    bef2:	ab e3       	ldi	r26, 0x3B	; 59
    bef4:	b0 e0       	ldi	r27, 0x00	; 0
    bef6:	eb e3       	ldi	r30, 0x3B	; 59
    bef8:	f0 e0       	ldi	r31, 0x00	; 0
    befa:	80 81       	ld	r24, Z
    befc:	88 60       	ori	r24, 0x08	; 8
    befe:	8c 93       	st	X, r24
    bf00:	df 91       	pop	r29
    bf02:	cf 91       	pop	r28
    bf04:	08 95       	ret

0000bf06 <LITE_CLR_FLASH_SELECT_PIN>:
    bf06:	cf 93       	push	r28
    bf08:	df 93       	push	r29
    bf0a:	cd b7       	in	r28, 0x3d	; 61
    bf0c:	de b7       	in	r29, 0x3e	; 62
    bf0e:	ab e3       	ldi	r26, 0x3B	; 59
    bf10:	b0 e0       	ldi	r27, 0x00	; 0
    bf12:	eb e3       	ldi	r30, 0x3B	; 59
    bf14:	f0 e0       	ldi	r31, 0x00	; 0
    bf16:	80 81       	ld	r24, Z
    bf18:	87 7f       	andi	r24, 0xF7	; 247
    bf1a:	8c 93       	st	X, r24
    bf1c:	df 91       	pop	r29
    bf1e:	cf 91       	pop	r28
    bf20:	08 95       	ret

0000bf22 <LITE_READ_FLASH_SELECT_PIN>:
    bf22:	cf 93       	push	r28
    bf24:	df 93       	push	r29
    bf26:	cd b7       	in	r28, 0x3d	; 61
    bf28:	de b7       	in	r29, 0x3e	; 62
    bf2a:	22 97       	sbiw	r28, 0x02	; 2
    bf2c:	0f b6       	in	r0, 0x3f	; 63
    bf2e:	f8 94       	cli
    bf30:	de bf       	out	0x3e, r29	; 62
    bf32:	0f be       	out	0x3f, r0	; 63
    bf34:	cd bf       	out	0x3d, r28	; 61
    bf36:	e9 e3       	ldi	r30, 0x39	; 57
    bf38:	f0 e0       	ldi	r31, 0x00	; 0
    bf3a:	80 81       	ld	r24, Z
    bf3c:	99 27       	eor	r25, r25
    bf3e:	88 70       	andi	r24, 0x08	; 8
    bf40:	90 70       	andi	r25, 0x00	; 0
    bf42:	9a 83       	std	Y+2, r25	; 0x02
    bf44:	89 83       	std	Y+1, r24	; 0x01
    bf46:	89 81       	ldd	r24, Y+1	; 0x01
    bf48:	9a 81       	ldd	r25, Y+2	; 0x02
    bf4a:	00 97       	sbiw	r24, 0x00	; 0
    bf4c:	21 f0       	breq	.+8      	; 0xbf56 <LITE_READ_FLASH_SELECT_PIN+0x34>
    bf4e:	81 e0       	ldi	r24, 0x01	; 1
    bf50:	90 e0       	ldi	r25, 0x00	; 0
    bf52:	9a 83       	std	Y+2, r25	; 0x02
    bf54:	89 83       	std	Y+1, r24	; 0x01
    bf56:	89 81       	ldd	r24, Y+1	; 0x01
    bf58:	9a 81       	ldd	r25, Y+2	; 0x02
    bf5a:	22 96       	adiw	r28, 0x02	; 2
    bf5c:	0f b6       	in	r0, 0x3f	; 63
    bf5e:	f8 94       	cli
    bf60:	de bf       	out	0x3e, r29	; 62
    bf62:	0f be       	out	0x3f, r0	; 63
    bf64:	cd bf       	out	0x3d, r28	; 61
    bf66:	df 91       	pop	r29
    bf68:	cf 91       	pop	r28
    bf6a:	08 95       	ret

0000bf6c <LITE_MAKE_FLASH_SELECT_OUTPUT>:
    bf6c:	cf 93       	push	r28
    bf6e:	df 93       	push	r29
    bf70:	cd b7       	in	r28, 0x3d	; 61
    bf72:	de b7       	in	r29, 0x3e	; 62
    bf74:	aa e3       	ldi	r26, 0x3A	; 58
    bf76:	b0 e0       	ldi	r27, 0x00	; 0
    bf78:	ea e3       	ldi	r30, 0x3A	; 58
    bf7a:	f0 e0       	ldi	r31, 0x00	; 0
    bf7c:	80 81       	ld	r24, Z
    bf7e:	88 60       	ori	r24, 0x08	; 8
    bf80:	8c 93       	st	X, r24
    bf82:	df 91       	pop	r29
    bf84:	cf 91       	pop	r28
    bf86:	08 95       	ret

0000bf88 <LITE_MAKE_FLASH_SELECT_INPUT>:
    bf88:	cf 93       	push	r28
    bf8a:	df 93       	push	r29
    bf8c:	cd b7       	in	r28, 0x3d	; 61
    bf8e:	de b7       	in	r29, 0x3e	; 62
    bf90:	aa e3       	ldi	r26, 0x3A	; 58
    bf92:	b0 e0       	ldi	r27, 0x00	; 0
    bf94:	ea e3       	ldi	r30, 0x3A	; 58
    bf96:	f0 e0       	ldi	r31, 0x00	; 0
    bf98:	80 81       	ld	r24, Z
    bf9a:	87 7f       	andi	r24, 0xF7	; 247
    bf9c:	8c 93       	st	X, r24
    bf9e:	df 91       	pop	r29
    bfa0:	cf 91       	pop	r28
    bfa2:	08 95       	ret

0000bfa4 <LITE_SET_FLASH_CLK_PIN>:
LITE_ASSIGN_PIN( FLASH_CLK, D, 5 );
    bfa4:	cf 93       	push	r28
    bfa6:	df 93       	push	r29
    bfa8:	cd b7       	in	r28, 0x3d	; 61
    bfaa:	de b7       	in	r29, 0x3e	; 62
    bfac:	a2 e3       	ldi	r26, 0x32	; 50
    bfae:	b0 e0       	ldi	r27, 0x00	; 0
    bfb0:	e2 e3       	ldi	r30, 0x32	; 50
    bfb2:	f0 e0       	ldi	r31, 0x00	; 0
    bfb4:	80 81       	ld	r24, Z
    bfb6:	80 62       	ori	r24, 0x20	; 32
    bfb8:	8c 93       	st	X, r24
    bfba:	df 91       	pop	r29
    bfbc:	cf 91       	pop	r28
    bfbe:	08 95       	ret

0000bfc0 <LITE_CLR_FLASH_CLK_PIN>:
    bfc0:	cf 93       	push	r28
    bfc2:	df 93       	push	r29
    bfc4:	cd b7       	in	r28, 0x3d	; 61
    bfc6:	de b7       	in	r29, 0x3e	; 62
    bfc8:	a2 e3       	ldi	r26, 0x32	; 50
    bfca:	b0 e0       	ldi	r27, 0x00	; 0
    bfcc:	e2 e3       	ldi	r30, 0x32	; 50
    bfce:	f0 e0       	ldi	r31, 0x00	; 0
    bfd0:	80 81       	ld	r24, Z
    bfd2:	8f 7d       	andi	r24, 0xDF	; 223
    bfd4:	8c 93       	st	X, r24
    bfd6:	df 91       	pop	r29
    bfd8:	cf 91       	pop	r28
    bfda:	08 95       	ret

0000bfdc <LITE_READ_FLASH_CLK_PIN>:
    bfdc:	cf 93       	push	r28
    bfde:	df 93       	push	r29
    bfe0:	cd b7       	in	r28, 0x3d	; 61
    bfe2:	de b7       	in	r29, 0x3e	; 62
    bfe4:	22 97       	sbiw	r28, 0x02	; 2
    bfe6:	0f b6       	in	r0, 0x3f	; 63
    bfe8:	f8 94       	cli
    bfea:	de bf       	out	0x3e, r29	; 62
    bfec:	0f be       	out	0x3f, r0	; 63
    bfee:	cd bf       	out	0x3d, r28	; 61
    bff0:	e0 e3       	ldi	r30, 0x30	; 48
    bff2:	f0 e0       	ldi	r31, 0x00	; 0
    bff4:	80 81       	ld	r24, Z
    bff6:	99 27       	eor	r25, r25
    bff8:	80 72       	andi	r24, 0x20	; 32
    bffa:	90 70       	andi	r25, 0x00	; 0
    bffc:	9a 83       	std	Y+2, r25	; 0x02
    bffe:	89 83       	std	Y+1, r24	; 0x01
    c000:	89 81       	ldd	r24, Y+1	; 0x01
    c002:	9a 81       	ldd	r25, Y+2	; 0x02
    c004:	00 97       	sbiw	r24, 0x00	; 0
    c006:	21 f0       	breq	.+8      	; 0xc010 <LITE_READ_FLASH_CLK_PIN+0x34>
    c008:	81 e0       	ldi	r24, 0x01	; 1
    c00a:	90 e0       	ldi	r25, 0x00	; 0
    c00c:	9a 83       	std	Y+2, r25	; 0x02
    c00e:	89 83       	std	Y+1, r24	; 0x01
    c010:	89 81       	ldd	r24, Y+1	; 0x01
    c012:	9a 81       	ldd	r25, Y+2	; 0x02
    c014:	22 96       	adiw	r28, 0x02	; 2
    c016:	0f b6       	in	r0, 0x3f	; 63
    c018:	f8 94       	cli
    c01a:	de bf       	out	0x3e, r29	; 62
    c01c:	0f be       	out	0x3f, r0	; 63
    c01e:	cd bf       	out	0x3d, r28	; 61
    c020:	df 91       	pop	r29
    c022:	cf 91       	pop	r28
    c024:	08 95       	ret

0000c026 <LITE_MAKE_FLASH_CLK_OUTPUT>:
    c026:	cf 93       	push	r28
    c028:	df 93       	push	r29
    c02a:	cd b7       	in	r28, 0x3d	; 61
    c02c:	de b7       	in	r29, 0x3e	; 62
    c02e:	a1 e3       	ldi	r26, 0x31	; 49
    c030:	b0 e0       	ldi	r27, 0x00	; 0
    c032:	e1 e3       	ldi	r30, 0x31	; 49
    c034:	f0 e0       	ldi	r31, 0x00	; 0
    c036:	80 81       	ld	r24, Z
    c038:	80 62       	ori	r24, 0x20	; 32
    c03a:	8c 93       	st	X, r24
    c03c:	df 91       	pop	r29
    c03e:	cf 91       	pop	r28
    c040:	08 95       	ret

0000c042 <LITE_MAKE_FLASH_CLK_INPUT>:
    c042:	cf 93       	push	r28
    c044:	df 93       	push	r29
    c046:	cd b7       	in	r28, 0x3d	; 61
    c048:	de b7       	in	r29, 0x3e	; 62
    c04a:	a1 e3       	ldi	r26, 0x31	; 49
    c04c:	b0 e0       	ldi	r27, 0x00	; 0
    c04e:	e1 e3       	ldi	r30, 0x31	; 49
    c050:	f0 e0       	ldi	r31, 0x00	; 0
    c052:	80 81       	ld	r24, Z
    c054:	8f 7d       	andi	r24, 0xDF	; 223
    c056:	8c 93       	st	X, r24
    c058:	df 91       	pop	r29
    c05a:	cf 91       	pop	r28
    c05c:	08 95       	ret

0000c05e <LITE_SET_FLASH_OUT_PIN>:
LITE_ASSIGN_PIN( FLASH_OUT, D, 3 );
    c05e:	cf 93       	push	r28
    c060:	df 93       	push	r29
    c062:	cd b7       	in	r28, 0x3d	; 61
    c064:	de b7       	in	r29, 0x3e	; 62
    c066:	a2 e3       	ldi	r26, 0x32	; 50
    c068:	b0 e0       	ldi	r27, 0x00	; 0
    c06a:	e2 e3       	ldi	r30, 0x32	; 50
    c06c:	f0 e0       	ldi	r31, 0x00	; 0
    c06e:	80 81       	ld	r24, Z
    c070:	88 60       	ori	r24, 0x08	; 8
    c072:	8c 93       	st	X, r24
    c074:	df 91       	pop	r29
    c076:	cf 91       	pop	r28
    c078:	08 95       	ret

0000c07a <LITE_CLR_FLASH_OUT_PIN>:
    c07a:	cf 93       	push	r28
    c07c:	df 93       	push	r29
    c07e:	cd b7       	in	r28, 0x3d	; 61
    c080:	de b7       	in	r29, 0x3e	; 62
    c082:	a2 e3       	ldi	r26, 0x32	; 50
    c084:	b0 e0       	ldi	r27, 0x00	; 0
    c086:	e2 e3       	ldi	r30, 0x32	; 50
    c088:	f0 e0       	ldi	r31, 0x00	; 0
    c08a:	80 81       	ld	r24, Z
    c08c:	87 7f       	andi	r24, 0xF7	; 247
    c08e:	8c 93       	st	X, r24
    c090:	df 91       	pop	r29
    c092:	cf 91       	pop	r28
    c094:	08 95       	ret

0000c096 <LITE_READ_FLASH_OUT_PIN>:
    c096:	cf 93       	push	r28
    c098:	df 93       	push	r29
    c09a:	cd b7       	in	r28, 0x3d	; 61
    c09c:	de b7       	in	r29, 0x3e	; 62
    c09e:	22 97       	sbiw	r28, 0x02	; 2
    c0a0:	0f b6       	in	r0, 0x3f	; 63
    c0a2:	f8 94       	cli
    c0a4:	de bf       	out	0x3e, r29	; 62
    c0a6:	0f be       	out	0x3f, r0	; 63
    c0a8:	cd bf       	out	0x3d, r28	; 61
    c0aa:	e0 e3       	ldi	r30, 0x30	; 48
    c0ac:	f0 e0       	ldi	r31, 0x00	; 0
    c0ae:	80 81       	ld	r24, Z
    c0b0:	99 27       	eor	r25, r25
    c0b2:	88 70       	andi	r24, 0x08	; 8
    c0b4:	90 70       	andi	r25, 0x00	; 0
    c0b6:	9a 83       	std	Y+2, r25	; 0x02
    c0b8:	89 83       	std	Y+1, r24	; 0x01
    c0ba:	89 81       	ldd	r24, Y+1	; 0x01
    c0bc:	9a 81       	ldd	r25, Y+2	; 0x02
    c0be:	00 97       	sbiw	r24, 0x00	; 0
    c0c0:	21 f0       	breq	.+8      	; 0xc0ca <LITE_READ_FLASH_OUT_PIN+0x34>
    c0c2:	81 e0       	ldi	r24, 0x01	; 1
    c0c4:	90 e0       	ldi	r25, 0x00	; 0
    c0c6:	9a 83       	std	Y+2, r25	; 0x02
    c0c8:	89 83       	std	Y+1, r24	; 0x01
    c0ca:	89 81       	ldd	r24, Y+1	; 0x01
    c0cc:	9a 81       	ldd	r25, Y+2	; 0x02
    c0ce:	22 96       	adiw	r28, 0x02	; 2
    c0d0:	0f b6       	in	r0, 0x3f	; 63
    c0d2:	f8 94       	cli
    c0d4:	de bf       	out	0x3e, r29	; 62
    c0d6:	0f be       	out	0x3f, r0	; 63
    c0d8:	cd bf       	out	0x3d, r28	; 61
    c0da:	df 91       	pop	r29
    c0dc:	cf 91       	pop	r28
    c0de:	08 95       	ret

0000c0e0 <LITE_MAKE_FLASH_OUT_OUTPUT>:
    c0e0:	cf 93       	push	r28
    c0e2:	df 93       	push	r29
    c0e4:	cd b7       	in	r28, 0x3d	; 61
    c0e6:	de b7       	in	r29, 0x3e	; 62
    c0e8:	a1 e3       	ldi	r26, 0x31	; 49
    c0ea:	b0 e0       	ldi	r27, 0x00	; 0
    c0ec:	e1 e3       	ldi	r30, 0x31	; 49
    c0ee:	f0 e0       	ldi	r31, 0x00	; 0
    c0f0:	80 81       	ld	r24, Z
    c0f2:	88 60       	ori	r24, 0x08	; 8
    c0f4:	8c 93       	st	X, r24
    c0f6:	df 91       	pop	r29
    c0f8:	cf 91       	pop	r28
    c0fa:	08 95       	ret

0000c0fc <LITE_MAKE_FLASH_OUT_INPUT>:
    c0fc:	cf 93       	push	r28
    c0fe:	df 93       	push	r29
    c100:	cd b7       	in	r28, 0x3d	; 61
    c102:	de b7       	in	r29, 0x3e	; 62
    c104:	a1 e3       	ldi	r26, 0x31	; 49
    c106:	b0 e0       	ldi	r27, 0x00	; 0
    c108:	e1 e3       	ldi	r30, 0x31	; 49
    c10a:	f0 e0       	ldi	r31, 0x00	; 0
    c10c:	80 81       	ld	r24, Z
    c10e:	87 7f       	andi	r24, 0xF7	; 247
    c110:	8c 93       	st	X, r24
    c112:	df 91       	pop	r29
    c114:	cf 91       	pop	r28
    c116:	08 95       	ret

0000c118 <LITE_SET_FLASH_IN_PIN>:
LITE_ASSIGN_PIN( FLASH_IN, D, 2 );
    c118:	cf 93       	push	r28
    c11a:	df 93       	push	r29
    c11c:	cd b7       	in	r28, 0x3d	; 61
    c11e:	de b7       	in	r29, 0x3e	; 62
    c120:	a2 e3       	ldi	r26, 0x32	; 50
    c122:	b0 e0       	ldi	r27, 0x00	; 0
    c124:	e2 e3       	ldi	r30, 0x32	; 50
    c126:	f0 e0       	ldi	r31, 0x00	; 0
    c128:	80 81       	ld	r24, Z
    c12a:	84 60       	ori	r24, 0x04	; 4
    c12c:	8c 93       	st	X, r24
    c12e:	df 91       	pop	r29
    c130:	cf 91       	pop	r28
    c132:	08 95       	ret

0000c134 <LITE_CLR_FLASH_IN_PIN>:
    c134:	cf 93       	push	r28
    c136:	df 93       	push	r29
    c138:	cd b7       	in	r28, 0x3d	; 61
    c13a:	de b7       	in	r29, 0x3e	; 62
    c13c:	a2 e3       	ldi	r26, 0x32	; 50
    c13e:	b0 e0       	ldi	r27, 0x00	; 0
    c140:	e2 e3       	ldi	r30, 0x32	; 50
    c142:	f0 e0       	ldi	r31, 0x00	; 0
    c144:	80 81       	ld	r24, Z
    c146:	8b 7f       	andi	r24, 0xFB	; 251
    c148:	8c 93       	st	X, r24
    c14a:	df 91       	pop	r29
    c14c:	cf 91       	pop	r28
    c14e:	08 95       	ret

0000c150 <LITE_READ_FLASH_IN_PIN>:
    c150:	cf 93       	push	r28
    c152:	df 93       	push	r29
    c154:	cd b7       	in	r28, 0x3d	; 61
    c156:	de b7       	in	r29, 0x3e	; 62
    c158:	22 97       	sbiw	r28, 0x02	; 2
    c15a:	0f b6       	in	r0, 0x3f	; 63
    c15c:	f8 94       	cli
    c15e:	de bf       	out	0x3e, r29	; 62
    c160:	0f be       	out	0x3f, r0	; 63
    c162:	cd bf       	out	0x3d, r28	; 61
    c164:	e0 e3       	ldi	r30, 0x30	; 48
    c166:	f0 e0       	ldi	r31, 0x00	; 0
    c168:	80 81       	ld	r24, Z
    c16a:	99 27       	eor	r25, r25
    c16c:	84 70       	andi	r24, 0x04	; 4
    c16e:	90 70       	andi	r25, 0x00	; 0
    c170:	9a 83       	std	Y+2, r25	; 0x02
    c172:	89 83       	std	Y+1, r24	; 0x01
    c174:	89 81       	ldd	r24, Y+1	; 0x01
    c176:	9a 81       	ldd	r25, Y+2	; 0x02
    c178:	00 97       	sbiw	r24, 0x00	; 0
    c17a:	21 f0       	breq	.+8      	; 0xc184 <LITE_READ_FLASH_IN_PIN+0x34>
    c17c:	81 e0       	ldi	r24, 0x01	; 1
    c17e:	90 e0       	ldi	r25, 0x00	; 0
    c180:	9a 83       	std	Y+2, r25	; 0x02
    c182:	89 83       	std	Y+1, r24	; 0x01
    c184:	89 81       	ldd	r24, Y+1	; 0x01
    c186:	9a 81       	ldd	r25, Y+2	; 0x02
    c188:	22 96       	adiw	r28, 0x02	; 2
    c18a:	0f b6       	in	r0, 0x3f	; 63
    c18c:	f8 94       	cli
    c18e:	de bf       	out	0x3e, r29	; 62
    c190:	0f be       	out	0x3f, r0	; 63
    c192:	cd bf       	out	0x3d, r28	; 61
    c194:	df 91       	pop	r29
    c196:	cf 91       	pop	r28
    c198:	08 95       	ret

0000c19a <LITE_MAKE_FLASH_IN_OUTPUT>:
    c19a:	cf 93       	push	r28
    c19c:	df 93       	push	r29
    c19e:	cd b7       	in	r28, 0x3d	; 61
    c1a0:	de b7       	in	r29, 0x3e	; 62
    c1a2:	a1 e3       	ldi	r26, 0x31	; 49
    c1a4:	b0 e0       	ldi	r27, 0x00	; 0
    c1a6:	e1 e3       	ldi	r30, 0x31	; 49
    c1a8:	f0 e0       	ldi	r31, 0x00	; 0
    c1aa:	80 81       	ld	r24, Z
    c1ac:	84 60       	ori	r24, 0x04	; 4
    c1ae:	8c 93       	st	X, r24
    c1b0:	df 91       	pop	r29
    c1b2:	cf 91       	pop	r28
    c1b4:	08 95       	ret

0000c1b6 <LITE_MAKE_FLASH_IN_INPUT>:
    c1b6:	cf 93       	push	r28
    c1b8:	df 93       	push	r29
    c1ba:	cd b7       	in	r28, 0x3d	; 61
    c1bc:	de b7       	in	r29, 0x3e	; 62
    c1be:	a1 e3       	ldi	r26, 0x31	; 49
    c1c0:	b0 e0       	ldi	r27, 0x00	; 0
    c1c2:	e1 e3       	ldi	r30, 0x31	; 49
    c1c4:	f0 e0       	ldi	r31, 0x00	; 0
    c1c6:	80 81       	ld	r24, Z
    c1c8:	8b 7f       	andi	r24, 0xFB	; 251
    c1ca:	8c 93       	st	X, r24
    c1cc:	df 91       	pop	r29
    c1ce:	cf 91       	pop	r28
    c1d0:	08 95       	ret

0000c1d2 <LITE_SET_INT0_PIN>:
// interrupt assignments
LITE_ASSIGN_PIN( INT0, E, 4 );
    c1d2:	cf 93       	push	r28
    c1d4:	df 93       	push	r29
    c1d6:	cd b7       	in	r28, 0x3d	; 61
    c1d8:	de b7       	in	r29, 0x3e	; 62
    c1da:	a3 e2       	ldi	r26, 0x23	; 35
    c1dc:	b0 e0       	ldi	r27, 0x00	; 0
    c1de:	e3 e2       	ldi	r30, 0x23	; 35
    c1e0:	f0 e0       	ldi	r31, 0x00	; 0
    c1e2:	80 81       	ld	r24, Z
    c1e4:	80 61       	ori	r24, 0x10	; 16
    c1e6:	8c 93       	st	X, r24
    c1e8:	df 91       	pop	r29
    c1ea:	cf 91       	pop	r28
    c1ec:	08 95       	ret

0000c1ee <LITE_CLR_INT0_PIN>:
    c1ee:	cf 93       	push	r28
    c1f0:	df 93       	push	r29
    c1f2:	cd b7       	in	r28, 0x3d	; 61
    c1f4:	de b7       	in	r29, 0x3e	; 62
    c1f6:	a3 e2       	ldi	r26, 0x23	; 35
    c1f8:	b0 e0       	ldi	r27, 0x00	; 0
    c1fa:	e3 e2       	ldi	r30, 0x23	; 35
    c1fc:	f0 e0       	ldi	r31, 0x00	; 0
    c1fe:	80 81       	ld	r24, Z
    c200:	8f 7e       	andi	r24, 0xEF	; 239
    c202:	8c 93       	st	X, r24
    c204:	df 91       	pop	r29
    c206:	cf 91       	pop	r28
    c208:	08 95       	ret

0000c20a <LITE_READ_INT0_PIN>:
    c20a:	cf 93       	push	r28
    c20c:	df 93       	push	r29
    c20e:	cd b7       	in	r28, 0x3d	; 61
    c210:	de b7       	in	r29, 0x3e	; 62
    c212:	22 97       	sbiw	r28, 0x02	; 2
    c214:	0f b6       	in	r0, 0x3f	; 63
    c216:	f8 94       	cli
    c218:	de bf       	out	0x3e, r29	; 62
    c21a:	0f be       	out	0x3f, r0	; 63
    c21c:	cd bf       	out	0x3d, r28	; 61
    c21e:	e1 e2       	ldi	r30, 0x21	; 33
    c220:	f0 e0       	ldi	r31, 0x00	; 0
    c222:	80 81       	ld	r24, Z
    c224:	99 27       	eor	r25, r25
    c226:	80 71       	andi	r24, 0x10	; 16
    c228:	90 70       	andi	r25, 0x00	; 0
    c22a:	9a 83       	std	Y+2, r25	; 0x02
    c22c:	89 83       	std	Y+1, r24	; 0x01
    c22e:	89 81       	ldd	r24, Y+1	; 0x01
    c230:	9a 81       	ldd	r25, Y+2	; 0x02
    c232:	00 97       	sbiw	r24, 0x00	; 0
    c234:	21 f0       	breq	.+8      	; 0xc23e <LITE_READ_INT0_PIN+0x34>
    c236:	81 e0       	ldi	r24, 0x01	; 1
    c238:	90 e0       	ldi	r25, 0x00	; 0
    c23a:	9a 83       	std	Y+2, r25	; 0x02
    c23c:	89 83       	std	Y+1, r24	; 0x01
    c23e:	89 81       	ldd	r24, Y+1	; 0x01
    c240:	9a 81       	ldd	r25, Y+2	; 0x02
    c242:	22 96       	adiw	r28, 0x02	; 2
    c244:	0f b6       	in	r0, 0x3f	; 63
    c246:	f8 94       	cli
    c248:	de bf       	out	0x3e, r29	; 62
    c24a:	0f be       	out	0x3f, r0	; 63
    c24c:	cd bf       	out	0x3d, r28	; 61
    c24e:	df 91       	pop	r29
    c250:	cf 91       	pop	r28
    c252:	08 95       	ret

0000c254 <LITE_MAKE_INT0_OUTPUT>:
    c254:	cf 93       	push	r28
    c256:	df 93       	push	r29
    c258:	cd b7       	in	r28, 0x3d	; 61
    c25a:	de b7       	in	r29, 0x3e	; 62
    c25c:	a2 e2       	ldi	r26, 0x22	; 34
    c25e:	b0 e0       	ldi	r27, 0x00	; 0
    c260:	e2 e2       	ldi	r30, 0x22	; 34
    c262:	f0 e0       	ldi	r31, 0x00	; 0
    c264:	80 81       	ld	r24, Z
    c266:	80 61       	ori	r24, 0x10	; 16
    c268:	8c 93       	st	X, r24
    c26a:	df 91       	pop	r29
    c26c:	cf 91       	pop	r28
    c26e:	08 95       	ret

0000c270 <LITE_MAKE_INT0_INPUT>:
    c270:	cf 93       	push	r28
    c272:	df 93       	push	r29
    c274:	cd b7       	in	r28, 0x3d	; 61
    c276:	de b7       	in	r29, 0x3e	; 62
    c278:	a2 e2       	ldi	r26, 0x22	; 34
    c27a:	b0 e0       	ldi	r27, 0x00	; 0
    c27c:	e2 e2       	ldi	r30, 0x22	; 34
    c27e:	f0 e0       	ldi	r31, 0x00	; 0
    c280:	80 81       	ld	r24, Z
    c282:	8f 7e       	andi	r24, 0xEF	; 239
    c284:	8c 93       	st	X, r24
    c286:	df 91       	pop	r29
    c288:	cf 91       	pop	r28
    c28a:	08 95       	ret

0000c28c <LITE_SET_INT1_PIN>:
LITE_ASSIGN_PIN( INT1, E, 5 );
    c28c:	cf 93       	push	r28
    c28e:	df 93       	push	r29
    c290:	cd b7       	in	r28, 0x3d	; 61
    c292:	de b7       	in	r29, 0x3e	; 62
    c294:	a3 e2       	ldi	r26, 0x23	; 35
    c296:	b0 e0       	ldi	r27, 0x00	; 0
    c298:	e3 e2       	ldi	r30, 0x23	; 35
    c29a:	f0 e0       	ldi	r31, 0x00	; 0
    c29c:	80 81       	ld	r24, Z
    c29e:	80 62       	ori	r24, 0x20	; 32
    c2a0:	8c 93       	st	X, r24
    c2a2:	df 91       	pop	r29
    c2a4:	cf 91       	pop	r28
    c2a6:	08 95       	ret

0000c2a8 <LITE_CLR_INT1_PIN>:
    c2a8:	cf 93       	push	r28
    c2aa:	df 93       	push	r29
    c2ac:	cd b7       	in	r28, 0x3d	; 61
    c2ae:	de b7       	in	r29, 0x3e	; 62
    c2b0:	a3 e2       	ldi	r26, 0x23	; 35
    c2b2:	b0 e0       	ldi	r27, 0x00	; 0
    c2b4:	e3 e2       	ldi	r30, 0x23	; 35
    c2b6:	f0 e0       	ldi	r31, 0x00	; 0
    c2b8:	80 81       	ld	r24, Z
    c2ba:	8f 7d       	andi	r24, 0xDF	; 223
    c2bc:	8c 93       	st	X, r24
    c2be:	df 91       	pop	r29
    c2c0:	cf 91       	pop	r28
    c2c2:	08 95       	ret

0000c2c4 <LITE_READ_INT1_PIN>:
    c2c4:	cf 93       	push	r28
    c2c6:	df 93       	push	r29
    c2c8:	cd b7       	in	r28, 0x3d	; 61
    c2ca:	de b7       	in	r29, 0x3e	; 62
    c2cc:	22 97       	sbiw	r28, 0x02	; 2
    c2ce:	0f b6       	in	r0, 0x3f	; 63
    c2d0:	f8 94       	cli
    c2d2:	de bf       	out	0x3e, r29	; 62
    c2d4:	0f be       	out	0x3f, r0	; 63
    c2d6:	cd bf       	out	0x3d, r28	; 61
    c2d8:	e1 e2       	ldi	r30, 0x21	; 33
    c2da:	f0 e0       	ldi	r31, 0x00	; 0
    c2dc:	80 81       	ld	r24, Z
    c2de:	99 27       	eor	r25, r25
    c2e0:	80 72       	andi	r24, 0x20	; 32
    c2e2:	90 70       	andi	r25, 0x00	; 0
    c2e4:	9a 83       	std	Y+2, r25	; 0x02
    c2e6:	89 83       	std	Y+1, r24	; 0x01
    c2e8:	89 81       	ldd	r24, Y+1	; 0x01
    c2ea:	9a 81       	ldd	r25, Y+2	; 0x02
    c2ec:	00 97       	sbiw	r24, 0x00	; 0
    c2ee:	21 f0       	breq	.+8      	; 0xc2f8 <LITE_READ_INT1_PIN+0x34>
    c2f0:	81 e0       	ldi	r24, 0x01	; 1
    c2f2:	90 e0       	ldi	r25, 0x00	; 0
    c2f4:	9a 83       	std	Y+2, r25	; 0x02
    c2f6:	89 83       	std	Y+1, r24	; 0x01
    c2f8:	89 81       	ldd	r24, Y+1	; 0x01
    c2fa:	9a 81       	ldd	r25, Y+2	; 0x02
    c2fc:	22 96       	adiw	r28, 0x02	; 2
    c2fe:	0f b6       	in	r0, 0x3f	; 63
    c300:	f8 94       	cli
    c302:	de bf       	out	0x3e, r29	; 62
    c304:	0f be       	out	0x3f, r0	; 63
    c306:	cd bf       	out	0x3d, r28	; 61
    c308:	df 91       	pop	r29
    c30a:	cf 91       	pop	r28
    c30c:	08 95       	ret

0000c30e <LITE_MAKE_INT1_OUTPUT>:
    c30e:	cf 93       	push	r28
    c310:	df 93       	push	r29
    c312:	cd b7       	in	r28, 0x3d	; 61
    c314:	de b7       	in	r29, 0x3e	; 62
    c316:	a2 e2       	ldi	r26, 0x22	; 34
    c318:	b0 e0       	ldi	r27, 0x00	; 0
    c31a:	e2 e2       	ldi	r30, 0x22	; 34
    c31c:	f0 e0       	ldi	r31, 0x00	; 0
    c31e:	80 81       	ld	r24, Z
    c320:	80 62       	ori	r24, 0x20	; 32
    c322:	8c 93       	st	X, r24
    c324:	df 91       	pop	r29
    c326:	cf 91       	pop	r28
    c328:	08 95       	ret

0000c32a <LITE_MAKE_INT1_INPUT>:
    c32a:	cf 93       	push	r28
    c32c:	df 93       	push	r29
    c32e:	cd b7       	in	r28, 0x3d	; 61
    c330:	de b7       	in	r29, 0x3e	; 62
    c332:	a2 e2       	ldi	r26, 0x22	; 34
    c334:	b0 e0       	ldi	r27, 0x00	; 0
    c336:	e2 e2       	ldi	r30, 0x22	; 34
    c338:	f0 e0       	ldi	r31, 0x00	; 0
    c33a:	80 81       	ld	r24, Z
    c33c:	8f 7d       	andi	r24, 0xDF	; 223
    c33e:	8c 93       	st	X, r24
    c340:	df 91       	pop	r29
    c342:	cf 91       	pop	r28
    c344:	08 95       	ret

0000c346 <LITE_SET_INT2_PIN>:
LITE_ASSIGN_PIN( INT2, E, 6 );
    c346:	cf 93       	push	r28
    c348:	df 93       	push	r29
    c34a:	cd b7       	in	r28, 0x3d	; 61
    c34c:	de b7       	in	r29, 0x3e	; 62
    c34e:	a3 e2       	ldi	r26, 0x23	; 35
    c350:	b0 e0       	ldi	r27, 0x00	; 0
    c352:	e3 e2       	ldi	r30, 0x23	; 35
    c354:	f0 e0       	ldi	r31, 0x00	; 0
    c356:	80 81       	ld	r24, Z
    c358:	80 64       	ori	r24, 0x40	; 64
    c35a:	8c 93       	st	X, r24
    c35c:	df 91       	pop	r29
    c35e:	cf 91       	pop	r28
    c360:	08 95       	ret

0000c362 <LITE_CLR_INT2_PIN>:
    c362:	cf 93       	push	r28
    c364:	df 93       	push	r29
    c366:	cd b7       	in	r28, 0x3d	; 61
    c368:	de b7       	in	r29, 0x3e	; 62
    c36a:	a3 e2       	ldi	r26, 0x23	; 35
    c36c:	b0 e0       	ldi	r27, 0x00	; 0
    c36e:	e3 e2       	ldi	r30, 0x23	; 35
    c370:	f0 e0       	ldi	r31, 0x00	; 0
    c372:	80 81       	ld	r24, Z
    c374:	8f 7b       	andi	r24, 0xBF	; 191
    c376:	8c 93       	st	X, r24
    c378:	df 91       	pop	r29
    c37a:	cf 91       	pop	r28
    c37c:	08 95       	ret

0000c37e <LITE_READ_INT2_PIN>:
    c37e:	cf 93       	push	r28
    c380:	df 93       	push	r29
    c382:	cd b7       	in	r28, 0x3d	; 61
    c384:	de b7       	in	r29, 0x3e	; 62
    c386:	22 97       	sbiw	r28, 0x02	; 2
    c388:	0f b6       	in	r0, 0x3f	; 63
    c38a:	f8 94       	cli
    c38c:	de bf       	out	0x3e, r29	; 62
    c38e:	0f be       	out	0x3f, r0	; 63
    c390:	cd bf       	out	0x3d, r28	; 61
    c392:	e1 e2       	ldi	r30, 0x21	; 33
    c394:	f0 e0       	ldi	r31, 0x00	; 0
    c396:	80 81       	ld	r24, Z
    c398:	99 27       	eor	r25, r25
    c39a:	80 74       	andi	r24, 0x40	; 64
    c39c:	90 70       	andi	r25, 0x00	; 0
    c39e:	9a 83       	std	Y+2, r25	; 0x02
    c3a0:	89 83       	std	Y+1, r24	; 0x01
    c3a2:	89 81       	ldd	r24, Y+1	; 0x01
    c3a4:	9a 81       	ldd	r25, Y+2	; 0x02
    c3a6:	00 97       	sbiw	r24, 0x00	; 0
    c3a8:	21 f0       	breq	.+8      	; 0xc3b2 <LITE_READ_INT2_PIN+0x34>
    c3aa:	81 e0       	ldi	r24, 0x01	; 1
    c3ac:	90 e0       	ldi	r25, 0x00	; 0
    c3ae:	9a 83       	std	Y+2, r25	; 0x02
    c3b0:	89 83       	std	Y+1, r24	; 0x01
    c3b2:	89 81       	ldd	r24, Y+1	; 0x01
    c3b4:	9a 81       	ldd	r25, Y+2	; 0x02
    c3b6:	22 96       	adiw	r28, 0x02	; 2
    c3b8:	0f b6       	in	r0, 0x3f	; 63
    c3ba:	f8 94       	cli
    c3bc:	de bf       	out	0x3e, r29	; 62
    c3be:	0f be       	out	0x3f, r0	; 63
    c3c0:	cd bf       	out	0x3d, r28	; 61
    c3c2:	df 91       	pop	r29
    c3c4:	cf 91       	pop	r28
    c3c6:	08 95       	ret

0000c3c8 <LITE_MAKE_INT2_OUTPUT>:
    c3c8:	cf 93       	push	r28
    c3ca:	df 93       	push	r29
    c3cc:	cd b7       	in	r28, 0x3d	; 61
    c3ce:	de b7       	in	r29, 0x3e	; 62
    c3d0:	a2 e2       	ldi	r26, 0x22	; 34
    c3d2:	b0 e0       	ldi	r27, 0x00	; 0
    c3d4:	e2 e2       	ldi	r30, 0x22	; 34
    c3d6:	f0 e0       	ldi	r31, 0x00	; 0
    c3d8:	80 81       	ld	r24, Z
    c3da:	80 64       	ori	r24, 0x40	; 64
    c3dc:	8c 93       	st	X, r24
    c3de:	df 91       	pop	r29
    c3e0:	cf 91       	pop	r28
    c3e2:	08 95       	ret

0000c3e4 <LITE_MAKE_INT2_INPUT>:
    c3e4:	cf 93       	push	r28
    c3e6:	df 93       	push	r29
    c3e8:	cd b7       	in	r28, 0x3d	; 61
    c3ea:	de b7       	in	r29, 0x3e	; 62
    c3ec:	a2 e2       	ldi	r26, 0x22	; 34
    c3ee:	b0 e0       	ldi	r27, 0x00	; 0
    c3f0:	e2 e2       	ldi	r30, 0x22	; 34
    c3f2:	f0 e0       	ldi	r31, 0x00	; 0
    c3f4:	80 81       	ld	r24, Z
    c3f6:	8f 7b       	andi	r24, 0xBF	; 191
    c3f8:	8c 93       	st	X, r24
    c3fa:	df 91       	pop	r29
    c3fc:	cf 91       	pop	r28
    c3fe:	08 95       	ret

0000c400 <LITE_SET_INT3_PIN>:
LITE_ASSIGN_PIN( INT3, E, 7 );
    c400:	cf 93       	push	r28
    c402:	df 93       	push	r29
    c404:	cd b7       	in	r28, 0x3d	; 61
    c406:	de b7       	in	r29, 0x3e	; 62
    c408:	a3 e2       	ldi	r26, 0x23	; 35
    c40a:	b0 e0       	ldi	r27, 0x00	; 0
    c40c:	e3 e2       	ldi	r30, 0x23	; 35
    c40e:	f0 e0       	ldi	r31, 0x00	; 0
    c410:	80 81       	ld	r24, Z
    c412:	80 68       	ori	r24, 0x80	; 128
    c414:	8c 93       	st	X, r24
    c416:	df 91       	pop	r29
    c418:	cf 91       	pop	r28
    c41a:	08 95       	ret

0000c41c <LITE_CLR_INT3_PIN>:
    c41c:	cf 93       	push	r28
    c41e:	df 93       	push	r29
    c420:	cd b7       	in	r28, 0x3d	; 61
    c422:	de b7       	in	r29, 0x3e	; 62
    c424:	a3 e2       	ldi	r26, 0x23	; 35
    c426:	b0 e0       	ldi	r27, 0x00	; 0
    c428:	e3 e2       	ldi	r30, 0x23	; 35
    c42a:	f0 e0       	ldi	r31, 0x00	; 0
    c42c:	90 81       	ld	r25, Z
    c42e:	8f e7       	ldi	r24, 0x7F	; 127
    c430:	89 23       	and	r24, r25
    c432:	8c 93       	st	X, r24
    c434:	df 91       	pop	r29
    c436:	cf 91       	pop	r28
    c438:	08 95       	ret

0000c43a <LITE_READ_INT3_PIN>:
    c43a:	cf 93       	push	r28
    c43c:	df 93       	push	r29
    c43e:	cd b7       	in	r28, 0x3d	; 61
    c440:	de b7       	in	r29, 0x3e	; 62
    c442:	22 97       	sbiw	r28, 0x02	; 2
    c444:	0f b6       	in	r0, 0x3f	; 63
    c446:	f8 94       	cli
    c448:	de bf       	out	0x3e, r29	; 62
    c44a:	0f be       	out	0x3f, r0	; 63
    c44c:	cd bf       	out	0x3d, r28	; 61
    c44e:	e1 e2       	ldi	r30, 0x21	; 33
    c450:	f0 e0       	ldi	r31, 0x00	; 0
    c452:	80 81       	ld	r24, Z
    c454:	1a 82       	std	Y+2, r1	; 0x02
    c456:	19 82       	std	Y+1, r1	; 0x01
    c458:	88 23       	and	r24, r24
    c45a:	24 f4       	brge	.+8      	; 0xc464 <LITE_READ_INT3_PIN+0x2a>
    c45c:	81 e0       	ldi	r24, 0x01	; 1
    c45e:	90 e0       	ldi	r25, 0x00	; 0
    c460:	9a 83       	std	Y+2, r25	; 0x02
    c462:	89 83       	std	Y+1, r24	; 0x01
    c464:	89 81       	ldd	r24, Y+1	; 0x01
    c466:	9a 81       	ldd	r25, Y+2	; 0x02
    c468:	22 96       	adiw	r28, 0x02	; 2
    c46a:	0f b6       	in	r0, 0x3f	; 63
    c46c:	f8 94       	cli
    c46e:	de bf       	out	0x3e, r29	; 62
    c470:	0f be       	out	0x3f, r0	; 63
    c472:	cd bf       	out	0x3d, r28	; 61
    c474:	df 91       	pop	r29
    c476:	cf 91       	pop	r28
    c478:	08 95       	ret

0000c47a <LITE_MAKE_INT3_OUTPUT>:
    c47a:	cf 93       	push	r28
    c47c:	df 93       	push	r29
    c47e:	cd b7       	in	r28, 0x3d	; 61
    c480:	de b7       	in	r29, 0x3e	; 62
    c482:	a2 e2       	ldi	r26, 0x22	; 34
    c484:	b0 e0       	ldi	r27, 0x00	; 0
    c486:	e2 e2       	ldi	r30, 0x22	; 34
    c488:	f0 e0       	ldi	r31, 0x00	; 0
    c48a:	80 81       	ld	r24, Z
    c48c:	80 68       	ori	r24, 0x80	; 128
    c48e:	8c 93       	st	X, r24
    c490:	df 91       	pop	r29
    c492:	cf 91       	pop	r28
    c494:	08 95       	ret

0000c496 <LITE_MAKE_INT3_INPUT>:
    c496:	cf 93       	push	r28
    c498:	df 93       	push	r29
    c49a:	cd b7       	in	r28, 0x3d	; 61
    c49c:	de b7       	in	r29, 0x3e	; 62
    c49e:	a2 e2       	ldi	r26, 0x22	; 34
    c4a0:	b0 e0       	ldi	r27, 0x00	; 0
    c4a2:	e2 e2       	ldi	r30, 0x22	; 34
    c4a4:	f0 e0       	ldi	r31, 0x00	; 0
    c4a6:	90 81       	ld	r25, Z
    c4a8:	8f e7       	ldi	r24, 0x7F	; 127
    c4aa:	89 23       	and	r24, r25
    c4ac:	8c 93       	st	X, r24
    c4ae:	df 91       	pop	r29
    c4b0:	cf 91       	pop	r28
    c4b2:	08 95       	ret

0000c4b4 <LITE_SET_MOSI_PIN>:
// spibus assignments 
LITE_ASSIGN_PIN( MOSI, B, 2 );
    c4b4:	cf 93       	push	r28
    c4b6:	df 93       	push	r29
    c4b8:	cd b7       	in	r28, 0x3d	; 61
    c4ba:	de b7       	in	r29, 0x3e	; 62
    c4bc:	a8 e3       	ldi	r26, 0x38	; 56
    c4be:	b0 e0       	ldi	r27, 0x00	; 0
    c4c0:	e8 e3       	ldi	r30, 0x38	; 56
    c4c2:	f0 e0       	ldi	r31, 0x00	; 0
    c4c4:	80 81       	ld	r24, Z
    c4c6:	84 60       	ori	r24, 0x04	; 4
    c4c8:	8c 93       	st	X, r24
    c4ca:	df 91       	pop	r29
    c4cc:	cf 91       	pop	r28
    c4ce:	08 95       	ret

0000c4d0 <LITE_CLR_MOSI_PIN>:
    c4d0:	cf 93       	push	r28
    c4d2:	df 93       	push	r29
    c4d4:	cd b7       	in	r28, 0x3d	; 61
    c4d6:	de b7       	in	r29, 0x3e	; 62
    c4d8:	a8 e3       	ldi	r26, 0x38	; 56
    c4da:	b0 e0       	ldi	r27, 0x00	; 0
    c4dc:	e8 e3       	ldi	r30, 0x38	; 56
    c4de:	f0 e0       	ldi	r31, 0x00	; 0
    c4e0:	80 81       	ld	r24, Z
    c4e2:	8b 7f       	andi	r24, 0xFB	; 251
    c4e4:	8c 93       	st	X, r24
    c4e6:	df 91       	pop	r29
    c4e8:	cf 91       	pop	r28
    c4ea:	08 95       	ret

0000c4ec <LITE_READ_MOSI_PIN>:
    c4ec:	cf 93       	push	r28
    c4ee:	df 93       	push	r29
    c4f0:	cd b7       	in	r28, 0x3d	; 61
    c4f2:	de b7       	in	r29, 0x3e	; 62
    c4f4:	22 97       	sbiw	r28, 0x02	; 2
    c4f6:	0f b6       	in	r0, 0x3f	; 63
    c4f8:	f8 94       	cli
    c4fa:	de bf       	out	0x3e, r29	; 62
    c4fc:	0f be       	out	0x3f, r0	; 63
    c4fe:	cd bf       	out	0x3d, r28	; 61
    c500:	e6 e3       	ldi	r30, 0x36	; 54
    c502:	f0 e0       	ldi	r31, 0x00	; 0
    c504:	80 81       	ld	r24, Z
    c506:	99 27       	eor	r25, r25
    c508:	84 70       	andi	r24, 0x04	; 4
    c50a:	90 70       	andi	r25, 0x00	; 0
    c50c:	9a 83       	std	Y+2, r25	; 0x02
    c50e:	89 83       	std	Y+1, r24	; 0x01
    c510:	89 81       	ldd	r24, Y+1	; 0x01
    c512:	9a 81       	ldd	r25, Y+2	; 0x02
    c514:	00 97       	sbiw	r24, 0x00	; 0
    c516:	21 f0       	breq	.+8      	; 0xc520 <LITE_READ_MOSI_PIN+0x34>
    c518:	81 e0       	ldi	r24, 0x01	; 1
    c51a:	90 e0       	ldi	r25, 0x00	; 0
    c51c:	9a 83       	std	Y+2, r25	; 0x02
    c51e:	89 83       	std	Y+1, r24	; 0x01
    c520:	89 81       	ldd	r24, Y+1	; 0x01
    c522:	9a 81       	ldd	r25, Y+2	; 0x02
    c524:	22 96       	adiw	r28, 0x02	; 2
    c526:	0f b6       	in	r0, 0x3f	; 63
    c528:	f8 94       	cli
    c52a:	de bf       	out	0x3e, r29	; 62
    c52c:	0f be       	out	0x3f, r0	; 63
    c52e:	cd bf       	out	0x3d, r28	; 61
    c530:	df 91       	pop	r29
    c532:	cf 91       	pop	r28
    c534:	08 95       	ret

0000c536 <LITE_MAKE_MOSI_OUTPUT>:
    c536:	cf 93       	push	r28
    c538:	df 93       	push	r29
    c53a:	cd b7       	in	r28, 0x3d	; 61
    c53c:	de b7       	in	r29, 0x3e	; 62
    c53e:	a7 e3       	ldi	r26, 0x37	; 55
    c540:	b0 e0       	ldi	r27, 0x00	; 0
    c542:	e7 e3       	ldi	r30, 0x37	; 55
    c544:	f0 e0       	ldi	r31, 0x00	; 0
    c546:	80 81       	ld	r24, Z
    c548:	84 60       	ori	r24, 0x04	; 4
    c54a:	8c 93       	st	X, r24
    c54c:	df 91       	pop	r29
    c54e:	cf 91       	pop	r28
    c550:	08 95       	ret

0000c552 <LITE_MAKE_MOSI_INPUT>:
    c552:	cf 93       	push	r28
    c554:	df 93       	push	r29
    c556:	cd b7       	in	r28, 0x3d	; 61
    c558:	de b7       	in	r29, 0x3e	; 62
    c55a:	a7 e3       	ldi	r26, 0x37	; 55
    c55c:	b0 e0       	ldi	r27, 0x00	; 0
    c55e:	e7 e3       	ldi	r30, 0x37	; 55
    c560:	f0 e0       	ldi	r31, 0x00	; 0
    c562:	80 81       	ld	r24, Z
    c564:	8b 7f       	andi	r24, 0xFB	; 251
    c566:	8c 93       	st	X, r24
    c568:	df 91       	pop	r29
    c56a:	cf 91       	pop	r28
    c56c:	08 95       	ret

0000c56e <LITE_SET_MISO_PIN>:
LITE_ASSIGN_PIN( MISO, B, 3 );
    c56e:	cf 93       	push	r28
    c570:	df 93       	push	r29
    c572:	cd b7       	in	r28, 0x3d	; 61
    c574:	de b7       	in	r29, 0x3e	; 62
    c576:	a8 e3       	ldi	r26, 0x38	; 56
    c578:	b0 e0       	ldi	r27, 0x00	; 0
    c57a:	e8 e3       	ldi	r30, 0x38	; 56
    c57c:	f0 e0       	ldi	r31, 0x00	; 0
    c57e:	80 81       	ld	r24, Z
    c580:	88 60       	ori	r24, 0x08	; 8
    c582:	8c 93       	st	X, r24
    c584:	df 91       	pop	r29
    c586:	cf 91       	pop	r28
    c588:	08 95       	ret

0000c58a <LITE_CLR_MISO_PIN>:
    c58a:	cf 93       	push	r28
    c58c:	df 93       	push	r29
    c58e:	cd b7       	in	r28, 0x3d	; 61
    c590:	de b7       	in	r29, 0x3e	; 62
    c592:	a8 e3       	ldi	r26, 0x38	; 56
    c594:	b0 e0       	ldi	r27, 0x00	; 0
    c596:	e8 e3       	ldi	r30, 0x38	; 56
    c598:	f0 e0       	ldi	r31, 0x00	; 0
    c59a:	80 81       	ld	r24, Z
    c59c:	87 7f       	andi	r24, 0xF7	; 247
    c59e:	8c 93       	st	X, r24
    c5a0:	df 91       	pop	r29
    c5a2:	cf 91       	pop	r28
    c5a4:	08 95       	ret

0000c5a6 <LITE_READ_MISO_PIN>:
    c5a6:	cf 93       	push	r28
    c5a8:	df 93       	push	r29
    c5aa:	cd b7       	in	r28, 0x3d	; 61
    c5ac:	de b7       	in	r29, 0x3e	; 62
    c5ae:	22 97       	sbiw	r28, 0x02	; 2
    c5b0:	0f b6       	in	r0, 0x3f	; 63
    c5b2:	f8 94       	cli
    c5b4:	de bf       	out	0x3e, r29	; 62
    c5b6:	0f be       	out	0x3f, r0	; 63
    c5b8:	cd bf       	out	0x3d, r28	; 61
    c5ba:	e6 e3       	ldi	r30, 0x36	; 54
    c5bc:	f0 e0       	ldi	r31, 0x00	; 0
    c5be:	80 81       	ld	r24, Z
    c5c0:	99 27       	eor	r25, r25
    c5c2:	88 70       	andi	r24, 0x08	; 8
    c5c4:	90 70       	andi	r25, 0x00	; 0
    c5c6:	9a 83       	std	Y+2, r25	; 0x02
    c5c8:	89 83       	std	Y+1, r24	; 0x01
    c5ca:	89 81       	ldd	r24, Y+1	; 0x01
    c5cc:	9a 81       	ldd	r25, Y+2	; 0x02
    c5ce:	00 97       	sbiw	r24, 0x00	; 0
    c5d0:	21 f0       	breq	.+8      	; 0xc5da <LITE_READ_MISO_PIN+0x34>
    c5d2:	81 e0       	ldi	r24, 0x01	; 1
    c5d4:	90 e0       	ldi	r25, 0x00	; 0
    c5d6:	9a 83       	std	Y+2, r25	; 0x02
    c5d8:	89 83       	std	Y+1, r24	; 0x01
    c5da:	89 81       	ldd	r24, Y+1	; 0x01
    c5dc:	9a 81       	ldd	r25, Y+2	; 0x02
    c5de:	22 96       	adiw	r28, 0x02	; 2
    c5e0:	0f b6       	in	r0, 0x3f	; 63
    c5e2:	f8 94       	cli
    c5e4:	de bf       	out	0x3e, r29	; 62
    c5e6:	0f be       	out	0x3f, r0	; 63
    c5e8:	cd bf       	out	0x3d, r28	; 61
    c5ea:	df 91       	pop	r29
    c5ec:	cf 91       	pop	r28
    c5ee:	08 95       	ret

0000c5f0 <LITE_MAKE_MISO_OUTPUT>:
    c5f0:	cf 93       	push	r28
    c5f2:	df 93       	push	r29
    c5f4:	cd b7       	in	r28, 0x3d	; 61
    c5f6:	de b7       	in	r29, 0x3e	; 62
    c5f8:	a7 e3       	ldi	r26, 0x37	; 55
    c5fa:	b0 e0       	ldi	r27, 0x00	; 0
    c5fc:	e7 e3       	ldi	r30, 0x37	; 55
    c5fe:	f0 e0       	ldi	r31, 0x00	; 0
    c600:	80 81       	ld	r24, Z
    c602:	88 60       	ori	r24, 0x08	; 8
    c604:	8c 93       	st	X, r24
    c606:	df 91       	pop	r29
    c608:	cf 91       	pop	r28
    c60a:	08 95       	ret

0000c60c <LITE_MAKE_MISO_INPUT>:
    c60c:	cf 93       	push	r28
    c60e:	df 93       	push	r29
    c610:	cd b7       	in	r28, 0x3d	; 61
    c612:	de b7       	in	r29, 0x3e	; 62
    c614:	a7 e3       	ldi	r26, 0x37	; 55
    c616:	b0 e0       	ldi	r27, 0x00	; 0
    c618:	e7 e3       	ldi	r30, 0x37	; 55
    c61a:	f0 e0       	ldi	r31, 0x00	; 0
    c61c:	80 81       	ld	r24, Z
    c61e:	87 7f       	andi	r24, 0xF7	; 247
    c620:	8c 93       	st	X, r24
    c622:	df 91       	pop	r29
    c624:	cf 91       	pop	r28
    c626:	08 95       	ret

0000c628 <LITE_SET_SPI_SCK_PIN>:
//LITE_ASSIGN_PIN(SPI_OC1C, B, 7);
LITE_ASSIGN_PIN( SPI_SCK, B, 1 );
    c628:	cf 93       	push	r28
    c62a:	df 93       	push	r29
    c62c:	cd b7       	in	r28, 0x3d	; 61
    c62e:	de b7       	in	r29, 0x3e	; 62
    c630:	a8 e3       	ldi	r26, 0x38	; 56
    c632:	b0 e0       	ldi	r27, 0x00	; 0
    c634:	e8 e3       	ldi	r30, 0x38	; 56
    c636:	f0 e0       	ldi	r31, 0x00	; 0
    c638:	80 81       	ld	r24, Z
    c63a:	82 60       	ori	r24, 0x02	; 2
    c63c:	8c 93       	st	X, r24
    c63e:	df 91       	pop	r29
    c640:	cf 91       	pop	r28
    c642:	08 95       	ret

0000c644 <LITE_CLR_SPI_SCK_PIN>:
    c644:	cf 93       	push	r28
    c646:	df 93       	push	r29
    c648:	cd b7       	in	r28, 0x3d	; 61
    c64a:	de b7       	in	r29, 0x3e	; 62
    c64c:	a8 e3       	ldi	r26, 0x38	; 56
    c64e:	b0 e0       	ldi	r27, 0x00	; 0
    c650:	e8 e3       	ldi	r30, 0x38	; 56
    c652:	f0 e0       	ldi	r31, 0x00	; 0
    c654:	80 81       	ld	r24, Z
    c656:	8d 7f       	andi	r24, 0xFD	; 253
    c658:	8c 93       	st	X, r24
    c65a:	df 91       	pop	r29
    c65c:	cf 91       	pop	r28
    c65e:	08 95       	ret

0000c660 <LITE_READ_SPI_SCK_PIN>:
    c660:	cf 93       	push	r28
    c662:	df 93       	push	r29
    c664:	cd b7       	in	r28, 0x3d	; 61
    c666:	de b7       	in	r29, 0x3e	; 62
    c668:	22 97       	sbiw	r28, 0x02	; 2
    c66a:	0f b6       	in	r0, 0x3f	; 63
    c66c:	f8 94       	cli
    c66e:	de bf       	out	0x3e, r29	; 62
    c670:	0f be       	out	0x3f, r0	; 63
    c672:	cd bf       	out	0x3d, r28	; 61
    c674:	e6 e3       	ldi	r30, 0x36	; 54
    c676:	f0 e0       	ldi	r31, 0x00	; 0
    c678:	80 81       	ld	r24, Z
    c67a:	99 27       	eor	r25, r25
    c67c:	82 70       	andi	r24, 0x02	; 2
    c67e:	90 70       	andi	r25, 0x00	; 0
    c680:	9a 83       	std	Y+2, r25	; 0x02
    c682:	89 83       	std	Y+1, r24	; 0x01
    c684:	89 81       	ldd	r24, Y+1	; 0x01
    c686:	9a 81       	ldd	r25, Y+2	; 0x02
    c688:	00 97       	sbiw	r24, 0x00	; 0
    c68a:	21 f0       	breq	.+8      	; 0xc694 <LITE_READ_SPI_SCK_PIN+0x34>
    c68c:	81 e0       	ldi	r24, 0x01	; 1
    c68e:	90 e0       	ldi	r25, 0x00	; 0
    c690:	9a 83       	std	Y+2, r25	; 0x02
    c692:	89 83       	std	Y+1, r24	; 0x01
    c694:	89 81       	ldd	r24, Y+1	; 0x01
    c696:	9a 81       	ldd	r25, Y+2	; 0x02
    c698:	22 96       	adiw	r28, 0x02	; 2
    c69a:	0f b6       	in	r0, 0x3f	; 63
    c69c:	f8 94       	cli
    c69e:	de bf       	out	0x3e, r29	; 62
    c6a0:	0f be       	out	0x3f, r0	; 63
    c6a2:	cd bf       	out	0x3d, r28	; 61
    c6a4:	df 91       	pop	r29
    c6a6:	cf 91       	pop	r28
    c6a8:	08 95       	ret

0000c6aa <LITE_MAKE_SPI_SCK_OUTPUT>:
    c6aa:	cf 93       	push	r28
    c6ac:	df 93       	push	r29
    c6ae:	cd b7       	in	r28, 0x3d	; 61
    c6b0:	de b7       	in	r29, 0x3e	; 62
    c6b2:	a7 e3       	ldi	r26, 0x37	; 55
    c6b4:	b0 e0       	ldi	r27, 0x00	; 0
    c6b6:	e7 e3       	ldi	r30, 0x37	; 55
    c6b8:	f0 e0       	ldi	r31, 0x00	; 0
    c6ba:	80 81       	ld	r24, Z
    c6bc:	82 60       	ori	r24, 0x02	; 2
    c6be:	8c 93       	st	X, r24
    c6c0:	df 91       	pop	r29
    c6c2:	cf 91       	pop	r28
    c6c4:	08 95       	ret

0000c6c6 <LITE_MAKE_SPI_SCK_INPUT>:
    c6c6:	cf 93       	push	r28
    c6c8:	df 93       	push	r29
    c6ca:	cd b7       	in	r28, 0x3d	; 61
    c6cc:	de b7       	in	r29, 0x3e	; 62
    c6ce:	a7 e3       	ldi	r26, 0x37	; 55
    c6d0:	b0 e0       	ldi	r27, 0x00	; 0
    c6d2:	e7 e3       	ldi	r30, 0x37	; 55
    c6d4:	f0 e0       	ldi	r31, 0x00	; 0
    c6d6:	80 81       	ld	r24, Z
    c6d8:	8d 7f       	andi	r24, 0xFD	; 253
    c6da:	8c 93       	st	X, r24
    c6dc:	df 91       	pop	r29
    c6de:	cf 91       	pop	r28
    c6e0:	08 95       	ret

0000c6e2 <LITE_SET_PW0_PIN>:
// power control assignments
LITE_ASSIGN_PIN( PW0, C, 0 );
    c6e2:	cf 93       	push	r28
    c6e4:	df 93       	push	r29
    c6e6:	cd b7       	in	r28, 0x3d	; 61
    c6e8:	de b7       	in	r29, 0x3e	; 62
    c6ea:	a5 e3       	ldi	r26, 0x35	; 53
    c6ec:	b0 e0       	ldi	r27, 0x00	; 0
    c6ee:	e5 e3       	ldi	r30, 0x35	; 53
    c6f0:	f0 e0       	ldi	r31, 0x00	; 0
    c6f2:	80 81       	ld	r24, Z
    c6f4:	81 60       	ori	r24, 0x01	; 1
    c6f6:	8c 93       	st	X, r24
    c6f8:	df 91       	pop	r29
    c6fa:	cf 91       	pop	r28
    c6fc:	08 95       	ret

0000c6fe <LITE_CLR_PW0_PIN>:
    c6fe:	cf 93       	push	r28
    c700:	df 93       	push	r29
    c702:	cd b7       	in	r28, 0x3d	; 61
    c704:	de b7       	in	r29, 0x3e	; 62
    c706:	a5 e3       	ldi	r26, 0x35	; 53
    c708:	b0 e0       	ldi	r27, 0x00	; 0
    c70a:	e5 e3       	ldi	r30, 0x35	; 53
    c70c:	f0 e0       	ldi	r31, 0x00	; 0
    c70e:	80 81       	ld	r24, Z
    c710:	8e 7f       	andi	r24, 0xFE	; 254
    c712:	8c 93       	st	X, r24
    c714:	df 91       	pop	r29
    c716:	cf 91       	pop	r28
    c718:	08 95       	ret

0000c71a <LITE_READ_PW0_PIN>:
    c71a:	cf 93       	push	r28
    c71c:	df 93       	push	r29
    c71e:	cd b7       	in	r28, 0x3d	; 61
    c720:	de b7       	in	r29, 0x3e	; 62
    c722:	e3 e3       	ldi	r30, 0x33	; 51
    c724:	f0 e0       	ldi	r31, 0x00	; 0
    c726:	80 81       	ld	r24, Z
    c728:	99 27       	eor	r25, r25
    c72a:	81 70       	andi	r24, 0x01	; 1
    c72c:	90 70       	andi	r25, 0x00	; 0
    c72e:	df 91       	pop	r29
    c730:	cf 91       	pop	r28
    c732:	08 95       	ret

0000c734 <LITE_MAKE_PW0_OUTPUT>:
    c734:	cf 93       	push	r28
    c736:	df 93       	push	r29
    c738:	cd b7       	in	r28, 0x3d	; 61
    c73a:	de b7       	in	r29, 0x3e	; 62
    c73c:	a4 e3       	ldi	r26, 0x34	; 52
    c73e:	b0 e0       	ldi	r27, 0x00	; 0
    c740:	e4 e3       	ldi	r30, 0x34	; 52
    c742:	f0 e0       	ldi	r31, 0x00	; 0
    c744:	80 81       	ld	r24, Z
    c746:	81 60       	ori	r24, 0x01	; 1
    c748:	8c 93       	st	X, r24
    c74a:	df 91       	pop	r29
    c74c:	cf 91       	pop	r28
    c74e:	08 95       	ret

0000c750 <LITE_MAKE_PW0_INPUT>:
    c750:	cf 93       	push	r28
    c752:	df 93       	push	r29
    c754:	cd b7       	in	r28, 0x3d	; 61
    c756:	de b7       	in	r29, 0x3e	; 62
    c758:	a4 e3       	ldi	r26, 0x34	; 52
    c75a:	b0 e0       	ldi	r27, 0x00	; 0
    c75c:	e4 e3       	ldi	r30, 0x34	; 52
    c75e:	f0 e0       	ldi	r31, 0x00	; 0
    c760:	80 81       	ld	r24, Z
    c762:	8e 7f       	andi	r24, 0xFE	; 254
    c764:	8c 93       	st	X, r24
    c766:	df 91       	pop	r29
    c768:	cf 91       	pop	r28
    c76a:	08 95       	ret

0000c76c <LITE_SET_PW1_PIN>:
LITE_ASSIGN_PIN( PW1, C, 1 );
    c76c:	cf 93       	push	r28
    c76e:	df 93       	push	r29
    c770:	cd b7       	in	r28, 0x3d	; 61
    c772:	de b7       	in	r29, 0x3e	; 62
    c774:	a5 e3       	ldi	r26, 0x35	; 53
    c776:	b0 e0       	ldi	r27, 0x00	; 0
    c778:	e5 e3       	ldi	r30, 0x35	; 53
    c77a:	f0 e0       	ldi	r31, 0x00	; 0
    c77c:	80 81       	ld	r24, Z
    c77e:	82 60       	ori	r24, 0x02	; 2
    c780:	8c 93       	st	X, r24
    c782:	df 91       	pop	r29
    c784:	cf 91       	pop	r28
    c786:	08 95       	ret

0000c788 <LITE_CLR_PW1_PIN>:
    c788:	cf 93       	push	r28
    c78a:	df 93       	push	r29
    c78c:	cd b7       	in	r28, 0x3d	; 61
    c78e:	de b7       	in	r29, 0x3e	; 62
    c790:	a5 e3       	ldi	r26, 0x35	; 53
    c792:	b0 e0       	ldi	r27, 0x00	; 0
    c794:	e5 e3       	ldi	r30, 0x35	; 53
    c796:	f0 e0       	ldi	r31, 0x00	; 0
    c798:	80 81       	ld	r24, Z
    c79a:	8d 7f       	andi	r24, 0xFD	; 253
    c79c:	8c 93       	st	X, r24
    c79e:	df 91       	pop	r29
    c7a0:	cf 91       	pop	r28
    c7a2:	08 95       	ret

0000c7a4 <LITE_READ_PW1_PIN>:
    c7a4:	cf 93       	push	r28
    c7a6:	df 93       	push	r29
    c7a8:	cd b7       	in	r28, 0x3d	; 61
    c7aa:	de b7       	in	r29, 0x3e	; 62
    c7ac:	22 97       	sbiw	r28, 0x02	; 2
    c7ae:	0f b6       	in	r0, 0x3f	; 63
    c7b0:	f8 94       	cli
    c7b2:	de bf       	out	0x3e, r29	; 62
    c7b4:	0f be       	out	0x3f, r0	; 63
    c7b6:	cd bf       	out	0x3d, r28	; 61
    c7b8:	e3 e3       	ldi	r30, 0x33	; 51
    c7ba:	f0 e0       	ldi	r31, 0x00	; 0
    c7bc:	80 81       	ld	r24, Z
    c7be:	99 27       	eor	r25, r25
    c7c0:	82 70       	andi	r24, 0x02	; 2
    c7c2:	90 70       	andi	r25, 0x00	; 0
    c7c4:	9a 83       	std	Y+2, r25	; 0x02
    c7c6:	89 83       	std	Y+1, r24	; 0x01
    c7c8:	89 81       	ldd	r24, Y+1	; 0x01
    c7ca:	9a 81       	ldd	r25, Y+2	; 0x02
    c7cc:	00 97       	sbiw	r24, 0x00	; 0
    c7ce:	21 f0       	breq	.+8      	; 0xc7d8 <LITE_READ_PW1_PIN+0x34>
    c7d0:	81 e0       	ldi	r24, 0x01	; 1
    c7d2:	90 e0       	ldi	r25, 0x00	; 0
    c7d4:	9a 83       	std	Y+2, r25	; 0x02
    c7d6:	89 83       	std	Y+1, r24	; 0x01
    c7d8:	89 81       	ldd	r24, Y+1	; 0x01
    c7da:	9a 81       	ldd	r25, Y+2	; 0x02
    c7dc:	22 96       	adiw	r28, 0x02	; 2
    c7de:	0f b6       	in	r0, 0x3f	; 63
    c7e0:	f8 94       	cli
    c7e2:	de bf       	out	0x3e, r29	; 62
    c7e4:	0f be       	out	0x3f, r0	; 63
    c7e6:	cd bf       	out	0x3d, r28	; 61
    c7e8:	df 91       	pop	r29
    c7ea:	cf 91       	pop	r28
    c7ec:	08 95       	ret

0000c7ee <LITE_MAKE_PW1_OUTPUT>:
    c7ee:	cf 93       	push	r28
    c7f0:	df 93       	push	r29
    c7f2:	cd b7       	in	r28, 0x3d	; 61
    c7f4:	de b7       	in	r29, 0x3e	; 62
    c7f6:	a4 e3       	ldi	r26, 0x34	; 52
    c7f8:	b0 e0       	ldi	r27, 0x00	; 0
    c7fa:	e4 e3       	ldi	r30, 0x34	; 52
    c7fc:	f0 e0       	ldi	r31, 0x00	; 0
    c7fe:	80 81       	ld	r24, Z
    c800:	82 60       	ori	r24, 0x02	; 2
    c802:	8c 93       	st	X, r24
    c804:	df 91       	pop	r29
    c806:	cf 91       	pop	r28
    c808:	08 95       	ret

0000c80a <LITE_MAKE_PW1_INPUT>:
    c80a:	cf 93       	push	r28
    c80c:	df 93       	push	r29
    c80e:	cd b7       	in	r28, 0x3d	; 61
    c810:	de b7       	in	r29, 0x3e	; 62
    c812:	a4 e3       	ldi	r26, 0x34	; 52
    c814:	b0 e0       	ldi	r27, 0x00	; 0
    c816:	e4 e3       	ldi	r30, 0x34	; 52
    c818:	f0 e0       	ldi	r31, 0x00	; 0
    c81a:	80 81       	ld	r24, Z
    c81c:	8d 7f       	andi	r24, 0xFD	; 253
    c81e:	8c 93       	st	X, r24
    c820:	df 91       	pop	r29
    c822:	cf 91       	pop	r28
    c824:	08 95       	ret

0000c826 <LITE_SET_PW2_PIN>:
LITE_ASSIGN_PIN( PW2, C, 2 );
    c826:	cf 93       	push	r28
    c828:	df 93       	push	r29
    c82a:	cd b7       	in	r28, 0x3d	; 61
    c82c:	de b7       	in	r29, 0x3e	; 62
    c82e:	a5 e3       	ldi	r26, 0x35	; 53
    c830:	b0 e0       	ldi	r27, 0x00	; 0
    c832:	e5 e3       	ldi	r30, 0x35	; 53
    c834:	f0 e0       	ldi	r31, 0x00	; 0
    c836:	80 81       	ld	r24, Z
    c838:	84 60       	ori	r24, 0x04	; 4
    c83a:	8c 93       	st	X, r24
    c83c:	df 91       	pop	r29
    c83e:	cf 91       	pop	r28
    c840:	08 95       	ret

0000c842 <LITE_CLR_PW2_PIN>:
    c842:	cf 93       	push	r28
    c844:	df 93       	push	r29
    c846:	cd b7       	in	r28, 0x3d	; 61
    c848:	de b7       	in	r29, 0x3e	; 62
    c84a:	a5 e3       	ldi	r26, 0x35	; 53
    c84c:	b0 e0       	ldi	r27, 0x00	; 0
    c84e:	e5 e3       	ldi	r30, 0x35	; 53
    c850:	f0 e0       	ldi	r31, 0x00	; 0
    c852:	80 81       	ld	r24, Z
    c854:	8b 7f       	andi	r24, 0xFB	; 251
    c856:	8c 93       	st	X, r24
    c858:	df 91       	pop	r29
    c85a:	cf 91       	pop	r28
    c85c:	08 95       	ret

0000c85e <LITE_READ_PW2_PIN>:
    c85e:	cf 93       	push	r28
    c860:	df 93       	push	r29
    c862:	cd b7       	in	r28, 0x3d	; 61
    c864:	de b7       	in	r29, 0x3e	; 62
    c866:	22 97       	sbiw	r28, 0x02	; 2
    c868:	0f b6       	in	r0, 0x3f	; 63
    c86a:	f8 94       	cli
    c86c:	de bf       	out	0x3e, r29	; 62
    c86e:	0f be       	out	0x3f, r0	; 63
    c870:	cd bf       	out	0x3d, r28	; 61
    c872:	e3 e3       	ldi	r30, 0x33	; 51
    c874:	f0 e0       	ldi	r31, 0x00	; 0
    c876:	80 81       	ld	r24, Z
    c878:	99 27       	eor	r25, r25
    c87a:	84 70       	andi	r24, 0x04	; 4
    c87c:	90 70       	andi	r25, 0x00	; 0
    c87e:	9a 83       	std	Y+2, r25	; 0x02
    c880:	89 83       	std	Y+1, r24	; 0x01
    c882:	89 81       	ldd	r24, Y+1	; 0x01
    c884:	9a 81       	ldd	r25, Y+2	; 0x02
    c886:	00 97       	sbiw	r24, 0x00	; 0
    c888:	21 f0       	breq	.+8      	; 0xc892 <LITE_READ_PW2_PIN+0x34>
    c88a:	81 e0       	ldi	r24, 0x01	; 1
    c88c:	90 e0       	ldi	r25, 0x00	; 0
    c88e:	9a 83       	std	Y+2, r25	; 0x02
    c890:	89 83       	std	Y+1, r24	; 0x01
    c892:	89 81       	ldd	r24, Y+1	; 0x01
    c894:	9a 81       	ldd	r25, Y+2	; 0x02
    c896:	22 96       	adiw	r28, 0x02	; 2
    c898:	0f b6       	in	r0, 0x3f	; 63
    c89a:	f8 94       	cli
    c89c:	de bf       	out	0x3e, r29	; 62
    c89e:	0f be       	out	0x3f, r0	; 63
    c8a0:	cd bf       	out	0x3d, r28	; 61
    c8a2:	df 91       	pop	r29
    c8a4:	cf 91       	pop	r28
    c8a6:	08 95       	ret

0000c8a8 <LITE_MAKE_PW2_OUTPUT>:
    c8a8:	cf 93       	push	r28
    c8aa:	df 93       	push	r29
    c8ac:	cd b7       	in	r28, 0x3d	; 61
    c8ae:	de b7       	in	r29, 0x3e	; 62
    c8b0:	a4 e3       	ldi	r26, 0x34	; 52
    c8b2:	b0 e0       	ldi	r27, 0x00	; 0
    c8b4:	e4 e3       	ldi	r30, 0x34	; 52
    c8b6:	f0 e0       	ldi	r31, 0x00	; 0
    c8b8:	80 81       	ld	r24, Z
    c8ba:	84 60       	ori	r24, 0x04	; 4
    c8bc:	8c 93       	st	X, r24
    c8be:	df 91       	pop	r29
    c8c0:	cf 91       	pop	r28
    c8c2:	08 95       	ret

0000c8c4 <LITE_MAKE_PW2_INPUT>:
    c8c4:	cf 93       	push	r28
    c8c6:	df 93       	push	r29
    c8c8:	cd b7       	in	r28, 0x3d	; 61
    c8ca:	de b7       	in	r29, 0x3e	; 62
    c8cc:	a4 e3       	ldi	r26, 0x34	; 52
    c8ce:	b0 e0       	ldi	r27, 0x00	; 0
    c8d0:	e4 e3       	ldi	r30, 0x34	; 52
    c8d2:	f0 e0       	ldi	r31, 0x00	; 0
    c8d4:	80 81       	ld	r24, Z
    c8d6:	8b 7f       	andi	r24, 0xFB	; 251
    c8d8:	8c 93       	st	X, r24
    c8da:	df 91       	pop	r29
    c8dc:	cf 91       	pop	r28
    c8de:	08 95       	ret

0000c8e0 <LITE_SET_PW3_PIN>:
LITE_ASSIGN_PIN( PW3, C, 3 );
    c8e0:	cf 93       	push	r28
    c8e2:	df 93       	push	r29
    c8e4:	cd b7       	in	r28, 0x3d	; 61
    c8e6:	de b7       	in	r29, 0x3e	; 62
    c8e8:	a5 e3       	ldi	r26, 0x35	; 53
    c8ea:	b0 e0       	ldi	r27, 0x00	; 0
    c8ec:	e5 e3       	ldi	r30, 0x35	; 53
    c8ee:	f0 e0       	ldi	r31, 0x00	; 0
    c8f0:	80 81       	ld	r24, Z
    c8f2:	88 60       	ori	r24, 0x08	; 8
    c8f4:	8c 93       	st	X, r24
    c8f6:	df 91       	pop	r29
    c8f8:	cf 91       	pop	r28
    c8fa:	08 95       	ret

0000c8fc <LITE_CLR_PW3_PIN>:
    c8fc:	cf 93       	push	r28
    c8fe:	df 93       	push	r29
    c900:	cd b7       	in	r28, 0x3d	; 61
    c902:	de b7       	in	r29, 0x3e	; 62
    c904:	a5 e3       	ldi	r26, 0x35	; 53
    c906:	b0 e0       	ldi	r27, 0x00	; 0
    c908:	e5 e3       	ldi	r30, 0x35	; 53
    c90a:	f0 e0       	ldi	r31, 0x00	; 0
    c90c:	80 81       	ld	r24, Z
    c90e:	87 7f       	andi	r24, 0xF7	; 247
    c910:	8c 93       	st	X, r24
    c912:	df 91       	pop	r29
    c914:	cf 91       	pop	r28
    c916:	08 95       	ret

0000c918 <LITE_READ_PW3_PIN>:
    c918:	cf 93       	push	r28
    c91a:	df 93       	push	r29
    c91c:	cd b7       	in	r28, 0x3d	; 61
    c91e:	de b7       	in	r29, 0x3e	; 62
    c920:	22 97       	sbiw	r28, 0x02	; 2
    c922:	0f b6       	in	r0, 0x3f	; 63
    c924:	f8 94       	cli
    c926:	de bf       	out	0x3e, r29	; 62
    c928:	0f be       	out	0x3f, r0	; 63
    c92a:	cd bf       	out	0x3d, r28	; 61
    c92c:	e3 e3       	ldi	r30, 0x33	; 51
    c92e:	f0 e0       	ldi	r31, 0x00	; 0
    c930:	80 81       	ld	r24, Z
    c932:	99 27       	eor	r25, r25
    c934:	88 70       	andi	r24, 0x08	; 8
    c936:	90 70       	andi	r25, 0x00	; 0
    c938:	9a 83       	std	Y+2, r25	; 0x02
    c93a:	89 83       	std	Y+1, r24	; 0x01
    c93c:	89 81       	ldd	r24, Y+1	; 0x01
    c93e:	9a 81       	ldd	r25, Y+2	; 0x02
    c940:	00 97       	sbiw	r24, 0x00	; 0
    c942:	21 f0       	breq	.+8      	; 0xc94c <LITE_READ_PW3_PIN+0x34>
    c944:	81 e0       	ldi	r24, 0x01	; 1
    c946:	90 e0       	ldi	r25, 0x00	; 0
    c948:	9a 83       	std	Y+2, r25	; 0x02
    c94a:	89 83       	std	Y+1, r24	; 0x01
    c94c:	89 81       	ldd	r24, Y+1	; 0x01
    c94e:	9a 81       	ldd	r25, Y+2	; 0x02
    c950:	22 96       	adiw	r28, 0x02	; 2
    c952:	0f b6       	in	r0, 0x3f	; 63
    c954:	f8 94       	cli
    c956:	de bf       	out	0x3e, r29	; 62
    c958:	0f be       	out	0x3f, r0	; 63
    c95a:	cd bf       	out	0x3d, r28	; 61
    c95c:	df 91       	pop	r29
    c95e:	cf 91       	pop	r28
    c960:	08 95       	ret

0000c962 <LITE_MAKE_PW3_OUTPUT>:
    c962:	cf 93       	push	r28
    c964:	df 93       	push	r29
    c966:	cd b7       	in	r28, 0x3d	; 61
    c968:	de b7       	in	r29, 0x3e	; 62
    c96a:	a4 e3       	ldi	r26, 0x34	; 52
    c96c:	b0 e0       	ldi	r27, 0x00	; 0
    c96e:	e4 e3       	ldi	r30, 0x34	; 52
    c970:	f0 e0       	ldi	r31, 0x00	; 0
    c972:	80 81       	ld	r24, Z
    c974:	88 60       	ori	r24, 0x08	; 8
    c976:	8c 93       	st	X, r24
    c978:	df 91       	pop	r29
    c97a:	cf 91       	pop	r28
    c97c:	08 95       	ret

0000c97e <LITE_MAKE_PW3_INPUT>:
    c97e:	cf 93       	push	r28
    c980:	df 93       	push	r29
    c982:	cd b7       	in	r28, 0x3d	; 61
    c984:	de b7       	in	r29, 0x3e	; 62
    c986:	a4 e3       	ldi	r26, 0x34	; 52
    c988:	b0 e0       	ldi	r27, 0x00	; 0
    c98a:	e4 e3       	ldi	r30, 0x34	; 52
    c98c:	f0 e0       	ldi	r31, 0x00	; 0
    c98e:	80 81       	ld	r24, Z
    c990:	87 7f       	andi	r24, 0xF7	; 247
    c992:	8c 93       	st	X, r24
    c994:	df 91       	pop	r29
    c996:	cf 91       	pop	r28
    c998:	08 95       	ret

0000c99a <LITE_SET_PW4_PIN>:
LITE_ASSIGN_PIN( PW4, C, 4 );
    c99a:	cf 93       	push	r28
    c99c:	df 93       	push	r29
    c99e:	cd b7       	in	r28, 0x3d	; 61
    c9a0:	de b7       	in	r29, 0x3e	; 62
    c9a2:	a5 e3       	ldi	r26, 0x35	; 53
    c9a4:	b0 e0       	ldi	r27, 0x00	; 0
    c9a6:	e5 e3       	ldi	r30, 0x35	; 53
    c9a8:	f0 e0       	ldi	r31, 0x00	; 0
    c9aa:	80 81       	ld	r24, Z
    c9ac:	80 61       	ori	r24, 0x10	; 16
    c9ae:	8c 93       	st	X, r24
    c9b0:	df 91       	pop	r29
    c9b2:	cf 91       	pop	r28
    c9b4:	08 95       	ret

0000c9b6 <LITE_CLR_PW4_PIN>:
    c9b6:	cf 93       	push	r28
    c9b8:	df 93       	push	r29
    c9ba:	cd b7       	in	r28, 0x3d	; 61
    c9bc:	de b7       	in	r29, 0x3e	; 62
    c9be:	a5 e3       	ldi	r26, 0x35	; 53
    c9c0:	b0 e0       	ldi	r27, 0x00	; 0
    c9c2:	e5 e3       	ldi	r30, 0x35	; 53
    c9c4:	f0 e0       	ldi	r31, 0x00	; 0
    c9c6:	80 81       	ld	r24, Z
    c9c8:	8f 7e       	andi	r24, 0xEF	; 239
    c9ca:	8c 93       	st	X, r24
    c9cc:	df 91       	pop	r29
    c9ce:	cf 91       	pop	r28
    c9d0:	08 95       	ret

0000c9d2 <LITE_READ_PW4_PIN>:
    c9d2:	cf 93       	push	r28
    c9d4:	df 93       	push	r29
    c9d6:	cd b7       	in	r28, 0x3d	; 61
    c9d8:	de b7       	in	r29, 0x3e	; 62
    c9da:	22 97       	sbiw	r28, 0x02	; 2
    c9dc:	0f b6       	in	r0, 0x3f	; 63
    c9de:	f8 94       	cli
    c9e0:	de bf       	out	0x3e, r29	; 62
    c9e2:	0f be       	out	0x3f, r0	; 63
    c9e4:	cd bf       	out	0x3d, r28	; 61
    c9e6:	e3 e3       	ldi	r30, 0x33	; 51
    c9e8:	f0 e0       	ldi	r31, 0x00	; 0
    c9ea:	80 81       	ld	r24, Z
    c9ec:	99 27       	eor	r25, r25
    c9ee:	80 71       	andi	r24, 0x10	; 16
    c9f0:	90 70       	andi	r25, 0x00	; 0
    c9f2:	9a 83       	std	Y+2, r25	; 0x02
    c9f4:	89 83       	std	Y+1, r24	; 0x01
    c9f6:	89 81       	ldd	r24, Y+1	; 0x01
    c9f8:	9a 81       	ldd	r25, Y+2	; 0x02
    c9fa:	00 97       	sbiw	r24, 0x00	; 0
    c9fc:	21 f0       	breq	.+8      	; 0xca06 <LITE_READ_PW4_PIN+0x34>
    c9fe:	81 e0       	ldi	r24, 0x01	; 1
    ca00:	90 e0       	ldi	r25, 0x00	; 0
    ca02:	9a 83       	std	Y+2, r25	; 0x02
    ca04:	89 83       	std	Y+1, r24	; 0x01
    ca06:	89 81       	ldd	r24, Y+1	; 0x01
    ca08:	9a 81       	ldd	r25, Y+2	; 0x02
    ca0a:	22 96       	adiw	r28, 0x02	; 2
    ca0c:	0f b6       	in	r0, 0x3f	; 63
    ca0e:	f8 94       	cli
    ca10:	de bf       	out	0x3e, r29	; 62
    ca12:	0f be       	out	0x3f, r0	; 63
    ca14:	cd bf       	out	0x3d, r28	; 61
    ca16:	df 91       	pop	r29
    ca18:	cf 91       	pop	r28
    ca1a:	08 95       	ret

0000ca1c <LITE_MAKE_PW4_OUTPUT>:
    ca1c:	cf 93       	push	r28
    ca1e:	df 93       	push	r29
    ca20:	cd b7       	in	r28, 0x3d	; 61
    ca22:	de b7       	in	r29, 0x3e	; 62
    ca24:	a4 e3       	ldi	r26, 0x34	; 52
    ca26:	b0 e0       	ldi	r27, 0x00	; 0
    ca28:	e4 e3       	ldi	r30, 0x34	; 52
    ca2a:	f0 e0       	ldi	r31, 0x00	; 0
    ca2c:	80 81       	ld	r24, Z
    ca2e:	80 61       	ori	r24, 0x10	; 16
    ca30:	8c 93       	st	X, r24
    ca32:	df 91       	pop	r29
    ca34:	cf 91       	pop	r28
    ca36:	08 95       	ret

0000ca38 <LITE_MAKE_PW4_INPUT>:
    ca38:	cf 93       	push	r28
    ca3a:	df 93       	push	r29
    ca3c:	cd b7       	in	r28, 0x3d	; 61
    ca3e:	de b7       	in	r29, 0x3e	; 62
    ca40:	a4 e3       	ldi	r26, 0x34	; 52
    ca42:	b0 e0       	ldi	r27, 0x00	; 0
    ca44:	e4 e3       	ldi	r30, 0x34	; 52
    ca46:	f0 e0       	ldi	r31, 0x00	; 0
    ca48:	80 81       	ld	r24, Z
    ca4a:	8f 7e       	andi	r24, 0xEF	; 239
    ca4c:	8c 93       	st	X, r24
    ca4e:	df 91       	pop	r29
    ca50:	cf 91       	pop	r28
    ca52:	08 95       	ret

0000ca54 <LITE_SET_PW5_PIN>:
LITE_ASSIGN_PIN( PW5, C, 5 );
    ca54:	cf 93       	push	r28
    ca56:	df 93       	push	r29
    ca58:	cd b7       	in	r28, 0x3d	; 61
    ca5a:	de b7       	in	r29, 0x3e	; 62
    ca5c:	a5 e3       	ldi	r26, 0x35	; 53
    ca5e:	b0 e0       	ldi	r27, 0x00	; 0
    ca60:	e5 e3       	ldi	r30, 0x35	; 53
    ca62:	f0 e0       	ldi	r31, 0x00	; 0
    ca64:	80 81       	ld	r24, Z
    ca66:	80 62       	ori	r24, 0x20	; 32
    ca68:	8c 93       	st	X, r24
    ca6a:	df 91       	pop	r29
    ca6c:	cf 91       	pop	r28
    ca6e:	08 95       	ret

0000ca70 <LITE_CLR_PW5_PIN>:
    ca70:	cf 93       	push	r28
    ca72:	df 93       	push	r29
    ca74:	cd b7       	in	r28, 0x3d	; 61
    ca76:	de b7       	in	r29, 0x3e	; 62
    ca78:	a5 e3       	ldi	r26, 0x35	; 53
    ca7a:	b0 e0       	ldi	r27, 0x00	; 0
    ca7c:	e5 e3       	ldi	r30, 0x35	; 53
    ca7e:	f0 e0       	ldi	r31, 0x00	; 0
    ca80:	80 81       	ld	r24, Z
    ca82:	8f 7d       	andi	r24, 0xDF	; 223
    ca84:	8c 93       	st	X, r24
    ca86:	df 91       	pop	r29
    ca88:	cf 91       	pop	r28
    ca8a:	08 95       	ret

0000ca8c <LITE_READ_PW5_PIN>:
    ca8c:	cf 93       	push	r28
    ca8e:	df 93       	push	r29
    ca90:	cd b7       	in	r28, 0x3d	; 61
    ca92:	de b7       	in	r29, 0x3e	; 62
    ca94:	22 97       	sbiw	r28, 0x02	; 2
    ca96:	0f b6       	in	r0, 0x3f	; 63
    ca98:	f8 94       	cli
    ca9a:	de bf       	out	0x3e, r29	; 62
    ca9c:	0f be       	out	0x3f, r0	; 63
    ca9e:	cd bf       	out	0x3d, r28	; 61
    caa0:	e3 e3       	ldi	r30, 0x33	; 51
    caa2:	f0 e0       	ldi	r31, 0x00	; 0
    caa4:	80 81       	ld	r24, Z
    caa6:	99 27       	eor	r25, r25
    caa8:	80 72       	andi	r24, 0x20	; 32
    caaa:	90 70       	andi	r25, 0x00	; 0
    caac:	9a 83       	std	Y+2, r25	; 0x02
    caae:	89 83       	std	Y+1, r24	; 0x01
    cab0:	89 81       	ldd	r24, Y+1	; 0x01
    cab2:	9a 81       	ldd	r25, Y+2	; 0x02
    cab4:	00 97       	sbiw	r24, 0x00	; 0
    cab6:	21 f0       	breq	.+8      	; 0xcac0 <LITE_READ_PW5_PIN+0x34>
    cab8:	81 e0       	ldi	r24, 0x01	; 1
    caba:	90 e0       	ldi	r25, 0x00	; 0
    cabc:	9a 83       	std	Y+2, r25	; 0x02
    cabe:	89 83       	std	Y+1, r24	; 0x01
    cac0:	89 81       	ldd	r24, Y+1	; 0x01
    cac2:	9a 81       	ldd	r25, Y+2	; 0x02
    cac4:	22 96       	adiw	r28, 0x02	; 2
    cac6:	0f b6       	in	r0, 0x3f	; 63
    cac8:	f8 94       	cli
    caca:	de bf       	out	0x3e, r29	; 62
    cacc:	0f be       	out	0x3f, r0	; 63
    cace:	cd bf       	out	0x3d, r28	; 61
    cad0:	df 91       	pop	r29
    cad2:	cf 91       	pop	r28
    cad4:	08 95       	ret

0000cad6 <LITE_MAKE_PW5_OUTPUT>:
    cad6:	cf 93       	push	r28
    cad8:	df 93       	push	r29
    cada:	cd b7       	in	r28, 0x3d	; 61
    cadc:	de b7       	in	r29, 0x3e	; 62
    cade:	a4 e3       	ldi	r26, 0x34	; 52
    cae0:	b0 e0       	ldi	r27, 0x00	; 0
    cae2:	e4 e3       	ldi	r30, 0x34	; 52
    cae4:	f0 e0       	ldi	r31, 0x00	; 0
    cae6:	80 81       	ld	r24, Z
    cae8:	80 62       	ori	r24, 0x20	; 32
    caea:	8c 93       	st	X, r24
    caec:	df 91       	pop	r29
    caee:	cf 91       	pop	r28
    caf0:	08 95       	ret

0000caf2 <LITE_MAKE_PW5_INPUT>:
    caf2:	cf 93       	push	r28
    caf4:	df 93       	push	r29
    caf6:	cd b7       	in	r28, 0x3d	; 61
    caf8:	de b7       	in	r29, 0x3e	; 62
    cafa:	a4 e3       	ldi	r26, 0x34	; 52
    cafc:	b0 e0       	ldi	r27, 0x00	; 0
    cafe:	e4 e3       	ldi	r30, 0x34	; 52
    cb00:	f0 e0       	ldi	r31, 0x00	; 0
    cb02:	80 81       	ld	r24, Z
    cb04:	8f 7d       	andi	r24, 0xDF	; 223
    cb06:	8c 93       	st	X, r24
    cb08:	df 91       	pop	r29
    cb0a:	cf 91       	pop	r28
    cb0c:	08 95       	ret

0000cb0e <LITE_SET_PW6_PIN>:
LITE_ASSIGN_PIN( PW6, C, 6 );
    cb0e:	cf 93       	push	r28
    cb10:	df 93       	push	r29
    cb12:	cd b7       	in	r28, 0x3d	; 61
    cb14:	de b7       	in	r29, 0x3e	; 62
    cb16:	a5 e3       	ldi	r26, 0x35	; 53
    cb18:	b0 e0       	ldi	r27, 0x00	; 0
    cb1a:	e5 e3       	ldi	r30, 0x35	; 53
    cb1c:	f0 e0       	ldi	r31, 0x00	; 0
    cb1e:	80 81       	ld	r24, Z
    cb20:	80 64       	ori	r24, 0x40	; 64
    cb22:	8c 93       	st	X, r24
    cb24:	df 91       	pop	r29
    cb26:	cf 91       	pop	r28
    cb28:	08 95       	ret

0000cb2a <LITE_CLR_PW6_PIN>:
    cb2a:	cf 93       	push	r28
    cb2c:	df 93       	push	r29
    cb2e:	cd b7       	in	r28, 0x3d	; 61
    cb30:	de b7       	in	r29, 0x3e	; 62
    cb32:	a5 e3       	ldi	r26, 0x35	; 53
    cb34:	b0 e0       	ldi	r27, 0x00	; 0
    cb36:	e5 e3       	ldi	r30, 0x35	; 53
    cb38:	f0 e0       	ldi	r31, 0x00	; 0
    cb3a:	80 81       	ld	r24, Z
    cb3c:	8f 7b       	andi	r24, 0xBF	; 191
    cb3e:	8c 93       	st	X, r24
    cb40:	df 91       	pop	r29
    cb42:	cf 91       	pop	r28
    cb44:	08 95       	ret

0000cb46 <LITE_READ_PW6_PIN>:
    cb46:	cf 93       	push	r28
    cb48:	df 93       	push	r29
    cb4a:	cd b7       	in	r28, 0x3d	; 61
    cb4c:	de b7       	in	r29, 0x3e	; 62
    cb4e:	22 97       	sbiw	r28, 0x02	; 2
    cb50:	0f b6       	in	r0, 0x3f	; 63
    cb52:	f8 94       	cli
    cb54:	de bf       	out	0x3e, r29	; 62
    cb56:	0f be       	out	0x3f, r0	; 63
    cb58:	cd bf       	out	0x3d, r28	; 61
    cb5a:	e3 e3       	ldi	r30, 0x33	; 51
    cb5c:	f0 e0       	ldi	r31, 0x00	; 0
    cb5e:	80 81       	ld	r24, Z
    cb60:	99 27       	eor	r25, r25
    cb62:	80 74       	andi	r24, 0x40	; 64
    cb64:	90 70       	andi	r25, 0x00	; 0
    cb66:	9a 83       	std	Y+2, r25	; 0x02
    cb68:	89 83       	std	Y+1, r24	; 0x01
    cb6a:	89 81       	ldd	r24, Y+1	; 0x01
    cb6c:	9a 81       	ldd	r25, Y+2	; 0x02
    cb6e:	00 97       	sbiw	r24, 0x00	; 0
    cb70:	21 f0       	breq	.+8      	; 0xcb7a <LITE_READ_PW6_PIN+0x34>
    cb72:	81 e0       	ldi	r24, 0x01	; 1
    cb74:	90 e0       	ldi	r25, 0x00	; 0
    cb76:	9a 83       	std	Y+2, r25	; 0x02
    cb78:	89 83       	std	Y+1, r24	; 0x01
    cb7a:	89 81       	ldd	r24, Y+1	; 0x01
    cb7c:	9a 81       	ldd	r25, Y+2	; 0x02
    cb7e:	22 96       	adiw	r28, 0x02	; 2
    cb80:	0f b6       	in	r0, 0x3f	; 63
    cb82:	f8 94       	cli
    cb84:	de bf       	out	0x3e, r29	; 62
    cb86:	0f be       	out	0x3f, r0	; 63
    cb88:	cd bf       	out	0x3d, r28	; 61
    cb8a:	df 91       	pop	r29
    cb8c:	cf 91       	pop	r28
    cb8e:	08 95       	ret

0000cb90 <LITE_MAKE_PW6_OUTPUT>:
    cb90:	cf 93       	push	r28
    cb92:	df 93       	push	r29
    cb94:	cd b7       	in	r28, 0x3d	; 61
    cb96:	de b7       	in	r29, 0x3e	; 62
    cb98:	a4 e3       	ldi	r26, 0x34	; 52
    cb9a:	b0 e0       	ldi	r27, 0x00	; 0
    cb9c:	e4 e3       	ldi	r30, 0x34	; 52
    cb9e:	f0 e0       	ldi	r31, 0x00	; 0
    cba0:	80 81       	ld	r24, Z
    cba2:	80 64       	ori	r24, 0x40	; 64
    cba4:	8c 93       	st	X, r24
    cba6:	df 91       	pop	r29
    cba8:	cf 91       	pop	r28
    cbaa:	08 95       	ret

0000cbac <LITE_MAKE_PW6_INPUT>:
    cbac:	cf 93       	push	r28
    cbae:	df 93       	push	r29
    cbb0:	cd b7       	in	r28, 0x3d	; 61
    cbb2:	de b7       	in	r29, 0x3e	; 62
    cbb4:	a4 e3       	ldi	r26, 0x34	; 52
    cbb6:	b0 e0       	ldi	r27, 0x00	; 0
    cbb8:	e4 e3       	ldi	r30, 0x34	; 52
    cbba:	f0 e0       	ldi	r31, 0x00	; 0
    cbbc:	80 81       	ld	r24, Z
    cbbe:	8f 7b       	andi	r24, 0xBF	; 191
    cbc0:	8c 93       	st	X, r24
    cbc2:	df 91       	pop	r29
    cbc4:	cf 91       	pop	r28
    cbc6:	08 95       	ret

0000cbc8 <LITE_SET_PW7_PIN>:
LITE_ASSIGN_PIN( PW7, C, 7 );
    cbc8:	cf 93       	push	r28
    cbca:	df 93       	push	r29
    cbcc:	cd b7       	in	r28, 0x3d	; 61
    cbce:	de b7       	in	r29, 0x3e	; 62
    cbd0:	a5 e3       	ldi	r26, 0x35	; 53
    cbd2:	b0 e0       	ldi	r27, 0x00	; 0
    cbd4:	e5 e3       	ldi	r30, 0x35	; 53
    cbd6:	f0 e0       	ldi	r31, 0x00	; 0
    cbd8:	80 81       	ld	r24, Z
    cbda:	80 68       	ori	r24, 0x80	; 128
    cbdc:	8c 93       	st	X, r24
    cbde:	df 91       	pop	r29
    cbe0:	cf 91       	pop	r28
    cbe2:	08 95       	ret

0000cbe4 <LITE_CLR_PW7_PIN>:
    cbe4:	cf 93       	push	r28
    cbe6:	df 93       	push	r29
    cbe8:	cd b7       	in	r28, 0x3d	; 61
    cbea:	de b7       	in	r29, 0x3e	; 62
    cbec:	a5 e3       	ldi	r26, 0x35	; 53
    cbee:	b0 e0       	ldi	r27, 0x00	; 0
    cbf0:	e5 e3       	ldi	r30, 0x35	; 53
    cbf2:	f0 e0       	ldi	r31, 0x00	; 0
    cbf4:	90 81       	ld	r25, Z
    cbf6:	8f e7       	ldi	r24, 0x7F	; 127
    cbf8:	89 23       	and	r24, r25
    cbfa:	8c 93       	st	X, r24
    cbfc:	df 91       	pop	r29
    cbfe:	cf 91       	pop	r28
    cc00:	08 95       	ret

0000cc02 <LITE_READ_PW7_PIN>:
    cc02:	cf 93       	push	r28
    cc04:	df 93       	push	r29
    cc06:	cd b7       	in	r28, 0x3d	; 61
    cc08:	de b7       	in	r29, 0x3e	; 62
    cc0a:	22 97       	sbiw	r28, 0x02	; 2
    cc0c:	0f b6       	in	r0, 0x3f	; 63
    cc0e:	f8 94       	cli
    cc10:	de bf       	out	0x3e, r29	; 62
    cc12:	0f be       	out	0x3f, r0	; 63
    cc14:	cd bf       	out	0x3d, r28	; 61
    cc16:	e3 e3       	ldi	r30, 0x33	; 51
    cc18:	f0 e0       	ldi	r31, 0x00	; 0
    cc1a:	80 81       	ld	r24, Z
    cc1c:	1a 82       	std	Y+2, r1	; 0x02
    cc1e:	19 82       	std	Y+1, r1	; 0x01
    cc20:	88 23       	and	r24, r24
    cc22:	24 f4       	brge	.+8      	; 0xcc2c <LITE_READ_PW7_PIN+0x2a>
    cc24:	81 e0       	ldi	r24, 0x01	; 1
    cc26:	90 e0       	ldi	r25, 0x00	; 0
    cc28:	9a 83       	std	Y+2, r25	; 0x02
    cc2a:	89 83       	std	Y+1, r24	; 0x01
    cc2c:	89 81       	ldd	r24, Y+1	; 0x01
    cc2e:	9a 81       	ldd	r25, Y+2	; 0x02
    cc30:	22 96       	adiw	r28, 0x02	; 2
    cc32:	0f b6       	in	r0, 0x3f	; 63
    cc34:	f8 94       	cli
    cc36:	de bf       	out	0x3e, r29	; 62
    cc38:	0f be       	out	0x3f, r0	; 63
    cc3a:	cd bf       	out	0x3d, r28	; 61
    cc3c:	df 91       	pop	r29
    cc3e:	cf 91       	pop	r28
    cc40:	08 95       	ret

0000cc42 <LITE_MAKE_PW7_OUTPUT>:
    cc42:	cf 93       	push	r28
    cc44:	df 93       	push	r29
    cc46:	cd b7       	in	r28, 0x3d	; 61
    cc48:	de b7       	in	r29, 0x3e	; 62
    cc4a:	a4 e3       	ldi	r26, 0x34	; 52
    cc4c:	b0 e0       	ldi	r27, 0x00	; 0
    cc4e:	e4 e3       	ldi	r30, 0x34	; 52
    cc50:	f0 e0       	ldi	r31, 0x00	; 0
    cc52:	80 81       	ld	r24, Z
    cc54:	80 68       	ori	r24, 0x80	; 128
    cc56:	8c 93       	st	X, r24
    cc58:	df 91       	pop	r29
    cc5a:	cf 91       	pop	r28
    cc5c:	08 95       	ret

0000cc5e <LITE_MAKE_PW7_INPUT>:
    cc5e:	cf 93       	push	r28
    cc60:	df 93       	push	r29
    cc62:	cd b7       	in	r28, 0x3d	; 61
    cc64:	de b7       	in	r29, 0x3e	; 62
    cc66:	a4 e3       	ldi	r26, 0x34	; 52
    cc68:	b0 e0       	ldi	r27, 0x00	; 0
    cc6a:	e4 e3       	ldi	r30, 0x34	; 52
    cc6c:	f0 e0       	ldi	r31, 0x00	; 0
    cc6e:	90 81       	ld	r25, Z
    cc70:	8f e7       	ldi	r24, 0x7F	; 127
    cc72:	89 23       	and	r24, r25
    cc74:	8c 93       	st	X, r24
    cc76:	df 91       	pop	r29
    cc78:	cf 91       	pop	r28
    cc7a:	08 95       	ret

0000cc7c <LITE_SET_I2C_BUS1_SCL_PIN>:
// i2c bus assignments
LITE_ASSIGN_PIN( I2C_BUS1_SCL, D, 0 );
    cc7c:	cf 93       	push	r28
    cc7e:	df 93       	push	r29
    cc80:	cd b7       	in	r28, 0x3d	; 61
    cc82:	de b7       	in	r29, 0x3e	; 62
    cc84:	a2 e3       	ldi	r26, 0x32	; 50
    cc86:	b0 e0       	ldi	r27, 0x00	; 0
    cc88:	e2 e3       	ldi	r30, 0x32	; 50
    cc8a:	f0 e0       	ldi	r31, 0x00	; 0
    cc8c:	80 81       	ld	r24, Z
    cc8e:	81 60       	ori	r24, 0x01	; 1
    cc90:	8c 93       	st	X, r24
    cc92:	df 91       	pop	r29
    cc94:	cf 91       	pop	r28
    cc96:	08 95       	ret

0000cc98 <LITE_CLR_I2C_BUS1_SCL_PIN>:
    cc98:	cf 93       	push	r28
    cc9a:	df 93       	push	r29
    cc9c:	cd b7       	in	r28, 0x3d	; 61
    cc9e:	de b7       	in	r29, 0x3e	; 62
    cca0:	a2 e3       	ldi	r26, 0x32	; 50
    cca2:	b0 e0       	ldi	r27, 0x00	; 0
    cca4:	e2 e3       	ldi	r30, 0x32	; 50
    cca6:	f0 e0       	ldi	r31, 0x00	; 0
    cca8:	80 81       	ld	r24, Z
    ccaa:	8e 7f       	andi	r24, 0xFE	; 254
    ccac:	8c 93       	st	X, r24
    ccae:	df 91       	pop	r29
    ccb0:	cf 91       	pop	r28
    ccb2:	08 95       	ret

0000ccb4 <LITE_READ_I2C_BUS1_SCL_PIN>:
    ccb4:	cf 93       	push	r28
    ccb6:	df 93       	push	r29
    ccb8:	cd b7       	in	r28, 0x3d	; 61
    ccba:	de b7       	in	r29, 0x3e	; 62
    ccbc:	e0 e3       	ldi	r30, 0x30	; 48
    ccbe:	f0 e0       	ldi	r31, 0x00	; 0
    ccc0:	80 81       	ld	r24, Z
    ccc2:	99 27       	eor	r25, r25
    ccc4:	81 70       	andi	r24, 0x01	; 1
    ccc6:	90 70       	andi	r25, 0x00	; 0
    ccc8:	df 91       	pop	r29
    ccca:	cf 91       	pop	r28
    cccc:	08 95       	ret

0000ccce <LITE_MAKE_I2C_BUS1_SCL_OUTPUT>:
    ccce:	cf 93       	push	r28
    ccd0:	df 93       	push	r29
    ccd2:	cd b7       	in	r28, 0x3d	; 61
    ccd4:	de b7       	in	r29, 0x3e	; 62
    ccd6:	a1 e3       	ldi	r26, 0x31	; 49
    ccd8:	b0 e0       	ldi	r27, 0x00	; 0
    ccda:	e1 e3       	ldi	r30, 0x31	; 49
    ccdc:	f0 e0       	ldi	r31, 0x00	; 0
    ccde:	80 81       	ld	r24, Z
    cce0:	81 60       	ori	r24, 0x01	; 1
    cce2:	8c 93       	st	X, r24
    cce4:	df 91       	pop	r29
    cce6:	cf 91       	pop	r28
    cce8:	08 95       	ret

0000ccea <LITE_MAKE_I2C_BUS1_SCL_INPUT>:
    ccea:	cf 93       	push	r28
    ccec:	df 93       	push	r29
    ccee:	cd b7       	in	r28, 0x3d	; 61
    ccf0:	de b7       	in	r29, 0x3e	; 62
    ccf2:	a1 e3       	ldi	r26, 0x31	; 49
    ccf4:	b0 e0       	ldi	r27, 0x00	; 0
    ccf6:	e1 e3       	ldi	r30, 0x31	; 49
    ccf8:	f0 e0       	ldi	r31, 0x00	; 0
    ccfa:	80 81       	ld	r24, Z
    ccfc:	8e 7f       	andi	r24, 0xFE	; 254
    ccfe:	8c 93       	st	X, r24
    cd00:	df 91       	pop	r29
    cd02:	cf 91       	pop	r28
    cd04:	08 95       	ret

0000cd06 <LITE_SET_I2C_BUS1_SDA_PIN>:
LITE_ASSIGN_PIN( I2C_BUS1_SDA, D, 1 );
    cd06:	cf 93       	push	r28
    cd08:	df 93       	push	r29
    cd0a:	cd b7       	in	r28, 0x3d	; 61
    cd0c:	de b7       	in	r29, 0x3e	; 62
    cd0e:	a2 e3       	ldi	r26, 0x32	; 50
    cd10:	b0 e0       	ldi	r27, 0x00	; 0
    cd12:	e2 e3       	ldi	r30, 0x32	; 50
    cd14:	f0 e0       	ldi	r31, 0x00	; 0
    cd16:	80 81       	ld	r24, Z
    cd18:	82 60       	ori	r24, 0x02	; 2
    cd1a:	8c 93       	st	X, r24
    cd1c:	df 91       	pop	r29
    cd1e:	cf 91       	pop	r28
    cd20:	08 95       	ret

0000cd22 <LITE_CLR_I2C_BUS1_SDA_PIN>:
    cd22:	cf 93       	push	r28
    cd24:	df 93       	push	r29
    cd26:	cd b7       	in	r28, 0x3d	; 61
    cd28:	de b7       	in	r29, 0x3e	; 62
    cd2a:	a2 e3       	ldi	r26, 0x32	; 50
    cd2c:	b0 e0       	ldi	r27, 0x00	; 0
    cd2e:	e2 e3       	ldi	r30, 0x32	; 50
    cd30:	f0 e0       	ldi	r31, 0x00	; 0
    cd32:	80 81       	ld	r24, Z
    cd34:	8d 7f       	andi	r24, 0xFD	; 253
    cd36:	8c 93       	st	X, r24
    cd38:	df 91       	pop	r29
    cd3a:	cf 91       	pop	r28
    cd3c:	08 95       	ret

0000cd3e <LITE_READ_I2C_BUS1_SDA_PIN>:
    cd3e:	cf 93       	push	r28
    cd40:	df 93       	push	r29
    cd42:	cd b7       	in	r28, 0x3d	; 61
    cd44:	de b7       	in	r29, 0x3e	; 62
    cd46:	22 97       	sbiw	r28, 0x02	; 2
    cd48:	0f b6       	in	r0, 0x3f	; 63
    cd4a:	f8 94       	cli
    cd4c:	de bf       	out	0x3e, r29	; 62
    cd4e:	0f be       	out	0x3f, r0	; 63
    cd50:	cd bf       	out	0x3d, r28	; 61
    cd52:	e0 e3       	ldi	r30, 0x30	; 48
    cd54:	f0 e0       	ldi	r31, 0x00	; 0
    cd56:	80 81       	ld	r24, Z
    cd58:	99 27       	eor	r25, r25
    cd5a:	82 70       	andi	r24, 0x02	; 2
    cd5c:	90 70       	andi	r25, 0x00	; 0
    cd5e:	9a 83       	std	Y+2, r25	; 0x02
    cd60:	89 83       	std	Y+1, r24	; 0x01
    cd62:	89 81       	ldd	r24, Y+1	; 0x01
    cd64:	9a 81       	ldd	r25, Y+2	; 0x02
    cd66:	00 97       	sbiw	r24, 0x00	; 0
    cd68:	21 f0       	breq	.+8      	; 0xcd72 <LITE_READ_I2C_BUS1_SDA_PIN+0x34>
    cd6a:	81 e0       	ldi	r24, 0x01	; 1
    cd6c:	90 e0       	ldi	r25, 0x00	; 0
    cd6e:	9a 83       	std	Y+2, r25	; 0x02
    cd70:	89 83       	std	Y+1, r24	; 0x01
    cd72:	89 81       	ldd	r24, Y+1	; 0x01
    cd74:	9a 81       	ldd	r25, Y+2	; 0x02
    cd76:	22 96       	adiw	r28, 0x02	; 2
    cd78:	0f b6       	in	r0, 0x3f	; 63
    cd7a:	f8 94       	cli
    cd7c:	de bf       	out	0x3e, r29	; 62
    cd7e:	0f be       	out	0x3f, r0	; 63
    cd80:	cd bf       	out	0x3d, r28	; 61
    cd82:	df 91       	pop	r29
    cd84:	cf 91       	pop	r28
    cd86:	08 95       	ret

0000cd88 <LITE_MAKE_I2C_BUS1_SDA_OUTPUT>:
    cd88:	cf 93       	push	r28
    cd8a:	df 93       	push	r29
    cd8c:	cd b7       	in	r28, 0x3d	; 61
    cd8e:	de b7       	in	r29, 0x3e	; 62
    cd90:	a1 e3       	ldi	r26, 0x31	; 49
    cd92:	b0 e0       	ldi	r27, 0x00	; 0
    cd94:	e1 e3       	ldi	r30, 0x31	; 49
    cd96:	f0 e0       	ldi	r31, 0x00	; 0
    cd98:	80 81       	ld	r24, Z
    cd9a:	82 60       	ori	r24, 0x02	; 2
    cd9c:	8c 93       	st	X, r24
    cd9e:	df 91       	pop	r29
    cda0:	cf 91       	pop	r28
    cda2:	08 95       	ret

0000cda4 <LITE_MAKE_I2C_BUS1_SDA_INPUT>:
    cda4:	cf 93       	push	r28
    cda6:	df 93       	push	r29
    cda8:	cd b7       	in	r28, 0x3d	; 61
    cdaa:	de b7       	in	r29, 0x3e	; 62
    cdac:	a1 e3       	ldi	r26, 0x31	; 49
    cdae:	b0 e0       	ldi	r27, 0x00	; 0
    cdb0:	e1 e3       	ldi	r30, 0x31	; 49
    cdb2:	f0 e0       	ldi	r31, 0x00	; 0
    cdb4:	80 81       	ld	r24, Z
    cdb6:	8d 7f       	andi	r24, 0xFD	; 253
    cdb8:	8c 93       	st	X, r24
    cdba:	df 91       	pop	r29
    cdbc:	cf 91       	pop	r28
    cdbe:	08 95       	ret

0000cdc0 <LITE_SET_UART_RXD0_PIN>:
// uart assignments
LITE_ASSIGN_PIN( UART_RXD0, E, 0 );
    cdc0:	cf 93       	push	r28
    cdc2:	df 93       	push	r29
    cdc4:	cd b7       	in	r28, 0x3d	; 61
    cdc6:	de b7       	in	r29, 0x3e	; 62
    cdc8:	a3 e2       	ldi	r26, 0x23	; 35
    cdca:	b0 e0       	ldi	r27, 0x00	; 0
    cdcc:	e3 e2       	ldi	r30, 0x23	; 35
    cdce:	f0 e0       	ldi	r31, 0x00	; 0
    cdd0:	80 81       	ld	r24, Z
    cdd2:	81 60       	ori	r24, 0x01	; 1
    cdd4:	8c 93       	st	X, r24
    cdd6:	df 91       	pop	r29
    cdd8:	cf 91       	pop	r28
    cdda:	08 95       	ret

0000cddc <LITE_CLR_UART_RXD0_PIN>:
    cddc:	cf 93       	push	r28
    cdde:	df 93       	push	r29
    cde0:	cd b7       	in	r28, 0x3d	; 61
    cde2:	de b7       	in	r29, 0x3e	; 62
    cde4:	a3 e2       	ldi	r26, 0x23	; 35
    cde6:	b0 e0       	ldi	r27, 0x00	; 0
    cde8:	e3 e2       	ldi	r30, 0x23	; 35
    cdea:	f0 e0       	ldi	r31, 0x00	; 0
    cdec:	80 81       	ld	r24, Z
    cdee:	8e 7f       	andi	r24, 0xFE	; 254
    cdf0:	8c 93       	st	X, r24
    cdf2:	df 91       	pop	r29
    cdf4:	cf 91       	pop	r28
    cdf6:	08 95       	ret

0000cdf8 <LITE_READ_UART_RXD0_PIN>:
    cdf8:	cf 93       	push	r28
    cdfa:	df 93       	push	r29
    cdfc:	cd b7       	in	r28, 0x3d	; 61
    cdfe:	de b7       	in	r29, 0x3e	; 62
    ce00:	e1 e2       	ldi	r30, 0x21	; 33
    ce02:	f0 e0       	ldi	r31, 0x00	; 0
    ce04:	80 81       	ld	r24, Z
    ce06:	99 27       	eor	r25, r25
    ce08:	81 70       	andi	r24, 0x01	; 1
    ce0a:	90 70       	andi	r25, 0x00	; 0
    ce0c:	df 91       	pop	r29
    ce0e:	cf 91       	pop	r28
    ce10:	08 95       	ret

0000ce12 <LITE_MAKE_UART_RXD0_OUTPUT>:
    ce12:	cf 93       	push	r28
    ce14:	df 93       	push	r29
    ce16:	cd b7       	in	r28, 0x3d	; 61
    ce18:	de b7       	in	r29, 0x3e	; 62
    ce1a:	a2 e2       	ldi	r26, 0x22	; 34
    ce1c:	b0 e0       	ldi	r27, 0x00	; 0
    ce1e:	e2 e2       	ldi	r30, 0x22	; 34
    ce20:	f0 e0       	ldi	r31, 0x00	; 0
    ce22:	80 81       	ld	r24, Z
    ce24:	81 60       	ori	r24, 0x01	; 1
    ce26:	8c 93       	st	X, r24
    ce28:	df 91       	pop	r29
    ce2a:	cf 91       	pop	r28
    ce2c:	08 95       	ret

0000ce2e <LITE_MAKE_UART_RXD0_INPUT>:
    ce2e:	cf 93       	push	r28
    ce30:	df 93       	push	r29
    ce32:	cd b7       	in	r28, 0x3d	; 61
    ce34:	de b7       	in	r29, 0x3e	; 62
    ce36:	a2 e2       	ldi	r26, 0x22	; 34
    ce38:	b0 e0       	ldi	r27, 0x00	; 0
    ce3a:	e2 e2       	ldi	r30, 0x22	; 34
    ce3c:	f0 e0       	ldi	r31, 0x00	; 0
    ce3e:	80 81       	ld	r24, Z
    ce40:	8e 7f       	andi	r24, 0xFE	; 254
    ce42:	8c 93       	st	X, r24
    ce44:	df 91       	pop	r29
    ce46:	cf 91       	pop	r28
    ce48:	08 95       	ret

0000ce4a <LITE_SET_UART_TXD0_PIN>:
LITE_ASSIGN_PIN( UART_TXD0, E, 1 );
    ce4a:	cf 93       	push	r28
    ce4c:	df 93       	push	r29
    ce4e:	cd b7       	in	r28, 0x3d	; 61
    ce50:	de b7       	in	r29, 0x3e	; 62
    ce52:	a3 e2       	ldi	r26, 0x23	; 35
    ce54:	b0 e0       	ldi	r27, 0x00	; 0
    ce56:	e3 e2       	ldi	r30, 0x23	; 35
    ce58:	f0 e0       	ldi	r31, 0x00	; 0
    ce5a:	80 81       	ld	r24, Z
    ce5c:	82 60       	ori	r24, 0x02	; 2
    ce5e:	8c 93       	st	X, r24
    ce60:	df 91       	pop	r29
    ce62:	cf 91       	pop	r28
    ce64:	08 95       	ret

0000ce66 <LITE_CLR_UART_TXD0_PIN>:
    ce66:	cf 93       	push	r28
    ce68:	df 93       	push	r29
    ce6a:	cd b7       	in	r28, 0x3d	; 61
    ce6c:	de b7       	in	r29, 0x3e	; 62
    ce6e:	a3 e2       	ldi	r26, 0x23	; 35
    ce70:	b0 e0       	ldi	r27, 0x00	; 0
    ce72:	e3 e2       	ldi	r30, 0x23	; 35
    ce74:	f0 e0       	ldi	r31, 0x00	; 0
    ce76:	80 81       	ld	r24, Z
    ce78:	8d 7f       	andi	r24, 0xFD	; 253
    ce7a:	8c 93       	st	X, r24
    ce7c:	df 91       	pop	r29
    ce7e:	cf 91       	pop	r28
    ce80:	08 95       	ret

0000ce82 <LITE_READ_UART_TXD0_PIN>:
    ce82:	cf 93       	push	r28
    ce84:	df 93       	push	r29
    ce86:	cd b7       	in	r28, 0x3d	; 61
    ce88:	de b7       	in	r29, 0x3e	; 62
    ce8a:	22 97       	sbiw	r28, 0x02	; 2
    ce8c:	0f b6       	in	r0, 0x3f	; 63
    ce8e:	f8 94       	cli
    ce90:	de bf       	out	0x3e, r29	; 62
    ce92:	0f be       	out	0x3f, r0	; 63
    ce94:	cd bf       	out	0x3d, r28	; 61
    ce96:	e1 e2       	ldi	r30, 0x21	; 33
    ce98:	f0 e0       	ldi	r31, 0x00	; 0
    ce9a:	80 81       	ld	r24, Z
    ce9c:	99 27       	eor	r25, r25
    ce9e:	82 70       	andi	r24, 0x02	; 2
    cea0:	90 70       	andi	r25, 0x00	; 0
    cea2:	9a 83       	std	Y+2, r25	; 0x02
    cea4:	89 83       	std	Y+1, r24	; 0x01
    cea6:	89 81       	ldd	r24, Y+1	; 0x01
    cea8:	9a 81       	ldd	r25, Y+2	; 0x02
    ceaa:	00 97       	sbiw	r24, 0x00	; 0
    ceac:	21 f0       	breq	.+8      	; 0xceb6 <LITE_READ_UART_TXD0_PIN+0x34>
    ceae:	81 e0       	ldi	r24, 0x01	; 1
    ceb0:	90 e0       	ldi	r25, 0x00	; 0
    ceb2:	9a 83       	std	Y+2, r25	; 0x02
    ceb4:	89 83       	std	Y+1, r24	; 0x01
    ceb6:	89 81       	ldd	r24, Y+1	; 0x01
    ceb8:	9a 81       	ldd	r25, Y+2	; 0x02
    ceba:	22 96       	adiw	r28, 0x02	; 2
    cebc:	0f b6       	in	r0, 0x3f	; 63
    cebe:	f8 94       	cli
    cec0:	de bf       	out	0x3e, r29	; 62
    cec2:	0f be       	out	0x3f, r0	; 63
    cec4:	cd bf       	out	0x3d, r28	; 61
    cec6:	df 91       	pop	r29
    cec8:	cf 91       	pop	r28
    ceca:	08 95       	ret

0000cecc <LITE_MAKE_UART_TXD0_OUTPUT>:
    cecc:	cf 93       	push	r28
    cece:	df 93       	push	r29
    ced0:	cd b7       	in	r28, 0x3d	; 61
    ced2:	de b7       	in	r29, 0x3e	; 62
    ced4:	a2 e2       	ldi	r26, 0x22	; 34
    ced6:	b0 e0       	ldi	r27, 0x00	; 0
    ced8:	e2 e2       	ldi	r30, 0x22	; 34
    ceda:	f0 e0       	ldi	r31, 0x00	; 0
    cedc:	80 81       	ld	r24, Z
    cede:	82 60       	ori	r24, 0x02	; 2
    cee0:	8c 93       	st	X, r24
    cee2:	df 91       	pop	r29
    cee4:	cf 91       	pop	r28
    cee6:	08 95       	ret

0000cee8 <LITE_MAKE_UART_TXD0_INPUT>:
    cee8:	cf 93       	push	r28
    ceea:	df 93       	push	r29
    ceec:	cd b7       	in	r28, 0x3d	; 61
    ceee:	de b7       	in	r29, 0x3e	; 62
    cef0:	a2 e2       	ldi	r26, 0x22	; 34
    cef2:	b0 e0       	ldi	r27, 0x00	; 0
    cef4:	e2 e2       	ldi	r30, 0x22	; 34
    cef6:	f0 e0       	ldi	r31, 0x00	; 0
    cef8:	80 81       	ld	r24, Z
    cefa:	8d 7f       	andi	r24, 0xFD	; 253
    cefc:	8c 93       	st	X, r24
    cefe:	df 91       	pop	r29
    cf00:	cf 91       	pop	r28
    cf02:	08 95       	ret

0000cf04 <LITE_SET_UART_XCK0_PIN>:
LITE_ASSIGN_PIN( UART_XCK0, E, 2 );
    cf04:	cf 93       	push	r28
    cf06:	df 93       	push	r29
    cf08:	cd b7       	in	r28, 0x3d	; 61
    cf0a:	de b7       	in	r29, 0x3e	; 62
    cf0c:	a3 e2       	ldi	r26, 0x23	; 35
    cf0e:	b0 e0       	ldi	r27, 0x00	; 0
    cf10:	e3 e2       	ldi	r30, 0x23	; 35
    cf12:	f0 e0       	ldi	r31, 0x00	; 0
    cf14:	80 81       	ld	r24, Z
    cf16:	84 60       	ori	r24, 0x04	; 4
    cf18:	8c 93       	st	X, r24
    cf1a:	df 91       	pop	r29
    cf1c:	cf 91       	pop	r28
    cf1e:	08 95       	ret

0000cf20 <LITE_CLR_UART_XCK0_PIN>:
    cf20:	cf 93       	push	r28
    cf22:	df 93       	push	r29
    cf24:	cd b7       	in	r28, 0x3d	; 61
    cf26:	de b7       	in	r29, 0x3e	; 62
    cf28:	a3 e2       	ldi	r26, 0x23	; 35
    cf2a:	b0 e0       	ldi	r27, 0x00	; 0
    cf2c:	e3 e2       	ldi	r30, 0x23	; 35
    cf2e:	f0 e0       	ldi	r31, 0x00	; 0
    cf30:	80 81       	ld	r24, Z
    cf32:	8b 7f       	andi	r24, 0xFB	; 251
    cf34:	8c 93       	st	X, r24
    cf36:	df 91       	pop	r29
    cf38:	cf 91       	pop	r28
    cf3a:	08 95       	ret

0000cf3c <LITE_READ_UART_XCK0_PIN>:
    cf3c:	cf 93       	push	r28
    cf3e:	df 93       	push	r29
    cf40:	cd b7       	in	r28, 0x3d	; 61
    cf42:	de b7       	in	r29, 0x3e	; 62
    cf44:	22 97       	sbiw	r28, 0x02	; 2
    cf46:	0f b6       	in	r0, 0x3f	; 63
    cf48:	f8 94       	cli
    cf4a:	de bf       	out	0x3e, r29	; 62
    cf4c:	0f be       	out	0x3f, r0	; 63
    cf4e:	cd bf       	out	0x3d, r28	; 61
    cf50:	e1 e2       	ldi	r30, 0x21	; 33
    cf52:	f0 e0       	ldi	r31, 0x00	; 0
    cf54:	80 81       	ld	r24, Z
    cf56:	99 27       	eor	r25, r25
    cf58:	84 70       	andi	r24, 0x04	; 4
    cf5a:	90 70       	andi	r25, 0x00	; 0
    cf5c:	9a 83       	std	Y+2, r25	; 0x02
    cf5e:	89 83       	std	Y+1, r24	; 0x01
    cf60:	89 81       	ldd	r24, Y+1	; 0x01
    cf62:	9a 81       	ldd	r25, Y+2	; 0x02
    cf64:	00 97       	sbiw	r24, 0x00	; 0
    cf66:	21 f0       	breq	.+8      	; 0xcf70 <LITE_READ_UART_XCK0_PIN+0x34>
    cf68:	81 e0       	ldi	r24, 0x01	; 1
    cf6a:	90 e0       	ldi	r25, 0x00	; 0
    cf6c:	9a 83       	std	Y+2, r25	; 0x02
    cf6e:	89 83       	std	Y+1, r24	; 0x01
    cf70:	89 81       	ldd	r24, Y+1	; 0x01
    cf72:	9a 81       	ldd	r25, Y+2	; 0x02
    cf74:	22 96       	adiw	r28, 0x02	; 2
    cf76:	0f b6       	in	r0, 0x3f	; 63
    cf78:	f8 94       	cli
    cf7a:	de bf       	out	0x3e, r29	; 62
    cf7c:	0f be       	out	0x3f, r0	; 63
    cf7e:	cd bf       	out	0x3d, r28	; 61
    cf80:	df 91       	pop	r29
    cf82:	cf 91       	pop	r28
    cf84:	08 95       	ret

0000cf86 <LITE_MAKE_UART_XCK0_OUTPUT>:
    cf86:	cf 93       	push	r28
    cf88:	df 93       	push	r29
    cf8a:	cd b7       	in	r28, 0x3d	; 61
    cf8c:	de b7       	in	r29, 0x3e	; 62
    cf8e:	a2 e2       	ldi	r26, 0x22	; 34
    cf90:	b0 e0       	ldi	r27, 0x00	; 0
    cf92:	e2 e2       	ldi	r30, 0x22	; 34
    cf94:	f0 e0       	ldi	r31, 0x00	; 0
    cf96:	80 81       	ld	r24, Z
    cf98:	84 60       	ori	r24, 0x04	; 4
    cf9a:	8c 93       	st	X, r24
    cf9c:	df 91       	pop	r29
    cf9e:	cf 91       	pop	r28
    cfa0:	08 95       	ret

0000cfa2 <LITE_MAKE_UART_XCK0_INPUT>:
    cfa2:	cf 93       	push	r28
    cfa4:	df 93       	push	r29
    cfa6:	cd b7       	in	r28, 0x3d	; 61
    cfa8:	de b7       	in	r29, 0x3e	; 62
    cfaa:	a2 e2       	ldi	r26, 0x22	; 34
    cfac:	b0 e0       	ldi	r27, 0x00	; 0
    cfae:	e2 e2       	ldi	r30, 0x22	; 34
    cfb0:	f0 e0       	ldi	r31, 0x00	; 0
    cfb2:	80 81       	ld	r24, Z
    cfb4:	8b 7f       	andi	r24, 0xFB	; 251
    cfb6:	8c 93       	st	X, r24
    cfb8:	df 91       	pop	r29
    cfba:	cf 91       	pop	r28
    cfbc:	08 95       	ret

0000cfbe <LITE_SET_AC_NEG_PIN>:
LITE_ASSIGN_PIN( AC_NEG, E, 3 ); // RFID Reader Red LED
    cfbe:	cf 93       	push	r28
    cfc0:	df 93       	push	r29
    cfc2:	cd b7       	in	r28, 0x3d	; 61
    cfc4:	de b7       	in	r29, 0x3e	; 62
    cfc6:	a3 e2       	ldi	r26, 0x23	; 35
    cfc8:	b0 e0       	ldi	r27, 0x00	; 0
    cfca:	e3 e2       	ldi	r30, 0x23	; 35
    cfcc:	f0 e0       	ldi	r31, 0x00	; 0
    cfce:	80 81       	ld	r24, Z
    cfd0:	88 60       	ori	r24, 0x08	; 8
    cfd2:	8c 93       	st	X, r24
    cfd4:	df 91       	pop	r29
    cfd6:	cf 91       	pop	r28
    cfd8:	08 95       	ret

0000cfda <LITE_CLR_AC_NEG_PIN>:
    cfda:	cf 93       	push	r28
    cfdc:	df 93       	push	r29
    cfde:	cd b7       	in	r28, 0x3d	; 61
    cfe0:	de b7       	in	r29, 0x3e	; 62
    cfe2:	a3 e2       	ldi	r26, 0x23	; 35
    cfe4:	b0 e0       	ldi	r27, 0x00	; 0
    cfe6:	e3 e2       	ldi	r30, 0x23	; 35
    cfe8:	f0 e0       	ldi	r31, 0x00	; 0
    cfea:	80 81       	ld	r24, Z
    cfec:	87 7f       	andi	r24, 0xF7	; 247
    cfee:	8c 93       	st	X, r24
    cff0:	df 91       	pop	r29
    cff2:	cf 91       	pop	r28
    cff4:	08 95       	ret

0000cff6 <LITE_READ_AC_NEG_PIN>:
    cff6:	cf 93       	push	r28
    cff8:	df 93       	push	r29
    cffa:	cd b7       	in	r28, 0x3d	; 61
    cffc:	de b7       	in	r29, 0x3e	; 62
    cffe:	22 97       	sbiw	r28, 0x02	; 2
    d000:	0f b6       	in	r0, 0x3f	; 63
    d002:	f8 94       	cli
    d004:	de bf       	out	0x3e, r29	; 62
    d006:	0f be       	out	0x3f, r0	; 63
    d008:	cd bf       	out	0x3d, r28	; 61
    d00a:	e1 e2       	ldi	r30, 0x21	; 33
    d00c:	f0 e0       	ldi	r31, 0x00	; 0
    d00e:	80 81       	ld	r24, Z
    d010:	99 27       	eor	r25, r25
    d012:	88 70       	andi	r24, 0x08	; 8
    d014:	90 70       	andi	r25, 0x00	; 0
    d016:	9a 83       	std	Y+2, r25	; 0x02
    d018:	89 83       	std	Y+1, r24	; 0x01
    d01a:	89 81       	ldd	r24, Y+1	; 0x01
    d01c:	9a 81       	ldd	r25, Y+2	; 0x02
    d01e:	00 97       	sbiw	r24, 0x00	; 0
    d020:	21 f0       	breq	.+8      	; 0xd02a <LITE_READ_AC_NEG_PIN+0x34>
    d022:	81 e0       	ldi	r24, 0x01	; 1
    d024:	90 e0       	ldi	r25, 0x00	; 0
    d026:	9a 83       	std	Y+2, r25	; 0x02
    d028:	89 83       	std	Y+1, r24	; 0x01
    d02a:	89 81       	ldd	r24, Y+1	; 0x01
    d02c:	9a 81       	ldd	r25, Y+2	; 0x02
    d02e:	22 96       	adiw	r28, 0x02	; 2
    d030:	0f b6       	in	r0, 0x3f	; 63
    d032:	f8 94       	cli
    d034:	de bf       	out	0x3e, r29	; 62
    d036:	0f be       	out	0x3f, r0	; 63
    d038:	cd bf       	out	0x3d, r28	; 61
    d03a:	df 91       	pop	r29
    d03c:	cf 91       	pop	r28
    d03e:	08 95       	ret

0000d040 <LITE_MAKE_AC_NEG_OUTPUT>:
    d040:	cf 93       	push	r28
    d042:	df 93       	push	r29
    d044:	cd b7       	in	r28, 0x3d	; 61
    d046:	de b7       	in	r29, 0x3e	; 62
    d048:	a2 e2       	ldi	r26, 0x22	; 34
    d04a:	b0 e0       	ldi	r27, 0x00	; 0
    d04c:	e2 e2       	ldi	r30, 0x22	; 34
    d04e:	f0 e0       	ldi	r31, 0x00	; 0
    d050:	80 81       	ld	r24, Z
    d052:	88 60       	ori	r24, 0x08	; 8
    d054:	8c 93       	st	X, r24
    d056:	df 91       	pop	r29
    d058:	cf 91       	pop	r28
    d05a:	08 95       	ret

0000d05c <LITE_MAKE_AC_NEG_INPUT>:
    d05c:	cf 93       	push	r28
    d05e:	df 93       	push	r29
    d060:	cd b7       	in	r28, 0x3d	; 61
    d062:	de b7       	in	r29, 0x3e	; 62
    d064:	a2 e2       	ldi	r26, 0x22	; 34
    d066:	b0 e0       	ldi	r27, 0x00	; 0
    d068:	e2 e2       	ldi	r30, 0x22	; 34
    d06a:	f0 e0       	ldi	r31, 0x00	; 0
    d06c:	80 81       	ld	r24, Z
    d06e:	87 7f       	andi	r24, 0xF7	; 247
    d070:	8c 93       	st	X, r24
    d072:	df 91       	pop	r29
    d074:	cf 91       	pop	r28
    d076:	08 95       	ret

0000d078 <LITE_SET_UART_RXD1_PIN>:
LITE_ASSIGN_PIN( UART_RXD1, D, 2 );
    d078:	cf 93       	push	r28
    d07a:	df 93       	push	r29
    d07c:	cd b7       	in	r28, 0x3d	; 61
    d07e:	de b7       	in	r29, 0x3e	; 62
    d080:	a2 e3       	ldi	r26, 0x32	; 50
    d082:	b0 e0       	ldi	r27, 0x00	; 0
    d084:	e2 e3       	ldi	r30, 0x32	; 50
    d086:	f0 e0       	ldi	r31, 0x00	; 0
    d088:	80 81       	ld	r24, Z
    d08a:	84 60       	ori	r24, 0x04	; 4
    d08c:	8c 93       	st	X, r24
    d08e:	df 91       	pop	r29
    d090:	cf 91       	pop	r28
    d092:	08 95       	ret

0000d094 <LITE_CLR_UART_RXD1_PIN>:
    d094:	cf 93       	push	r28
    d096:	df 93       	push	r29
    d098:	cd b7       	in	r28, 0x3d	; 61
    d09a:	de b7       	in	r29, 0x3e	; 62
    d09c:	a2 e3       	ldi	r26, 0x32	; 50
    d09e:	b0 e0       	ldi	r27, 0x00	; 0
    d0a0:	e2 e3       	ldi	r30, 0x32	; 50
    d0a2:	f0 e0       	ldi	r31, 0x00	; 0
    d0a4:	80 81       	ld	r24, Z
    d0a6:	8b 7f       	andi	r24, 0xFB	; 251
    d0a8:	8c 93       	st	X, r24
    d0aa:	df 91       	pop	r29
    d0ac:	cf 91       	pop	r28
    d0ae:	08 95       	ret

0000d0b0 <LITE_READ_UART_RXD1_PIN>:
    d0b0:	cf 93       	push	r28
    d0b2:	df 93       	push	r29
    d0b4:	cd b7       	in	r28, 0x3d	; 61
    d0b6:	de b7       	in	r29, 0x3e	; 62
    d0b8:	22 97       	sbiw	r28, 0x02	; 2
    d0ba:	0f b6       	in	r0, 0x3f	; 63
    d0bc:	f8 94       	cli
    d0be:	de bf       	out	0x3e, r29	; 62
    d0c0:	0f be       	out	0x3f, r0	; 63
    d0c2:	cd bf       	out	0x3d, r28	; 61
    d0c4:	e0 e3       	ldi	r30, 0x30	; 48
    d0c6:	f0 e0       	ldi	r31, 0x00	; 0
    d0c8:	80 81       	ld	r24, Z
    d0ca:	99 27       	eor	r25, r25
    d0cc:	84 70       	andi	r24, 0x04	; 4
    d0ce:	90 70       	andi	r25, 0x00	; 0
    d0d0:	9a 83       	std	Y+2, r25	; 0x02
    d0d2:	89 83       	std	Y+1, r24	; 0x01
    d0d4:	89 81       	ldd	r24, Y+1	; 0x01
    d0d6:	9a 81       	ldd	r25, Y+2	; 0x02
    d0d8:	00 97       	sbiw	r24, 0x00	; 0
    d0da:	21 f0       	breq	.+8      	; 0xd0e4 <LITE_READ_UART_RXD1_PIN+0x34>
    d0dc:	81 e0       	ldi	r24, 0x01	; 1
    d0de:	90 e0       	ldi	r25, 0x00	; 0
    d0e0:	9a 83       	std	Y+2, r25	; 0x02
    d0e2:	89 83       	std	Y+1, r24	; 0x01
    d0e4:	89 81       	ldd	r24, Y+1	; 0x01
    d0e6:	9a 81       	ldd	r25, Y+2	; 0x02
    d0e8:	22 96       	adiw	r28, 0x02	; 2
    d0ea:	0f b6       	in	r0, 0x3f	; 63
    d0ec:	f8 94       	cli
    d0ee:	de bf       	out	0x3e, r29	; 62
    d0f0:	0f be       	out	0x3f, r0	; 63
    d0f2:	cd bf       	out	0x3d, r28	; 61
    d0f4:	df 91       	pop	r29
    d0f6:	cf 91       	pop	r28
    d0f8:	08 95       	ret

0000d0fa <LITE_MAKE_UART_RXD1_OUTPUT>:
    d0fa:	cf 93       	push	r28
    d0fc:	df 93       	push	r29
    d0fe:	cd b7       	in	r28, 0x3d	; 61
    d100:	de b7       	in	r29, 0x3e	; 62
    d102:	a1 e3       	ldi	r26, 0x31	; 49
    d104:	b0 e0       	ldi	r27, 0x00	; 0
    d106:	e1 e3       	ldi	r30, 0x31	; 49
    d108:	f0 e0       	ldi	r31, 0x00	; 0
    d10a:	80 81       	ld	r24, Z
    d10c:	84 60       	ori	r24, 0x04	; 4
    d10e:	8c 93       	st	X, r24
    d110:	df 91       	pop	r29
    d112:	cf 91       	pop	r28
    d114:	08 95       	ret

0000d116 <LITE_MAKE_UART_RXD1_INPUT>:
    d116:	cf 93       	push	r28
    d118:	df 93       	push	r29
    d11a:	cd b7       	in	r28, 0x3d	; 61
    d11c:	de b7       	in	r29, 0x3e	; 62
    d11e:	a1 e3       	ldi	r26, 0x31	; 49
    d120:	b0 e0       	ldi	r27, 0x00	; 0
    d122:	e1 e3       	ldi	r30, 0x31	; 49
    d124:	f0 e0       	ldi	r31, 0x00	; 0
    d126:	80 81       	ld	r24, Z
    d128:	8b 7f       	andi	r24, 0xFB	; 251
    d12a:	8c 93       	st	X, r24
    d12c:	df 91       	pop	r29
    d12e:	cf 91       	pop	r28
    d130:	08 95       	ret

0000d132 <LITE_SET_UART_TXD1_PIN>:
LITE_ASSIGN_PIN( UART_TXD1, D, 3 );
    d132:	cf 93       	push	r28
    d134:	df 93       	push	r29
    d136:	cd b7       	in	r28, 0x3d	; 61
    d138:	de b7       	in	r29, 0x3e	; 62
    d13a:	a2 e3       	ldi	r26, 0x32	; 50
    d13c:	b0 e0       	ldi	r27, 0x00	; 0
    d13e:	e2 e3       	ldi	r30, 0x32	; 50
    d140:	f0 e0       	ldi	r31, 0x00	; 0
    d142:	80 81       	ld	r24, Z
    d144:	88 60       	ori	r24, 0x08	; 8
    d146:	8c 93       	st	X, r24
    d148:	df 91       	pop	r29
    d14a:	cf 91       	pop	r28
    d14c:	08 95       	ret

0000d14e <LITE_CLR_UART_TXD1_PIN>:
    d14e:	cf 93       	push	r28
    d150:	df 93       	push	r29
    d152:	cd b7       	in	r28, 0x3d	; 61
    d154:	de b7       	in	r29, 0x3e	; 62
    d156:	a2 e3       	ldi	r26, 0x32	; 50
    d158:	b0 e0       	ldi	r27, 0x00	; 0
    d15a:	e2 e3       	ldi	r30, 0x32	; 50
    d15c:	f0 e0       	ldi	r31, 0x00	; 0
    d15e:	80 81       	ld	r24, Z
    d160:	87 7f       	andi	r24, 0xF7	; 247
    d162:	8c 93       	st	X, r24
    d164:	df 91       	pop	r29
    d166:	cf 91       	pop	r28
    d168:	08 95       	ret

0000d16a <LITE_READ_UART_TXD1_PIN>:
    d16a:	cf 93       	push	r28
    d16c:	df 93       	push	r29
    d16e:	cd b7       	in	r28, 0x3d	; 61
    d170:	de b7       	in	r29, 0x3e	; 62
    d172:	22 97       	sbiw	r28, 0x02	; 2
    d174:	0f b6       	in	r0, 0x3f	; 63
    d176:	f8 94       	cli
    d178:	de bf       	out	0x3e, r29	; 62
    d17a:	0f be       	out	0x3f, r0	; 63
    d17c:	cd bf       	out	0x3d, r28	; 61
    d17e:	e0 e3       	ldi	r30, 0x30	; 48
    d180:	f0 e0       	ldi	r31, 0x00	; 0
    d182:	80 81       	ld	r24, Z
    d184:	99 27       	eor	r25, r25
    d186:	88 70       	andi	r24, 0x08	; 8
    d188:	90 70       	andi	r25, 0x00	; 0
    d18a:	9a 83       	std	Y+2, r25	; 0x02
    d18c:	89 83       	std	Y+1, r24	; 0x01
    d18e:	89 81       	ldd	r24, Y+1	; 0x01
    d190:	9a 81       	ldd	r25, Y+2	; 0x02
    d192:	00 97       	sbiw	r24, 0x00	; 0
    d194:	21 f0       	breq	.+8      	; 0xd19e <LITE_READ_UART_TXD1_PIN+0x34>
    d196:	81 e0       	ldi	r24, 0x01	; 1
    d198:	90 e0       	ldi	r25, 0x00	; 0
    d19a:	9a 83       	std	Y+2, r25	; 0x02
    d19c:	89 83       	std	Y+1, r24	; 0x01
    d19e:	89 81       	ldd	r24, Y+1	; 0x01
    d1a0:	9a 81       	ldd	r25, Y+2	; 0x02
    d1a2:	22 96       	adiw	r28, 0x02	; 2
    d1a4:	0f b6       	in	r0, 0x3f	; 63
    d1a6:	f8 94       	cli
    d1a8:	de bf       	out	0x3e, r29	; 62
    d1aa:	0f be       	out	0x3f, r0	; 63
    d1ac:	cd bf       	out	0x3d, r28	; 61
    d1ae:	df 91       	pop	r29
    d1b0:	cf 91       	pop	r28
    d1b2:	08 95       	ret

0000d1b4 <LITE_MAKE_UART_TXD1_OUTPUT>:
    d1b4:	cf 93       	push	r28
    d1b6:	df 93       	push	r29
    d1b8:	cd b7       	in	r28, 0x3d	; 61
    d1ba:	de b7       	in	r29, 0x3e	; 62
    d1bc:	a1 e3       	ldi	r26, 0x31	; 49
    d1be:	b0 e0       	ldi	r27, 0x00	; 0
    d1c0:	e1 e3       	ldi	r30, 0x31	; 49
    d1c2:	f0 e0       	ldi	r31, 0x00	; 0
    d1c4:	80 81       	ld	r24, Z
    d1c6:	88 60       	ori	r24, 0x08	; 8
    d1c8:	8c 93       	st	X, r24
    d1ca:	df 91       	pop	r29
    d1cc:	cf 91       	pop	r28
    d1ce:	08 95       	ret

0000d1d0 <LITE_MAKE_UART_TXD1_INPUT>:
    d1d0:	cf 93       	push	r28
    d1d2:	df 93       	push	r29
    d1d4:	cd b7       	in	r28, 0x3d	; 61
    d1d6:	de b7       	in	r29, 0x3e	; 62
    d1d8:	a1 e3       	ldi	r26, 0x31	; 49
    d1da:	b0 e0       	ldi	r27, 0x00	; 0
    d1dc:	e1 e3       	ldi	r30, 0x31	; 49
    d1de:	f0 e0       	ldi	r31, 0x00	; 0
    d1e0:	80 81       	ld	r24, Z
    d1e2:	87 7f       	andi	r24, 0xF7	; 247
    d1e4:	8c 93       	st	X, r24
    d1e6:	df 91       	pop	r29
    d1e8:	cf 91       	pop	r28
    d1ea:	08 95       	ret

0000d1ec <LITE_SET_UART_XCK1_PIN>:
LITE_ASSIGN_PIN( UART_XCK1, D, 5 );
    d1ec:	cf 93       	push	r28
    d1ee:	df 93       	push	r29
    d1f0:	cd b7       	in	r28, 0x3d	; 61
    d1f2:	de b7       	in	r29, 0x3e	; 62
    d1f4:	a2 e3       	ldi	r26, 0x32	; 50
    d1f6:	b0 e0       	ldi	r27, 0x00	; 0
    d1f8:	e2 e3       	ldi	r30, 0x32	; 50
    d1fa:	f0 e0       	ldi	r31, 0x00	; 0
    d1fc:	80 81       	ld	r24, Z
    d1fe:	80 62       	ori	r24, 0x20	; 32
    d200:	8c 93       	st	X, r24
    d202:	df 91       	pop	r29
    d204:	cf 91       	pop	r28
    d206:	08 95       	ret

0000d208 <LITE_CLR_UART_XCK1_PIN>:
    d208:	cf 93       	push	r28
    d20a:	df 93       	push	r29
    d20c:	cd b7       	in	r28, 0x3d	; 61
    d20e:	de b7       	in	r29, 0x3e	; 62
    d210:	a2 e3       	ldi	r26, 0x32	; 50
    d212:	b0 e0       	ldi	r27, 0x00	; 0
    d214:	e2 e3       	ldi	r30, 0x32	; 50
    d216:	f0 e0       	ldi	r31, 0x00	; 0
    d218:	80 81       	ld	r24, Z
    d21a:	8f 7d       	andi	r24, 0xDF	; 223
    d21c:	8c 93       	st	X, r24
    d21e:	df 91       	pop	r29
    d220:	cf 91       	pop	r28
    d222:	08 95       	ret

0000d224 <LITE_READ_UART_XCK1_PIN>:
    d224:	cf 93       	push	r28
    d226:	df 93       	push	r29
    d228:	cd b7       	in	r28, 0x3d	; 61
    d22a:	de b7       	in	r29, 0x3e	; 62
    d22c:	22 97       	sbiw	r28, 0x02	; 2
    d22e:	0f b6       	in	r0, 0x3f	; 63
    d230:	f8 94       	cli
    d232:	de bf       	out	0x3e, r29	; 62
    d234:	0f be       	out	0x3f, r0	; 63
    d236:	cd bf       	out	0x3d, r28	; 61
    d238:	e0 e3       	ldi	r30, 0x30	; 48
    d23a:	f0 e0       	ldi	r31, 0x00	; 0
    d23c:	80 81       	ld	r24, Z
    d23e:	99 27       	eor	r25, r25
    d240:	80 72       	andi	r24, 0x20	; 32
    d242:	90 70       	andi	r25, 0x00	; 0
    d244:	9a 83       	std	Y+2, r25	; 0x02
    d246:	89 83       	std	Y+1, r24	; 0x01
    d248:	89 81       	ldd	r24, Y+1	; 0x01
    d24a:	9a 81       	ldd	r25, Y+2	; 0x02
    d24c:	00 97       	sbiw	r24, 0x00	; 0
    d24e:	21 f0       	breq	.+8      	; 0xd258 <LITE_READ_UART_XCK1_PIN+0x34>
    d250:	81 e0       	ldi	r24, 0x01	; 1
    d252:	90 e0       	ldi	r25, 0x00	; 0
    d254:	9a 83       	std	Y+2, r25	; 0x02
    d256:	89 83       	std	Y+1, r24	; 0x01
    d258:	89 81       	ldd	r24, Y+1	; 0x01
    d25a:	9a 81       	ldd	r25, Y+2	; 0x02
    d25c:	22 96       	adiw	r28, 0x02	; 2
    d25e:	0f b6       	in	r0, 0x3f	; 63
    d260:	f8 94       	cli
    d262:	de bf       	out	0x3e, r29	; 62
    d264:	0f be       	out	0x3f, r0	; 63
    d266:	cd bf       	out	0x3d, r28	; 61
    d268:	df 91       	pop	r29
    d26a:	cf 91       	pop	r28
    d26c:	08 95       	ret

0000d26e <LITE_MAKE_UART_XCK1_OUTPUT>:
    d26e:	cf 93       	push	r28
    d270:	df 93       	push	r29
    d272:	cd b7       	in	r28, 0x3d	; 61
    d274:	de b7       	in	r29, 0x3e	; 62
    d276:	a1 e3       	ldi	r26, 0x31	; 49
    d278:	b0 e0       	ldi	r27, 0x00	; 0
    d27a:	e1 e3       	ldi	r30, 0x31	; 49
    d27c:	f0 e0       	ldi	r31, 0x00	; 0
    d27e:	80 81       	ld	r24, Z
    d280:	80 62       	ori	r24, 0x20	; 32
    d282:	8c 93       	st	X, r24
    d284:	df 91       	pop	r29
    d286:	cf 91       	pop	r28
    d288:	08 95       	ret

0000d28a <LITE_MAKE_UART_XCK1_INPUT>:
    d28a:	cf 93       	push	r28
    d28c:	df 93       	push	r29
    d28e:	cd b7       	in	r28, 0x3d	; 61
    d290:	de b7       	in	r29, 0x3e	; 62
    d292:	a1 e3       	ldi	r26, 0x31	; 49
    d294:	b0 e0       	ldi	r27, 0x00	; 0
    d296:	e1 e3       	ldi	r30, 0x31	; 49
    d298:	f0 e0       	ldi	r31, 0x00	; 0
    d29a:	80 81       	ld	r24, Z
    d29c:	8f 7d       	andi	r24, 0xDF	; 223
    d29e:	8c 93       	st	X, r24
    d2a0:	df 91       	pop	r29
    d2a2:	cf 91       	pop	r28
    d2a4:	08 95       	ret

0000d2a6 <LITE_SET_TONE_DECODE_SIGNAL_PIN>:
LITE_ALIAS_PIN( TONE_DECODE_SIGNAL, INT3 );
    d2a6:	cf 93       	push	r28
    d2a8:	df 93       	push	r29
    d2aa:	cd b7       	in	r28, 0x3d	; 61
    d2ac:	de b7       	in	r29, 0x3e	; 62
    d2ae:	0e 94 00 62 	call	0xc400	; 0xc400 <LITE_SET_INT3_PIN>
    d2b2:	df 91       	pop	r29
    d2b4:	cf 91       	pop	r28
    d2b6:	08 95       	ret

0000d2b8 <LITE_CLR_TONE_DECODE_SIGNAL_PIN>:
    d2b8:	cf 93       	push	r28
    d2ba:	df 93       	push	r29
    d2bc:	cd b7       	in	r28, 0x3d	; 61
    d2be:	de b7       	in	r29, 0x3e	; 62
    d2c0:	0e 94 0e 62 	call	0xc41c	; 0xc41c <LITE_CLR_INT3_PIN>
    d2c4:	df 91       	pop	r29
    d2c6:	cf 91       	pop	r28
    d2c8:	08 95       	ret

0000d2ca <LITE_READ_TONE_DECODE_SIGNAL_PIN>:
    d2ca:	cf 93       	push	r28
    d2cc:	df 93       	push	r29
    d2ce:	cd b7       	in	r28, 0x3d	; 61
    d2d0:	de b7       	in	r29, 0x3e	; 62
    d2d2:	0e 94 1d 62 	call	0xc43a	; 0xc43a <LITE_READ_INT3_PIN>
    d2d6:	99 27       	eor	r25, r25
    d2d8:	87 fd       	sbrc	r24, 7
    d2da:	90 95       	com	r25
    d2dc:	df 91       	pop	r29
    d2de:	cf 91       	pop	r28
    d2e0:	08 95       	ret

0000d2e2 <LITE_MAKE_TONE_DECODE_SIGNAL_OUTPUT>:
    d2e2:	cf 93       	push	r28
    d2e4:	df 93       	push	r29
    d2e6:	cd b7       	in	r28, 0x3d	; 61
    d2e8:	de b7       	in	r29, 0x3e	; 62
    d2ea:	0e 94 3d 62 	call	0xc47a	; 0xc47a <LITE_MAKE_INT3_OUTPUT>
    d2ee:	df 91       	pop	r29
    d2f0:	cf 91       	pop	r28
    d2f2:	08 95       	ret

0000d2f4 <LITE_MAKE_TONE_DECODE_SIGNAL_INPUT>:
    d2f4:	cf 93       	push	r28
    d2f6:	df 93       	push	r29
    d2f8:	cd b7       	in	r28, 0x3d	; 61
    d2fa:	de b7       	in	r29, 0x3e	; 62
    d2fc:	0e 94 4b 62 	call	0xc496	; 0xc496 <LITE_MAKE_INT3_INPUT>
    d300:	df 91       	pop	r29
    d302:	cf 91       	pop	r28
    d304:	08 95       	ret

0000d306 <LITE_SET_PHOTO_CTL_PIN>:
LITE_ALIAS_PIN( PHOTO_CTL, INT1 );
    d306:	cf 93       	push	r28
    d308:	df 93       	push	r29
    d30a:	cd b7       	in	r28, 0x3d	; 61
    d30c:	de b7       	in	r29, 0x3e	; 62
    d30e:	0e 94 46 61 	call	0xc28c	; 0xc28c <LITE_SET_INT1_PIN>
    d312:	df 91       	pop	r29
    d314:	cf 91       	pop	r28
    d316:	08 95       	ret

0000d318 <LITE_CLR_PHOTO_CTL_PIN>:
    d318:	cf 93       	push	r28
    d31a:	df 93       	push	r29
    d31c:	cd b7       	in	r28, 0x3d	; 61
    d31e:	de b7       	in	r29, 0x3e	; 62
    d320:	0e 94 54 61 	call	0xc2a8	; 0xc2a8 <LITE_CLR_INT1_PIN>
    d324:	df 91       	pop	r29
    d326:	cf 91       	pop	r28
    d328:	08 95       	ret

0000d32a <LITE_READ_PHOTO_CTL_PIN>:
    d32a:	cf 93       	push	r28
    d32c:	df 93       	push	r29
    d32e:	cd b7       	in	r28, 0x3d	; 61
    d330:	de b7       	in	r29, 0x3e	; 62
    d332:	0e 94 62 61 	call	0xc2c4	; 0xc2c4 <LITE_READ_INT1_PIN>
    d336:	99 27       	eor	r25, r25
    d338:	87 fd       	sbrc	r24, 7
    d33a:	90 95       	com	r25
    d33c:	df 91       	pop	r29
    d33e:	cf 91       	pop	r28
    d340:	08 95       	ret

0000d342 <LITE_MAKE_PHOTO_CTL_OUTPUT>:
    d342:	cf 93       	push	r28
    d344:	df 93       	push	r29
    d346:	cd b7       	in	r28, 0x3d	; 61
    d348:	de b7       	in	r29, 0x3e	; 62
    d34a:	0e 94 87 61 	call	0xc30e	; 0xc30e <LITE_MAKE_INT1_OUTPUT>
    d34e:	df 91       	pop	r29
    d350:	cf 91       	pop	r28
    d352:	08 95       	ret

0000d354 <LITE_MAKE_PHOTO_CTL_INPUT>:
    d354:	cf 93       	push	r28
    d356:	df 93       	push	r29
    d358:	cd b7       	in	r28, 0x3d	; 61
    d35a:	de b7       	in	r29, 0x3e	; 62
    d35c:	0e 94 95 61 	call	0xc32a	; 0xc32a <LITE_MAKE_INT1_INPUT>
    d360:	df 91       	pop	r29
    d362:	cf 91       	pop	r28
    d364:	08 95       	ret

0000d366 <LITE_SET_TEMP_CTL_PIN>:
LITE_ALIAS_PIN( TEMP_CTL, INT2 );
    d366:	cf 93       	push	r28
    d368:	df 93       	push	r29
    d36a:	cd b7       	in	r28, 0x3d	; 61
    d36c:	de b7       	in	r29, 0x3e	; 62
    d36e:	0e 94 a3 61 	call	0xc346	; 0xc346 <LITE_SET_INT2_PIN>
    d372:	df 91       	pop	r29
    d374:	cf 91       	pop	r28
    d376:	08 95       	ret

0000d378 <LITE_CLR_TEMP_CTL_PIN>:
    d378:	cf 93       	push	r28
    d37a:	df 93       	push	r29
    d37c:	cd b7       	in	r28, 0x3d	; 61
    d37e:	de b7       	in	r29, 0x3e	; 62
    d380:	0e 94 b1 61 	call	0xc362	; 0xc362 <LITE_CLR_INT2_PIN>
    d384:	df 91       	pop	r29
    d386:	cf 91       	pop	r28
    d388:	08 95       	ret

0000d38a <LITE_READ_TEMP_CTL_PIN>:
    d38a:	cf 93       	push	r28
    d38c:	df 93       	push	r29
    d38e:	cd b7       	in	r28, 0x3d	; 61
    d390:	de b7       	in	r29, 0x3e	; 62
    d392:	0e 94 bf 61 	call	0xc37e	; 0xc37e <LITE_READ_INT2_PIN>
    d396:	99 27       	eor	r25, r25
    d398:	87 fd       	sbrc	r24, 7
    d39a:	90 95       	com	r25
    d39c:	df 91       	pop	r29
    d39e:	cf 91       	pop	r28
    d3a0:	08 95       	ret

0000d3a2 <LITE_MAKE_TEMP_CTL_OUTPUT>:
    d3a2:	cf 93       	push	r28
    d3a4:	df 93       	push	r29
    d3a6:	cd b7       	in	r28, 0x3d	; 61
    d3a8:	de b7       	in	r29, 0x3e	; 62
    d3aa:	0e 94 e4 61 	call	0xc3c8	; 0xc3c8 <LITE_MAKE_INT2_OUTPUT>
    d3ae:	df 91       	pop	r29
    d3b0:	cf 91       	pop	r28
    d3b2:	08 95       	ret

0000d3b4 <LITE_MAKE_TEMP_CTL_INPUT>:
    d3b4:	cf 93       	push	r28
    d3b6:	df 93       	push	r29
    d3b8:	cd b7       	in	r28, 0x3d	; 61
    d3ba:	de b7       	in	r29, 0x3e	; 62
    d3bc:	0e 94 f2 61 	call	0xc3e4	; 0xc3e4 <LITE_MAKE_INT2_INPUT>
    d3c0:	df 91       	pop	r29
    d3c2:	cf 91       	pop	r28
    d3c4:	08 95       	ret

0000d3c6 <LITE_SET_MIC_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN( MIC_CTL, PW3 );
    d3c6:	cf 93       	push	r28
    d3c8:	df 93       	push	r29
    d3ca:	cd b7       	in	r28, 0x3d	; 61
    d3cc:	de b7       	in	r29, 0x3e	; 62
    d3ce:	0e 94 70 64 	call	0xc8e0	; 0xc8e0 <LITE_SET_PW3_PIN>
    d3d2:	df 91       	pop	r29
    d3d4:	cf 91       	pop	r28
    d3d6:	08 95       	ret

0000d3d8 <LITE_CLR_MIC_CTL_PIN>:
    d3d8:	cf 93       	push	r28
    d3da:	df 93       	push	r29
    d3dc:	cd b7       	in	r28, 0x3d	; 61
    d3de:	de b7       	in	r29, 0x3e	; 62
    d3e0:	0e 94 7e 64 	call	0xc8fc	; 0xc8fc <LITE_CLR_PW3_PIN>
    d3e4:	df 91       	pop	r29
    d3e6:	cf 91       	pop	r28
    d3e8:	08 95       	ret

0000d3ea <LITE_MAKE_MIC_CTL_OUTPUT>:
    d3ea:	cf 93       	push	r28
    d3ec:	df 93       	push	r29
    d3ee:	cd b7       	in	r28, 0x3d	; 61
    d3f0:	de b7       	in	r29, 0x3e	; 62
    d3f2:	df 91       	pop	r29
    d3f4:	cf 91       	pop	r28
    d3f6:	08 95       	ret

0000d3f8 <LITE_SET_SOUNDER_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN( SOUNDER_CTL, PW2 );
    d3f8:	cf 93       	push	r28
    d3fa:	df 93       	push	r29
    d3fc:	cd b7       	in	r28, 0x3d	; 61
    d3fe:	de b7       	in	r29, 0x3e	; 62
    d400:	0e 94 13 64 	call	0xc826	; 0xc826 <LITE_SET_PW2_PIN>
    d404:	df 91       	pop	r29
    d406:	cf 91       	pop	r28
    d408:	08 95       	ret

0000d40a <LITE_CLR_SOUNDER_CTL_PIN>:
    d40a:	cf 93       	push	r28
    d40c:	df 93       	push	r29
    d40e:	cd b7       	in	r28, 0x3d	; 61
    d410:	de b7       	in	r29, 0x3e	; 62
    d412:	0e 94 21 64 	call	0xc842	; 0xc842 <LITE_CLR_PW2_PIN>
    d416:	df 91       	pop	r29
    d418:	cf 91       	pop	r28
    d41a:	08 95       	ret

0000d41c <LITE_MAKE_SOUNDER_CTL_OUTPUT>:
    d41c:	cf 93       	push	r28
    d41e:	df 93       	push	r29
    d420:	cd b7       	in	r28, 0x3d	; 61
    d422:	de b7       	in	r29, 0x3e	; 62
    d424:	df 91       	pop	r29
    d426:	cf 91       	pop	r28
    d428:	08 95       	ret

0000d42a <LITE_SET_ACCEL_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN( ACCEL_CTL, PW4 );
    d42a:	cf 93       	push	r28
    d42c:	df 93       	push	r29
    d42e:	cd b7       	in	r28, 0x3d	; 61
    d430:	de b7       	in	r29, 0x3e	; 62
    d432:	0e 94 cd 64 	call	0xc99a	; 0xc99a <LITE_SET_PW4_PIN>
    d436:	df 91       	pop	r29
    d438:	cf 91       	pop	r28
    d43a:	08 95       	ret

0000d43c <LITE_CLR_ACCEL_CTL_PIN>:
    d43c:	cf 93       	push	r28
    d43e:	df 93       	push	r29
    d440:	cd b7       	in	r28, 0x3d	; 61
    d442:	de b7       	in	r29, 0x3e	; 62
    d444:	0e 94 db 64 	call	0xc9b6	; 0xc9b6 <LITE_CLR_PW4_PIN>
    d448:	df 91       	pop	r29
    d44a:	cf 91       	pop	r28
    d44c:	08 95       	ret

0000d44e <LITE_MAKE_ACCEL_CTL_OUTPUT>:
    d44e:	cf 93       	push	r28
    d450:	df 93       	push	r29
    d452:	cd b7       	in	r28, 0x3d	; 61
    d454:	de b7       	in	r29, 0x3e	; 62
    d456:	df 91       	pop	r29
    d458:	cf 91       	pop	r28
    d45a:	08 95       	ret

0000d45c <LITE_SET_MAG_CTL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN( MAG_CTL, PW5 );
    d45c:	cf 93       	push	r28
    d45e:	df 93       	push	r29
    d460:	cd b7       	in	r28, 0x3d	; 61
    d462:	de b7       	in	r29, 0x3e	; 62
    d464:	0e 94 2a 65 	call	0xca54	; 0xca54 <LITE_SET_PW5_PIN>
    d468:	df 91       	pop	r29
    d46a:	cf 91       	pop	r28
    d46c:	08 95       	ret

0000d46e <LITE_CLR_MAG_CTL_PIN>:
    d46e:	cf 93       	push	r28
    d470:	df 93       	push	r29
    d472:	cd b7       	in	r28, 0x3d	; 61
    d474:	de b7       	in	r29, 0x3e	; 62
    d476:	0e 94 38 65 	call	0xca70	; 0xca70 <LITE_CLR_PW5_PIN>
    d47a:	df 91       	pop	r29
    d47c:	cf 91       	pop	r28
    d47e:	08 95       	ret

0000d480 <LITE_MAKE_MAG_CTL_OUTPUT>:
    d480:	cf 93       	push	r28
    d482:	df 93       	push	r29
    d484:	cd b7       	in	r28, 0x3d	; 61
    d486:	de b7       	in	r29, 0x3e	; 62
    d488:	df 91       	pop	r29
    d48a:	cf 91       	pop	r28
    d48c:	08 95       	ret

0000d48e <LITE_SET_MIC_MUX_SEL_PIN>:
LITE_ALIAS_OUTPUT_ONLY_PIN( MIC_MUX_SEL, PW6 );
    d48e:	cf 93       	push	r28
    d490:	df 93       	push	r29
    d492:	cd b7       	in	r28, 0x3d	; 61
    d494:	de b7       	in	r29, 0x3e	; 62
    d496:	0e 94 87 65 	call	0xcb0e	; 0xcb0e <LITE_SET_PW6_PIN>
    d49a:	df 91       	pop	r29
    d49c:	cf 91       	pop	r28
    d49e:	08 95       	ret

0000d4a0 <LITE_CLR_MIC_MUX_SEL_PIN>:
    d4a0:	cf 93       	push	r28
    d4a2:	df 93       	push	r29
    d4a4:	cd b7       	in	r28, 0x3d	; 61
    d4a6:	de b7       	in	r29, 0x3e	; 62
    d4a8:	0e 94 95 65 	call	0xcb2a	; 0xcb2a <LITE_CLR_PW6_PIN>
    d4ac:	df 91       	pop	r29
    d4ae:	cf 91       	pop	r28
    d4b0:	08 95       	ret

0000d4b2 <LITE_MAKE_MIC_MUX_SEL_OUTPUT>:
    d4b2:	cf 93       	push	r28
    d4b4:	df 93       	push	r29
    d4b6:	cd b7       	in	r28, 0x3d	; 61
    d4b8:	de b7       	in	r29, 0x3e	; 62
    d4ba:	df 91       	pop	r29
    d4bc:	cf 91       	pop	r28
    d4be:	08 95       	ret

0000d4c0 <LITE_SET_PIN_DIRECTIONS>:
void LITE_SET_PIN_DIRECTIONS( void ) {
    d4c0:	cf 93       	push	r28
    d4c2:	df 93       	push	r29
    d4c4:	cd b7       	in	r28, 0x3d	; 61
    d4c6:	de b7       	in	r29, 0x3e	; 62
   /*  outp(0x00, DDRA);
   outp(0x00, DDRB);
   outp(0x00, DDRD);
   outp(0x02, DDRE);
   outp(0x02, PORTE);
    */
   LITE_MAKE_RED_LED_OUTPUT();
    d4c8:	0e 94 4c 5a 	call	0xb498	; 0xb498 <LITE_MAKE_RED_LED_OUTPUT>
   LITE_MAKE_YELLOW_LED_OUTPUT();
    d4cc:	0e 94 ee 5a 	call	0xb5dc	; 0xb5dc <LITE_MAKE_YELLOW_LED_OUTPUT>
   LITE_MAKE_GREEN_LED_OUTPUT();
    d4d0:	0e 94 a9 5a 	call	0xb552	; 0xb552 <LITE_MAKE_GREEN_LED_OUTPUT>
   LITE_MAKE_PW7_OUTPUT();
    d4d4:	0e 94 21 66 	call	0xcc42	; 0xcc42 <LITE_MAKE_PW7_OUTPUT>
   LITE_MAKE_PW6_OUTPUT();
    d4d8:	0e 94 c8 65 	call	0xcb90	; 0xcb90 <LITE_MAKE_PW6_OUTPUT>
   LITE_MAKE_PW5_OUTPUT();
    d4dc:	0e 94 6b 65 	call	0xcad6	; 0xcad6 <LITE_MAKE_PW5_OUTPUT>
   LITE_MAKE_PW4_OUTPUT();
    d4e0:	0e 94 0e 65 	call	0xca1c	; 0xca1c <LITE_MAKE_PW4_OUTPUT>
   LITE_MAKE_PW3_OUTPUT();
    d4e4:	0e 94 b1 64 	call	0xc962	; 0xc962 <LITE_MAKE_PW3_OUTPUT>
   LITE_MAKE_PW2_OUTPUT();
    d4e8:	0e 94 54 64 	call	0xc8a8	; 0xc8a8 <LITE_MAKE_PW2_OUTPUT>
   LITE_MAKE_PW1_OUTPUT();
    d4ec:	0e 94 f7 63 	call	0xc7ee	; 0xc7ee <LITE_MAKE_PW1_OUTPUT>
   LITE_MAKE_PW0_OUTPUT();
    d4f0:	0e 94 9a 63 	call	0xc734	; 0xc734 <LITE_MAKE_PW0_OUTPUT>
   //CC2420 pins  
   LITE_MAKE_MISO_INPUT();
    d4f4:	0e 94 06 63 	call	0xc60c	; 0xc60c <LITE_MAKE_MISO_INPUT>
   LITE_MAKE_MOSI_OUTPUT();
    d4f8:	0e 94 9b 62 	call	0xc536	; 0xc536 <LITE_MAKE_MOSI_OUTPUT>
   LITE_MAKE_SPI_SCK_OUTPUT();
    d4fc:	0e 94 55 63 	call	0xc6aa	; 0xc6aa <LITE_MAKE_SPI_SCK_OUTPUT>
   LITE_MAKE_CC_RSTN_OUTPUT();
    d500:	0e 94 8c 5c 	call	0xb918	; 0xb918 <LITE_MAKE_CC_RSTN_OUTPUT>
   LITE_MAKE_CC_VREN_OUTPUT();
    d504:	0e 94 e9 5c 	call	0xb9d2	; 0xb9d2 <LITE_MAKE_CC_VREN_OUTPUT>
   LITE_MAKE_CC_CS_INPUT();
    d508:	0e 94 b0 5e 	call	0xbd60	; 0xbd60 <LITE_MAKE_CC_CS_INPUT>
   LITE_MAKE_CC_FIFOP1_INPUT();
    d50c:	0e 94 b1 5d 	call	0xbb62	; 0xbb62 <LITE_MAKE_CC_FIFOP1_INPUT>
   LITE_MAKE_CC_CCA_INPUT();
    d510:	0e 94 0e 5e 	call	0xbc1c	; 0xbc1c <LITE_MAKE_CC_CCA_INPUT>
   LITE_MAKE_CC_SFD_INPUT();
    d514:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <LITE_MAKE_CC_SFD_INPUT>
   LITE_MAKE_CC_FIFO_INPUT();
    d518:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <LITE_MAKE_CC_FIFO_INPUT>
   LITE_MAKE_RADIO_CCA_INPUT();
    d51c:	0e 94 67 5f 	call	0xbece	; 0xbece <LITE_MAKE_RADIO_CCA_INPUT>
   LITE_MAKE_SERIAL_ID_INPUT();
    d520:	0e 94 59 5b 	call	0xb6b2	; 0xb6b2 <LITE_MAKE_SERIAL_ID_INPUT>
   LITE_CLR_SERIAL_ID_PIN(); // Prevent sourcing current
    d524:	0e 94 18 5b 	call	0xb630	; 0xb630 <LITE_CLR_SERIAL_ID_PIN>
   LITE_MAKE_FLASH_SELECT_OUTPUT();
    d528:	0e 94 b6 5f 	call	0xbf6c	; 0xbf6c <LITE_MAKE_FLASH_SELECT_OUTPUT>
   LITE_MAKE_FLASH_OUT_OUTPUT();
    d52c:	0e 94 70 60 	call	0xc0e0	; 0xc0e0 <LITE_MAKE_FLASH_OUT_OUTPUT>
   LITE_MAKE_FLASH_CLK_OUTPUT();
    d530:	0e 94 13 60 	call	0xc026	; 0xc026 <LITE_MAKE_FLASH_CLK_OUTPUT>
   LITE_SET_FLASH_SELECT_PIN();
    d534:	0e 94 75 5f 	call	0xbeea	; 0xbeea <LITE_SET_FLASH_SELECT_PIN>
   LITE_SET_RED_LED_PIN();
    d538:	0e 94 0b 5a 	call	0xb416	; 0xb416 <LITE_SET_RED_LED_PIN>
   LITE_SET_YELLOW_LED_PIN();
    d53c:	0e 94 c5 5a 	call	0xb58a	; 0xb58a <LITE_SET_YELLOW_LED_PIN>
   LITE_SET_GREEN_LED_PIN();
    d540:	0e 94 68 5a 	call	0xb4d0	; 0xb4d0 <LITE_SET_GREEN_LED_PIN>
    d544:	df 91       	pop	r29
    d546:	cf 91       	pop	r28
    d548:	08 95       	ret

0000d54a <initCommandReceived>:
//This function receives init command in MicaZ installation task, and sets up the node status for reboot, so that the fiel system will
//be reformatted 


void initCommandReceived( uint8_t *receivebuffer ) {
    d54a:	cf 93       	push	r28
    d54c:	df 93       	push	r29
    d54e:	cd b7       	in	r28, 0x3d	; 61
    d550:	de b7       	in	r29, 0x3e	; 62
    d552:	23 97       	sbiw	r28, 0x03	; 3
    d554:	0f b6       	in	r0, 0x3f	; 63
    d556:	f8 94       	cli
    d558:	de bf       	out	0x3e, r29	; 62
    d55a:	0f be       	out	0x3f, r0	; 63
    d55c:	cd bf       	out	0x3d, r28	; 61
    d55e:	9b 83       	std	Y+3, r25	; 0x03
    d560:	8a 83       	std	Y+2, r24	; 0x02
  
   uint8_t i;
   
   genericwriteBytes ( NETWORKNAMEOFFSET, 16,  &receivebuffer[ 0 ] );
    d562:	8a 81       	ldd	r24, Y+2	; 0x02
    d564:	9b 81       	ldd	r25, Y+3	; 0x03
    d566:	ac 01       	movw	r20, r24
    d568:	60 e1       	ldi	r22, 0x10	; 16
    d56a:	70 e0       	ldi	r23, 0x00	; 0
    d56c:	80 e2       	ldi	r24, 0x20	; 32
    d56e:	9c e0       	ldi	r25, 0x0C	; 12
    d570:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <genericwriteBytes>
   genericwriteBytes ( NODEFILENAMEOFFSET,    15,  &receivebuffer[ 16 ] );
    d574:	8a 81       	ldd	r24, Y+2	; 0x02
    d576:	9b 81       	ldd	r25, Y+3	; 0x03
    d578:	40 96       	adiw	r24, 0x10	; 16
    d57a:	ac 01       	movw	r20, r24
    d57c:	6f e0       	ldi	r22, 0x0F	; 15
    d57e:	70 e0       	ldi	r23, 0x00	; 0
    d580:	85 e3       	ldi	r24, 0x35	; 53
    d582:	9c e0       	ldi	r25, 0x0C	; 12
    d584:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <genericwriteBytes>
   node_setradiochannel( receivebuffer[31] ); 
    d588:	8a 81       	ldd	r24, Y+2	; 0x02
    d58a:	9b 81       	ldd	r25, Y+3	; 0x03
    d58c:	fc 01       	movw	r30, r24
    d58e:	7f 96       	adiw	r30, 0x1f	; 31
    d590:	80 81       	ld	r24, Z
    d592:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <node_setradiochannel>
   node_writenodeid ( receivebuffer[ 32 ] );
    d596:	8a 81       	ldd	r24, Y+2	; 0x02
    d598:	9b 81       	ldd	r25, Y+3	; 0x03
    d59a:	fc 01       	movw	r30, r24
    d59c:	b0 96       	adiw	r30, 0x20	; 32
    d59e:	80 81       	ld	r24, Z
    d5a0:	99 27       	eor	r25, r25
    d5a2:	0e 94 57 86 	call	0x10cae	; 0x10cae <node_writenodeid>
   node_setinitstatus (MICAZCONFIGMESSAGERECEIVED);
    d5a6:	8a e0       	ldi	r24, 0x0A	; 10
    d5a8:	0e 94 7e 86 	call	0x10cfc	; 0x10cfc <node_setinitstatus>
   
   for ( i = 0; i < 32; i ++ ) {
    d5ac:	19 82       	std	Y+1, r1	; 0x01
    d5ae:	07 c0       	rjmp	.+14     	; 0xd5be <initCommandReceived+0x74>
      printfstr ( '\0' );
    d5b0:	80 e0       	ldi	r24, 0x00	; 0
    d5b2:	90 e0       	ldi	r25, 0x00	; 0
    d5b4:	0e 94 60 8e 	call	0x11cc0	; 0x11cc0 <printfstr>
    d5b8:	89 81       	ldd	r24, Y+1	; 0x01
    d5ba:	8f 5f       	subi	r24, 0xFF	; 255
    d5bc:	89 83       	std	Y+1, r24	; 0x01
    d5be:	89 81       	ldd	r24, Y+1	; 0x01
    d5c0:	80 32       	cpi	r24, 0x20	; 32
    d5c2:	b0 f3       	brcs	.-20     	; 0xd5b0 <initCommandReceived+0x66>
   } 
  
   resetNode();
    d5c4:	0e 94 c8 86 	call	0x10d90	; 0x10d90 <resetNode>
    d5c8:	23 96       	adiw	r28, 0x03	; 3
    d5ca:	0f b6       	in	r0, 0x3f	; 63
    d5cc:	f8 94       	cli
    d5ce:	de bf       	out	0x3e, r29	; 62
    d5d0:	0f be       	out	0x3f, r0	; 63
    d5d2:	cd bf       	out	0x3d, r28	; 61
    d5d4:	df 91       	pop	r29
    d5d6:	cf 91       	pop	r28
    d5d8:	08 95       	ret

0000d5da <main>:
}


//The platform specific entry point. This is the place where the program gets executed. 
//Every time the system gets compiled, there should be at most one such entry point. 

 int main() {
    d5da:	af 92       	push	r10
    d5dc:	bf 92       	push	r11
    d5de:	cf 92       	push	r12
    d5e0:	df 92       	push	r13
    d5e2:	ef 92       	push	r14
    d5e4:	ff 92       	push	r15
    d5e6:	0f 93       	push	r16
    d5e8:	cf 93       	push	r28
    d5ea:	df 93       	push	r29
    d5ec:	cd b7       	in	r28, 0x3d	; 61
    d5ee:	de b7       	in	r29, 0x3e	; 62
    d5f0:	21 97       	sbiw	r28, 0x01	; 1
    d5f2:	0f b6       	in	r0, 0x3f	; 63
    d5f4:	f8 94       	cli
    d5f6:	de bf       	out	0x3e, r29	; 62
    d5f8:	0f be       	out	0x3f, r0	; 63
    d5fa:	cd bf       	out	0x3d, r28	; 61

   //micaz specific initilizations

  

   LITE_SET_PIN_DIRECTIONS();
    d5fc:	0e 94 60 6a 	call	0xd4c0	; 0xd4c0 <LITE_SET_PIN_DIRECTIONS>
   adcdriver_init_adc();
    d600:	0e 94 6d 3e 	call	0x7cda	; 0x7cda <adcdriver_init_adc>
   
   //system (hardware independent) init
   
   initScheduling();
    d604:	0e 94 76 8a 	call	0x114ec	; 0x114ec <initScheduling>
   thread_init();
    d608:	0e 94 bd 90 	call	0x1217a	; 0x1217a <thread_init>

   //printf is expected to be connected to serial port in MicaZ. But this is 
   //going to be system independent, and may connect to radio on platforms where 
   //serial port is not available 
   
   printfstr( "System start!\n" );
    d60c:	83 e4       	ldi	r24, 0x43	; 67
    d60e:	91 e0       	ldi	r25, 0x01	; 1
    d610:	0e 94 60 8e 	call	0x11cc0	; 0x11cc0 <printfstr>
   
   _avr_enable_interrupt(); 
    d614:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <_avr_enable_interrupt>
   
   //for the following, read from else section, which defaults to the 0xff as the MicaZ is first initied by reprogramming
   
   
   if ( node_readinitstatus() == MICAZCONFIGMESSAGERECEIVED)
    d618:	0e 94 97 86 	call	0x10d2e	; 0x10d2e <node_readinitstatus>
    d61c:	8a 30       	cpi	r24, 0x0A	; 10
    d61e:	09 f0       	breq	.+2      	; 0xd622 <main+0x48>
    d620:	40 c0       	rjmp	.+128    	; 0xd6a2 <main+0xc8>
    {
    	//current_node_id is expected to be platform independent variable 
   
    	
      CURRENT_NODE_ID = node_readnodeid();
    d622:	0e 94 73 86 	call	0x10ce6	; 0x10ce6 <node_readnodeid>
    d626:	90 93 81 07 	sts	0x0781, r25
    d62a:	80 93 80 07 	sts	0x0780, r24
      srand( CURRENT_NODE_ID );
    d62e:	80 91 80 07 	lds	r24, 0x0780
    d632:	90 91 81 07 	lds	r25, 0x0781
    d636:	0e 94 4f a3 	call	0x1469e	; 0x1469e <srand>
      
      genericreadBytes( NETWORKNAMEOFFSET, 16, networkid );
    d63a:	82 e8       	ldi	r24, 0x82	; 130
    d63c:	97 e0       	ldi	r25, 0x07	; 7
    d63e:	ac 01       	movw	r20, r24
    d640:	60 e1       	ldi	r22, 0x10	; 16
    d642:	70 e0       	ldi	r23, 0x00	; 0
    d644:	80 e2       	ldi	r24, 0x20	; 32
    d646:	9c e0       	ldi	r25, 0x0C	; 12
    d648:	0e 94 88 6e 	call	0xdd10	; 0xdd10 <genericreadBytes>
      genericreadBytes( NODEFILENAMEOFFSET, 16, filenameid );
    d64c:	8f e6       	ldi	r24, 0x6F	; 111
    d64e:	97 e0       	ldi	r25, 0x07	; 7
    d650:	ac 01       	movw	r20, r24
    d652:	60 e1       	ldi	r22, 0x10	; 16
    d654:	70 e0       	ldi	r23, 0x00	; 0
    d656:	85 e3       	ldi	r24, 0x35	; 53
    d658:	9c e0       	ldi	r25, 0x0C	; 12
    d65a:	0e 94 88 6e 	call	0xdd10	; 0xdd10 <genericreadBytes>
      
    
      
      nodeid = CURRENT_NODE_ID;
    d65e:	80 91 80 07 	lds	r24, 0x0780
    d662:	90 91 81 07 	lds	r25, 0x0781
    d666:	90 93 e0 03 	sts	0x03E0, r25
    d66a:	80 93 df 03 	sts	0x03DF, r24
      
      networkid[ 16 ] = '\0';
    d66e:	10 92 92 07 	sts	0x0792, r1
      filenameid[ 16 ] = '\0';
    d672:	10 92 7f 07 	sts	0x077F, r1
      
      Leds_redToggle();
    d676:	0e 94 81 58 	call	0xb102	; 0xb102 <Leds_redToggle>
      Leds_greenToggle();
    d67a:	0e 94 e6 58 	call	0xb1cc	; 0xb1cc <Leds_greenToggle>
      Leds_yellowToggle();
    d67e:	0e 94 4b 59 	call	0xb296	; 0xb296 <Leds_yellowToggle>
      
      formatSystem();
    d682:	0e 94 75 0b 	call	0x16ea	; 0x16ea <formatSystem>
      
      buildRootNode();
    d686:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <buildRootNode>
      buildDeviceDirectory();
    d68a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <buildDeviceDirectory>
      
      Leds_redToggle();
    d68e:	0e 94 81 58 	call	0xb102	; 0xb102 <Leds_redToggle>
      Leds_greenToggle();
    d692:	0e 94 e6 58 	call	0xb1cc	; 0xb1cc <Leds_greenToggle>
      Leds_yellowToggle();
    d696:	0e 94 4b 59 	call	0xb296	; 0xb296 <Leds_yellowToggle>
	  
	 // node_setinitstatus(MICAZ_INIT_READY); 
	 node_setinitstatus(MICAZCONFIGMESSAGERECEIVED); 
    d69a:	8a e0       	ldi	r24, 0x0A	; 10
    d69c:	0e 94 7e 86 	call	0x10cfc	; 0x10cfc <node_setinitstatus>
    d6a0:	95 c0       	rjmp	.+298    	; 0xd7cc <main+0x1f2>
   }
   else if (node_readinitstatus() == MICAZ_INIT_READY)
    d6a2:	0e 94 97 86 	call	0x10d2e	; 0x10d2e <node_readinitstatus>
    d6a6:	8b 30       	cpi	r24, 0x0B	; 11
    d6a8:	d9 f5       	brne	.+118    	; 0xd720 <main+0x146>
   {
      
      CURRENT_NODE_ID = node_readnodeid();
    d6aa:	0e 94 73 86 	call	0x10ce6	; 0x10ce6 <node_readnodeid>
    d6ae:	90 93 81 07 	sts	0x0781, r25
    d6b2:	80 93 80 07 	sts	0x0780, r24
      srand( CURRENT_NODE_ID );
    d6b6:	80 91 80 07 	lds	r24, 0x0780
    d6ba:	90 91 81 07 	lds	r25, 0x0781
    d6be:	0e 94 4f a3 	call	0x1469e	; 0x1469e <srand>
      genericreadBytes( NETWORKNAMEOFFSET, 16, networkid );
    d6c2:	82 e8       	ldi	r24, 0x82	; 130
    d6c4:	97 e0       	ldi	r25, 0x07	; 7
    d6c6:	ac 01       	movw	r20, r24
    d6c8:	60 e1       	ldi	r22, 0x10	; 16
    d6ca:	70 e0       	ldi	r23, 0x00	; 0
    d6cc:	80 e2       	ldi	r24, 0x20	; 32
    d6ce:	9c e0       	ldi	r25, 0x0C	; 12
    d6d0:	0e 94 88 6e 	call	0xdd10	; 0xdd10 <genericreadBytes>
      genericreadBytes( NODEFILENAMEOFFSET, 16, filenameid );
    d6d4:	8f e6       	ldi	r24, 0x6F	; 111
    d6d6:	97 e0       	ldi	r25, 0x07	; 7
    d6d8:	ac 01       	movw	r20, r24
    d6da:	60 e1       	ldi	r22, 0x10	; 16
    d6dc:	70 e0       	ldi	r23, 0x00	; 0
    d6de:	85 e3       	ldi	r24, 0x35	; 53
    d6e0:	9c e0       	ldi	r25, 0x0C	; 12
    d6e2:	0e 94 88 6e 	call	0xdd10	; 0xdd10 <genericreadBytes>
      nodeid = CURRENT_NODE_ID;
    d6e6:	80 91 80 07 	lds	r24, 0x0780
    d6ea:	90 91 81 07 	lds	r25, 0x0781
    d6ee:	90 93 e0 03 	sts	0x03E0, r25
    d6f2:	80 93 df 03 	sts	0x03DF, r24
      
      networkid[ 16 ] = '\0';
    d6f6:	10 92 92 07 	sts	0x0792, r1
      filenameid[ 16 ] = '\0';
    d6fa:	10 92 7f 07 	sts	0x077F, r1
      
      Leds_redToggle();
    d6fe:	0e 94 81 58 	call	0xb102	; 0xb102 <Leds_redToggle>
      Leds_greenToggle();
    d702:	0e 94 e6 58 	call	0xb1cc	; 0xb1cc <Leds_greenToggle>
      Leds_yellowToggle();
    d706:	0e 94 4b 59 	call	0xb296	; 0xb296 <Leds_yellowToggle>
      
      //formatSystem();
      //buildRootNode();
      //buildDeviceDirectory();

   	  readVectorFlashFromExternalStorage();
    d70a:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <readVectorFlashFromExternalStorage>
   	  readVectorNodeFromExternalStorage(); 
    d70e:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <readVectorNodeFromExternalStorage>
      
      Leds_redToggle();
    d712:	0e 94 81 58 	call	0xb102	; 0xb102 <Leds_redToggle>
      Leds_greenToggle();
    d716:	0e 94 e6 58 	call	0xb1cc	; 0xb1cc <Leds_greenToggle>
      Leds_yellowToggle();
    d71a:	0e 94 4b 59 	call	0xb296	; 0xb296 <Leds_yellowToggle>
    d71e:	56 c0       	rjmp	.+172    	; 0xd7cc <main+0x1f2>
	  
	  //node_setinitstatus(MICAZ_INIT_READY);  
   
   
   }
   
   //entry point. Every time the system is booted, start from here. 
   else
    {   
      
      /* The following is for debugging the kernel , where no reprogramming overboard is used 
      */
     //#ifdef PLATFORM_AVR_IRIS
	  
	    Leds_redToggle();
    d720:	0e 94 81 58 	call	0xb102	; 0xb102 <Leds_redToggle>
      Leds_greenToggle();
    d724:	0e 94 e6 58 	call	0xb1cc	; 0xb1cc <Leds_greenToggle>
      Leds_yellowToggle();
    d728:	0e 94 4b 59 	call	0xb296	; 0xb296 <Leds_yellowToggle>
      mystrncpy( networkid, "sn01\0", 5);
    d72c:	82 e5       	ldi	r24, 0x52	; 82
    d72e:	91 e0       	ldi	r25, 0x01	; 1
    d730:	22 e8       	ldi	r18, 0x82	; 130
    d732:	37 e0       	ldi	r19, 0x07	; 7
    d734:	45 e0       	ldi	r20, 0x05	; 5
    d736:	bc 01       	movw	r22, r24
    d738:	c9 01       	movw	r24, r18
    d73a:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
      mystrncpy( filenameid, "d01\0", 4 );
    d73e:	88 e5       	ldi	r24, 0x58	; 88
    d740:	91 e0       	ldi	r25, 0x01	; 1
    d742:	2f e6       	ldi	r18, 0x6F	; 111
    d744:	37 e0       	ldi	r19, 0x07	; 7
    d746:	44 e0       	ldi	r20, 0x04	; 4
    d748:	bc 01       	movw	r22, r24
    d74a:	c9 01       	movw	r24, r18
    d74c:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
	  CURRENT_NODE_ID = 1;
    d750:	81 e0       	ldi	r24, 0x01	; 1
    d752:	90 e0       	ldi	r25, 0x00	; 0
    d754:	90 93 81 07 	sts	0x0781, r25
    d758:	80 93 80 07 	sts	0x0780, r24
      nodeid = CURRENT_NODE_ID; 
    d75c:	80 91 80 07 	lds	r24, 0x0780
    d760:	90 91 81 07 	lds	r25, 0x0781
    d764:	90 93 e0 03 	sts	0x03E0, r25
    d768:	80 93 df 03 	sts	0x03DF, r24
	  srand( nodeid );
    d76c:	80 91 df 03 	lds	r24, 0x03DF
    d770:	90 91 e0 03 	lds	r25, 0x03E0
    d774:	0e 94 4f a3 	call	0x1469e	; 0x1469e <srand>
	  formatSystem();
    d778:	0e 94 75 0b 	call	0x16ea	; 0x16ea <formatSystem>
      buildRootNode();
    d77c:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <buildRootNode>
      buildDeviceDirectory();
    d780:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <buildDeviceDirectory>
	  genericwriteBytes ( NETWORKNAMEOFFSET, 16, networkid );
    d784:	82 e8       	ldi	r24, 0x82	; 130
    d786:	97 e0       	ldi	r25, 0x07	; 7
    d788:	ac 01       	movw	r20, r24
    d78a:	60 e1       	ldi	r22, 0x10	; 16
    d78c:	70 e0       	ldi	r23, 0x00	; 0
    d78e:	80 e2       	ldi	r24, 0x20	; 32
    d790:	9c e0       	ldi	r25, 0x0C	; 12
    d792:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <genericwriteBytes>
      genericwriteBytes ( NODEFILENAMEOFFSET,    16,  filenameid );
    d796:	8f e6       	ldi	r24, 0x6F	; 111
    d798:	97 e0       	ldi	r25, 0x07	; 7
    d79a:	ac 01       	movw	r20, r24
    d79c:	60 e1       	ldi	r22, 0x10	; 16
    d79e:	70 e0       	ldi	r23, 0x00	; 0
    d7a0:	85 e3       	ldi	r24, 0x35	; 53
    d7a2:	9c e0       	ldi	r25, 0x0C	; 12
    d7a4:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <genericwriteBytes>
      node_writenodeid ( nodeid );
    d7a8:	80 91 df 03 	lds	r24, 0x03DF
    d7ac:	90 91 e0 03 	lds	r25, 0x03E0
    d7b0:	0e 94 57 86 	call	0x10cae	; 0x10cae <node_writenodeid>
	  node_setinitstatus(MICAZCONFIGMESSAGERECEIVED); 
    d7b4:	8a e0       	ldi	r24, 0x0A	; 10
    d7b6:	0e 94 7e 86 	call	0x10cfc	; 0x10cfc <node_setinitstatus>
	  node_setradiochannel(20); 
    d7ba:	84 e1       	ldi	r24, 0x14	; 20
    d7bc:	0e 94 a3 86 	call	0x10d46	; 0x10d46 <node_setradiochannel>
	  Leds_redToggle();
    d7c0:	0e 94 81 58 	call	0xb102	; 0xb102 <Leds_redToggle>
      Leds_greenToggle();
    d7c4:	0e 94 e6 58 	call	0xb1cc	; 0xb1cc <Leds_greenToggle>
      Leds_yellowToggle();
    d7c8:	0e 94 4b 59 	call	0xb296	; 0xb296 <Leds_yellowToggle>
      
     //#endif
  }
   
   
   //Init everything 
   
   GenericTimerInit();
    d7cc:	0e 94 e3 84 	call	0x109c6	; 0x109c6 <GenericTimerInit>
   
   filesocketInit();
    d7d0:	0e 94 65 00 	call	0xca	; 0xca <filesocketInit>
   
   AMStandard_Control_init();
    d7d4:	0e 94 22 6c 	call	0xd844	; 0xd844 <AMStandard_Control_init>
   AMStandard_Control_start();
    d7d8:	0e 94 60 6c 	call	0xd8c0	; 0xd8c0 <AMStandard_Control_start>
   
   SocketInit();
    d7dc:	0e 94 dd 8b 	call	0x117ba	; 0x117ba <SocketInit>


   initRadioHandle();
    d7e0:	0e 94 22 87 	call	0x10e44	; 0x10e44 <initRadioHandle>

   InitShell();
    d7e4:	0e 94 03 83 	call	0x10606	; 0x10606 <InitShell>

   initTrace(); 
    d7e8:	0e 94 9b 9c 	call	0x13936	; 0x13936 <initTrace>

  {
   uint8_t currentchannel;  

   currentchannel = node_getradiochannel(); 
    d7ec:	0e 94 bc 86 	call	0x10d78	; 0x10d78 <node_getradiochannel>
    d7f0:	89 83       	std	Y+1, r24	; 0x01
  
   #ifdef RADIO_CC2420
   cc2420controlm_CC2420Control_TuneChannel( currentchannel ); 
    d7f2:	89 81       	ldd	r24, Y+1	; 0x01
    d7f4:	0e 94 4f 24 	call	0x489e	; 0x489e <cc2420controlm_CC2420Control_TuneChannel>
   #endif
    
   #ifdef RADIO_CC2420
   cc2420controlm_CC2420Control_TunePower( 31 ); 
    d7f8:	8f e1       	ldi	r24, 0x1F	; 31
    d7fa:	0e 94 77 24 	call	0x48ee	; 0x48ee <cc2420controlm_CC2420Control_TunePower>
   #endif


  }
  
   
  create_thread( ShellThread, ( uint16_t* )shellbuffer, STACK_TOP( shellbuffer ), 0, 15, "sysshell", 0, 0 );
    d7fe:	8e ec       	ldi	r24, 0xCE	; 206
    d800:	95 e0       	ldi	r25, 0x05	; 5
    d802:	ac 01       	movw	r20, r24
    d804:	42 50       	subi	r20, 0x02	; 2
    d806:	5f 4f       	sbci	r21, 0xFF	; 255
    d808:	6e ec       	ldi	r22, 0xCE	; 206
    d80a:	75 e0       	ldi	r23, 0x05	; 5
    d80c:	8d e5       	ldi	r24, 0x5D	; 93
    d80e:	91 e0       	ldi	r25, 0x01	; 1
    d810:	ed e2       	ldi	r30, 0x2D	; 45
    d812:	f3 e8       	ldi	r31, 0x83	; 131
    d814:	aa 24       	eor	r10, r10
    d816:	bb 24       	eor	r11, r11
    d818:	cc 24       	eor	r12, r12
    d81a:	dd 24       	eor	r13, r13
    d81c:	7c 01       	movw	r14, r24
    d81e:	0f e0       	ldi	r16, 0x0F	; 15
    d820:	20 e0       	ldi	r18, 0x00	; 0
    d822:	30 e0       	ldi	r19, 0x00	; 0
    d824:	cf 01       	movw	r24, r30
    d826:	0e 94 87 91 	call	0x1230e	; 0x1230e <create_thread>
 
 
   GenericTimerStart(9, TIMER_REPEAT, 15000);
    d82a:	28 e9       	ldi	r18, 0x98	; 152
    d82c:	3a e3       	ldi	r19, 0x3A	; 58
    d82e:	40 e0       	ldi	r20, 0x00	; 0
    d830:	50 e0       	ldi	r21, 0x00	; 0
    d832:	60 e0       	ldi	r22, 0x00	; 0
    d834:	89 e0       	ldi	r24, 0x09	; 9
    d836:	0e 94 0a 85 	call	0x10a14	; 0x10a14 <GenericTimerStart>
      
   _avr_enable_interrupt();
    d83a:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <_avr_enable_interrupt>

   while ( 1 ) {
      runNextTask();
    d83e:	0e 94 26 8b 	call	0x1164c	; 0x1164c <runNextTask>

   }
    d842:	fd cf       	rjmp	.-6      	; 0xd83e <main+0x264>

0000d844 <AMStandard_Control_init>:
uint16_t AMStandard_Send_Counter; 


//-------------------------------------------------------------------------
inline bool AMStandard_Control_init( void ) {
    d844:	cf 93       	push	r28
    d846:	df 93       	push	r29
    d848:	cd b7       	in	r28, 0x3d	; 61
    d84a:	de b7       	in	r29, 0x3e	; 62
    d84c:	21 97       	sbiw	r28, 0x01	; 1
    d84e:	0f b6       	in	r0, 0x3f	; 63
    d850:	f8 94       	cli
    d852:	de bf       	out	0x3e, r29	; 62
    d854:	0f be       	out	0x3f, r0	; 63
    d856:	cd bf       	out	0x3d, r28	; 61
   result_t ok2;
   
   #if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
   ok2 = cc2420radiom_SplitControl_init();
    d858:	0e 94 89 26 	call	0x4d12	; 0x4d12 <cc2420radiom_SplitControl_init>
    d85c:	89 83       	std	Y+1, r24	; 0x01
   #endif 
   
   AMStandard_state = FALSE;
    d85e:	10 92 c1 05 	sts	0x05C1, r1
   AMStandard_lastCount = 0;
    d862:	10 92 c7 05 	sts	0x05C7, r1
    d866:	10 92 c6 05 	sts	0x05C6, r1
   AMStandard_counter = 0;
    d86a:	10 92 c5 05 	sts	0x05C5, r1
    d86e:	10 92 c4 05 	sts	0x05C4, r1
   AMStandard_Send_Counter = 0; 
    d872:	10 92 c3 05 	sts	0x05C3, r1
    d876:	10 92 c2 05 	sts	0x05C2, r1
   return ok2;
    d87a:	89 81       	ldd	r24, Y+1	; 0x01
    d87c:	99 27       	eor	r25, r25
    d87e:	21 96       	adiw	r28, 0x01	; 1
    d880:	0f b6       	in	r0, 0x3f	; 63
    d882:	f8 94       	cli
    d884:	de bf       	out	0x3e, r29	; 62
    d886:	0f be       	out	0x3f, r0	; 63
    d888:	cd bf       	out	0x3d, r28	; 61
    d88a:	df 91       	pop	r29
    d88c:	cf 91       	pop	r28
    d88e:	08 95       	ret

0000d890 <AMStandard_RadioControl_start>:
}

//-------------------------------------------------------------------------
inline result_t AMStandard_RadioControl_start( void ) {
    d890:	cf 93       	push	r28
    d892:	df 93       	push	r29
    d894:	cd b7       	in	r28, 0x3d	; 61
    d896:	de b7       	in	r29, 0x3e	; 62
    d898:	21 97       	sbiw	r28, 0x01	; 1
    d89a:	0f b6       	in	r0, 0x3f	; 63
    d89c:	f8 94       	cli
    d89e:	de bf       	out	0x3e, r29	; 62
    d8a0:	0f be       	out	0x3f, r0	; 63
    d8a2:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   
   #if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
   result = cc2420radiom_StdControl_start();
    d8a4:	0e 94 39 27 	call	0x4e72	; 0x4e72 <cc2420radiom_StdControl_start>
    d8a8:	89 83       	std	Y+1, r24	; 0x01
   #endif 
   
   return result;
    d8aa:	89 81       	ldd	r24, Y+1	; 0x01
    d8ac:	99 27       	eor	r25, r25
    d8ae:	21 96       	adiw	r28, 0x01	; 1
    d8b0:	0f b6       	in	r0, 0x3f	; 63
    d8b2:	f8 94       	cli
    d8b4:	de bf       	out	0x3e, r29	; 62
    d8b6:	0f be       	out	0x3f, r0	; 63
    d8b8:	cd bf       	out	0x3d, r28	; 61
    d8ba:	df 91       	pop	r29
    d8bc:	cf 91       	pop	r28
    d8be:	08 95       	ret

0000d8c0 <AMStandard_Control_start>:
}

//-------------------------------------------------------------------------
inline 
bool AMStandard_Control_start( void )
 {
    d8c0:	cf 93       	push	r28
    d8c2:	df 93       	push	r29
    d8c4:	cd b7       	in	r28, 0x3d	; 61
    d8c6:	de b7       	in	r29, 0x3e	; 62
    d8c8:	21 97       	sbiw	r28, 0x01	; 1
    d8ca:	0f b6       	in	r0, 0x3f	; 63
    d8cc:	f8 94       	cli
    d8ce:	de bf       	out	0x3e, r29	; 62
    d8d0:	0f be       	out	0x3f, r0	; 63
    d8d2:	cd bf       	out	0x3d, r28	; 61
   result_t ok2 = AMStandard_RadioControl_start();
    d8d4:	0e 94 48 6c 	call	0xd890	; 0xd890 <AMStandard_RadioControl_start>
    d8d8:	89 83       	std	Y+1, r24	; 0x01
   AMStandard_state = FALSE;
    d8da:	10 92 c1 05 	sts	0x05C1, r1
   return ok2;
    d8de:	89 81       	ldd	r24, Y+1	; 0x01
    d8e0:	99 27       	eor	r25, r25
    d8e2:	21 96       	adiw	r28, 0x01	; 1
    d8e4:	0f b6       	in	r0, 0x3f	; 63
    d8e6:	f8 94       	cli
    d8e8:	de bf       	out	0x3e, r29	; 62
    d8ea:	0f be       	out	0x3f, r0	; 63
    d8ec:	cd bf       	out	0x3d, r28	; 61
    d8ee:	df 91       	pop	r29
    d8f0:	cf 91       	pop	r28
    d8f2:	08 95       	ret

0000d8f4 <AMStandard_RadioSend_send>:
}

//-------------------------------------------------------------------------
inline result_t AMStandard_RadioSend_send( Radio_MsgPtr arg_0xa3c31f8 ) {
    d8f4:	cf 93       	push	r28
    d8f6:	df 93       	push	r29
    d8f8:	cd b7       	in	r28, 0x3d	; 61
    d8fa:	de b7       	in	r29, 0x3e	; 62
    d8fc:	23 97       	sbiw	r28, 0x03	; 3
    d8fe:	0f b6       	in	r0, 0x3f	; 63
    d900:	f8 94       	cli
    d902:	de bf       	out	0x3e, r29	; 62
    d904:	0f be       	out	0x3f, r0	; 63
    d906:	cd bf       	out	0x3d, r28	; 61
    d908:	9b 83       	std	Y+3, r25	; 0x03
    d90a:	8a 83       	std	Y+2, r24	; 0x02
   unsigned char result;
   #if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
   result = cc2420radiom_Send_send( arg_0xa3c31f8 );
    d90c:	8a 81       	ldd	r24, Y+2	; 0x02
    d90e:	9b 81       	ldd	r25, Y+3	; 0x03
    d910:	0e 94 75 28 	call	0x50ea	; 0x50ea <cc2420radiom_Send_send>
    d914:	89 83       	std	Y+1, r24	; 0x01
   AMStandard_Send_Counter++; 
    d916:	80 91 c2 05 	lds	r24, 0x05C2
    d91a:	90 91 c3 05 	lds	r25, 0x05C3
    d91e:	01 96       	adiw	r24, 0x01	; 1
    d920:	90 93 c3 05 	sts	0x05C3, r25
    d924:	80 93 c2 05 	sts	0x05C2, r24
   #endif
   return result;
    d928:	89 81       	ldd	r24, Y+1	; 0x01
    d92a:	99 27       	eor	r25, r25
    d92c:	23 96       	adiw	r28, 0x03	; 3
    d92e:	0f b6       	in	r0, 0x3f	; 63
    d930:	f8 94       	cli
    d932:	de bf       	out	0x3e, r29	; 62
    d934:	0f be       	out	0x3f, r0	; 63
    d936:	cd bf       	out	0x3d, r28	; 61
    d938:	df 91       	pop	r29
    d93a:	cf 91       	pop	r28
    d93c:	08 95       	ret

0000d93e <AMStandard_sendTask>:
}

//-------------------------------------------------------------------------
inline 
void AMStandard_sendTask( void )
 {
    d93e:	cf 93       	push	r28
    d940:	df 93       	push	r29
    d942:	cd b7       	in	r28, 0x3d	; 61
    d944:	de b7       	in	r29, 0x3e	; 62
    d946:	23 97       	sbiw	r28, 0x03	; 3
    d948:	0f b6       	in	r0, 0x3f	; 63
    d94a:	f8 94       	cli
    d94c:	de bf       	out	0x3e, r29	; 62
    d94e:	0f be       	out	0x3f, r0	; 63
    d950:	cd bf       	out	0x3d, r28	; 61
   result_t ok;
   Radio_MsgPtr buf;
   buf = AMStandard_buffer;
    d952:	80 91 c8 05 	lds	r24, 0x05C8
    d956:	90 91 c9 05 	lds	r25, 0x05C9
    d95a:	9a 83       	std	Y+2, r25	; 0x02
    d95c:	89 83       	std	Y+1, r24	; 0x01
   ok = AMStandard_RadioSend_send( buf );
    d95e:	89 81       	ldd	r24, Y+1	; 0x01
    d960:	9a 81       	ldd	r25, Y+2	; 0x02
    d962:	0e 94 7a 6c 	call	0xd8f4	; 0xd8f4 <AMStandard_RadioSend_send>
    d966:	8b 83       	std	Y+3, r24	; 0x03
   if ( ok == FAIL ) {
    d968:	8b 81       	ldd	r24, Y+3	; 0x03
    d96a:	88 23       	and	r24, r24
    d96c:	39 f4       	brne	.+14     	; 0xd97c <AMStandard_sendTask+0x3e>
      AMStandard_reportSendDone( AMStandard_buffer, FAIL );
    d96e:	80 91 c8 05 	lds	r24, 0x05C8
    d972:	90 91 c9 05 	lds	r25, 0x05C9
    d976:	60 e0       	ldi	r22, 0x00	; 0
    d978:	0e 94 2c 6e 	call	0xdc58	; 0xdc58 <AMStandard_reportSendDone>
    d97c:	23 96       	adiw	r28, 0x03	; 3
    d97e:	0f b6       	in	r0, 0x3f	; 63
    d980:	f8 94       	cli
    d982:	de bf       	out	0x3e, r29	; 62
    d984:	0f be       	out	0x3f, r0	; 63
    d986:	cd bf       	out	0x3d, r28	; 61
    d988:	df 91       	pop	r29
    d98a:	cf 91       	pop	r28
    d98c:	08 95       	ret

0000d98e <AMStandard_SendMsg_send>:
   }
}


//addr means the current broadcast address, et. id is the port 
//Send out a message and takes a while to complete 
result_t AMStandard_SendMsg_send( uint16_t port, uint16_t addr, uint8_t length, Radio_MsgPtr data )
 {
    d98e:	cf 93       	push	r28
    d990:	df 93       	push	r29
    d992:	cd b7       	in	r28, 0x3d	; 61
    d994:	de b7       	in	r29, 0x3e	; 62
    d996:	29 97       	sbiw	r28, 0x09	; 9
    d998:	0f b6       	in	r0, 0x3f	; 63
    d99a:	f8 94       	cli
    d99c:	de bf       	out	0x3e, r29	; 62
    d99e:	0f be       	out	0x3f, r0	; 63
    d9a0:	cd bf       	out	0x3d, r28	; 61
    d9a2:	9a 83       	std	Y+2, r25	; 0x02
    d9a4:	89 83       	std	Y+1, r24	; 0x01
    d9a6:	7c 83       	std	Y+4, r23	; 0x04
    d9a8:	6b 83       	std	Y+3, r22	; 0x03
    d9aa:	4d 83       	std	Y+5, r20	; 0x05
    d9ac:	3f 83       	std	Y+7, r19	; 0x07
    d9ae:	2e 83       	std	Y+6, r18	; 0x06
   #ifdef TRACE_ENABLE
      #ifdef TRACE_ENABLE_RADIOEVENT
       addTrace(TRACE_RADIOEVENT_SENDPACKET);     
	  #endif
   #endif

   if (  ! AMStandard_state ) {
    d9b0:	80 91 c1 05 	lds	r24, 0x05C1
    d9b4:	88 23       	and	r24, r24
    d9b6:	91 f5       	brne	.+100    	; 0xda1c <AMStandard_SendMsg_send+0x8e>
      AMStandard_state = TRUE;
    d9b8:	81 e0       	ldi	r24, 0x01	; 1
    d9ba:	80 93 c1 05 	sts	0x05C1, r24
      if ( length > DATA_LENGTH ) {
    d9be:	8d 81       	ldd	r24, Y+5	; 0x05
    d9c0:	85 36       	cpi	r24, 0x65	; 101
    d9c2:	28 f0       	brcs	.+10     	; 0xd9ce <AMStandard_SendMsg_send+0x40>
         AMStandard_state = FALSE;
    d9c4:	10 92 c1 05 	sts	0x05C1, r1
         return FAIL;
    d9c8:	19 86       	std	Y+9, r1	; 0x09
    d9ca:	18 86       	std	Y+8, r1	; 0x08
    d9cc:	29 c0       	rjmp	.+82     	; 0xda20 <AMStandard_SendMsg_send+0x92>
      }
      if (  ! postTask( AMStandard_sendTask, 20 )) {
    d9ce:	8f e9       	ldi	r24, 0x9F	; 159
    d9d0:	9c e6       	ldi	r25, 0x6C	; 108
    d9d2:	64 e1       	ldi	r22, 0x14	; 20
    d9d4:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
    d9d8:	88 23       	and	r24, r24
    d9da:	29 f4       	brne	.+10     	; 0xd9e6 <AMStandard_SendMsg_send+0x58>
         {}
         ;
         AMStandard_state = FALSE;
    d9dc:	10 92 c1 05 	sts	0x05C1, r1
         return FAIL;
    d9e0:	19 86       	std	Y+9, r1	; 0x09
    d9e2:	18 86       	std	Y+8, r1	; 0x08
    d9e4:	1d c0       	rjmp	.+58     	; 0xda20 <AMStandard_SendMsg_send+0x92>
      } else {
         //length is the first one that means the actual data length
         //adr is the next hop id
         //type is the port
         //group is manmade result 
         AMStandard_buffer = data;
    d9e6:	8e 81       	ldd	r24, Y+6	; 0x06
    d9e8:	9f 81       	ldd	r25, Y+7	; 0x07
    d9ea:	90 93 c9 05 	sts	0x05C9, r25
    d9ee:	80 93 c8 05 	sts	0x05C8, r24
         data->length = length;
    d9f2:	ee 81       	ldd	r30, Y+6	; 0x06
    d9f4:	ff 81       	ldd	r31, Y+7	; 0x07
    d9f6:	8d 81       	ldd	r24, Y+5	; 0x05
    d9f8:	80 83       	st	Z, r24
         data->addr = addr;
    d9fa:	ee 81       	ldd	r30, Y+6	; 0x06
    d9fc:	ff 81       	ldd	r31, Y+7	; 0x07
    d9fe:	8b 81       	ldd	r24, Y+3	; 0x03
    da00:	9c 81       	ldd	r25, Y+4	; 0x04
    da02:	97 83       	std	Z+7, r25	; 0x07
    da04:	86 83       	std	Z+6, r24	; 0x06
         data->port = port;
    da06:	ee 81       	ldd	r30, Y+6	; 0x06
    da08:	ff 81       	ldd	r31, Y+7	; 0x07
    da0a:	89 81       	ldd	r24, Y+1	; 0x01
    da0c:	9a 81       	ldd	r25, Y+2	; 0x02
    da0e:	91 87       	std	Z+9, r25	; 0x09
    da10:	80 87       	std	Z+8, r24	; 0x08
      }
      return SUCCESS;
    da12:	81 e0       	ldi	r24, 0x01	; 1
    da14:	90 e0       	ldi	r25, 0x00	; 0
    da16:	99 87       	std	Y+9, r25	; 0x09
    da18:	88 87       	std	Y+8, r24	; 0x08
    da1a:	02 c0       	rjmp	.+4      	; 0xda20 <AMStandard_SendMsg_send+0x92>
   }
   return FAIL;
    da1c:	19 86       	std	Y+9, r1	; 0x09
    da1e:	18 86       	std	Y+8, r1	; 0x08
    da20:	88 85       	ldd	r24, Y+8	; 0x08
    da22:	99 85       	ldd	r25, Y+9	; 0x09
    da24:	29 96       	adiw	r28, 0x09	; 9
    da26:	0f b6       	in	r0, 0x3f	; 63
    da28:	f8 94       	cli
    da2a:	de bf       	out	0x3e, r29	; 62
    da2c:	0f be       	out	0x3f, r0	; 63
    da2e:	cd bf       	out	0x3d, r28	; 61
    da30:	df 91       	pop	r29
    da32:	cf 91       	pop	r28
    da34:	08 95       	ret

0000da36 <AMStandard_SendMsg_default_sendDone>:
}

//-------------------------------------------------------------------------
inline 
result_t AMStandard_SendMsg_default_sendDone( uint8_t id, Radio_MsgPtr msg, result_t success )
 {
    da36:	cf 93       	push	r28
    da38:	df 93       	push	r29
    da3a:	cd b7       	in	r28, 0x3d	; 61
    da3c:	de b7       	in	r29, 0x3e	; 62
    da3e:	24 97       	sbiw	r28, 0x04	; 4
    da40:	0f b6       	in	r0, 0x3f	; 63
    da42:	f8 94       	cli
    da44:	de bf       	out	0x3e, r29	; 62
    da46:	0f be       	out	0x3f, r0	; 63
    da48:	cd bf       	out	0x3d, r28	; 61
    da4a:	89 83       	std	Y+1, r24	; 0x01
    da4c:	7b 83       	std	Y+3, r23	; 0x03
    da4e:	6a 83       	std	Y+2, r22	; 0x02
    da50:	4c 83       	std	Y+4, r20	; 0x04
   return SUCCESS;
    da52:	81 e0       	ldi	r24, 0x01	; 1
    da54:	90 e0       	ldi	r25, 0x00	; 0
    da56:	24 96       	adiw	r28, 0x04	; 4
    da58:	0f b6       	in	r0, 0x3f	; 63
    da5a:	f8 94       	cli
    da5c:	de bf       	out	0x3e, r29	; 62
    da5e:	0f be       	out	0x3f, r0	; 63
    da60:	cd bf       	out	0x3d, r28	; 61
    da62:	df 91       	pop	r29
    da64:	cf 91       	pop	r28
    da66:	08 95       	ret

0000da68 <AMStandard_SendMsg_sendDone>:
}

//-------------------------------------------------------------------------
inline result_t AMStandard_SendMsg_sendDone( uint16_t arg_0xa3b8f90, Radio_MsgPtr arg_0xa31a0a0, result_t arg_0xa31a1f0 ) {
    da68:	cf 93       	push	r28
    da6a:	df 93       	push	r29
    da6c:	cd b7       	in	r28, 0x3d	; 61
    da6e:	de b7       	in	r29, 0x3e	; 62
    da70:	25 97       	sbiw	r28, 0x05	; 5
    da72:	0f b6       	in	r0, 0x3f	; 63
    da74:	f8 94       	cli
    da76:	de bf       	out	0x3e, r29	; 62
    da78:	0f be       	out	0x3f, r0	; 63
    da7a:	cd bf       	out	0x3d, r28	; 61
    da7c:	9a 83       	std	Y+2, r25	; 0x02
    da7e:	89 83       	std	Y+1, r24	; 0x01
    da80:	7c 83       	std	Y+4, r23	; 0x04
    da82:	6b 83       	std	Y+3, r22	; 0x03
    da84:	4d 83       	std	Y+5, r20	; 0x05
   return 0;
    da86:	80 e0       	ldi	r24, 0x00	; 0
    da88:	90 e0       	ldi	r25, 0x00	; 0
    da8a:	25 96       	adiw	r28, 0x05	; 5
    da8c:	0f b6       	in	r0, 0x3f	; 63
    da8e:	f8 94       	cli
    da90:	de bf       	out	0x3e, r29	; 62
    da92:	0f be       	out	0x3f, r0	; 63
    da94:	cd bf       	out	0x3d, r28	; 61
    da96:	df 91       	pop	r29
    da98:	cf 91       	pop	r28
    da9a:	08 95       	ret

0000da9c <AMStandard_default_sendDone>:
}

//-------------------------------------------------------------------------
inline 
result_t AMStandard_default_sendDone( void )
 {
    da9c:	cf 93       	push	r28
    da9e:	df 93       	push	r29
    daa0:	cd b7       	in	r28, 0x3d	; 61
    daa2:	de b7       	in	r29, 0x3e	; 62
   return SUCCESS;
    daa4:	81 e0       	ldi	r24, 0x01	; 1
    daa6:	90 e0       	ldi	r25, 0x00	; 0
    daa8:	df 91       	pop	r29
    daaa:	cf 91       	pop	r28
    daac:	08 95       	ret

0000daae <AMStandard_sendDone>:
}

//-------------------------------------------------------------------------
inline result_t AMStandard_sendDone( void ) {
    daae:	cf 93       	push	r28
    dab0:	df 93       	push	r29
    dab2:	cd b7       	in	r28, 0x3d	; 61
    dab4:	de b7       	in	r29, 0x3e	; 62
    dab6:	21 97       	sbiw	r28, 0x01	; 1
    dab8:	0f b6       	in	r0, 0x3f	; 63
    daba:	f8 94       	cli
    dabc:	de bf       	out	0x3e, r29	; 62
    dabe:	0f be       	out	0x3f, r0	; 63
    dac0:	cd bf       	out	0x3d, r28	; 61
   unsigned char result;
   result = AMStandard_default_sendDone();
    dac2:	0e 94 4e 6d 	call	0xda9c	; 0xda9c <AMStandard_default_sendDone>
    dac6:	89 83       	std	Y+1, r24	; 0x01
   return result;
    dac8:	89 81       	ldd	r24, Y+1	; 0x01
    daca:	99 27       	eor	r25, r25
    dacc:	21 96       	adiw	r28, 0x01	; 1
    dace:	0f b6       	in	r0, 0x3f	; 63
    dad0:	f8 94       	cli
    dad2:	de bf       	out	0x3e, r29	; 62
    dad4:	0f be       	out	0x3f, r0	; 63
    dad6:	cd bf       	out	0x3d, r28	; 61
    dad8:	df 91       	pop	r29
    dada:	cf 91       	pop	r28
    dadc:	08 95       	ret

0000dade <AMStandard_ReceiveMsg_default_receive>:
}

//-------------------------------------------------------------------------
inline 
Radio_MsgPtr AMStandard_ReceiveMsg_default_receive( uint8_t id, Radio_MsgPtr msg )
 {
    dade:	cf 93       	push	r28
    dae0:	df 93       	push	r29
    dae2:	cd b7       	in	r28, 0x3d	; 61
    dae4:	de b7       	in	r29, 0x3e	; 62
    dae6:	23 97       	sbiw	r28, 0x03	; 3
    dae8:	0f b6       	in	r0, 0x3f	; 63
    daea:	f8 94       	cli
    daec:	de bf       	out	0x3e, r29	; 62
    daee:	0f be       	out	0x3f, r0	; 63
    daf0:	cd bf       	out	0x3d, r28	; 61
    daf2:	89 83       	std	Y+1, r24	; 0x01
    daf4:	7b 83       	std	Y+3, r23	; 0x03
    daf6:	6a 83       	std	Y+2, r22	; 0x02
   return msg;
    daf8:	8a 81       	ldd	r24, Y+2	; 0x02
    dafa:	9b 81       	ldd	r25, Y+3	; 0x03
    dafc:	23 96       	adiw	r28, 0x03	; 3
    dafe:	0f b6       	in	r0, 0x3f	; 63
    db00:	f8 94       	cli
    db02:	de bf       	out	0x3e, r29	; 62
    db04:	0f be       	out	0x3f, r0	; 63
    db06:	cd bf       	out	0x3d, r28	; 61
    db08:	df 91       	pop	r29
    db0a:	cf 91       	pop	r28
    db0c:	08 95       	ret

0000db0e <AMStandard_ReceiveMsg_receive>:
}
//Another critical function that bridges to the application 
inline Radio_MsgPtr AMStandard_ReceiveMsg_receive( uint16_t port, Radio_MsgPtr msg ) {
    db0e:	cf 93       	push	r28
    db10:	df 93       	push	r29
    db12:	cd b7       	in	r28, 0x3d	; 61
    db14:	de b7       	in	r29, 0x3e	; 62
    db16:	24 97       	sbiw	r28, 0x04	; 4
    db18:	0f b6       	in	r0, 0x3f	; 63
    db1a:	f8 94       	cli
    db1c:	de bf       	out	0x3e, r29	; 62
    db1e:	0f be       	out	0x3f, r0	; 63
    db20:	cd bf       	out	0x3d, r28	; 61
    db22:	9a 83       	std	Y+2, r25	; 0x02
    db24:	89 83       	std	Y+1, r24	; 0x01
    db26:	7c 83       	std	Y+4, r23	; 0x04
    db28:	6b 83       	std	Y+3, r22	; 0x03
   return msg;
    db2a:	8b 81       	ldd	r24, Y+3	; 0x03
    db2c:	9c 81       	ldd	r25, Y+4	; 0x04
    db2e:	24 96       	adiw	r28, 0x04	; 4
    db30:	0f b6       	in	r0, 0x3f	; 63
    db32:	f8 94       	cli
    db34:	de bf       	out	0x3e, r29	; 62
    db36:	0f be       	out	0x3f, r0	; 63
    db38:	cd bf       	out	0x3d, r28	; 61
    db3a:	df 91       	pop	r29
    db3c:	cf 91       	pop	r28
    db3e:	08 95       	ret

0000db40 <received>:
}
//This function is really really critical to the correct behaviro of the radio stack 
//Basically it returns a radio message pointer that must be reused 
//and the content of the packet is the correct packet parsed, and is useful 
//The content starts with a length that is the actual payload length and all information are correct
//Must copy this content to the user supplied buffer, put the user action into a task, and then return this buffer to the recevie module 
Radio_MsgPtr received( Radio_MsgPtr packet )
 {
    db40:	cf 93       	push	r28
    db42:	df 93       	push	r29
    db44:	cd b7       	in	r28, 0x3d	; 61
    db46:	de b7       	in	r29, 0x3e	; 62
    db48:	28 97       	sbiw	r28, 0x08	; 8
    db4a:	0f b6       	in	r0, 0x3f	; 63
    db4c:	f8 94       	cli
    db4e:	de bf       	out	0x3e, r29	; 62
    db50:	0f be       	out	0x3f, r0	; 63
    db52:	cd bf       	out	0x3d, r28	; 61
    db54:	98 87       	std	Y+8, r25	; 0x08
    db56:	8f 83       	std	Y+7, r24	; 0x07
   uint16_t addr = CURRENT_NODE_ID;
    db58:	80 91 80 07 	lds	r24, 0x0780
    db5c:	90 91 81 07 	lds	r25, 0x0781
    db60:	9e 83       	std	Y+6, r25	; 0x06
    db62:	8d 83       	std	Y+5, r24	; 0x05

   
   #ifdef TRACE_ENABLE
      #ifdef TRACE_ENABLE_RADIOEVENT
       addTrace(TRACE_RADIOEVENT_RECEIVEPACKET);     
      #endif
   #endif


   AMStandard_counter ++;
    db64:	80 91 c4 05 	lds	r24, 0x05C4
    db68:	90 91 c5 05 	lds	r25, 0x05C5
    db6c:	01 96       	adiw	r24, 0x01	; 1
    db6e:	90 93 c5 05 	sts	0x05C5, r25
    db72:	80 93 c4 05 	sts	0x05C4, r24
   if ( 
    db76:	8f 81       	ldd	r24, Y+7	; 0x07
    db78:	98 85       	ldd	r25, Y+8	; 0x08
    db7a:	fc 01       	movw	r30, r24
    db7c:	e0 59       	subi	r30, 0x90	; 144
    db7e:	ff 4f       	sbci	r31, 0xFF	; 255
    db80:	80 81       	ld	r24, Z
    db82:	81 30       	cpi	r24, 0x01	; 1
    db84:	49 f5       	brne	.+82     	; 0xdbd8 <received+0x98>
    db86:	ef 81       	ldd	r30, Y+7	; 0x07
    db88:	f8 85       	ldd	r31, Y+8	; 0x08
    db8a:	86 81       	ldd	r24, Z+6	; 0x06
    db8c:	97 81       	ldd	r25, Z+7	; 0x07
    db8e:	2f ef       	ldi	r18, 0xFF	; 255
    db90:	8f 3f       	cpi	r24, 0xFF	; 255
    db92:	92 07       	cpc	r25, r18
    db94:	49 f0       	breq	.+18     	; 0xdba8 <received+0x68>
    db96:	ef 81       	ldd	r30, Y+7	; 0x07
    db98:	f8 85       	ldd	r31, Y+8	; 0x08
    db9a:	26 81       	ldd	r18, Z+6	; 0x06
    db9c:	37 81       	ldd	r19, Z+7	; 0x07
    db9e:	8d 81       	ldd	r24, Y+5	; 0x05
    dba0:	9e 81       	ldd	r25, Y+6	; 0x06
    dba2:	28 17       	cp	r18, r24
    dba4:	39 07       	cpc	r19, r25
    dba6:	c1 f4       	brne	.+48     	; 0xdbd8 <received+0x98>
   packet->crc == 1 && ( packet->addr == BCAST_ADDRESS || packet->addr == addr )) {
      uint16_t port = packet->port;
    dba8:	ef 81       	ldd	r30, Y+7	; 0x07
    dbaa:	f8 85       	ldd	r31, Y+8	; 0x08
    dbac:	80 85       	ldd	r24, Z+8	; 0x08
    dbae:	91 85       	ldd	r25, Z+9	; 0x09
    dbb0:	9c 83       	std	Y+4, r25	; 0x04
    dbb2:	8b 83       	std	Y+3, r24	; 0x03
      Radio_MsgPtr tmp;
      tmp = Standard_Receive_Packet( port, packet );
    dbb4:	8f 81       	ldd	r24, Y+7	; 0x07
    dbb6:	98 85       	ldd	r25, Y+8	; 0x08
    dbb8:	2b 81       	ldd	r18, Y+3	; 0x03
    dbba:	3c 81       	ldd	r19, Y+4	; 0x04
    dbbc:	bc 01       	movw	r22, r24
    dbbe:	c9 01       	movw	r24, r18
    dbc0:	0e 94 79 88 	call	0x110f2	; 0x110f2 <Standard_Receive_Packet>
    dbc4:	9a 83       	std	Y+2, r25	; 0x02
    dbc6:	89 83       	std	Y+1, r24	; 0x01
      if ( tmp ) {
    dbc8:	89 81       	ldd	r24, Y+1	; 0x01
    dbca:	9a 81       	ldd	r25, Y+2	; 0x02
    dbcc:	00 97       	sbiw	r24, 0x00	; 0
    dbce:	21 f0       	breq	.+8      	; 0xdbd8 <received+0x98>
         packet = tmp;
    dbd0:	89 81       	ldd	r24, Y+1	; 0x01
    dbd2:	9a 81       	ldd	r25, Y+2	; 0x02
    dbd4:	98 87       	std	Y+8, r25	; 0x08
    dbd6:	8f 83       	std	Y+7, r24	; 0x07
      }
   }
   return packet;
    dbd8:	8f 81       	ldd	r24, Y+7	; 0x07
    dbda:	98 85       	ldd	r25, Y+8	; 0x08
    dbdc:	28 96       	adiw	r28, 0x08	; 8
    dbde:	0f b6       	in	r0, 0x3f	; 63
    dbe0:	f8 94       	cli
    dbe2:	de bf       	out	0x3e, r29	; 62
    dbe4:	0f be       	out	0x3f, r0	; 63
    dbe6:	cd bf       	out	0x3d, r28	; 61
    dbe8:	df 91       	pop	r29
    dbea:	cf 91       	pop	r28
    dbec:	08 95       	ret

0000dbee <AMStandard_RadioReceive_receive>:
}

//-------------------------------------------------------------------------
inline 
Radio_MsgPtr AMStandard_RadioReceive_receive( Radio_MsgPtr packet )
 {
    dbee:	cf 93       	push	r28
    dbf0:	df 93       	push	r29
    dbf2:	cd b7       	in	r28, 0x3d	; 61
    dbf4:	de b7       	in	r29, 0x3e	; 62
    dbf6:	22 97       	sbiw	r28, 0x02	; 2
    dbf8:	0f b6       	in	r0, 0x3f	; 63
    dbfa:	f8 94       	cli
    dbfc:	de bf       	out	0x3e, r29	; 62
    dbfe:	0f be       	out	0x3f, r0	; 63
    dc00:	cd bf       	out	0x3d, r28	; 61
    dc02:	9a 83       	std	Y+2, r25	; 0x02
    dc04:	89 83       	std	Y+1, r24	; 0x01
   return received( packet );
    dc06:	89 81       	ldd	r24, Y+1	; 0x01
    dc08:	9a 81       	ldd	r25, Y+2	; 0x02
    dc0a:	0e 94 a0 6d 	call	0xdb40	; 0xdb40 <received>
    dc0e:	22 96       	adiw	r28, 0x02	; 2
    dc10:	0f b6       	in	r0, 0x3f	; 63
    dc12:	f8 94       	cli
    dc14:	de bf       	out	0x3e, r29	; 62
    dc16:	0f be       	out	0x3f, r0	; 63
    dc18:	cd bf       	out	0x3d, r28	; 61
    dc1a:	df 91       	pop	r29
    dc1c:	cf 91       	pop	r28
    dc1e:	08 95       	ret

0000dc20 <AMStandard_RadioSend_sendDone>:
}

//-------------------------------------------------------------------------
inline 
result_t AMStandard_RadioSend_sendDone( Radio_MsgPtr msg, result_t success )
 {
    dc20:	cf 93       	push	r28
    dc22:	df 93       	push	r29
    dc24:	cd b7       	in	r28, 0x3d	; 61
    dc26:	de b7       	in	r29, 0x3e	; 62
    dc28:	23 97       	sbiw	r28, 0x03	; 3
    dc2a:	0f b6       	in	r0, 0x3f	; 63
    dc2c:	f8 94       	cli
    dc2e:	de bf       	out	0x3e, r29	; 62
    dc30:	0f be       	out	0x3f, r0	; 63
    dc32:	cd bf       	out	0x3d, r28	; 61
    dc34:	9a 83       	std	Y+2, r25	; 0x02
    dc36:	89 83       	std	Y+1, r24	; 0x01
    dc38:	6b 83       	std	Y+3, r22	; 0x03
   return AMStandard_reportSendDone( msg, success );
    dc3a:	89 81       	ldd	r24, Y+1	; 0x01
    dc3c:	9a 81       	ldd	r25, Y+2	; 0x02
    dc3e:	6b 81       	ldd	r22, Y+3	; 0x03
    dc40:	0e 94 2c 6e 	call	0xdc58	; 0xdc58 <AMStandard_reportSendDone>
    dc44:	99 27       	eor	r25, r25
    dc46:	23 96       	adiw	r28, 0x03	; 3
    dc48:	0f b6       	in	r0, 0x3f	; 63
    dc4a:	f8 94       	cli
    dc4c:	de bf       	out	0x3e, r29	; 62
    dc4e:	0f be       	out	0x3f, r0	; 63
    dc50:	cd bf       	out	0x3d, r28	; 61
    dc52:	df 91       	pop	r29
    dc54:	cf 91       	pop	r28
    dc56:	08 95       	ret

0000dc58 <AMStandard_reportSendDone>:
}

//-------------------------------------------------------------------------
result_t AMStandard_reportSendDone( Radio_MsgPtr msg, result_t success )
 {
    dc58:	cf 93       	push	r28
    dc5a:	df 93       	push	r29
    dc5c:	cd b7       	in	r28, 0x3d	; 61
    dc5e:	de b7       	in	r29, 0x3e	; 62
    dc60:	23 97       	sbiw	r28, 0x03	; 3
    dc62:	0f b6       	in	r0, 0x3f	; 63
    dc64:	f8 94       	cli
    dc66:	de bf       	out	0x3e, r29	; 62
    dc68:	0f be       	out	0x3f, r0	; 63
    dc6a:	cd bf       	out	0x3d, r28	; 61
    dc6c:	9a 83       	std	Y+2, r25	; 0x02
    dc6e:	89 83       	std	Y+1, r24	; 0x01
    dc70:	6b 83       	std	Y+3, r22	; 0x03
   AMStandard_state = FALSE;
    dc72:	10 92 c1 05 	sts	0x05C1, r1
   //  AMStandard_SendMsg_sendDone(msg->port, msg, success);
   //  AMStandard_sendDone();
   return SUCCESS;
    dc76:	81 e0       	ldi	r24, 0x01	; 1
    dc78:	90 e0       	ldi	r25, 0x00	; 0
    dc7a:	23 96       	adiw	r28, 0x03	; 3
    dc7c:	0f b6       	in	r0, 0x3f	; 63
    dc7e:	f8 94       	cli
    dc80:	de bf       	out	0x3e, r29	; 62
    dc82:	0f be       	out	0x3f, r0	; 63
    dc84:	cd bf       	out	0x3d, r28	; 61
    dc86:	df 91       	pop	r29
    dc88:	cf 91       	pop	r28
    dc8a:	08 95       	ret

0000dc8c <restoreRadioState>:
}


inline void restoreRadioState() {
    dc8c:	cf 93       	push	r28
    dc8e:	df 93       	push	r29
    dc90:	cd b7       	in	r28, 0x3d	; 61
    dc92:	de b7       	in	r29, 0x3e	; 62
   AMStandard_state = FALSE;
    dc94:	10 92 c1 05 	sts	0x05C1, r1
   #if defined(PLATFORM_AVR) && defined (RADIO_CC2420)
     restorecc2420state(); 
    dc98:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <restorecc2420state>
    dc9c:	df 91       	pop	r29
    dc9e:	cf 91       	pop	r28
    dca0:	08 95       	ret

0000dca2 <getGenericStorageNodeAddress>:


static genericByteStorageTaskNode  storageTask; 

void* getGenericStorageNodeAddress() {
    dca2:	cf 93       	push	r28
    dca4:	df 93       	push	r29
    dca6:	cd b7       	in	r28, 0x3d	; 61
    dca8:	de b7       	in	r29, 0x3e	; 62
		   return (void *)&storageTask;
    dcaa:	81 ee       	ldi	r24, 0xE1	; 225
    dcac:	93 e0       	ldi	r25, 0x03	; 3
    dcae:	df 91       	pop	r29
    dcb0:	cf 91       	pop	r28
    dcb2:	08 95       	ret

0000dcb4 <genericReadTask>:
}

void genericReadTask()   {
    dcb4:	cf 93       	push	r28
    dcb6:	df 93       	push	r29
    dcb8:	cd b7       	in	r28, 0x3d	; 61
    dcba:	de b7       	in	r29, 0x3e	; 62
	     genericreadBytes(storageTask.addr, storageTask.nBytes, (void*)storageTask.buffer);  
    dcbc:	40 91 e5 03 	lds	r20, 0x03E5
    dcc0:	50 91 e6 03 	lds	r21, 0x03E6
    dcc4:	80 91 e3 03 	lds	r24, 0x03E3
    dcc8:	90 91 e4 03 	lds	r25, 0x03E4
    dccc:	20 91 e1 03 	lds	r18, 0x03E1
    dcd0:	30 91 e2 03 	lds	r19, 0x03E2
    dcd4:	bc 01       	movw	r22, r24
    dcd6:	c9 01       	movw	r24, r18
    dcd8:	0e 94 88 6e 	call	0xdd10	; 0xdd10 <genericreadBytes>
    dcdc:	df 91       	pop	r29
    dcde:	cf 91       	pop	r28
    dce0:	08 95       	ret

0000dce2 <genericWriteTask>:
}

void genericWriteTask() {
    dce2:	cf 93       	push	r28
    dce4:	df 93       	push	r29
    dce6:	cd b7       	in	r28, 0x3d	; 61
    dce8:	de b7       	in	r29, 0x3e	; 62
       genericwriteBytes(storageTask.addr, storageTask.nBytes, (void*)storageTask.buffer); 	
    dcea:	40 91 e5 03 	lds	r20, 0x03E5
    dcee:	50 91 e6 03 	lds	r21, 0x03E6
    dcf2:	80 91 e3 03 	lds	r24, 0x03E3
    dcf6:	90 91 e4 03 	lds	r25, 0x03E4
    dcfa:	20 91 e1 03 	lds	r18, 0x03E1
    dcfe:	30 91 e2 03 	lds	r19, 0x03E2
    dd02:	bc 01       	movw	r22, r24
    dd04:	c9 01       	movw	r24, r18
    dd06:	0e 94 ac 6e 	call	0xdd58	; 0xdd58 <genericwriteBytes>
    dd0a:	df 91       	pop	r29
    dd0c:	cf 91       	pop	r28
    dd0e:	08 95       	ret

0000dd10 <genericreadBytes>:
}

#ifdef PLATFORM_AVR

#include "../platform/micaz/ioeeprom.h"


void genericreadBytes (uint16_t addr, int nBytes, void *buffer) {
    dd10:	cf 93       	push	r28
    dd12:	df 93       	push	r29
    dd14:	cd b7       	in	r28, 0x3d	; 61
    dd16:	de b7       	in	r29, 0x3e	; 62
    dd18:	26 97       	sbiw	r28, 0x06	; 6
    dd1a:	0f b6       	in	r0, 0x3f	; 63
    dd1c:	f8 94       	cli
    dd1e:	de bf       	out	0x3e, r29	; 62
    dd20:	0f be       	out	0x3f, r0	; 63
    dd22:	cd bf       	out	0x3d, r28	; 61
    dd24:	9a 83       	std	Y+2, r25	; 0x02
    dd26:	89 83       	std	Y+1, r24	; 0x01
    dd28:	7c 83       	std	Y+4, r23	; 0x04
    dd2a:	6b 83       	std	Y+3, r22	; 0x03
    dd2c:	5e 83       	std	Y+6, r21	; 0x06
    dd2e:	4d 83       	std	Y+5, r20	; 0x05
	    eeprom_readBytes(addr, nBytes, buffer); 	
    dd30:	8d 81       	ldd	r24, Y+5	; 0x05
    dd32:	9e 81       	ldd	r25, Y+6	; 0x06
    dd34:	2b 81       	ldd	r18, Y+3	; 0x03
    dd36:	3c 81       	ldd	r19, Y+4	; 0x04
    dd38:	e9 81       	ldd	r30, Y+1	; 0x01
    dd3a:	fa 81       	ldd	r31, Y+2	; 0x02
    dd3c:	ac 01       	movw	r20, r24
    dd3e:	b9 01       	movw	r22, r18
    dd40:	cf 01       	movw	r24, r30
    dd42:	0e 94 18 54 	call	0xa830	; 0xa830 <eeprom_readBytes>
    dd46:	26 96       	adiw	r28, 0x06	; 6
    dd48:	0f b6       	in	r0, 0x3f	; 63
    dd4a:	f8 94       	cli
    dd4c:	de bf       	out	0x3e, r29	; 62
    dd4e:	0f be       	out	0x3f, r0	; 63
    dd50:	cd bf       	out	0x3d, r28	; 61
    dd52:	df 91       	pop	r29
    dd54:	cf 91       	pop	r28
    dd56:	08 95       	ret

0000dd58 <genericwriteBytes>:
}



void genericwriteBytes(uint16_t addr, int nBytes, void *buffer) {
    dd58:	cf 93       	push	r28
    dd5a:	df 93       	push	r29
    dd5c:	cd b7       	in	r28, 0x3d	; 61
    dd5e:	de b7       	in	r29, 0x3e	; 62
    dd60:	26 97       	sbiw	r28, 0x06	; 6
    dd62:	0f b6       	in	r0, 0x3f	; 63
    dd64:	f8 94       	cli
    dd66:	de bf       	out	0x3e, r29	; 62
    dd68:	0f be       	out	0x3f, r0	; 63
    dd6a:	cd bf       	out	0x3d, r28	; 61
    dd6c:	9a 83       	std	Y+2, r25	; 0x02
    dd6e:	89 83       	std	Y+1, r24	; 0x01
    dd70:	7c 83       	std	Y+4, r23	; 0x04
    dd72:	6b 83       	std	Y+3, r22	; 0x03
    dd74:	5e 83       	std	Y+6, r21	; 0x06
    dd76:	4d 83       	std	Y+5, r20	; 0x05
      eeprom_writeBytes(addr, nBytes, buffer);
    dd78:	8d 81       	ldd	r24, Y+5	; 0x05
    dd7a:	9e 81       	ldd	r25, Y+6	; 0x06
    dd7c:	2b 81       	ldd	r18, Y+3	; 0x03
    dd7e:	3c 81       	ldd	r19, Y+4	; 0x04
    dd80:	e9 81       	ldd	r30, Y+1	; 0x01
    dd82:	fa 81       	ldd	r31, Y+2	; 0x02
    dd84:	ac 01       	movw	r20, r24
    dd86:	b9 01       	movw	r22, r18
    dd88:	cf 01       	movw	r24, r30
    dd8a:	0e 94 5b 54 	call	0xa8b6	; 0xa8b6 <eeprom_writeBytes>
    dd8e:	26 96       	adiw	r28, 0x06	; 6
    dd90:	0f b6       	in	r0, 0x3f	; 63
    dd92:	f8 94       	cli
    dd94:	de bf       	out	0x3e, r29	; 62
    dd96:	0f be       	out	0x3f, r0	; 63
    dd98:	cd bf       	out	0x3d, r28	; 61
    dd9a:	df 91       	pop	r29
    dd9c:	cf 91       	pop	r28
    dd9e:	08 95       	ret

0000dda0 <initBytes>:
}

void initBytes(uint16_t addr, int nBytes, uint8_t value)  {
    dda0:	cf 93       	push	r28
    dda2:	df 93       	push	r29
    dda4:	cd b7       	in	r28, 0x3d	; 61
    dda6:	de b7       	in	r29, 0x3e	; 62
    dda8:	25 97       	sbiw	r28, 0x05	; 5
    ddaa:	0f b6       	in	r0, 0x3f	; 63
    ddac:	f8 94       	cli
    ddae:	de bf       	out	0x3e, r29	; 62
    ddb0:	0f be       	out	0x3f, r0	; 63
    ddb2:	cd bf       	out	0x3d, r28	; 61
    ddb4:	9a 83       	std	Y+2, r25	; 0x02
    ddb6:	89 83       	std	Y+1, r24	; 0x01
    ddb8:	7c 83       	std	Y+4, r23	; 0x04
    ddba:	6b 83       	std	Y+3, r22	; 0x03
    ddbc:	4d 83       	std	Y+5, r20	; 0x05
	     eeprom_initBytes(addr, nBytes, value); 
    ddbe:	8b 81       	ldd	r24, Y+3	; 0x03
    ddc0:	9c 81       	ldd	r25, Y+4	; 0x04
    ddc2:	29 81       	ldd	r18, Y+1	; 0x01
    ddc4:	3a 81       	ldd	r19, Y+2	; 0x02
    ddc6:	4d 81       	ldd	r20, Y+5	; 0x05
    ddc8:	bc 01       	movw	r22, r24
    ddca:	c9 01       	movw	r24, r18
    ddcc:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <eeprom_initBytes>
    ddd0:	25 96       	adiw	r28, 0x05	; 5
    ddd2:	0f b6       	in	r0, 0x3f	; 63
    ddd4:	f8 94       	cli
    ddd6:	de bf       	out	0x3e, r29	; 62
    ddd8:	0f be       	out	0x3f, r0	; 63
    ddda:	cd bf       	out	0x3d, r28	; 61
    dddc:	df 91       	pop	r29
    ddde:	cf 91       	pop	r28
    dde0:	08 95       	ret

0000dde2 <read8uint>:
}

uint8_t  read8uint (uint16_t addr)  {
    dde2:	cf 93       	push	r28
    dde4:	df 93       	push	r29
    dde6:	cd b7       	in	r28, 0x3d	; 61
    dde8:	de b7       	in	r29, 0x3e	; 62
    ddea:	22 97       	sbiw	r28, 0x02	; 2
    ddec:	0f b6       	in	r0, 0x3f	; 63
    ddee:	f8 94       	cli
    ddf0:	de bf       	out	0x3e, r29	; 62
    ddf2:	0f be       	out	0x3f, r0	; 63
    ddf4:	cd bf       	out	0x3d, r28	; 61
    ddf6:	9a 83       	std	Y+2, r25	; 0x02
    ddf8:	89 83       	std	Y+1, r24	; 0x01
       return eeprom_read8uint(addr); 
    ddfa:	89 81       	ldd	r24, Y+1	; 0x01
    ddfc:	9a 81       	ldd	r25, Y+2	; 0x02
    ddfe:	0e 94 9e 54 	call	0xa93c	; 0xa93c <eeprom_read8uint>
    de02:	99 27       	eor	r25, r25
    de04:	22 96       	adiw	r28, 0x02	; 2
    de06:	0f b6       	in	r0, 0x3f	; 63
    de08:	f8 94       	cli
    de0a:	de bf       	out	0x3e, r29	; 62
    de0c:	0f be       	out	0x3f, r0	; 63
    de0e:	cd bf       	out	0x3d, r28	; 61
    de10:	df 91       	pop	r29
    de12:	cf 91       	pop	r28
    de14:	08 95       	ret

0000de16 <read8int>:
}

int8_t   read8int  (uint16_t addr)  {
    de16:	cf 93       	push	r28
    de18:	df 93       	push	r29
    de1a:	cd b7       	in	r28, 0x3d	; 61
    de1c:	de b7       	in	r29, 0x3e	; 62
    de1e:	22 97       	sbiw	r28, 0x02	; 2
    de20:	0f b6       	in	r0, 0x3f	; 63
    de22:	f8 94       	cli
    de24:	de bf       	out	0x3e, r29	; 62
    de26:	0f be       	out	0x3f, r0	; 63
    de28:	cd bf       	out	0x3d, r28	; 61
    de2a:	9a 83       	std	Y+2, r25	; 0x02
    de2c:	89 83       	std	Y+1, r24	; 0x01
	     return eeprom_read8int(addr); 
    de2e:	89 81       	ldd	r24, Y+1	; 0x01
    de30:	9a 81       	ldd	r25, Y+2	; 0x02
    de32:	0e 94 d2 54 	call	0xa9a4	; 0xa9a4 <eeprom_read8int>
    de36:	99 27       	eor	r25, r25
    de38:	87 fd       	sbrc	r24, 7
    de3a:	90 95       	com	r25
    de3c:	22 96       	adiw	r28, 0x02	; 2
    de3e:	0f b6       	in	r0, 0x3f	; 63
    de40:	f8 94       	cli
    de42:	de bf       	out	0x3e, r29	; 62
    de44:	0f be       	out	0x3f, r0	; 63
    de46:	cd bf       	out	0x3d, r28	; 61
    de48:	df 91       	pop	r29
    de4a:	cf 91       	pop	r28
    de4c:	08 95       	ret

0000de4e <read16uint>:
}

uint16_t read16uint(uint16_t addr)  {
    de4e:	cf 93       	push	r28
    de50:	df 93       	push	r29
    de52:	cd b7       	in	r28, 0x3d	; 61
    de54:	de b7       	in	r29, 0x3e	; 62
    de56:	22 97       	sbiw	r28, 0x02	; 2
    de58:	0f b6       	in	r0, 0x3f	; 63
    de5a:	f8 94       	cli
    de5c:	de bf       	out	0x3e, r29	; 62
    de5e:	0f be       	out	0x3f, r0	; 63
    de60:	cd bf       	out	0x3d, r28	; 61
    de62:	9a 83       	std	Y+2, r25	; 0x02
    de64:	89 83       	std	Y+1, r24	; 0x01
	     return eeprom_read16uint(addr); 
    de66:	89 81       	ldd	r24, Y+1	; 0x01
    de68:	9a 81       	ldd	r25, Y+2	; 0x02
    de6a:	0e 94 0a 55 	call	0xaa14	; 0xaa14 <eeprom_read16uint>
    de6e:	22 96       	adiw	r28, 0x02	; 2
    de70:	0f b6       	in	r0, 0x3f	; 63
    de72:	f8 94       	cli
    de74:	de bf       	out	0x3e, r29	; 62
    de76:	0f be       	out	0x3f, r0	; 63
    de78:	cd bf       	out	0x3d, r28	; 61
    de7a:	df 91       	pop	r29
    de7c:	cf 91       	pop	r28
    de7e:	08 95       	ret

0000de80 <read16int>:
}
int16_t  read16int (uint16_t addr)  {
    de80:	cf 93       	push	r28
    de82:	df 93       	push	r29
    de84:	cd b7       	in	r28, 0x3d	; 61
    de86:	de b7       	in	r29, 0x3e	; 62
    de88:	22 97       	sbiw	r28, 0x02	; 2
    de8a:	0f b6       	in	r0, 0x3f	; 63
    de8c:	f8 94       	cli
    de8e:	de bf       	out	0x3e, r29	; 62
    de90:	0f be       	out	0x3f, r0	; 63
    de92:	cd bf       	out	0x3d, r28	; 61
    de94:	9a 83       	std	Y+2, r25	; 0x02
    de96:	89 83       	std	Y+1, r24	; 0x01
	     return eeprom_read16int(addr); 
    de98:	89 81       	ldd	r24, Y+1	; 0x01
    de9a:	9a 81       	ldd	r25, Y+2	; 0x02
    de9c:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <eeprom_read16int>
    dea0:	22 96       	adiw	r28, 0x02	; 2
    dea2:	0f b6       	in	r0, 0x3f	; 63
    dea4:	f8 94       	cli
    dea6:	de bf       	out	0x3e, r29	; 62
    dea8:	0f be       	out	0x3f, r0	; 63
    deaa:	cd bf       	out	0x3d, r28	; 61
    deac:	df 91       	pop	r29
    deae:	cf 91       	pop	r28
    deb0:	08 95       	ret

0000deb2 <read32uint>:
}


uint32_t read32uint(uint16_t addr)  {
    deb2:	cf 93       	push	r28
    deb4:	df 93       	push	r29
    deb6:	cd b7       	in	r28, 0x3d	; 61
    deb8:	de b7       	in	r29, 0x3e	; 62
    deba:	22 97       	sbiw	r28, 0x02	; 2
    debc:	0f b6       	in	r0, 0x3f	; 63
    debe:	f8 94       	cli
    dec0:	de bf       	out	0x3e, r29	; 62
    dec2:	0f be       	out	0x3f, r0	; 63
    dec4:	cd bf       	out	0x3d, r28	; 61
    dec6:	9a 83       	std	Y+2, r25	; 0x02
    dec8:	89 83       	std	Y+1, r24	; 0x01
	     return eeprom_read32uint(addr); 
    deca:	89 81       	ldd	r24, Y+1	; 0x01
    decc:	9a 81       	ldd	r25, Y+2	; 0x02
    dece:	0e 94 50 56 	call	0xaca0	; 0xaca0 <eeprom_read32uint>
    ded2:	dc 01       	movw	r26, r24
    ded4:	cb 01       	movw	r24, r22
}
    ded6:	bc 01       	movw	r22, r24
    ded8:	cd 01       	movw	r24, r26
    deda:	22 96       	adiw	r28, 0x02	; 2
    dedc:	0f b6       	in	r0, 0x3f	; 63
    dede:	f8 94       	cli
    dee0:	de bf       	out	0x3e, r29	; 62
    dee2:	0f be       	out	0x3f, r0	; 63
    dee4:	cd bf       	out	0x3d, r28	; 61
    dee6:	df 91       	pop	r29
    dee8:	cf 91       	pop	r28
    deea:	08 95       	ret

0000deec <read32int>:


int32_t  read32int (uint16_t addr)  {
    deec:	cf 93       	push	r28
    deee:	df 93       	push	r29
    def0:	cd b7       	in	r28, 0x3d	; 61
    def2:	de b7       	in	r29, 0x3e	; 62
    def4:	22 97       	sbiw	r28, 0x02	; 2
    def6:	0f b6       	in	r0, 0x3f	; 63
    def8:	f8 94       	cli
    defa:	de bf       	out	0x3e, r29	; 62
    defc:	0f be       	out	0x3f, r0	; 63
    defe:	cd bf       	out	0x3d, r28	; 61
    df00:	9a 83       	std	Y+2, r25	; 0x02
    df02:	89 83       	std	Y+1, r24	; 0x01
	     return eeprom_read32int(addr); 
    df04:	89 81       	ldd	r24, Y+1	; 0x01
    df06:	9a 81       	ldd	r25, Y+2	; 0x02
    df08:	0e 94 ad 56 	call	0xad5a	; 0xad5a <eeprom_read32int>
    df0c:	dc 01       	movw	r26, r24
    df0e:	cb 01       	movw	r24, r22
}
    df10:	bc 01       	movw	r22, r24
    df12:	cd 01       	movw	r24, r26
    df14:	22 96       	adiw	r28, 0x02	; 2
    df16:	0f b6       	in	r0, 0x3f	; 63
    df18:	f8 94       	cli
    df1a:	de bf       	out	0x3e, r29	; 62
    df1c:	0f be       	out	0x3f, r0	; 63
    df1e:	cd bf       	out	0x3d, r28	; 61
    df20:	df 91       	pop	r29
    df22:	cf 91       	pop	r28
    df24:	08 95       	ret

0000df26 <write8uint>:



void  write8uint (uint16_t addr, uint8_t value) {
    df26:	cf 93       	push	r28
    df28:	df 93       	push	r29
    df2a:	cd b7       	in	r28, 0x3d	; 61
    df2c:	de b7       	in	r29, 0x3e	; 62
    df2e:	23 97       	sbiw	r28, 0x03	; 3
    df30:	0f b6       	in	r0, 0x3f	; 63
    df32:	f8 94       	cli
    df34:	de bf       	out	0x3e, r29	; 62
    df36:	0f be       	out	0x3f, r0	; 63
    df38:	cd bf       	out	0x3d, r28	; 61
    df3a:	9a 83       	std	Y+2, r25	; 0x02
    df3c:	89 83       	std	Y+1, r24	; 0x01
    df3e:	6b 83       	std	Y+3, r22	; 0x03
	      eeprom_write8uint(addr, value); 
    df40:	89 81       	ldd	r24, Y+1	; 0x01
    df42:	9a 81       	ldd	r25, Y+2	; 0x02
    df44:	6b 81       	ldd	r22, Y+3	; 0x03
    df46:	0e 94 76 55 	call	0xaaec	; 0xaaec <eeprom_write8uint>
    df4a:	23 96       	adiw	r28, 0x03	; 3
    df4c:	0f b6       	in	r0, 0x3f	; 63
    df4e:	f8 94       	cli
    df50:	de bf       	out	0x3e, r29	; 62
    df52:	0f be       	out	0x3f, r0	; 63
    df54:	cd bf       	out	0x3d, r28	; 61
    df56:	df 91       	pop	r29
    df58:	cf 91       	pop	r28
    df5a:	08 95       	ret

0000df5c <write8int>:
}


void  write8int  (uint16_t addr, int8_t value)  {
    df5c:	cf 93       	push	r28
    df5e:	df 93       	push	r29
    df60:	cd b7       	in	r28, 0x3d	; 61
    df62:	de b7       	in	r29, 0x3e	; 62
    df64:	23 97       	sbiw	r28, 0x03	; 3
    df66:	0f b6       	in	r0, 0x3f	; 63
    df68:	f8 94       	cli
    df6a:	de bf       	out	0x3e, r29	; 62
    df6c:	0f be       	out	0x3f, r0	; 63
    df6e:	cd bf       	out	0x3d, r28	; 61
    df70:	9a 83       	std	Y+2, r25	; 0x02
    df72:	89 83       	std	Y+1, r24	; 0x01
    df74:	6b 83       	std	Y+3, r22	; 0x03
	      eeprom_write8int(addr, value); 
    df76:	89 81       	ldd	r24, Y+1	; 0x01
    df78:	9a 81       	ldd	r25, Y+2	; 0x02
    df7a:	6b 81       	ldd	r22, Y+3	; 0x03
    df7c:	0e 94 a8 55 	call	0xab50	; 0xab50 <eeprom_write8int>
    df80:	23 96       	adiw	r28, 0x03	; 3
    df82:	0f b6       	in	r0, 0x3f	; 63
    df84:	f8 94       	cli
    df86:	de bf       	out	0x3e, r29	; 62
    df88:	0f be       	out	0x3f, r0	; 63
    df8a:	cd bf       	out	0x3d, r28	; 61
    df8c:	df 91       	pop	r29
    df8e:	cf 91       	pop	r28
    df90:	08 95       	ret

0000df92 <write16uint>:
}

void  write16uint(uint16_t addr, uint16_t value) {
    df92:	cf 93       	push	r28
    df94:	df 93       	push	r29
    df96:	cd b7       	in	r28, 0x3d	; 61
    df98:	de b7       	in	r29, 0x3e	; 62
    df9a:	24 97       	sbiw	r28, 0x04	; 4
    df9c:	0f b6       	in	r0, 0x3f	; 63
    df9e:	f8 94       	cli
    dfa0:	de bf       	out	0x3e, r29	; 62
    dfa2:	0f be       	out	0x3f, r0	; 63
    dfa4:	cd bf       	out	0x3d, r28	; 61
    dfa6:	9a 83       	std	Y+2, r25	; 0x02
    dfa8:	89 83       	std	Y+1, r24	; 0x01
    dfaa:	7c 83       	std	Y+4, r23	; 0x04
    dfac:	6b 83       	std	Y+3, r22	; 0x03
	      eeprom_write16uint(addr, value); 
    dfae:	8b 81       	ldd	r24, Y+3	; 0x03
    dfb0:	9c 81       	ldd	r25, Y+4	; 0x04
    dfb2:	29 81       	ldd	r18, Y+1	; 0x01
    dfb4:	3a 81       	ldd	r19, Y+2	; 0x02
    dfb6:	bc 01       	movw	r22, r24
    dfb8:	c9 01       	movw	r24, r18
    dfba:	0e 94 de 55 	call	0xabbc	; 0xabbc <eeprom_write16uint>
    dfbe:	24 96       	adiw	r28, 0x04	; 4
    dfc0:	0f b6       	in	r0, 0x3f	; 63
    dfc2:	f8 94       	cli
    dfc4:	de bf       	out	0x3e, r29	; 62
    dfc6:	0f be       	out	0x3f, r0	; 63
    dfc8:	cd bf       	out	0x3d, r28	; 61
    dfca:	df 91       	pop	r29
    dfcc:	cf 91       	pop	r28
    dfce:	08 95       	ret

0000dfd0 <write16int>:
}

void  write16int (uint16_t addr, int16_t value) {
    dfd0:	cf 93       	push	r28
    dfd2:	df 93       	push	r29
    dfd4:	cd b7       	in	r28, 0x3d	; 61
    dfd6:	de b7       	in	r29, 0x3e	; 62
    dfd8:	24 97       	sbiw	r28, 0x04	; 4
    dfda:	0f b6       	in	r0, 0x3f	; 63
    dfdc:	f8 94       	cli
    dfde:	de bf       	out	0x3e, r29	; 62
    dfe0:	0f be       	out	0x3f, r0	; 63
    dfe2:	cd bf       	out	0x3d, r28	; 61
    dfe4:	9a 83       	std	Y+2, r25	; 0x02
    dfe6:	89 83       	std	Y+1, r24	; 0x01
    dfe8:	7c 83       	std	Y+4, r23	; 0x04
    dfea:	6b 83       	std	Y+3, r22	; 0x03
	      eeprom_write16int(addr, value); 
    dfec:	8b 81       	ldd	r24, Y+3	; 0x03
    dfee:	9c 81       	ldd	r25, Y+4	; 0x04
    dff0:	29 81       	ldd	r18, Y+1	; 0x01
    dff2:	3a 81       	ldd	r19, Y+2	; 0x02
    dff4:	bc 01       	movw	r22, r24
    dff6:	c9 01       	movw	r24, r18
    dff8:	0e 94 14 56 	call	0xac28	; 0xac28 <eeprom_write16int>
    dffc:	24 96       	adiw	r28, 0x04	; 4
    dffe:	0f b6       	in	r0, 0x3f	; 63
    e000:	f8 94       	cli
    e002:	de bf       	out	0x3e, r29	; 62
    e004:	0f be       	out	0x3f, r0	; 63
    e006:	cd bf       	out	0x3d, r28	; 61
    e008:	df 91       	pop	r29
    e00a:	cf 91       	pop	r28
    e00c:	08 95       	ret

0000e00e <write32uint>:
}

void  write32uint(uint16_t addr, uint32_t value) {
    e00e:	cf 93       	push	r28
    e010:	df 93       	push	r29
    e012:	cd b7       	in	r28, 0x3d	; 61
    e014:	de b7       	in	r29, 0x3e	; 62
    e016:	26 97       	sbiw	r28, 0x06	; 6
    e018:	0f b6       	in	r0, 0x3f	; 63
    e01a:	f8 94       	cli
    e01c:	de bf       	out	0x3e, r29	; 62
    e01e:	0f be       	out	0x3f, r0	; 63
    e020:	cd bf       	out	0x3d, r28	; 61
    e022:	9a 83       	std	Y+2, r25	; 0x02
    e024:	89 83       	std	Y+1, r24	; 0x01
    e026:	4b 83       	std	Y+3, r20	; 0x03
    e028:	5c 83       	std	Y+4, r21	; 0x04
    e02a:	6d 83       	std	Y+5, r22	; 0x05
    e02c:	7e 83       	std	Y+6, r23	; 0x06
	      eeprom_write32uint(addr, value); 
    e02e:	8b 81       	ldd	r24, Y+3	; 0x03
    e030:	9c 81       	ldd	r25, Y+4	; 0x04
    e032:	ad 81       	ldd	r26, Y+5	; 0x05
    e034:	be 81       	ldd	r27, Y+6	; 0x06
    e036:	29 81       	ldd	r18, Y+1	; 0x01
    e038:	3a 81       	ldd	r19, Y+2	; 0x02
    e03a:	ac 01       	movw	r20, r24
    e03c:	bd 01       	movw	r22, r26
    e03e:	c9 01       	movw	r24, r18
    e040:	0e 94 14 57 	call	0xae28	; 0xae28 <eeprom_write32uint>
    e044:	26 96       	adiw	r28, 0x06	; 6
    e046:	0f b6       	in	r0, 0x3f	; 63
    e048:	f8 94       	cli
    e04a:	de bf       	out	0x3e, r29	; 62
    e04c:	0f be       	out	0x3f, r0	; 63
    e04e:	cd bf       	out	0x3d, r28	; 61
    e050:	df 91       	pop	r29
    e052:	cf 91       	pop	r28
    e054:	08 95       	ret

0000e056 <write32int>:
}

void  write32int (uint16_t addr, int32_t value)  {
    e056:	cf 93       	push	r28
    e058:	df 93       	push	r29
    e05a:	cd b7       	in	r28, 0x3d	; 61
    e05c:	de b7       	in	r29, 0x3e	; 62
    e05e:	26 97       	sbiw	r28, 0x06	; 6
    e060:	0f b6       	in	r0, 0x3f	; 63
    e062:	f8 94       	cli
    e064:	de bf       	out	0x3e, r29	; 62
    e066:	0f be       	out	0x3f, r0	; 63
    e068:	cd bf       	out	0x3d, r28	; 61
    e06a:	9a 83       	std	Y+2, r25	; 0x02
    e06c:	89 83       	std	Y+1, r24	; 0x01
    e06e:	4b 83       	std	Y+3, r20	; 0x03
    e070:	5c 83       	std	Y+4, r21	; 0x04
    e072:	6d 83       	std	Y+5, r22	; 0x05
    e074:	7e 83       	std	Y+6, r23	; 0x06
	      eeprom_write32int(addr, value); 
    e076:	8b 81       	ldd	r24, Y+3	; 0x03
    e078:	9c 81       	ldd	r25, Y+4	; 0x04
    e07a:	ad 81       	ldd	r26, Y+5	; 0x05
    e07c:	be 81       	ldd	r27, Y+6	; 0x06
    e07e:	29 81       	ldd	r18, Y+1	; 0x01
    e080:	3a 81       	ldd	r19, Y+2	; 0x02
    e082:	ac 01       	movw	r20, r24
    e084:	bd 01       	movw	r22, r26
    e086:	c9 01       	movw	r24, r18
    e088:	0e 94 77 57 	call	0xaeee	; 0xaeee <eeprom_write32int>
    e08c:	26 96       	adiw	r28, 0x06	; 6
    e08e:	0f b6       	in	r0, 0x3f	; 63
    e090:	f8 94       	cli
    e092:	de bf       	out	0x3e, r29	; 62
    e094:	0f be       	out	0x3f, r0	; 63
    e096:	cd bf       	out	0x3d, r28	; 61
    e098:	df 91       	pop	r29
    e09a:	cf 91       	pop	r28
    e09c:	08 95       	ret

0000e09e <reply_devicehandling>:
static uint16_t kernelramsize = 2275; 

//-------------------------------------------------------------------------

void reply_devicehandling( uint8_t *receivebuffer ) {
    e09e:	cf 93       	push	r28
    e0a0:	df 93       	push	r29
    e0a2:	cd b7       	in	r28, 0x3d	; 61
    e0a4:	de b7       	in	r29, 0x3e	; 62
    e0a6:	62 97       	sbiw	r28, 0x12	; 18
    e0a8:	0f b6       	in	r0, 0x3f	; 63
    e0aa:	f8 94       	cli
    e0ac:	de bf       	out	0x3e, r29	; 62
    e0ae:	0f be       	out	0x3f, r0	; 63
    e0b0:	cd bf       	out	0x3d, r28	; 61
    e0b2:	9a 8b       	std	Y+18, r25	; 0x12
    e0b4:	89 8b       	std	Y+17, r24	; 0x11
   //the coming receive buffer is organized as follows
   //byte 0: the length
   //byte 1: the type 11
   //byte 2: the nodeid
   //byte 3: the block id
   //byte 4: the length of the name of the file dev
   //byte 5-- :
   //byte 10: the length of the parameters
   //parameters. for "" type, use " to decide. Otherwise it is 10 etc encoded
   //here it finds the block fo the dev, put the parameters into the buffer, call the task, and loop until the task finishes
   
   uint8_t newblockid, blockid;
   uint8_t *ramstart;
   uint16_t *ramreturn;
   uint8_t paramlength;
   uint8_t paramindex;
   uint8_t countparam;
   uint8_t i;
   void( *entryfunc )( void );
   uint8_t looproundcount;
   uint8_t loopcycle;
   uint16_t returnval;
   
   paramindex = 0;
    e0b6:	19 86       	std	Y+9, r1	; 0x09
   looproundcount = loopcycle = 0;
    e0b8:	1b 82       	std	Y+3, r1	; 0x03
    e0ba:	8b 81       	ldd	r24, Y+3	; 0x03
    e0bc:	8c 83       	std	Y+4, r24	; 0x04
   countparam = 0;
    e0be:	18 86       	std	Y+8, r1	; 0x08
   blockid = receivebuffer[ 3 ];
    e0c0:	89 89       	ldd	r24, Y+17	; 0x11
    e0c2:	9a 89       	ldd	r25, Y+18	; 0x12
    e0c4:	fc 01       	movw	r30, r24
    e0c6:	33 96       	adiw	r30, 0x03	; 3
    e0c8:	80 81       	ld	r24, Z
    e0ca:	8f 87       	std	Y+15, r24	; 0x0f
   
   mystrncpy( (char *)filename, ( char* )& receivebuffer[ 5 ], receivebuffer[ 4 ] );
    e0cc:	89 89       	ldd	r24, Y+17	; 0x11
    e0ce:	9a 89       	ldd	r25, Y+18	; 0x12
    e0d0:	fc 01       	movw	r30, r24
    e0d2:	34 96       	adiw	r30, 0x04	; 4
    e0d4:	40 81       	ld	r20, Z
    e0d6:	89 89       	ldd	r24, Y+17	; 0x11
    e0d8:	9a 89       	ldd	r25, Y+18	; 0x12
    e0da:	05 96       	adiw	r24, 0x05	; 5
    e0dc:	20 ee       	ldi	r18, 0xE0	; 224
    e0de:	36 e0       	ldi	r19, 0x06	; 6
    e0e0:	bc 01       	movw	r22, r24
    e0e2:	c9 01       	movw	r24, r18
    e0e4:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
   filename[ receivebuffer[ 4] ] = 0;
    e0e8:	89 89       	ldd	r24, Y+17	; 0x11
    e0ea:	9a 89       	ldd	r25, Y+18	; 0x12
    e0ec:	fc 01       	movw	r30, r24
    e0ee:	34 96       	adiw	r30, 0x04	; 4
    e0f0:	80 81       	ld	r24, Z
    e0f2:	99 27       	eor	r25, r25
    e0f4:	fc 01       	movw	r30, r24
    e0f6:	e0 52       	subi	r30, 0x20	; 32
    e0f8:	f9 4f       	sbci	r31, 0xF9	; 249
    e0fa:	10 82       	st	Z, r1
   newblockid = existBlockAddr( filename, ( int )blockid );
    e0fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    e0fe:	99 27       	eor	r25, r25
    e100:	20 ee       	ldi	r18, 0xE0	; 224
    e102:	36 e0       	ldi	r19, 0x06	; 6
    e104:	bc 01       	movw	r22, r24
    e106:	c9 01       	movw	r24, r18
    e108:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <existBlockAddr>
    e10c:	88 8b       	std	Y+16, r24	; 0x10
   //the total length of the param length, including the length field itself 
   paramlength = receivebuffer[ 5+receivebuffer[ 4] ];
    e10e:	89 89       	ldd	r24, Y+17	; 0x11
    e110:	9a 89       	ldd	r25, Y+18	; 0x12
    e112:	fc 01       	movw	r30, r24
    e114:	34 96       	adiw	r30, 0x04	; 4
    e116:	80 81       	ld	r24, Z
    e118:	99 27       	eor	r25, r25
    e11a:	9c 01       	movw	r18, r24
    e11c:	89 89       	ldd	r24, Y+17	; 0x11
    e11e:	9a 89       	ldd	r25, Y+18	; 0x12
    e120:	82 0f       	add	r24, r18
    e122:	93 1f       	adc	r25, r19
    e124:	fc 01       	movw	r30, r24
    e126:	35 96       	adiw	r30, 0x05	; 5
    e128:	80 81       	ld	r24, Z
    e12a:	8a 87       	std	Y+10, r24	; 0x0a
   //the start position of the parameters
   paramindex = 5+receivebuffer[ 4 ] + 1;
    e12c:	89 89       	ldd	r24, Y+17	; 0x11
    e12e:	9a 89       	ldd	r25, Y+18	; 0x12
    e130:	fc 01       	movw	r30, r24
    e132:	34 96       	adiw	r30, 0x04	; 4
    e134:	80 81       	ld	r24, Z
    e136:	8a 5f       	subi	r24, 0xFA	; 250
    e138:	89 87       	std	Y+9, r24	; 0x09
   if ( newblockid == 0 ) {
    e13a:	88 89       	ldd	r24, Y+16	; 0x10
    e13c:	88 23       	and	r24, r24
    e13e:	b9 f4       	brne	.+46     	; 0xe16e <reply_devicehandling+0xd0>
      reply[ 0 ] = 3;
    e140:	83 e0       	ldi	r24, 0x03	; 3
    e142:	80 93 ed 06 	sts	0x06ED, r24
      reply[ 1 ] = 10;
    e146:	8a e0       	ldi	r24, 0x0A	; 10
    e148:	80 93 ee 06 	sts	0x06EE, r24
      reply[ 2 ] = nodeid;
    e14c:	80 91 5b 07 	lds	r24, 0x075B
    e150:	90 91 5c 07 	lds	r25, 0x075C
    e154:	80 93 ef 06 	sts	0x06EF, r24
      StandardSocketSend( 0xefef, 0xffff, 32, reply );
    e158:	8d ee       	ldi	r24, 0xED	; 237
    e15a:	96 e0       	ldi	r25, 0x06	; 6
    e15c:	9c 01       	movw	r18, r24
    e15e:	40 e2       	ldi	r20, 0x20	; 32
    e160:	6f ef       	ldi	r22, 0xFF	; 255
    e162:	7f ef       	ldi	r23, 0xFF	; 255
    e164:	8f ee       	ldi	r24, 0xEF	; 239
    e166:	9f ee       	ldi	r25, 0xEF	; 239
    e168:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
      return ;
    e16c:	c3 c0       	rjmp	.+390    	; 0xe2f4 <reply_devicehandling+0x256>
   }
   for ( i = 0; i < paramlength; i ++ ) {
    e16e:	1f 82       	std	Y+7, r1	; 0x07
    e170:	16 c0       	rjmp	.+44     	; 0xe19e <reply_devicehandling+0x100>
      if ( receivebuffer[ paramindex + i ] != 34 ) {
    e172:	89 85       	ldd	r24, Y+9	; 0x09
    e174:	28 2f       	mov	r18, r24
    e176:	33 27       	eor	r19, r19
    e178:	8f 81       	ldd	r24, Y+7	; 0x07
    e17a:	99 27       	eor	r25, r25
    e17c:	82 0f       	add	r24, r18
    e17e:	93 1f       	adc	r25, r19
    e180:	9c 01       	movw	r18, r24
    e182:	89 89       	ldd	r24, Y+17	; 0x11
    e184:	9a 89       	ldd	r25, Y+18	; 0x12
    e186:	f9 01       	movw	r30, r18
    e188:	e8 0f       	add	r30, r24
    e18a:	f9 1f       	adc	r31, r25
    e18c:	80 81       	ld	r24, Z
    e18e:	82 32       	cpi	r24, 0x22	; 34
    e190:	51 f0       	breq	.+20     	; 0xe1a6 <reply_devicehandling+0x108>
         countparam ++;
    e192:	88 85       	ldd	r24, Y+8	; 0x08
    e194:	8f 5f       	subi	r24, 0xFF	; 255
    e196:	88 87       	std	Y+8, r24	; 0x08
    e198:	8f 81       	ldd	r24, Y+7	; 0x07
    e19a:	8f 5f       	subi	r24, 0xFF	; 255
    e19c:	8f 83       	std	Y+7, r24	; 0x07
    e19e:	9f 81       	ldd	r25, Y+7	; 0x07
    e1a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    e1a2:	98 17       	cp	r25, r24
    e1a4:	30 f3       	brcs	.-52     	; 0xe172 <reply_devicehandling+0xd4>
      } else {
         break;
      } 
   }
   if ( countparam >= 1 ) {
    e1a6:	88 85       	ldd	r24, Y+8	; 0x08
    e1a8:	88 23       	and	r24, r24
    e1aa:	51 f0       	breq	.+20     	; 0xe1c0 <reply_devicehandling+0x122>
      looproundcount = receivebuffer[ paramindex ];
    e1ac:	89 85       	ldd	r24, Y+9	; 0x09
    e1ae:	99 27       	eor	r25, r25
    e1b0:	9c 01       	movw	r18, r24
    e1b2:	89 89       	ldd	r24, Y+17	; 0x11
    e1b4:	9a 89       	ldd	r25, Y+18	; 0x12
    e1b6:	f9 01       	movw	r30, r18
    e1b8:	e8 0f       	add	r30, r24
    e1ba:	f9 1f       	adc	r31, r25
    e1bc:	80 81       	ld	r24, Z
    e1be:	8c 83       	std	Y+4, r24	; 0x04
   } 
   if ( countparam >= 2 ) {
    e1c0:	88 85       	ldd	r24, Y+8	; 0x08
    e1c2:	82 30       	cpi	r24, 0x02	; 2
    e1c4:	58 f0       	brcs	.+22     	; 0xe1dc <reply_devicehandling+0x13e>
      loopcycle = receivebuffer[ paramindex + 1 ];
    e1c6:	89 85       	ldd	r24, Y+9	; 0x09
    e1c8:	99 27       	eor	r25, r25
    e1ca:	9c 01       	movw	r18, r24
    e1cc:	89 89       	ldd	r24, Y+17	; 0x11
    e1ce:	9a 89       	ldd	r25, Y+18	; 0x12
    e1d0:	82 0f       	add	r24, r18
    e1d2:	93 1f       	adc	r25, r19
    e1d4:	fc 01       	movw	r30, r24
    e1d6:	31 96       	adiw	r30, 0x01	; 1
    e1d8:	80 81       	ld	r24, Z
    e1da:	8b 83       	std	Y+3, r24	; 0x03
   } 
   ramstart = ( uint8_t* )fsread16uint( newblockid, DEV_PROGRAMENTRYOFFSET + 2 );
    e1dc:	88 89       	ldd	r24, Y+16	; 0x10
    e1de:	99 27       	eor	r25, r25
    e1e0:	60 e1       	ldi	r22, 0x10	; 16
    e1e2:	70 e0       	ldi	r23, 0x00	; 0
    e1e4:	0e 94 84 0c 	call	0x1908	; 0x1908 <fsread16uint>
    e1e8:	9e 87       	std	Y+14, r25	; 0x0e
    e1ea:	8d 87       	std	Y+13, r24	; 0x0d
   if ( paramlength > 2 ) {
    e1ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    e1ee:	83 30       	cpi	r24, 0x03	; 3
    e1f0:	58 f1       	brcs	.+86     	; 0xe248 <reply_devicehandling+0x1aa>
      mystrncpy(( char* )ramstart, ( char* )& receivebuffer[ paramindex + countparam + 1 ], paramlength - countparam - 2 );
    e1f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    e1f4:	88 85       	ldd	r24, Y+8	; 0x08
    e1f6:	29 2f       	mov	r18, r25
    e1f8:	28 1b       	sub	r18, r24
    e1fa:	82 2f       	mov	r24, r18
    e1fc:	48 2f       	mov	r20, r24
    e1fe:	42 50       	subi	r20, 0x02	; 2
    e200:	89 85       	ldd	r24, Y+9	; 0x09
    e202:	28 2f       	mov	r18, r24
    e204:	33 27       	eor	r19, r19
    e206:	88 85       	ldd	r24, Y+8	; 0x08
    e208:	99 27       	eor	r25, r25
    e20a:	82 0f       	add	r24, r18
    e20c:	93 1f       	adc	r25, r19
    e20e:	9c 01       	movw	r18, r24
    e210:	89 89       	ldd	r24, Y+17	; 0x11
    e212:	9a 89       	ldd	r25, Y+18	; 0x12
    e214:	82 0f       	add	r24, r18
    e216:	93 1f       	adc	r25, r19
    e218:	01 96       	adiw	r24, 0x01	; 1
    e21a:	2d 85       	ldd	r18, Y+13	; 0x0d
    e21c:	3e 85       	ldd	r19, Y+14	; 0x0e
    e21e:	bc 01       	movw	r22, r24
    e220:	c9 01       	movw	r24, r18
    e222:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
      ramstart[ paramlength - countparam - 1 ] = '\0';
    e226:	8a 85       	ldd	r24, Y+10	; 0x0a
    e228:	28 2f       	mov	r18, r24
    e22a:	33 27       	eor	r19, r19
    e22c:	88 85       	ldd	r24, Y+8	; 0x08
    e22e:	99 27       	eor	r25, r25
    e230:	a9 01       	movw	r20, r18
    e232:	48 1b       	sub	r20, r24
    e234:	59 0b       	sbc	r21, r25
    e236:	ca 01       	movw	r24, r20
    e238:	9c 01       	movw	r18, r24
    e23a:	8d 85       	ldd	r24, Y+13	; 0x0d
    e23c:	9e 85       	ldd	r25, Y+14	; 0x0e
    e23e:	82 0f       	add	r24, r18
    e240:	93 1f       	adc	r25, r19
    e242:	fc 01       	movw	r30, r24
    e244:	31 97       	sbiw	r30, 0x01	; 1
    e246:	10 82       	st	Z, r1
   }
   ramreturn = ( uint16_t* )fsread16uint( newblockid, DEV_PROGRAMENTRYOFFSET + 4 );
    e248:	88 89       	ldd	r24, Y+16	; 0x10
    e24a:	99 27       	eor	r25, r25
    e24c:	62 e1       	ldi	r22, 0x12	; 18
    e24e:	70 e0       	ldi	r23, 0x00	; 0
    e250:	0e 94 84 0c 	call	0x1908	; 0x1908 <fsread16uint>
    e254:	9c 87       	std	Y+12, r25	; 0x0c
    e256:	8b 87       	std	Y+11, r24	; 0x0b
   entryfunc = ( void( * )( void ))fsread16uint( newblockid, DEV_PROGRAMENTRYOFFSET );
    e258:	88 89       	ldd	r24, Y+16	; 0x10
    e25a:	99 27       	eor	r25, r25
    e25c:	6e e0       	ldi	r22, 0x0E	; 14
    e25e:	70 e0       	ldi	r23, 0x00	; 0
    e260:	0e 94 84 0c 	call	0x1908	; 0x1908 <fsread16uint>
    e264:	9e 83       	std	Y+6, r25	; 0x06
    e266:	8d 83       	std	Y+5, r24	; 0x05
   
   if ( looproundcount == 0 ) {
    e268:	8c 81       	ldd	r24, Y+4	; 0x04
    e26a:	88 23       	and	r24, r24
    e26c:	11 f4       	brne	.+4      	; 0xe272 <reply_devicehandling+0x1d4>
      looproundcount = 1;
    e26e:	81 e0       	ldi	r24, 0x01	; 1
    e270:	8c 83       	std	Y+4, r24	; 0x04
   } 
   for ( i = 0; i < looproundcount; i ++ ) {
    e272:	1f 82       	std	Y+7, r1	; 0x07
    e274:	3b c0       	rjmp	.+118    	; 0xe2ec <reply_devicehandling+0x24e>
      entryfunc();
    e276:	ed 81       	ldd	r30, Y+5	; 0x05
    e278:	fe 81       	ldd	r31, Y+6	; 0x06
    e27a:	09 95       	icall
      returnval =  *ramreturn;
    e27c:	eb 85       	ldd	r30, Y+11	; 0x0b
    e27e:	fc 85       	ldd	r31, Y+12	; 0x0c
    e280:	80 81       	ld	r24, Z
    e282:	91 81       	ldd	r25, Z+1	; 0x01
    e284:	9a 83       	std	Y+2, r25	; 0x02
    e286:	89 83       	std	Y+1, r24	; 0x01
      reply[ 0 ] = 5;
    e288:	85 e0       	ldi	r24, 0x05	; 5
    e28a:	80 93 ed 06 	sts	0x06ED, r24
      reply[ 1 ] = 12;
    e28e:	8c e0       	ldi	r24, 0x0C	; 12
    e290:	80 93 ee 06 	sts	0x06EE, r24
      if ( i == looproundcount - 1 ) {
    e294:	8f 81       	ldd	r24, Y+7	; 0x07
    e296:	28 2f       	mov	r18, r24
    e298:	33 27       	eor	r19, r19
    e29a:	8c 81       	ldd	r24, Y+4	; 0x04
    e29c:	99 27       	eor	r25, r25
    e29e:	01 97       	sbiw	r24, 0x01	; 1
    e2a0:	28 17       	cp	r18, r24
    e2a2:	39 07       	cpc	r19, r25
    e2a4:	19 f4       	brne	.+6      	; 0xe2ac <reply_devicehandling+0x20e>
         reply[ 1 ] = 11;
    e2a6:	8b e0       	ldi	r24, 0x0B	; 11
    e2a8:	80 93 ee 06 	sts	0x06EE, r24
      } reply[ 2 ] = nodeid;
    e2ac:	80 91 5b 07 	lds	r24, 0x075B
    e2b0:	90 91 5c 07 	lds	r25, 0x075C
    e2b4:	80 93 ef 06 	sts	0x06EF, r24
      reply[ 3 ] = returnval / 256;
    e2b8:	89 81       	ldd	r24, Y+1	; 0x01
    e2ba:	9a 81       	ldd	r25, Y+2	; 0x02
    e2bc:	89 2f       	mov	r24, r25
    e2be:	99 27       	eor	r25, r25
    e2c0:	80 93 f0 06 	sts	0x06F0, r24
      reply[ 4 ] = returnval % 256;
    e2c4:	89 81       	ldd	r24, Y+1	; 0x01
    e2c6:	80 93 f1 06 	sts	0x06F1, r24
      StandardSocketSend( 0xefef, 0xffff, 32, reply );
    e2ca:	8d ee       	ldi	r24, 0xED	; 237
    e2cc:	96 e0       	ldi	r25, 0x06	; 6
    e2ce:	9c 01       	movw	r18, r24
    e2d0:	40 e2       	ldi	r20, 0x20	; 32
    e2d2:	6f ef       	ldi	r22, 0xFF	; 255
    e2d4:	7f ef       	ldi	r23, 0xFF	; 255
    e2d6:	8f ee       	ldi	r24, 0xEF	; 239
    e2d8:	9f ee       	ldi	r25, 0xEF	; 239
    e2da:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
      sleepThread( loopcycle );
    e2de:	8b 81       	ldd	r24, Y+3	; 0x03
    e2e0:	99 27       	eor	r25, r25
    e2e2:	0e 94 f9 93 	call	0x127f2	; 0x127f2 <sleepThread>
    e2e6:	8f 81       	ldd	r24, Y+7	; 0x07
    e2e8:	8f 5f       	subi	r24, 0xFF	; 255
    e2ea:	8f 83       	std	Y+7, r24	; 0x07
    e2ec:	9f 81       	ldd	r25, Y+7	; 0x07
    e2ee:	8c 81       	ldd	r24, Y+4	; 0x04
    e2f0:	98 17       	cp	r25, r24
    e2f2:	08 f2       	brcs	.-126    	; 0xe276 <reply_devicehandling+0x1d8>
    e2f4:	62 96       	adiw	r28, 0x12	; 18
    e2f6:	0f b6       	in	r0, 0x3f	; 63
    e2f8:	f8 94       	cli
    e2fa:	de bf       	out	0x3e, r29	; 62
    e2fc:	0f be       	out	0x3f, r0	; 63
    e2fe:	cd bf       	out	0x3d, r28	; 61
    e300:	df 91       	pop	r29
    e302:	cf 91       	pop	r28
    e304:	08 95       	ret

0000e306 <reply_led_control>:
   }
}


//This could be avr specific, but assuming that most devices have led one type or another. 

//-------------------------------------------------------------------------
void reply_led_control( uint8_t *receivebuffer ) {
    e306:	cf 93       	push	r28
    e308:	df 93       	push	r29
    e30a:	cd b7       	in	r28, 0x3d	; 61
    e30c:	de b7       	in	r29, 0x3e	; 62
    e30e:	28 97       	sbiw	r28, 0x08	; 8
    e310:	0f b6       	in	r0, 0x3f	; 63
    e312:	f8 94       	cli
    e314:	de bf       	out	0x3e, r29	; 62
    e316:	0f be       	out	0x3f, r0	; 63
    e318:	cd bf       	out	0x3d, r28	; 61
    e31a:	98 87       	std	Y+8, r25	; 0x08
    e31c:	8f 83       	std	Y+7, r24	; 0x07
   //the coming receive buffer is organized as follows
   //byte 0: the length
   //byte 1: the type 12
   //byte 2: the nodeid
   //byte 3: the block id
   //byte 4: red
   //byte 5: green
   //byte 6: yellow
   uint8_t newblockid, blockid;
   uint8_t *ramstart;
   void( *entryfunc )( void );
   blockid = receivebuffer[ 3 ];
    e31e:	8f 81       	ldd	r24, Y+7	; 0x07
    e320:	98 85       	ldd	r25, Y+8	; 0x08
    e322:	fc 01       	movw	r30, r24
    e324:	33 96       	adiw	r30, 0x03	; 3
    e326:	80 81       	ld	r24, Z
    e328:	8d 83       	std	Y+5, r24	; 0x05
   newblockid = existBlockAddr( "led", ( int )blockid );
    e32a:	8d 81       	ldd	r24, Y+5	; 0x05
    e32c:	99 27       	eor	r25, r25
    e32e:	2a e6       	ldi	r18, 0x6A	; 106
    e330:	31 e0       	ldi	r19, 0x01	; 1
    e332:	bc 01       	movw	r22, r24
    e334:	c9 01       	movw	r24, r18
    e336:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <existBlockAddr>
    e33a:	8e 83       	std	Y+6, r24	; 0x06
   ramstart = ( uint8_t* )fsread16uint( newblockid, DEV_PROGRAMENTRYOFFSET + 2 );
    e33c:	8e 81       	ldd	r24, Y+6	; 0x06
    e33e:	99 27       	eor	r25, r25
    e340:	60 e1       	ldi	r22, 0x10	; 16
    e342:	70 e0       	ldi	r23, 0x00	; 0
    e344:	0e 94 84 0c 	call	0x1908	; 0x1908 <fsread16uint>
    e348:	9c 83       	std	Y+4, r25	; 0x04
    e34a:	8b 83       	std	Y+3, r24	; 0x03
   ramstart[ 0 ] = receivebuffer[ 4 ];
    e34c:	8f 81       	ldd	r24, Y+7	; 0x07
    e34e:	98 85       	ldd	r25, Y+8	; 0x08
    e350:	fc 01       	movw	r30, r24
    e352:	34 96       	adiw	r30, 0x04	; 4
    e354:	80 81       	ld	r24, Z
    e356:	eb 81       	ldd	r30, Y+3	; 0x03
    e358:	fc 81       	ldd	r31, Y+4	; 0x04
    e35a:	80 83       	st	Z, r24
   ramstart[ 1 ] = receivebuffer[ 5 ];
    e35c:	8b 81       	ldd	r24, Y+3	; 0x03
    e35e:	9c 81       	ldd	r25, Y+4	; 0x04
    e360:	dc 01       	movw	r26, r24
    e362:	11 96       	adiw	r26, 0x01	; 1
    e364:	8f 81       	ldd	r24, Y+7	; 0x07
    e366:	98 85       	ldd	r25, Y+8	; 0x08
    e368:	fc 01       	movw	r30, r24
    e36a:	35 96       	adiw	r30, 0x05	; 5
    e36c:	80 81       	ld	r24, Z
    e36e:	8c 93       	st	X, r24
   ramstart[ 2 ] = receivebuffer[ 6 ];
    e370:	8b 81       	ldd	r24, Y+3	; 0x03
    e372:	9c 81       	ldd	r25, Y+4	; 0x04
    e374:	dc 01       	movw	r26, r24
    e376:	12 96       	adiw	r26, 0x02	; 2
    e378:	8f 81       	ldd	r24, Y+7	; 0x07
    e37a:	98 85       	ldd	r25, Y+8	; 0x08
    e37c:	fc 01       	movw	r30, r24
    e37e:	36 96       	adiw	r30, 0x06	; 6
    e380:	80 81       	ld	r24, Z
    e382:	8c 93       	st	X, r24
   entryfunc = ( void( * )( void ))fsread16uint( newblockid, DEV_PROGRAMENTRYOFFSET );
    e384:	8e 81       	ldd	r24, Y+6	; 0x06
    e386:	99 27       	eor	r25, r25
    e388:	6e e0       	ldi	r22, 0x0E	; 14
    e38a:	70 e0       	ldi	r23, 0x00	; 0
    e38c:	0e 94 84 0c 	call	0x1908	; 0x1908 <fsread16uint>
    e390:	9a 83       	std	Y+2, r25	; 0x02
    e392:	89 83       	std	Y+1, r24	; 0x01
   entryfunc();
    e394:	e9 81       	ldd	r30, Y+1	; 0x01
    e396:	fa 81       	ldd	r31, Y+2	; 0x02
    e398:	09 95       	icall
    e39a:	28 96       	adiw	r28, 0x08	; 8
    e39c:	0f b6       	in	r0, 0x3f	; 63
    e39e:	f8 94       	cli
    e3a0:	de bf       	out	0x3e, r29	; 62
    e3a2:	0f be       	out	0x3f, r0	; 63
    e3a4:	cd bf       	out	0x3d, r28	; 61
    e3a6:	df 91       	pop	r29
    e3a8:	cf 91       	pop	r28
    e3aa:	08 95       	ret

0000e3ac <reply_debugging_print>:
   return ;
}


//-------------------------------------------------------------------------
//Note that this function should consider splitting a message into multiple pieces, if the requested memory chunk is too large 

void reply_debugging_print( uint8_t *receivebuffer ) { //This is the reply for the print command 
    e3ac:	cf 93       	push	r28
    e3ae:	df 93       	push	r29
    e3b0:	cd b7       	in	r28, 0x3d	; 61
    e3b2:	de b7       	in	r29, 0x3e	; 62
    e3b4:	28 97       	sbiw	r28, 0x08	; 8
    e3b6:	0f b6       	in	r0, 0x3f	; 63
    e3b8:	f8 94       	cli
    e3ba:	de bf       	out	0x3e, r29	; 62
    e3bc:	0f be       	out	0x3f, r0	; 63
    e3be:	cd bf       	out	0x3d, r28	; 61
    e3c0:	98 87       	std	Y+8, r25	; 0x08
    e3c2:	8f 83       	std	Y+7, r24	; 0x07
   uint16_t addr;
   uint16_t size;
   uint8_t chunkindex;
   uint8_t numOfChunks; 
   
   addr = ( uint16_t )receivebuffer[ 3 ] *256+receivebuffer[ 4 ];
    e3c4:	8f 81       	ldd	r24, Y+7	; 0x07
    e3c6:	98 85       	ldd	r25, Y+8	; 0x08
    e3c8:	fc 01       	movw	r30, r24
    e3ca:	33 96       	adiw	r30, 0x03	; 3
    e3cc:	80 81       	ld	r24, Z
    e3ce:	99 27       	eor	r25, r25
    e3d0:	38 2f       	mov	r19, r24
    e3d2:	22 27       	eor	r18, r18
    e3d4:	8f 81       	ldd	r24, Y+7	; 0x07
    e3d6:	98 85       	ldd	r25, Y+8	; 0x08
    e3d8:	fc 01       	movw	r30, r24
    e3da:	34 96       	adiw	r30, 0x04	; 4
    e3dc:	80 81       	ld	r24, Z
    e3de:	99 27       	eor	r25, r25
    e3e0:	82 0f       	add	r24, r18
    e3e2:	93 1f       	adc	r25, r19
    e3e4:	9e 83       	std	Y+6, r25	; 0x06
    e3e6:	8d 83       	std	Y+5, r24	; 0x05
   size =  (uint16_t)receivebuffer[ 5 ] * 256 + receivebuffer[6];
    e3e8:	8f 81       	ldd	r24, Y+7	; 0x07
    e3ea:	98 85       	ldd	r25, Y+8	; 0x08
    e3ec:	fc 01       	movw	r30, r24
    e3ee:	35 96       	adiw	r30, 0x05	; 5
    e3f0:	80 81       	ld	r24, Z
    e3f2:	99 27       	eor	r25, r25
    e3f4:	38 2f       	mov	r19, r24
    e3f6:	22 27       	eor	r18, r18
    e3f8:	8f 81       	ldd	r24, Y+7	; 0x07
    e3fa:	98 85       	ldd	r25, Y+8	; 0x08
    e3fc:	fc 01       	movw	r30, r24
    e3fe:	36 96       	adiw	r30, 0x06	; 6
    e400:	80 81       	ld	r24, Z
    e402:	99 27       	eor	r25, r25
    e404:	82 0f       	add	r24, r18
    e406:	93 1f       	adc	r25, r19
    e408:	9c 83       	std	Y+4, r25	; 0x04
    e40a:	8b 83       	std	Y+3, r24	; 0x03
   numOfChunks = size/24 + 1; 
    e40c:	8b 81       	ldd	r24, Y+3	; 0x03
    e40e:	9c 81       	ldd	r25, Y+4	; 0x04
    e410:	28 e1       	ldi	r18, 0x18	; 24
    e412:	30 e0       	ldi	r19, 0x00	; 0
    e414:	b9 01       	movw	r22, r18
    e416:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <__udivmodhi4>
    e41a:	cb 01       	movw	r24, r22
    e41c:	8f 5f       	subi	r24, 0xFF	; 255
    e41e:	89 83       	std	Y+1, r24	; 0x01

   for (chunkindex = 0; chunkindex < numOfChunks; chunkindex++)   
    e420:	1a 82       	std	Y+2, r1	; 0x02
    e422:	32 c0       	rjmp	.+100    	; 0xe488 <reply_debugging_print+0xdc>

   	{
    reply[ 0 ] = 24 + 6;
    e424:	8e e1       	ldi	r24, 0x1E	; 30
    e426:	80 93 ed 06 	sts	0x06ED, r24
    reply[ 1 ] = 91;
    e42a:	8b e5       	ldi	r24, 0x5B	; 91
    e42c:	80 93 ee 06 	sts	0x06EE, r24
    reply[ 2 ] = nodeid;
    e430:	80 91 5b 07 	lds	r24, 0x075B
    e434:	90 91 5c 07 	lds	r25, 0x075C
    e438:	80 93 ef 06 	sts	0x06EF, r24
		reply[ 3 ] = chunkindex; 
    e43c:	8a 81       	ldd	r24, Y+2	; 0x02
    e43e:	80 93 f0 06 	sts	0x06F0, r24
		reply[ 4 ] = size/256;
    e442:	8b 81       	ldd	r24, Y+3	; 0x03
    e444:	9c 81       	ldd	r25, Y+4	; 0x04
    e446:	89 2f       	mov	r24, r25
    e448:	99 27       	eor	r25, r25
    e44a:	80 93 f1 06 	sts	0x06F1, r24
		reply[ 5 ] = size%256;  
    e44e:	8b 81       	ldd	r24, Y+3	; 0x03
    e450:	80 93 f2 06 	sts	0x06F2, r24
	
    //Note that this expose some piece of memory that is NOT part of the requested data 
    
    mystrncpy( (char *)&reply[ 6 ], ( char* )addr, 24 );
    e454:	2d 81       	ldd	r18, Y+5	; 0x05
    e456:	3e 81       	ldd	r19, Y+6	; 0x06
    e458:	83 ef       	ldi	r24, 0xF3	; 243
    e45a:	96 e0       	ldi	r25, 0x06	; 6
    e45c:	48 e1       	ldi	r20, 0x18	; 24
    e45e:	b9 01       	movw	r22, r18
    e460:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
		addr = addr + 24; 
    e464:	8d 81       	ldd	r24, Y+5	; 0x05
    e466:	9e 81       	ldd	r25, Y+6	; 0x06
    e468:	48 96       	adiw	r24, 0x18	; 24
    e46a:	9e 83       	std	Y+6, r25	; 0x06
    e46c:	8d 83       	std	Y+5, r24	; 0x05
    StandardSocketSend( 0xefef, 0xffff, 32, reply );
    e46e:	8d ee       	ldi	r24, 0xED	; 237
    e470:	96 e0       	ldi	r25, 0x06	; 6
    e472:	9c 01       	movw	r18, r24
    e474:	40 e2       	ldi	r20, 0x20	; 32
    e476:	6f ef       	ldi	r22, 0xFF	; 255
    e478:	7f ef       	ldi	r23, 0xFF	; 255
    e47a:	8f ee       	ldi	r24, 0xEF	; 239
    e47c:	9f ee       	ldi	r25, 0xEF	; 239
    e47e:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    e482:	8a 81       	ldd	r24, Y+2	; 0x02
    e484:	8f 5f       	subi	r24, 0xFF	; 255
    e486:	8a 83       	std	Y+2, r24	; 0x02
    e488:	9a 81       	ldd	r25, Y+2	; 0x02
    e48a:	89 81       	ldd	r24, Y+1	; 0x01
    e48c:	98 17       	cp	r25, r24
    e48e:	50 f2       	brcs	.-108    	; 0xe424 <reply_debugging_print+0x78>
    e490:	28 96       	adiw	r28, 0x08	; 8
    e492:	0f b6       	in	r0, 0x3f	; 63
    e494:	f8 94       	cli
    e496:	de bf       	out	0x3e, r29	; 62
    e498:	0f be       	out	0x3f, r0	; 63
    e49a:	cd bf       	out	0x3d, r28	; 61
    e49c:	df 91       	pop	r29
    e49e:	cf 91       	pop	r28
    e4a0:	08 95       	ret

0000e4a2 <reply_debugging_set>:
   	}
	
   //printStringN(reply,32); 
}


//this is the reply for the set command 
void reply_debugging_set( uint8_t *receivebuffer )
 {
    e4a2:	cf 93       	push	r28
    e4a4:	df 93       	push	r29
    e4a6:	cd b7       	in	r28, 0x3d	; 61
    e4a8:	de b7       	in	r29, 0x3e	; 62
    e4aa:	26 97       	sbiw	r28, 0x06	; 6
    e4ac:	0f b6       	in	r0, 0x3f	; 63
    e4ae:	f8 94       	cli
    e4b0:	de bf       	out	0x3e, r29	; 62
    e4b2:	0f be       	out	0x3f, r0	; 63
    e4b4:	cd bf       	out	0x3d, r28	; 61
    e4b6:	9e 83       	std	Y+6, r25	; 0x06
    e4b8:	8d 83       	std	Y+5, r24	; 0x05
   uint16_t addr;
   uint8_t size;
   uint8_t i;
   addr = ( uint16_t )receivebuffer[ 3 ] *256+receivebuffer[ 4 ];
    e4ba:	8d 81       	ldd	r24, Y+5	; 0x05
    e4bc:	9e 81       	ldd	r25, Y+6	; 0x06
    e4be:	fc 01       	movw	r30, r24
    e4c0:	33 96       	adiw	r30, 0x03	; 3
    e4c2:	80 81       	ld	r24, Z
    e4c4:	99 27       	eor	r25, r25
    e4c6:	38 2f       	mov	r19, r24
    e4c8:	22 27       	eor	r18, r18
    e4ca:	8d 81       	ldd	r24, Y+5	; 0x05
    e4cc:	9e 81       	ldd	r25, Y+6	; 0x06
    e4ce:	fc 01       	movw	r30, r24
    e4d0:	34 96       	adiw	r30, 0x04	; 4
    e4d2:	80 81       	ld	r24, Z
    e4d4:	99 27       	eor	r25, r25
    e4d6:	82 0f       	add	r24, r18
    e4d8:	93 1f       	adc	r25, r19
    e4da:	9c 83       	std	Y+4, r25	; 0x04
    e4dc:	8b 83       	std	Y+3, r24	; 0x03
   size = receivebuffer[ 5 ];
    e4de:	8d 81       	ldd	r24, Y+5	; 0x05
    e4e0:	9e 81       	ldd	r25, Y+6	; 0x06
    e4e2:	fc 01       	movw	r30, r24
    e4e4:	35 96       	adiw	r30, 0x05	; 5
    e4e6:	80 81       	ld	r24, Z
    e4e8:	8a 83       	std	Y+2, r24	; 0x02
   for ( i = 0; i < size; i ++ ) {
    e4ea:	19 82       	std	Y+1, r1	; 0x01
    e4ec:	16 c0       	rjmp	.+44     	; 0xe51a <reply_debugging_set+0x78>
      *(( unsigned char* )( addr + i )) = receivebuffer[ 6+i ];
    e4ee:	89 81       	ldd	r24, Y+1	; 0x01
    e4f0:	28 2f       	mov	r18, r24
    e4f2:	33 27       	eor	r19, r19
    e4f4:	8b 81       	ldd	r24, Y+3	; 0x03
    e4f6:	9c 81       	ldd	r25, Y+4	; 0x04
    e4f8:	82 0f       	add	r24, r18
    e4fa:	93 1f       	adc	r25, r19
    e4fc:	dc 01       	movw	r26, r24
    e4fe:	89 81       	ldd	r24, Y+1	; 0x01
    e500:	99 27       	eor	r25, r25
    e502:	9c 01       	movw	r18, r24
    e504:	8d 81       	ldd	r24, Y+5	; 0x05
    e506:	9e 81       	ldd	r25, Y+6	; 0x06
    e508:	82 0f       	add	r24, r18
    e50a:	93 1f       	adc	r25, r19
    e50c:	fc 01       	movw	r30, r24
    e50e:	36 96       	adiw	r30, 0x06	; 6
    e510:	80 81       	ld	r24, Z
    e512:	8c 93       	st	X, r24
    e514:	89 81       	ldd	r24, Y+1	; 0x01
    e516:	8f 5f       	subi	r24, 0xFF	; 255
    e518:	89 83       	std	Y+1, r24	; 0x01
    e51a:	99 81       	ldd	r25, Y+1	; 0x01
    e51c:	8a 81       	ldd	r24, Y+2	; 0x02
    e51e:	98 17       	cp	r25, r24
    e520:	30 f3       	brcs	.-52     	; 0xe4ee <reply_debugging_set+0x4c>
   }
   reply[ 0 ] = 3;
    e522:	83 e0       	ldi	r24, 0x03	; 3
    e524:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 96;
    e528:	80 e6       	ldi	r24, 0x60	; 96
    e52a:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    e52e:	80 91 5b 07 	lds	r24, 0x075B
    e532:	90 91 5c 07 	lds	r25, 0x075C
    e536:	80 93 ef 06 	sts	0x06EF, r24
   //mystrncpy(&reply[3], (unsigned char *)addr, size); 
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    e53a:	8d ee       	ldi	r24, 0xED	; 237
    e53c:	96 e0       	ldi	r25, 0x06	; 6
    e53e:	9c 01       	movw	r18, r24
    e540:	40 e2       	ldi	r20, 0x20	; 32
    e542:	6f ef       	ldi	r22, 0xFF	; 255
    e544:	7f ef       	ldi	r23, 0xFF	; 255
    e546:	8f ee       	ldi	r24, 0xEF	; 239
    e548:	9f ee       	ldi	r25, 0xEF	; 239
    e54a:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    e54e:	26 96       	adiw	r28, 0x06	; 6
    e550:	0f b6       	in	r0, 0x3f	; 63
    e552:	f8 94       	cli
    e554:	de bf       	out	0x3e, r29	; 62
    e556:	0f be       	out	0x3f, r0	; 63
    e558:	cd bf       	out	0x3d, r28	; 61
    e55a:	df 91       	pop	r29
    e55c:	cf 91       	pop	r28
    e55e:	08 95       	ret

0000e560 <reply_debugging_insert_avr_breakpoint>:
   //printStringN(reply,32); 
}



//-------------------------------------------------------------------------
#ifdef PLATFORM_AVR
void reply_debugging_insert_avr_breakpoint( uint8_t *receivebuffer ) {
    e560:	cf 93       	push	r28
    e562:	df 93       	push	r29
    e564:	cd b7       	in	r28, 0x3d	; 61
    e566:	de b7       	in	r29, 0x3e	; 62
    e568:	2b 97       	sbiw	r28, 0x0b	; 11
    e56a:	0f b6       	in	r0, 0x3f	; 63
    e56c:	f8 94       	cli
    e56e:	de bf       	out	0x3e, r29	; 62
    e570:	0f be       	out	0x3f, r0	; 63
    e572:	cd bf       	out	0x3d, r28	; 61
    e574:	9b 87       	std	Y+11, r25	; 0x0b
    e576:	8a 87       	std	Y+10, r24	; 0x0a
   uint16_t pagecount;
   uint8_t offset;
   uint8_t instructions[ 6 ];
   pagecount = ( uint16_t )receivebuffer[ 3 ] *256+receivebuffer[ 4 ];
    e578:	8a 85       	ldd	r24, Y+10	; 0x0a
    e57a:	9b 85       	ldd	r25, Y+11	; 0x0b
    e57c:	fc 01       	movw	r30, r24
    e57e:	33 96       	adiw	r30, 0x03	; 3
    e580:	80 81       	ld	r24, Z
    e582:	99 27       	eor	r25, r25
    e584:	38 2f       	mov	r19, r24
    e586:	22 27       	eor	r18, r18
    e588:	8a 85       	ldd	r24, Y+10	; 0x0a
    e58a:	9b 85       	ldd	r25, Y+11	; 0x0b
    e58c:	fc 01       	movw	r30, r24
    e58e:	34 96       	adiw	r30, 0x04	; 4
    e590:	80 81       	ld	r24, Z
    e592:	99 27       	eor	r25, r25
    e594:	82 0f       	add	r24, r18
    e596:	93 1f       	adc	r25, r19
    e598:	9b 83       	std	Y+3, r25	; 0x03
    e59a:	8a 83       	std	Y+2, r24	; 0x02
   offset = receivebuffer[ 5 ];
    e59c:	8a 85       	ldd	r24, Y+10	; 0x0a
    e59e:	9b 85       	ldd	r25, Y+11	; 0x0b
    e5a0:	fc 01       	movw	r30, r24
    e5a2:	35 96       	adiw	r30, 0x05	; 5
    e5a4:	80 81       	ld	r24, Z
    e5a6:	89 83       	std	Y+1, r24	; 0x01
   
   
   boot_insertBreakPoint( pagecount, offset, instructions );
    e5a8:	ce 01       	movw	r24, r28
    e5aa:	04 96       	adiw	r24, 0x04	; 4
    e5ac:	2a 81       	ldd	r18, Y+2	; 0x02
    e5ae:	3b 81       	ldd	r19, Y+3	; 0x03
    e5b0:	ac 01       	movw	r20, r24
    e5b2:	69 81       	ldd	r22, Y+1	; 0x01
    e5b4:	c9 01       	movw	r24, r18
    e5b6:	0e 94 92 f1 	call	0x1e324	; 0x1e324 <boot_insertBreakPoint>
   
   reply[ 0 ] = 12;
    e5ba:	8c e0       	ldi	r24, 0x0C	; 12
    e5bc:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 92;
    e5c0:	8c e5       	ldi	r24, 0x5C	; 92
    e5c2:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    e5c6:	80 91 5b 07 	lds	r24, 0x075B
    e5ca:	90 91 5c 07 	lds	r25, 0x075C
    e5ce:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = receivebuffer[ 3 ];
    e5d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    e5d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    e5d6:	fc 01       	movw	r30, r24
    e5d8:	33 96       	adiw	r30, 0x03	; 3
    e5da:	80 81       	ld	r24, Z
    e5dc:	80 93 f0 06 	sts	0x06F0, r24
   reply[ 4 ] = receivebuffer[ 4 ];
    e5e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    e5e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    e5e4:	fc 01       	movw	r30, r24
    e5e6:	34 96       	adiw	r30, 0x04	; 4
    e5e8:	80 81       	ld	r24, Z
    e5ea:	80 93 f1 06 	sts	0x06F1, r24
   reply[ 5 ] = receivebuffer[ 5 ];
    e5ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    e5f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    e5f2:	fc 01       	movw	r30, r24
    e5f4:	35 96       	adiw	r30, 0x05	; 5
    e5f6:	80 81       	ld	r24, Z
    e5f8:	80 93 f2 06 	sts	0x06F2, r24
   for ( offset = 0; offset < 6; offset ++ ) {
    e5fc:	19 82       	std	Y+1, r1	; 0x01
    e5fe:	15 c0       	rjmp	.+42     	; 0xe62a <reply_debugging_insert_avr_breakpoint+0xca>
      reply[ 6+offset ] = instructions[ offset ];
    e600:	89 81       	ldd	r24, Y+1	; 0x01
    e602:	99 27       	eor	r25, r25
    e604:	ac 01       	movw	r20, r24
    e606:	4a 5f       	subi	r20, 0xFA	; 250
    e608:	5f 4f       	sbci	r21, 0xFF	; 255
    e60a:	89 81       	ldd	r24, Y+1	; 0x01
    e60c:	28 2f       	mov	r18, r24
    e60e:	33 27       	eor	r19, r19
    e610:	ce 01       	movw	r24, r28
    e612:	04 96       	adiw	r24, 0x04	; 4
    e614:	fc 01       	movw	r30, r24
    e616:	e2 0f       	add	r30, r18
    e618:	f3 1f       	adc	r31, r19
    e61a:	80 81       	ld	r24, Z
    e61c:	fa 01       	movw	r30, r20
    e61e:	e3 51       	subi	r30, 0x13	; 19
    e620:	f9 4f       	sbci	r31, 0xF9	; 249
    e622:	80 83       	st	Z, r24
    e624:	89 81       	ldd	r24, Y+1	; 0x01
    e626:	8f 5f       	subi	r24, 0xFF	; 255
    e628:	89 83       	std	Y+1, r24	; 0x01
    e62a:	89 81       	ldd	r24, Y+1	; 0x01
    e62c:	86 30       	cpi	r24, 0x06	; 6
    e62e:	40 f3       	brcs	.-48     	; 0xe600 <reply_debugging_insert_avr_breakpoint+0xa0>
   } 
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    e630:	8d ee       	ldi	r24, 0xED	; 237
    e632:	96 e0       	ldi	r25, 0x06	; 6
    e634:	9c 01       	movw	r18, r24
    e636:	40 e2       	ldi	r20, 0x20	; 32
    e638:	6f ef       	ldi	r22, 0xFF	; 255
    e63a:	7f ef       	ldi	r23, 0xFF	; 255
    e63c:	8f ee       	ldi	r24, 0xEF	; 239
    e63e:	9f ee       	ldi	r25, 0xEF	; 239
    e640:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    e644:	8d ee       	ldi	r24, 0xED	; 237
    e646:	96 e0       	ldi	r25, 0x06	; 6
    e648:	9c 01       	movw	r18, r24
    e64a:	40 e2       	ldi	r20, 0x20	; 32
    e64c:	6f ef       	ldi	r22, 0xFF	; 255
    e64e:	7f ef       	ldi	r23, 0xFF	; 255
    e650:	8f ee       	ldi	r24, 0xEF	; 239
    e652:	9f ee       	ldi	r25, 0xEF	; 239
    e654:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    e658:	8d ee       	ldi	r24, 0xED	; 237
    e65a:	96 e0       	ldi	r25, 0x06	; 6
    e65c:	9c 01       	movw	r18, r24
    e65e:	40 e2       	ldi	r20, 0x20	; 32
    e660:	6f ef       	ldi	r22, 0xFF	; 255
    e662:	7f ef       	ldi	r23, 0xFF	; 255
    e664:	8f ee       	ldi	r24, 0xEF	; 239
    e666:	9f ee       	ldi	r25, 0xEF	; 239
    e668:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    e66c:	2b 96       	adiw	r28, 0x0b	; 11
    e66e:	0f b6       	in	r0, 0x3f	; 63
    e670:	f8 94       	cli
    e672:	de bf       	out	0x3e, r29	; 62
    e674:	0f be       	out	0x3f, r0	; 63
    e676:	cd bf       	out	0x3d, r28	; 61
    e678:	df 91       	pop	r29
    e67a:	cf 91       	pop	r28
    e67c:	08 95       	ret

0000e67e <reply_debugging_remove_avr_breakpoint>:
}
#endif


//this should copy the thread information from a file 
//to be written as 93, and use the name of the thread to continue its operations. 
//the shell should support operating on the files to directly find out the instructions 
//Using python or Perl should be OK as well 
//Support for breakpoints should be finished tomorrow
//And the thread dump and thread_state_restore should be the next task. 
//and this task should check the address to see which location is the address to be need. 
//use uint32_t because uint16_t is too small 

#ifdef PLATFORM_AVR
void reply_debugging_remove_avr_breakpoint( uint8_t *receivebuffer ) {
    e67e:	cf 93       	push	r28
    e680:	df 93       	push	r29
    e682:	cd b7       	in	r28, 0x3d	; 61
    e684:	de b7       	in	r29, 0x3e	; 62
    e686:	2f 97       	sbiw	r28, 0x0f	; 15
    e688:	0f b6       	in	r0, 0x3f	; 63
    e68a:	f8 94       	cli
    e68c:	de bf       	out	0x3e, r29	; 62
    e68e:	0f be       	out	0x3f, r0	; 63
    e690:	cd bf       	out	0x3d, r28	; 61
    e692:	9f 87       	std	Y+15, r25	; 0x0f
    e694:	8e 87       	std	Y+14, r24	; 0x0e
   uint32_t addrbreakpoint;
   uint16_t pagecount;
   uint8_t offset;
   uint8_t i;
   uint8_t breakpointfound = 0;
    e696:	1d 82       	std	Y+5, r1	; 0x05
   addrbreakpoint = (( uint16_t )receivebuffer[ 3 ] *256 ) + receivebuffer[ 4 ];
    e698:	8e 85       	ldd	r24, Y+14	; 0x0e
    e69a:	9f 85       	ldd	r25, Y+15	; 0x0f
    e69c:	fc 01       	movw	r30, r24
    e69e:	33 96       	adiw	r30, 0x03	; 3
    e6a0:	80 81       	ld	r24, Z
    e6a2:	99 27       	eor	r25, r25
    e6a4:	38 2f       	mov	r19, r24
    e6a6:	22 27       	eor	r18, r18
    e6a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    e6aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    e6ac:	fc 01       	movw	r30, r24
    e6ae:	34 96       	adiw	r30, 0x04	; 4
    e6b0:	80 81       	ld	r24, Z
    e6b2:	99 27       	eor	r25, r25
    e6b4:	82 0f       	add	r24, r18
    e6b6:	93 1f       	adc	r25, r19
    e6b8:	aa 27       	eor	r26, r26
    e6ba:	bb 27       	eor	r27, r27
    e6bc:	8a 87       	std	Y+10, r24	; 0x0a
    e6be:	9b 87       	std	Y+11, r25	; 0x0b
    e6c0:	ac 87       	std	Y+12, r26	; 0x0c
    e6c2:	bd 87       	std	Y+13, r27	; 0x0d
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
    e6c4:	1e 82       	std	Y+6, r1	; 0x06
    e6c6:	6f c0       	rjmp	.+222    	; 0xe7a6 <reply_debugging_remove_avr_breakpoint+0x128>
      if ( thread_table[ i ].state == 8 ) {
    e6c8:	8e 81       	ldd	r24, Y+6	; 0x06
    e6ca:	28 2f       	mov	r18, r24
    e6cc:	33 27       	eor	r19, r19
    e6ce:	85 e2       	ldi	r24, 0x25	; 37
    e6d0:	90 e0       	ldi	r25, 0x00	; 0
    e6d2:	ac 01       	movw	r20, r24
    e6d4:	24 9f       	mul	r18, r20
    e6d6:	c0 01       	movw	r24, r0
    e6d8:	25 9f       	mul	r18, r21
    e6da:	90 0d       	add	r25, r0
    e6dc:	34 9f       	mul	r19, r20
    e6de:	90 0d       	add	r25, r0
    e6e0:	11 24       	eor	r1, r1
    e6e2:	fc 01       	movw	r30, r24
    e6e4:	e2 52       	subi	r30, 0x22	; 34
    e6e6:	f7 4f       	sbci	r31, 0xF7	; 247
    e6e8:	80 81       	ld	r24, Z
    e6ea:	88 30       	cpi	r24, 0x08	; 8
    e6ec:	09 f0       	breq	.+2      	; 0xe6f0 <reply_debugging_remove_avr_breakpoint+0x72>
    e6ee:	58 c0       	rjmp	.+176    	; 0xe7a0 <reply_debugging_remove_avr_breakpoint+0x122>
         uint8_t *tempptr = ( uint8_t* )thread_table[ i ].sp + 47;
    e6f0:	8e 81       	ldd	r24, Y+6	; 0x06
    e6f2:	28 2f       	mov	r18, r24
    e6f4:	33 27       	eor	r19, r19
    e6f6:	85 e2       	ldi	r24, 0x25	; 37
    e6f8:	90 e0       	ldi	r25, 0x00	; 0
    e6fa:	ac 01       	movw	r20, r24
    e6fc:	24 9f       	mul	r18, r20
    e6fe:	c0 01       	movw	r24, r0
    e700:	25 9f       	mul	r18, r21
    e702:	90 0d       	add	r25, r0
    e704:	34 9f       	mul	r19, r20
    e706:	90 0d       	add	r25, r0
    e708:	11 24       	eor	r1, r1
    e70a:	fc 01       	movw	r30, r24
    e70c:	e4 52       	subi	r30, 0x24	; 36
    e70e:	f7 4f       	sbci	r31, 0xF7	; 247
    e710:	80 81       	ld	r24, Z
    e712:	91 81       	ldd	r25, Z+1	; 0x01
    e714:	8f 96       	adiw	r24, 0x2f	; 47
    e716:	9c 83       	std	Y+4, r25	; 0x04
    e718:	8b 83       	std	Y+3, r24	; 0x03
         uint16_t addr = ((( uint16_t )( *tempptr )) *256+*( tempptr + 1 ) - 3 );
    e71a:	eb 81       	ldd	r30, Y+3	; 0x03
    e71c:	fc 81       	ldd	r31, Y+4	; 0x04
    e71e:	80 81       	ld	r24, Z
    e720:	99 27       	eor	r25, r25
    e722:	38 2f       	mov	r19, r24
    e724:	22 27       	eor	r18, r18
    e726:	8b 81       	ldd	r24, Y+3	; 0x03
    e728:	9c 81       	ldd	r25, Y+4	; 0x04
    e72a:	fc 01       	movw	r30, r24
    e72c:	31 96       	adiw	r30, 0x01	; 1
    e72e:	80 81       	ld	r24, Z
    e730:	99 27       	eor	r25, r25
    e732:	82 0f       	add	r24, r18
    e734:	93 1f       	adc	r25, r19
    e736:	03 97       	sbiw	r24, 0x03	; 3
    e738:	9a 83       	std	Y+2, r25	; 0x02
    e73a:	89 83       	std	Y+1, r24	; 0x01
         if ( addr == addrbreakpoint ) {
    e73c:	89 81       	ldd	r24, Y+1	; 0x01
    e73e:	9a 81       	ldd	r25, Y+2	; 0x02
    e740:	9c 01       	movw	r18, r24
    e742:	44 27       	eor	r20, r20
    e744:	55 27       	eor	r21, r21
    e746:	8a 85       	ldd	r24, Y+10	; 0x0a
    e748:	9b 85       	ldd	r25, Y+11	; 0x0b
    e74a:	ac 85       	ldd	r26, Y+12	; 0x0c
    e74c:	bd 85       	ldd	r27, Y+13	; 0x0d
    e74e:	28 17       	cp	r18, r24
    e750:	39 07       	cpc	r19, r25
    e752:	4a 07       	cpc	r20, r26
    e754:	5b 07       	cpc	r21, r27
    e756:	21 f5       	brne	.+72     	; 0xe7a0 <reply_debugging_remove_avr_breakpoint+0x122>
            thread_table[ i ].state = STATE_ACTIVE;
    e758:	8e 81       	ldd	r24, Y+6	; 0x06
    e75a:	28 2f       	mov	r18, r24
    e75c:	33 27       	eor	r19, r19
    e75e:	85 e2       	ldi	r24, 0x25	; 37
    e760:	90 e0       	ldi	r25, 0x00	; 0
    e762:	ac 01       	movw	r20, r24
    e764:	24 9f       	mul	r18, r20
    e766:	c0 01       	movw	r24, r0
    e768:	25 9f       	mul	r18, r21
    e76a:	90 0d       	add	r25, r0
    e76c:	34 9f       	mul	r19, r20
    e76e:	90 0d       	add	r25, r0
    e770:	11 24       	eor	r1, r1
    e772:	fc 01       	movw	r30, r24
    e774:	e2 52       	subi	r30, 0x22	; 34
    e776:	f7 4f       	sbci	r31, 0xF7	; 247
    e778:	82 e0       	ldi	r24, 0x02	; 2
    e77a:	80 83       	st	Z, r24
            *tempptr = addrbreakpoint / 256;
    e77c:	8a 85       	ldd	r24, Y+10	; 0x0a
    e77e:	9b 85       	ldd	r25, Y+11	; 0x0b
    e780:	ac 85       	ldd	r26, Y+12	; 0x0c
    e782:	bd 85       	ldd	r27, Y+13	; 0x0d
    e784:	89 2f       	mov	r24, r25
    e786:	9a 2f       	mov	r25, r26
    e788:	ab 2f       	mov	r26, r27
    e78a:	bb 27       	eor	r27, r27
    e78c:	eb 81       	ldd	r30, Y+3	; 0x03
    e78e:	fc 81       	ldd	r31, Y+4	; 0x04
    e790:	80 83       	st	Z, r24
            *( tempptr + 1 ) = addrbreakpoint % 256;
    e792:	8b 81       	ldd	r24, Y+3	; 0x03
    e794:	9c 81       	ldd	r25, Y+4	; 0x04
    e796:	fc 01       	movw	r30, r24
    e798:	31 96       	adiw	r30, 0x01	; 1
    e79a:	8a 85       	ldd	r24, Y+10	; 0x0a
    e79c:	80 83       	st	Z, r24
            break;
    e79e:	07 c0       	rjmp	.+14     	; 0xe7ae <reply_debugging_remove_avr_breakpoint+0x130>
    e7a0:	8e 81       	ldd	r24, Y+6	; 0x06
    e7a2:	8f 5f       	subi	r24, 0xFF	; 255
    e7a4:	8e 83       	std	Y+6, r24	; 0x06
    e7a6:	8e 81       	ldd	r24, Y+6	; 0x06
    e7a8:	88 30       	cpi	r24, 0x08	; 8
    e7aa:	08 f4       	brcc	.+2      	; 0xe7ae <reply_debugging_remove_avr_breakpoint+0x130>
    e7ac:	8d cf       	rjmp	.-230    	; 0xe6c8 <reply_debugging_remove_avr_breakpoint+0x4a>
         }
      }
   }
   if ( i < LITE_MAX_THREADS ) {
    e7ae:	8e 81       	ldd	r24, Y+6	; 0x06
    e7b0:	88 30       	cpi	r24, 0x08	; 8
    e7b2:	18 f5       	brcc	.+70     	; 0xe7fa <reply_debugging_remove_avr_breakpoint+0x17c>
      pagecount = addrbreakpoint / 128;
    e7b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    e7b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    e7b8:	ac 85       	ldd	r26, Y+12	; 0x0c
    e7ba:	bd 85       	ldd	r27, Y+13	; 0x0d
    e7bc:	68 94       	set
    e7be:	16 f8       	bld	r1, 6
    e7c0:	b6 95       	lsr	r27
    e7c2:	a7 95       	ror	r26
    e7c4:	97 95       	ror	r25
    e7c6:	87 95       	ror	r24
    e7c8:	16 94       	lsr	r1
    e7ca:	d1 f7       	brne	.-12     	; 0xe7c0 <reply_debugging_remove_avr_breakpoint+0x142>
    e7cc:	99 87       	std	Y+9, r25	; 0x09
    e7ce:	88 87       	std	Y+8, r24	; 0x08
      offset = addrbreakpoint * 2 % 256;
    e7d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    e7d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    e7d4:	ac 85       	ldd	r26, Y+12	; 0x0c
    e7d6:	bd 85       	ldd	r27, Y+13	; 0x0d
    e7d8:	88 0f       	add	r24, r24
    e7da:	99 1f       	adc	r25, r25
    e7dc:	aa 1f       	adc	r26, r26
    e7de:	bb 1f       	adc	r27, r27
    e7e0:	8f 83       	std	Y+7, r24	; 0x07
      boot_removeBreakPoint( pagecount, offset, &receivebuffer[ 5 ] );
    e7e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    e7e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    e7e6:	05 96       	adiw	r24, 0x05	; 5
    e7e8:	28 85       	ldd	r18, Y+8	; 0x08
    e7ea:	39 85       	ldd	r19, Y+9	; 0x09
    e7ec:	ac 01       	movw	r20, r24
    e7ee:	6f 81       	ldd	r22, Y+7	; 0x07
    e7f0:	c9 01       	movw	r24, r18
    e7f2:	0e 94 30 f5 	call	0x1ea60	; 0x1ea60 <boot_removeBreakPoint>
      breakpointfound = 1;
    e7f6:	81 e0       	ldi	r24, 0x01	; 1
    e7f8:	8d 83       	std	Y+5, r24	; 0x05
   }
   reply[ 0 ] = 5;
    e7fa:	85 e0       	ldi	r24, 0x05	; 5
    e7fc:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 93;
    e800:	8d e5       	ldi	r24, 0x5D	; 93
    e802:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    e806:	80 91 5b 07 	lds	r24, 0x075B
    e80a:	90 91 5c 07 	lds	r25, 0x075C
    e80e:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = breakpointfound;
    e812:	8d 81       	ldd	r24, Y+5	; 0x05
    e814:	80 93 f0 06 	sts	0x06F0, r24
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    e818:	8d ee       	ldi	r24, 0xED	; 237
    e81a:	96 e0       	ldi	r25, 0x06	; 6
    e81c:	9c 01       	movw	r18, r24
    e81e:	40 e2       	ldi	r20, 0x20	; 32
    e820:	6f ef       	ldi	r22, 0xFF	; 255
    e822:	7f ef       	ldi	r23, 0xFF	; 255
    e824:	8f ee       	ldi	r24, 0xEF	; 239
    e826:	9f ee       	ldi	r25, 0xEF	; 239
    e828:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    e82c:	2f 96       	adiw	r28, 0x0f	; 15
    e82e:	0f b6       	in	r0, 0x3f	; 63
    e830:	f8 94       	cli
    e832:	de bf       	out	0x3e, r29	; 62
    e834:	0f be       	out	0x3f, r0	; 63
    e836:	cd bf       	out	0x3d, r28	; 61
    e838:	df 91       	pop	r29
    e83a:	cf 91       	pop	r28
    e83c:	08 95       	ret

0000e83e <thread_state_restore>:
}
#endif

//-------------------------------------------------------------------------
static void thread_state_restore( uint8_t index, uint8_t *filename ) {
    e83e:	cf 93       	push	r28
    e840:	df 93       	push	r29
    e842:	cd b7       	in	r28, 0x3d	; 61
    e844:	de b7       	in	r29, 0x3e	; 62
    e846:	2a 97       	sbiw	r28, 0x0a	; 10
    e848:	0f b6       	in	r0, 0x3f	; 63
    e84a:	f8 94       	cli
    e84c:	de bf       	out	0x3e, r29	; 62
    e84e:	0f be       	out	0x3f, r0	; 63
    e850:	cd bf       	out	0x3d, r28	; 61
    e852:	88 87       	std	Y+8, r24	; 0x08
    e854:	7a 87       	std	Y+10, r23	; 0x0a
    e856:	69 87       	std	Y+9, r22	; 0x09
   MYFILE *fp;
   uint8_t threadsize;
   uint16_t threadramsize;
   uint8_t *internal_ram_start;
   threadsize = sizeof( struct thread );
    e858:	85 e2       	ldi	r24, 0x25	; 37
    e85a:	8d 83       	std	Y+5, r24	; 0x05
   threadramsize = ( uint16_t )(( uint8_t* )thread_table[ index ].ramend - ( uint8_t* )thread_table[ index ].ramstart + 1 );
    e85c:	88 85       	ldd	r24, Y+8	; 0x08
    e85e:	28 2f       	mov	r18, r24
    e860:	33 27       	eor	r19, r19
    e862:	85 e2       	ldi	r24, 0x25	; 37
    e864:	90 e0       	ldi	r25, 0x00	; 0
    e866:	ac 01       	movw	r20, r24
    e868:	24 9f       	mul	r18, r20
    e86a:	c0 01       	movw	r24, r0
    e86c:	25 9f       	mul	r18, r21
    e86e:	90 0d       	add	r25, r0
    e870:	34 9f       	mul	r19, r20
    e872:	90 0d       	add	r25, r0
    e874:	11 24       	eor	r1, r1
    e876:	fc 01       	movw	r30, r24
    e878:	e1 51       	subi	r30, 0x11	; 17
    e87a:	f7 4f       	sbci	r31, 0xF7	; 247
    e87c:	80 81       	ld	r24, Z
    e87e:	91 81       	ldd	r25, Z+1	; 0x01
    e880:	ac 01       	movw	r20, r24
    e882:	88 85       	ldd	r24, Y+8	; 0x08
    e884:	28 2f       	mov	r18, r24
    e886:	33 27       	eor	r19, r19
    e888:	85 e2       	ldi	r24, 0x25	; 37
    e88a:	90 e0       	ldi	r25, 0x00	; 0
    e88c:	bc 01       	movw	r22, r24
    e88e:	26 9f       	mul	r18, r22
    e890:	c0 01       	movw	r24, r0
    e892:	27 9f       	mul	r18, r23
    e894:	90 0d       	add	r25, r0
    e896:	36 9f       	mul	r19, r22
    e898:	90 0d       	add	r25, r0
    e89a:	11 24       	eor	r1, r1
    e89c:	fc 01       	movw	r30, r24
    e89e:	e3 51       	subi	r30, 0x13	; 19
    e8a0:	f7 4f       	sbci	r31, 0xF7	; 247
    e8a2:	80 81       	ld	r24, Z
    e8a4:	91 81       	ldd	r25, Z+1	; 0x01
    e8a6:	9a 01       	movw	r18, r20
    e8a8:	28 1b       	sub	r18, r24
    e8aa:	39 0b       	sbc	r19, r25
    e8ac:	c9 01       	movw	r24, r18
    e8ae:	01 96       	adiw	r24, 0x01	; 1
    e8b0:	9c 83       	std	Y+4, r25	; 0x04
    e8b2:	8b 83       	std	Y+3, r24	; 0x03
   internal_ram_start = ( uint8_t* )thread_table[ index ].ramstart;
    e8b4:	88 85       	ldd	r24, Y+8	; 0x08
    e8b6:	28 2f       	mov	r18, r24
    e8b8:	33 27       	eor	r19, r19
    e8ba:	85 e2       	ldi	r24, 0x25	; 37
    e8bc:	90 e0       	ldi	r25, 0x00	; 0
    e8be:	ac 01       	movw	r20, r24
    e8c0:	24 9f       	mul	r18, r20
    e8c2:	c0 01       	movw	r24, r0
    e8c4:	25 9f       	mul	r18, r21
    e8c6:	90 0d       	add	r25, r0
    e8c8:	34 9f       	mul	r19, r20
    e8ca:	90 0d       	add	r25, r0
    e8cc:	11 24       	eor	r1, r1
    e8ce:	fc 01       	movw	r30, r24
    e8d0:	e3 51       	subi	r30, 0x13	; 19
    e8d2:	f7 4f       	sbci	r31, 0xF7	; 247
    e8d4:	80 81       	ld	r24, Z
    e8d6:	91 81       	ldd	r25, Z+1	; 0x01
    e8d8:	9a 83       	std	Y+2, r25	; 0x02
    e8da:	89 83       	std	Y+1, r24	; 0x01
   fp = fopen2( (char *)filename, "r" );
    e8dc:	29 85       	ldd	r18, Y+9	; 0x09
    e8de:	3a 85       	ldd	r19, Y+10	; 0x0a
    e8e0:	8e e6       	ldi	r24, 0x6E	; 110
    e8e2:	91 e0       	ldi	r25, 0x01	; 1
    e8e4:	bc 01       	movw	r22, r24
    e8e6:	c9 01       	movw	r24, r18
    e8e8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <fopen2>
    e8ec:	9f 83       	std	Y+7, r25	; 0x07
    e8ee:	8e 83       	std	Y+6, r24	; 0x06
   fread2( fp, &thread_table[ index ], threadsize );
    e8f0:	8d 81       	ldd	r24, Y+5	; 0x05
    e8f2:	48 2f       	mov	r20, r24
    e8f4:	55 27       	eor	r21, r21
    e8f6:	88 85       	ldd	r24, Y+8	; 0x08
    e8f8:	28 2f       	mov	r18, r24
    e8fa:	33 27       	eor	r19, r19
    e8fc:	85 e2       	ldi	r24, 0x25	; 37
    e8fe:	90 e0       	ldi	r25, 0x00	; 0
    e900:	bc 01       	movw	r22, r24
    e902:	26 9f       	mul	r18, r22
    e904:	c0 01       	movw	r24, r0
    e906:	27 9f       	mul	r18, r23
    e908:	90 0d       	add	r25, r0
    e90a:	36 9f       	mul	r19, r22
    e90c:	90 0d       	add	r25, r0
    e90e:	11 24       	eor	r1, r1
    e910:	84 52       	subi	r24, 0x24	; 36
    e912:	97 4f       	sbci	r25, 0xF7	; 247
    e914:	2e 81       	ldd	r18, Y+6	; 0x06
    e916:	3f 81       	ldd	r19, Y+7	; 0x07
    e918:	bc 01       	movw	r22, r24
    e91a:	c9 01       	movw	r24, r18
    e91c:	0e 94 49 05 	call	0xa92	; 0xa92 <fread2>
   fseek2( fp, threadsize, 1 );
    e920:	8d 81       	ldd	r24, Y+5	; 0x05
    e922:	99 27       	eor	r25, r25
    e924:	aa 27       	eor	r26, r26
    e926:	bb 27       	eor	r27, r27
    e928:	ee 81       	ldd	r30, Y+6	; 0x06
    e92a:	ff 81       	ldd	r31, Y+7	; 0x07
    e92c:	21 e0       	ldi	r18, 0x01	; 1
    e92e:	30 e0       	ldi	r19, 0x00	; 0
    e930:	ac 01       	movw	r20, r24
    e932:	bd 01       	movw	r22, r26
    e934:	cf 01       	movw	r24, r30
    e936:	0e 94 94 03 	call	0x728	; 0x728 <fseek2>
   fread2( fp, internal_ram_start, threadramsize );
    e93a:	8b 81       	ldd	r24, Y+3	; 0x03
    e93c:	9c 81       	ldd	r25, Y+4	; 0x04
    e93e:	29 81       	ldd	r18, Y+1	; 0x01
    e940:	3a 81       	ldd	r19, Y+2	; 0x02
    e942:	ee 81       	ldd	r30, Y+6	; 0x06
    e944:	ff 81       	ldd	r31, Y+7	; 0x07
    e946:	ac 01       	movw	r20, r24
    e948:	b9 01       	movw	r22, r18
    e94a:	cf 01       	movw	r24, r30
    e94c:	0e 94 49 05 	call	0xa92	; 0xa92 <fread2>
   fclose2( fp );
    e950:	8e 81       	ldd	r24, Y+6	; 0x06
    e952:	9f 81       	ldd	r25, Y+7	; 0x07
    e954:	0e 94 77 03 	call	0x6ee	; 0x6ee <fclose2>
    e958:	2a 96       	adiw	r28, 0x0a	; 10
    e95a:	0f b6       	in	r0, 0x3f	; 63
    e95c:	f8 94       	cli
    e95e:	de bf       	out	0x3e, r29	; 62
    e960:	0f be       	out	0x3f, r0	; 63
    e962:	cd bf       	out	0x3d, r28	; 61
    e964:	df 91       	pop	r29
    e966:	cf 91       	pop	r28
    e968:	08 95       	ret

0000e96a <thread_state_snapshot>:
}


//-------------------------------------------------------------------------
static void thread_state_snapshot( uint8_t index, uint8_t *filename ) {
    e96a:	cf 93       	push	r28
    e96c:	df 93       	push	r29
    e96e:	cd b7       	in	r28, 0x3d	; 61
    e970:	de b7       	in	r29, 0x3e	; 62
    e972:	2a 97       	sbiw	r28, 0x0a	; 10
    e974:	0f b6       	in	r0, 0x3f	; 63
    e976:	f8 94       	cli
    e978:	de bf       	out	0x3e, r29	; 62
    e97a:	0f be       	out	0x3f, r0	; 63
    e97c:	cd bf       	out	0x3d, r28	; 61
    e97e:	88 87       	std	Y+8, r24	; 0x08
    e980:	7a 87       	std	Y+10, r23	; 0x0a
    e982:	69 87       	std	Y+9, r22	; 0x09
   MYFILE *fp;
   uint8_t threadsize;
   uint16_t threadramsize;
   uint8_t *internal_ram_start;
   threadsize = sizeof( struct thread );
    e984:	85 e2       	ldi	r24, 0x25	; 37
    e986:	8d 83       	std	Y+5, r24	; 0x05
   threadramsize = ( uint16_t )(( uint8_t* )thread_table[ index ].ramend - ( uint8_t* )thread_table[ index ].ramstart + 1 );
    e988:	88 85       	ldd	r24, Y+8	; 0x08
    e98a:	28 2f       	mov	r18, r24
    e98c:	33 27       	eor	r19, r19
    e98e:	85 e2       	ldi	r24, 0x25	; 37
    e990:	90 e0       	ldi	r25, 0x00	; 0
    e992:	ac 01       	movw	r20, r24
    e994:	24 9f       	mul	r18, r20
    e996:	c0 01       	movw	r24, r0
    e998:	25 9f       	mul	r18, r21
    e99a:	90 0d       	add	r25, r0
    e99c:	34 9f       	mul	r19, r20
    e99e:	90 0d       	add	r25, r0
    e9a0:	11 24       	eor	r1, r1
    e9a2:	fc 01       	movw	r30, r24
    e9a4:	e1 51       	subi	r30, 0x11	; 17
    e9a6:	f7 4f       	sbci	r31, 0xF7	; 247
    e9a8:	80 81       	ld	r24, Z
    e9aa:	91 81       	ldd	r25, Z+1	; 0x01
    e9ac:	ac 01       	movw	r20, r24
    e9ae:	88 85       	ldd	r24, Y+8	; 0x08
    e9b0:	28 2f       	mov	r18, r24
    e9b2:	33 27       	eor	r19, r19
    e9b4:	85 e2       	ldi	r24, 0x25	; 37
    e9b6:	90 e0       	ldi	r25, 0x00	; 0
    e9b8:	bc 01       	movw	r22, r24
    e9ba:	26 9f       	mul	r18, r22
    e9bc:	c0 01       	movw	r24, r0
    e9be:	27 9f       	mul	r18, r23
    e9c0:	90 0d       	add	r25, r0
    e9c2:	36 9f       	mul	r19, r22
    e9c4:	90 0d       	add	r25, r0
    e9c6:	11 24       	eor	r1, r1
    e9c8:	fc 01       	movw	r30, r24
    e9ca:	e3 51       	subi	r30, 0x13	; 19
    e9cc:	f7 4f       	sbci	r31, 0xF7	; 247
    e9ce:	80 81       	ld	r24, Z
    e9d0:	91 81       	ldd	r25, Z+1	; 0x01
    e9d2:	9a 01       	movw	r18, r20
    e9d4:	28 1b       	sub	r18, r24
    e9d6:	39 0b       	sbc	r19, r25
    e9d8:	c9 01       	movw	r24, r18
    e9da:	01 96       	adiw	r24, 0x01	; 1
    e9dc:	9c 83       	std	Y+4, r25	; 0x04
    e9de:	8b 83       	std	Y+3, r24	; 0x03
   internal_ram_start = ( uint8_t* )thread_table[ index ].ramstart;
    e9e0:	88 85       	ldd	r24, Y+8	; 0x08
    e9e2:	28 2f       	mov	r18, r24
    e9e4:	33 27       	eor	r19, r19
    e9e6:	85 e2       	ldi	r24, 0x25	; 37
    e9e8:	90 e0       	ldi	r25, 0x00	; 0
    e9ea:	ac 01       	movw	r20, r24
    e9ec:	24 9f       	mul	r18, r20
    e9ee:	c0 01       	movw	r24, r0
    e9f0:	25 9f       	mul	r18, r21
    e9f2:	90 0d       	add	r25, r0
    e9f4:	34 9f       	mul	r19, r20
    e9f6:	90 0d       	add	r25, r0
    e9f8:	11 24       	eor	r1, r1
    e9fa:	fc 01       	movw	r30, r24
    e9fc:	e3 51       	subi	r30, 0x13	; 19
    e9fe:	f7 4f       	sbci	r31, 0xF7	; 247
    ea00:	80 81       	ld	r24, Z
    ea02:	91 81       	ldd	r25, Z+1	; 0x01
    ea04:	9a 83       	std	Y+2, r25	; 0x02
    ea06:	89 83       	std	Y+1, r24	; 0x01
   fp = fopen2( (char *)filename, "w" );
    ea08:	29 85       	ldd	r18, Y+9	; 0x09
    ea0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    ea0c:	80 e7       	ldi	r24, 0x70	; 112
    ea0e:	91 e0       	ldi	r25, 0x01	; 1
    ea10:	bc 01       	movw	r22, r24
    ea12:	c9 01       	movw	r24, r18
    ea14:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <fopen2>
    ea18:	9f 83       	std	Y+7, r25	; 0x07
    ea1a:	8e 83       	std	Y+6, r24	; 0x06
   fwrite2( fp, &thread_table[ index ], threadsize );
    ea1c:	8d 81       	ldd	r24, Y+5	; 0x05
    ea1e:	48 2f       	mov	r20, r24
    ea20:	55 27       	eor	r21, r21
    ea22:	88 85       	ldd	r24, Y+8	; 0x08
    ea24:	28 2f       	mov	r18, r24
    ea26:	33 27       	eor	r19, r19
    ea28:	85 e2       	ldi	r24, 0x25	; 37
    ea2a:	90 e0       	ldi	r25, 0x00	; 0
    ea2c:	bc 01       	movw	r22, r24
    ea2e:	26 9f       	mul	r18, r22
    ea30:	c0 01       	movw	r24, r0
    ea32:	27 9f       	mul	r18, r23
    ea34:	90 0d       	add	r25, r0
    ea36:	36 9f       	mul	r19, r22
    ea38:	90 0d       	add	r25, r0
    ea3a:	11 24       	eor	r1, r1
    ea3c:	84 52       	subi	r24, 0x24	; 36
    ea3e:	97 4f       	sbci	r25, 0xF7	; 247
    ea40:	2e 81       	ldd	r18, Y+6	; 0x06
    ea42:	3f 81       	ldd	r19, Y+7	; 0x07
    ea44:	bc 01       	movw	r22, r24
    ea46:	c9 01       	movw	r24, r18
    ea48:	0e 94 e5 06 	call	0xdca	; 0xdca <fwrite2>
   fseek2( fp, threadsize, 1 );
    ea4c:	8d 81       	ldd	r24, Y+5	; 0x05
    ea4e:	99 27       	eor	r25, r25
    ea50:	aa 27       	eor	r26, r26
    ea52:	bb 27       	eor	r27, r27
    ea54:	ee 81       	ldd	r30, Y+6	; 0x06
    ea56:	ff 81       	ldd	r31, Y+7	; 0x07
    ea58:	21 e0       	ldi	r18, 0x01	; 1
    ea5a:	30 e0       	ldi	r19, 0x00	; 0
    ea5c:	ac 01       	movw	r20, r24
    ea5e:	bd 01       	movw	r22, r26
    ea60:	cf 01       	movw	r24, r30
    ea62:	0e 94 94 03 	call	0x728	; 0x728 <fseek2>
   fwrite2( fp, internal_ram_start, threadramsize );
    ea66:	8b 81       	ldd	r24, Y+3	; 0x03
    ea68:	9c 81       	ldd	r25, Y+4	; 0x04
    ea6a:	29 81       	ldd	r18, Y+1	; 0x01
    ea6c:	3a 81       	ldd	r19, Y+2	; 0x02
    ea6e:	ee 81       	ldd	r30, Y+6	; 0x06
    ea70:	ff 81       	ldd	r31, Y+7	; 0x07
    ea72:	ac 01       	movw	r20, r24
    ea74:	b9 01       	movw	r22, r18
    ea76:	cf 01       	movw	r24, r30
    ea78:	0e 94 e5 06 	call	0xdca	; 0xdca <fwrite2>
   fclose2( fp );
    ea7c:	8e 81       	ldd	r24, Y+6	; 0x06
    ea7e:	9f 81       	ldd	r25, Y+7	; 0x07
    ea80:	0e 94 77 03 	call	0x6ee	; 0x6ee <fclose2>
    ea84:	2a 96       	adiw	r28, 0x0a	; 10
    ea86:	0f b6       	in	r0, 0x3f	; 63
    ea88:	f8 94       	cli
    ea8a:	de bf       	out	0x3e, r29	; 62
    ea8c:	0f be       	out	0x3f, r0	; 63
    ea8e:	cd bf       	out	0x3d, r28	; 61
    ea90:	df 91       	pop	r29
    ea92:	cf 91       	pop	r28
    ea94:	08 95       	ret

0000ea96 <reply_thread_state_snapshot_tofile>:
}

//this should copy the thread information into a file 
//The packet should contain the information regarding the user 
//THe packet should contain the index of the thread and the file name that will be written as the new file 
//the file name part requires careful debugging of the file system 
void reply_thread_state_snapshot_tofile( uint8_t *receivebuffer ) {
    ea96:	cf 93       	push	r28
    ea98:	df 93       	push	r29
    ea9a:	cd b7       	in	r28, 0x3d	; 61
    ea9c:	de b7       	in	r29, 0x3e	; 62
    ea9e:	24 97       	sbiw	r28, 0x04	; 4
    eaa0:	0f b6       	in	r0, 0x3f	; 63
    eaa2:	f8 94       	cli
    eaa4:	de bf       	out	0x3e, r29	; 62
    eaa6:	0f be       	out	0x3f, r0	; 63
    eaa8:	cd bf       	out	0x3d, r28	; 61
    eaaa:	9c 83       	std	Y+4, r25	; 0x04
    eaac:	8b 83       	std	Y+3, r24	; 0x03
   uint8_t i;
   uint8_t testtrue = 0;
    eaae:	19 82       	std	Y+1, r1	; 0x01
   receivebuffer[ receivebuffer[ 0] ] = '\0';
    eab0:	eb 81       	ldd	r30, Y+3	; 0x03
    eab2:	fc 81       	ldd	r31, Y+4	; 0x04
    eab4:	80 81       	ld	r24, Z
    eab6:	99 27       	eor	r25, r25
    eab8:	9c 01       	movw	r18, r24
    eaba:	8b 81       	ldd	r24, Y+3	; 0x03
    eabc:	9c 81       	ldd	r25, Y+4	; 0x04
    eabe:	f9 01       	movw	r30, r18
    eac0:	e8 0f       	add	r30, r24
    eac2:	f9 1f       	adc	r31, r25
    eac4:	10 82       	st	Z, r1
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
    eac6:	1a 82       	std	Y+2, r1	; 0x02
    eac8:	32 c0       	rjmp	.+100    	; 0xeb2e <reply_thread_state_snapshot_tofile+0x98>
      if ( thread_table[ i ].state != STATE_NULL ) {
    eaca:	8a 81       	ldd	r24, Y+2	; 0x02
    eacc:	28 2f       	mov	r18, r24
    eace:	33 27       	eor	r19, r19
    ead0:	85 e2       	ldi	r24, 0x25	; 37
    ead2:	90 e0       	ldi	r25, 0x00	; 0
    ead4:	ac 01       	movw	r20, r24
    ead6:	24 9f       	mul	r18, r20
    ead8:	c0 01       	movw	r24, r0
    eada:	25 9f       	mul	r18, r21
    eadc:	90 0d       	add	r25, r0
    eade:	34 9f       	mul	r19, r20
    eae0:	90 0d       	add	r25, r0
    eae2:	11 24       	eor	r1, r1
    eae4:	fc 01       	movw	r30, r24
    eae6:	e2 52       	subi	r30, 0x22	; 34
    eae8:	f7 4f       	sbci	r31, 0xF7	; 247
    eaea:	80 81       	ld	r24, Z
    eaec:	88 23       	and	r24, r24
    eaee:	e1 f0       	breq	.+56     	; 0xeb28 <reply_thread_state_snapshot_tofile+0x92>
         if ( superstring( (char*) thread_table[ i ].threadName, ( char* )& receivebuffer[ 5 ] ) == 0 ) {
    eaf0:	8b 81       	ldd	r24, Y+3	; 0x03
    eaf2:	9c 81       	ldd	r25, Y+4	; 0x04
    eaf4:	05 96       	adiw	r24, 0x05	; 5
    eaf6:	ac 01       	movw	r20, r24
    eaf8:	8a 81       	ldd	r24, Y+2	; 0x02
    eafa:	28 2f       	mov	r18, r24
    eafc:	33 27       	eor	r19, r19
    eafe:	85 e2       	ldi	r24, 0x25	; 37
    eb00:	90 e0       	ldi	r25, 0x00	; 0
    eb02:	bc 01       	movw	r22, r24
    eb04:	26 9f       	mul	r18, r22
    eb06:	c0 01       	movw	r24, r0
    eb08:	27 9f       	mul	r18, r23
    eb0a:	90 0d       	add	r25, r0
    eb0c:	36 9f       	mul	r19, r22
    eb0e:	90 0d       	add	r25, r0
    eb10:	11 24       	eor	r1, r1
    eb12:	05 96       	adiw	r24, 0x05	; 5
    eb14:	84 52       	subi	r24, 0x24	; 36
    eb16:	97 4f       	sbci	r25, 0xF7	; 247
    eb18:	ba 01       	movw	r22, r20
    eb1a:	0e 94 e5 9a 	call	0x135ca	; 0x135ca <superstring>
    eb1e:	00 97       	sbiw	r24, 0x00	; 0
    eb20:	19 f4       	brne	.+6      	; 0xeb28 <reply_thread_state_snapshot_tofile+0x92>
            testtrue = i;
    eb22:	8a 81       	ldd	r24, Y+2	; 0x02
    eb24:	89 83       	std	Y+1, r24	; 0x01
            break;
    eb26:	06 c0       	rjmp	.+12     	; 0xeb34 <reply_thread_state_snapshot_tofile+0x9e>
    eb28:	8a 81       	ldd	r24, Y+2	; 0x02
    eb2a:	8f 5f       	subi	r24, 0xFF	; 255
    eb2c:	8a 83       	std	Y+2, r24	; 0x02
    eb2e:	8a 81       	ldd	r24, Y+2	; 0x02
    eb30:	88 30       	cpi	r24, 0x08	; 8
    eb32:	58 f2       	brcs	.-106    	; 0xeaca <reply_thread_state_snapshot_tofile+0x34>
         } 
      }
   }
   if ( testtrue != 0 ) {
    eb34:	89 81       	ldd	r24, Y+1	; 0x01
    eb36:	88 23       	and	r24, r24
    eb38:	f9 f0       	breq	.+62     	; 0xeb78 <reply_thread_state_snapshot_tofile+0xe2>
      receivebuffer[ receivebuffer[ 3 ] + 5 ] = '/';
    eb3a:	8b 81       	ldd	r24, Y+3	; 0x03
    eb3c:	9c 81       	ldd	r25, Y+4	; 0x04
    eb3e:	fc 01       	movw	r30, r24
    eb40:	33 96       	adiw	r30, 0x03	; 3
    eb42:	80 81       	ld	r24, Z
    eb44:	99 27       	eor	r25, r25
    eb46:	9c 01       	movw	r18, r24
    eb48:	8b 81       	ldd	r24, Y+3	; 0x03
    eb4a:	9c 81       	ldd	r25, Y+4	; 0x04
    eb4c:	82 0f       	add	r24, r18
    eb4e:	93 1f       	adc	r25, r19
    eb50:	fc 01       	movw	r30, r24
    eb52:	35 96       	adiw	r30, 0x05	; 5
    eb54:	8f e2       	ldi	r24, 0x2F	; 47
    eb56:	80 83       	st	Z, r24
      thread_state_snapshot( testtrue, ( uint8_t* )& receivebuffer[ receivebuffer[ 3 ] + 5 ] );
    eb58:	8b 81       	ldd	r24, Y+3	; 0x03
    eb5a:	9c 81       	ldd	r25, Y+4	; 0x04
    eb5c:	fc 01       	movw	r30, r24
    eb5e:	33 96       	adiw	r30, 0x03	; 3
    eb60:	80 81       	ld	r24, Z
    eb62:	99 27       	eor	r25, r25
    eb64:	9c 01       	movw	r18, r24
    eb66:	8b 81       	ldd	r24, Y+3	; 0x03
    eb68:	9c 81       	ldd	r25, Y+4	; 0x04
    eb6a:	82 0f       	add	r24, r18
    eb6c:	93 1f       	adc	r25, r19
    eb6e:	05 96       	adiw	r24, 0x05	; 5
    eb70:	bc 01       	movw	r22, r24
    eb72:	89 81       	ldd	r24, Y+1	; 0x01
    eb74:	0e 94 b5 74 	call	0xe96a	; 0xe96a <thread_state_snapshot>
   }
   reply[ 0 ] = 4;
    eb78:	84 e0       	ldi	r24, 0x04	; 4
    eb7a:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 94;
    eb7e:	8e e5       	ldi	r24, 0x5E	; 94
    eb80:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    eb84:	80 91 5b 07 	lds	r24, 0x075B
    eb88:	90 91 5c 07 	lds	r25, 0x075C
    eb8c:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = testtrue;
    eb90:	89 81       	ldd	r24, Y+1	; 0x01
    eb92:	80 93 f0 06 	sts	0x06F0, r24
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    eb96:	8d ee       	ldi	r24, 0xED	; 237
    eb98:	96 e0       	ldi	r25, 0x06	; 6
    eb9a:	9c 01       	movw	r18, r24
    eb9c:	40 e2       	ldi	r20, 0x20	; 32
    eb9e:	6f ef       	ldi	r22, 0xFF	; 255
    eba0:	7f ef       	ldi	r23, 0xFF	; 255
    eba2:	8f ee       	ldi	r24, 0xEF	; 239
    eba4:	9f ee       	ldi	r25, 0xEF	; 239
    eba6:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    ebaa:	24 96       	adiw	r28, 0x04	; 4
    ebac:	0f b6       	in	r0, 0x3f	; 63
    ebae:	f8 94       	cli
    ebb0:	de bf       	out	0x3e, r29	; 62
    ebb2:	0f be       	out	0x3f, r0	; 63
    ebb4:	cd bf       	out	0x3d, r28	; 61
    ebb6:	df 91       	pop	r29
    ebb8:	cf 91       	pop	r28
    ebba:	08 95       	ret

0000ebbc <reply_thread_state_restore_fromfile>:
}

//this should copy the thread information from the file to the thread
//the packet should ocntain the file name as well as the index of the thread to be restored
//note that it will check the file size to ensure that is sufficient information for the thread to be restored
void reply_thread_state_restore_fromfile( uint8_t *receivebuffer ) {
    ebbc:	cf 93       	push	r28
    ebbe:	df 93       	push	r29
    ebc0:	cd b7       	in	r28, 0x3d	; 61
    ebc2:	de b7       	in	r29, 0x3e	; 62
    ebc4:	24 97       	sbiw	r28, 0x04	; 4
    ebc6:	0f b6       	in	r0, 0x3f	; 63
    ebc8:	f8 94       	cli
    ebca:	de bf       	out	0x3e, r29	; 62
    ebcc:	0f be       	out	0x3f, r0	; 63
    ebce:	cd bf       	out	0x3d, r28	; 61
    ebd0:	9c 83       	std	Y+4, r25	; 0x04
    ebd2:	8b 83       	std	Y+3, r24	; 0x03
   uint8_t i;
   uint8_t testtrue = 0;
    ebd4:	19 82       	std	Y+1, r1	; 0x01
   receivebuffer[ receivebuffer[ 0] ] = '\0';
    ebd6:	eb 81       	ldd	r30, Y+3	; 0x03
    ebd8:	fc 81       	ldd	r31, Y+4	; 0x04
    ebda:	80 81       	ld	r24, Z
    ebdc:	99 27       	eor	r25, r25
    ebde:	9c 01       	movw	r18, r24
    ebe0:	8b 81       	ldd	r24, Y+3	; 0x03
    ebe2:	9c 81       	ldd	r25, Y+4	; 0x04
    ebe4:	f9 01       	movw	r30, r18
    ebe6:	e8 0f       	add	r30, r24
    ebe8:	f9 1f       	adc	r31, r25
    ebea:	10 82       	st	Z, r1
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
    ebec:	1a 82       	std	Y+2, r1	; 0x02
    ebee:	32 c0       	rjmp	.+100    	; 0xec54 <reply_thread_state_restore_fromfile+0x98>
      if ( thread_table[ i ].state != STATE_NULL ) {
    ebf0:	8a 81       	ldd	r24, Y+2	; 0x02
    ebf2:	28 2f       	mov	r18, r24
    ebf4:	33 27       	eor	r19, r19
    ebf6:	85 e2       	ldi	r24, 0x25	; 37
    ebf8:	90 e0       	ldi	r25, 0x00	; 0
    ebfa:	ac 01       	movw	r20, r24
    ebfc:	24 9f       	mul	r18, r20
    ebfe:	c0 01       	movw	r24, r0
    ec00:	25 9f       	mul	r18, r21
    ec02:	90 0d       	add	r25, r0
    ec04:	34 9f       	mul	r19, r20
    ec06:	90 0d       	add	r25, r0
    ec08:	11 24       	eor	r1, r1
    ec0a:	fc 01       	movw	r30, r24
    ec0c:	e2 52       	subi	r30, 0x22	; 34
    ec0e:	f7 4f       	sbci	r31, 0xF7	; 247
    ec10:	80 81       	ld	r24, Z
    ec12:	88 23       	and	r24, r24
    ec14:	e1 f0       	breq	.+56     	; 0xec4e <reply_thread_state_restore_fromfile+0x92>
         if ( superstring( (char *) thread_table[ i ].threadName, ( char* )& receivebuffer[ 5 ] ) == 0 ) {
    ec16:	8b 81       	ldd	r24, Y+3	; 0x03
    ec18:	9c 81       	ldd	r25, Y+4	; 0x04
    ec1a:	05 96       	adiw	r24, 0x05	; 5
    ec1c:	ac 01       	movw	r20, r24
    ec1e:	8a 81       	ldd	r24, Y+2	; 0x02
    ec20:	28 2f       	mov	r18, r24
    ec22:	33 27       	eor	r19, r19
    ec24:	85 e2       	ldi	r24, 0x25	; 37
    ec26:	90 e0       	ldi	r25, 0x00	; 0
    ec28:	bc 01       	movw	r22, r24
    ec2a:	26 9f       	mul	r18, r22
    ec2c:	c0 01       	movw	r24, r0
    ec2e:	27 9f       	mul	r18, r23
    ec30:	90 0d       	add	r25, r0
    ec32:	36 9f       	mul	r19, r22
    ec34:	90 0d       	add	r25, r0
    ec36:	11 24       	eor	r1, r1
    ec38:	05 96       	adiw	r24, 0x05	; 5
    ec3a:	84 52       	subi	r24, 0x24	; 36
    ec3c:	97 4f       	sbci	r25, 0xF7	; 247
    ec3e:	ba 01       	movw	r22, r20
    ec40:	0e 94 e5 9a 	call	0x135ca	; 0x135ca <superstring>
    ec44:	00 97       	sbiw	r24, 0x00	; 0
    ec46:	19 f4       	brne	.+6      	; 0xec4e <reply_thread_state_restore_fromfile+0x92>
            testtrue = i;
    ec48:	8a 81       	ldd	r24, Y+2	; 0x02
    ec4a:	89 83       	std	Y+1, r24	; 0x01
            break;
    ec4c:	06 c0       	rjmp	.+12     	; 0xec5a <reply_thread_state_restore_fromfile+0x9e>
    ec4e:	8a 81       	ldd	r24, Y+2	; 0x02
    ec50:	8f 5f       	subi	r24, 0xFF	; 255
    ec52:	8a 83       	std	Y+2, r24	; 0x02
    ec54:	8a 81       	ldd	r24, Y+2	; 0x02
    ec56:	88 30       	cpi	r24, 0x08	; 8
    ec58:	58 f2       	brcs	.-106    	; 0xebf0 <reply_thread_state_restore_fromfile+0x34>
         }
      }
   }
   i = receivebuffer[ 3 ];
    ec5a:	8b 81       	ldd	r24, Y+3	; 0x03
    ec5c:	9c 81       	ldd	r25, Y+4	; 0x04
    ec5e:	fc 01       	movw	r30, r24
    ec60:	33 96       	adiw	r30, 0x03	; 3
    ec62:	80 81       	ld	r24, Z
    ec64:	8a 83       	std	Y+2, r24	; 0x02
   receivebuffer[ 5+i ] = '/';
    ec66:	8a 81       	ldd	r24, Y+2	; 0x02
    ec68:	99 27       	eor	r25, r25
    ec6a:	9c 01       	movw	r18, r24
    ec6c:	8b 81       	ldd	r24, Y+3	; 0x03
    ec6e:	9c 81       	ldd	r25, Y+4	; 0x04
    ec70:	82 0f       	add	r24, r18
    ec72:	93 1f       	adc	r25, r19
    ec74:	fc 01       	movw	r30, r24
    ec76:	35 96       	adiw	r30, 0x05	; 5
    ec78:	8f e2       	ldi	r24, 0x2F	; 47
    ec7a:	80 83       	st	Z, r24
   if ( testtrue != 0 ) {
    ec7c:	89 81       	ldd	r24, Y+1	; 0x01
    ec7e:	88 23       	and	r24, r24
    ec80:	61 f0       	breq	.+24     	; 0xec9a <reply_thread_state_restore_fromfile+0xde>
      thread_state_restore( testtrue, ( uint8_t* )& receivebuffer[ 5+i ] );
    ec82:	8a 81       	ldd	r24, Y+2	; 0x02
    ec84:	99 27       	eor	r25, r25
    ec86:	9c 01       	movw	r18, r24
    ec88:	8b 81       	ldd	r24, Y+3	; 0x03
    ec8a:	9c 81       	ldd	r25, Y+4	; 0x04
    ec8c:	82 0f       	add	r24, r18
    ec8e:	93 1f       	adc	r25, r19
    ec90:	05 96       	adiw	r24, 0x05	; 5
    ec92:	bc 01       	movw	r22, r24
    ec94:	89 81       	ldd	r24, Y+1	; 0x01
    ec96:	0e 94 1f 74 	call	0xe83e	; 0xe83e <thread_state_restore>
   } 
   reply[ 0 ] = 4;
    ec9a:	84 e0       	ldi	r24, 0x04	; 4
    ec9c:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 95;
    eca0:	8f e5       	ldi	r24, 0x5F	; 95
    eca2:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    eca6:	80 91 5b 07 	lds	r24, 0x075B
    ecaa:	90 91 5c 07 	lds	r25, 0x075C
    ecae:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = testtrue;
    ecb2:	89 81       	ldd	r24, Y+1	; 0x01
    ecb4:	80 93 f0 06 	sts	0x06F0, r24
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    ecb8:	8d ee       	ldi	r24, 0xED	; 237
    ecba:	96 e0       	ldi	r25, 0x06	; 6
    ecbc:	9c 01       	movw	r18, r24
    ecbe:	40 e2       	ldi	r20, 0x20	; 32
    ecc0:	6f ef       	ldi	r22, 0xFF	; 255
    ecc2:	7f ef       	ldi	r23, 0xFF	; 255
    ecc4:	8f ee       	ldi	r24, 0xEF	; 239
    ecc6:	9f ee       	ldi	r25, 0xEF	; 239
    ecc8:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    eccc:	24 96       	adiw	r28, 0x04	; 4
    ecce:	0f b6       	in	r0, 0x3f	; 63
    ecd0:	f8 94       	cli
    ecd2:	de bf       	out	0x3e, r29	; 62
    ecd4:	0f be       	out	0x3f, r0	; 63
    ecd6:	cd bf       	out	0x3d, r28	; 61
    ecd8:	df 91       	pop	r29
    ecda:	cf 91       	pop	r28
    ecdc:	08 95       	ret

0000ecde <reply_ls_networkname>:
}

//-------------------------------------------------------------------------
void reply_ls_networkname() {
    ecde:	cf 93       	push	r28
    ece0:	df 93       	push	r29
    ece2:	cd b7       	in	r28, 0x3d	; 61
    ece4:	de b7       	in	r29, 0x3e	; 62
    ece6:	23 97       	sbiw	r28, 0x03	; 3
    ece8:	0f b6       	in	r0, 0x3f	; 63
    ecea:	f8 94       	cli
    ecec:	de bf       	out	0x3e, r29	; 62
    ecee:	0f be       	out	0x3f, r0	; 63
    ecf0:	cd bf       	out	0x3d, r28	; 61
   //   uint16_t temp2; 
   uint8_t temp = mystrlen( networkid );
    ecf2:	82 e8       	ldi	r24, 0x82	; 130
    ecf4:	97 e0       	ldi	r25, 0x07	; 7
    ecf6:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    ecfa:	8b 83       	std	Y+3, r24	; 0x03
   uint16_t randomsleep;
   reply[ 0 ] = temp + 3;
    ecfc:	8b 81       	ldd	r24, Y+3	; 0x03
    ecfe:	8d 5f       	subi	r24, 0xFD	; 253
    ed00:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 101;
    ed04:	85 e6       	ldi	r24, 0x65	; 101
    ed06:	80 93 ee 06 	sts	0x06EE, r24
   //   foobar(); 
   reply[ 2 ] = nodeid;
    ed0a:	80 91 5b 07 	lds	r24, 0x075B
    ed0e:	90 91 5c 07 	lds	r25, 0x075C
    ed12:	80 93 ef 06 	sts	0x06EF, r24
   mystrncpy( (char*)&reply[ 3 ], networkid, temp );
    ed16:	80 ef       	ldi	r24, 0xF0	; 240
    ed18:	96 e0       	ldi	r25, 0x06	; 6
    ed1a:	9c 01       	movw	r18, r24
    ed1c:	82 e8       	ldi	r24, 0x82	; 130
    ed1e:	97 e0       	ldi	r25, 0x07	; 7
    ed20:	4b 81       	ldd	r20, Y+3	; 0x03
    ed22:	bc 01       	movw	r22, r24
    ed24:	c9 01       	movw	r24, r18
    ed26:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
   randomsleep = getRandomNumber() % 400;
    ed2a:	0e 94 f2 9c 	call	0x139e4	; 0x139e4 <getRandomNumber>
    ed2e:	20 e9       	ldi	r18, 0x90	; 144
    ed30:	31 e0       	ldi	r19, 0x01	; 1
    ed32:	b9 01       	movw	r22, r18
    ed34:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <__udivmodhi4>
    ed38:	9a 83       	std	Y+2, r25	; 0x02
    ed3a:	89 83       	std	Y+1, r24	; 0x01
   sleepThread( randomsleep );
    ed3c:	89 81       	ldd	r24, Y+1	; 0x01
    ed3e:	9a 81       	ldd	r25, Y+2	; 0x02
    ed40:	0e 94 f9 93 	call	0x127f2	; 0x127f2 <sleepThread>
   // for (temp2=0;temp2<9000;temp2++)
   // {
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    ed44:	8d ee       	ldi	r24, 0xED	; 237
    ed46:	96 e0       	ldi	r25, 0x06	; 6
    ed48:	9c 01       	movw	r18, r24
    ed4a:	40 e2       	ldi	r20, 0x20	; 32
    ed4c:	6f ef       	ldi	r22, 0xFF	; 255
    ed4e:	7f ef       	ldi	r23, 0xFF	; 255
    ed50:	8f ee       	ldi	r24, 0xEF	; 239
    ed52:	9f ee       	ldi	r25, 0xEF	; 239
    ed54:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    ed58:	23 96       	adiw	r28, 0x03	; 3
    ed5a:	0f b6       	in	r0, 0x3f	; 63
    ed5c:	f8 94       	cli
    ed5e:	de bf       	out	0x3e, r29	; 62
    ed60:	0f be       	out	0x3f, r0	; 63
    ed62:	cd bf       	out	0x3d, r28	; 61
    ed64:	df 91       	pop	r29
    ed66:	cf 91       	pop	r28
    ed68:	08 95       	ret

0000ed6a <reply_ls_nodename>:
   // sleepThread(20);
   // }
   //   printStringN(reply,32); 
   //printString("hello,reply2!\n\0");
}

//-------------------------------------------------------------------------
void reply_ls_nodename( uint8_t *receivebuffer ) {
    ed6a:	0f 93       	push	r16
    ed6c:	cf 93       	push	r28
    ed6e:	df 93       	push	r29
    ed70:	cd b7       	in	r28, 0x3d	; 61
    ed72:	de b7       	in	r29, 0x3e	; 62
    ed74:	25 97       	sbiw	r28, 0x05	; 5
    ed76:	0f b6       	in	r0, 0x3f	; 63
    ed78:	f8 94       	cli
    ed7a:	de bf       	out	0x3e, r29	; 62
    ed7c:	0f be       	out	0x3f, r0	; 63
    ed7e:	cd bf       	out	0x3d, r28	; 61
    ed80:	9d 83       	std	Y+5, r25	; 0x05
    ed82:	8c 83       	std	Y+4, r24	; 0x04
   uint8_t temp = receivebuffer[ 0 ] - 3;
    ed84:	ec 81       	ldd	r30, Y+4	; 0x04
    ed86:	fd 81       	ldd	r31, Y+5	; 0x05
    ed88:	80 81       	ld	r24, Z
    ed8a:	83 50       	subi	r24, 0x03	; 3
    ed8c:	8b 83       	std	Y+3, r24	; 0x03
   uint16_t randomsleep;
   if ( mystrncmp(( char* )receivebuffer, 3, ( char* )networkid, 0, temp ) == 0 ) {
    ed8e:	ec 81       	ldd	r30, Y+4	; 0x04
    ed90:	fd 81       	ldd	r31, Y+5	; 0x05
    ed92:	82 e8       	ldi	r24, 0x82	; 130
    ed94:	97 e0       	ldi	r25, 0x07	; 7
    ed96:	0b 81       	ldd	r16, Y+3	; 0x03
    ed98:	20 e0       	ldi	r18, 0x00	; 0
    ed9a:	ac 01       	movw	r20, r24
    ed9c:	63 e0       	ldi	r22, 0x03	; 3
    ed9e:	cf 01       	movw	r24, r30
    eda0:	0e 94 3c 9b 	call	0x13678	; 0x13678 <mystrncmp>
    eda4:	00 97       	sbiw	r24, 0x00	; 0
    eda6:	99 f5       	brne	.+102    	; 0xee0e <reply_ls_nodename+0xa4>
      temp = mystrlen( filenameid );
    eda8:	8f e6       	ldi	r24, 0x6F	; 111
    edaa:	97 e0       	ldi	r25, 0x07	; 7
    edac:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    edb0:	8b 83       	std	Y+3, r24	; 0x03
      reply[ 0 ] = temp + 3;
    edb2:	8b 81       	ldd	r24, Y+3	; 0x03
    edb4:	8d 5f       	subi	r24, 0xFD	; 253
    edb6:	80 93 ed 06 	sts	0x06ED, r24
      reply[ 1 ] = 102;
    edba:	86 e6       	ldi	r24, 0x66	; 102
    edbc:	80 93 ee 06 	sts	0x06EE, r24
      reply[ 2 ] = nodeid;
    edc0:	80 91 5b 07 	lds	r24, 0x075B
    edc4:	90 91 5c 07 	lds	r25, 0x075C
    edc8:	80 93 ef 06 	sts	0x06EF, r24
      mystrncpy( (char *)&reply[ 3 ], filenameid, temp );
    edcc:	80 ef       	ldi	r24, 0xF0	; 240
    edce:	96 e0       	ldi	r25, 0x06	; 6
    edd0:	9c 01       	movw	r18, r24
    edd2:	8f e6       	ldi	r24, 0x6F	; 111
    edd4:	97 e0       	ldi	r25, 0x07	; 7
    edd6:	4b 81       	ldd	r20, Y+3	; 0x03
    edd8:	bc 01       	movw	r22, r24
    edda:	c9 01       	movw	r24, r18
    eddc:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
      randomsleep = getRandomNumber() % 400;
    ede0:	0e 94 f2 9c 	call	0x139e4	; 0x139e4 <getRandomNumber>
    ede4:	20 e9       	ldi	r18, 0x90	; 144
    ede6:	31 e0       	ldi	r19, 0x01	; 1
    ede8:	b9 01       	movw	r22, r18
    edea:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <__udivmodhi4>
    edee:	9a 83       	std	Y+2, r25	; 0x02
    edf0:	89 83       	std	Y+1, r24	; 0x01
      sleepThread( randomsleep );
    edf2:	89 81       	ldd	r24, Y+1	; 0x01
    edf4:	9a 81       	ldd	r25, Y+2	; 0x02
    edf6:	0e 94 f9 93 	call	0x127f2	; 0x127f2 <sleepThread>
      StandardSocketSend( 0xefef, 0xffff, 32, reply );
    edfa:	8d ee       	ldi	r24, 0xED	; 237
    edfc:	96 e0       	ldi	r25, 0x06	; 6
    edfe:	9c 01       	movw	r18, r24
    ee00:	40 e2       	ldi	r20, 0x20	; 32
    ee02:	6f ef       	ldi	r22, 0xFF	; 255
    ee04:	7f ef       	ldi	r23, 0xFF	; 255
    ee06:	8f ee       	ldi	r24, 0xEF	; 239
    ee08:	9f ee       	ldi	r25, 0xEF	; 239
    ee0a:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    ee0e:	25 96       	adiw	r28, 0x05	; 5
    ee10:	0f b6       	in	r0, 0x3f	; 63
    ee12:	f8 94       	cli
    ee14:	de bf       	out	0x3e, r29	; 62
    ee16:	0f be       	out	0x3f, r0	; 63
    ee18:	cd bf       	out	0x3d, r28	; 61
    ee1a:	df 91       	pop	r29
    ee1c:	cf 91       	pop	r28
    ee1e:	0f 91       	pop	r16
    ee20:	08 95       	ret

0000ee22 <reply_ls_short>:
      //printStringN(reply,32); 
   }
}
//Get the block information of sub directory and files using simplfied version 
void reply_ls_short( uint8_t block ) {
    ee22:	cf 93       	push	r28
    ee24:	df 93       	push	r29
    ee26:	cd b7       	in	r28, 0x3d	; 61
    ee28:	de b7       	in	r29, 0x3e	; 62
    ee2a:	21 97       	sbiw	r28, 0x01	; 1
    ee2c:	0f b6       	in	r0, 0x3f	; 63
    ee2e:	f8 94       	cli
    ee30:	de bf       	out	0x3e, r29	; 62
    ee32:	0f be       	out	0x3f, r0	; 63
    ee34:	cd bf       	out	0x3d, r28	; 61
    ee36:	89 83       	std	Y+1, r24	; 0x01
    ee38:	21 96       	adiw	r28, 0x01	; 1
    ee3a:	0f b6       	in	r0, 0x3f	; 63
    ee3c:	f8 94       	cli
    ee3e:	de bf       	out	0x3e, r29	; 62
    ee40:	0f be       	out	0x3f, r0	; 63
    ee42:	cd bf       	out	0x3d, r28	; 61
    ee44:	df 91       	pop	r29
    ee46:	cf 91       	pop	r28
    ee48:	08 95       	ret

0000ee4a <reply_ls_long>:
   //Actually this is not used because to ensure that the system is simple, we only use the long version 
   return ;
}
//Get the block information of sub directory and files using long version 
void reply_ls_long( uint8_t block ) {
    ee4a:	cf 93       	push	r28
    ee4c:	df 93       	push	r29
    ee4e:	cd b7       	in	r28, 0x3d	; 61
    ee50:	de b7       	in	r29, 0x3e	; 62
    ee52:	24 97       	sbiw	r28, 0x04	; 4
    ee54:	0f b6       	in	r0, 0x3f	; 63
    ee56:	f8 94       	cli
    ee58:	de bf       	out	0x3e, r29	; 62
    ee5a:	0f be       	out	0x3f, r0	; 63
    ee5c:	cd bf       	out	0x3d, r28	; 61
    ee5e:	8c 83       	std	Y+4, r24	; 0x04
   uint8_t blockindex;
   uint8_t childblock;
   uint8_t seq = 0;
    ee60:	19 82       	std	Y+1, r1	; 0x01
   if ( openedfile != NULL ) {
    ee62:	80 91 d0 06 	lds	r24, 0x06D0
    ee66:	90 91 d1 06 	lds	r25, 0x06D1
    ee6a:	00 97       	sbiw	r24, 0x00	; 0
    ee6c:	21 f0       	breq	.+8      	; 0xee76 <reply_ls_long+0x2c>
      //fclose2( openedfile );
       openedfile = NULL; 
    ee6e:	10 92 d1 06 	sts	0x06D1, r1
    ee72:	10 92 d0 06 	sts	0x06D0, r1
   
   } 
   for ( blockindex = 0; blockindex < 10; blockindex ++ ) {
    ee76:	1b 82       	std	Y+3, r1	; 0x03
    ee78:	38 c0       	rjmp	.+112    	; 0xeeea <reply_ls_long+0xa0>
      childblock = fsread8uint( block, DIR_ADDRSUBOFFSET + blockindex );
    ee7a:	8b 81       	ldd	r24, Y+3	; 0x03
    ee7c:	99 27       	eor	r25, r25
    ee7e:	9c 01       	movw	r18, r24
    ee80:	22 5f       	subi	r18, 0xF2	; 242
    ee82:	3f 4f       	sbci	r19, 0xFF	; 255
    ee84:	8c 81       	ldd	r24, Y+4	; 0x04
    ee86:	99 27       	eor	r25, r25
    ee88:	b9 01       	movw	r22, r18
    ee8a:	0e 94 28 0c 	call	0x1850	; 0x1850 <fsread8uint>
    ee8e:	8a 83       	std	Y+2, r24	; 0x02
      if ( childblock == 0 ) {
    ee90:	8a 81       	ldd	r24, Y+2	; 0x02
    ee92:	88 23       	and	r24, r24
    ee94:	39 f1       	breq	.+78     	; 0xeee4 <reply_ls_long+0x9a>
         continue;
      } 
      reply[ 0 ] = 32;
    ee96:	80 e2       	ldi	r24, 0x20	; 32
    ee98:	80 93 ed 06 	sts	0x06ED, r24
      reply[ 1 ] = 104;
    ee9c:	88 e6       	ldi	r24, 0x68	; 104
    ee9e:	80 93 ee 06 	sts	0x06EE, r24
      reply[ 2 ] = nodeid;
    eea2:	80 91 5b 07 	lds	r24, 0x075B
    eea6:	90 91 5c 07 	lds	r25, 0x075C
    eeaa:	80 93 ef 06 	sts	0x06EF, r24
      reply[ 3 ] = childblock;
    eeae:	8a 81       	ldd	r24, Y+2	; 0x02
    eeb0:	80 93 f0 06 	sts	0x06F0, r24
      reply[ 4 ] = seq;
    eeb4:	89 81       	ldd	r24, Y+1	; 0x01
    eeb6:	80 93 f1 06 	sts	0x06F1, r24
      seq ++;
    eeba:	89 81       	ldd	r24, Y+1	; 0x01
    eebc:	8f 5f       	subi	r24, 0xFF	; 255
    eebe:	89 83       	std	Y+1, r24	; 0x01
      finfonode( (char*) &reply[ 5 ], ( int )childblock );
    eec0:	8a 81       	ldd	r24, Y+2	; 0x02
    eec2:	28 2f       	mov	r18, r24
    eec4:	33 27       	eor	r19, r19
    eec6:	82 ef       	ldi	r24, 0xF2	; 242
    eec8:	96 e0       	ldi	r25, 0x06	; 6
    eeca:	b9 01       	movw	r22, r18
    eecc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <finfonode>
      StandardSocketSend( 0xefef, 0xffff, 32, reply );
    eed0:	8d ee       	ldi	r24, 0xED	; 237
    eed2:	96 e0       	ldi	r25, 0x06	; 6
    eed4:	9c 01       	movw	r18, r24
    eed6:	40 e2       	ldi	r20, 0x20	; 32
    eed8:	6f ef       	ldi	r22, 0xFF	; 255
    eeda:	7f ef       	ldi	r23, 0xFF	; 255
    eedc:	8f ee       	ldi	r24, 0xEF	; 239
    eede:	9f ee       	ldi	r25, 0xEF	; 239
    eee0:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    eee4:	8b 81       	ldd	r24, Y+3	; 0x03
    eee6:	8f 5f       	subi	r24, 0xFF	; 255
    eee8:	8b 83       	std	Y+3, r24	; 0x03
    eeea:	8b 81       	ldd	r24, Y+3	; 0x03
    eeec:	8a 30       	cpi	r24, 0x0A	; 10
    eeee:	28 f2       	brcs	.-118    	; 0xee7a <reply_ls_long+0x30>
    eef0:	24 96       	adiw	r28, 0x04	; 4
    eef2:	0f b6       	in	r0, 0x3f	; 63
    eef4:	f8 94       	cli
    eef6:	de bf       	out	0x3e, r29	; 62
    eef8:	0f be       	out	0x3f, r0	; 63
    eefa:	cd bf       	out	0x3d, r28	; 61
    eefc:	df 91       	pop	r29
    eefe:	cf 91       	pop	r28
    ef00:	08 95       	ret

0000ef02 <reply_mkdir>:
      //     printStringN(reply,32); 
   }
}

//-------------------------------------------------------------------------
void reply_mkdir( uint8_t *receivebuffer ) {
    ef02:	cf 93       	push	r28
    ef04:	df 93       	push	r29
    ef06:	cd b7       	in	r28, 0x3d	; 61
    ef08:	de b7       	in	r29, 0x3e	; 62
    ef0a:	61 97       	sbiw	r28, 0x11	; 17
    ef0c:	0f b6       	in	r0, 0x3f	; 63
    ef0e:	f8 94       	cli
    ef10:	de bf       	out	0x3e, r29	; 62
    ef12:	0f be       	out	0x3f, r0	; 63
    ef14:	cd bf       	out	0x3d, r28	; 61
    ef16:	99 8b       	std	Y+17, r25	; 0x11
    ef18:	88 8b       	std	Y+16, r24	; 0x10
   uint8_t blockid;
   char dirname[ 13 ];
   uint8_t newblockid;
   blockid = receivebuffer[ 3 ];
    ef1a:	88 89       	ldd	r24, Y+16	; 0x10
    ef1c:	99 89       	ldd	r25, Y+17	; 0x11
    ef1e:	fc 01       	movw	r30, r24
    ef20:	33 96       	adiw	r30, 0x03	; 3
    ef22:	80 81       	ld	r24, Z
    ef24:	8a 83       	std	Y+2, r24	; 0x02
   mystrncpy( dirname, (char *)&receivebuffer[ 4 ], receivebuffer[ 0 ] - 4 );
    ef26:	e8 89       	ldd	r30, Y+16	; 0x10
    ef28:	f9 89       	ldd	r31, Y+17	; 0x11
    ef2a:	80 81       	ld	r24, Z
    ef2c:	48 2f       	mov	r20, r24
    ef2e:	44 50       	subi	r20, 0x04	; 4
    ef30:	88 89       	ldd	r24, Y+16	; 0x10
    ef32:	99 89       	ldd	r25, Y+17	; 0x11
    ef34:	04 96       	adiw	r24, 0x04	; 4
    ef36:	9e 01       	movw	r18, r28
    ef38:	2d 5f       	subi	r18, 0xFD	; 253
    ef3a:	3f 4f       	sbci	r19, 0xFF	; 255
    ef3c:	bc 01       	movw	r22, r24
    ef3e:	c9 01       	movw	r24, r18
    ef40:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
   dirname[ receivebuffer[ 0 ] - 4 ] = '\0';
    ef44:	e8 89       	ldd	r30, Y+16	; 0x10
    ef46:	f9 89       	ldd	r31, Y+17	; 0x11
    ef48:	80 81       	ld	r24, Z
    ef4a:	99 27       	eor	r25, r25
    ef4c:	9c 01       	movw	r18, r24
    ef4e:	24 50       	subi	r18, 0x04	; 4
    ef50:	30 40       	sbci	r19, 0x00	; 0
    ef52:	ce 01       	movw	r24, r28
    ef54:	03 96       	adiw	r24, 0x03	; 3
    ef56:	fc 01       	movw	r30, r24
    ef58:	e2 0f       	add	r30, r18
    ef5a:	f3 1f       	adc	r31, r19
    ef5c:	10 82       	st	Z, r1
   newblockid = createDir( dirname, ( int )blockid );
    ef5e:	8a 81       	ldd	r24, Y+2	; 0x02
    ef60:	99 27       	eor	r25, r25
    ef62:	9e 01       	movw	r18, r28
    ef64:	2d 5f       	subi	r18, 0xFD	; 253
    ef66:	3f 4f       	sbci	r19, 0xFF	; 255
    ef68:	bc 01       	movw	r22, r24
    ef6a:	c9 01       	movw	r24, r18
    ef6c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <createDir>
    ef70:	89 83       	std	Y+1, r24	; 0x01
   reply[ 0 ] = 4;
    ef72:	84 e0       	ldi	r24, 0x04	; 4
    ef74:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 141;
    ef78:	8d e8       	ldi	r24, 0x8D	; 141
    ef7a:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    ef7e:	80 91 5b 07 	lds	r24, 0x075B
    ef82:	90 91 5c 07 	lds	r25, 0x075C
    ef86:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = newblockid;
    ef8a:	89 81       	ldd	r24, Y+1	; 0x01
    ef8c:	80 93 f0 06 	sts	0x06F0, r24
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    ef90:	8d ee       	ldi	r24, 0xED	; 237
    ef92:	96 e0       	ldi	r25, 0x06	; 6
    ef94:	9c 01       	movw	r18, r24
    ef96:	40 e2       	ldi	r20, 0x20	; 32
    ef98:	6f ef       	ldi	r22, 0xFF	; 255
    ef9a:	7f ef       	ldi	r23, 0xFF	; 255
    ef9c:	8f ee       	ldi	r24, 0xEF	; 239
    ef9e:	9f ee       	ldi	r25, 0xEF	; 239
    efa0:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    efa4:	61 96       	adiw	r28, 0x11	; 17
    efa6:	0f b6       	in	r0, 0x3f	; 63
    efa8:	f8 94       	cli
    efaa:	de bf       	out	0x3e, r29	; 62
    efac:	0f be       	out	0x3f, r0	; 63
    efae:	cd bf       	out	0x3d, r28	; 61
    efb0:	df 91       	pop	r29
    efb2:	cf 91       	pop	r28
    efb4:	08 95       	ret

0000efb6 <reply_cp_fromPCtoNode_type1>:
   // printStringN(reply,32); 	
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type1( uint8_t *receivebuffer ) {
    efb6:	cf 93       	push	r28
    efb8:	df 93       	push	r29
    efba:	cd b7       	in	r28, 0x3d	; 61
    efbc:	de b7       	in	r29, 0x3e	; 62
    efbe:	63 97       	sbiw	r28, 0x13	; 19
    efc0:	0f b6       	in	r0, 0x3f	; 63
    efc2:	f8 94       	cli
    efc4:	de bf       	out	0x3e, r29	; 62
    efc6:	0f be       	out	0x3f, r0	; 63
    efc8:	cd bf       	out	0x3d, r28	; 61
    efca:	9b 8b       	std	Y+19, r25	; 0x13
    efcc:	8a 8b       	std	Y+18, r24	; 0x12
   uint8_t blockid;
   char filename[ 13 ];
   int fid;
   uint8_t newblockid;
   blockid = receivebuffer[ 3 ];
    efce:	8a 89       	ldd	r24, Y+18	; 0x12
    efd0:	9b 89       	ldd	r25, Y+19	; 0x13
    efd2:	fc 01       	movw	r30, r24
    efd4:	33 96       	adiw	r30, 0x03	; 3
    efd6:	80 81       	ld	r24, Z
    efd8:	8c 83       	std	Y+4, r24	; 0x04
   mystrncpy( filename, (char *)&receivebuffer[ 4 ], receivebuffer[ 0 ] - 4 );
    efda:	ea 89       	ldd	r30, Y+18	; 0x12
    efdc:	fb 89       	ldd	r31, Y+19	; 0x13
    efde:	80 81       	ld	r24, Z
    efe0:	48 2f       	mov	r20, r24
    efe2:	44 50       	subi	r20, 0x04	; 4
    efe4:	8a 89       	ldd	r24, Y+18	; 0x12
    efe6:	9b 89       	ldd	r25, Y+19	; 0x13
    efe8:	04 96       	adiw	r24, 0x04	; 4
    efea:	9e 01       	movw	r18, r28
    efec:	2b 5f       	subi	r18, 0xFB	; 251
    efee:	3f 4f       	sbci	r19, 0xFF	; 255
    eff0:	bc 01       	movw	r22, r24
    eff2:	c9 01       	movw	r24, r18
    eff4:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
   filename[ receivebuffer[ 0 ] - 4 ] = '\0';
    eff8:	ea 89       	ldd	r30, Y+18	; 0x12
    effa:	fb 89       	ldd	r31, Y+19	; 0x13
    effc:	80 81       	ld	r24, Z
    effe:	99 27       	eor	r25, r25
    f000:	9c 01       	movw	r18, r24
    f002:	24 50       	subi	r18, 0x04	; 4
    f004:	30 40       	sbci	r19, 0x00	; 0
    f006:	ce 01       	movw	r24, r28
    f008:	05 96       	adiw	r24, 0x05	; 5
    f00a:	fc 01       	movw	r30, r24
    f00c:	e2 0f       	add	r30, r18
    f00e:	f3 1f       	adc	r31, r19
    f010:	10 82       	st	Z, r1
   newblockid = createFileFromDirectory( filename, ( int )blockid );
    f012:	8c 81       	ldd	r24, Y+4	; 0x04
    f014:	99 27       	eor	r25, r25
    f016:	9e 01       	movw	r18, r28
    f018:	2b 5f       	subi	r18, 0xFB	; 251
    f01a:	3f 4f       	sbci	r19, 0xFF	; 255
    f01c:	bc 01       	movw	r22, r24
    f01e:	c9 01       	movw	r24, r18
    f020:	0e 94 28 18 	call	0x3050	; 0x3050 <createFileFromDirectory>
    f024:	89 83       	std	Y+1, r24	; 0x01
   chunksequencenum = 0;
    f026:	10 92 12 07 	sts	0x0712, r1
    f02a:	10 92 11 07 	sts	0x0711, r1
   expectNextNum = 1;
    f02e:	81 e0       	ldi	r24, 0x01	; 1
    f030:	90 e0       	ldi	r25, 0x00	; 0
    f032:	90 93 10 07 	sts	0x0710, r25
    f036:	80 93 0f 07 	sts	0x070F, r24
   reply[ 0 ] = 4;
    f03a:	84 e0       	ldi	r24, 0x04	; 4
    f03c:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 121;
    f040:	89 e7       	ldi	r24, 0x79	; 121
    f042:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    f046:	80 91 5b 07 	lds	r24, 0x075B
    f04a:	90 91 5c 07 	lds	r25, 0x075C
    f04e:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = newblockid;
    f052:	89 81       	ldd	r24, Y+1	; 0x01
    f054:	80 93 f0 06 	sts	0x06F0, r24
   fid = getFreeFid();
    f058:	0e 94 1d 02 	call	0x43a	; 0x43a <getFreeFid>
    f05c:	9b 83       	std	Y+3, r25	; 0x03
    f05e:	8a 83       	std	Y+2, r24	; 0x02
   openFile( newblockid, fid, 2 );
    f060:	89 81       	ldd	r24, Y+1	; 0x01
    f062:	28 2f       	mov	r18, r24
    f064:	33 27       	eor	r19, r19
    f066:	8a 81       	ldd	r24, Y+2	; 0x02
    f068:	9b 81       	ldd	r25, Y+3	; 0x03
    f06a:	42 e0       	ldi	r20, 0x02	; 2
    f06c:	50 e0       	ldi	r21, 0x00	; 0
    f06e:	bc 01       	movw	r22, r24
    f070:	c9 01       	movw	r24, r18
    f072:	0e 94 f7 19 	call	0x33ee	; 0x33ee <openFile>
   openedfile = &fidtable[ fid ];
    f076:	8a 81       	ldd	r24, Y+2	; 0x02
    f078:	9b 81       	ldd	r25, Y+3	; 0x03
    f07a:	9c 01       	movw	r18, r24
    f07c:	22 0f       	add	r18, r18
    f07e:	33 1f       	adc	r19, r19
    f080:	c9 01       	movw	r24, r18
    f082:	88 0f       	add	r24, r24
    f084:	99 1f       	adc	r25, r25
    f086:	88 0f       	add	r24, r24
    f088:	99 1f       	adc	r25, r25
    f08a:	82 0f       	add	r24, r18
    f08c:	93 1f       	adc	r25, r19
    f08e:	81 5e       	subi	r24, 0xE1	; 225
    f090:	9b 4f       	sbci	r25, 0xFB	; 251
    f092:	90 93 d1 06 	sts	0x06D1, r25
    f096:	80 93 d0 06 	sts	0x06D0, r24
   // printStringN(reply,32); 	
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f09a:	8d ee       	ldi	r24, 0xED	; 237
    f09c:	96 e0       	ldi	r25, 0x06	; 6
    f09e:	9c 01       	movw	r18, r24
    f0a0:	40 e2       	ldi	r20, 0x20	; 32
    f0a2:	6f ef       	ldi	r22, 0xFF	; 255
    f0a4:	7f ef       	ldi	r23, 0xFF	; 255
    f0a6:	8f ee       	ldi	r24, 0xEF	; 239
    f0a8:	9f ee       	ldi	r25, 0xEF	; 239
    f0aa:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    f0ae:	63 96       	adiw	r28, 0x13	; 19
    f0b0:	0f b6       	in	r0, 0x3f	; 63
    f0b2:	f8 94       	cli
    f0b4:	de bf       	out	0x3e, r29	; 62
    f0b6:	0f be       	out	0x3f, r0	; 63
    f0b8:	cd bf       	out	0x3d, r28	; 61
    f0ba:	df 91       	pop	r29
    f0bc:	cf 91       	pop	r28
    f0be:	08 95       	ret

0000f0c0 <reply_cp_fromPCtoNode_type2>:
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type2( uint8_t *receivebuffer ) {
    f0c0:	cf 93       	push	r28
    f0c2:	df 93       	push	r29
    f0c4:	cd b7       	in	r28, 0x3d	; 61
    f0c6:	de b7       	in	r29, 0x3e	; 62
    f0c8:	24 97       	sbiw	r28, 0x04	; 4
    f0ca:	0f b6       	in	r0, 0x3f	; 63
    f0cc:	f8 94       	cli
    f0ce:	de bf       	out	0x3e, r29	; 62
    f0d0:	0f be       	out	0x3f, r0	; 63
    f0d2:	cd bf       	out	0x3d, r28	; 61
    f0d4:	9c 83       	std	Y+4, r25	; 0x04
    f0d6:	8b 83       	std	Y+3, r24	; 0x03
   uint16_t SyncNum;
   if ( receivebuffer[ 3 ] == 0xff ) {
    f0d8:	8b 81       	ldd	r24, Y+3	; 0x03
    f0da:	9c 81       	ldd	r25, Y+4	; 0x04
    f0dc:	fc 01       	movw	r30, r24
    f0de:	33 96       	adiw	r30, 0x03	; 3
    f0e0:	80 81       	ld	r24, Z
    f0e2:	8f 3f       	cpi	r24, 0xFF	; 255
    f0e4:	09 f0       	breq	.+2      	; 0xf0e8 <reply_cp_fromPCtoNode_type2+0x28>
    f0e6:	6c c0       	rjmp	.+216    	; 0xf1c0 <reply_cp_fromPCtoNode_type2+0x100>
      //now this is a sync
      SyncNum = (( uint16_t )receivebuffer[ 4 ] ) *256+receivebuffer[ 5 ];
    f0e8:	8b 81       	ldd	r24, Y+3	; 0x03
    f0ea:	9c 81       	ldd	r25, Y+4	; 0x04
    f0ec:	fc 01       	movw	r30, r24
    f0ee:	34 96       	adiw	r30, 0x04	; 4
    f0f0:	80 81       	ld	r24, Z
    f0f2:	99 27       	eor	r25, r25
    f0f4:	38 2f       	mov	r19, r24
    f0f6:	22 27       	eor	r18, r18
    f0f8:	8b 81       	ldd	r24, Y+3	; 0x03
    f0fa:	9c 81       	ldd	r25, Y+4	; 0x04
    f0fc:	fc 01       	movw	r30, r24
    f0fe:	35 96       	adiw	r30, 0x05	; 5
    f100:	80 81       	ld	r24, Z
    f102:	99 27       	eor	r25, r25
    f104:	82 0f       	add	r24, r18
    f106:	93 1f       	adc	r25, r19
    f108:	9a 83       	std	Y+2, r25	; 0x02
    f10a:	89 83       	std	Y+1, r24	; 0x01
      if ( SyncNum > expectNextNum - 1 ) {
    f10c:	80 91 0f 07 	lds	r24, 0x070F
    f110:	90 91 10 07 	lds	r25, 0x0710
    f114:	9c 01       	movw	r18, r24
    f116:	21 50       	subi	r18, 0x01	; 1
    f118:	30 40       	sbci	r19, 0x00	; 0
    f11a:	89 81       	ldd	r24, Y+1	; 0x01
    f11c:	9a 81       	ldd	r25, Y+2	; 0x02
    f11e:	28 17       	cp	r18, r24
    f120:	39 07       	cpc	r19, r25
    f122:	68 f5       	brcc	.+90     	; 0xf17e <reply_cp_fromPCtoNode_type2+0xbe>
         reply[ 0 ] = 7;
    f124:	87 e0       	ldi	r24, 0x07	; 7
    f126:	80 93 ed 06 	sts	0x06ED, r24
         reply[ 1 ] = 122;
    f12a:	8a e7       	ldi	r24, 0x7A	; 122
    f12c:	80 93 ee 06 	sts	0x06EE, r24
         reply[ 2 ] = nodeid;
    f130:	80 91 5b 07 	lds	r24, 0x075B
    f134:	90 91 5c 07 	lds	r25, 0x075C
    f138:	80 93 ef 06 	sts	0x06EF, r24
         reply[ 3 ] = 15;
    f13c:	8f e0       	ldi	r24, 0x0F	; 15
    f13e:	80 93 f0 06 	sts	0x06F0, r24
         reply[ 4 ] = 15;
    f142:	8f e0       	ldi	r24, 0x0F	; 15
    f144:	80 93 f1 06 	sts	0x06F1, r24
         reply[ 5 ] = ( expectNextNum - 1 ) / 256;
    f148:	80 91 0f 07 	lds	r24, 0x070F
    f14c:	90 91 10 07 	lds	r25, 0x0710
    f150:	01 97       	sbiw	r24, 0x01	; 1
    f152:	89 2f       	mov	r24, r25
    f154:	99 27       	eor	r25, r25
    f156:	80 93 f2 06 	sts	0x06F2, r24
         reply[ 6 ] = ( expectNextNum - 1 ) % 256;
    f15a:	80 91 0f 07 	lds	r24, 0x070F
    f15e:	90 91 10 07 	lds	r25, 0x0710
    f162:	81 50       	subi	r24, 0x01	; 1
    f164:	80 93 f3 06 	sts	0x06F3, r24
         StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f168:	8d ee       	ldi	r24, 0xED	; 237
    f16a:	96 e0       	ldi	r25, 0x06	; 6
    f16c:	9c 01       	movw	r18, r24
    f16e:	40 e2       	ldi	r20, 0x20	; 32
    f170:	6f ef       	ldi	r22, 0xFF	; 255
    f172:	7f ef       	ldi	r23, 0xFF	; 255
    f174:	8f ee       	ldi	r24, 0xEF	; 239
    f176:	9f ee       	ldi	r25, 0xEF	; 239
    f178:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    f17c:	6e c0       	rjmp	.+220    	; 0xf25a <reply_cp_fromPCtoNode_type2+0x19a>
      } else {
         reply[ 0 ] = 7;
    f17e:	87 e0       	ldi	r24, 0x07	; 7
    f180:	80 93 ed 06 	sts	0x06ED, r24
         reply[ 1 ] = 122;
    f184:	8a e7       	ldi	r24, 0x7A	; 122
    f186:	80 93 ee 06 	sts	0x06EE, r24
         reply[ 2 ] = nodeid;
    f18a:	80 91 5b 07 	lds	r24, 0x075B
    f18e:	90 91 5c 07 	lds	r25, 0x075C
    f192:	80 93 ef 06 	sts	0x06EF, r24
         reply[ 3 ] = 15;
    f196:	8f e0       	ldi	r24, 0x0F	; 15
    f198:	80 93 f0 06 	sts	0x06F0, r24
         reply[ 4 ] = 15;
    f19c:	8f e0       	ldi	r24, 0x0F	; 15
    f19e:	80 93 f1 06 	sts	0x06F1, r24
         reply[ 5 ] = 0;
    f1a2:	10 92 f2 06 	sts	0x06F2, r1
         reply[ 6 ] = 0;
    f1a6:	10 92 f3 06 	sts	0x06F3, r1
         StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f1aa:	8d ee       	ldi	r24, 0xED	; 237
    f1ac:	96 e0       	ldi	r25, 0x06	; 6
    f1ae:	9c 01       	movw	r18, r24
    f1b0:	40 e2       	ldi	r20, 0x20	; 32
    f1b2:	6f ef       	ldi	r22, 0xFF	; 255
    f1b4:	7f ef       	ldi	r23, 0xFF	; 255
    f1b6:	8f ee       	ldi	r24, 0xEF	; 239
    f1b8:	9f ee       	ldi	r25, 0xEF	; 239
    f1ba:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
      }
      return ;
    f1be:	4d c0       	rjmp	.+154    	; 0xf25a <reply_cp_fromPCtoNode_type2+0x19a>
   }
   chunksequencenum = (( uint16_t )receivebuffer[ 4 ] ) *256+receivebuffer[ 5 ];
    f1c0:	8b 81       	ldd	r24, Y+3	; 0x03
    f1c2:	9c 81       	ldd	r25, Y+4	; 0x04
    f1c4:	fc 01       	movw	r30, r24
    f1c6:	34 96       	adiw	r30, 0x04	; 4
    f1c8:	80 81       	ld	r24, Z
    f1ca:	99 27       	eor	r25, r25
    f1cc:	38 2f       	mov	r19, r24
    f1ce:	22 27       	eor	r18, r18
    f1d0:	8b 81       	ldd	r24, Y+3	; 0x03
    f1d2:	9c 81       	ldd	r25, Y+4	; 0x04
    f1d4:	fc 01       	movw	r30, r24
    f1d6:	35 96       	adiw	r30, 0x05	; 5
    f1d8:	80 81       	ld	r24, Z
    f1da:	99 27       	eor	r25, r25
    f1dc:	82 0f       	add	r24, r18
    f1de:	93 1f       	adc	r25, r19
    f1e0:	90 93 12 07 	sts	0x0712, r25
    f1e4:	80 93 11 07 	sts	0x0711, r24
   if ( chunksequencenum != expectNextNum ) {
    f1e8:	20 91 11 07 	lds	r18, 0x0711
    f1ec:	30 91 12 07 	lds	r19, 0x0712
    f1f0:	80 91 0f 07 	lds	r24, 0x070F
    f1f4:	90 91 10 07 	lds	r25, 0x0710
    f1f8:	28 17       	cp	r18, r24
    f1fa:	39 07       	cpc	r19, r25
    f1fc:	71 f5       	brne	.+92     	; 0xf25a <reply_cp_fromPCtoNode_type2+0x19a>
      return ;
   } 
   fwrite2( openedfile, &receivebuffer[ 7 ], receivebuffer[ 6 ] );
    f1fe:	8b 81       	ldd	r24, Y+3	; 0x03
    f200:	9c 81       	ldd	r25, Y+4	; 0x04
    f202:	fc 01       	movw	r30, r24
    f204:	36 96       	adiw	r30, 0x06	; 6
    f206:	80 81       	ld	r24, Z
    f208:	48 2f       	mov	r20, r24
    f20a:	55 27       	eor	r21, r21
    f20c:	8b 81       	ldd	r24, Y+3	; 0x03
    f20e:	9c 81       	ldd	r25, Y+4	; 0x04
    f210:	07 96       	adiw	r24, 0x07	; 7
    f212:	20 91 d0 06 	lds	r18, 0x06D0
    f216:	30 91 d1 06 	lds	r19, 0x06D1
    f21a:	bc 01       	movw	r22, r24
    f21c:	c9 01       	movw	r24, r18
    f21e:	0e 94 e5 06 	call	0xdca	; 0xdca <fwrite2>
   fseek2( openedfile, receivebuffer[ 6 ], 1 );
    f222:	8b 81       	ldd	r24, Y+3	; 0x03
    f224:	9c 81       	ldd	r25, Y+4	; 0x04
    f226:	fc 01       	movw	r30, r24
    f228:	36 96       	adiw	r30, 0x06	; 6
    f22a:	80 81       	ld	r24, Z
    f22c:	99 27       	eor	r25, r25
    f22e:	aa 27       	eor	r26, r26
    f230:	bb 27       	eor	r27, r27
    f232:	e0 91 d0 06 	lds	r30, 0x06D0
    f236:	f0 91 d1 06 	lds	r31, 0x06D1
    f23a:	21 e0       	ldi	r18, 0x01	; 1
    f23c:	30 e0       	ldi	r19, 0x00	; 0
    f23e:	ac 01       	movw	r20, r24
    f240:	bd 01       	movw	r22, r26
    f242:	cf 01       	movw	r24, r30
    f244:	0e 94 94 03 	call	0x728	; 0x728 <fseek2>
   expectNextNum ++;
    f248:	80 91 0f 07 	lds	r24, 0x070F
    f24c:	90 91 10 07 	lds	r25, 0x0710
    f250:	01 96       	adiw	r24, 0x01	; 1
    f252:	90 93 10 07 	sts	0x0710, r25
    f256:	80 93 0f 07 	sts	0x070F, r24
    f25a:	24 96       	adiw	r28, 0x04	; 4
    f25c:	0f b6       	in	r0, 0x3f	; 63
    f25e:	f8 94       	cli
    f260:	de bf       	out	0x3e, r29	; 62
    f262:	0f be       	out	0x3f, r0	; 63
    f264:	cd bf       	out	0x3d, r28	; 61
    f266:	df 91       	pop	r29
    f268:	cf 91       	pop	r28
    f26a:	08 95       	ret

0000f26c <reply_cp_fromPCtoNode_type3>:
   // printStringN(reply,32); 	
   //StandardSocketSend(0xefef, 0xffff, 32, reply);
}

//-------------------------------------------------------------------------
void reply_cp_fromPCtoNode_type3() {
    f26c:	cf 93       	push	r28
    f26e:	df 93       	push	r29
    f270:	cd b7       	in	r28, 0x3d	; 61
    f272:	de b7       	in	r29, 0x3e	; 62
   fclose2( openedfile );
    f274:	80 91 d0 06 	lds	r24, 0x06D0
    f278:	90 91 d1 06 	lds	r25, 0x06D1
    f27c:	0e 94 77 03 	call	0x6ee	; 0x6ee <fclose2>
   // printStringN(reply,32); 	
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f280:	8d ee       	ldi	r24, 0xED	; 237
    f282:	96 e0       	ldi	r25, 0x06	; 6
    f284:	9c 01       	movw	r18, r24
    f286:	40 e2       	ldi	r20, 0x20	; 32
    f288:	6f ef       	ldi	r22, 0xFF	; 255
    f28a:	7f ef       	ldi	r23, 0xFF	; 255
    f28c:	8f ee       	ldi	r24, 0xEF	; 239
    f28e:	9f ee       	ldi	r25, 0xEF	; 239
    f290:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    f294:	df 91       	pop	r29
    f296:	cf 91       	pop	r28
    f298:	08 95       	ret

0000f29a <reply_touch>:
}

//-------------------------------------------------------------------------

void reply_touch( uint8_t *receivebuffer ) {
    f29a:	cf 93       	push	r28
    f29c:	df 93       	push	r29
    f29e:	cd b7       	in	r28, 0x3d	; 61
    f2a0:	de b7       	in	r29, 0x3e	; 62
    f2a2:	61 97       	sbiw	r28, 0x11	; 17
    f2a4:	0f b6       	in	r0, 0x3f	; 63
    f2a6:	f8 94       	cli
    f2a8:	de bf       	out	0x3e, r29	; 62
    f2aa:	0f be       	out	0x3f, r0	; 63
    f2ac:	cd bf       	out	0x3d, r28	; 61
    f2ae:	99 8b       	std	Y+17, r25	; 0x11
    f2b0:	88 8b       	std	Y+16, r24	; 0x10
   uint8_t blockid;
   char filename[ 13 ];
   uint8_t newblockid;
   blockid = receivebuffer[ 3 ];
    f2b2:	88 89       	ldd	r24, Y+16	; 0x10
    f2b4:	99 89       	ldd	r25, Y+17	; 0x11
    f2b6:	fc 01       	movw	r30, r24
    f2b8:	33 96       	adiw	r30, 0x03	; 3
    f2ba:	80 81       	ld	r24, Z
    f2bc:	8a 83       	std	Y+2, r24	; 0x02
   mystrncpy( filename, (char *)&receivebuffer[ 4 ], receivebuffer[ 0 ] - 4 );
    f2be:	e8 89       	ldd	r30, Y+16	; 0x10
    f2c0:	f9 89       	ldd	r31, Y+17	; 0x11
    f2c2:	80 81       	ld	r24, Z
    f2c4:	48 2f       	mov	r20, r24
    f2c6:	44 50       	subi	r20, 0x04	; 4
    f2c8:	88 89       	ldd	r24, Y+16	; 0x10
    f2ca:	99 89       	ldd	r25, Y+17	; 0x11
    f2cc:	04 96       	adiw	r24, 0x04	; 4
    f2ce:	9e 01       	movw	r18, r28
    f2d0:	2d 5f       	subi	r18, 0xFD	; 253
    f2d2:	3f 4f       	sbci	r19, 0xFF	; 255
    f2d4:	bc 01       	movw	r22, r24
    f2d6:	c9 01       	movw	r24, r18
    f2d8:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
   filename[ receivebuffer[ 0 ] - 4 ] = '\0';
    f2dc:	e8 89       	ldd	r30, Y+16	; 0x10
    f2de:	f9 89       	ldd	r31, Y+17	; 0x11
    f2e0:	80 81       	ld	r24, Z
    f2e2:	99 27       	eor	r25, r25
    f2e4:	9c 01       	movw	r18, r24
    f2e6:	24 50       	subi	r18, 0x04	; 4
    f2e8:	30 40       	sbci	r19, 0x00	; 0
    f2ea:	ce 01       	movw	r24, r28
    f2ec:	03 96       	adiw	r24, 0x03	; 3
    f2ee:	fc 01       	movw	r30, r24
    f2f0:	e2 0f       	add	r30, r18
    f2f2:	f3 1f       	adc	r31, r19
    f2f4:	10 82       	st	Z, r1
   newblockid = createFileFromDirectory( filename, ( int )blockid );
    f2f6:	8a 81       	ldd	r24, Y+2	; 0x02
    f2f8:	99 27       	eor	r25, r25
    f2fa:	9e 01       	movw	r18, r28
    f2fc:	2d 5f       	subi	r18, 0xFD	; 253
    f2fe:	3f 4f       	sbci	r19, 0xFF	; 255
    f300:	bc 01       	movw	r22, r24
    f302:	c9 01       	movw	r24, r18
    f304:	0e 94 28 18 	call	0x3050	; 0x3050 <createFileFromDirectory>
    f308:	89 83       	std	Y+1, r24	; 0x01
   reply[ 0 ] = 4;
    f30a:	84 e0       	ldi	r24, 0x04	; 4
    f30c:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 151;
    f310:	87 e9       	ldi	r24, 0x97	; 151
    f312:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    f316:	80 91 5b 07 	lds	r24, 0x075B
    f31a:	90 91 5c 07 	lds	r25, 0x075C
    f31e:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = newblockid;
    f322:	89 81       	ldd	r24, Y+1	; 0x01
    f324:	80 93 f0 06 	sts	0x06F0, r24
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f328:	8d ee       	ldi	r24, 0xED	; 237
    f32a:	96 e0       	ldi	r25, 0x06	; 6
    f32c:	9c 01       	movw	r18, r24
    f32e:	40 e2       	ldi	r20, 0x20	; 32
    f330:	6f ef       	ldi	r22, 0xFF	; 255
    f332:	7f ef       	ldi	r23, 0xFF	; 255
    f334:	8f ee       	ldi	r24, 0xEF	; 239
    f336:	9f ee       	ldi	r25, 0xEF	; 239
    f338:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    f33c:	61 96       	adiw	r28, 0x11	; 17
    f33e:	0f b6       	in	r0, 0x3f	; 63
    f340:	f8 94       	cli
    f342:	de bf       	out	0x3e, r29	; 62
    f344:	0f be       	out	0x3f, r0	; 63
    f346:	cd bf       	out	0x3d, r28	; 61
    f348:	df 91       	pop	r29
    f34a:	cf 91       	pop	r28
    f34c:	08 95       	ret

0000f34e <reply_fromNodeToPC_type1>:
   //printStringN(reply,32); 	
}

//-------------------------------------------------------------------------
void reply_fromNodeToPC_type1( uint8_t *receivebuffer ) {
    f34e:	cf 93       	push	r28
    f350:	df 93       	push	r29
    f352:	cd b7       	in	r28, 0x3d	; 61
    f354:	de b7       	in	r29, 0x3e	; 62
    f356:	6d 97       	sbiw	r28, 0x1d	; 29
    f358:	0f b6       	in	r0, 0x3f	; 63
    f35a:	f8 94       	cli
    f35c:	de bf       	out	0x3e, r29	; 62
    f35e:	0f be       	out	0x3f, r0	; 63
    f360:	cd bf       	out	0x3d, r28	; 61
    f362:	9d 8f       	std	Y+29, r25	; 0x1d
    f364:	8c 8f       	std	Y+28, r24	; 0x1c
   uint8_t blockid;
   char filename[ 13 ];
   int fid;
   uint16_t filesize;
   uint16_t round;
   uint16_t remain;
   uint16_t i;
   uint8_t newblockid;
   uint8_t temp1, temp2;
   blockid = receivebuffer[ 3 ];
    f366:	8c 8d       	ldd	r24, Y+28	; 0x1c
    f368:	9d 8d       	ldd	r25, Y+29	; 0x1d
    f36a:	fc 01       	movw	r30, r24
    f36c:	33 96       	adiw	r30, 0x03	; 3
    f36e:	80 81       	ld	r24, Z
    f370:	8e 87       	std	Y+14, r24	; 0x0e
   mystrncpy( filename, (char *)&receivebuffer[ 4 ], receivebuffer[ 0 ] - 4 );
    f372:	ec 8d       	ldd	r30, Y+28	; 0x1c
    f374:	fd 8d       	ldd	r31, Y+29	; 0x1d
    f376:	80 81       	ld	r24, Z
    f378:	48 2f       	mov	r20, r24
    f37a:	44 50       	subi	r20, 0x04	; 4
    f37c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    f37e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    f380:	04 96       	adiw	r24, 0x04	; 4
    f382:	9e 01       	movw	r18, r28
    f384:	21 5f       	subi	r18, 0xF1	; 241
    f386:	3f 4f       	sbci	r19, 0xFF	; 255
    f388:	bc 01       	movw	r22, r24
    f38a:	c9 01       	movw	r24, r18
    f38c:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
   filename[ receivebuffer[ 0 ] - 4 ] = '\0';
    f390:	ec 8d       	ldd	r30, Y+28	; 0x1c
    f392:	fd 8d       	ldd	r31, Y+29	; 0x1d
    f394:	80 81       	ld	r24, Z
    f396:	99 27       	eor	r25, r25
    f398:	9c 01       	movw	r18, r24
    f39a:	24 50       	subi	r18, 0x04	; 4
    f39c:	30 40       	sbci	r19, 0x00	; 0
    f39e:	ce 01       	movw	r24, r28
    f3a0:	0f 96       	adiw	r24, 0x0f	; 15
    f3a2:	fc 01       	movw	r30, r24
    f3a4:	e2 0f       	add	r30, r18
    f3a6:	f3 1f       	adc	r31, r19
    f3a8:	10 82       	st	Z, r1
   newblockid = existBlockAddr( filename, ( int )blockid );
    f3aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    f3ac:	99 27       	eor	r25, r25
    f3ae:	9e 01       	movw	r18, r28
    f3b0:	21 5f       	subi	r18, 0xF1	; 241
    f3b2:	3f 4f       	sbci	r19, 0xFF	; 255
    f3b4:	bc 01       	movw	r22, r24
    f3b6:	c9 01       	movw	r24, r18
    f3b8:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <existBlockAddr>
    f3bc:	8b 83       	std	Y+3, r24	; 0x03
   reply[ 1 ] = 124;
    f3be:	8c e7       	ldi	r24, 0x7C	; 124
    f3c0:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    f3c4:	80 91 5b 07 	lds	r24, 0x075B
    f3c8:	90 91 5c 07 	lds	r25, 0x075C
    f3cc:	80 93 ef 06 	sts	0x06EF, r24
   fid = getFreeFid();
    f3d0:	0e 94 1d 02 	call	0x43a	; 0x43a <getFreeFid>
    f3d4:	9d 87       	std	Y+13, r25	; 0x0d
    f3d6:	8c 87       	std	Y+12, r24	; 0x0c
   openFile( newblockid, fid, 1 );
    f3d8:	8b 81       	ldd	r24, Y+3	; 0x03
    f3da:	28 2f       	mov	r18, r24
    f3dc:	33 27       	eor	r19, r19
    f3de:	8c 85       	ldd	r24, Y+12	; 0x0c
    f3e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    f3e2:	41 e0       	ldi	r20, 0x01	; 1
    f3e4:	50 e0       	ldi	r21, 0x00	; 0
    f3e6:	bc 01       	movw	r22, r24
    f3e8:	c9 01       	movw	r24, r18
    f3ea:	0e 94 f7 19 	call	0x33ee	; 0x33ee <openFile>
   fp = &fidtable[ fid ];
    f3ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    f3f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    f3f2:	9c 01       	movw	r18, r24
    f3f4:	22 0f       	add	r18, r18
    f3f6:	33 1f       	adc	r19, r19
    f3f8:	c9 01       	movw	r24, r18
    f3fa:	88 0f       	add	r24, r24
    f3fc:	99 1f       	adc	r25, r25
    f3fe:	88 0f       	add	r24, r24
    f400:	99 1f       	adc	r25, r25
    f402:	82 0f       	add	r24, r18
    f404:	93 1f       	adc	r25, r19
    f406:	81 5e       	subi	r24, 0xE1	; 225
    f408:	9b 4f       	sbci	r25, 0xFB	; 251
    f40a:	90 93 cf 06 	sts	0x06CF, r25
    f40e:	80 93 ce 06 	sts	0x06CE, r24
   filesize = fp->size;
    f412:	e0 91 ce 06 	lds	r30, 0x06CE
    f416:	f0 91 cf 06 	lds	r31, 0x06CF
    f41a:	84 81       	ldd	r24, Z+4	; 0x04
    f41c:	95 81       	ldd	r25, Z+5	; 0x05
    f41e:	9b 87       	std	Y+11, r25	; 0x0b
    f420:	8a 87       	std	Y+10, r24	; 0x0a
   temp1 = filesize / 256;
    f422:	8a 85       	ldd	r24, Y+10	; 0x0a
    f424:	9b 85       	ldd	r25, Y+11	; 0x0b
    f426:	89 2f       	mov	r24, r25
    f428:	99 27       	eor	r25, r25
    f42a:	8a 83       	std	Y+2, r24	; 0x02
   temp2 = filesize % 256;
    f42c:	8a 85       	ldd	r24, Y+10	; 0x0a
    f42e:	89 83       	std	Y+1, r24	; 0x01
   reply[ 3 ] = temp1;
    f430:	8a 81       	ldd	r24, Y+2	; 0x02
    f432:	80 93 f0 06 	sts	0x06F0, r24
   reply[ 4 ] = temp2;
    f436:	89 81       	ldd	r24, Y+1	; 0x01
    f438:	80 93 f1 06 	sts	0x06F1, r24
   //send out the size 
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f43c:	8d ee       	ldi	r24, 0xED	; 237
    f43e:	96 e0       	ldi	r25, 0x06	; 6
    f440:	9c 01       	movw	r18, r24
    f442:	40 e2       	ldi	r20, 0x20	; 32
    f444:	6f ef       	ldi	r22, 0xFF	; 255
    f446:	7f ef       	ldi	r23, 0xFF	; 255
    f448:	8f ee       	ldi	r24, 0xEF	; 239
    f44a:	9f ee       	ldi	r25, 0xEF	; 239
    f44c:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
   //    StandardSocketSend(0xefef, 0xffff, 32, reply);
   //sleepThread( 100 );
   reply[ 3 ] = newblockid;
    f450:	8b 81       	ldd	r24, Y+3	; 0x03
    f452:	80 93 f0 06 	sts	0x06F0, r24
   round = filesize / 20;
    f456:	8a 85       	ldd	r24, Y+10	; 0x0a
    f458:	9b 85       	ldd	r25, Y+11	; 0x0b
    f45a:	24 e1       	ldi	r18, 0x14	; 20
    f45c:	30 e0       	ldi	r19, 0x00	; 0
    f45e:	b9 01       	movw	r22, r18
    f460:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <__udivmodhi4>
    f464:	cb 01       	movw	r24, r22
    f466:	99 87       	std	Y+9, r25	; 0x09
    f468:	88 87       	std	Y+8, r24	; 0x08
   remain = filesize % 20;
    f46a:	8a 85       	ldd	r24, Y+10	; 0x0a
    f46c:	9b 85       	ldd	r25, Y+11	; 0x0b
    f46e:	24 e1       	ldi	r18, 0x14	; 20
    f470:	30 e0       	ldi	r19, 0x00	; 0
    f472:	b9 01       	movw	r22, r18
    f474:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <__udivmodhi4>
    f478:	9f 83       	std	Y+7, r25	; 0x07
    f47a:	8e 83       	std	Y+6, r24	; 0x06
   for ( i = 0; i < round; i ++ ) {
    f47c:	1d 82       	std	Y+5, r1	; 0x05
    f47e:	1c 82       	std	Y+4, r1	; 0x04
    f480:	37 c0       	rjmp	.+110    	; 0xf4f0 <reply_fromNodeToPC_type1+0x1a2>
      fread2( fp, &reply[ 6 ], 20 );
    f482:	83 ef       	ldi	r24, 0xF3	; 243
    f484:	96 e0       	ldi	r25, 0x06	; 6
    f486:	20 91 ce 06 	lds	r18, 0x06CE
    f48a:	30 91 cf 06 	lds	r19, 0x06CF
    f48e:	44 e1       	ldi	r20, 0x14	; 20
    f490:	50 e0       	ldi	r21, 0x00	; 0
    f492:	bc 01       	movw	r22, r24
    f494:	c9 01       	movw	r24, r18
    f496:	0e 94 49 05 	call	0xa92	; 0xa92 <fread2>
      fseek2( fp, 20, 1 );
    f49a:	80 91 ce 06 	lds	r24, 0x06CE
    f49e:	90 91 cf 06 	lds	r25, 0x06CF
    f4a2:	21 e0       	ldi	r18, 0x01	; 1
    f4a4:	30 e0       	ldi	r19, 0x00	; 0
    f4a6:	44 e1       	ldi	r20, 0x14	; 20
    f4a8:	50 e0       	ldi	r21, 0x00	; 0
    f4aa:	60 e0       	ldi	r22, 0x00	; 0
    f4ac:	70 e0       	ldi	r23, 0x00	; 0
    f4ae:	0e 94 94 03 	call	0x728	; 0x728 <fseek2>
      reply[ 0 ] = 26;
    f4b2:	8a e1       	ldi	r24, 0x1A	; 26
    f4b4:	80 93 ed 06 	sts	0x06ED, r24
      temp1 = i / 256;
    f4b8:	8c 81       	ldd	r24, Y+4	; 0x04
    f4ba:	9d 81       	ldd	r25, Y+5	; 0x05
    f4bc:	89 2f       	mov	r24, r25
    f4be:	99 27       	eor	r25, r25
    f4c0:	8a 83       	std	Y+2, r24	; 0x02
      temp2 = i % 256;
    f4c2:	8c 81       	ldd	r24, Y+4	; 0x04
    f4c4:	89 83       	std	Y+1, r24	; 0x01
      reply[ 4 ] = temp1;
    f4c6:	8a 81       	ldd	r24, Y+2	; 0x02
    f4c8:	80 93 f1 06 	sts	0x06F1, r24
      reply[ 5 ] = temp2;
    f4cc:	89 81       	ldd	r24, Y+1	; 0x01
    f4ce:	80 93 f2 06 	sts	0x06F2, r24
      //printStringN(reply,32); 		    
     // sleepThread( 100 );
      StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f4d2:	8d ee       	ldi	r24, 0xED	; 237
    f4d4:	96 e0       	ldi	r25, 0x06	; 6
    f4d6:	9c 01       	movw	r18, r24
    f4d8:	40 e2       	ldi	r20, 0x20	; 32
    f4da:	6f ef       	ldi	r22, 0xFF	; 255
    f4dc:	7f ef       	ldi	r23, 0xFF	; 255
    f4de:	8f ee       	ldi	r24, 0xEF	; 239
    f4e0:	9f ee       	ldi	r25, 0xEF	; 239
    f4e2:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    f4e6:	8c 81       	ldd	r24, Y+4	; 0x04
    f4e8:	9d 81       	ldd	r25, Y+5	; 0x05
    f4ea:	01 96       	adiw	r24, 0x01	; 1
    f4ec:	9d 83       	std	Y+5, r25	; 0x05
    f4ee:	8c 83       	std	Y+4, r24	; 0x04
    f4f0:	2c 81       	ldd	r18, Y+4	; 0x04
    f4f2:	3d 81       	ldd	r19, Y+5	; 0x05
    f4f4:	88 85       	ldd	r24, Y+8	; 0x08
    f4f6:	99 85       	ldd	r25, Y+9	; 0x09
    f4f8:	28 17       	cp	r18, r24
    f4fa:	39 07       	cpc	r19, r25
    f4fc:	10 f2       	brcs	.-124    	; 0xf482 <reply_fromNodeToPC_type1+0x134>
   }
   if ( remain > 0 ) {
    f4fe:	8e 81       	ldd	r24, Y+6	; 0x06
    f500:	9f 81       	ldd	r25, Y+7	; 0x07
    f502:	00 97       	sbiw	r24, 0x00	; 0
    f504:	49 f1       	breq	.+82     	; 0xf558 <reply_fromNodeToPC_type1+0x20a>
      fread2( fp, &reply[ 6 ], remain );
    f506:	8e 81       	ldd	r24, Y+6	; 0x06
    f508:	9f 81       	ldd	r25, Y+7	; 0x07
    f50a:	23 ef       	ldi	r18, 0xF3	; 243
    f50c:	36 e0       	ldi	r19, 0x06	; 6
    f50e:	e0 91 ce 06 	lds	r30, 0x06CE
    f512:	f0 91 cf 06 	lds	r31, 0x06CF
    f516:	ac 01       	movw	r20, r24
    f518:	b9 01       	movw	r22, r18
    f51a:	cf 01       	movw	r24, r30
    f51c:	0e 94 49 05 	call	0xa92	; 0xa92 <fread2>
      reply[ 0 ] = ( uint8_t )remain + 6;
    f520:	8e 81       	ldd	r24, Y+6	; 0x06
    f522:	8a 5f       	subi	r24, 0xFA	; 250
    f524:	80 93 ed 06 	sts	0x06ED, r24
      reply[ 4 ] = round / 256;
    f528:	88 85       	ldd	r24, Y+8	; 0x08
    f52a:	99 85       	ldd	r25, Y+9	; 0x09
    f52c:	89 2f       	mov	r24, r25
    f52e:	99 27       	eor	r25, r25
    f530:	80 93 f1 06 	sts	0x06F1, r24
      reply[ 5 ] = round % 256;
    f534:	88 85       	ldd	r24, Y+8	; 0x08
    f536:	80 93 f2 06 	sts	0x06F2, r24
      round ++;
    f53a:	88 85       	ldd	r24, Y+8	; 0x08
    f53c:	99 85       	ldd	r25, Y+9	; 0x09
    f53e:	01 96       	adiw	r24, 0x01	; 1
    f540:	99 87       	std	Y+9, r25	; 0x09
    f542:	88 87       	std	Y+8, r24	; 0x08
      //printStringN(reply,32);
      //sleepThread( 25 );
      StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f544:	8d ee       	ldi	r24, 0xED	; 237
    f546:	96 e0       	ldi	r25, 0x06	; 6
    f548:	9c 01       	movw	r18, r24
    f54a:	40 e2       	ldi	r20, 0x20	; 32
    f54c:	6f ef       	ldi	r22, 0xFF	; 255
    f54e:	7f ef       	ldi	r23, 0xFF	; 255
    f550:	8f ee       	ldi	r24, 0xEF	; 239
    f552:	9f ee       	ldi	r25, 0xEF	; 239
    f554:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
   }
   temp1 = round / 256;
    f558:	88 85       	ldd	r24, Y+8	; 0x08
    f55a:	99 85       	ldd	r25, Y+9	; 0x09
    f55c:	89 2f       	mov	r24, r25
    f55e:	99 27       	eor	r25, r25
    f560:	8a 83       	std	Y+2, r24	; 0x02
   temp2 = round % 256;
    f562:	88 85       	ldd	r24, Y+8	; 0x08
    f564:	89 83       	std	Y+1, r24	; 0x01
   //terminate signal  is here!
   reply[ 0 ] = 7;
    f566:	87 e0       	ldi	r24, 0x07	; 7
    f568:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 3 ] = 0xef;
    f56c:	8f ee       	ldi	r24, 0xEF	; 239
    f56e:	80 93 f0 06 	sts	0x06F0, r24
   reply[ 4 ] = 0xef;
    f572:	8f ee       	ldi	r24, 0xEF	; 239
    f574:	80 93 f1 06 	sts	0x06F1, r24
   reply[ 5 ] = temp1;
    f578:	8a 81       	ldd	r24, Y+2	; 0x02
    f57a:	80 93 f2 06 	sts	0x06F2, r24
   reply[ 6 ] = temp2;
    f57e:	89 81       	ldd	r24, Y+1	; 0x01
    f580:	80 93 f3 06 	sts	0x06F3, r24
   //ephread( 100 );
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f584:	8d ee       	ldi	r24, 0xED	; 237
    f586:	96 e0       	ldi	r25, 0x06	; 6
    f588:	9c 01       	movw	r18, r24
    f58a:	40 e2       	ldi	r20, 0x20	; 32
    f58c:	6f ef       	ldi	r22, 0xFF	; 255
    f58e:	7f ef       	ldi	r23, 0xFF	; 255
    f590:	8f ee       	ldi	r24, 0xEF	; 239
    f592:	9f ee       	ldi	r25, 0xEF	; 239
    f594:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
   //sleepThread( 100 );
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f598:	8d ee       	ldi	r24, 0xED	; 237
    f59a:	96 e0       	ldi	r25, 0x06	; 6
    f59c:	9c 01       	movw	r18, r24
    f59e:	40 e2       	ldi	r20, 0x20	; 32
    f5a0:	6f ef       	ldi	r22, 0xFF	; 255
    f5a2:	7f ef       	ldi	r23, 0xFF	; 255
    f5a4:	8f ee       	ldi	r24, 0xEF	; 239
    f5a6:	9f ee       	ldi	r25, 0xEF	; 239
    f5a8:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
   //sleepThread( 100 );
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f5ac:	8d ee       	ldi	r24, 0xED	; 237
    f5ae:	96 e0       	ldi	r25, 0x06	; 6
    f5b0:	9c 01       	movw	r18, r24
    f5b2:	40 e2       	ldi	r20, 0x20	; 32
    f5b4:	6f ef       	ldi	r22, 0xFF	; 255
    f5b6:	7f ef       	ldi	r23, 0xFF	; 255
    f5b8:	8f ee       	ldi	r24, 0xEF	; 239
    f5ba:	9f ee       	ldi	r25, 0xEF	; 239
    f5bc:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
   //sleepThread( 100 );
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f5c0:	8d ee       	ldi	r24, 0xED	; 237
    f5c2:	96 e0       	ldi	r25, 0x06	; 6
    f5c4:	9c 01       	movw	r18, r24
    f5c6:	40 e2       	ldi	r20, 0x20	; 32
    f5c8:	6f ef       	ldi	r22, 0xFF	; 255
    f5ca:	7f ef       	ldi	r23, 0xFF	; 255
    f5cc:	8f ee       	ldi	r24, 0xEF	; 239
    f5ce:	9f ee       	ldi	r25, 0xEF	; 239
    f5d0:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    f5d4:	6d 96       	adiw	r28, 0x1d	; 29
    f5d6:	0f b6       	in	r0, 0x3f	; 63
    f5d8:	f8 94       	cli
    f5da:	de bf       	out	0x3e, r29	; 62
    f5dc:	0f be       	out	0x3f, r0	; 63
    f5de:	cd bf       	out	0x3d, r28	; 61
    f5e0:	df 91       	pop	r29
    f5e2:	cf 91       	pop	r28
    f5e4:	08 95       	ret

0000f5e6 <reply_rm>:
   //do not close now!
   //	 fclose2(fp); 
}

//-------------------------------------------------------------------------
void reply_rm( uint8_t *receivebuffer ) {
    f5e6:	cf 93       	push	r28
    f5e8:	df 93       	push	r29
    f5ea:	cd b7       	in	r28, 0x3d	; 61
    f5ec:	de b7       	in	r29, 0x3e	; 62
    f5ee:	61 97       	sbiw	r28, 0x11	; 17
    f5f0:	0f b6       	in	r0, 0x3f	; 63
    f5f2:	f8 94       	cli
    f5f4:	de bf       	out	0x3e, r29	; 62
    f5f6:	0f be       	out	0x3f, r0	; 63
    f5f8:	cd bf       	out	0x3d, r28	; 61
    f5fa:	99 8b       	std	Y+17, r25	; 0x11
    f5fc:	88 8b       	std	Y+16, r24	; 0x10
   uint8_t blockid;
   char filename[ 13 ];
   uint8_t newblockid;
   blockid = receivebuffer[ 3 ];
    f5fe:	88 89       	ldd	r24, Y+16	; 0x10
    f600:	99 89       	ldd	r25, Y+17	; 0x11
    f602:	fc 01       	movw	r30, r24
    f604:	33 96       	adiw	r30, 0x03	; 3
    f606:	80 81       	ld	r24, Z
    f608:	8a 83       	std	Y+2, r24	; 0x02
   mystrncpy( filename, (char *)&receivebuffer[ 4 ], receivebuffer[ 0 ] - 4 );
    f60a:	e8 89       	ldd	r30, Y+16	; 0x10
    f60c:	f9 89       	ldd	r31, Y+17	; 0x11
    f60e:	80 81       	ld	r24, Z
    f610:	48 2f       	mov	r20, r24
    f612:	44 50       	subi	r20, 0x04	; 4
    f614:	88 89       	ldd	r24, Y+16	; 0x10
    f616:	99 89       	ldd	r25, Y+17	; 0x11
    f618:	04 96       	adiw	r24, 0x04	; 4
    f61a:	9e 01       	movw	r18, r28
    f61c:	2d 5f       	subi	r18, 0xFD	; 253
    f61e:	3f 4f       	sbci	r19, 0xFF	; 255
    f620:	bc 01       	movw	r22, r24
    f622:	c9 01       	movw	r24, r18
    f624:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
   filename[ receivebuffer[ 0 ] - 4 ] = '\0';
    f628:	e8 89       	ldd	r30, Y+16	; 0x10
    f62a:	f9 89       	ldd	r31, Y+17	; 0x11
    f62c:	80 81       	ld	r24, Z
    f62e:	99 27       	eor	r25, r25
    f630:	9c 01       	movw	r18, r24
    f632:	24 50       	subi	r18, 0x04	; 4
    f634:	30 40       	sbci	r19, 0x00	; 0
    f636:	ce 01       	movw	r24, r28
    f638:	03 96       	adiw	r24, 0x03	; 3
    f63a:	fc 01       	movw	r30, r24
    f63c:	e2 0f       	add	r30, r18
    f63e:	f3 1f       	adc	r31, r19
    f640:	10 82       	st	Z, r1
   newblockid = existBlockAddr( filename, ( int )blockid );
    f642:	8a 81       	ldd	r24, Y+2	; 0x02
    f644:	99 27       	eor	r25, r25
    f646:	9e 01       	movw	r18, r28
    f648:	2d 5f       	subi	r18, 0xFD	; 253
    f64a:	3f 4f       	sbci	r19, 0xFF	; 255
    f64c:	bc 01       	movw	r22, r24
    f64e:	c9 01       	movw	r24, r18
    f650:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <existBlockAddr>
    f654:	89 83       	std	Y+1, r24	; 0x01
   if ( newblockid > 0 ) {
    f656:	89 81       	ldd	r24, Y+1	; 0x01
    f658:	88 23       	and	r24, r24
    f65a:	21 f0       	breq	.+8      	; 0xf664 <reply_rm+0x7e>
      deleteNode( newblockid );
    f65c:	89 81       	ldd	r24, Y+1	; 0x01
    f65e:	99 27       	eor	r25, r25
    f660:	0e 94 61 12 	call	0x24c2	; 0x24c2 <deleteNode>
   } 
   reply[ 0 ] = 4;
    f664:	84 e0       	ldi	r24, 0x04	; 4
    f666:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 161;
    f66a:	81 ea       	ldi	r24, 0xA1	; 161
    f66c:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    f670:	80 91 5b 07 	lds	r24, 0x075B
    f674:	90 91 5c 07 	lds	r25, 0x075C
    f678:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = newblockid;
    f67c:	89 81       	ldd	r24, Y+1	; 0x01
    f67e:	80 93 f0 06 	sts	0x06F0, r24
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f682:	8d ee       	ldi	r24, 0xED	; 237
    f684:	96 e0       	ldi	r25, 0x06	; 6
    f686:	9c 01       	movw	r18, r24
    f688:	40 e2       	ldi	r20, 0x20	; 32
    f68a:	6f ef       	ldi	r22, 0xFF	; 255
    f68c:	7f ef       	ldi	r23, 0xFF	; 255
    f68e:	8f ee       	ldi	r24, 0xEF	; 239
    f690:	9f ee       	ldi	r25, 0xEF	; 239
    f692:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    f696:	61 96       	adiw	r28, 0x11	; 17
    f698:	0f b6       	in	r0, 0x3f	; 63
    f69a:	f8 94       	cli
    f69c:	de bf       	out	0x3e, r29	; 62
    f69e:	0f be       	out	0x3f, r0	; 63
    f6a0:	cd bf       	out	0x3d, r28	; 61
    f6a2:	df 91       	pop	r29
    f6a4:	cf 91       	pop	r28
    f6a6:	08 95       	ret

0000f6a8 <reply_fromNodeToPC_type2>:
   //printStringN(reply,32); 	
}


//get patch request
void reply_fromNodeToPC_type2( uint8_t *receivebuffer )
 {
    f6a8:	cf 93       	push	r28
    f6aa:	df 93       	push	r29
    f6ac:	cd b7       	in	r28, 0x3d	; 61
    f6ae:	de b7       	in	r29, 0x3e	; 62
    f6b0:	24 97       	sbiw	r28, 0x04	; 4
    f6b2:	0f b6       	in	r0, 0x3f	; 63
    f6b4:	f8 94       	cli
    f6b6:	de bf       	out	0x3e, r29	; 62
    f6b8:	0f be       	out	0x3f, r0	; 63
    f6ba:	cd bf       	out	0x3d, r28	; 61
    f6bc:	9c 83       	std	Y+4, r25	; 0x04
    f6be:	8b 83       	std	Y+3, r24	; 0x03
   uint16_t pos;
   pos = (( uint16_t )receivebuffer[ 4 ] ) *256+receivebuffer[ 5 ];
    f6c0:	8b 81       	ldd	r24, Y+3	; 0x03
    f6c2:	9c 81       	ldd	r25, Y+4	; 0x04
    f6c4:	fc 01       	movw	r30, r24
    f6c6:	34 96       	adiw	r30, 0x04	; 4
    f6c8:	80 81       	ld	r24, Z
    f6ca:	99 27       	eor	r25, r25
    f6cc:	38 2f       	mov	r19, r24
    f6ce:	22 27       	eor	r18, r18
    f6d0:	8b 81       	ldd	r24, Y+3	; 0x03
    f6d2:	9c 81       	ldd	r25, Y+4	; 0x04
    f6d4:	fc 01       	movw	r30, r24
    f6d6:	35 96       	adiw	r30, 0x05	; 5
    f6d8:	80 81       	ld	r24, Z
    f6da:	99 27       	eor	r25, r25
    f6dc:	82 0f       	add	r24, r18
    f6de:	93 1f       	adc	r25, r19
    f6e0:	9a 83       	std	Y+2, r25	; 0x02
    f6e2:	89 83       	std	Y+1, r24	; 0x01
   reply[ 0 ] = 26;
    f6e4:	8a e1       	ldi	r24, 0x1A	; 26
    f6e6:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 125;
    f6ea:	8d e7       	ldi	r24, 0x7D	; 125
    f6ec:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    f6f0:	80 91 5b 07 	lds	r24, 0x075B
    f6f4:	90 91 5c 07 	lds	r25, 0x075C
    f6f8:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = pos / 256;
    f6fc:	89 81       	ldd	r24, Y+1	; 0x01
    f6fe:	9a 81       	ldd	r25, Y+2	; 0x02
    f700:	89 2f       	mov	r24, r25
    f702:	99 27       	eor	r25, r25
    f704:	80 93 f0 06 	sts	0x06F0, r24
   reply[ 4 ] = pos % 256;
    f708:	89 81       	ldd	r24, Y+1	; 0x01
    f70a:	80 93 f1 06 	sts	0x06F1, r24
   fseek2( fp, ( int32_t )pos, 0 );
    f70e:	89 81       	ldd	r24, Y+1	; 0x01
    f710:	9a 81       	ldd	r25, Y+2	; 0x02
    f712:	aa 27       	eor	r26, r26
    f714:	bb 27       	eor	r27, r27
    f716:	e0 91 ce 06 	lds	r30, 0x06CE
    f71a:	f0 91 cf 06 	lds	r31, 0x06CF
    f71e:	20 e0       	ldi	r18, 0x00	; 0
    f720:	30 e0       	ldi	r19, 0x00	; 0
    f722:	ac 01       	movw	r20, r24
    f724:	bd 01       	movw	r22, r26
    f726:	cf 01       	movw	r24, r30
    f728:	0e 94 94 03 	call	0x728	; 0x728 <fseek2>
   fread2( fp, &reply[ 6 ], 20 );
    f72c:	83 ef       	ldi	r24, 0xF3	; 243
    f72e:	96 e0       	ldi	r25, 0x06	; 6
    f730:	20 91 ce 06 	lds	r18, 0x06CE
    f734:	30 91 cf 06 	lds	r19, 0x06CF
    f738:	44 e1       	ldi	r20, 0x14	; 20
    f73a:	50 e0       	ldi	r21, 0x00	; 0
    f73c:	bc 01       	movw	r22, r24
    f73e:	c9 01       	movw	r24, r18
    f740:	0e 94 49 05 	call	0xa92	; 0xa92 <fread2>
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f744:	8d ee       	ldi	r24, 0xED	; 237
    f746:	96 e0       	ldi	r25, 0x06	; 6
    f748:	9c 01       	movw	r18, r24
    f74a:	40 e2       	ldi	r20, 0x20	; 32
    f74c:	6f ef       	ldi	r22, 0xFF	; 255
    f74e:	7f ef       	ldi	r23, 0xFF	; 255
    f750:	8f ee       	ldi	r24, 0xEF	; 239
    f752:	9f ee       	ldi	r25, 0xEF	; 239
    f754:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    f758:	24 96       	adiw	r28, 0x04	; 4
    f75a:	0f b6       	in	r0, 0x3f	; 63
    f75c:	f8 94       	cli
    f75e:	de bf       	out	0x3e, r29	; 62
    f760:	0f be       	out	0x3f, r0	; 63
    f762:	cd bf       	out	0x3d, r28	; 61
    f764:	df 91       	pop	r29
    f766:	cf 91       	pop	r28
    f768:	08 95       	ret

0000f76a <reply126>:
}

//-------------------------------------------------------------------------
//possible bug here 
void reply126( uint8_t *receivebuffer ) {
    f76a:	cf 93       	push	r28
    f76c:	df 93       	push	r29
    f76e:	cd b7       	in	r28, 0x3d	; 61
    f770:	de b7       	in	r29, 0x3e	; 62
    f772:	22 97       	sbiw	r28, 0x02	; 2
    f774:	0f b6       	in	r0, 0x3f	; 63
    f776:	f8 94       	cli
    f778:	de bf       	out	0x3e, r29	; 62
    f77a:	0f be       	out	0x3f, r0	; 63
    f77c:	cd bf       	out	0x3d, r28	; 61
    f77e:	9a 83       	std	Y+2, r25	; 0x02
    f780:	89 83       	std	Y+1, r24	; 0x01
   fclose2( fp );
    f782:	80 91 ce 06 	lds	r24, 0x06CE
    f786:	90 91 cf 06 	lds	r25, 0x06CF
    f78a:	0e 94 77 03 	call	0x6ee	; 0x6ee <fclose2>
    f78e:	22 96       	adiw	r28, 0x02	; 2
    f790:	0f b6       	in	r0, 0x3f	; 63
    f792:	f8 94       	cli
    f794:	de bf       	out	0x3e, r29	; 62
    f796:	0f be       	out	0x3f, r0	; 63
    f798:	cd bf       	out	0x3d, r28	; 61
    f79a:	df 91       	pop	r29
    f79c:	cf 91       	pop	r28
    f79e:	08 95       	ret

0000f7a0 <reply_ps>:
}

//-------------------------------------------------------------------------
void reply_ps( uint8_t *receivebuffer ) {
    f7a0:	cf 93       	push	r28
    f7a2:	df 93       	push	r29
    f7a4:	cd b7       	in	r28, 0x3d	; 61
    f7a6:	de b7       	in	r29, 0x3e	; 62
    f7a8:	28 97       	sbiw	r28, 0x08	; 8
    f7aa:	0f b6       	in	r0, 0x3f	; 63
    f7ac:	f8 94       	cli
    f7ae:	de bf       	out	0x3e, r29	; 62
    f7b0:	0f be       	out	0x3f, r0	; 63
    f7b2:	cd bf       	out	0x3d, r28	; 61
    f7b4:	98 87       	std	Y+8, r25	; 0x08
    f7b6:	8f 83       	std	Y+7, r24	; 0x07
   uint8_t i, len;
   //reply[0] = 15;
   reply[ 1 ] = 171;
    f7b8:	8b ea       	ldi	r24, 0xAB	; 171
    f7ba:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    f7be:	80 91 5b 07 	lds	r24, 0x075B
    f7c2:	90 91 5c 07 	lds	r25, 0x075C
    f7c6:	80 93 ef 06 	sts	0x06EF, r24
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
    f7ca:	1e 82       	std	Y+6, r1	; 0x06
    f7cc:	b3 c0       	rjmp	.+358    	; 0xf934 <reply_ps+0x194>
      if ( thread_table[ i ].state != STATE_NULL ) {
    f7ce:	8e 81       	ldd	r24, Y+6	; 0x06
    f7d0:	28 2f       	mov	r18, r24
    f7d2:	33 27       	eor	r19, r19
    f7d4:	85 e2       	ldi	r24, 0x25	; 37
    f7d6:	90 e0       	ldi	r25, 0x00	; 0
    f7d8:	ac 01       	movw	r20, r24
    f7da:	24 9f       	mul	r18, r20
    f7dc:	c0 01       	movw	r24, r0
    f7de:	25 9f       	mul	r18, r21
    f7e0:	90 0d       	add	r25, r0
    f7e2:	34 9f       	mul	r19, r20
    f7e4:	90 0d       	add	r25, r0
    f7e6:	11 24       	eor	r1, r1
    f7e8:	fc 01       	movw	r30, r24
    f7ea:	e2 52       	subi	r30, 0x22	; 34
    f7ec:	f7 4f       	sbci	r31, 0xF7	; 247
    f7ee:	80 81       	ld	r24, Z
    f7f0:	88 23       	and	r24, r24
    f7f2:	09 f4       	brne	.+2      	; 0xf7f6 <reply_ps+0x56>
    f7f4:	9c c0       	rjmp	.+312    	; 0xf92e <reply_ps+0x18e>
         len = mystrlen( (char *)thread_table[ i ].threadName );
    f7f6:	8e 81       	ldd	r24, Y+6	; 0x06
    f7f8:	28 2f       	mov	r18, r24
    f7fa:	33 27       	eor	r19, r19
    f7fc:	85 e2       	ldi	r24, 0x25	; 37
    f7fe:	90 e0       	ldi	r25, 0x00	; 0
    f800:	ac 01       	movw	r20, r24
    f802:	24 9f       	mul	r18, r20
    f804:	c0 01       	movw	r24, r0
    f806:	25 9f       	mul	r18, r21
    f808:	90 0d       	add	r25, r0
    f80a:	34 9f       	mul	r19, r20
    f80c:	90 0d       	add	r25, r0
    f80e:	11 24       	eor	r1, r1
    f810:	05 96       	adiw	r24, 0x05	; 5
    f812:	84 52       	subi	r24, 0x24	; 36
    f814:	97 4f       	sbci	r25, 0xF7	; 247
    f816:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    f81a:	8d 83       	std	Y+5, r24	; 0x05
         reply[ 0 ] = len + 4;
    f81c:	8d 81       	ldd	r24, Y+5	; 0x05
    f81e:	8c 5f       	subi	r24, 0xFC	; 252
    f820:	80 93 ed 06 	sts	0x06ED, r24
         reply[ 3 ] = thread_table[ i ].state;
    f824:	8e 81       	ldd	r24, Y+6	; 0x06
    f826:	28 2f       	mov	r18, r24
    f828:	33 27       	eor	r19, r19
    f82a:	85 e2       	ldi	r24, 0x25	; 37
    f82c:	90 e0       	ldi	r25, 0x00	; 0
    f82e:	ac 01       	movw	r20, r24
    f830:	24 9f       	mul	r18, r20
    f832:	c0 01       	movw	r24, r0
    f834:	25 9f       	mul	r18, r21
    f836:	90 0d       	add	r25, r0
    f838:	34 9f       	mul	r19, r20
    f83a:	90 0d       	add	r25, r0
    f83c:	11 24       	eor	r1, r1
    f83e:	fc 01       	movw	r30, r24
    f840:	e2 52       	subi	r30, 0x22	; 34
    f842:	f7 4f       	sbci	r31, 0xF7	; 247
    f844:	80 81       	ld	r24, Z
    f846:	80 93 f0 06 	sts	0x06F0, r24
         //if this is a break thread, then fetch the real number
         if ( reply[ 3 ] == 8 ) {
    f84a:	80 91 f0 06 	lds	r24, 0x06F0
    f84e:	88 30       	cpi	r24, 0x08	; 8
    f850:	09 f0       	breq	.+2      	; 0xf854 <reply_ps+0xb4>
    f852:	4c c0       	rjmp	.+152    	; 0xf8ec <reply_ps+0x14c>
            uint8_t *tempptr = ( uint8_t* )thread_table[ i ].sp + 47;
    f854:	8e 81       	ldd	r24, Y+6	; 0x06
    f856:	28 2f       	mov	r18, r24
    f858:	33 27       	eor	r19, r19
    f85a:	85 e2       	ldi	r24, 0x25	; 37
    f85c:	90 e0       	ldi	r25, 0x00	; 0
    f85e:	ac 01       	movw	r20, r24
    f860:	24 9f       	mul	r18, r20
    f862:	c0 01       	movw	r24, r0
    f864:	25 9f       	mul	r18, r21
    f866:	90 0d       	add	r25, r0
    f868:	34 9f       	mul	r19, r20
    f86a:	90 0d       	add	r25, r0
    f86c:	11 24       	eor	r1, r1
    f86e:	fc 01       	movw	r30, r24
    f870:	e4 52       	subi	r30, 0x24	; 36
    f872:	f7 4f       	sbci	r31, 0xF7	; 247
    f874:	80 81       	ld	r24, Z
    f876:	91 81       	ldd	r25, Z+1	; 0x01
    f878:	8f 96       	adiw	r24, 0x2f	; 47
    f87a:	9c 83       	std	Y+4, r25	; 0x04
    f87c:	8b 83       	std	Y+3, r24	; 0x03
            uint16_t addr = ((( uint16_t )( *tempptr )) *256+*( tempptr + 1 ) - 3 );
    f87e:	eb 81       	ldd	r30, Y+3	; 0x03
    f880:	fc 81       	ldd	r31, Y+4	; 0x04
    f882:	80 81       	ld	r24, Z
    f884:	99 27       	eor	r25, r25
    f886:	38 2f       	mov	r19, r24
    f888:	22 27       	eor	r18, r18
    f88a:	8b 81       	ldd	r24, Y+3	; 0x03
    f88c:	9c 81       	ldd	r25, Y+4	; 0x04
    f88e:	fc 01       	movw	r30, r24
    f890:	31 96       	adiw	r30, 0x01	; 1
    f892:	80 81       	ld	r24, Z
    f894:	99 27       	eor	r25, r25
    f896:	82 0f       	add	r24, r18
    f898:	93 1f       	adc	r25, r19
    f89a:	03 97       	sbiw	r24, 0x03	; 3
    f89c:	9a 83       	std	Y+2, r25	; 0x02
    f89e:	89 83       	std	Y+1, r24	; 0x01
            reply[ 4 ] = addr / 256;
    f8a0:	89 81       	ldd	r24, Y+1	; 0x01
    f8a2:	9a 81       	ldd	r25, Y+2	; 0x02
    f8a4:	89 2f       	mov	r24, r25
    f8a6:	99 27       	eor	r25, r25
    f8a8:	80 93 f1 06 	sts	0x06F1, r24
            reply[ 5 ] = addr % 256;
    f8ac:	89 81       	ldd	r24, Y+1	; 0x01
    f8ae:	80 93 f2 06 	sts	0x06F2, r24
            reply[ 0 ] += 2;
    f8b2:	80 91 ed 06 	lds	r24, 0x06ED
    f8b6:	8e 5f       	subi	r24, 0xFE	; 254
    f8b8:	80 93 ed 06 	sts	0x06ED, r24
            mystrncpy( (char *)&reply[ 6 ], (char *)thread_table[ i ].threadName, len );
    f8bc:	8e 81       	ldd	r24, Y+6	; 0x06
    f8be:	28 2f       	mov	r18, r24
    f8c0:	33 27       	eor	r19, r19
    f8c2:	85 e2       	ldi	r24, 0x25	; 37
    f8c4:	90 e0       	ldi	r25, 0x00	; 0
    f8c6:	ac 01       	movw	r20, r24
    f8c8:	24 9f       	mul	r18, r20
    f8ca:	c0 01       	movw	r24, r0
    f8cc:	25 9f       	mul	r18, r21
    f8ce:	90 0d       	add	r25, r0
    f8d0:	34 9f       	mul	r19, r20
    f8d2:	90 0d       	add	r25, r0
    f8d4:	11 24       	eor	r1, r1
    f8d6:	05 96       	adiw	r24, 0x05	; 5
    f8d8:	84 52       	subi	r24, 0x24	; 36
    f8da:	97 4f       	sbci	r25, 0xF7	; 247
    f8dc:	9c 01       	movw	r18, r24
    f8de:	83 ef       	ldi	r24, 0xF3	; 243
    f8e0:	96 e0       	ldi	r25, 0x06	; 6
    f8e2:	4d 81       	ldd	r20, Y+5	; 0x05
    f8e4:	b9 01       	movw	r22, r18
    f8e6:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
    f8ea:	17 c0       	rjmp	.+46     	; 0xf91a <reply_ps+0x17a>
         }
          else {
            mystrncpy( (char *)&reply[ 4 ], (char *)thread_table[ i ].threadName, len );
    f8ec:	8e 81       	ldd	r24, Y+6	; 0x06
    f8ee:	28 2f       	mov	r18, r24
    f8f0:	33 27       	eor	r19, r19
    f8f2:	85 e2       	ldi	r24, 0x25	; 37
    f8f4:	90 e0       	ldi	r25, 0x00	; 0
    f8f6:	ac 01       	movw	r20, r24
    f8f8:	24 9f       	mul	r18, r20
    f8fa:	c0 01       	movw	r24, r0
    f8fc:	25 9f       	mul	r18, r21
    f8fe:	90 0d       	add	r25, r0
    f900:	34 9f       	mul	r19, r20
    f902:	90 0d       	add	r25, r0
    f904:	11 24       	eor	r1, r1
    f906:	05 96       	adiw	r24, 0x05	; 5
    f908:	84 52       	subi	r24, 0x24	; 36
    f90a:	97 4f       	sbci	r25, 0xF7	; 247
    f90c:	9c 01       	movw	r18, r24
    f90e:	81 ef       	ldi	r24, 0xF1	; 241
    f910:	96 e0       	ldi	r25, 0x06	; 6
    f912:	4d 81       	ldd	r20, Y+5	; 0x05
    f914:	b9 01       	movw	r22, r18
    f916:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
         } 
         StandardSocketSend( 0xefef, 0xffff, 32, reply );
    f91a:	8d ee       	ldi	r24, 0xED	; 237
    f91c:	96 e0       	ldi	r25, 0x06	; 6
    f91e:	9c 01       	movw	r18, r24
    f920:	40 e2       	ldi	r20, 0x20	; 32
    f922:	6f ef       	ldi	r22, 0xFF	; 255
    f924:	7f ef       	ldi	r23, 0xFF	; 255
    f926:	8f ee       	ldi	r24, 0xEF	; 239
    f928:	9f ee       	ldi	r25, 0xEF	; 239
    f92a:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    f92e:	8e 81       	ldd	r24, Y+6	; 0x06
    f930:	8f 5f       	subi	r24, 0xFF	; 255
    f932:	8e 83       	std	Y+6, r24	; 0x06
    f934:	8e 81       	ldd	r24, Y+6	; 0x06
    f936:	88 30       	cpi	r24, 0x08	; 8
    f938:	08 f4       	brcc	.+2      	; 0xf93c <reply_ps+0x19c>
    f93a:	49 cf       	rjmp	.-366    	; 0xf7ce <reply_ps+0x2e>
    f93c:	28 96       	adiw	r28, 0x08	; 8
    f93e:	0f b6       	in	r0, 0x3f	; 63
    f940:	f8 94       	cli
    f942:	de bf       	out	0x3e, r29	; 62
    f944:	0f be       	out	0x3f, r0	; 63
    f946:	cd bf       	out	0x3d, r28	; 61
    f948:	df 91       	pop	r29
    f94a:	cf 91       	pop	r28
    f94c:	08 95       	ret

0000f94e <reply_memory>:
      }
   }
}


//-------------------------------------------------------------------------

//Is this function avr specific? Does not look so, though. 

void reply_memory( uint8_t *receivebuffer ) {
    f94e:	cf 93       	push	r28
    f950:	df 93       	push	r29
    f952:	cd b7       	in	r28, 0x3d	; 61
    f954:	de b7       	in	r29, 0x3e	; 62
    f956:	24 97       	sbiw	r28, 0x04	; 4
    f958:	0f b6       	in	r0, 0x3f	; 63
    f95a:	f8 94       	cli
    f95c:	de bf       	out	0x3e, r29	; 62
    f95e:	0f be       	out	0x3f, r0	; 63
    f960:	cd bf       	out	0x3d, r28	; 61
    f962:	9c 83       	std	Y+4, r25	; 0x04
    f964:	8b 83       	std	Y+3, r24	; 0x03
   uint8_t i, len;

   //reply[0] = 15;

   reply[ 1 ] = 181;
    f966:	85 eb       	ldi	r24, 0xB5	; 181
    f968:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    f96c:	80 91 5b 07 	lds	r24, 0x075B
    f970:	90 91 5c 07 	lds	r25, 0x075C
    f974:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = kernelromsize/256;
    f978:	80 91 66 01 	lds	r24, 0x0166
    f97c:	90 91 67 01 	lds	r25, 0x0167
    f980:	89 2f       	mov	r24, r25
    f982:	99 27       	eor	r25, r25
    f984:	80 93 f0 06 	sts	0x06F0, r24
   reply[ 4 ] = kernelromsize%256; 
    f988:	80 91 66 01 	lds	r24, 0x0166
    f98c:	90 91 67 01 	lds	r25, 0x0167
    f990:	80 93 f1 06 	sts	0x06F1, r24
   reply[ 5 ] = kernelramsize/256; 
    f994:	80 91 68 01 	lds	r24, 0x0168
    f998:	90 91 69 01 	lds	r25, 0x0169
    f99c:	89 2f       	mov	r24, r25
    f99e:	99 27       	eor	r25, r25
    f9a0:	80 93 f2 06 	sts	0x06F2, r24
   reply[ 6 ] = kernelramsize%256; 
    f9a4:	80 91 68 01 	lds	r24, 0x0168
    f9a8:	90 91 69 01 	lds	r25, 0x0169
    f9ac:	80 93 f3 06 	sts	0x06F3, r24
  

   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
    f9b0:	1a 82       	std	Y+2, r1	; 0x02
    f9b2:	c5 c1       	rjmp	.+906    	; 0xfd3e <reply_memory+0x3f0>
      if ( thread_table[ i ].state != STATE_NULL ) {
    f9b4:	8a 81       	ldd	r24, Y+2	; 0x02
    f9b6:	28 2f       	mov	r18, r24
    f9b8:	33 27       	eor	r19, r19
    f9ba:	85 e2       	ldi	r24, 0x25	; 37
    f9bc:	90 e0       	ldi	r25, 0x00	; 0
    f9be:	ac 01       	movw	r20, r24
    f9c0:	24 9f       	mul	r18, r20
    f9c2:	c0 01       	movw	r24, r0
    f9c4:	25 9f       	mul	r18, r21
    f9c6:	90 0d       	add	r25, r0
    f9c8:	34 9f       	mul	r19, r20
    f9ca:	90 0d       	add	r25, r0
    f9cc:	11 24       	eor	r1, r1
    f9ce:	fc 01       	movw	r30, r24
    f9d0:	e2 52       	subi	r30, 0x22	; 34
    f9d2:	f7 4f       	sbci	r31, 0xF7	; 247
    f9d4:	80 81       	ld	r24, Z
    f9d6:	88 23       	and	r24, r24
    f9d8:	09 f4       	brne	.+2      	; 0xf9dc <reply_memory+0x8e>
    f9da:	ae c1       	rjmp	.+860    	; 0xfd38 <reply_memory+0x3ea>
         len = mystrlen( (char *)thread_table[ i ].threadName );
    f9dc:	8a 81       	ldd	r24, Y+2	; 0x02
    f9de:	28 2f       	mov	r18, r24
    f9e0:	33 27       	eor	r19, r19
    f9e2:	85 e2       	ldi	r24, 0x25	; 37
    f9e4:	90 e0       	ldi	r25, 0x00	; 0
    f9e6:	bc 01       	movw	r22, r24
    f9e8:	26 9f       	mul	r18, r22
    f9ea:	c0 01       	movw	r24, r0
    f9ec:	27 9f       	mul	r18, r23
    f9ee:	90 0d       	add	r25, r0
    f9f0:	36 9f       	mul	r19, r22
    f9f2:	90 0d       	add	r25, r0
    f9f4:	11 24       	eor	r1, r1
    f9f6:	05 96       	adiw	r24, 0x05	; 5
    f9f8:	84 52       	subi	r24, 0x24	; 36
    f9fa:	97 4f       	sbci	r25, 0xF7	; 247
    f9fc:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
    fa00:	89 83       	std	Y+1, r24	; 0x01

         reply[7] = len; 
    fa02:	89 81       	ldd	r24, Y+1	; 0x01
    fa04:	80 93 f4 06 	sts	0x06F4, r24

		 mystrncpy( (char *)&reply[ 8 ], (char *)thread_table[ i ].threadName, len );
    fa08:	8a 81       	ldd	r24, Y+2	; 0x02
    fa0a:	28 2f       	mov	r18, r24
    fa0c:	33 27       	eor	r19, r19
    fa0e:	85 e2       	ldi	r24, 0x25	; 37
    fa10:	90 e0       	ldi	r25, 0x00	; 0
    fa12:	ac 01       	movw	r20, r24
    fa14:	24 9f       	mul	r18, r20
    fa16:	c0 01       	movw	r24, r0
    fa18:	25 9f       	mul	r18, r21
    fa1a:	90 0d       	add	r25, r0
    fa1c:	34 9f       	mul	r19, r20
    fa1e:	90 0d       	add	r25, r0
    fa20:	11 24       	eor	r1, r1
    fa22:	05 96       	adiw	r24, 0x05	; 5
    fa24:	84 52       	subi	r24, 0x24	; 36
    fa26:	97 4f       	sbci	r25, 0xF7	; 247
    fa28:	9c 01       	movw	r18, r24
    fa2a:	85 ef       	ldi	r24, 0xF5	; 245
    fa2c:	96 e0       	ldi	r25, 0x06	; 6
    fa2e:	49 81       	ldd	r20, Y+1	; 0x01
    fa30:	b9 01       	movw	r22, r18
    fa32:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
         
		 reply[8+len] = 0; 
    fa36:	89 81       	ldd	r24, Y+1	; 0x01
    fa38:	99 27       	eor	r25, r25
    fa3a:	08 96       	adiw	r24, 0x08	; 8
    fa3c:	fc 01       	movw	r30, r24
    fa3e:	e3 51       	subi	r30, 0x13	; 19
    fa40:	f9 4f       	sbci	r31, 0xF9	; 249
    fa42:	10 82       	st	Z, r1

		 //Note that here the romstart is the exact start location in words
		 //the romesize is in bytes
		 //the ramstart is in bytes
		 //the ramsize is in bytes

		 reply[len+9] =  thread_table[i].romstart/256; 
    fa44:	89 81       	ldd	r24, Y+1	; 0x01
    fa46:	99 27       	eor	r25, r25
    fa48:	ac 01       	movw	r20, r24
    fa4a:	47 5f       	subi	r20, 0xF7	; 247
    fa4c:	5f 4f       	sbci	r21, 0xFF	; 255
    fa4e:	8a 81       	ldd	r24, Y+2	; 0x02
    fa50:	28 2f       	mov	r18, r24
    fa52:	33 27       	eor	r19, r19
    fa54:	85 e2       	ldi	r24, 0x25	; 37
    fa56:	90 e0       	ldi	r25, 0x00	; 0
    fa58:	bc 01       	movw	r22, r24
    fa5a:	26 9f       	mul	r18, r22
    fa5c:	c0 01       	movw	r24, r0
    fa5e:	27 9f       	mul	r18, r23
    fa60:	90 0d       	add	r25, r0
    fa62:	36 9f       	mul	r19, r22
    fa64:	90 0d       	add	r25, r0
    fa66:	11 24       	eor	r1, r1
    fa68:	fc 01       	movw	r30, r24
    fa6a:	ed 50       	subi	r30, 0x0D	; 13
    fa6c:	f7 4f       	sbci	r31, 0xF7	; 247
    fa6e:	80 81       	ld	r24, Z
    fa70:	91 81       	ldd	r25, Z+1	; 0x01
    fa72:	89 2f       	mov	r24, r25
    fa74:	99 27       	eor	r25, r25
    fa76:	fa 01       	movw	r30, r20
    fa78:	e3 51       	subi	r30, 0x13	; 19
    fa7a:	f9 4f       	sbci	r31, 0xF9	; 249
    fa7c:	80 83       	st	Z, r24
		 reply[len+10] = thread_table[i].romstart%256; 
    fa7e:	89 81       	ldd	r24, Y+1	; 0x01
    fa80:	99 27       	eor	r25, r25
    fa82:	ac 01       	movw	r20, r24
    fa84:	46 5f       	subi	r20, 0xF6	; 246
    fa86:	5f 4f       	sbci	r21, 0xFF	; 255
    fa88:	8a 81       	ldd	r24, Y+2	; 0x02
    fa8a:	28 2f       	mov	r18, r24
    fa8c:	33 27       	eor	r19, r19
    fa8e:	85 e2       	ldi	r24, 0x25	; 37
    fa90:	90 e0       	ldi	r25, 0x00	; 0
    fa92:	bc 01       	movw	r22, r24
    fa94:	26 9f       	mul	r18, r22
    fa96:	c0 01       	movw	r24, r0
    fa98:	27 9f       	mul	r18, r23
    fa9a:	90 0d       	add	r25, r0
    fa9c:	36 9f       	mul	r19, r22
    fa9e:	90 0d       	add	r25, r0
    faa0:	11 24       	eor	r1, r1
    faa2:	fc 01       	movw	r30, r24
    faa4:	ed 50       	subi	r30, 0x0D	; 13
    faa6:	f7 4f       	sbci	r31, 0xF7	; 247
    faa8:	80 81       	ld	r24, Z
    faaa:	91 81       	ldd	r25, Z+1	; 0x01
    faac:	fa 01       	movw	r30, r20
    faae:	e3 51       	subi	r30, 0x13	; 19
    fab0:	f9 4f       	sbci	r31, 0xF9	; 249
    fab2:	80 83       	st	Z, r24
		 reply[len+11] = thread_table[i].romsize/256; 
    fab4:	89 81       	ldd	r24, Y+1	; 0x01
    fab6:	99 27       	eor	r25, r25
    fab8:	ac 01       	movw	r20, r24
    faba:	45 5f       	subi	r20, 0xF5	; 245
    fabc:	5f 4f       	sbci	r21, 0xFF	; 255
    fabe:	8a 81       	ldd	r24, Y+2	; 0x02
    fac0:	28 2f       	mov	r18, r24
    fac2:	33 27       	eor	r19, r19
    fac4:	85 e2       	ldi	r24, 0x25	; 37
    fac6:	90 e0       	ldi	r25, 0x00	; 0
    fac8:	bc 01       	movw	r22, r24
    faca:	26 9f       	mul	r18, r22
    facc:	c0 01       	movw	r24, r0
    face:	27 9f       	mul	r18, r23
    fad0:	90 0d       	add	r25, r0
    fad2:	36 9f       	mul	r19, r22
    fad4:	90 0d       	add	r25, r0
    fad6:	11 24       	eor	r1, r1
    fad8:	fc 01       	movw	r30, r24
    fada:	eb 50       	subi	r30, 0x0B	; 11
    fadc:	f7 4f       	sbci	r31, 0xF7	; 247
    fade:	80 81       	ld	r24, Z
    fae0:	91 81       	ldd	r25, Z+1	; 0x01
    fae2:	89 2f       	mov	r24, r25
    fae4:	99 27       	eor	r25, r25
    fae6:	fa 01       	movw	r30, r20
    fae8:	e3 51       	subi	r30, 0x13	; 19
    faea:	f9 4f       	sbci	r31, 0xF9	; 249
    faec:	80 83       	st	Z, r24
		 reply[len+12] = thread_table[i].romsize%256;
    faee:	89 81       	ldd	r24, Y+1	; 0x01
    faf0:	99 27       	eor	r25, r25
    faf2:	ac 01       	movw	r20, r24
    faf4:	44 5f       	subi	r20, 0xF4	; 244
    faf6:	5f 4f       	sbci	r21, 0xFF	; 255
    faf8:	8a 81       	ldd	r24, Y+2	; 0x02
    fafa:	28 2f       	mov	r18, r24
    fafc:	33 27       	eor	r19, r19
    fafe:	85 e2       	ldi	r24, 0x25	; 37
    fb00:	90 e0       	ldi	r25, 0x00	; 0
    fb02:	bc 01       	movw	r22, r24
    fb04:	26 9f       	mul	r18, r22
    fb06:	c0 01       	movw	r24, r0
    fb08:	27 9f       	mul	r18, r23
    fb0a:	90 0d       	add	r25, r0
    fb0c:	36 9f       	mul	r19, r22
    fb0e:	90 0d       	add	r25, r0
    fb10:	11 24       	eor	r1, r1
    fb12:	fc 01       	movw	r30, r24
    fb14:	eb 50       	subi	r30, 0x0B	; 11
    fb16:	f7 4f       	sbci	r31, 0xF7	; 247
    fb18:	80 81       	ld	r24, Z
    fb1a:	91 81       	ldd	r25, Z+1	; 0x01
    fb1c:	fa 01       	movw	r30, r20
    fb1e:	e3 51       	subi	r30, 0x13	; 19
    fb20:	f9 4f       	sbci	r31, 0xF9	; 249
    fb22:	80 83       	st	Z, r24
		 reply[len+13] = ((uint16_t)thread_table[i].ramstart)/256; 
    fb24:	89 81       	ldd	r24, Y+1	; 0x01
    fb26:	99 27       	eor	r25, r25
    fb28:	ac 01       	movw	r20, r24
    fb2a:	43 5f       	subi	r20, 0xF3	; 243
    fb2c:	5f 4f       	sbci	r21, 0xFF	; 255
    fb2e:	8a 81       	ldd	r24, Y+2	; 0x02
    fb30:	28 2f       	mov	r18, r24
    fb32:	33 27       	eor	r19, r19
    fb34:	85 e2       	ldi	r24, 0x25	; 37
    fb36:	90 e0       	ldi	r25, 0x00	; 0
    fb38:	bc 01       	movw	r22, r24
    fb3a:	26 9f       	mul	r18, r22
    fb3c:	c0 01       	movw	r24, r0
    fb3e:	27 9f       	mul	r18, r23
    fb40:	90 0d       	add	r25, r0
    fb42:	36 9f       	mul	r19, r22
    fb44:	90 0d       	add	r25, r0
    fb46:	11 24       	eor	r1, r1
    fb48:	fc 01       	movw	r30, r24
    fb4a:	e3 51       	subi	r30, 0x13	; 19
    fb4c:	f7 4f       	sbci	r31, 0xF7	; 247
    fb4e:	80 81       	ld	r24, Z
    fb50:	91 81       	ldd	r25, Z+1	; 0x01
    fb52:	89 2f       	mov	r24, r25
    fb54:	99 27       	eor	r25, r25
    fb56:	fa 01       	movw	r30, r20
    fb58:	e3 51       	subi	r30, 0x13	; 19
    fb5a:	f9 4f       	sbci	r31, 0xF9	; 249
    fb5c:	80 83       	st	Z, r24
		 reply[len+14] = ((uint16_t)thread_table[i].ramstart)%256;
    fb5e:	89 81       	ldd	r24, Y+1	; 0x01
    fb60:	99 27       	eor	r25, r25
    fb62:	ac 01       	movw	r20, r24
    fb64:	42 5f       	subi	r20, 0xF2	; 242
    fb66:	5f 4f       	sbci	r21, 0xFF	; 255
    fb68:	8a 81       	ldd	r24, Y+2	; 0x02
    fb6a:	28 2f       	mov	r18, r24
    fb6c:	33 27       	eor	r19, r19
    fb6e:	85 e2       	ldi	r24, 0x25	; 37
    fb70:	90 e0       	ldi	r25, 0x00	; 0
    fb72:	bc 01       	movw	r22, r24
    fb74:	26 9f       	mul	r18, r22
    fb76:	c0 01       	movw	r24, r0
    fb78:	27 9f       	mul	r18, r23
    fb7a:	90 0d       	add	r25, r0
    fb7c:	36 9f       	mul	r19, r22
    fb7e:	90 0d       	add	r25, r0
    fb80:	11 24       	eor	r1, r1
    fb82:	fc 01       	movw	r30, r24
    fb84:	e3 51       	subi	r30, 0x13	; 19
    fb86:	f7 4f       	sbci	r31, 0xF7	; 247
    fb88:	80 81       	ld	r24, Z
    fb8a:	91 81       	ldd	r25, Z+1	; 0x01
    fb8c:	fa 01       	movw	r30, r20
    fb8e:	e3 51       	subi	r30, 0x13	; 19
    fb90:	f9 4f       	sbci	r31, 0xF9	; 249
    fb92:	80 83       	st	Z, r24
		 reply[len+15] = ((uint16_t)thread_table[i].ramend)/256; 
    fb94:	89 81       	ldd	r24, Y+1	; 0x01
    fb96:	99 27       	eor	r25, r25
    fb98:	ac 01       	movw	r20, r24
    fb9a:	41 5f       	subi	r20, 0xF1	; 241
    fb9c:	5f 4f       	sbci	r21, 0xFF	; 255
    fb9e:	8a 81       	ldd	r24, Y+2	; 0x02
    fba0:	28 2f       	mov	r18, r24
    fba2:	33 27       	eor	r19, r19
    fba4:	85 e2       	ldi	r24, 0x25	; 37
    fba6:	90 e0       	ldi	r25, 0x00	; 0
    fba8:	bc 01       	movw	r22, r24
    fbaa:	26 9f       	mul	r18, r22
    fbac:	c0 01       	movw	r24, r0
    fbae:	27 9f       	mul	r18, r23
    fbb0:	90 0d       	add	r25, r0
    fbb2:	36 9f       	mul	r19, r22
    fbb4:	90 0d       	add	r25, r0
    fbb6:	11 24       	eor	r1, r1
    fbb8:	fc 01       	movw	r30, r24
    fbba:	e1 51       	subi	r30, 0x11	; 17
    fbbc:	f7 4f       	sbci	r31, 0xF7	; 247
    fbbe:	80 81       	ld	r24, Z
    fbc0:	91 81       	ldd	r25, Z+1	; 0x01
    fbc2:	89 2f       	mov	r24, r25
    fbc4:	99 27       	eor	r25, r25
    fbc6:	fa 01       	movw	r30, r20
    fbc8:	e3 51       	subi	r30, 0x13	; 19
    fbca:	f9 4f       	sbci	r31, 0xF9	; 249
    fbcc:	80 83       	st	Z, r24
		 reply[len+16] = ((uint16_t)thread_table[i].ramend)%256;
    fbce:	89 81       	ldd	r24, Y+1	; 0x01
    fbd0:	99 27       	eor	r25, r25
    fbd2:	ac 01       	movw	r20, r24
    fbd4:	40 5f       	subi	r20, 0xF0	; 240
    fbd6:	5f 4f       	sbci	r21, 0xFF	; 255
    fbd8:	8a 81       	ldd	r24, Y+2	; 0x02
    fbda:	28 2f       	mov	r18, r24
    fbdc:	33 27       	eor	r19, r19
    fbde:	85 e2       	ldi	r24, 0x25	; 37
    fbe0:	90 e0       	ldi	r25, 0x00	; 0
    fbe2:	bc 01       	movw	r22, r24
    fbe4:	26 9f       	mul	r18, r22
    fbe6:	c0 01       	movw	r24, r0
    fbe8:	27 9f       	mul	r18, r23
    fbea:	90 0d       	add	r25, r0
    fbec:	36 9f       	mul	r19, r22
    fbee:	90 0d       	add	r25, r0
    fbf0:	11 24       	eor	r1, r1
    fbf2:	fc 01       	movw	r30, r24
    fbf4:	e1 51       	subi	r30, 0x11	; 17
    fbf6:	f7 4f       	sbci	r31, 0xF7	; 247
    fbf8:	80 81       	ld	r24, Z
    fbfa:	91 81       	ldd	r25, Z+1	; 0x01
    fbfc:	fa 01       	movw	r30, r20
    fbfe:	e3 51       	subi	r30, 0x13	; 19
    fc00:	f9 4f       	sbci	r31, 0xF9	; 249
    fc02:	80 83       	st	Z, r24

         reply[len+17] = ((uint16_t)thread_table[i].sp)/256;
    fc04:	89 81       	ldd	r24, Y+1	; 0x01
    fc06:	99 27       	eor	r25, r25
    fc08:	ac 01       	movw	r20, r24
    fc0a:	4f 5e       	subi	r20, 0xEF	; 239
    fc0c:	5f 4f       	sbci	r21, 0xFF	; 255
    fc0e:	8a 81       	ldd	r24, Y+2	; 0x02
    fc10:	28 2f       	mov	r18, r24
    fc12:	33 27       	eor	r19, r19
    fc14:	85 e2       	ldi	r24, 0x25	; 37
    fc16:	90 e0       	ldi	r25, 0x00	; 0
    fc18:	bc 01       	movw	r22, r24
    fc1a:	26 9f       	mul	r18, r22
    fc1c:	c0 01       	movw	r24, r0
    fc1e:	27 9f       	mul	r18, r23
    fc20:	90 0d       	add	r25, r0
    fc22:	36 9f       	mul	r19, r22
    fc24:	90 0d       	add	r25, r0
    fc26:	11 24       	eor	r1, r1
    fc28:	fc 01       	movw	r30, r24
    fc2a:	e4 52       	subi	r30, 0x24	; 36
    fc2c:	f7 4f       	sbci	r31, 0xF7	; 247
    fc2e:	80 81       	ld	r24, Z
    fc30:	91 81       	ldd	r25, Z+1	; 0x01
    fc32:	89 2f       	mov	r24, r25
    fc34:	99 27       	eor	r25, r25
    fc36:	fa 01       	movw	r30, r20
    fc38:	e3 51       	subi	r30, 0x13	; 19
    fc3a:	f9 4f       	sbci	r31, 0xF9	; 249
    fc3c:	80 83       	st	Z, r24
		 reply[len+18] = ((uint16_t)thread_table[i].sp)%256;
    fc3e:	89 81       	ldd	r24, Y+1	; 0x01
    fc40:	99 27       	eor	r25, r25
    fc42:	ac 01       	movw	r20, r24
    fc44:	4e 5e       	subi	r20, 0xEE	; 238
    fc46:	5f 4f       	sbci	r21, 0xFF	; 255
    fc48:	8a 81       	ldd	r24, Y+2	; 0x02
    fc4a:	28 2f       	mov	r18, r24
    fc4c:	33 27       	eor	r19, r19
    fc4e:	85 e2       	ldi	r24, 0x25	; 37
    fc50:	90 e0       	ldi	r25, 0x00	; 0
    fc52:	bc 01       	movw	r22, r24
    fc54:	26 9f       	mul	r18, r22
    fc56:	c0 01       	movw	r24, r0
    fc58:	27 9f       	mul	r18, r23
    fc5a:	90 0d       	add	r25, r0
    fc5c:	36 9f       	mul	r19, r22
    fc5e:	90 0d       	add	r25, r0
    fc60:	11 24       	eor	r1, r1
    fc62:	fc 01       	movw	r30, r24
    fc64:	e4 52       	subi	r30, 0x24	; 36
    fc66:	f7 4f       	sbci	r31, 0xF7	; 247
    fc68:	80 81       	ld	r24, Z
    fc6a:	91 81       	ldd	r25, Z+1	; 0x01
    fc6c:	fa 01       	movw	r30, r20
    fc6e:	e3 51       	subi	r30, 0x13	; 19
    fc70:	f9 4f       	sbci	r31, 0xF9	; 249
    fc72:	80 83       	st	Z, r24
		 reply[len+19] = ((uint16_t)thread_table[i].sizeofBss)/256;
    fc74:	89 81       	ldd	r24, Y+1	; 0x01
    fc76:	99 27       	eor	r25, r25
    fc78:	ac 01       	movw	r20, r24
    fc7a:	4d 5e       	subi	r20, 0xED	; 237
    fc7c:	5f 4f       	sbci	r21, 0xFF	; 255
    fc7e:	8a 81       	ldd	r24, Y+2	; 0x02
    fc80:	28 2f       	mov	r18, r24
    fc82:	33 27       	eor	r19, r19
    fc84:	85 e2       	ldi	r24, 0x25	; 37
    fc86:	90 e0       	ldi	r25, 0x00	; 0
    fc88:	bc 01       	movw	r22, r24
    fc8a:	26 9f       	mul	r18, r22
    fc8c:	c0 01       	movw	r24, r0
    fc8e:	27 9f       	mul	r18, r23
    fc90:	90 0d       	add	r25, r0
    fc92:	36 9f       	mul	r19, r22
    fc94:	90 0d       	add	r25, r0
    fc96:	11 24       	eor	r1, r1
    fc98:	fc 01       	movw	r30, r24
    fc9a:	ef 50       	subi	r30, 0x0F	; 15
    fc9c:	f7 4f       	sbci	r31, 0xF7	; 247
    fc9e:	80 81       	ld	r24, Z
    fca0:	91 81       	ldd	r25, Z+1	; 0x01
    fca2:	89 2f       	mov	r24, r25
    fca4:	99 27       	eor	r25, r25
    fca6:	fa 01       	movw	r30, r20
    fca8:	e3 51       	subi	r30, 0x13	; 19
    fcaa:	f9 4f       	sbci	r31, 0xF9	; 249
    fcac:	80 83       	st	Z, r24
		 reply[len+20] = ((uint16_t)thread_table[i].sizeofBss)%256;
    fcae:	89 81       	ldd	r24, Y+1	; 0x01
    fcb0:	99 27       	eor	r25, r25
    fcb2:	ac 01       	movw	r20, r24
    fcb4:	4c 5e       	subi	r20, 0xEC	; 236
    fcb6:	5f 4f       	sbci	r21, 0xFF	; 255
    fcb8:	8a 81       	ldd	r24, Y+2	; 0x02
    fcba:	28 2f       	mov	r18, r24
    fcbc:	33 27       	eor	r19, r19
    fcbe:	85 e2       	ldi	r24, 0x25	; 37
    fcc0:	90 e0       	ldi	r25, 0x00	; 0
    fcc2:	bc 01       	movw	r22, r24
    fcc4:	26 9f       	mul	r18, r22
    fcc6:	c0 01       	movw	r24, r0
    fcc8:	27 9f       	mul	r18, r23
    fcca:	90 0d       	add	r25, r0
    fccc:	36 9f       	mul	r19, r22
    fcce:	90 0d       	add	r25, r0
    fcd0:	11 24       	eor	r1, r1
    fcd2:	fc 01       	movw	r30, r24
    fcd4:	ef 50       	subi	r30, 0x0F	; 15
    fcd6:	f7 4f       	sbci	r31, 0xF7	; 247
    fcd8:	80 81       	ld	r24, Z
    fcda:	91 81       	ldd	r25, Z+1	; 0x01
    fcdc:	fa 01       	movw	r30, r20
    fcde:	e3 51       	subi	r30, 0x13	; 19
    fce0:	f9 4f       	sbci	r31, 0xF9	; 249
    fce2:	80 83       	st	Z, r24

		 reply[len+21] = ((uint16_t)old_stack_ptr)/256;
    fce4:	89 81       	ldd	r24, Y+1	; 0x01
    fce6:	99 27       	eor	r25, r25
    fce8:	9c 01       	movw	r18, r24
    fcea:	2b 5e       	subi	r18, 0xEB	; 235
    fcec:	3f 4f       	sbci	r19, 0xFF	; 255
    fcee:	80 91 cf 08 	lds	r24, 0x08CF
    fcf2:	90 91 d0 08 	lds	r25, 0x08D0
    fcf6:	89 2f       	mov	r24, r25
    fcf8:	99 27       	eor	r25, r25
    fcfa:	f9 01       	movw	r30, r18
    fcfc:	e3 51       	subi	r30, 0x13	; 19
    fcfe:	f9 4f       	sbci	r31, 0xF9	; 249
    fd00:	80 83       	st	Z, r24
		 reply[len+22] = ((uint16_t)old_stack_ptr)%256;
    fd02:	89 81       	ldd	r24, Y+1	; 0x01
    fd04:	99 27       	eor	r25, r25
    fd06:	9c 01       	movw	r18, r24
    fd08:	2a 5e       	subi	r18, 0xEA	; 234
    fd0a:	3f 4f       	sbci	r19, 0xFF	; 255
    fd0c:	80 91 cf 08 	lds	r24, 0x08CF
    fd10:	90 91 d0 08 	lds	r25, 0x08D0
    fd14:	f9 01       	movw	r30, r18
    fd16:	e3 51       	subi	r30, 0x13	; 19
    fd18:	f9 4f       	sbci	r31, 0xF9	; 249
    fd1a:	80 83       	st	Z, r24

		 reply[0] = len+16+1; 
    fd1c:	89 81       	ldd	r24, Y+1	; 0x01
    fd1e:	8f 5e       	subi	r24, 0xEF	; 239
    fd20:	80 93 ed 06 	sts	0x06ED, r24

		  
         StandardSocketSend( 0xefef, 0xffff, 32, reply );
    fd24:	8d ee       	ldi	r24, 0xED	; 237
    fd26:	96 e0       	ldi	r25, 0x06	; 6
    fd28:	9c 01       	movw	r18, r24
    fd2a:	40 e2       	ldi	r20, 0x20	; 32
    fd2c:	6f ef       	ldi	r22, 0xFF	; 255
    fd2e:	7f ef       	ldi	r23, 0xFF	; 255
    fd30:	8f ee       	ldi	r24, 0xEF	; 239
    fd32:	9f ee       	ldi	r25, 0xEF	; 239
    fd34:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    fd38:	8a 81       	ldd	r24, Y+2	; 0x02
    fd3a:	8f 5f       	subi	r24, 0xFF	; 255
    fd3c:	8a 83       	std	Y+2, r24	; 0x02
    fd3e:	8a 81       	ldd	r24, Y+2	; 0x02
    fd40:	88 30       	cpi	r24, 0x08	; 8
    fd42:	08 f4       	brcc	.+2      	; 0xfd46 <reply_memory+0x3f8>
    fd44:	37 ce       	rjmp	.-914    	; 0xf9b4 <reply_memory+0x66>
    fd46:	24 96       	adiw	r28, 0x04	; 4
    fd48:	0f b6       	in	r0, 0x3f	; 63
    fd4a:	f8 94       	cli
    fd4c:	de bf       	out	0x3e, r29	; 62
    fd4e:	0f be       	out	0x3f, r0	; 63
    fd50:	cd bf       	out	0x3d, r28	; 61
    fd52:	df 91       	pop	r29
    fd54:	cf 91       	pop	r28
    fd56:	08 95       	ret

0000fd58 <reply_killthread>:


      }
   }
}



//-------------------------------------------------------------------------
void reply_killthread( uint8_t *receivebuffer ) {
    fd58:	cf 93       	push	r28
    fd5a:	df 93       	push	r29
    fd5c:	cd b7       	in	r28, 0x3d	; 61
    fd5e:	de b7       	in	r29, 0x3e	; 62
    fd60:	29 97       	sbiw	r28, 0x09	; 9
    fd62:	0f b6       	in	r0, 0x3f	; 63
    fd64:	f8 94       	cli
    fd66:	de bf       	out	0x3e, r29	; 62
    fd68:	0f be       	out	0x3f, r0	; 63
    fd6a:	cd bf       	out	0x3d, r28	; 61
    fd6c:	99 87       	std	Y+9, r25	; 0x09
    fd6e:	88 87       	std	Y+8, r24	; 0x08
   uint8_t i;
   uint8_t testtrue = 0;
    fd70:	1e 82       	std	Y+6, r1	; 0x06
   uint8_t *start, *end; 
   uint8_t index; 
   start = NULL;
    fd72:	1d 82       	std	Y+5, r1	; 0x05
    fd74:	1c 82       	std	Y+4, r1	; 0x04
   end = NULL; 
    fd76:	1b 82       	std	Y+3, r1	; 0x03
    fd78:	1a 82       	std	Y+2, r1	; 0x02
   
   receivebuffer[ receivebuffer[ 0] ] = '\0';
    fd7a:	e8 85       	ldd	r30, Y+8	; 0x08
    fd7c:	f9 85       	ldd	r31, Y+9	; 0x09
    fd7e:	80 81       	ld	r24, Z
    fd80:	99 27       	eor	r25, r25
    fd82:	9c 01       	movw	r18, r24
    fd84:	88 85       	ldd	r24, Y+8	; 0x08
    fd86:	99 85       	ldd	r25, Y+9	; 0x09
    fd88:	f9 01       	movw	r30, r18
    fd8a:	e8 0f       	add	r30, r24
    fd8c:	f9 1f       	adc	r31, r25
    fd8e:	10 82       	st	Z, r1

   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
    fd90:	1f 82       	std	Y+7, r1	; 0x07
    fd92:	6d c0       	rjmp	.+218    	; 0xfe6e <reply_killthread+0x116>
      if ( thread_table[ i ].state != STATE_NULL ) {
    fd94:	8f 81       	ldd	r24, Y+7	; 0x07
    fd96:	28 2f       	mov	r18, r24
    fd98:	33 27       	eor	r19, r19
    fd9a:	85 e2       	ldi	r24, 0x25	; 37
    fd9c:	90 e0       	ldi	r25, 0x00	; 0
    fd9e:	ac 01       	movw	r20, r24
    fda0:	24 9f       	mul	r18, r20
    fda2:	c0 01       	movw	r24, r0
    fda4:	25 9f       	mul	r18, r21
    fda6:	90 0d       	add	r25, r0
    fda8:	34 9f       	mul	r19, r20
    fdaa:	90 0d       	add	r25, r0
    fdac:	11 24       	eor	r1, r1
    fdae:	fc 01       	movw	r30, r24
    fdb0:	e2 52       	subi	r30, 0x22	; 34
    fdb2:	f7 4f       	sbci	r31, 0xF7	; 247
    fdb4:	80 81       	ld	r24, Z
    fdb6:	88 23       	and	r24, r24
    fdb8:	09 f4       	brne	.+2      	; 0xfdbc <reply_killthread+0x64>
    fdba:	56 c0       	rjmp	.+172    	; 0xfe68 <reply_killthread+0x110>
         if ( superstring( (char *)thread_table[ i ].threadName, ( char* )& receivebuffer[ 3 ] ) == 0 ) {
    fdbc:	88 85       	ldd	r24, Y+8	; 0x08
    fdbe:	99 85       	ldd	r25, Y+9	; 0x09
    fdc0:	03 96       	adiw	r24, 0x03	; 3
    fdc2:	ac 01       	movw	r20, r24
    fdc4:	8f 81       	ldd	r24, Y+7	; 0x07
    fdc6:	28 2f       	mov	r18, r24
    fdc8:	33 27       	eor	r19, r19
    fdca:	85 e2       	ldi	r24, 0x25	; 37
    fdcc:	90 e0       	ldi	r25, 0x00	; 0
    fdce:	bc 01       	movw	r22, r24
    fdd0:	26 9f       	mul	r18, r22
    fdd2:	c0 01       	movw	r24, r0
    fdd4:	27 9f       	mul	r18, r23
    fdd6:	90 0d       	add	r25, r0
    fdd8:	36 9f       	mul	r19, r22
    fdda:	90 0d       	add	r25, r0
    fddc:	11 24       	eor	r1, r1
    fdde:	05 96       	adiw	r24, 0x05	; 5
    fde0:	84 52       	subi	r24, 0x24	; 36
    fde2:	97 4f       	sbci	r25, 0xF7	; 247
    fde4:	ba 01       	movw	r22, r20
    fde6:	0e 94 e5 9a 	call	0x135ca	; 0x135ca <superstring>
    fdea:	00 97       	sbiw	r24, 0x00	; 0
    fdec:	e9 f5       	brne	.+122    	; 0xfe68 <reply_killthread+0x110>

            start = (uint8_t*)thread_table [ i ].ramstart; 
    fdee:	8f 81       	ldd	r24, Y+7	; 0x07
    fdf0:	28 2f       	mov	r18, r24
    fdf2:	33 27       	eor	r19, r19
    fdf4:	85 e2       	ldi	r24, 0x25	; 37
    fdf6:	90 e0       	ldi	r25, 0x00	; 0
    fdf8:	ac 01       	movw	r20, r24
    fdfa:	24 9f       	mul	r18, r20
    fdfc:	c0 01       	movw	r24, r0
    fdfe:	25 9f       	mul	r18, r21
    fe00:	90 0d       	add	r25, r0
    fe02:	34 9f       	mul	r19, r20
    fe04:	90 0d       	add	r25, r0
    fe06:	11 24       	eor	r1, r1
    fe08:	fc 01       	movw	r30, r24
    fe0a:	e3 51       	subi	r30, 0x13	; 19
    fe0c:	f7 4f       	sbci	r31, 0xF7	; 247
    fe0e:	80 81       	ld	r24, Z
    fe10:	91 81       	ldd	r25, Z+1	; 0x01
    fe12:	9d 83       	std	Y+5, r25	; 0x05
    fe14:	8c 83       	std	Y+4, r24	; 0x04
			end   = (uint8_t*)thread_table [ i ].ramend; 
    fe16:	8f 81       	ldd	r24, Y+7	; 0x07
    fe18:	28 2f       	mov	r18, r24
    fe1a:	33 27       	eor	r19, r19
    fe1c:	85 e2       	ldi	r24, 0x25	; 37
    fe1e:	90 e0       	ldi	r25, 0x00	; 0
    fe20:	bc 01       	movw	r22, r24
    fe22:	26 9f       	mul	r18, r22
    fe24:	c0 01       	movw	r24, r0
    fe26:	27 9f       	mul	r18, r23
    fe28:	90 0d       	add	r25, r0
    fe2a:	36 9f       	mul	r19, r22
    fe2c:	90 0d       	add	r25, r0
    fe2e:	11 24       	eor	r1, r1
    fe30:	fc 01       	movw	r30, r24
    fe32:	e1 51       	subi	r30, 0x11	; 17
    fe34:	f7 4f       	sbci	r31, 0xF7	; 247
    fe36:	80 81       	ld	r24, Z
    fe38:	91 81       	ldd	r25, Z+1	; 0x01
    fe3a:	9b 83       	std	Y+3, r25	; 0x03
    fe3c:	8a 83       	std	Y+2, r24	; 0x02
			index = i; 
    fe3e:	8f 81       	ldd	r24, Y+7	; 0x07
    fe40:	89 83       	std	Y+1, r24	; 0x01
			
			thread_table[ i ].state = STATE_NULL;
    fe42:	8f 81       	ldd	r24, Y+7	; 0x07
    fe44:	28 2f       	mov	r18, r24
    fe46:	33 27       	eor	r19, r19
    fe48:	85 e2       	ldi	r24, 0x25	; 37
    fe4a:	90 e0       	ldi	r25, 0x00	; 0
    fe4c:	ac 01       	movw	r20, r24
    fe4e:	24 9f       	mul	r18, r20
    fe50:	c0 01       	movw	r24, r0
    fe52:	25 9f       	mul	r18, r21
    fe54:	90 0d       	add	r25, r0
    fe56:	34 9f       	mul	r19, r20
    fe58:	90 0d       	add	r25, r0
    fe5a:	11 24       	eor	r1, r1
    fe5c:	fc 01       	movw	r30, r24
    fe5e:	e2 52       	subi	r30, 0x22	; 34
    fe60:	f7 4f       	sbci	r31, 0xF7	; 247
    fe62:	10 82       	st	Z, r1
            testtrue = 1;
    fe64:	81 e0       	ldi	r24, 0x01	; 1
    fe66:	8e 83       	std	Y+6, r24	; 0x06
    fe68:	8f 81       	ldd	r24, Y+7	; 0x07
    fe6a:	8f 5f       	subi	r24, 0xFF	; 255
    fe6c:	8f 83       	std	Y+7, r24	; 0x07
    fe6e:	8f 81       	ldd	r24, Y+7	; 0x07
    fe70:	88 30       	cpi	r24, 0x08	; 8
    fe72:	08 f4       	brcc	.+2      	; 0xfe76 <reply_killthread+0x11e>
    fe74:	8f cf       	rjmp	.-226    	; 0xfd94 <reply_killthread+0x3c>

			
         }
      }
   	}

  
 
 if (testtrue == 1)
    fe76:	8e 81       	ldd	r24, Y+6	; 0x06
    fe78:	81 30       	cpi	r24, 0x01	; 1
    fe7a:	09 f0       	breq	.+2      	; 0xfe7e <reply_killthread+0x126>
    fe7c:	42 c0       	rjmp	.+132    	; 0xff02 <reply_killthread+0x1aa>
 	{
 	 deleteThreadRegistrationInReceiverHandles(start, end);
    fe7e:	8a 81       	ldd	r24, Y+2	; 0x02
    fe80:	9b 81       	ldd	r25, Y+3	; 0x03
    fe82:	2c 81       	ldd	r18, Y+4	; 0x04
    fe84:	3d 81       	ldd	r19, Y+5	; 0x05
    fe86:	bc 01       	movw	r22, r24
    fe88:	c9 01       	movw	r24, r18
    fe8a:	0e 94 91 89 	call	0x11322	; 0x11322 <deleteThreadRegistrationInReceiverHandles>
	 releaseMutexLockUponThreadKill( index ); 
    fe8e:	89 81       	ldd	r24, Y+1	; 0x01
    fe90:	0e 94 4c 8e 	call	0x11c98	; 0x11c98 <releaseMutexLockUponThreadKill>
	 
   
    if (thread_clear_func_table[index] != NULL)
    fe94:	89 81       	ldd	r24, Y+1	; 0x01
    fe96:	99 27       	eor	r25, r25
    fe98:	88 0f       	add	r24, r24
    fe9a:	99 1f       	adc	r25, r25
    fe9c:	fc 01       	movw	r30, r24
    fe9e:	e1 54       	subi	r30, 0x41	; 65
    fea0:	f7 4f       	sbci	r31, 0xF7	; 247
    fea2:	80 81       	ld	r24, Z
    fea4:	91 81       	ldd	r25, Z+1	; 0x01
    fea6:	00 97       	sbiw	r24, 0x00	; 0
    fea8:	a1 f0       	breq	.+40     	; 0xfed2 <reply_killthread+0x17a>
       { (*thread_clear_func_table[index])(); 
    feaa:	89 81       	ldd	r24, Y+1	; 0x01
    feac:	99 27       	eor	r25, r25
    feae:	88 0f       	add	r24, r24
    feb0:	99 1f       	adc	r25, r25
    feb2:	fc 01       	movw	r30, r24
    feb4:	e1 54       	subi	r30, 0x41	; 65
    feb6:	f7 4f       	sbci	r31, 0xF7	; 247
    feb8:	01 90       	ld	r0, Z+
    feba:	f0 81       	ld	r31, Z
    febc:	e0 2d       	mov	r30, r0
    febe:	09 95       	icall
	     thread_clear_func_table[index] = NULL; 
    fec0:	89 81       	ldd	r24, Y+1	; 0x01
    fec2:	99 27       	eor	r25, r25
    fec4:	88 0f       	add	r24, r24
    fec6:	99 1f       	adc	r25, r25
    fec8:	fc 01       	movw	r30, r24
    feca:	e1 54       	subi	r30, 0x41	; 65
    fecc:	f7 4f       	sbci	r31, 0xF7	; 247
    fece:	11 82       	std	Z+1, r1	; 0x01
    fed0:	10 82       	st	Z, r1


       }

   if (timercallback[index] != NULL)
    fed2:	89 81       	ldd	r24, Y+1	; 0x01
    fed4:	99 27       	eor	r25, r25
    fed6:	88 0f       	add	r24, r24
    fed8:	99 1f       	adc	r25, r25
    feda:	fc 01       	movw	r30, r24
    fedc:	e1 5a       	subi	r30, 0xA1	; 161
    fede:	f8 4f       	sbci	r31, 0xF8	; 248
    fee0:	80 81       	ld	r24, Z
    fee2:	91 81       	ldd	r25, Z+1	; 0x01
    fee4:	00 97       	sbiw	r24, 0x00	; 0
    fee6:	69 f0       	breq	.+26     	; 0xff02 <reply_killthread+0x1aa>
      {
	    timercallback[index] = NULL; 
    fee8:	89 81       	ldd	r24, Y+1	; 0x01
    feea:	99 27       	eor	r25, r25
    feec:	88 0f       	add	r24, r24
    feee:	99 1f       	adc	r25, r25
    fef0:	fc 01       	movw	r30, r24
    fef2:	e1 5a       	subi	r30, 0xA1	; 161
    fef4:	f8 4f       	sbci	r31, 0xF8	; 248
    fef6:	11 82       	std	Z+1, r1	; 0x01
    fef8:	10 82       	st	Z, r1
		GenericTimerStop(	index + 12 ); 	  }   
    fefa:	89 81       	ldd	r24, Y+1	; 0x01
    fefc:	84 5f       	subi	r24, 0xF4	; 244
    fefe:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <GenericTimerStop>



   /*for ( i = 0; i < RECEIVE_HANDLE_NUM; i ++ )
   { if (( receivehandles[ i ].handlevalid == 1 ) && ( receivehandles[ i ].dataReady <= end ) && ( receivehandles[ i ].dataReady >= start )) {
      receivehandles[ i ].handlevalid = 0;
      receivehandles[ i ].port = 0;     
   	}
   	}
   	*/
 	}



   reply[ 0 ] = 4;
    ff02:	84 e0       	ldi	r24, 0x04	; 4
    ff04:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 232;
    ff08:	88 ee       	ldi	r24, 0xE8	; 232
    ff0a:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    ff0e:	80 91 5b 07 	lds	r24, 0x075B
    ff12:	90 91 5c 07 	lds	r25, 0x075C
    ff16:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = testtrue;
    ff1a:	8e 81       	ldd	r24, Y+6	; 0x06
    ff1c:	80 93 f0 06 	sts	0x06F0, r24
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    ff20:	8d ee       	ldi	r24, 0xED	; 237
    ff22:	96 e0       	ldi	r25, 0x06	; 6
    ff24:	9c 01       	movw	r18, r24
    ff26:	40 e2       	ldi	r20, 0x20	; 32
    ff28:	6f ef       	ldi	r22, 0xFF	; 255
    ff2a:	7f ef       	ldi	r23, 0xFF	; 255
    ff2c:	8f ee       	ldi	r24, 0xEF	; 239
    ff2e:	9f ee       	ldi	r25, 0xEF	; 239
    ff30:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    ff34:	29 96       	adiw	r28, 0x09	; 9
    ff36:	0f b6       	in	r0, 0x3f	; 63
    ff38:	f8 94       	cli
    ff3a:	de bf       	out	0x3e, r29	; 62
    ff3c:	0f be       	out	0x3f, r0	; 63
    ff3e:	cd bf       	out	0x3d, r28	; 61
    ff40:	df 91       	pop	r29
    ff42:	cf 91       	pop	r28
    ff44:	08 95       	ret

0000ff46 <reply_du>:
}


  //-------------------------------------------------------------------------
void reply_du( uint8_t *receivebuffer ) {
    ff46:	cf 93       	push	r28
    ff48:	df 93       	push	r29
    ff4a:	cd b7       	in	r28, 0x3d	; 61
    ff4c:	de b7       	in	r29, 0x3e	; 62
    ff4e:	28 97       	sbiw	r28, 0x08	; 8
    ff50:	0f b6       	in	r0, 0x3f	; 63
    ff52:	f8 94       	cli
    ff54:	de bf       	out	0x3e, r29	; 62
    ff56:	0f be       	out	0x3f, r0	; 63
    ff58:	cd bf       	out	0x3d, r28	; 61
    ff5a:	98 87       	std	Y+8, r25	; 0x08
    ff5c:	8f 83       	std	Y+7, r24	; 0x07
   int e1, e2, e3;
   e1 = fcheckFSAllocation();
    ff5e:	0e 94 0c 05 	call	0xa18	; 0xa18 <fcheckFSAllocation>
    ff62:	9e 83       	std	Y+6, r25	; 0x06
    ff64:	8d 83       	std	Y+5, r24	; 0x05
   e2 = fcheckStorageAllocation();
    ff66:	0e 94 15 05 	call	0xa2a	; 0xa2a <fcheckStorageAllocation>
    ff6a:	9c 83       	std	Y+4, r25	; 0x04
    ff6c:	8b 83       	std	Y+3, r24	; 0x03
   e3 = 0;
    ff6e:	1a 82       	std	Y+2, r1	; 0x02
    ff70:	19 82       	std	Y+1, r1	; 0x01
   if ( e2 == 256 ) {
    ff72:	8b 81       	ldd	r24, Y+3	; 0x03
    ff74:	9c 81       	ldd	r25, Y+4	; 0x04
    ff76:	21 e0       	ldi	r18, 0x01	; 1
    ff78:	80 30       	cpi	r24, 0x00	; 0
    ff7a:	92 07       	cpc	r25, r18
    ff7c:	41 f4       	brne	.+16     	; 0xff8e <reply_du+0x48>
      e2 = 128;
    ff7e:	80 e8       	ldi	r24, 0x80	; 128
    ff80:	90 e0       	ldi	r25, 0x00	; 0
    ff82:	9c 83       	std	Y+4, r25	; 0x04
    ff84:	8b 83       	std	Y+3, r24	; 0x03
      e3 = 128;
    ff86:	80 e8       	ldi	r24, 0x80	; 128
    ff88:	90 e0       	ldi	r25, 0x00	; 0
    ff8a:	9a 83       	std	Y+2, r25	; 0x02
    ff8c:	89 83       	std	Y+1, r24	; 0x01
   }
   reply[ 0 ] = 6;
    ff8e:	86 e0       	ldi	r24, 0x06	; 6
    ff90:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 211;
    ff94:	83 ed       	ldi	r24, 0xD3	; 211
    ff96:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
    ff9a:	80 91 5b 07 	lds	r24, 0x075B
    ff9e:	90 91 5c 07 	lds	r25, 0x075C
    ffa2:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = e1;
    ffa6:	8d 81       	ldd	r24, Y+5	; 0x05
    ffa8:	80 93 f0 06 	sts	0x06F0, r24
   reply[ 4 ] = e2;
    ffac:	8b 81       	ldd	r24, Y+3	; 0x03
    ffae:	80 93 f1 06 	sts	0x06F1, r24
   reply[ 5 ] = e3;
    ffb2:	89 81       	ldd	r24, Y+1	; 0x01
    ffb4:	80 93 f2 06 	sts	0x06F2, r24
   //printStringN(reply,32); 	
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
    ffb8:	8d ee       	ldi	r24, 0xED	; 237
    ffba:	96 e0       	ldi	r25, 0x06	; 6
    ffbc:	9c 01       	movw	r18, r24
    ffbe:	40 e2       	ldi	r20, 0x20	; 32
    ffc0:	6f ef       	ldi	r22, 0xFF	; 255
    ffc2:	7f ef       	ldi	r23, 0xFF	; 255
    ffc4:	8f ee       	ldi	r24, 0xEF	; 239
    ffc6:	9f ee       	ldi	r25, 0xEF	; 239
    ffc8:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
    ffcc:	28 96       	adiw	r28, 0x08	; 8
    ffce:	0f b6       	in	r0, 0x3f	; 63
    ffd0:	f8 94       	cli
    ffd2:	de bf       	out	0x3e, r29	; 62
    ffd4:	0f be       	out	0x3f, r0	; 63
    ffd6:	cd bf       	out	0x3d, r28	; 61
    ffd8:	df 91       	pop	r29
    ffda:	cf 91       	pop	r28
    ffdc:	08 95       	ret

0000ffde <reply_search>:
}

//-------------------------------------------------------------------------
void reply_search( uint8_t *receivebuffer ) {
    ffde:	cf 93       	push	r28
    ffe0:	df 93       	push	r29
    ffe2:	cd b7       	in	r28, 0x3d	; 61
    ffe4:	de b7       	in	r29, 0x3e	; 62
    ffe6:	a5 97       	sbiw	r28, 0x25	; 37
    ffe8:	0f b6       	in	r0, 0x3f	; 63
    ffea:	f8 94       	cli
    ffec:	de bf       	out	0x3e, r29	; 62
    ffee:	0f be       	out	0x3f, r0	; 63
    fff0:	cd bf       	out	0x3d, r28	; 61
    fff2:	9d a3       	std	Y+37, r25	; 0x25
    fff4:	8c a3       	std	Y+36, r24	; 0x24
   char filename[ 13 ];
   uint8_t searchresults[ 20 ];
   uint8_t numofsearch;
   uint8_t i;
   mystrncpy( filename, (char *)&receivebuffer[ 3 ], receivebuffer[ 0 ] - 3 );
    fff6:	ec a1       	ldd	r30, Y+36	; 0x24
    fff8:	fd a1       	ldd	r31, Y+37	; 0x25
    fffa:	80 81       	ld	r24, Z
    fffc:	48 2f       	mov	r20, r24
    fffe:	43 50       	subi	r20, 0x03	; 3
   10000:	8c a1       	ldd	r24, Y+36	; 0x24
   10002:	9d a1       	ldd	r25, Y+37	; 0x25
   10004:	03 96       	adiw	r24, 0x03	; 3
   10006:	9e 01       	movw	r18, r28
   10008:	2e 5f       	subi	r18, 0xFE	; 254
   1000a:	3f 4f       	sbci	r19, 0xFF	; 255
   1000c:	bc 01       	movw	r22, r24
   1000e:	c9 01       	movw	r24, r18
   10010:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
   filename[ receivebuffer[ 0 ] - 3 ] = '\0';
   10014:	ec a1       	ldd	r30, Y+36	; 0x24
   10016:	fd a1       	ldd	r31, Y+37	; 0x25
   10018:	80 81       	ld	r24, Z
   1001a:	99 27       	eor	r25, r25
   1001c:	9c 01       	movw	r18, r24
   1001e:	23 50       	subi	r18, 0x03	; 3
   10020:	30 40       	sbci	r19, 0x00	; 0
   10022:	ce 01       	movw	r24, r28
   10024:	02 96       	adiw	r24, 0x02	; 2
   10026:	fc 01       	movw	r30, r24
   10028:	e2 0f       	add	r30, r18
   1002a:	f3 1f       	adc	r31, r19
   1002c:	10 82       	st	Z, r1
   fsearch( searchresults, &numofsearch, filename );
   1002e:	ce 01       	movw	r24, r28
   10030:	02 96       	adiw	r24, 0x02	; 2
   10032:	9e 01       	movw	r18, r28
   10034:	2d 5d       	subi	r18, 0xDD	; 221
   10036:	3f 4f       	sbci	r19, 0xFF	; 255
   10038:	fe 01       	movw	r30, r28
   1003a:	3f 96       	adiw	r30, 0x0f	; 15
   1003c:	ac 01       	movw	r20, r24
   1003e:	b9 01       	movw	r22, r18
   10040:	cf 01       	movw	r24, r30
   10042:	0e 94 30 0b 	call	0x1660	; 0x1660 <fsearch>
   for ( i = 0; i < numofsearch; i ++ ) {
   10046:	19 82       	std	Y+1, r1	; 0x01
   10048:	2f c0       	rjmp	.+94     	; 0x100a8 <reply_search+0xca>
      fdirnode( (char *)&reply[ 3 ], 29, searchresults[ i ] );
   1004a:	89 81       	ldd	r24, Y+1	; 0x01
   1004c:	28 2f       	mov	r18, r24
   1004e:	33 27       	eor	r19, r19
   10050:	ce 01       	movw	r24, r28
   10052:	0f 96       	adiw	r24, 0x0f	; 15
   10054:	fc 01       	movw	r30, r24
   10056:	e2 0f       	add	r30, r18
   10058:	f3 1f       	adc	r31, r19
   1005a:	80 81       	ld	r24, Z
   1005c:	28 2f       	mov	r18, r24
   1005e:	33 27       	eor	r19, r19
   10060:	80 ef       	ldi	r24, 0xF0	; 240
   10062:	96 e0       	ldi	r25, 0x06	; 6
   10064:	a9 01       	movw	r20, r18
   10066:	6d e1       	ldi	r22, 0x1D	; 29
   10068:	70 e0       	ldi	r23, 0x00	; 0
   1006a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <fdirnode>
      reply[ 0 ] = mystrlen( (char *)&reply[ 3 ] ) + 3;
   1006e:	80 ef       	ldi	r24, 0xF0	; 240
   10070:	96 e0       	ldi	r25, 0x06	; 6
   10072:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
   10076:	8d 5f       	subi	r24, 0xFD	; 253
   10078:	80 93 ed 06 	sts	0x06ED, r24
      reply[ 1 ] = 221;
   1007c:	8d ed       	ldi	r24, 0xDD	; 221
   1007e:	80 93 ee 06 	sts	0x06EE, r24
      reply[ 2 ] = nodeid;
   10082:	80 91 5b 07 	lds	r24, 0x075B
   10086:	90 91 5c 07 	lds	r25, 0x075C
   1008a:	80 93 ef 06 	sts	0x06EF, r24
      //printStringN(reply,32); 	
      StandardSocketSend( 0xefef, 0xffff, 32, reply );
   1008e:	8d ee       	ldi	r24, 0xED	; 237
   10090:	96 e0       	ldi	r25, 0x06	; 6
   10092:	9c 01       	movw	r18, r24
   10094:	40 e2       	ldi	r20, 0x20	; 32
   10096:	6f ef       	ldi	r22, 0xFF	; 255
   10098:	7f ef       	ldi	r23, 0xFF	; 255
   1009a:	8f ee       	ldi	r24, 0xEF	; 239
   1009c:	9f ee       	ldi	r25, 0xEF	; 239
   1009e:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
   100a2:	89 81       	ldd	r24, Y+1	; 0x01
   100a4:	8f 5f       	subi	r24, 0xFF	; 255
   100a6:	89 83       	std	Y+1, r24	; 0x01
   100a8:	9b a1       	ldd	r25, Y+35	; 0x23
   100aa:	89 81       	ldd	r24, Y+1	; 0x01
   100ac:	89 17       	cp	r24, r25
   100ae:	68 f2       	brcs	.-102    	; 0x1004a <reply_search+0x6c>
   100b0:	a5 96       	adiw	r28, 0x25	; 37
   100b2:	0f b6       	in	r0, 0x3f	; 63
   100b4:	f8 94       	cli
   100b6:	de bf       	out	0x3e, r29	; 62
   100b8:	0f be       	out	0x3f, r0	; 63
   100ba:	cd bf       	out	0x3d, r28	; 61
   100bc:	df 91       	pop	r29
   100be:	cf 91       	pop	r28
   100c0:	08 95       	ret

000100c2 <createNewThread>:
   }
}

//-------------------------------------------------------------------------
void createNewThread() {
   100c2:	8f 92       	push	r8
   100c4:	9f 92       	push	r9
   100c6:	af 92       	push	r10
   100c8:	bf 92       	push	r11
   100ca:	cf 92       	push	r12
   100cc:	df 92       	push	r13
   100ce:	ef 92       	push	r14
   100d0:	ff 92       	push	r15
   100d2:	0f 93       	push	r16
   100d4:	cf 93       	push	r28
   100d6:	df 93       	push	r29
   100d8:	cd b7       	in	r28, 0x3d	; 61
   100da:	de b7       	in	r29, 0x3e	; 62
   create_thread( createtaskthread, createramstart, createstackpointer, createstaticdatasize, 1, (char *)createthreadname, createflashromstart, createflashromsize);
   100dc:	80 91 ca 05 	lds	r24, 0x05CA
   100e0:	90 91 cb 05 	lds	r25, 0x05CB
   100e4:	20 91 cc 05 	lds	r18, 0x05CC
   100e8:	30 91 cd 05 	lds	r19, 0x05CD
   100ec:	42 ed       	ldi	r20, 0xD2	; 210
   100ee:	56 e0       	ldi	r21, 0x06	; 6
   100f0:	60 91 5d 07 	lds	r22, 0x075D
   100f4:	70 91 5e 07 	lds	r23, 0x075E
   100f8:	e0 91 de 06 	lds	r30, 0x06DE
   100fc:	f0 91 df 06 	lds	r31, 0x06DF
   10100:	a0 91 0d 07 	lds	r26, 0x070D
   10104:	b0 91 0e 07 	lds	r27, 0x070E
   10108:	80 90 59 07 	lds	r8, 0x0759
   1010c:	90 90 5a 07 	lds	r9, 0x075A
   10110:	5c 01       	movw	r10, r24
   10112:	69 01       	movw	r12, r18
   10114:	7a 01       	movw	r14, r20
   10116:	01 e0       	ldi	r16, 0x01	; 1
   10118:	9b 01       	movw	r18, r22
   1011a:	af 01       	movw	r20, r30
   1011c:	bd 01       	movw	r22, r26
   1011e:	c4 01       	movw	r24, r8
   10120:	0e 94 87 91 	call	0x1230e	; 0x1230e <create_thread>
   10124:	df 91       	pop	r29
   10126:	cf 91       	pop	r28
   10128:	0f 91       	pop	r16
   1012a:	ff 90       	pop	r15
   1012c:	ef 90       	pop	r14
   1012e:	df 90       	pop	r13
   10130:	cf 90       	pop	r12
   10132:	bf 90       	pop	r11
   10134:	af 90       	pop	r10
   10136:	9f 90       	pop	r9
   10138:	8f 90       	pop	r8
   1013a:	08 95       	ret

0001013c <create_thread_task>:
}






//-------------------------------------------------------------------------
//This function reads from filename and then creates a thread out of it
//Therefore, this function is highly avr-specific

#ifdef PLATFORM_AVR
void create_thread_task() {
   1013c:	0f 93       	push	r16
   1013e:	1f 93       	push	r17
   10140:	cf 93       	push	r28
   10142:	df 93       	push	r29
   10144:	cd b7       	in	r28, 0x3d	; 61
   10146:	de b7       	in	r29, 0x3e	; 62
   10148:	e8 97       	sbiw	r28, 0x38	; 56
   1014a:	0f b6       	in	r0, 0x3f	; 63
   1014c:	f8 94       	cli
   1014e:	de bf       	out	0x3e, r29	; 62
   10150:	0f be       	out	0x3f, r0	; 63
   10152:	cd bf       	out	0x3d, r28	; 61
   int fid;
   uint8_t tempbuffer[ 20 ];
   MYFILE *fp;
   uint16_t filesize;
   uint16_t round;
   uint8_t remain;
   uint16_t i;
   uint8_t newblockid;
   uint8_t sysinfo[ 16 ];
   uint16_t pageno;
   uint16_t entryaddr;
   uint16_t ramstackend;
   uint16_t ramstackstart;
   newblockid = existBlockAddr( filename, ( int )blockid );
   10154:	80 91 13 07 	lds	r24, 0x0713
   10158:	99 27       	eor	r25, r25
   1015a:	20 ee       	ldi	r18, 0xE0	; 224
   1015c:	36 e0       	ldi	r19, 0x06	; 6
   1015e:	bc 01       	movw	r22, r24
   10160:	c9 01       	movw	r24, r18
   10162:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <existBlockAddr>
   10166:	89 87       	std	Y+9, r24	; 0x09
   if ( newblockid == 0 ) {
   10168:	89 85       	ldd	r24, Y+9	; 0x09
   1016a:	88 23       	and	r24, r24
   1016c:	09 f4       	brne	.+2      	; 0x10170 <create_thread_task+0x34>
   1016e:	a5 c1       	rjmp	.+842    	; 0x104ba <create_thread_task+0x37e>
      //reply[ 0 ] = 4;
      //reply[ 1 ] = 231;
      //reply[ 2 ] = nodeid;
      //reply[ 3 ] = 0;
      //StandardSocketSend( 0xefef, 0xffff, 32, reply );
      return ;
   }
   fid = getFreeFid();
   10170:	0e 94 1d 02 	call	0x43a	; 0x43a <getFreeFid>
   10174:	9c 8b       	std	Y+20, r25	; 0x14
   10176:	8b 8b       	std	Y+19, r24	; 0x13
   openFile( newblockid, fid, 1 );
   10178:	89 85       	ldd	r24, Y+9	; 0x09
   1017a:	28 2f       	mov	r18, r24
   1017c:	33 27       	eor	r19, r19
   1017e:	8b 89       	ldd	r24, Y+19	; 0x13
   10180:	9c 89       	ldd	r25, Y+20	; 0x14
   10182:	41 e0       	ldi	r20, 0x01	; 1
   10184:	50 e0       	ldi	r21, 0x00	; 0
   10186:	bc 01       	movw	r22, r24
   10188:	c9 01       	movw	r24, r18
   1018a:	0e 94 f7 19 	call	0x33ee	; 0x33ee <openFile>
   fp = &fidtable[ fid ];
   1018e:	8b 89       	ldd	r24, Y+19	; 0x13
   10190:	9c 89       	ldd	r25, Y+20	; 0x14
   10192:	9c 01       	movw	r18, r24
   10194:	22 0f       	add	r18, r18
   10196:	33 1f       	adc	r19, r19
   10198:	c9 01       	movw	r24, r18
   1019a:	88 0f       	add	r24, r24
   1019c:	99 1f       	adc	r25, r25
   1019e:	88 0f       	add	r24, r24
   101a0:	99 1f       	adc	r25, r25
   101a2:	82 0f       	add	r24, r18
   101a4:	93 1f       	adc	r25, r19
   101a6:	81 5e       	subi	r24, 0xE1	; 225
   101a8:	9b 4f       	sbci	r25, 0xFB	; 251
   101aa:	9a 8b       	std	Y+18, r25	; 0x12
   101ac:	89 8b       	std	Y+17, r24	; 0x11
   filesize = fp->size;
   101ae:	e9 89       	ldd	r30, Y+17	; 0x11
   101b0:	fa 89       	ldd	r31, Y+18	; 0x12
   101b2:	84 81       	ldd	r24, Z+4	; 0x04
   101b4:	95 81       	ldd	r25, Z+5	; 0x05
   101b6:	98 8b       	std	Y+16, r25	; 0x10
   101b8:	8f 87       	std	Y+15, r24	; 0x0f
   fread2( fp, sysinfo, 16 );
   101ba:	ce 01       	movw	r24, r28
   101bc:	89 96       	adiw	r24, 0x29	; 41
   101be:	29 89       	ldd	r18, Y+17	; 0x11
   101c0:	3a 89       	ldd	r19, Y+18	; 0x12
   101c2:	40 e1       	ldi	r20, 0x10	; 16
   101c4:	50 e0       	ldi	r21, 0x00	; 0
   101c6:	bc 01       	movw	r22, r24
   101c8:	c9 01       	movw	r24, r18
   101ca:	0e 94 49 05 	call	0xa92	; 0xa92 <fread2>
   fseek2( fp, 16, 1 );
   101ce:	89 89       	ldd	r24, Y+17	; 0x11
   101d0:	9a 89       	ldd	r25, Y+18	; 0x12
   101d2:	21 e0       	ldi	r18, 0x01	; 1
   101d4:	30 e0       	ldi	r19, 0x00	; 0
   101d6:	40 e1       	ldi	r20, 0x10	; 16
   101d8:	50 e0       	ldi	r21, 0x00	; 0
   101da:	60 e0       	ldi	r22, 0x00	; 0
   101dc:	70 e0       	ldi	r23, 0x00	; 0
   101de:	0e 94 94 03 	call	0x728	; 0x728 <fseek2>
   //  mystrncpy(sysinfo, &programimagestring[0], 10); 
   //  filesize = mystrlen(programimagestring); 
   pageno = hex2value( sysinfo[ 0 ] ) *100+hex2value( sysinfo[ 1 ] ) *10+hex2value( sysinfo[ 2 ] );
   101e2:	89 a5       	ldd	r24, Y+41	; 0x29
   101e4:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   101e8:	9c 01       	movw	r18, r24
   101ea:	84 e6       	ldi	r24, 0x64	; 100
   101ec:	90 e0       	ldi	r25, 0x00	; 0
   101ee:	28 9f       	mul	r18, r24
   101f0:	80 01       	movw	r16, r0
   101f2:	29 9f       	mul	r18, r25
   101f4:	10 0d       	add	r17, r0
   101f6:	38 9f       	mul	r19, r24
   101f8:	10 0d       	add	r17, r0
   101fa:	11 24       	eor	r1, r1
   101fc:	8a a5       	ldd	r24, Y+42	; 0x2a
   101fe:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   10202:	9c 01       	movw	r18, r24
   10204:	22 0f       	add	r18, r18
   10206:	33 1f       	adc	r19, r19
   10208:	c9 01       	movw	r24, r18
   1020a:	88 0f       	add	r24, r24
   1020c:	99 1f       	adc	r25, r25
   1020e:	88 0f       	add	r24, r24
   10210:	99 1f       	adc	r25, r25
   10212:	82 0f       	add	r24, r18
   10214:	93 1f       	adc	r25, r19
   10216:	08 0f       	add	r16, r24
   10218:	19 1f       	adc	r17, r25
   1021a:	8b a5       	ldd	r24, Y+43	; 0x2b
   1021c:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   10220:	80 0f       	add	r24, r16
   10222:	91 1f       	adc	r25, r17
   10224:	98 87       	std	Y+8, r25	; 0x08
   10226:	8f 83       	std	Y+7, r24	; 0x07
   entryaddr = ( uint16_t )( hex2value( sysinfo[ 3 ] )) *4096+( uint16_t )( hex2value( sysinfo[ 4 ] )) *256+( uint16_t )( hex2value( sysinfo[ 5 ] )) *16+( uint16_t )( hex2value( sysinfo[ 6 ] ));
   10228:	8c a5       	ldd	r24, Y+44	; 0x2c
   1022a:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   1022e:	8c 01       	movw	r16, r24
   10230:	02 95       	swap	r16
   10232:	12 95       	swap	r17
   10234:	10 7f       	andi	r17, 0xF0	; 240
   10236:	10 27       	eor	r17, r16
   10238:	00 7f       	andi	r16, 0xF0	; 240
   1023a:	10 27       	eor	r17, r16
   1023c:	8d a5       	ldd	r24, Y+45	; 0x2d
   1023e:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   10242:	80 0f       	add	r24, r16
   10244:	91 1f       	adc	r25, r17
   10246:	8c 01       	movw	r16, r24
   10248:	02 95       	swap	r16
   1024a:	12 95       	swap	r17
   1024c:	10 7f       	andi	r17, 0xF0	; 240
   1024e:	10 27       	eor	r17, r16
   10250:	00 7f       	andi	r16, 0xF0	; 240
   10252:	10 27       	eor	r17, r16
   10254:	8e a5       	ldd	r24, Y+46	; 0x2e
   10256:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   1025a:	80 0f       	add	r24, r16
   1025c:	91 1f       	adc	r25, r17
   1025e:	8c 01       	movw	r16, r24
   10260:	02 95       	swap	r16
   10262:	12 95       	swap	r17
   10264:	10 7f       	andi	r17, 0xF0	; 240
   10266:	10 27       	eor	r17, r16
   10268:	00 7f       	andi	r16, 0xF0	; 240
   1026a:	10 27       	eor	r17, r16
   1026c:	8f a5       	ldd	r24, Y+47	; 0x2f
   1026e:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   10272:	80 0f       	add	r24, r16
   10274:	91 1f       	adc	r25, r17
   10276:	9e 83       	std	Y+6, r25	; 0x06
   10278:	8d 83       	std	Y+5, r24	; 0x05
   ramstackstart = ( uint16_t )( hex2value( sysinfo[ 7 ] )) *256+( uint16_t )( hex2value( sysinfo[ 8 ] )) *16+( uint16_t )( hex2value( sysinfo[ 9 ] ));
   1027a:	88 a9       	ldd	r24, Y+48	; 0x30
   1027c:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   10280:	8c 01       	movw	r16, r24
   10282:	02 95       	swap	r16
   10284:	12 95       	swap	r17
   10286:	10 7f       	andi	r17, 0xF0	; 240
   10288:	10 27       	eor	r17, r16
   1028a:	00 7f       	andi	r16, 0xF0	; 240
   1028c:	10 27       	eor	r17, r16
   1028e:	89 a9       	ldd	r24, Y+49	; 0x31
   10290:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   10294:	80 0f       	add	r24, r16
   10296:	91 1f       	adc	r25, r17
   10298:	8c 01       	movw	r16, r24
   1029a:	02 95       	swap	r16
   1029c:	12 95       	swap	r17
   1029e:	10 7f       	andi	r17, 0xF0	; 240
   102a0:	10 27       	eor	r17, r16
   102a2:	00 7f       	andi	r16, 0xF0	; 240
   102a4:	10 27       	eor	r17, r16
   102a6:	8a a9       	ldd	r24, Y+50	; 0x32
   102a8:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   102ac:	80 0f       	add	r24, r16
   102ae:	91 1f       	adc	r25, r17
   102b0:	9a 83       	std	Y+2, r25	; 0x02
   102b2:	89 83       	std	Y+1, r24	; 0x01
   ramstackend = ( uint16_t )( hex2value( sysinfo[ 10 ] )) *256+( uint16_t )( hex2value( sysinfo[ 11 ] )) *16+( uint16_t )( hex2value( sysinfo[ 12 ] ));
   102b4:	8b a9       	ldd	r24, Y+51	; 0x33
   102b6:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   102ba:	8c 01       	movw	r16, r24
   102bc:	02 95       	swap	r16
   102be:	12 95       	swap	r17
   102c0:	10 7f       	andi	r17, 0xF0	; 240
   102c2:	10 27       	eor	r17, r16
   102c4:	00 7f       	andi	r16, 0xF0	; 240
   102c6:	10 27       	eor	r17, r16
   102c8:	8c a9       	ldd	r24, Y+52	; 0x34
   102ca:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   102ce:	80 0f       	add	r24, r16
   102d0:	91 1f       	adc	r25, r17
   102d2:	8c 01       	movw	r16, r24
   102d4:	02 95       	swap	r16
   102d6:	12 95       	swap	r17
   102d8:	10 7f       	andi	r17, 0xF0	; 240
   102da:	10 27       	eor	r17, r16
   102dc:	00 7f       	andi	r16, 0xF0	; 240
   102de:	10 27       	eor	r17, r16
   102e0:	8d a9       	ldd	r24, Y+53	; 0x35
   102e2:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   102e6:	80 0f       	add	r24, r16
   102e8:	91 1f       	adc	r25, r17
   102ea:	9c 83       	std	Y+4, r25	; 0x04
   102ec:	8b 83       	std	Y+3, r24	; 0x03
   createstaticdatasize = ( uint16_t )( hex2value( sysinfo[ 13 ] )) *100+( uint16_t )( hex2value( sysinfo[ 14 ] )) *10+( uint16_t )( hex2value( sysinfo[ 15 ] ));
   102ee:	8e a9       	ldd	r24, Y+54	; 0x36
   102f0:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   102f4:	9c 01       	movw	r18, r24
   102f6:	84 e6       	ldi	r24, 0x64	; 100
   102f8:	90 e0       	ldi	r25, 0x00	; 0
   102fa:	28 9f       	mul	r18, r24
   102fc:	80 01       	movw	r16, r0
   102fe:	29 9f       	mul	r18, r25
   10300:	10 0d       	add	r17, r0
   10302:	38 9f       	mul	r19, r24
   10304:	10 0d       	add	r17, r0
   10306:	11 24       	eor	r1, r1
   10308:	8f a9       	ldd	r24, Y+55	; 0x37
   1030a:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   1030e:	9c 01       	movw	r18, r24
   10310:	22 0f       	add	r18, r18
   10312:	33 1f       	adc	r19, r19
   10314:	c9 01       	movw	r24, r18
   10316:	88 0f       	add	r24, r24
   10318:	99 1f       	adc	r25, r25
   1031a:	88 0f       	add	r24, r24
   1031c:	99 1f       	adc	r25, r25
   1031e:	82 0f       	add	r24, r18
   10320:	93 1f       	adc	r25, r19
   10322:	08 0f       	add	r16, r24
   10324:	19 1f       	adc	r17, r25
   10326:	88 ad       	ldd	r24, Y+56	; 0x38
   10328:	0e 94 d4 9b 	call	0x137a8	; 0x137a8 <hex2value>
   1032c:	80 0f       	add	r24, r16
   1032e:	91 1f       	adc	r25, r17
   10330:	90 93 5e 07 	sts	0x075E, r25
   10334:	80 93 5d 07 	sts	0x075D, r24

   createflashromstart = ((uint16_t)pageno)*(uint16_t)128;
   10338:	8f 81       	ldd	r24, Y+7	; 0x07
   1033a:	98 85       	ldd	r25, Y+8	; 0x08
   1033c:	96 95       	lsr	r25
   1033e:	98 2f       	mov	r25, r24
   10340:	88 27       	eor	r24, r24
   10342:	97 95       	ror	r25
   10344:	87 95       	ror	r24
   10346:	90 93 cd 05 	sts	0x05CD, r25
   1034a:	80 93 cc 05 	sts	0x05CC, r24
   createflashromsize = (uint16_t)(filesize-16)/2;       
   1034e:	8f 85       	ldd	r24, Y+15	; 0x0f
   10350:	98 89       	ldd	r25, Y+16	; 0x10
   10352:	40 97       	sbiw	r24, 0x10	; 16
   10354:	96 95       	lsr	r25
   10356:	87 95       	ror	r24
   10358:	90 93 cb 05 	sts	0x05CB, r25
   1035c:	80 93 ca 05 	sts	0x05CA, r24
   
   if ((createflashromstart <= kernelromsize) || ( ramstackstart <= kernelramsize + 256))
   10360:	20 91 cc 05 	lds	r18, 0x05CC
   10364:	30 91 cd 05 	lds	r19, 0x05CD
   10368:	80 91 66 01 	lds	r24, 0x0166
   1036c:	90 91 67 01 	lds	r25, 0x0167
   10370:	82 17       	cp	r24, r18
   10372:	93 07       	cpc	r25, r19
   10374:	60 f4       	brcc	.+24     	; 0x1038e <create_thread_task+0x252>
   10376:	80 91 68 01 	lds	r24, 0x0168
   1037a:	90 91 69 01 	lds	r25, 0x0169
   1037e:	9c 01       	movw	r18, r24
   10380:	20 50       	subi	r18, 0x00	; 0
   10382:	3f 4f       	sbci	r19, 0xFF	; 255
   10384:	89 81       	ldd	r24, Y+1	; 0x01
   10386:	9a 81       	ldd	r25, Y+2	; 0x02
   10388:	28 17       	cp	r18, r24
   1038a:	39 07       	cpc	r19, r25
   1038c:	28 f0       	brcs	.+10     	; 0x10398 <create_thread_task+0x25c>
   	 {
	  fclose2( fp );
   1038e:	89 89       	ldd	r24, Y+17	; 0x11
   10390:	9a 89       	ldd	r25, Y+18	; 0x12
   10392:	0e 94 77 03 	call	0x6ee	; 0x6ee <fclose2>
      //reply[ 0 ] = 4;
      //reply[ 1 ] = 231;
      //reply[ 2 ] = nodeid;
      //reply[ 3 ] = 1;
      //StandardSocketSend( 0xefef, 0xffff, 32, reply );
	  return; 	  
   10396:	91 c0       	rjmp	.+290    	; 0x104ba <create_thread_task+0x37e>
	  }
  
    if (memory_conflict_detect(createflashromstart, createflashromsize, ramstackstart, ramstackend ) == 1)
   10398:	60 91 ca 05 	lds	r22, 0x05CA
   1039c:	70 91 cb 05 	lds	r23, 0x05CB
   103a0:	e0 91 cc 05 	lds	r30, 0x05CC
   103a4:	f0 91 cd 05 	lds	r31, 0x05CD
   103a8:	8b 81       	ldd	r24, Y+3	; 0x03
   103aa:	9c 81       	ldd	r25, Y+4	; 0x04
   103ac:	49 81       	ldd	r20, Y+1	; 0x01
   103ae:	5a 81       	ldd	r21, Y+2	; 0x02
   103b0:	9c 01       	movw	r18, r24
   103b2:	cf 01       	movw	r24, r30
   103b4:	0e 94 9b 94 	call	0x12936	; 0x12936 <memory_conflict_detect>
   103b8:	81 30       	cpi	r24, 0x01	; 1
   103ba:	29 f4       	brne	.+10     	; 0x103c6 <create_thread_task+0x28a>
      {
	  fclose2( fp );
   103bc:	89 89       	ldd	r24, Y+17	; 0x11
   103be:	9a 89       	ldd	r25, Y+18	; 0x12
   103c0:	0e 94 77 03 	call	0x6ee	; 0x6ee <fclose2>
      //reply[ 0 ] = 4;
      //reply[ 1 ] = 231;
      //reply[ 2 ] = nodeid;
      //reply[ 3 ] = 1;
      //StandardSocketSend( 0xefef, 0xffff, 32, reply );
	  return; 	  
   103c4:	7a c0       	rjmp	.+244    	; 0x104ba <create_thread_task+0x37e>
	  }

     

   round = ( filesize - 16 ) / 16;
   103c6:	8f 85       	ldd	r24, Y+15	; 0x0f
   103c8:	98 89       	ldd	r25, Y+16	; 0x10
   103ca:	40 97       	sbiw	r24, 0x10	; 16
   103cc:	92 95       	swap	r25
   103ce:	82 95       	swap	r24
   103d0:	8f 70       	andi	r24, 0x0F	; 15
   103d2:	89 27       	eor	r24, r25
   103d4:	9f 70       	andi	r25, 0x0F	; 15
   103d6:	89 27       	eor	r24, r25
   103d8:	9e 87       	std	Y+14, r25	; 0x0e
   103da:	8d 87       	std	Y+13, r24	; 0x0d
   remain = ( filesize - 16 ) % 16;
   103dc:	8f 85       	ldd	r24, Y+15	; 0x0f
   103de:	80 51       	subi	r24, 0x10	; 16
   103e0:	8f 70       	andi	r24, 0x0F	; 15
   103e2:	8c 87       	std	Y+12, r24	; 0x0c
   ProgramSetPage( pageno );
   103e4:	8f 81       	ldd	r24, Y+7	; 0x07
   103e6:	98 85       	ldd	r25, Y+8	; 0x08
   103e8:	0e 94 00 f0 	call	0x1e000	; 0x1e000 <ProgramSetPage>
   for ( i = 0; i < round; i ++ ) {
   103ec:	1b 86       	std	Y+11, r1	; 0x0b
   103ee:	1a 86       	std	Y+10, r1	; 0x0a
   103f0:	1d c0       	rjmp	.+58     	; 0x1042c <create_thread_task+0x2f0>
      fread2( fp, tempbuffer, 16 );
   103f2:	ce 01       	movw	r24, r28
   103f4:	45 96       	adiw	r24, 0x15	; 21
   103f6:	29 89       	ldd	r18, Y+17	; 0x11
   103f8:	3a 89       	ldd	r19, Y+18	; 0x12
   103fa:	40 e1       	ldi	r20, 0x10	; 16
   103fc:	50 e0       	ldi	r21, 0x00	; 0
   103fe:	bc 01       	movw	r22, r24
   10400:	c9 01       	movw	r24, r18
   10402:	0e 94 49 05 	call	0xa92	; 0xa92 <fread2>
      fseek2( fp, 16, 1 );
   10406:	89 89       	ldd	r24, Y+17	; 0x11
   10408:	9a 89       	ldd	r25, Y+18	; 0x12
   1040a:	21 e0       	ldi	r18, 0x01	; 1
   1040c:	30 e0       	ldi	r19, 0x00	; 0
   1040e:	40 e1       	ldi	r20, 0x10	; 16
   10410:	50 e0       	ldi	r21, 0x00	; 0
   10412:	60 e0       	ldi	r22, 0x00	; 0
   10414:	70 e0       	ldi	r23, 0x00	; 0
   10416:	0e 94 94 03 	call	0x728	; 0x728 <fseek2>
      //  mystrncpy(tempbuffer, &programimagestring[i*16+10], 16); 
      ProgramString( (char *)tempbuffer );
   1041a:	ce 01       	movw	r24, r28
   1041c:	45 96       	adiw	r24, 0x15	; 21
   1041e:	0e 94 33 f0 	call	0x1e066	; 0x1e066 <ProgramString>
   10422:	8a 85       	ldd	r24, Y+10	; 0x0a
   10424:	9b 85       	ldd	r25, Y+11	; 0x0b
   10426:	01 96       	adiw	r24, 0x01	; 1
   10428:	9b 87       	std	Y+11, r25	; 0x0b
   1042a:	8a 87       	std	Y+10, r24	; 0x0a
   1042c:	2a 85       	ldd	r18, Y+10	; 0x0a
   1042e:	3b 85       	ldd	r19, Y+11	; 0x0b
   10430:	8d 85       	ldd	r24, Y+13	; 0x0d
   10432:	9e 85       	ldd	r25, Y+14	; 0x0e
   10434:	28 17       	cp	r18, r24
   10436:	39 07       	cpc	r19, r25
   10438:	e0 f2       	brcs	.-72     	; 0x103f2 <create_thread_task+0x2b6>
   }
   if ( remain > 0 ) {
   1043a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1043c:	88 23       	and	r24, r24
   1043e:	91 f0       	breq	.+36     	; 0x10464 <create_thread_task+0x328>
      fread2( fp, tempbuffer, remain );
   10440:	8c 85       	ldd	r24, Y+12	; 0x0c
   10442:	99 27       	eor	r25, r25
   10444:	9e 01       	movw	r18, r28
   10446:	2b 5e       	subi	r18, 0xEB	; 235
   10448:	3f 4f       	sbci	r19, 0xFF	; 255
   1044a:	e9 89       	ldd	r30, Y+17	; 0x11
   1044c:	fa 89       	ldd	r31, Y+18	; 0x12
   1044e:	ac 01       	movw	r20, r24
   10450:	b9 01       	movw	r22, r18
   10452:	cf 01       	movw	r24, r30
   10454:	0e 94 49 05 	call	0xa92	; 0xa92 <fread2>
      // mystrncpy(tempbuffer, &programimagestring[round*16+10], remain);
      ProgramLastString( (char *)tempbuffer, remain );
   10458:	ce 01       	movw	r24, r28
   1045a:	45 96       	adiw	r24, 0x15	; 21
   1045c:	6c 85       	ldd	r22, Y+12	; 0x0c
   1045e:	0e 94 95 f0 	call	0x1e12a	; 0x1e12a <ProgramLastString>
   10462:	02 c0       	rjmp	.+4      	; 0x10468 <create_thread_task+0x32c>
   } else {
      ProgramRemains();
   10464:	0e 94 84 f0 	call	0x1e108	; 0x1e108 <ProgramRemains>
   }
   fclose2( fp );
   10468:	89 89       	ldd	r24, Y+17	; 0x11
   1046a:	9a 89       	ldd	r25, Y+18	; 0x12
   1046c:	0e 94 77 03 	call	0x6ee	; 0x6ee <fclose2>
    {
      createtaskthread = ( void( * )( void ))entryaddr;
   10470:	8d 81       	ldd	r24, Y+5	; 0x05
   10472:	9e 81       	ldd	r25, Y+6	; 0x06
   10474:	90 93 5a 07 	sts	0x075A, r25
   10478:	80 93 59 07 	sts	0x0759, r24
      createramstart = ( uint16_t* )ramstackstart;
   1047c:	89 81       	ldd	r24, Y+1	; 0x01
   1047e:	9a 81       	ldd	r25, Y+2	; 0x02
   10480:	90 93 0e 07 	sts	0x070E, r25
   10484:	80 93 0d 07 	sts	0x070D, r24
      
     
      createstackpointer = ( uint16_t* )ramstackend;
   10488:	8b 81       	ldd	r24, Y+3	; 0x03
   1048a:	9c 81       	ldd	r25, Y+4	; 0x04
   1048c:	90 93 df 06 	sts	0x06DF, r25
   10490:	80 93 de 06 	sts	0x06DE, r24
      mystrncpy( (char *)createthreadname, filename, mystrlen( filename ) + 1 );
   10494:	80 ee       	ldi	r24, 0xE0	; 224
   10496:	96 e0       	ldi	r25, 0x06	; 6
   10498:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
   1049c:	48 2f       	mov	r20, r24
   1049e:	4f 5f       	subi	r20, 0xFF	; 255
   104a0:	22 ed       	ldi	r18, 0xD2	; 210
   104a2:	36 e0       	ldi	r19, 0x06	; 6
   104a4:	80 ee       	ldi	r24, 0xE0	; 224
   104a6:	96 e0       	ldi	r25, 0x06	; 6
   104a8:	bc 01       	movw	r22, r24
   104aa:	c9 01       	movw	r24, r18
   104ac:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>

      

      postTask( createNewThread, 1 );
   104b0:	81 e6       	ldi	r24, 0x61	; 97
   104b2:	90 e8       	ldi	r25, 0x80	; 128
   104b4:	61 e0       	ldi	r22, 0x01	; 1
   104b6:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
   104ba:	e8 96       	adiw	r28, 0x38	; 56
   104bc:	0f b6       	in	r0, 0x3f	; 63
   104be:	f8 94       	cli
   104c0:	de bf       	out	0x3e, r29	; 62
   104c2:	0f be       	out	0x3f, r0	; 63
   104c4:	cd bf       	out	0x3d, r28	; 61
   104c6:	df 91       	pop	r29
   104c8:	cf 91       	pop	r28
   104ca:	1f 91       	pop	r17
   104cc:	0f 91       	pop	r16
   104ce:	08 95       	ret

000104d0 <reply_create_thread>:
   }
   // reply[0] = 4; 
   //	reply[1] = 231;
   //  reply[2] = nodeid;
   //	reply[3] = 1; 
   //		StandardSocketSend(0xefef, 0xffff, 32, reply);	
   // printStringN(reply,32); 
}

#endif 

//-------------------------------------------------------------------------
void reply_create_thread( uint8_t *receivebuffer )
//void reply_create_thread()
 {
   104d0:	cf 93       	push	r28
   104d2:	df 93       	push	r29
   104d4:	cd b7       	in	r28, 0x3d	; 61
   104d6:	de b7       	in	r29, 0x3e	; 62
   104d8:	22 97       	sbiw	r28, 0x02	; 2
   104da:	0f b6       	in	r0, 0x3f	; 63
   104dc:	f8 94       	cli
   104de:	de bf       	out	0x3e, r29	; 62
   104e0:	0f be       	out	0x3f, r0	; 63
   104e2:	cd bf       	out	0x3d, r28	; 61
   104e4:	9a 83       	std	Y+2, r25	; 0x02
   104e6:	89 83       	std	Y+1, r24	; 0x01
   //file system version 
   blockid = receivebuffer[ 3 ];
   104e8:	89 81       	ldd	r24, Y+1	; 0x01
   104ea:	9a 81       	ldd	r25, Y+2	; 0x02
   104ec:	fc 01       	movw	r30, r24
   104ee:	33 96       	adiw	r30, 0x03	; 3
   104f0:	80 81       	ld	r24, Z
   104f2:	80 93 13 07 	sts	0x0713, r24
   mystrncpy( filename, (char *)&receivebuffer[ 4 ], receivebuffer[ 0 ] - 4 );
   104f6:	e9 81       	ldd	r30, Y+1	; 0x01
   104f8:	fa 81       	ldd	r31, Y+2	; 0x02
   104fa:	80 81       	ld	r24, Z
   104fc:	48 2f       	mov	r20, r24
   104fe:	44 50       	subi	r20, 0x04	; 4
   10500:	89 81       	ldd	r24, Y+1	; 0x01
   10502:	9a 81       	ldd	r25, Y+2	; 0x02
   10504:	04 96       	adiw	r24, 0x04	; 4
   10506:	20 ee       	ldi	r18, 0xE0	; 224
   10508:	36 e0       	ldi	r19, 0x06	; 6
   1050a:	bc 01       	movw	r22, r24
   1050c:	c9 01       	movw	r24, r18
   1050e:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
   filename[ receivebuffer[ 0 ] - 4 ] = '\0';
   10512:	e9 81       	ldd	r30, Y+1	; 0x01
   10514:	fa 81       	ldd	r31, Y+2	; 0x02
   10516:	80 81       	ld	r24, Z
   10518:	99 27       	eor	r25, r25
   1051a:	04 97       	sbiw	r24, 0x04	; 4
   1051c:	fc 01       	movw	r30, r24
   1051e:	e0 52       	subi	r30, 0x20	; 32
   10520:	f9 4f       	sbci	r31, 0xF9	; 249
   10522:	10 82       	st	Z, r1
   reply[ 1 ] = 231;
   10524:	87 ee       	ldi	r24, 0xE7	; 231
   10526:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
   1052a:	80 91 5b 07 	lds	r24, 0x075B
   1052e:	90 91 5c 07 	lds	r25, 0x075C
   10532:	80 93 ef 06 	sts	0x06EF, r24
   postTask( create_thread_task, 11 );
   10536:	8e e9       	ldi	r24, 0x9E	; 158
   10538:	90 e8       	ldi	r25, 0x80	; 128
   1053a:	6b e0       	ldi	r22, 0x0B	; 11
   1053c:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
   reply[ 0 ] = 4;
   10540:	84 e0       	ldi	r24, 0x04	; 4
   10542:	80 93 ed 06 	sts	0x06ED, r24
   reply[ 1 ] = 231;
   10546:	87 ee       	ldi	r24, 0xE7	; 231
   10548:	80 93 ee 06 	sts	0x06EE, r24
   reply[ 2 ] = nodeid;
   1054c:	80 91 5b 07 	lds	r24, 0x075B
   10550:	90 91 5c 07 	lds	r25, 0x075C
   10554:	80 93 ef 06 	sts	0x06EF, r24
   reply[ 3 ] = 2;
   10558:	82 e0       	ldi	r24, 0x02	; 2
   1055a:	80 93 f0 06 	sts	0x06F0, r24
   StandardSocketSend( 0xefef, 0xffff, 32, reply );
   1055e:	8d ee       	ldi	r24, 0xED	; 237
   10560:	96 e0       	ldi	r25, 0x06	; 6
   10562:	9c 01       	movw	r18, r24
   10564:	40 e2       	ldi	r20, 0x20	; 32
   10566:	6f ef       	ldi	r22, 0xFF	; 255
   10568:	7f ef       	ldi	r23, 0xFF	; 255
   1056a:	8f ee       	ldi	r24, 0xEF	; 239
   1056c:	9f ee       	ldi	r25, 0xEF	; 239
   1056e:	0e 94 74 8c 	call	0x118e8	; 0x118e8 <StandardSocketSend>
   10572:	22 96       	adiw	r28, 0x02	; 2
   10574:	0f b6       	in	r0, 0x3f	; 63
   10576:	f8 94       	cli
   10578:	de bf       	out	0x3e, r29	; 62
   1057a:	0f be       	out	0x3f, r0	; 63
   1057c:	cd bf       	out	0x3d, r28	; 61
   1057e:	df 91       	pop	r29
   10580:	cf 91       	pop	r28
   10582:	08 95       	ret

00010584 <reply_formatSystem>:
   
   return ;
}

//-------------------------------------------------------------------------
void reply_formatSystem( uint8_t *receivebuffer ) {
   10584:	cf 93       	push	r28
   10586:	df 93       	push	r29
   10588:	cd b7       	in	r28, 0x3d	; 61
   1058a:	de b7       	in	r29, 0x3e	; 62
   1058c:	22 97       	sbiw	r28, 0x02	; 2
   1058e:	0f b6       	in	r0, 0x3f	; 63
   10590:	f8 94       	cli
   10592:	de bf       	out	0x3e, r29	; 62
   10594:	0f be       	out	0x3f, r0	; 63
   10596:	cd bf       	out	0x3d, r28	; 61
   10598:	9a 83       	std	Y+2, r25	; 0x02
   1059a:	89 83       	std	Y+1, r24	; 0x01
   formatSystem();
   1059c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <formatSystem>
   buildRootNode();
   105a0:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <buildRootNode>
   buildDeviceDirectory();
   105a4:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <buildDeviceDirectory>
   105a8:	22 96       	adiw	r28, 0x02	; 2
   105aa:	0f b6       	in	r0, 0x3f	; 63
   105ac:	f8 94       	cli
   105ae:	de bf       	out	0x3e, r29	; 62
   105b0:	0f be       	out	0x3f, r0	; 63
   105b2:	cd bf       	out	0x3d, r28	; 61
   105b4:	df 91       	pop	r29
   105b6:	cf 91       	pop	r28
   105b8:	08 95       	ret

000105ba <reply_nodeRestart>:
}


//-------------------------------------------------------------------------
void reply_nodeRestart( uint8_t *receivebuffer ) {
   105ba:	cf 93       	push	r28
   105bc:	df 93       	push	r29
   105be:	cd b7       	in	r28, 0x3d	; 61
   105c0:	de b7       	in	r29, 0x3e	; 62
   105c2:	22 97       	sbiw	r28, 0x02	; 2
   105c4:	0f b6       	in	r0, 0x3f	; 63
   105c6:	f8 94       	cli
   105c8:	de bf       	out	0x3e, r29	; 62
   105ca:	0f be       	out	0x3f, r0	; 63
   105cc:	cd bf       	out	0x3d, r28	; 61
   105ce:	9a 83       	std	Y+2, r25	; 0x02
   105d0:	89 83       	std	Y+1, r24	; 0x01
   resetNode();
   105d2:	0e 94 c8 86 	call	0x10d90	; 0x10d90 <resetNode>
   105d6:	22 96       	adiw	r28, 0x02	; 2
   105d8:	0f b6       	in	r0, 0x3f	; 63
   105da:	f8 94       	cli
   105dc:	de bf       	out	0x3e, r29	; 62
   105de:	0f be       	out	0x3f, r0	; 63
   105e0:	cd bf       	out	0x3d, r28	; 61
   105e2:	df 91       	pop	r29
   105e4:	cf 91       	pop	r28
   105e6:	08 95       	ret

000105e8 <WakeupMe>:
}


//-------------------------------------------------------------------------
void WakeupMe() {
   105e8:	cf 93       	push	r28
   105ea:	df 93       	push	r29
   105ec:	cd b7       	in	r28, 0x3d	; 61
   105ee:	de b7       	in	r29, 0x3e	; 62
   thisthread->state = STATE_ACTIVE;
   105f0:	e0 91 57 07 	lds	r30, 0x0757
   105f4:	f0 91 58 07 	lds	r31, 0x0758
   105f8:	82 e0       	ldi	r24, 0x02	; 2
   105fa:	82 83       	std	Z+2, r24	; 0x02
   postNewThreadTask(); 
   105fc:	0e 94 ad 97 	call	0x12f5a	; 0x12f5a <postNewThreadTask>
   10600:	df 91       	pop	r29
   10602:	cf 91       	pop	r28
   10604:	08 95       	ret

00010606 <InitShell>:
}


//-------------------------------------------------------------------------
void InitShell() {
   10606:	ef 92       	push	r14
   10608:	ff 92       	push	r15
   1060a:	0f 93       	push	r16
   1060c:	1f 93       	push	r17
   1060e:	cf 93       	push	r28
   10610:	df 93       	push	r29
   10612:	cd b7       	in	r28, 0x3d	; 61
   10614:	de b7       	in	r29, 0x3e	; 62
   IncomingLength = 0;
   10616:	10 92 14 07 	sts	0x0714, r1
   nodeid = CURRENT_NODE_ID; 
   1061a:	80 91 80 07 	lds	r24, 0x0780
   1061e:	90 91 81 07 	lds	r25, 0x0781
   10622:	90 93 5c 07 	sts	0x075C, r25
   10626:	80 93 5b 07 	sts	0x075B, r24
   registerEvent( 0xfefe, 64, &IncomingLength, IncomingMsg, PacketInfo, WakeupMe );
   1062a:	84 ef       	ldi	r24, 0xF4	; 244
   1062c:	92 e8       	ldi	r25, 0x82	; 130
   1062e:	25 e5       	ldi	r18, 0x55	; 85
   10630:	37 e0       	ldi	r19, 0x07	; 7
   10632:	45 e1       	ldi	r20, 0x15	; 21
   10634:	57 e0       	ldi	r21, 0x07	; 7
   10636:	64 e1       	ldi	r22, 0x14	; 20
   10638:	77 e0       	ldi	r23, 0x07	; 7
   1063a:	7c 01       	movw	r14, r24
   1063c:	89 01       	movw	r16, r18
   1063e:	9a 01       	movw	r18, r20
   10640:	ab 01       	movw	r20, r22
   10642:	60 e4       	ldi	r22, 0x40	; 64
   10644:	8e ef       	ldi	r24, 0xFE	; 254
   10646:	9e ef       	ldi	r25, 0xFE	; 254
   10648:	0e 94 4d 87 	call	0x10e9a	; 0x10e9a <registerEvent>
   1064c:	df 91       	pop	r29
   1064e:	cf 91       	pop	r28
   10650:	1f 91       	pop	r17
   10652:	0f 91       	pop	r16
   10654:	ff 90       	pop	r15
   10656:	ef 90       	pop	r14
   10658:	08 95       	ret

0001065a <ShellThread>:
   
}


//This is the stub function of the shell thread that is used to handle incoming packets 
void ShellThread() {
   1065a:	cf 93       	push	r28
   1065c:	df 93       	push	r29
   1065e:	cd b7       	in	r28, 0x3d	; 61
   10660:	de b7       	in	r29, 0x3e	; 62
   10662:	00 c0       	rjmp	.+0      	; 0x10664 <ShellThread+0xa>
   while ( 1 ) {
      if ( IncomingLength > 0 ) {
   10664:	80 91 14 07 	lds	r24, 0x0714
   10668:	88 23       	and	r24, r24
   1066a:	51 f0       	breq	.+20     	; 0x10680 <ShellThread+0x26>
         commandHandle( IncomingMsg, IncomingLength );
   1066c:	20 91 14 07 	lds	r18, 0x0714
   10670:	85 e1       	ldi	r24, 0x15	; 21
   10672:	97 e0       	ldi	r25, 0x07	; 7
   10674:	62 2f       	mov	r22, r18
   10676:	0e 94 51 83 	call	0x106a2	; 0x106a2 <commandHandle>
         IncomingLength = 0;
   1067a:	10 92 14 07 	sts	0x0714, r1
   1067e:	f2 cf       	rjmp	.-28     	; 0x10664 <ShellThread+0xa>
      } else {
         current_thread->state = STATE_SLEEP;
   10680:	e0 91 da 08 	lds	r30, 0x08DA
   10684:	f0 91 db 08 	lds	r31, 0x08DB
   10688:	85 e0       	ldi	r24, 0x05	; 5
   1068a:	82 83       	std	Z+2, r24	; 0x02
         thisthread = current_thread;
   1068c:	80 91 da 08 	lds	r24, 0x08DA
   10690:	90 91 db 08 	lds	r25, 0x08DB
   10694:	90 93 58 07 	sts	0x0758, r25
   10698:	80 93 57 07 	sts	0x0757, r24
         thread_yield();
   1069c:	0e 94 9e 93 	call	0x1273c	; 0x1273c <thread_yield>
      }
   }
   106a0:	e1 cf       	rjmp	.-62     	; 0x10664 <ShellThread+0xa>

000106a2 <commandHandle>:
}




//-------------------------------------------------------------------------
void commandHandle( uint8_t *receivebuffer, uint8_t total ) {
   106a2:	cf 93       	push	r28
   106a4:	df 93       	push	r29
   106a6:	cd b7       	in	r28, 0x3d	; 61
   106a8:	de b7       	in	r29, 0x3e	; 62
   106aa:	26 97       	sbiw	r28, 0x06	; 6
   106ac:	0f b6       	in	r0, 0x3f	; 63
   106ae:	f8 94       	cli
   106b0:	de bf       	out	0x3e, r29	; 62
   106b2:	0f be       	out	0x3f, r0	; 63
   106b4:	cd bf       	out	0x3d, r28	; 61
   106b6:	9b 83       	std	Y+3, r25	; 0x03
   106b8:	8a 83       	std	Y+2, r24	; 0x02
   106ba:	6c 83       	std	Y+4, r22	; 0x04
   uint8_t commandtype;
  
  /* if ( receivebuffer[ 1 ] == 255 ) {
   		  writeVectorNodeToExternalStorage(); 
   		  writeVectorFlashToExternalStorage();   		  
   		  resetNode();
   }
   */ 
   
   if (  ! (( receivebuffer[ 2 ] == 0 ) || ( receivebuffer[ 2 ] == nodeid ))) {
   106bc:	8a 81       	ldd	r24, Y+2	; 0x02
   106be:	9b 81       	ldd	r25, Y+3	; 0x03
   106c0:	fc 01       	movw	r30, r24
   106c2:	32 96       	adiw	r30, 0x02	; 2
   106c4:	80 81       	ld	r24, Z
   106c6:	88 23       	and	r24, r24
   106c8:	79 f0       	breq	.+30     	; 0x106e8 <commandHandle+0x46>
   106ca:	8a 81       	ldd	r24, Y+2	; 0x02
   106cc:	9b 81       	ldd	r25, Y+3	; 0x03
   106ce:	fc 01       	movw	r30, r24
   106d0:	32 96       	adiw	r30, 0x02	; 2
   106d2:	80 81       	ld	r24, Z
   106d4:	28 2f       	mov	r18, r24
   106d6:	33 27       	eor	r19, r19
   106d8:	80 91 5b 07 	lds	r24, 0x075B
   106dc:	90 91 5c 07 	lds	r25, 0x075C
   106e0:	28 17       	cp	r18, r24
   106e2:	39 07       	cpc	r19, r25
   106e4:	09 f0       	breq	.+2      	; 0x106e8 <commandHandle+0x46>
   106e6:	66 c1       	rjmp	.+716    	; 0x109b4 <commandHandle+0x312>
      return ;
   } 
   
   commandtype = receivebuffer[ 1 ];
   106e8:	8a 81       	ldd	r24, Y+2	; 0x02
   106ea:	9b 81       	ldd	r25, Y+3	; 0x03
   106ec:	fc 01       	movw	r30, r24
   106ee:	31 96       	adiw	r30, 0x01	; 1
   106f0:	80 81       	ld	r24, Z
   106f2:	89 83       	std	Y+1, r24	; 0x01
   
   switch ( commandtype ) {
   106f4:	89 81       	ldd	r24, Y+1	; 0x01
   106f6:	28 2f       	mov	r18, r24
   106f8:	33 27       	eor	r19, r19
   106fa:	3e 83       	std	Y+6, r19	; 0x06
   106fc:	2d 83       	std	Y+5, r18	; 0x05
   106fe:	8d 81       	ldd	r24, Y+5	; 0x05
   10700:	9e 81       	ldd	r25, Y+6	; 0x06
   10702:	8a 37       	cpi	r24, 0x7A	; 122
   10704:	91 05       	cpc	r25, r1
   10706:	09 f4       	brne	.+2      	; 0x1070a <commandHandle+0x68>
   10708:	0d c1       	rjmp	.+538    	; 0x10924 <commandHandle+0x282>
   1070a:	2d 81       	ldd	r18, Y+5	; 0x05
   1070c:	3e 81       	ldd	r19, Y+6	; 0x06
   1070e:	2b 37       	cpi	r18, 0x7B	; 123
   10710:	31 05       	cpc	r19, r1
   10712:	0c f0       	brlt	.+2      	; 0x10716 <commandHandle+0x74>
   10714:	5b c0       	rjmp	.+182    	; 0x107cc <commandHandle+0x12a>
   10716:	8d 81       	ldd	r24, Y+5	; 0x05
   10718:	9e 81       	ldd	r25, Y+6	; 0x06
   1071a:	8f 35       	cpi	r24, 0x5F	; 95
   1071c:	91 05       	cpc	r25, r1
   1071e:	09 f4       	brne	.+2      	; 0x10722 <commandHandle+0x80>
   10720:	da c0       	rjmp	.+436    	; 0x108d6 <commandHandle+0x234>
   10722:	2d 81       	ldd	r18, Y+5	; 0x05
   10724:	3e 81       	ldd	r19, Y+6	; 0x06
   10726:	20 36       	cpi	r18, 0x60	; 96
   10728:	31 05       	cpc	r19, r1
   1072a:	2c f5       	brge	.+74     	; 0x10776 <commandHandle+0xd4>
   1072c:	8d 81       	ldd	r24, Y+5	; 0x05
   1072e:	9e 81       	ldd	r25, Y+6	; 0x06
   10730:	8b 35       	cpi	r24, 0x5B	; 91
   10732:	91 05       	cpc	r25, r1
   10734:	09 f4       	brne	.+2      	; 0x10738 <commandHandle+0x96>
   10736:	bb c0       	rjmp	.+374    	; 0x108ae <commandHandle+0x20c>
   10738:	2d 81       	ldd	r18, Y+5	; 0x05
   1073a:	3e 81       	ldd	r19, Y+6	; 0x06
   1073c:	2c 35       	cpi	r18, 0x5C	; 92
   1073e:	31 05       	cpc	r19, r1
   10740:	6c f4       	brge	.+26     	; 0x1075c <commandHandle+0xba>
   10742:	8d 81       	ldd	r24, Y+5	; 0x05
   10744:	9e 81       	ldd	r25, Y+6	; 0x06
   10746:	8b 30       	cpi	r24, 0x0B	; 11
   10748:	91 05       	cpc	r25, r1
   1074a:	09 f4       	brne	.+2      	; 0x1074e <commandHandle+0xac>
   1074c:	a6 c0       	rjmp	.+332    	; 0x1089a <commandHandle+0x1f8>
   1074e:	2d 81       	ldd	r18, Y+5	; 0x05
   10750:	3e 81       	ldd	r19, Y+6	; 0x06
   10752:	2c 30       	cpi	r18, 0x0C	; 12
   10754:	31 05       	cpc	r19, r1
   10756:	09 f4       	brne	.+2      	; 0x1075a <commandHandle+0xb8>
   10758:	a5 c0       	rjmp	.+330    	; 0x108a4 <commandHandle+0x202>
   1075a:	2c c1       	rjmp	.+600    	; 0x109b4 <commandHandle+0x312>
   1075c:	8d 81       	ldd	r24, Y+5	; 0x05
   1075e:	9e 81       	ldd	r25, Y+6	; 0x06
   10760:	8d 35       	cpi	r24, 0x5D	; 93
   10762:	91 05       	cpc	r25, r1
   10764:	09 f4       	brne	.+2      	; 0x10768 <commandHandle+0xc6>
   10766:	ad c0       	rjmp	.+346    	; 0x108c2 <commandHandle+0x220>
   10768:	2d 81       	ldd	r18, Y+5	; 0x05
   1076a:	3e 81       	ldd	r19, Y+6	; 0x06
   1076c:	2e 35       	cpi	r18, 0x5E	; 94
   1076e:	31 05       	cpc	r19, r1
   10770:	0c f0       	brlt	.+2      	; 0x10774 <commandHandle+0xd2>
   10772:	ac c0       	rjmp	.+344    	; 0x108cc <commandHandle+0x22a>
   10774:	a1 c0       	rjmp	.+322    	; 0x108b8 <commandHandle+0x216>
   10776:	8d 81       	ldd	r24, Y+5	; 0x05
   10778:	9e 81       	ldd	r25, Y+6	; 0x06
   1077a:	86 36       	cpi	r24, 0x66	; 102
   1077c:	91 05       	cpc	r25, r1
   1077e:	09 f4       	brne	.+2      	; 0x10782 <commandHandle+0xe0>
   10780:	b7 c0       	rjmp	.+366    	; 0x108f0 <commandHandle+0x24e>
   10782:	2d 81       	ldd	r18, Y+5	; 0x05
   10784:	3e 81       	ldd	r19, Y+6	; 0x06
   10786:	27 36       	cpi	r18, 0x67	; 103
   10788:	31 05       	cpc	r19, r1
   1078a:	6c f4       	brge	.+26     	; 0x107a6 <commandHandle+0x104>
   1078c:	8d 81       	ldd	r24, Y+5	; 0x05
   1078e:	9e 81       	ldd	r25, Y+6	; 0x06
   10790:	80 36       	cpi	r24, 0x60	; 96
   10792:	91 05       	cpc	r25, r1
   10794:	09 f4       	brne	.+2      	; 0x10798 <commandHandle+0xf6>
   10796:	a4 c0       	rjmp	.+328    	; 0x108e0 <commandHandle+0x23e>
   10798:	2d 81       	ldd	r18, Y+5	; 0x05
   1079a:	3e 81       	ldd	r19, Y+6	; 0x06
   1079c:	25 36       	cpi	r18, 0x65	; 101
   1079e:	31 05       	cpc	r19, r1
   107a0:	09 f4       	brne	.+2      	; 0x107a4 <commandHandle+0x102>
   107a2:	a3 c0       	rjmp	.+326    	; 0x108ea <commandHandle+0x248>
   107a4:	07 c1       	rjmp	.+526    	; 0x109b4 <commandHandle+0x312>
   107a6:	8d 81       	ldd	r24, Y+5	; 0x05
   107a8:	9e 81       	ldd	r25, Y+6	; 0x06
   107aa:	88 36       	cpi	r24, 0x68	; 104
   107ac:	91 05       	cpc	r25, r1
   107ae:	09 f4       	brne	.+2      	; 0x107b2 <commandHandle+0x110>
   107b0:	ac c0       	rjmp	.+344    	; 0x1090a <commandHandle+0x268>
   107b2:	2d 81       	ldd	r18, Y+5	; 0x05
   107b4:	3e 81       	ldd	r19, Y+6	; 0x06
   107b6:	28 36       	cpi	r18, 0x68	; 104
   107b8:	31 05       	cpc	r19, r1
   107ba:	0c f4       	brge	.+2      	; 0x107be <commandHandle+0x11c>
   107bc:	9e c0       	rjmp	.+316    	; 0x108fa <commandHandle+0x258>
   107be:	8d 81       	ldd	r24, Y+5	; 0x05
   107c0:	9e 81       	ldd	r25, Y+6	; 0x06
   107c2:	89 37       	cpi	r24, 0x79	; 121
   107c4:	91 05       	cpc	r25, r1
   107c6:	09 f4       	brne	.+2      	; 0x107ca <commandHandle+0x128>
   107c8:	a8 c0       	rjmp	.+336    	; 0x1091a <commandHandle+0x278>
   107ca:	f4 c0       	rjmp	.+488    	; 0x109b4 <commandHandle+0x312>
   107cc:	2d 81       	ldd	r18, Y+5	; 0x05
   107ce:	3e 81       	ldd	r19, Y+6	; 0x06
   107d0:	2b 3a       	cpi	r18, 0xAB	; 171
   107d2:	31 05       	cpc	r19, r1
   107d4:	09 f4       	brne	.+2      	; 0x107d8 <commandHandle+0x136>
   107d6:	c7 c0       	rjmp	.+398    	; 0x10966 <commandHandle+0x2c4>
   107d8:	8d 81       	ldd	r24, Y+5	; 0x05
   107da:	9e 81       	ldd	r25, Y+6	; 0x06
   107dc:	8c 3a       	cpi	r24, 0xAC	; 172
   107de:	91 05       	cpc	r25, r1
   107e0:	5c f5       	brge	.+86     	; 0x10838 <commandHandle+0x196>
   107e2:	2d 81       	ldd	r18, Y+5	; 0x05
   107e4:	3e 81       	ldd	r19, Y+6	; 0x06
   107e6:	2d 37       	cpi	r18, 0x7D	; 125
   107e8:	31 05       	cpc	r19, r1
   107ea:	09 f4       	brne	.+2      	; 0x107ee <commandHandle+0x14c>
   107ec:	a8 c0       	rjmp	.+336    	; 0x1093e <commandHandle+0x29c>
   107ee:	8d 81       	ldd	r24, Y+5	; 0x05
   107f0:	9e 81       	ldd	r25, Y+6	; 0x06
   107f2:	8e 37       	cpi	r24, 0x7E	; 126
   107f4:	91 05       	cpc	r25, r1
   107f6:	6c f4       	brge	.+26     	; 0x10812 <commandHandle+0x170>
   107f8:	2d 81       	ldd	r18, Y+5	; 0x05
   107fa:	3e 81       	ldd	r19, Y+6	; 0x06
   107fc:	2b 37       	cpi	r18, 0x7B	; 123
   107fe:	31 05       	cpc	r19, r1
   10800:	09 f4       	brne	.+2      	; 0x10804 <commandHandle+0x162>
   10802:	95 c0       	rjmp	.+298    	; 0x1092e <commandHandle+0x28c>
   10804:	8d 81       	ldd	r24, Y+5	; 0x05
   10806:	9e 81       	ldd	r25, Y+6	; 0x06
   10808:	8c 37       	cpi	r24, 0x7C	; 124
   1080a:	91 05       	cpc	r25, r1
   1080c:	09 f4       	brne	.+2      	; 0x10810 <commandHandle+0x16e>
   1080e:	92 c0       	rjmp	.+292    	; 0x10934 <commandHandle+0x292>
   10810:	d1 c0       	rjmp	.+418    	; 0x109b4 <commandHandle+0x312>
   10812:	2d 81       	ldd	r18, Y+5	; 0x05
   10814:	3e 81       	ldd	r19, Y+6	; 0x06
   10816:	27 39       	cpi	r18, 0x97	; 151
   10818:	31 05       	cpc	r19, r1
   1081a:	09 f4       	brne	.+2      	; 0x1081e <commandHandle+0x17c>
   1081c:	9a c0       	rjmp	.+308    	; 0x10952 <commandHandle+0x2b0>
   1081e:	8d 81       	ldd	r24, Y+5	; 0x05
   10820:	9e 81       	ldd	r25, Y+6	; 0x06
   10822:	81 3a       	cpi	r24, 0xA1	; 161
   10824:	91 05       	cpc	r25, r1
   10826:	09 f4       	brne	.+2      	; 0x1082a <commandHandle+0x188>
   10828:	99 c0       	rjmp	.+306    	; 0x1095c <commandHandle+0x2ba>
   1082a:	2d 81       	ldd	r18, Y+5	; 0x05
   1082c:	3e 81       	ldd	r19, Y+6	; 0x06
   1082e:	2d 38       	cpi	r18, 0x8D	; 141
   10830:	31 05       	cpc	r19, r1
   10832:	09 f4       	brne	.+2      	; 0x10836 <commandHandle+0x194>
   10834:	89 c0       	rjmp	.+274    	; 0x10948 <commandHandle+0x2a6>
   10836:	be c0       	rjmp	.+380    	; 0x109b4 <commandHandle+0x312>
   10838:	8d 81       	ldd	r24, Y+5	; 0x05
   1083a:	9e 81       	ldd	r25, Y+6	; 0x06
   1083c:	87 3e       	cpi	r24, 0xE7	; 231
   1083e:	91 05       	cpc	r25, r1
   10840:	09 f4       	brne	.+2      	; 0x10844 <commandHandle+0x1a2>
   10842:	a5 c0       	rjmp	.+330    	; 0x1098e <commandHandle+0x2ec>
   10844:	2d 81       	ldd	r18, Y+5	; 0x05
   10846:	3e 81       	ldd	r19, Y+6	; 0x06
   10848:	28 3e       	cpi	r18, 0xE8	; 232
   1084a:	31 05       	cpc	r19, r1
   1084c:	9c f4       	brge	.+38     	; 0x10874 <commandHandle+0x1d2>
   1084e:	8d 81       	ldd	r24, Y+5	; 0x05
   10850:	9e 81       	ldd	r25, Y+6	; 0x06
   10852:	83 3d       	cpi	r24, 0xD3	; 211
   10854:	91 05       	cpc	r25, r1
   10856:	09 f4       	brne	.+2      	; 0x1085a <commandHandle+0x1b8>
   10858:	90 c0       	rjmp	.+288    	; 0x1097a <commandHandle+0x2d8>
   1085a:	2d 81       	ldd	r18, Y+5	; 0x05
   1085c:	3e 81       	ldd	r19, Y+6	; 0x06
   1085e:	2d 3d       	cpi	r18, 0xDD	; 221
   10860:	31 05       	cpc	r19, r1
   10862:	09 f4       	brne	.+2      	; 0x10866 <commandHandle+0x1c4>
   10864:	8f c0       	rjmp	.+286    	; 0x10984 <commandHandle+0x2e2>
   10866:	8d 81       	ldd	r24, Y+5	; 0x05
   10868:	9e 81       	ldd	r25, Y+6	; 0x06
   1086a:	85 3b       	cpi	r24, 0xB5	; 181
   1086c:	91 05       	cpc	r25, r1
   1086e:	09 f4       	brne	.+2      	; 0x10872 <commandHandle+0x1d0>
   10870:	7f c0       	rjmp	.+254    	; 0x10970 <commandHandle+0x2ce>
   10872:	a0 c0       	rjmp	.+320    	; 0x109b4 <commandHandle+0x312>
   10874:	2d 81       	ldd	r18, Y+5	; 0x05
   10876:	3e 81       	ldd	r19, Y+6	; 0x06
   10878:	29 3e       	cpi	r18, 0xE9	; 233
   1087a:	31 05       	cpc	r19, r1
   1087c:	09 f4       	brne	.+2      	; 0x10880 <commandHandle+0x1de>
   1087e:	91 c0       	rjmp	.+290    	; 0x109a2 <commandHandle+0x300>
   10880:	8d 81       	ldd	r24, Y+5	; 0x05
   10882:	9e 81       	ldd	r25, Y+6	; 0x06
   10884:	89 3e       	cpi	r24, 0xE9	; 233
   10886:	91 05       	cpc	r25, r1
   10888:	0c f4       	brge	.+2      	; 0x1088c <commandHandle+0x1ea>
   1088a:	86 c0       	rjmp	.+268    	; 0x10998 <commandHandle+0x2f6>
   1088c:	2d 81       	ldd	r18, Y+5	; 0x05
   1088e:	3e 81       	ldd	r19, Y+6	; 0x06
   10890:	22 3f       	cpi	r18, 0xF2	; 242
   10892:	31 05       	cpc	r19, r1
   10894:	09 f4       	brne	.+2      	; 0x10898 <commandHandle+0x1f6>
   10896:	8a c0       	rjmp	.+276    	; 0x109ac <commandHandle+0x30a>
   10898:	8d c0       	rjmp	.+282    	; 0x109b4 <commandHandle+0x312>
      //reply_devicehandling handles the device driver issues 
      case 11:
      reply_devicehandling( receivebuffer );
   1089a:	8a 81       	ldd	r24, Y+2	; 0x02
   1089c:	9b 81       	ldd	r25, Y+3	; 0x03
   1089e:	0e 94 4f 70 	call	0xe09e	; 0xe09e <reply_devicehandling>
      break;
   108a2:	88 c0       	rjmp	.+272    	; 0x109b4 <commandHandle+0x312>
      case 12:
      reply_led_control( receivebuffer );
   108a4:	8a 81       	ldd	r24, Y+2	; 0x02
   108a6:	9b 81       	ldd	r25, Y+3	; 0x03
   108a8:	0e 94 83 71 	call	0xe306	; 0xe306 <reply_led_control>
      break;
   108ac:	83 c0       	rjmp	.+262    	; 0x109b4 <commandHandle+0x312>
      case 91:
      reply_debugging_print( receivebuffer );
   108ae:	8a 81       	ldd	r24, Y+2	; 0x02
   108b0:	9b 81       	ldd	r25, Y+3	; 0x03
   108b2:	0e 94 d6 71 	call	0xe3ac	; 0xe3ac <reply_debugging_print>
      break;
   108b6:	7e c0       	rjmp	.+252    	; 0x109b4 <commandHandle+0x312>
      #ifdef PLATFORM_AVR
      case 92:
      reply_debugging_insert_avr_breakpoint( receivebuffer );
   108b8:	8a 81       	ldd	r24, Y+2	; 0x02
   108ba:	9b 81       	ldd	r25, Y+3	; 0x03
   108bc:	0e 94 b0 72 	call	0xe560	; 0xe560 <reply_debugging_insert_avr_breakpoint>
      break;
   108c0:	79 c0       	rjmp	.+242    	; 0x109b4 <commandHandle+0x312>
      case 93:
      reply_debugging_remove_avr_breakpoint( receivebuffer );
   108c2:	8a 81       	ldd	r24, Y+2	; 0x02
   108c4:	9b 81       	ldd	r25, Y+3	; 0x03
   108c6:	0e 94 3f 73 	call	0xe67e	; 0xe67e <reply_debugging_remove_avr_breakpoint>
      break;
   108ca:	74 c0       	rjmp	.+232    	; 0x109b4 <commandHandle+0x312>
      #endif 
      case 94:
      reply_thread_state_snapshot_tofile( receivebuffer );
   108cc:	8a 81       	ldd	r24, Y+2	; 0x02
   108ce:	9b 81       	ldd	r25, Y+3	; 0x03
   108d0:	0e 94 4b 75 	call	0xea96	; 0xea96 <reply_thread_state_snapshot_tofile>
      break;
   108d4:	6f c0       	rjmp	.+222    	; 0x109b4 <commandHandle+0x312>
      case 95:
      reply_thread_state_restore_fromfile( receivebuffer );
   108d6:	8a 81       	ldd	r24, Y+2	; 0x02
   108d8:	9b 81       	ldd	r25, Y+3	; 0x03
   108da:	0e 94 de 75 	call	0xebbc	; 0xebbc <reply_thread_state_restore_fromfile>
      break;
   108de:	6a c0       	rjmp	.+212    	; 0x109b4 <commandHandle+0x312>
      case 96:
      reply_debugging_set( receivebuffer );
   108e0:	8a 81       	ldd	r24, Y+2	; 0x02
   108e2:	9b 81       	ldd	r25, Y+3	; 0x03
   108e4:	0e 94 51 72 	call	0xe4a2	; 0xe4a2 <reply_debugging_set>
      break;
   108e8:	65 c0       	rjmp	.+202    	; 0x109b4 <commandHandle+0x312>
      case 101:
      reply_ls_networkname();
   108ea:	0e 94 6f 76 	call	0xecde	; 0xecde <reply_ls_networkname>
      break;
   108ee:	62 c0       	rjmp	.+196    	; 0x109b4 <commandHandle+0x312>
      case 102:
      reply_ls_nodename( receivebuffer );
   108f0:	8a 81       	ldd	r24, Y+2	; 0x02
   108f2:	9b 81       	ldd	r25, Y+3	; 0x03
   108f4:	0e 94 b5 76 	call	0xed6a	; 0xed6a <reply_ls_nodename>
      break;
   108f8:	5d c0       	rjmp	.+186    	; 0x109b4 <commandHandle+0x312>
      case 103:
      reply_ls_long( receivebuffer[ 3 ] );
   108fa:	8a 81       	ldd	r24, Y+2	; 0x02
   108fc:	9b 81       	ldd	r25, Y+3	; 0x03
   108fe:	fc 01       	movw	r30, r24
   10900:	33 96       	adiw	r30, 0x03	; 3
   10902:	80 81       	ld	r24, Z
   10904:	0e 94 25 77 	call	0xee4a	; 0xee4a <reply_ls_long>
      break;
   10908:	55 c0       	rjmp	.+170    	; 0x109b4 <commandHandle+0x312>
      case 104:
      reply_ls_long( receivebuffer[ 3 ] );
   1090a:	8a 81       	ldd	r24, Y+2	; 0x02
   1090c:	9b 81       	ldd	r25, Y+3	; 0x03
   1090e:	fc 01       	movw	r30, r24
   10910:	33 96       	adiw	r30, 0x03	; 3
   10912:	80 81       	ld	r24, Z
   10914:	0e 94 25 77 	call	0xee4a	; 0xee4a <reply_ls_long>
      break;
   10918:	4d c0       	rjmp	.+154    	; 0x109b4 <commandHandle+0x312>
      case 121:
      reply_cp_fromPCtoNode_type1( receivebuffer );
   1091a:	8a 81       	ldd	r24, Y+2	; 0x02
   1091c:	9b 81       	ldd	r25, Y+3	; 0x03
   1091e:	0e 94 db 77 	call	0xefb6	; 0xefb6 <reply_cp_fromPCtoNode_type1>
      break;
   10922:	48 c0       	rjmp	.+144    	; 0x109b4 <commandHandle+0x312>
      case 122:
      reply_cp_fromPCtoNode_type2( receivebuffer );
   10924:	8a 81       	ldd	r24, Y+2	; 0x02
   10926:	9b 81       	ldd	r25, Y+3	; 0x03
   10928:	0e 94 60 78 	call	0xf0c0	; 0xf0c0 <reply_cp_fromPCtoNode_type2>
      break;
   1092c:	43 c0       	rjmp	.+134    	; 0x109b4 <commandHandle+0x312>
      case 123:
      reply_cp_fromPCtoNode_type3();
   1092e:	0e 94 36 79 	call	0xf26c	; 0xf26c <reply_cp_fromPCtoNode_type3>
      break;
   10932:	40 c0       	rjmp	.+128    	; 0x109b4 <commandHandle+0x312>
      case 124:
      reply_fromNodeToPC_type1( receivebuffer );
   10934:	8a 81       	ldd	r24, Y+2	; 0x02
   10936:	9b 81       	ldd	r25, Y+3	; 0x03
   10938:	0e 94 a7 79 	call	0xf34e	; 0xf34e <reply_fromNodeToPC_type1>
      break;
   1093c:	3b c0       	rjmp	.+118    	; 0x109b4 <commandHandle+0x312>
      case 125:
      reply_fromNodeToPC_type2( receivebuffer );
   1093e:	8a 81       	ldd	r24, Y+2	; 0x02
   10940:	9b 81       	ldd	r25, Y+3	; 0x03
   10942:	0e 94 54 7b 	call	0xf6a8	; 0xf6a8 <reply_fromNodeToPC_type2>
      break;
   10946:	36 c0       	rjmp	.+108    	; 0x109b4 <commandHandle+0x312>
      case 141:
      reply_mkdir( receivebuffer );
   10948:	8a 81       	ldd	r24, Y+2	; 0x02
   1094a:	9b 81       	ldd	r25, Y+3	; 0x03
   1094c:	0e 94 81 77 	call	0xef02	; 0xef02 <reply_mkdir>
      break;
   10950:	31 c0       	rjmp	.+98     	; 0x109b4 <commandHandle+0x312>
      case 151:
      reply_touch( receivebuffer );
   10952:	8a 81       	ldd	r24, Y+2	; 0x02
   10954:	9b 81       	ldd	r25, Y+3	; 0x03
   10956:	0e 94 4d 79 	call	0xf29a	; 0xf29a <reply_touch>
      break;
   1095a:	2c c0       	rjmp	.+88     	; 0x109b4 <commandHandle+0x312>
      case 161:
      reply_rm( receivebuffer );
   1095c:	8a 81       	ldd	r24, Y+2	; 0x02
   1095e:	9b 81       	ldd	r25, Y+3	; 0x03
   10960:	0e 94 f3 7a 	call	0xf5e6	; 0xf5e6 <reply_rm>
      break;
   10964:	27 c0       	rjmp	.+78     	; 0x109b4 <commandHandle+0x312>
      case 171:
      reply_ps( receivebuffer );
   10966:	8a 81       	ldd	r24, Y+2	; 0x02
   10968:	9b 81       	ldd	r25, Y+3	; 0x03
   1096a:	0e 94 d0 7b 	call	0xf7a0	; 0xf7a0 <reply_ps>
      break;
   1096e:	22 c0       	rjmp	.+68     	; 0x109b4 <commandHandle+0x312>
      case 181:
      reply_memory( receivebuffer ); 
   10970:	8a 81       	ldd	r24, Y+2	; 0x02
   10972:	9b 81       	ldd	r25, Y+3	; 0x03
   10974:	0e 94 a7 7c 	call	0xf94e	; 0xf94e <reply_memory>
      break; 
   10978:	1d c0       	rjmp	.+58     	; 0x109b4 <commandHandle+0x312>
      case 211:
      reply_du( receivebuffer );
   1097a:	8a 81       	ldd	r24, Y+2	; 0x02
   1097c:	9b 81       	ldd	r25, Y+3	; 0x03
   1097e:	0e 94 a3 7f 	call	0xff46	; 0xff46 <reply_du>
      break;
   10982:	18 c0       	rjmp	.+48     	; 0x109b4 <commandHandle+0x312>
      case 221:
      reply_search( receivebuffer );
   10984:	8a 81       	ldd	r24, Y+2	; 0x02
   10986:	9b 81       	ldd	r25, Y+3	; 0x03
   10988:	0e 94 ef 7f 	call	0xffde	; 0xffde <reply_search>
      break;
   1098c:	13 c0       	rjmp	.+38     	; 0x109b4 <commandHandle+0x312>
      case 231:
      reply_create_thread( receivebuffer );
   1098e:	8a 81       	ldd	r24, Y+2	; 0x02
   10990:	9b 81       	ldd	r25, Y+3	; 0x03
   10992:	0e 94 68 82 	call	0x104d0	; 0x104d0 <reply_create_thread>
      break;
   10996:	0e c0       	rjmp	.+28     	; 0x109b4 <commandHandle+0x312>
      case 232:
      reply_killthread( receivebuffer );
   10998:	8a 81       	ldd	r24, Y+2	; 0x02
   1099a:	9b 81       	ldd	r25, Y+3	; 0x03
   1099c:	0e 94 ac 7e 	call	0xfd58	; 0xfd58 <reply_killthread>
      break;
   109a0:	09 c0       	rjmp	.+18     	; 0x109b4 <commandHandle+0x312>
      case 233:
      reply_formatSystem( receivebuffer );
   109a2:	8a 81       	ldd	r24, Y+2	; 0x02
   109a4:	9b 81       	ldd	r25, Y+3	; 0x03
   109a6:	0e 94 c2 82 	call	0x10584	; 0x10584 <reply_formatSystem>
      break;
   109aa:	04 c0       	rjmp	.+8      	; 0x109b4 <commandHandle+0x312>
      case 242:
      reply_nodeRestart( receivebuffer );
   109ac:	8a 81       	ldd	r24, Y+2	; 0x02
   109ae:	9b 81       	ldd	r25, Y+3	; 0x03
   109b0:	0e 94 dd 82 	call	0x105ba	; 0x105ba <reply_nodeRestart>
   109b4:	26 96       	adiw	r28, 0x06	; 6
   109b6:	0f b6       	in	r0, 0x3f	; 63
   109b8:	f8 94       	cli
   109ba:	de bf       	out	0x3e, r29	; 62
   109bc:	0f be       	out	0x3f, r0	; 63
   109be:	cd bf       	out	0x3d, r28	; 61
   109c0:	df 91       	pop	r29
   109c2:	cf 91       	pop	r28
   109c4:	08 95       	ret

000109c6 <GenericTimerInit>:
void (*timercallback[8])(); 

inline  
result_t GenericTimerInit(void)
{
   109c6:	cf 93       	push	r28
   109c8:	df 93       	push	r29
   109ca:	cd b7       	in	r28, 0x3d	; 61
   109cc:	de b7       	in	r29, 0x3e	; 62
   109ce:	21 97       	sbiw	r28, 0x01	; 1
   109d0:	0f b6       	in	r0, 0x3f	; 63
   109d2:	f8 94       	cli
   109d4:	de bf       	out	0x3e, r29	; 62
   109d6:	0f be       	out	0x3f, r0	; 63
   109d8:	cd bf       	out	0x3d, r28	; 61
	 uint8_t i; 
	 for (i=0;i<8;i++)
   109da:	19 82       	std	Y+1, r1	; 0x01
   109dc:	0c c0       	rjmp	.+24     	; 0x109f6 <GenericTimerInit+0x30>
	  timercallback[i] = NULL; 
   109de:	89 81       	ldd	r24, Y+1	; 0x01
   109e0:	99 27       	eor	r25, r25
   109e2:	88 0f       	add	r24, r24
   109e4:	99 1f       	adc	r25, r25
   109e6:	fc 01       	movw	r30, r24
   109e8:	e1 5a       	subi	r30, 0xA1	; 161
   109ea:	f8 4f       	sbci	r31, 0xF8	; 248
   109ec:	11 82       	std	Z+1, r1	; 0x01
   109ee:	10 82       	st	Z, r1
   109f0:	89 81       	ldd	r24, Y+1	; 0x01
   109f2:	8f 5f       	subi	r24, 0xFF	; 255
   109f4:	89 83       	std	Y+1, r24	; 0x01
   109f6:	89 81       	ldd	r24, Y+1	; 0x01
   109f8:	88 30       	cpi	r24, 0x08	; 8
   109fa:	88 f3       	brcs	.-30     	; 0x109de <GenericTimerInit+0x18>
	 
	 #ifdef PLATFORM_AVR
	  return TimerM_StdControl_init();
   109fc:	0e 94 66 39 	call	0x72cc	; 0x72cc <TimerM_StdControl_init>
   10a00:	99 27       	eor	r25, r25
   10a02:	21 96       	adiw	r28, 0x01	; 1
   10a04:	0f b6       	in	r0, 0x3f	; 63
   10a06:	f8 94       	cli
   10a08:	de bf       	out	0x3e, r29	; 62
   10a0a:	0f be       	out	0x3f, r0	; 63
   10a0c:	cd bf       	out	0x3d, r28	; 61
   10a0e:	df 91       	pop	r29
   10a10:	cf 91       	pop	r28
   10a12:	08 95       	ret

00010a14 <GenericTimerStart>:
	 #endif
	 
	
}

inline  
result_t GenericTimerStart(uint8_t id, char type, uint32_t interval)
{
   10a14:	cf 93       	push	r28
   10a16:	df 93       	push	r29
   10a18:	cd b7       	in	r28, 0x3d	; 61
   10a1a:	de b7       	in	r29, 0x3e	; 62
   10a1c:	26 97       	sbiw	r28, 0x06	; 6
   10a1e:	0f b6       	in	r0, 0x3f	; 63
   10a20:	f8 94       	cli
   10a22:	de bf       	out	0x3e, r29	; 62
   10a24:	0f be       	out	0x3f, r0	; 63
   10a26:	cd bf       	out	0x3d, r28	; 61
   10a28:	89 83       	std	Y+1, r24	; 0x01
   10a2a:	6a 83       	std	Y+2, r22	; 0x02
   10a2c:	2b 83       	std	Y+3, r18	; 0x03
   10a2e:	3c 83       	std	Y+4, r19	; 0x04
   10a30:	4d 83       	std	Y+5, r20	; 0x05
   10a32:	5e 83       	std	Y+6, r21	; 0x06
	
   #ifdef PLATFORM_AVR
    return 	TimerM_Timer_start(id, type, interval); 
   10a34:	8b 81       	ldd	r24, Y+3	; 0x03
   10a36:	9c 81       	ldd	r25, Y+4	; 0x04
   10a38:	ad 81       	ldd	r26, Y+5	; 0x05
   10a3a:	be 81       	ldd	r27, Y+6	; 0x06
   10a3c:	9c 01       	movw	r18, r24
   10a3e:	ad 01       	movw	r20, r26
   10a40:	6a 81       	ldd	r22, Y+2	; 0x02
   10a42:	89 81       	ldd	r24, Y+1	; 0x01
   10a44:	0e 94 10 3a 	call	0x7420	; 0x7420 <TimerM_Timer_start>
   10a48:	99 27       	eor	r25, r25
   10a4a:	26 96       	adiw	r28, 0x06	; 6
   10a4c:	0f b6       	in	r0, 0x3f	; 63
   10a4e:	f8 94       	cli
   10a50:	de bf       	out	0x3e, r29	; 62
   10a52:	0f be       	out	0x3f, r0	; 63
   10a54:	cd bf       	out	0x3d, r28	; 61
   10a56:	df 91       	pop	r29
   10a58:	cf 91       	pop	r28
   10a5a:	08 95       	ret

00010a5c <GenericTimerStop>:
   #endif
		
}

inline result_t GenericTimerStop(uint8_t id)
{
   10a5c:	cf 93       	push	r28
   10a5e:	df 93       	push	r29
   10a60:	cd b7       	in	r28, 0x3d	; 61
   10a62:	de b7       	in	r29, 0x3e	; 62
   10a64:	21 97       	sbiw	r28, 0x01	; 1
   10a66:	0f b6       	in	r0, 0x3f	; 63
   10a68:	f8 94       	cli
   10a6a:	de bf       	out	0x3e, r29	; 62
   10a6c:	0f be       	out	0x3f, r0	; 63
   10a6e:	cd bf       	out	0x3d, r28	; 61
   10a70:	89 83       	std	Y+1, r24	; 0x01
  #ifdef PLATFORM_AVR
     return TimerM_Timer_stop( id ); 
   10a72:	89 81       	ldd	r24, Y+1	; 0x01
   10a74:	0e 94 8f 39 	call	0x731e	; 0x731e <TimerM_Timer_stop>
   10a78:	99 27       	eor	r25, r25
   10a7a:	21 96       	adiw	r28, 0x01	; 1
   10a7c:	0f b6       	in	r0, 0x3f	; 63
   10a7e:	f8 94       	cli
   10a80:	de bf       	out	0x3e, r29	; 62
   10a82:	0f be       	out	0x3f, r0	; 63
   10a84:	cd bf       	out	0x3d, r28	; 61
   10a86:	df 91       	pop	r29
   10a88:	cf 91       	pop	r28
   10a8a:	08 95       	ret

00010a8c <setTimerCallBackFunction>:
  #endif
}


void  setTimerCallBackFunction(uint8_t currentthreadindex, uint16_t period,  uint16_t type, void (*fp)())
{
   10a8c:	cf 93       	push	r28
   10a8e:	df 93       	push	r29
   10a90:	cd b7       	in	r28, 0x3d	; 61
   10a92:	de b7       	in	r29, 0x3e	; 62
   10a94:	27 97       	sbiw	r28, 0x07	; 7
   10a96:	0f b6       	in	r0, 0x3f	; 63
   10a98:	f8 94       	cli
   10a9a:	de bf       	out	0x3e, r29	; 62
   10a9c:	0f be       	out	0x3f, r0	; 63
   10a9e:	cd bf       	out	0x3d, r28	; 61
   10aa0:	89 83       	std	Y+1, r24	; 0x01
   10aa2:	7b 83       	std	Y+3, r23	; 0x03
   10aa4:	6a 83       	std	Y+2, r22	; 0x02
   10aa6:	5d 83       	std	Y+5, r21	; 0x05
   10aa8:	4c 83       	std	Y+4, r20	; 0x04
   10aaa:	3f 83       	std	Y+7, r19	; 0x07
   10aac:	2e 83       	std	Y+6, r18	; 0x06
    timercallback[currentthreadindex] = fp; 
   10aae:	89 81       	ldd	r24, Y+1	; 0x01
   10ab0:	99 27       	eor	r25, r25
   10ab2:	88 0f       	add	r24, r24
   10ab4:	99 1f       	adc	r25, r25
   10ab6:	fc 01       	movw	r30, r24
   10ab8:	e1 5a       	subi	r30, 0xA1	; 161
   10aba:	f8 4f       	sbci	r31, 0xF8	; 248
   10abc:	8e 81       	ldd	r24, Y+6	; 0x06
   10abe:	9f 81       	ldd	r25, Y+7	; 0x07
   10ac0:	91 83       	std	Z+1, r25	; 0x01
   10ac2:	80 83       	st	Z, r24

    GenericTimerStart(currentthreadindex + 12, type,  period);
   10ac4:	8a 81       	ldd	r24, Y+2	; 0x02
   10ac6:	9b 81       	ldd	r25, Y+3	; 0x03
   10ac8:	aa 27       	eor	r26, r26
   10aca:	bb 27       	eor	r27, r27
   10acc:	6c 81       	ldd	r22, Y+4	; 0x04
   10ace:	29 81       	ldd	r18, Y+1	; 0x01
   10ad0:	72 2f       	mov	r23, r18
   10ad2:	74 5f       	subi	r23, 0xF4	; 244
   10ad4:	9c 01       	movw	r18, r24
   10ad6:	ad 01       	movw	r20, r26
   10ad8:	87 2f       	mov	r24, r23
   10ada:	0e 94 0a 85 	call	0x10a14	; 0x10a14 <GenericTimerStart>
   10ade:	27 96       	adiw	r28, 0x07	; 7
   10ae0:	0f b6       	in	r0, 0x3f	; 63
   10ae2:	f8 94       	cli
   10ae4:	de bf       	out	0x3e, r29	; 62
   10ae6:	0f be       	out	0x3f, r0	; 63
   10ae8:	cd bf       	out	0x3d, r28	; 61
   10aea:	df 91       	pop	r29
   10aec:	cf 91       	pop	r28
   10aee:	08 95       	ret

00010af0 <timercallbackinvoke>:
   

}


void timercallbackinvoke(uint8_t id)
{
   10af0:	cf 93       	push	r28
   10af2:	df 93       	push	r29
   10af4:	cd b7       	in	r28, 0x3d	; 61
   10af6:	de b7       	in	r29, 0x3e	; 62
   10af8:	22 97       	sbiw	r28, 0x02	; 2
   10afa:	0f b6       	in	r0, 0x3f	; 63
   10afc:	f8 94       	cli
   10afe:	de bf       	out	0x3e, r29	; 62
   10b00:	0f be       	out	0x3f, r0	; 63
   10b02:	cd bf       	out	0x3d, r28	; 61
   10b04:	8a 83       	std	Y+2, r24	; 0x02
   uint8_t index = id-12; 
   10b06:	8a 81       	ldd	r24, Y+2	; 0x02
   10b08:	8c 50       	subi	r24, 0x0C	; 12
   10b0a:	89 83       	std	Y+1, r24	; 0x01
   if (timercallback[index] != NULL)
   10b0c:	89 81       	ldd	r24, Y+1	; 0x01
   10b0e:	99 27       	eor	r25, r25
   10b10:	88 0f       	add	r24, r24
   10b12:	99 1f       	adc	r25, r25
   10b14:	fc 01       	movw	r30, r24
   10b16:	e1 5a       	subi	r30, 0xA1	; 161
   10b18:	f8 4f       	sbci	r31, 0xF8	; 248
   10b1a:	80 81       	ld	r24, Z
   10b1c:	91 81       	ldd	r25, Z+1	; 0x01
   10b1e:	00 97       	sbiw	r24, 0x00	; 0
   10b20:	59 f0       	breq	.+22     	; 0x10b38 <timercallbackinvoke+0x48>
     (*timercallback[index])(); 
   10b22:	89 81       	ldd	r24, Y+1	; 0x01
   10b24:	99 27       	eor	r25, r25
   10b26:	88 0f       	add	r24, r24
   10b28:	99 1f       	adc	r25, r25
   10b2a:	fc 01       	movw	r30, r24
   10b2c:	e1 5a       	subi	r30, 0xA1	; 161
   10b2e:	f8 4f       	sbci	r31, 0xF8	; 248
   10b30:	01 90       	ld	r0, Z+
   10b32:	f0 81       	ld	r31, Z
   10b34:	e0 2d       	mov	r30, r0
   10b36:	09 95       	icall
   10b38:	22 96       	adiw	r28, 0x02	; 2
   10b3a:	0f b6       	in	r0, 0x3f	; 63
   10b3c:	f8 94       	cli
   10b3e:	de bf       	out	0x3e, r29	; 62
   10b40:	0f be       	out	0x3f, r0	; 63
   10b42:	cd bf       	out	0x3d, r28	; 61
   10b44:	df 91       	pop	r29
   10b46:	cf 91       	pop	r28
   10b48:	08 95       	ret

00010b4a <GenericTimerFired>:

}


//This function is called from the particular implementation!
//This function also contains platform related defintions 
//0, 1, 2, AND 10, 11 are reserved. User is suggested to start with id 20. 


inline result_t GenericTimerFired(uint8_t id)
{
   10b4a:	cf 93       	push	r28
   10b4c:	df 93       	push	r29
   10b4e:	cd b7       	in	r28, 0x3d	; 61
   10b50:	de b7       	in	r29, 0x3e	; 62
   10b52:	25 97       	sbiw	r28, 0x05	; 5
   10b54:	0f b6       	in	r0, 0x3f	; 63
   10b56:	f8 94       	cli
   10b58:	de bf       	out	0x3e, r29	; 62
   10b5a:	0f be       	out	0x3f, r0	; 63
   10b5c:	cd bf       	out	0x3d, r28	; 61
   10b5e:	8b 83       	std	Y+3, r24	; 0x03
  unsigned char result;
  //0, 1, 2 for threads
  
  switch (id) {
   10b60:	8b 81       	ldd	r24, Y+3	; 0x03
   10b62:	28 2f       	mov	r18, r24
   10b64:	33 27       	eor	r19, r19
   10b66:	3d 83       	std	Y+5, r19	; 0x05
   10b68:	2c 83       	std	Y+4, r18	; 0x04
   10b6a:	8c 81       	ldd	r24, Y+4	; 0x04
   10b6c:	9d 81       	ldd	r25, Y+5	; 0x05
   10b6e:	85 30       	cpi	r24, 0x05	; 5
   10b70:	91 05       	cpc	r25, r1
   10b72:	09 f4       	brne	.+2      	; 0x10b76 <GenericTimerFired+0x2c>
   10b74:	5b c0       	rjmp	.+182    	; 0x10c2c <GenericTimerFired+0xe2>
   10b76:	2c 81       	ldd	r18, Y+4	; 0x04
   10b78:	3d 81       	ldd	r19, Y+5	; 0x05
   10b7a:	26 30       	cpi	r18, 0x06	; 6
   10b7c:	31 05       	cpc	r19, r1
   10b7e:	04 f5       	brge	.+64     	; 0x10bc0 <GenericTimerFired+0x76>
   10b80:	8c 81       	ldd	r24, Y+4	; 0x04
   10b82:	9d 81       	ldd	r25, Y+5	; 0x05
   10b84:	82 30       	cpi	r24, 0x02	; 2
   10b86:	91 05       	cpc	r25, r1
   10b88:	09 f4       	brne	.+2      	; 0x10b8c <GenericTimerFired+0x42>
   10b8a:	44 c0       	rjmp	.+136    	; 0x10c14 <GenericTimerFired+0xca>
   10b8c:	2c 81       	ldd	r18, Y+4	; 0x04
   10b8e:	3d 81       	ldd	r19, Y+5	; 0x05
   10b90:	23 30       	cpi	r18, 0x03	; 3
   10b92:	31 05       	cpc	r19, r1
   10b94:	54 f4       	brge	.+20     	; 0x10baa <GenericTimerFired+0x60>
   10b96:	8c 81       	ldd	r24, Y+4	; 0x04
   10b98:	9d 81       	ldd	r25, Y+5	; 0x05
   10b9a:	00 97       	sbiw	r24, 0x00	; 0
   10b9c:	99 f1       	breq	.+102    	; 0x10c04 <GenericTimerFired+0xba>
   10b9e:	2c 81       	ldd	r18, Y+4	; 0x04
   10ba0:	3d 81       	ldd	r19, Y+5	; 0x05
   10ba2:	21 30       	cpi	r18, 0x01	; 1
   10ba4:	31 05       	cpc	r19, r1
   10ba6:	91 f1       	breq	.+100    	; 0x10c0c <GenericTimerFired+0xc2>
   10ba8:	72 c0       	rjmp	.+228    	; 0x10c8e <GenericTimerFired+0x144>
   10baa:	8c 81       	ldd	r24, Y+4	; 0x04
   10bac:	9d 81       	ldd	r25, Y+5	; 0x05
   10bae:	83 30       	cpi	r24, 0x03	; 3
   10bb0:	91 05       	cpc	r25, r1
   10bb2:	a1 f1       	breq	.+104    	; 0x10c1c <GenericTimerFired+0xd2>
   10bb4:	2c 81       	ldd	r18, Y+4	; 0x04
   10bb6:	3d 81       	ldd	r19, Y+5	; 0x05
   10bb8:	24 30       	cpi	r18, 0x04	; 4
   10bba:	31 05       	cpc	r19, r1
   10bbc:	99 f1       	breq	.+102    	; 0x10c24 <GenericTimerFired+0xda>
   10bbe:	67 c0       	rjmp	.+206    	; 0x10c8e <GenericTimerFired+0x144>
   10bc0:	8c 81       	ldd	r24, Y+4	; 0x04
   10bc2:	9d 81       	ldd	r25, Y+5	; 0x05
   10bc4:	89 30       	cpi	r24, 0x09	; 9
   10bc6:	91 05       	cpc	r25, r1
   10bc8:	e9 f1       	breq	.+122    	; 0x10c44 <GenericTimerFired+0xfa>
   10bca:	2c 81       	ldd	r18, Y+4	; 0x04
   10bcc:	3d 81       	ldd	r19, Y+5	; 0x05
   10bce:	2a 30       	cpi	r18, 0x0A	; 10
   10bd0:	31 05       	cpc	r19, r1
   10bd2:	5c f4       	brge	.+22     	; 0x10bea <GenericTimerFired+0xa0>
   10bd4:	8c 81       	ldd	r24, Y+4	; 0x04
   10bd6:	9d 81       	ldd	r25, Y+5	; 0x05
   10bd8:	86 30       	cpi	r24, 0x06	; 6
   10bda:	91 05       	cpc	r25, r1
   10bdc:	59 f1       	breq	.+86     	; 0x10c34 <GenericTimerFired+0xea>
   10bde:	2c 81       	ldd	r18, Y+4	; 0x04
   10be0:	3d 81       	ldd	r19, Y+5	; 0x05
   10be2:	27 30       	cpi	r18, 0x07	; 7
   10be4:	31 05       	cpc	r19, r1
   10be6:	51 f1       	breq	.+84     	; 0x10c3c <GenericTimerFired+0xf2>
   10be8:	52 c0       	rjmp	.+164    	; 0x10c8e <GenericTimerFired+0x144>
   10bea:	8c 81       	ldd	r24, Y+4	; 0x04
   10bec:	9d 81       	ldd	r25, Y+5	; 0x05
   10bee:	8a 30       	cpi	r24, 0x0A	; 10
   10bf0:	91 05       	cpc	r25, r1
   10bf2:	09 f4       	brne	.+2      	; 0x10bf6 <GenericTimerFired+0xac>
   10bf4:	46 c0       	rjmp	.+140    	; 0x10c82 <GenericTimerFired+0x138>
   10bf6:	2c 81       	ldd	r18, Y+4	; 0x04
   10bf8:	3d 81       	ldd	r19, Y+5	; 0x05
   10bfa:	2b 30       	cpi	r18, 0x0B	; 11
   10bfc:	31 05       	cpc	r19, r1
   10bfe:	09 f4       	brne	.+2      	; 0x10c02 <GenericTimerFired+0xb8>
   10c00:	43 c0       	rjmp	.+134    	; 0x10c88 <GenericTimerFired+0x13e>
   10c02:	45 c0       	rjmp	.+138    	; 0x10c8e <GenericTimerFired+0x144>

    case 0:
      ServiceTimerFired(0);
   10c04:	80 e0       	ldi	r24, 0x00	; 0
   10c06:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <ServiceTimerFired>
      break;
   10c0a:	46 c0       	rjmp	.+140    	; 0x10c98 <GenericTimerFired+0x14e>

    case 1:
	  ServiceTimerFired(1);
   10c0c:	81 e0       	ldi	r24, 0x01	; 1
   10c0e:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <ServiceTimerFired>
	  break;
   10c12:	42 c0       	rjmp	.+132    	; 0x10c98 <GenericTimerFired+0x14e>
  
    case 2:
	  ServiceTimerFired(2);
   10c14:	82 e0       	ldi	r24, 0x02	; 2
   10c16:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <ServiceTimerFired>
	  break;
   10c1a:	3e c0       	rjmp	.+124    	; 0x10c98 <GenericTimerFired+0x14e>
	  
	  case 3:
	  ServiceTimerFired(3);
   10c1c:	83 e0       	ldi	r24, 0x03	; 3
   10c1e:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <ServiceTimerFired>
	  break;
   10c22:	3a c0       	rjmp	.+116    	; 0x10c98 <GenericTimerFired+0x14e>
	  
	  case 4:
	  ServiceTimerFired(4);
   10c24:	84 e0       	ldi	r24, 0x04	; 4
   10c26:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <ServiceTimerFired>
	  break;
   10c2a:	36 c0       	rjmp	.+108    	; 0x10c98 <GenericTimerFired+0x14e>
	  
	  
	  case 5:
	  ServiceTimerFired(5);
   10c2c:	85 e0       	ldi	r24, 0x05	; 5
   10c2e:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <ServiceTimerFired>
	  break;
   10c32:	32 c0       	rjmp	.+100    	; 0x10c98 <GenericTimerFired+0x14e>
	  
	  
	  case 6:
	  ServiceTimerFired(6);
   10c34:	86 e0       	ldi	r24, 0x06	; 6
   10c36:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <ServiceTimerFired>
	  break;
   10c3a:	2e c0       	rjmp	.+92     	; 0x10c98 <GenericTimerFired+0x14e>
	  
	  case 7:
	  ServiceTimerFired(7);
   10c3c:	87 e0       	ldi	r24, 0x07	; 7
   10c3e:	0e 94 bd 97 	call	0x12f7a	; 0x12f7a <ServiceTimerFired>
	  break;
   10c42:	2a c0       	rjmp	.+84     	; 0x10c98 <GenericTimerFired+0x14e>

	  case 9:
	  //Leds_redToggle();	
	  //ServiceTimerFired(9);

      //now modified to send the packet out 
	  {
	  _atomic_t currentatomic;
	    currentatomic = _atomic_start();
   10c44:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   10c48:	89 83       	std	Y+1, r24	; 0x01
        usartPutLong(cpucounter); 
   10c4a:	80 91 db 07 	lds	r24, 0x07DB
   10c4e:	90 91 dc 07 	lds	r25, 0x07DC
   10c52:	a0 91 dd 07 	lds	r26, 0x07DD
   10c56:	b0 91 de 07 	lds	r27, 0x07DE
   10c5a:	bc 01       	movw	r22, r24
   10c5c:	cd 01       	movw	r24, r26
   10c5e:	0e 94 c8 20 	call	0x4190	; 0x4190 <usartPutLong>
		usartPutLong(cpucounter2); 
   10c62:	80 91 e3 07 	lds	r24, 0x07E3
   10c66:	90 91 e4 07 	lds	r25, 0x07E4
   10c6a:	a0 91 e5 07 	lds	r26, 0x07E5
   10c6e:	b0 91 e6 07 	lds	r27, 0x07E6
   10c72:	bc 01       	movw	r22, r24
   10c74:	cd 01       	movw	r24, r26
   10c76:	0e 94 c8 20 	call	0x4190	; 0x4190 <usartPutLong>
        _atomic_end(currentatomic); 
   10c7a:	89 81       	ldd	r24, Y+1	; 0x01
   10c7c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
		}

		//usartPutLong(cpucounter2);
		//usartPutLong(cpucounter3);
	  break;
   10c80:	0b c0       	rjmp	.+22     	; 0x10c98 <GenericTimerFired+0x14e>
    
   
   #if defined(PLATFORM_AVR) && defined(RADIO_CC2420)
    case 10:
      hplcc2420interruptm_FIFOTimer_fired();
   10c82:	0e 94 00 4e 	call	0x9c00	; 0x9c00 <hplcc2420interruptm_FIFOTimer_fired>
	  break;
   10c86:	08 c0       	rjmp	.+16     	; 0x10c98 <GenericTimerFired+0x14e>
	  
    case 11:
      hplcc2420interruptm_CCATimer_fired();
   10c88:	0e 94 56 4e 	call	0x9cac	; 0x9cac <hplcc2420interruptm_CCATimer_fired>
	  break;
   10c8c:	05 c0       	rjmp	.+10     	; 0x10c98 <GenericTimerFired+0x14e>
   #endif 
   
   default:
      timercallbackinvoke(id); 
   10c8e:	8b 81       	ldd	r24, Y+3	; 0x03
   10c90:	0e 94 78 85 	call	0x10af0	; 0x10af0 <timercallbackinvoke>
      result = SUCCESS; 
   10c94:	81 e0       	ldi	r24, 0x01	; 1
   10c96:	8a 83       	std	Y+2, r24	; 0x02
     }
  return SUCCESS;	 
   10c98:	81 e0       	ldi	r24, 0x01	; 1
   10c9a:	90 e0       	ldi	r25, 0x00	; 0
   10c9c:	25 96       	adiw	r28, 0x05	; 5
   10c9e:	0f b6       	in	r0, 0x3f	; 63
   10ca0:	f8 94       	cli
   10ca2:	de bf       	out	0x3e, r29	; 62
   10ca4:	0f be       	out	0x3f, r0	; 63
   10ca6:	cd bf       	out	0x3d, r28	; 61
   10ca8:	df 91       	pop	r29
   10caa:	cf 91       	pop	r28
   10cac:	08 95       	ret

00010cae <node_writenodeid>:
//The name of this particular node 
char filenameid[ 17 ];


void node_writenodeid(uint16_t nodeid) {
   10cae:	cf 93       	push	r28
   10cb0:	df 93       	push	r29
   10cb2:	cd b7       	in	r28, 0x3d	; 61
   10cb4:	de b7       	in	r29, 0x3e	; 62
   10cb6:	22 97       	sbiw	r28, 0x02	; 2
   10cb8:	0f b6       	in	r0, 0x3f	; 63
   10cba:	f8 94       	cli
   10cbc:	de bf       	out	0x3e, r29	; 62
   10cbe:	0f be       	out	0x3f, r0	; 63
   10cc0:	cd bf       	out	0x3d, r28	; 61
   10cc2:	9a 83       	std	Y+2, r25	; 0x02
   10cc4:	89 83       	std	Y+1, r24	; 0x01
	
	   write16uint(NODEIDOFFSET, nodeid);              
   10cc6:	89 81       	ldd	r24, Y+1	; 0x01
   10cc8:	9a 81       	ldd	r25, Y+2	; 0x02
   10cca:	bc 01       	movw	r22, r24
   10ccc:	8e e4       	ldi	r24, 0x4E	; 78
   10cce:	9c e0       	ldi	r25, 0x0C	; 12
   10cd0:	0e 94 c9 6f 	call	0xdf92	; 0xdf92 <write16uint>
   10cd4:	22 96       	adiw	r28, 0x02	; 2
   10cd6:	0f b6       	in	r0, 0x3f	; 63
   10cd8:	f8 94       	cli
   10cda:	de bf       	out	0x3e, r29	; 62
   10cdc:	0f be       	out	0x3f, r0	; 63
   10cde:	cd bf       	out	0x3d, r28	; 61
   10ce0:	df 91       	pop	r29
   10ce2:	cf 91       	pop	r28
   10ce4:	08 95       	ret

00010ce6 <node_readnodeid>:

}


uint16_t node_readnodeid(){
   10ce6:	cf 93       	push	r28
   10ce8:	df 93       	push	r29
   10cea:	cd b7       	in	r28, 0x3d	; 61
   10cec:	de b7       	in	r29, 0x3e	; 62
	
		     return read16uint(NODEIDOFFSET); 	
   10cee:	8e e4       	ldi	r24, 0x4E	; 78
   10cf0:	9c e0       	ldi	r25, 0x0C	; 12
   10cf2:	0e 94 27 6f 	call	0xde4e	; 0xde4e <read16uint>
   10cf6:	df 91       	pop	r29
   10cf8:	cf 91       	pop	r28
   10cfa:	08 95       	ret

00010cfc <node_setinitstatus>:

}


void node_setinitstatus(uint8_t status)
{
   10cfc:	cf 93       	push	r28
   10cfe:	df 93       	push	r29
   10d00:	cd b7       	in	r28, 0x3d	; 61
   10d02:	de b7       	in	r29, 0x3e	; 62
   10d04:	21 97       	sbiw	r28, 0x01	; 1
   10d06:	0f b6       	in	r0, 0x3f	; 63
   10d08:	f8 94       	cli
   10d0a:	de bf       	out	0x3e, r29	; 62
   10d0c:	0f be       	out	0x3f, r0	; 63
   10d0e:	cd bf       	out	0x3d, r28	; 61
   10d10:	89 83       	std	Y+1, r24	; 0x01
	write8uint(NODESTATUSOFFSET, status);
   10d12:	69 81       	ldd	r22, Y+1	; 0x01
   10d14:	82 e5       	ldi	r24, 0x52	; 82
   10d16:	9c e0       	ldi	r25, 0x0C	; 12
   10d18:	0e 94 93 6f 	call	0xdf26	; 0xdf26 <write8uint>
   10d1c:	21 96       	adiw	r28, 0x01	; 1
   10d1e:	0f b6       	in	r0, 0x3f	; 63
   10d20:	f8 94       	cli
   10d22:	de bf       	out	0x3e, r29	; 62
   10d24:	0f be       	out	0x3f, r0	; 63
   10d26:	cd bf       	out	0x3d, r28	; 61
   10d28:	df 91       	pop	r29
   10d2a:	cf 91       	pop	r28
   10d2c:	08 95       	ret

00010d2e <node_readinitstatus>:
	
}


uint8_t node_readinitstatus() 
{
   10d2e:	cf 93       	push	r28
   10d30:	df 93       	push	r29
   10d32:	cd b7       	in	r28, 0x3d	; 61
   10d34:	de b7       	in	r29, 0x3e	; 62
	return read8uint(NODESTATUSOFFSET); 
   10d36:	82 e5       	ldi	r24, 0x52	; 82
   10d38:	9c e0       	ldi	r25, 0x0C	; 12
   10d3a:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <read8uint>
   10d3e:	99 27       	eor	r25, r25
   10d40:	df 91       	pop	r29
   10d42:	cf 91       	pop	r28
   10d44:	08 95       	ret

00010d46 <node_setradiochannel>:
}

void node_setradiochannel(uint8_t channel)
{
   10d46:	cf 93       	push	r28
   10d48:	df 93       	push	r29
   10d4a:	cd b7       	in	r28, 0x3d	; 61
   10d4c:	de b7       	in	r29, 0x3e	; 62
   10d4e:	21 97       	sbiw	r28, 0x01	; 1
   10d50:	0f b6       	in	r0, 0x3f	; 63
   10d52:	f8 94       	cli
   10d54:	de bf       	out	0x3e, r29	; 62
   10d56:	0f be       	out	0x3f, r0	; 63
   10d58:	cd bf       	out	0x3d, r28	; 61
   10d5a:	89 83       	std	Y+1, r24	; 0x01
	write8uint(NODECHANNELOFFSET, channel);
   10d5c:	69 81       	ldd	r22, Y+1	; 0x01
   10d5e:	84 e5       	ldi	r24, 0x54	; 84
   10d60:	9c e0       	ldi	r25, 0x0C	; 12
   10d62:	0e 94 93 6f 	call	0xdf26	; 0xdf26 <write8uint>
   10d66:	21 96       	adiw	r28, 0x01	; 1
   10d68:	0f b6       	in	r0, 0x3f	; 63
   10d6a:	f8 94       	cli
   10d6c:	de bf       	out	0x3e, r29	; 62
   10d6e:	0f be       	out	0x3f, r0	; 63
   10d70:	cd bf       	out	0x3d, r28	; 61
   10d72:	df 91       	pop	r29
   10d74:	cf 91       	pop	r28
   10d76:	08 95       	ret

00010d78 <node_getradiochannel>:
	
}


uint8_t node_getradiochannel() 
{
   10d78:	cf 93       	push	r28
   10d7a:	df 93       	push	r29
   10d7c:	cd b7       	in	r28, 0x3d	; 61
   10d7e:	de b7       	in	r29, 0x3e	; 62
	return read8uint(NODECHANNELOFFSET); 
   10d80:	84 e5       	ldi	r24, 0x54	; 84
   10d82:	9c e0       	ldi	r25, 0x0C	; 12
   10d84:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <read8uint>
   10d88:	99 27       	eor	r25, r25
   10d8a:	df 91       	pop	r29
   10d8c:	cf 91       	pop	r28
   10d8e:	08 95       	ret

00010d90 <resetNode>:
}



void resetNode() {
   10d90:	cf 93       	push	r28
   10d92:	df 93       	push	r29
   10d94:	cd b7       	in	r28, 0x3d	; 61
   10d96:	de b7       	in	r29, 0x3e	; 62
	
#ifdef PLATFORM_AVR
   avr_resetNode(); 
   10d98:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <avr_resetNode>
   10d9c:	df 91       	pop	r29
   10d9e:	cf 91       	pop	r28
   10da0:	08 95       	ret

00010da2 <nodeSleep>:
#endif

}

inline void nodeSleep(){
   10da2:	cf 93       	push	r28
   10da4:	df 93       	push	r29
   10da6:	cd b7       	in	r28, 0x3d	; 61
   10da8:	de b7       	in	r29, 0x3e	; 62
#ifdef PLATFORM_AVR
	 _avr_sleep(); 
   10daa:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <_avr_sleep>
   10dae:	df 91       	pop	r29
   10db0:	cf 91       	pop	r28
   10db2:	08 95       	ret

00010db4 <_enable_interrupt>:
	 #endif
}



inline void _enable_interrupt() {
   10db4:	cf 93       	push	r28
   10db6:	df 93       	push	r29
   10db8:	cd b7       	in	r28, 0x3d	; 61
   10dba:	de b7       	in	r29, 0x3e	; 62
	 #ifdef PLATFORM_AVR
	  _avr_enable_interrupt(); 
   10dbc:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <_avr_enable_interrupt>
   10dc0:	df 91       	pop	r29
   10dc2:	cf 91       	pop	r28
   10dc4:	08 95       	ret

00010dc6 <_disable_interrupt>:
	 #endif
	}	


inline void _disable_interrupt() {
   10dc6:	cf 93       	push	r28
   10dc8:	df 93       	push	r29
   10dca:	cd b7       	in	r28, 0x3d	; 61
   10dcc:	de b7       	in	r29, 0x3e	; 62
	 #ifdef PLATFORM_AVR
	   _avr_disable_interrupt();
   10dce:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <_avr_disable_interrupt>
   10dd2:	df 91       	pop	r29
   10dd4:	cf 91       	pop	r28
   10dd6:	08 95       	ret

00010dd8 <getHandleInfo>:


//get the address of the handle structure 

void *getHandleInfo() {
   10dd8:	cf 93       	push	r28
   10dda:	df 93       	push	r29
   10ddc:	cd b7       	in	r28, 0x3d	; 61
   10dde:	de b7       	in	r29, 0x3e	; 62
   return (void *)&handleinfo;
   10de0:	83 e9       	ldi	r24, 0x93	; 147
   10de2:	97 e0       	ldi	r25, 0x07	; 7
   10de4:	df 91       	pop	r29
   10de6:	cf 91       	pop	r28
   10de8:	08 95       	ret

00010dea <registerReceiverHandle_syscall>:
   
   //deprecated platform dependent implementation 
   //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
   
   // asm volatile("ret"::); 
}



//system call interface for registering an event 
void registerReceiverHandle_syscall() {
   10dea:	ef 92       	push	r14
   10dec:	ff 92       	push	r15
   10dee:	0f 93       	push	r16
   10df0:	1f 93       	push	r17
   10df2:	cf 93       	push	r28
   10df4:	df 93       	push	r29
   10df6:	cd b7       	in	r28, 0x3d	; 61
   10df8:	de b7       	in	r29, 0x3e	; 62
   registerEvent( handleinfo.port, handleinfo.maxLength, handleinfo.dataReady, handleinfo.data, handleinfo.packetinfo, handleinfo.handlefunc );
   10dfa:	80 91 9d 07 	lds	r24, 0x079D
   10dfe:	90 91 9e 07 	lds	r25, 0x079E
   10e02:	20 91 9a 07 	lds	r18, 0x079A
   10e06:	30 91 9b 07 	lds	r19, 0x079B
   10e0a:	40 91 98 07 	lds	r20, 0x0798
   10e0e:	50 91 99 07 	lds	r21, 0x0799
   10e12:	60 91 96 07 	lds	r22, 0x0796
   10e16:	70 91 97 07 	lds	r23, 0x0797
   10e1a:	a0 91 95 07 	lds	r26, 0x0795
   10e1e:	e0 91 93 07 	lds	r30, 0x0793
   10e22:	f0 91 94 07 	lds	r31, 0x0794
   10e26:	7c 01       	movw	r14, r24
   10e28:	89 01       	movw	r16, r18
   10e2a:	9a 01       	movw	r18, r20
   10e2c:	ab 01       	movw	r20, r22
   10e2e:	6a 2f       	mov	r22, r26
   10e30:	cf 01       	movw	r24, r30
   10e32:	0e 94 4d 87 	call	0x10e9a	; 0x10e9a <registerEvent>
   10e36:	df 91       	pop	r29
   10e38:	cf 91       	pop	r28
   10e3a:	1f 91       	pop	r17
   10e3c:	0f 91       	pop	r16
   10e3e:	ff 90       	pop	r15
   10e40:	ef 90       	pop	r14
   10e42:	08 95       	ret

00010e44 <initRadioHandle>:
}



//init all handles by setting their handle valid indicator as 0
void initRadioHandle() {
   10e44:	cf 93       	push	r28
   10e46:	df 93       	push	r29
   10e48:	cd b7       	in	r28, 0x3d	; 61
   10e4a:	de b7       	in	r29, 0x3e	; 62
   10e4c:	21 97       	sbiw	r28, 0x01	; 1
   10e4e:	0f b6       	in	r0, 0x3f	; 63
   10e50:	f8 94       	cli
   10e52:	de bf       	out	0x3e, r29	; 62
   10e54:	0f be       	out	0x3f, r0	; 63
   10e56:	cd bf       	out	0x3d, r28	; 61
   uint8_t i;
   for ( i = 0; i < RECEIVE_HANDLE_NUM; i ++ ) {
   10e58:	19 82       	std	Y+1, r1	; 0x01
   10e5a:	13 c0       	rjmp	.+38     	; 0x10e82 <initRadioHandle+0x3e>
      receivehandles[ i ].handlevalid = 0;
   10e5c:	89 81       	ldd	r24, Y+1	; 0x01
   10e5e:	28 2f       	mov	r18, r24
   10e60:	33 27       	eor	r19, r19
   10e62:	c9 01       	movw	r24, r18
   10e64:	88 0f       	add	r24, r24
   10e66:	99 1f       	adc	r25, r25
   10e68:	82 0f       	add	r24, r18
   10e6a:	93 1f       	adc	r25, r19
   10e6c:	88 0f       	add	r24, r24
   10e6e:	99 1f       	adc	r25, r25
   10e70:	88 0f       	add	r24, r24
   10e72:	99 1f       	adc	r25, r25
   10e74:	fc 01       	movw	r30, r24
   10e76:	e8 55       	subi	r30, 0x58	; 88
   10e78:	f8 4f       	sbci	r31, 0xF8	; 248
   10e7a:	10 82       	st	Z, r1
   10e7c:	89 81       	ldd	r24, Y+1	; 0x01
   10e7e:	8f 5f       	subi	r24, 0xFF	; 255
   10e80:	89 83       	std	Y+1, r24	; 0x01
   10e82:	89 81       	ldd	r24, Y+1	; 0x01
   10e84:	85 30       	cpi	r24, 0x05	; 5
   10e86:	50 f3       	brcs	.-44     	; 0x10e5c <initRadioHandle+0x18>
   10e88:	21 96       	adiw	r28, 0x01	; 1
   10e8a:	0f b6       	in	r0, 0x3f	; 63
   10e8c:	f8 94       	cli
   10e8e:	de bf       	out	0x3e, r29	; 62
   10e90:	0f be       	out	0x3f, r0	; 63
   10e92:	cd bf       	out	0x3d, r28	; 61
   10e94:	df 91       	pop	r29
   10e96:	cf 91       	pop	r28
   10e98:	08 95       	ret

00010e9a <registerEvent>:
   } 
}


//Register A New Handle
//supply the following :
//the port listening to
//The max length of the data
//The dataready byte for the actual number of bytes receicved 
//The data for the received packet
//packetinfo for storing the received packet info on rssi and lqi 
//handle function to be posted 

void registerEvent( uint16_t port, uint8_t maxLength, uint8_t *dataReady, uint8_t *data, uint8_t *packetinfo, void( *handlefunc )( void )) {
   10e9a:	ef 92       	push	r14
   10e9c:	ff 92       	push	r15
   10e9e:	0f 93       	push	r16
   10ea0:	1f 93       	push	r17
   10ea2:	cf 93       	push	r28
   10ea4:	df 93       	push	r29
   10ea6:	cd b7       	in	r28, 0x3d	; 61
   10ea8:	de b7       	in	r29, 0x3e	; 62
   10eaa:	2c 97       	sbiw	r28, 0x0c	; 12
   10eac:	0f b6       	in	r0, 0x3f	; 63
   10eae:	f8 94       	cli
   10eb0:	de bf       	out	0x3e, r29	; 62
   10eb2:	0f be       	out	0x3f, r0	; 63
   10eb4:	cd bf       	out	0x3d, r28	; 61
   10eb6:	9b 83       	std	Y+3, r25	; 0x03
   10eb8:	8a 83       	std	Y+2, r24	; 0x02
   10eba:	6c 83       	std	Y+4, r22	; 0x04
   10ebc:	5e 83       	std	Y+6, r21	; 0x06
   10ebe:	4d 83       	std	Y+5, r20	; 0x05
   10ec0:	38 87       	std	Y+8, r19	; 0x08
   10ec2:	2f 83       	std	Y+7, r18	; 0x07
   10ec4:	1a 87       	std	Y+10, r17	; 0x0a
   10ec6:	09 87       	std	Y+9, r16	; 0x09
   10ec8:	fc 86       	std	Y+12, r15	; 0x0c
   10eca:	eb 86       	std	Y+11, r14	; 0x0b
   uint8_t i;
   for ( i = 0; i < RECEIVE_HANDLE_NUM; i ++ )
   10ecc:	19 82       	std	Y+1, r1	; 0x01
   10ece:	98 c0       	rjmp	.+304    	; 0x11000 <registerEvent+0x166>
   if ( receivehandles[ i ].handlevalid == 0 ) {
   10ed0:	89 81       	ldd	r24, Y+1	; 0x01
   10ed2:	28 2f       	mov	r18, r24
   10ed4:	33 27       	eor	r19, r19
   10ed6:	c9 01       	movw	r24, r18
   10ed8:	88 0f       	add	r24, r24
   10eda:	99 1f       	adc	r25, r25
   10edc:	82 0f       	add	r24, r18
   10ede:	93 1f       	adc	r25, r19
   10ee0:	88 0f       	add	r24, r24
   10ee2:	99 1f       	adc	r25, r25
   10ee4:	88 0f       	add	r24, r24
   10ee6:	99 1f       	adc	r25, r25
   10ee8:	fc 01       	movw	r30, r24
   10eea:	e8 55       	subi	r30, 0x58	; 88
   10eec:	f8 4f       	sbci	r31, 0xF8	; 248
   10eee:	80 81       	ld	r24, Z
   10ef0:	88 23       	and	r24, r24
   10ef2:	09 f0       	breq	.+2      	; 0x10ef6 <registerEvent+0x5c>
   10ef4:	82 c0       	rjmp	.+260    	; 0x10ffa <registerEvent+0x160>
      receivehandles[ i ].port = port;
   10ef6:	89 81       	ldd	r24, Y+1	; 0x01
   10ef8:	28 2f       	mov	r18, r24
   10efa:	33 27       	eor	r19, r19
   10efc:	c9 01       	movw	r24, r18
   10efe:	88 0f       	add	r24, r24
   10f00:	99 1f       	adc	r25, r25
   10f02:	82 0f       	add	r24, r18
   10f04:	93 1f       	adc	r25, r19
   10f06:	88 0f       	add	r24, r24
   10f08:	99 1f       	adc	r25, r25
   10f0a:	88 0f       	add	r24, r24
   10f0c:	99 1f       	adc	r25, r25
   10f0e:	fc 01       	movw	r30, r24
   10f10:	e1 56       	subi	r30, 0x61	; 97
   10f12:	f8 4f       	sbci	r31, 0xF8	; 248
   10f14:	8a 81       	ldd	r24, Y+2	; 0x02
   10f16:	9b 81       	ldd	r25, Y+3	; 0x03
   10f18:	91 83       	std	Z+1, r25	; 0x01
   10f1a:	80 83       	st	Z, r24
      receivehandles[ i ].maxLength = maxLength;
   10f1c:	89 81       	ldd	r24, Y+1	; 0x01
   10f1e:	28 2f       	mov	r18, r24
   10f20:	33 27       	eor	r19, r19
   10f22:	c9 01       	movw	r24, r18
   10f24:	88 0f       	add	r24, r24
   10f26:	99 1f       	adc	r25, r25
   10f28:	82 0f       	add	r24, r18
   10f2a:	93 1f       	adc	r25, r19
   10f2c:	88 0f       	add	r24, r24
   10f2e:	99 1f       	adc	r25, r25
   10f30:	88 0f       	add	r24, r24
   10f32:	99 1f       	adc	r25, r25
   10f34:	fc 01       	movw	r30, r24
   10f36:	ef 55       	subi	r30, 0x5F	; 95
   10f38:	f8 4f       	sbci	r31, 0xF8	; 248
   10f3a:	8c 81       	ldd	r24, Y+4	; 0x04
   10f3c:	80 83       	st	Z, r24
      receivehandles[ i ].dataReady = dataReady;
   10f3e:	89 81       	ldd	r24, Y+1	; 0x01
   10f40:	28 2f       	mov	r18, r24
   10f42:	33 27       	eor	r19, r19
   10f44:	c9 01       	movw	r24, r18
   10f46:	88 0f       	add	r24, r24
   10f48:	99 1f       	adc	r25, r25
   10f4a:	82 0f       	add	r24, r18
   10f4c:	93 1f       	adc	r25, r19
   10f4e:	88 0f       	add	r24, r24
   10f50:	99 1f       	adc	r25, r25
   10f52:	88 0f       	add	r24, r24
   10f54:	99 1f       	adc	r25, r25
   10f56:	fc 01       	movw	r30, r24
   10f58:	ee 55       	subi	r30, 0x5E	; 94
   10f5a:	f8 4f       	sbci	r31, 0xF8	; 248
   10f5c:	8d 81       	ldd	r24, Y+5	; 0x05
   10f5e:	9e 81       	ldd	r25, Y+6	; 0x06
   10f60:	91 83       	std	Z+1, r25	; 0x01
   10f62:	80 83       	st	Z, r24
      receivehandles[ i ].data = data;
   10f64:	89 81       	ldd	r24, Y+1	; 0x01
   10f66:	28 2f       	mov	r18, r24
   10f68:	33 27       	eor	r19, r19
   10f6a:	c9 01       	movw	r24, r18
   10f6c:	88 0f       	add	r24, r24
   10f6e:	99 1f       	adc	r25, r25
   10f70:	82 0f       	add	r24, r18
   10f72:	93 1f       	adc	r25, r19
   10f74:	88 0f       	add	r24, r24
   10f76:	99 1f       	adc	r25, r25
   10f78:	88 0f       	add	r24, r24
   10f7a:	99 1f       	adc	r25, r25
   10f7c:	fc 01       	movw	r30, r24
   10f7e:	ec 55       	subi	r30, 0x5C	; 92
   10f80:	f8 4f       	sbci	r31, 0xF8	; 248
   10f82:	8f 81       	ldd	r24, Y+7	; 0x07
   10f84:	98 85       	ldd	r25, Y+8	; 0x08
   10f86:	91 83       	std	Z+1, r25	; 0x01
   10f88:	80 83       	st	Z, r24
      receivehandles[ i ].packetinfo = packetinfo;
   10f8a:	89 81       	ldd	r24, Y+1	; 0x01
   10f8c:	28 2f       	mov	r18, r24
   10f8e:	33 27       	eor	r19, r19
   10f90:	c9 01       	movw	r24, r18
   10f92:	88 0f       	add	r24, r24
   10f94:	99 1f       	adc	r25, r25
   10f96:	82 0f       	add	r24, r18
   10f98:	93 1f       	adc	r25, r19
   10f9a:	88 0f       	add	r24, r24
   10f9c:	99 1f       	adc	r25, r25
   10f9e:	88 0f       	add	r24, r24
   10fa0:	99 1f       	adc	r25, r25
   10fa2:	fc 01       	movw	r30, r24
   10fa4:	ea 55       	subi	r30, 0x5A	; 90
   10fa6:	f8 4f       	sbci	r31, 0xF8	; 248
   10fa8:	89 85       	ldd	r24, Y+9	; 0x09
   10faa:	9a 85       	ldd	r25, Y+10	; 0x0a
   10fac:	91 83       	std	Z+1, r25	; 0x01
   10fae:	80 83       	st	Z, r24
      receivehandles[ i ].handlefunc = handlefunc;
   10fb0:	89 81       	ldd	r24, Y+1	; 0x01
   10fb2:	28 2f       	mov	r18, r24
   10fb4:	33 27       	eor	r19, r19
   10fb6:	c9 01       	movw	r24, r18
   10fb8:	88 0f       	add	r24, r24
   10fba:	99 1f       	adc	r25, r25
   10fbc:	82 0f       	add	r24, r18
   10fbe:	93 1f       	adc	r25, r19
   10fc0:	88 0f       	add	r24, r24
   10fc2:	99 1f       	adc	r25, r25
   10fc4:	88 0f       	add	r24, r24
   10fc6:	99 1f       	adc	r25, r25
   10fc8:	fc 01       	movw	r30, r24
   10fca:	e7 55       	subi	r30, 0x57	; 87
   10fcc:	f8 4f       	sbci	r31, 0xF8	; 248
   10fce:	8b 85       	ldd	r24, Y+11	; 0x0b
   10fd0:	9c 85       	ldd	r25, Y+12	; 0x0c
   10fd2:	91 83       	std	Z+1, r25	; 0x01
   10fd4:	80 83       	st	Z, r24
      receivehandles[ i ].handlevalid = 1;
   10fd6:	89 81       	ldd	r24, Y+1	; 0x01
   10fd8:	28 2f       	mov	r18, r24
   10fda:	33 27       	eor	r19, r19
   10fdc:	c9 01       	movw	r24, r18
   10fde:	88 0f       	add	r24, r24
   10fe0:	99 1f       	adc	r25, r25
   10fe2:	82 0f       	add	r24, r18
   10fe4:	93 1f       	adc	r25, r19
   10fe6:	88 0f       	add	r24, r24
   10fe8:	99 1f       	adc	r25, r25
   10fea:	88 0f       	add	r24, r24
   10fec:	99 1f       	adc	r25, r25
   10fee:	fc 01       	movw	r30, r24
   10ff0:	e8 55       	subi	r30, 0x58	; 88
   10ff2:	f8 4f       	sbci	r31, 0xF8	; 248
   10ff4:	81 e0       	ldi	r24, 0x01	; 1
   10ff6:	80 83       	st	Z, r24
      return ;
   10ff8:	07 c0       	rjmp	.+14     	; 0x11008 <registerEvent+0x16e>
   10ffa:	89 81       	ldd	r24, Y+1	; 0x01
   10ffc:	8f 5f       	subi	r24, 0xFF	; 255
   10ffe:	89 83       	std	Y+1, r24	; 0x01
   11000:	89 81       	ldd	r24, Y+1	; 0x01
   11002:	85 30       	cpi	r24, 0x05	; 5
   11004:	08 f4       	brcc	.+2      	; 0x11008 <registerEvent+0x16e>
   11006:	64 cf       	rjmp	.-312    	; 0x10ed0 <registerEvent+0x36>
   11008:	2c 96       	adiw	r28, 0x0c	; 12
   1100a:	0f b6       	in	r0, 0x3f	; 63
   1100c:	f8 94       	cli
   1100e:	de bf       	out	0x3e, r29	; 62
   11010:	0f be       	out	0x3f, r0	; 63
   11012:	cd bf       	out	0x3d, r28	; 61
   11014:	df 91       	pop	r29
   11016:	cf 91       	pop	r28
   11018:	1f 91       	pop	r17
   1101a:	0f 91       	pop	r16
   1101c:	ff 90       	pop	r15
   1101e:	ef 90       	pop	r14
   11020:	08 95       	ret

00011022 <deRegisterEvent>:
   }
}

//-------------------------------------------------------------------------
void deRegisterEvent( uint16_t port ) {
   11022:	cf 93       	push	r28
   11024:	df 93       	push	r29
   11026:	cd b7       	in	r28, 0x3d	; 61
   11028:	de b7       	in	r29, 0x3e	; 62
   1102a:	23 97       	sbiw	r28, 0x03	; 3
   1102c:	0f b6       	in	r0, 0x3f	; 63
   1102e:	f8 94       	cli
   11030:	de bf       	out	0x3e, r29	; 62
   11032:	0f be       	out	0x3f, r0	; 63
   11034:	cd bf       	out	0x3d, r28	; 61
   11036:	9b 83       	std	Y+3, r25	; 0x03
   11038:	8a 83       	std	Y+2, r24	; 0x02
   uint8_t i;
   for ( i = 0; i < RECEIVE_HANDLE_NUM; i ++ )
   1103a:	19 82       	std	Y+1, r1	; 0x01
   1103c:	4d c0       	rjmp	.+154    	; 0x110d8 <deRegisterEvent+0xb6>
   if (( receivehandles[ i ].handlevalid == 1 ) && ( receivehandles[ i ].port == port )) {
   1103e:	89 81       	ldd	r24, Y+1	; 0x01
   11040:	28 2f       	mov	r18, r24
   11042:	33 27       	eor	r19, r19
   11044:	c9 01       	movw	r24, r18
   11046:	88 0f       	add	r24, r24
   11048:	99 1f       	adc	r25, r25
   1104a:	82 0f       	add	r24, r18
   1104c:	93 1f       	adc	r25, r19
   1104e:	88 0f       	add	r24, r24
   11050:	99 1f       	adc	r25, r25
   11052:	88 0f       	add	r24, r24
   11054:	99 1f       	adc	r25, r25
   11056:	fc 01       	movw	r30, r24
   11058:	e8 55       	subi	r30, 0x58	; 88
   1105a:	f8 4f       	sbci	r31, 0xF8	; 248
   1105c:	80 81       	ld	r24, Z
   1105e:	81 30       	cpi	r24, 0x01	; 1
   11060:	c1 f5       	brne	.+112    	; 0x110d2 <deRegisterEvent+0xb0>
   11062:	89 81       	ldd	r24, Y+1	; 0x01
   11064:	28 2f       	mov	r18, r24
   11066:	33 27       	eor	r19, r19
   11068:	c9 01       	movw	r24, r18
   1106a:	88 0f       	add	r24, r24
   1106c:	99 1f       	adc	r25, r25
   1106e:	82 0f       	add	r24, r18
   11070:	93 1f       	adc	r25, r19
   11072:	88 0f       	add	r24, r24
   11074:	99 1f       	adc	r25, r25
   11076:	88 0f       	add	r24, r24
   11078:	99 1f       	adc	r25, r25
   1107a:	fc 01       	movw	r30, r24
   1107c:	e1 56       	subi	r30, 0x61	; 97
   1107e:	f8 4f       	sbci	r31, 0xF8	; 248
   11080:	20 81       	ld	r18, Z
   11082:	31 81       	ldd	r19, Z+1	; 0x01
   11084:	8a 81       	ldd	r24, Y+2	; 0x02
   11086:	9b 81       	ldd	r25, Y+3	; 0x03
   11088:	28 17       	cp	r18, r24
   1108a:	39 07       	cpc	r19, r25
   1108c:	11 f5       	brne	.+68     	; 0x110d2 <deRegisterEvent+0xb0>
      receivehandles[ i ].handlevalid = 0;
   1108e:	89 81       	ldd	r24, Y+1	; 0x01
   11090:	28 2f       	mov	r18, r24
   11092:	33 27       	eor	r19, r19
   11094:	c9 01       	movw	r24, r18
   11096:	88 0f       	add	r24, r24
   11098:	99 1f       	adc	r25, r25
   1109a:	82 0f       	add	r24, r18
   1109c:	93 1f       	adc	r25, r19
   1109e:	88 0f       	add	r24, r24
   110a0:	99 1f       	adc	r25, r25
   110a2:	88 0f       	add	r24, r24
   110a4:	99 1f       	adc	r25, r25
   110a6:	fc 01       	movw	r30, r24
   110a8:	e8 55       	subi	r30, 0x58	; 88
   110aa:	f8 4f       	sbci	r31, 0xF8	; 248
   110ac:	10 82       	st	Z, r1
      receivehandles[ i ].port = 0;
   110ae:	89 81       	ldd	r24, Y+1	; 0x01
   110b0:	28 2f       	mov	r18, r24
   110b2:	33 27       	eor	r19, r19
   110b4:	c9 01       	movw	r24, r18
   110b6:	88 0f       	add	r24, r24
   110b8:	99 1f       	adc	r25, r25
   110ba:	82 0f       	add	r24, r18
   110bc:	93 1f       	adc	r25, r19
   110be:	88 0f       	add	r24, r24
   110c0:	99 1f       	adc	r25, r25
   110c2:	88 0f       	add	r24, r24
   110c4:	99 1f       	adc	r25, r25
   110c6:	fc 01       	movw	r30, r24
   110c8:	e1 56       	subi	r30, 0x61	; 97
   110ca:	f8 4f       	sbci	r31, 0xF8	; 248
   110cc:	11 82       	std	Z+1, r1	; 0x01
   110ce:	10 82       	st	Z, r1
      return ;
   110d0:	07 c0       	rjmp	.+14     	; 0x110e0 <deRegisterEvent+0xbe>
   110d2:	89 81       	ldd	r24, Y+1	; 0x01
   110d4:	8f 5f       	subi	r24, 0xFF	; 255
   110d6:	89 83       	std	Y+1, r24	; 0x01
   110d8:	89 81       	ldd	r24, Y+1	; 0x01
   110da:	85 30       	cpi	r24, 0x05	; 5
   110dc:	08 f4       	brcc	.+2      	; 0x110e0 <deRegisterEvent+0xbe>
   110de:	af cf       	rjmp	.-162    	; 0x1103e <deRegisterEvent+0x1c>
   110e0:	23 96       	adiw	r28, 0x03	; 3
   110e2:	0f b6       	in	r0, 0x3f	; 63
   110e4:	f8 94       	cli
   110e6:	de bf       	out	0x3e, r29	; 62
   110e8:	0f be       	out	0x3f, r0	; 63
   110ea:	cd bf       	out	0x3d, r28	; 61
   110ec:	df 91       	pop	r29
   110ee:	cf 91       	pop	r28
   110f0:	08 95       	ret

000110f2 <Standard_Receive_Packet>:
   }
}


//Now this OS has a new packet, needs to deliver it to the correct thread for processing, and return the packet as soon as possible 
Radio_MsgPtr Standard_Receive_Packet( uint16_t port, Radio_MsgPtr packet ) {
   110f2:	cf 93       	push	r28
   110f4:	df 93       	push	r29
   110f6:	cd b7       	in	r28, 0x3d	; 61
   110f8:	de b7       	in	r29, 0x3e	; 62
   110fa:	2d 97       	sbiw	r28, 0x0d	; 13
   110fc:	0f b6       	in	r0, 0x3f	; 63
   110fe:	f8 94       	cli
   11100:	de bf       	out	0x3e, r29	; 62
   11102:	0f be       	out	0x3f, r0	; 63
   11104:	cd bf       	out	0x3d, r28	; 61
   11106:	9f 83       	std	Y+7, r25	; 0x07
   11108:	8e 83       	std	Y+6, r24	; 0x06
   1110a:	79 87       	std	Y+9, r23	; 0x09
   1110c:	68 87       	std	Y+8, r22	; 0x08
   uint8_t i;
   for ( i = 0; i < RECEIVE_HANDLE_NUM; i ++ )
   1110e:	1d 82       	std	Y+5, r1	; 0x05
   11110:	f5 c0       	rjmp	.+490    	; 0x112fc <Standard_Receive_Packet+0x20a>
    {
      if (( receivehandles[ i ].port == port ) && ( receivehandles[ i ].handlevalid == 1 ))
   11112:	8d 81       	ldd	r24, Y+5	; 0x05
   11114:	28 2f       	mov	r18, r24
   11116:	33 27       	eor	r19, r19
   11118:	c9 01       	movw	r24, r18
   1111a:	88 0f       	add	r24, r24
   1111c:	99 1f       	adc	r25, r25
   1111e:	82 0f       	add	r24, r18
   11120:	93 1f       	adc	r25, r19
   11122:	88 0f       	add	r24, r24
   11124:	99 1f       	adc	r25, r25
   11126:	88 0f       	add	r24, r24
   11128:	99 1f       	adc	r25, r25
   1112a:	fc 01       	movw	r30, r24
   1112c:	e1 56       	subi	r30, 0x61	; 97
   1112e:	f8 4f       	sbci	r31, 0xF8	; 248
   11130:	20 81       	ld	r18, Z
   11132:	31 81       	ldd	r19, Z+1	; 0x01
   11134:	8e 81       	ldd	r24, Y+6	; 0x06
   11136:	9f 81       	ldd	r25, Y+7	; 0x07
   11138:	28 17       	cp	r18, r24
   1113a:	39 07       	cpc	r19, r25
   1113c:	09 f0       	breq	.+2      	; 0x11140 <Standard_Receive_Packet+0x4e>
   1113e:	db c0       	rjmp	.+438    	; 0x112f6 <Standard_Receive_Packet+0x204>
   11140:	8d 81       	ldd	r24, Y+5	; 0x05
   11142:	28 2f       	mov	r18, r24
   11144:	33 27       	eor	r19, r19
   11146:	c9 01       	movw	r24, r18
   11148:	88 0f       	add	r24, r24
   1114a:	99 1f       	adc	r25, r25
   1114c:	82 0f       	add	r24, r18
   1114e:	93 1f       	adc	r25, r19
   11150:	88 0f       	add	r24, r24
   11152:	99 1f       	adc	r25, r25
   11154:	88 0f       	add	r24, r24
   11156:	99 1f       	adc	r25, r25
   11158:	fc 01       	movw	r30, r24
   1115a:	e8 55       	subi	r30, 0x58	; 88
   1115c:	f8 4f       	sbci	r31, 0xF8	; 248
   1115e:	80 81       	ld	r24, Z
   11160:	81 30       	cpi	r24, 0x01	; 1
   11162:	09 f0       	breq	.+2      	; 0x11166 <Standard_Receive_Packet+0x74>
   11164:	c8 c0       	rjmp	.+400    	; 0x112f6 <Standard_Receive_Packet+0x204>
       {
         uint8_t temp;
         uint8_t j;
         uint8_t *buf;
         buf = ( uint8_t* )receivehandles[ i ].data;
   11166:	8d 81       	ldd	r24, Y+5	; 0x05
   11168:	28 2f       	mov	r18, r24
   1116a:	33 27       	eor	r19, r19
   1116c:	c9 01       	movw	r24, r18
   1116e:	88 0f       	add	r24, r24
   11170:	99 1f       	adc	r25, r25
   11172:	82 0f       	add	r24, r18
   11174:	93 1f       	adc	r25, r19
   11176:	88 0f       	add	r24, r24
   11178:	99 1f       	adc	r25, r25
   1117a:	88 0f       	add	r24, r24
   1117c:	99 1f       	adc	r25, r25
   1117e:	fc 01       	movw	r30, r24
   11180:	ec 55       	subi	r30, 0x5C	; 92
   11182:	f8 4f       	sbci	r31, 0xF8	; 248
   11184:	80 81       	ld	r24, Z
   11186:	91 81       	ldd	r25, Z+1	; 0x01
   11188:	9a 83       	std	Y+2, r25	; 0x02
   1118a:	89 83       	std	Y+1, r24	; 0x01
         temp = ( packet->length > ( receivehandles[ i ].maxLength ) ? ( receivehandles[ i ].maxLength ): packet->length );
   1118c:	e8 85       	ldd	r30, Y+8	; 0x08
   1118e:	f9 85       	ldd	r31, Y+9	; 0x09
   11190:	40 81       	ld	r20, Z
   11192:	8d 81       	ldd	r24, Y+5	; 0x05
   11194:	28 2f       	mov	r18, r24
   11196:	33 27       	eor	r19, r19
   11198:	c9 01       	movw	r24, r18
   1119a:	88 0f       	add	r24, r24
   1119c:	99 1f       	adc	r25, r25
   1119e:	82 0f       	add	r24, r18
   111a0:	93 1f       	adc	r25, r19
   111a2:	88 0f       	add	r24, r24
   111a4:	99 1f       	adc	r25, r25
   111a6:	88 0f       	add	r24, r24
   111a8:	99 1f       	adc	r25, r25
   111aa:	fc 01       	movw	r30, r24
   111ac:	ef 55       	subi	r30, 0x5F	; 95
   111ae:	f8 4f       	sbci	r31, 0xF8	; 248
   111b0:	e0 81       	ld	r30, Z
   111b2:	ec 87       	std	Y+12, r30	; 0x0c
   111b4:	4d 87       	std	Y+13, r20	; 0x0d
   111b6:	8d 85       	ldd	r24, Y+13	; 0x0d
   111b8:	9c 85       	ldd	r25, Y+12	; 0x0c
   111ba:	98 17       	cp	r25, r24
   111bc:	10 f4       	brcc	.+4      	; 0x111c2 <Standard_Receive_Packet+0xd0>
   111be:	8c 85       	ldd	r24, Y+12	; 0x0c
   111c0:	8d 87       	std	Y+13, r24	; 0x0d
   111c2:	9d 85       	ldd	r25, Y+13	; 0x0d
   111c4:	9c 83       	std	Y+4, r25	; 0x04
         for ( j = 0; j < temp; j ++ ) {
   111c6:	1b 82       	std	Y+3, r1	; 0x03
   111c8:	15 c0       	rjmp	.+42     	; 0x111f4 <Standard_Receive_Packet+0x102>
            *buf = packet->data[ j ];
   111ca:	8b 81       	ldd	r24, Y+3	; 0x03
   111cc:	28 2f       	mov	r18, r24
   111ce:	33 27       	eor	r19, r19
   111d0:	88 85       	ldd	r24, Y+8	; 0x08
   111d2:	99 85       	ldd	r25, Y+9	; 0x09
   111d4:	82 0f       	add	r24, r18
   111d6:	93 1f       	adc	r25, r19
   111d8:	fc 01       	movw	r30, r24
   111da:	3a 96       	adiw	r30, 0x0a	; 10
   111dc:	80 81       	ld	r24, Z
   111de:	e9 81       	ldd	r30, Y+1	; 0x01
   111e0:	fa 81       	ldd	r31, Y+2	; 0x02
   111e2:	80 83       	st	Z, r24
            buf ++;
   111e4:	89 81       	ldd	r24, Y+1	; 0x01
   111e6:	9a 81       	ldd	r25, Y+2	; 0x02
   111e8:	01 96       	adiw	r24, 0x01	; 1
   111ea:	9a 83       	std	Y+2, r25	; 0x02
   111ec:	89 83       	std	Y+1, r24	; 0x01
   111ee:	8b 81       	ldd	r24, Y+3	; 0x03
   111f0:	8f 5f       	subi	r24, 0xFF	; 255
   111f2:	8b 83       	std	Y+3, r24	; 0x03
   111f4:	9b 81       	ldd	r25, Y+3	; 0x03
   111f6:	8c 81       	ldd	r24, Y+4	; 0x04
   111f8:	98 17       	cp	r25, r24
   111fa:	38 f3       	brcs	.-50     	; 0x111ca <Standard_Receive_Packet+0xd8>
         }
         if ( receivehandles[ i ].packetinfo != NULL ) {
   111fc:	8d 81       	ldd	r24, Y+5	; 0x05
   111fe:	28 2f       	mov	r18, r24
   11200:	33 27       	eor	r19, r19
   11202:	c9 01       	movw	r24, r18
   11204:	88 0f       	add	r24, r24
   11206:	99 1f       	adc	r25, r25
   11208:	82 0f       	add	r24, r18
   1120a:	93 1f       	adc	r25, r19
   1120c:	88 0f       	add	r24, r24
   1120e:	99 1f       	adc	r25, r25
   11210:	88 0f       	add	r24, r24
   11212:	99 1f       	adc	r25, r25
   11214:	fc 01       	movw	r30, r24
   11216:	ea 55       	subi	r30, 0x5A	; 90
   11218:	f8 4f       	sbci	r31, 0xF8	; 248
   1121a:	80 81       	ld	r24, Z
   1121c:	91 81       	ldd	r25, Z+1	; 0x01
   1121e:	00 97       	sbiw	r24, 0x00	; 0
   11220:	51 f1       	breq	.+84     	; 0x11276 <Standard_Receive_Packet+0x184>
            buf = ( uint8_t* )receivehandles[ i ].packetinfo;
   11222:	8d 81       	ldd	r24, Y+5	; 0x05
   11224:	28 2f       	mov	r18, r24
   11226:	33 27       	eor	r19, r19
   11228:	c9 01       	movw	r24, r18
   1122a:	88 0f       	add	r24, r24
   1122c:	99 1f       	adc	r25, r25
   1122e:	82 0f       	add	r24, r18
   11230:	93 1f       	adc	r25, r19
   11232:	88 0f       	add	r24, r24
   11234:	99 1f       	adc	r25, r25
   11236:	88 0f       	add	r24, r24
   11238:	99 1f       	adc	r25, r25
   1123a:	fc 01       	movw	r30, r24
   1123c:	ea 55       	subi	r30, 0x5A	; 90
   1123e:	f8 4f       	sbci	r31, 0xF8	; 248
   11240:	80 81       	ld	r24, Z
   11242:	91 81       	ldd	r25, Z+1	; 0x01
   11244:	9a 83       	std	Y+2, r25	; 0x02
   11246:	89 83       	std	Y+1, r24	; 0x01
            *buf = packet->strength;
   11248:	88 85       	ldd	r24, Y+8	; 0x08
   1124a:	99 85       	ldd	r25, Y+9	; 0x09
   1124c:	fc 01       	movw	r30, r24
   1124e:	e2 59       	subi	r30, 0x92	; 146
   11250:	ff 4f       	sbci	r31, 0xFF	; 255
   11252:	80 81       	ld	r24, Z
   11254:	e9 81       	ldd	r30, Y+1	; 0x01
   11256:	fa 81       	ldd	r31, Y+2	; 0x02
   11258:	80 83       	st	Z, r24
            buf ++;
   1125a:	89 81       	ldd	r24, Y+1	; 0x01
   1125c:	9a 81       	ldd	r25, Y+2	; 0x02
   1125e:	01 96       	adiw	r24, 0x01	; 1
   11260:	9a 83       	std	Y+2, r25	; 0x02
   11262:	89 83       	std	Y+1, r24	; 0x01
            *buf = packet->lqi;
   11264:	88 85       	ldd	r24, Y+8	; 0x08
   11266:	99 85       	ldd	r25, Y+9	; 0x09
   11268:	fc 01       	movw	r30, r24
   1126a:	e1 59       	subi	r30, 0x91	; 145
   1126c:	ff 4f       	sbci	r31, 0xFF	; 255
   1126e:	80 81       	ld	r24, Z
   11270:	e9 81       	ldd	r30, Y+1	; 0x01
   11272:	fa 81       	ldd	r31, Y+2	; 0x02
   11274:	80 83       	st	Z, r24
         }
         if ( receivehandles[ i ].handlefunc != NULL ) {
   11276:	8d 81       	ldd	r24, Y+5	; 0x05
   11278:	28 2f       	mov	r18, r24
   1127a:	33 27       	eor	r19, r19
   1127c:	c9 01       	movw	r24, r18
   1127e:	88 0f       	add	r24, r24
   11280:	99 1f       	adc	r25, r25
   11282:	82 0f       	add	r24, r18
   11284:	93 1f       	adc	r25, r19
   11286:	88 0f       	add	r24, r24
   11288:	99 1f       	adc	r25, r25
   1128a:	88 0f       	add	r24, r24
   1128c:	99 1f       	adc	r25, r25
   1128e:	fc 01       	movw	r30, r24
   11290:	e7 55       	subi	r30, 0x57	; 87
   11292:	f8 4f       	sbci	r31, 0xF8	; 248
   11294:	80 81       	ld	r24, Z
   11296:	91 81       	ldd	r25, Z+1	; 0x01
   11298:	00 97       	sbiw	r24, 0x00	; 0
   1129a:	a1 f0       	breq	.+40     	; 0x112c4 <Standard_Receive_Packet+0x1d2>
            postTask( receivehandles[ i ].handlefunc, 6 );
   1129c:	8d 81       	ldd	r24, Y+5	; 0x05
   1129e:	28 2f       	mov	r18, r24
   112a0:	33 27       	eor	r19, r19
   112a2:	c9 01       	movw	r24, r18
   112a4:	88 0f       	add	r24, r24
   112a6:	99 1f       	adc	r25, r25
   112a8:	82 0f       	add	r24, r18
   112aa:	93 1f       	adc	r25, r19
   112ac:	88 0f       	add	r24, r24
   112ae:	99 1f       	adc	r25, r25
   112b0:	88 0f       	add	r24, r24
   112b2:	99 1f       	adc	r25, r25
   112b4:	fc 01       	movw	r30, r24
   112b6:	e7 55       	subi	r30, 0x57	; 87
   112b8:	f8 4f       	sbci	r31, 0xF8	; 248
   112ba:	80 81       	ld	r24, Z
   112bc:	91 81       	ldd	r25, Z+1	; 0x01
   112be:	66 e0       	ldi	r22, 0x06	; 6
   112c0:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
         } 
         //if (*(receivehandles[i].dataReady) == 0) 
         *( receivehandles[ i ].dataReady ) = temp;
   112c4:	8d 81       	ldd	r24, Y+5	; 0x05
   112c6:	28 2f       	mov	r18, r24
   112c8:	33 27       	eor	r19, r19
   112ca:	c9 01       	movw	r24, r18
   112cc:	88 0f       	add	r24, r24
   112ce:	99 1f       	adc	r25, r25
   112d0:	82 0f       	add	r24, r18
   112d2:	93 1f       	adc	r25, r19
   112d4:	88 0f       	add	r24, r24
   112d6:	99 1f       	adc	r25, r25
   112d8:	88 0f       	add	r24, r24
   112da:	99 1f       	adc	r25, r25
   112dc:	fc 01       	movw	r30, r24
   112de:	ee 55       	subi	r30, 0x5E	; 94
   112e0:	f8 4f       	sbci	r31, 0xF8	; 248
   112e2:	01 90       	ld	r0, Z+
   112e4:	f0 81       	ld	r31, Z
   112e6:	e0 2d       	mov	r30, r0
   112e8:	8c 81       	ldd	r24, Y+4	; 0x04
   112ea:	80 83       	st	Z, r24
         return packet;
   112ec:	88 85       	ldd	r24, Y+8	; 0x08
   112ee:	99 85       	ldd	r25, Y+9	; 0x09
   112f0:	9b 87       	std	Y+11, r25	; 0x0b
   112f2:	8a 87       	std	Y+10, r24	; 0x0a
   112f4:	0b c0       	rjmp	.+22     	; 0x1130c <Standard_Receive_Packet+0x21a>
   112f6:	8d 81       	ldd	r24, Y+5	; 0x05
   112f8:	8f 5f       	subi	r24, 0xFF	; 255
   112fa:	8d 83       	std	Y+5, r24	; 0x05
   112fc:	8d 81       	ldd	r24, Y+5	; 0x05
   112fe:	85 30       	cpi	r24, 0x05	; 5
   11300:	08 f4       	brcc	.+2      	; 0x11304 <Standard_Receive_Packet+0x212>
   11302:	07 cf       	rjmp	.-498    	; 0x11112 <Standard_Receive_Packet+0x20>
      }
   }
   return packet;
   11304:	88 85       	ldd	r24, Y+8	; 0x08
   11306:	99 85       	ldd	r25, Y+9	; 0x09
   11308:	9b 87       	std	Y+11, r25	; 0x0b
   1130a:	8a 87       	std	Y+10, r24	; 0x0a
   1130c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1130e:	9b 85       	ldd	r25, Y+11	; 0x0b
   11310:	2d 96       	adiw	r28, 0x0d	; 13
   11312:	0f b6       	in	r0, 0x3f	; 63
   11314:	f8 94       	cli
   11316:	de bf       	out	0x3e, r29	; 62
   11318:	0f be       	out	0x3f, r0	; 63
   1131a:	cd bf       	out	0x3d, r28	; 61
   1131c:	df 91       	pop	r29
   1131e:	cf 91       	pop	r28
   11320:	08 95       	ret

00011322 <deleteThreadRegistrationInReceiverHandles>:
}


void deleteThreadRegistrationInReceiverHandles(uint8_t *start, uint8_t *end)
{
   11322:	cf 93       	push	r28
   11324:	df 93       	push	r29
   11326:	cd b7       	in	r28, 0x3d	; 61
   11328:	de b7       	in	r29, 0x3e	; 62
   1132a:	25 97       	sbiw	r28, 0x05	; 5
   1132c:	0f b6       	in	r0, 0x3f	; 63
   1132e:	f8 94       	cli
   11330:	de bf       	out	0x3e, r29	; 62
   11332:	0f be       	out	0x3f, r0	; 63
   11334:	cd bf       	out	0x3d, r28	; 61
   11336:	9b 83       	std	Y+3, r25	; 0x03
   11338:	8a 83       	std	Y+2, r24	; 0x02
   1133a:	7d 83       	std	Y+5, r23	; 0x05
   1133c:	6c 83       	std	Y+4, r22	; 0x04
	 uint8_t i; 
   for ( i = 0; i < RECEIVE_HANDLE_NUM; i ++ )
   1133e:	19 82       	std	Y+1, r1	; 0x01
   11340:	63 c0       	rjmp	.+198    	; 0x11408 <deleteThreadRegistrationInReceiverHandles+0xe6>
   { if (( receivehandles[ i ].handlevalid == 1 ) && ( receivehandles[ i ].dataReady <= end ) && ( receivehandles[ i ].dataReady >= start )) {
   11342:	89 81       	ldd	r24, Y+1	; 0x01
   11344:	28 2f       	mov	r18, r24
   11346:	33 27       	eor	r19, r19
   11348:	c9 01       	movw	r24, r18
   1134a:	88 0f       	add	r24, r24
   1134c:	99 1f       	adc	r25, r25
   1134e:	82 0f       	add	r24, r18
   11350:	93 1f       	adc	r25, r19
   11352:	88 0f       	add	r24, r24
   11354:	99 1f       	adc	r25, r25
   11356:	88 0f       	add	r24, r24
   11358:	99 1f       	adc	r25, r25
   1135a:	fc 01       	movw	r30, r24
   1135c:	e8 55       	subi	r30, 0x58	; 88
   1135e:	f8 4f       	sbci	r31, 0xF8	; 248
   11360:	80 81       	ld	r24, Z
   11362:	81 30       	cpi	r24, 0x01	; 1
   11364:	09 f0       	breq	.+2      	; 0x11368 <deleteThreadRegistrationInReceiverHandles+0x46>
   11366:	4d c0       	rjmp	.+154    	; 0x11402 <deleteThreadRegistrationInReceiverHandles+0xe0>
   11368:	89 81       	ldd	r24, Y+1	; 0x01
   1136a:	28 2f       	mov	r18, r24
   1136c:	33 27       	eor	r19, r19
   1136e:	c9 01       	movw	r24, r18
   11370:	88 0f       	add	r24, r24
   11372:	99 1f       	adc	r25, r25
   11374:	82 0f       	add	r24, r18
   11376:	93 1f       	adc	r25, r19
   11378:	88 0f       	add	r24, r24
   1137a:	99 1f       	adc	r25, r25
   1137c:	88 0f       	add	r24, r24
   1137e:	99 1f       	adc	r25, r25
   11380:	fc 01       	movw	r30, r24
   11382:	ee 55       	subi	r30, 0x5E	; 94
   11384:	f8 4f       	sbci	r31, 0xF8	; 248
   11386:	20 81       	ld	r18, Z
   11388:	31 81       	ldd	r19, Z+1	; 0x01
   1138a:	8c 81       	ldd	r24, Y+4	; 0x04
   1138c:	9d 81       	ldd	r25, Y+5	; 0x05
   1138e:	82 17       	cp	r24, r18
   11390:	93 07       	cpc	r25, r19
   11392:	b8 f1       	brcs	.+110    	; 0x11402 <deleteThreadRegistrationInReceiverHandles+0xe0>
   11394:	89 81       	ldd	r24, Y+1	; 0x01
   11396:	28 2f       	mov	r18, r24
   11398:	33 27       	eor	r19, r19
   1139a:	c9 01       	movw	r24, r18
   1139c:	88 0f       	add	r24, r24
   1139e:	99 1f       	adc	r25, r25
   113a0:	82 0f       	add	r24, r18
   113a2:	93 1f       	adc	r25, r19
   113a4:	88 0f       	add	r24, r24
   113a6:	99 1f       	adc	r25, r25
   113a8:	88 0f       	add	r24, r24
   113aa:	99 1f       	adc	r25, r25
   113ac:	fc 01       	movw	r30, r24
   113ae:	ee 55       	subi	r30, 0x5E	; 94
   113b0:	f8 4f       	sbci	r31, 0xF8	; 248
   113b2:	20 81       	ld	r18, Z
   113b4:	31 81       	ldd	r19, Z+1	; 0x01
   113b6:	8a 81       	ldd	r24, Y+2	; 0x02
   113b8:	9b 81       	ldd	r25, Y+3	; 0x03
   113ba:	28 17       	cp	r18, r24
   113bc:	39 07       	cpc	r19, r25
   113be:	08 f1       	brcs	.+66     	; 0x11402 <deleteThreadRegistrationInReceiverHandles+0xe0>
       receivehandles[ i ].handlevalid = 0;
   113c0:	89 81       	ldd	r24, Y+1	; 0x01
   113c2:	28 2f       	mov	r18, r24
   113c4:	33 27       	eor	r19, r19
   113c6:	c9 01       	movw	r24, r18
   113c8:	88 0f       	add	r24, r24
   113ca:	99 1f       	adc	r25, r25
   113cc:	82 0f       	add	r24, r18
   113ce:	93 1f       	adc	r25, r19
   113d0:	88 0f       	add	r24, r24
   113d2:	99 1f       	adc	r25, r25
   113d4:	88 0f       	add	r24, r24
   113d6:	99 1f       	adc	r25, r25
   113d8:	fc 01       	movw	r30, r24
   113da:	e8 55       	subi	r30, 0x58	; 88
   113dc:	f8 4f       	sbci	r31, 0xF8	; 248
   113de:	10 82       	st	Z, r1
       receivehandles[ i ].port = 0;            
   113e0:	89 81       	ldd	r24, Y+1	; 0x01
   113e2:	28 2f       	mov	r18, r24
   113e4:	33 27       	eor	r19, r19
   113e6:	c9 01       	movw	r24, r18
   113e8:	88 0f       	add	r24, r24
   113ea:	99 1f       	adc	r25, r25
   113ec:	82 0f       	add	r24, r18
   113ee:	93 1f       	adc	r25, r19
   113f0:	88 0f       	add	r24, r24
   113f2:	99 1f       	adc	r25, r25
   113f4:	88 0f       	add	r24, r24
   113f6:	99 1f       	adc	r25, r25
   113f8:	fc 01       	movw	r30, r24
   113fa:	e1 56       	subi	r30, 0x61	; 97
   113fc:	f8 4f       	sbci	r31, 0xF8	; 248
   113fe:	11 82       	std	Z+1, r1	; 0x01
   11400:	10 82       	st	Z, r1
   11402:	89 81       	ldd	r24, Y+1	; 0x01
   11404:	8f 5f       	subi	r24, 0xFF	; 255
   11406:	89 83       	std	Y+1, r24	; 0x01
   11408:	89 81       	ldd	r24, Y+1	; 0x01
   1140a:	85 30       	cpi	r24, 0x05	; 5
   1140c:	08 f4       	brcc	.+2      	; 0x11410 <deleteThreadRegistrationInReceiverHandles+0xee>
   1140e:	99 cf       	rjmp	.-206    	; 0x11342 <deleteThreadRegistrationInReceiverHandles+0x20>
   11410:	25 96       	adiw	r28, 0x05	; 5
   11412:	0f b6       	in	r0, 0x3f	; 63
   11414:	f8 94       	cli
   11416:	de bf       	out	0x3e, r29	; 62
   11418:	0f be       	out	0x3f, r0	; 63
   1141a:	cd bf       	out	0x3d, r28	; 61
   1141c:	df 91       	pop	r29
   1141e:	cf 91       	pop	r28
   11420:	08 95       	ret

00011422 <getpagesize>:
#include "../platform/micaz/atmelflash.h"

//Get the size of each page
uint16_t getpagesize()
{
   11422:	cf 93       	push	r28
   11424:	df 93       	push	r29
   11426:	cd b7       	in	r28, 0x3d	; 61
   11428:	de b7       	in	r29, 0x3e	; 62
   return atmel_flash_pagesize(); 	
   1142a:	0e 94 1b 4b 	call	0x9636	; 0x9636 <atmel_flash_pagesize>
   1142e:	df 91       	pop	r29
   11430:	cf 91       	pop	r28
   11432:	08 95       	ret

00011434 <getpagenumber>:
}

//Get the total number of pages
uint16_t getpagenumber()
{
   11434:	cf 93       	push	r28
   11436:	df 93       	push	r29
   11438:	cd b7       	in	r28, 0x3d	; 61
   1143a:	de b7       	in	r29, 0x3e	; 62
   return atmel_flash_pagenumber(); 	
   1143c:	0e 94 24 4b 	call	0x9648	; 0x9648 <atmel_flash_pagenumber>
   11440:	df 91       	pop	r29
   11442:	cf 91       	pop	r28
   11444:	08 95       	ret

00011446 <pagestorageinit>:
}

//Init the page storage
void pagestorageinit()
{
   11446:	cf 93       	push	r28
   11448:	df 93       	push	r29
   1144a:	cd b7       	in	r28, 0x3d	; 61
   1144c:	de b7       	in	r29, 0x3e	; 62
   atmel_flash_init(); 	
   1144e:	0e 94 a7 41 	call	0x834e	; 0x834e <atmel_flash_init>
   11452:	df 91       	pop	r29
   11454:	cf 91       	pop	r28
   11456:	08 95       	ret

00011458 <readpagestorage>:
}

//Read from a page. Intra-page only.
void readpagestorage(int pagenum, uint8_t offset, void *buffer, int NumOfBytes)
{
   11458:	cf 93       	push	r28
   1145a:	df 93       	push	r29
   1145c:	cd b7       	in	r28, 0x3d	; 61
   1145e:	de b7       	in	r29, 0x3e	; 62
   11460:	27 97       	sbiw	r28, 0x07	; 7
   11462:	0f b6       	in	r0, 0x3f	; 63
   11464:	f8 94       	cli
   11466:	de bf       	out	0x3e, r29	; 62
   11468:	0f be       	out	0x3f, r0	; 63
   1146a:	cd bf       	out	0x3d, r28	; 61
   1146c:	9a 83       	std	Y+2, r25	; 0x02
   1146e:	89 83       	std	Y+1, r24	; 0x01
   11470:	6b 83       	std	Y+3, r22	; 0x03
   11472:	5d 83       	std	Y+5, r21	; 0x05
   11474:	4c 83       	std	Y+4, r20	; 0x04
   11476:	3f 83       	std	Y+7, r19	; 0x07
   11478:	2e 83       	std	Y+6, r18	; 0x06
   readFlash(pagenum, offset, buffer, NumOfBytes); 	
   1147a:	8e 81       	ldd	r24, Y+6	; 0x06
   1147c:	9f 81       	ldd	r25, Y+7	; 0x07
   1147e:	4c 81       	ldd	r20, Y+4	; 0x04
   11480:	5d 81       	ldd	r21, Y+5	; 0x05
   11482:	e9 81       	ldd	r30, Y+1	; 0x01
   11484:	fa 81       	ldd	r31, Y+2	; 0x02
   11486:	9c 01       	movw	r18, r24
   11488:	6b 81       	ldd	r22, Y+3	; 0x03
   1148a:	cf 01       	movw	r24, r30
   1148c:	0e 94 5f 42 	call	0x84be	; 0x84be <readFlash>
   11490:	27 96       	adiw	r28, 0x07	; 7
   11492:	0f b6       	in	r0, 0x3f	; 63
   11494:	f8 94       	cli
   11496:	de bf       	out	0x3e, r29	; 62
   11498:	0f be       	out	0x3f, r0	; 63
   1149a:	cd bf       	out	0x3d, r28	; 61
   1149c:	df 91       	pop	r29
   1149e:	cf 91       	pop	r28
   114a0:	08 95       	ret

000114a2 <writepagestorage>:
}

//Write to a page.  Intra-page only. 
void writepagestorage(int pagenum, uint8_t offset, void *buffer,  int NumOfBytes)
{
   114a2:	cf 93       	push	r28
   114a4:	df 93       	push	r29
   114a6:	cd b7       	in	r28, 0x3d	; 61
   114a8:	de b7       	in	r29, 0x3e	; 62
   114aa:	27 97       	sbiw	r28, 0x07	; 7
   114ac:	0f b6       	in	r0, 0x3f	; 63
   114ae:	f8 94       	cli
   114b0:	de bf       	out	0x3e, r29	; 62
   114b2:	0f be       	out	0x3f, r0	; 63
   114b4:	cd bf       	out	0x3d, r28	; 61
   114b6:	9a 83       	std	Y+2, r25	; 0x02
   114b8:	89 83       	std	Y+1, r24	; 0x01
   114ba:	6b 83       	std	Y+3, r22	; 0x03
   114bc:	5d 83       	std	Y+5, r21	; 0x05
   114be:	4c 83       	std	Y+4, r20	; 0x04
   114c0:	3f 83       	std	Y+7, r19	; 0x07
   114c2:	2e 83       	std	Y+6, r18	; 0x06
   writeFlash(pagenum, offset, buffer, NumOfBytes); 	
   114c4:	8e 81       	ldd	r24, Y+6	; 0x06
   114c6:	9f 81       	ldd	r25, Y+7	; 0x07
   114c8:	4c 81       	ldd	r20, Y+4	; 0x04
   114ca:	5d 81       	ldd	r21, Y+5	; 0x05
   114cc:	e9 81       	ldd	r30, Y+1	; 0x01
   114ce:	fa 81       	ldd	r31, Y+2	; 0x02
   114d0:	9c 01       	movw	r18, r24
   114d2:	6b 81       	ldd	r22, Y+3	; 0x03
   114d4:	cf 01       	movw	r24, r30
   114d6:	0e 94 07 43 	call	0x860e	; 0x860e <writeFlash>
   114da:	27 96       	adiw	r28, 0x07	; 7
   114dc:	0f b6       	in	r0, 0x3f	; 63
   114de:	f8 94       	cli
   114e0:	de bf       	out	0x3e, r29	; 62
   114e2:	0f be       	out	0x3f, r0	; 63
   114e4:	cd bf       	out	0x3d, r28	; 61
   114e6:	df 91       	pop	r29
   114e8:	cf 91       	pop	r28
   114ea:	08 95       	ret

000114ec <initScheduling>:
volatile uint8_t LITE_sched_num;



void initScheduling( void ) {
   114ec:	cf 93       	push	r28
   114ee:	df 93       	push	r29
   114f0:	cd b7       	in	r28, 0x3d	; 61
   114f2:	de b7       	in	r29, 0x3e	; 62
   114f4:	22 97       	sbiw	r28, 0x02	; 2
   114f6:	0f b6       	in	r0, 0x3f	; 63
   114f8:	f8 94       	cli
   114fa:	de bf       	out	0x3e, r29	; 62
   114fc:	0f be       	out	0x3f, r0	; 63
   114fe:	cd bf       	out	0x3d, r28	; 61
   int i;
   LITE_sched_num = 0;
   11500:	10 92 17 08 	sts	0x0817, r1
   for ( i = 0; i < LITE_MAX_TASKS; i ++ ) {
   11504:	1a 82       	std	Y+2, r1	; 0x02
   11506:	19 82       	std	Y+1, r1	; 0x01
   11508:	11 c0       	rjmp	.+34     	; 0x1152c <initScheduling+0x40>
      LITE_queue[ i ].tp = ( void* )0;
   1150a:	29 81       	ldd	r18, Y+1	; 0x01
   1150c:	3a 81       	ldd	r19, Y+2	; 0x02
   1150e:	c9 01       	movw	r24, r18
   11510:	88 0f       	add	r24, r24
   11512:	99 1f       	adc	r25, r25
   11514:	82 0f       	add	r24, r18
   11516:	93 1f       	adc	r25, r19
   11518:	fc 01       	movw	r30, r24
   1151a:	e9 51       	subi	r30, 0x19	; 25
   1151c:	f8 4f       	sbci	r31, 0xF8	; 248
   1151e:	11 82       	std	Z+1, r1	; 0x01
   11520:	10 82       	st	Z, r1
   11522:	89 81       	ldd	r24, Y+1	; 0x01
   11524:	9a 81       	ldd	r25, Y+2	; 0x02
   11526:	01 96       	adiw	r24, 0x01	; 1
   11528:	9a 83       	std	Y+2, r25	; 0x02
   1152a:	89 83       	std	Y+1, r24	; 0x01
   1152c:	89 81       	ldd	r24, Y+1	; 0x01
   1152e:	9a 81       	ldd	r25, Y+2	; 0x02
   11530:	80 31       	cpi	r24, 0x10	; 16
   11532:	91 05       	cpc	r25, r1
   11534:	54 f3       	brlt	.-44     	; 0x1150a <initScheduling+0x1e>
   } 

   cpucounter = 0; 
   11536:	10 92 db 07 	sts	0x07DB, r1
   1153a:	10 92 dc 07 	sts	0x07DC, r1
   1153e:	10 92 dd 07 	sts	0x07DD, r1
   11542:	10 92 de 07 	sts	0x07DE, r1
   cpucounter2 = 0;
   11546:	10 92 e3 07 	sts	0x07E3, r1
   1154a:	10 92 e4 07 	sts	0x07E4, r1
   1154e:	10 92 e5 07 	sts	0x07E5, r1
   11552:	10 92 e6 07 	sts	0x07E6, r1
   cpucounter3 = 0; 
   11556:	10 92 df 07 	sts	0x07DF, r1
   1155a:	10 92 e0 07 	sts	0x07E0, r1
   1155e:	10 92 e1 07 	sts	0x07E1, r1
   11562:	10 92 e2 07 	sts	0x07E2, r1
   11566:	22 96       	adiw	r28, 0x02	; 2
   11568:	0f b6       	in	r0, 0x3f	; 63
   1156a:	f8 94       	cli
   1156c:	de bf       	out	0x3e, r29	; 62
   1156e:	0f be       	out	0x3f, r0	; 63
   11570:	cd bf       	out	0x3d, r28	; 61
   11572:	df 91       	pop	r29
   11574:	cf 91       	pop	r28
   11576:	08 95       	ret

00011578 <postTask>:
}

//-------------------------------------------------------------------------
bool postTask( void( *tp )( void ), uint8_t priority ) {
   11578:	cf 93       	push	r28
   1157a:	df 93       	push	r29
   1157c:	cd b7       	in	r28, 0x3d	; 61
   1157e:	de b7       	in	r29, 0x3e	; 62
   11580:	27 97       	sbiw	r28, 0x07	; 7
   11582:	0f b6       	in	r0, 0x3f	; 63
   11584:	f8 94       	cli
   11586:	de bf       	out	0x3e, r29	; 62
   11588:	0f be       	out	0x3f, r0	; 63
   1158a:	cd bf       	out	0x3d, r28	; 61
   1158c:	9c 83       	std	Y+4, r25	; 0x04
   1158e:	8b 83       	std	Y+3, r24	; 0x03
   11590:	6d 83       	std	Y+5, r22	; 0x05

   _atomic_t fInterruptFlags;

   uint8_t tmp;

   fInterruptFlags = _atomic_start();
   11592:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   11596:	8a 83       	std	Y+2, r24	; 0x02
   if ( LITE_sched_num == LITE_MAX_TASKS )
   11598:	80 91 17 08 	lds	r24, 0x0817
   1159c:	80 31       	cpi	r24, 0x10	; 16
   1159e:	31 f4       	brne	.+12     	; 0x115ac <postTask+0x34>
    {
      _atomic_end( fInterruptFlags );
   115a0:	8a 81       	ldd	r24, Y+2	; 0x02
   115a2:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      return FALSE;
   115a6:	1f 82       	std	Y+7, r1	; 0x07
   115a8:	1e 82       	std	Y+6, r1	; 0x06
   115aa:	45 c0       	rjmp	.+138    	; 0x11636 <postTask+0xbe>
   }
   for ( tmp = 0; tmp < LITE_MAX_TASKS; tmp ++ ) {
   115ac:	19 82       	std	Y+1, r1	; 0x01
   115ae:	3b c0       	rjmp	.+118    	; 0x11626 <postTask+0xae>
      if ( LITE_queue[ tmp ].tp == NULL ) {
   115b0:	89 81       	ldd	r24, Y+1	; 0x01
   115b2:	28 2f       	mov	r18, r24
   115b4:	33 27       	eor	r19, r19
   115b6:	c9 01       	movw	r24, r18
   115b8:	88 0f       	add	r24, r24
   115ba:	99 1f       	adc	r25, r25
   115bc:	82 0f       	add	r24, r18
   115be:	93 1f       	adc	r25, r19
   115c0:	fc 01       	movw	r30, r24
   115c2:	e9 51       	subi	r30, 0x19	; 25
   115c4:	f8 4f       	sbci	r31, 0xF8	; 248
   115c6:	80 81       	ld	r24, Z
   115c8:	91 81       	ldd	r25, Z+1	; 0x01
   115ca:	00 97       	sbiw	r24, 0x00	; 0
   115cc:	49 f5       	brne	.+82     	; 0x11620 <postTask+0xa8>
         LITE_queue[ tmp ].tp = tp;
   115ce:	89 81       	ldd	r24, Y+1	; 0x01
   115d0:	28 2f       	mov	r18, r24
   115d2:	33 27       	eor	r19, r19
   115d4:	c9 01       	movw	r24, r18
   115d6:	88 0f       	add	r24, r24
   115d8:	99 1f       	adc	r25, r25
   115da:	82 0f       	add	r24, r18
   115dc:	93 1f       	adc	r25, r19
   115de:	fc 01       	movw	r30, r24
   115e0:	e9 51       	subi	r30, 0x19	; 25
   115e2:	f8 4f       	sbci	r31, 0xF8	; 248
   115e4:	8b 81       	ldd	r24, Y+3	; 0x03
   115e6:	9c 81       	ldd	r25, Y+4	; 0x04
   115e8:	91 83       	std	Z+1, r25	; 0x01
   115ea:	80 83       	st	Z, r24
         LITE_queue[ tmp ].priority = priority;
   115ec:	89 81       	ldd	r24, Y+1	; 0x01
   115ee:	28 2f       	mov	r18, r24
   115f0:	33 27       	eor	r19, r19
   115f2:	c9 01       	movw	r24, r18
   115f4:	88 0f       	add	r24, r24
   115f6:	99 1f       	adc	r25, r25
   115f8:	82 0f       	add	r24, r18
   115fa:	93 1f       	adc	r25, r19
   115fc:	fc 01       	movw	r30, r24
   115fe:	e7 51       	subi	r30, 0x17	; 23
   11600:	f8 4f       	sbci	r31, 0xF8	; 248
   11602:	8d 81       	ldd	r24, Y+5	; 0x05
   11604:	80 83       	st	Z, r24
         LITE_sched_num ++;
   11606:	80 91 17 08 	lds	r24, 0x0817
   1160a:	8f 5f       	subi	r24, 0xFF	; 255
   1160c:	80 93 17 08 	sts	0x0817, r24
         _atomic_end( fInterruptFlags );
   11610:	8a 81       	ldd	r24, Y+2	; 0x02
   11612:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
         return TRUE;
   11616:	81 e0       	ldi	r24, 0x01	; 1
   11618:	90 e0       	ldi	r25, 0x00	; 0
   1161a:	9f 83       	std	Y+7, r25	; 0x07
   1161c:	8e 83       	std	Y+6, r24	; 0x06
   1161e:	0b c0       	rjmp	.+22     	; 0x11636 <postTask+0xbe>
   11620:	89 81       	ldd	r24, Y+1	; 0x01
   11622:	8f 5f       	subi	r24, 0xFF	; 255
   11624:	89 83       	std	Y+1, r24	; 0x01
   11626:	89 81       	ldd	r24, Y+1	; 0x01
   11628:	80 31       	cpi	r24, 0x10	; 16
   1162a:	10 f2       	brcs	.-124    	; 0x115b0 <postTask+0x38>
      }
   }
   _atomic_end( fInterruptFlags );
   1162c:	8a 81       	ldd	r24, Y+2	; 0x02
   1162e:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   return FALSE;
   11632:	1f 82       	std	Y+7, r1	; 0x07
   11634:	1e 82       	std	Y+6, r1	; 0x06
   11636:	8e 81       	ldd	r24, Y+6	; 0x06
   11638:	9f 81       	ldd	r25, Y+7	; 0x07
   1163a:	27 96       	adiw	r28, 0x07	; 7
   1163c:	0f b6       	in	r0, 0x3f	; 63
   1163e:	f8 94       	cli
   11640:	de bf       	out	0x3e, r29	; 62
   11642:	0f be       	out	0x3f, r0	; 63
   11644:	cd bf       	out	0x3d, r28	; 61
   11646:	df 91       	pop	r29
   11648:	cf 91       	pop	r28
   1164a:	08 95       	ret

0001164c <runNextTask>:
}


//-------------------------------------------------------------------------
bool runNextTask() {
   1164c:	cf 93       	push	r28
   1164e:	df 93       	push	r29
   11650:	cd b7       	in	r28, 0x3d	; 61
   11652:	de b7       	in	r29, 0x3e	; 62
   11654:	28 97       	sbiw	r28, 0x08	; 8
   11656:	0f b6       	in	r0, 0x3f	; 63
   11658:	f8 94       	cli
   1165a:	de bf       	out	0x3e, r29	; 62
   1165c:	0f be       	out	0x3f, r0	; 63
   1165e:	cd bf       	out	0x3d, r28	; 61
   _atomic_t fInterruptFlags;
   uint8_t currentpriority;
   uint8_t tmp;
   uint8_t reserved;
   
   void( *func )( void );
   reserved = 0;
   11660:	1b 82       	std	Y+3, r1	; 0x03
   fInterruptFlags = _atomic_start();
   11662:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   11666:	8e 83       	std	Y+6, r24	; 0x06
   currentpriority = 0;
   11668:	1d 82       	std	Y+5, r1	; 0x05
   func = NULL;
   1166a:	1a 82       	std	Y+2, r1	; 0x02
   1166c:	19 82       	std	Y+1, r1	; 0x01
   
   if ( LITE_sched_num == 0 )
   1166e:	80 91 17 08 	lds	r24, 0x0817
   11672:	88 23       	and	r24, r24
   11674:	d9 f4       	brne	.+54     	; 0x116ac <runNextTask+0x60>
    {
	  cpucounter++; 
   11676:	80 91 db 07 	lds	r24, 0x07DB
   1167a:	90 91 dc 07 	lds	r25, 0x07DC
   1167e:	a0 91 dd 07 	lds	r26, 0x07DD
   11682:	b0 91 de 07 	lds	r27, 0x07DE
   11686:	01 96       	adiw	r24, 0x01	; 1
   11688:	a1 1d       	adc	r26, r1
   1168a:	b1 1d       	adc	r27, r1
   1168c:	80 93 db 07 	sts	0x07DB, r24
   11690:	90 93 dc 07 	sts	0x07DC, r25
   11694:	a0 93 dd 07 	sts	0x07DD, r26
   11698:	b0 93 de 07 	sts	0x07DE, r27
      _atomic_end( fInterruptFlags );
   1169c:	8e 81       	ldd	r24, Y+6	; 0x06
   1169e:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      _enable_interrupt(); 
   116a2:	0e 94 da 86 	call	0x10db4	; 0x10db4 <_enable_interrupt>
      //nodeSleep(); 
      return FALSE;
   116a6:	18 86       	std	Y+8, r1	; 0x08
   116a8:	1f 82       	std	Y+7, r1	; 0x07
   116aa:	7c c0       	rjmp	.+248    	; 0x117a4 <runNextTask+0x158>
   }
   cpucounter2++; 
   116ac:	80 91 e3 07 	lds	r24, 0x07E3
   116b0:	90 91 e4 07 	lds	r25, 0x07E4
   116b4:	a0 91 e5 07 	lds	r26, 0x07E5
   116b8:	b0 91 e6 07 	lds	r27, 0x07E6
   116bc:	01 96       	adiw	r24, 0x01	; 1
   116be:	a1 1d       	adc	r26, r1
   116c0:	b1 1d       	adc	r27, r1
   116c2:	80 93 e3 07 	sts	0x07E3, r24
   116c6:	90 93 e4 07 	sts	0x07E4, r25
   116ca:	a0 93 e5 07 	sts	0x07E5, r26
   116ce:	b0 93 e6 07 	sts	0x07E6, r27
   for ( tmp = 0; tmp < LITE_MAX_TASKS; tmp ++ ) {
   116d2:	1c 82       	std	Y+4, r1	; 0x04
   116d4:	3f c0       	rjmp	.+126    	; 0x11754 <runNextTask+0x108>
      if (( LITE_queue[ tmp ].tp != NULL ) && ( LITE_queue[ tmp ].priority > currentpriority )) {
   116d6:	8c 81       	ldd	r24, Y+4	; 0x04
   116d8:	28 2f       	mov	r18, r24
   116da:	33 27       	eor	r19, r19
   116dc:	c9 01       	movw	r24, r18
   116de:	88 0f       	add	r24, r24
   116e0:	99 1f       	adc	r25, r25
   116e2:	82 0f       	add	r24, r18
   116e4:	93 1f       	adc	r25, r19
   116e6:	fc 01       	movw	r30, r24
   116e8:	e9 51       	subi	r30, 0x19	; 25
   116ea:	f8 4f       	sbci	r31, 0xF8	; 248
   116ec:	80 81       	ld	r24, Z
   116ee:	91 81       	ldd	r25, Z+1	; 0x01
   116f0:	00 97       	sbiw	r24, 0x00	; 0
   116f2:	69 f1       	breq	.+90     	; 0x1174e <runNextTask+0x102>
   116f4:	8c 81       	ldd	r24, Y+4	; 0x04
   116f6:	28 2f       	mov	r18, r24
   116f8:	33 27       	eor	r19, r19
   116fa:	c9 01       	movw	r24, r18
   116fc:	88 0f       	add	r24, r24
   116fe:	99 1f       	adc	r25, r25
   11700:	82 0f       	add	r24, r18
   11702:	93 1f       	adc	r25, r19
   11704:	fc 01       	movw	r30, r24
   11706:	e7 51       	subi	r30, 0x17	; 23
   11708:	f8 4f       	sbci	r31, 0xF8	; 248
   1170a:	90 81       	ld	r25, Z
   1170c:	8d 81       	ldd	r24, Y+5	; 0x05
   1170e:	89 17       	cp	r24, r25
   11710:	f0 f4       	brcc	.+60     	; 0x1174e <runNextTask+0x102>
         func = LITE_queue[ tmp ].tp;
   11712:	8c 81       	ldd	r24, Y+4	; 0x04
   11714:	28 2f       	mov	r18, r24
   11716:	33 27       	eor	r19, r19
   11718:	c9 01       	movw	r24, r18
   1171a:	88 0f       	add	r24, r24
   1171c:	99 1f       	adc	r25, r25
   1171e:	82 0f       	add	r24, r18
   11720:	93 1f       	adc	r25, r19
   11722:	fc 01       	movw	r30, r24
   11724:	e9 51       	subi	r30, 0x19	; 25
   11726:	f8 4f       	sbci	r31, 0xF8	; 248
   11728:	80 81       	ld	r24, Z
   1172a:	91 81       	ldd	r25, Z+1	; 0x01
   1172c:	9a 83       	std	Y+2, r25	; 0x02
   1172e:	89 83       	std	Y+1, r24	; 0x01
         reserved = tmp;
   11730:	8c 81       	ldd	r24, Y+4	; 0x04
   11732:	8b 83       	std	Y+3, r24	; 0x03
         currentpriority = LITE_queue[ tmp ].priority;
   11734:	8c 81       	ldd	r24, Y+4	; 0x04
   11736:	28 2f       	mov	r18, r24
   11738:	33 27       	eor	r19, r19
   1173a:	c9 01       	movw	r24, r18
   1173c:	88 0f       	add	r24, r24
   1173e:	99 1f       	adc	r25, r25
   11740:	82 0f       	add	r24, r18
   11742:	93 1f       	adc	r25, r19
   11744:	fc 01       	movw	r30, r24
   11746:	e7 51       	subi	r30, 0x17	; 23
   11748:	f8 4f       	sbci	r31, 0xF8	; 248
   1174a:	80 81       	ld	r24, Z
   1174c:	8d 83       	std	Y+5, r24	; 0x05
   1174e:	8c 81       	ldd	r24, Y+4	; 0x04
   11750:	8f 5f       	subi	r24, 0xFF	; 255
   11752:	8c 83       	std	Y+4, r24	; 0x04
   11754:	8c 81       	ldd	r24, Y+4	; 0x04
   11756:	80 31       	cpi	r24, 0x10	; 16
   11758:	08 f4       	brcc	.+2      	; 0x1175c <runNextTask+0x110>
   1175a:	bd cf       	rjmp	.-134    	; 0x116d6 <runNextTask+0x8a>
      }
   }
   if ( func != NULL ) {
   1175c:	89 81       	ldd	r24, Y+1	; 0x01
   1175e:	9a 81       	ldd	r25, Y+2	; 0x02
   11760:	00 97       	sbiw	r24, 0x00	; 0
   11762:	91 f0       	breq	.+36     	; 0x11788 <runNextTask+0x13c>
      LITE_sched_num --;
   11764:	80 91 17 08 	lds	r24, 0x0817
   11768:	81 50       	subi	r24, 0x01	; 1
   1176a:	80 93 17 08 	sts	0x0817, r24
      LITE_queue[ reserved ].tp = NULL;
   1176e:	8b 81       	ldd	r24, Y+3	; 0x03
   11770:	28 2f       	mov	r18, r24
   11772:	33 27       	eor	r19, r19
   11774:	c9 01       	movw	r24, r18
   11776:	88 0f       	add	r24, r24
   11778:	99 1f       	adc	r25, r25
   1177a:	82 0f       	add	r24, r18
   1177c:	93 1f       	adc	r25, r19
   1177e:	fc 01       	movw	r30, r24
   11780:	e9 51       	subi	r30, 0x19	; 25
   11782:	f8 4f       	sbci	r31, 0xF8	; 248
   11784:	11 82       	std	Z+1, r1	; 0x01
   11786:	10 82       	st	Z, r1
   }
   _atomic_end( fInterruptFlags );
   11788:	8e 81       	ldd	r24, Y+6	; 0x06
   1178a:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   if ( func != NULL ) {
   1178e:	89 81       	ldd	r24, Y+1	; 0x01
   11790:	9a 81       	ldd	r25, Y+2	; 0x02
   11792:	00 97       	sbiw	r24, 0x00	; 0
   11794:	19 f0       	breq	.+6      	; 0x1179c <runNextTask+0x150>
      func();
   11796:	e9 81       	ldd	r30, Y+1	; 0x01
   11798:	fa 81       	ldd	r31, Y+2	; 0x02
   1179a:	09 95       	icall
	 // cpucounter3++; 
   } 
   return TRUE;
   1179c:	81 e0       	ldi	r24, 0x01	; 1
   1179e:	90 e0       	ldi	r25, 0x00	; 0
   117a0:	98 87       	std	Y+8, r25	; 0x08
   117a2:	8f 83       	std	Y+7, r24	; 0x07
   117a4:	8f 81       	ldd	r24, Y+7	; 0x07
   117a6:	98 85       	ldd	r25, Y+8	; 0x08
   117a8:	28 96       	adiw	r28, 0x08	; 8
   117aa:	0f b6       	in	r0, 0x3f	; 63
   117ac:	f8 94       	cli
   117ae:	de bf       	out	0x3e, r29	; 62
   117b0:	0f be       	out	0x3f, r0	; 63
   117b2:	cd bf       	out	0x3d, r28	; 61
   117b4:	df 91       	pop	r29
   117b6:	cf 91       	pop	r28
   117b8:	08 95       	ret

000117ba <SocketInit>:


//Init function. Must be called by main()

int SocketInit() {
   117ba:	cf 93       	push	r28
   117bc:	df 93       	push	r29
   117be:	cd b7       	in	r28, 0x3d	; 61
   117c0:	de b7       	in	r29, 0x3e	; 62
   msend.lock = msend.waiting = msend.lockingthreadid = 0;
   117c2:	10 92 1d 08 	sts	0x081D, r1
   117c6:	80 91 1d 08 	lds	r24, 0x081D
   117ca:	80 93 1c 08 	sts	0x081C, r24
   117ce:	80 91 1c 08 	lds	r24, 0x081C
   117d2:	80 93 1b 08 	sts	0x081B, r24
   mserialsend.lock = mserialsend.waiting = mserialsend.lockingthreadid = 0;
   117d6:	10 92 94 08 	sts	0x0894, r1
   117da:	80 91 94 08 	lds	r24, 0x0894
   117de:	80 93 93 08 	sts	0x0893, r24
   117e2:	80 91 93 08 	lds	r24, 0x0893
   117e6:	80 93 92 08 	sts	0x0892, r24
   radio_mutex.lock = radio_mutex.waiting = radio_mutex.lockingthreadid = 0;
   117ea:	10 92 9e 08 	sts	0x089E, r1
   117ee:	80 91 9e 08 	lds	r24, 0x089E
   117f2:	80 93 9d 08 	sts	0x089D, r24
   117f6:	80 91 9d 08 	lds	r24, 0x089D
   117fa:	80 93 9c 08 	sts	0x089C, r24

   
   return 0;
   117fe:	80 e0       	ldi	r24, 0x00	; 0
   11800:	90 e0       	ldi	r25, 0x00	; 0
   11802:	df 91       	pop	r29
   11804:	cf 91       	pop	r28
   11806:	08 95       	ret

00011808 <send_task>:
}




//-------------------------------------------------------------------------
//If the destination is another node, send the packet through radio. 
//If the destination is the current node, then send the packet locally by calling Standard_Receive_Packet 

static void send_task() {
   11808:	cf 93       	push	r28
   1180a:	df 93       	push	r29
   1180c:	cd b7       	in	r28, 0x3d	; 61
   1180e:	de b7       	in	r29, 0x3e	; 62
   11810:	22 97       	sbiw	r28, 0x02	; 2
   11812:	0f b6       	in	r0, 0x3f	; 63
   11814:	f8 94       	cli
   11816:	de bf       	out	0x3e, r29	; 62
   11818:	0f be       	out	0x3f, r0	; 63
   1181a:	cd bf       	out	0x3d, r28	; 61
	
   struct msgData *dataPayloadPtr_currentMsg;
  
   dataPayloadPtr_currentMsg = ( struct msgData* )currentMsg.data;
   1181c:	88 e2       	ldi	r24, 0x28	; 40
   1181e:	98 e0       	ldi	r25, 0x08	; 8
   11820:	9a 83       	std	Y+2, r25	; 0x02
   11822:	89 83       	std	Y+1, r24	; 0x01
  
   if ( radioinfo.socket_msg_len == 0 ) {
   11824:	80 91 99 08 	lds	r24, 0x0899
   11828:	88 23       	and	r24, r24
   1182a:	41 f4       	brne	.+16     	; 0x1183c <send_task+0x34>
      radioinfo.socket_msg_len = mystrlen(( char* )radioinfo.socket_msg );
   1182c:	80 91 9a 08 	lds	r24, 0x089A
   11830:	90 91 9b 08 	lds	r25, 0x089B
   11834:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
   11838:	80 93 99 08 	sts	0x0899, r24
   } 
   
   mystrncpy(( char* )dataPayloadPtr_currentMsg, ( char* )radioinfo.socket_msg, radioinfo.socket_msg_len );
   1183c:	40 91 99 08 	lds	r20, 0x0899
   11840:	80 91 9a 08 	lds	r24, 0x089A
   11844:	90 91 9b 08 	lds	r25, 0x089B
   11848:	29 81       	ldd	r18, Y+1	; 0x01
   1184a:	3a 81       	ldd	r19, Y+2	; 0x02
   1184c:	bc 01       	movw	r22, r24
   1184e:	c9 01       	movw	r24, r18
   11850:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
   

  #if defined(PLATFORM_AVR_IRIS)
  {
  
      currentMsg.length = radioinfo.socket_msg_len;
      currentMsg.addr = radioinfo.socket_addr;
      currentMsg.port = radioinfo.socket_port;
	  Broadcast2SerialAlternative(&currentMsg); 

  
  
  
  
  }
  #elif defined(PLATFORM_AVR)

   if ( radioinfo.socket_addr != 0 ) {
   11854:	80 91 97 08 	lds	r24, 0x0897
   11858:	90 91 98 08 	lds	r25, 0x0898
   1185c:	00 97       	sbiw	r24, 0x00	; 0
   1185e:	89 f0       	breq	.+34     	; 0x11882 <send_task+0x7a>
      AMStandard_SendMsg_send( radioinfo.socket_port, radioinfo.socket_addr, radioinfo.socket_msg_len, &currentMsg );
   11860:	40 91 99 08 	lds	r20, 0x0899
   11864:	60 91 97 08 	lds	r22, 0x0897
   11868:	70 91 98 08 	lds	r23, 0x0898
   1186c:	e0 91 95 08 	lds	r30, 0x0895
   11870:	f0 91 96 08 	lds	r31, 0x0896
   11874:	8e e1       	ldi	r24, 0x1E	; 30
   11876:	98 e0       	ldi	r25, 0x08	; 8
   11878:	9c 01       	movw	r18, r24
   1187a:	cf 01       	movw	r24, r30
   1187c:	0e 94 c7 6c 	call	0xd98e	; 0xd98e <AMStandard_SendMsg_send>
   11880:	1e c0       	rjmp	.+60     	; 0x118be <send_task+0xb6>
   }
    
   else {
      currentMsg.length = radioinfo.socket_msg_len;
   11882:	80 91 99 08 	lds	r24, 0x0899
   11886:	80 93 1e 08 	sts	0x081E, r24
      currentMsg.addr = radioinfo.socket_addr;
   1188a:	80 91 97 08 	lds	r24, 0x0897
   1188e:	90 91 98 08 	lds	r25, 0x0898
   11892:	90 93 25 08 	sts	0x0825, r25
   11896:	80 93 24 08 	sts	0x0824, r24
      currentMsg.port = radioinfo.socket_port;
   1189a:	80 91 95 08 	lds	r24, 0x0895
   1189e:	90 91 96 08 	lds	r25, 0x0896
   118a2:	90 93 27 08 	sts	0x0827, r25
   118a6:	80 93 26 08 	sts	0x0826, r24
      Standard_Receive_Packet( radioinfo.socket_port, &currentMsg );
   118aa:	20 91 95 08 	lds	r18, 0x0895
   118ae:	30 91 96 08 	lds	r19, 0x0896
   118b2:	8e e1       	ldi	r24, 0x1E	; 30
   118b4:	98 e0       	ldi	r25, 0x08	; 8
   118b6:	bc 01       	movw	r22, r24
   118b8:	c9 01       	movw	r24, r18
   118ba:	0e 94 79 88 	call	0x110f2	; 0x110f2 <Standard_Receive_Packet>
   118be:	22 96       	adiw	r28, 0x02	; 2
   118c0:	0f b6       	in	r0, 0x3f	; 63
   118c2:	f8 94       	cli
   118c4:	de bf       	out	0x3e, r29	; 62
   118c6:	0f be       	out	0x3f, r0	; 63
   118c8:	cd bf       	out	0x3d, r28	; 61
   118ca:	df 91       	pop	r29
   118cc:	cf 91       	pop	r28
   118ce:	08 95       	ret

000118d0 <SocketRadioSend>:
   } 
  #endif
}




//-------------------------------------------------------------------------
void SocketRadioSend() {
   118d0:	cf 93       	push	r28
   118d2:	df 93       	push	r29
   118d4:	cd b7       	in	r28, 0x3d	; 61
   118d6:	de b7       	in	r29, 0x3e	; 62
   postTask( send_task, 9 );
   118d8:	84 e0       	ldi	r24, 0x04	; 4
   118da:	9c e8       	ldi	r25, 0x8C	; 140
   118dc:	69 e0       	ldi	r22, 0x09	; 9
   118de:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
   118e2:	df 91       	pop	r29
   118e4:	cf 91       	pop	r28
   118e6:	08 95       	ret

000118e8 <StandardSocketSend>:
   //After it is woken up, return
   return ;
}



//-------------------------------------------------------------------------
void StandardSocketSend( uint16_t port, uint16_t address, uint8_t msglength, uint8_t *msg ) {
   118e8:	cf 93       	push	r28
   118ea:	df 93       	push	r29
   118ec:	cd b7       	in	r28, 0x3d	; 61
   118ee:	de b7       	in	r29, 0x3e	; 62
   118f0:	27 97       	sbiw	r28, 0x07	; 7
   118f2:	0f b6       	in	r0, 0x3f	; 63
   118f4:	f8 94       	cli
   118f6:	de bf       	out	0x3e, r29	; 62
   118f8:	0f be       	out	0x3f, r0	; 63
   118fa:	cd bf       	out	0x3d, r28	; 61
   118fc:	9a 83       	std	Y+2, r25	; 0x02
   118fe:	89 83       	std	Y+1, r24	; 0x01
   11900:	7c 83       	std	Y+4, r23	; 0x04
   11902:	6b 83       	std	Y+3, r22	; 0x03
   11904:	4d 83       	std	Y+5, r20	; 0x05
   11906:	3f 83       	std	Y+7, r19	; 0x07
   11908:	2e 83       	std	Y+6, r18	; 0x06
	
   Socket_Mutex_lock( &radio_mutex );
   1190a:	8c e9       	ldi	r24, 0x9C	; 156
   1190c:	98 e0       	ldi	r25, 0x08	; 8
   1190e:	0e 94 e2 8c 	call	0x119c4	; 0x119c4 <Socket_Mutex_lock>
   radioinfo.socket_port = port;
   11912:	89 81       	ldd	r24, Y+1	; 0x01
   11914:	9a 81       	ldd	r25, Y+2	; 0x02
   11916:	90 93 96 08 	sts	0x0896, r25
   1191a:	80 93 95 08 	sts	0x0895, r24
   radioinfo.socket_addr = address;
   1191e:	8b 81       	ldd	r24, Y+3	; 0x03
   11920:	9c 81       	ldd	r25, Y+4	; 0x04
   11922:	90 93 98 08 	sts	0x0898, r25
   11926:	80 93 97 08 	sts	0x0897, r24
   radioinfo.socket_msg_len = msglength;
   1192a:	8d 81       	ldd	r24, Y+5	; 0x05
   1192c:	80 93 99 08 	sts	0x0899, r24
   radioinfo.socket_msg = msg;
   11930:	8e 81       	ldd	r24, Y+6	; 0x06
   11932:	9f 81       	ldd	r25, Y+7	; 0x07
   11934:	90 93 9b 08 	sts	0x089B, r25
   11938:	80 93 9a 08 	sts	0x089A, r24
   
   SocketRadioSend();
   1193c:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <SocketRadioSend>
   
   sleepThread( 9 );
   11940:	89 e0       	ldi	r24, 0x09	; 9
   11942:	90 e0       	ldi	r25, 0x00	; 0
   11944:	0e 94 f9 93 	call	0x127f2	; 0x127f2 <sleepThread>
   
   restoreRadioState(); 
   11948:	0e 94 46 6e 	call	0xdc8c	; 0xdc8c <restoreRadioState>
   
   Socket_Mutex_unlock( &radio_mutex );
   1194c:	8c e9       	ldi	r24, 0x9C	; 156
   1194e:	98 e0       	ldi	r25, 0x08	; 8
   11950:	0e 94 24 8d 	call	0x11a48	; 0x11a48 <Socket_Mutex_unlock>
   11954:	27 96       	adiw	r28, 0x07	; 7
   11956:	0f b6       	in	r0, 0x3f	; 63
   11958:	f8 94       	cli
   1195a:	de bf       	out	0x3e, r29	; 62
   1195c:	0f be       	out	0x3f, r0	; 63
   1195e:	cd bf       	out	0x3d, r28	; 61
   11960:	df 91       	pop	r29
   11962:	cf 91       	pop	r28
   11964:	08 95       	ret

00011966 <getRadioInfo>:
   return ;
}




//-------------------------------------------------------------------------
//Return the radio info address by putting it into the registers r20, r21

//void getRadioInfo()  __attribute__((naked));

void* getRadioInfo() {
   11966:	cf 93       	push	r28
   11968:	df 93       	push	r29
   1196a:	cd b7       	in	r28, 0x3d	; 61
   1196c:	de b7       	in	r29, 0x3e	; 62
   return  (void *)&radioinfo;
   1196e:	85 e9       	ldi	r24, 0x95	; 149
   11970:	98 e0       	ldi	r25, 0x08	; 8
   11972:	df 91       	pop	r29
   11974:	cf 91       	pop	r28
   11976:	08 95       	ret

00011978 <getSerialInfo>:
   //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
   // asm volatile("ret"::); 
}

//Return the serial info address. By populating this address and call socketserialsend, the data will be printed out. 

//void getRadioInfo()  __attribute__((naked));

void* getSerialInfo() {
   11978:	cf 93       	push	r28
   1197a:	df 93       	push	r29
   1197c:	cd b7       	in	r28, 0x3d	; 61
   1197e:	de b7       	in	r29, 0x3e	; 62
   return (void *)&serialinfo;
   11980:	88 e1       	ldi	r24, 0x18	; 24
   11982:	98 e0       	ldi	r25, 0x08	; 8
   11984:	df 91       	pop	r29
   11986:	cf 91       	pop	r28
   11988:	08 95       	ret

0001198a <serial_send_task>:
   //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
   // asm volatile("ret"::); 
}


//-------------------------------------------------------------------------
void serial_send_task() {
   1198a:	cf 93       	push	r28
   1198c:	df 93       	push	r29
   1198e:	cd b7       	in	r28, 0x3d	; 61
   11990:	de b7       	in	r29, 0x3e	; 62
   printfstrlen(( char* )serialinfo.socket_msg, serialinfo.socket_msg_len );
   11992:	80 91 18 08 	lds	r24, 0x0818
   11996:	20 91 19 08 	lds	r18, 0x0819
   1199a:	30 91 1a 08 	lds	r19, 0x081A
   1199e:	68 2f       	mov	r22, r24
   119a0:	c9 01       	movw	r24, r18
   119a2:	0e 94 79 8e 	call	0x11cf2	; 0x11cf2 <printfstrlen>
   119a6:	df 91       	pop	r29
   119a8:	cf 91       	pop	r28
   119aa:	08 95       	ret

000119ac <SocketSerialSend>:
}



//-------------------------------------------------------------------------
void SocketSerialSend() {
   119ac:	cf 93       	push	r28
   119ae:	df 93       	push	r29
   119b0:	cd b7       	in	r28, 0x3d	; 61
   119b2:	de b7       	in	r29, 0x3e	; 62
   postTask( serial_send_task, 9 );
   119b4:	85 ec       	ldi	r24, 0xC5	; 197
   119b6:	9c e8       	ldi	r25, 0x8C	; 140
   119b8:	69 e0       	ldi	r22, 0x09	; 9
   119ba:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
   119be:	df 91       	pop	r29
   119c0:	cf 91       	pop	r28
   119c2:	08 95       	ret

000119c4 <Socket_Mutex_lock>:
   //After it is woken up, return
   return ;
}




//-------------------------------------------------------------------------
void Socket_Mutex_lock( volatile mutex *m ) {
   119c4:	cf 93       	push	r28
   119c6:	df 93       	push	r29
   119c8:	cd b7       	in	r28, 0x3d	; 61
   119ca:	de b7       	in	r29, 0x3e	; 62
   119cc:	23 97       	sbiw	r28, 0x03	; 3
   119ce:	0f b6       	in	r0, 0x3f	; 63
   119d0:	f8 94       	cli
   119d2:	de bf       	out	0x3e, r29	; 62
   119d4:	0f be       	out	0x3f, r0	; 63
   119d6:	cd bf       	out	0x3d, r28	; 61
   119d8:	9b 83       	std	Y+3, r25	; 0x03
   119da:	8a 83       	std	Y+2, r24	; 0x02
   _atomic_t currentatomic;
   currentatomic = _atomic_start();
   119dc:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   119e0:	89 83       	std	Y+1, r24	; 0x01
   if ( m->lock ) {
   119e2:	ea 81       	ldd	r30, Y+2	; 0x02
   119e4:	fb 81       	ldd	r31, Y+3	; 0x03
   119e6:	80 81       	ld	r24, Z
   119e8:	88 23       	and	r24, r24
   119ea:	f1 f0       	breq	.+60     	; 0x11a28 <Socket_Mutex_lock+0x64>
      current_thread->state = STATE_BLOCKED;
   119ec:	e0 91 da 08 	lds	r30, 0x08DA
   119f0:	f0 91 db 08 	lds	r31, 0x08DB
   119f4:	83 e0       	ldi	r24, 0x03	; 3
   119f6:	82 83       	std	Z+2, r24	; 0x02
      current_thread->data.m = m;
   119f8:	e0 91 da 08 	lds	r30, 0x08DA
   119fc:	f0 91 db 08 	lds	r31, 0x08DB
   11a00:	8a 81       	ldd	r24, Y+2	; 0x02
   11a02:	9b 81       	ldd	r25, Y+3	; 0x03
   11a04:	94 8f       	std	Z+28, r25	; 0x1c
   11a06:	83 8f       	std	Z+27, r24	; 0x1b
      //Notify others we are waiting
      m->waiting ++;
   11a08:	ea 81       	ldd	r30, Y+2	; 0x02
   11a0a:	fb 81       	ldd	r31, Y+3	; 0x03
   11a0c:	81 81       	ldd	r24, Z+1	; 0x01
   11a0e:	8f 5f       	subi	r24, 0xFF	; 255
   11a10:	ea 81       	ldd	r30, Y+2	; 0x02
   11a12:	fb 81       	ldd	r31, Y+3	; 0x03
   11a14:	81 83       	std	Z+1, r24	; 0x01
      //Switch back to scheduler
      thread_yield();
   11a16:	0e 94 9e 93 	call	0x1273c	; 0x1273c <thread_yield>
      //Remove notification
      m->waiting --;
   11a1a:	ea 81       	ldd	r30, Y+2	; 0x02
   11a1c:	fb 81       	ldd	r31, Y+3	; 0x03
   11a1e:	81 81       	ldd	r24, Z+1	; 0x01
   11a20:	81 50       	subi	r24, 0x01	; 1
   11a22:	ea 81       	ldd	r30, Y+2	; 0x02
   11a24:	fb 81       	ldd	r31, Y+3	; 0x03
   11a26:	81 83       	std	Z+1, r24	; 0x01
   }
   m->lock = 1;
   11a28:	ea 81       	ldd	r30, Y+2	; 0x02
   11a2a:	fb 81       	ldd	r31, Y+3	; 0x03
   11a2c:	81 e0       	ldi	r24, 0x01	; 1
   11a2e:	80 83       	st	Z, r24
   _atomic_end( currentatomic );
   11a30:	89 81       	ldd	r24, Y+1	; 0x01
   11a32:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   11a36:	23 96       	adiw	r28, 0x03	; 3
   11a38:	0f b6       	in	r0, 0x3f	; 63
   11a3a:	f8 94       	cli
   11a3c:	de bf       	out	0x3e, r29	; 62
   11a3e:	0f be       	out	0x3f, r0	; 63
   11a40:	cd bf       	out	0x3d, r28	; 61
   11a42:	df 91       	pop	r29
   11a44:	cf 91       	pop	r28
   11a46:	08 95       	ret

00011a48 <Socket_Mutex_unlock>:
}

//-------------------------------------------------------------------------
void Socket_Mutex_unlock( volatile mutex *m ) {
   11a48:	cf 93       	push	r28
   11a4a:	df 93       	push	r29
   11a4c:	cd b7       	in	r28, 0x3d	; 61
   11a4e:	de b7       	in	r29, 0x3e	; 62
   11a50:	27 97       	sbiw	r28, 0x07	; 7
   11a52:	0f b6       	in	r0, 0x3f	; 63
   11a54:	f8 94       	cli
   11a56:	de bf       	out	0x3e, r29	; 62
   11a58:	0f be       	out	0x3f, r0	; 63
   11a5a:	cd bf       	out	0x3d, r28	; 61
   11a5c:	9f 83       	std	Y+7, r25	; 0x07
   11a5e:	8e 83       	std	Y+6, r24	; 0x06
   _atomic_t currentatomic;
   currentatomic = _atomic_start();
   11a60:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   11a64:	8d 83       	std	Y+5, r24	; 0x05
   if ( m->lock ) {
   11a66:	ee 81       	ldd	r30, Y+6	; 0x06
   11a68:	ff 81       	ldd	r31, Y+7	; 0x07
   11a6a:	80 81       	ld	r24, Z
   11a6c:	88 23       	and	r24, r24
   11a6e:	09 f4       	brne	.+2      	; 0x11a72 <Socket_Mutex_unlock+0x2a>
   11a70:	5a c0       	rjmp	.+180    	; 0x11b26 <Socket_Mutex_unlock+0xde>
      if ( m->waiting ) {
   11a72:	ee 81       	ldd	r30, Y+6	; 0x06
   11a74:	ff 81       	ldd	r31, Y+7	; 0x07
   11a76:	81 81       	ldd	r24, Z+1	; 0x01
   11a78:	88 23       	and	r24, r24
   11a7a:	09 f4       	brne	.+2      	; 0x11a7e <Socket_Mutex_unlock+0x36>
   11a7c:	51 c0       	rjmp	.+162    	; 0x11b20 <Socket_Mutex_unlock+0xd8>
         int i;
         //Go wake up the next thread in line
         for ( i = 0; i <= LITE_MAX_THREADS; i ++ ) {
   11a7e:	1c 82       	std	Y+4, r1	; 0x04
   11a80:	1b 82       	std	Y+3, r1	; 0x03
   11a82:	47 c0       	rjmp	.+142    	; 0x11b12 <Socket_Mutex_unlock+0xca>
            //here I removed the threadidx
            int idx = i;
   11a84:	8b 81       	ldd	r24, Y+3	; 0x03
   11a86:	9c 81       	ldd	r25, Y+4	; 0x04
   11a88:	9a 83       	std	Y+2, r25	; 0x02
   11a8a:	89 83       	std	Y+1, r24	; 0x01
            //Look for the next thread waiting on this mutex
            if (( thread_table[ idx ].state == STATE_BLOCKED ) && ( thread_table[ idx ].data.m == m )) {
   11a8c:	29 81       	ldd	r18, Y+1	; 0x01
   11a8e:	3a 81       	ldd	r19, Y+2	; 0x02
   11a90:	85 e2       	ldi	r24, 0x25	; 37
   11a92:	90 e0       	ldi	r25, 0x00	; 0
   11a94:	ac 01       	movw	r20, r24
   11a96:	24 9f       	mul	r18, r20
   11a98:	c0 01       	movw	r24, r0
   11a9a:	25 9f       	mul	r18, r21
   11a9c:	90 0d       	add	r25, r0
   11a9e:	34 9f       	mul	r19, r20
   11aa0:	90 0d       	add	r25, r0
   11aa2:	11 24       	eor	r1, r1
   11aa4:	fc 01       	movw	r30, r24
   11aa6:	e2 52       	subi	r30, 0x22	; 34
   11aa8:	f7 4f       	sbci	r31, 0xF7	; 247
   11aaa:	80 81       	ld	r24, Z
   11aac:	83 30       	cpi	r24, 0x03	; 3
   11aae:	61 f5       	brne	.+88     	; 0x11b08 <Socket_Mutex_unlock+0xc0>
   11ab0:	29 81       	ldd	r18, Y+1	; 0x01
   11ab2:	3a 81       	ldd	r19, Y+2	; 0x02
   11ab4:	85 e2       	ldi	r24, 0x25	; 37
   11ab6:	90 e0       	ldi	r25, 0x00	; 0
   11ab8:	ac 01       	movw	r20, r24
   11aba:	24 9f       	mul	r18, r20
   11abc:	c0 01       	movw	r24, r0
   11abe:	25 9f       	mul	r18, r21
   11ac0:	90 0d       	add	r25, r0
   11ac2:	34 9f       	mul	r19, r20
   11ac4:	90 0d       	add	r25, r0
   11ac6:	11 24       	eor	r1, r1
   11ac8:	fc 01       	movw	r30, r24
   11aca:	e9 50       	subi	r30, 0x09	; 9
   11acc:	f7 4f       	sbci	r31, 0xF7	; 247
   11ace:	20 81       	ld	r18, Z
   11ad0:	31 81       	ldd	r19, Z+1	; 0x01
   11ad2:	8e 81       	ldd	r24, Y+6	; 0x06
   11ad4:	9f 81       	ldd	r25, Y+7	; 0x07
   11ad6:	28 17       	cp	r18, r24
   11ad8:	39 07       	cpc	r19, r25
   11ada:	b1 f4       	brne	.+44     	; 0x11b08 <Socket_Mutex_unlock+0xc0>
               //Mark that thread as active
               thread_table[ idx ].state = STATE_ACTIVE;
   11adc:	29 81       	ldd	r18, Y+1	; 0x01
   11ade:	3a 81       	ldd	r19, Y+2	; 0x02
   11ae0:	85 e2       	ldi	r24, 0x25	; 37
   11ae2:	90 e0       	ldi	r25, 0x00	; 0
   11ae4:	ac 01       	movw	r20, r24
   11ae6:	24 9f       	mul	r18, r20
   11ae8:	c0 01       	movw	r24, r0
   11aea:	25 9f       	mul	r18, r21
   11aec:	90 0d       	add	r25, r0
   11aee:	34 9f       	mul	r19, r20
   11af0:	90 0d       	add	r25, r0
   11af2:	11 24       	eor	r1, r1
   11af4:	fc 01       	movw	r30, r24
   11af6:	e2 52       	subi	r30, 0x22	; 34
   11af8:	f7 4f       	sbci	r31, 0xF7	; 247
   11afa:	82 e0       	ldi	r24, 0x02	; 2
   11afc:	80 83       	st	Z, r24
               postNewThreadTask(); 
   11afe:	0e 94 ad 97 	call	0x12f5a	; 0x12f5a <postNewThreadTask>
               //Let next task run (we are active, but will thread_yield anyways
               thread_yield();
   11b02:	0e 94 9e 93 	call	0x1273c	; 0x1273c <thread_yield>
               break;
   11b06:	0f c0       	rjmp	.+30     	; 0x11b26 <Socket_Mutex_unlock+0xde>
   11b08:	8b 81       	ldd	r24, Y+3	; 0x03
   11b0a:	9c 81       	ldd	r25, Y+4	; 0x04
   11b0c:	01 96       	adiw	r24, 0x01	; 1
   11b0e:	9c 83       	std	Y+4, r25	; 0x04
   11b10:	8b 83       	std	Y+3, r24	; 0x03
   11b12:	8b 81       	ldd	r24, Y+3	; 0x03
   11b14:	9c 81       	ldd	r25, Y+4	; 0x04
   11b16:	89 30       	cpi	r24, 0x09	; 9
   11b18:	91 05       	cpc	r25, r1
   11b1a:	0c f4       	brge	.+2      	; 0x11b1e <Socket_Mutex_unlock+0xd6>
   11b1c:	b3 cf       	rjmp	.-154    	; 0x11a84 <Socket_Mutex_unlock+0x3c>
   11b1e:	03 c0       	rjmp	.+6      	; 0x11b26 <Socket_Mutex_unlock+0xde>
            }
         }
      } else {
         m->lock = 0;
   11b20:	ee 81       	ldd	r30, Y+6	; 0x06
   11b22:	ff 81       	ldd	r31, Y+7	; 0x07
   11b24:	10 82       	st	Z, r1
      } //m-waiting
   } //m->lock
   _atomic_end( currentatomic );
   11b26:	8d 81       	ldd	r24, Y+5	; 0x05
   11b28:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   11b2c:	27 96       	adiw	r28, 0x07	; 7
   11b2e:	0f b6       	in	r0, 0x3f	; 63
   11b30:	f8 94       	cli
   11b32:	de bf       	out	0x3e, r29	; 62
   11b34:	0f be       	out	0x3f, r0	; 63
   11b36:	cd bf       	out	0x3d, r28	; 61
   11b38:	df 91       	pop	r29
   11b3a:	cf 91       	pop	r28
   11b3c:	08 95       	ret

00011b3e <Mutex_unlock>:
}


/*
* mutex_unlock
 * This routine unlocks a mutex, and will yield the current thread
 * if there are any other threads waiting on this mutex
 * This routine is safe to call inside or outside of a thread
 */
void Mutex_unlock( volatile mutex *m ) {
   11b3e:	cf 93       	push	r28
   11b40:	df 93       	push	r29
   11b42:	cd b7       	in	r28, 0x3d	; 61
   11b44:	de b7       	in	r29, 0x3e	; 62
   11b46:	27 97       	sbiw	r28, 0x07	; 7
   11b48:	0f b6       	in	r0, 0x3f	; 63
   11b4a:	f8 94       	cli
   11b4c:	de bf       	out	0x3e, r29	; 62
   11b4e:	0f be       	out	0x3f, r0	; 63
   11b50:	cd bf       	out	0x3d, r28	; 61
   11b52:	9f 83       	std	Y+7, r25	; 0x07
   11b54:	8e 83       	std	Y+6, r24	; 0x06
   _atomic_t currentatomic;
   currentatomic = _atomic_start();
   11b56:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   11b5a:	8d 83       	std	Y+5, r24	; 0x05
   if ( m->lock ) {
   11b5c:	ee 81       	ldd	r30, Y+6	; 0x06
   11b5e:	ff 81       	ldd	r31, Y+7	; 0x07
   11b60:	80 81       	ld	r24, Z
   11b62:	88 23       	and	r24, r24
   11b64:	09 f4       	brne	.+2      	; 0x11b68 <Mutex_unlock+0x2a>
   11b66:	5a c0       	rjmp	.+180    	; 0x11c1c <Mutex_unlock+0xde>
      if ( m->waiting ) {
   11b68:	ee 81       	ldd	r30, Y+6	; 0x06
   11b6a:	ff 81       	ldd	r31, Y+7	; 0x07
   11b6c:	81 81       	ldd	r24, Z+1	; 0x01
   11b6e:	88 23       	and	r24, r24
   11b70:	09 f4       	brne	.+2      	; 0x11b74 <Mutex_unlock+0x36>
   11b72:	51 c0       	rjmp	.+162    	; 0x11c16 <Mutex_unlock+0xd8>
         int i;
         //Go wake up the next thread in line
         for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
   11b74:	1c 82       	std	Y+4, r1	; 0x04
   11b76:	1b 82       	std	Y+3, r1	; 0x03
   11b78:	47 c0       	rjmp	.+142    	; 0x11c08 <Mutex_unlock+0xca>
            //here I removed the threadidx
            int idx = i;
   11b7a:	8b 81       	ldd	r24, Y+3	; 0x03
   11b7c:	9c 81       	ldd	r25, Y+4	; 0x04
   11b7e:	9a 83       	std	Y+2, r25	; 0x02
   11b80:	89 83       	std	Y+1, r24	; 0x01
            //Look for the next thread waiting on this mutex
            if (( thread_table[ idx ].state == STATE_BLOCKED ) && ( thread_table[ idx ].data.m == m )) {
   11b82:	29 81       	ldd	r18, Y+1	; 0x01
   11b84:	3a 81       	ldd	r19, Y+2	; 0x02
   11b86:	85 e2       	ldi	r24, 0x25	; 37
   11b88:	90 e0       	ldi	r25, 0x00	; 0
   11b8a:	ac 01       	movw	r20, r24
   11b8c:	24 9f       	mul	r18, r20
   11b8e:	c0 01       	movw	r24, r0
   11b90:	25 9f       	mul	r18, r21
   11b92:	90 0d       	add	r25, r0
   11b94:	34 9f       	mul	r19, r20
   11b96:	90 0d       	add	r25, r0
   11b98:	11 24       	eor	r1, r1
   11b9a:	fc 01       	movw	r30, r24
   11b9c:	e2 52       	subi	r30, 0x22	; 34
   11b9e:	f7 4f       	sbci	r31, 0xF7	; 247
   11ba0:	80 81       	ld	r24, Z
   11ba2:	83 30       	cpi	r24, 0x03	; 3
   11ba4:	61 f5       	brne	.+88     	; 0x11bfe <Mutex_unlock+0xc0>
   11ba6:	29 81       	ldd	r18, Y+1	; 0x01
   11ba8:	3a 81       	ldd	r19, Y+2	; 0x02
   11baa:	85 e2       	ldi	r24, 0x25	; 37
   11bac:	90 e0       	ldi	r25, 0x00	; 0
   11bae:	ac 01       	movw	r20, r24
   11bb0:	24 9f       	mul	r18, r20
   11bb2:	c0 01       	movw	r24, r0
   11bb4:	25 9f       	mul	r18, r21
   11bb6:	90 0d       	add	r25, r0
   11bb8:	34 9f       	mul	r19, r20
   11bba:	90 0d       	add	r25, r0
   11bbc:	11 24       	eor	r1, r1
   11bbe:	fc 01       	movw	r30, r24
   11bc0:	e9 50       	subi	r30, 0x09	; 9
   11bc2:	f7 4f       	sbci	r31, 0xF7	; 247
   11bc4:	20 81       	ld	r18, Z
   11bc6:	31 81       	ldd	r19, Z+1	; 0x01
   11bc8:	8e 81       	ldd	r24, Y+6	; 0x06
   11bca:	9f 81       	ldd	r25, Y+7	; 0x07
   11bcc:	28 17       	cp	r18, r24
   11bce:	39 07       	cpc	r19, r25
   11bd0:	b1 f4       	brne	.+44     	; 0x11bfe <Mutex_unlock+0xc0>
               //Mark that thread as active
               thread_table[ idx ].state = STATE_ACTIVE;
   11bd2:	29 81       	ldd	r18, Y+1	; 0x01
   11bd4:	3a 81       	ldd	r19, Y+2	; 0x02
   11bd6:	85 e2       	ldi	r24, 0x25	; 37
   11bd8:	90 e0       	ldi	r25, 0x00	; 0
   11bda:	ac 01       	movw	r20, r24
   11bdc:	24 9f       	mul	r18, r20
   11bde:	c0 01       	movw	r24, r0
   11be0:	25 9f       	mul	r18, r21
   11be2:	90 0d       	add	r25, r0
   11be4:	34 9f       	mul	r19, r20
   11be6:	90 0d       	add	r25, r0
   11be8:	11 24       	eor	r1, r1
   11bea:	fc 01       	movw	r30, r24
   11bec:	e2 52       	subi	r30, 0x22	; 34
   11bee:	f7 4f       	sbci	r31, 0xF7	; 247
   11bf0:	82 e0       	ldi	r24, 0x02	; 2
   11bf2:	80 83       	st	Z, r24
               postNewThreadTask();
   11bf4:	0e 94 ad 97 	call	0x12f5a	; 0x12f5a <postNewThreadTask>
               //Let next task run (we are active, but will yield anyways
               thread_yield();
   11bf8:	0e 94 9e 93 	call	0x1273c	; 0x1273c <thread_yield>
               break;
   11bfc:	0f c0       	rjmp	.+30     	; 0x11c1c <Mutex_unlock+0xde>
   11bfe:	8b 81       	ldd	r24, Y+3	; 0x03
   11c00:	9c 81       	ldd	r25, Y+4	; 0x04
   11c02:	01 96       	adiw	r24, 0x01	; 1
   11c04:	9c 83       	std	Y+4, r25	; 0x04
   11c06:	8b 83       	std	Y+3, r24	; 0x03
   11c08:	8b 81       	ldd	r24, Y+3	; 0x03
   11c0a:	9c 81       	ldd	r25, Y+4	; 0x04
   11c0c:	88 30       	cpi	r24, 0x08	; 8
   11c0e:	91 05       	cpc	r25, r1
   11c10:	0c f4       	brge	.+2      	; 0x11c14 <Mutex_unlock+0xd6>
   11c12:	b3 cf       	rjmp	.-154    	; 0x11b7a <Mutex_unlock+0x3c>
   11c14:	03 c0       	rjmp	.+6      	; 0x11c1c <Mutex_unlock+0xde>
            }
         }
      } else {
         m->lock = 0;
   11c16:	ee 81       	ldd	r30, Y+6	; 0x06
   11c18:	ff 81       	ldd	r31, Y+7	; 0x07
   11c1a:	10 82       	st	Z, r1
      } //m-waiting
   } //m->lock
   _atomic_end( currentatomic );
   11c1c:	8d 81       	ldd	r24, Y+5	; 0x05
   11c1e:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   11c22:	27 96       	adiw	r28, 0x07	; 7
   11c24:	0f b6       	in	r0, 0x3f	; 63
   11c26:	f8 94       	cli
   11c28:	de bf       	out	0x3e, r29	; 62
   11c2a:	0f be       	out	0x3f, r0	; 63
   11c2c:	cd bf       	out	0x3d, r28	; 61
   11c2e:	df 91       	pop	r29
   11c30:	cf 91       	pop	r28
   11c32:	08 95       	ret

00011c34 <getRadioMutexAddress>:
}


//void getRadioMutexAddress()  __attribute__((naked)) ;
void* getRadioMutexAddress() {
   11c34:	cf 93       	push	r28
   11c36:	df 93       	push	r29
   11c38:	cd b7       	in	r28, 0x3d	; 61
   11c3a:	de b7       	in	r29, 0x3e	; 62
   11c3c:	22 97       	sbiw	r28, 0x02	; 2
   11c3e:	0f b6       	in	r0, 0x3f	; 63
   11c40:	f8 94       	cli
   11c42:	de bf       	out	0x3e, r29	; 62
   11c44:	0f be       	out	0x3f, r0	; 63
   11c46:	cd bf       	out	0x3d, r28	; 61
   volatile mutex *msendaddr = &msend;
   11c48:	8b e1       	ldi	r24, 0x1B	; 27
   11c4a:	98 e0       	ldi	r25, 0x08	; 8
   11c4c:	9a 83       	std	Y+2, r25	; 0x02
   11c4e:	89 83       	std	Y+1, r24	; 0x01
   //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( msendaddr ) );
   return (void *)msendaddr; 
   11c50:	89 81       	ldd	r24, Y+1	; 0x01
   11c52:	9a 81       	ldd	r25, Y+2	; 0x02
   11c54:	22 96       	adiw	r28, 0x02	; 2
   11c56:	0f b6       	in	r0, 0x3f	; 63
   11c58:	f8 94       	cli
   11c5a:	de bf       	out	0x3e, r29	; 62
   11c5c:	0f be       	out	0x3f, r0	; 63
   11c5e:	cd bf       	out	0x3d, r28	; 61
   11c60:	df 91       	pop	r29
   11c62:	cf 91       	pop	r28
   11c64:	08 95       	ret

00011c66 <getSerialMutexAddress>:
   //asm volatile("ret"::); 
}

//-------------------------------------------------------------------------
void* getSerialMutexAddress() {
   11c66:	cf 93       	push	r28
   11c68:	df 93       	push	r29
   11c6a:	cd b7       	in	r28, 0x3d	; 61
   11c6c:	de b7       	in	r29, 0x3e	; 62
   11c6e:	22 97       	sbiw	r28, 0x02	; 2
   11c70:	0f b6       	in	r0, 0x3f	; 63
   11c72:	f8 94       	cli
   11c74:	de bf       	out	0x3e, r29	; 62
   11c76:	0f be       	out	0x3f, r0	; 63
   11c78:	cd bf       	out	0x3d, r28	; 61
   volatile mutex *msendaddr = &mserialsend;
   11c7a:	82 e9       	ldi	r24, 0x92	; 146
   11c7c:	98 e0       	ldi	r25, 0x08	; 8
   11c7e:	9a 83       	std	Y+2, r25	; 0x02
   11c80:	89 83       	std	Y+1, r24	; 0x01
   //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( msendaddr ) );
   return (void *)msendaddr; 
   11c82:	89 81       	ldd	r24, Y+1	; 0x01
   11c84:	9a 81       	ldd	r25, Y+2	; 0x02
   11c86:	22 96       	adiw	r28, 0x02	; 2
   11c88:	0f b6       	in	r0, 0x3f	; 63
   11c8a:	f8 94       	cli
   11c8c:	de bf       	out	0x3e, r29	; 62
   11c8e:	0f be       	out	0x3f, r0	; 63
   11c90:	cd bf       	out	0x3d, r28	; 61
   11c92:	df 91       	pop	r29
   11c94:	cf 91       	pop	r28
   11c96:	08 95       	ret

00011c98 <releaseMutexLockUponThreadKill>:
   //asm volatile("ret"::); 
}

void releaseMutexLockUponThreadKill(uint8_t index){}
   11c98:	cf 93       	push	r28
   11c9a:	df 93       	push	r29
   11c9c:	cd b7       	in	r28, 0x3d	; 61
   11c9e:	de b7       	in	r29, 0x3e	; 62
   11ca0:	21 97       	sbiw	r28, 0x01	; 1
   11ca2:	0f b6       	in	r0, 0x3f	; 63
   11ca4:	f8 94       	cli
   11ca6:	de bf       	out	0x3e, r29	; 62
   11ca8:	0f be       	out	0x3f, r0	; 63
   11caa:	cd bf       	out	0x3d, r28	; 61
   11cac:	89 83       	std	Y+1, r24	; 0x01
   11cae:	21 96       	adiw	r28, 0x01	; 1
   11cb0:	0f b6       	in	r0, 0x3f	; 63
   11cb2:	f8 94       	cli
   11cb4:	de bf       	out	0x3e, r29	; 62
   11cb6:	0f be       	out	0x3f, r0	; 63
   11cb8:	cd bf       	out	0x3d, r28	; 61
   11cba:	df 91       	pop	r29
   11cbc:	cf 91       	pop	r28
   11cbe:	08 95       	ret

00011cc0 <printfstr>:
#ifdef PLATFORM_AVR
  #include "../io/avr_serial/serialprint.h"
#endif

void printfstr(char *str) {
   11cc0:	cf 93       	push	r28
   11cc2:	df 93       	push	r29
   11cc4:	cd b7       	in	r28, 0x3d	; 61
   11cc6:	de b7       	in	r29, 0x3e	; 62
   11cc8:	22 97       	sbiw	r28, 0x02	; 2
   11cca:	0f b6       	in	r0, 0x3f	; 63
   11ccc:	f8 94       	cli
   11cce:	de bf       	out	0x3e, r29	; 62
   11cd0:	0f be       	out	0x3f, r0	; 63
   11cd2:	cd bf       	out	0x3d, r28	; 61
   11cd4:	9a 83       	std	Y+2, r25	; 0x02
   11cd6:	89 83       	std	Y+1, r24	; 0x01
	#ifdef PLATFORM_AVR
   printString(str); 
   11cd8:	89 81       	ldd	r24, Y+1	; 0x01
   11cda:	9a 81       	ldd	r25, Y+2	; 0x02
   11cdc:	0e 94 3d 20 	call	0x407a	; 0x407a <printString>
   11ce0:	22 96       	adiw	r28, 0x02	; 2
   11ce2:	0f b6       	in	r0, 0x3f	; 63
   11ce4:	f8 94       	cli
   11ce6:	de bf       	out	0x3e, r29	; 62
   11ce8:	0f be       	out	0x3f, r0	; 63
   11cea:	cd bf       	out	0x3d, r28	; 61
   11cec:	df 91       	pop	r29
   11cee:	cf 91       	pop	r28
   11cf0:	08 95       	ret

00011cf2 <printfstrlen>:
  #endif
}


void printfstrlen(char *str, uint8_t len) {
   11cf2:	cf 93       	push	r28
   11cf4:	df 93       	push	r29
   11cf6:	cd b7       	in	r28, 0x3d	; 61
   11cf8:	de b7       	in	r29, 0x3e	; 62
   11cfa:	23 97       	sbiw	r28, 0x03	; 3
   11cfc:	0f b6       	in	r0, 0x3f	; 63
   11cfe:	f8 94       	cli
   11d00:	de bf       	out	0x3e, r29	; 62
   11d02:	0f be       	out	0x3f, r0	; 63
   11d04:	cd bf       	out	0x3d, r28	; 61
   11d06:	9a 83       	std	Y+2, r25	; 0x02
   11d08:	89 83       	std	Y+1, r24	; 0x01
   11d0a:	6b 83       	std	Y+3, r22	; 0x03
	#ifdef PLATFORM_AVR
	printStringN(str, len); 
   11d0c:	89 81       	ldd	r24, Y+1	; 0x01
   11d0e:	9a 81       	ldd	r25, Y+2	; 0x02
   11d10:	6b 81       	ldd	r22, Y+3	; 0x03
   11d12:	0e 94 62 20 	call	0x40c4	; 0x40c4 <printStringN>
   11d16:	23 96       	adiw	r28, 0x03	; 3
   11d18:	0f b6       	in	r0, 0x3f	; 63
   11d1a:	f8 94       	cli
   11d1c:	de bf       	out	0x3e, r29	; 62
   11d1e:	0f be       	out	0x3f, r0	; 63
   11d20:	cd bf       	out	0x3d, r28	; 61
   11d22:	df 91       	pop	r29
   11d24:	cf 91       	pop	r28
   11d26:	08 95       	ret

00011d28 <printfval>:
  #endif
	
}


void printfval(uint8_t val) {
   11d28:	cf 93       	push	r28
   11d2a:	df 93       	push	r29
   11d2c:	cd b7       	in	r28, 0x3d	; 61
   11d2e:	de b7       	in	r29, 0x3e	; 62
   11d30:	21 97       	sbiw	r28, 0x01	; 1
   11d32:	0f b6       	in	r0, 0x3f	; 63
   11d34:	f8 94       	cli
   11d36:	de bf       	out	0x3e, r29	; 62
   11d38:	0f be       	out	0x3f, r0	; 63
   11d3a:	cd bf       	out	0x3d, r28	; 61
   11d3c:	89 83       	std	Y+1, r24	; 0x01
	#ifdef PLATFORM_AVR
	 usartPrint(val);
   11d3e:	89 81       	ldd	r24, Y+1	; 0x01
   11d40:	0e 94 17 20 	call	0x402e	; 0x402e <usartPrint>
   11d44:	21 96       	adiw	r28, 0x01	; 1
   11d46:	0f b6       	in	r0, 0x3f	; 63
   11d48:	f8 94       	cli
   11d4a:	de bf       	out	0x3e, r29	; 62
   11d4c:	0f be       	out	0x3f, r0	; 63
   11d4e:	cd bf       	out	0x3d, r28	; 61
   11d50:	df 91       	pop	r29
   11d52:	cf 91       	pop	r28
   11d54:	08 95       	ret

00011d56 <getSerialHandleInfo>:
//the handleinfo is defined as a buffer for incoming user requests 
static serial_handle handleinfo;

//get the address of the handle structure for system call to populate 
void* getSerialHandleInfo() {
   11d56:	cf 93       	push	r28
   11d58:	df 93       	push	r29
   11d5a:	cd b7       	in	r28, 0x3d	; 61
   11d5c:	de b7       	in	r29, 0x3e	; 62
   return &handleinfo; 
   11d5e:	87 ee       	ldi	r24, 0xE7	; 231
   11d60:	93 e0       	ldi	r25, 0x03	; 3
   11d62:	df 91       	pop	r29
   11d64:	cf 91       	pop	r28
   11d66:	08 95       	ret

00011d68 <syscall_registerEventSerial>:
   //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
   // asm volatile("ret"::); 
}

//system call interface for registering an event 
void syscall_registerEventSerial() {
   11d68:	cf 93       	push	r28
   11d6a:	df 93       	push	r29
   11d6c:	cd b7       	in	r28, 0x3d	; 61
   11d6e:	de b7       	in	r29, 0x3e	; 62
   registerEventSerial( handleinfo.port, handleinfo.maxLength, handleinfo.data, handleinfo.handlefunc );
   11d70:	80 91 ed 03 	lds	r24, 0x03ED
   11d74:	90 91 ee 03 	lds	r25, 0x03EE
   11d78:	40 91 ea 03 	lds	r20, 0x03EA
   11d7c:	50 91 eb 03 	lds	r21, 0x03EB
   11d80:	60 91 e9 03 	lds	r22, 0x03E9
   11d84:	e0 91 e7 03 	lds	r30, 0x03E7
   11d88:	f0 91 e8 03 	lds	r31, 0x03E8
   11d8c:	9c 01       	movw	r18, r24
   11d8e:	cf 01       	movw	r24, r30
   11d90:	0e 94 f4 8e 	call	0x11de8	; 0x11de8 <registerEventSerial>
   11d94:	df 91       	pop	r29
   11d96:	cf 91       	pop	r28
   11d98:	08 95       	ret

00011d9a <initSerialHandles>:
}


//init all handles by setting their handle valid indicator as 0
void initSerialHandles() {
   11d9a:	cf 93       	push	r28
   11d9c:	df 93       	push	r29
   11d9e:	cd b7       	in	r28, 0x3d	; 61
   11da0:	de b7       	in	r29, 0x3e	; 62
   11da2:	21 97       	sbiw	r28, 0x01	; 1
   11da4:	0f b6       	in	r0, 0x3f	; 63
   11da6:	f8 94       	cli
   11da8:	de bf       	out	0x3e, r29	; 62
   11daa:	0f be       	out	0x3f, r0	; 63
   11dac:	cd bf       	out	0x3d, r28	; 61
   uint8_t i;
   for ( i = 0; i < SERIAL_RECEIVE_NUM; i ++ ) {
   11dae:	19 82       	std	Y+1, r1	; 0x01
   11db0:	0f c0       	rjmp	.+30     	; 0x11dd0 <initSerialHandles+0x36>
      serialreceivehandles[ i ].handlevalid = 0;
   11db2:	89 81       	ldd	r24, Y+1	; 0x01
   11db4:	99 27       	eor	r25, r25
   11db6:	88 0f       	add	r24, r24
   11db8:	99 1f       	adc	r25, r25
   11dba:	88 0f       	add	r24, r24
   11dbc:	99 1f       	adc	r25, r25
   11dbe:	88 0f       	add	r24, r24
   11dc0:	99 1f       	adc	r25, r25
   11dc2:	fc 01       	movw	r30, r24
   11dc4:	ec 55       	subi	r30, 0x5C	; 92
   11dc6:	f7 4f       	sbci	r31, 0xF7	; 247
   11dc8:	10 82       	st	Z, r1
   11dca:	89 81       	ldd	r24, Y+1	; 0x01
   11dcc:	8f 5f       	subi	r24, 0xFF	; 255
   11dce:	89 83       	std	Y+1, r24	; 0x01
   11dd0:	89 81       	ldd	r24, Y+1	; 0x01
   11dd2:	84 30       	cpi	r24, 0x04	; 4
   11dd4:	70 f3       	brcs	.-36     	; 0x11db2 <initSerialHandles+0x18>
   11dd6:	21 96       	adiw	r28, 0x01	; 1
   11dd8:	0f b6       	in	r0, 0x3f	; 63
   11dda:	f8 94       	cli
   11ddc:	de bf       	out	0x3e, r29	; 62
   11dde:	0f be       	out	0x3f, r0	; 63
   11de0:	cd bf       	out	0x3d, r28	; 61
   11de2:	df 91       	pop	r29
   11de4:	cf 91       	pop	r28
   11de6:	08 95       	ret

00011de8 <registerEventSerial>:
   } 
}

//Register A New Handle
void registerEventSerial( uint16_t port, uint8_t maxLength, uint8_t *data, void( *handlefunc )( void )) {
   11de8:	cf 93       	push	r28
   11dea:	df 93       	push	r29
   11dec:	cd b7       	in	r28, 0x3d	; 61
   11dee:	de b7       	in	r29, 0x3e	; 62
   11df0:	28 97       	sbiw	r28, 0x08	; 8
   11df2:	0f b6       	in	r0, 0x3f	; 63
   11df4:	f8 94       	cli
   11df6:	de bf       	out	0x3e, r29	; 62
   11df8:	0f be       	out	0x3f, r0	; 63
   11dfa:	cd bf       	out	0x3d, r28	; 61
   11dfc:	9b 83       	std	Y+3, r25	; 0x03
   11dfe:	8a 83       	std	Y+2, r24	; 0x02
   11e00:	6c 83       	std	Y+4, r22	; 0x04
   11e02:	5e 83       	std	Y+6, r21	; 0x06
   11e04:	4d 83       	std	Y+5, r20	; 0x05
   11e06:	38 87       	std	Y+8, r19	; 0x08
   11e08:	2f 83       	std	Y+7, r18	; 0x07
   uint8_t i;
   for ( i = 0; i < SERIAL_RECEIVE_NUM; i ++ )
   11e0a:	19 82       	std	Y+1, r1	; 0x01
   11e0c:	5a c0       	rjmp	.+180    	; 0x11ec2 <registerEventSerial+0xda>
   if ( serialreceivehandles[ i ].handlevalid == 0 ) {
   11e0e:	89 81       	ldd	r24, Y+1	; 0x01
   11e10:	99 27       	eor	r25, r25
   11e12:	88 0f       	add	r24, r24
   11e14:	99 1f       	adc	r25, r25
   11e16:	88 0f       	add	r24, r24
   11e18:	99 1f       	adc	r25, r25
   11e1a:	88 0f       	add	r24, r24
   11e1c:	99 1f       	adc	r25, r25
   11e1e:	fc 01       	movw	r30, r24
   11e20:	ec 55       	subi	r30, 0x5C	; 92
   11e22:	f7 4f       	sbci	r31, 0xF7	; 247
   11e24:	80 81       	ld	r24, Z
   11e26:	88 23       	and	r24, r24
   11e28:	09 f0       	breq	.+2      	; 0x11e2c <registerEventSerial+0x44>
   11e2a:	48 c0       	rjmp	.+144    	; 0x11ebc <registerEventSerial+0xd4>
      serialreceivehandles[ i ].port = port;
   11e2c:	89 81       	ldd	r24, Y+1	; 0x01
   11e2e:	99 27       	eor	r25, r25
   11e30:	88 0f       	add	r24, r24
   11e32:	99 1f       	adc	r25, r25
   11e34:	88 0f       	add	r24, r24
   11e36:	99 1f       	adc	r25, r25
   11e38:	88 0f       	add	r24, r24
   11e3a:	99 1f       	adc	r25, r25
   11e3c:	fc 01       	movw	r30, r24
   11e3e:	e1 56       	subi	r30, 0x61	; 97
   11e40:	f7 4f       	sbci	r31, 0xF7	; 247
   11e42:	8a 81       	ldd	r24, Y+2	; 0x02
   11e44:	9b 81       	ldd	r25, Y+3	; 0x03
   11e46:	91 83       	std	Z+1, r25	; 0x01
   11e48:	80 83       	st	Z, r24
      serialreceivehandles[ i ].maxLength = maxLength;
   11e4a:	89 81       	ldd	r24, Y+1	; 0x01
   11e4c:	99 27       	eor	r25, r25
   11e4e:	88 0f       	add	r24, r24
   11e50:	99 1f       	adc	r25, r25
   11e52:	88 0f       	add	r24, r24
   11e54:	99 1f       	adc	r25, r25
   11e56:	88 0f       	add	r24, r24
   11e58:	99 1f       	adc	r25, r25
   11e5a:	fc 01       	movw	r30, r24
   11e5c:	ef 55       	subi	r30, 0x5F	; 95
   11e5e:	f7 4f       	sbci	r31, 0xF7	; 247
   11e60:	8c 81       	ldd	r24, Y+4	; 0x04
   11e62:	80 83       	st	Z, r24
      serialreceivehandles[ i ].data = data;
   11e64:	89 81       	ldd	r24, Y+1	; 0x01
   11e66:	99 27       	eor	r25, r25
   11e68:	88 0f       	add	r24, r24
   11e6a:	99 1f       	adc	r25, r25
   11e6c:	88 0f       	add	r24, r24
   11e6e:	99 1f       	adc	r25, r25
   11e70:	88 0f       	add	r24, r24
   11e72:	99 1f       	adc	r25, r25
   11e74:	fc 01       	movw	r30, r24
   11e76:	ee 55       	subi	r30, 0x5E	; 94
   11e78:	f7 4f       	sbci	r31, 0xF7	; 247
   11e7a:	8d 81       	ldd	r24, Y+5	; 0x05
   11e7c:	9e 81       	ldd	r25, Y+6	; 0x06
   11e7e:	91 83       	std	Z+1, r25	; 0x01
   11e80:	80 83       	st	Z, r24
      serialreceivehandles[ i ].handlefunc = handlefunc;
   11e82:	89 81       	ldd	r24, Y+1	; 0x01
   11e84:	99 27       	eor	r25, r25
   11e86:	88 0f       	add	r24, r24
   11e88:	99 1f       	adc	r25, r25
   11e8a:	88 0f       	add	r24, r24
   11e8c:	99 1f       	adc	r25, r25
   11e8e:	88 0f       	add	r24, r24
   11e90:	99 1f       	adc	r25, r25
   11e92:	fc 01       	movw	r30, r24
   11e94:	eb 55       	subi	r30, 0x5B	; 91
   11e96:	f7 4f       	sbci	r31, 0xF7	; 247
   11e98:	8f 81       	ldd	r24, Y+7	; 0x07
   11e9a:	98 85       	ldd	r25, Y+8	; 0x08
   11e9c:	91 83       	std	Z+1, r25	; 0x01
   11e9e:	80 83       	st	Z, r24
      serialreceivehandles[ i ].handlevalid = 1;
   11ea0:	89 81       	ldd	r24, Y+1	; 0x01
   11ea2:	99 27       	eor	r25, r25
   11ea4:	88 0f       	add	r24, r24
   11ea6:	99 1f       	adc	r25, r25
   11ea8:	88 0f       	add	r24, r24
   11eaa:	99 1f       	adc	r25, r25
   11eac:	88 0f       	add	r24, r24
   11eae:	99 1f       	adc	r25, r25
   11eb0:	fc 01       	movw	r30, r24
   11eb2:	ec 55       	subi	r30, 0x5C	; 92
   11eb4:	f7 4f       	sbci	r31, 0xF7	; 247
   11eb6:	81 e0       	ldi	r24, 0x01	; 1
   11eb8:	80 83       	st	Z, r24
      return ;
   11eba:	07 c0       	rjmp	.+14     	; 0x11eca <registerEventSerial+0xe2>
   11ebc:	89 81       	ldd	r24, Y+1	; 0x01
   11ebe:	8f 5f       	subi	r24, 0xFF	; 255
   11ec0:	89 83       	std	Y+1, r24	; 0x01
   11ec2:	89 81       	ldd	r24, Y+1	; 0x01
   11ec4:	84 30       	cpi	r24, 0x04	; 4
   11ec6:	08 f4       	brcc	.+2      	; 0x11eca <registerEventSerial+0xe2>
   11ec8:	a2 cf       	rjmp	.-188    	; 0x11e0e <registerEventSerial+0x26>
   11eca:	28 96       	adiw	r28, 0x08	; 8
   11ecc:	0f b6       	in	r0, 0x3f	; 63
   11ece:	f8 94       	cli
   11ed0:	de bf       	out	0x3e, r29	; 62
   11ed2:	0f be       	out	0x3f, r0	; 63
   11ed4:	cd bf       	out	0x3d, r28	; 61
   11ed6:	df 91       	pop	r29
   11ed8:	cf 91       	pop	r28
   11eda:	08 95       	ret

00011edc <deRegisterEventSerial>:
   }
}

//-------------------------------------------------------------------------
void deRegisterEventSerial( uint16_t port ) {
   11edc:	cf 93       	push	r28
   11ede:	df 93       	push	r29
   11ee0:	cd b7       	in	r28, 0x3d	; 61
   11ee2:	de b7       	in	r29, 0x3e	; 62
   11ee4:	23 97       	sbiw	r28, 0x03	; 3
   11ee6:	0f b6       	in	r0, 0x3f	; 63
   11ee8:	f8 94       	cli
   11eea:	de bf       	out	0x3e, r29	; 62
   11eec:	0f be       	out	0x3f, r0	; 63
   11eee:	cd bf       	out	0x3d, r28	; 61
   11ef0:	9b 83       	std	Y+3, r25	; 0x03
   11ef2:	8a 83       	std	Y+2, r24	; 0x02
   uint8_t i;
   for ( i = 0; i < SERIAL_RECEIVE_NUM; i ++ )
   11ef4:	19 82       	std	Y+1, r1	; 0x01
   11ef6:	3d c0       	rjmp	.+122    	; 0x11f72 <deRegisterEventSerial+0x96>
   if (( serialreceivehandles[ i ].handlevalid == 1 ) && ( serialreceivehandles[ i ].port == port )) {
   11ef8:	89 81       	ldd	r24, Y+1	; 0x01
   11efa:	99 27       	eor	r25, r25
   11efc:	88 0f       	add	r24, r24
   11efe:	99 1f       	adc	r25, r25
   11f00:	88 0f       	add	r24, r24
   11f02:	99 1f       	adc	r25, r25
   11f04:	88 0f       	add	r24, r24
   11f06:	99 1f       	adc	r25, r25
   11f08:	fc 01       	movw	r30, r24
   11f0a:	ec 55       	subi	r30, 0x5C	; 92
   11f0c:	f7 4f       	sbci	r31, 0xF7	; 247
   11f0e:	80 81       	ld	r24, Z
   11f10:	81 30       	cpi	r24, 0x01	; 1
   11f12:	61 f5       	brne	.+88     	; 0x11f6c <deRegisterEventSerial+0x90>
   11f14:	89 81       	ldd	r24, Y+1	; 0x01
   11f16:	99 27       	eor	r25, r25
   11f18:	88 0f       	add	r24, r24
   11f1a:	99 1f       	adc	r25, r25
   11f1c:	88 0f       	add	r24, r24
   11f1e:	99 1f       	adc	r25, r25
   11f20:	88 0f       	add	r24, r24
   11f22:	99 1f       	adc	r25, r25
   11f24:	fc 01       	movw	r30, r24
   11f26:	e1 56       	subi	r30, 0x61	; 97
   11f28:	f7 4f       	sbci	r31, 0xF7	; 247
   11f2a:	20 81       	ld	r18, Z
   11f2c:	31 81       	ldd	r19, Z+1	; 0x01
   11f2e:	8a 81       	ldd	r24, Y+2	; 0x02
   11f30:	9b 81       	ldd	r25, Y+3	; 0x03
   11f32:	28 17       	cp	r18, r24
   11f34:	39 07       	cpc	r19, r25
   11f36:	d1 f4       	brne	.+52     	; 0x11f6c <deRegisterEventSerial+0x90>
      serialreceivehandles[ i ].handlevalid = 0;
   11f38:	89 81       	ldd	r24, Y+1	; 0x01
   11f3a:	99 27       	eor	r25, r25
   11f3c:	88 0f       	add	r24, r24
   11f3e:	99 1f       	adc	r25, r25
   11f40:	88 0f       	add	r24, r24
   11f42:	99 1f       	adc	r25, r25
   11f44:	88 0f       	add	r24, r24
   11f46:	99 1f       	adc	r25, r25
   11f48:	fc 01       	movw	r30, r24
   11f4a:	ec 55       	subi	r30, 0x5C	; 92
   11f4c:	f7 4f       	sbci	r31, 0xF7	; 247
   11f4e:	10 82       	st	Z, r1
      serialreceivehandles[ i ].port = 0;
   11f50:	89 81       	ldd	r24, Y+1	; 0x01
   11f52:	99 27       	eor	r25, r25
   11f54:	88 0f       	add	r24, r24
   11f56:	99 1f       	adc	r25, r25
   11f58:	88 0f       	add	r24, r24
   11f5a:	99 1f       	adc	r25, r25
   11f5c:	88 0f       	add	r24, r24
   11f5e:	99 1f       	adc	r25, r25
   11f60:	fc 01       	movw	r30, r24
   11f62:	e1 56       	subi	r30, 0x61	; 97
   11f64:	f7 4f       	sbci	r31, 0xF7	; 247
   11f66:	11 82       	std	Z+1, r1	; 0x01
   11f68:	10 82       	st	Z, r1
      return ;
   11f6a:	07 c0       	rjmp	.+14     	; 0x11f7a <deRegisterEventSerial+0x9e>
   11f6c:	89 81       	ldd	r24, Y+1	; 0x01
   11f6e:	8f 5f       	subi	r24, 0xFF	; 255
   11f70:	89 83       	std	Y+1, r24	; 0x01
   11f72:	89 81       	ldd	r24, Y+1	; 0x01
   11f74:	84 30       	cpi	r24, 0x04	; 4
   11f76:	08 f4       	brcc	.+2      	; 0x11f7a <deRegisterEventSerial+0x9e>
   11f78:	bf cf       	rjmp	.-130    	; 0x11ef8 <deRegisterEventSerial+0x1c>
   11f7a:	23 96       	adiw	r28, 0x03	; 3
   11f7c:	0f b6       	in	r0, 0x3f	; 63
   11f7e:	f8 94       	cli
   11f80:	de bf       	out	0x3e, r29	; 62
   11f82:	0f be       	out	0x3f, r0	; 63
   11f84:	cd bf       	out	0x3d, r28	; 61
   11f86:	df 91       	pop	r29
   11f88:	cf 91       	pop	r28
   11f8a:	08 95       	ret

00011f8c <serialDeliverPacket>:
   }
}


//Now this OS has a new packet, needs to deliver it to the correct thread for processing, and return the packet as soon as possible 
void serialDeliverPacket( uint16_t port, uint8_t length, uint8_t *msg ) {
   11f8c:	cf 93       	push	r28
   11f8e:	df 93       	push	r29
   11f90:	cd b7       	in	r28, 0x3d	; 61
   11f92:	de b7       	in	r29, 0x3e	; 62
   11f94:	2c 97       	sbiw	r28, 0x0c	; 12
   11f96:	0f b6       	in	r0, 0x3f	; 63
   11f98:	f8 94       	cli
   11f9a:	de bf       	out	0x3e, r29	; 62
   11f9c:	0f be       	out	0x3f, r0	; 63
   11f9e:	cd bf       	out	0x3d, r28	; 61
   11fa0:	9f 83       	std	Y+7, r25	; 0x07
   11fa2:	8e 83       	std	Y+6, r24	; 0x06
   11fa4:	68 87       	std	Y+8, r22	; 0x08
   11fa6:	5a 87       	std	Y+10, r21	; 0x0a
   11fa8:	49 87       	std	Y+9, r20	; 0x09
   uint8_t i;
   for ( i = 0; i < SERIAL_RECEIVE_NUM; i ++ )
   11faa:	1d 82       	std	Y+5, r1	; 0x05
   11fac:	c1 c0       	rjmp	.+386    	; 0x12130 <serialDeliverPacket+0x1a4>
    {
      if (( serialreceivehandles[ i ].port == port ) && ( serialreceivehandles[ i ].handlevalid == 1 ))
   11fae:	8d 81       	ldd	r24, Y+5	; 0x05
   11fb0:	99 27       	eor	r25, r25
   11fb2:	88 0f       	add	r24, r24
   11fb4:	99 1f       	adc	r25, r25
   11fb6:	88 0f       	add	r24, r24
   11fb8:	99 1f       	adc	r25, r25
   11fba:	88 0f       	add	r24, r24
   11fbc:	99 1f       	adc	r25, r25
   11fbe:	fc 01       	movw	r30, r24
   11fc0:	e1 56       	subi	r30, 0x61	; 97
   11fc2:	f7 4f       	sbci	r31, 0xF7	; 247
   11fc4:	20 81       	ld	r18, Z
   11fc6:	31 81       	ldd	r19, Z+1	; 0x01
   11fc8:	8e 81       	ldd	r24, Y+6	; 0x06
   11fca:	9f 81       	ldd	r25, Y+7	; 0x07
   11fcc:	28 17       	cp	r18, r24
   11fce:	39 07       	cpc	r19, r25
   11fd0:	09 f0       	breq	.+2      	; 0x11fd4 <serialDeliverPacket+0x48>
   11fd2:	ab c0       	rjmp	.+342    	; 0x1212a <serialDeliverPacket+0x19e>
   11fd4:	8d 81       	ldd	r24, Y+5	; 0x05
   11fd6:	99 27       	eor	r25, r25
   11fd8:	88 0f       	add	r24, r24
   11fda:	99 1f       	adc	r25, r25
   11fdc:	88 0f       	add	r24, r24
   11fde:	99 1f       	adc	r25, r25
   11fe0:	88 0f       	add	r24, r24
   11fe2:	99 1f       	adc	r25, r25
   11fe4:	fc 01       	movw	r30, r24
   11fe6:	ec 55       	subi	r30, 0x5C	; 92
   11fe8:	f7 4f       	sbci	r31, 0xF7	; 247
   11fea:	80 81       	ld	r24, Z
   11fec:	81 30       	cpi	r24, 0x01	; 1
   11fee:	09 f0       	breq	.+2      	; 0x11ff2 <serialDeliverPacket+0x66>
   11ff0:	9c c0       	rjmp	.+312    	; 0x1212a <serialDeliverPacket+0x19e>
       {
         uint8_t temp;
         uint8_t j;
         uint8_t *buf;
         buf = ( uint8_t* )serialreceivehandles[ i ].data;
   11ff2:	8d 81       	ldd	r24, Y+5	; 0x05
   11ff4:	99 27       	eor	r25, r25
   11ff6:	88 0f       	add	r24, r24
   11ff8:	99 1f       	adc	r25, r25
   11ffa:	88 0f       	add	r24, r24
   11ffc:	99 1f       	adc	r25, r25
   11ffe:	88 0f       	add	r24, r24
   12000:	99 1f       	adc	r25, r25
   12002:	fc 01       	movw	r30, r24
   12004:	ee 55       	subi	r30, 0x5E	; 94
   12006:	f7 4f       	sbci	r31, 0xF7	; 247
   12008:	80 81       	ld	r24, Z
   1200a:	91 81       	ldd	r25, Z+1	; 0x01
   1200c:	9a 83       	std	Y+2, r25	; 0x02
   1200e:	89 83       	std	Y+1, r24	; 0x01
         temp = ( length > ( serialreceivehandles[ i ].maxLength ) ? ( serialreceivehandles[ i ].maxLength ): length );
   12010:	8d 81       	ldd	r24, Y+5	; 0x05
   12012:	99 27       	eor	r25, r25
   12014:	88 0f       	add	r24, r24
   12016:	99 1f       	adc	r25, r25
   12018:	88 0f       	add	r24, r24
   1201a:	99 1f       	adc	r25, r25
   1201c:	88 0f       	add	r24, r24
   1201e:	99 1f       	adc	r25, r25
   12020:	fc 01       	movw	r30, r24
   12022:	ef 55       	subi	r30, 0x5F	; 95
   12024:	f7 4f       	sbci	r31, 0xF7	; 247
   12026:	80 81       	ld	r24, Z
   12028:	98 85       	ldd	r25, Y+8	; 0x08
   1202a:	9c 87       	std	Y+12, r25	; 0x0c
   1202c:	8b 87       	std	Y+11, r24	; 0x0b
   1202e:	8b 85       	ldd	r24, Y+11	; 0x0b
   12030:	9c 85       	ldd	r25, Y+12	; 0x0c
   12032:	98 17       	cp	r25, r24
   12034:	10 f4       	brcc	.+4      	; 0x1203a <serialDeliverPacket+0xae>
   12036:	8c 85       	ldd	r24, Y+12	; 0x0c
   12038:	8b 87       	std	Y+11, r24	; 0x0b
   1203a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1203c:	9c 83       	std	Y+4, r25	; 0x04
         for ( j = 0; j < temp; j ++ ) {
   1203e:	1b 82       	std	Y+3, r1	; 0x03
   12040:	14 c0       	rjmp	.+40     	; 0x1206a <serialDeliverPacket+0xde>
            *buf = msg[ j ];
   12042:	8b 81       	ldd	r24, Y+3	; 0x03
   12044:	99 27       	eor	r25, r25
   12046:	9c 01       	movw	r18, r24
   12048:	89 85       	ldd	r24, Y+9	; 0x09
   1204a:	9a 85       	ldd	r25, Y+10	; 0x0a
   1204c:	f9 01       	movw	r30, r18
   1204e:	e8 0f       	add	r30, r24
   12050:	f9 1f       	adc	r31, r25
   12052:	80 81       	ld	r24, Z
   12054:	e9 81       	ldd	r30, Y+1	; 0x01
   12056:	fa 81       	ldd	r31, Y+2	; 0x02
   12058:	80 83       	st	Z, r24
            buf ++;
   1205a:	89 81       	ldd	r24, Y+1	; 0x01
   1205c:	9a 81       	ldd	r25, Y+2	; 0x02
   1205e:	01 96       	adiw	r24, 0x01	; 1
   12060:	9a 83       	std	Y+2, r25	; 0x02
   12062:	89 83       	std	Y+1, r24	; 0x01
   12064:	8b 81       	ldd	r24, Y+3	; 0x03
   12066:	8f 5f       	subi	r24, 0xFF	; 255
   12068:	8b 83       	std	Y+3, r24	; 0x03
   1206a:	9b 81       	ldd	r25, Y+3	; 0x03
   1206c:	8c 81       	ldd	r24, Y+4	; 0x04
   1206e:	98 17       	cp	r25, r24
   12070:	40 f3       	brcs	.-48     	; 0x12042 <serialDeliverPacket+0xb6>
         }

		 //For all incoming buffer, its last byte is always set as 0. Further, the last byte of the messsage, if it is shorter, is also set as 0. 

		 if (length < serialreceivehandles[ i ].maxLength)
   12072:	8d 81       	ldd	r24, Y+5	; 0x05
   12074:	99 27       	eor	r25, r25
   12076:	88 0f       	add	r24, r24
   12078:	99 1f       	adc	r25, r25
   1207a:	88 0f       	add	r24, r24
   1207c:	99 1f       	adc	r25, r25
   1207e:	88 0f       	add	r24, r24
   12080:	99 1f       	adc	r25, r25
   12082:	fc 01       	movw	r30, r24
   12084:	ef 55       	subi	r30, 0x5F	; 95
   12086:	f7 4f       	sbci	r31, 0xF7	; 247
   12088:	90 81       	ld	r25, Z
   1208a:	88 85       	ldd	r24, Y+8	; 0x08
   1208c:	89 17       	cp	r24, r25
   1208e:	c0 f4       	brcc	.+48     	; 0x120c0 <serialDeliverPacket+0x134>
		 	{
		 	 buf = ( uint8_t* )serialreceivehandles[ i ].data;
   12090:	8d 81       	ldd	r24, Y+5	; 0x05
   12092:	99 27       	eor	r25, r25
   12094:	88 0f       	add	r24, r24
   12096:	99 1f       	adc	r25, r25
   12098:	88 0f       	add	r24, r24
   1209a:	99 1f       	adc	r25, r25
   1209c:	88 0f       	add	r24, r24
   1209e:	99 1f       	adc	r25, r25
   120a0:	fc 01       	movw	r30, r24
   120a2:	ee 55       	subi	r30, 0x5E	; 94
   120a4:	f7 4f       	sbci	r31, 0xF7	; 247
   120a6:	80 81       	ld	r24, Z
   120a8:	91 81       	ldd	r25, Z+1	; 0x01
   120aa:	9a 83       	std	Y+2, r25	; 0x02
   120ac:	89 83       	std	Y+1, r24	; 0x01
			 buf[length] = 0; 
   120ae:	88 85       	ldd	r24, Y+8	; 0x08
   120b0:	99 27       	eor	r25, r25
   120b2:	9c 01       	movw	r18, r24
   120b4:	89 81       	ldd	r24, Y+1	; 0x01
   120b6:	9a 81       	ldd	r25, Y+2	; 0x02
   120b8:	f9 01       	movw	r30, r18
   120ba:	e8 0f       	add	r30, r24
   120bc:	f9 1f       	adc	r31, r25
   120be:	10 82       	st	Z, r1
		    }
		  buf[serialreceivehandles[ i ].maxLength-1] = 0; 
   120c0:	8d 81       	ldd	r24, Y+5	; 0x05
   120c2:	99 27       	eor	r25, r25
   120c4:	88 0f       	add	r24, r24
   120c6:	99 1f       	adc	r25, r25
   120c8:	88 0f       	add	r24, r24
   120ca:	99 1f       	adc	r25, r25
   120cc:	88 0f       	add	r24, r24
   120ce:	99 1f       	adc	r25, r25
   120d0:	fc 01       	movw	r30, r24
   120d2:	ef 55       	subi	r30, 0x5F	; 95
   120d4:	f7 4f       	sbci	r31, 0xF7	; 247
   120d6:	80 81       	ld	r24, Z
   120d8:	99 27       	eor	r25, r25
   120da:	9c 01       	movw	r18, r24
   120dc:	89 81       	ldd	r24, Y+1	; 0x01
   120de:	9a 81       	ldd	r25, Y+2	; 0x02
   120e0:	82 0f       	add	r24, r18
   120e2:	93 1f       	adc	r25, r19
   120e4:	fc 01       	movw	r30, r24
   120e6:	31 97       	sbiw	r30, 0x01	; 1
   120e8:	10 82       	st	Z, r1
		 
         if ( serialreceivehandles[ i ].handlefunc != NULL ) {
   120ea:	8d 81       	ldd	r24, Y+5	; 0x05
   120ec:	99 27       	eor	r25, r25
   120ee:	88 0f       	add	r24, r24
   120f0:	99 1f       	adc	r25, r25
   120f2:	88 0f       	add	r24, r24
   120f4:	99 1f       	adc	r25, r25
   120f6:	88 0f       	add	r24, r24
   120f8:	99 1f       	adc	r25, r25
   120fa:	fc 01       	movw	r30, r24
   120fc:	eb 55       	subi	r30, 0x5B	; 91
   120fe:	f7 4f       	sbci	r31, 0xF7	; 247
   12100:	80 81       	ld	r24, Z
   12102:	91 81       	ldd	r25, Z+1	; 0x01
   12104:	00 97       	sbiw	r24, 0x00	; 0
   12106:	c1 f0       	breq	.+48     	; 0x12138 <serialDeliverPacket+0x1ac>
            postTask( serialreceivehandles[ i ].handlefunc, 6 );
   12108:	8d 81       	ldd	r24, Y+5	; 0x05
   1210a:	99 27       	eor	r25, r25
   1210c:	88 0f       	add	r24, r24
   1210e:	99 1f       	adc	r25, r25
   12110:	88 0f       	add	r24, r24
   12112:	99 1f       	adc	r25, r25
   12114:	88 0f       	add	r24, r24
   12116:	99 1f       	adc	r25, r25
   12118:	fc 01       	movw	r30, r24
   1211a:	eb 55       	subi	r30, 0x5B	; 91
   1211c:	f7 4f       	sbci	r31, 0xF7	; 247
   1211e:	80 81       	ld	r24, Z
   12120:	91 81       	ldd	r25, Z+1	; 0x01
   12122:	66 e0       	ldi	r22, 0x06	; 6
   12124:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
         } 
         return ;
   12128:	07 c0       	rjmp	.+14     	; 0x12138 <serialDeliverPacket+0x1ac>
   1212a:	8d 81       	ldd	r24, Y+5	; 0x05
   1212c:	8f 5f       	subi	r24, 0xFF	; 255
   1212e:	8d 83       	std	Y+5, r24	; 0x05
   12130:	8d 81       	ldd	r24, Y+5	; 0x05
   12132:	84 30       	cpi	r24, 0x04	; 4
   12134:	08 f4       	brcc	.+2      	; 0x12138 <serialDeliverPacket+0x1ac>
   12136:	3b cf       	rjmp	.-394    	; 0x11fae <serialDeliverPacket+0x22>
   12138:	2c 96       	adiw	r28, 0x0c	; 12
   1213a:	0f b6       	in	r0, 0x3f	; 63
   1213c:	f8 94       	cli
   1213e:	de bf       	out	0x3e, r29	; 62
   12140:	0f be       	out	0x3f, r0	; 63
   12142:	cd bf       	out	0x3d, r28	; 61
   12144:	df 91       	pop	r29
   12146:	cf 91       	pop	r28
   12148:	08 95       	ret

0001214a <call_fcn_ptr>:
 
#include "threaddata.h"


void call_fcn_ptr( void( *tp )()) {
   1214a:	cf 93       	push	r28
   1214c:	df 93       	push	r29
   1214e:	cd b7       	in	r28, 0x3d	; 61
   12150:	de b7       	in	r29, 0x3e	; 62
   12152:	22 97       	sbiw	r28, 0x02	; 2
   12154:	0f b6       	in	r0, 0x3f	; 63
   12156:	f8 94       	cli
   12158:	de bf       	out	0x3e, r29	; 62
   1215a:	0f be       	out	0x3f, r0	; 63
   1215c:	cd bf       	out	0x3d, r28	; 61
   1215e:	9a 83       	std	Y+2, r25	; 0x02
   12160:	89 83       	std	Y+1, r24	; 0x01
   ( *tp )();
   12162:	e9 81       	ldd	r30, Y+1	; 0x01
   12164:	fa 81       	ldd	r31, Y+2	; 0x02
   12166:	09 95       	icall
   12168:	22 96       	adiw	r28, 0x02	; 2
   1216a:	0f b6       	in	r0, 0x3f	; 63
   1216c:	f8 94       	cli
   1216e:	de bf       	out	0x3e, r29	; 62
   12170:	0f be       	out	0x3f, r0	; 63
   12172:	cd bf       	out	0x3d, r28	; 61
   12174:	df 91       	pop	r29
   12176:	cf 91       	pop	r28
   12178:	08 95       	ret

0001217a <thread_init>:
volatile mutex m_createthreadlock; 


//-------------------------------------------------------------------------
void thread_init() {
   1217a:	cf 93       	push	r28
   1217c:	df 93       	push	r29
   1217e:	cd b7       	in	r28, 0x3d	; 61
   12180:	de b7       	in	r29, 0x3e	; 62
   12182:	22 97       	sbiw	r28, 0x02	; 2
   12184:	0f b6       	in	r0, 0x3f	; 63
   12186:	f8 94       	cli
   12188:	de bf       	out	0x3e, r29	; 62
   1218a:	0f be       	out	0x3f, r0	; 63
   1218c:	cd bf       	out	0x3d, r28	; 61

    uint8_t i; 
   _atomic_t currentatomic;
   currentatomic = _atomic_start();
   1218e:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   12192:	89 83       	std	Y+1, r24	; 0x01
   
   nmemset( thread_table, 0, sizeof( thread ) *LITE_MAX_THREADS );
   12194:	8c ed       	ldi	r24, 0xDC	; 220
   12196:	98 e0       	ldi	r25, 0x08	; 8
   12198:	48 e2       	ldi	r20, 0x28	; 40
   1219a:	51 e0       	ldi	r21, 0x01	; 1
   1219c:	60 e0       	ldi	r22, 0x00	; 0
   1219e:	70 e0       	ldi	r23, 0x00	; 0
   121a0:	0e 94 54 9c 	call	0x138a8	; 0x138a8 <nmemset>

   for (i=0;i<LITE_MAX_THREADS;i++)
   121a4:	1a 82       	std	Y+2, r1	; 0x02
   121a6:	0c c0       	rjmp	.+24     	; 0x121c0 <thread_init+0x46>
    thread_clear_func_table[i] = NULL; 
   121a8:	8a 81       	ldd	r24, Y+2	; 0x02
   121aa:	99 27       	eor	r25, r25
   121ac:	88 0f       	add	r24, r24
   121ae:	99 1f       	adc	r25, r25
   121b0:	fc 01       	movw	r30, r24
   121b2:	e1 54       	subi	r30, 0x41	; 65
   121b4:	f7 4f       	sbci	r31, 0xF7	; 247
   121b6:	11 82       	std	Z+1, r1	; 0x01
   121b8:	10 82       	st	Z, r1
   121ba:	8a 81       	ldd	r24, Y+2	; 0x02
   121bc:	8f 5f       	subi	r24, 0xFF	; 255
   121be:	8a 83       	std	Y+2, r24	; 0x02
   121c0:	8a 81       	ldd	r24, Y+2	; 0x02
   121c2:	88 30       	cpi	r24, 0x08	; 8
   121c4:	88 f3       	brcs	.-30     	; 0x121a8 <thread_init+0x2e>

   m_createthreadlock.lock = m_createthreadlock.lockingthreadid = m_createthreadlock.waiting = 0; 
   121c6:	10 92 05 0a 	sts	0x0A05, r1
   121ca:	80 91 05 0a 	lds	r24, 0x0A05
   121ce:	80 93 06 0a 	sts	0x0A06, r24
   121d2:	80 91 06 0a 	lds	r24, 0x0A06
   121d6:	80 93 04 0a 	sts	0x0A04, r24
   
   current_thread = 0;
   121da:	10 92 db 08 	sts	0x08DB, r1
   121de:	10 92 da 08 	sts	0x08DA, r1
   old_stack_ptr = 0;
   121e2:	10 92 d0 08 	sts	0x08D0, r1
   121e6:	10 92 cf 08 	sts	0x08CF, r1
   stackinterrupt_ptr = 0;   
   121ea:	10 92 09 0a 	sts	0x0A09, r1
   121ee:	10 92 08 0a 	sts	0x0A08, r1
   thread_task_active = 0;   
   121f2:	10 92 07 0a 	sts	0x0A07, r1
   maxthreadrambound = 0; 
   121f6:	10 92 0b 0a 	sts	0x0A0B, r1
   121fa:	10 92 0a 0a 	sts	0x0A0A, r1
   _atomic_end( currentatomic );
   121fe:	89 81       	ldd	r24, Y+1	; 0x01
   12200:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   12204:	22 96       	adiw	r28, 0x02	; 2
   12206:	0f b6       	in	r0, 0x3f	; 63
   12208:	f8 94       	cli
   1220a:	de bf       	out	0x3e, r29	; 62
   1220c:	0f be       	out	0x3f, r0	; 63
   1220e:	cd bf       	out	0x3d, r28	; 61
   12210:	df 91       	pop	r29
   12212:	cf 91       	pop	r28
   12214:	08 95       	ret

00012216 <is_thread>:

   //    TimerM_Timer_start(9, TIMER_REPEAT, 1000);
}




//--------------------------------------------------------------------------




uint8_t is_thread() {
   12216:	cf 93       	push	r28
   12218:	df 93       	push	r29
   1221a:	cd b7       	in	r28, 0x3d	; 61
   1221c:	de b7       	in	r29, 0x3e	; 62
   1221e:	24 97       	sbiw	r28, 0x04	; 4
   12220:	0f b6       	in	r0, 0x3f	; 63
   12222:	f8 94       	cli
   12224:	de bf       	out	0x3e, r29	; 62
   12226:	0f be       	out	0x3f, r0	; 63
   12228:	cd bf       	out	0x3d, r28	; 61

  uint16_t SPvalue; 


  asm volatile (
   1222a:	8d b7       	in	r24, 0x3d	; 61
   1222c:	9e b7       	in	r25, 0x3e	; 62
   1222e:	9a 83       	std	Y+2, r25	; 0x02
   12230:	89 83       	std	Y+1, r24	; 0x01
    "in %A0, 0x3d" "\n\t"
    "in %B0, 0x3e" "\n\t"
    : "=r" (SPvalue)
    :
  );

  if (SPvalue > (uint16_t)maxthreadrambound)
   12232:	80 91 0a 0a 	lds	r24, 0x0A0A
   12236:	90 91 0b 0a 	lds	r25, 0x0A0B
   1223a:	9c 01       	movw	r18, r24
   1223c:	89 81       	ldd	r24, Y+1	; 0x01
   1223e:	9a 81       	ldd	r25, Y+2	; 0x02
   12240:	28 17       	cp	r18, r24
   12242:	39 07       	cpc	r19, r25
   12244:	18 f4       	brcc	.+6      	; 0x1224c <is_thread+0x36>
   return 0; 
   12246:	1c 82       	std	Y+4, r1	; 0x04
   12248:	1b 82       	std	Y+3, r1	; 0x03
   1224a:	04 c0       	rjmp	.+8      	; 0x12254 <is_thread+0x3e>
  else
   return 1; 
   1224c:	81 e0       	ldi	r24, 0x01	; 1
   1224e:	90 e0       	ldi	r25, 0x00	; 0
   12250:	9c 83       	std	Y+4, r25	; 0x04
   12252:	8b 83       	std	Y+3, r24	; 0x03
   12254:	8b 81       	ldd	r24, Y+3	; 0x03
   12256:	9c 81       	ldd	r25, Y+4	; 0x04
   12258:	24 96       	adiw	r28, 0x04	; 4
   1225a:	0f b6       	in	r0, 0x3f	; 63
   1225c:	f8 94       	cli
   1225e:	de bf       	out	0x3e, r29	; 62
   12260:	0f be       	out	0x3f, r0	; 63
   12262:	cd bf       	out	0x3d, r28	; 61
   12264:	df 91       	pop	r29
   12266:	cf 91       	pop	r28
   12268:	08 95       	ret

0001226a <getNewThreadBlock>:
 
} // getSP

   
 //  return (  !  ! current_thread );




//--------------------------------------------------------------------------

//return the data structure address of the newthreadblock for user to be used 

void *getNewThreadBlock()
{
   1226a:	cf 93       	push	r28
   1226c:	df 93       	push	r29
   1226e:	cd b7       	in	r28, 0x3d	; 61
   12270:	de b7       	in	r29, 0x3e	; 62
  return (void *)&newthreadblock; 
   12272:	81 ed       	ldi	r24, 0xD1	; 209
   12274:	98 e0       	ldi	r25, 0x08	; 8
   12276:	df 91       	pop	r29
   12278:	cf 91       	pop	r28
   1227a:	08 95       	ret

0001227c <getCreateThreadMutex>:
}


//--------------------------------------------------------------------------

//return the mutex address

void *getCreateThreadMutex()
{
   1227c:	cf 93       	push	r28
   1227e:	df 93       	push	r29
   12280:	cd b7       	in	r28, 0x3d	; 61
   12282:	de b7       	in	r29, 0x3e	; 62
  return (void *)&m_createthreadlock; 
   12284:	84 e0       	ldi	r24, 0x04	; 4
   12286:	9a e0       	ldi	r25, 0x0A	; 10
   12288:	df 91       	pop	r29
   1228a:	cf 91       	pop	r28
   1228c:	08 95       	ret

0001228e <createThreadTaskPosted>:
}



//--------------------------------------------------------------------------

void createThreadTaskPosted()

{
   1228e:	af 92       	push	r10
   12290:	bf 92       	push	r11
   12292:	cf 92       	push	r12
   12294:	df 92       	push	r13
   12296:	ef 92       	push	r14
   12298:	ff 92       	push	r15
   1229a:	0f 93       	push	r16
   1229c:	cf 93       	push	r28
   1229e:	df 93       	push	r29
   122a0:	cd b7       	in	r28, 0x3d	; 61
   122a2:	de b7       	in	r29, 0x3e	; 62
   create_thread(newthreadblock.fp, (uint16_t *)newthreadblock.ram_start, (uint16_t *)newthreadblock.stack_ptr, 0, newthreadblock.priority, newthreadblock.threadname, 0, 0); 
   122a4:	20 91 d8 08 	lds	r18, 0x08D8
   122a8:	30 91 d9 08 	lds	r19, 0x08D9
   122ac:	60 91 d7 08 	lds	r22, 0x08D7
   122b0:	80 91 d5 08 	lds	r24, 0x08D5
   122b4:	90 91 d6 08 	lds	r25, 0x08D6
   122b8:	ac 01       	movw	r20, r24
   122ba:	80 91 d3 08 	lds	r24, 0x08D3
   122be:	90 91 d4 08 	lds	r25, 0x08D4
   122c2:	e0 91 d1 08 	lds	r30, 0x08D1
   122c6:	f0 91 d2 08 	lds	r31, 0x08D2
   122ca:	aa 24       	eor	r10, r10
   122cc:	bb 24       	eor	r11, r11
   122ce:	cc 24       	eor	r12, r12
   122d0:	dd 24       	eor	r13, r13
   122d2:	79 01       	movw	r14, r18
   122d4:	06 2f       	mov	r16, r22
   122d6:	20 e0       	ldi	r18, 0x00	; 0
   122d8:	30 e0       	ldi	r19, 0x00	; 0
   122da:	bc 01       	movw	r22, r24
   122dc:	cf 01       	movw	r24, r30
   122de:	0e 94 87 91 	call	0x1230e	; 0x1230e <create_thread>
   122e2:	df 91       	pop	r29
   122e4:	cf 91       	pop	r28
   122e6:	0f 91       	pop	r16
   122e8:	ff 90       	pop	r15
   122ea:	ef 90       	pop	r14
   122ec:	df 90       	pop	r13
   122ee:	cf 90       	pop	r12
   122f0:	bf 90       	pop	r11
   122f2:	af 90       	pop	r10
   122f4:	08 95       	ret

000122f6 <createThreadTask>:
}





//--------------------------------------------------------------------------


//call the task of creating thread based on the thread block information 

void createThreadTask()
{
   122f6:	cf 93       	push	r28
   122f8:	df 93       	push	r29
   122fa:	cd b7       	in	r28, 0x3d	; 61
   122fc:	de b7       	in	r29, 0x3e	; 62
  postTask(createThreadTaskPosted, 1); 
   122fe:	87 e4       	ldi	r24, 0x47	; 71
   12300:	91 e9       	ldi	r25, 0x91	; 145
   12302:	61 e0       	ldi	r22, 0x01	; 1
   12304:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
   12308:	df 91       	pop	r29
   1230a:	cf 91       	pop	r28
   1230c:	08 95       	ret

0001230e <create_thread>:

}



//--------------------------------------------------------------------------


//Now adds the support for kernel built-in memory corrupt search and find 
//To extend to other platforms, this function prototype may need to be modified or encapsulated into modules 
//updated the romstart and romsize parameter in version 0.31 to support rom image loading conflict detection 

int create_thread( void( *fcn )(), uint16_t *ram_start, uint16_t *stack_ptr, uint16_t staticdatasize, uint8_t priority, char *threadName , uint16_t romstart, uint16_t romsize) {
   1230e:	af 92       	push	r10
   12310:	bf 92       	push	r11
   12312:	cf 92       	push	r12
   12314:	df 92       	push	r13
   12316:	ef 92       	push	r14
   12318:	ff 92       	push	r15
   1231a:	0f 93       	push	r16
   1231c:	cf 93       	push	r28
   1231e:	df 93       	push	r29
   12320:	cd b7       	in	r28, 0x3d	; 61
   12322:	de b7       	in	r29, 0x3e	; 62
   12324:	67 97       	sbiw	r28, 0x17	; 23
   12326:	0f b6       	in	r0, 0x3f	; 63
   12328:	f8 94       	cli
   1232a:	de bf       	out	0x3e, r29	; 62
   1232c:	0f be       	out	0x3f, r0	; 63
   1232e:	cd bf       	out	0x3d, r28	; 61
   12330:	98 87       	std	Y+8, r25	; 0x08
   12332:	8f 83       	std	Y+7, r24	; 0x07
   12334:	7a 87       	std	Y+10, r23	; 0x0a
   12336:	69 87       	std	Y+9, r22	; 0x09
   12338:	5c 87       	std	Y+12, r21	; 0x0c
   1233a:	4b 87       	std	Y+11, r20	; 0x0b
   1233c:	3e 87       	std	Y+14, r19	; 0x0e
   1233e:	2d 87       	std	Y+13, r18	; 0x0d
   12340:	0f 87       	std	Y+15, r16	; 0x0f
   12342:	f9 8a       	std	Y+17, r15	; 0x11
   12344:	e8 8a       	std	Y+16, r14	; 0x10
   12346:	db 8a       	std	Y+19, r13	; 0x13
   12348:	ca 8a       	std	Y+18, r12	; 0x12
   1234a:	bd 8a       	std	Y+21, r11	; 0x15
   1234c:	ac 8a       	std	Y+20, r10	; 0x14
   int i;
   _atomic_t currentatomic;
   
   //used for handling the built-in memory corrupt detection
   
   uint16_t *kernelptr;
   
   //we do not allow threads context to create new threads
   if ( is_thread()) {
   1234e:	0e 94 0b 91 	call	0x12216	; 0x12216 <is_thread>
   12352:	88 23       	and	r24, r24
   12354:	19 f0       	breq	.+6      	; 0x1235c <create_thread+0x4e>
      return ( 0 );
   12356:	1f 8a       	std	Y+23, r1	; 0x17
   12358:	1e 8a       	std	Y+22, r1	; 0x16
   1235a:	04 c1       	rjmp	.+520    	; 0x12564 <create_thread+0x256>
   } 

   if (stack_ptr > maxthreadrambound )
   1235c:	2b 85       	ldd	r18, Y+11	; 0x0b
   1235e:	3c 85       	ldd	r19, Y+12	; 0x0c
   12360:	80 91 0a 0a 	lds	r24, 0x0A0A
   12364:	90 91 0b 0a 	lds	r25, 0x0A0B
   12368:	82 17       	cp	r24, r18
   1236a:	93 07       	cpc	r25, r19
   1236c:	30 f4       	brcc	.+12     	; 0x1237a <create_thread+0x6c>
     maxthreadrambound = stack_ptr; 
   1236e:	8b 85       	ldd	r24, Y+11	; 0x0b
   12370:	9c 85       	ldd	r25, Y+12	; 0x0c
   12372:	90 93 0b 0a 	sts	0x0A0B, r25
   12376:	80 93 0a 0a 	sts	0x0A0A, r24

   
   //First loop all the way through the table and find an empty slot 
   //computation time for space here 
   
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
   1237a:	1e 82       	std	Y+6, r1	; 0x06
   1237c:	1d 82       	std	Y+5, r1	; 0x05
   1237e:	17 c0       	rjmp	.+46     	; 0x123ae <create_thread+0xa0>
      if ( thread_table[ i ].state == STATE_NULL ) {
   12380:	2d 81       	ldd	r18, Y+5	; 0x05
   12382:	3e 81       	ldd	r19, Y+6	; 0x06
   12384:	85 e2       	ldi	r24, 0x25	; 37
   12386:	90 e0       	ldi	r25, 0x00	; 0
   12388:	ac 01       	movw	r20, r24
   1238a:	24 9f       	mul	r18, r20
   1238c:	c0 01       	movw	r24, r0
   1238e:	25 9f       	mul	r18, r21
   12390:	90 0d       	add	r25, r0
   12392:	34 9f       	mul	r19, r20
   12394:	90 0d       	add	r25, r0
   12396:	11 24       	eor	r1, r1
   12398:	fc 01       	movw	r30, r24
   1239a:	e2 52       	subi	r30, 0x22	; 34
   1239c:	f7 4f       	sbci	r31, 0xF7	; 247
   1239e:	80 81       	ld	r24, Z
   123a0:	88 23       	and	r24, r24
   123a2:	51 f0       	breq	.+20     	; 0x123b8 <create_thread+0xaa>
   123a4:	8d 81       	ldd	r24, Y+5	; 0x05
   123a6:	9e 81       	ldd	r25, Y+6	; 0x06
   123a8:	01 96       	adiw	r24, 0x01	; 1
   123aa:	9e 83       	std	Y+6, r25	; 0x06
   123ac:	8d 83       	std	Y+5, r24	; 0x05
   123ae:	8d 81       	ldd	r24, Y+5	; 0x05
   123b0:	9e 81       	ldd	r25, Y+6	; 0x06
   123b2:	88 30       	cpi	r24, 0x08	; 8
   123b4:	91 05       	cpc	r25, r1
   123b6:	24 f3       	brlt	.-56     	; 0x12380 <create_thread+0x72>
         break;
      } 
   }
   
   //Cannot create thread, no resources... 
   if ( i == LITE_MAX_THREADS ) {
   123b8:	8d 81       	ldd	r24, Y+5	; 0x05
   123ba:	9e 81       	ldd	r25, Y+6	; 0x06
   123bc:	88 30       	cpi	r24, 0x08	; 8
   123be:	91 05       	cpc	r25, r1
   123c0:	19 f4       	brne	.+6      	; 0x123c8 <create_thread+0xba>
      return ( 0 );
   123c2:	1f 8a       	std	Y+23, r1	; 0x17
   123c4:	1e 8a       	std	Y+22, r1	; 0x16
   123c6:	ce c0       	rjmp	.+412    	; 0x12564 <create_thread+0x256>
   } 
   
   //Add the thread
   currentatomic = _atomic_start();
   123c8:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   123cc:	8c 83       	std	Y+4, r24	; 0x04
   
   //Populate the thread table
   current_thread = &thread_table[ i ];
   123ce:	2d 81       	ldd	r18, Y+5	; 0x05
   123d0:	3e 81       	ldd	r19, Y+6	; 0x06
   123d2:	85 e2       	ldi	r24, 0x25	; 37
   123d4:	90 e0       	ldi	r25, 0x00	; 0
   123d6:	ac 01       	movw	r20, r24
   123d8:	24 9f       	mul	r18, r20
   123da:	c0 01       	movw	r24, r0
   123dc:	25 9f       	mul	r18, r21
   123de:	90 0d       	add	r25, r0
   123e0:	34 9f       	mul	r19, r20
   123e2:	90 0d       	add	r25, r0
   123e4:	11 24       	eor	r1, r1
   123e6:	84 52       	subi	r24, 0x24	; 36
   123e8:	97 4f       	sbci	r25, 0xF7	; 247
   123ea:	90 93 db 08 	sts	0x08DB, r25
   123ee:	80 93 da 08 	sts	0x08DA, r24
   current_thread->sp = stack_ptr;
   123f2:	e0 91 da 08 	lds	r30, 0x08DA
   123f6:	f0 91 db 08 	lds	r31, 0x08DB
   123fa:	8b 85       	ldd	r24, Y+11	; 0x0b
   123fc:	9c 85       	ldd	r25, Y+12	; 0x0c
   123fe:	91 83       	std	Z+1, r25	; 0x01
   12400:	80 83       	st	Z, r24
   current_thread->state = STATE_ACTIVE;
   12402:	e0 91 da 08 	lds	r30, 0x08DA
   12406:	f0 91 db 08 	lds	r31, 0x08DB
   1240a:	82 e0       	ldi	r24, 0x02	; 2
   1240c:	82 83       	std	Z+2, r24	; 0x02
   current_thread->data.tp = fcn;
   1240e:	e0 91 da 08 	lds	r30, 0x08DA
   12412:	f0 91 db 08 	lds	r31, 0x08DB
   12416:	8f 81       	ldd	r24, Y+7	; 0x07
   12418:	98 85       	ldd	r25, Y+8	; 0x08
   1241a:	94 8f       	std	Z+28, r25	; 0x1c
   1241c:	83 8f       	std	Z+27, r24	; 0x1b
   current_thread->priority = priority;
   1241e:	e0 91 da 08 	lds	r30, 0x08DA
   12422:	f0 91 db 08 	lds	r31, 0x08DB
   12426:	8f 85       	ldd	r24, Y+15	; 0x0f
   12428:	83 83       	std	Z+3, r24	; 0x03
   current_thread->remaincredits = priority;
   1242a:	e0 91 da 08 	lds	r30, 0x08DA
   1242e:	f0 91 db 08 	lds	r31, 0x08DB
   12432:	8f 85       	ldd	r24, Y+15	; 0x0f
   12434:	84 83       	std	Z+4, r24	; 0x04
   current_thread->ramstart = ram_start;
   12436:	e0 91 da 08 	lds	r30, 0x08DA
   1243a:	f0 91 db 08 	lds	r31, 0x08DB
   1243e:	89 85       	ldd	r24, Y+9	; 0x09
   12440:	9a 85       	ldd	r25, Y+10	; 0x0a
   12442:	92 8b       	std	Z+18, r25	; 0x12
   12444:	81 8b       	std	Z+17, r24	; 0x11
   current_thread->ramend = stack_ptr;
   12446:	e0 91 da 08 	lds	r30, 0x08DA
   1244a:	f0 91 db 08 	lds	r31, 0x08DB
   1244e:	8b 85       	ldd	r24, Y+11	; 0x0b
   12450:	9c 85       	ldd	r25, Y+12	; 0x0c
   12452:	94 8b       	std	Z+20, r25	; 0x14
   12454:	83 8b       	std	Z+19, r24	; 0x13
   current_thread->sizeofBss = staticdatasize;
   12456:	e0 91 da 08 	lds	r30, 0x08DA
   1245a:	f0 91 db 08 	lds	r31, 0x08DB
   1245e:	8d 85       	ldd	r24, Y+13	; 0x0d
   12460:	9e 85       	ldd	r25, Y+14	; 0x0e
   12462:	96 8b       	std	Z+22, r25	; 0x16
   12464:	85 8b       	std	Z+21, r24	; 0x15
   current_thread->romstart = romstart; 
   12466:	e0 91 da 08 	lds	r30, 0x08DA
   1246a:	f0 91 db 08 	lds	r31, 0x08DB
   1246e:	8a 89       	ldd	r24, Y+18	; 0x12
   12470:	9b 89       	ldd	r25, Y+19	; 0x13
   12472:	90 8f       	std	Z+24, r25	; 0x18
   12474:	87 8b       	std	Z+23, r24	; 0x17
   current_thread->romsize = romsize; 
   12476:	e0 91 da 08 	lds	r30, 0x08DA
   1247a:	f0 91 db 08 	lds	r31, 0x08DB
   1247e:	8c 89       	ldd	r24, Y+20	; 0x14
   12480:	9d 89       	ldd	r25, Y+21	; 0x15
   12482:	92 8f       	std	Z+26, r25	; 0x1a
   12484:	81 8f       	std	Z+25, r24	; 0x19
   
   //COPY file name 
   {
      uint8_t templen;
      templen = mystrlen( threadName );
   12486:	88 89       	ldd	r24, Y+16	; 0x10
   12488:	99 89       	ldd	r25, Y+17	; 0x11
   1248a:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
   1248e:	89 83       	std	Y+1, r24	; 0x01
      mystrncpy(( char* )current_thread->threadName, ( char* )threadName, templen + 1 );
   12490:	89 81       	ldd	r24, Y+1	; 0x01
   12492:	48 2f       	mov	r20, r24
   12494:	4f 5f       	subi	r20, 0xFF	; 255
   12496:	80 91 da 08 	lds	r24, 0x08DA
   1249a:	90 91 db 08 	lds	r25, 0x08DB
   1249e:	05 96       	adiw	r24, 0x05	; 5
   124a0:	9c 01       	movw	r18, r24
   124a2:	88 89       	ldd	r24, Y+16	; 0x10
   124a4:	99 89       	ldd	r25, Y+17	; 0x11
   124a6:	bc 01       	movw	r22, r24
   124a8:	c9 01       	movw	r24, r18
   124aa:	0e 94 cb 99 	call	0x13396	; 0x13396 <mystrncpy>
   }
   
   //set up the corruption detection 

   kernelptr = ( uint16_t* )(( uint8_t* )ram_start + staticdatasize );
   124ae:	29 85       	ldd	r18, Y+9	; 0x09
   124b0:	3a 85       	ldd	r19, Y+10	; 0x0a
   124b2:	8d 85       	ldd	r24, Y+13	; 0x0d
   124b4:	9e 85       	ldd	r25, Y+14	; 0x0e
   124b6:	82 0f       	add	r24, r18
   124b8:	93 1f       	adc	r25, r19
   124ba:	9b 83       	std	Y+3, r25	; 0x03
   124bc:	8a 83       	std	Y+2, r24	; 0x02
   *kernelptr = 0xeeff;
   124be:	ea 81       	ldd	r30, Y+2	; 0x02
   124c0:	fb 81       	ldd	r31, Y+3	; 0x03
   124c2:	8f ef       	ldi	r24, 0xFF	; 255
   124c4:	9e ee       	ldi	r25, 0xEE	; 238
   124c6:	91 83       	std	Z+1, r25	; 0x01
   124c8:	80 83       	st	Z, r24
   *( kernelptr + 1 ) = 0xeeff;
   124ca:	8a 81       	ldd	r24, Y+2	; 0x02
   124cc:	9b 81       	ldd	r25, Y+3	; 0x03
   124ce:	fc 01       	movw	r30, r24
   124d0:	32 96       	adiw	r30, 0x02	; 2
   124d2:	8f ef       	ldi	r24, 0xFF	; 255
   124d4:	9e ee       	ldi	r25, 0xEE	; 238
   124d6:	91 83       	std	Z+1, r25	; 0x01
   124d8:	80 83       	st	Z, r24


   #ifdef PLATFORM_AVR   
   //Prepare the fcn pointer on the new stack, so it can be executed
   PREPARE_REG_FOR_STACK();
   124da:	8d b7       	in	r24, 0x3d	; 61
   124dc:	9e b7       	in	r25, 0x3e	; 62
   124de:	90 93 d0 08 	sts	0x08D0, r25
   124e2:	80 93 cf 08 	sts	0x08CF, r24
   124e6:	e0 91 da 08 	lds	r30, 0x08DA
   124ea:	f0 91 db 08 	lds	r31, 0x08DB
   124ee:	80 81       	ld	r24, Z
   124f0:	91 81       	ldd	r25, Z+1	; 0x01
   124f2:	9e bf       	out	0x3e, r25	; 62
   124f4:	8d bf       	out	0x3d, r24	; 61
   124f6:	8a e7       	ldi	r24, 0x7A	; 122
   124f8:	95 e9       	ldi	r25, 0x95	; 149
   124fa:	8f 93       	push	r24
   124fc:	9f 93       	push	r25
   124fe:	1e 82       	std	Y+6, r1	; 0x06
   12500:	1d 82       	std	Y+5, r1	; 0x05
   12502:	06 c0       	rjmp	.+12     	; 0x12510 <create_thread+0x202>
   12504:	1f 92       	push	r1
   12506:	8d 81       	ldd	r24, Y+5	; 0x05
   12508:	9e 81       	ldd	r25, Y+6	; 0x06
   1250a:	01 96       	adiw	r24, 0x01	; 1
   1250c:	9e 83       	std	Y+6, r25	; 0x06
   1250e:	8d 83       	std	Y+5, r24	; 0x05
   12510:	8d 81       	ldd	r24, Y+5	; 0x05
   12512:	9e 81       	ldd	r25, Y+6	; 0x06
   12514:	84 32       	cpi	r24, 0x24	; 36
   12516:	91 05       	cpc	r25, r1
   12518:	ac f3       	brlt	.-22     	; 0x12504 <create_thread+0x1f6>
   1251a:	e0 91 da 08 	lds	r30, 0x08DA
   1251e:	f0 91 db 08 	lds	r31, 0x08DB
   12522:	8d b7       	in	r24, 0x3d	; 61
   12524:	9e b7       	in	r25, 0x3e	; 62
   12526:	91 83       	std	Z+1, r25	; 0x01
   12528:	80 83       	st	Z, r24
   1252a:	80 91 cf 08 	lds	r24, 0x08CF
   1252e:	90 91 d0 08 	lds	r25, 0x08D0
   12532:	9e bf       	out	0x3e, r25	; 62
   12534:	8d bf       	out	0x3d, r24	; 61
   #endif


   current_thread = 0;
   12536:	10 92 db 08 	sts	0x08DB, r1
   1253a:	10 92 da 08 	sts	0x08DA, r1

   if (  ! thread_task_active ) {
   1253e:	80 91 07 0a 	lds	r24, 0x0A07
   12542:	88 23       	and	r24, r24
   12544:	41 f4       	brne	.+16     	; 0x12556 <create_thread+0x248>
      postTask( thread_task, 2 );
   12546:	89 e2       	ldi	r24, 0x29	; 41
   12548:	97 e9       	ldi	r25, 0x97	; 151
   1254a:	62 e0       	ldi	r22, 0x02	; 2
   1254c:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
      thread_task_active = 1;
   12550:	81 e0       	ldi	r24, 0x01	; 1
   12552:	80 93 07 0a 	sts	0x0A07, r24
   }

   _atomic_end( currentatomic );
   12556:	8c 81       	ldd	r24, Y+4	; 0x04
   12558:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>

   #ifdef TRACE_ENABLE
     #ifdef TRACE_ENABLE_THREADCREATE
		 addTrace(TRACE_THREADCREATE);  
     #endif
   #endif

   return ( 1 );
   1255c:	81 e0       	ldi	r24, 0x01	; 1
   1255e:	90 e0       	ldi	r25, 0x00	; 0
   12560:	9f 8b       	std	Y+23, r25	; 0x17
   12562:	8e 8b       	std	Y+22, r24	; 0x16
   12564:	8e 89       	ldd	r24, Y+22	; 0x16
   12566:	9f 89       	ldd	r25, Y+23	; 0x17
   12568:	67 96       	adiw	r28, 0x17	; 23
   1256a:	0f b6       	in	r0, 0x3f	; 63
   1256c:	f8 94       	cli
   1256e:	de bf       	out	0x3e, r29	; 62
   12570:	0f be       	out	0x3f, r0	; 63
   12572:	cd bf       	out	0x3d, r28	; 61
   12574:	df 91       	pop	r29
   12576:	cf 91       	pop	r28
   12578:	0f 91       	pop	r16
   1257a:	ff 90       	pop	r15
   1257c:	ef 90       	pop	r14
   1257e:	df 90       	pop	r13
   12580:	cf 90       	pop	r12
   12582:	bf 90       	pop	r11
   12584:	af 90       	pop	r10
   12586:	08 95       	ret

00012588 <setThreadTerminateFunction>:
}



/* Set up the destroy thread function call */

void setThreadTerminateFunction(uint8_t currentindex, void (*fp)()) {
   12588:	cf 93       	push	r28
   1258a:	df 93       	push	r29
   1258c:	cd b7       	in	r28, 0x3d	; 61
   1258e:	de b7       	in	r29, 0x3e	; 62
   12590:	23 97       	sbiw	r28, 0x03	; 3
   12592:	0f b6       	in	r0, 0x3f	; 63
   12594:	f8 94       	cli
   12596:	de bf       	out	0x3e, r29	; 62
   12598:	0f be       	out	0x3f, r0	; 63
   1259a:	cd bf       	out	0x3d, r28	; 61
   1259c:	89 83       	std	Y+1, r24	; 0x01
   1259e:	7b 83       	std	Y+3, r23	; 0x03
   125a0:	6a 83       	std	Y+2, r22	; 0x02
  
   
   thread_clear_func_table[currentindex] = fp;     
   125a2:	89 81       	ldd	r24, Y+1	; 0x01
   125a4:	99 27       	eor	r25, r25
   125a6:	88 0f       	add	r24, r24
   125a8:	99 1f       	adc	r25, r25
   125aa:	fc 01       	movw	r30, r24
   125ac:	e1 54       	subi	r30, 0x41	; 65
   125ae:	f7 4f       	sbci	r31, 0xF7	; 247
   125b0:	8a 81       	ldd	r24, Y+2	; 0x02
   125b2:	9b 81       	ldd	r25, Y+3	; 0x03
   125b4:	91 83       	std	Z+1, r25	; 0x01
   125b6:	80 83       	st	Z, r24
   125b8:	23 96       	adiw	r28, 0x03	; 3
   125ba:	0f b6       	in	r0, 0x3f	; 63
   125bc:	f8 94       	cli
   125be:	de bf       	out	0x3e, r29	; 62
   125c0:	0f be       	out	0x3f, r0	; 63
   125c2:	cd bf       	out	0x3d, r28	; 61
   125c4:	df 91       	pop	r29
   125c6:	cf 91       	pop	r28
   125c8:	08 95       	ret

000125ca <destroy_user_thread>:

}


/* destroy_user_thread
 * This routine is only called when a users thread returns.
 * It removes it from the thread table.
 */
void destroy_user_thread() {
   125ca:	cf 93       	push	r28
   125cc:	df 93       	push	r29
   125ce:	cd b7       	in	r28, 0x3d	; 61
   125d0:	de b7       	in	r29, 0x3e	; 62
   125d2:	27 97       	sbiw	r28, 0x07	; 7
   125d4:	0f b6       	in	r0, 0x3f	; 63
   125d6:	f8 94       	cli
   125d8:	de bf       	out	0x3e, r29	; 62
   125da:	0f be       	out	0x3f, r0	; 63
   125dc:	cd bf       	out	0x3d, r28	; 61
   uint8_t *start, *end; 
   _atomic_t currentatomic;
   int indexofthread; 

   currentatomic = _atomic_start();
   125de:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   125e2:	8b 83       	std	Y+3, r24	; 0x03
   current_thread->state = STATE_NULL;
   125e4:	e0 91 da 08 	lds	r30, 0x08DA
   125e8:	f0 91 db 08 	lds	r31, 0x08DB
   125ec:	12 82       	std	Z+2, r1	; 0x02

   start = (uint8_t *)current_thread->ramstart;
   125ee:	e0 91 da 08 	lds	r30, 0x08DA
   125f2:	f0 91 db 08 	lds	r31, 0x08DB
   125f6:	81 89       	ldd	r24, Z+17	; 0x11
   125f8:	92 89       	ldd	r25, Z+18	; 0x12
   125fa:	9f 83       	std	Y+7, r25	; 0x07
   125fc:	8e 83       	std	Y+6, r24	; 0x06
   end   = (uint8_t *)current_thread->ramend; 
   125fe:	e0 91 da 08 	lds	r30, 0x08DA
   12602:	f0 91 db 08 	lds	r31, 0x08DB
   12606:	83 89       	ldd	r24, Z+19	; 0x13
   12608:	94 89       	ldd	r25, Z+20	; 0x14
   1260a:	9d 83       	std	Y+5, r25	; 0x05
   1260c:	8c 83       	std	Y+4, r24	; 0x04
   
   deleteThreadRegistrationInReceiverHandles(start, end); 
   1260e:	8c 81       	ldd	r24, Y+4	; 0x04
   12610:	9d 81       	ldd	r25, Y+5	; 0x05
   12612:	2e 81       	ldd	r18, Y+6	; 0x06
   12614:	3f 81       	ldd	r19, Y+7	; 0x07
   12616:	bc 01       	movw	r22, r24
   12618:	c9 01       	movw	r24, r18
   1261a:	0e 94 91 89 	call	0x11322	; 0x11322 <deleteThreadRegistrationInReceiverHandles>
   indexofthread = getThreadIndexAddress();
   1261e:	0e 94 13 98 	call	0x13026	; 0x13026 <getThreadIndexAddress>
   12622:	9a 83       	std	Y+2, r25	; 0x02
   12624:	89 83       	std	Y+1, r24	; 0x01
   releaseMutexLockUponThreadKill(indexofthread); 
   12626:	89 81       	ldd	r24, Y+1	; 0x01
   12628:	0e 94 4c 8e 	call	0x11c98	; 0x11c98 <releaseMutexLockUponThreadKill>

   if (thread_clear_func_table[indexofthread] != NULL)
   1262c:	89 81       	ldd	r24, Y+1	; 0x01
   1262e:	9a 81       	ldd	r25, Y+2	; 0x02
   12630:	88 0f       	add	r24, r24
   12632:	99 1f       	adc	r25, r25
   12634:	fc 01       	movw	r30, r24
   12636:	e1 54       	subi	r30, 0x41	; 65
   12638:	f7 4f       	sbci	r31, 0xF7	; 247
   1263a:	80 81       	ld	r24, Z
   1263c:	91 81       	ldd	r25, Z+1	; 0x01
   1263e:	00 97       	sbiw	r24, 0x00	; 0
   12640:	a1 f0       	breq	.+40     	; 0x1266a <destroy_user_thread+0xa0>
        {
		 (*thread_clear_func_table[indexofthread])(); 
   12642:	89 81       	ldd	r24, Y+1	; 0x01
   12644:	9a 81       	ldd	r25, Y+2	; 0x02
   12646:	88 0f       	add	r24, r24
   12648:	99 1f       	adc	r25, r25
   1264a:	fc 01       	movw	r30, r24
   1264c:	e1 54       	subi	r30, 0x41	; 65
   1264e:	f7 4f       	sbci	r31, 0xF7	; 247
   12650:	01 90       	ld	r0, Z+
   12652:	f0 81       	ld	r31, Z
   12654:	e0 2d       	mov	r30, r0
   12656:	09 95       	icall
		 thread_clear_func_table[indexofthread] = NULL; 
   12658:	89 81       	ldd	r24, Y+1	; 0x01
   1265a:	9a 81       	ldd	r25, Y+2	; 0x02
   1265c:	88 0f       	add	r24, r24
   1265e:	99 1f       	adc	r25, r25
   12660:	fc 01       	movw	r30, r24
   12662:	e1 54       	subi	r30, 0x41	; 65
   12664:	f7 4f       	sbci	r31, 0xF7	; 247
   12666:	11 82       	std	Z+1, r1	; 0x01
   12668:	10 82       	st	Z, r1
		}
   
    #ifdef TRACE_ENABLE
     #ifdef TRACE_ENABLE_THREADDESTROY
		 addTrace(TRACE_THREADDESTROY);  
     #endif
   #endif
   
   
   thread_yield();
   1266a:	0e 94 9e 93 	call	0x1273c	; 0x1273c <thread_yield>
   _atomic_end( currentatomic );
   1266e:	8b 81       	ldd	r24, Y+3	; 0x03
   12670:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   12674:	27 96       	adiw	r28, 0x07	; 7
   12676:	0f b6       	in	r0, 0x3f	; 63
   12678:	f8 94       	cli
   1267a:	de bf       	out	0x3e, r29	; 62
   1267c:	0f be       	out	0x3f, r0	; 63
   1267e:	cd bf       	out	0x3d, r28	; 61
   12680:	df 91       	pop	r29
   12682:	cf 91       	pop	r28
   12684:	08 95       	ret

00012686 <lite_switch_to_user_thread>:
}



// These are new routines
/* lite_switch_to_user_thread()
 * This routine swaps the stack and allows a thread to run.
 */
void __attribute__(( noinline ))lite_switch_to_user_thread() /* __attribute__((naked))*/ {
   12686:	cf 93       	push	r28
   12688:	df 93       	push	r29
   1268a:	cd b7       	in	r28, 0x3d	; 61
   1268c:	de b7       	in	r29, 0x3e	; 62
   #ifdef TRACE_ENABLE
     #ifdef TRACE_ENABLE_CONTEXTSWITCH
     addTrace(TRACE_CONTEXTSWITCHTOUSERTHREAD); 
	 #endif
   #endif

  #ifdef PLATFORM_AVR   
   
   PUSH_REG_STATUS();
   1268e:	ff 93       	push	r31
   12690:	ff b7       	in	r31, 0x3f	; 63
   12692:	ff 93       	push	r31
   PUSH_GPR();
   12694:	0f 92       	push	r0
   12696:	1f 92       	push	r1
   12698:	2f 92       	push	r2
   1269a:	3f 92       	push	r3
   1269c:	4f 92       	push	r4
   1269e:	5f 92       	push	r5
   126a0:	6f 92       	push	r6
   126a2:	7f 92       	push	r7
   126a4:	8f 92       	push	r8
   126a6:	9f 92       	push	r9
   126a8:	af 92       	push	r10
   126aa:	bf 92       	push	r11
   126ac:	cf 92       	push	r12
   126ae:	df 92       	push	r13
   126b0:	ef 92       	push	r14
   126b2:	ff 92       	push	r15
   126b4:	0f 93       	push	r16
   126b6:	1f 93       	push	r17
   126b8:	2f 93       	push	r18
   126ba:	3f 93       	push	r19
   126bc:	4f 93       	push	r20
   126be:	5f 93       	push	r21
   126c0:	6f 93       	push	r22
   126c2:	7f 93       	push	r23
   126c4:	8f 93       	push	r24
   126c6:	9f 93       	push	r25
   126c8:	af 93       	push	r26
   126ca:	bf 93       	push	r27
   126cc:	cf 93       	push	r28
   126ce:	df 93       	push	r29
   126d0:	ef 93       	push	r30
   126d2:	ff 93       	push	r31
   SWAP_STACK_PTR( old_stack_ptr, current_thread->sp );
   126d4:	8d b7       	in	r24, 0x3d	; 61
   126d6:	9e b7       	in	r25, 0x3e	; 62
   126d8:	90 93 d0 08 	sts	0x08D0, r25
   126dc:	80 93 cf 08 	sts	0x08CF, r24
   126e0:	e0 91 da 08 	lds	r30, 0x08DA
   126e4:	f0 91 db 08 	lds	r31, 0x08DB
   126e8:	80 81       	ld	r24, Z
   126ea:	91 81       	ldd	r25, Z+1	; 0x01
   126ec:	9e bf       	out	0x3e, r25	; 62
   126ee:	8d bf       	out	0x3d, r24	; 61
   POP_GPR();
   126f0:	ff 91       	pop	r31
   126f2:	ef 91       	pop	r30
   126f4:	df 91       	pop	r29
   126f6:	cf 91       	pop	r28
   126f8:	bf 91       	pop	r27
   126fa:	af 91       	pop	r26
   126fc:	9f 91       	pop	r25
   126fe:	8f 91       	pop	r24
   12700:	7f 91       	pop	r23
   12702:	6f 91       	pop	r22
   12704:	5f 91       	pop	r21
   12706:	4f 91       	pop	r20
   12708:	3f 91       	pop	r19
   1270a:	2f 91       	pop	r18
   1270c:	1f 91       	pop	r17
   1270e:	0f 91       	pop	r16
   12710:	ff 90       	pop	r15
   12712:	ef 90       	pop	r14
   12714:	df 90       	pop	r13
   12716:	cf 90       	pop	r12
   12718:	bf 90       	pop	r11
   1271a:	af 90       	pop	r10
   1271c:	9f 90       	pop	r9
   1271e:	8f 90       	pop	r8
   12720:	7f 90       	pop	r7
   12722:	6f 90       	pop	r6
   12724:	5f 90       	pop	r5
   12726:	4f 90       	pop	r4
   12728:	3f 90       	pop	r3
   1272a:	2f 90       	pop	r2
   1272c:	1f 90       	pop	r1
   1272e:	0f 90       	pop	r0
   POP_REG_STATUS();
   12730:	ff 91       	pop	r31
   12732:	ff bf       	out	0x3f, r31	; 63
   12734:	ff 91       	pop	r31
   12736:	df 91       	pop	r29
   12738:	cf 91       	pop	r28
   1273a:	08 95       	ret

0001273c <thread_yield>:
   
   #endif
   
   //_enable_interrupt(); 
   return ;
}


//-------------------------------------------------------------------------
void __attribute__(( noinline ))thread_yield() /* __attribute__((noinline))*/ {
   1273c:	cf 93       	push	r28
   1273e:	df 93       	push	r29
   12740:	cd b7       	in	r28, 0x3d	; 61
   12742:	de b7       	in	r29, 0x3e	; 62
	
	#ifdef PLATFORM_AVR
   PUSH_REG_STATUS();
   12744:	ff 93       	push	r31
   12746:	ff b7       	in	r31, 0x3f	; 63
   12748:	ff 93       	push	r31
   PUSH_GPR();
   1274a:	0f 92       	push	r0
   1274c:	1f 92       	push	r1
   1274e:	2f 92       	push	r2
   12750:	3f 92       	push	r3
   12752:	4f 92       	push	r4
   12754:	5f 92       	push	r5
   12756:	6f 92       	push	r6
   12758:	7f 92       	push	r7
   1275a:	8f 92       	push	r8
   1275c:	9f 92       	push	r9
   1275e:	af 92       	push	r10
   12760:	bf 92       	push	r11
   12762:	cf 92       	push	r12
   12764:	df 92       	push	r13
   12766:	ef 92       	push	r14
   12768:	ff 92       	push	r15
   1276a:	0f 93       	push	r16
   1276c:	1f 93       	push	r17
   1276e:	2f 93       	push	r18
   12770:	3f 93       	push	r19
   12772:	4f 93       	push	r20
   12774:	5f 93       	push	r21
   12776:	6f 93       	push	r22
   12778:	7f 93       	push	r23
   1277a:	8f 93       	push	r24
   1277c:	9f 93       	push	r25
   1277e:	af 93       	push	r26
   12780:	bf 93       	push	r27
   12782:	cf 93       	push	r28
   12784:	df 93       	push	r29
   12786:	ef 93       	push	r30
   12788:	ff 93       	push	r31
   //Now swap the stacks back
   SWAP_STACK_PTR( current_thread->sp, old_stack_ptr );
   1278a:	e0 91 da 08 	lds	r30, 0x08DA
   1278e:	f0 91 db 08 	lds	r31, 0x08DB
   12792:	8d b7       	in	r24, 0x3d	; 61
   12794:	9e b7       	in	r25, 0x3e	; 62
   12796:	91 83       	std	Z+1, r25	; 0x01
   12798:	80 83       	st	Z, r24
   1279a:	80 91 cf 08 	lds	r24, 0x08CF
   1279e:	90 91 d0 08 	lds	r25, 0x08D0
   127a2:	9e bf       	out	0x3e, r25	; 62
   127a4:	8d bf       	out	0x3d, r24	; 61
   POP_GPR();
   127a6:	ff 91       	pop	r31
   127a8:	ef 91       	pop	r30
   127aa:	df 91       	pop	r29
   127ac:	cf 91       	pop	r28
   127ae:	bf 91       	pop	r27
   127b0:	af 91       	pop	r26
   127b2:	9f 91       	pop	r25
   127b4:	8f 91       	pop	r24
   127b6:	7f 91       	pop	r23
   127b8:	6f 91       	pop	r22
   127ba:	5f 91       	pop	r21
   127bc:	4f 91       	pop	r20
   127be:	3f 91       	pop	r19
   127c0:	2f 91       	pop	r18
   127c2:	1f 91       	pop	r17
   127c4:	0f 91       	pop	r16
   127c6:	ff 90       	pop	r15
   127c8:	ef 90       	pop	r14
   127ca:	df 90       	pop	r13
   127cc:	cf 90       	pop	r12
   127ce:	bf 90       	pop	r11
   127d0:	af 90       	pop	r10
   127d2:	9f 90       	pop	r9
   127d4:	8f 90       	pop	r8
   127d6:	7f 90       	pop	r7
   127d8:	6f 90       	pop	r6
   127da:	5f 90       	pop	r5
   127dc:	4f 90       	pop	r4
   127de:	3f 90       	pop	r3
   127e0:	2f 90       	pop	r2
   127e2:	1f 90       	pop	r1
   127e4:	0f 90       	pop	r0
   POP_REG_STATUS();
   127e6:	ff 91       	pop	r31
   127e8:	ff bf       	out	0x3f, r31	; 63
   127ea:	ff 91       	pop	r31
   127ec:	df 91       	pop	r29
   127ee:	cf 91       	pop	r28
   127f0:	08 95       	ret

000127f2 <sleepThread>:
   #endif
   
   #ifdef TRACE_ENABLE
     #ifdef TRACE_ENABLE_CONTEXTSWITCH
		 addTrace(TRACE_CONTEXTSWITCHFROMUSERTHREAD);  
     #endif
   #endif
}





/* thread_sleep
 * This routine puts the current thread into a sleeping state.
 * It will not ever wake up until another task or thread wakes it up
 */
void sleepThread( uint16_t milli ) {
   127f2:	cf 93       	push	r28
   127f4:	df 93       	push	r29
   127f6:	cd b7       	in	r28, 0x3d	; 61
   127f8:	de b7       	in	r29, 0x3e	; 62
   127fa:	22 97       	sbiw	r28, 0x02	; 2
   127fc:	0f b6       	in	r0, 0x3f	; 63
   127fe:	f8 94       	cli
   12800:	de bf       	out	0x3e, r29	; 62
   12802:	0f be       	out	0x3f, r0	; 63
   12804:	cd bf       	out	0x3d, r28	; 61
   12806:	9a 83       	std	Y+2, r25	; 0x02
   12808:	89 83       	std	Y+1, r24	; 0x01
   if (  ! is_thread()) {
   1280a:	0e 94 0b 91 	call	0x12216	; 0x12216 <is_thread>
   1280e:	88 23       	and	r24, r24
   12810:	81 f0       	breq	.+32     	; 0x12832 <sleepThread+0x40>
      return ;
   } 
   //this is insid the thread!
   current_thread->state = STATE_PRESLEEP;
   12812:	e0 91 da 08 	lds	r30, 0x08DA
   12816:	f0 91 db 08 	lds	r31, 0x08DB
   1281a:	84 e0       	ldi	r24, 0x04	; 4
   1281c:	82 83       	std	Z+2, r24	; 0x02
   current_thread->data.sleepstate.sleeptime = milli;
   1281e:	e0 91 da 08 	lds	r30, 0x08DA
   12822:	f0 91 db 08 	lds	r31, 0x08DB
   12826:	89 81       	ldd	r24, Y+1	; 0x01
   12828:	9a 81       	ldd	r25, Y+2	; 0x02
   1282a:	94 8f       	std	Z+28, r25	; 0x1c
   1282c:	83 8f       	std	Z+27, r24	; 0x1b
   thread_yield();
   1282e:	0e 94 9e 93 	call	0x1273c	; 0x1273c <thread_yield>
   12832:	22 96       	adiw	r28, 0x02	; 2
   12834:	0f b6       	in	r0, 0x3f	; 63
   12836:	f8 94       	cli
   12838:	de bf       	out	0x3e, r29	; 62
   1283a:	0f be       	out	0x3f, r0	; 63
   1283c:	cd bf       	out	0x3d, r28	; 61
   1283e:	df 91       	pop	r29
   12840:	cf 91       	pop	r28
   12842:	08 95       	ret

00012844 <threads_handle_service>:
}




//This routine is called to perform system level utility change and schedules thread_task again 
void threads_handle_service() /*__attribute__((noinline))*/ {
   12844:	cf 93       	push	r28
   12846:	df 93       	push	r29
   12848:	cd b7       	in	r28, 0x3d	; 61
   1284a:	de b7       	in	r29, 0x3e	; 62
   1284c:	23 97       	sbiw	r28, 0x03	; 3
   1284e:	0f b6       	in	r0, 0x3f	; 63
   12850:	f8 94       	cli
   12852:	de bf       	out	0x3e, r29	; 62
   12854:	0f be       	out	0x3f, r0	; 63
   12856:	cd bf       	out	0x3d, r28	; 61
   uint8_t i;
   uint8_t thread_presleep;
   _atomic_t currentatomic;
   currentatomic = _atomic_start();
   12858:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   1285c:	89 83       	std	Y+1, r24	; 0x01
   thread_presleep = 0;
   1285e:	1a 82       	std	Y+2, r1	; 0x02
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
   12860:	1b 82       	std	Y+3, r1	; 0x03
   12862:	16 c0       	rjmp	.+44     	; 0x12890 <threads_handle_service+0x4c>
      if ( thread_table[ i ].state == STATE_PRESLEEP ) {
   12864:	8b 81       	ldd	r24, Y+3	; 0x03
   12866:	28 2f       	mov	r18, r24
   12868:	33 27       	eor	r19, r19
   1286a:	85 e2       	ldi	r24, 0x25	; 37
   1286c:	90 e0       	ldi	r25, 0x00	; 0
   1286e:	ac 01       	movw	r20, r24
   12870:	24 9f       	mul	r18, r20
   12872:	c0 01       	movw	r24, r0
   12874:	25 9f       	mul	r18, r21
   12876:	90 0d       	add	r25, r0
   12878:	34 9f       	mul	r19, r20
   1287a:	90 0d       	add	r25, r0
   1287c:	11 24       	eor	r1, r1
   1287e:	fc 01       	movw	r30, r24
   12880:	e2 52       	subi	r30, 0x22	; 34
   12882:	f7 4f       	sbci	r31, 0xF7	; 247
   12884:	80 81       	ld	r24, Z
   12886:	84 30       	cpi	r24, 0x04	; 4
   12888:	31 f0       	breq	.+12     	; 0x12896 <threads_handle_service+0x52>
   1288a:	8b 81       	ldd	r24, Y+3	; 0x03
   1288c:	8f 5f       	subi	r24, 0xFF	; 255
   1288e:	8b 83       	std	Y+3, r24	; 0x03
   12890:	8b 81       	ldd	r24, Y+3	; 0x03
   12892:	88 30       	cpi	r24, 0x08	; 8
   12894:	38 f3       	brcs	.-50     	; 0x12864 <threads_handle_service+0x20>
         break;
      }
   }
   thread_presleep = ( i != LITE_MAX_THREADS );
   12896:	1a 82       	std	Y+2, r1	; 0x02
   12898:	8b 81       	ldd	r24, Y+3	; 0x03
   1289a:	88 30       	cpi	r24, 0x08	; 8
   1289c:	11 f0       	breq	.+4      	; 0x128a2 <threads_handle_service+0x5e>
   1289e:	81 e0       	ldi	r24, 0x01	; 1
   128a0:	8a 83       	std	Y+2, r24	; 0x02
   
   if ( thread_presleep ) {
   128a2:	8a 81       	ldd	r24, Y+2	; 0x02
   128a4:	88 23       	and	r24, r24
   128a6:	b1 f1       	breq	.+108    	; 0x12914 <threads_handle_service+0xd0>
      postTask( threads_handle_service, 3 );
   128a8:	82 e2       	ldi	r24, 0x22	; 34
   128aa:	94 e9       	ldi	r25, 0x94	; 148
   128ac:	63 e0       	ldi	r22, 0x03	; 3
   128ae:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
      thread_table[ i ].state = STATE_SLEEP;
   128b2:	8b 81       	ldd	r24, Y+3	; 0x03
   128b4:	28 2f       	mov	r18, r24
   128b6:	33 27       	eor	r19, r19
   128b8:	85 e2       	ldi	r24, 0x25	; 37
   128ba:	90 e0       	ldi	r25, 0x00	; 0
   128bc:	ac 01       	movw	r20, r24
   128be:	24 9f       	mul	r18, r20
   128c0:	c0 01       	movw	r24, r0
   128c2:	25 9f       	mul	r18, r21
   128c4:	90 0d       	add	r25, r0
   128c6:	34 9f       	mul	r19, r20
   128c8:	90 0d       	add	r25, r0
   128ca:	11 24       	eor	r1, r1
   128cc:	fc 01       	movw	r30, r24
   128ce:	e2 52       	subi	r30, 0x22	; 34
   128d0:	f7 4f       	sbci	r31, 0xF7	; 247
   128d2:	85 e0       	ldi	r24, 0x05	; 5
   128d4:	80 83       	st	Z, r24
      _atomic_end( currentatomic );
   128d6:	89 81       	ldd	r24, Y+1	; 0x01
   128d8:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
     // TimerM_Timer_start( i, TIMER_ONE_SHOT, thread_table[ i ].data.sleepstate.sleeptime );
      GenericTimerStart(i, TIMER_ONE_SHOT, thread_table[ i ].data.sleepstate.sleeptime); 
   128dc:	8b 81       	ldd	r24, Y+3	; 0x03
   128de:	28 2f       	mov	r18, r24
   128e0:	33 27       	eor	r19, r19
   128e2:	85 e2       	ldi	r24, 0x25	; 37
   128e4:	90 e0       	ldi	r25, 0x00	; 0
   128e6:	ac 01       	movw	r20, r24
   128e8:	24 9f       	mul	r18, r20
   128ea:	c0 01       	movw	r24, r0
   128ec:	25 9f       	mul	r18, r21
   128ee:	90 0d       	add	r25, r0
   128f0:	34 9f       	mul	r19, r20
   128f2:	90 0d       	add	r25, r0
   128f4:	11 24       	eor	r1, r1
   128f6:	fc 01       	movw	r30, r24
   128f8:	e9 50       	subi	r30, 0x09	; 9
   128fa:	f7 4f       	sbci	r31, 0xF7	; 247
   128fc:	80 81       	ld	r24, Z
   128fe:	91 81       	ldd	r25, Z+1	; 0x01
   12900:	aa 27       	eor	r26, r26
   12902:	bb 27       	eor	r27, r27
   12904:	9c 01       	movw	r18, r24
   12906:	ad 01       	movw	r20, r26
   12908:	61 e0       	ldi	r22, 0x01	; 1
   1290a:	8b 81       	ldd	r24, Y+3	; 0x03
   1290c:	0e 94 0a 85 	call	0x10a14	; 0x10a14 <GenericTimerStart>
            thread_presleep = 0;
   12910:	1a 82       	std	Y+2, r1	; 0x02
      return ;
   12912:	08 c0       	rjmp	.+16     	; 0x12924 <threads_handle_service+0xe0>
   }
   
   postTask( thread_task, 2 );
   12914:	89 e2       	ldi	r24, 0x29	; 41
   12916:	97 e9       	ldi	r25, 0x97	; 151
   12918:	62 e0       	ldi	r22, 0x02	; 2
   1291a:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
   _atomic_end( currentatomic );
   1291e:	89 81       	ldd	r24, Y+1	; 0x01
   12920:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   12924:	23 96       	adiw	r28, 0x03	; 3
   12926:	0f b6       	in	r0, 0x3f	; 63
   12928:	f8 94       	cli
   1292a:	de bf       	out	0x3e, r29	; 62
   1292c:	0f be       	out	0x3f, r0	; 63
   1292e:	cd bf       	out	0x3d, r28	; 61
   12930:	df 91       	pop	r29
   12932:	cf 91       	pop	r28
   12934:	08 95       	ret

00012936 <memory_conflict_detect>:
}



uint8_t memory_conflict_detect(uint16_t createflashromstart, uint16_t createflashromsize, uint16_t ramstackstart, uint16_t ramstackend )
{
   12936:	cf 93       	push	r28
   12938:	df 93       	push	r29
   1293a:	cd b7       	in	r28, 0x3d	; 61
   1293c:	de b7       	in	r29, 0x3e	; 62
   1293e:	63 97       	sbiw	r28, 0x13	; 19
   12940:	0f b6       	in	r0, 0x3f	; 63
   12942:	f8 94       	cli
   12944:	de bf       	out	0x3e, r29	; 62
   12946:	0f be       	out	0x3f, r0	; 63
   12948:	cd bf       	out	0x3d, r28	; 61
   1294a:	9b 87       	std	Y+11, r25	; 0x0b
   1294c:	8a 87       	std	Y+10, r24	; 0x0a
   1294e:	7d 87       	std	Y+13, r23	; 0x0d
   12950:	6c 87       	std	Y+12, r22	; 0x0c
   12952:	5f 87       	std	Y+15, r21	; 0x0f
   12954:	4e 87       	std	Y+14, r20	; 0x0e
   12956:	39 8b       	std	Y+17, r19	; 0x11
   12958:	28 8b       	std	Y+16, r18	; 0x10
   uint8_t i; 
   uint16_t userthreadromstart;
   uint16_t userthreadromend;
   uint16_t userthreadramstart; 
   uint16_t userthreadramend; 
   
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
   1295a:	19 86       	std	Y+9, r1	; 0x09
   1295c:	ba c0       	rjmp	.+372    	; 0x12ad2 <memory_conflict_detect+0x19c>
      if ( thread_table[ i ].state != STATE_NULL ) {
   1295e:	89 85       	ldd	r24, Y+9	; 0x09
   12960:	28 2f       	mov	r18, r24
   12962:	33 27       	eor	r19, r19
   12964:	85 e2       	ldi	r24, 0x25	; 37
   12966:	90 e0       	ldi	r25, 0x00	; 0
   12968:	ac 01       	movw	r20, r24
   1296a:	24 9f       	mul	r18, r20
   1296c:	c0 01       	movw	r24, r0
   1296e:	25 9f       	mul	r18, r21
   12970:	90 0d       	add	r25, r0
   12972:	34 9f       	mul	r19, r20
   12974:	90 0d       	add	r25, r0
   12976:	11 24       	eor	r1, r1
   12978:	fc 01       	movw	r30, r24
   1297a:	e2 52       	subi	r30, 0x22	; 34
   1297c:	f7 4f       	sbci	r31, 0xF7	; 247
   1297e:	80 81       	ld	r24, Z
   12980:	88 23       	and	r24, r24
   12982:	09 f4       	brne	.+2      	; 0x12986 <memory_conflict_detect+0x50>
   12984:	a3 c0       	rjmp	.+326    	; 0x12acc <memory_conflict_detect+0x196>
       
     if (thread_table[i].romstart == 0)
   12986:	89 85       	ldd	r24, Y+9	; 0x09
   12988:	28 2f       	mov	r18, r24
   1298a:	33 27       	eor	r19, r19
   1298c:	85 e2       	ldi	r24, 0x25	; 37
   1298e:	90 e0       	ldi	r25, 0x00	; 0
   12990:	ac 01       	movw	r20, r24
   12992:	24 9f       	mul	r18, r20
   12994:	c0 01       	movw	r24, r0
   12996:	25 9f       	mul	r18, r21
   12998:	90 0d       	add	r25, r0
   1299a:	34 9f       	mul	r19, r20
   1299c:	90 0d       	add	r25, r0
   1299e:	11 24       	eor	r1, r1
   129a0:	fc 01       	movw	r30, r24
   129a2:	ed 50       	subi	r30, 0x0D	; 13
   129a4:	f7 4f       	sbci	r31, 0xF7	; 247
   129a6:	80 81       	ld	r24, Z
   129a8:	91 81       	ldd	r25, Z+1	; 0x01
   129aa:	00 97       	sbiw	r24, 0x00	; 0
   129ac:	09 f4       	brne	.+2      	; 0x129b0 <memory_conflict_detect+0x7a>
   129ae:	8e c0       	rjmp	.+284    	; 0x12acc <memory_conflict_detect+0x196>
     	 continue;     	 
     
     userthreadromstart =  thread_table[i].romstart ;  
   129b0:	89 85       	ldd	r24, Y+9	; 0x09
   129b2:	28 2f       	mov	r18, r24
   129b4:	33 27       	eor	r19, r19
   129b6:	85 e2       	ldi	r24, 0x25	; 37
   129b8:	90 e0       	ldi	r25, 0x00	; 0
   129ba:	ac 01       	movw	r20, r24
   129bc:	24 9f       	mul	r18, r20
   129be:	c0 01       	movw	r24, r0
   129c0:	25 9f       	mul	r18, r21
   129c2:	90 0d       	add	r25, r0
   129c4:	34 9f       	mul	r19, r20
   129c6:	90 0d       	add	r25, r0
   129c8:	11 24       	eor	r1, r1
   129ca:	fc 01       	movw	r30, r24
   129cc:	ed 50       	subi	r30, 0x0D	; 13
   129ce:	f7 4f       	sbci	r31, 0xF7	; 247
   129d0:	80 81       	ld	r24, Z
   129d2:	91 81       	ldd	r25, Z+1	; 0x01
   129d4:	98 87       	std	Y+8, r25	; 0x08
   129d6:	8f 83       	std	Y+7, r24	; 0x07
     userthreadromend = thread_table[i].romsize/2 + userthreadromstart; 
   129d8:	89 85       	ldd	r24, Y+9	; 0x09
   129da:	28 2f       	mov	r18, r24
   129dc:	33 27       	eor	r19, r19
   129de:	85 e2       	ldi	r24, 0x25	; 37
   129e0:	90 e0       	ldi	r25, 0x00	; 0
   129e2:	ac 01       	movw	r20, r24
   129e4:	24 9f       	mul	r18, r20
   129e6:	c0 01       	movw	r24, r0
   129e8:	25 9f       	mul	r18, r21
   129ea:	90 0d       	add	r25, r0
   129ec:	34 9f       	mul	r19, r20
   129ee:	90 0d       	add	r25, r0
   129f0:	11 24       	eor	r1, r1
   129f2:	fc 01       	movw	r30, r24
   129f4:	eb 50       	subi	r30, 0x0B	; 11
   129f6:	f7 4f       	sbci	r31, 0xF7	; 247
   129f8:	80 81       	ld	r24, Z
   129fa:	91 81       	ldd	r25, Z+1	; 0x01
   129fc:	9c 01       	movw	r18, r24
   129fe:	36 95       	lsr	r19
   12a00:	27 95       	ror	r18
   12a02:	8f 81       	ldd	r24, Y+7	; 0x07
   12a04:	98 85       	ldd	r25, Y+8	; 0x08
   12a06:	82 0f       	add	r24, r18
   12a08:	93 1f       	adc	r25, r19
   12a0a:	9e 83       	std	Y+6, r25	; 0x06
   12a0c:	8d 83       	std	Y+5, r24	; 0x05
     userthreadramstart = (uint16_t)thread_table[i].ramstart; 
   12a0e:	89 85       	ldd	r24, Y+9	; 0x09
   12a10:	28 2f       	mov	r18, r24
   12a12:	33 27       	eor	r19, r19
   12a14:	85 e2       	ldi	r24, 0x25	; 37
   12a16:	90 e0       	ldi	r25, 0x00	; 0
   12a18:	ac 01       	movw	r20, r24
   12a1a:	24 9f       	mul	r18, r20
   12a1c:	c0 01       	movw	r24, r0
   12a1e:	25 9f       	mul	r18, r21
   12a20:	90 0d       	add	r25, r0
   12a22:	34 9f       	mul	r19, r20
   12a24:	90 0d       	add	r25, r0
   12a26:	11 24       	eor	r1, r1
   12a28:	fc 01       	movw	r30, r24
   12a2a:	e3 51       	subi	r30, 0x13	; 19
   12a2c:	f7 4f       	sbci	r31, 0xF7	; 247
   12a2e:	80 81       	ld	r24, Z
   12a30:	91 81       	ldd	r25, Z+1	; 0x01
   12a32:	9c 83       	std	Y+4, r25	; 0x04
   12a34:	8b 83       	std	Y+3, r24	; 0x03
     userthreadramend = (uint16_t)thread_table[i].ramend; 
   12a36:	89 85       	ldd	r24, Y+9	; 0x09
   12a38:	28 2f       	mov	r18, r24
   12a3a:	33 27       	eor	r19, r19
   12a3c:	85 e2       	ldi	r24, 0x25	; 37
   12a3e:	90 e0       	ldi	r25, 0x00	; 0
   12a40:	ac 01       	movw	r20, r24
   12a42:	24 9f       	mul	r18, r20
   12a44:	c0 01       	movw	r24, r0
   12a46:	25 9f       	mul	r18, r21
   12a48:	90 0d       	add	r25, r0
   12a4a:	34 9f       	mul	r19, r20
   12a4c:	90 0d       	add	r25, r0
   12a4e:	11 24       	eor	r1, r1
   12a50:	fc 01       	movw	r30, r24
   12a52:	e1 51       	subi	r30, 0x11	; 17
   12a54:	f7 4f       	sbci	r31, 0xF7	; 247
   12a56:	80 81       	ld	r24, Z
   12a58:	91 81       	ldd	r25, Z+1	; 0x01
   12a5a:	9a 83       	std	Y+2, r25	; 0x02
   12a5c:	89 83       	std	Y+1, r24	; 0x01
     
     if (!((createflashromstart > userthreadromend + 2) || ( createflashromstart + createflashromsize/2 < userthreadromstart - 2)))
   12a5e:	8d 81       	ldd	r24, Y+5	; 0x05
   12a60:	9e 81       	ldd	r25, Y+6	; 0x06
   12a62:	9c 01       	movw	r18, r24
   12a64:	2e 5f       	subi	r18, 0xFE	; 254
   12a66:	3f 4f       	sbci	r19, 0xFF	; 255
   12a68:	8a 85       	ldd	r24, Y+10	; 0x0a
   12a6a:	9b 85       	ldd	r25, Y+11	; 0x0b
   12a6c:	28 17       	cp	r18, r24
   12a6e:	39 07       	cpc	r19, r25
   12a70:	a0 f0       	brcs	.+40     	; 0x12a9a <memory_conflict_detect+0x164>
   12a72:	8c 85       	ldd	r24, Y+12	; 0x0c
   12a74:	9d 85       	ldd	r25, Y+13	; 0x0d
   12a76:	9c 01       	movw	r18, r24
   12a78:	36 95       	lsr	r19
   12a7a:	27 95       	ror	r18
   12a7c:	8a 85       	ldd	r24, Y+10	; 0x0a
   12a7e:	9b 85       	ldd	r25, Y+11	; 0x0b
   12a80:	28 0f       	add	r18, r24
   12a82:	39 1f       	adc	r19, r25
   12a84:	8f 81       	ldd	r24, Y+7	; 0x07
   12a86:	98 85       	ldd	r25, Y+8	; 0x08
   12a88:	02 97       	sbiw	r24, 0x02	; 2
   12a8a:	28 17       	cp	r18, r24
   12a8c:	39 07       	cpc	r19, r25
   12a8e:	28 f0       	brcs	.+10     	; 0x12a9a <memory_conflict_detect+0x164>
     	  
     	    return 1; 
   12a90:	81 e0       	ldi	r24, 0x01	; 1
   12a92:	90 e0       	ldi	r25, 0x00	; 0
   12a94:	9b 8b       	std	Y+19, r25	; 0x13
   12a96:	8a 8b       	std	Y+18, r24	; 0x12
   12a98:	22 c0       	rjmp	.+68     	; 0x12ade <memory_conflict_detect+0x1a8>
     	    
     	    
     if (!((ramstackstart > userthreadramend + 1) || ( ramstackend  < userthreadramstart - 1)))	    
   12a9a:	89 81       	ldd	r24, Y+1	; 0x01
   12a9c:	9a 81       	ldd	r25, Y+2	; 0x02
   12a9e:	9c 01       	movw	r18, r24
   12aa0:	2f 5f       	subi	r18, 0xFF	; 255
   12aa2:	3f 4f       	sbci	r19, 0xFF	; 255
   12aa4:	8e 85       	ldd	r24, Y+14	; 0x0e
   12aa6:	9f 85       	ldd	r25, Y+15	; 0x0f
   12aa8:	28 17       	cp	r18, r24
   12aaa:	39 07       	cpc	r19, r25
   12aac:	78 f0       	brcs	.+30     	; 0x12acc <memory_conflict_detect+0x196>
   12aae:	8b 81       	ldd	r24, Y+3	; 0x03
   12ab0:	9c 81       	ldd	r25, Y+4	; 0x04
   12ab2:	9c 01       	movw	r18, r24
   12ab4:	21 50       	subi	r18, 0x01	; 1
   12ab6:	30 40       	sbci	r19, 0x00	; 0
   12ab8:	88 89       	ldd	r24, Y+16	; 0x10
   12aba:	99 89       	ldd	r25, Y+17	; 0x11
   12abc:	82 17       	cp	r24, r18
   12abe:	93 07       	cpc	r25, r19
   12ac0:	28 f0       	brcs	.+10     	; 0x12acc <memory_conflict_detect+0x196>
     	    
     	    return 1; 
   12ac2:	41 e0       	ldi	r20, 0x01	; 1
   12ac4:	50 e0       	ldi	r21, 0x00	; 0
   12ac6:	5b 8b       	std	Y+19, r21	; 0x13
   12ac8:	4a 8b       	std	Y+18, r20	; 0x12
   12aca:	09 c0       	rjmp	.+18     	; 0x12ade <memory_conflict_detect+0x1a8>
   12acc:	89 85       	ldd	r24, Y+9	; 0x09
   12ace:	8f 5f       	subi	r24, 0xFF	; 255
   12ad0:	89 87       	std	Y+9, r24	; 0x09
   12ad2:	89 85       	ldd	r24, Y+9	; 0x09
   12ad4:	88 30       	cpi	r24, 0x08	; 8
   12ad6:	08 f4       	brcc	.+2      	; 0x12ada <memory_conflict_detect+0x1a4>
   12ad8:	42 cf       	rjmp	.-380    	; 0x1295e <memory_conflict_detect+0x28>
     	
		 }
		}
		return 0; 
   12ada:	1b 8a       	std	Y+19, r1	; 0x13
   12adc:	1a 8a       	std	Y+18, r1	; 0x12
   12ade:	8a 89       	ldd	r24, Y+18	; 0x12
   12ae0:	9b 89       	ldd	r25, Y+19	; 0x13
   12ae2:	63 96       	adiw	r28, 0x13	; 19
   12ae4:	0f b6       	in	r0, 0x3f	; 63
   12ae6:	f8 94       	cli
   12ae8:	de bf       	out	0x3e, r29	; 62
   12aea:	0f be       	out	0x3f, r0	; 63
   12aec:	cd bf       	out	0x3d, r28	; 61
   12aee:	df 91       	pop	r29
   12af0:	cf 91       	pop	r28
   12af2:	08 95       	ret

00012af4 <thread_func_dispatcher>:
		  
}


//this executes and cleans up a thread
//Make sure that no variables are allocated
// also make sure no functions are called with attributes
void thread_func_dispatcher()__attribute__(( naked ));
void thread_func_dispatcher() {
   12af4:	e0 91 da 08 	lds	r30, 0x08DA
   12af8:	f0 91 db 08 	lds	r31, 0x08DB
   12afc:	83 8d       	ldd	r24, Z+27	; 0x1b
   12afe:	94 8d       	ldd	r25, Z+28	; 0x1c
   12b00:	0e 94 a5 90 	call	0x1214a	; 0x1214a <call_fcn_ptr>
   //    (*current_thread->data.tp)();
   call_fcn_ptr( current_thread->data.tp );
   destroy_user_thread();
   12b04:	0e 94 e5 92 	call	0x125ca	; 0x125ca <destroy_user_thread>

00012b08 <thread_get_next>:
}





//This function uses the remaining credits to find out the appropriate next thread and returns it 
inline int thread_get_next() {
   12b08:	cf 93       	push	r28
   12b0a:	df 93       	push	r29
   12b0c:	cd b7       	in	r28, 0x3d	; 61
   12b0e:	de b7       	in	r29, 0x3e	; 62
   12b10:	29 97       	sbiw	r28, 0x09	; 9
   12b12:	0f b6       	in	r0, 0x3f	; 63
   12b14:	f8 94       	cli
   12b16:	de bf       	out	0x3e, r29	; 62
   12b18:	0f be       	out	0x3f, r0	; 63
   12b1a:	cd bf       	out	0x3d, r28	; 61
   int i;
   int credits;
   int currentcandidate;
   _atomic_t currentatomic;
   currentcandidate =  - 1;
   12b1c:	8f ef       	ldi	r24, 0xFF	; 255
   12b1e:	9f ef       	ldi	r25, 0xFF	; 255
   12b20:	9b 83       	std	Y+3, r25	; 0x03
   12b22:	8a 83       	std	Y+2, r24	; 0x02
   credits =  - 1;
   12b24:	8f ef       	ldi	r24, 0xFF	; 255
   12b26:	9f ef       	ldi	r25, 0xFF	; 255
   12b28:	9d 83       	std	Y+5, r25	; 0x05
   12b2a:	8c 83       	std	Y+4, r24	; 0x04
   currentatomic = _atomic_start();
   12b2c:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   12b30:	89 83       	std	Y+1, r24	; 0x01
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
   12b32:	1f 82       	std	Y+7, r1	; 0x07
   12b34:	1e 82       	std	Y+6, r1	; 0x06
   12b36:	45 c0       	rjmp	.+138    	; 0x12bc2 <thread_get_next+0xba>
      if ( thread_table[ i ].state == STATE_ACTIVE ) {
   12b38:	2e 81       	ldd	r18, Y+6	; 0x06
   12b3a:	3f 81       	ldd	r19, Y+7	; 0x07
   12b3c:	85 e2       	ldi	r24, 0x25	; 37
   12b3e:	90 e0       	ldi	r25, 0x00	; 0
   12b40:	ac 01       	movw	r20, r24
   12b42:	24 9f       	mul	r18, r20
   12b44:	c0 01       	movw	r24, r0
   12b46:	25 9f       	mul	r18, r21
   12b48:	90 0d       	add	r25, r0
   12b4a:	34 9f       	mul	r19, r20
   12b4c:	90 0d       	add	r25, r0
   12b4e:	11 24       	eor	r1, r1
   12b50:	fc 01       	movw	r30, r24
   12b52:	e2 52       	subi	r30, 0x22	; 34
   12b54:	f7 4f       	sbci	r31, 0xF7	; 247
   12b56:	80 81       	ld	r24, Z
   12b58:	82 30       	cpi	r24, 0x02	; 2
   12b5a:	71 f5       	brne	.+92     	; 0x12bb8 <thread_get_next+0xb0>
         if ( credits < thread_table[ i ].remaincredits ) {
   12b5c:	2e 81       	ldd	r18, Y+6	; 0x06
   12b5e:	3f 81       	ldd	r19, Y+7	; 0x07
   12b60:	85 e2       	ldi	r24, 0x25	; 37
   12b62:	90 e0       	ldi	r25, 0x00	; 0
   12b64:	bc 01       	movw	r22, r24
   12b66:	26 9f       	mul	r18, r22
   12b68:	c0 01       	movw	r24, r0
   12b6a:	27 9f       	mul	r18, r23
   12b6c:	90 0d       	add	r25, r0
   12b6e:	36 9f       	mul	r19, r22
   12b70:	90 0d       	add	r25, r0
   12b72:	11 24       	eor	r1, r1
   12b74:	fc 01       	movw	r30, r24
   12b76:	e0 52       	subi	r30, 0x20	; 32
   12b78:	f7 4f       	sbci	r31, 0xF7	; 247
   12b7a:	80 81       	ld	r24, Z
   12b7c:	28 2f       	mov	r18, r24
   12b7e:	33 27       	eor	r19, r19
   12b80:	8c 81       	ldd	r24, Y+4	; 0x04
   12b82:	9d 81       	ldd	r25, Y+5	; 0x05
   12b84:	82 17       	cp	r24, r18
   12b86:	93 07       	cpc	r25, r19
   12b88:	bc f4       	brge	.+46     	; 0x12bb8 <thread_get_next+0xb0>
            credits = thread_table[ i ].remaincredits;
   12b8a:	2e 81       	ldd	r18, Y+6	; 0x06
   12b8c:	3f 81       	ldd	r19, Y+7	; 0x07
   12b8e:	85 e2       	ldi	r24, 0x25	; 37
   12b90:	90 e0       	ldi	r25, 0x00	; 0
   12b92:	ac 01       	movw	r20, r24
   12b94:	24 9f       	mul	r18, r20
   12b96:	c0 01       	movw	r24, r0
   12b98:	25 9f       	mul	r18, r21
   12b9a:	90 0d       	add	r25, r0
   12b9c:	34 9f       	mul	r19, r20
   12b9e:	90 0d       	add	r25, r0
   12ba0:	11 24       	eor	r1, r1
   12ba2:	fc 01       	movw	r30, r24
   12ba4:	e0 52       	subi	r30, 0x20	; 32
   12ba6:	f7 4f       	sbci	r31, 0xF7	; 247
   12ba8:	80 81       	ld	r24, Z
   12baa:	99 27       	eor	r25, r25
   12bac:	9d 83       	std	Y+5, r25	; 0x05
   12bae:	8c 83       	std	Y+4, r24	; 0x04
            currentcandidate = i;
   12bb0:	8e 81       	ldd	r24, Y+6	; 0x06
   12bb2:	9f 81       	ldd	r25, Y+7	; 0x07
   12bb4:	9b 83       	std	Y+3, r25	; 0x03
   12bb6:	8a 83       	std	Y+2, r24	; 0x02
   12bb8:	8e 81       	ldd	r24, Y+6	; 0x06
   12bba:	9f 81       	ldd	r25, Y+7	; 0x07
   12bbc:	01 96       	adiw	r24, 0x01	; 1
   12bbe:	9f 83       	std	Y+7, r25	; 0x07
   12bc0:	8e 83       	std	Y+6, r24	; 0x06
   12bc2:	8e 81       	ldd	r24, Y+6	; 0x06
   12bc4:	9f 81       	ldd	r25, Y+7	; 0x07
   12bc6:	88 30       	cpi	r24, 0x08	; 8
   12bc8:	91 05       	cpc	r25, r1
   12bca:	0c f4       	brge	.+2      	; 0x12bce <thread_get_next+0xc6>
   12bcc:	b5 cf       	rjmp	.-150    	; 0x12b38 <thread_get_next+0x30>
         }
      }
   }
   if ( credits < 0 ) {
   12bce:	8c 81       	ldd	r24, Y+4	; 0x04
   12bd0:	9d 81       	ldd	r25, Y+5	; 0x05
   12bd2:	99 23       	and	r25, r25
   12bd4:	14 f4       	brge	.+4      	; 0x12bda <thread_get_next+0xd2>
      thread_task_active = 0;
   12bd6:	10 92 07 0a 	sts	0x0A07, r1
   } 
   _atomic_end( currentatomic );
   12bda:	89 81       	ldd	r24, Y+1	; 0x01
   12bdc:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   if ( credits > 0 ) {
   12be0:	8c 81       	ldd	r24, Y+4	; 0x04
   12be2:	9d 81       	ldd	r25, Y+5	; 0x05
   12be4:	18 16       	cp	r1, r24
   12be6:	19 06       	cpc	r1, r25
   12be8:	5c f5       	brge	.+86     	; 0x12c40 <thread_get_next+0x138>
      currentatomic = _atomic_start();
   12bea:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   12bee:	89 83       	std	Y+1, r24	; 0x01
      thread_table[ currentcandidate ].remaincredits --;
   12bf0:	2a 81       	ldd	r18, Y+2	; 0x02
   12bf2:	3b 81       	ldd	r19, Y+3	; 0x03
   12bf4:	85 e2       	ldi	r24, 0x25	; 37
   12bf6:	90 e0       	ldi	r25, 0x00	; 0
   12bf8:	bc 01       	movw	r22, r24
   12bfa:	26 9f       	mul	r18, r22
   12bfc:	c0 01       	movw	r24, r0
   12bfe:	27 9f       	mul	r18, r23
   12c00:	90 0d       	add	r25, r0
   12c02:	36 9f       	mul	r19, r22
   12c04:	90 0d       	add	r25, r0
   12c06:	11 24       	eor	r1, r1
   12c08:	fc 01       	movw	r30, r24
   12c0a:	e0 52       	subi	r30, 0x20	; 32
   12c0c:	f7 4f       	sbci	r31, 0xF7	; 247
   12c0e:	80 81       	ld	r24, Z
   12c10:	48 2f       	mov	r20, r24
   12c12:	41 50       	subi	r20, 0x01	; 1
   12c14:	85 e2       	ldi	r24, 0x25	; 37
   12c16:	90 e0       	ldi	r25, 0x00	; 0
   12c18:	bc 01       	movw	r22, r24
   12c1a:	26 9f       	mul	r18, r22
   12c1c:	c0 01       	movw	r24, r0
   12c1e:	27 9f       	mul	r18, r23
   12c20:	90 0d       	add	r25, r0
   12c22:	36 9f       	mul	r19, r22
   12c24:	90 0d       	add	r25, r0
   12c26:	11 24       	eor	r1, r1
   12c28:	fc 01       	movw	r30, r24
   12c2a:	e0 52       	subi	r30, 0x20	; 32
   12c2c:	f7 4f       	sbci	r31, 0xF7	; 247
   12c2e:	40 83       	st	Z, r20
      _atomic_end( currentatomic );
   12c30:	89 81       	ldd	r24, Y+1	; 0x01
   12c32:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      return currentcandidate;
   12c36:	8a 81       	ldd	r24, Y+2	; 0x02
   12c38:	9b 81       	ldd	r25, Y+3	; 0x03
   12c3a:	99 87       	std	Y+9, r25	; 0x09
   12c3c:	88 87       	std	Y+8, r24	; 0x08
   12c3e:	7a c0       	rjmp	.+244    	; 0x12d34 <thread_get_next+0x22c>
   } else if ( credits == 0 ) {
   12c40:	8c 81       	ldd	r24, Y+4	; 0x04
   12c42:	9d 81       	ldd	r25, Y+5	; 0x05
   12c44:	00 97       	sbiw	r24, 0x00	; 0
   12c46:	09 f0       	breq	.+2      	; 0x12c4a <thread_get_next+0x142>
   12c48:	6a c0       	rjmp	.+212    	; 0x12d1e <thread_get_next+0x216>
      currentatomic = _atomic_start();
   12c4a:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   12c4e:	89 83       	std	Y+1, r24	; 0x01
      for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
   12c50:	1f 82       	std	Y+7, r1	; 0x07
   12c52:	1e 82       	std	Y+6, r1	; 0x06
   12c54:	37 c0       	rjmp	.+110    	; 0x12cc4 <thread_get_next+0x1bc>
         if ( thread_table[ i ].state == STATE_ACTIVE ) {
   12c56:	2e 81       	ldd	r18, Y+6	; 0x06
   12c58:	3f 81       	ldd	r19, Y+7	; 0x07
   12c5a:	85 e2       	ldi	r24, 0x25	; 37
   12c5c:	90 e0       	ldi	r25, 0x00	; 0
   12c5e:	ac 01       	movw	r20, r24
   12c60:	24 9f       	mul	r18, r20
   12c62:	c0 01       	movw	r24, r0
   12c64:	25 9f       	mul	r18, r21
   12c66:	90 0d       	add	r25, r0
   12c68:	34 9f       	mul	r19, r20
   12c6a:	90 0d       	add	r25, r0
   12c6c:	11 24       	eor	r1, r1
   12c6e:	fc 01       	movw	r30, r24
   12c70:	e2 52       	subi	r30, 0x22	; 34
   12c72:	f7 4f       	sbci	r31, 0xF7	; 247
   12c74:	80 81       	ld	r24, Z
   12c76:	82 30       	cpi	r24, 0x02	; 2
   12c78:	01 f5       	brne	.+64     	; 0x12cba <thread_get_next+0x1b2>
            thread_table[ i ].remaincredits = thread_table[ i ].priority;
   12c7a:	4e 81       	ldd	r20, Y+6	; 0x06
   12c7c:	5f 81       	ldd	r21, Y+7	; 0x07
   12c7e:	2e 81       	ldd	r18, Y+6	; 0x06
   12c80:	3f 81       	ldd	r19, Y+7	; 0x07
   12c82:	85 e2       	ldi	r24, 0x25	; 37
   12c84:	90 e0       	ldi	r25, 0x00	; 0
   12c86:	bc 01       	movw	r22, r24
   12c88:	26 9f       	mul	r18, r22
   12c8a:	c0 01       	movw	r24, r0
   12c8c:	27 9f       	mul	r18, r23
   12c8e:	90 0d       	add	r25, r0
   12c90:	36 9f       	mul	r19, r22
   12c92:	90 0d       	add	r25, r0
   12c94:	11 24       	eor	r1, r1
   12c96:	fc 01       	movw	r30, r24
   12c98:	e1 52       	subi	r30, 0x21	; 33
   12c9a:	f7 4f       	sbci	r31, 0xF7	; 247
   12c9c:	20 81       	ld	r18, Z
   12c9e:	85 e2       	ldi	r24, 0x25	; 37
   12ca0:	90 e0       	ldi	r25, 0x00	; 0
   12ca2:	bc 01       	movw	r22, r24
   12ca4:	46 9f       	mul	r20, r22
   12ca6:	c0 01       	movw	r24, r0
   12ca8:	47 9f       	mul	r20, r23
   12caa:	90 0d       	add	r25, r0
   12cac:	56 9f       	mul	r21, r22
   12cae:	90 0d       	add	r25, r0
   12cb0:	11 24       	eor	r1, r1
   12cb2:	fc 01       	movw	r30, r24
   12cb4:	e0 52       	subi	r30, 0x20	; 32
   12cb6:	f7 4f       	sbci	r31, 0xF7	; 247
   12cb8:	20 83       	st	Z, r18
   12cba:	8e 81       	ldd	r24, Y+6	; 0x06
   12cbc:	9f 81       	ldd	r25, Y+7	; 0x07
   12cbe:	01 96       	adiw	r24, 0x01	; 1
   12cc0:	9f 83       	std	Y+7, r25	; 0x07
   12cc2:	8e 83       	std	Y+6, r24	; 0x06
   12cc4:	8e 81       	ldd	r24, Y+6	; 0x06
   12cc6:	9f 81       	ldd	r25, Y+7	; 0x07
   12cc8:	88 30       	cpi	r24, 0x08	; 8
   12cca:	91 05       	cpc	r25, r1
   12ccc:	24 f2       	brlt	.-120    	; 0x12c56 <thread_get_next+0x14e>
         }
      }
      thread_table[ currentcandidate ].remaincredits --;
   12cce:	2a 81       	ldd	r18, Y+2	; 0x02
   12cd0:	3b 81       	ldd	r19, Y+3	; 0x03
   12cd2:	85 e2       	ldi	r24, 0x25	; 37
   12cd4:	90 e0       	ldi	r25, 0x00	; 0
   12cd6:	ac 01       	movw	r20, r24
   12cd8:	24 9f       	mul	r18, r20
   12cda:	c0 01       	movw	r24, r0
   12cdc:	25 9f       	mul	r18, r21
   12cde:	90 0d       	add	r25, r0
   12ce0:	34 9f       	mul	r19, r20
   12ce2:	90 0d       	add	r25, r0
   12ce4:	11 24       	eor	r1, r1
   12ce6:	fc 01       	movw	r30, r24
   12ce8:	e0 52       	subi	r30, 0x20	; 32
   12cea:	f7 4f       	sbci	r31, 0xF7	; 247
   12cec:	80 81       	ld	r24, Z
   12cee:	48 2f       	mov	r20, r24
   12cf0:	41 50       	subi	r20, 0x01	; 1
   12cf2:	85 e2       	ldi	r24, 0x25	; 37
   12cf4:	90 e0       	ldi	r25, 0x00	; 0
   12cf6:	bc 01       	movw	r22, r24
   12cf8:	26 9f       	mul	r18, r22
   12cfa:	c0 01       	movw	r24, r0
   12cfc:	27 9f       	mul	r18, r23
   12cfe:	90 0d       	add	r25, r0
   12d00:	36 9f       	mul	r19, r22
   12d02:	90 0d       	add	r25, r0
   12d04:	11 24       	eor	r1, r1
   12d06:	fc 01       	movw	r30, r24
   12d08:	e0 52       	subi	r30, 0x20	; 32
   12d0a:	f7 4f       	sbci	r31, 0xF7	; 247
   12d0c:	40 83       	st	Z, r20
      _atomic_end( currentatomic );
   12d0e:	89 81       	ldd	r24, Y+1	; 0x01
   12d10:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
      return currentcandidate;
   12d14:	8a 81       	ldd	r24, Y+2	; 0x02
   12d16:	9b 81       	ldd	r25, Y+3	; 0x03
   12d18:	99 87       	std	Y+9, r25	; 0x09
   12d1a:	88 87       	std	Y+8, r24	; 0x08
   12d1c:	0b c0       	rjmp	.+22     	; 0x12d34 <thread_get_next+0x22c>
   }
    else if ( credits < 0 )
   12d1e:	8c 81       	ldd	r24, Y+4	; 0x04
   12d20:	9d 81       	ldd	r25, Y+5	; 0x05
   12d22:	99 23       	and	r25, r25
   12d24:	2c f4       	brge	.+10     	; 0x12d30 <thread_get_next+0x228>
    {
      return  - 1;
   12d26:	4f ef       	ldi	r20, 0xFF	; 255
   12d28:	5f ef       	ldi	r21, 0xFF	; 255
   12d2a:	59 87       	std	Y+9, r21	; 0x09
   12d2c:	48 87       	std	Y+8, r20	; 0x08
   12d2e:	02 c0       	rjmp	.+4      	; 0x12d34 <thread_get_next+0x22c>
   }
   return 0;
   12d30:	19 86       	std	Y+9, r1	; 0x09
   12d32:	18 86       	std	Y+8, r1	; 0x08
   12d34:	88 85       	ldd	r24, Y+8	; 0x08
   12d36:	99 85       	ldd	r25, Y+9	; 0x09
   12d38:	29 96       	adiw	r28, 0x09	; 9
   12d3a:	0f b6       	in	r0, 0x3f	; 63
   12d3c:	f8 94       	cli
   12d3e:	de bf       	out	0x3e, r29	; 62
   12d40:	0f be       	out	0x3f, r0	; 63
   12d42:	cd bf       	out	0x3d, r28	; 61
   12d44:	df 91       	pop	r29
   12d46:	cf 91       	pop	r28
   12d48:	08 95       	ret

00012d4a <check_for_memory_corrupt>:
}

/* thread_task
 */
int check_for_memory_corrupt( int i )
 {
   12d4a:	cf 93       	push	r28
   12d4c:	df 93       	push	r29
   12d4e:	cd b7       	in	r28, 0x3d	; 61
   12d50:	de b7       	in	r29, 0x3e	; 62
   12d52:	2c 97       	sbiw	r28, 0x0c	; 12
   12d54:	0f b6       	in	r0, 0x3f	; 63
   12d56:	f8 94       	cli
   12d58:	de bf       	out	0x3e, r29	; 62
   12d5a:	0f be       	out	0x3f, r0	; 63
   12d5c:	cd bf       	out	0x3d, r28	; 61
   12d5e:	9a 87       	std	Y+10, r25	; 0x0a
   12d60:	89 87       	std	Y+9, r24	; 0x09
   uint16_t *kernelptr;
   uint16_t *ram_start,  *ram_end;
   uint16_t sizeofBss;
   ram_start = thread_table[ i ].ramstart;
   12d62:	29 85       	ldd	r18, Y+9	; 0x09
   12d64:	3a 85       	ldd	r19, Y+10	; 0x0a
   12d66:	85 e2       	ldi	r24, 0x25	; 37
   12d68:	90 e0       	ldi	r25, 0x00	; 0
   12d6a:	ac 01       	movw	r20, r24
   12d6c:	24 9f       	mul	r18, r20
   12d6e:	c0 01       	movw	r24, r0
   12d70:	25 9f       	mul	r18, r21
   12d72:	90 0d       	add	r25, r0
   12d74:	34 9f       	mul	r19, r20
   12d76:	90 0d       	add	r25, r0
   12d78:	11 24       	eor	r1, r1
   12d7a:	fc 01       	movw	r30, r24
   12d7c:	e3 51       	subi	r30, 0x13	; 19
   12d7e:	f7 4f       	sbci	r31, 0xF7	; 247
   12d80:	80 81       	ld	r24, Z
   12d82:	91 81       	ldd	r25, Z+1	; 0x01
   12d84:	9e 83       	std	Y+6, r25	; 0x06
   12d86:	8d 83       	std	Y+5, r24	; 0x05
   ram_end = thread_table[ i ].ramend;
   12d88:	29 85       	ldd	r18, Y+9	; 0x09
   12d8a:	3a 85       	ldd	r19, Y+10	; 0x0a
   12d8c:	85 e2       	ldi	r24, 0x25	; 37
   12d8e:	90 e0       	ldi	r25, 0x00	; 0
   12d90:	ac 01       	movw	r20, r24
   12d92:	24 9f       	mul	r18, r20
   12d94:	c0 01       	movw	r24, r0
   12d96:	25 9f       	mul	r18, r21
   12d98:	90 0d       	add	r25, r0
   12d9a:	34 9f       	mul	r19, r20
   12d9c:	90 0d       	add	r25, r0
   12d9e:	11 24       	eor	r1, r1
   12da0:	fc 01       	movw	r30, r24
   12da2:	e1 51       	subi	r30, 0x11	; 17
   12da4:	f7 4f       	sbci	r31, 0xF7	; 247
   12da6:	80 81       	ld	r24, Z
   12da8:	91 81       	ldd	r25, Z+1	; 0x01
   12daa:	9c 83       	std	Y+4, r25	; 0x04
   12dac:	8b 83       	std	Y+3, r24	; 0x03
   sizeofBss = thread_table[ i ].sizeofBss;
   12dae:	29 85       	ldd	r18, Y+9	; 0x09
   12db0:	3a 85       	ldd	r19, Y+10	; 0x0a
   12db2:	85 e2       	ldi	r24, 0x25	; 37
   12db4:	90 e0       	ldi	r25, 0x00	; 0
   12db6:	ac 01       	movw	r20, r24
   12db8:	24 9f       	mul	r18, r20
   12dba:	c0 01       	movw	r24, r0
   12dbc:	25 9f       	mul	r18, r21
   12dbe:	90 0d       	add	r25, r0
   12dc0:	34 9f       	mul	r19, r20
   12dc2:	90 0d       	add	r25, r0
   12dc4:	11 24       	eor	r1, r1
   12dc6:	fc 01       	movw	r30, r24
   12dc8:	ef 50       	subi	r30, 0x0F	; 15
   12dca:	f7 4f       	sbci	r31, 0xF7	; 247
   12dcc:	80 81       	ld	r24, Z
   12dce:	91 81       	ldd	r25, Z+1	; 0x01
   12dd0:	9a 83       	std	Y+2, r25	; 0x02
   12dd2:	89 83       	std	Y+1, r24	; 0x01
   kernelptr = ( uint16_t* )(( uint8_t* )ram_start + sizeofBss );
   12dd4:	2d 81       	ldd	r18, Y+5	; 0x05
   12dd6:	3e 81       	ldd	r19, Y+6	; 0x06
   12dd8:	89 81       	ldd	r24, Y+1	; 0x01
   12dda:	9a 81       	ldd	r25, Y+2	; 0x02
   12ddc:	82 0f       	add	r24, r18
   12dde:	93 1f       	adc	r25, r19
   12de0:	98 87       	std	Y+8, r25	; 0x08
   12de2:	8f 83       	std	Y+7, r24	; 0x07
   if (( *kernelptr != 0xeeff ) || ( *( kernelptr + 1 ) != 0xeeff )) {
   12de4:	ef 81       	ldd	r30, Y+7	; 0x07
   12de6:	f8 85       	ldd	r31, Y+8	; 0x08
   12de8:	80 81       	ld	r24, Z
   12dea:	91 81       	ldd	r25, Z+1	; 0x01
   12dec:	5e ee       	ldi	r21, 0xEE	; 238
   12dee:	8f 3f       	cpi	r24, 0xFF	; 255
   12df0:	95 07       	cpc	r25, r21
   12df2:	51 f4       	brne	.+20     	; 0x12e08 <check_for_memory_corrupt+0xbe>
   12df4:	8f 81       	ldd	r24, Y+7	; 0x07
   12df6:	98 85       	ldd	r25, Y+8	; 0x08
   12df8:	fc 01       	movw	r30, r24
   12dfa:	32 96       	adiw	r30, 0x02	; 2
   12dfc:	80 81       	ld	r24, Z
   12dfe:	91 81       	ldd	r25, Z+1	; 0x01
   12e00:	2e ee       	ldi	r18, 0xEE	; 238
   12e02:	8f 3f       	cpi	r24, 0xFF	; 255
   12e04:	92 07       	cpc	r25, r18
   12e06:	b1 f0       	breq	.+44     	; 0x12e34 <check_for_memory_corrupt+0xea>
      thread_table[ i ].state = STATE_MEM_ERROR;
   12e08:	29 85       	ldd	r18, Y+9	; 0x09
   12e0a:	3a 85       	ldd	r19, Y+10	; 0x0a
   12e0c:	85 e2       	ldi	r24, 0x25	; 37
   12e0e:	90 e0       	ldi	r25, 0x00	; 0
   12e10:	ac 01       	movw	r20, r24
   12e12:	24 9f       	mul	r18, r20
   12e14:	c0 01       	movw	r24, r0
   12e16:	25 9f       	mul	r18, r21
   12e18:	90 0d       	add	r25, r0
   12e1a:	34 9f       	mul	r19, r20
   12e1c:	90 0d       	add	r25, r0
   12e1e:	11 24       	eor	r1, r1
   12e20:	fc 01       	movw	r30, r24
   12e22:	e2 52       	subi	r30, 0x22	; 34
   12e24:	f7 4f       	sbci	r31, 0xF7	; 247
   12e26:	89 e0       	ldi	r24, 0x09	; 9
   12e28:	80 83       	st	Z, r24
      return  - 1;
   12e2a:	8f ef       	ldi	r24, 0xFF	; 255
   12e2c:	9f ef       	ldi	r25, 0xFF	; 255
   12e2e:	9c 87       	std	Y+12, r25	; 0x0c
   12e30:	8b 87       	std	Y+11, r24	; 0x0b
   12e32:	04 c0       	rjmp	.+8      	; 0x12e3c <check_for_memory_corrupt+0xf2>
   }
   return i;
   12e34:	49 85       	ldd	r20, Y+9	; 0x09
   12e36:	5a 85       	ldd	r21, Y+10	; 0x0a
   12e38:	5c 87       	std	Y+12, r21	; 0x0c
   12e3a:	4b 87       	std	Y+11, r20	; 0x0b
   12e3c:	8b 85       	ldd	r24, Y+11	; 0x0b
   12e3e:	9c 85       	ldd	r25, Y+12	; 0x0c
   12e40:	2c 96       	adiw	r28, 0x0c	; 12
   12e42:	0f b6       	in	r0, 0x3f	; 63
   12e44:	f8 94       	cli
   12e46:	de bf       	out	0x3e, r29	; 62
   12e48:	0f be       	out	0x3f, r0	; 63
   12e4a:	cd bf       	out	0x3d, r28	; 61
   12e4c:	df 91       	pop	r29
   12e4e:	cf 91       	pop	r28
   12e50:	08 95       	ret

00012e52 <thread_task>:
}

//-------------------------------------------------------------------------
void thread_task() {
   12e52:	cf 93       	push	r28
   12e54:	df 93       	push	r29
   12e56:	cd b7       	in	r28, 0x3d	; 61
   12e58:	de b7       	in	r29, 0x3e	; 62
   12e5a:	22 97       	sbiw	r28, 0x02	; 2
   12e5c:	0f b6       	in	r0, 0x3f	; 63
   12e5e:	f8 94       	cli
   12e60:	de bf       	out	0x3e, r29	; 62
   12e62:	0f be       	out	0x3f, r0	; 63
   12e64:	cd bf       	out	0x3d, r28	; 61
   int i;
   i = thread_get_next();
   12e66:	0e 94 84 95 	call	0x12b08	; 0x12b08 <thread_get_next>
   12e6a:	9a 83       	std	Y+2, r25	; 0x02
   12e6c:	89 83       	std	Y+1, r24	; 0x01
 
   if ( i < 0 ) {
   12e6e:	89 81       	ldd	r24, Y+1	; 0x01
   12e70:	9a 81       	ldd	r25, Y+2	; 0x02
   12e72:	99 23       	and	r25, r25
   12e74:	24 f1       	brlt	.+72     	; 0x12ebe <thread_task+0x6c>
      //here is the exit 	
      return ;
   }

   i = check_for_memory_corrupt( i );
   12e76:	89 81       	ldd	r24, Y+1	; 0x01
   12e78:	9a 81       	ldd	r25, Y+2	; 0x02
   12e7a:	0e 94 a5 96 	call	0x12d4a	; 0x12d4a <check_for_memory_corrupt>
   12e7e:	9a 83       	std	Y+2, r25	; 0x02
   12e80:	89 83       	std	Y+1, r24	; 0x01
    if ( i < 0 ) {
   12e82:	89 81       	ldd	r24, Y+1	; 0x01
   12e84:	9a 81       	ldd	r25, Y+2	; 0x02
   12e86:	99 23       	and	r25, r25
   12e88:	d4 f0       	brlt	.+52     	; 0x12ebe <thread_task+0x6c>
      //here is the exit 	
      return ;
   }


   current_thread = &( thread_table[ i ] );
   12e8a:	29 81       	ldd	r18, Y+1	; 0x01
   12e8c:	3a 81       	ldd	r19, Y+2	; 0x02
   12e8e:	85 e2       	ldi	r24, 0x25	; 37
   12e90:	90 e0       	ldi	r25, 0x00	; 0
   12e92:	ac 01       	movw	r20, r24
   12e94:	24 9f       	mul	r18, r20
   12e96:	c0 01       	movw	r24, r0
   12e98:	25 9f       	mul	r18, r21
   12e9a:	90 0d       	add	r25, r0
   12e9c:	34 9f       	mul	r19, r20
   12e9e:	90 0d       	add	r25, r0
   12ea0:	11 24       	eor	r1, r1
   12ea2:	84 52       	subi	r24, 0x24	; 36
   12ea4:	97 4f       	sbci	r25, 0xF7	; 247
   12ea6:	90 93 db 08 	sts	0x08DB, r25
   12eaa:	80 93 da 08 	sts	0x08DA, r24
   lite_switch_to_user_thread();
   12eae:	0e 94 43 93 	call	0x12686	; 0x12686 <lite_switch_to_user_thread>
   current_thread = 0;
   12eb2:	10 92 db 08 	sts	0x08DB, r1
   12eb6:	10 92 da 08 	sts	0x08DA, r1
   //postTask
   threads_handle_service();
   12eba:	0e 94 22 94 	call	0x12844	; 0x12844 <threads_handle_service>
   12ebe:	22 96       	adiw	r28, 0x02	; 2
   12ec0:	0f b6       	in	r0, 0x3f	; 63
   12ec2:	f8 94       	cli
   12ec4:	de bf       	out	0x3e, r29	; 62
   12ec6:	0f be       	out	0x3f, r0	; 63
   12ec8:	cd bf       	out	0x3d, r28	; 61
   12eca:	df 91       	pop	r29
   12ecc:	cf 91       	pop	r28
   12ece:	08 95       	ret

00012ed0 <thread_wakeup>:
   return ;
}



/* thread_wakeup
 * This routine wakes up a thread that was put to sleep.
 */
void thread_wakeup( uint8_t id ) {
   12ed0:	cf 93       	push	r28
   12ed2:	df 93       	push	r29
   12ed4:	cd b7       	in	r28, 0x3d	; 61
   12ed6:	de b7       	in	r29, 0x3e	; 62
   12ed8:	21 97       	sbiw	r28, 0x01	; 1
   12eda:	0f b6       	in	r0, 0x3f	; 63
   12edc:	f8 94       	cli
   12ede:	de bf       	out	0x3e, r29	; 62
   12ee0:	0f be       	out	0x3f, r0	; 63
   12ee2:	cd bf       	out	0x3d, r28	; 61
   12ee4:	89 83       	std	Y+1, r24	; 0x01
   if ( id >= LITE_MAX_THREADS ) {
   12ee6:	89 81       	ldd	r24, Y+1	; 0x01
   12ee8:	88 30       	cpi	r24, 0x08	; 8
   12eea:	70 f5       	brcc	.+92     	; 0x12f48 <thread_wakeup+0x78>
      return ;
   } 
   if ( thread_table[ id ].state == STATE_SLEEP ) {
   12eec:	89 81       	ldd	r24, Y+1	; 0x01
   12eee:	28 2f       	mov	r18, r24
   12ef0:	33 27       	eor	r19, r19
   12ef2:	85 e2       	ldi	r24, 0x25	; 37
   12ef4:	90 e0       	ldi	r25, 0x00	; 0
   12ef6:	ac 01       	movw	r20, r24
   12ef8:	24 9f       	mul	r18, r20
   12efa:	c0 01       	movw	r24, r0
   12efc:	25 9f       	mul	r18, r21
   12efe:	90 0d       	add	r25, r0
   12f00:	34 9f       	mul	r19, r20
   12f02:	90 0d       	add	r25, r0
   12f04:	11 24       	eor	r1, r1
   12f06:	fc 01       	movw	r30, r24
   12f08:	e2 52       	subi	r30, 0x22	; 34
   12f0a:	f7 4f       	sbci	r31, 0xF7	; 247
   12f0c:	80 81       	ld	r24, Z
   12f0e:	85 30       	cpi	r24, 0x05	; 5
   12f10:	91 f4       	brne	.+36     	; 0x12f36 <thread_wakeup+0x66>
      thread_table[ id ].state = STATE_ACTIVE;
   12f12:	89 81       	ldd	r24, Y+1	; 0x01
   12f14:	28 2f       	mov	r18, r24
   12f16:	33 27       	eor	r19, r19
   12f18:	85 e2       	ldi	r24, 0x25	; 37
   12f1a:	90 e0       	ldi	r25, 0x00	; 0
   12f1c:	ac 01       	movw	r20, r24
   12f1e:	24 9f       	mul	r18, r20
   12f20:	c0 01       	movw	r24, r0
   12f22:	25 9f       	mul	r18, r21
   12f24:	90 0d       	add	r25, r0
   12f26:	34 9f       	mul	r19, r20
   12f28:	90 0d       	add	r25, r0
   12f2a:	11 24       	eor	r1, r1
   12f2c:	fc 01       	movw	r30, r24
   12f2e:	e2 52       	subi	r30, 0x22	; 34
   12f30:	f7 4f       	sbci	r31, 0xF7	; 247
   12f32:	82 e0       	ldi	r24, 0x02	; 2
   12f34:	80 83       	st	Z, r24
   } 
   if ( thread_task_active == 0 ) {
   12f36:	80 91 07 0a 	lds	r24, 0x0A07
   12f3a:	88 23       	and	r24, r24
   12f3c:	29 f4       	brne	.+10     	; 0x12f48 <thread_wakeup+0x78>
      postTask( thread_task, 2 );
   12f3e:	89 e2       	ldi	r24, 0x29	; 41
   12f40:	97 e9       	ldi	r25, 0x97	; 151
   12f42:	62 e0       	ldi	r22, 0x02	; 2
   12f44:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
   12f48:	21 96       	adiw	r28, 0x01	; 1
   12f4a:	0f b6       	in	r0, 0x3f	; 63
   12f4c:	f8 94       	cli
   12f4e:	de bf       	out	0x3e, r29	; 62
   12f50:	0f be       	out	0x3f, r0	; 63
   12f52:	cd bf       	out	0x3d, r28	; 61
   12f54:	df 91       	pop	r29
   12f56:	cf 91       	pop	r28
   12f58:	08 95       	ret

00012f5a <postNewThreadTask>:
   } 
}



//-------------------------------------------------------------------------
void postNewThreadTask() {
   12f5a:	cf 93       	push	r28
   12f5c:	df 93       	push	r29
   12f5e:	cd b7       	in	r28, 0x3d	; 61
   12f60:	de b7       	in	r29, 0x3e	; 62
   if ( thread_task_active == 0 ) {
   12f62:	80 91 07 0a 	lds	r24, 0x0A07
   12f66:	88 23       	and	r24, r24
   12f68:	29 f4       	brne	.+10     	; 0x12f74 <postNewThreadTask+0x1a>
      postTask( thread_task, 2 );
   12f6a:	89 e2       	ldi	r24, 0x29	; 41
   12f6c:	97 e9       	ldi	r25, 0x97	; 151
   12f6e:	62 e0       	ldi	r22, 0x02	; 2
   12f70:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
   12f74:	df 91       	pop	r29
   12f76:	cf 91       	pop	r28
   12f78:	08 95       	ret

00012f7a <ServiceTimerFired>:
   } 
}





//-------------------------------------------------------------------------
void ServiceTimerFired( uint8_t id ) {
   12f7a:	cf 93       	push	r28
   12f7c:	df 93       	push	r29
   12f7e:	cd b7       	in	r28, 0x3d	; 61
   12f80:	de b7       	in	r29, 0x3e	; 62
   12f82:	21 97       	sbiw	r28, 0x01	; 1
   12f84:	0f b6       	in	r0, 0x3f	; 63
   12f86:	f8 94       	cli
   12f88:	de bf       	out	0x3e, r29	; 62
   12f8a:	0f be       	out	0x3f, r0	; 63
   12f8c:	cd bf       	out	0x3d, r28	; 61
   12f8e:	89 83       	std	Y+1, r24	; 0x01
   if ( id == 9 ) {
   12f90:	89 81       	ldd	r24, Y+1	; 0x01
   12f92:	89 30       	cpi	r24, 0x09	; 9
   12f94:	51 f4       	brne	.+20     	; 0x12faa <ServiceTimerFired+0x30>
      if ( thread_task_active == 0 ) {
   12f96:	80 91 07 0a 	lds	r24, 0x0A07
   12f9a:	88 23       	and	r24, r24
   12f9c:	49 f4       	brne	.+18     	; 0x12fb0 <ServiceTimerFired+0x36>
         postTask( thread_task, 2 );
   12f9e:	89 e2       	ldi	r24, 0x29	; 41
   12fa0:	97 e9       	ldi	r25, 0x97	; 151
   12fa2:	62 e0       	ldi	r22, 0x02	; 2
   12fa4:	0e 94 bc 8a 	call	0x11578	; 0x11578 <postTask>
   12fa8:	03 c0       	rjmp	.+6      	; 0x12fb0 <ServiceTimerFired+0x36>
      } 
   } else {
      thread_wakeup( id );
   12faa:	89 81       	ldd	r24, Y+1	; 0x01
   12fac:	0e 94 68 97 	call	0x12ed0	; 0x12ed0 <thread_wakeup>
   12fb0:	21 96       	adiw	r28, 0x01	; 1
   12fb2:	0f b6       	in	r0, 0x3f	; 63
   12fb4:	f8 94       	cli
   12fb6:	de bf       	out	0x3e, r29	; 62
   12fb8:	0f be       	out	0x3f, r0	; 63
   12fba:	cd bf       	out	0x3d, r28	; 61
   12fbc:	df 91       	pop	r29
   12fbe:	cf 91       	pop	r28
   12fc0:	08 95       	ret

00012fc2 <getThreadAddress>:
   } 
}






//Return the address pointer of the current_thread, (its address, not its value)
//void getThreadAddress()  __attribute__((naked));

thread** getThreadAddress() {
   12fc2:	cf 93       	push	r28
   12fc4:	df 93       	push	r29
   12fc6:	cd b7       	in	r28, 0x3d	; 61
   12fc8:	de b7       	in	r29, 0x3e	; 62
   12fca:	22 97       	sbiw	r28, 0x02	; 2
   12fcc:	0f b6       	in	r0, 0x3f	; 63
   12fce:	f8 94       	cli
   12fd0:	de bf       	out	0x3e, r29	; 62
   12fd2:	0f be       	out	0x3f, r0	; 63
   12fd4:	cd bf       	out	0x3d, r28	; 61
   thread **addr;
   
   addr = (thread **)&current_thread;
   12fd6:	8a ed       	ldi	r24, 0xDA	; 218
   12fd8:	98 e0       	ldi	r25, 0x08	; 8
   12fda:	9a 83       	std	Y+2, r25	; 0x02
   12fdc:	89 83       	std	Y+1, r24	; 0x01
   
   return addr; 
   12fde:	89 81       	ldd	r24, Y+1	; 0x01
   12fe0:	9a 81       	ldd	r25, Y+2	; 0x02
   12fe2:	22 96       	adiw	r28, 0x02	; 2
   12fe4:	0f b6       	in	r0, 0x3f	; 63
   12fe6:	f8 94       	cli
   12fe8:	de bf       	out	0x3e, r29	; 62
   12fea:	0f be       	out	0x3f, r0	; 63
   12fec:	cd bf       	out	0x3d, r28	; 61
   12fee:	df 91       	pop	r29
   12ff0:	cf 91       	pop	r28
   12ff2:	08 95       	ret

00012ff4 <getKernelStackAddress>:
   //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( addr ) );
   // asm volatile("ret"::); 
}


void ** getKernelStackAddress() {
   12ff4:	cf 93       	push	r28
   12ff6:	df 93       	push	r29
   12ff8:	cd b7       	in	r28, 0x3d	; 61
   12ffa:	de b7       	in	r29, 0x3e	; 62
   12ffc:	22 97       	sbiw	r28, 0x02	; 2
   12ffe:	0f b6       	in	r0, 0x3f	; 63
   13000:	f8 94       	cli
   13002:	de bf       	out	0x3e, r29	; 62
   13004:	0f be       	out	0x3f, r0	; 63
   13006:	cd bf       	out	0x3d, r28	; 61
   void **addr;
   addr = (void **)&old_stack_ptr;
   13008:	8f ec       	ldi	r24, 0xCF	; 207
   1300a:	98 e0       	ldi	r25, 0x08	; 8
   1300c:	9a 83       	std	Y+2, r25	; 0x02
   1300e:	89 83       	std	Y+1, r24	; 0x01
   return addr; 
   13010:	89 81       	ldd	r24, Y+1	; 0x01
   13012:	9a 81       	ldd	r25, Y+2	; 0x02
   13014:	22 96       	adiw	r28, 0x02	; 2
   13016:	0f b6       	in	r0, 0x3f	; 63
   13018:	f8 94       	cli
   1301a:	de bf       	out	0x3e, r29	; 62
   1301c:	0f be       	out	0x3f, r0	; 63
   1301e:	cd bf       	out	0x3d, r28	; 61
   13020:	df 91       	pop	r29
   13022:	cf 91       	pop	r28
   13024:	08 95       	ret

00013026 <getThreadIndexAddress>:


}


//void getThreadIndexAddress() __attribute__((naked));

int getThreadIndexAddress() {
   13026:	cf 93       	push	r28
   13028:	df 93       	push	r29
   1302a:	cd b7       	in	r28, 0x3d	; 61
   1302c:	de b7       	in	r29, 0x3e	; 62
   1302e:	24 97       	sbiw	r28, 0x04	; 4
   13030:	0f b6       	in	r0, 0x3f	; 63
   13032:	f8 94       	cli
   13034:	de bf       	out	0x3e, r29	; 62
   13036:	0f be       	out	0x3f, r0	; 63
   13038:	cd bf       	out	0x3d, r28	; 61

   int i;
   uint16_t index;
   
   asm volatile( "push r20""\n\t""push r21""\n\t": : );
   1303a:	4f 93       	push	r20
   1303c:	5f 93       	push	r21
   index = 0;
   1303e:	1a 82       	std	Y+2, r1	; 0x02
   13040:	19 82       	std	Y+1, r1	; 0x01
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
   13042:	1c 82       	std	Y+4, r1	; 0x04
   13044:	1b 82       	std	Y+3, r1	; 0x03
   13046:	20 c0       	rjmp	.+64     	; 0x13088 <getThreadIndexAddress+0x62>
      if ( current_thread == & ( thread_table[ i ] )) {
   13048:	2b 81       	ldd	r18, Y+3	; 0x03
   1304a:	3c 81       	ldd	r19, Y+4	; 0x04
   1304c:	85 e2       	ldi	r24, 0x25	; 37
   1304e:	90 e0       	ldi	r25, 0x00	; 0
   13050:	ac 01       	movw	r20, r24
   13052:	24 9f       	mul	r18, r20
   13054:	c0 01       	movw	r24, r0
   13056:	25 9f       	mul	r18, r21
   13058:	90 0d       	add	r25, r0
   1305a:	34 9f       	mul	r19, r20
   1305c:	90 0d       	add	r25, r0
   1305e:	11 24       	eor	r1, r1
   13060:	84 52       	subi	r24, 0x24	; 36
   13062:	97 4f       	sbci	r25, 0xF7	; 247
   13064:	9c 01       	movw	r18, r24
   13066:	80 91 da 08 	lds	r24, 0x08DA
   1306a:	90 91 db 08 	lds	r25, 0x08DB
   1306e:	28 17       	cp	r18, r24
   13070:	39 07       	cpc	r19, r25
   13072:	29 f4       	brne	.+10     	; 0x1307e <getThreadIndexAddress+0x58>
         index = i;
   13074:	8b 81       	ldd	r24, Y+3	; 0x03
   13076:	9c 81       	ldd	r25, Y+4	; 0x04
   13078:	9a 83       	std	Y+2, r25	; 0x02
   1307a:	89 83       	std	Y+1, r24	; 0x01
         break;
   1307c:	0a c0       	rjmp	.+20     	; 0x13092 <getThreadIndexAddress+0x6c>
   1307e:	8b 81       	ldd	r24, Y+3	; 0x03
   13080:	9c 81       	ldd	r25, Y+4	; 0x04
   13082:	01 96       	adiw	r24, 0x01	; 1
   13084:	9c 83       	std	Y+4, r25	; 0x04
   13086:	8b 83       	std	Y+3, r24	; 0x03
   13088:	8b 81       	ldd	r24, Y+3	; 0x03
   1308a:	9c 81       	ldd	r25, Y+4	; 0x04
   1308c:	88 30       	cpi	r24, 0x08	; 8
   1308e:	91 05       	cpc	r25, r1
   13090:	dc f2       	brlt	.-74     	; 0x13048 <getThreadIndexAddress+0x22>
      }
   }
   
    asm volatile( "pop r21""\n\t""pop r20""\n\t": : );
   13092:	5f 91       	pop	r21
   13094:	4f 91       	pop	r20
   return index; 
   13096:	89 81       	ldd	r24, Y+1	; 0x01
   13098:	9a 81       	ldd	r25, Y+2	; 0x02
   1309a:	24 96       	adiw	r28, 0x04	; 4
   1309c:	0f b6       	in	r0, 0x3f	; 63
   1309e:	f8 94       	cli
   130a0:	de bf       	out	0x3e, r29	; 62
   130a2:	0f be       	out	0x3f, r0	; 63
   130a4:	cd bf       	out	0x3d, r28	; 61
   130a6:	df 91       	pop	r29
   130a8:	cf 91       	pop	r28
   130aa:	08 95       	ret

000130ac <Barrier_unblock>:
   //asm volatile( "mov r20, %A0""\n\t""mov r21, %B0""\n\t": : "r"( index ) );
   //asm volatile("ret"::); 
}




/* This unblocks an IO bound thread.
 * This routine can be called from any context.
 */
 
void Barrier_unblock( uint8_t type, uint8_t id ) {
   130ac:	cf 93       	push	r28
   130ae:	df 93       	push	r29
   130b0:	cd b7       	in	r28, 0x3d	; 61
   130b2:	de b7       	in	r29, 0x3e	; 62
   130b4:	24 97       	sbiw	r28, 0x04	; 4
   130b6:	0f b6       	in	r0, 0x3f	; 63
   130b8:	f8 94       	cli
   130ba:	de bf       	out	0x3e, r29	; 62
   130bc:	0f be       	out	0x3f, r0	; 63
   130be:	cd bf       	out	0x3d, r28	; 61
   130c0:	8b 83       	std	Y+3, r24	; 0x03
   130c2:	6c 83       	std	Y+4, r22	; 0x04
   uint8_t i;
   _atomic_t currentatomic;
   currentatomic = _atomic_start();
   130c4:	0e 94 25 9c 	call	0x1384a	; 0x1384a <_atomic_start>
   130c8:	89 83       	std	Y+1, r24	; 0x01
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
   130ca:	1a 82       	std	Y+2, r1	; 0x02
   130cc:	52 c0       	rjmp	.+164    	; 0x13172 <Barrier_unblock+0xc6>
      //Look for a thread waiting on this IO
      if (( thread_table[ i ].state == STATE_IO ) && ( thread_table[ i ].data.iostate.type == type ) && ( thread_table[ i ].data.iostate.id == id )) {
   130ce:	8a 81       	ldd	r24, Y+2	; 0x02
   130d0:	28 2f       	mov	r18, r24
   130d2:	33 27       	eor	r19, r19
   130d4:	85 e2       	ldi	r24, 0x25	; 37
   130d6:	90 e0       	ldi	r25, 0x00	; 0
   130d8:	ac 01       	movw	r20, r24
   130da:	24 9f       	mul	r18, r20
   130dc:	c0 01       	movw	r24, r0
   130de:	25 9f       	mul	r18, r21
   130e0:	90 0d       	add	r25, r0
   130e2:	34 9f       	mul	r19, r20
   130e4:	90 0d       	add	r25, r0
   130e6:	11 24       	eor	r1, r1
   130e8:	fc 01       	movw	r30, r24
   130ea:	e2 52       	subi	r30, 0x22	; 34
   130ec:	f7 4f       	sbci	r31, 0xF7	; 247
   130ee:	80 81       	ld	r24, Z
   130f0:	86 30       	cpi	r24, 0x06	; 6
   130f2:	e1 f5       	brne	.+120    	; 0x1316c <Barrier_unblock+0xc0>
   130f4:	8a 81       	ldd	r24, Y+2	; 0x02
   130f6:	28 2f       	mov	r18, r24
   130f8:	33 27       	eor	r19, r19
   130fa:	85 e2       	ldi	r24, 0x25	; 37
   130fc:	90 e0       	ldi	r25, 0x00	; 0
   130fe:	ac 01       	movw	r20, r24
   13100:	24 9f       	mul	r18, r20
   13102:	c0 01       	movw	r24, r0
   13104:	25 9f       	mul	r18, r21
   13106:	90 0d       	add	r25, r0
   13108:	34 9f       	mul	r19, r20
   1310a:	90 0d       	add	r25, r0
   1310c:	11 24       	eor	r1, r1
   1310e:	fc 01       	movw	r30, r24
   13110:	e9 50       	subi	r30, 0x09	; 9
   13112:	f7 4f       	sbci	r31, 0xF7	; 247
   13114:	90 81       	ld	r25, Z
   13116:	8b 81       	ldd	r24, Y+3	; 0x03
   13118:	98 17       	cp	r25, r24
   1311a:	41 f5       	brne	.+80     	; 0x1316c <Barrier_unblock+0xc0>
   1311c:	8a 81       	ldd	r24, Y+2	; 0x02
   1311e:	28 2f       	mov	r18, r24
   13120:	33 27       	eor	r19, r19
   13122:	85 e2       	ldi	r24, 0x25	; 37
   13124:	90 e0       	ldi	r25, 0x00	; 0
   13126:	ac 01       	movw	r20, r24
   13128:	24 9f       	mul	r18, r20
   1312a:	c0 01       	movw	r24, r0
   1312c:	25 9f       	mul	r18, r21
   1312e:	90 0d       	add	r25, r0
   13130:	34 9f       	mul	r19, r20
   13132:	90 0d       	add	r25, r0
   13134:	11 24       	eor	r1, r1
   13136:	fc 01       	movw	r30, r24
   13138:	e8 50       	subi	r30, 0x08	; 8
   1313a:	f7 4f       	sbci	r31, 0xF7	; 247
   1313c:	90 81       	ld	r25, Z
   1313e:	8c 81       	ldd	r24, Y+4	; 0x04
   13140:	98 17       	cp	r25, r24
   13142:	a1 f4       	brne	.+40     	; 0x1316c <Barrier_unblock+0xc0>
         //Mark that thread as active
         thread_table[ i ].state = STATE_ACTIVE;
   13144:	8a 81       	ldd	r24, Y+2	; 0x02
   13146:	28 2f       	mov	r18, r24
   13148:	33 27       	eor	r19, r19
   1314a:	85 e2       	ldi	r24, 0x25	; 37
   1314c:	90 e0       	ldi	r25, 0x00	; 0
   1314e:	ac 01       	movw	r20, r24
   13150:	24 9f       	mul	r18, r20
   13152:	c0 01       	movw	r24, r0
   13154:	25 9f       	mul	r18, r21
   13156:	90 0d       	add	r25, r0
   13158:	34 9f       	mul	r19, r20
   1315a:	90 0d       	add	r25, r0
   1315c:	11 24       	eor	r1, r1
   1315e:	fc 01       	movw	r30, r24
   13160:	e2 52       	subi	r30, 0x22	; 34
   13162:	f7 4f       	sbci	r31, 0xF7	; 247
   13164:	82 e0       	ldi	r24, 0x02	; 2
   13166:	80 83       	st	Z, r24
         postNewThreadTask();
   13168:	0e 94 ad 97 	call	0x12f5a	; 0x12f5a <postNewThreadTask>
   1316c:	8a 81       	ldd	r24, Y+2	; 0x02
   1316e:	8f 5f       	subi	r24, 0xFF	; 255
   13170:	8a 83       	std	Y+2, r24	; 0x02
   13172:	8a 81       	ldd	r24, Y+2	; 0x02
   13174:	88 30       	cpi	r24, 0x08	; 8
   13176:	08 f4       	brcc	.+2      	; 0x1317a <Barrier_unblock+0xce>
   13178:	aa cf       	rjmp	.-172    	; 0x130ce <Barrier_unblock+0x22>
      }
   }
   _atomic_end( currentatomic );
   1317a:	89 81       	ldd	r24, Y+1	; 0x01
   1317c:	0e 94 3d 9c 	call	0x1387a	; 0x1387a <_atomic_end>
   13180:	24 96       	adiw	r28, 0x04	; 4
   13182:	0f b6       	in	r0, 0x3f	; 63
   13184:	f8 94       	cli
   13186:	de bf       	out	0x3e, r29	; 62
   13188:	0f be       	out	0x3f, r0	; 63
   1318a:	cd bf       	out	0x3d, r28	; 61
   1318c:	df 91       	pop	r29
   1318e:	cf 91       	pop	r28
   13190:	08 95       	ret

00013192 <break_point_function>:
}


//-------------------------------------------------------------------------
void break_point_function() {
   13192:	cf 93       	push	r28
   13194:	df 93       	push	r29
   13196:	cd b7       	in	r28, 0x3d	; 61
   13198:	de b7       	in	r29, 0x3e	; 62
   1319a:	24 97       	sbiw	r28, 0x04	; 4
   1319c:	0f b6       	in	r0, 0x3f	; 63
   1319e:	f8 94       	cli
   131a0:	de bf       	out	0x3e, r29	; 62
   131a2:	0f be       	out	0x3f, r0	; 63
   131a4:	cd bf       	out	0x3d, r28	; 61
   int i;
   uint16_t index;
   index = 0;
   131a6:	1a 82       	std	Y+2, r1	; 0x02
   131a8:	19 82       	std	Y+1, r1	; 0x01
   for ( i = 0; i < LITE_MAX_THREADS; i ++ ) {
   131aa:	1c 82       	std	Y+4, r1	; 0x04
   131ac:	1b 82       	std	Y+3, r1	; 0x03
   131ae:	20 c0       	rjmp	.+64     	; 0x131f0 <break_point_function+0x5e>
      if ( current_thread == & ( thread_table[ i ] )) {
   131b0:	2b 81       	ldd	r18, Y+3	; 0x03
   131b2:	3c 81       	ldd	r19, Y+4	; 0x04
   131b4:	85 e2       	ldi	r24, 0x25	; 37
   131b6:	90 e0       	ldi	r25, 0x00	; 0
   131b8:	ac 01       	movw	r20, r24
   131ba:	24 9f       	mul	r18, r20
   131bc:	c0 01       	movw	r24, r0
   131be:	25 9f       	mul	r18, r21
   131c0:	90 0d       	add	r25, r0
   131c2:	34 9f       	mul	r19, r20
   131c4:	90 0d       	add	r25, r0
   131c6:	11 24       	eor	r1, r1
   131c8:	84 52       	subi	r24, 0x24	; 36
   131ca:	97 4f       	sbci	r25, 0xF7	; 247
   131cc:	9c 01       	movw	r18, r24
   131ce:	80 91 da 08 	lds	r24, 0x08DA
   131d2:	90 91 db 08 	lds	r25, 0x08DB
   131d6:	28 17       	cp	r18, r24
   131d8:	39 07       	cpc	r19, r25
   131da:	29 f4       	brne	.+10     	; 0x131e6 <break_point_function+0x54>
         index = i;
   131dc:	8b 81       	ldd	r24, Y+3	; 0x03
   131de:	9c 81       	ldd	r25, Y+4	; 0x04
   131e0:	9a 83       	std	Y+2, r25	; 0x02
   131e2:	89 83       	std	Y+1, r24	; 0x01
         break;
   131e4:	0a c0       	rjmp	.+20     	; 0x131fa <break_point_function+0x68>
   131e6:	8b 81       	ldd	r24, Y+3	; 0x03
   131e8:	9c 81       	ldd	r25, Y+4	; 0x04
   131ea:	01 96       	adiw	r24, 0x01	; 1
   131ec:	9c 83       	std	Y+4, r25	; 0x04
   131ee:	8b 83       	std	Y+3, r24	; 0x03
   131f0:	8b 81       	ldd	r24, Y+3	; 0x03
   131f2:	9c 81       	ldd	r25, Y+4	; 0x04
   131f4:	88 30       	cpi	r24, 0x08	; 8
   131f6:	91 05       	cpc	r25, r1
   131f8:	dc f2       	brlt	.-74     	; 0x131b0 <break_point_function+0x1e>
      }
   }
   thread_table[ index ].state = 8;
   131fa:	29 81       	ldd	r18, Y+1	; 0x01
   131fc:	3a 81       	ldd	r19, Y+2	; 0x02
   131fe:	85 e2       	ldi	r24, 0x25	; 37
   13200:	90 e0       	ldi	r25, 0x00	; 0
   13202:	ac 01       	movw	r20, r24
   13204:	24 9f       	mul	r18, r20
   13206:	c0 01       	movw	r24, r0
   13208:	25 9f       	mul	r18, r21
   1320a:	90 0d       	add	r25, r0
   1320c:	34 9f       	mul	r19, r20
   1320e:	90 0d       	add	r25, r0
   13210:	11 24       	eor	r1, r1
   13212:	fc 01       	movw	r30, r24
   13214:	e2 52       	subi	r30, 0x22	; 34
   13216:	f7 4f       	sbci	r31, 0xF7	; 247
   13218:	88 e0       	ldi	r24, 0x08	; 8
   1321a:	80 83       	st	Z, r24
   thread_yield();
   1321c:	0e 94 9e 93 	call	0x1273c	; 0x1273c <thread_yield>
   13220:	24 96       	adiw	r28, 0x04	; 4
   13222:	0f b6       	in	r0, 0x3f	; 63
   13224:	f8 94       	cli
   13226:	de bf       	out	0x3e, r29	; 62
   13228:	0f be       	out	0x3f, r0	; 63
   1322a:	cd bf       	out	0x3d, r28	; 61
   1322c:	df 91       	pop	r29
   1322e:	cf 91       	pop	r28
   13230:	08 95       	ret

00013232 <is_host_lsb>:
 
#include "byteorder.h"

//-------------------------------------------------------------------------
inline int is_host_lsb( void ) {
   13232:	cf 93       	push	r28
   13234:	df 93       	push	r29
   13236:	cd b7       	in	r28, 0x3d	; 61
   13238:	de b7       	in	r29, 0x3e	; 62
   1323a:	24 97       	sbiw	r28, 0x04	; 4
   1323c:	0f b6       	in	r0, 0x3f	; 63
   1323e:	f8 94       	cli
   13240:	de bf       	out	0x3e, r29	; 62
   13242:	0f be       	out	0x3f, r0	; 63
   13244:	cd bf       	out	0x3d, r28	; 61
   const uint8_t n[ 2 ] =  {
      1, 0
   };
   13246:	81 e0       	ldi	r24, 0x01	; 1
   13248:	89 83       	std	Y+1, r24	; 0x01
   1324a:	1a 82       	std	Y+2, r1	; 0x02
   return *( uint16_t* )n == 1;
   1324c:	fe 01       	movw	r30, r28
   1324e:	31 96       	adiw	r30, 0x01	; 1
   13250:	80 81       	ld	r24, Z
   13252:	91 81       	ldd	r25, Z+1	; 0x01
   13254:	1c 82       	std	Y+4, r1	; 0x04
   13256:	1b 82       	std	Y+3, r1	; 0x03
   13258:	81 30       	cpi	r24, 0x01	; 1
   1325a:	91 05       	cpc	r25, r1
   1325c:	21 f4       	brne	.+8      	; 0x13266 <is_host_lsb+0x34>
   1325e:	81 e0       	ldi	r24, 0x01	; 1
   13260:	90 e0       	ldi	r25, 0x00	; 0
   13262:	9c 83       	std	Y+4, r25	; 0x04
   13264:	8b 83       	std	Y+3, r24	; 0x03
   13266:	8b 81       	ldd	r24, Y+3	; 0x03
   13268:	9c 81       	ldd	r25, Y+4	; 0x04
   1326a:	24 96       	adiw	r28, 0x04	; 4
   1326c:	0f b6       	in	r0, 0x3f	; 63
   1326e:	f8 94       	cli
   13270:	de bf       	out	0x3e, r29	; 62
   13272:	0f be       	out	0x3f, r0	; 63
   13274:	cd bf       	out	0x3d, r28	; 61
   13276:	df 91       	pop	r29
   13278:	cf 91       	pop	r28
   1327a:	08 95       	ret

0001327c <toLSB16>:
}

//-------------------------------------------------------------------------
inline uint16_t toLSB16( uint16_t a ) {
   1327c:	cf 93       	push	r28
   1327e:	df 93       	push	r29
   13280:	cd b7       	in	r28, 0x3d	; 61
   13282:	de b7       	in	r29, 0x3e	; 62
   13284:	24 97       	sbiw	r28, 0x04	; 4
   13286:	0f b6       	in	r0, 0x3f	; 63
   13288:	f8 94       	cli
   1328a:	de bf       	out	0x3e, r29	; 62
   1328c:	0f be       	out	0x3f, r0	; 63
   1328e:	cd bf       	out	0x3d, r28	; 61
   13290:	9a 83       	std	Y+2, r25	; 0x02
   13292:	89 83       	std	Y+1, r24	; 0x01
   return is_host_lsb() ? a : ( a << 8 ) | ( a >> 8 );
   13294:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   13298:	00 97       	sbiw	r24, 0x00	; 0
   1329a:	29 f4       	brne	.+10     	; 0x132a6 <toLSB16+0x2a>
   1329c:	8a 81       	ldd	r24, Y+2	; 0x02
   1329e:	8b 83       	std	Y+3, r24	; 0x03
   132a0:	99 81       	ldd	r25, Y+1	; 0x01
   132a2:	9c 83       	std	Y+4, r25	; 0x04
   132a4:	04 c0       	rjmp	.+8      	; 0x132ae <toLSB16+0x32>
   132a6:	89 81       	ldd	r24, Y+1	; 0x01
   132a8:	9a 81       	ldd	r25, Y+2	; 0x02
   132aa:	9c 83       	std	Y+4, r25	; 0x04
   132ac:	8b 83       	std	Y+3, r24	; 0x03
   132ae:	8b 81       	ldd	r24, Y+3	; 0x03
   132b0:	9c 81       	ldd	r25, Y+4	; 0x04
   132b2:	24 96       	adiw	r28, 0x04	; 4
   132b4:	0f b6       	in	r0, 0x3f	; 63
   132b6:	f8 94       	cli
   132b8:	de bf       	out	0x3e, r29	; 62
   132ba:	0f be       	out	0x3f, r0	; 63
   132bc:	cd bf       	out	0x3d, r28	; 61
   132be:	df 91       	pop	r29
   132c0:	cf 91       	pop	r28
   132c2:	08 95       	ret

000132c4 <fromLSB16>:
}

//-------------------------------------------------------------------------
inline uint16_t fromLSB16( uint16_t a ) {
   132c4:	cf 93       	push	r28
   132c6:	df 93       	push	r29
   132c8:	cd b7       	in	r28, 0x3d	; 61
   132ca:	de b7       	in	r29, 0x3e	; 62
   132cc:	24 97       	sbiw	r28, 0x04	; 4
   132ce:	0f b6       	in	r0, 0x3f	; 63
   132d0:	f8 94       	cli
   132d2:	de bf       	out	0x3e, r29	; 62
   132d4:	0f be       	out	0x3f, r0	; 63
   132d6:	cd bf       	out	0x3d, r28	; 61
   132d8:	9a 83       	std	Y+2, r25	; 0x02
   132da:	89 83       	std	Y+1, r24	; 0x01
   return is_host_lsb() ? a : ( a << 8 ) | ( a >> 8 );
   132dc:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   132e0:	00 97       	sbiw	r24, 0x00	; 0
   132e2:	29 f4       	brne	.+10     	; 0x132ee <fromLSB16+0x2a>
   132e4:	8a 81       	ldd	r24, Y+2	; 0x02
   132e6:	8b 83       	std	Y+3, r24	; 0x03
   132e8:	99 81       	ldd	r25, Y+1	; 0x01
   132ea:	9c 83       	std	Y+4, r25	; 0x04
   132ec:	04 c0       	rjmp	.+8      	; 0x132f6 <fromLSB16+0x32>
   132ee:	89 81       	ldd	r24, Y+1	; 0x01
   132f0:	9a 81       	ldd	r25, Y+2	; 0x02
   132f2:	9c 83       	std	Y+4, r25	; 0x04
   132f4:	8b 83       	std	Y+3, r24	; 0x03
   132f6:	8b 81       	ldd	r24, Y+3	; 0x03
   132f8:	9c 81       	ldd	r25, Y+4	; 0x04
   132fa:	24 96       	adiw	r28, 0x04	; 4
   132fc:	0f b6       	in	r0, 0x3f	; 63
   132fe:	f8 94       	cli
   13300:	de bf       	out	0x3e, r29	; 62
   13302:	0f be       	out	0x3f, r0	; 63
   13304:	cd bf       	out	0x3d, r28	; 61
   13306:	df 91       	pop	r29
   13308:	cf 91       	pop	r28
   1330a:	08 95       	ret

0001330c <mystrcpy>:
 
#include "string.h"

//-------------------------------------------------------------------------
void mystrcpy( char *dest, const char *src ) {
   1330c:	cf 93       	push	r28
   1330e:	df 93       	push	r29
   13310:	cd b7       	in	r28, 0x3d	; 61
   13312:	de b7       	in	r29, 0x3e	; 62
   13314:	26 97       	sbiw	r28, 0x06	; 6
   13316:	0f b6       	in	r0, 0x3f	; 63
   13318:	f8 94       	cli
   1331a:	de bf       	out	0x3e, r29	; 62
   1331c:	0f be       	out	0x3f, r0	; 63
   1331e:	cd bf       	out	0x3d, r28	; 61
   13320:	9c 83       	std	Y+4, r25	; 0x04
   13322:	8b 83       	std	Y+3, r24	; 0x03
   13324:	7e 83       	std	Y+6, r23	; 0x06
   13326:	6d 83       	std	Y+5, r22	; 0x05
   int i;
   i = 0;
   13328:	1a 82       	std	Y+2, r1	; 0x02
   1332a:	19 82       	std	Y+1, r1	; 0x01
   while ( src[ i ] != '\0' ) {
   1332c:	17 c0       	rjmp	.+46     	; 0x1335c <mystrcpy+0x50>
      dest[ i ] = src[ i ];
   1332e:	89 81       	ldd	r24, Y+1	; 0x01
   13330:	9a 81       	ldd	r25, Y+2	; 0x02
   13332:	9c 01       	movw	r18, r24
   13334:	8b 81       	ldd	r24, Y+3	; 0x03
   13336:	9c 81       	ldd	r25, Y+4	; 0x04
   13338:	d9 01       	movw	r26, r18
   1333a:	a8 0f       	add	r26, r24
   1333c:	b9 1f       	adc	r27, r25
   1333e:	89 81       	ldd	r24, Y+1	; 0x01
   13340:	9a 81       	ldd	r25, Y+2	; 0x02
   13342:	9c 01       	movw	r18, r24
   13344:	8d 81       	ldd	r24, Y+5	; 0x05
   13346:	9e 81       	ldd	r25, Y+6	; 0x06
   13348:	f9 01       	movw	r30, r18
   1334a:	e8 0f       	add	r30, r24
   1334c:	f9 1f       	adc	r31, r25
   1334e:	80 81       	ld	r24, Z
   13350:	8c 93       	st	X, r24
      i ++;
   13352:	89 81       	ldd	r24, Y+1	; 0x01
   13354:	9a 81       	ldd	r25, Y+2	; 0x02
   13356:	01 96       	adiw	r24, 0x01	; 1
   13358:	9a 83       	std	Y+2, r25	; 0x02
   1335a:	89 83       	std	Y+1, r24	; 0x01
   1335c:	89 81       	ldd	r24, Y+1	; 0x01
   1335e:	9a 81       	ldd	r25, Y+2	; 0x02
   13360:	9c 01       	movw	r18, r24
   13362:	8d 81       	ldd	r24, Y+5	; 0x05
   13364:	9e 81       	ldd	r25, Y+6	; 0x06
   13366:	f9 01       	movw	r30, r18
   13368:	e8 0f       	add	r30, r24
   1336a:	f9 1f       	adc	r31, r25
   1336c:	80 81       	ld	r24, Z
   1336e:	88 23       	and	r24, r24
   13370:	f1 f6       	brne	.-68     	; 0x1332e <mystrcpy+0x22>
   }
      dest[ i ] = '\0';
   13372:	89 81       	ldd	r24, Y+1	; 0x01
   13374:	9a 81       	ldd	r25, Y+2	; 0x02
   13376:	9c 01       	movw	r18, r24
   13378:	8b 81       	ldd	r24, Y+3	; 0x03
   1337a:	9c 81       	ldd	r25, Y+4	; 0x04
   1337c:	f9 01       	movw	r30, r18
   1337e:	e8 0f       	add	r30, r24
   13380:	f9 1f       	adc	r31, r25
   13382:	10 82       	st	Z, r1
   13384:	26 96       	adiw	r28, 0x06	; 6
   13386:	0f b6       	in	r0, 0x3f	; 63
   13388:	f8 94       	cli
   1338a:	de bf       	out	0x3e, r29	; 62
   1338c:	0f be       	out	0x3f, r0	; 63
   1338e:	cd bf       	out	0x3d, r28	; 61
   13390:	df 91       	pop	r29
   13392:	cf 91       	pop	r28
   13394:	08 95       	ret

00013396 <mystrncpy>:
}


//-------------------------------------------------------------------------
void mystrncpy( char *dest, const char *src, uint8_t n ) {
   13396:	cf 93       	push	r28
   13398:	df 93       	push	r29
   1339a:	cd b7       	in	r28, 0x3d	; 61
   1339c:	de b7       	in	r29, 0x3e	; 62
   1339e:	27 97       	sbiw	r28, 0x07	; 7
   133a0:	0f b6       	in	r0, 0x3f	; 63
   133a2:	f8 94       	cli
   133a4:	de bf       	out	0x3e, r29	; 62
   133a6:	0f be       	out	0x3f, r0	; 63
   133a8:	cd bf       	out	0x3d, r28	; 61
   133aa:	9c 83       	std	Y+4, r25	; 0x04
   133ac:	8b 83       	std	Y+3, r24	; 0x03
   133ae:	7e 83       	std	Y+6, r23	; 0x06
   133b0:	6d 83       	std	Y+5, r22	; 0x05
   133b2:	4f 83       	std	Y+7, r20	; 0x07
   int i;
   for ( i = 0; i < n; i ++ ) {
   133b4:	1a 82       	std	Y+2, r1	; 0x02
   133b6:	19 82       	std	Y+1, r1	; 0x01
   133b8:	17 c0       	rjmp	.+46     	; 0x133e8 <mystrncpy+0x52>
      dest[ i ] = src[ i ];
   133ba:	89 81       	ldd	r24, Y+1	; 0x01
   133bc:	9a 81       	ldd	r25, Y+2	; 0x02
   133be:	9c 01       	movw	r18, r24
   133c0:	8b 81       	ldd	r24, Y+3	; 0x03
   133c2:	9c 81       	ldd	r25, Y+4	; 0x04
   133c4:	d9 01       	movw	r26, r18
   133c6:	a8 0f       	add	r26, r24
   133c8:	b9 1f       	adc	r27, r25
   133ca:	89 81       	ldd	r24, Y+1	; 0x01
   133cc:	9a 81       	ldd	r25, Y+2	; 0x02
   133ce:	9c 01       	movw	r18, r24
   133d0:	8d 81       	ldd	r24, Y+5	; 0x05
   133d2:	9e 81       	ldd	r25, Y+6	; 0x06
   133d4:	f9 01       	movw	r30, r18
   133d6:	e8 0f       	add	r30, r24
   133d8:	f9 1f       	adc	r31, r25
   133da:	80 81       	ld	r24, Z
   133dc:	8c 93       	st	X, r24
   133de:	89 81       	ldd	r24, Y+1	; 0x01
   133e0:	9a 81       	ldd	r25, Y+2	; 0x02
   133e2:	01 96       	adiw	r24, 0x01	; 1
   133e4:	9a 83       	std	Y+2, r25	; 0x02
   133e6:	89 83       	std	Y+1, r24	; 0x01
   133e8:	8f 81       	ldd	r24, Y+7	; 0x07
   133ea:	28 2f       	mov	r18, r24
   133ec:	33 27       	eor	r19, r19
   133ee:	89 81       	ldd	r24, Y+1	; 0x01
   133f0:	9a 81       	ldd	r25, Y+2	; 0x02
   133f2:	82 17       	cp	r24, r18
   133f4:	93 07       	cpc	r25, r19
   133f6:	0c f3       	brlt	.-62     	; 0x133ba <mystrncpy+0x24>
   133f8:	27 96       	adiw	r28, 0x07	; 7
   133fa:	0f b6       	in	r0, 0x3f	; 63
   133fc:	f8 94       	cli
   133fe:	de bf       	out	0x3e, r29	; 62
   13400:	0f be       	out	0x3f, r0	; 63
   13402:	cd bf       	out	0x3d, r28	; 61
   13404:	df 91       	pop	r29
   13406:	cf 91       	pop	r28
   13408:	08 95       	ret

0001340a <strappend>:
   } 
}


//-------------------------------------------------------------------------
void strappend( char *base, char *string ) {
   1340a:	cf 93       	push	r28
   1340c:	df 93       	push	r29
   1340e:	cd b7       	in	r28, 0x3d	; 61
   13410:	de b7       	in	r29, 0x3e	; 62
   13412:	29 97       	sbiw	r28, 0x09	; 9
   13414:	0f b6       	in	r0, 0x3f	; 63
   13416:	f8 94       	cli
   13418:	de bf       	out	0x3e, r29	; 62
   1341a:	0f be       	out	0x3f, r0	; 63
   1341c:	cd bf       	out	0x3d, r28	; 61
   1341e:	9f 83       	std	Y+7, r25	; 0x07
   13420:	8e 83       	std	Y+6, r24	; 0x06
   13422:	79 87       	std	Y+9, r23	; 0x09
   13424:	68 87       	std	Y+8, r22	; 0x08
   int length1, length2;
   uint8_t i;
   length1 = mystrlen( base );
   13426:	8e 81       	ldd	r24, Y+6	; 0x06
   13428:	9f 81       	ldd	r25, Y+7	; 0x07
   1342a:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
   1342e:	9d 83       	std	Y+5, r25	; 0x05
   13430:	8c 83       	std	Y+4, r24	; 0x04
   length2 = mystrlen( string );
   13432:	88 85       	ldd	r24, Y+8	; 0x08
   13434:	99 85       	ldd	r25, Y+9	; 0x09
   13436:	0e 94 88 9b 	call	0x13710	; 0x13710 <mystrlen>
   1343a:	9b 83       	std	Y+3, r25	; 0x03
   1343c:	8a 83       	std	Y+2, r24	; 0x02
   for ( i = 0; i < length2; i ++ ) {
   1343e:	19 82       	std	Y+1, r1	; 0x01
   13440:	1a c0       	rjmp	.+52     	; 0x13476 <strappend+0x6c>
      base[ i + length1 ] = string[ i ];
   13442:	89 81       	ldd	r24, Y+1	; 0x01
   13444:	28 2f       	mov	r18, r24
   13446:	33 27       	eor	r19, r19
   13448:	8c 81       	ldd	r24, Y+4	; 0x04
   1344a:	9d 81       	ldd	r25, Y+5	; 0x05
   1344c:	82 0f       	add	r24, r18
   1344e:	93 1f       	adc	r25, r19
   13450:	9c 01       	movw	r18, r24
   13452:	8e 81       	ldd	r24, Y+6	; 0x06
   13454:	9f 81       	ldd	r25, Y+7	; 0x07
   13456:	d9 01       	movw	r26, r18
   13458:	a8 0f       	add	r26, r24
   1345a:	b9 1f       	adc	r27, r25
   1345c:	89 81       	ldd	r24, Y+1	; 0x01
   1345e:	99 27       	eor	r25, r25
   13460:	9c 01       	movw	r18, r24
   13462:	88 85       	ldd	r24, Y+8	; 0x08
   13464:	99 85       	ldd	r25, Y+9	; 0x09
   13466:	f9 01       	movw	r30, r18
   13468:	e8 0f       	add	r30, r24
   1346a:	f9 1f       	adc	r31, r25
   1346c:	80 81       	ld	r24, Z
   1346e:	8c 93       	st	X, r24
   13470:	89 81       	ldd	r24, Y+1	; 0x01
   13472:	8f 5f       	subi	r24, 0xFF	; 255
   13474:	89 83       	std	Y+1, r24	; 0x01
   13476:	89 81       	ldd	r24, Y+1	; 0x01
   13478:	28 2f       	mov	r18, r24
   1347a:	33 27       	eor	r19, r19
   1347c:	8a 81       	ldd	r24, Y+2	; 0x02
   1347e:	9b 81       	ldd	r25, Y+3	; 0x03
   13480:	28 17       	cp	r18, r24
   13482:	39 07       	cpc	r19, r25
   13484:	f4 f2       	brlt	.-68     	; 0x13442 <strappend+0x38>
   }
   base[ length1 + length2 ] = '\0';
   13486:	2c 81       	ldd	r18, Y+4	; 0x04
   13488:	3d 81       	ldd	r19, Y+5	; 0x05
   1348a:	8a 81       	ldd	r24, Y+2	; 0x02
   1348c:	9b 81       	ldd	r25, Y+3	; 0x03
   1348e:	82 0f       	add	r24, r18
   13490:	93 1f       	adc	r25, r19
   13492:	9c 01       	movw	r18, r24
   13494:	8e 81       	ldd	r24, Y+6	; 0x06
   13496:	9f 81       	ldd	r25, Y+7	; 0x07
   13498:	f9 01       	movw	r30, r18
   1349a:	e8 0f       	add	r30, r24
   1349c:	f9 1f       	adc	r31, r25
   1349e:	10 82       	st	Z, r1
   134a0:	29 96       	adiw	r28, 0x09	; 9
   134a2:	0f b6       	in	r0, 0x3f	; 63
   134a4:	f8 94       	cli
   134a6:	de bf       	out	0x3e, r29	; 62
   134a8:	0f be       	out	0x3f, r0	; 63
   134aa:	cd bf       	out	0x3d, r28	; 61
   134ac:	df 91       	pop	r29
   134ae:	cf 91       	pop	r28
   134b0:	08 95       	ret

000134b2 <str_from_integer>:
}



//-------------------------------------------------------------------------
char *str_from_integer( int num ) {
   134b2:	0f 93       	push	r16
   134b4:	1f 93       	push	r17
   134b6:	cf 93       	push	r28
   134b8:	df 93       	push	r29
   134ba:	cd b7       	in	r28, 0x3d	; 61
   134bc:	de b7       	in	r29, 0x3e	; 62
   134be:	2a 97       	sbiw	r28, 0x0a	; 10
   134c0:	0f b6       	in	r0, 0x3f	; 63
   134c2:	f8 94       	cli
   134c4:	de bf       	out	0x3e, r29	; 62
   134c6:	0f be       	out	0x3f, r0	; 63
   134c8:	cd bf       	out	0x3d, r28	; 61
   134ca:	98 87       	std	Y+8, r25	; 0x08
   134cc:	8f 83       	std	Y+7, r24	; 0x07
   static char temp[ 7 ];
   int internal;
   uint8_t length;
   uint8_t i;
   uint8_t offset = 5;
   134ce:	85 e0       	ldi	r24, 0x05	; 5
   134d0:	8a 83       	std	Y+2, r24	; 0x02
   uint8_t remainder;
   if ( num < 0 ) {
   134d2:	8f 81       	ldd	r24, Y+7	; 0x07
   134d4:	98 85       	ldd	r25, Y+8	; 0x08
   134d6:	99 23       	and	r25, r25
   134d8:	44 f4       	brge	.+16     	; 0x134ea <str_from_integer+0x38>
      internal =  - num;
   134da:	8f 81       	ldd	r24, Y+7	; 0x07
   134dc:	98 85       	ldd	r25, Y+8	; 0x08
   134de:	90 95       	com	r25
   134e0:	81 95       	neg	r24
   134e2:	9f 4f       	sbci	r25, 0xFF	; 255
   134e4:	9e 83       	std	Y+6, r25	; 0x06
   134e6:	8d 83       	std	Y+5, r24	; 0x05
   134e8:	04 c0       	rjmp	.+8      	; 0x134f2 <str_from_integer+0x40>
   } else {
      internal = num;
   134ea:	8f 81       	ldd	r24, Y+7	; 0x07
   134ec:	98 85       	ldd	r25, Y+8	; 0x08
   134ee:	9e 83       	std	Y+6, r25	; 0x06
   134f0:	8d 83       	std	Y+5, r24	; 0x05
   } 
   temp[ 6 ] = '\0';
   134f2:	10 92 f5 03 	sts	0x03F5, r1
   do {
      remainder = internal % 10;
   134f6:	8d 81       	ldd	r24, Y+5	; 0x05
   134f8:	9e 81       	ldd	r25, Y+6	; 0x06
   134fa:	2a e0       	ldi	r18, 0x0A	; 10
   134fc:	30 e0       	ldi	r19, 0x00	; 0
   134fe:	b9 01       	movw	r22, r18
   13500:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
   13504:	89 83       	std	Y+1, r24	; 0x01
      temp[ offset ] = dec2asciichar( remainder );
   13506:	8a 81       	ldd	r24, Y+2	; 0x02
   13508:	08 2f       	mov	r16, r24
   1350a:	11 27       	eor	r17, r17
   1350c:	89 81       	ldd	r24, Y+1	; 0x01
   1350e:	0e 94 01 9c 	call	0x13802	; 0x13802 <dec2asciichar>
   13512:	f8 01       	movw	r30, r16
   13514:	e1 51       	subi	r30, 0x11	; 17
   13516:	fc 4f       	sbci	r31, 0xFC	; 252
   13518:	80 83       	st	Z, r24
      internal = internal / 10;
   1351a:	8d 81       	ldd	r24, Y+5	; 0x05
   1351c:	9e 81       	ldd	r25, Y+6	; 0x06
   1351e:	2a e0       	ldi	r18, 0x0A	; 10
   13520:	30 e0       	ldi	r19, 0x00	; 0
   13522:	b9 01       	movw	r22, r18
   13524:	0e 94 6e a3 	call	0x146dc	; 0x146dc <__divmodhi4>
   13528:	cb 01       	movw	r24, r22
   1352a:	9e 83       	std	Y+6, r25	; 0x06
   1352c:	8d 83       	std	Y+5, r24	; 0x05
      offset --;
   1352e:	8a 81       	ldd	r24, Y+2	; 0x02
   13530:	81 50       	subi	r24, 0x01	; 1
   13532:	8a 83       	std	Y+2, r24	; 0x02
   } while ( internal != 0 );
   13534:	8d 81       	ldd	r24, Y+5	; 0x05
   13536:	9e 81       	ldd	r25, Y+6	; 0x06
   13538:	00 97       	sbiw	r24, 0x00	; 0
   1353a:	e9 f6       	brne	.-70     	; 0x134f6 <str_from_integer+0x44>
   if ( num < 0 ) {
   1353c:	8f 81       	ldd	r24, Y+7	; 0x07
   1353e:	98 85       	ldd	r25, Y+8	; 0x08
   13540:	99 23       	and	r25, r25
   13542:	94 f4       	brge	.+36     	; 0x13568 <str_from_integer+0xb6>
      temp[ offset ] = '-';
   13544:	8a 81       	ldd	r24, Y+2	; 0x02
   13546:	99 27       	eor	r25, r25
   13548:	fc 01       	movw	r30, r24
   1354a:	e1 51       	subi	r30, 0x11	; 17
   1354c:	fc 4f       	sbci	r31, 0xFC	; 252
   1354e:	8d e2       	ldi	r24, 0x2D	; 45
   13550:	80 83       	st	Z, r24
      if ( offset == 0 ) {
   13552:	8a 81       	ldd	r24, Y+2	; 0x02
   13554:	88 23       	and	r24, r24
   13556:	29 f4       	brne	.+10     	; 0x13562 <str_from_integer+0xb0>
         return temp;
   13558:	8f ee       	ldi	r24, 0xEF	; 239
   1355a:	93 e0       	ldi	r25, 0x03	; 3
   1355c:	9a 87       	std	Y+10, r25	; 0x0a
   1355e:	89 87       	std	Y+9, r24	; 0x09
   13560:	27 c0       	rjmp	.+78     	; 0x135b0 <str_from_integer+0xfe>
      } else {
         offset --;
   13562:	8a 81       	ldd	r24, Y+2	; 0x02
   13564:	81 50       	subi	r24, 0x01	; 1
   13566:	8a 83       	std	Y+2, r24	; 0x02
      } 
   }
    {
      length = 7-offset - 1;
   13568:	86 e0       	ldi	r24, 0x06	; 6
   1356a:	9a 81       	ldd	r25, Y+2	; 0x02
   1356c:	89 1b       	sub	r24, r25
   1356e:	8c 83       	std	Y+4, r24	; 0x04
      for ( i = 0; i < length; i ++ ) {
   13570:	1b 82       	std	Y+3, r1	; 0x03
   13572:	16 c0       	rjmp	.+44     	; 0x135a0 <str_from_integer+0xee>
         temp[ i ] = temp[ i + offset + 1 ];
   13574:	8b 81       	ldd	r24, Y+3	; 0x03
   13576:	48 2f       	mov	r20, r24
   13578:	55 27       	eor	r21, r21
   1357a:	8b 81       	ldd	r24, Y+3	; 0x03
   1357c:	28 2f       	mov	r18, r24
   1357e:	33 27       	eor	r19, r19
   13580:	8a 81       	ldd	r24, Y+2	; 0x02
   13582:	99 27       	eor	r25, r25
   13584:	82 0f       	add	r24, r18
   13586:	93 1f       	adc	r25, r19
   13588:	01 96       	adiw	r24, 0x01	; 1
   1358a:	fc 01       	movw	r30, r24
   1358c:	e1 51       	subi	r30, 0x11	; 17
   1358e:	fc 4f       	sbci	r31, 0xFC	; 252
   13590:	80 81       	ld	r24, Z
   13592:	fa 01       	movw	r30, r20
   13594:	e1 51       	subi	r30, 0x11	; 17
   13596:	fc 4f       	sbci	r31, 0xFC	; 252
   13598:	80 83       	st	Z, r24
   1359a:	8b 81       	ldd	r24, Y+3	; 0x03
   1359c:	8f 5f       	subi	r24, 0xFF	; 255
   1359e:	8b 83       	std	Y+3, r24	; 0x03
   135a0:	9b 81       	ldd	r25, Y+3	; 0x03
   135a2:	8c 81       	ldd	r24, Y+4	; 0x04
   135a4:	98 17       	cp	r25, r24
   135a6:	30 f3       	brcs	.-52     	; 0x13574 <str_from_integer+0xc2>
      } 
   }
   return temp;
   135a8:	8f ee       	ldi	r24, 0xEF	; 239
   135aa:	93 e0       	ldi	r25, 0x03	; 3
   135ac:	9a 87       	std	Y+10, r25	; 0x0a
   135ae:	89 87       	std	Y+9, r24	; 0x09
   135b0:	89 85       	ldd	r24, Y+9	; 0x09
   135b2:	9a 85       	ldd	r25, Y+10	; 0x0a
   135b4:	2a 96       	adiw	r28, 0x0a	; 10
   135b6:	0f b6       	in	r0, 0x3f	; 63
   135b8:	f8 94       	cli
   135ba:	de bf       	out	0x3e, r29	; 62
   135bc:	0f be       	out	0x3f, r0	; 63
   135be:	cd bf       	out	0x3d, r28	; 61
   135c0:	df 91       	pop	r29
   135c2:	cf 91       	pop	r28
   135c4:	1f 91       	pop	r17
   135c6:	0f 91       	pop	r16
   135c8:	08 95       	ret

000135ca <superstring>:
}



//-------------------------------------------------------------------------
int superstring( char *string1, char *string2 ) {
   135ca:	cf 93       	push	r28
   135cc:	df 93       	push	r29
   135ce:	cd b7       	in	r28, 0x3d	; 61
   135d0:	de b7       	in	r29, 0x3e	; 62
   135d2:	2a 97       	sbiw	r28, 0x0a	; 10
   135d4:	0f b6       	in	r0, 0x3f	; 63
   135d6:	f8 94       	cli
   135d8:	de bf       	out	0x3e, r29	; 62
   135da:	0f be       	out	0x3f, r0	; 63
   135dc:	cd bf       	out	0x3d, r28	; 61
   135de:	9e 83       	std	Y+6, r25	; 0x06
   135e0:	8d 83       	std	Y+5, r24	; 0x05
   135e2:	78 87       	std	Y+8, r23	; 0x08
   135e4:	6f 83       	std	Y+7, r22	; 0x07
   //returns string1 is a superstring of string2, (equal or longer but string2 is prefix) then return 0
   //else return 1
   char *p,  *q;
   p = string1;
   135e6:	8d 81       	ldd	r24, Y+5	; 0x05
   135e8:	9e 81       	ldd	r25, Y+6	; 0x06
   135ea:	9c 83       	std	Y+4, r25	; 0x04
   135ec:	8b 83       	std	Y+3, r24	; 0x03
   q = string2;
   135ee:	8f 81       	ldd	r24, Y+7	; 0x07
   135f0:	98 85       	ldd	r25, Y+8	; 0x08
   135f2:	9a 83       	std	Y+2, r25	; 0x02
   135f4:	89 83       	std	Y+1, r24	; 0x01
   while (( *p ==  *q ) && ( *p != '\0' )) {
   135f6:	0a c0       	rjmp	.+20     	; 0x1360c <superstring+0x42>
      p ++;
   135f8:	8b 81       	ldd	r24, Y+3	; 0x03
   135fa:	9c 81       	ldd	r25, Y+4	; 0x04
   135fc:	01 96       	adiw	r24, 0x01	; 1
   135fe:	9c 83       	std	Y+4, r25	; 0x04
   13600:	8b 83       	std	Y+3, r24	; 0x03
      q ++;
   13602:	89 81       	ldd	r24, Y+1	; 0x01
   13604:	9a 81       	ldd	r25, Y+2	; 0x02
   13606:	01 96       	adiw	r24, 0x01	; 1
   13608:	9a 83       	std	Y+2, r25	; 0x02
   1360a:	89 83       	std	Y+1, r24	; 0x01
   1360c:	eb 81       	ldd	r30, Y+3	; 0x03
   1360e:	fc 81       	ldd	r31, Y+4	; 0x04
   13610:	90 81       	ld	r25, Z
   13612:	e9 81       	ldd	r30, Y+1	; 0x01
   13614:	fa 81       	ldd	r31, Y+2	; 0x02
   13616:	80 81       	ld	r24, Z
   13618:	98 17       	cp	r25, r24
   1361a:	29 f4       	brne	.+10     	; 0x13626 <superstring+0x5c>
   1361c:	eb 81       	ldd	r30, Y+3	; 0x03
   1361e:	fc 81       	ldd	r31, Y+4	; 0x04
   13620:	80 81       	ld	r24, Z
   13622:	88 23       	and	r24, r24
   13624:	49 f7       	brne	.-46     	; 0x135f8 <superstring+0x2e>
   }
   if (( *q == '\0' ) && ( *p != '\0' )) {
   13626:	e9 81       	ldd	r30, Y+1	; 0x01
   13628:	fa 81       	ldd	r31, Y+2	; 0x02
   1362a:	80 81       	ld	r24, Z
   1362c:	88 23       	and	r24, r24
   1362e:	41 f4       	brne	.+16     	; 0x13640 <superstring+0x76>
   13630:	eb 81       	ldd	r30, Y+3	; 0x03
   13632:	fc 81       	ldd	r31, Y+4	; 0x04
   13634:	80 81       	ld	r24, Z
   13636:	88 23       	and	r24, r24
   13638:	19 f0       	breq	.+6      	; 0x13640 <superstring+0x76>
      return 0;
   1363a:	1a 86       	std	Y+10, r1	; 0x0a
   1363c:	19 86       	std	Y+9, r1	; 0x09
   1363e:	11 c0       	rjmp	.+34     	; 0x13662 <superstring+0x98>
   } if (( *q == '\0' ) && ( *p == '\0' )) {
   13640:	e9 81       	ldd	r30, Y+1	; 0x01
   13642:	fa 81       	ldd	r31, Y+2	; 0x02
   13644:	80 81       	ld	r24, Z
   13646:	88 23       	and	r24, r24
   13648:	41 f4       	brne	.+16     	; 0x1365a <superstring+0x90>
   1364a:	eb 81       	ldd	r30, Y+3	; 0x03
   1364c:	fc 81       	ldd	r31, Y+4	; 0x04
   1364e:	80 81       	ld	r24, Z
   13650:	88 23       	and	r24, r24
   13652:	19 f4       	brne	.+6      	; 0x1365a <superstring+0x90>
      return 0;
   13654:	1a 86       	std	Y+10, r1	; 0x0a
   13656:	19 86       	std	Y+9, r1	; 0x09
   13658:	04 c0       	rjmp	.+8      	; 0x13662 <superstring+0x98>
   } return 1;
   1365a:	81 e0       	ldi	r24, 0x01	; 1
   1365c:	90 e0       	ldi	r25, 0x00	; 0
   1365e:	9a 87       	std	Y+10, r25	; 0x0a
   13660:	89 87       	std	Y+9, r24	; 0x09
   13662:	89 85       	ldd	r24, Y+9	; 0x09
   13664:	9a 85       	ldd	r25, Y+10	; 0x0a
   13666:	2a 96       	adiw	r28, 0x0a	; 10
   13668:	0f b6       	in	r0, 0x3f	; 63
   1366a:	f8 94       	cli
   1366c:	de bf       	out	0x3e, r29	; 62
   1366e:	0f be       	out	0x3f, r0	; 63
   13670:	cd bf       	out	0x3d, r28	; 61
   13672:	df 91       	pop	r29
   13674:	cf 91       	pop	r28
   13676:	08 95       	ret

00013678 <mystrncmp>:
}



//-------------------------------------------------------------------------
int mystrncmp( char *s, uint8_t start1, char *t, uint8_t start2, uint8_t length ) {
   13678:	0f 93       	push	r16
   1367a:	cf 93       	push	r28
   1367c:	df 93       	push	r29
   1367e:	cd b7       	in	r28, 0x3d	; 61
   13680:	de b7       	in	r29, 0x3e	; 62
   13682:	2a 97       	sbiw	r28, 0x0a	; 10
   13684:	0f b6       	in	r0, 0x3f	; 63
   13686:	f8 94       	cli
   13688:	de bf       	out	0x3e, r29	; 62
   1368a:	0f be       	out	0x3f, r0	; 63
   1368c:	cd bf       	out	0x3d, r28	; 61
   1368e:	9b 83       	std	Y+3, r25	; 0x03
   13690:	8a 83       	std	Y+2, r24	; 0x02
   13692:	6c 83       	std	Y+4, r22	; 0x04
   13694:	5e 83       	std	Y+6, r21	; 0x06
   13696:	4d 83       	std	Y+5, r20	; 0x05
   13698:	2f 83       	std	Y+7, r18	; 0x07
   1369a:	08 87       	std	Y+8, r16	; 0x08
   uint8_t i;
   for ( i = 0; i < length; i ++ ) {
   1369c:	19 82       	std	Y+1, r1	; 0x01
   1369e:	26 c0       	rjmp	.+76     	; 0x136ec <mystrncmp+0x74>
      if ( s[ i + start1 ] != t[ i + start2 ] ) {
   136a0:	89 81       	ldd	r24, Y+1	; 0x01
   136a2:	28 2f       	mov	r18, r24
   136a4:	33 27       	eor	r19, r19
   136a6:	8c 81       	ldd	r24, Y+4	; 0x04
   136a8:	99 27       	eor	r25, r25
   136aa:	82 0f       	add	r24, r18
   136ac:	93 1f       	adc	r25, r19
   136ae:	9c 01       	movw	r18, r24
   136b0:	8a 81       	ldd	r24, Y+2	; 0x02
   136b2:	9b 81       	ldd	r25, Y+3	; 0x03
   136b4:	f9 01       	movw	r30, r18
   136b6:	e8 0f       	add	r30, r24
   136b8:	f9 1f       	adc	r31, r25
   136ba:	40 81       	ld	r20, Z
   136bc:	89 81       	ldd	r24, Y+1	; 0x01
   136be:	28 2f       	mov	r18, r24
   136c0:	33 27       	eor	r19, r19
   136c2:	8f 81       	ldd	r24, Y+7	; 0x07
   136c4:	99 27       	eor	r25, r25
   136c6:	82 0f       	add	r24, r18
   136c8:	93 1f       	adc	r25, r19
   136ca:	9c 01       	movw	r18, r24
   136cc:	8d 81       	ldd	r24, Y+5	; 0x05
   136ce:	9e 81       	ldd	r25, Y+6	; 0x06
   136d0:	f9 01       	movw	r30, r18
   136d2:	e8 0f       	add	r30, r24
   136d4:	f9 1f       	adc	r31, r25
   136d6:	80 81       	ld	r24, Z
   136d8:	48 17       	cp	r20, r24
   136da:	29 f0       	breq	.+10     	; 0x136e6 <mystrncmp+0x6e>
         return 1;
   136dc:	81 e0       	ldi	r24, 0x01	; 1
   136de:	90 e0       	ldi	r25, 0x00	; 0
   136e0:	9a 87       	std	Y+10, r25	; 0x0a
   136e2:	89 87       	std	Y+9, r24	; 0x09
   136e4:	09 c0       	rjmp	.+18     	; 0x136f8 <mystrncmp+0x80>
   136e6:	89 81       	ldd	r24, Y+1	; 0x01
   136e8:	8f 5f       	subi	r24, 0xFF	; 255
   136ea:	89 83       	std	Y+1, r24	; 0x01
   136ec:	99 81       	ldd	r25, Y+1	; 0x01
   136ee:	88 85       	ldd	r24, Y+8	; 0x08
   136f0:	98 17       	cp	r25, r24
   136f2:	b0 f2       	brcs	.-84     	; 0x136a0 <mystrncmp+0x28>
      } 
   }
   return 0;
   136f4:	1a 86       	std	Y+10, r1	; 0x0a
   136f6:	19 86       	std	Y+9, r1	; 0x09
   136f8:	89 85       	ldd	r24, Y+9	; 0x09
   136fa:	9a 85       	ldd	r25, Y+10	; 0x0a
   136fc:	2a 96       	adiw	r28, 0x0a	; 10
   136fe:	0f b6       	in	r0, 0x3f	; 63
   13700:	f8 94       	cli
   13702:	de bf       	out	0x3e, r29	; 62
   13704:	0f be       	out	0x3f, r0	; 63
   13706:	cd bf       	out	0x3d, r28	; 61
   13708:	df 91       	pop	r29
   1370a:	cf 91       	pop	r28
   1370c:	0f 91       	pop	r16
   1370e:	08 95       	ret

00013710 <mystrlen>:
}


//--------------------------------------------------------------------------
int mystrlen( char *s ) {
   13710:	cf 93       	push	r28
   13712:	df 93       	push	r29
   13714:	cd b7       	in	r28, 0x3d	; 61
   13716:	de b7       	in	r29, 0x3e	; 62
   13718:	24 97       	sbiw	r28, 0x04	; 4
   1371a:	0f b6       	in	r0, 0x3f	; 63
   1371c:	f8 94       	cli
   1371e:	de bf       	out	0x3e, r29	; 62
   13720:	0f be       	out	0x3f, r0	; 63
   13722:	cd bf       	out	0x3d, r28	; 61
   13724:	9c 83       	std	Y+4, r25	; 0x04
   13726:	8b 83       	std	Y+3, r24	; 0x03
   int count = 0;
   13728:	1a 82       	std	Y+2, r1	; 0x02
   1372a:	19 82       	std	Y+1, r1	; 0x01
   while ( s[ count ] != '\0' ) {
   1372c:	05 c0       	rjmp	.+10     	; 0x13738 <mystrlen+0x28>
      count ++;
   1372e:	89 81       	ldd	r24, Y+1	; 0x01
   13730:	9a 81       	ldd	r25, Y+2	; 0x02
   13732:	01 96       	adiw	r24, 0x01	; 1
   13734:	9a 83       	std	Y+2, r25	; 0x02
   13736:	89 83       	std	Y+1, r24	; 0x01
   13738:	89 81       	ldd	r24, Y+1	; 0x01
   1373a:	9a 81       	ldd	r25, Y+2	; 0x02
   1373c:	9c 01       	movw	r18, r24
   1373e:	8b 81       	ldd	r24, Y+3	; 0x03
   13740:	9c 81       	ldd	r25, Y+4	; 0x04
   13742:	f9 01       	movw	r30, r18
   13744:	e8 0f       	add	r30, r24
   13746:	f9 1f       	adc	r31, r25
   13748:	80 81       	ld	r24, Z
   1374a:	88 23       	and	r24, r24
   1374c:	81 f7       	brne	.-32     	; 0x1372e <mystrlen+0x1e>
   } return count;
   1374e:	89 81       	ldd	r24, Y+1	; 0x01
   13750:	9a 81       	ldd	r25, Y+2	; 0x02
   13752:	24 96       	adiw	r28, 0x04	; 4
   13754:	0f b6       	in	r0, 0x3f	; 63
   13756:	f8 94       	cli
   13758:	de bf       	out	0x3e, r29	; 62
   1375a:	0f be       	out	0x3f, r0	; 63
   1375c:	cd bf       	out	0x3d, r28	; 61
   1375e:	df 91       	pop	r29
   13760:	cf 91       	pop	r28
   13762:	08 95       	ret

00013764 <rcombine>:
#include "../platform/micaz/micazhardware.h"

#endif

inline result_t rcombine( result_t r1, result_t r2 ) {
   13764:	cf 93       	push	r28
   13766:	df 93       	push	r29
   13768:	cd b7       	in	r28, 0x3d	; 61
   1376a:	de b7       	in	r29, 0x3e	; 62
   1376c:	24 97       	sbiw	r28, 0x04	; 4
   1376e:	0f b6       	in	r0, 0x3f	; 63
   13770:	f8 94       	cli
   13772:	de bf       	out	0x3e, r29	; 62
   13774:	0f be       	out	0x3f, r0	; 63
   13776:	cd bf       	out	0x3d, r28	; 61
   13778:	89 83       	std	Y+1, r24	; 0x01
   1377a:	6a 83       	std	Y+2, r22	; 0x02
   return r1 == FAIL ? FAIL : r2;
   1377c:	89 81       	ldd	r24, Y+1	; 0x01
   1377e:	88 23       	and	r24, r24
   13780:	31 f0       	breq	.+12     	; 0x1378e <rcombine+0x2a>
   13782:	8a 81       	ldd	r24, Y+2	; 0x02
   13784:	28 2f       	mov	r18, r24
   13786:	33 27       	eor	r19, r19
   13788:	3c 83       	std	Y+4, r19	; 0x04
   1378a:	2b 83       	std	Y+3, r18	; 0x03
   1378c:	02 c0       	rjmp	.+4      	; 0x13792 <rcombine+0x2e>
   1378e:	1c 82       	std	Y+4, r1	; 0x04
   13790:	1b 82       	std	Y+3, r1	; 0x03
   13792:	8b 81       	ldd	r24, Y+3	; 0x03
   13794:	9c 81       	ldd	r25, Y+4	; 0x04
   13796:	24 96       	adiw	r28, 0x04	; 4
   13798:	0f b6       	in	r0, 0x3f	; 63
   1379a:	f8 94       	cli
   1379c:	de bf       	out	0x3e, r29	; 62
   1379e:	0f be       	out	0x3f, r0	; 63
   137a0:	cd bf       	out	0x3d, r28	; 61
   137a2:	df 91       	pop	r29
   137a4:	cf 91       	pop	r28
   137a6:	08 95       	ret

000137a8 <hex2value>:
}


//-------------------------------------------------------------------------
uint16_t hex2value( uint8_t hex ) {
   137a8:	cf 93       	push	r28
   137aa:	df 93       	push	r29
   137ac:	cd b7       	in	r28, 0x3d	; 61
   137ae:	de b7       	in	r29, 0x3e	; 62
   137b0:	24 97       	sbiw	r28, 0x04	; 4
   137b2:	0f b6       	in	r0, 0x3f	; 63
   137b4:	f8 94       	cli
   137b6:	de bf       	out	0x3e, r29	; 62
   137b8:	0f be       	out	0x3f, r0	; 63
   137ba:	cd bf       	out	0x3d, r28	; 61
   137bc:	8c 83       	std	Y+4, r24	; 0x04
   char a = ( char )hex;
   137be:	8c 81       	ldd	r24, Y+4	; 0x04
   137c0:	8b 83       	std	Y+3, r24	; 0x03
   uint16_t high;
   if (( a >= '0' ) && ( a <= '9' )) {
   137c2:	8b 81       	ldd	r24, Y+3	; 0x03
   137c4:	80 33       	cpi	r24, 0x30	; 48
   137c6:	5c f0       	brlt	.+22     	; 0x137de <hex2value+0x36>
   137c8:	8b 81       	ldd	r24, Y+3	; 0x03
   137ca:	8a 33       	cpi	r24, 0x3A	; 58
   137cc:	44 f4       	brge	.+16     	; 0x137de <hex2value+0x36>
      high = a - '0';
   137ce:	8b 81       	ldd	r24, Y+3	; 0x03
   137d0:	99 27       	eor	r25, r25
   137d2:	87 fd       	sbrc	r24, 7
   137d4:	90 95       	com	r25
   137d6:	c0 97       	sbiw	r24, 0x30	; 48
   137d8:	9a 83       	std	Y+2, r25	; 0x02
   137da:	89 83       	std	Y+1, r24	; 0x01
   137dc:	07 c0       	rjmp	.+14     	; 0x137ec <hex2value+0x44>
   } else {
      high = a - 'A' + 10;
   137de:	8b 81       	ldd	r24, Y+3	; 0x03
   137e0:	99 27       	eor	r25, r25
   137e2:	87 fd       	sbrc	r24, 7
   137e4:	90 95       	com	r25
   137e6:	c7 97       	sbiw	r24, 0x37	; 55
   137e8:	9a 83       	std	Y+2, r25	; 0x02
   137ea:	89 83       	std	Y+1, r24	; 0x01
   } return high;
   137ec:	89 81       	ldd	r24, Y+1	; 0x01
   137ee:	9a 81       	ldd	r25, Y+2	; 0x02
   137f0:	24 96       	adiw	r28, 0x04	; 4
   137f2:	0f b6       	in	r0, 0x3f	; 63
   137f4:	f8 94       	cli
   137f6:	de bf       	out	0x3e, r29	; 62
   137f8:	0f be       	out	0x3f, r0	; 63
   137fa:	cd bf       	out	0x3d, r28	; 61
   137fc:	df 91       	pop	r29
   137fe:	cf 91       	pop	r28
   13800:	08 95       	ret

00013802 <dec2asciichar>:
}



//-------------------------------------------------------------------------
char dec2asciichar( uint8_t value ) {
   13802:	cf 93       	push	r28
   13804:	df 93       	push	r29
   13806:	cd b7       	in	r28, 0x3d	; 61
   13808:	de b7       	in	r29, 0x3e	; 62
   1380a:	23 97       	sbiw	r28, 0x03	; 3
   1380c:	0f b6       	in	r0, 0x3f	; 63
   1380e:	f8 94       	cli
   13810:	de bf       	out	0x3e, r29	; 62
   13812:	0f be       	out	0x3f, r0	; 63
   13814:	cd bf       	out	0x3d, r28	; 61
   13816:	89 83       	std	Y+1, r24	; 0x01
   if (/*( value >= 0 ) &&*/ ( value <= 9 )) {
   13818:	89 81       	ldd	r24, Y+1	; 0x01
   1381a:	8a 30       	cpi	r24, 0x0A	; 10
   1381c:	48 f4       	brcc	.+18     	; 0x13830 <dec2asciichar+0x2e>
      return ( char )( value + 0x30 );
   1381e:	89 81       	ldd	r24, Y+1	; 0x01
   13820:	80 5d       	subi	r24, 0xD0	; 208
   13822:	28 2f       	mov	r18, r24
   13824:	33 27       	eor	r19, r19
   13826:	27 fd       	sbrc	r18, 7
   13828:	30 95       	com	r19
   1382a:	3b 83       	std	Y+3, r19	; 0x03
   1382c:	2a 83       	std	Y+2, r18	; 0x02
   1382e:	02 c0       	rjmp	.+4      	; 0x13834 <dec2asciichar+0x32>
   } else {
      return 0;
   13830:	1b 82       	std	Y+3, r1	; 0x03
   13832:	1a 82       	std	Y+2, r1	; 0x02
   13834:	8a 81       	ldd	r24, Y+2	; 0x02
   13836:	9b 81       	ldd	r25, Y+3	; 0x03
   13838:	23 96       	adiw	r28, 0x03	; 3
   1383a:	0f b6       	in	r0, 0x3f	; 63
   1383c:	f8 94       	cli
   1383e:	de bf       	out	0x3e, r29	; 62
   13840:	0f be       	out	0x3f, r0	; 63
   13842:	cd bf       	out	0x3d, r28	; 61
   13844:	df 91       	pop	r29
   13846:	cf 91       	pop	r28
   13848:	08 95       	ret

0001384a <_atomic_start>:
   } 
}


//-------------------------------------------------------------------------
_atomic_t _atomic_start( void ) {   
   1384a:	cf 93       	push	r28
   1384c:	df 93       	push	r29
   1384e:	cd b7       	in	r28, 0x3d	; 61
   13850:	de b7       	in	r29, 0x3e	; 62
   13852:	21 97       	sbiw	r28, 0x01	; 1
   13854:	0f b6       	in	r0, 0x3f	; 63
   13856:	f8 94       	cli
   13858:	de bf       	out	0x3e, r29	; 62
   1385a:	0f be       	out	0x3f, r0	; 63
   1385c:	cd bf       	out	0x3d, r28	; 61
	
	#ifdef PLATFORM_AVR
    _atomic_t result = _atomic_start_avr(); 
   1385e:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <_atomic_start_avr>
   13862:	89 83       	std	Y+1, r24	; 0x01
  #endif
   
   return result;
   13864:	89 81       	ldd	r24, Y+1	; 0x01
   13866:	99 27       	eor	r25, r25
   13868:	21 96       	adiw	r28, 0x01	; 1
   1386a:	0f b6       	in	r0, 0x3f	; 63
   1386c:	f8 94       	cli
   1386e:	de bf       	out	0x3e, r29	; 62
   13870:	0f be       	out	0x3f, r0	; 63
   13872:	cd bf       	out	0x3d, r28	; 61
   13874:	df 91       	pop	r29
   13876:	cf 91       	pop	r28
   13878:	08 95       	ret

0001387a <_atomic_end>:
}

//-------------------------------------------------------------------------
void _atomic_end( _atomic_t oldSreg ) {
   1387a:	cf 93       	push	r28
   1387c:	df 93       	push	r29
   1387e:	cd b7       	in	r28, 0x3d	; 61
   13880:	de b7       	in	r29, 0x3e	; 62
   13882:	21 97       	sbiw	r28, 0x01	; 1
   13884:	0f b6       	in	r0, 0x3f	; 63
   13886:	f8 94       	cli
   13888:	de bf       	out	0x3e, r29	; 62
   1388a:	0f be       	out	0x3f, r0	; 63
   1388c:	cd bf       	out	0x3d, r28	; 61
   1388e:	89 83       	std	Y+1, r24	; 0x01
	
	#ifdef PLATFORM_AVR
	   _atomic_end_avr(oldSreg);
   13890:	89 81       	ldd	r24, Y+1	; 0x01
   13892:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <_atomic_end_avr>
   13896:	21 96       	adiw	r28, 0x01	; 1
   13898:	0f b6       	in	r0, 0x3f	; 63
   1389a:	f8 94       	cli
   1389c:	de bf       	out	0x3e, r29	; 62
   1389e:	0f be       	out	0x3f, r0	; 63
   138a0:	cd bf       	out	0x3d, r28	; 61
   138a2:	df 91       	pop	r29
   138a4:	cf 91       	pop	r28
   138a6:	08 95       	ret

000138a8 <nmemset>:
	#endif
}


//-------------------------------------------------------------------------
inline void *nmemset( void *to, int val, size_t n ) {
   138a8:	cf 93       	push	r28
   138aa:	df 93       	push	r29
   138ac:	cd b7       	in	r28, 0x3d	; 61
   138ae:	de b7       	in	r29, 0x3e	; 62
   138b0:	28 97       	sbiw	r28, 0x08	; 8
   138b2:	0f b6       	in	r0, 0x3f	; 63
   138b4:	f8 94       	cli
   138b6:	de bf       	out	0x3e, r29	; 62
   138b8:	0f be       	out	0x3f, r0	; 63
   138ba:	cd bf       	out	0x3d, r28	; 61
   138bc:	9c 83       	std	Y+4, r25	; 0x04
   138be:	8b 83       	std	Y+3, r24	; 0x03
   138c0:	7e 83       	std	Y+6, r23	; 0x06
   138c2:	6d 83       	std	Y+5, r22	; 0x05
   138c4:	58 87       	std	Y+8, r21	; 0x08
   138c6:	4f 83       	std	Y+7, r20	; 0x07
   char *cto = to;
   138c8:	8b 81       	ldd	r24, Y+3	; 0x03
   138ca:	9c 81       	ldd	r25, Y+4	; 0x04
   138cc:	9a 83       	std	Y+2, r25	; 0x02
   138ce:	89 83       	std	Y+1, r24	; 0x01
   while ( n -- ) {
   138d0:	09 c0       	rjmp	.+18     	; 0x138e4 <nmemset+0x3c>
       *cto ++ = val;
   138d2:	8d 81       	ldd	r24, Y+5	; 0x05
   138d4:	e9 81       	ldd	r30, Y+1	; 0x01
   138d6:	fa 81       	ldd	r31, Y+2	; 0x02
   138d8:	80 83       	st	Z, r24
   138da:	89 81       	ldd	r24, Y+1	; 0x01
   138dc:	9a 81       	ldd	r25, Y+2	; 0x02
   138de:	01 96       	adiw	r24, 0x01	; 1
   138e0:	9a 83       	std	Y+2, r25	; 0x02
   138e2:	89 83       	std	Y+1, r24	; 0x01
   138e4:	8f 81       	ldd	r24, Y+7	; 0x07
   138e6:	98 85       	ldd	r25, Y+8	; 0x08
   138e8:	01 97       	sbiw	r24, 0x01	; 1
   138ea:	98 87       	std	Y+8, r25	; 0x08
   138ec:	8f 83       	std	Y+7, r24	; 0x07
   138ee:	8f 81       	ldd	r24, Y+7	; 0x07
   138f0:	98 85       	ldd	r25, Y+8	; 0x08
   138f2:	2f ef       	ldi	r18, 0xFF	; 255
   138f4:	8f 3f       	cpi	r24, 0xFF	; 255
   138f6:	92 07       	cpc	r25, r18
   138f8:	61 f7       	brne	.-40     	; 0x138d2 <nmemset+0x2a>
   } return to;
   138fa:	8b 81       	ldd	r24, Y+3	; 0x03
   138fc:	9c 81       	ldd	r25, Y+4	; 0x04
   138fe:	28 96       	adiw	r28, 0x08	; 8
   13900:	0f b6       	in	r0, 0x3f	; 63
   13902:	f8 94       	cli
   13904:	de bf       	out	0x3e, r29	; 62
   13906:	0f be       	out	0x3f, r0	; 63
   13908:	cd bf       	out	0x3d, r28	; 61
   1390a:	df 91       	pop	r29
   1390c:	cf 91       	pop	r28
   1390e:	08 95       	ret

00013910 <enabletracingfunction>:




void enabletracingfunction() {
   13910:	cf 93       	push	r28
   13912:	df 93       	push	r29
   13914:	cd b7       	in	r28, 0x3d	; 61
   13916:	de b7       	in	r29, 0x3e	; 62
   enabletracing = 1; 
   13918:	81 e0       	ldi	r24, 0x01	; 1
   1391a:	80 93 12 0a 	sts	0x0A12, r24
   1391e:	df 91       	pop	r29
   13920:	cf 91       	pop	r28
   13922:	08 95       	ret

00013924 <disabletracingfunction>:
}

void disabletracingfunction(){
   13924:	cf 93       	push	r28
   13926:	df 93       	push	r29
   13928:	cd b7       	in	r28, 0x3d	; 61
   1392a:	de b7       	in	r29, 0x3e	; 62
	 enabletracing = 0; 
   1392c:	10 92 12 0a 	sts	0x0A12, r1
   13930:	df 91       	pop	r29
   13932:	cf 91       	pop	r28
   13934:	08 95       	ret

00013936 <initTrace>:
}

void initTrace(){
   13936:	cf 93       	push	r28
   13938:	df 93       	push	r29
   1393a:	cd b7       	in	r28, 0x3d	; 61
   1393c:	de b7       	in	r29, 0x3e	; 62
	 internaltracingblock.externaladdtracefp = NULL; 
   1393e:	10 92 0f 0a 	sts	0x0A0F, r1
   13942:	10 92 0e 0a 	sts	0x0A0E, r1
	 internaltracingblock.externalapptracefp = NULL; 
   13946:	10 92 11 0a 	sts	0x0A11, r1
   1394a:	10 92 10 0a 	sts	0x0A10, r1
	 enabletracing = 0; 
   1394e:	10 92 12 0a 	sts	0x0A12, r1
   13952:	df 91       	pop	r29
   13954:	cf 91       	pop	r28
   13956:	08 95       	ret

00013958 <addTrace>:
}


void addTrace(uint8_t traceid, uint8_t threadid)
{
   13958:	cf 93       	push	r28
   1395a:	df 93       	push	r29
   1395c:	cd b7       	in	r28, 0x3d	; 61
   1395e:	de b7       	in	r29, 0x3e	; 62
   13960:	22 97       	sbiw	r28, 0x02	; 2
   13962:	0f b6       	in	r0, 0x3f	; 63
   13964:	f8 94       	cli
   13966:	de bf       	out	0x3e, r29	; 62
   13968:	0f be       	out	0x3f, r0	; 63
   1396a:	cd bf       	out	0x3d, r28	; 61
   1396c:	89 83       	std	Y+1, r24	; 0x01
   1396e:	6a 83       	std	Y+2, r22	; 0x02
   internaltracingblock.internaleventid = traceid; 
   13970:	89 81       	ldd	r24, Y+1	; 0x01
   13972:	80 93 0c 0a 	sts	0x0A0C, r24
   internaltracingblock.threadid = threadid; 
   13976:	8a 81       	ldd	r24, Y+2	; 0x02
   13978:	80 93 0d 0a 	sts	0x0A0D, r24
   
   if ((internaltracingblock.externaladdtracefp !=NULL)&&(enabletracing == 1))
   1397c:	80 91 0e 0a 	lds	r24, 0x0A0E
   13980:	90 91 0f 0a 	lds	r25, 0x0A0F
   13984:	00 97       	sbiw	r24, 0x00	; 0
   13986:	49 f0       	breq	.+18     	; 0x1399a <addTrace+0x42>
   13988:	80 91 12 0a 	lds	r24, 0x0A12
   1398c:	81 30       	cpi	r24, 0x01	; 1
   1398e:	29 f4       	brne	.+10     	; 0x1399a <addTrace+0x42>
   	internaltracingblock.externaladdtracefp(); 	
   13990:	e0 91 0e 0a 	lds	r30, 0x0A0E
   13994:	f0 91 0f 0a 	lds	r31, 0x0A0F
   13998:	09 95       	icall
   1399a:	22 96       	adiw	r28, 0x02	; 2
   1399c:	0f b6       	in	r0, 0x3f	; 63
   1399e:	f8 94       	cli
   139a0:	de bf       	out	0x3e, r29	; 62
   139a2:	0f be       	out	0x3f, r0	; 63
   139a4:	cd bf       	out	0x3d, r28	; 61
   139a6:	df 91       	pop	r29
   139a8:	cf 91       	pop	r28
   139aa:	08 95       	ret

000139ac <apptracepointfunction>:
}


void apptracepointfunction() __attribute__(( naked ));
void apptracepointfunction()
{
   139ac:	8f 93       	push	r24
	
	 asm volatile( "push r24":: );
	 asm volatile( "push r25":: );
   139ae:	9f 93       	push	r25
	 asm volatile( "push r28":: );
   139b0:	cf 93       	push	r28
	 asm volatile( "push r29":: );
   139b2:	df 93       	push	r29
  if ((internaltracingblock.externalapptracefp !=NULL)&&(enabletracing == 1))
   139b4:	80 91 10 0a 	lds	r24, 0x0A10
   139b8:	90 91 11 0a 	lds	r25, 0x0A11
   139bc:	00 97       	sbiw	r24, 0x00	; 0
   139be:	49 f0       	breq	.+18     	; 0x139d2 <getTracingBlockAddress>
   139c0:	80 91 12 0a 	lds	r24, 0x0A12
   139c4:	81 30       	cpi	r24, 0x01	; 1
   139c6:	29 f4       	brne	.+10     	; 0x139d2 <getTracingBlockAddress>
   	internaltracingblock.externalapptracefp(); 	
   139c8:	e0 91 10 0a 	lds	r30, 0x0A10
   139cc:	f0 91 11 0a 	lds	r31, 0x0A11
   139d0:	09 95       	icall

000139d2 <getTracingBlockAddress>:
}





void *getTracingBlockAddress()
{
   139d2:	cf 93       	push	r28
   139d4:	df 93       	push	r29
   139d6:	cd b7       	in	r28, 0x3d	; 61
   139d8:	de b7       	in	r29, 0x3e	; 62
   return (void *)&internaltracingblock; 	
   139da:	8c e0       	ldi	r24, 0x0C	; 12
   139dc:	9a e0       	ldi	r25, 0x0A	; 10
   139de:	df 91       	pop	r29
   139e0:	cf 91       	pop	r28
   139e2:	08 95       	ret

000139e4 <getRandomNumber>:
#include "math.h"



uint16_t getRandomNumber() {
   139e4:	cf 93       	push	r28
   139e6:	df 93       	push	r29
   139e8:	cd b7       	in	r28, 0x3d	; 61
   139ea:	de b7       	in	r29, 0x3e	; 62
   139ec:	22 97       	sbiw	r28, 0x02	; 2
   139ee:	0f b6       	in	r0, 0x3f	; 63
   139f0:	f8 94       	cli
   139f2:	de bf       	out	0x3e, r29	; 62
   139f4:	0f be       	out	0x3f, r0	; 63
   139f6:	cd bf       	out	0x3d, r28	; 61
   
   uint16_t ret;
   
   #ifdef PLATFORM_AVR
   ret = rand();
   139f8:	0e 94 4a a3 	call	0x14694	; 0x14694 <rand>
   139fc:	9a 83       	std	Y+2, r25	; 0x02
   139fe:	89 83       	std	Y+1, r24	; 0x01
   #endif
   
   return ret;    
   13a00:	89 81       	ldd	r24, Y+1	; 0x01
   13a02:	9a 81       	ldd	r25, Y+2	; 0x02
   13a04:	22 96       	adiw	r28, 0x02	; 2
   13a06:	0f b6       	in	r0, 0x3f	; 63
   13a08:	f8 94       	cli
   13a0a:	de bf       	out	0x3e, r29	; 62
   13a0c:	0f be       	out	0x3f, r0	; 63
   13a0e:	cd bf       	out	0x3d, r28	; 61
   13a10:	df 91       	pop	r29
   13a12:	cf 91       	pop	r28
   13a14:	08 95       	ret

00013a16 <__fixunssfsi>:
   13a16:	ef 92       	push	r14
   13a18:	ff 92       	push	r15
   13a1a:	0f 93       	push	r16
   13a1c:	1f 93       	push	r17
   13a1e:	7b 01       	movw	r14, r22
   13a20:	8c 01       	movw	r16, r24
   13a22:	20 e0       	ldi	r18, 0x00	; 0
   13a24:	30 e0       	ldi	r19, 0x00	; 0
   13a26:	40 e0       	ldi	r20, 0x00	; 0
   13a28:	5f e4       	ldi	r21, 0x4F	; 79
   13a2a:	0e 94 10 a0 	call	0x14020	; 0x14020 <__gesf2>
   13a2e:	88 23       	and	r24, r24
   13a30:	7c f0       	brlt	.+30     	; 0x13a50 <__fixunssfsi+0x3a>
   13a32:	20 e0       	ldi	r18, 0x00	; 0
   13a34:	30 e0       	ldi	r19, 0x00	; 0
   13a36:	40 e0       	ldi	r20, 0x00	; 0
   13a38:	5f e4       	ldi	r21, 0x4F	; 79
   13a3a:	c8 01       	movw	r24, r16
   13a3c:	b7 01       	movw	r22, r14
   13a3e:	0e 94 5e 9e 	call	0x13cbc	; 0x13cbc <__subsf3>
   13a42:	0e 94 7c a0 	call	0x140f8	; 0x140f8 <__fixsfsi>
   13a46:	60 50       	subi	r22, 0x00	; 0
   13a48:	70 40       	sbci	r23, 0x00	; 0
   13a4a:	80 40       	sbci	r24, 0x00	; 0
   13a4c:	90 48       	sbci	r25, 0x80	; 128
   13a4e:	04 c0       	rjmp	.+8      	; 0x13a58 <__fixunssfsi+0x42>
   13a50:	c8 01       	movw	r24, r16
   13a52:	b7 01       	movw	r22, r14
   13a54:	0e 94 7c a0 	call	0x140f8	; 0x140f8 <__fixsfsi>
   13a58:	1f 91       	pop	r17
   13a5a:	0f 91       	pop	r16
   13a5c:	ff 90       	pop	r15
   13a5e:	ef 90       	pop	r14
   13a60:	08 95       	ret

00013a62 <_fpadd_parts>:
   13a62:	a0 e0       	ldi	r26, 0x00	; 0
   13a64:	b0 e0       	ldi	r27, 0x00	; 0
   13a66:	e7 e3       	ldi	r30, 0x37	; 55
   13a68:	fd e9       	ldi	r31, 0x9D	; 157
   13a6a:	0c 94 c2 a3 	jmp	0x14784	; 0x14784 <__prologue_saves__+0x8>
   13a6e:	fc 01       	movw	r30, r24
   13a70:	6a 01       	movw	r12, r20
   13a72:	90 81       	ld	r25, Z
   13a74:	92 30       	cpi	r25, 0x02	; 2
   13a76:	08 f4       	brcc	.+2      	; 0x13a7a <_fpadd_parts+0x18>
   13a78:	1b c1       	rjmp	.+566    	; 0x13cb0 <_fpadd_parts+0x24e>
   13a7a:	db 01       	movw	r26, r22
   13a7c:	8c 91       	ld	r24, X
   13a7e:	82 30       	cpi	r24, 0x02	; 2
   13a80:	80 f0       	brcs	.+32     	; 0x13aa2 <_fpadd_parts+0x40>
   13a82:	94 30       	cpi	r25, 0x04	; 4
   13a84:	61 f4       	brne	.+24     	; 0x13a9e <_fpadd_parts+0x3c>
   13a86:	84 30       	cpi	r24, 0x04	; 4
   13a88:	09 f0       	breq	.+2      	; 0x13a8c <_fpadd_parts+0x2a>
   13a8a:	12 c1       	rjmp	.+548    	; 0x13cb0 <_fpadd_parts+0x24e>
   13a8c:	91 81       	ldd	r25, Z+1	; 0x01
   13a8e:	eb 01       	movw	r28, r22
   13a90:	89 81       	ldd	r24, Y+1	; 0x01
   13a92:	98 17       	cp	r25, r24
   13a94:	09 f4       	brne	.+2      	; 0x13a98 <_fpadd_parts+0x36>
   13a96:	0c c1       	rjmp	.+536    	; 0x13cb0 <_fpadd_parts+0x24e>
   13a98:	e2 e7       	ldi	r30, 0x72	; 114
   13a9a:	f1 e0       	ldi	r31, 0x01	; 1
   13a9c:	09 c1       	rjmp	.+530    	; 0x13cb0 <_fpadd_parts+0x24e>
   13a9e:	84 30       	cpi	r24, 0x04	; 4
   13aa0:	11 f4       	brne	.+4      	; 0x13aa6 <_fpadd_parts+0x44>
   13aa2:	fb 01       	movw	r30, r22
   13aa4:	05 c1       	rjmp	.+522    	; 0x13cb0 <_fpadd_parts+0x24e>
   13aa6:	82 30       	cpi	r24, 0x02	; 2
   13aa8:	91 f4       	brne	.+36     	; 0x13ace <_fpadd_parts+0x6c>
   13aaa:	92 30       	cpi	r25, 0x02	; 2
   13aac:	09 f0       	breq	.+2      	; 0x13ab0 <_fpadd_parts+0x4e>
   13aae:	00 c1       	rjmp	.+512    	; 0x13cb0 <_fpadd_parts+0x24e>
   13ab0:	ea 01       	movw	r28, r20
   13ab2:	df 01       	movw	r26, r30
   13ab4:	88 e0       	ldi	r24, 0x08	; 8
   13ab6:	0d 90       	ld	r0, X+
   13ab8:	09 92       	st	Y+, r0
   13aba:	81 50       	subi	r24, 0x01	; 1
   13abc:	e1 f7       	brne	.-8      	; 0x13ab6 <_fpadd_parts+0x54>
   13abe:	81 81       	ldd	r24, Z+1	; 0x01
   13ac0:	fb 01       	movw	r30, r22
   13ac2:	91 81       	ldd	r25, Z+1	; 0x01
   13ac4:	89 23       	and	r24, r25
   13ac6:	e6 01       	movw	r28, r12
   13ac8:	89 83       	std	Y+1, r24	; 0x01
   13aca:	f6 01       	movw	r30, r12
   13acc:	f1 c0       	rjmp	.+482    	; 0x13cb0 <_fpadd_parts+0x24e>
   13ace:	92 30       	cpi	r25, 0x02	; 2
   13ad0:	41 f3       	breq	.-48     	; 0x13aa2 <_fpadd_parts+0x40>
   13ad2:	62 80       	ldd	r6, Z+2	; 0x02
   13ad4:	73 80       	ldd	r7, Z+3	; 0x03
   13ad6:	eb 01       	movw	r28, r22
   13ad8:	8a 80       	ldd	r8, Y+2	; 0x02
   13ada:	9b 80       	ldd	r9, Y+3	; 0x03
   13adc:	e4 80       	ldd	r14, Z+4	; 0x04
   13ade:	f5 80       	ldd	r15, Z+5	; 0x05
   13ae0:	06 81       	ldd	r16, Z+6	; 0x06
   13ae2:	17 81       	ldd	r17, Z+7	; 0x07
   13ae4:	2c 81       	ldd	r18, Y+4	; 0x04
   13ae6:	3d 81       	ldd	r19, Y+5	; 0x05
   13ae8:	4e 81       	ldd	r20, Y+6	; 0x06
   13aea:	5f 81       	ldd	r21, Y+7	; 0x07
   13aec:	53 01       	movw	r10, r6
   13aee:	a8 18       	sub	r10, r8
   13af0:	b9 08       	sbc	r11, r9
   13af2:	c5 01       	movw	r24, r10
   13af4:	b7 fc       	sbrc	r11, 7
   13af6:	ab c0       	rjmp	.+342    	; 0x13c4e <_fpadd_parts+0x1ec>
   13af8:	80 97       	sbiw	r24, 0x20	; 32
   13afa:	0c f4       	brge	.+2      	; 0x13afe <_fpadd_parts+0x9c>
   13afc:	57 c0       	rjmp	.+174    	; 0x13bac <_fpadd_parts+0x14a>
   13afe:	86 14       	cp	r8, r6
   13b00:	97 04       	cpc	r9, r7
   13b02:	0c f4       	brge	.+2      	; 0x13b06 <_fpadd_parts+0xa4>
   13b04:	be c0       	rjmp	.+380    	; 0x13c82 <_fpadd_parts+0x220>
   13b06:	34 01       	movw	r6, r8
   13b08:	ee 24       	eor	r14, r14
   13b0a:	ff 24       	eor	r15, r15
   13b0c:	87 01       	movw	r16, r14
   13b0e:	91 81       	ldd	r25, Z+1	; 0x01
   13b10:	fb 01       	movw	r30, r22
   13b12:	81 81       	ldd	r24, Z+1	; 0x01
   13b14:	98 17       	cp	r25, r24
   13b16:	09 f4       	brne	.+2      	; 0x13b1a <_fpadd_parts+0xb8>
   13b18:	a6 c0       	rjmp	.+332    	; 0x13c66 <_fpadd_parts+0x204>
   13b1a:	99 23       	and	r25, r25
   13b1c:	09 f4       	brne	.+2      	; 0x13b20 <_fpadd_parts+0xbe>
   13b1e:	9c c0       	rjmp	.+312    	; 0x13c58 <_fpadd_parts+0x1f6>
   13b20:	2e 19       	sub	r18, r14
   13b22:	3f 09       	sbc	r19, r15
   13b24:	40 0b       	sbc	r20, r16
   13b26:	51 0b       	sbc	r21, r17
   13b28:	57 fd       	sbrc	r21, 7
   13b2a:	b0 c0       	rjmp	.+352    	; 0x13c8c <_fpadd_parts+0x22a>
   13b2c:	e6 01       	movw	r28, r12
   13b2e:	19 82       	std	Y+1, r1	; 0x01
   13b30:	7b 82       	std	Y+3, r7	; 0x03
   13b32:	6a 82       	std	Y+2, r6	; 0x02
   13b34:	f6 01       	movw	r30, r12
   13b36:	24 83       	std	Z+4, r18	; 0x04
   13b38:	35 83       	std	Z+5, r19	; 0x05
   13b3a:	46 83       	std	Z+6, r20	; 0x06
   13b3c:	57 83       	std	Z+7, r21	; 0x07
   13b3e:	e6 01       	movw	r28, r12
   13b40:	2c 81       	ldd	r18, Y+4	; 0x04
   13b42:	3d 81       	ldd	r19, Y+5	; 0x05
   13b44:	4e 81       	ldd	r20, Y+6	; 0x06
   13b46:	5f 81       	ldd	r21, Y+7	; 0x07
   13b48:	79 01       	movw	r14, r18
   13b4a:	8a 01       	movw	r16, r20
   13b4c:	da 01       	movw	r26, r20
   13b4e:	c9 01       	movw	r24, r18
   13b50:	01 97       	sbiw	r24, 0x01	; 1
   13b52:	a1 09       	sbc	r26, r1
   13b54:	b1 09       	sbc	r27, r1
   13b56:	8f 5f       	subi	r24, 0xFF	; 255
   13b58:	9f 4f       	sbci	r25, 0xFF	; 255
   13b5a:	af 4f       	sbci	r26, 0xFF	; 255
   13b5c:	bf 43       	sbci	r27, 0x3F	; 63
   13b5e:	f8 f4       	brcc	.+62     	; 0x13b9e <_fpadd_parts+0x13c>
   13b60:	e6 01       	movw	r28, r12
   13b62:	6a 81       	ldd	r22, Y+2	; 0x02
   13b64:	7b 81       	ldd	r23, Y+3	; 0x03
   13b66:	a8 01       	movw	r20, r16
   13b68:	97 01       	movw	r18, r14
   13b6a:	22 0f       	add	r18, r18
   13b6c:	33 1f       	adc	r19, r19
   13b6e:	44 1f       	adc	r20, r20
   13b70:	55 1f       	adc	r21, r21
   13b72:	61 50       	subi	r22, 0x01	; 1
   13b74:	70 40       	sbci	r23, 0x00	; 0
   13b76:	79 01       	movw	r14, r18
   13b78:	8a 01       	movw	r16, r20
   13b7a:	da 01       	movw	r26, r20
   13b7c:	c9 01       	movw	r24, r18
   13b7e:	01 97       	sbiw	r24, 0x01	; 1
   13b80:	a1 09       	sbc	r26, r1
   13b82:	b1 09       	sbc	r27, r1
   13b84:	8f 5f       	subi	r24, 0xFF	; 255
   13b86:	9f 4f       	sbci	r25, 0xFF	; 255
   13b88:	af 4f       	sbci	r26, 0xFF	; 255
   13b8a:	bf 43       	sbci	r27, 0x3F	; 63
   13b8c:	60 f3       	brcs	.-40     	; 0x13b66 <_fpadd_parts+0x104>
   13b8e:	e6 01       	movw	r28, r12
   13b90:	7b 83       	std	Y+3, r23	; 0x03
   13b92:	6a 83       	std	Y+2, r22	; 0x02
   13b94:	f6 01       	movw	r30, r12
   13b96:	24 83       	std	Z+4, r18	; 0x04
   13b98:	35 83       	std	Z+5, r19	; 0x05
   13b9a:	46 83       	std	Z+6, r20	; 0x06
   13b9c:	57 83       	std	Z+7, r21	; 0x07
   13b9e:	83 e0       	ldi	r24, 0x03	; 3
   13ba0:	d6 01       	movw	r26, r12
   13ba2:	8c 93       	st	X, r24
   13ba4:	57 fd       	sbrc	r21, 7
   13ba6:	39 c0       	rjmp	.+114    	; 0x13c1a <_fpadd_parts+0x1b8>
   13ba8:	f6 01       	movw	r30, r12
   13baa:	82 c0       	rjmp	.+260    	; 0x13cb0 <_fpadd_parts+0x24e>
   13bac:	86 14       	cp	r8, r6
   13bae:	97 04       	cpc	r9, r7
   13bb0:	b4 f4       	brge	.+44     	; 0x13bde <_fpadd_parts+0x17c>
   13bb2:	c0 e0       	ldi	r28, 0x00	; 0
   13bb4:	d0 e0       	ldi	r29, 0x00	; 0
   13bb6:	da 01       	movw	r26, r20
   13bb8:	c9 01       	movw	r24, r18
   13bba:	81 70       	andi	r24, 0x01	; 1
   13bbc:	90 70       	andi	r25, 0x00	; 0
   13bbe:	a0 70       	andi	r26, 0x00	; 0
   13bc0:	b0 70       	andi	r27, 0x00	; 0
   13bc2:	56 95       	lsr	r21
   13bc4:	47 95       	ror	r20
   13bc6:	37 95       	ror	r19
   13bc8:	27 95       	ror	r18
   13bca:	28 2b       	or	r18, r24
   13bcc:	39 2b       	or	r19, r25
   13bce:	4a 2b       	or	r20, r26
   13bd0:	5b 2b       	or	r21, r27
   13bd2:	21 96       	adiw	r28, 0x01	; 1
   13bd4:	ac 16       	cp	r10, r28
   13bd6:	bd 06       	cpc	r11, r29
   13bd8:	71 f7       	brne	.-36     	; 0x13bb6 <_fpadd_parts+0x154>
   13bda:	8a 0c       	add	r8, r10
   13bdc:	9b 1c       	adc	r9, r11
   13bde:	68 14       	cp	r6, r8
   13be0:	79 04       	cpc	r7, r9
   13be2:	0c f0       	brlt	.+2      	; 0x13be6 <_fpadd_parts+0x184>
   13be4:	94 cf       	rjmp	.-216    	; 0x13b0e <_fpadd_parts+0xac>
   13be6:	c0 e0       	ldi	r28, 0x00	; 0
   13be8:	d0 e0       	ldi	r29, 0x00	; 0
   13bea:	54 01       	movw	r10, r8
   13bec:	a6 18       	sub	r10, r6
   13bee:	b7 08       	sbc	r11, r7
   13bf0:	d8 01       	movw	r26, r16
   13bf2:	c7 01       	movw	r24, r14
   13bf4:	81 70       	andi	r24, 0x01	; 1
   13bf6:	90 70       	andi	r25, 0x00	; 0
   13bf8:	a0 70       	andi	r26, 0x00	; 0
   13bfa:	b0 70       	andi	r27, 0x00	; 0
   13bfc:	16 95       	lsr	r17
   13bfe:	07 95       	ror	r16
   13c00:	f7 94       	ror	r15
   13c02:	e7 94       	ror	r14
   13c04:	e8 2a       	or	r14, r24
   13c06:	f9 2a       	or	r15, r25
   13c08:	0a 2b       	or	r16, r26
   13c0a:	1b 2b       	or	r17, r27
   13c0c:	21 96       	adiw	r28, 0x01	; 1
   13c0e:	ac 16       	cp	r10, r28
   13c10:	bd 06       	cpc	r11, r29
   13c12:	71 f7       	brne	.-36     	; 0x13bf0 <_fpadd_parts+0x18e>
   13c14:	6a 0c       	add	r6, r10
   13c16:	7b 1c       	adc	r7, r11
   13c18:	7a cf       	rjmp	.-268    	; 0x13b0e <_fpadd_parts+0xac>
   13c1a:	da 01       	movw	r26, r20
   13c1c:	c9 01       	movw	r24, r18
   13c1e:	b6 95       	lsr	r27
   13c20:	a7 95       	ror	r26
   13c22:	97 95       	ror	r25
   13c24:	87 95       	ror	r24
   13c26:	21 70       	andi	r18, 0x01	; 1
   13c28:	30 70       	andi	r19, 0x00	; 0
   13c2a:	40 70       	andi	r20, 0x00	; 0
   13c2c:	50 70       	andi	r21, 0x00	; 0
   13c2e:	28 2b       	or	r18, r24
   13c30:	39 2b       	or	r19, r25
   13c32:	4a 2b       	or	r20, r26
   13c34:	5b 2b       	or	r21, r27
   13c36:	e6 01       	movw	r28, r12
   13c38:	2c 83       	std	Y+4, r18	; 0x04
   13c3a:	3d 83       	std	Y+5, r19	; 0x05
   13c3c:	4e 83       	std	Y+6, r20	; 0x06
   13c3e:	5f 83       	std	Y+7, r21	; 0x07
   13c40:	8a 81       	ldd	r24, Y+2	; 0x02
   13c42:	9b 81       	ldd	r25, Y+3	; 0x03
   13c44:	01 96       	adiw	r24, 0x01	; 1
   13c46:	9b 83       	std	Y+3, r25	; 0x03
   13c48:	8a 83       	std	Y+2, r24	; 0x02
   13c4a:	f6 01       	movw	r30, r12
   13c4c:	31 c0       	rjmp	.+98     	; 0x13cb0 <_fpadd_parts+0x24e>
   13c4e:	88 27       	eor	r24, r24
   13c50:	99 27       	eor	r25, r25
   13c52:	8a 19       	sub	r24, r10
   13c54:	9b 09       	sbc	r25, r11
   13c56:	50 cf       	rjmp	.-352    	; 0x13af8 <_fpadd_parts+0x96>
   13c58:	e2 1a       	sub	r14, r18
   13c5a:	f3 0a       	sbc	r15, r19
   13c5c:	04 0b       	sbc	r16, r20
   13c5e:	15 0b       	sbc	r17, r21
   13c60:	a8 01       	movw	r20, r16
   13c62:	97 01       	movw	r18, r14
   13c64:	61 cf       	rjmp	.-318    	; 0x13b28 <_fpadd_parts+0xc6>
   13c66:	e6 01       	movw	r28, r12
   13c68:	99 83       	std	Y+1, r25	; 0x01
   13c6a:	7b 82       	std	Y+3, r7	; 0x03
   13c6c:	6a 82       	std	Y+2, r6	; 0x02
   13c6e:	2e 0d       	add	r18, r14
   13c70:	3f 1d       	adc	r19, r15
   13c72:	40 1f       	adc	r20, r16
   13c74:	51 1f       	adc	r21, r17
   13c76:	f6 01       	movw	r30, r12
   13c78:	24 83       	std	Z+4, r18	; 0x04
   13c7a:	35 83       	std	Z+5, r19	; 0x05
   13c7c:	46 83       	std	Z+6, r20	; 0x06
   13c7e:	57 83       	std	Z+7, r21	; 0x07
   13c80:	8e cf       	rjmp	.-228    	; 0x13b9e <_fpadd_parts+0x13c>
   13c82:	20 e0       	ldi	r18, 0x00	; 0
   13c84:	30 e0       	ldi	r19, 0x00	; 0
   13c86:	40 e0       	ldi	r20, 0x00	; 0
   13c88:	50 e0       	ldi	r21, 0x00	; 0
   13c8a:	41 cf       	rjmp	.-382    	; 0x13b0e <_fpadd_parts+0xac>
   13c8c:	81 e0       	ldi	r24, 0x01	; 1
   13c8e:	e6 01       	movw	r28, r12
   13c90:	89 83       	std	Y+1, r24	; 0x01
   13c92:	7b 82       	std	Y+3, r7	; 0x03
   13c94:	6a 82       	std	Y+2, r6	; 0x02
   13c96:	50 95       	com	r21
   13c98:	40 95       	com	r20
   13c9a:	30 95       	com	r19
   13c9c:	21 95       	neg	r18
   13c9e:	3f 4f       	sbci	r19, 0xFF	; 255
   13ca0:	4f 4f       	sbci	r20, 0xFF	; 255
   13ca2:	5f 4f       	sbci	r21, 0xFF	; 255
   13ca4:	f6 01       	movw	r30, r12
   13ca6:	24 83       	std	Z+4, r18	; 0x04
   13ca8:	35 83       	std	Z+5, r19	; 0x05
   13caa:	46 83       	std	Z+6, r20	; 0x06
   13cac:	57 83       	std	Z+7, r21	; 0x07
   13cae:	47 cf       	rjmp	.-370    	; 0x13b3e <_fpadd_parts+0xdc>
   13cb0:	cf 01       	movw	r24, r30
   13cb2:	ee e0       	ldi	r30, 0x0E	; 14
   13cb4:	cd b7       	in	r28, 0x3d	; 61
   13cb6:	de b7       	in	r29, 0x3e	; 62
   13cb8:	0c 94 de a3 	jmp	0x147bc	; 0x147bc <__epilogue_restores__+0x8>

00013cbc <__subsf3>:
   13cbc:	a0 e2       	ldi	r26, 0x20	; 32
   13cbe:	b0 e0       	ldi	r27, 0x00	; 0
   13cc0:	e4 e6       	ldi	r30, 0x64	; 100
   13cc2:	fe e9       	ldi	r31, 0x9E	; 158
   13cc4:	0c 94 ca a3 	jmp	0x14794	; 0x14794 <__prologue_saves__+0x18>
   13cc8:	69 83       	std	Y+1, r22	; 0x01
   13cca:	7a 83       	std	Y+2, r23	; 0x02
   13ccc:	8b 83       	std	Y+3, r24	; 0x03
   13cce:	9c 83       	std	Y+4, r25	; 0x04
   13cd0:	2d 83       	std	Y+5, r18	; 0x05
   13cd2:	3e 83       	std	Y+6, r19	; 0x06
   13cd4:	4f 83       	std	Y+7, r20	; 0x07
   13cd6:	58 87       	std	Y+8, r21	; 0x08
   13cd8:	89 e1       	ldi	r24, 0x19	; 25
   13cda:	e8 2e       	mov	r14, r24
   13cdc:	f1 2c       	mov	r15, r1
   13cde:	ec 0e       	add	r14, r28
   13ce0:	fd 1e       	adc	r15, r29
   13ce2:	b7 01       	movw	r22, r14
   13ce4:	ce 01       	movw	r24, r28
   13ce6:	01 96       	adiw	r24, 0x01	; 1
   13ce8:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   13cec:	8e 01       	movw	r16, r28
   13cee:	0f 5e       	subi	r16, 0xEF	; 239
   13cf0:	1f 4f       	sbci	r17, 0xFF	; 255
   13cf2:	b8 01       	movw	r22, r16
   13cf4:	ce 01       	movw	r24, r28
   13cf6:	05 96       	adiw	r24, 0x05	; 5
   13cf8:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   13cfc:	8a 89       	ldd	r24, Y+18	; 0x12
   13cfe:	91 e0       	ldi	r25, 0x01	; 1
   13d00:	89 27       	eor	r24, r25
   13d02:	8a 8b       	std	Y+18, r24	; 0x12
   13d04:	ae 01       	movw	r20, r28
   13d06:	47 5f       	subi	r20, 0xF7	; 247
   13d08:	5f 4f       	sbci	r21, 0xFF	; 255
   13d0a:	b8 01       	movw	r22, r16
   13d0c:	c7 01       	movw	r24, r14
   13d0e:	0e 94 31 9d 	call	0x13a62	; 0x13a62 <_fpadd_parts>
   13d12:	0e 94 cc a0 	call	0x14198	; 0x14198 <__pack_f>
   13d16:	e6 e0       	ldi	r30, 0x06	; 6
   13d18:	a0 96       	adiw	r28, 0x20	; 32
   13d1a:	0c 94 e6 a3 	jmp	0x147cc	; 0x147cc <__epilogue_restores__+0x18>

00013d1e <__addsf3>:
   13d1e:	a0 e2       	ldi	r26, 0x20	; 32
   13d20:	b0 e0       	ldi	r27, 0x00	; 0
   13d22:	e5 e9       	ldi	r30, 0x95	; 149
   13d24:	fe e9       	ldi	r31, 0x9E	; 158
   13d26:	0c 94 ca a3 	jmp	0x14794	; 0x14794 <__prologue_saves__+0x18>
   13d2a:	69 83       	std	Y+1, r22	; 0x01
   13d2c:	7a 83       	std	Y+2, r23	; 0x02
   13d2e:	8b 83       	std	Y+3, r24	; 0x03
   13d30:	9c 83       	std	Y+4, r25	; 0x04
   13d32:	2d 83       	std	Y+5, r18	; 0x05
   13d34:	3e 83       	std	Y+6, r19	; 0x06
   13d36:	4f 83       	std	Y+7, r20	; 0x07
   13d38:	58 87       	std	Y+8, r21	; 0x08
   13d3a:	99 e1       	ldi	r25, 0x19	; 25
   13d3c:	e9 2e       	mov	r14, r25
   13d3e:	f1 2c       	mov	r15, r1
   13d40:	ec 0e       	add	r14, r28
   13d42:	fd 1e       	adc	r15, r29
   13d44:	b7 01       	movw	r22, r14
   13d46:	ce 01       	movw	r24, r28
   13d48:	01 96       	adiw	r24, 0x01	; 1
   13d4a:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   13d4e:	8e 01       	movw	r16, r28
   13d50:	0f 5e       	subi	r16, 0xEF	; 239
   13d52:	1f 4f       	sbci	r17, 0xFF	; 255
   13d54:	b8 01       	movw	r22, r16
   13d56:	ce 01       	movw	r24, r28
   13d58:	05 96       	adiw	r24, 0x05	; 5
   13d5a:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   13d5e:	ae 01       	movw	r20, r28
   13d60:	47 5f       	subi	r20, 0xF7	; 247
   13d62:	5f 4f       	sbci	r21, 0xFF	; 255
   13d64:	b8 01       	movw	r22, r16
   13d66:	c7 01       	movw	r24, r14
   13d68:	0e 94 31 9d 	call	0x13a62	; 0x13a62 <_fpadd_parts>
   13d6c:	0e 94 cc a0 	call	0x14198	; 0x14198 <__pack_f>
   13d70:	e6 e0       	ldi	r30, 0x06	; 6
   13d72:	a0 96       	adiw	r28, 0x20	; 32
   13d74:	0c 94 e6 a3 	jmp	0x147cc	; 0x147cc <__epilogue_restores__+0x18>

00013d78 <__mulsf3>:
   13d78:	a0 e2       	ldi	r26, 0x20	; 32
   13d7a:	b0 e0       	ldi	r27, 0x00	; 0
   13d7c:	e2 ec       	ldi	r30, 0xC2	; 194
   13d7e:	fe e9       	ldi	r31, 0x9E	; 158
   13d80:	0c 94 be a3 	jmp	0x1477c	; 0x1477c <__prologue_saves__>
   13d84:	69 83       	std	Y+1, r22	; 0x01
   13d86:	7a 83       	std	Y+2, r23	; 0x02
   13d88:	8b 83       	std	Y+3, r24	; 0x03
   13d8a:	9c 83       	std	Y+4, r25	; 0x04
   13d8c:	2d 83       	std	Y+5, r18	; 0x05
   13d8e:	3e 83       	std	Y+6, r19	; 0x06
   13d90:	4f 83       	std	Y+7, r20	; 0x07
   13d92:	58 87       	std	Y+8, r21	; 0x08
   13d94:	8e 01       	movw	r16, r28
   13d96:	07 5e       	subi	r16, 0xE7	; 231
   13d98:	1f 4f       	sbci	r17, 0xFF	; 255
   13d9a:	b8 01       	movw	r22, r16
   13d9c:	ce 01       	movw	r24, r28
   13d9e:	01 96       	adiw	r24, 0x01	; 1
   13da0:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   13da4:	f1 e1       	ldi	r31, 0x11	; 17
   13da6:	ef 2e       	mov	r14, r31
   13da8:	f1 2c       	mov	r15, r1
   13daa:	ec 0e       	add	r14, r28
   13dac:	fd 1e       	adc	r15, r29
   13dae:	b7 01       	movw	r22, r14
   13db0:	ce 01       	movw	r24, r28
   13db2:	05 96       	adiw	r24, 0x05	; 5
   13db4:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   13db8:	89 8d       	ldd	r24, Y+25	; 0x19
   13dba:	82 30       	cpi	r24, 0x02	; 2
   13dbc:	78 f0       	brcs	.+30     	; 0x13ddc <__mulsf3+0x64>
   13dbe:	99 89       	ldd	r25, Y+17	; 0x11
   13dc0:	92 30       	cpi	r25, 0x02	; 2
   13dc2:	40 f4       	brcc	.+16     	; 0x13dd4 <__mulsf3+0x5c>
   13dc4:	20 e0       	ldi	r18, 0x00	; 0
   13dc6:	9a 8d       	ldd	r25, Y+26	; 0x1a
   13dc8:	8a 89       	ldd	r24, Y+18	; 0x12
   13dca:	98 13       	cpse	r25, r24
   13dcc:	21 e0       	ldi	r18, 0x01	; 1
   13dce:	2a 8b       	std	Y+18, r18	; 0x12
   13dd0:	b7 01       	movw	r22, r14
   13dd2:	e9 c0       	rjmp	.+466    	; 0x13fa6 <__mulsf3+0x22e>
   13dd4:	84 30       	cpi	r24, 0x04	; 4
   13dd6:	51 f4       	brne	.+20     	; 0x13dec <__mulsf3+0x74>
   13dd8:	92 30       	cpi	r25, 0x02	; 2
   13dda:	61 f0       	breq	.+24     	; 0x13df4 <__mulsf3+0x7c>
   13ddc:	20 e0       	ldi	r18, 0x00	; 0
   13dde:	9a 8d       	ldd	r25, Y+26	; 0x1a
   13de0:	8a 89       	ldd	r24, Y+18	; 0x12
   13de2:	98 13       	cpse	r25, r24
   13de4:	21 e0       	ldi	r18, 0x01	; 1
   13de6:	2a 8f       	std	Y+26, r18	; 0x1a
   13de8:	b8 01       	movw	r22, r16
   13dea:	dd c0       	rjmp	.+442    	; 0x13fa6 <__mulsf3+0x22e>
   13dec:	94 30       	cpi	r25, 0x04	; 4
   13dee:	29 f4       	brne	.+10     	; 0x13dfa <__mulsf3+0x82>
   13df0:	82 30       	cpi	r24, 0x02	; 2
   13df2:	41 f7       	brne	.-48     	; 0x13dc4 <__mulsf3+0x4c>
   13df4:	62 e7       	ldi	r22, 0x72	; 114
   13df6:	71 e0       	ldi	r23, 0x01	; 1
   13df8:	d6 c0       	rjmp	.+428    	; 0x13fa6 <__mulsf3+0x22e>
   13dfa:	82 30       	cpi	r24, 0x02	; 2
   13dfc:	79 f3       	breq	.-34     	; 0x13ddc <__mulsf3+0x64>
   13dfe:	92 30       	cpi	r25, 0x02	; 2
   13e00:	09 f3       	breq	.-62     	; 0x13dc4 <__mulsf3+0x4c>
   13e02:	2d 8d       	ldd	r18, Y+29	; 0x1d
   13e04:	3e 8d       	ldd	r19, Y+30	; 0x1e
   13e06:	4f 8d       	ldd	r20, Y+31	; 0x1f
   13e08:	58 a1       	ldd	r21, Y+32	; 0x20
   13e0a:	8d 89       	ldd	r24, Y+21	; 0x15
   13e0c:	9e 89       	ldd	r25, Y+22	; 0x16
   13e0e:	af 89       	ldd	r26, Y+23	; 0x17
   13e10:	b8 8d       	ldd	r27, Y+24	; 0x18
   13e12:	22 24       	eor	r2, r2
   13e14:	33 24       	eor	r3, r3
   13e16:	21 01       	movw	r4, r2
   13e18:	aa 24       	eor	r10, r10
   13e1a:	bb 24       	eor	r11, r11
   13e1c:	65 01       	movw	r12, r10
   13e1e:	ee 24       	eor	r14, r14
   13e20:	ff 24       	eor	r15, r15
   13e22:	87 01       	movw	r16, r14
   13e24:	60 e0       	ldi	r22, 0x00	; 0
   13e26:	70 e0       	ldi	r23, 0x00	; 0
   13e28:	0d c0       	rjmp	.+26     	; 0x13e44 <__mulsf3+0xcc>
   13e2a:	6f 5f       	subi	r22, 0xFF	; 255
   13e2c:	7f 4f       	sbci	r23, 0xFF	; 255
   13e2e:	60 32       	cpi	r22, 0x20	; 32
   13e30:	71 05       	cpc	r23, r1
   13e32:	99 f1       	breq	.+102    	; 0x13e9a <__mulsf3+0x122>
   13e34:	88 0f       	add	r24, r24
   13e36:	99 1f       	adc	r25, r25
   13e38:	aa 1f       	adc	r26, r26
   13e3a:	bb 1f       	adc	r27, r27
   13e3c:	56 95       	lsr	r21
   13e3e:	47 95       	ror	r20
   13e40:	37 95       	ror	r19
   13e42:	27 95       	ror	r18
   13e44:	20 ff       	sbrs	r18, 0
   13e46:	19 c0       	rjmp	.+50     	; 0x13e7a <__mulsf3+0x102>
   13e48:	28 0e       	add	r2, r24
   13e4a:	39 1e       	adc	r3, r25
   13e4c:	4a 1e       	adc	r4, r26
   13e4e:	5b 1e       	adc	r5, r27
   13e50:	66 24       	eor	r6, r6
   13e52:	77 24       	eor	r7, r7
   13e54:	43 01       	movw	r8, r6
   13e56:	28 16       	cp	r2, r24
   13e58:	39 06       	cpc	r3, r25
   13e5a:	4a 06       	cpc	r4, r26
   13e5c:	5b 06       	cpc	r5, r27
   13e5e:	28 f4       	brcc	.+10     	; 0x13e6a <__mulsf3+0xf2>
   13e60:	e1 e0       	ldi	r30, 0x01	; 1
   13e62:	6e 2e       	mov	r6, r30
   13e64:	71 2c       	mov	r7, r1
   13e66:	81 2c       	mov	r8, r1
   13e68:	91 2c       	mov	r9, r1
   13e6a:	ae 0c       	add	r10, r14
   13e6c:	bf 1c       	adc	r11, r15
   13e6e:	c0 1e       	adc	r12, r16
   13e70:	d1 1e       	adc	r13, r17
   13e72:	a6 0c       	add	r10, r6
   13e74:	b7 1c       	adc	r11, r7
   13e76:	c8 1c       	adc	r12, r8
   13e78:	d9 1c       	adc	r13, r9
   13e7a:	ee 0c       	add	r14, r14
   13e7c:	ff 1c       	adc	r15, r15
   13e7e:	00 1f       	adc	r16, r16
   13e80:	11 1f       	adc	r17, r17
   13e82:	b7 ff       	sbrs	r27, 7
   13e84:	d2 cf       	rjmp	.-92     	; 0x13e2a <__mulsf3+0xb2>
   13e86:	e1 e0       	ldi	r30, 0x01	; 1
   13e88:	6e 2e       	mov	r6, r30
   13e8a:	71 2c       	mov	r7, r1
   13e8c:	81 2c       	mov	r8, r1
   13e8e:	91 2c       	mov	r9, r1
   13e90:	e6 28       	or	r14, r6
   13e92:	f7 28       	or	r15, r7
   13e94:	08 29       	or	r16, r8
   13e96:	19 29       	or	r17, r9
   13e98:	c8 cf       	rjmp	.-112    	; 0x13e2a <__mulsf3+0xb2>
   13e9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
   13e9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
   13e9e:	2b 89       	ldd	r18, Y+19	; 0x13
   13ea0:	3c 89       	ldd	r19, Y+20	; 0x14
   13ea2:	82 0f       	add	r24, r18
   13ea4:	93 1f       	adc	r25, r19
   13ea6:	02 96       	adiw	r24, 0x02	; 2
   13ea8:	9c 87       	std	Y+12, r25	; 0x0c
   13eaa:	8b 87       	std	Y+11, r24	; 0x0b
   13eac:	1a 86       	std	Y+10, r1	; 0x0a
   13eae:	9a 8d       	ldd	r25, Y+26	; 0x1a
   13eb0:	8a 89       	ldd	r24, Y+18	; 0x12
   13eb2:	98 17       	cp	r25, r24
   13eb4:	11 f0       	breq	.+4      	; 0x13eba <__mulsf3+0x142>
   13eb6:	81 e0       	ldi	r24, 0x01	; 1
   13eb8:	8a 87       	std	Y+10, r24	; 0x0a
   13eba:	d7 fe       	sbrs	r13, 7
   13ebc:	17 c0       	rjmp	.+46     	; 0x13eec <__mulsf3+0x174>
   13ebe:	8b 85       	ldd	r24, Y+11	; 0x0b
   13ec0:	9c 85       	ldd	r25, Y+12	; 0x0c
   13ec2:	a0 fe       	sbrs	r10, 0
   13ec4:	0c c0       	rjmp	.+24     	; 0x13ede <__mulsf3+0x166>
   13ec6:	56 94       	lsr	r5
   13ec8:	47 94       	ror	r4
   13eca:	37 94       	ror	r3
   13ecc:	27 94       	ror	r2
   13ece:	20 e0       	ldi	r18, 0x00	; 0
   13ed0:	30 e0       	ldi	r19, 0x00	; 0
   13ed2:	40 e0       	ldi	r20, 0x00	; 0
   13ed4:	50 e8       	ldi	r21, 0x80	; 128
   13ed6:	22 2a       	or	r2, r18
   13ed8:	33 2a       	or	r3, r19
   13eda:	44 2a       	or	r4, r20
   13edc:	55 2a       	or	r5, r21
   13ede:	d6 94       	lsr	r13
   13ee0:	c7 94       	ror	r12
   13ee2:	b7 94       	ror	r11
   13ee4:	a7 94       	ror	r10
   13ee6:	01 96       	adiw	r24, 0x01	; 1
   13ee8:	9c 87       	std	Y+12, r25	; 0x0c
   13eea:	8b 87       	std	Y+11, r24	; 0x0b
   13eec:	30 e0       	ldi	r19, 0x00	; 0
   13eee:	a3 16       	cp	r10, r19
   13ef0:	30 e0       	ldi	r19, 0x00	; 0
   13ef2:	b3 06       	cpc	r11, r19
   13ef4:	30 e0       	ldi	r19, 0x00	; 0
   13ef6:	c3 06       	cpc	r12, r19
   13ef8:	30 e4       	ldi	r19, 0x40	; 64
   13efa:	d3 06       	cpc	r13, r19
   13efc:	18 f5       	brcc	.+70     	; 0x13f44 <__mulsf3+0x1cc>
   13efe:	8b 85       	ldd	r24, Y+11	; 0x0b
   13f00:	9c 85       	ldd	r25, Y+12	; 0x0c
   13f02:	0e c0       	rjmp	.+28     	; 0x13f20 <__mulsf3+0x1a8>
   13f04:	22 0c       	add	r2, r2
   13f06:	33 1c       	adc	r3, r3
   13f08:	44 1c       	adc	r4, r4
   13f0a:	55 1c       	adc	r5, r5
   13f0c:	01 97       	sbiw	r24, 0x01	; 1
   13f0e:	20 e0       	ldi	r18, 0x00	; 0
   13f10:	a2 16       	cp	r10, r18
   13f12:	20 e0       	ldi	r18, 0x00	; 0
   13f14:	b2 06       	cpc	r11, r18
   13f16:	20 e0       	ldi	r18, 0x00	; 0
   13f18:	c2 06       	cpc	r12, r18
   13f1a:	20 e4       	ldi	r18, 0x40	; 64
   13f1c:	d2 06       	cpc	r13, r18
   13f1e:	80 f4       	brcc	.+32     	; 0x13f40 <__mulsf3+0x1c8>
   13f20:	aa 0c       	add	r10, r10
   13f22:	bb 1c       	adc	r11, r11
   13f24:	cc 1c       	adc	r12, r12
   13f26:	dd 1c       	adc	r13, r13
   13f28:	57 fe       	sbrs	r5, 7
   13f2a:	ec cf       	rjmp	.-40     	; 0x13f04 <__mulsf3+0x18c>
   13f2c:	31 e0       	ldi	r19, 0x01	; 1
   13f2e:	63 2e       	mov	r6, r19
   13f30:	71 2c       	mov	r7, r1
   13f32:	81 2c       	mov	r8, r1
   13f34:	91 2c       	mov	r9, r1
   13f36:	a6 28       	or	r10, r6
   13f38:	b7 28       	or	r11, r7
   13f3a:	c8 28       	or	r12, r8
   13f3c:	d9 28       	or	r13, r9
   13f3e:	e2 cf       	rjmp	.-60     	; 0x13f04 <__mulsf3+0x18c>
   13f40:	9c 87       	std	Y+12, r25	; 0x0c
   13f42:	8b 87       	std	Y+11, r24	; 0x0b
   13f44:	d6 01       	movw	r26, r12
   13f46:	c5 01       	movw	r24, r10
   13f48:	8f 77       	andi	r24, 0x7F	; 127
   13f4a:	90 70       	andi	r25, 0x00	; 0
   13f4c:	a0 70       	andi	r26, 0x00	; 0
   13f4e:	b0 70       	andi	r27, 0x00	; 0
   13f50:	80 34       	cpi	r24, 0x40	; 64
   13f52:	91 05       	cpc	r25, r1
   13f54:	a1 05       	cpc	r26, r1
   13f56:	b1 05       	cpc	r27, r1
   13f58:	51 f0       	breq	.+20     	; 0x13f6e <__mulsf3+0x1f6>
   13f5a:	ad 86       	std	Y+13, r10	; 0x0d
   13f5c:	be 86       	std	Y+14, r11	; 0x0e
   13f5e:	cf 86       	std	Y+15, r12	; 0x0f
   13f60:	d8 8a       	std	Y+16, r13	; 0x10
   13f62:	83 e0       	ldi	r24, 0x03	; 3
   13f64:	89 87       	std	Y+9, r24	; 0x09
   13f66:	be 01       	movw	r22, r28
   13f68:	67 5f       	subi	r22, 0xF7	; 247
   13f6a:	7f 4f       	sbci	r23, 0xFF	; 255
   13f6c:	1c c0       	rjmp	.+56     	; 0x13fa6 <__mulsf3+0x22e>
   13f6e:	a7 fc       	sbrc	r10, 7
   13f70:	f4 cf       	rjmp	.-24     	; 0x13f5a <__mulsf3+0x1e2>
   13f72:	21 14       	cp	r2, r1
   13f74:	31 04       	cpc	r3, r1
   13f76:	41 04       	cpc	r4, r1
   13f78:	51 04       	cpc	r5, r1
   13f7a:	79 f3       	breq	.-34     	; 0x13f5a <__mulsf3+0x1e2>
   13f7c:	80 e4       	ldi	r24, 0x40	; 64
   13f7e:	90 e0       	ldi	r25, 0x00	; 0
   13f80:	a0 e0       	ldi	r26, 0x00	; 0
   13f82:	b0 e0       	ldi	r27, 0x00	; 0
   13f84:	a8 0e       	add	r10, r24
   13f86:	b9 1e       	adc	r11, r25
   13f88:	ca 1e       	adc	r12, r26
   13f8a:	db 1e       	adc	r13, r27
   13f8c:	80 e8       	ldi	r24, 0x80	; 128
   13f8e:	68 2e       	mov	r6, r24
   13f90:	8f ef       	ldi	r24, 0xFF	; 255
   13f92:	78 2e       	mov	r7, r24
   13f94:	8f ef       	ldi	r24, 0xFF	; 255
   13f96:	88 2e       	mov	r8, r24
   13f98:	8f ef       	ldi	r24, 0xFF	; 255
   13f9a:	98 2e       	mov	r9, r24
   13f9c:	a6 20       	and	r10, r6
   13f9e:	b7 20       	and	r11, r7
   13fa0:	c8 20       	and	r12, r8
   13fa2:	d9 20       	and	r13, r9
   13fa4:	da cf       	rjmp	.-76     	; 0x13f5a <__mulsf3+0x1e2>
   13fa6:	cb 01       	movw	r24, r22
   13fa8:	0e 94 cc a0 	call	0x14198	; 0x14198 <__pack_f>
   13fac:	e2 e1       	ldi	r30, 0x12	; 18
   13fae:	a0 96       	adiw	r28, 0x20	; 32
   13fb0:	0c 94 da a3 	jmp	0x147b4	; 0x147b4 <__epilogue_restores__>

00013fb4 <__gtsf2>:
   13fb4:	a8 e1       	ldi	r26, 0x18	; 24
   13fb6:	b0 e0       	ldi	r27, 0x00	; 0
   13fb8:	e0 ee       	ldi	r30, 0xE0	; 224
   13fba:	ff e9       	ldi	r31, 0x9F	; 159
   13fbc:	0c 94 ca a3 	jmp	0x14794	; 0x14794 <__prologue_saves__+0x18>
   13fc0:	69 83       	std	Y+1, r22	; 0x01
   13fc2:	7a 83       	std	Y+2, r23	; 0x02
   13fc4:	8b 83       	std	Y+3, r24	; 0x03
   13fc6:	9c 83       	std	Y+4, r25	; 0x04
   13fc8:	2d 83       	std	Y+5, r18	; 0x05
   13fca:	3e 83       	std	Y+6, r19	; 0x06
   13fcc:	4f 83       	std	Y+7, r20	; 0x07
   13fce:	58 87       	std	Y+8, r21	; 0x08
   13fd0:	81 e1       	ldi	r24, 0x11	; 17
   13fd2:	e8 2e       	mov	r14, r24
   13fd4:	f1 2c       	mov	r15, r1
   13fd6:	ec 0e       	add	r14, r28
   13fd8:	fd 1e       	adc	r15, r29
   13fda:	b7 01       	movw	r22, r14
   13fdc:	ce 01       	movw	r24, r28
   13fde:	01 96       	adiw	r24, 0x01	; 1
   13fe0:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   13fe4:	8e 01       	movw	r16, r28
   13fe6:	07 5f       	subi	r16, 0xF7	; 247
   13fe8:	1f 4f       	sbci	r17, 0xFF	; 255
   13fea:	b8 01       	movw	r22, r16
   13fec:	ce 01       	movw	r24, r28
   13fee:	05 96       	adiw	r24, 0x05	; 5
   13ff0:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   13ff4:	89 89       	ldd	r24, Y+17	; 0x11
   13ff6:	82 30       	cpi	r24, 0x02	; 2
   13ff8:	18 f4       	brcc	.+6      	; 0x14000 <__gtsf2+0x4c>
   13ffa:	2f ef       	ldi	r18, 0xFF	; 255
   13ffc:	3f ef       	ldi	r19, 0xFF	; 255
   13ffe:	0b c0       	rjmp	.+22     	; 0x14016 <__gtsf2+0x62>
   14000:	89 85       	ldd	r24, Y+9	; 0x09
   14002:	82 30       	cpi	r24, 0x02	; 2
   14004:	d0 f3       	brcs	.-12     	; 0x13ffa <__gtsf2+0x46>
   14006:	b8 01       	movw	r22, r16
   14008:	c7 01       	movw	r24, r14
   1400a:	0e 94 8d a2 	call	0x1451a	; 0x1451a <__fpcmp_parts_f>
   1400e:	28 2f       	mov	r18, r24
   14010:	33 27       	eor	r19, r19
   14012:	27 fd       	sbrc	r18, 7
   14014:	30 95       	com	r19
   14016:	c9 01       	movw	r24, r18
   14018:	e6 e0       	ldi	r30, 0x06	; 6
   1401a:	68 96       	adiw	r28, 0x18	; 24
   1401c:	0c 94 e6 a3 	jmp	0x147cc	; 0x147cc <__epilogue_restores__+0x18>

00014020 <__gesf2>:
   14020:	a8 e1       	ldi	r26, 0x18	; 24
   14022:	b0 e0       	ldi	r27, 0x00	; 0
   14024:	e6 e1       	ldi	r30, 0x16	; 22
   14026:	f0 ea       	ldi	r31, 0xA0	; 160
   14028:	0c 94 ca a3 	jmp	0x14794	; 0x14794 <__prologue_saves__+0x18>
   1402c:	69 83       	std	Y+1, r22	; 0x01
   1402e:	7a 83       	std	Y+2, r23	; 0x02
   14030:	8b 83       	std	Y+3, r24	; 0x03
   14032:	9c 83       	std	Y+4, r25	; 0x04
   14034:	2d 83       	std	Y+5, r18	; 0x05
   14036:	3e 83       	std	Y+6, r19	; 0x06
   14038:	4f 83       	std	Y+7, r20	; 0x07
   1403a:	58 87       	std	Y+8, r21	; 0x08
   1403c:	81 e1       	ldi	r24, 0x11	; 17
   1403e:	e8 2e       	mov	r14, r24
   14040:	f1 2c       	mov	r15, r1
   14042:	ec 0e       	add	r14, r28
   14044:	fd 1e       	adc	r15, r29
   14046:	b7 01       	movw	r22, r14
   14048:	ce 01       	movw	r24, r28
   1404a:	01 96       	adiw	r24, 0x01	; 1
   1404c:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   14050:	8e 01       	movw	r16, r28
   14052:	07 5f       	subi	r16, 0xF7	; 247
   14054:	1f 4f       	sbci	r17, 0xFF	; 255
   14056:	b8 01       	movw	r22, r16
   14058:	ce 01       	movw	r24, r28
   1405a:	05 96       	adiw	r24, 0x05	; 5
   1405c:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   14060:	89 89       	ldd	r24, Y+17	; 0x11
   14062:	82 30       	cpi	r24, 0x02	; 2
   14064:	18 f4       	brcc	.+6      	; 0x1406c <__gesf2+0x4c>
   14066:	2f ef       	ldi	r18, 0xFF	; 255
   14068:	3f ef       	ldi	r19, 0xFF	; 255
   1406a:	0b c0       	rjmp	.+22     	; 0x14082 <__gesf2+0x62>
   1406c:	89 85       	ldd	r24, Y+9	; 0x09
   1406e:	82 30       	cpi	r24, 0x02	; 2
   14070:	d0 f3       	brcs	.-12     	; 0x14066 <__gesf2+0x46>
   14072:	b8 01       	movw	r22, r16
   14074:	c7 01       	movw	r24, r14
   14076:	0e 94 8d a2 	call	0x1451a	; 0x1451a <__fpcmp_parts_f>
   1407a:	28 2f       	mov	r18, r24
   1407c:	33 27       	eor	r19, r19
   1407e:	27 fd       	sbrc	r18, 7
   14080:	30 95       	com	r19
   14082:	c9 01       	movw	r24, r18
   14084:	e6 e0       	ldi	r30, 0x06	; 6
   14086:	68 96       	adiw	r28, 0x18	; 24
   14088:	0c 94 e6 a3 	jmp	0x147cc	; 0x147cc <__epilogue_restores__+0x18>

0001408c <__ltsf2>:
   1408c:	a8 e1       	ldi	r26, 0x18	; 24
   1408e:	b0 e0       	ldi	r27, 0x00	; 0
   14090:	ec e4       	ldi	r30, 0x4C	; 76
   14092:	f0 ea       	ldi	r31, 0xA0	; 160
   14094:	0c 94 ca a3 	jmp	0x14794	; 0x14794 <__prologue_saves__+0x18>
   14098:	69 83       	std	Y+1, r22	; 0x01
   1409a:	7a 83       	std	Y+2, r23	; 0x02
   1409c:	8b 83       	std	Y+3, r24	; 0x03
   1409e:	9c 83       	std	Y+4, r25	; 0x04
   140a0:	2d 83       	std	Y+5, r18	; 0x05
   140a2:	3e 83       	std	Y+6, r19	; 0x06
   140a4:	4f 83       	std	Y+7, r20	; 0x07
   140a6:	58 87       	std	Y+8, r21	; 0x08
   140a8:	81 e1       	ldi	r24, 0x11	; 17
   140aa:	e8 2e       	mov	r14, r24
   140ac:	f1 2c       	mov	r15, r1
   140ae:	ec 0e       	add	r14, r28
   140b0:	fd 1e       	adc	r15, r29
   140b2:	b7 01       	movw	r22, r14
   140b4:	ce 01       	movw	r24, r28
   140b6:	01 96       	adiw	r24, 0x01	; 1
   140b8:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   140bc:	8e 01       	movw	r16, r28
   140be:	07 5f       	subi	r16, 0xF7	; 247
   140c0:	1f 4f       	sbci	r17, 0xFF	; 255
   140c2:	b8 01       	movw	r22, r16
   140c4:	ce 01       	movw	r24, r28
   140c6:	05 96       	adiw	r24, 0x05	; 5
   140c8:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   140cc:	89 89       	ldd	r24, Y+17	; 0x11
   140ce:	82 30       	cpi	r24, 0x02	; 2
   140d0:	18 f0       	brcs	.+6      	; 0x140d8 <__ltsf2+0x4c>
   140d2:	89 85       	ldd	r24, Y+9	; 0x09
   140d4:	82 30       	cpi	r24, 0x02	; 2
   140d6:	18 f4       	brcc	.+6      	; 0x140de <__ltsf2+0x52>
   140d8:	21 e0       	ldi	r18, 0x01	; 1
   140da:	30 e0       	ldi	r19, 0x00	; 0
   140dc:	08 c0       	rjmp	.+16     	; 0x140ee <__ltsf2+0x62>
   140de:	b8 01       	movw	r22, r16
   140e0:	c7 01       	movw	r24, r14
   140e2:	0e 94 8d a2 	call	0x1451a	; 0x1451a <__fpcmp_parts_f>
   140e6:	28 2f       	mov	r18, r24
   140e8:	33 27       	eor	r19, r19
   140ea:	27 fd       	sbrc	r18, 7
   140ec:	30 95       	com	r19
   140ee:	c9 01       	movw	r24, r18
   140f0:	e6 e0       	ldi	r30, 0x06	; 6
   140f2:	68 96       	adiw	r28, 0x18	; 24
   140f4:	0c 94 e6 a3 	jmp	0x147cc	; 0x147cc <__epilogue_restores__+0x18>

000140f8 <__fixsfsi>:
   140f8:	ac e0       	ldi	r26, 0x0C	; 12
   140fa:	b0 e0       	ldi	r27, 0x00	; 0
   140fc:	e2 e8       	ldi	r30, 0x82	; 130
   140fe:	f0 ea       	ldi	r31, 0xA0	; 160
   14100:	0c 94 ce a3 	jmp	0x1479c	; 0x1479c <__prologue_saves__+0x20>
   14104:	69 83       	std	Y+1, r22	; 0x01
   14106:	7a 83       	std	Y+2, r23	; 0x02
   14108:	8b 83       	std	Y+3, r24	; 0x03
   1410a:	9c 83       	std	Y+4, r25	; 0x04
   1410c:	be 01       	movw	r22, r28
   1410e:	6b 5f       	subi	r22, 0xFB	; 251
   14110:	7f 4f       	sbci	r23, 0xFF	; 255
   14112:	ce 01       	movw	r24, r28
   14114:	01 96       	adiw	r24, 0x01	; 1
   14116:	0e 94 ee a1 	call	0x143dc	; 0x143dc <__unpack_f>
   1411a:	8d 81       	ldd	r24, Y+5	; 0x05
   1411c:	82 30       	cpi	r24, 0x02	; 2
   1411e:	61 f0       	breq	.+24     	; 0x14138 <__fixsfsi+0x40>
   14120:	82 30       	cpi	r24, 0x02	; 2
   14122:	50 f0       	brcs	.+20     	; 0x14138 <__fixsfsi+0x40>
   14124:	84 30       	cpi	r24, 0x04	; 4
   14126:	69 f4       	brne	.+26     	; 0x14142 <__fixsfsi+0x4a>
   14128:	8e 81       	ldd	r24, Y+6	; 0x06
   1412a:	88 23       	and	r24, r24
   1412c:	59 f5       	brne	.+86     	; 0x14184 <__fixsfsi+0x8c>
   1412e:	2f ef       	ldi	r18, 0xFF	; 255
   14130:	3f ef       	ldi	r19, 0xFF	; 255
   14132:	4f ef       	ldi	r20, 0xFF	; 255
   14134:	5f e7       	ldi	r21, 0x7F	; 127
   14136:	2a c0       	rjmp	.+84     	; 0x1418c <__fixsfsi+0x94>
   14138:	20 e0       	ldi	r18, 0x00	; 0
   1413a:	30 e0       	ldi	r19, 0x00	; 0
   1413c:	40 e0       	ldi	r20, 0x00	; 0
   1413e:	50 e0       	ldi	r21, 0x00	; 0
   14140:	25 c0       	rjmp	.+74     	; 0x1418c <__fixsfsi+0x94>
   14142:	2f 81       	ldd	r18, Y+7	; 0x07
   14144:	38 85       	ldd	r19, Y+8	; 0x08
   14146:	37 fd       	sbrc	r19, 7
   14148:	f7 cf       	rjmp	.-18     	; 0x14138 <__fixsfsi+0x40>
   1414a:	2f 31       	cpi	r18, 0x1F	; 31
   1414c:	31 05       	cpc	r19, r1
   1414e:	64 f7       	brge	.-40     	; 0x14128 <__fixsfsi+0x30>
   14150:	8e e1       	ldi	r24, 0x1E	; 30
   14152:	90 e0       	ldi	r25, 0x00	; 0
   14154:	82 1b       	sub	r24, r18
   14156:	93 0b       	sbc	r25, r19
   14158:	29 85       	ldd	r18, Y+9	; 0x09
   1415a:	3a 85       	ldd	r19, Y+10	; 0x0a
   1415c:	4b 85       	ldd	r20, Y+11	; 0x0b
   1415e:	5c 85       	ldd	r21, Y+12	; 0x0c
   14160:	04 c0       	rjmp	.+8      	; 0x1416a <__fixsfsi+0x72>
   14162:	56 95       	lsr	r21
   14164:	47 95       	ror	r20
   14166:	37 95       	ror	r19
   14168:	27 95       	ror	r18
   1416a:	8a 95       	dec	r24
   1416c:	d2 f7       	brpl	.-12     	; 0x14162 <__fixsfsi+0x6a>
   1416e:	8e 81       	ldd	r24, Y+6	; 0x06
   14170:	88 23       	and	r24, r24
   14172:	61 f0       	breq	.+24     	; 0x1418c <__fixsfsi+0x94>
   14174:	50 95       	com	r21
   14176:	40 95       	com	r20
   14178:	30 95       	com	r19
   1417a:	21 95       	neg	r18
   1417c:	3f 4f       	sbci	r19, 0xFF	; 255
   1417e:	4f 4f       	sbci	r20, 0xFF	; 255
   14180:	5f 4f       	sbci	r21, 0xFF	; 255
   14182:	04 c0       	rjmp	.+8      	; 0x1418c <__fixsfsi+0x94>
   14184:	20 e0       	ldi	r18, 0x00	; 0
   14186:	30 e0       	ldi	r19, 0x00	; 0
   14188:	40 e0       	ldi	r20, 0x00	; 0
   1418a:	50 e8       	ldi	r21, 0x80	; 128
   1418c:	ca 01       	movw	r24, r20
   1418e:	b9 01       	movw	r22, r18
   14190:	e2 e0       	ldi	r30, 0x02	; 2
   14192:	2c 96       	adiw	r28, 0x0c	; 12
   14194:	0c 94 ea a3 	jmp	0x147d4	; 0x147d4 <__epilogue_restores__+0x20>

00014198 <__pack_f>:
   14198:	4f 92       	push	r4
   1419a:	5f 92       	push	r5
   1419c:	6f 92       	push	r6
   1419e:	7f 92       	push	r7
   141a0:	8f 92       	push	r8
   141a2:	9f 92       	push	r9
   141a4:	af 92       	push	r10
   141a6:	bf 92       	push	r11
   141a8:	df 92       	push	r13
   141aa:	ef 92       	push	r14
   141ac:	ff 92       	push	r15
   141ae:	0f 93       	push	r16
   141b0:	1f 93       	push	r17
   141b2:	20 e0       	ldi	r18, 0x00	; 0
   141b4:	30 e0       	ldi	r19, 0x00	; 0
   141b6:	40 e0       	ldi	r20, 0x00	; 0
   141b8:	50 e0       	ldi	r21, 0x00	; 0
   141ba:	fc 01       	movw	r30, r24
   141bc:	e4 80       	ldd	r14, Z+4	; 0x04
   141be:	f5 80       	ldd	r15, Z+5	; 0x05
   141c0:	06 81       	ldd	r16, Z+6	; 0x06
   141c2:	17 81       	ldd	r17, Z+7	; 0x07
   141c4:	d1 80       	ldd	r13, Z+1	; 0x01
   141c6:	80 81       	ld	r24, Z
   141c8:	82 30       	cpi	r24, 0x02	; 2
   141ca:	38 f4       	brcc	.+14     	; 0x141da <__pack_f+0x42>
   141cc:	d8 01       	movw	r26, r16
   141ce:	c7 01       	movw	r24, r14
   141d0:	a0 61       	ori	r26, 0x10	; 16
   141d2:	af 77       	andi	r26, 0x7F	; 127
   141d4:	b0 70       	andi	r27, 0x00	; 0
   141d6:	6f ef       	ldi	r22, 0xFF	; 255
   141d8:	d9 c0       	rjmp	.+434    	; 0x1438c <__pack_f+0x1f4>
   141da:	84 30       	cpi	r24, 0x04	; 4
   141dc:	09 f4       	brne	.+2      	; 0x141e0 <__pack_f+0x48>
   141de:	6e c0       	rjmp	.+220    	; 0x142bc <__pack_f+0x124>
   141e0:	82 30       	cpi	r24, 0x02	; 2
   141e2:	09 f4       	brne	.+2      	; 0x141e6 <__pack_f+0x4e>
   141e4:	71 c0       	rjmp	.+226    	; 0x142c8 <__pack_f+0x130>
   141e6:	e1 14       	cp	r14, r1
   141e8:	f1 04       	cpc	r15, r1
   141ea:	01 05       	cpc	r16, r1
   141ec:	11 05       	cpc	r17, r1
   141ee:	09 f4       	brne	.+2      	; 0x141f2 <__pack_f+0x5a>
   141f0:	6b c0       	rjmp	.+214    	; 0x142c8 <__pack_f+0x130>
   141f2:	82 81       	ldd	r24, Z+2	; 0x02
   141f4:	93 81       	ldd	r25, Z+3	; 0x03
   141f6:	6f ef       	ldi	r22, 0xFF	; 255
   141f8:	82 38       	cpi	r24, 0x82	; 130
   141fa:	96 07       	cpc	r25, r22
   141fc:	0c f0       	brlt	.+2      	; 0x14200 <__pack_f+0x68>
   141fe:	6a c0       	rjmp	.+212    	; 0x142d4 <__pack_f+0x13c>
   14200:	62 e8       	ldi	r22, 0x82	; 130
   14202:	7f ef       	ldi	r23, 0xFF	; 255
   14204:	68 1b       	sub	r22, r24
   14206:	79 0b       	sbc	r23, r25
   14208:	6a 31       	cpi	r22, 0x1A	; 26
   1420a:	71 05       	cpc	r23, r1
   1420c:	0c f0       	brlt	.+2      	; 0x14210 <__pack_f+0x78>
   1420e:	80 c0       	rjmp	.+256    	; 0x14310 <__pack_f+0x178>
   14210:	47 01       	movw	r8, r14
   14212:	58 01       	movw	r10, r16
   14214:	06 2e       	mov	r0, r22
   14216:	04 c0       	rjmp	.+8      	; 0x14220 <__pack_f+0x88>
   14218:	b6 94       	lsr	r11
   1421a:	a7 94       	ror	r10
   1421c:	97 94       	ror	r9
   1421e:	87 94       	ror	r8
   14220:	0a 94       	dec	r0
   14222:	d2 f7       	brpl	.-12     	; 0x14218 <__pack_f+0x80>
   14224:	44 24       	eor	r4, r4
   14226:	55 24       	eor	r5, r5
   14228:	32 01       	movw	r6, r4
   1422a:	81 e0       	ldi	r24, 0x01	; 1
   1422c:	90 e0       	ldi	r25, 0x00	; 0
   1422e:	a0 e0       	ldi	r26, 0x00	; 0
   14230:	b0 e0       	ldi	r27, 0x00	; 0
   14232:	04 c0       	rjmp	.+8      	; 0x1423c <__pack_f+0xa4>
   14234:	88 0f       	add	r24, r24
   14236:	99 1f       	adc	r25, r25
   14238:	aa 1f       	adc	r26, r26
   1423a:	bb 1f       	adc	r27, r27
   1423c:	6a 95       	dec	r22
   1423e:	d2 f7       	brpl	.-12     	; 0x14234 <__pack_f+0x9c>
   14240:	01 97       	sbiw	r24, 0x01	; 1
   14242:	a1 09       	sbc	r26, r1
   14244:	b1 09       	sbc	r27, r1
   14246:	e8 22       	and	r14, r24
   14248:	f9 22       	and	r15, r25
   1424a:	0a 23       	and	r16, r26
   1424c:	1b 23       	and	r17, r27
   1424e:	e1 14       	cp	r14, r1
   14250:	f1 04       	cpc	r15, r1
   14252:	01 05       	cpc	r16, r1
   14254:	11 05       	cpc	r17, r1
   14256:	29 f0       	breq	.+10     	; 0x14262 <__pack_f+0xca>
   14258:	61 e0       	ldi	r22, 0x01	; 1
   1425a:	46 2e       	mov	r4, r22
   1425c:	51 2c       	mov	r5, r1
   1425e:	61 2c       	mov	r6, r1
   14260:	71 2c       	mov	r7, r1
   14262:	85 01       	movw	r16, r10
   14264:	74 01       	movw	r14, r8
   14266:	e4 28       	or	r14, r4
   14268:	f5 28       	or	r15, r5
   1426a:	06 29       	or	r16, r6
   1426c:	17 29       	or	r17, r7
   1426e:	d8 01       	movw	r26, r16
   14270:	c7 01       	movw	r24, r14
   14272:	8f 77       	andi	r24, 0x7F	; 127
   14274:	90 70       	andi	r25, 0x00	; 0
   14276:	a0 70       	andi	r26, 0x00	; 0
   14278:	b0 70       	andi	r27, 0x00	; 0
   1427a:	80 34       	cpi	r24, 0x40	; 64
   1427c:	91 05       	cpc	r25, r1
   1427e:	a1 05       	cpc	r26, r1
   14280:	b1 05       	cpc	r27, r1
   14282:	09 f4       	brne	.+2      	; 0x14286 <__pack_f+0xee>
   14284:	57 c0       	rjmp	.+174    	; 0x14334 <__pack_f+0x19c>
   14286:	d8 01       	movw	r26, r16
   14288:	c7 01       	movw	r24, r14
   1428a:	cf 96       	adiw	r24, 0x3f	; 63
   1428c:	a1 1d       	adc	r26, r1
   1428e:	b1 1d       	adc	r27, r1
   14290:	60 e0       	ldi	r22, 0x00	; 0
   14292:	70 e0       	ldi	r23, 0x00	; 0
   14294:	80 30       	cpi	r24, 0x00	; 0
   14296:	e0 e0       	ldi	r30, 0x00	; 0
   14298:	9e 07       	cpc	r25, r30
   1429a:	e0 e0       	ldi	r30, 0x00	; 0
   1429c:	ae 07       	cpc	r26, r30
   1429e:	e0 e4       	ldi	r30, 0x40	; 64
   142a0:	be 07       	cpc	r27, r30
   142a2:	10 f0       	brcs	.+4      	; 0x142a8 <__pack_f+0x110>
   142a4:	61 e0       	ldi	r22, 0x01	; 1
   142a6:	70 e0       	ldi	r23, 0x00	; 0
   142a8:	27 e0       	ldi	r18, 0x07	; 7
   142aa:	b6 95       	lsr	r27
   142ac:	a7 95       	ror	r26
   142ae:	97 95       	ror	r25
   142b0:	87 95       	ror	r24
   142b2:	2a 95       	dec	r18
   142b4:	d1 f7       	brne	.-12     	; 0x142aa <__pack_f+0x112>
   142b6:	af 77       	andi	r26, 0x7F	; 127
   142b8:	b0 70       	andi	r27, 0x00	; 0
   142ba:	68 c0       	rjmp	.+208    	; 0x1438c <__pack_f+0x1f4>
   142bc:	80 e0       	ldi	r24, 0x00	; 0
   142be:	90 e0       	ldi	r25, 0x00	; 0
   142c0:	a0 e0       	ldi	r26, 0x00	; 0
   142c2:	b0 e0       	ldi	r27, 0x00	; 0
   142c4:	6f ef       	ldi	r22, 0xFF	; 255
   142c6:	62 c0       	rjmp	.+196    	; 0x1438c <__pack_f+0x1f4>
   142c8:	80 e0       	ldi	r24, 0x00	; 0
   142ca:	90 e0       	ldi	r25, 0x00	; 0
   142cc:	a0 e0       	ldi	r26, 0x00	; 0
   142ce:	b0 e0       	ldi	r27, 0x00	; 0
   142d0:	60 e0       	ldi	r22, 0x00	; 0
   142d2:	5c c0       	rjmp	.+184    	; 0x1438c <__pack_f+0x1f4>
   142d4:	80 38       	cpi	r24, 0x80	; 128
   142d6:	91 05       	cpc	r25, r1
   142d8:	8c f7       	brge	.-30     	; 0x142bc <__pack_f+0x124>
   142da:	bc 01       	movw	r22, r24
   142dc:	61 58       	subi	r22, 0x81	; 129
   142de:	7f 4f       	sbci	r23, 0xFF	; 255
   142e0:	d8 01       	movw	r26, r16
   142e2:	c7 01       	movw	r24, r14
   142e4:	8f 77       	andi	r24, 0x7F	; 127
   142e6:	90 70       	andi	r25, 0x00	; 0
   142e8:	a0 70       	andi	r26, 0x00	; 0
   142ea:	b0 70       	andi	r27, 0x00	; 0
   142ec:	80 34       	cpi	r24, 0x40	; 64
   142ee:	91 05       	cpc	r25, r1
   142f0:	a1 05       	cpc	r26, r1
   142f2:	b1 05       	cpc	r27, r1
   142f4:	a1 f0       	breq	.+40     	; 0x1431e <__pack_f+0x186>
   142f6:	8f e3       	ldi	r24, 0x3F	; 63
   142f8:	90 e0       	ldi	r25, 0x00	; 0
   142fa:	a0 e0       	ldi	r26, 0x00	; 0
   142fc:	b0 e0       	ldi	r27, 0x00	; 0
   142fe:	e8 0e       	add	r14, r24
   14300:	f9 1e       	adc	r15, r25
   14302:	0a 1f       	adc	r16, r26
   14304:	1b 1f       	adc	r17, r27
   14306:	17 fd       	sbrc	r17, 7
   14308:	28 c0       	rjmp	.+80     	; 0x1435a <__pack_f+0x1c2>
   1430a:	d8 01       	movw	r26, r16
   1430c:	c7 01       	movw	r24, r14
   1430e:	cc cf       	rjmp	.-104    	; 0x142a8 <__pack_f+0x110>
   14310:	60 e0       	ldi	r22, 0x00	; 0
   14312:	70 e0       	ldi	r23, 0x00	; 0
   14314:	80 e0       	ldi	r24, 0x00	; 0
   14316:	90 e0       	ldi	r25, 0x00	; 0
   14318:	a0 e0       	ldi	r26, 0x00	; 0
   1431a:	b0 e0       	ldi	r27, 0x00	; 0
   1431c:	cc cf       	rjmp	.-104    	; 0x142b6 <__pack_f+0x11e>
   1431e:	e7 fe       	sbrs	r14, 7
   14320:	f2 cf       	rjmp	.-28     	; 0x14306 <__pack_f+0x16e>
   14322:	80 e4       	ldi	r24, 0x40	; 64
   14324:	90 e0       	ldi	r25, 0x00	; 0
   14326:	a0 e0       	ldi	r26, 0x00	; 0
   14328:	b0 e0       	ldi	r27, 0x00	; 0
   1432a:	e8 0e       	add	r14, r24
   1432c:	f9 1e       	adc	r15, r25
   1432e:	0a 1f       	adc	r16, r26
   14330:	1b 1f       	adc	r17, r27
   14332:	e9 cf       	rjmp	.-46     	; 0x14306 <__pack_f+0x16e>
   14334:	e7 fc       	sbrc	r14, 7
   14336:	18 c0       	rjmp	.+48     	; 0x14368 <__pack_f+0x1d0>
   14338:	80 e0       	ldi	r24, 0x00	; 0
   1433a:	90 e0       	ldi	r25, 0x00	; 0
   1433c:	60 e0       	ldi	r22, 0x00	; 0
   1433e:	e6 16       	cp	r14, r22
   14340:	60 e0       	ldi	r22, 0x00	; 0
   14342:	f6 06       	cpc	r15, r22
   14344:	60 e0       	ldi	r22, 0x00	; 0
   14346:	06 07       	cpc	r16, r22
   14348:	60 e4       	ldi	r22, 0x40	; 64
   1434a:	16 07       	cpc	r17, r22
   1434c:	10 f0       	brcs	.+4      	; 0x14352 <__pack_f+0x1ba>
   1434e:	81 e0       	ldi	r24, 0x01	; 1
   14350:	90 e0       	ldi	r25, 0x00	; 0
   14352:	bc 01       	movw	r22, r24
   14354:	d8 01       	movw	r26, r16
   14356:	c7 01       	movw	r24, r14
   14358:	a7 cf       	rjmp	.-178    	; 0x142a8 <__pack_f+0x110>
   1435a:	16 95       	lsr	r17
   1435c:	07 95       	ror	r16
   1435e:	f7 94       	ror	r15
   14360:	e7 94       	ror	r14
   14362:	6f 5f       	subi	r22, 0xFF	; 255
   14364:	7f 4f       	sbci	r23, 0xFF	; 255
   14366:	d1 cf       	rjmp	.-94     	; 0x1430a <__pack_f+0x172>
   14368:	d8 01       	movw	r26, r16
   1436a:	c7 01       	movw	r24, r14
   1436c:	80 5c       	subi	r24, 0xC0	; 192
   1436e:	9f 4f       	sbci	r25, 0xFF	; 255
   14370:	af 4f       	sbci	r26, 0xFF	; 255
   14372:	bf 4f       	sbci	r27, 0xFF	; 255
   14374:	60 e0       	ldi	r22, 0x00	; 0
   14376:	70 e0       	ldi	r23, 0x00	; 0
   14378:	80 30       	cpi	r24, 0x00	; 0
   1437a:	e0 e0       	ldi	r30, 0x00	; 0
   1437c:	9e 07       	cpc	r25, r30
   1437e:	e0 e0       	ldi	r30, 0x00	; 0
   14380:	ae 07       	cpc	r26, r30
   14382:	e0 e4       	ldi	r30, 0x40	; 64
   14384:	be 07       	cpc	r27, r30
   14386:	08 f4       	brcc	.+2      	; 0x1438a <__pack_f+0x1f2>
   14388:	8f cf       	rjmp	.-226    	; 0x142a8 <__pack_f+0x110>
   1438a:	8c cf       	rjmp	.-232    	; 0x142a4 <__pack_f+0x10c>
   1438c:	28 2f       	mov	r18, r24
   1438e:	39 2f       	mov	r19, r25
   14390:	9a 2f       	mov	r25, r26
   14392:	9f 77       	andi	r25, 0x7F	; 127
   14394:	84 2f       	mov	r24, r20
   14396:	80 78       	andi	r24, 0x80	; 128
   14398:	89 2b       	or	r24, r25
   1439a:	96 2f       	mov	r25, r22
   1439c:	97 95       	ror	r25
   1439e:	99 27       	eor	r25, r25
   143a0:	97 95       	ror	r25
   143a2:	8f 77       	andi	r24, 0x7F	; 127
   143a4:	48 2f       	mov	r20, r24
   143a6:	49 2b       	or	r20, r25
   143a8:	66 95       	lsr	r22
   143aa:	85 2f       	mov	r24, r21
   143ac:	80 78       	andi	r24, 0x80	; 128
   143ae:	86 2b       	or	r24, r22
   143b0:	d7 94       	ror	r13
   143b2:	dd 24       	eor	r13, r13
   143b4:	d7 94       	ror	r13
   143b6:	8f 77       	andi	r24, 0x7F	; 127
   143b8:	58 2f       	mov	r21, r24
   143ba:	5d 29       	or	r21, r13
   143bc:	ca 01       	movw	r24, r20
   143be:	b9 01       	movw	r22, r18
   143c0:	1f 91       	pop	r17
   143c2:	0f 91       	pop	r16
   143c4:	ff 90       	pop	r15
   143c6:	ef 90       	pop	r14
   143c8:	df 90       	pop	r13
   143ca:	bf 90       	pop	r11
   143cc:	af 90       	pop	r10
   143ce:	9f 90       	pop	r9
   143d0:	8f 90       	pop	r8
   143d2:	7f 90       	pop	r7
   143d4:	6f 90       	pop	r6
   143d6:	5f 90       	pop	r5
   143d8:	4f 90       	pop	r4
   143da:	08 95       	ret

000143dc <__unpack_f>:
   143dc:	fc 01       	movw	r30, r24
   143de:	db 01       	movw	r26, r22
   143e0:	20 81       	ld	r18, Z
   143e2:	31 81       	ldd	r19, Z+1	; 0x01
   143e4:	92 81       	ldd	r25, Z+2	; 0x02
   143e6:	49 2f       	mov	r20, r25
   143e8:	4f 77       	andi	r20, 0x7F	; 127
   143ea:	50 e0       	ldi	r21, 0x00	; 0
   143ec:	99 1f       	adc	r25, r25
   143ee:	99 27       	eor	r25, r25
   143f0:	99 1f       	adc	r25, r25
   143f2:	83 81       	ldd	r24, Z+3	; 0x03
   143f4:	68 2f       	mov	r22, r24
   143f6:	66 0f       	add	r22, r22
   143f8:	69 2b       	or	r22, r25
   143fa:	88 1f       	adc	r24, r24
   143fc:	88 27       	eor	r24, r24
   143fe:	88 1f       	adc	r24, r24
   14400:	fd 01       	movw	r30, r26
   14402:	81 83       	std	Z+1, r24	; 0x01
   14404:	66 23       	and	r22, r22
   14406:	09 f0       	breq	.+2      	; 0x1440a <__unpack_f+0x2e>
   14408:	49 c0       	rjmp	.+146    	; 0x1449c <__unpack_f+0xc0>
   1440a:	21 15       	cp	r18, r1
   1440c:	31 05       	cpc	r19, r1
   1440e:	41 05       	cpc	r20, r1
   14410:	51 05       	cpc	r21, r1
   14412:	09 f4       	brne	.+2      	; 0x14416 <__unpack_f+0x3a>
   14414:	70 c0       	rjmp	.+224    	; 0x144f6 <__unpack_f+0x11a>
   14416:	82 e8       	ldi	r24, 0x82	; 130
   14418:	9f ef       	ldi	r25, 0xFF	; 255
   1441a:	fd 01       	movw	r30, r26
   1441c:	93 83       	std	Z+3, r25	; 0x03
   1441e:	82 83       	std	Z+2, r24	; 0x02
   14420:	22 0f       	add	r18, r18
   14422:	33 1f       	adc	r19, r19
   14424:	44 1f       	adc	r20, r20
   14426:	55 1f       	adc	r21, r21
   14428:	22 0f       	add	r18, r18
   1442a:	33 1f       	adc	r19, r19
   1442c:	44 1f       	adc	r20, r20
   1442e:	55 1f       	adc	r21, r21
   14430:	22 0f       	add	r18, r18
   14432:	33 1f       	adc	r19, r19
   14434:	44 1f       	adc	r20, r20
   14436:	55 1f       	adc	r21, r21
   14438:	22 0f       	add	r18, r18
   1443a:	33 1f       	adc	r19, r19
   1443c:	44 1f       	adc	r20, r20
   1443e:	55 1f       	adc	r21, r21
   14440:	22 0f       	add	r18, r18
   14442:	33 1f       	adc	r19, r19
   14444:	44 1f       	adc	r20, r20
   14446:	55 1f       	adc	r21, r21
   14448:	22 0f       	add	r18, r18
   1444a:	33 1f       	adc	r19, r19
   1444c:	44 1f       	adc	r20, r20
   1444e:	55 1f       	adc	r21, r21
   14450:	22 0f       	add	r18, r18
   14452:	33 1f       	adc	r19, r19
   14454:	44 1f       	adc	r20, r20
   14456:	55 1f       	adc	r21, r21
   14458:	83 e0       	ldi	r24, 0x03	; 3
   1445a:	8c 93       	st	X, r24
   1445c:	20 30       	cpi	r18, 0x00	; 0
   1445e:	f0 e0       	ldi	r31, 0x00	; 0
   14460:	3f 07       	cpc	r19, r31
   14462:	f0 e0       	ldi	r31, 0x00	; 0
   14464:	4f 07       	cpc	r20, r31
   14466:	f0 e4       	ldi	r31, 0x40	; 64
   14468:	5f 07       	cpc	r21, r31
   1446a:	90 f4       	brcc	.+36     	; 0x14490 <__unpack_f+0xb4>
   1446c:	82 e8       	ldi	r24, 0x82	; 130
   1446e:	9f ef       	ldi	r25, 0xFF	; 255
   14470:	22 0f       	add	r18, r18
   14472:	33 1f       	adc	r19, r19
   14474:	44 1f       	adc	r20, r20
   14476:	55 1f       	adc	r21, r21
   14478:	01 97       	sbiw	r24, 0x01	; 1
   1447a:	20 30       	cpi	r18, 0x00	; 0
   1447c:	60 e0       	ldi	r22, 0x00	; 0
   1447e:	36 07       	cpc	r19, r22
   14480:	60 e0       	ldi	r22, 0x00	; 0
   14482:	46 07       	cpc	r20, r22
   14484:	60 e4       	ldi	r22, 0x40	; 64
   14486:	56 07       	cpc	r21, r22
   14488:	98 f3       	brcs	.-26     	; 0x14470 <__unpack_f+0x94>
   1448a:	fd 01       	movw	r30, r26
   1448c:	93 83       	std	Z+3, r25	; 0x03
   1448e:	82 83       	std	Z+2, r24	; 0x02
   14490:	fd 01       	movw	r30, r26
   14492:	24 83       	std	Z+4, r18	; 0x04
   14494:	35 83       	std	Z+5, r19	; 0x05
   14496:	46 83       	std	Z+6, r20	; 0x06
   14498:	57 83       	std	Z+7, r21	; 0x07
   1449a:	08 95       	ret
   1449c:	6f 3f       	cpi	r22, 0xFF	; 255
   1449e:	71 f1       	breq	.+92     	; 0x144fc <__unpack_f+0x120>
   144a0:	86 2f       	mov	r24, r22
   144a2:	99 27       	eor	r25, r25
   144a4:	8f 57       	subi	r24, 0x7F	; 127
   144a6:	90 40       	sbci	r25, 0x00	; 0
   144a8:	fd 01       	movw	r30, r26
   144aa:	93 83       	std	Z+3, r25	; 0x03
   144ac:	82 83       	std	Z+2, r24	; 0x02
   144ae:	83 e0       	ldi	r24, 0x03	; 3
   144b0:	8c 93       	st	X, r24
   144b2:	22 0f       	add	r18, r18
   144b4:	33 1f       	adc	r19, r19
   144b6:	44 1f       	adc	r20, r20
   144b8:	55 1f       	adc	r21, r21
   144ba:	22 0f       	add	r18, r18
   144bc:	33 1f       	adc	r19, r19
   144be:	44 1f       	adc	r20, r20
   144c0:	55 1f       	adc	r21, r21
   144c2:	22 0f       	add	r18, r18
   144c4:	33 1f       	adc	r19, r19
   144c6:	44 1f       	adc	r20, r20
   144c8:	55 1f       	adc	r21, r21
   144ca:	22 0f       	add	r18, r18
   144cc:	33 1f       	adc	r19, r19
   144ce:	44 1f       	adc	r20, r20
   144d0:	55 1f       	adc	r21, r21
   144d2:	22 0f       	add	r18, r18
   144d4:	33 1f       	adc	r19, r19
   144d6:	44 1f       	adc	r20, r20
   144d8:	55 1f       	adc	r21, r21
   144da:	22 0f       	add	r18, r18
   144dc:	33 1f       	adc	r19, r19
   144de:	44 1f       	adc	r20, r20
   144e0:	55 1f       	adc	r21, r21
   144e2:	22 0f       	add	r18, r18
   144e4:	33 1f       	adc	r19, r19
   144e6:	44 1f       	adc	r20, r20
   144e8:	55 1f       	adc	r21, r21
   144ea:	50 64       	ori	r21, 0x40	; 64
   144ec:	24 83       	std	Z+4, r18	; 0x04
   144ee:	35 83       	std	Z+5, r19	; 0x05
   144f0:	46 83       	std	Z+6, r20	; 0x06
   144f2:	57 83       	std	Z+7, r21	; 0x07
   144f4:	08 95       	ret
   144f6:	82 e0       	ldi	r24, 0x02	; 2
   144f8:	8c 93       	st	X, r24
   144fa:	08 95       	ret
   144fc:	21 15       	cp	r18, r1
   144fe:	31 05       	cpc	r19, r1
   14500:	41 05       	cpc	r20, r1
   14502:	51 05       	cpc	r21, r1
   14504:	19 f4       	brne	.+6      	; 0x1450c <__unpack_f+0x130>
   14506:	84 e0       	ldi	r24, 0x04	; 4
   14508:	8c 93       	st	X, r24
   1450a:	08 95       	ret
   1450c:	44 fd       	sbrc	r20, 4
   1450e:	02 c0       	rjmp	.+4      	; 0x14514 <__unpack_f+0x138>
   14510:	1c 92       	st	X, r1
   14512:	be cf       	rjmp	.-132    	; 0x14490 <__unpack_f+0xb4>
   14514:	81 e0       	ldi	r24, 0x01	; 1
   14516:	8c 93       	st	X, r24
   14518:	bb cf       	rjmp	.-138    	; 0x14490 <__unpack_f+0xb4>

0001451a <__fpcmp_parts_f>:
   1451a:	ef 92       	push	r14
   1451c:	ff 92       	push	r15
   1451e:	0f 93       	push	r16
   14520:	1f 93       	push	r17
   14522:	cf 93       	push	r28
   14524:	df 93       	push	r29
   14526:	fc 01       	movw	r30, r24
   14528:	db 01       	movw	r26, r22
   1452a:	80 81       	ld	r24, Z
   1452c:	82 30       	cpi	r24, 0x02	; 2
   1452e:	50 f0       	brcs	.+20     	; 0x14544 <__fpcmp_parts_f+0x2a>
   14530:	9c 91       	ld	r25, X
   14532:	92 30       	cpi	r25, 0x02	; 2
   14534:	38 f0       	brcs	.+14     	; 0x14544 <__fpcmp_parts_f+0x2a>
   14536:	84 30       	cpi	r24, 0x04	; 4
   14538:	41 f4       	brne	.+16     	; 0x1454a <__fpcmp_parts_f+0x30>
   1453a:	94 30       	cpi	r25, 0x04	; 4
   1453c:	b1 f0       	breq	.+44     	; 0x1456a <__fpcmp_parts_f+0x50>
   1453e:	81 81       	ldd	r24, Z+1	; 0x01
   14540:	88 23       	and	r24, r24
   14542:	81 f4       	brne	.+32     	; 0x14564 <__fpcmp_parts_f+0x4a>
   14544:	61 e0       	ldi	r22, 0x01	; 1
   14546:	70 e0       	ldi	r23, 0x00	; 0
   14548:	4b c0       	rjmp	.+150    	; 0x145e0 <__fpcmp_parts_f+0xc6>
   1454a:	94 30       	cpi	r25, 0x04	; 4
   1454c:	e9 f1       	breq	.+122    	; 0x145c8 <__fpcmp_parts_f+0xae>
   1454e:	82 30       	cpi	r24, 0x02	; 2
   14550:	a1 f0       	breq	.+40     	; 0x1457a <__fpcmp_parts_f+0x60>
   14552:	92 30       	cpi	r25, 0x02	; 2
   14554:	a1 f3       	breq	.-24     	; 0x1453e <__fpcmp_parts_f+0x24>
   14556:	61 81       	ldd	r22, Z+1	; 0x01
   14558:	ed 01       	movw	r28, r26
   1455a:	89 81       	ldd	r24, Y+1	; 0x01
   1455c:	68 17       	cp	r22, r24
   1455e:	91 f0       	breq	.+36     	; 0x14584 <__fpcmp_parts_f+0x6a>
   14560:	66 23       	and	r22, r22
   14562:	81 f3       	breq	.-32     	; 0x14544 <__fpcmp_parts_f+0x2a>
   14564:	6f ef       	ldi	r22, 0xFF	; 255
   14566:	7f ef       	ldi	r23, 0xFF	; 255
   14568:	3b c0       	rjmp	.+118    	; 0x145e0 <__fpcmp_parts_f+0xc6>
   1456a:	eb 01       	movw	r28, r22
   1456c:	89 81       	ldd	r24, Y+1	; 0x01
   1456e:	68 2f       	mov	r22, r24
   14570:	77 27       	eor	r23, r23
   14572:	81 81       	ldd	r24, Z+1	; 0x01
   14574:	68 1b       	sub	r22, r24
   14576:	71 09       	sbc	r23, r1
   14578:	33 c0       	rjmp	.+102    	; 0x145e0 <__fpcmp_parts_f+0xc6>
   1457a:	92 30       	cpi	r25, 0x02	; 2
   1457c:	59 f5       	brne	.+86     	; 0x145d4 <__fpcmp_parts_f+0xba>
   1457e:	60 e0       	ldi	r22, 0x00	; 0
   14580:	70 e0       	ldi	r23, 0x00	; 0
   14582:	2e c0       	rjmp	.+92     	; 0x145e0 <__fpcmp_parts_f+0xc6>
   14584:	22 81       	ldd	r18, Z+2	; 0x02
   14586:	33 81       	ldd	r19, Z+3	; 0x03
   14588:	ed 01       	movw	r28, r26
   1458a:	8a 81       	ldd	r24, Y+2	; 0x02
   1458c:	9b 81       	ldd	r25, Y+3	; 0x03
   1458e:	82 17       	cp	r24, r18
   14590:	93 07       	cpc	r25, r19
   14592:	34 f3       	brlt	.-52     	; 0x14560 <__fpcmp_parts_f+0x46>
   14594:	28 17       	cp	r18, r24
   14596:	39 07       	cpc	r19, r25
   14598:	9c f0       	brlt	.+38     	; 0x145c0 <__fpcmp_parts_f+0xa6>
   1459a:	e4 80       	ldd	r14, Z+4	; 0x04
   1459c:	f5 80       	ldd	r15, Z+5	; 0x05
   1459e:	06 81       	ldd	r16, Z+6	; 0x06
   145a0:	17 81       	ldd	r17, Z+7	; 0x07
   145a2:	fd 01       	movw	r30, r26
   145a4:	24 81       	ldd	r18, Z+4	; 0x04
   145a6:	35 81       	ldd	r19, Z+5	; 0x05
   145a8:	46 81       	ldd	r20, Z+6	; 0x06
   145aa:	57 81       	ldd	r21, Z+7	; 0x07
   145ac:	2e 15       	cp	r18, r14
   145ae:	3f 05       	cpc	r19, r15
   145b0:	40 07       	cpc	r20, r16
   145b2:	51 07       	cpc	r21, r17
   145b4:	a8 f2       	brcs	.-86     	; 0x14560 <__fpcmp_parts_f+0x46>
   145b6:	e2 16       	cp	r14, r18
   145b8:	f3 06       	cpc	r15, r19
   145ba:	04 07       	cpc	r16, r20
   145bc:	15 07       	cpc	r17, r21
   145be:	f8 f6       	brcc	.-66     	; 0x1457e <__fpcmp_parts_f+0x64>
   145c0:	66 23       	and	r22, r22
   145c2:	09 f0       	breq	.+2      	; 0x145c6 <__fpcmp_parts_f+0xac>
   145c4:	bf cf       	rjmp	.-130    	; 0x14544 <__fpcmp_parts_f+0x2a>
   145c6:	ce cf       	rjmp	.-100    	; 0x14564 <__fpcmp_parts_f+0x4a>
   145c8:	fb 01       	movw	r30, r22
   145ca:	81 81       	ldd	r24, Z+1	; 0x01
   145cc:	88 23       	and	r24, r24
   145ce:	09 f0       	breq	.+2      	; 0x145d2 <__fpcmp_parts_f+0xb8>
   145d0:	b9 cf       	rjmp	.-142    	; 0x14544 <__fpcmp_parts_f+0x2a>
   145d2:	c8 cf       	rjmp	.-112    	; 0x14564 <__fpcmp_parts_f+0x4a>
   145d4:	eb 01       	movw	r28, r22
   145d6:	89 81       	ldd	r24, Y+1	; 0x01
   145d8:	88 23       	and	r24, r24
   145da:	09 f0       	breq	.+2      	; 0x145de <__fpcmp_parts_f+0xc4>
   145dc:	b3 cf       	rjmp	.-154    	; 0x14544 <__fpcmp_parts_f+0x2a>
   145de:	c2 cf       	rjmp	.-124    	; 0x14564 <__fpcmp_parts_f+0x4a>
   145e0:	cb 01       	movw	r24, r22
   145e2:	e6 e0       	ldi	r30, 0x06	; 6
   145e4:	cd b7       	in	r28, 0x3d	; 61
   145e6:	de b7       	in	r29, 0x3e	; 62
   145e8:	0c 94 e6 a3 	jmp	0x147cc	; 0x147cc <__epilogue_restores__+0x18>

000145ec <do_rand>:
   145ec:	af 92       	push	r10
   145ee:	bf 92       	push	r11
   145f0:	cf 92       	push	r12
   145f2:	df 92       	push	r13
   145f4:	ef 92       	push	r14
   145f6:	ff 92       	push	r15
   145f8:	0f 93       	push	r16
   145fa:	1f 93       	push	r17
   145fc:	cf 93       	push	r28
   145fe:	df 93       	push	r29
   14600:	ec 01       	movw	r28, r24
   14602:	e8 80       	ld	r14, Y
   14604:	f9 80       	ldd	r15, Y+1	; 0x01
   14606:	0a 81       	ldd	r16, Y+2	; 0x02
   14608:	1b 81       	ldd	r17, Y+3	; 0x03
   1460a:	c8 01       	movw	r24, r16
   1460c:	b7 01       	movw	r22, r14
   1460e:	2d e1       	ldi	r18, 0x1D	; 29
   14610:	33 ef       	ldi	r19, 0xF3	; 243
   14612:	41 e0       	ldi	r20, 0x01	; 1
   14614:	50 e0       	ldi	r21, 0x00	; 0
   14616:	0e 94 81 a3 	call	0x14702	; 0x14702 <__udivmodsi4>
   1461a:	27 ea       	ldi	r18, 0xA7	; 167
   1461c:	31 e4       	ldi	r19, 0x41	; 65
   1461e:	40 e0       	ldi	r20, 0x00	; 0
   14620:	50 e0       	ldi	r21, 0x00	; 0
   14622:	0e 94 13 a4 	call	0x14826	; 0x14826 <__mulsi3>
   14626:	5b 01       	movw	r10, r22
   14628:	6c 01       	movw	r12, r24
   1462a:	c8 01       	movw	r24, r16
   1462c:	b7 01       	movw	r22, r14
   1462e:	2d e1       	ldi	r18, 0x1D	; 29
   14630:	33 ef       	ldi	r19, 0xF3	; 243
   14632:	41 e0       	ldi	r20, 0x01	; 1
   14634:	50 e0       	ldi	r21, 0x00	; 0
   14636:	0e 94 81 a3 	call	0x14702	; 0x14702 <__udivmodsi4>
   1463a:	ca 01       	movw	r24, r20
   1463c:	b9 01       	movw	r22, r18
   1463e:	24 e1       	ldi	r18, 0x14	; 20
   14640:	3b e0       	ldi	r19, 0x0B	; 11
   14642:	40 e0       	ldi	r20, 0x00	; 0
   14644:	50 e0       	ldi	r21, 0x00	; 0
   14646:	0e 94 13 a4 	call	0x14826	; 0x14826 <__mulsi3>
   1464a:	a6 1a       	sub	r10, r22
   1464c:	b7 0a       	sbc	r11, r23
   1464e:	c8 0a       	sbc	r12, r24
   14650:	d9 0a       	sbc	r13, r25
   14652:	1a 14       	cp	r1, r10
   14654:	1b 04       	cpc	r1, r11
   14656:	1c 04       	cpc	r1, r12
   14658:	1d 04       	cpc	r1, r13
   1465a:	44 f0       	brlt	.+16     	; 0x1466c <do_rand+0x80>
   1465c:	8f ef       	ldi	r24, 0xFF	; 255
   1465e:	9f ef       	ldi	r25, 0xFF	; 255
   14660:	af ef       	ldi	r26, 0xFF	; 255
   14662:	bf e7       	ldi	r27, 0x7F	; 127
   14664:	a8 0e       	add	r10, r24
   14666:	b9 1e       	adc	r11, r25
   14668:	ca 1e       	adc	r12, r26
   1466a:	db 1e       	adc	r13, r27
   1466c:	a8 82       	st	Y, r10
   1466e:	b9 82       	std	Y+1, r11	; 0x01
   14670:	ca 82       	std	Y+2, r12	; 0x02
   14672:	db 82       	std	Y+3, r13	; 0x03
   14674:	c5 01       	movw	r24, r10
   14676:	9f 77       	andi	r25, 0x7F	; 127
   14678:	df 91       	pop	r29
   1467a:	cf 91       	pop	r28
   1467c:	1f 91       	pop	r17
   1467e:	0f 91       	pop	r16
   14680:	ff 90       	pop	r15
   14682:	ef 90       	pop	r14
   14684:	df 90       	pop	r13
   14686:	cf 90       	pop	r12
   14688:	bf 90       	pop	r11
   1468a:	af 90       	pop	r10
   1468c:	08 95       	ret

0001468e <rand_r>:
   1468e:	0e 94 f6 a2 	call	0x145ec	; 0x145ec <do_rand>
   14692:	08 95       	ret

00014694 <rand>:
   14694:	8a e7       	ldi	r24, 0x7A	; 122
   14696:	91 e0       	ldi	r25, 0x01	; 1
   14698:	0e 94 f6 a2 	call	0x145ec	; 0x145ec <do_rand>
   1469c:	08 95       	ret

0001469e <srand>:
   1469e:	aa 27       	eor	r26, r26
   146a0:	bb 27       	eor	r27, r27
   146a2:	80 93 7a 01 	sts	0x017A, r24
   146a6:	90 93 7b 01 	sts	0x017B, r25
   146aa:	a0 93 7c 01 	sts	0x017C, r26
   146ae:	b0 93 7d 01 	sts	0x017D, r27
   146b2:	08 95       	ret

000146b4 <__udivmodhi4>:
   146b4:	aa 1b       	sub	r26, r26
   146b6:	bb 1b       	sub	r27, r27
   146b8:	51 e1       	ldi	r21, 0x11	; 17
   146ba:	07 c0       	rjmp	.+14     	; 0x146ca <__udivmodhi4_ep>

000146bc <__udivmodhi4_loop>:
   146bc:	aa 1f       	adc	r26, r26
   146be:	bb 1f       	adc	r27, r27
   146c0:	a6 17       	cp	r26, r22
   146c2:	b7 07       	cpc	r27, r23
   146c4:	10 f0       	brcs	.+4      	; 0x146ca <__udivmodhi4_ep>
   146c6:	a6 1b       	sub	r26, r22
   146c8:	b7 0b       	sbc	r27, r23

000146ca <__udivmodhi4_ep>:
   146ca:	88 1f       	adc	r24, r24
   146cc:	99 1f       	adc	r25, r25
   146ce:	5a 95       	dec	r21
   146d0:	a9 f7       	brne	.-22     	; 0x146bc <__udivmodhi4_loop>
   146d2:	80 95       	com	r24
   146d4:	90 95       	com	r25
   146d6:	bc 01       	movw	r22, r24
   146d8:	cd 01       	movw	r24, r26
   146da:	08 95       	ret

000146dc <__divmodhi4>:
   146dc:	97 fb       	bst	r25, 7
   146de:	09 2e       	mov	r0, r25
   146e0:	07 26       	eor	r0, r23
   146e2:	0a d0       	rcall	.+20     	; 0x146f8 <__divmodhi4_neg1>
   146e4:	77 fd       	sbrc	r23, 7
   146e6:	04 d0       	rcall	.+8      	; 0x146f0 <__divmodhi4_neg2>
   146e8:	e5 df       	rcall	.-54     	; 0x146b4 <__udivmodhi4>
   146ea:	06 d0       	rcall	.+12     	; 0x146f8 <__divmodhi4_neg1>
   146ec:	00 20       	and	r0, r0
   146ee:	1a f4       	brpl	.+6      	; 0x146f6 <__divmodhi4_exit>

000146f0 <__divmodhi4_neg2>:
   146f0:	70 95       	com	r23
   146f2:	61 95       	neg	r22
   146f4:	7f 4f       	sbci	r23, 0xFF	; 255

000146f6 <__divmodhi4_exit>:
   146f6:	08 95       	ret

000146f8 <__divmodhi4_neg1>:
   146f8:	f6 f7       	brtc	.-4      	; 0x146f6 <__divmodhi4_exit>
   146fa:	90 95       	com	r25
   146fc:	81 95       	neg	r24
   146fe:	9f 4f       	sbci	r25, 0xFF	; 255
   14700:	08 95       	ret

00014702 <__udivmodsi4>:
   14702:	a1 e2       	ldi	r26, 0x21	; 33
   14704:	1a 2e       	mov	r1, r26
   14706:	aa 1b       	sub	r26, r26
   14708:	bb 1b       	sub	r27, r27
   1470a:	fd 01       	movw	r30, r26
   1470c:	0d c0       	rjmp	.+26     	; 0x14728 <__udivmodsi4_ep>

0001470e <__udivmodsi4_loop>:
   1470e:	aa 1f       	adc	r26, r26
   14710:	bb 1f       	adc	r27, r27
   14712:	ee 1f       	adc	r30, r30
   14714:	ff 1f       	adc	r31, r31
   14716:	a2 17       	cp	r26, r18
   14718:	b3 07       	cpc	r27, r19
   1471a:	e4 07       	cpc	r30, r20
   1471c:	f5 07       	cpc	r31, r21
   1471e:	20 f0       	brcs	.+8      	; 0x14728 <__udivmodsi4_ep>
   14720:	a2 1b       	sub	r26, r18
   14722:	b3 0b       	sbc	r27, r19
   14724:	e4 0b       	sbc	r30, r20
   14726:	f5 0b       	sbc	r31, r21

00014728 <__udivmodsi4_ep>:
   14728:	66 1f       	adc	r22, r22
   1472a:	77 1f       	adc	r23, r23
   1472c:	88 1f       	adc	r24, r24
   1472e:	99 1f       	adc	r25, r25
   14730:	1a 94       	dec	r1
   14732:	69 f7       	brne	.-38     	; 0x1470e <__udivmodsi4_loop>
   14734:	60 95       	com	r22
   14736:	70 95       	com	r23
   14738:	80 95       	com	r24
   1473a:	90 95       	com	r25
   1473c:	9b 01       	movw	r18, r22
   1473e:	ac 01       	movw	r20, r24
   14740:	bd 01       	movw	r22, r26
   14742:	cf 01       	movw	r24, r30
   14744:	08 95       	ret

00014746 <__divmodsi4>:
   14746:	97 fb       	bst	r25, 7
   14748:	09 2e       	mov	r0, r25
   1474a:	05 26       	eor	r0, r21
   1474c:	0e d0       	rcall	.+28     	; 0x1476a <__divmodsi4_neg1>
   1474e:	57 fd       	sbrc	r21, 7
   14750:	04 d0       	rcall	.+8      	; 0x1475a <__divmodsi4_neg2>
   14752:	d7 df       	rcall	.-82     	; 0x14702 <__udivmodsi4>
   14754:	0a d0       	rcall	.+20     	; 0x1476a <__divmodsi4_neg1>
   14756:	00 1c       	adc	r0, r0
   14758:	38 f4       	brcc	.+14     	; 0x14768 <__divmodsi4_exit>

0001475a <__divmodsi4_neg2>:
   1475a:	50 95       	com	r21
   1475c:	40 95       	com	r20
   1475e:	30 95       	com	r19
   14760:	21 95       	neg	r18
   14762:	3f 4f       	sbci	r19, 0xFF	; 255
   14764:	4f 4f       	sbci	r20, 0xFF	; 255
   14766:	5f 4f       	sbci	r21, 0xFF	; 255

00014768 <__divmodsi4_exit>:
   14768:	08 95       	ret

0001476a <__divmodsi4_neg1>:
   1476a:	f6 f7       	brtc	.-4      	; 0x14768 <__divmodsi4_exit>
   1476c:	90 95       	com	r25
   1476e:	80 95       	com	r24
   14770:	70 95       	com	r23
   14772:	61 95       	neg	r22
   14774:	7f 4f       	sbci	r23, 0xFF	; 255
   14776:	8f 4f       	sbci	r24, 0xFF	; 255
   14778:	9f 4f       	sbci	r25, 0xFF	; 255
   1477a:	08 95       	ret

0001477c <__prologue_saves__>:
   1477c:	2f 92       	push	r2
   1477e:	3f 92       	push	r3
   14780:	4f 92       	push	r4
   14782:	5f 92       	push	r5
   14784:	6f 92       	push	r6
   14786:	7f 92       	push	r7
   14788:	8f 92       	push	r8
   1478a:	9f 92       	push	r9
   1478c:	af 92       	push	r10
   1478e:	bf 92       	push	r11
   14790:	cf 92       	push	r12
   14792:	df 92       	push	r13
   14794:	ef 92       	push	r14
   14796:	ff 92       	push	r15
   14798:	0f 93       	push	r16
   1479a:	1f 93       	push	r17
   1479c:	cf 93       	push	r28
   1479e:	df 93       	push	r29
   147a0:	cd b7       	in	r28, 0x3d	; 61
   147a2:	de b7       	in	r29, 0x3e	; 62
   147a4:	ca 1b       	sub	r28, r26
   147a6:	db 0b       	sbc	r29, r27
   147a8:	0f b6       	in	r0, 0x3f	; 63
   147aa:	f8 94       	cli
   147ac:	de bf       	out	0x3e, r29	; 62
   147ae:	0f be       	out	0x3f, r0	; 63
   147b0:	cd bf       	out	0x3d, r28	; 61
   147b2:	09 94       	ijmp

000147b4 <__epilogue_restores__>:
   147b4:	2a 88       	ldd	r2, Y+18	; 0x12
   147b6:	39 88       	ldd	r3, Y+17	; 0x11
   147b8:	48 88       	ldd	r4, Y+16	; 0x10
   147ba:	5f 84       	ldd	r5, Y+15	; 0x0f
   147bc:	6e 84       	ldd	r6, Y+14	; 0x0e
   147be:	7d 84       	ldd	r7, Y+13	; 0x0d
   147c0:	8c 84       	ldd	r8, Y+12	; 0x0c
   147c2:	9b 84       	ldd	r9, Y+11	; 0x0b
   147c4:	aa 84       	ldd	r10, Y+10	; 0x0a
   147c6:	b9 84       	ldd	r11, Y+9	; 0x09
   147c8:	c8 84       	ldd	r12, Y+8	; 0x08
   147ca:	df 80       	ldd	r13, Y+7	; 0x07
   147cc:	ee 80       	ldd	r14, Y+6	; 0x06
   147ce:	fd 80       	ldd	r15, Y+5	; 0x05
   147d0:	0c 81       	ldd	r16, Y+4	; 0x04
   147d2:	1b 81       	ldd	r17, Y+3	; 0x03
   147d4:	aa 81       	ldd	r26, Y+2	; 0x02
   147d6:	b9 81       	ldd	r27, Y+1	; 0x01
   147d8:	ce 0f       	add	r28, r30
   147da:	d1 1d       	adc	r29, r1
   147dc:	0f b6       	in	r0, 0x3f	; 63
   147de:	f8 94       	cli
   147e0:	de bf       	out	0x3e, r29	; 62
   147e2:	0f be       	out	0x3f, r0	; 63
   147e4:	cd bf       	out	0x3d, r28	; 61
   147e6:	ed 01       	movw	r28, r26
   147e8:	08 95       	ret

000147ea <__eeprom_read_byte_1C1D1E>:
   147ea:	e1 99       	sbic	0x1c, 1	; 28
   147ec:	fe cf       	rjmp	.-4      	; 0x147ea <__eeprom_read_byte_1C1D1E>
   147ee:	bf bb       	out	0x1f, r27	; 31
   147f0:	ae bb       	out	0x1e, r26	; 30
   147f2:	e0 9a       	sbi	0x1c, 0	; 28
   147f4:	11 96       	adiw	r26, 0x01	; 1
   147f6:	0d b2       	in	r0, 0x1d	; 29
   147f8:	08 95       	ret

000147fa <__eeprom_read_word_1C1D1E>:
   147fa:	f7 df       	rcall	.-18     	; 0x147ea <__eeprom_read_byte_1C1D1E>
   147fc:	e0 2d       	mov	r30, r0
   147fe:	f5 df       	rcall	.-22     	; 0x147ea <__eeprom_read_byte_1C1D1E>
   14800:	f0 2d       	mov	r31, r0
   14802:	08 95       	ret

00014804 <__eeprom_write_byte_1C1D1E>:
   14804:	e1 99       	sbic	0x1c, 1	; 28
   14806:	fe cf       	rjmp	.-4      	; 0x14804 <__eeprom_write_byte_1C1D1E>
   14808:	bf bb       	out	0x1f, r27	; 31
   1480a:	ae bb       	out	0x1e, r26	; 30
   1480c:	0d ba       	out	0x1d, r0	; 29
   1480e:	11 96       	adiw	r26, 0x01	; 1
   14810:	0f b6       	in	r0, 0x3f	; 63
   14812:	f8 94       	cli
   14814:	e2 9a       	sbi	0x1c, 2	; 28
   14816:	e1 9a       	sbi	0x1c, 1	; 28
   14818:	0f be       	out	0x3f, r0	; 63
   1481a:	08 95       	ret

0001481c <__eeprom_write_word_1C1D1E>:
   1481c:	f3 df       	rcall	.-26     	; 0x14804 <__eeprom_write_byte_1C1D1E>
   1481e:	01 2c       	mov	r0, r1
   14820:	f1 df       	rcall	.-30     	; 0x14804 <__eeprom_write_byte_1C1D1E>
   14822:	11 24       	eor	r1, r1
   14824:	08 95       	ret

00014826 <__mulsi3>:
   14826:	62 9f       	mul	r22, r18
   14828:	d0 01       	movw	r26, r0
   1482a:	73 9f       	mul	r23, r19
   1482c:	f0 01       	movw	r30, r0
   1482e:	82 9f       	mul	r24, r18
   14830:	e0 0d       	add	r30, r0
   14832:	f1 1d       	adc	r31, r1
   14834:	64 9f       	mul	r22, r20
   14836:	e0 0d       	add	r30, r0
   14838:	f1 1d       	adc	r31, r1
   1483a:	92 9f       	mul	r25, r18
   1483c:	f0 0d       	add	r31, r0
   1483e:	83 9f       	mul	r24, r19
   14840:	f0 0d       	add	r31, r0
   14842:	74 9f       	mul	r23, r20
   14844:	f0 0d       	add	r31, r0
   14846:	65 9f       	mul	r22, r21
   14848:	f0 0d       	add	r31, r0
   1484a:	99 27       	eor	r25, r25
   1484c:	72 9f       	mul	r23, r18
   1484e:	b0 0d       	add	r27, r0
   14850:	e1 1d       	adc	r30, r1
   14852:	f9 1f       	adc	r31, r25
   14854:	63 9f       	mul	r22, r19
   14856:	b0 0d       	add	r27, r0
   14858:	e1 1d       	adc	r30, r1
   1485a:	f9 1f       	adc	r31, r25
   1485c:	bd 01       	movw	r22, r26
   1485e:	cf 01       	movw	r24, r30
   14860:	11 24       	eor	r1, r1
   14862:	08 95       	ret
Disassembly of section .bootloader:

0001e000 <ProgramSetPage>:




void  __attribute__(( section( ".bootloader" ))) ProgramSetPage( uint16_t pageno ) {
   1e000:	cf 93       	push	r28
   1e002:	df 93       	push	r29
   1e004:	cd b7       	in	r28, 0x3d	; 61
   1e006:	de b7       	in	r29, 0x3e	; 62
   1e008:	24 97       	sbiw	r28, 0x04	; 4
   1e00a:	0f b6       	in	r0, 0x3f	; 63
   1e00c:	f8 94       	cli
   1e00e:	de bf       	out	0x3e, r29	; 62
   1e010:	0f be       	out	0x3f, r0	; 63
   1e012:	cd bf       	out	0x3d, r28	; 61
   1e014:	9c 83       	std	Y+4, r25	; 0x04
   1e016:	8b 83       	std	Y+3, r24	; 0x03
   int i;
   for ( i = 0; i < 512; i ++ ) {
   1e018:	1a 82       	std	Y+2, r1	; 0x02
   1e01a:	19 82       	std	Y+1, r1	; 0x01
   1e01c:	0b c0       	rjmp	.+22     	; 0x1e034 <ProgramSetPage+0x34>
      pagebuffer[ i ] = 0;
   1e01e:	89 81       	ldd	r24, Y+1	; 0x01
   1e020:	9a 81       	ldd	r25, Y+2	; 0x02
   1e022:	fc 01       	movw	r30, r24
   1e024:	ea 53       	subi	r30, 0x3A	; 58
   1e026:	fe 4f       	sbci	r31, 0xFE	; 254
   1e028:	10 82       	st	Z, r1
   1e02a:	89 81       	ldd	r24, Y+1	; 0x01
   1e02c:	9a 81       	ldd	r25, Y+2	; 0x02
   1e02e:	01 96       	adiw	r24, 0x01	; 1
   1e030:	9a 83       	std	Y+2, r25	; 0x02
   1e032:	89 83       	std	Y+1, r24	; 0x01
   1e034:	89 81       	ldd	r24, Y+1	; 0x01
   1e036:	9a 81       	ldd	r25, Y+2	; 0x02
   1e038:	22 e0       	ldi	r18, 0x02	; 2
   1e03a:	80 30       	cpi	r24, 0x00	; 0
   1e03c:	92 07       	cpc	r25, r18
   1e03e:	7c f3       	brlt	.-34     	; 0x1e01e <ProgramSetPage+0x1e>
   } 
   pageindex = pageno;
   1e040:	8b 81       	ldd	r24, Y+3	; 0x03
   1e042:	9c 81       	ldd	r25, Y+4	; 0x04
   1e044:	90 93 c5 01 	sts	0x01C5, r25
   1e048:	80 93 c4 01 	sts	0x01C4, r24
   currentpageindex = 0;
   1e04c:	10 92 c7 03 	sts	0x03C7, r1
   1e050:	10 92 c6 03 	sts	0x03C6, r1
   1e054:	24 96       	adiw	r28, 0x04	; 4
   1e056:	0f b6       	in	r0, 0x3f	; 63
   1e058:	f8 94       	cli
   1e05a:	de bf       	out	0x3e, r29	; 62
   1e05c:	0f be       	out	0x3f, r0	; 63
   1e05e:	cd bf       	out	0x3d, r28	; 61
   1e060:	df 91       	pop	r29
   1e062:	cf 91       	pop	r28
   1e064:	08 95       	ret

0001e066 <ProgramString>:
}

//-------------------------------------------------------------------------
void   __attribute__(( section( ".bootloader" ))) ProgramString( char *buffer ){
   1e066:	cf 93       	push	r28
   1e068:	df 93       	push	r29
   1e06a:	cd b7       	in	r28, 0x3d	; 61
   1e06c:	de b7       	in	r29, 0x3e	; 62
   1e06e:	24 97       	sbiw	r28, 0x04	; 4
   1e070:	0f b6       	in	r0, 0x3f	; 63
   1e072:	f8 94       	cli
   1e074:	de bf       	out	0x3e, r29	; 62
   1e076:	0f be       	out	0x3f, r0	; 63
   1e078:	cd bf       	out	0x3d, r28	; 61
   1e07a:	9c 83       	std	Y+4, r25	; 0x04
   1e07c:	8b 83       	std	Y+3, r24	; 0x03
   int i;
   for ( i = 0; i < 16; i ++ ) {
   1e07e:	1a 82       	std	Y+2, r1	; 0x02
   1e080:	19 82       	std	Y+1, r1	; 0x01
   1e082:	1b c0       	rjmp	.+54     	; 0x1e0ba <ProgramString+0x54>
      pagebuffer[ currentpageindex + i ] = buffer[ i ];
   1e084:	20 91 c6 03 	lds	r18, 0x03C6
   1e088:	30 91 c7 03 	lds	r19, 0x03C7
   1e08c:	89 81       	ldd	r24, Y+1	; 0x01
   1e08e:	9a 81       	ldd	r25, Y+2	; 0x02
   1e090:	a9 01       	movw	r20, r18
   1e092:	48 0f       	add	r20, r24
   1e094:	59 1f       	adc	r21, r25
   1e096:	89 81       	ldd	r24, Y+1	; 0x01
   1e098:	9a 81       	ldd	r25, Y+2	; 0x02
   1e09a:	9c 01       	movw	r18, r24
   1e09c:	8b 81       	ldd	r24, Y+3	; 0x03
   1e09e:	9c 81       	ldd	r25, Y+4	; 0x04
   1e0a0:	f9 01       	movw	r30, r18
   1e0a2:	e8 0f       	add	r30, r24
   1e0a4:	f9 1f       	adc	r31, r25
   1e0a6:	80 81       	ld	r24, Z
   1e0a8:	fa 01       	movw	r30, r20
   1e0aa:	ea 53       	subi	r30, 0x3A	; 58
   1e0ac:	fe 4f       	sbci	r31, 0xFE	; 254
   1e0ae:	80 83       	st	Z, r24
   1e0b0:	89 81       	ldd	r24, Y+1	; 0x01
   1e0b2:	9a 81       	ldd	r25, Y+2	; 0x02
   1e0b4:	01 96       	adiw	r24, 0x01	; 1
   1e0b6:	9a 83       	std	Y+2, r25	; 0x02
   1e0b8:	89 83       	std	Y+1, r24	; 0x01
   1e0ba:	89 81       	ldd	r24, Y+1	; 0x01
   1e0bc:	9a 81       	ldd	r25, Y+2	; 0x02
   1e0be:	80 31       	cpi	r24, 0x10	; 16
   1e0c0:	91 05       	cpc	r25, r1
   1e0c2:	04 f3       	brlt	.-64     	; 0x1e084 <ProgramString+0x1e>
   }
   currentpageindex += 16;
   1e0c4:	80 91 c6 03 	lds	r24, 0x03C6
   1e0c8:	90 91 c7 03 	lds	r25, 0x03C7
   1e0cc:	40 96       	adiw	r24, 0x10	; 16
   1e0ce:	90 93 c7 03 	sts	0x03C7, r25
   1e0d2:	80 93 c6 03 	sts	0x03C6, r24
   if ( currentpageindex == 512 ) {
   1e0d6:	80 91 c6 03 	lds	r24, 0x03C6
   1e0da:	90 91 c7 03 	lds	r25, 0x03C7
   1e0de:	22 e0       	ldi	r18, 0x02	; 2
   1e0e0:	80 30       	cpi	r24, 0x00	; 0
   1e0e2:	92 07       	cpc	r25, r18
   1e0e4:	41 f4       	brne	.+16     	; 0x1e0f6 <ProgramString+0x90>
      reprogramall( pagebuffer );
   1e0e6:	86 ec       	ldi	r24, 0xC6	; 198
   1e0e8:	91 e0       	ldi	r25, 0x01	; 1
   1e0ea:	0e 94 d9 f0 	call	0x1e1b2	; 0x1e1b2 <reprogramall>
      currentpageindex = 0;
   1e0ee:	10 92 c7 03 	sts	0x03C7, r1
   1e0f2:	10 92 c6 03 	sts	0x03C6, r1
   1e0f6:	24 96       	adiw	r28, 0x04	; 4
   1e0f8:	0f b6       	in	r0, 0x3f	; 63
   1e0fa:	f8 94       	cli
   1e0fc:	de bf       	out	0x3e, r29	; 62
   1e0fe:	0f be       	out	0x3f, r0	; 63
   1e100:	cd bf       	out	0x3d, r28	; 61
   1e102:	df 91       	pop	r29
   1e104:	cf 91       	pop	r28
   1e106:	08 95       	ret

0001e108 <ProgramRemains>:
   }
}

//-------------------------------------------------------------------------
void  __attribute__(( section( ".bootloader" ))) ProgramRemains() {
   1e108:	cf 93       	push	r28
   1e10a:	df 93       	push	r29
   1e10c:	cd b7       	in	r28, 0x3d	; 61
   1e10e:	de b7       	in	r29, 0x3e	; 62

    if (currentpageindex !=0)
   1e110:	80 91 c6 03 	lds	r24, 0x03C6
   1e114:	90 91 c7 03 	lds	r25, 0x03C7
   1e118:	00 97       	sbiw	r24, 0x00	; 0
   1e11a:	21 f0       	breq	.+8      	; 0x1e124 <ProgramRemains+0x1c>
		reprogramall( pagebuffer );
   1e11c:	86 ec       	ldi	r24, 0xC6	; 198
   1e11e:	91 e0       	ldi	r25, 0x01	; 1
   1e120:	0e 94 d9 f0 	call	0x1e1b2	; 0x1e1b2 <reprogramall>
   1e124:	df 91       	pop	r29
   1e126:	cf 91       	pop	r28
   1e128:	08 95       	ret

0001e12a <ProgramLastString>:
}

//-------------------------------------------------------------------------
void  __attribute__(( section( ".bootloader" ))) ProgramLastString( char *buffer, uint8_t length ) {
   1e12a:	cf 93       	push	r28
   1e12c:	df 93       	push	r29
   1e12e:	cd b7       	in	r28, 0x3d	; 61
   1e130:	de b7       	in	r29, 0x3e	; 62
   1e132:	25 97       	sbiw	r28, 0x05	; 5
   1e134:	0f b6       	in	r0, 0x3f	; 63
   1e136:	f8 94       	cli
   1e138:	de bf       	out	0x3e, r29	; 62
   1e13a:	0f be       	out	0x3f, r0	; 63
   1e13c:	cd bf       	out	0x3d, r28	; 61
   1e13e:	9c 83       	std	Y+4, r25	; 0x04
   1e140:	8b 83       	std	Y+3, r24	; 0x03
   1e142:	6d 83       	std	Y+5, r22	; 0x05
   int i;
   for ( i = 0; i < length; i ++ ) {
   1e144:	1a 82       	std	Y+2, r1	; 0x02
   1e146:	19 82       	std	Y+1, r1	; 0x01
   1e148:	1b c0       	rjmp	.+54     	; 0x1e180 <ProgramLastString+0x56>
      pagebuffer[ currentpageindex + i ] = buffer[ i ];
   1e14a:	20 91 c6 03 	lds	r18, 0x03C6
   1e14e:	30 91 c7 03 	lds	r19, 0x03C7
   1e152:	89 81       	ldd	r24, Y+1	; 0x01
   1e154:	9a 81       	ldd	r25, Y+2	; 0x02
   1e156:	a9 01       	movw	r20, r18
   1e158:	48 0f       	add	r20, r24
   1e15a:	59 1f       	adc	r21, r25
   1e15c:	89 81       	ldd	r24, Y+1	; 0x01
   1e15e:	9a 81       	ldd	r25, Y+2	; 0x02
   1e160:	9c 01       	movw	r18, r24
   1e162:	8b 81       	ldd	r24, Y+3	; 0x03
   1e164:	9c 81       	ldd	r25, Y+4	; 0x04
   1e166:	f9 01       	movw	r30, r18
   1e168:	e8 0f       	add	r30, r24
   1e16a:	f9 1f       	adc	r31, r25
   1e16c:	80 81       	ld	r24, Z
   1e16e:	fa 01       	movw	r30, r20
   1e170:	ea 53       	subi	r30, 0x3A	; 58
   1e172:	fe 4f       	sbci	r31, 0xFE	; 254
   1e174:	80 83       	st	Z, r24
   1e176:	89 81       	ldd	r24, Y+1	; 0x01
   1e178:	9a 81       	ldd	r25, Y+2	; 0x02
   1e17a:	01 96       	adiw	r24, 0x01	; 1
   1e17c:	9a 83       	std	Y+2, r25	; 0x02
   1e17e:	89 83       	std	Y+1, r24	; 0x01
   1e180:	8d 81       	ldd	r24, Y+5	; 0x05
   1e182:	28 2f       	mov	r18, r24
   1e184:	33 27       	eor	r19, r19
   1e186:	89 81       	ldd	r24, Y+1	; 0x01
   1e188:	9a 81       	ldd	r25, Y+2	; 0x02
   1e18a:	82 17       	cp	r24, r18
   1e18c:	93 07       	cpc	r25, r19
   1e18e:	ec f2       	brlt	.-70     	; 0x1e14a <ProgramLastString+0x20>
   } 
   reprogramall( pagebuffer );
   1e190:	86 ec       	ldi	r24, 0xC6	; 198
   1e192:	91 e0       	ldi	r25, 0x01	; 1
   1e194:	0e 94 d9 f0 	call	0x1e1b2	; 0x1e1b2 <reprogramall>
   currentpageindex = 0;
   1e198:	10 92 c7 03 	sts	0x03C7, r1
   1e19c:	10 92 c6 03 	sts	0x03C6, r1
   1e1a0:	25 96       	adiw	r28, 0x05	; 5
   1e1a2:	0f b6       	in	r0, 0x3f	; 63
   1e1a4:	f8 94       	cli
   1e1a6:	de bf       	out	0x3e, r29	; 62
   1e1a8:	0f be       	out	0x3f, r0	; 63
   1e1aa:	cd bf       	out	0x3d, r28	; 61
   1e1ac:	df 91       	pop	r29
   1e1ae:	cf 91       	pop	r28
   1e1b0:	08 95       	ret

0001e1b2 <reprogramall>:
}

//-------------------------------------------------------------------------
int __attribute__(( section( ".bootloader" ))) reprogramall( unsigned char *program )  {
   1e1b2:	cf 93       	push	r28
   1e1b4:	df 93       	push	r29
   1e1b6:	cd b7       	in	r28, 0x3d	; 61
   1e1b8:	de b7       	in	r29, 0x3e	; 62
   1e1ba:	2c 97       	sbiw	r28, 0x0c	; 12
   1e1bc:	0f b6       	in	r0, 0x3f	; 63
   1e1be:	f8 94       	cli
   1e1c0:	de bf       	out	0x3e, r29	; 62
   1e1c2:	0f be       	out	0x3f, r0	; 63
   1e1c4:	cd bf       	out	0x3d, r28	; 61
   1e1c6:	9c 87       	std	Y+12, r25	; 0x0c
   1e1c8:	8b 87       	std	Y+11, r24	; 0x0b
   //unsigned char buffer[256];
   unsigned char a, b;
   int j;
   int high, low, all;
   for ( j = 0; j < 256; j ++ )
   1e1ca:	18 86       	std	Y+8, r1	; 0x08
   1e1cc:	1f 82       	std	Y+7, r1	; 0x07
   1e1ce:	59 c0       	rjmp	.+178    	; 0x1e282 <reprogramall+0xd0>
    {
      a = program[ j *2 ];
   1e1d0:	8f 81       	ldd	r24, Y+7	; 0x07
   1e1d2:	98 85       	ldd	r25, Y+8	; 0x08
   1e1d4:	88 0f       	add	r24, r24
   1e1d6:	99 1f       	adc	r25, r25
   1e1d8:	9c 01       	movw	r18, r24
   1e1da:	8b 85       	ldd	r24, Y+11	; 0x0b
   1e1dc:	9c 85       	ldd	r25, Y+12	; 0x0c
   1e1de:	f9 01       	movw	r30, r18
   1e1e0:	e8 0f       	add	r30, r24
   1e1e2:	f9 1f       	adc	r31, r25
   1e1e4:	80 81       	ld	r24, Z
   1e1e6:	8a 87       	std	Y+10, r24	; 0x0a
      b = program[ j *2+1 ];
   1e1e8:	8f 81       	ldd	r24, Y+7	; 0x07
   1e1ea:	98 85       	ldd	r25, Y+8	; 0x08
   1e1ec:	88 0f       	add	r24, r24
   1e1ee:	99 1f       	adc	r25, r25
   1e1f0:	9c 01       	movw	r18, r24
   1e1f2:	8b 85       	ldd	r24, Y+11	; 0x0b
   1e1f4:	9c 85       	ldd	r25, Y+12	; 0x0c
   1e1f6:	82 0f       	add	r24, r18
   1e1f8:	93 1f       	adc	r25, r19
   1e1fa:	fc 01       	movw	r30, r24
   1e1fc:	31 96       	adiw	r30, 0x01	; 1
   1e1fe:	80 81       	ld	r24, Z
   1e200:	89 87       	std	Y+9, r24	; 0x09
      if (( a >= '0' ) && ( a <= '9' )) {
   1e202:	8a 85       	ldd	r24, Y+10	; 0x0a
   1e204:	80 33       	cpi	r24, 0x30	; 48
   1e206:	48 f0       	brcs	.+18     	; 0x1e21a <reprogramall+0x68>
   1e208:	8a 85       	ldd	r24, Y+10	; 0x0a
   1e20a:	8a 33       	cpi	r24, 0x3A	; 58
   1e20c:	30 f4       	brcc	.+12     	; 0x1e21a <reprogramall+0x68>
         high = a - '0';
   1e20e:	8a 85       	ldd	r24, Y+10	; 0x0a
   1e210:	99 27       	eor	r25, r25
   1e212:	c0 97       	sbiw	r24, 0x30	; 48
   1e214:	9e 83       	std	Y+6, r25	; 0x06
   1e216:	8d 83       	std	Y+5, r24	; 0x05
   1e218:	05 c0       	rjmp	.+10     	; 0x1e224 <reprogramall+0x72>
      } else {
         high = a - 'A' + 10;
   1e21a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1e21c:	99 27       	eor	r25, r25
   1e21e:	c7 97       	sbiw	r24, 0x37	; 55
   1e220:	9e 83       	std	Y+6, r25	; 0x06
   1e222:	8d 83       	std	Y+5, r24	; 0x05
      } 
      if (( b >= '0' ) && ( b <= '9' )) {
   1e224:	89 85       	ldd	r24, Y+9	; 0x09
   1e226:	80 33       	cpi	r24, 0x30	; 48
   1e228:	48 f0       	brcs	.+18     	; 0x1e23c <reprogramall+0x8a>
   1e22a:	89 85       	ldd	r24, Y+9	; 0x09
   1e22c:	8a 33       	cpi	r24, 0x3A	; 58
   1e22e:	30 f4       	brcc	.+12     	; 0x1e23c <reprogramall+0x8a>
         low = b - '0';
   1e230:	89 85       	ldd	r24, Y+9	; 0x09
   1e232:	99 27       	eor	r25, r25
   1e234:	c0 97       	sbiw	r24, 0x30	; 48
   1e236:	9c 83       	std	Y+4, r25	; 0x04
   1e238:	8b 83       	std	Y+3, r24	; 0x03
   1e23a:	05 c0       	rjmp	.+10     	; 0x1e246 <reprogramall+0x94>
      } else {
         low = b - 'A' + 10;
   1e23c:	89 85       	ldd	r24, Y+9	; 0x09
   1e23e:	99 27       	eor	r25, r25
   1e240:	c7 97       	sbiw	r24, 0x37	; 55
   1e242:	9c 83       	std	Y+4, r25	; 0x04
   1e244:	8b 83       	std	Y+3, r24	; 0x03
      } all = high * 16+low;
   1e246:	8d 81       	ldd	r24, Y+5	; 0x05
   1e248:	9e 81       	ldd	r25, Y+6	; 0x06
   1e24a:	9c 01       	movw	r18, r24
   1e24c:	22 95       	swap	r18
   1e24e:	32 95       	swap	r19
   1e250:	30 7f       	andi	r19, 0xF0	; 240
   1e252:	32 27       	eor	r19, r18
   1e254:	20 7f       	andi	r18, 0xF0	; 240
   1e256:	32 27       	eor	r19, r18
   1e258:	8b 81       	ldd	r24, Y+3	; 0x03
   1e25a:	9c 81       	ldd	r25, Y+4	; 0x04
   1e25c:	82 0f       	add	r24, r18
   1e25e:	93 1f       	adc	r25, r19
   1e260:	9a 83       	std	Y+2, r25	; 0x02
   1e262:	89 83       	std	Y+1, r24	; 0x01
      //This might introduce bugs.
      program[ j ] = ( unsigned char )all;
   1e264:	8f 81       	ldd	r24, Y+7	; 0x07
   1e266:	98 85       	ldd	r25, Y+8	; 0x08
   1e268:	9c 01       	movw	r18, r24
   1e26a:	8b 85       	ldd	r24, Y+11	; 0x0b
   1e26c:	9c 85       	ldd	r25, Y+12	; 0x0c
   1e26e:	f9 01       	movw	r30, r18
   1e270:	e8 0f       	add	r30, r24
   1e272:	f9 1f       	adc	r31, r25
   1e274:	89 81       	ldd	r24, Y+1	; 0x01
   1e276:	80 83       	st	Z, r24
   1e278:	8f 81       	ldd	r24, Y+7	; 0x07
   1e27a:	98 85       	ldd	r25, Y+8	; 0x08
   1e27c:	01 96       	adiw	r24, 0x01	; 1
   1e27e:	98 87       	std	Y+8, r25	; 0x08
   1e280:	8f 83       	std	Y+7, r24	; 0x07
   1e282:	8f 81       	ldd	r24, Y+7	; 0x07
   1e284:	98 85       	ldd	r25, Y+8	; 0x08
   1e286:	8f 3f       	cpi	r24, 0xFF	; 255
   1e288:	91 05       	cpc	r25, r1
   1e28a:	09 f0       	breq	.+2      	; 0x1e28e <reprogramall+0xdc>
   1e28c:	0c f4       	brge	.+2      	; 0x1e290 <reprogramall+0xde>
   1e28e:	a0 cf       	rjmp	.-192    	; 0x1e1d0 <reprogramall+0x1e>
   }
   reprogram( program, pageindex );
   1e290:	80 91 c4 01 	lds	r24, 0x01C4
   1e294:	90 91 c5 01 	lds	r25, 0x01C5
   1e298:	2b 85       	ldd	r18, Y+11	; 0x0b
   1e29a:	3c 85       	ldd	r19, Y+12	; 0x0c
   1e29c:	bc 01       	movw	r22, r24
   1e29e:	c9 01       	movw	r24, r18
   1e2a0:	0e 94 66 f1 	call	0x1e2cc	; 0x1e2cc <reprogram>
   pageindex ++;
   1e2a4:	80 91 c4 01 	lds	r24, 0x01C4
   1e2a8:	90 91 c5 01 	lds	r25, 0x01C5
   1e2ac:	01 96       	adiw	r24, 0x01	; 1
   1e2ae:	90 93 c5 01 	sts	0x01C5, r25
   1e2b2:	80 93 c4 01 	sts	0x01C4, r24
   return 0;
   1e2b6:	80 e0       	ldi	r24, 0x00	; 0
   1e2b8:	90 e0       	ldi	r25, 0x00	; 0
   1e2ba:	2c 96       	adiw	r28, 0x0c	; 12
   1e2bc:	0f b6       	in	r0, 0x3f	; 63
   1e2be:	f8 94       	cli
   1e2c0:	de bf       	out	0x3e, r29	; 62
   1e2c2:	0f be       	out	0x3f, r0	; 63
   1e2c4:	cd bf       	out	0x3d, r28	; 61
   1e2c6:	df 91       	pop	r29
   1e2c8:	cf 91       	pop	r28
   1e2ca:	08 95       	ret

0001e2cc <reprogram>:
}

//-------------------------------------------------------------------------
int  __attribute__(( section( ".bootloader" ))) reprogram( unsigned char *buffer, uint16_t codepage ) {
   1e2cc:	0f 93       	push	r16
   1e2ce:	1f 93       	push	r17
   1e2d0:	cf 93       	push	r28
   1e2d2:	df 93       	push	r29
   1e2d4:	cd b7       	in	r28, 0x3d	; 61
   1e2d6:	de b7       	in	r29, 0x3e	; 62
   1e2d8:	24 97       	sbiw	r28, 0x04	; 4
   1e2da:	0f b6       	in	r0, 0x3f	; 63
   1e2dc:	f8 94       	cli
   1e2de:	de bf       	out	0x3e, r29	; 62
   1e2e0:	0f be       	out	0x3f, r0	; 63
   1e2e2:	cd bf       	out	0x3d, r28	; 61
   1e2e4:	9a 83       	std	Y+2, r25	; 0x02
   1e2e6:	89 83       	std	Y+1, r24	; 0x01
   1e2e8:	7c 83       	std	Y+4, r23	; 0x04
   1e2ea:	6b 83       	std	Y+3, r22	; 0x03
   boot_program_page(( uint32_t )SPM_PAGESIZE *(( uint32_t )codepage ), buffer );
   1e2ec:	8b 81       	ldd	r24, Y+3	; 0x03
   1e2ee:	9c 81       	ldd	r25, Y+4	; 0x04
   1e2f0:	aa 27       	eor	r26, r26
   1e2f2:	bb 27       	eor	r27, r27
   1e2f4:	00 27       	eor	r16, r16
   1e2f6:	18 2f       	mov	r17, r24
   1e2f8:	29 2f       	mov	r18, r25
   1e2fa:	3a 2f       	mov	r19, r26
   1e2fc:	89 81       	ldd	r24, Y+1	; 0x01
   1e2fe:	9a 81       	ldd	r25, Y+2	; 0x02
   1e300:	ac 01       	movw	r20, r24
   1e302:	c9 01       	movw	r24, r18
   1e304:	b8 01       	movw	r22, r16
   1e306:	0e 94 e8 f5 	call	0x1ebd0	; 0x1ebd0 <boot_program_page>
   return 0;
   1e30a:	80 e0       	ldi	r24, 0x00	; 0
   1e30c:	90 e0       	ldi	r25, 0x00	; 0
   1e30e:	24 96       	adiw	r28, 0x04	; 4
   1e310:	0f b6       	in	r0, 0x3f	; 63
   1e312:	f8 94       	cli
   1e314:	de bf       	out	0x3e, r29	; 62
   1e316:	0f be       	out	0x3f, r0	; 63
   1e318:	cd bf       	out	0x3d, r28	; 61
   1e31a:	df 91       	pop	r29
   1e31c:	cf 91       	pop	r28
   1e31e:	1f 91       	pop	r17
   1e320:	0f 91       	pop	r16
   1e322:	08 95       	ret

0001e324 <boot_insertBreakPoint>:
}
//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void  __attribute__(( section( ".bootloader" )))  boot_insertBreakPoint( uint16_t pagenum, uint8_t pageoffset, uint8_t *instructions ){
   1e324:	cf 93       	push	r28
   1e326:	df 93       	push	r29
   1e328:	cd b7       	in	r28, 0x3d	; 61
   1e32a:	de b7       	in	r29, 0x3e	; 62
   1e32c:	64 97       	sbiw	r28, 0x14	; 20
   1e32e:	0f b6       	in	r0, 0x3f	; 63
   1e330:	f8 94       	cli
   1e332:	de bf       	out	0x3e, r29	; 62
   1e334:	0f be       	out	0x3f, r0	; 63
   1e336:	cd bf       	out	0x3d, r28	; 61
   1e338:	99 8b       	std	Y+17, r25	; 0x11
   1e33a:	88 8b       	std	Y+16, r24	; 0x10
   1e33c:	6a 8b       	std	Y+18, r22	; 0x12
   1e33e:	5c 8b       	std	Y+20, r21	; 0x14
   1e340:	4b 8b       	std	Y+19, r20	; 0x13
   //first read the page, then change the string, then write back the page
   int i;
   uint32_t addr;
   uint8_t index;
   uint16_t data;
   addr = ( uint32_t )pagenum *( uint32_t )SPM_PAGESIZE;
   1e342:	88 89       	ldd	r24, Y+16	; 0x10
   1e344:	99 89       	ldd	r25, Y+17	; 0x11
   1e346:	aa 27       	eor	r26, r26
   1e348:	bb 27       	eor	r27, r27
   1e34a:	ba 2f       	mov	r27, r26
   1e34c:	a9 2f       	mov	r26, r25
   1e34e:	98 2f       	mov	r25, r24
   1e350:	88 27       	eor	r24, r24
   1e352:	8a 87       	std	Y+10, r24	; 0x0a
   1e354:	9b 87       	std	Y+11, r25	; 0x0b
   1e356:	ac 87       	std	Y+12, r26	; 0x0c
   1e358:	bd 87       	std	Y+13, r27	; 0x0d
   for ( i = 0; i < 128; i ++ ) {
   1e35a:	1f 86       	std	Y+15, r1	; 0x0f
   1e35c:	1e 86       	std	Y+14, r1	; 0x0e
   1e35e:	5f c0       	rjmp	.+190    	; 0x1e41e <boot_insertBreakPoint+0xfa>
      data = pgm_read_word_far( addr + (( uint32_t )i ) *2 );
   1e360:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e362:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e364:	aa 27       	eor	r26, r26
   1e366:	97 fd       	sbrc	r25, 7
   1e368:	a0 95       	com	r26
   1e36a:	ba 2f       	mov	r27, r26
   1e36c:	9c 01       	movw	r18, r24
   1e36e:	ad 01       	movw	r20, r26
   1e370:	22 0f       	add	r18, r18
   1e372:	33 1f       	adc	r19, r19
   1e374:	44 1f       	adc	r20, r20
   1e376:	55 1f       	adc	r21, r21
   1e378:	8a 85       	ldd	r24, Y+10	; 0x0a
   1e37a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1e37c:	ac 85       	ldd	r26, Y+12	; 0x0c
   1e37e:	bd 85       	ldd	r27, Y+13	; 0x0d
   1e380:	82 0f       	add	r24, r18
   1e382:	93 1f       	adc	r25, r19
   1e384:	a4 1f       	adc	r26, r20
   1e386:	b5 1f       	adc	r27, r21
   1e388:	8b 83       	std	Y+3, r24	; 0x03
   1e38a:	9c 83       	std	Y+4, r25	; 0x04
   1e38c:	ad 83       	std	Y+5, r26	; 0x05
   1e38e:	be 83       	std	Y+6, r27	; 0x06
   1e390:	8b 81       	ldd	r24, Y+3	; 0x03
   1e392:	9c 81       	ldd	r25, Y+4	; 0x04
   1e394:	ad 81       	ldd	r26, Y+5	; 0x05
   1e396:	be 81       	ldd	r27, Y+6	; 0x06
   1e398:	ab bf       	out	0x3b, r26	; 59
   1e39a:	fc 01       	movw	r30, r24
   1e39c:	87 91       	elpm	r24, Z+
   1e39e:	96 91       	elpm	r25, Z
   1e3a0:	9a 83       	std	Y+2, r25	; 0x02
   1e3a2:	89 83       	std	Y+1, r24	; 0x01
   1e3a4:	89 81       	ldd	r24, Y+1	; 0x01
   1e3a6:	9a 81       	ldd	r25, Y+2	; 0x02
   1e3a8:	98 87       	std	Y+8, r25	; 0x08
   1e3aa:	8f 83       	std	Y+7, r24	; 0x07
      if ( is_host_lsb()) {
   1e3ac:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   1e3b0:	00 97       	sbiw	r24, 0x00	; 0
   1e3b2:	c9 f0       	breq	.+50     	; 0x1e3e6 <boot_insertBreakPoint+0xc2>
         pagebuffer[ i *2 ] = data % 256;
   1e3b4:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e3b6:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e3b8:	88 0f       	add	r24, r24
   1e3ba:	99 1f       	adc	r25, r25
   1e3bc:	2f 81       	ldd	r18, Y+7	; 0x07
   1e3be:	fc 01       	movw	r30, r24
   1e3c0:	ea 53       	subi	r30, 0x3A	; 58
   1e3c2:	fe 4f       	sbci	r31, 0xFE	; 254
   1e3c4:	20 83       	st	Z, r18
         pagebuffer[ i *2+1 ] = data / 256;
   1e3c6:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e3c8:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e3ca:	88 0f       	add	r24, r24
   1e3cc:	99 1f       	adc	r25, r25
   1e3ce:	9c 01       	movw	r18, r24
   1e3d0:	2f 5f       	subi	r18, 0xFF	; 255
   1e3d2:	3f 4f       	sbci	r19, 0xFF	; 255
   1e3d4:	8f 81       	ldd	r24, Y+7	; 0x07
   1e3d6:	98 85       	ldd	r25, Y+8	; 0x08
   1e3d8:	89 2f       	mov	r24, r25
   1e3da:	99 27       	eor	r25, r25
   1e3dc:	f9 01       	movw	r30, r18
   1e3de:	ea 53       	subi	r30, 0x3A	; 58
   1e3e0:	fe 4f       	sbci	r31, 0xFE	; 254
   1e3e2:	80 83       	st	Z, r24
   1e3e4:	17 c0       	rjmp	.+46     	; 0x1e414 <boot_insertBreakPoint+0xf0>
      }
       else {
         pagebuffer[ i *2+1 ] = data % 256;
   1e3e6:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e3e8:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e3ea:	88 0f       	add	r24, r24
   1e3ec:	99 1f       	adc	r25, r25
   1e3ee:	01 96       	adiw	r24, 0x01	; 1
   1e3f0:	2f 81       	ldd	r18, Y+7	; 0x07
   1e3f2:	fc 01       	movw	r30, r24
   1e3f4:	ea 53       	subi	r30, 0x3A	; 58
   1e3f6:	fe 4f       	sbci	r31, 0xFE	; 254
   1e3f8:	20 83       	st	Z, r18
         pagebuffer[ i *2 ] = data / 256;
   1e3fa:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e3fc:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e3fe:	9c 01       	movw	r18, r24
   1e400:	22 0f       	add	r18, r18
   1e402:	33 1f       	adc	r19, r19
   1e404:	8f 81       	ldd	r24, Y+7	; 0x07
   1e406:	98 85       	ldd	r25, Y+8	; 0x08
   1e408:	89 2f       	mov	r24, r25
   1e40a:	99 27       	eor	r25, r25
   1e40c:	f9 01       	movw	r30, r18
   1e40e:	ea 53       	subi	r30, 0x3A	; 58
   1e410:	fe 4f       	sbci	r31, 0xFE	; 254
   1e412:	80 83       	st	Z, r24
   1e414:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e416:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e418:	01 96       	adiw	r24, 0x01	; 1
   1e41a:	9f 87       	std	Y+15, r25	; 0x0f
   1e41c:	8e 87       	std	Y+14, r24	; 0x0e
   1e41e:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e420:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e422:	80 38       	cpi	r24, 0x80	; 128
   1e424:	91 05       	cpc	r25, r1
   1e426:	0c f4       	brge	.+2      	; 0x1e42a <boot_insertBreakPoint+0x106>
   1e428:	9b cf       	rjmp	.-202    	; 0x1e360 <boot_insertBreakPoint+0x3c>
      }
   }
   index = pageoffset;
   1e42a:	8a 89       	ldd	r24, Y+18	; 0x12
   1e42c:	89 87       	std	Y+9, r24	; 0x09
   for ( i = 0; i < 6; i ++ )
   1e42e:	1f 86       	std	Y+15, r1	; 0x0f
   1e430:	1e 86       	std	Y+14, r1	; 0x0e
   1e432:	2a c0       	rjmp	.+84     	; 0x1e488 <boot_insertBreakPoint+0x164>
    {
      instructions[ i ] = pagebuffer[ index + i ];
   1e434:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e436:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e438:	9c 01       	movw	r18, r24
   1e43a:	8b 89       	ldd	r24, Y+19	; 0x13
   1e43c:	9c 89       	ldd	r25, Y+20	; 0x14
   1e43e:	d9 01       	movw	r26, r18
   1e440:	a8 0f       	add	r26, r24
   1e442:	b9 1f       	adc	r27, r25
   1e444:	89 85       	ldd	r24, Y+9	; 0x09
   1e446:	28 2f       	mov	r18, r24
   1e448:	33 27       	eor	r19, r19
   1e44a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e44c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e44e:	82 0f       	add	r24, r18
   1e450:	93 1f       	adc	r25, r19
   1e452:	fc 01       	movw	r30, r24
   1e454:	ea 53       	subi	r30, 0x3A	; 58
   1e456:	fe 4f       	sbci	r31, 0xFE	; 254
   1e458:	80 81       	ld	r24, Z
   1e45a:	8c 93       	st	X, r24
      pagebuffer[ index + i ] = breakpointstring[ i ];
   1e45c:	89 85       	ldd	r24, Y+9	; 0x09
   1e45e:	28 2f       	mov	r18, r24
   1e460:	33 27       	eor	r19, r19
   1e462:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e464:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e466:	28 0f       	add	r18, r24
   1e468:	39 1f       	adc	r19, r25
   1e46a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e46c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e46e:	fc 01       	movw	r30, r24
   1e470:	e5 5d       	subi	r30, 0xD5	; 213
   1e472:	fe 4f       	sbci	r31, 0xFE	; 254
   1e474:	80 81       	ld	r24, Z
   1e476:	f9 01       	movw	r30, r18
   1e478:	ea 53       	subi	r30, 0x3A	; 58
   1e47a:	fe 4f       	sbci	r31, 0xFE	; 254
   1e47c:	80 83       	st	Z, r24
   1e47e:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e480:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e482:	01 96       	adiw	r24, 0x01	; 1
   1e484:	9f 87       	std	Y+15, r25	; 0x0f
   1e486:	8e 87       	std	Y+14, r24	; 0x0e
   1e488:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e48a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1e48c:	86 30       	cpi	r24, 0x06	; 6
   1e48e:	91 05       	cpc	r25, r1
   1e490:	8c f2       	brlt	.-94     	; 0x1e434 <boot_insertBreakPoint+0x110>
   }
   reprogram( pagebuffer, pagenum );
   1e492:	88 89       	ldd	r24, Y+16	; 0x10
   1e494:	99 89       	ldd	r25, Y+17	; 0x11
   1e496:	26 ec       	ldi	r18, 0xC6	; 198
   1e498:	31 e0       	ldi	r19, 0x01	; 1
   1e49a:	bc 01       	movw	r22, r24
   1e49c:	c9 01       	movw	r24, r18
   1e49e:	0e 94 66 f1 	call	0x1e2cc	; 0x1e2cc <reprogram>
   1e4a2:	64 96       	adiw	r28, 0x14	; 20
   1e4a4:	0f b6       	in	r0, 0x3f	; 63
   1e4a6:	f8 94       	cli
   1e4a8:	de bf       	out	0x3e, r29	; 62
   1e4aa:	0f be       	out	0x3f, r0	; 63
   1e4ac:	cd bf       	out	0x3d, r28	; 61
   1e4ae:	df 91       	pop	r29
   1e4b0:	cf 91       	pop	r28
   1e4b2:	08 95       	ret

0001e4b4 <boot_insertTracePoint>:
}


//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void  __attribute__(( section( ".bootloader" )))    boot_insertTracePoint( uint16_t pagenum, uint8_t pageoffset) {
   1e4b4:	cf 93       	push	r28
   1e4b6:	df 93       	push	r29
   1e4b8:	cd b7       	in	r28, 0x3d	; 61
   1e4ba:	de b7       	in	r29, 0x3e	; 62
   1e4bc:	6b 97       	sbiw	r28, 0x1b	; 27
   1e4be:	0f b6       	in	r0, 0x3f	; 63
   1e4c0:	f8 94       	cli
   1e4c2:	de bf       	out	0x3e, r29	; 62
   1e4c4:	0f be       	out	0x3f, r0	; 63
   1e4c6:	cd bf       	out	0x3d, r28	; 61
   1e4c8:	9a 8f       	std	Y+26, r25	; 0x1a
   1e4ca:	89 8f       	std	Y+25, r24	; 0x19
   1e4cc:	6b 8f       	std	Y+27, r22	; 0x1b
   //first read the page, then change the string, then write back the page
   int i;
   uint32_t addr;
   uint8_t index;
   uint16_t data;
   uint8_t programmore = 0; 
   1e4ce:	1f 86       	std	Y+15, r1	; 0x0f
   uint8_t endindex, endindex2; 

  //Read the page content
   addr = ( uint32_t )pagenum *( uint32_t )SPM_PAGESIZE;
   1e4d0:	89 8d       	ldd	r24, Y+25	; 0x19
   1e4d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1e4d4:	aa 27       	eor	r26, r26
   1e4d6:	bb 27       	eor	r27, r27
   1e4d8:	ba 2f       	mov	r27, r26
   1e4da:	a9 2f       	mov	r26, r25
   1e4dc:	98 2f       	mov	r25, r24
   1e4de:	88 27       	eor	r24, r24
   1e4e0:	8b 8b       	std	Y+19, r24	; 0x13
   1e4e2:	9c 8b       	std	Y+20, r25	; 0x14
   1e4e4:	ad 8b       	std	Y+21, r26	; 0x15
   1e4e6:	be 8b       	std	Y+22, r27	; 0x16

   //read the page content 

   for ( i = 0; i < 128; i ++ ) {
   1e4e8:	18 8e       	std	Y+24, r1	; 0x18
   1e4ea:	1f 8a       	std	Y+23, r1	; 0x17
   1e4ec:	5f c0       	rjmp	.+190    	; 0x1e5ac <boot_insertTracePoint+0xf8>
      data = pgm_read_word_far( addr + (( uint32_t )i ) *2 );
   1e4ee:	8f 89       	ldd	r24, Y+23	; 0x17
   1e4f0:	98 8d       	ldd	r25, Y+24	; 0x18
   1e4f2:	aa 27       	eor	r26, r26
   1e4f4:	97 fd       	sbrc	r25, 7
   1e4f6:	a0 95       	com	r26
   1e4f8:	ba 2f       	mov	r27, r26
   1e4fa:	9c 01       	movw	r18, r24
   1e4fc:	ad 01       	movw	r20, r26
   1e4fe:	22 0f       	add	r18, r18
   1e500:	33 1f       	adc	r19, r19
   1e502:	44 1f       	adc	r20, r20
   1e504:	55 1f       	adc	r21, r21
   1e506:	8b 89       	ldd	r24, Y+19	; 0x13
   1e508:	9c 89       	ldd	r25, Y+20	; 0x14
   1e50a:	ad 89       	ldd	r26, Y+21	; 0x15
   1e50c:	be 89       	ldd	r27, Y+22	; 0x16
   1e50e:	82 0f       	add	r24, r18
   1e510:	93 1f       	adc	r25, r19
   1e512:	a4 1f       	adc	r26, r20
   1e514:	b5 1f       	adc	r27, r21
   1e516:	89 87       	std	Y+9, r24	; 0x09
   1e518:	9a 87       	std	Y+10, r25	; 0x0a
   1e51a:	ab 87       	std	Y+11, r26	; 0x0b
   1e51c:	bc 87       	std	Y+12, r27	; 0x0c
   1e51e:	89 85       	ldd	r24, Y+9	; 0x09
   1e520:	9a 85       	ldd	r25, Y+10	; 0x0a
   1e522:	ab 85       	ldd	r26, Y+11	; 0x0b
   1e524:	bc 85       	ldd	r27, Y+12	; 0x0c
   1e526:	ab bf       	out	0x3b, r26	; 59
   1e528:	fc 01       	movw	r30, r24
   1e52a:	87 91       	elpm	r24, Z+
   1e52c:	96 91       	elpm	r25, Z
   1e52e:	98 87       	std	Y+8, r25	; 0x08
   1e530:	8f 83       	std	Y+7, r24	; 0x07
   1e532:	8f 81       	ldd	r24, Y+7	; 0x07
   1e534:	98 85       	ldd	r25, Y+8	; 0x08
   1e536:	99 8b       	std	Y+17, r25	; 0x11
   1e538:	88 8b       	std	Y+16, r24	; 0x10
      if ( is_host_lsb()) {
   1e53a:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   1e53e:	00 97       	sbiw	r24, 0x00	; 0
   1e540:	c9 f0       	breq	.+50     	; 0x1e574 <boot_insertTracePoint+0xc0>
         pagebuffer[ i *2 ] = data % 256;
   1e542:	8f 89       	ldd	r24, Y+23	; 0x17
   1e544:	98 8d       	ldd	r25, Y+24	; 0x18
   1e546:	88 0f       	add	r24, r24
   1e548:	99 1f       	adc	r25, r25
   1e54a:	28 89       	ldd	r18, Y+16	; 0x10
   1e54c:	fc 01       	movw	r30, r24
   1e54e:	ea 53       	subi	r30, 0x3A	; 58
   1e550:	fe 4f       	sbci	r31, 0xFE	; 254
   1e552:	20 83       	st	Z, r18
         pagebuffer[ i *2+1 ] = data / 256;
   1e554:	8f 89       	ldd	r24, Y+23	; 0x17
   1e556:	98 8d       	ldd	r25, Y+24	; 0x18
   1e558:	88 0f       	add	r24, r24
   1e55a:	99 1f       	adc	r25, r25
   1e55c:	9c 01       	movw	r18, r24
   1e55e:	2f 5f       	subi	r18, 0xFF	; 255
   1e560:	3f 4f       	sbci	r19, 0xFF	; 255
   1e562:	88 89       	ldd	r24, Y+16	; 0x10
   1e564:	99 89       	ldd	r25, Y+17	; 0x11
   1e566:	89 2f       	mov	r24, r25
   1e568:	99 27       	eor	r25, r25
   1e56a:	f9 01       	movw	r30, r18
   1e56c:	ea 53       	subi	r30, 0x3A	; 58
   1e56e:	fe 4f       	sbci	r31, 0xFE	; 254
   1e570:	80 83       	st	Z, r24
   1e572:	17 c0       	rjmp	.+46     	; 0x1e5a2 <boot_insertTracePoint+0xee>
      }
       else {
         pagebuffer[ i *2+1 ] = data % 256;
   1e574:	8f 89       	ldd	r24, Y+23	; 0x17
   1e576:	98 8d       	ldd	r25, Y+24	; 0x18
   1e578:	88 0f       	add	r24, r24
   1e57a:	99 1f       	adc	r25, r25
   1e57c:	01 96       	adiw	r24, 0x01	; 1
   1e57e:	28 89       	ldd	r18, Y+16	; 0x10
   1e580:	fc 01       	movw	r30, r24
   1e582:	ea 53       	subi	r30, 0x3A	; 58
   1e584:	fe 4f       	sbci	r31, 0xFE	; 254
   1e586:	20 83       	st	Z, r18
         pagebuffer[ i *2 ] = data / 256;
   1e588:	8f 89       	ldd	r24, Y+23	; 0x17
   1e58a:	98 8d       	ldd	r25, Y+24	; 0x18
   1e58c:	9c 01       	movw	r18, r24
   1e58e:	22 0f       	add	r18, r18
   1e590:	33 1f       	adc	r19, r19
   1e592:	88 89       	ldd	r24, Y+16	; 0x10
   1e594:	99 89       	ldd	r25, Y+17	; 0x11
   1e596:	89 2f       	mov	r24, r25
   1e598:	99 27       	eor	r25, r25
   1e59a:	f9 01       	movw	r30, r18
   1e59c:	ea 53       	subi	r30, 0x3A	; 58
   1e59e:	fe 4f       	sbci	r31, 0xFE	; 254
   1e5a0:	80 83       	st	Z, r24
   1e5a2:	8f 89       	ldd	r24, Y+23	; 0x17
   1e5a4:	98 8d       	ldd	r25, Y+24	; 0x18
   1e5a6:	01 96       	adiw	r24, 0x01	; 1
   1e5a8:	98 8f       	std	Y+24, r25	; 0x18
   1e5aa:	8f 8b       	std	Y+23, r24	; 0x17
   1e5ac:	8f 89       	ldd	r24, Y+23	; 0x17
   1e5ae:	98 8d       	ldd	r25, Y+24	; 0x18
   1e5b0:	80 38       	cpi	r24, 0x80	; 128
   1e5b2:	91 05       	cpc	r25, r1
   1e5b4:	0c f4       	brge	.+2      	; 0x1e5b8 <boot_insertTracePoint+0x104>
   1e5b6:	9b cf       	rjmp	.-202    	; 0x1e4ee <boot_insertTracePoint+0x3a>
      }
   }
   //assuming that the index as 230 or smaller, then enough for the 26 bytes othersise not 
   //say 234, then it is 22 bytes 

   //Now this part needs to be changed to 16 bytes
   //index is 242, then 14 bytes. 
   
   index = pageoffset;
   1e5b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1e5ba:	8a 8b       	std	Y+18, r24	; 0x12
   programmore = 0; 
   1e5bc:	1f 86       	std	Y+15, r1	; 0x0f

   if (pageoffset > 242)
   1e5be:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1e5c0:	83 3f       	cpi	r24, 0xF3	; 243
   1e5c2:	30 f0       	brcs	.+12     	; 0x1e5d0 <boot_insertTracePoint+0x11c>
   {
   programmore = 1; 
   1e5c4:	81 e0       	ldi	r24, 0x01	; 1
   1e5c6:	8f 87       	std	Y+15, r24	; 0x0f
	 endindex = (uint8_t)((uint16_t)256 - (uint16_t)pageoffset); 
   1e5c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1e5ca:	81 95       	neg	r24
   1e5cc:	8e 87       	std	Y+14, r24	; 0x0e
   1e5ce:	03 c0       	rjmp	.+6      	; 0x1e5d6 <boot_insertTracePoint+0x122>
	
	
   }
   else
   {
     programmore = 0; 
   1e5d0:	1f 86       	std	Y+15, r1	; 0x0f
	    endindex = 14; 
   1e5d2:	8e e0       	ldi	r24, 0x0E	; 14
   1e5d4:	8e 87       	std	Y+14, r24	; 0x0e
   
   }
   //for the 234 example, 22 here, then 0, 21 are copied 

   for ( i = 0; i < endindex; i ++ )
   1e5d6:	18 8e       	std	Y+24, r1	; 0x18
   1e5d8:	1f 8a       	std	Y+23, r1	; 0x17
   1e5da:	16 c0       	rjmp	.+44     	; 0x1e608 <boot_insertTracePoint+0x154>
    {
   //   instructions[ i ] = pagebuffer[ index + i ];
      pagebuffer[ index + i ] = tracepointstring[ i ];
   1e5dc:	8a 89       	ldd	r24, Y+18	; 0x12
   1e5de:	28 2f       	mov	r18, r24
   1e5e0:	33 27       	eor	r19, r19
   1e5e2:	8f 89       	ldd	r24, Y+23	; 0x17
   1e5e4:	98 8d       	ldd	r25, Y+24	; 0x18
   1e5e6:	28 0f       	add	r18, r24
   1e5e8:	39 1f       	adc	r19, r25
   1e5ea:	8f 89       	ldd	r24, Y+23	; 0x17
   1e5ec:	98 8d       	ldd	r25, Y+24	; 0x18
   1e5ee:	fc 01       	movw	r30, r24
   1e5f0:	ed 5c       	subi	r30, 0xCD	; 205
   1e5f2:	fe 4f       	sbci	r31, 0xFE	; 254
   1e5f4:	80 81       	ld	r24, Z
   1e5f6:	f9 01       	movw	r30, r18
   1e5f8:	ea 53       	subi	r30, 0x3A	; 58
   1e5fa:	fe 4f       	sbci	r31, 0xFE	; 254
   1e5fc:	80 83       	st	Z, r24
   1e5fe:	8f 89       	ldd	r24, Y+23	; 0x17
   1e600:	98 8d       	ldd	r25, Y+24	; 0x18
   1e602:	01 96       	adiw	r24, 0x01	; 1
   1e604:	98 8f       	std	Y+24, r25	; 0x18
   1e606:	8f 8b       	std	Y+23, r24	; 0x17
   1e608:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e60a:	28 2f       	mov	r18, r24
   1e60c:	33 27       	eor	r19, r19
   1e60e:	8f 89       	ldd	r24, Y+23	; 0x17
   1e610:	98 8d       	ldd	r25, Y+24	; 0x18
   1e612:	82 17       	cp	r24, r18
   1e614:	93 07       	cpc	r25, r19
   1e616:	14 f3       	brlt	.-60     	; 0x1e5dc <boot_insertTracePoint+0x128>
   }

   reprogram( pagebuffer, pagenum );
   1e618:	89 8d       	ldd	r24, Y+25	; 0x19
   1e61a:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1e61c:	26 ec       	ldi	r18, 0xC6	; 198
   1e61e:	31 e0       	ldi	r19, 0x01	; 1
   1e620:	bc 01       	movw	r22, r24
   1e622:	c9 01       	movw	r24, r18
   1e624:	0e 94 66 f1 	call	0x1e2cc	; 0x1e2cc <reprogram>

   if (programmore == 0)
   1e628:	8f 85       	ldd	r24, Y+15	; 0x0f
   1e62a:	88 23       	and	r24, r24
   1e62c:	09 f4       	brne	.+2      	; 0x1e630 <boot_insertTracePoint+0x17c>
   1e62e:	a4 c0       	rjmp	.+328    	; 0x1e778 <boot_insertTracePoint+0x2c4>
   return; 

   //next page

   addr = ( uint32_t )(pagenum+1) *( uint32_t )SPM_PAGESIZE;
   1e630:	89 8d       	ldd	r24, Y+25	; 0x19
   1e632:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1e634:	01 96       	adiw	r24, 0x01	; 1
   1e636:	aa 27       	eor	r26, r26
   1e638:	bb 27       	eor	r27, r27
   1e63a:	ba 2f       	mov	r27, r26
   1e63c:	a9 2f       	mov	r26, r25
   1e63e:	98 2f       	mov	r25, r24
   1e640:	88 27       	eor	r24, r24
   1e642:	8b 8b       	std	Y+19, r24	; 0x13
   1e644:	9c 8b       	std	Y+20, r25	; 0x14
   1e646:	ad 8b       	std	Y+21, r26	; 0x15
   1e648:	be 8b       	std	Y+22, r27	; 0x16

   for ( i = 0; i < 128; i ++ ) {
   1e64a:	18 8e       	std	Y+24, r1	; 0x18
   1e64c:	1f 8a       	std	Y+23, r1	; 0x17
   1e64e:	5f c0       	rjmp	.+190    	; 0x1e70e <boot_insertTracePoint+0x25a>
      data = pgm_read_word_far( addr + (( uint32_t )i ) *2 );
   1e650:	8f 89       	ldd	r24, Y+23	; 0x17
   1e652:	98 8d       	ldd	r25, Y+24	; 0x18
   1e654:	aa 27       	eor	r26, r26
   1e656:	97 fd       	sbrc	r25, 7
   1e658:	a0 95       	com	r26
   1e65a:	ba 2f       	mov	r27, r26
   1e65c:	9c 01       	movw	r18, r24
   1e65e:	ad 01       	movw	r20, r26
   1e660:	22 0f       	add	r18, r18
   1e662:	33 1f       	adc	r19, r19
   1e664:	44 1f       	adc	r20, r20
   1e666:	55 1f       	adc	r21, r21
   1e668:	8b 89       	ldd	r24, Y+19	; 0x13
   1e66a:	9c 89       	ldd	r25, Y+20	; 0x14
   1e66c:	ad 89       	ldd	r26, Y+21	; 0x15
   1e66e:	be 89       	ldd	r27, Y+22	; 0x16
   1e670:	82 0f       	add	r24, r18
   1e672:	93 1f       	adc	r25, r19
   1e674:	a4 1f       	adc	r26, r20
   1e676:	b5 1f       	adc	r27, r21
   1e678:	8b 83       	std	Y+3, r24	; 0x03
   1e67a:	9c 83       	std	Y+4, r25	; 0x04
   1e67c:	ad 83       	std	Y+5, r26	; 0x05
   1e67e:	be 83       	std	Y+6, r27	; 0x06
   1e680:	8b 81       	ldd	r24, Y+3	; 0x03
   1e682:	9c 81       	ldd	r25, Y+4	; 0x04
   1e684:	ad 81       	ldd	r26, Y+5	; 0x05
   1e686:	be 81       	ldd	r27, Y+6	; 0x06
   1e688:	ab bf       	out	0x3b, r26	; 59
   1e68a:	fc 01       	movw	r30, r24
   1e68c:	87 91       	elpm	r24, Z+
   1e68e:	96 91       	elpm	r25, Z
   1e690:	9a 83       	std	Y+2, r25	; 0x02
   1e692:	89 83       	std	Y+1, r24	; 0x01
   1e694:	89 81       	ldd	r24, Y+1	; 0x01
   1e696:	9a 81       	ldd	r25, Y+2	; 0x02
   1e698:	99 8b       	std	Y+17, r25	; 0x11
   1e69a:	88 8b       	std	Y+16, r24	; 0x10
      if ( is_host_lsb()) {
   1e69c:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   1e6a0:	00 97       	sbiw	r24, 0x00	; 0
   1e6a2:	c9 f0       	breq	.+50     	; 0x1e6d6 <boot_insertTracePoint+0x222>
         pagebuffer[ i *2 ] = data % 256;
   1e6a4:	8f 89       	ldd	r24, Y+23	; 0x17
   1e6a6:	98 8d       	ldd	r25, Y+24	; 0x18
   1e6a8:	88 0f       	add	r24, r24
   1e6aa:	99 1f       	adc	r25, r25
   1e6ac:	28 89       	ldd	r18, Y+16	; 0x10
   1e6ae:	fc 01       	movw	r30, r24
   1e6b0:	ea 53       	subi	r30, 0x3A	; 58
   1e6b2:	fe 4f       	sbci	r31, 0xFE	; 254
   1e6b4:	20 83       	st	Z, r18
         pagebuffer[ i *2+1 ] = data / 256;
   1e6b6:	8f 89       	ldd	r24, Y+23	; 0x17
   1e6b8:	98 8d       	ldd	r25, Y+24	; 0x18
   1e6ba:	88 0f       	add	r24, r24
   1e6bc:	99 1f       	adc	r25, r25
   1e6be:	9c 01       	movw	r18, r24
   1e6c0:	2f 5f       	subi	r18, 0xFF	; 255
   1e6c2:	3f 4f       	sbci	r19, 0xFF	; 255
   1e6c4:	88 89       	ldd	r24, Y+16	; 0x10
   1e6c6:	99 89       	ldd	r25, Y+17	; 0x11
   1e6c8:	89 2f       	mov	r24, r25
   1e6ca:	99 27       	eor	r25, r25
   1e6cc:	f9 01       	movw	r30, r18
   1e6ce:	ea 53       	subi	r30, 0x3A	; 58
   1e6d0:	fe 4f       	sbci	r31, 0xFE	; 254
   1e6d2:	80 83       	st	Z, r24
   1e6d4:	17 c0       	rjmp	.+46     	; 0x1e704 <boot_insertTracePoint+0x250>
      }
       else {
         pagebuffer[ i *2+1 ] = data % 256;
   1e6d6:	8f 89       	ldd	r24, Y+23	; 0x17
   1e6d8:	98 8d       	ldd	r25, Y+24	; 0x18
   1e6da:	88 0f       	add	r24, r24
   1e6dc:	99 1f       	adc	r25, r25
   1e6de:	01 96       	adiw	r24, 0x01	; 1
   1e6e0:	28 89       	ldd	r18, Y+16	; 0x10
   1e6e2:	fc 01       	movw	r30, r24
   1e6e4:	ea 53       	subi	r30, 0x3A	; 58
   1e6e6:	fe 4f       	sbci	r31, 0xFE	; 254
   1e6e8:	20 83       	st	Z, r18
         pagebuffer[ i *2 ] = data / 256;
   1e6ea:	8f 89       	ldd	r24, Y+23	; 0x17
   1e6ec:	98 8d       	ldd	r25, Y+24	; 0x18
   1e6ee:	9c 01       	movw	r18, r24
   1e6f0:	22 0f       	add	r18, r18
   1e6f2:	33 1f       	adc	r19, r19
   1e6f4:	88 89       	ldd	r24, Y+16	; 0x10
   1e6f6:	99 89       	ldd	r25, Y+17	; 0x11
   1e6f8:	89 2f       	mov	r24, r25
   1e6fa:	99 27       	eor	r25, r25
   1e6fc:	f9 01       	movw	r30, r18
   1e6fe:	ea 53       	subi	r30, 0x3A	; 58
   1e700:	fe 4f       	sbci	r31, 0xFE	; 254
   1e702:	80 83       	st	Z, r24
   1e704:	8f 89       	ldd	r24, Y+23	; 0x17
   1e706:	98 8d       	ldd	r25, Y+24	; 0x18
   1e708:	01 96       	adiw	r24, 0x01	; 1
   1e70a:	98 8f       	std	Y+24, r25	; 0x18
   1e70c:	8f 8b       	std	Y+23, r24	; 0x17
   1e70e:	8f 89       	ldd	r24, Y+23	; 0x17
   1e710:	98 8d       	ldd	r25, Y+24	; 0x18
   1e712:	80 38       	cpi	r24, 0x80	; 128
   1e714:	91 05       	cpc	r25, r1
   1e716:	0c f4       	brge	.+2      	; 0x1e71a <boot_insertTracePoint+0x266>
   1e718:	9b cf       	rjmp	.-202    	; 0x1e650 <boot_insertTracePoint+0x19c>
      }
   }

  
   endindex2 = 14 - endindex; 
   1e71a:	8e e0       	ldi	r24, 0x0E	; 14
   1e71c:	9e 85       	ldd	r25, Y+14	; 0x0e
   1e71e:	89 1b       	sub	r24, r25
   1e720:	8d 87       	std	Y+13, r24	; 0x0d
   programmore = 0;
   1e722:	1f 86       	std	Y+15, r1	; 0x0f

  
   for ( i = 0; i < endindex2; i ++ )
   1e724:	18 8e       	std	Y+24, r1	; 0x18
   1e726:	1f 8a       	std	Y+23, r1	; 0x17
   1e728:	16 c0       	rjmp	.+44     	; 0x1e756 <boot_insertTracePoint+0x2a2>
   {
   //   instructions[ i ] = pagebuffer[ index + i ];
      pagebuffer[  i ] = tracepointstring[ endindex + i ];
   1e72a:	4f 89       	ldd	r20, Y+23	; 0x17
   1e72c:	58 8d       	ldd	r21, Y+24	; 0x18
   1e72e:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e730:	28 2f       	mov	r18, r24
   1e732:	33 27       	eor	r19, r19
   1e734:	8f 89       	ldd	r24, Y+23	; 0x17
   1e736:	98 8d       	ldd	r25, Y+24	; 0x18
   1e738:	82 0f       	add	r24, r18
   1e73a:	93 1f       	adc	r25, r19
   1e73c:	fc 01       	movw	r30, r24
   1e73e:	ed 5c       	subi	r30, 0xCD	; 205
   1e740:	fe 4f       	sbci	r31, 0xFE	; 254
   1e742:	80 81       	ld	r24, Z
   1e744:	fa 01       	movw	r30, r20
   1e746:	ea 53       	subi	r30, 0x3A	; 58
   1e748:	fe 4f       	sbci	r31, 0xFE	; 254
   1e74a:	80 83       	st	Z, r24
   1e74c:	8f 89       	ldd	r24, Y+23	; 0x17
   1e74e:	98 8d       	ldd	r25, Y+24	; 0x18
   1e750:	01 96       	adiw	r24, 0x01	; 1
   1e752:	98 8f       	std	Y+24, r25	; 0x18
   1e754:	8f 8b       	std	Y+23, r24	; 0x17
   1e756:	8d 85       	ldd	r24, Y+13	; 0x0d
   1e758:	28 2f       	mov	r18, r24
   1e75a:	33 27       	eor	r19, r19
   1e75c:	8f 89       	ldd	r24, Y+23	; 0x17
   1e75e:	98 8d       	ldd	r25, Y+24	; 0x18
   1e760:	82 17       	cp	r24, r18
   1e762:	93 07       	cpc	r25, r19
   1e764:	14 f3       	brlt	.-60     	; 0x1e72a <boot_insertTracePoint+0x276>
   }

   reprogram( pagebuffer, pagenum +1 );
   1e766:	89 8d       	ldd	r24, Y+25	; 0x19
   1e768:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1e76a:	01 96       	adiw	r24, 0x01	; 1
   1e76c:	26 ec       	ldi	r18, 0xC6	; 198
   1e76e:	31 e0       	ldi	r19, 0x01	; 1
   1e770:	bc 01       	movw	r22, r24
   1e772:	c9 01       	movw	r24, r18
   1e774:	0e 94 66 f1 	call	0x1e2cc	; 0x1e2cc <reprogram>
   1e778:	6b 96       	adiw	r28, 0x1b	; 27
   1e77a:	0f b6       	in	r0, 0x3f	; 63
   1e77c:	f8 94       	cli
   1e77e:	de bf       	out	0x3e, r29	; 62
   1e780:	0f be       	out	0x3f, r0	; 63
   1e782:	cd bf       	out	0x3d, r28	; 61
   1e784:	df 91       	pop	r29
   1e786:	cf 91       	pop	r28
   1e788:	08 95       	ret

0001e78a <boot_insertTracePointLong>:



}




//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void  __attribute__(( section( ".bootloader" )))    boot_insertTracePointLong( uint16_t pagenum, uint8_t pageoffset) {
   1e78a:	cf 93       	push	r28
   1e78c:	df 93       	push	r29
   1e78e:	cd b7       	in	r28, 0x3d	; 61
   1e790:	de b7       	in	r29, 0x3e	; 62
   1e792:	6b 97       	sbiw	r28, 0x1b	; 27
   1e794:	0f b6       	in	r0, 0x3f	; 63
   1e796:	f8 94       	cli
   1e798:	de bf       	out	0x3e, r29	; 62
   1e79a:	0f be       	out	0x3f, r0	; 63
   1e79c:	cd bf       	out	0x3d, r28	; 61
   1e79e:	9a 8f       	std	Y+26, r25	; 0x1a
   1e7a0:	89 8f       	std	Y+25, r24	; 0x19
   1e7a2:	6b 8f       	std	Y+27, r22	; 0x1b
   //first read the page, then change the string, then write back the page
   int i;
   uint32_t addr;
   uint8_t index;
   uint16_t data;
   uint8_t programmore = 0; 
   1e7a4:	1f 86       	std	Y+15, r1	; 0x0f
   uint8_t endindex, endindex2; 

  //Read the page content
   addr = ( uint32_t )pagenum *( uint32_t )SPM_PAGESIZE;
   1e7a6:	89 8d       	ldd	r24, Y+25	; 0x19
   1e7a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1e7aa:	aa 27       	eor	r26, r26
   1e7ac:	bb 27       	eor	r27, r27
   1e7ae:	ba 2f       	mov	r27, r26
   1e7b0:	a9 2f       	mov	r26, r25
   1e7b2:	98 2f       	mov	r25, r24
   1e7b4:	88 27       	eor	r24, r24
   1e7b6:	8b 8b       	std	Y+19, r24	; 0x13
   1e7b8:	9c 8b       	std	Y+20, r25	; 0x14
   1e7ba:	ad 8b       	std	Y+21, r26	; 0x15
   1e7bc:	be 8b       	std	Y+22, r27	; 0x16

   //read the page content 

   for ( i = 0; i < 128; i ++ ) {
   1e7be:	18 8e       	std	Y+24, r1	; 0x18
   1e7c0:	1f 8a       	std	Y+23, r1	; 0x17
   1e7c2:	5f c0       	rjmp	.+190    	; 0x1e882 <boot_insertTracePointLong+0xf8>
      data = pgm_read_word_far( addr + (( uint32_t )i ) *2 );
   1e7c4:	8f 89       	ldd	r24, Y+23	; 0x17
   1e7c6:	98 8d       	ldd	r25, Y+24	; 0x18
   1e7c8:	aa 27       	eor	r26, r26
   1e7ca:	97 fd       	sbrc	r25, 7
   1e7cc:	a0 95       	com	r26
   1e7ce:	ba 2f       	mov	r27, r26
   1e7d0:	9c 01       	movw	r18, r24
   1e7d2:	ad 01       	movw	r20, r26
   1e7d4:	22 0f       	add	r18, r18
   1e7d6:	33 1f       	adc	r19, r19
   1e7d8:	44 1f       	adc	r20, r20
   1e7da:	55 1f       	adc	r21, r21
   1e7dc:	8b 89       	ldd	r24, Y+19	; 0x13
   1e7de:	9c 89       	ldd	r25, Y+20	; 0x14
   1e7e0:	ad 89       	ldd	r26, Y+21	; 0x15
   1e7e2:	be 89       	ldd	r27, Y+22	; 0x16
   1e7e4:	82 0f       	add	r24, r18
   1e7e6:	93 1f       	adc	r25, r19
   1e7e8:	a4 1f       	adc	r26, r20
   1e7ea:	b5 1f       	adc	r27, r21
   1e7ec:	89 87       	std	Y+9, r24	; 0x09
   1e7ee:	9a 87       	std	Y+10, r25	; 0x0a
   1e7f0:	ab 87       	std	Y+11, r26	; 0x0b
   1e7f2:	bc 87       	std	Y+12, r27	; 0x0c
   1e7f4:	89 85       	ldd	r24, Y+9	; 0x09
   1e7f6:	9a 85       	ldd	r25, Y+10	; 0x0a
   1e7f8:	ab 85       	ldd	r26, Y+11	; 0x0b
   1e7fa:	bc 85       	ldd	r27, Y+12	; 0x0c
   1e7fc:	ab bf       	out	0x3b, r26	; 59
   1e7fe:	fc 01       	movw	r30, r24
   1e800:	87 91       	elpm	r24, Z+
   1e802:	96 91       	elpm	r25, Z
   1e804:	98 87       	std	Y+8, r25	; 0x08
   1e806:	8f 83       	std	Y+7, r24	; 0x07
   1e808:	8f 81       	ldd	r24, Y+7	; 0x07
   1e80a:	98 85       	ldd	r25, Y+8	; 0x08
   1e80c:	99 8b       	std	Y+17, r25	; 0x11
   1e80e:	88 8b       	std	Y+16, r24	; 0x10
      if ( is_host_lsb()) {
   1e810:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   1e814:	00 97       	sbiw	r24, 0x00	; 0
   1e816:	c9 f0       	breq	.+50     	; 0x1e84a <boot_insertTracePointLong+0xc0>
         pagebuffer[ i *2 ] = data % 256;
   1e818:	8f 89       	ldd	r24, Y+23	; 0x17
   1e81a:	98 8d       	ldd	r25, Y+24	; 0x18
   1e81c:	88 0f       	add	r24, r24
   1e81e:	99 1f       	adc	r25, r25
   1e820:	28 89       	ldd	r18, Y+16	; 0x10
   1e822:	fc 01       	movw	r30, r24
   1e824:	ea 53       	subi	r30, 0x3A	; 58
   1e826:	fe 4f       	sbci	r31, 0xFE	; 254
   1e828:	20 83       	st	Z, r18
         pagebuffer[ i *2+1 ] = data / 256;
   1e82a:	8f 89       	ldd	r24, Y+23	; 0x17
   1e82c:	98 8d       	ldd	r25, Y+24	; 0x18
   1e82e:	88 0f       	add	r24, r24
   1e830:	99 1f       	adc	r25, r25
   1e832:	9c 01       	movw	r18, r24
   1e834:	2f 5f       	subi	r18, 0xFF	; 255
   1e836:	3f 4f       	sbci	r19, 0xFF	; 255
   1e838:	88 89       	ldd	r24, Y+16	; 0x10
   1e83a:	99 89       	ldd	r25, Y+17	; 0x11
   1e83c:	89 2f       	mov	r24, r25
   1e83e:	99 27       	eor	r25, r25
   1e840:	f9 01       	movw	r30, r18
   1e842:	ea 53       	subi	r30, 0x3A	; 58
   1e844:	fe 4f       	sbci	r31, 0xFE	; 254
   1e846:	80 83       	st	Z, r24
   1e848:	17 c0       	rjmp	.+46     	; 0x1e878 <boot_insertTracePointLong+0xee>
      }
       else {
         pagebuffer[ i *2+1 ] = data % 256;
   1e84a:	8f 89       	ldd	r24, Y+23	; 0x17
   1e84c:	98 8d       	ldd	r25, Y+24	; 0x18
   1e84e:	88 0f       	add	r24, r24
   1e850:	99 1f       	adc	r25, r25
   1e852:	01 96       	adiw	r24, 0x01	; 1
   1e854:	28 89       	ldd	r18, Y+16	; 0x10
   1e856:	fc 01       	movw	r30, r24
   1e858:	ea 53       	subi	r30, 0x3A	; 58
   1e85a:	fe 4f       	sbci	r31, 0xFE	; 254
   1e85c:	20 83       	st	Z, r18
         pagebuffer[ i *2 ] = data / 256;
   1e85e:	8f 89       	ldd	r24, Y+23	; 0x17
   1e860:	98 8d       	ldd	r25, Y+24	; 0x18
   1e862:	9c 01       	movw	r18, r24
   1e864:	22 0f       	add	r18, r18
   1e866:	33 1f       	adc	r19, r19
   1e868:	88 89       	ldd	r24, Y+16	; 0x10
   1e86a:	99 89       	ldd	r25, Y+17	; 0x11
   1e86c:	89 2f       	mov	r24, r25
   1e86e:	99 27       	eor	r25, r25
   1e870:	f9 01       	movw	r30, r18
   1e872:	ea 53       	subi	r30, 0x3A	; 58
   1e874:	fe 4f       	sbci	r31, 0xFE	; 254
   1e876:	80 83       	st	Z, r24
   1e878:	8f 89       	ldd	r24, Y+23	; 0x17
   1e87a:	98 8d       	ldd	r25, Y+24	; 0x18
   1e87c:	01 96       	adiw	r24, 0x01	; 1
   1e87e:	98 8f       	std	Y+24, r25	; 0x18
   1e880:	8f 8b       	std	Y+23, r24	; 0x17
   1e882:	8f 89       	ldd	r24, Y+23	; 0x17
   1e884:	98 8d       	ldd	r25, Y+24	; 0x18
   1e886:	80 38       	cpi	r24, 0x80	; 128
   1e888:	91 05       	cpc	r25, r1
   1e88a:	0c f4       	brge	.+2      	; 0x1e88e <boot_insertTracePointLong+0x104>
   1e88c:	9b cf       	rjmp	.-202    	; 0x1e7c4 <boot_insertTracePointLong+0x3a>
      }
   }
   //assuming that the index as 228 or smaller, then enough for the 28 bytes othersise not 
   //say 234, then it is 22 bytes 

   index = pageoffset;
   1e88e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1e890:	8a 8b       	std	Y+18, r24	; 0x12
   programmore = 0; 
   1e892:	1f 86       	std	Y+15, r1	; 0x0f

   if (pageoffset > 240)
   1e894:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1e896:	81 3f       	cpi	r24, 0xF1	; 241
   1e898:	30 f0       	brcs	.+12     	; 0x1e8a6 <boot_insertTracePointLong+0x11c>
   {
     programmore = 1; 
   1e89a:	81 e0       	ldi	r24, 0x01	; 1
   1e89c:	8f 87       	std	Y+15, r24	; 0x0f
	 endindex = (uint8_t)((uint16_t)256 - (uint16_t)pageoffset); 
   1e89e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1e8a0:	81 95       	neg	r24
   1e8a2:	8e 87       	std	Y+14, r24	; 0x0e
   1e8a4:	03 c0       	rjmp	.+6      	; 0x1e8ac <boot_insertTracePointLong+0x122>
	
	
   }
   else
   {
     programmore = 0; 
   1e8a6:	1f 86       	std	Y+15, r1	; 0x0f
	 endindex = 16; 
   1e8a8:	80 e1       	ldi	r24, 0x10	; 16
   1e8aa:	8e 87       	std	Y+14, r24	; 0x0e
   
   }
   //for the 234 example, 22 here, then 0, 21 are copied 

   for ( i = 0; i < endindex; i ++ )
   1e8ac:	18 8e       	std	Y+24, r1	; 0x18
   1e8ae:	1f 8a       	std	Y+23, r1	; 0x17
   1e8b0:	16 c0       	rjmp	.+44     	; 0x1e8de <boot_insertTracePointLong+0x154>
    {
   //   instructions[ i ] = pagebuffer[ index + i ];
      pagebuffer[ index + i ] = tracepointstring[ i ];
   1e8b2:	8a 89       	ldd	r24, Y+18	; 0x12
   1e8b4:	28 2f       	mov	r18, r24
   1e8b6:	33 27       	eor	r19, r19
   1e8b8:	8f 89       	ldd	r24, Y+23	; 0x17
   1e8ba:	98 8d       	ldd	r25, Y+24	; 0x18
   1e8bc:	28 0f       	add	r18, r24
   1e8be:	39 1f       	adc	r19, r25
   1e8c0:	8f 89       	ldd	r24, Y+23	; 0x17
   1e8c2:	98 8d       	ldd	r25, Y+24	; 0x18
   1e8c4:	fc 01       	movw	r30, r24
   1e8c6:	ed 5c       	subi	r30, 0xCD	; 205
   1e8c8:	fe 4f       	sbci	r31, 0xFE	; 254
   1e8ca:	80 81       	ld	r24, Z
   1e8cc:	f9 01       	movw	r30, r18
   1e8ce:	ea 53       	subi	r30, 0x3A	; 58
   1e8d0:	fe 4f       	sbci	r31, 0xFE	; 254
   1e8d2:	80 83       	st	Z, r24
   1e8d4:	8f 89       	ldd	r24, Y+23	; 0x17
   1e8d6:	98 8d       	ldd	r25, Y+24	; 0x18
   1e8d8:	01 96       	adiw	r24, 0x01	; 1
   1e8da:	98 8f       	std	Y+24, r25	; 0x18
   1e8dc:	8f 8b       	std	Y+23, r24	; 0x17
   1e8de:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e8e0:	28 2f       	mov	r18, r24
   1e8e2:	33 27       	eor	r19, r19
   1e8e4:	8f 89       	ldd	r24, Y+23	; 0x17
   1e8e6:	98 8d       	ldd	r25, Y+24	; 0x18
   1e8e8:	82 17       	cp	r24, r18
   1e8ea:	93 07       	cpc	r25, r19
   1e8ec:	14 f3       	brlt	.-60     	; 0x1e8b2 <boot_insertTracePointLong+0x128>
   }

   reprogram( pagebuffer, pagenum );
   1e8ee:	89 8d       	ldd	r24, Y+25	; 0x19
   1e8f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1e8f2:	26 ec       	ldi	r18, 0xC6	; 198
   1e8f4:	31 e0       	ldi	r19, 0x01	; 1
   1e8f6:	bc 01       	movw	r22, r24
   1e8f8:	c9 01       	movw	r24, r18
   1e8fa:	0e 94 66 f1 	call	0x1e2cc	; 0x1e2cc <reprogram>

   if (programmore == 0)
   1e8fe:	8f 85       	ldd	r24, Y+15	; 0x0f
   1e900:	88 23       	and	r24, r24
   1e902:	09 f4       	brne	.+2      	; 0x1e906 <boot_insertTracePointLong+0x17c>
   1e904:	a4 c0       	rjmp	.+328    	; 0x1ea4e <boot_insertTracePointLong+0x2c4>
   return; 

   //next page

   addr = ( uint32_t )(pagenum+1) *( uint32_t )SPM_PAGESIZE;
   1e906:	89 8d       	ldd	r24, Y+25	; 0x19
   1e908:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1e90a:	01 96       	adiw	r24, 0x01	; 1
   1e90c:	aa 27       	eor	r26, r26
   1e90e:	bb 27       	eor	r27, r27
   1e910:	ba 2f       	mov	r27, r26
   1e912:	a9 2f       	mov	r26, r25
   1e914:	98 2f       	mov	r25, r24
   1e916:	88 27       	eor	r24, r24
   1e918:	8b 8b       	std	Y+19, r24	; 0x13
   1e91a:	9c 8b       	std	Y+20, r25	; 0x14
   1e91c:	ad 8b       	std	Y+21, r26	; 0x15
   1e91e:	be 8b       	std	Y+22, r27	; 0x16

   for ( i = 0; i < 128; i ++ ) {
   1e920:	18 8e       	std	Y+24, r1	; 0x18
   1e922:	1f 8a       	std	Y+23, r1	; 0x17
   1e924:	5f c0       	rjmp	.+190    	; 0x1e9e4 <boot_insertTracePointLong+0x25a>
      data = pgm_read_word_far( addr + (( uint32_t )i ) *2 );
   1e926:	8f 89       	ldd	r24, Y+23	; 0x17
   1e928:	98 8d       	ldd	r25, Y+24	; 0x18
   1e92a:	aa 27       	eor	r26, r26
   1e92c:	97 fd       	sbrc	r25, 7
   1e92e:	a0 95       	com	r26
   1e930:	ba 2f       	mov	r27, r26
   1e932:	9c 01       	movw	r18, r24
   1e934:	ad 01       	movw	r20, r26
   1e936:	22 0f       	add	r18, r18
   1e938:	33 1f       	adc	r19, r19
   1e93a:	44 1f       	adc	r20, r20
   1e93c:	55 1f       	adc	r21, r21
   1e93e:	8b 89       	ldd	r24, Y+19	; 0x13
   1e940:	9c 89       	ldd	r25, Y+20	; 0x14
   1e942:	ad 89       	ldd	r26, Y+21	; 0x15
   1e944:	be 89       	ldd	r27, Y+22	; 0x16
   1e946:	82 0f       	add	r24, r18
   1e948:	93 1f       	adc	r25, r19
   1e94a:	a4 1f       	adc	r26, r20
   1e94c:	b5 1f       	adc	r27, r21
   1e94e:	8b 83       	std	Y+3, r24	; 0x03
   1e950:	9c 83       	std	Y+4, r25	; 0x04
   1e952:	ad 83       	std	Y+5, r26	; 0x05
   1e954:	be 83       	std	Y+6, r27	; 0x06
   1e956:	8b 81       	ldd	r24, Y+3	; 0x03
   1e958:	9c 81       	ldd	r25, Y+4	; 0x04
   1e95a:	ad 81       	ldd	r26, Y+5	; 0x05
   1e95c:	be 81       	ldd	r27, Y+6	; 0x06
   1e95e:	ab bf       	out	0x3b, r26	; 59
   1e960:	fc 01       	movw	r30, r24
   1e962:	87 91       	elpm	r24, Z+
   1e964:	96 91       	elpm	r25, Z
   1e966:	9a 83       	std	Y+2, r25	; 0x02
   1e968:	89 83       	std	Y+1, r24	; 0x01
   1e96a:	89 81       	ldd	r24, Y+1	; 0x01
   1e96c:	9a 81       	ldd	r25, Y+2	; 0x02
   1e96e:	99 8b       	std	Y+17, r25	; 0x11
   1e970:	88 8b       	std	Y+16, r24	; 0x10
      if ( is_host_lsb()) {
   1e972:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   1e976:	00 97       	sbiw	r24, 0x00	; 0
   1e978:	c9 f0       	breq	.+50     	; 0x1e9ac <boot_insertTracePointLong+0x222>
         pagebuffer[ i *2 ] = data % 256;
   1e97a:	8f 89       	ldd	r24, Y+23	; 0x17
   1e97c:	98 8d       	ldd	r25, Y+24	; 0x18
   1e97e:	88 0f       	add	r24, r24
   1e980:	99 1f       	adc	r25, r25
   1e982:	28 89       	ldd	r18, Y+16	; 0x10
   1e984:	fc 01       	movw	r30, r24
   1e986:	ea 53       	subi	r30, 0x3A	; 58
   1e988:	fe 4f       	sbci	r31, 0xFE	; 254
   1e98a:	20 83       	st	Z, r18
         pagebuffer[ i *2+1 ] = data / 256;
   1e98c:	8f 89       	ldd	r24, Y+23	; 0x17
   1e98e:	98 8d       	ldd	r25, Y+24	; 0x18
   1e990:	88 0f       	add	r24, r24
   1e992:	99 1f       	adc	r25, r25
   1e994:	9c 01       	movw	r18, r24
   1e996:	2f 5f       	subi	r18, 0xFF	; 255
   1e998:	3f 4f       	sbci	r19, 0xFF	; 255
   1e99a:	88 89       	ldd	r24, Y+16	; 0x10
   1e99c:	99 89       	ldd	r25, Y+17	; 0x11
   1e99e:	89 2f       	mov	r24, r25
   1e9a0:	99 27       	eor	r25, r25
   1e9a2:	f9 01       	movw	r30, r18
   1e9a4:	ea 53       	subi	r30, 0x3A	; 58
   1e9a6:	fe 4f       	sbci	r31, 0xFE	; 254
   1e9a8:	80 83       	st	Z, r24
   1e9aa:	17 c0       	rjmp	.+46     	; 0x1e9da <boot_insertTracePointLong+0x250>
      }
       else {
         pagebuffer[ i *2+1 ] = data % 256;
   1e9ac:	8f 89       	ldd	r24, Y+23	; 0x17
   1e9ae:	98 8d       	ldd	r25, Y+24	; 0x18
   1e9b0:	88 0f       	add	r24, r24
   1e9b2:	99 1f       	adc	r25, r25
   1e9b4:	01 96       	adiw	r24, 0x01	; 1
   1e9b6:	28 89       	ldd	r18, Y+16	; 0x10
   1e9b8:	fc 01       	movw	r30, r24
   1e9ba:	ea 53       	subi	r30, 0x3A	; 58
   1e9bc:	fe 4f       	sbci	r31, 0xFE	; 254
   1e9be:	20 83       	st	Z, r18
         pagebuffer[ i *2 ] = data / 256;
   1e9c0:	8f 89       	ldd	r24, Y+23	; 0x17
   1e9c2:	98 8d       	ldd	r25, Y+24	; 0x18
   1e9c4:	9c 01       	movw	r18, r24
   1e9c6:	22 0f       	add	r18, r18
   1e9c8:	33 1f       	adc	r19, r19
   1e9ca:	88 89       	ldd	r24, Y+16	; 0x10
   1e9cc:	99 89       	ldd	r25, Y+17	; 0x11
   1e9ce:	89 2f       	mov	r24, r25
   1e9d0:	99 27       	eor	r25, r25
   1e9d2:	f9 01       	movw	r30, r18
   1e9d4:	ea 53       	subi	r30, 0x3A	; 58
   1e9d6:	fe 4f       	sbci	r31, 0xFE	; 254
   1e9d8:	80 83       	st	Z, r24
   1e9da:	8f 89       	ldd	r24, Y+23	; 0x17
   1e9dc:	98 8d       	ldd	r25, Y+24	; 0x18
   1e9de:	01 96       	adiw	r24, 0x01	; 1
   1e9e0:	98 8f       	std	Y+24, r25	; 0x18
   1e9e2:	8f 8b       	std	Y+23, r24	; 0x17
   1e9e4:	8f 89       	ldd	r24, Y+23	; 0x17
   1e9e6:	98 8d       	ldd	r25, Y+24	; 0x18
   1e9e8:	80 38       	cpi	r24, 0x80	; 128
   1e9ea:	91 05       	cpc	r25, r1
   1e9ec:	0c f4       	brge	.+2      	; 0x1e9f0 <boot_insertTracePointLong+0x266>
   1e9ee:	9b cf       	rjmp	.-202    	; 0x1e926 <boot_insertTracePointLong+0x19c>
      }
   }

  //PREVIOUSLY like 22 then the value is 6
   endindex2 = 16 - endindex; 
   1e9f0:	80 e1       	ldi	r24, 0x10	; 16
   1e9f2:	9e 85       	ldd	r25, Y+14	; 0x0e
   1e9f4:	89 1b       	sub	r24, r25
   1e9f6:	8d 87       	std	Y+13, r24	; 0x0d
   programmore = 0;
   1e9f8:	1f 86       	std	Y+15, r1	; 0x0f

  
   for ( i = 0; i < endindex2; i ++ )
   1e9fa:	18 8e       	std	Y+24, r1	; 0x18
   1e9fc:	1f 8a       	std	Y+23, r1	; 0x17
   1e9fe:	16 c0       	rjmp	.+44     	; 0x1ea2c <boot_insertTracePointLong+0x2a2>
   {
   //   instructions[ i ] = pagebuffer[ index + i ];
      pagebuffer[  i ] = tracepointstring[ endindex + i ];
   1ea00:	4f 89       	ldd	r20, Y+23	; 0x17
   1ea02:	58 8d       	ldd	r21, Y+24	; 0x18
   1ea04:	8e 85       	ldd	r24, Y+14	; 0x0e
   1ea06:	28 2f       	mov	r18, r24
   1ea08:	33 27       	eor	r19, r19
   1ea0a:	8f 89       	ldd	r24, Y+23	; 0x17
   1ea0c:	98 8d       	ldd	r25, Y+24	; 0x18
   1ea0e:	82 0f       	add	r24, r18
   1ea10:	93 1f       	adc	r25, r19
   1ea12:	fc 01       	movw	r30, r24
   1ea14:	ed 5c       	subi	r30, 0xCD	; 205
   1ea16:	fe 4f       	sbci	r31, 0xFE	; 254
   1ea18:	80 81       	ld	r24, Z
   1ea1a:	fa 01       	movw	r30, r20
   1ea1c:	ea 53       	subi	r30, 0x3A	; 58
   1ea1e:	fe 4f       	sbci	r31, 0xFE	; 254
   1ea20:	80 83       	st	Z, r24
   1ea22:	8f 89       	ldd	r24, Y+23	; 0x17
   1ea24:	98 8d       	ldd	r25, Y+24	; 0x18
   1ea26:	01 96       	adiw	r24, 0x01	; 1
   1ea28:	98 8f       	std	Y+24, r25	; 0x18
   1ea2a:	8f 8b       	std	Y+23, r24	; 0x17
   1ea2c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1ea2e:	28 2f       	mov	r18, r24
   1ea30:	33 27       	eor	r19, r19
   1ea32:	8f 89       	ldd	r24, Y+23	; 0x17
   1ea34:	98 8d       	ldd	r25, Y+24	; 0x18
   1ea36:	82 17       	cp	r24, r18
   1ea38:	93 07       	cpc	r25, r19
   1ea3a:	14 f3       	brlt	.-60     	; 0x1ea00 <boot_insertTracePointLong+0x276>
   }

   reprogram( pagebuffer, pagenum+1);
   1ea3c:	89 8d       	ldd	r24, Y+25	; 0x19
   1ea3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1ea40:	01 96       	adiw	r24, 0x01	; 1
   1ea42:	26 ec       	ldi	r18, 0xC6	; 198
   1ea44:	31 e0       	ldi	r19, 0x01	; 1
   1ea46:	bc 01       	movw	r22, r24
   1ea48:	c9 01       	movw	r24, r18
   1ea4a:	0e 94 66 f1 	call	0x1e2cc	; 0x1e2cc <reprogram>
   1ea4e:	6b 96       	adiw	r28, 0x1b	; 27
   1ea50:	0f b6       	in	r0, 0x3f	; 63
   1ea52:	f8 94       	cli
   1ea54:	de bf       	out	0x3e, r29	; 62
   1ea56:	0f be       	out	0x3f, r0	; 63
   1ea58:	cd bf       	out	0x3d, r28	; 61
   1ea5a:	df 91       	pop	r29
   1ea5c:	cf 91       	pop	r28
   1ea5e:	08 95       	ret

0001ea60 <boot_removeBreakPoint>:



}





  

  

//-------------------------------------------------------------------------

//remove a breakpoint by patching the 8 bytes at the location specified at the pagenum and offset
void  __attribute__(( section( ".bootloader" ))) boot_removeBreakPoint( uint16_t pagenum, uint8_t pageoffset, uint8_t *instructions ) {
   1ea60:	cf 93       	push	r28
   1ea62:	df 93       	push	r29
   1ea64:	cd b7       	in	r28, 0x3d	; 61
   1ea66:	de b7       	in	r29, 0x3e	; 62
   1ea68:	64 97       	sbiw	r28, 0x14	; 20
   1ea6a:	0f b6       	in	r0, 0x3f	; 63
   1ea6c:	f8 94       	cli
   1ea6e:	de bf       	out	0x3e, r29	; 62
   1ea70:	0f be       	out	0x3f, r0	; 63
   1ea72:	cd bf       	out	0x3d, r28	; 61
   1ea74:	99 8b       	std	Y+17, r25	; 0x11
   1ea76:	88 8b       	std	Y+16, r24	; 0x10
   1ea78:	6a 8b       	std	Y+18, r22	; 0x12
   1ea7a:	5c 8b       	std	Y+20, r21	; 0x14
   1ea7c:	4b 8b       	std	Y+19, r20	; 0x13
   //first read the page, then change the string, then write back the page. 
   //first read the page, then change the string, then write back the page
   int i;
   uint32_t addr;
   uint8_t index;
   uint16_t data;
   addr = ( uint32_t )pagenum *( uint32_t )SPM_PAGESIZE;
   1ea7e:	88 89       	ldd	r24, Y+16	; 0x10
   1ea80:	99 89       	ldd	r25, Y+17	; 0x11
   1ea82:	aa 27       	eor	r26, r26
   1ea84:	bb 27       	eor	r27, r27
   1ea86:	ba 2f       	mov	r27, r26
   1ea88:	a9 2f       	mov	r26, r25
   1ea8a:	98 2f       	mov	r25, r24
   1ea8c:	88 27       	eor	r24, r24
   1ea8e:	8a 87       	std	Y+10, r24	; 0x0a
   1ea90:	9b 87       	std	Y+11, r25	; 0x0b
   1ea92:	ac 87       	std	Y+12, r26	; 0x0c
   1ea94:	bd 87       	std	Y+13, r27	; 0x0d
   for ( i = 0; i < 128; i ++ ) {
   1ea96:	1f 86       	std	Y+15, r1	; 0x0f
   1ea98:	1e 86       	std	Y+14, r1	; 0x0e
   1ea9a:	5f c0       	rjmp	.+190    	; 0x1eb5a <boot_removeBreakPoint+0xfa>
      data = pgm_read_word_far( addr + (( uint32_t )i ) *2 );
   1ea9c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1ea9e:	9f 85       	ldd	r25, Y+15	; 0x0f
   1eaa0:	aa 27       	eor	r26, r26
   1eaa2:	97 fd       	sbrc	r25, 7
   1eaa4:	a0 95       	com	r26
   1eaa6:	ba 2f       	mov	r27, r26
   1eaa8:	9c 01       	movw	r18, r24
   1eaaa:	ad 01       	movw	r20, r26
   1eaac:	22 0f       	add	r18, r18
   1eaae:	33 1f       	adc	r19, r19
   1eab0:	44 1f       	adc	r20, r20
   1eab2:	55 1f       	adc	r21, r21
   1eab4:	8a 85       	ldd	r24, Y+10	; 0x0a
   1eab6:	9b 85       	ldd	r25, Y+11	; 0x0b
   1eab8:	ac 85       	ldd	r26, Y+12	; 0x0c
   1eaba:	bd 85       	ldd	r27, Y+13	; 0x0d
   1eabc:	82 0f       	add	r24, r18
   1eabe:	93 1f       	adc	r25, r19
   1eac0:	a4 1f       	adc	r26, r20
   1eac2:	b5 1f       	adc	r27, r21
   1eac4:	8b 83       	std	Y+3, r24	; 0x03
   1eac6:	9c 83       	std	Y+4, r25	; 0x04
   1eac8:	ad 83       	std	Y+5, r26	; 0x05
   1eaca:	be 83       	std	Y+6, r27	; 0x06
   1eacc:	8b 81       	ldd	r24, Y+3	; 0x03
   1eace:	9c 81       	ldd	r25, Y+4	; 0x04
   1ead0:	ad 81       	ldd	r26, Y+5	; 0x05
   1ead2:	be 81       	ldd	r27, Y+6	; 0x06
   1ead4:	ab bf       	out	0x3b, r26	; 59
   1ead6:	fc 01       	movw	r30, r24
   1ead8:	87 91       	elpm	r24, Z+
   1eada:	96 91       	elpm	r25, Z
   1eadc:	9a 83       	std	Y+2, r25	; 0x02
   1eade:	89 83       	std	Y+1, r24	; 0x01
   1eae0:	89 81       	ldd	r24, Y+1	; 0x01
   1eae2:	9a 81       	ldd	r25, Y+2	; 0x02
   1eae4:	98 87       	std	Y+8, r25	; 0x08
   1eae6:	8f 83       	std	Y+7, r24	; 0x07
      if ( is_host_lsb()) {
   1eae8:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   1eaec:	00 97       	sbiw	r24, 0x00	; 0
   1eaee:	c9 f0       	breq	.+50     	; 0x1eb22 <boot_removeBreakPoint+0xc2>
         pagebuffer[ i *2 ] = data % 256;
   1eaf0:	8e 85       	ldd	r24, Y+14	; 0x0e
   1eaf2:	9f 85       	ldd	r25, Y+15	; 0x0f
   1eaf4:	88 0f       	add	r24, r24
   1eaf6:	99 1f       	adc	r25, r25
   1eaf8:	2f 81       	ldd	r18, Y+7	; 0x07
   1eafa:	fc 01       	movw	r30, r24
   1eafc:	ea 53       	subi	r30, 0x3A	; 58
   1eafe:	fe 4f       	sbci	r31, 0xFE	; 254
   1eb00:	20 83       	st	Z, r18
         pagebuffer[ i *2+1 ] = data / 256;
   1eb02:	8e 85       	ldd	r24, Y+14	; 0x0e
   1eb04:	9f 85       	ldd	r25, Y+15	; 0x0f
   1eb06:	88 0f       	add	r24, r24
   1eb08:	99 1f       	adc	r25, r25
   1eb0a:	9c 01       	movw	r18, r24
   1eb0c:	2f 5f       	subi	r18, 0xFF	; 255
   1eb0e:	3f 4f       	sbci	r19, 0xFF	; 255
   1eb10:	8f 81       	ldd	r24, Y+7	; 0x07
   1eb12:	98 85       	ldd	r25, Y+8	; 0x08
   1eb14:	89 2f       	mov	r24, r25
   1eb16:	99 27       	eor	r25, r25
   1eb18:	f9 01       	movw	r30, r18
   1eb1a:	ea 53       	subi	r30, 0x3A	; 58
   1eb1c:	fe 4f       	sbci	r31, 0xFE	; 254
   1eb1e:	80 83       	st	Z, r24
   1eb20:	17 c0       	rjmp	.+46     	; 0x1eb50 <boot_removeBreakPoint+0xf0>
      }
       else {
         pagebuffer[ i *2+1 ] = data % 256;
   1eb22:	8e 85       	ldd	r24, Y+14	; 0x0e
   1eb24:	9f 85       	ldd	r25, Y+15	; 0x0f
   1eb26:	88 0f       	add	r24, r24
   1eb28:	99 1f       	adc	r25, r25
   1eb2a:	01 96       	adiw	r24, 0x01	; 1
   1eb2c:	2f 81       	ldd	r18, Y+7	; 0x07
   1eb2e:	fc 01       	movw	r30, r24
   1eb30:	ea 53       	subi	r30, 0x3A	; 58
   1eb32:	fe 4f       	sbci	r31, 0xFE	; 254
   1eb34:	20 83       	st	Z, r18
         pagebuffer[ i *2 ] = data / 256;
   1eb36:	8e 85       	ldd	r24, Y+14	; 0x0e
   1eb38:	9f 85       	ldd	r25, Y+15	; 0x0f
   1eb3a:	9c 01       	movw	r18, r24
   1eb3c:	22 0f       	add	r18, r18
   1eb3e:	33 1f       	adc	r19, r19
   1eb40:	8f 81       	ldd	r24, Y+7	; 0x07
   1eb42:	98 85       	ldd	r25, Y+8	; 0x08
   1eb44:	89 2f       	mov	r24, r25
   1eb46:	99 27       	eor	r25, r25
   1eb48:	f9 01       	movw	r30, r18
   1eb4a:	ea 53       	subi	r30, 0x3A	; 58
   1eb4c:	fe 4f       	sbci	r31, 0xFE	; 254
   1eb4e:	80 83       	st	Z, r24
   1eb50:	8e 85       	ldd	r24, Y+14	; 0x0e
   1eb52:	9f 85       	ldd	r25, Y+15	; 0x0f
   1eb54:	01 96       	adiw	r24, 0x01	; 1
   1eb56:	9f 87       	std	Y+15, r25	; 0x0f
   1eb58:	8e 87       	std	Y+14, r24	; 0x0e
   1eb5a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1eb5c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1eb5e:	80 38       	cpi	r24, 0x80	; 128
   1eb60:	91 05       	cpc	r25, r1
   1eb62:	0c f4       	brge	.+2      	; 0x1eb66 <boot_removeBreakPoint+0x106>
   1eb64:	9b cf       	rjmp	.-202    	; 0x1ea9c <boot_removeBreakPoint+0x3c>
      }
   }
   index = pageoffset;
   1eb66:	8a 89       	ldd	r24, Y+18	; 0x12
   1eb68:	89 87       	std	Y+9, r24	; 0x09
   for ( i = 0; i < 6; i ++ )
   1eb6a:	1f 86       	std	Y+15, r1	; 0x0f
   1eb6c:	1e 86       	std	Y+14, r1	; 0x0e
   1eb6e:	1a c0       	rjmp	.+52     	; 0x1eba4 <boot_removeBreakPoint+0x144>
    {
      pagebuffer[ index + i ] = instructions[ i ];
   1eb70:	89 85       	ldd	r24, Y+9	; 0x09
   1eb72:	28 2f       	mov	r18, r24
   1eb74:	33 27       	eor	r19, r19
   1eb76:	8e 85       	ldd	r24, Y+14	; 0x0e
   1eb78:	9f 85       	ldd	r25, Y+15	; 0x0f
   1eb7a:	a9 01       	movw	r20, r18
   1eb7c:	48 0f       	add	r20, r24
   1eb7e:	59 1f       	adc	r21, r25
   1eb80:	8e 85       	ldd	r24, Y+14	; 0x0e
   1eb82:	9f 85       	ldd	r25, Y+15	; 0x0f
   1eb84:	9c 01       	movw	r18, r24
   1eb86:	8b 89       	ldd	r24, Y+19	; 0x13
   1eb88:	9c 89       	ldd	r25, Y+20	; 0x14
   1eb8a:	f9 01       	movw	r30, r18
   1eb8c:	e8 0f       	add	r30, r24
   1eb8e:	f9 1f       	adc	r31, r25
   1eb90:	80 81       	ld	r24, Z
   1eb92:	fa 01       	movw	r30, r20
   1eb94:	ea 53       	subi	r30, 0x3A	; 58
   1eb96:	fe 4f       	sbci	r31, 0xFE	; 254
   1eb98:	80 83       	st	Z, r24
   1eb9a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1eb9c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1eb9e:	01 96       	adiw	r24, 0x01	; 1
   1eba0:	9f 87       	std	Y+15, r25	; 0x0f
   1eba2:	8e 87       	std	Y+14, r24	; 0x0e
   1eba4:	8e 85       	ldd	r24, Y+14	; 0x0e
   1eba6:	9f 85       	ldd	r25, Y+15	; 0x0f
   1eba8:	86 30       	cpi	r24, 0x06	; 6
   1ebaa:	91 05       	cpc	r25, r1
   1ebac:	0c f3       	brlt	.-62     	; 0x1eb70 <boot_removeBreakPoint+0x110>
   }
   reprogram( pagebuffer, pagenum );
   1ebae:	88 89       	ldd	r24, Y+16	; 0x10
   1ebb0:	99 89       	ldd	r25, Y+17	; 0x11
   1ebb2:	26 ec       	ldi	r18, 0xC6	; 198
   1ebb4:	31 e0       	ldi	r19, 0x01	; 1
   1ebb6:	bc 01       	movw	r22, r24
   1ebb8:	c9 01       	movw	r24, r18
   1ebba:	0e 94 66 f1 	call	0x1e2cc	; 0x1e2cc <reprogram>
   1ebbe:	64 96       	adiw	r28, 0x14	; 20
   1ebc0:	0f b6       	in	r0, 0x3f	; 63
   1ebc2:	f8 94       	cli
   1ebc4:	de bf       	out	0x3e, r29	; 62
   1ebc6:	0f be       	out	0x3f, r0	; 63
   1ebc8:	cd bf       	out	0x3d, r28	; 61
   1ebca:	df 91       	pop	r29
   1ebcc:	cf 91       	pop	r28
   1ebce:	08 95       	ret

0001ebd0 <boot_program_page>:
}





//-------------------------------------------------------------------------
void __attribute__(( section( ".bootloader" ))) boot_program_page( uint32_t page, uint8_t *buf )  {
   1ebd0:	cf 93       	push	r28
   1ebd2:	df 93       	push	r29
   1ebd4:	cd b7       	in	r28, 0x3d	; 61
   1ebd6:	de b7       	in	r29, 0x3e	; 62
   1ebd8:	2b 97       	sbiw	r28, 0x0b	; 11
   1ebda:	0f b6       	in	r0, 0x3f	; 63
   1ebdc:	f8 94       	cli
   1ebde:	de bf       	out	0x3e, r29	; 62
   1ebe0:	0f be       	out	0x3f, r0	; 63
   1ebe2:	cd bf       	out	0x3d, r28	; 61
   1ebe4:	6e 83       	std	Y+6, r22	; 0x06
   1ebe6:	7f 83       	std	Y+7, r23	; 0x07
   1ebe8:	88 87       	std	Y+8, r24	; 0x08
   1ebea:	99 87       	std	Y+9, r25	; 0x09
   1ebec:	5b 87       	std	Y+11, r21	; 0x0b
   1ebee:	4a 87       	std	Y+10, r20	; 0x0a
   uint16_t i;
   uint8_t sreg;
   // Disable interrupts.
   sreg = SREG;
   1ebf0:	ef e5       	ldi	r30, 0x5F	; 95
   1ebf2:	f0 e0       	ldi	r31, 0x00	; 0
   1ebf4:	80 81       	ld	r24, Z
   1ebf6:	8b 83       	std	Y+3, r24	; 0x03
   cli();
   1ebf8:	f8 94       	cli
   eeprom_busy_wait();
   1ebfa:	ec e3       	ldi	r30, 0x3C	; 60
   1ebfc:	f0 e0       	ldi	r31, 0x00	; 0
   1ebfe:	80 81       	ld	r24, Z
   1ec00:	99 27       	eor	r25, r25
   1ec02:	82 70       	andi	r24, 0x02	; 2
   1ec04:	90 70       	andi	r25, 0x00	; 0
   1ec06:	00 97       	sbiw	r24, 0x00	; 0
   1ec08:	c1 f7       	brne	.-16     	; 0x1ebfa <boot_program_page+0x2a>
   boot_page_erase( page );
   1ec0a:	23 e0       	ldi	r18, 0x03	; 3
   1ec0c:	8e 81       	ldd	r24, Y+6	; 0x06
   1ec0e:	9f 81       	ldd	r25, Y+7	; 0x07
   1ec10:	a8 85       	ldd	r26, Y+8	; 0x08
   1ec12:	b9 85       	ldd	r27, Y+9	; 0x09
   1ec14:	fc 01       	movw	r30, r24
   1ec16:	a0 93 5b 00 	sts	0x005B, r26
   1ec1a:	20 93 68 00 	sts	0x0068, r18
   1ec1e:	e8 95       	spm
   boot_spm_busy_wait(); // Wait until the memory is erased.
   1ec20:	e8 e6       	ldi	r30, 0x68	; 104
   1ec22:	f0 e0       	ldi	r31, 0x00	; 0
   1ec24:	80 81       	ld	r24, Z
   1ec26:	99 27       	eor	r25, r25
   1ec28:	81 70       	andi	r24, 0x01	; 1
   1ec2a:	90 70       	andi	r25, 0x00	; 0
   1ec2c:	88 23       	and	r24, r24
   1ec2e:	c1 f7       	brne	.-16     	; 0x1ec20 <boot_program_page+0x50>
   for ( i = 0; i < SPM_PAGESIZE; i += 2 ) {
   1ec30:	1d 82       	std	Y+5, r1	; 0x05
   1ec32:	1c 82       	std	Y+4, r1	; 0x04
   1ec34:	3a c0       	rjmp	.+116    	; 0x1ecaa <boot_program_page+0xda>
      // Set up little-endian word.
      uint16_t w =  *buf ++;
   1ec36:	ea 85       	ldd	r30, Y+10	; 0x0a
   1ec38:	fb 85       	ldd	r31, Y+11	; 0x0b
   1ec3a:	80 81       	ld	r24, Z
   1ec3c:	99 27       	eor	r25, r25
   1ec3e:	9a 83       	std	Y+2, r25	; 0x02
   1ec40:	89 83       	std	Y+1, r24	; 0x01
   1ec42:	8a 85       	ldd	r24, Y+10	; 0x0a
   1ec44:	9b 85       	ldd	r25, Y+11	; 0x0b
   1ec46:	01 96       	adiw	r24, 0x01	; 1
   1ec48:	9b 87       	std	Y+11, r25	; 0x0b
   1ec4a:	8a 87       	std	Y+10, r24	; 0x0a
      w += ( *buf ++ ) << 8;
   1ec4c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1ec4e:	fb 85       	ldd	r31, Y+11	; 0x0b
   1ec50:	80 81       	ld	r24, Z
   1ec52:	99 27       	eor	r25, r25
   1ec54:	98 2f       	mov	r25, r24
   1ec56:	88 27       	eor	r24, r24
   1ec58:	9c 01       	movw	r18, r24
   1ec5a:	89 81       	ldd	r24, Y+1	; 0x01
   1ec5c:	9a 81       	ldd	r25, Y+2	; 0x02
   1ec5e:	82 0f       	add	r24, r18
   1ec60:	93 1f       	adc	r25, r19
   1ec62:	9a 83       	std	Y+2, r25	; 0x02
   1ec64:	89 83       	std	Y+1, r24	; 0x01
   1ec66:	8a 85       	ldd	r24, Y+10	; 0x0a
   1ec68:	9b 85       	ldd	r25, Y+11	; 0x0b
   1ec6a:	01 96       	adiw	r24, 0x01	; 1
   1ec6c:	9b 87       	std	Y+11, r25	; 0x0b
   1ec6e:	8a 87       	std	Y+10, r24	; 0x0a
      boot_page_fill( page + i, w );
   1ec70:	8c 81       	ldd	r24, Y+4	; 0x04
   1ec72:	9d 81       	ldd	r25, Y+5	; 0x05
   1ec74:	9c 01       	movw	r18, r24
   1ec76:	44 27       	eor	r20, r20
   1ec78:	55 27       	eor	r21, r21
   1ec7a:	8e 81       	ldd	r24, Y+6	; 0x06
   1ec7c:	9f 81       	ldd	r25, Y+7	; 0x07
   1ec7e:	a8 85       	ldd	r26, Y+8	; 0x08
   1ec80:	b9 85       	ldd	r27, Y+9	; 0x09
   1ec82:	28 0f       	add	r18, r24
   1ec84:	39 1f       	adc	r19, r25
   1ec86:	4a 1f       	adc	r20, r26
   1ec88:	5b 1f       	adc	r21, r27
   1ec8a:	61 e0       	ldi	r22, 0x01	; 1
   1ec8c:	89 81       	ldd	r24, Y+1	; 0x01
   1ec8e:	9a 81       	ldd	r25, Y+2	; 0x02
   1ec90:	0c 01       	movw	r0, r24
   1ec92:	f9 01       	movw	r30, r18
   1ec94:	40 93 5b 00 	sts	0x005B, r20
   1ec98:	60 93 68 00 	sts	0x0068, r22
   1ec9c:	e8 95       	spm
   1ec9e:	11 24       	eor	r1, r1
   1eca0:	8c 81       	ldd	r24, Y+4	; 0x04
   1eca2:	9d 81       	ldd	r25, Y+5	; 0x05
   1eca4:	02 96       	adiw	r24, 0x02	; 2
   1eca6:	9d 83       	std	Y+5, r25	; 0x05
   1eca8:	8c 83       	std	Y+4, r24	; 0x04
   1ecaa:	8c 81       	ldd	r24, Y+4	; 0x04
   1ecac:	9d 81       	ldd	r25, Y+5	; 0x05
   1ecae:	8f 3f       	cpi	r24, 0xFF	; 255
   1ecb0:	91 05       	cpc	r25, r1
   1ecb2:	09 f0       	breq	.+2      	; 0x1ecb6 <boot_program_page+0xe6>
   1ecb4:	08 f4       	brcc	.+2      	; 0x1ecb8 <boot_program_page+0xe8>
   1ecb6:	bf cf       	rjmp	.-130    	; 0x1ec36 <boot_program_page+0x66>
   }
   boot_spm_busy_wait();
   1ecb8:	e8 e6       	ldi	r30, 0x68	; 104
   1ecba:	f0 e0       	ldi	r31, 0x00	; 0
   1ecbc:	80 81       	ld	r24, Z
   1ecbe:	99 27       	eor	r25, r25
   1ecc0:	81 70       	andi	r24, 0x01	; 1
   1ecc2:	90 70       	andi	r25, 0x00	; 0
   1ecc4:	88 23       	and	r24, r24
   1ecc6:	c1 f7       	brne	.-16     	; 0x1ecb8 <boot_program_page+0xe8>
   boot_page_write( page ); // Store buffer in flash page.
   1ecc8:	25 e0       	ldi	r18, 0x05	; 5
   1ecca:	8e 81       	ldd	r24, Y+6	; 0x06
   1eccc:	9f 81       	ldd	r25, Y+7	; 0x07
   1ecce:	a8 85       	ldd	r26, Y+8	; 0x08
   1ecd0:	b9 85       	ldd	r27, Y+9	; 0x09
   1ecd2:	fc 01       	movw	r30, r24
   1ecd4:	a0 93 5b 00 	sts	0x005B, r26
   1ecd8:	20 93 68 00 	sts	0x0068, r18
   1ecdc:	e8 95       	spm
   boot_spm_busy_wait(); // Wait until the memory is written.
   1ecde:	e8 e6       	ldi	r30, 0x68	; 104
   1ece0:	f0 e0       	ldi	r31, 0x00	; 0
   1ece2:	80 81       	ld	r24, Z
   1ece4:	99 27       	eor	r25, r25
   1ece6:	81 70       	andi	r24, 0x01	; 1
   1ece8:	90 70       	andi	r25, 0x00	; 0
   1ecea:	88 23       	and	r24, r24
   1ecec:	c1 f7       	brne	.-16     	; 0x1ecde <boot_program_page+0x10e>
   // Reenable RWW-section again. We need this if we want to jump back
   // to the application after bootloading.
   boot_rww_enable();
   1ecee:	81 e1       	ldi	r24, 0x11	; 17
   1ecf0:	80 93 68 00 	sts	0x0068, r24
   1ecf4:	e8 95       	spm
   // Re-enable interrupts (if they were ever enabled).
   SREG = sreg;
   1ecf6:	ef e5       	ldi	r30, 0x5F	; 95
   1ecf8:	f0 e0       	ldi	r31, 0x00	; 0
   1ecfa:	8b 81       	ldd	r24, Y+3	; 0x03
   1ecfc:	80 83       	st	Z, r24
   1ecfe:	2b 96       	adiw	r28, 0x0b	; 11
   1ed00:	0f b6       	in	r0, 0x3f	; 63
   1ed02:	f8 94       	cli
   1ed04:	de bf       	out	0x3e, r29	; 62
   1ed06:	0f be       	out	0x3f, r0	; 63
   1ed08:	cd bf       	out	0x3d, r28	; 61
   1ed0a:	df 91       	pop	r29
   1ed0c:	cf 91       	pop	r28
   1ed0e:	08 95       	ret

0001ed10 <boot_removeTracePoint>:
}
 

//-------------------------------------------------------------------------------

//This function allows remove tracepoint by repatching it 
void  __attribute__(( section( ".bootloader" )))    boot_removeTracePoint( uint16_t pagenum, uint8_t pageoffset, uint8_t *buffer) {
   1ed10:	cf 93       	push	r28
   1ed12:	df 93       	push	r29
   1ed14:	cd b7       	in	r28, 0x3d	; 61
   1ed16:	de b7       	in	r29, 0x3e	; 62
   1ed18:	6d 97       	sbiw	r28, 0x1d	; 29
   1ed1a:	0f b6       	in	r0, 0x3f	; 63
   1ed1c:	f8 94       	cli
   1ed1e:	de bf       	out	0x3e, r29	; 62
   1ed20:	0f be       	out	0x3f, r0	; 63
   1ed22:	cd bf       	out	0x3d, r28	; 61
   1ed24:	9a 8f       	std	Y+26, r25	; 0x1a
   1ed26:	89 8f       	std	Y+25, r24	; 0x19
   1ed28:	6b 8f       	std	Y+27, r22	; 0x1b
   1ed2a:	5d 8f       	std	Y+29, r21	; 0x1d
   1ed2c:	4c 8f       	std	Y+28, r20	; 0x1c
   //first read the page, then change the string, then write back the page
   int i;
   uint32_t addr;
   uint8_t index;
   uint16_t data;
   uint8_t programmore = 0; 
   1ed2e:	1f 86       	std	Y+15, r1	; 0x0f
   uint8_t endindex, endindex2; 

  //Read the page content
   addr = ( uint32_t )pagenum *( uint32_t )SPM_PAGESIZE;
   1ed30:	89 8d       	ldd	r24, Y+25	; 0x19
   1ed32:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1ed34:	aa 27       	eor	r26, r26
   1ed36:	bb 27       	eor	r27, r27
   1ed38:	ba 2f       	mov	r27, r26
   1ed3a:	a9 2f       	mov	r26, r25
   1ed3c:	98 2f       	mov	r25, r24
   1ed3e:	88 27       	eor	r24, r24
   1ed40:	8b 8b       	std	Y+19, r24	; 0x13
   1ed42:	9c 8b       	std	Y+20, r25	; 0x14
   1ed44:	ad 8b       	std	Y+21, r26	; 0x15
   1ed46:	be 8b       	std	Y+22, r27	; 0x16

   //read the page content 

   for ( i = 0; i < 128; i ++ ) {
   1ed48:	18 8e       	std	Y+24, r1	; 0x18
   1ed4a:	1f 8a       	std	Y+23, r1	; 0x17
   1ed4c:	5f c0       	rjmp	.+190    	; 0x1ee0c <boot_removeTracePoint+0xfc>
      data = pgm_read_word_far( addr + (( uint32_t )i ) *2 );
   1ed4e:	8f 89       	ldd	r24, Y+23	; 0x17
   1ed50:	98 8d       	ldd	r25, Y+24	; 0x18
   1ed52:	aa 27       	eor	r26, r26
   1ed54:	97 fd       	sbrc	r25, 7
   1ed56:	a0 95       	com	r26
   1ed58:	ba 2f       	mov	r27, r26
   1ed5a:	9c 01       	movw	r18, r24
   1ed5c:	ad 01       	movw	r20, r26
   1ed5e:	22 0f       	add	r18, r18
   1ed60:	33 1f       	adc	r19, r19
   1ed62:	44 1f       	adc	r20, r20
   1ed64:	55 1f       	adc	r21, r21
   1ed66:	8b 89       	ldd	r24, Y+19	; 0x13
   1ed68:	9c 89       	ldd	r25, Y+20	; 0x14
   1ed6a:	ad 89       	ldd	r26, Y+21	; 0x15
   1ed6c:	be 89       	ldd	r27, Y+22	; 0x16
   1ed6e:	82 0f       	add	r24, r18
   1ed70:	93 1f       	adc	r25, r19
   1ed72:	a4 1f       	adc	r26, r20
   1ed74:	b5 1f       	adc	r27, r21
   1ed76:	89 87       	std	Y+9, r24	; 0x09
   1ed78:	9a 87       	std	Y+10, r25	; 0x0a
   1ed7a:	ab 87       	std	Y+11, r26	; 0x0b
   1ed7c:	bc 87       	std	Y+12, r27	; 0x0c
   1ed7e:	89 85       	ldd	r24, Y+9	; 0x09
   1ed80:	9a 85       	ldd	r25, Y+10	; 0x0a
   1ed82:	ab 85       	ldd	r26, Y+11	; 0x0b
   1ed84:	bc 85       	ldd	r27, Y+12	; 0x0c
   1ed86:	ab bf       	out	0x3b, r26	; 59
   1ed88:	fc 01       	movw	r30, r24
   1ed8a:	87 91       	elpm	r24, Z+
   1ed8c:	96 91       	elpm	r25, Z
   1ed8e:	98 87       	std	Y+8, r25	; 0x08
   1ed90:	8f 83       	std	Y+7, r24	; 0x07
   1ed92:	8f 81       	ldd	r24, Y+7	; 0x07
   1ed94:	98 85       	ldd	r25, Y+8	; 0x08
   1ed96:	99 8b       	std	Y+17, r25	; 0x11
   1ed98:	88 8b       	std	Y+16, r24	; 0x10
      if ( is_host_lsb()) {
   1ed9a:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   1ed9e:	00 97       	sbiw	r24, 0x00	; 0
   1eda0:	c9 f0       	breq	.+50     	; 0x1edd4 <boot_removeTracePoint+0xc4>
         pagebuffer[ i *2 ] = data % 256;
   1eda2:	8f 89       	ldd	r24, Y+23	; 0x17
   1eda4:	98 8d       	ldd	r25, Y+24	; 0x18
   1eda6:	88 0f       	add	r24, r24
   1eda8:	99 1f       	adc	r25, r25
   1edaa:	28 89       	ldd	r18, Y+16	; 0x10
   1edac:	fc 01       	movw	r30, r24
   1edae:	ea 53       	subi	r30, 0x3A	; 58
   1edb0:	fe 4f       	sbci	r31, 0xFE	; 254
   1edb2:	20 83       	st	Z, r18
         pagebuffer[ i *2+1 ] = data / 256;
   1edb4:	8f 89       	ldd	r24, Y+23	; 0x17
   1edb6:	98 8d       	ldd	r25, Y+24	; 0x18
   1edb8:	88 0f       	add	r24, r24
   1edba:	99 1f       	adc	r25, r25
   1edbc:	9c 01       	movw	r18, r24
   1edbe:	2f 5f       	subi	r18, 0xFF	; 255
   1edc0:	3f 4f       	sbci	r19, 0xFF	; 255
   1edc2:	88 89       	ldd	r24, Y+16	; 0x10
   1edc4:	99 89       	ldd	r25, Y+17	; 0x11
   1edc6:	89 2f       	mov	r24, r25
   1edc8:	99 27       	eor	r25, r25
   1edca:	f9 01       	movw	r30, r18
   1edcc:	ea 53       	subi	r30, 0x3A	; 58
   1edce:	fe 4f       	sbci	r31, 0xFE	; 254
   1edd0:	80 83       	st	Z, r24
   1edd2:	17 c0       	rjmp	.+46     	; 0x1ee02 <boot_removeTracePoint+0xf2>
      }
       else {
         pagebuffer[ i *2+1 ] = data % 256;
   1edd4:	8f 89       	ldd	r24, Y+23	; 0x17
   1edd6:	98 8d       	ldd	r25, Y+24	; 0x18
   1edd8:	88 0f       	add	r24, r24
   1edda:	99 1f       	adc	r25, r25
   1eddc:	01 96       	adiw	r24, 0x01	; 1
   1edde:	28 89       	ldd	r18, Y+16	; 0x10
   1ede0:	fc 01       	movw	r30, r24
   1ede2:	ea 53       	subi	r30, 0x3A	; 58
   1ede4:	fe 4f       	sbci	r31, 0xFE	; 254
   1ede6:	20 83       	st	Z, r18
         pagebuffer[ i *2 ] = data / 256;
   1ede8:	8f 89       	ldd	r24, Y+23	; 0x17
   1edea:	98 8d       	ldd	r25, Y+24	; 0x18
   1edec:	9c 01       	movw	r18, r24
   1edee:	22 0f       	add	r18, r18
   1edf0:	33 1f       	adc	r19, r19
   1edf2:	88 89       	ldd	r24, Y+16	; 0x10
   1edf4:	99 89       	ldd	r25, Y+17	; 0x11
   1edf6:	89 2f       	mov	r24, r25
   1edf8:	99 27       	eor	r25, r25
   1edfa:	f9 01       	movw	r30, r18
   1edfc:	ea 53       	subi	r30, 0x3A	; 58
   1edfe:	fe 4f       	sbci	r31, 0xFE	; 254
   1ee00:	80 83       	st	Z, r24
   1ee02:	8f 89       	ldd	r24, Y+23	; 0x17
   1ee04:	98 8d       	ldd	r25, Y+24	; 0x18
   1ee06:	01 96       	adiw	r24, 0x01	; 1
   1ee08:	98 8f       	std	Y+24, r25	; 0x18
   1ee0a:	8f 8b       	std	Y+23, r24	; 0x17
   1ee0c:	8f 89       	ldd	r24, Y+23	; 0x17
   1ee0e:	98 8d       	ldd	r25, Y+24	; 0x18
   1ee10:	80 38       	cpi	r24, 0x80	; 128
   1ee12:	91 05       	cpc	r25, r1
   1ee14:	0c f4       	brge	.+2      	; 0x1ee18 <boot_removeTracePoint+0x108>
   1ee16:	9b cf       	rjmp	.-202    	; 0x1ed4e <boot_removeTracePoint+0x3e>
      }
   }
   //assuming that the index as 230 or smaller, then enough for the 26 bytes othersise not 
   //say 234, then it is 22 bytes 

   //Now this part needs to be changed to 16 bytes
   //index is 242, then 14 bytes. 
   
   index = pageoffset;
   1ee18:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1ee1a:	8a 8b       	std	Y+18, r24	; 0x12
   programmore = 0; 
   1ee1c:	1f 86       	std	Y+15, r1	; 0x0f

   if (pageoffset > 242)
   1ee1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1ee20:	83 3f       	cpi	r24, 0xF3	; 243
   1ee22:	30 f0       	brcs	.+12     	; 0x1ee30 <boot_removeTracePoint+0x120>
   {
   programmore = 1; 
   1ee24:	81 e0       	ldi	r24, 0x01	; 1
   1ee26:	8f 87       	std	Y+15, r24	; 0x0f
	 endindex = (uint8_t)((uint16_t)256 - (uint16_t)pageoffset); 
   1ee28:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1ee2a:	81 95       	neg	r24
   1ee2c:	8e 87       	std	Y+14, r24	; 0x0e
   1ee2e:	03 c0       	rjmp	.+6      	; 0x1ee36 <boot_removeTracePoint+0x126>
	
	
   }
   else
   {
     programmore = 0; 
   1ee30:	1f 86       	std	Y+15, r1	; 0x0f
	    endindex = 14; 
   1ee32:	8e e0       	ldi	r24, 0x0E	; 14
   1ee34:	8e 87       	std	Y+14, r24	; 0x0e
   
   }
   //for the 234 example, 22 here, then 0, 21 are copied 

   for ( i = 0; i < endindex; i ++ )
   1ee36:	18 8e       	std	Y+24, r1	; 0x18
   1ee38:	1f 8a       	std	Y+23, r1	; 0x17
   1ee3a:	1a c0       	rjmp	.+52     	; 0x1ee70 <boot_removeTracePoint+0x160>
    {
   //   instructions[ i ] = pagebuffer[ index + i ];
      pagebuffer[ index + i ] = buffer[ i ];
   1ee3c:	8a 89       	ldd	r24, Y+18	; 0x12
   1ee3e:	28 2f       	mov	r18, r24
   1ee40:	33 27       	eor	r19, r19
   1ee42:	8f 89       	ldd	r24, Y+23	; 0x17
   1ee44:	98 8d       	ldd	r25, Y+24	; 0x18
   1ee46:	a9 01       	movw	r20, r18
   1ee48:	48 0f       	add	r20, r24
   1ee4a:	59 1f       	adc	r21, r25
   1ee4c:	8f 89       	ldd	r24, Y+23	; 0x17
   1ee4e:	98 8d       	ldd	r25, Y+24	; 0x18
   1ee50:	9c 01       	movw	r18, r24
   1ee52:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1ee54:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1ee56:	f9 01       	movw	r30, r18
   1ee58:	e8 0f       	add	r30, r24
   1ee5a:	f9 1f       	adc	r31, r25
   1ee5c:	80 81       	ld	r24, Z
   1ee5e:	fa 01       	movw	r30, r20
   1ee60:	ea 53       	subi	r30, 0x3A	; 58
   1ee62:	fe 4f       	sbci	r31, 0xFE	; 254
   1ee64:	80 83       	st	Z, r24
   1ee66:	8f 89       	ldd	r24, Y+23	; 0x17
   1ee68:	98 8d       	ldd	r25, Y+24	; 0x18
   1ee6a:	01 96       	adiw	r24, 0x01	; 1
   1ee6c:	98 8f       	std	Y+24, r25	; 0x18
   1ee6e:	8f 8b       	std	Y+23, r24	; 0x17
   1ee70:	8e 85       	ldd	r24, Y+14	; 0x0e
   1ee72:	28 2f       	mov	r18, r24
   1ee74:	33 27       	eor	r19, r19
   1ee76:	8f 89       	ldd	r24, Y+23	; 0x17
   1ee78:	98 8d       	ldd	r25, Y+24	; 0x18
   1ee7a:	82 17       	cp	r24, r18
   1ee7c:	93 07       	cpc	r25, r19
   1ee7e:	f4 f2       	brlt	.-68     	; 0x1ee3c <boot_removeTracePoint+0x12c>
   }

   reprogram( pagebuffer, pagenum );
   1ee80:	89 8d       	ldd	r24, Y+25	; 0x19
   1ee82:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1ee84:	26 ec       	ldi	r18, 0xC6	; 198
   1ee86:	31 e0       	ldi	r19, 0x01	; 1
   1ee88:	bc 01       	movw	r22, r24
   1ee8a:	c9 01       	movw	r24, r18
   1ee8c:	0e 94 66 f1 	call	0x1e2cc	; 0x1e2cc <reprogram>

   if (programmore == 0)
   1ee90:	8f 85       	ldd	r24, Y+15	; 0x0f
   1ee92:	88 23       	and	r24, r24
   1ee94:	09 f4       	brne	.+2      	; 0x1ee98 <boot_removeTracePoint+0x188>
   1ee96:	a6 c0       	rjmp	.+332    	; 0x1efe4 <boot_removeTracePoint+0x2d4>
   return; 

   //next page

   addr = ( uint32_t )(pagenum+1) *( uint32_t )SPM_PAGESIZE;
   1ee98:	89 8d       	ldd	r24, Y+25	; 0x19
   1ee9a:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1ee9c:	01 96       	adiw	r24, 0x01	; 1
   1ee9e:	aa 27       	eor	r26, r26
   1eea0:	bb 27       	eor	r27, r27
   1eea2:	ba 2f       	mov	r27, r26
   1eea4:	a9 2f       	mov	r26, r25
   1eea6:	98 2f       	mov	r25, r24
   1eea8:	88 27       	eor	r24, r24
   1eeaa:	8b 8b       	std	Y+19, r24	; 0x13
   1eeac:	9c 8b       	std	Y+20, r25	; 0x14
   1eeae:	ad 8b       	std	Y+21, r26	; 0x15
   1eeb0:	be 8b       	std	Y+22, r27	; 0x16

   for ( i = 0; i < 128; i ++ ) {
   1eeb2:	18 8e       	std	Y+24, r1	; 0x18
   1eeb4:	1f 8a       	std	Y+23, r1	; 0x17
   1eeb6:	5f c0       	rjmp	.+190    	; 0x1ef76 <boot_removeTracePoint+0x266>
      data = pgm_read_word_far( addr + (( uint32_t )i ) *2 );
   1eeb8:	8f 89       	ldd	r24, Y+23	; 0x17
   1eeba:	98 8d       	ldd	r25, Y+24	; 0x18
   1eebc:	aa 27       	eor	r26, r26
   1eebe:	97 fd       	sbrc	r25, 7
   1eec0:	a0 95       	com	r26
   1eec2:	ba 2f       	mov	r27, r26
   1eec4:	9c 01       	movw	r18, r24
   1eec6:	ad 01       	movw	r20, r26
   1eec8:	22 0f       	add	r18, r18
   1eeca:	33 1f       	adc	r19, r19
   1eecc:	44 1f       	adc	r20, r20
   1eece:	55 1f       	adc	r21, r21
   1eed0:	8b 89       	ldd	r24, Y+19	; 0x13
   1eed2:	9c 89       	ldd	r25, Y+20	; 0x14
   1eed4:	ad 89       	ldd	r26, Y+21	; 0x15
   1eed6:	be 89       	ldd	r27, Y+22	; 0x16
   1eed8:	82 0f       	add	r24, r18
   1eeda:	93 1f       	adc	r25, r19
   1eedc:	a4 1f       	adc	r26, r20
   1eede:	b5 1f       	adc	r27, r21
   1eee0:	8b 83       	std	Y+3, r24	; 0x03
   1eee2:	9c 83       	std	Y+4, r25	; 0x04
   1eee4:	ad 83       	std	Y+5, r26	; 0x05
   1eee6:	be 83       	std	Y+6, r27	; 0x06
   1eee8:	8b 81       	ldd	r24, Y+3	; 0x03
   1eeea:	9c 81       	ldd	r25, Y+4	; 0x04
   1eeec:	ad 81       	ldd	r26, Y+5	; 0x05
   1eeee:	be 81       	ldd	r27, Y+6	; 0x06
   1eef0:	ab bf       	out	0x3b, r26	; 59
   1eef2:	fc 01       	movw	r30, r24
   1eef4:	87 91       	elpm	r24, Z+
   1eef6:	96 91       	elpm	r25, Z
   1eef8:	9a 83       	std	Y+2, r25	; 0x02
   1eefa:	89 83       	std	Y+1, r24	; 0x01
   1eefc:	89 81       	ldd	r24, Y+1	; 0x01
   1eefe:	9a 81       	ldd	r25, Y+2	; 0x02
   1ef00:	99 8b       	std	Y+17, r25	; 0x11
   1ef02:	88 8b       	std	Y+16, r24	; 0x10
      if ( is_host_lsb()) {
   1ef04:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   1ef08:	00 97       	sbiw	r24, 0x00	; 0
   1ef0a:	c9 f0       	breq	.+50     	; 0x1ef3e <boot_removeTracePoint+0x22e>
         pagebuffer[ i *2 ] = data % 256;
   1ef0c:	8f 89       	ldd	r24, Y+23	; 0x17
   1ef0e:	98 8d       	ldd	r25, Y+24	; 0x18
   1ef10:	88 0f       	add	r24, r24
   1ef12:	99 1f       	adc	r25, r25
   1ef14:	28 89       	ldd	r18, Y+16	; 0x10
   1ef16:	fc 01       	movw	r30, r24
   1ef18:	ea 53       	subi	r30, 0x3A	; 58
   1ef1a:	fe 4f       	sbci	r31, 0xFE	; 254
   1ef1c:	20 83       	st	Z, r18
         pagebuffer[ i *2+1 ] = data / 256;
   1ef1e:	8f 89       	ldd	r24, Y+23	; 0x17
   1ef20:	98 8d       	ldd	r25, Y+24	; 0x18
   1ef22:	88 0f       	add	r24, r24
   1ef24:	99 1f       	adc	r25, r25
   1ef26:	9c 01       	movw	r18, r24
   1ef28:	2f 5f       	subi	r18, 0xFF	; 255
   1ef2a:	3f 4f       	sbci	r19, 0xFF	; 255
   1ef2c:	88 89       	ldd	r24, Y+16	; 0x10
   1ef2e:	99 89       	ldd	r25, Y+17	; 0x11
   1ef30:	89 2f       	mov	r24, r25
   1ef32:	99 27       	eor	r25, r25
   1ef34:	f9 01       	movw	r30, r18
   1ef36:	ea 53       	subi	r30, 0x3A	; 58
   1ef38:	fe 4f       	sbci	r31, 0xFE	; 254
   1ef3a:	80 83       	st	Z, r24
   1ef3c:	17 c0       	rjmp	.+46     	; 0x1ef6c <boot_removeTracePoint+0x25c>
      }
       else {
         pagebuffer[ i *2+1 ] = data % 256;
   1ef3e:	8f 89       	ldd	r24, Y+23	; 0x17
   1ef40:	98 8d       	ldd	r25, Y+24	; 0x18
   1ef42:	88 0f       	add	r24, r24
   1ef44:	99 1f       	adc	r25, r25
   1ef46:	01 96       	adiw	r24, 0x01	; 1
   1ef48:	28 89       	ldd	r18, Y+16	; 0x10
   1ef4a:	fc 01       	movw	r30, r24
   1ef4c:	ea 53       	subi	r30, 0x3A	; 58
   1ef4e:	fe 4f       	sbci	r31, 0xFE	; 254
   1ef50:	20 83       	st	Z, r18
         pagebuffer[ i *2 ] = data / 256;
   1ef52:	8f 89       	ldd	r24, Y+23	; 0x17
   1ef54:	98 8d       	ldd	r25, Y+24	; 0x18
   1ef56:	9c 01       	movw	r18, r24
   1ef58:	22 0f       	add	r18, r18
   1ef5a:	33 1f       	adc	r19, r19
   1ef5c:	88 89       	ldd	r24, Y+16	; 0x10
   1ef5e:	99 89       	ldd	r25, Y+17	; 0x11
   1ef60:	89 2f       	mov	r24, r25
   1ef62:	99 27       	eor	r25, r25
   1ef64:	f9 01       	movw	r30, r18
   1ef66:	ea 53       	subi	r30, 0x3A	; 58
   1ef68:	fe 4f       	sbci	r31, 0xFE	; 254
   1ef6a:	80 83       	st	Z, r24
   1ef6c:	8f 89       	ldd	r24, Y+23	; 0x17
   1ef6e:	98 8d       	ldd	r25, Y+24	; 0x18
   1ef70:	01 96       	adiw	r24, 0x01	; 1
   1ef72:	98 8f       	std	Y+24, r25	; 0x18
   1ef74:	8f 8b       	std	Y+23, r24	; 0x17
   1ef76:	8f 89       	ldd	r24, Y+23	; 0x17
   1ef78:	98 8d       	ldd	r25, Y+24	; 0x18
   1ef7a:	80 38       	cpi	r24, 0x80	; 128
   1ef7c:	91 05       	cpc	r25, r1
   1ef7e:	0c f4       	brge	.+2      	; 0x1ef82 <boot_removeTracePoint+0x272>
   1ef80:	9b cf       	rjmp	.-202    	; 0x1eeb8 <boot_removeTracePoint+0x1a8>
      }
   }

  
   endindex2 = 14 - endindex; 
   1ef82:	8e e0       	ldi	r24, 0x0E	; 14
   1ef84:	9e 85       	ldd	r25, Y+14	; 0x0e
   1ef86:	89 1b       	sub	r24, r25
   1ef88:	8d 87       	std	Y+13, r24	; 0x0d
   programmore = 0;
   1ef8a:	1f 86       	std	Y+15, r1	; 0x0f

  
   for ( i = 0; i < endindex2; i ++ )
   1ef8c:	18 8e       	std	Y+24, r1	; 0x18
   1ef8e:	1f 8a       	std	Y+23, r1	; 0x17
   1ef90:	19 c0       	rjmp	.+50     	; 0x1efc4 <boot_removeTracePoint+0x2b4>
   {
   //   instructions[ i ] = pagebuffer[ index + i ];
      pagebuffer[  i ] = buffer[ endindex + i ];
   1ef92:	4f 89       	ldd	r20, Y+23	; 0x17
   1ef94:	58 8d       	ldd	r21, Y+24	; 0x18
   1ef96:	8e 85       	ldd	r24, Y+14	; 0x0e
   1ef98:	28 2f       	mov	r18, r24
   1ef9a:	33 27       	eor	r19, r19
   1ef9c:	8f 89       	ldd	r24, Y+23	; 0x17
   1ef9e:	98 8d       	ldd	r25, Y+24	; 0x18
   1efa0:	82 0f       	add	r24, r18
   1efa2:	93 1f       	adc	r25, r19
   1efa4:	9c 01       	movw	r18, r24
   1efa6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1efa8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1efaa:	f9 01       	movw	r30, r18
   1efac:	e8 0f       	add	r30, r24
   1efae:	f9 1f       	adc	r31, r25
   1efb0:	80 81       	ld	r24, Z
   1efb2:	fa 01       	movw	r30, r20
   1efb4:	ea 53       	subi	r30, 0x3A	; 58
   1efb6:	fe 4f       	sbci	r31, 0xFE	; 254
   1efb8:	80 83       	st	Z, r24
   1efba:	8f 89       	ldd	r24, Y+23	; 0x17
   1efbc:	98 8d       	ldd	r25, Y+24	; 0x18
   1efbe:	01 96       	adiw	r24, 0x01	; 1
   1efc0:	98 8f       	std	Y+24, r25	; 0x18
   1efc2:	8f 8b       	std	Y+23, r24	; 0x17
   1efc4:	8d 85       	ldd	r24, Y+13	; 0x0d
   1efc6:	28 2f       	mov	r18, r24
   1efc8:	33 27       	eor	r19, r19
   1efca:	8f 89       	ldd	r24, Y+23	; 0x17
   1efcc:	98 8d       	ldd	r25, Y+24	; 0x18
   1efce:	82 17       	cp	r24, r18
   1efd0:	93 07       	cpc	r25, r19
   1efd2:	fc f2       	brlt	.-66     	; 0x1ef92 <boot_removeTracePoint+0x282>
   }

   reprogram( pagebuffer, pagenum );
   1efd4:	89 8d       	ldd	r24, Y+25	; 0x19
   1efd6:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1efd8:	26 ec       	ldi	r18, 0xC6	; 198
   1efda:	31 e0       	ldi	r19, 0x01	; 1
   1efdc:	bc 01       	movw	r22, r24
   1efde:	c9 01       	movw	r24, r18
   1efe0:	0e 94 66 f1 	call	0x1e2cc	; 0x1e2cc <reprogram>
   1efe4:	6d 96       	adiw	r28, 0x1d	; 29
   1efe6:	0f b6       	in	r0, 0x3f	; 63
   1efe8:	f8 94       	cli
   1efea:	de bf       	out	0x3e, r29	; 62
   1efec:	0f be       	out	0x3f, r0	; 63
   1efee:	cd bf       	out	0x3d, r28	; 61
   1eff0:	df 91       	pop	r29
   1eff2:	cf 91       	pop	r28
   1eff4:	08 95       	ret

0001eff6 <boot_removeTracePointLong>:



}




//insert a breakpoint by removing 8 bytes at the location specified by the pagenum and offset 
void  __attribute__(( section( ".bootloader" )))    boot_removeTracePointLong( uint16_t pagenum, uint8_t pageoffset, uint8_t *buffer) {
   1eff6:	cf 93       	push	r28
   1eff8:	df 93       	push	r29
   1effa:	cd b7       	in	r28, 0x3d	; 61
   1effc:	de b7       	in	r29, 0x3e	; 62
   1effe:	6d 97       	sbiw	r28, 0x1d	; 29
   1f000:	0f b6       	in	r0, 0x3f	; 63
   1f002:	f8 94       	cli
   1f004:	de bf       	out	0x3e, r29	; 62
   1f006:	0f be       	out	0x3f, r0	; 63
   1f008:	cd bf       	out	0x3d, r28	; 61
   1f00a:	9a 8f       	std	Y+26, r25	; 0x1a
   1f00c:	89 8f       	std	Y+25, r24	; 0x19
   1f00e:	6b 8f       	std	Y+27, r22	; 0x1b
   1f010:	5d 8f       	std	Y+29, r21	; 0x1d
   1f012:	4c 8f       	std	Y+28, r20	; 0x1c
   //first read the page, then change the string, then write back the page
   int i;
   uint32_t addr;
   uint8_t index;
   uint16_t data;
   uint8_t programmore = 0; 
   1f014:	1f 86       	std	Y+15, r1	; 0x0f
   uint8_t endindex, endindex2; 

  //Read the page content
   addr = ( uint32_t )pagenum *( uint32_t )SPM_PAGESIZE;
   1f016:	89 8d       	ldd	r24, Y+25	; 0x19
   1f018:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1f01a:	aa 27       	eor	r26, r26
   1f01c:	bb 27       	eor	r27, r27
   1f01e:	ba 2f       	mov	r27, r26
   1f020:	a9 2f       	mov	r26, r25
   1f022:	98 2f       	mov	r25, r24
   1f024:	88 27       	eor	r24, r24
   1f026:	8b 8b       	std	Y+19, r24	; 0x13
   1f028:	9c 8b       	std	Y+20, r25	; 0x14
   1f02a:	ad 8b       	std	Y+21, r26	; 0x15
   1f02c:	be 8b       	std	Y+22, r27	; 0x16

   //read the page content 

   for ( i = 0; i < 128; i ++ ) {
   1f02e:	18 8e       	std	Y+24, r1	; 0x18
   1f030:	1f 8a       	std	Y+23, r1	; 0x17
   1f032:	5f c0       	rjmp	.+190    	; 0x1f0f2 <boot_removeTracePointLong+0xfc>
      data = pgm_read_word_far( addr + (( uint32_t )i ) *2 );
   1f034:	8f 89       	ldd	r24, Y+23	; 0x17
   1f036:	98 8d       	ldd	r25, Y+24	; 0x18
   1f038:	aa 27       	eor	r26, r26
   1f03a:	97 fd       	sbrc	r25, 7
   1f03c:	a0 95       	com	r26
   1f03e:	ba 2f       	mov	r27, r26
   1f040:	9c 01       	movw	r18, r24
   1f042:	ad 01       	movw	r20, r26
   1f044:	22 0f       	add	r18, r18
   1f046:	33 1f       	adc	r19, r19
   1f048:	44 1f       	adc	r20, r20
   1f04a:	55 1f       	adc	r21, r21
   1f04c:	8b 89       	ldd	r24, Y+19	; 0x13
   1f04e:	9c 89       	ldd	r25, Y+20	; 0x14
   1f050:	ad 89       	ldd	r26, Y+21	; 0x15
   1f052:	be 89       	ldd	r27, Y+22	; 0x16
   1f054:	82 0f       	add	r24, r18
   1f056:	93 1f       	adc	r25, r19
   1f058:	a4 1f       	adc	r26, r20
   1f05a:	b5 1f       	adc	r27, r21
   1f05c:	89 87       	std	Y+9, r24	; 0x09
   1f05e:	9a 87       	std	Y+10, r25	; 0x0a
   1f060:	ab 87       	std	Y+11, r26	; 0x0b
   1f062:	bc 87       	std	Y+12, r27	; 0x0c
   1f064:	89 85       	ldd	r24, Y+9	; 0x09
   1f066:	9a 85       	ldd	r25, Y+10	; 0x0a
   1f068:	ab 85       	ldd	r26, Y+11	; 0x0b
   1f06a:	bc 85       	ldd	r27, Y+12	; 0x0c
   1f06c:	ab bf       	out	0x3b, r26	; 59
   1f06e:	fc 01       	movw	r30, r24
   1f070:	87 91       	elpm	r24, Z+
   1f072:	96 91       	elpm	r25, Z
   1f074:	98 87       	std	Y+8, r25	; 0x08
   1f076:	8f 83       	std	Y+7, r24	; 0x07
   1f078:	8f 81       	ldd	r24, Y+7	; 0x07
   1f07a:	98 85       	ldd	r25, Y+8	; 0x08
   1f07c:	99 8b       	std	Y+17, r25	; 0x11
   1f07e:	88 8b       	std	Y+16, r24	; 0x10
      if ( is_host_lsb()) {
   1f080:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   1f084:	00 97       	sbiw	r24, 0x00	; 0
   1f086:	c9 f0       	breq	.+50     	; 0x1f0ba <boot_removeTracePointLong+0xc4>
         pagebuffer[ i *2 ] = data % 256;
   1f088:	8f 89       	ldd	r24, Y+23	; 0x17
   1f08a:	98 8d       	ldd	r25, Y+24	; 0x18
   1f08c:	88 0f       	add	r24, r24
   1f08e:	99 1f       	adc	r25, r25
   1f090:	28 89       	ldd	r18, Y+16	; 0x10
   1f092:	fc 01       	movw	r30, r24
   1f094:	ea 53       	subi	r30, 0x3A	; 58
   1f096:	fe 4f       	sbci	r31, 0xFE	; 254
   1f098:	20 83       	st	Z, r18
         pagebuffer[ i *2+1 ] = data / 256;
   1f09a:	8f 89       	ldd	r24, Y+23	; 0x17
   1f09c:	98 8d       	ldd	r25, Y+24	; 0x18
   1f09e:	88 0f       	add	r24, r24
   1f0a0:	99 1f       	adc	r25, r25
   1f0a2:	9c 01       	movw	r18, r24
   1f0a4:	2f 5f       	subi	r18, 0xFF	; 255
   1f0a6:	3f 4f       	sbci	r19, 0xFF	; 255
   1f0a8:	88 89       	ldd	r24, Y+16	; 0x10
   1f0aa:	99 89       	ldd	r25, Y+17	; 0x11
   1f0ac:	89 2f       	mov	r24, r25
   1f0ae:	99 27       	eor	r25, r25
   1f0b0:	f9 01       	movw	r30, r18
   1f0b2:	ea 53       	subi	r30, 0x3A	; 58
   1f0b4:	fe 4f       	sbci	r31, 0xFE	; 254
   1f0b6:	80 83       	st	Z, r24
   1f0b8:	17 c0       	rjmp	.+46     	; 0x1f0e8 <boot_removeTracePointLong+0xf2>
      }
       else {
         pagebuffer[ i *2+1 ] = data % 256;
   1f0ba:	8f 89       	ldd	r24, Y+23	; 0x17
   1f0bc:	98 8d       	ldd	r25, Y+24	; 0x18
   1f0be:	88 0f       	add	r24, r24
   1f0c0:	99 1f       	adc	r25, r25
   1f0c2:	01 96       	adiw	r24, 0x01	; 1
   1f0c4:	28 89       	ldd	r18, Y+16	; 0x10
   1f0c6:	fc 01       	movw	r30, r24
   1f0c8:	ea 53       	subi	r30, 0x3A	; 58
   1f0ca:	fe 4f       	sbci	r31, 0xFE	; 254
   1f0cc:	20 83       	st	Z, r18
         pagebuffer[ i *2 ] = data / 256;
   1f0ce:	8f 89       	ldd	r24, Y+23	; 0x17
   1f0d0:	98 8d       	ldd	r25, Y+24	; 0x18
   1f0d2:	9c 01       	movw	r18, r24
   1f0d4:	22 0f       	add	r18, r18
   1f0d6:	33 1f       	adc	r19, r19
   1f0d8:	88 89       	ldd	r24, Y+16	; 0x10
   1f0da:	99 89       	ldd	r25, Y+17	; 0x11
   1f0dc:	89 2f       	mov	r24, r25
   1f0de:	99 27       	eor	r25, r25
   1f0e0:	f9 01       	movw	r30, r18
   1f0e2:	ea 53       	subi	r30, 0x3A	; 58
   1f0e4:	fe 4f       	sbci	r31, 0xFE	; 254
   1f0e6:	80 83       	st	Z, r24
   1f0e8:	8f 89       	ldd	r24, Y+23	; 0x17
   1f0ea:	98 8d       	ldd	r25, Y+24	; 0x18
   1f0ec:	01 96       	adiw	r24, 0x01	; 1
   1f0ee:	98 8f       	std	Y+24, r25	; 0x18
   1f0f0:	8f 8b       	std	Y+23, r24	; 0x17
   1f0f2:	8f 89       	ldd	r24, Y+23	; 0x17
   1f0f4:	98 8d       	ldd	r25, Y+24	; 0x18
   1f0f6:	80 38       	cpi	r24, 0x80	; 128
   1f0f8:	91 05       	cpc	r25, r1
   1f0fa:	0c f4       	brge	.+2      	; 0x1f0fe <boot_removeTracePointLong+0x108>
   1f0fc:	9b cf       	rjmp	.-202    	; 0x1f034 <boot_removeTracePointLong+0x3e>
      }
   }
   //assuming that the index as 228 or smaller, then enough for the 28 bytes othersise not 
   //say 234, then it is 22 bytes 

   index = pageoffset;
   1f0fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1f100:	8a 8b       	std	Y+18, r24	; 0x12
   programmore = 0; 
   1f102:	1f 86       	std	Y+15, r1	; 0x0f

   if (pageoffset > 240)
   1f104:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1f106:	81 3f       	cpi	r24, 0xF1	; 241
   1f108:	30 f0       	brcs	.+12     	; 0x1f116 <boot_removeTracePointLong+0x120>
   {
     programmore = 1; 
   1f10a:	81 e0       	ldi	r24, 0x01	; 1
   1f10c:	8f 87       	std	Y+15, r24	; 0x0f
	   endindex = (uint8_t)((uint16_t)256 - (uint16_t)pageoffset); 	
   1f10e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1f110:	81 95       	neg	r24
   1f112:	8e 87       	std	Y+14, r24	; 0x0e
   1f114:	03 c0       	rjmp	.+6      	; 0x1f11c <boot_removeTracePointLong+0x126>
   }
   else
   {
     programmore = 0; 
   1f116:	1f 86       	std	Y+15, r1	; 0x0f
	   endindex = 16; 
   1f118:	80 e1       	ldi	r24, 0x10	; 16
   1f11a:	8e 87       	std	Y+14, r24	; 0x0e
   
   }
   //for the 234 example, 22 here, then 0, 21 are copied 

   for ( i = 0; i < endindex; i ++ )
   1f11c:	18 8e       	std	Y+24, r1	; 0x18
   1f11e:	1f 8a       	std	Y+23, r1	; 0x17
   1f120:	1a c0       	rjmp	.+52     	; 0x1f156 <boot_removeTracePointLong+0x160>
    {
   //   instructions[ i ] = pagebuffer[ index + i ];
      pagebuffer[ index + i ] = buffer [ i ];
   1f122:	8a 89       	ldd	r24, Y+18	; 0x12
   1f124:	28 2f       	mov	r18, r24
   1f126:	33 27       	eor	r19, r19
   1f128:	8f 89       	ldd	r24, Y+23	; 0x17
   1f12a:	98 8d       	ldd	r25, Y+24	; 0x18
   1f12c:	a9 01       	movw	r20, r18
   1f12e:	48 0f       	add	r20, r24
   1f130:	59 1f       	adc	r21, r25
   1f132:	8f 89       	ldd	r24, Y+23	; 0x17
   1f134:	98 8d       	ldd	r25, Y+24	; 0x18
   1f136:	9c 01       	movw	r18, r24
   1f138:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1f13a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1f13c:	f9 01       	movw	r30, r18
   1f13e:	e8 0f       	add	r30, r24
   1f140:	f9 1f       	adc	r31, r25
   1f142:	80 81       	ld	r24, Z
   1f144:	fa 01       	movw	r30, r20
   1f146:	ea 53       	subi	r30, 0x3A	; 58
   1f148:	fe 4f       	sbci	r31, 0xFE	; 254
   1f14a:	80 83       	st	Z, r24
   1f14c:	8f 89       	ldd	r24, Y+23	; 0x17
   1f14e:	98 8d       	ldd	r25, Y+24	; 0x18
   1f150:	01 96       	adiw	r24, 0x01	; 1
   1f152:	98 8f       	std	Y+24, r25	; 0x18
   1f154:	8f 8b       	std	Y+23, r24	; 0x17
   1f156:	8e 85       	ldd	r24, Y+14	; 0x0e
   1f158:	28 2f       	mov	r18, r24
   1f15a:	33 27       	eor	r19, r19
   1f15c:	8f 89       	ldd	r24, Y+23	; 0x17
   1f15e:	98 8d       	ldd	r25, Y+24	; 0x18
   1f160:	82 17       	cp	r24, r18
   1f162:	93 07       	cpc	r25, r19
   1f164:	f4 f2       	brlt	.-68     	; 0x1f122 <boot_removeTracePointLong+0x12c>
   }

   reprogram( pagebuffer, pagenum );
   1f166:	89 8d       	ldd	r24, Y+25	; 0x19
   1f168:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1f16a:	26 ec       	ldi	r18, 0xC6	; 198
   1f16c:	31 e0       	ldi	r19, 0x01	; 1
   1f16e:	bc 01       	movw	r22, r24
   1f170:	c9 01       	movw	r24, r18
   1f172:	0e 94 66 f1 	call	0x1e2cc	; 0x1e2cc <reprogram>

   if (programmore == 0)
   1f176:	8f 85       	ldd	r24, Y+15	; 0x0f
   1f178:	88 23       	and	r24, r24
   1f17a:	09 f4       	brne	.+2      	; 0x1f17e <boot_removeTracePointLong+0x188>
   1f17c:	a7 c0       	rjmp	.+334    	; 0x1f2cc <boot_removeTracePointLong+0x2d6>
   return; 

   //next page

   addr = ( uint32_t )(pagenum+1) *( uint32_t )SPM_PAGESIZE;
   1f17e:	89 8d       	ldd	r24, Y+25	; 0x19
   1f180:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1f182:	01 96       	adiw	r24, 0x01	; 1
   1f184:	aa 27       	eor	r26, r26
   1f186:	bb 27       	eor	r27, r27
   1f188:	ba 2f       	mov	r27, r26
   1f18a:	a9 2f       	mov	r26, r25
   1f18c:	98 2f       	mov	r25, r24
   1f18e:	88 27       	eor	r24, r24
   1f190:	8b 8b       	std	Y+19, r24	; 0x13
   1f192:	9c 8b       	std	Y+20, r25	; 0x14
   1f194:	ad 8b       	std	Y+21, r26	; 0x15
   1f196:	be 8b       	std	Y+22, r27	; 0x16

   for ( i = 0; i < 128; i ++ ) {
   1f198:	18 8e       	std	Y+24, r1	; 0x18
   1f19a:	1f 8a       	std	Y+23, r1	; 0x17
   1f19c:	5f c0       	rjmp	.+190    	; 0x1f25c <boot_removeTracePointLong+0x266>
      data = pgm_read_word_far( addr + (( uint32_t )i ) *2 );
   1f19e:	8f 89       	ldd	r24, Y+23	; 0x17
   1f1a0:	98 8d       	ldd	r25, Y+24	; 0x18
   1f1a2:	aa 27       	eor	r26, r26
   1f1a4:	97 fd       	sbrc	r25, 7
   1f1a6:	a0 95       	com	r26
   1f1a8:	ba 2f       	mov	r27, r26
   1f1aa:	9c 01       	movw	r18, r24
   1f1ac:	ad 01       	movw	r20, r26
   1f1ae:	22 0f       	add	r18, r18
   1f1b0:	33 1f       	adc	r19, r19
   1f1b2:	44 1f       	adc	r20, r20
   1f1b4:	55 1f       	adc	r21, r21
   1f1b6:	8b 89       	ldd	r24, Y+19	; 0x13
   1f1b8:	9c 89       	ldd	r25, Y+20	; 0x14
   1f1ba:	ad 89       	ldd	r26, Y+21	; 0x15
   1f1bc:	be 89       	ldd	r27, Y+22	; 0x16
   1f1be:	82 0f       	add	r24, r18
   1f1c0:	93 1f       	adc	r25, r19
   1f1c2:	a4 1f       	adc	r26, r20
   1f1c4:	b5 1f       	adc	r27, r21
   1f1c6:	8b 83       	std	Y+3, r24	; 0x03
   1f1c8:	9c 83       	std	Y+4, r25	; 0x04
   1f1ca:	ad 83       	std	Y+5, r26	; 0x05
   1f1cc:	be 83       	std	Y+6, r27	; 0x06
   1f1ce:	8b 81       	ldd	r24, Y+3	; 0x03
   1f1d0:	9c 81       	ldd	r25, Y+4	; 0x04
   1f1d2:	ad 81       	ldd	r26, Y+5	; 0x05
   1f1d4:	be 81       	ldd	r27, Y+6	; 0x06
   1f1d6:	ab bf       	out	0x3b, r26	; 59
   1f1d8:	fc 01       	movw	r30, r24
   1f1da:	87 91       	elpm	r24, Z+
   1f1dc:	96 91       	elpm	r25, Z
   1f1de:	9a 83       	std	Y+2, r25	; 0x02
   1f1e0:	89 83       	std	Y+1, r24	; 0x01
   1f1e2:	89 81       	ldd	r24, Y+1	; 0x01
   1f1e4:	9a 81       	ldd	r25, Y+2	; 0x02
   1f1e6:	99 8b       	std	Y+17, r25	; 0x11
   1f1e8:	88 8b       	std	Y+16, r24	; 0x10
      if ( is_host_lsb()) {
   1f1ea:	0e 94 19 99 	call	0x13232	; 0x13232 <is_host_lsb>
   1f1ee:	00 97       	sbiw	r24, 0x00	; 0
   1f1f0:	c9 f0       	breq	.+50     	; 0x1f224 <boot_removeTracePointLong+0x22e>
         pagebuffer[ i *2 ] = data % 256;
   1f1f2:	8f 89       	ldd	r24, Y+23	; 0x17
   1f1f4:	98 8d       	ldd	r25, Y+24	; 0x18
   1f1f6:	88 0f       	add	r24, r24
   1f1f8:	99 1f       	adc	r25, r25
   1f1fa:	28 89       	ldd	r18, Y+16	; 0x10
   1f1fc:	fc 01       	movw	r30, r24
   1f1fe:	ea 53       	subi	r30, 0x3A	; 58
   1f200:	fe 4f       	sbci	r31, 0xFE	; 254
   1f202:	20 83       	st	Z, r18
         pagebuffer[ i *2+1 ] = data / 256;
   1f204:	8f 89       	ldd	r24, Y+23	; 0x17
   1f206:	98 8d       	ldd	r25, Y+24	; 0x18
   1f208:	88 0f       	add	r24, r24
   1f20a:	99 1f       	adc	r25, r25
   1f20c:	9c 01       	movw	r18, r24
   1f20e:	2f 5f       	subi	r18, 0xFF	; 255
   1f210:	3f 4f       	sbci	r19, 0xFF	; 255
   1f212:	88 89       	ldd	r24, Y+16	; 0x10
   1f214:	99 89       	ldd	r25, Y+17	; 0x11
   1f216:	89 2f       	mov	r24, r25
   1f218:	99 27       	eor	r25, r25
   1f21a:	f9 01       	movw	r30, r18
   1f21c:	ea 53       	subi	r30, 0x3A	; 58
   1f21e:	fe 4f       	sbci	r31, 0xFE	; 254
   1f220:	80 83       	st	Z, r24
   1f222:	17 c0       	rjmp	.+46     	; 0x1f252 <boot_removeTracePointLong+0x25c>
      }
       else {
         pagebuffer[ i *2+1 ] = data % 256;
   1f224:	8f 89       	ldd	r24, Y+23	; 0x17
   1f226:	98 8d       	ldd	r25, Y+24	; 0x18
   1f228:	88 0f       	add	r24, r24
   1f22a:	99 1f       	adc	r25, r25
   1f22c:	01 96       	adiw	r24, 0x01	; 1
   1f22e:	28 89       	ldd	r18, Y+16	; 0x10
   1f230:	fc 01       	movw	r30, r24
   1f232:	ea 53       	subi	r30, 0x3A	; 58
   1f234:	fe 4f       	sbci	r31, 0xFE	; 254
   1f236:	20 83       	st	Z, r18
         pagebuffer[ i *2 ] = data / 256;
   1f238:	8f 89       	ldd	r24, Y+23	; 0x17
   1f23a:	98 8d       	ldd	r25, Y+24	; 0x18
   1f23c:	9c 01       	movw	r18, r24
   1f23e:	22 0f       	add	r18, r18
   1f240:	33 1f       	adc	r19, r19
   1f242:	88 89       	ldd	r24, Y+16	; 0x10
   1f244:	99 89       	ldd	r25, Y+17	; 0x11
   1f246:	89 2f       	mov	r24, r25
   1f248:	99 27       	eor	r25, r25
   1f24a:	f9 01       	movw	r30, r18
   1f24c:	ea 53       	subi	r30, 0x3A	; 58
   1f24e:	fe 4f       	sbci	r31, 0xFE	; 254
   1f250:	80 83       	st	Z, r24
   1f252:	8f 89       	ldd	r24, Y+23	; 0x17
   1f254:	98 8d       	ldd	r25, Y+24	; 0x18
   1f256:	01 96       	adiw	r24, 0x01	; 1
   1f258:	98 8f       	std	Y+24, r25	; 0x18
   1f25a:	8f 8b       	std	Y+23, r24	; 0x17
   1f25c:	8f 89       	ldd	r24, Y+23	; 0x17
   1f25e:	98 8d       	ldd	r25, Y+24	; 0x18
   1f260:	80 38       	cpi	r24, 0x80	; 128
   1f262:	91 05       	cpc	r25, r1
   1f264:	0c f4       	brge	.+2      	; 0x1f268 <boot_removeTracePointLong+0x272>
   1f266:	9b cf       	rjmp	.-202    	; 0x1f19e <boot_removeTracePointLong+0x1a8>
      }
   }

  //PREVIOUSLY like 22 then the value is 6
   endindex2 = 16 - endindex; 
   1f268:	80 e1       	ldi	r24, 0x10	; 16
   1f26a:	9e 85       	ldd	r25, Y+14	; 0x0e
   1f26c:	89 1b       	sub	r24, r25
   1f26e:	8d 87       	std	Y+13, r24	; 0x0d
   programmore = 0;
   1f270:	1f 86       	std	Y+15, r1	; 0x0f

  
   for ( i = 0; i < endindex2; i ++ )
   1f272:	18 8e       	std	Y+24, r1	; 0x18
   1f274:	1f 8a       	std	Y+23, r1	; 0x17
   1f276:	19 c0       	rjmp	.+50     	; 0x1f2aa <boot_removeTracePointLong+0x2b4>
   {
   //   instructions[ i ] = pagebuffer[ index + i ];
      pagebuffer[  i ] = buffer[ endindex + i ];
   1f278:	4f 89       	ldd	r20, Y+23	; 0x17
   1f27a:	58 8d       	ldd	r21, Y+24	; 0x18
   1f27c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1f27e:	28 2f       	mov	r18, r24
   1f280:	33 27       	eor	r19, r19
   1f282:	8f 89       	ldd	r24, Y+23	; 0x17
   1f284:	98 8d       	ldd	r25, Y+24	; 0x18
   1f286:	82 0f       	add	r24, r18
   1f288:	93 1f       	adc	r25, r19
   1f28a:	9c 01       	movw	r18, r24
   1f28c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1f28e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1f290:	f9 01       	movw	r30, r18
   1f292:	e8 0f       	add	r30, r24
   1f294:	f9 1f       	adc	r31, r25
   1f296:	80 81       	ld	r24, Z
   1f298:	fa 01       	movw	r30, r20
   1f29a:	ea 53       	subi	r30, 0x3A	; 58
   1f29c:	fe 4f       	sbci	r31, 0xFE	; 254
   1f29e:	80 83       	st	Z, r24
   1f2a0:	8f 89       	ldd	r24, Y+23	; 0x17
   1f2a2:	98 8d       	ldd	r25, Y+24	; 0x18
   1f2a4:	01 96       	adiw	r24, 0x01	; 1
   1f2a6:	98 8f       	std	Y+24, r25	; 0x18
   1f2a8:	8f 8b       	std	Y+23, r24	; 0x17
   1f2aa:	8d 85       	ldd	r24, Y+13	; 0x0d
   1f2ac:	28 2f       	mov	r18, r24
   1f2ae:	33 27       	eor	r19, r19
   1f2b0:	8f 89       	ldd	r24, Y+23	; 0x17
   1f2b2:	98 8d       	ldd	r25, Y+24	; 0x18
   1f2b4:	82 17       	cp	r24, r18
   1f2b6:	93 07       	cpc	r25, r19
   1f2b8:	fc f2       	brlt	.-66     	; 0x1f278 <boot_removeTracePointLong+0x282>
   }

   reprogram( pagebuffer, pagenum+1);
   1f2ba:	89 8d       	ldd	r24, Y+25	; 0x19
   1f2bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
   1f2be:	01 96       	adiw	r24, 0x01	; 1
   1f2c0:	26 ec       	ldi	r18, 0xC6	; 198
   1f2c2:	31 e0       	ldi	r19, 0x01	; 1
   1f2c4:	bc 01       	movw	r22, r24
   1f2c6:	c9 01       	movw	r24, r18
   1f2c8:	0e 94 66 f1 	call	0x1e2cc	; 0x1e2cc <reprogram>
   1f2cc:	6d 96       	adiw	r28, 0x1d	; 29
   1f2ce:	0f b6       	in	r0, 0x3f	; 63
   1f2d0:	f8 94       	cli
   1f2d2:	de bf       	out	0x3e, r29	; 62
   1f2d4:	0f be       	out	0x3f, r0	; 63
   1f2d6:	cd bf       	out	0x3d, r28	; 61
   1f2d8:	df 91       	pop	r29
   1f2da:	cf 91       	pop	r28
   1f2dc:	08 95       	ret
Disassembly of section .systemcall:

0001d400 <yieldfunction>:
   1d400:	0e 94 57 2e 	call	0x5cae	; 0x5cae <thread_yield_logger>
   1d404:	00 00       	nop
   1d406:	08 95       	ret

0001d408 <greentogglefunction>:
   1d408:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <Leds_greenToggle_Logger>
   1d40c:	00 00       	nop
   1d40e:	08 95       	ret

0001d410 <redtogglefunction>:
   1d410:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <Leds_redToggle_Logger>
   1d414:	00 00       	nop
   1d416:	08 95       	ret

0001d418 <getCurrentThreadAddress>:
   1d418:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <getThreadAddress_Logger>
   1d41c:	00 00       	nop
   1d41e:	08 95       	ret

0001d420 <getRadioMutex>:
   1d420:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <getRadioMutexAddress_Logger>
   1d424:	00 00       	nop
   1d426:	08 95       	ret

0001d428 <getRadioSendFunction>:
   1d428:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <SocketRadioSend_Logger>
   1d42c:	00 00       	nop
   1d42e:	08 95       	ret

0001d430 <unlockMutex>:
   1d430:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <mutexUnlockFunction_Logger>
   1d434:	00 00       	nop
   1d436:	08 95       	ret

0001d438 <getCurrentThreadIndex>:
   1d438:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <getThreadIndexAddress_Logger>
   1d43c:	00 00       	nop
   1d43e:	08 95       	ret

0001d440 <getFilePathAddr>:
   1d440:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <getFilePathAddress_Logger>
   1d444:	00 00       	nop
   1d446:	08 95       	ret

0001d448 <getFileModeAddr>:
   1d448:	0e 94 2b 30 	call	0x6056	; 0x6056 <getFileModeAddress_Logger>
   1d44c:	00 00       	nop
   1d44e:	08 95       	ret

0001d450 <getFileMutexAddr>:
   1d450:	0e 94 68 30 	call	0x60d0	; 0x60d0 <getFileMutexAddress_Logger>
   1d454:	00 00       	nop
   1d456:	08 95       	ret

0001d458 <openFileSysCall>:
   1d458:	0e 94 8a 30 	call	0x6114	; 0x6114 <openFileTask_Logger>
   1d45c:	00 00       	nop
   1d45e:	08 95       	ret

0001d460 <closeFileSysCall>:
   1d460:	0e 94 ac 30 	call	0x6158	; 0x6158 <closeFileTask_Logger>
   1d464:	00 00       	nop
   1d466:	08 95       	ret

0001d468 <readFileSysCall>:
   1d468:	0e 94 ce 30 	call	0x619c	; 0x619c <readFileTask_Logger>
   1d46c:	00 00       	nop
   1d46e:	08 95       	ret

0001d470 <writeFileSysCall>:
   1d470:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <writeFileTask_Logger>
   1d474:	00 00       	nop
   1d476:	08 95       	ret

0001d478 <seekFileSysCall>:
   1d478:	0e 94 12 31 	call	0x6224	; 0x6224 <seekFileTask_Logger>
   1d47c:	00 00       	nop
   1d47e:	08 95       	ret

0001d480 <ADCLightSysCall>:
   1d480:	0e 94 34 31 	call	0x6268	; 0x6268 <ADCLight_Logger>
   1d484:	00 00       	nop
   1d486:	08 95       	ret

0001d488 <ADCTempSysCall>:
   1d488:	0e 94 56 31 	call	0x62ac	; 0x62ac <ADCTemp_Logger>
   1d48c:	00 00       	nop
   1d48e:	08 95       	ret

0001d490 <ADCMagXSysCall>:
   1d490:	0e 94 78 31 	call	0x62f0	; 0x62f0 <ADCMagX_Logger>
   1d494:	00 00       	nop
   1d496:	08 95       	ret

0001d498 <ADCMagYSysCall>:
   1d498:	0e 94 9a 31 	call	0x6334	; 0x6334 <ADCMagY_Logger>
   1d49c:	00 00       	nop
   1d49e:	08 95       	ret

0001d4a0 <ADCAccXSysCall>:
   1d4a0:	0e 94 bc 31 	call	0x6378	; 0x6378 <ADCAccX_Logger>
   1d4a4:	00 00       	nop
   1d4a6:	08 95       	ret

0001d4a8 <ADCAccYSysCall>:
   1d4a8:	0e 94 de 31 	call	0x63bc	; 0x63bc <ADCAccY_Logger>
   1d4ac:	00 00       	nop
   1d4ae:	08 95       	ret

0001d4b0 <postTaskSysCall>:
   1d4b0:	0e 94 21 32 	call	0x6442	; 0x6442 <postNewTask_Logger>
   1d4b4:	00 00       	nop
   1d4b6:	08 95       	ret

0001d4b8 <getCurrentRadioInfoAddress>:
   1d4b8:	0e 94 5e 32 	call	0x64bc	; 0x64bc <getRadioInfo_Logger>
   1d4bc:	00 00       	nop
   1d4be:	08 95       	ret

0001d4c0 <getCurrentRadioHandleAddress>:
   1d4c0:	0e 94 9b 32 	call	0x6536	; 0x6536 <getHandleInfo_Logger>
   1d4c4:	00 00       	nop
   1d4c6:	08 95       	ret

0001d4c8 <setCurrentRadioHandle>:
   1d4c8:	0e 94 bd 32 	call	0x657a	; 0x657a <syscall_registerEvent_Logger>
   1d4cc:	00 00       	nop
   1d4ce:	08 95       	ret

0001d4d0 <postThreadTask>:
   1d4d0:	0e 94 df 32 	call	0x65be	; 0x65be <postNewThreadTask_Logger>
   1d4d4:	00 00       	nop
   1d4d6:	08 95       	ret

0001d4d8 <debugInfoTask>:
   1d4d8:	0e 94 35 33 	call	0x666a	; 0x666a <debugInfoVariable_Logger>
   1d4dc:	00 00       	nop
   1d4de:	08 95       	ret

0001d4e0 <yellowtogglefunction>:
   1d4e0:	0e 94 57 33 	call	0x66ae	; 0x66ae <Leds_yellowToggle_Logger>
   1d4e4:	00 00       	nop
   1d4e6:	08 95       	ret

0001d4e8 <redonfunction>:
   1d4e8:	0e 94 79 33 	call	0x66f2	; 0x66f2 <Leds_redOn_Logger>
   1d4ec:	00 00       	nop
   1d4ee:	08 95       	ret

0001d4f0 <redofffunction>:
   1d4f0:	0e 94 9b 33 	call	0x6736	; 0x6736 <Leds_redOff_Logger>
   1d4f4:	00 00       	nop
   1d4f6:	08 95       	ret

0001d4f8 <yellowonfunction>:
   1d4f8:	0e 94 bd 33 	call	0x677a	; 0x677a <Leds_yellowOn_Logger>
   1d4fc:	00 00       	nop
   1d4fe:	08 95       	ret

0001d500 <yellowofffunction>:
   1d500:	0e 94 df 33 	call	0x67be	; 0x67be <Leds_yellowOff_Logger>
   1d504:	00 00       	nop
   1d506:	08 95       	ret

0001d508 <greenonfunction>:
   1d508:	0e 94 01 34 	call	0x6802	; 0x6802 <Leds_greenOn_Logger>
   1d50c:	00 00       	nop
   1d50e:	08 95       	ret

0001d510 <greenofffunction>:
   1d510:	0e 94 23 34 	call	0x6846	; 0x6846 <Leds_greenOff_Logger>
   1d514:	00 00       	nop
   1d516:	08 95       	ret

0001d518 <breakfunction>:
   1d518:	0e 94 45 34 	call	0x688a	; 0x688a <break_point_function_Logger>
   1d51c:	00 00       	nop
   1d51e:	08 95       	ret

0001d520 <getSerialMutex>:
   1d520:	0e 94 82 34 	call	0x6904	; 0x6904 <getSerialMutexAddress_Logger>
   1d524:	00 00       	nop
   1d526:	08 95       	ret

0001d528 <getCurrentSerialInfoAddress>:
   1d528:	0e 94 bf 34 	call	0x697e	; 0x697e <getSerialInfo_Logger>
   1d52c:	00 00       	nop
   1d52e:	08 95       	ret

0001d530 <getSerialSendFunction>:
   1d530:	0e 94 e1 34 	call	0x69c2	; 0x69c2 <SocketSerialSend_Logger>
   1d534:	00 00       	nop
   1d536:	08 95       	ret

0001d538 <getCurrentSerialHandleAddress>:
   1d538:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <getSerialHandleInfo_Logger>
   1d53c:	00 00       	nop
   1d53e:	08 95       	ret

0001d540 <setCurrentSerialHandleAddress>:
   1d540:	0e 94 40 35 	call	0x6a80	; 0x6a80 <syscall_registerEventSerial_Logger>
   1d544:	00 00       	nop
   1d546:	08 95       	ret

0001d548 <getCurrentEEPROMHandleAddress>:
   1d548:	0e 94 7d 35 	call	0x6afa	; 0x6afa <getEEPROMHandleInfo_Logger>
   1d54c:	00 00       	nop
   1d54e:	08 95       	ret

0001d550 <readFromEEPROM>:
   1d550:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <readEEPROMTask_Logger>
   1d554:	00 00       	nop
   1d556:	08 95       	ret

0001d558 <writeToEEPROM>:
   1d558:	0e 94 d3 35 	call	0x6ba6	; 0x6ba6 <writeEEPROMTask_Logger>
   1d55c:	00 00       	nop
   1d55e:	08 95       	ret

0001d560 <mallocFunction>:
   1d560:	0e 94 fc 35 	call	0x6bf8	; 0x6bf8 <getMalloc_Logger>
   1d564:	00 00       	nop
   1d566:	08 95       	ret

0001d568 <freeFunction>:
   1d568:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <freeMemory_Logger>
   1d56c:	00 00       	nop
   1d56e:	08 95       	ret

0001d570 <disableRadioState>:
   1d570:	0e 94 47 36 	call	0x6c8e	; 0x6c8e <disableSocketRadioState_Logger>
   1d574:	00 00       	nop
   1d576:	08 95       	ret

0001d578 <getRandomNumberSyscall>:
   1d578:	0e 94 84 36 	call	0x6d08	; 0x6d08 <getRandomTask_Logger>
   1d57c:	00 00       	nop
   1d57e:	08 95       	ret

0001d580 <setRadioFrequency>:
   1d580:	0e 94 a6 36 	call	0x6d4c	; 0x6d4c <setRadioFrequencyTask_Logger>
   1d584:	00 00       	nop
   1d586:	08 95       	ret

0001d588 <setRadioChannel>:
   1d588:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <setRadioChannelTask_Logger>
   1d58c:	00 00       	nop
   1d58e:	08 95       	ret

0001d590 <setRadioPower>:
   1d590:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <setRadioPowerTask_Logger>
   1d594:	00 00       	nop
   1d596:	08 95       	ret

0001d598 <getNodeID>:
   1d598:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <getNodeIdTask_Logger>
   1d59c:	00 00       	nop
   1d59e:	08 95       	ret

0001d5a0 <setNodeID>:
   1d5a0:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <setNodeIdTask_Logger>
   1d5a4:	00 00       	nop
   1d5a6:	08 95       	ret

0001d5a8 <getThreadControlBlockAddress>:
   1d5a8:	0e 94 a1 37 	call	0x6f42	; 0x6f42 <getThreadControlBlockAddress_Logger>
   1d5ac:	00 00       	nop
   1d5ae:	08 95       	ret

0001d5b0 <getThreadControlBlockMutex>:
   1d5b0:	0e 94 de 37 	call	0x6fbc	; 0x6fbc <getThreadControlBlockMutex_Logger>
   1d5b4:	00 00       	nop
   1d5b6:	08 95       	ret

0001d5b8 <createThreadSyscall>:
   1d5b8:	0e 94 00 38 	call	0x7000	; 0x7000 <createThreadSyscallTask_Logger>
   1d5bc:	00 00       	nop
   1d5be:	08 95       	ret

0001d5c0 <getInternalTracingBlockAddressSyscall>:
   1d5c0:	0e 94 22 38 	call	0x7044	; 0x7044 <getInternalTracingBlockAddress>
   1d5c4:	00 00       	nop
   1d5c6:	08 95       	ret

0001d5c8 <enableTracingSyscall>:
   1d5c8:	0e 94 88 9c 	call	0x13910	; 0x13910 <enabletracingfunction>
   1d5cc:	00 00       	nop
   1d5ce:	08 95       	ret

0001d5d0 <disableTracingSyscall>:
   1d5d0:	0e 94 92 9c 	call	0x13924	; 0x13924 <disabletracingfunction>
   1d5d4:	00 00       	nop
   1d5d6:	08 95       	ret

0001d5d8 <postTaskSysCallWithoutAnyLogging>:
   1d5d8:	0e 94 00 32 	call	0x6400	; 0x6400 <postNewTask_avr>
   1d5dc:	00 00       	nop
   1d5de:	08 95       	ret

0001d5e0 <postThreadTaskNoLogging>:
   1d5e0:	0e 94 ad 97 	call	0x12f5a	; 0x12f5a <postNewThreadTask>
   1d5e4:	00 00       	nop
   1d5e6:	08 95       	ret

0001d5e8 <jumpToTracePointSyscall>:
   1d5e8:	0e 94 d6 9c 	call	0x139ac	; 0x139ac <apptracepointfunction>
   1d5ec:	00 00       	nop
   1d5ee:	08 95       	ret

0001d5f0 <insertTracePointToUser>:
   1d5f0:	0e 94 3d 38 	call	0x707a	; 0x707a <insertTracePoint>
   1d5f4:	00 00       	nop
   1d5f6:	08 95       	ret

0001d5f8 <insertTracePointToUserLong>:
   1d5f8:	0e 94 5e 38 	call	0x70bc	; 0x70bc <insertTracePointLong>
   1d5fc:	00 00       	nop
   1d5fe:	08 95       	ret

0001d600 <terminateThreadFunction>:
   1d600:	0e 94 7f 38 	call	0x70fe	; 0x70fe <terminateThreadFunctionAvr>
   1d604:	00 00       	nop
   1d606:	08 95       	ret

0001d608 <setTimerFunction>:
   1d608:	0e 94 9f 38 	call	0x713e	; 0x713e <setupTimerTask>
   1d60c:	00 00       	nop
   1d60e:	08 95       	ret

0001d610 <getStackPtr>:
   1d610:	0e 94 cb 38 	call	0x7196	; 0x7196 <getStackPtrTask>
   1d614:	00 00       	nop
   1d616:	08 95       	ret

0001d618 <removeTracePoint>:
   1d618:	0e 94 e6 38 	call	0x71cc	; 0x71cc <removeTracePointTask>
   1d61c:	00 00       	nop
   1d61e:	08 95       	ret

0001d620 <removeTracePointLong>:


 }



void removeTracePointLong()__attribute__(( section( ".systemcall" )))__attribute__(( naked ));
void removeTracePointLong()
{
   1d620:	0e 94 26 39 	call	0x724c	; 0x724c <removeTracePointLongTask>
   removeTracePointLongTask();
   asm volatile( "nop":: );
   1d624:	00 00       	nop
   asm volatile( "ret":: );
   1d626:	08 95       	ret
