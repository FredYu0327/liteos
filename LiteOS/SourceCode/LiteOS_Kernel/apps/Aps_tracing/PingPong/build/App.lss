
App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800a5a  00014934  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00014600  00014600  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800a72  00800a72  000003e0  2**0
                  ALLOC
  3 .stab         00000408  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000084  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000001b  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000016c3  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002cf  00000000  00000000  00001f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004a6  00000000  00000000  00002239  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  000026df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000050c  00000000  00000000  0000277f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000133  00000000  00000000  00002c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00002dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00014600 <__vectors>:
   14600:	0c 94 46 a3 	jmp	0x1468c
   14604:	0c 94 63 a3 	jmp	0x146c6
   14608:	0c 94 63 a3 	jmp	0x146c6
   1460c:	0c 94 63 a3 	jmp	0x146c6
   14610:	0c 94 63 a3 	jmp	0x146c6
   14614:	0c 94 63 a3 	jmp	0x146c6
   14618:	0c 94 63 a3 	jmp	0x146c6
   1461c:	0c 94 63 a3 	jmp	0x146c6
   14620:	0c 94 63 a3 	jmp	0x146c6
   14624:	0c 94 63 a3 	jmp	0x146c6
   14628:	0c 94 63 a3 	jmp	0x146c6
   1462c:	0c 94 63 a3 	jmp	0x146c6
   14630:	0c 94 63 a3 	jmp	0x146c6
   14634:	0c 94 63 a3 	jmp	0x146c6
   14638:	0c 94 63 a3 	jmp	0x146c6
   1463c:	0c 94 63 a3 	jmp	0x146c6
   14640:	0c 94 63 a3 	jmp	0x146c6
   14644:	0c 94 63 a3 	jmp	0x146c6
   14648:	0c 94 63 a3 	jmp	0x146c6
   1464c:	0c 94 63 a3 	jmp	0x146c6
   14650:	0c 94 63 a3 	jmp	0x146c6
   14654:	0c 94 63 a3 	jmp	0x146c6
   14658:	0c 94 63 a3 	jmp	0x146c6
   1465c:	0c 94 63 a3 	jmp	0x146c6
   14660:	0c 94 63 a3 	jmp	0x146c6
   14664:	0c 94 63 a3 	jmp	0x146c6
   14668:	0c 94 63 a3 	jmp	0x146c6
   1466c:	0c 94 63 a3 	jmp	0x146c6
   14670:	0c 94 63 a3 	jmp	0x146c6
   14674:	0c 94 63 a3 	jmp	0x146c6
   14678:	0c 94 63 a3 	jmp	0x146c6
   1467c:	0c 94 63 a3 	jmp	0x146c6
   14680:	0c 94 63 a3 	jmp	0x146c6
   14684:	0c 94 63 a3 	jmp	0x146c6
   14688:	0c 94 63 a3 	jmp	0x146c6

0001468c <__ctors_end>:
   1468c:	11 24       	eor	r1, r1
   1468e:	1f be       	out	0x3f, r1	; 63
   14690:	ca e5       	ldi	r28, 0x5A	; 90
   14692:	db e0       	ldi	r29, 0x0B	; 11
   14694:	de bf       	out	0x3e, r29	; 62
   14696:	cd bf       	out	0x3d, r28	; 61

00014698 <__do_copy_data>:
   14698:	1a e0       	ldi	r17, 0x0A	; 10
   1469a:	aa e5       	ldi	r26, 0x5A	; 90
   1469c:	ba e0       	ldi	r27, 0x0A	; 10
   1469e:	e4 e3       	ldi	r30, 0x34	; 52
   146a0:	f9 e4       	ldi	r31, 0x49	; 73
   146a2:	01 e0       	ldi	r16, 0x01	; 1
   146a4:	0b bf       	out	0x3b, r16	; 59
   146a6:	02 c0       	rjmp	.+4      	; 0x146ac
   146a8:	07 90       	elpm	r0, Z+
   146aa:	0d 92       	st	X+, r0
   146ac:	a2 37       	cpi	r26, 0x72	; 114
   146ae:	b1 07       	cpc	r27, r17
   146b0:	d9 f7       	brne	.-10     	; 0x146a8

000146b2 <__do_clear_bss>:
   146b2:	1a e0       	ldi	r17, 0x0A	; 10
   146b4:	a2 e7       	ldi	r26, 0x72	; 114
   146b6:	ba e0       	ldi	r27, 0x0A	; 10
   146b8:	01 c0       	rjmp	.+2      	; 0x146bc

000146ba <.do_clear_bss_loop>:
   146ba:	1d 92       	st	X+, r1

000146bc <.do_clear_bss_start>:
   146bc:	ab 37       	cpi	r26, 0x7B	; 123
   146be:	b1 07       	cpc	r27, r17
   146c0:	e1 f7       	brne	.-8      	; 0x146ba
   146c2:	0c 94 d9 a3 	jmp	0x147b2

000146c6 <__bad_interrupt>:
   146c6:	0c 94 00 a3 	jmp	0x14600

000146ca <getCurrentThread.1394>:
thread **getCurrentThread()
{
   thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
   146ca:	4f 93       	push	r20
   146cc:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   146ce:	ec e0       	ldi	r30, 0x0C	; 12
   146d0:	fa ee       	ldi	r31, 0xEA	; 234
   146d2:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   146d4:	84 2f       	mov	r24, r20
   146d6:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
   146d8:	5f 91       	pop	r21
   146da:	4f 91       	pop	r20
   146dc:	08 95       	ret

000146de <Mutex_unlock.1430>:
void Mutex_unlock(mutex *m)
{
     
   void (*getaddrfp)(void) = (void (*)(void))MUTEX_UNLOCK_FUNCTION; 
   asm volatile("push r20" "\n\t"
   146de:	4f 93       	push	r20
   146e0:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
      
   asm volatile(" mov r20, %A0" "\n\t"
   146e2:	48 2f       	mov	r20, r24
   146e4:	59 2f       	mov	r21, r25
	              " mov r21, %B0" "\n\t"
				 :
				 :"r" (m)
                );

   getaddrfp();
   146e6:	e8 e1       	ldi	r30, 0x18	; 24
   146e8:	fa ee       	ldi	r31, 0xEA	; 234
   146ea:	09 95       	icall
   asm volatile( "pop r21" "\n\t"
   146ec:	5f 91       	pop	r21
   146ee:	4f 91       	pop	r20
   146f0:	08 95       	ret

000146f2 <yield.1393>:
	             "pop r20" "\n\t"
	              ::);
   return current_thread; 
}



uint8_t getCurrentThreadIndex()
{
   
   uint16_t index; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_INDEX_FUNCTION; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   asm volatile(" mov %A0, r20" "\n\t"
	             "mov %B0, r21" "\n\t"
				 :"=r" (index)
				 :
                );
    asm volatile("pop r21" "\n\t"
	             "pop r20" "\n\t"
	              ::);
   return (uint8_t)index; 
}


void sleepThread(int milliseconds)
{
/*
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 

   asm volatile("push r24" "\n\t"
	             "push r25" "\n\t"
	              ::);
   getaddrfp();     

   asm volatile(" mov %A0, r24" "\n\t"
	             "mov %B0, r25" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r24" "\n\t"
	             "pop r25" "\n\t"
	              ::);
 */
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 4;
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
   
   yield(); 
}


void hibernateThread()
{
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 5; 
   yield(); 
}


void yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
   146f2:	e0 e0       	ldi	r30, 0x00	; 0
   146f4:	fa ee       	ldi	r31, 0xEA	; 234
   146f6:	09 95       	icall
   146f8:	08 95       	ret

000146fa <Mutex_lock.1428>:
   146fa:	df 92       	push	r13
   146fc:	ef 92       	push	r14
   146fe:	ff 92       	push	r15
   14700:	0f 93       	push	r16
   14702:	1f 93       	push	r17
   14704:	cf 93       	push	r28
   14706:	df 93       	push	r29
   14708:	ec 01       	movw	r28, r24
   1470a:	0e 94 65 a3 	call	0x146ca
   1470e:	8c 01       	movw	r16, r24
   14710:	4f 93       	push	r20
   14712:	5f 93       	push	r21
   14714:	ec e1       	ldi	r30, 0x1C	; 28
   14716:	fa ee       	ldi	r31, 0xEA	; 234
   14718:	09 95       	icall
   1471a:	e4 2e       	mov	r14, r20
   1471c:	f5 2e       	mov	r15, r21
   1471e:	5f 91       	pop	r21
   14720:	4f 91       	pop	r20


_atomic_t _atomic_start(void)
{
  _atomic_t result = SREG;
   14722:	df b6       	in	r13, 0x3f	; 63
  asm volatile("cli" "\n\t"::);
   14724:	f8 94       	cli
   14726:	88 81       	ld	r24, Y
   14728:	88 23       	and	r24, r24
   1472a:	91 f0       	breq	.+36     	; 0x14750
   1472c:	d8 01       	movw	r26, r16
   1472e:	ed 91       	ld	r30, X+
   14730:	fc 91       	ld	r31, X
   14732:	11 97       	sbiw	r26, 0x01	; 1
   14734:	83 e0       	ldi	r24, 0x03	; 3
   14736:	82 83       	std	Z+2, r24	; 0x02
   14738:	ed 91       	ld	r30, X+
   1473a:	fc 91       	ld	r31, X
   1473c:	d4 8f       	std	Z+28, r29	; 0x1c
   1473e:	c3 8f       	std	Z+27, r28	; 0x1b
   14740:	89 81       	ldd	r24, Y+1	; 0x01
   14742:	8f 5f       	subi	r24, 0xFF	; 255
   14744:	89 83       	std	Y+1, r24	; 0x01
   14746:	0e 94 79 a3 	call	0x146f2
   1474a:	89 81       	ldd	r24, Y+1	; 0x01
   1474c:	81 50       	subi	r24, 0x01	; 1
   1474e:	89 83       	std	Y+1, r24	; 0x01
   14750:	81 e0       	ldi	r24, 0x01	; 1
   14752:	88 83       	st	Y, r24
   14754:	8e 2d       	mov	r24, r14
   14756:	99 27       	eor	r25, r25
   14758:	8a 83       	std	Y+2, r24	; 0x02
   1475a:	8d 2d       	mov	r24, r13
   1475c:	99 27       	eor	r25, r25
  return result;
}



void _atomic_end(_atomic_t oldSreg)
{
  SREG = oldSreg;
   1475e:	8f bf       	out	0x3f, r24	; 63
   14760:	df 91       	pop	r29
   14762:	cf 91       	pop	r28
   14764:	1f 91       	pop	r17
   14766:	0f 91       	pop	r16
   14768:	ff 90       	pop	r15
   1476a:	ef 90       	pop	r14
   1476c:	df 90       	pop	r13
   1476e:	08 95       	ret

00014770 <sleepThread.1392>:
   14770:	0f 93       	push	r16
   14772:	1f 93       	push	r17
   14774:	8c 01       	movw	r16, r24
   14776:	0e 94 65 a3 	call	0x146ca
   1477a:	dc 01       	movw	r26, r24
   1477c:	ed 91       	ld	r30, X+
   1477e:	fc 91       	ld	r31, X
   14780:	11 97       	sbiw	r26, 0x01	; 1
   14782:	84 e0       	ldi	r24, 0x04	; 4
   14784:	82 83       	std	Z+2, r24	; 0x02
   14786:	ed 91       	ld	r30, X+
   14788:	fc 91       	ld	r31, X
   1478a:	14 8f       	std	Z+28, r17	; 0x1c
   1478c:	03 8f       	std	Z+27, r16	; 0x1b
   1478e:	0e 94 79 a3 	call	0x146f2
   14792:	1f 91       	pop	r17
   14794:	0f 91       	pop	r16
   14796:	08 95       	ret

00014798 <syscall_postThreadTask.1400>:
}



void syscall_postThreadTask()
{
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK; 
 postthreadfp();                              
   14798:	e8 e6       	ldi	r30, 0x68	; 104
   1479a:	fa ee       	ldi	r31, 0xEA	; 234
   1479c:	09 95       	icall
   1479e:	08 95       	ret

000147a0 <wakeupMe.3126>:
//wakeup the current thread once an incoming packet arrives

void wakeupMe()
{
  mythread->state = STATE_ACTIVE;
   147a0:	e0 91 77 0a 	lds	r30, 0x0A77
   147a4:	f0 91 78 0a 	lds	r31, 0x0A78
   147a8:	82 e0       	ldi	r24, 0x02	; 2
   147aa:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   147ac:	0e 94 cc a3 	call	0x14798
   147b0:	08 95       	ret

000147b2 <main>:


 
int main()
{
   147b2:	cf 92       	push	r12
   147b4:	df 92       	push	r13
   147b6:	ef 92       	push	r14
   147b8:	ff 92       	push	r15
   147ba:	0f 93       	push	r16
   147bc:	1f 93       	push	r17
   147be:	cf 93       	push	r28
   147c0:	df 93       	push	r29
   147c2:	cd b7       	in	r28, 0x3d	; 61
   147c4:	de b7       	in	r29, 0x3e	; 62
   147c6:	6e 97       	sbiw	r28, 0x1e	; 30
   147c8:	0f b6       	in	r0, 0x3f	; 63
   147ca:	f8 94       	cli
   147cc:	de bf       	out	0x3e, r29	; 62
   147ce:	0f be       	out	0x3f, r0	; 63
   147d0:	cd bf       	out	0x3d, r28	; 61
   uint16_t nodeid; 
   uint8_t *content = "hello, can you hear me?";
   147d2:	8a e5       	ldi	r24, 0x5A	; 90
   147d4:	c8 2e       	mov	r12, r24
   147d6:	8a e0       	ldi	r24, 0x0A	; 10
   147d8:	d8 2e       	mov	r13, r24
   uint8_t receivemsg[30]; 
   
   __asm__ __volatile__("sei" ::); 
   147da:	78 94       	sei
}



int rnd()
{

	 int ret;
   void (*getrandomfp)(void) = (void (*)(void))GET_RANDOM_NUMBER_FUNCTION;
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getrandomfp();
   asm volatile(" mov %A0, r20" "\n\t"
	              "mov %B0, r21" "\n\t"
				 :"=r" (ret)
				 :
                );
   asm volatile("pop r21" "\n\t"
	             "pop r20" "\n\t"
	              ::);
   return ret;

}



uint16_t getnodeID()
	{

	   int ret;
	   void (*fp)(void) = (void (*)(void))GET_NODE_ID_FUNCTION;
	   asm volatile("push r20" "\n\t"
   147dc:	4f 93       	push	r20
   147de:	5f 93       	push	r21
					"push r21" "\n\t"
					::);
	   fp();
   147e0:	ec ec       	ldi	r30, 0xCC	; 204
   147e2:	fa ee       	ldi	r31, 0xEA	; 234
   147e4:	09 95       	icall
	   asm volatile(" mov %A0, r20" "\n\t"
   147e6:	84 2f       	mov	r24, r20
   147e8:	95 2f       	mov	r25, r21
					  "mov %B0, r21" "\n\t"
					 :"=r" (ret)
					 :
					);
	   asm volatile("pop r21" "\n\t"
   147ea:	5f 91       	pop	r21
   147ec:	4f 91       	pop	r20

   nodeid =  getnodeID();
   if (nodeid == 3)
   147ee:	03 97       	sbiw	r24, 0x03	; 3
   147f0:	09 f0       	breq	.+2      	; 0x147f4
   147f2:	37 c0       	rjmp	.+110    	; 0x14862
	             "pop r20" "\n\t"
	              ::);
   return;  
}



 


void Barrier_block(uint8_t type, uint8_t id){
   
    _atomic_t currentatomic;
	thread **current_thread; 

     
	current_thread = getCurrentThread(); 

    currentatomic = _atomic_start();
    
      (*current_thread)->state = STATE_IO;
      (*current_thread)->data.iostate.type = type;
      (*current_thread)->data.iostate.id = id;
      yield();
    
    _atomic_end(currentatomic);
}



mutex *getRadioMutexAddress()
{
   mutex *msend;   
   void (*getaddrfp)(void) = (void (*)(void))GET_RADIO_MUTEX_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
   147f4:	4f 93       	push	r20
   147f6:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   147f8:	e0 e1       	ldi	r30, 0x10	; 16
   147fa:	fa ee       	ldi	r31, 0xEA	; 234
   147fc:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   147fe:	e4 2e       	mov	r14, r20
   14800:	f5 2e       	mov	r15, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (msend)
				 :
                );
    asm volatile("pop r21" "\n\t"
   14802:	5f 91       	pop	r21
   14804:	4f 91       	pop	r20
   14806:	0e 94 65 a3 	call	0x146ca
   1480a:	4f 93       	push	r20
   1480c:	5f 93       	push	r21
   1480e:	ec e5       	ldi	r30, 0x5C	; 92
   14810:	fa ee       	ldi	r31, 0xEA	; 234
   14812:	09 95       	icall
   14814:	04 2f       	mov	r16, r20
   14816:	15 2f       	mov	r17, r21
   14818:	5f 91       	pop	r21
   1481a:	4f 91       	pop	r20
   1481c:	c7 01       	movw	r24, r14
   1481e:	0e 94 7d a3 	call	0x146fa
   14822:	8a e0       	ldi	r24, 0x0A	; 10
   14824:	90 e0       	ldi	r25, 0x00	; 0
   14826:	d8 01       	movw	r26, r16
   14828:	8d 93       	st	X+, r24
   1482a:	9c 93       	st	X, r25
   1482c:	8f ef       	ldi	r24, 0xFF	; 255
   1482e:	9f ef       	ldi	r25, 0xFF	; 255
   14830:	f8 01       	movw	r30, r16
   14832:	93 83       	std	Z+3, r25	; 0x03
   14834:	82 83       	std	Z+2, r24	; 0x02
   14836:	8a e0       	ldi	r24, 0x0A	; 10
   14838:	84 83       	std	Z+4, r24	; 0x04
   1483a:	d6 82       	std	Z+6, r13	; 0x06
   1483c:	c5 82       	std	Z+5, r12	; 0x05
   1483e:	e4 e1       	ldi	r30, 0x14	; 20
   14840:	fa ee       	ldi	r31, 0xEA	; 234
   14842:	09 95       	icall
   14844:	8e e1       	ldi	r24, 0x1E	; 30
   14846:	90 e0       	ldi	r25, 0x00	; 0
   14848:	0e 94 b8 a3 	call	0x14770
   1484c:	e8 eb       	ldi	r30, 0xB8	; 184
   1484e:	fa ee       	ldi	r31, 0xEA	; 234
   14850:	09 95       	icall
   14852:	c7 01       	movw	r24, r14
   14854:	0e 94 6f a3 	call	0x146de
   	{
       while (1)
       	{
         radioSend(10, 0xFFFF, 10, content); 
     		 sleepThread(1000); 
   14858:	88 ee       	ldi	r24, 0xE8	; 232
   1485a:	93 e0       	ldi	r25, 0x03	; 3
   1485c:	0e 94 b8 a3 	call	0x14770
   14860:	c9 cf       	rjmp	.-110    	; 0x147f4


}





int radioReceive(uint16_t port, uint8_t maxlength, uint8_t *msg)

{


   thread** current_thread;

   _atomic_t currentatomic;


   radiohandletype *radiohandleaddr;


   void (*getaddrfp)(void) = (void (*)(void))REGISTER_RADIO_RECEIVE_EVENT;

   current_thread = getCurrentThread();
   14862:	0e 94 65 a3 	call	0x146ca
   14866:	7c 01       	movw	r14, r24
   14868:	4f 93       	push	r20
   1486a:	5f 93       	push	r21
   1486c:	e0 e6       	ldi	r30, 0x60	; 96
   1486e:	fa ee       	ldi	r31, 0xEA	; 234
   14870:	09 95       	icall
   14872:	e4 2f       	mov	r30, r20
   14874:	f5 2f       	mov	r31, r21
   14876:	5f 91       	pop	r21
   14878:	4f 91       	pop	r20

   radiohandleaddr = getCurrentRadioHandleAddr();

   //set up the radiohandleaddr data structures

   radiohandleaddr->port = port;
   1487a:	8a e0       	ldi	r24, 0x0A	; 10
   1487c:	90 e0       	ldi	r25, 0x00	; 0
   1487e:	91 83       	std	Z+1, r25	; 0x01
   14880:	80 83       	st	Z, r24
   radiohandleaddr->maxLength = maxlength;
   14882:	8e e1       	ldi	r24, 0x1E	; 30
   14884:	82 83       	std	Z+2, r24	; 0x02
   radiohandleaddr->dataReady = &radioReceiveDataReady;
   14886:	82 e7       	ldi	r24, 0x72	; 114
   14888:	9a e0       	ldi	r25, 0x0A	; 10
   1488a:	94 83       	std	Z+4, r25	; 0x04
   1488c:	83 83       	std	Z+3, r24	; 0x03
   radiohandleaddr->data = msg;
   1488e:	ce 01       	movw	r24, r28
   14890:	01 96       	adiw	r24, 0x01	; 1
   14892:	96 83       	std	Z+6, r25	; 0x06
   14894:	85 83       	std	Z+5, r24	; 0x05
   radiohandleaddr->packetinfo = radioReceivePacketInfo;
   14896:	83 e7       	ldi	r24, 0x73	; 115
   14898:	9a e0       	ldi	r25, 0x0A	; 10
   1489a:	90 87       	std	Z+8, r25	; 0x08
   1489c:	87 83       	std	Z+7, r24	; 0x07
   radiohandleaddr->handlefunc = wakeupMe;
   1489e:	80 ed       	ldi	r24, 0xD0	; 208
   148a0:	93 ea       	ldi	r25, 0xA3	; 163
   148a2:	93 87       	std	Z+11, r25	; 0x0b
   148a4:	82 87       	std	Z+10, r24	; 0x0a
   148a6:	0f b7       	in	r16, 0x3f	; 63
   148a8:	f8 94       	cli


   //close the interrupt
	currentatomic = _atomic_start();
   148aa:	11 27       	eor	r17, r17

   //call the radio handle set to store the data structure into the handle vectors
    getaddrfp();
   148ac:	e4 e6       	ldi	r30, 0x64	; 100
   148ae:	fa ee       	ldi	r31, 0xEA	; 234
   148b0:	09 95       	icall


   //set up the current thread into sleep mode
   (*current_thread)->state = STATE_SLEEP;
   148b2:	d7 01       	movw	r26, r14
   148b4:	ed 91       	ld	r30, X+
   148b6:	fc 91       	ld	r31, X
   148b8:	11 97       	sbiw	r26, 0x01	; 1
   148ba:	85 e0       	ldi	r24, 0x05	; 5
   148bc:	82 83       	std	Z+2, r24	; 0x02

   //set up mythread so that later can wake up this thread
   mythread = *current_thread;
   148be:	8d 91       	ld	r24, X+
   148c0:	9c 91       	ld	r25, X
   148c2:	90 93 78 0a 	sts	0x0A78, r25
   148c6:	80 93 77 0a 	sts	0x0A77, r24
   148ca:	0f bf       	out	0x3f, r16	; 63


   //open the interrupt
   _atomic_end(currentatomic);

    yield();
   148cc:	0e 94 79 a3 	call	0x146f2
	             "pop r20" "\n\t"
	              ::);
    return msend; 
}
 


mutex *getSerialMutexAddress()
{
   mutex *msend;   

   void (*getaddrfp)(void) = (void (*)(void))GET_SERIAL_MUTEX_ADDRESS_FUNCTION;
   
   asm volatile("push r20" "\n\t"
   148d0:	4f 93       	push	r20
   148d2:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   148d4:	e0 e9       	ldi	r30, 0x90	; 144
   148d6:	fa ee       	ldi	r31, 0xEA	; 234
   148d8:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   148da:	e4 2e       	mov	r14, r20
   148dc:	f5 2e       	mov	r15, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (msend)
				 :
                );
   asm volatile("pop r21" "\n\t"
   148de:	5f 91       	pop	r21
   148e0:	4f 91       	pop	r20



   mserialsend = getSerialMutexAddress();
   current_thread = getCurrentThread();
   148e2:	0e 94 65 a3 	call	0x146ca
   148e6:	4f 93       	push	r20
   148e8:	5f 93       	push	r21
   148ea:	e4 e9       	ldi	r30, 0x94	; 148
   148ec:	fa ee       	ldi	r31, 0xEA	; 234
   148ee:	09 95       	icall
   148f0:	04 2f       	mov	r16, r20
   148f2:	15 2f       	mov	r17, r21
   148f4:	5f 91       	pop	r21
   148f6:	4f 91       	pop	r20
   serialinfoaddr = getCurrentSerialInfo();

   Mutex_lock(mserialsend);
   148f8:	c7 01       	movw	r24, r14
   148fa:	0e 94 7d a3 	call	0x146fa

   serialinfoaddr->socket_msg_len = length;
   148fe:	8e e1       	ldi	r24, 0x1E	; 30
   14900:	f8 01       	movw	r30, r16
   14902:	80 83       	st	Z, r24
   serialinfoaddr->socket_msg = msg;
   14904:	ce 01       	movw	r24, r28
   14906:	01 96       	adiw	r24, 0x01	; 1
   14908:	92 83       	std	Z+2, r25	; 0x02
   1490a:	81 83       	std	Z+1, r24	; 0x01
   1490c:	e8 e9       	ldi	r30, 0x98	; 152
   1490e:	fa ee       	ldi	r31, 0xEA	; 234
   14910:	09 95       	icall


   sendSerialMsg();

   sleepThread(30);
   14912:	8e e1       	ldi	r24, 0x1E	; 30
   14914:	90 e0       	ldi	r25, 0x00	; 0
   14916:	0e 94 b8 a3 	call	0x14770


   Mutex_unlock(mserialsend);
   1491a:	c7 01       	movw	r24, r14
   1491c:	0e 94 6f a3 	call	0x146de
   14920:	a0 cf       	rjmp	.-192    	; 0x14862

00014922 <wakeupMeSerial.3413>:

   return;
}



//wakeup the current thread once an incoming packet arrives

void wakeupMeSerial()
{
  mythreadserial->state = STATE_ACTIVE;
   14922:	e0 91 79 0a 	lds	r30, 0x0A79
   14926:	f0 91 7a 0a 	lds	r31, 0x0A7A
   1492a:	82 e0       	ldi	r24, 0x02	; 2
   1492c:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   1492e:	0e 94 cc a3 	call	0x14798
   14932:	08 95       	ret
