
App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800bea  000173f6  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f6  00016d00  00016d00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c0  00800bf6  00800bf6  00000796  2**0
                  ALLOC
  3 .stab         00000408  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000084  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000001b  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000212e  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002eb  00000000  00000000  00002d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000008b0  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000130  00000000  00000000  00003928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000619  00000000  00000000  00003a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002b4  00000000  00000000  00004071  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00004325  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00016d00 <__vectors>:
   16d00:	0c 94 c6 b6 	jmp	0x16d8c
   16d04:	0c 94 e3 b6 	jmp	0x16dc6
   16d08:	0c 94 e3 b6 	jmp	0x16dc6
   16d0c:	0c 94 e3 b6 	jmp	0x16dc6
   16d10:	0c 94 e3 b6 	jmp	0x16dc6
   16d14:	0c 94 e3 b6 	jmp	0x16dc6
   16d18:	0c 94 e3 b6 	jmp	0x16dc6
   16d1c:	0c 94 e3 b6 	jmp	0x16dc6
   16d20:	0c 94 e3 b6 	jmp	0x16dc6
   16d24:	0c 94 e3 b6 	jmp	0x16dc6
   16d28:	0c 94 e3 b6 	jmp	0x16dc6
   16d2c:	0c 94 e3 b6 	jmp	0x16dc6
   16d30:	0c 94 e3 b6 	jmp	0x16dc6
   16d34:	0c 94 e3 b6 	jmp	0x16dc6
   16d38:	0c 94 e3 b6 	jmp	0x16dc6
   16d3c:	0c 94 e3 b6 	jmp	0x16dc6
   16d40:	0c 94 e3 b6 	jmp	0x16dc6
   16d44:	0c 94 e3 b6 	jmp	0x16dc6
   16d48:	0c 94 e3 b6 	jmp	0x16dc6
   16d4c:	0c 94 e3 b6 	jmp	0x16dc6
   16d50:	0c 94 e3 b6 	jmp	0x16dc6
   16d54:	0c 94 e3 b6 	jmp	0x16dc6
   16d58:	0c 94 e3 b6 	jmp	0x16dc6
   16d5c:	0c 94 e3 b6 	jmp	0x16dc6
   16d60:	0c 94 e3 b6 	jmp	0x16dc6
   16d64:	0c 94 e3 b6 	jmp	0x16dc6
   16d68:	0c 94 e3 b6 	jmp	0x16dc6
   16d6c:	0c 94 e3 b6 	jmp	0x16dc6
   16d70:	0c 94 e3 b6 	jmp	0x16dc6
   16d74:	0c 94 e3 b6 	jmp	0x16dc6
   16d78:	0c 94 e3 b6 	jmp	0x16dc6
   16d7c:	0c 94 e3 b6 	jmp	0x16dc6
   16d80:	0c 94 e3 b6 	jmp	0x16dc6
   16d84:	0c 94 e3 b6 	jmp	0x16dc6
   16d88:	0c 94 e3 b6 	jmp	0x16dc6

00016d8c <__ctors_end>:
   16d8c:	11 24       	eor	r1, r1
   16d8e:	1f be       	out	0x3f, r1	; 63
   16d90:	ca e7       	ldi	r28, 0x7A	; 122
   16d92:	dd e0       	ldi	r29, 0x0D	; 13
   16d94:	de bf       	out	0x3e, r29	; 62
   16d96:	cd bf       	out	0x3d, r28	; 61

00016d98 <__do_copy_data>:
   16d98:	1b e0       	ldi	r17, 0x0B	; 11
   16d9a:	aa ee       	ldi	r26, 0xEA	; 234
   16d9c:	bb e0       	ldi	r27, 0x0B	; 11
   16d9e:	e6 ef       	ldi	r30, 0xF6	; 246
   16da0:	f3 e7       	ldi	r31, 0x73	; 115
   16da2:	01 e0       	ldi	r16, 0x01	; 1
   16da4:	0b bf       	out	0x3b, r16	; 59
   16da6:	02 c0       	rjmp	.+4      	; 0x16dac
   16da8:	07 90       	elpm	r0, Z+
   16daa:	0d 92       	st	X+, r0
   16dac:	a6 3f       	cpi	r26, 0xF6	; 246
   16dae:	b1 07       	cpc	r27, r17
   16db0:	d9 f7       	brne	.-10     	; 0x16da8

00016db2 <__do_clear_bss>:
   16db2:	1c e0       	ldi	r17, 0x0C	; 12
   16db4:	a6 ef       	ldi	r26, 0xF6	; 246
   16db6:	bb e0       	ldi	r27, 0x0B	; 11
   16db8:	01 c0       	rjmp	.+2      	; 0x16dbc

00016dba <.do_clear_bss_loop>:
   16dba:	1d 92       	st	X+, r1

00016dbc <.do_clear_bss_start>:
   16dbc:	a6 3b       	cpi	r26, 0xB6	; 182
   16dbe:	b1 07       	cpc	r27, r17
   16dc0:	e1 f7       	brne	.-8      	; 0x16dba
   16dc2:	0c 94 db b7 	jmp	0x16fb6

00016dc6 <__bad_interrupt>:
   16dc6:	0c 94 80 b6 	jmp	0x16d00

00016dca <getCurrentThread.1403>:
thread **getCurrentThread()
{
   thread **current_thread; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 
   asm volatile("push r20" "\n\t"
   16dca:	4f 93       	push	r20
   16dcc:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   16dce:	ec e0       	ldi	r30, 0x0C	; 12
   16dd0:	fa ee       	ldi	r31, 0xEA	; 234
   16dd2:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   16dd4:	84 2f       	mov	r24, r20
   16dd6:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r21" "\n\t"
   16dd8:	5f 91       	pop	r21
   16dda:	4f 91       	pop	r20
   16ddc:	08 95       	ret

00016dde <cleanUpTraceFunction.1624>:

void disableTracing()
{     
   void (*getaddrfp)(void) = (void (*)(void))DISABLE_TRACING_SYSCALL;
   getaddrfp();
   16dde:	e8 ee       	ldi	r30, 0xE8	; 232
   16de0:	fa ee       	ldi	r31, 0xEA	; 234
   16de2:	09 95       	icall
   16de4:	08 95       	ret

00016de6 <syscall_postThreadTask_nologging.1425>:
	             "pop r20" "\n\t"
	              ::);
   return current_thread; 
}


void **getKernelStackPtr()
	{
   void **ptr;
   void (*getaddrfp)(void) = (void (*)(void))GET_KERNEL_STACK_PTR_ADDRESS; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   asm volatile(" mov %A0, r20" "\n\t"
	             "mov %B0, r21" "\n\t"
				 :"=r" (ptr)
				 :
                );
    asm volatile("pop r21" "\n\t"
	             "pop r20" "\n\t"
	              ::);
   return ptr; 
}







uint8_t getCurrentThreadIndex()
{
   
   uint16_t index; 
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_INDEX_FUNCTION; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   asm volatile(" mov %A0, r20" "\n\t"
	             "mov %B0, r21" "\n\t"
				 :"=r" (index)
				 :
                );
    asm volatile("pop r21" "\n\t"
	             "pop r20" "\n\t"
	              ::);
   return (uint8_t)index; 
}


void sleepThread(int milliseconds)
{
/*
   void (*getaddrfp)(void) = (void (*)(void))GET_CURRENT_THREAD_ADDRESS_FUNCTION; 

   asm volatile("push r24" "\n\t"
	             "push r25" "\n\t"
	              ::);
   getaddrfp();     

   asm volatile(" mov %A0, r24" "\n\t"
	             "mov %B0, r25" "\n\t"
				 :"=r" (current_thread)
				 :
                );
    asm volatile("pop r24" "\n\t"
	             "pop r25" "\n\t"
	              ::);
 */
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 4;
   (*current_thread)->data.sleepstate.sleeptime = milliseconds;
   
   yield(); 
}


void hibernateThread()
{
 
   thread **current_thread; 
   current_thread = getCurrentThread(); 
     
   (*current_thread)->state = 5; 
   yield(); 
}


void yield()
{
 void (*yieldfp)(void) = (void (*)(void))YIELD_FUNCTION; 
 yieldfp();                              
}



void syscall_postThreadTask()
{
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK; 
 postthreadfp();                              
}

void syscall_postThreadTask_nologging()
{
 void (*postthreadfp)(void) = (void (*)(void))POST_NEW_THREAD_TASK_NOLOG; 
 postthreadfp();                              
   16de6:	e0 ef       	ldi	r30, 0xF0	; 240
   16de8:	fa ee       	ldi	r31, 0xEA	; 234
   16dea:	09 95       	icall
   16dec:	08 95       	ret

00016dee <getCurrentThreadIndex.1404>:
   16dee:	4f 93       	push	r20
   16df0:	5f 93       	push	r21
   16df2:	ec e1       	ldi	r30, 0x1C	; 28
   16df4:	fa ee       	ldi	r31, 0xEA	; 234
   16df6:	09 95       	icall
   16df8:	84 2f       	mov	r24, r20
   16dfa:	95 2f       	mov	r25, r21
   16dfc:	5f 91       	pop	r21
   16dfe:	4f 91       	pop	r20
   16e00:	99 27       	eor	r25, r25
   16e02:	08 95       	ret

00016e04 <mfseek.1516>:



void mfseek(MYFILE *fp, int offset, int position)
{
   16e04:	af 92       	push	r10
   16e06:	bf 92       	push	r11
   16e08:	cf 92       	push	r12
   16e0a:	df 92       	push	r13
   16e0c:	ef 92       	push	r14
   16e0e:	ff 92       	push	r15
   16e10:	0f 93       	push	r16
   16e12:	1f 93       	push	r17
   16e14:	7c 01       	movw	r14, r24
   16e16:	6b 01       	movw	r12, r22
   16e18:	5a 01       	movw	r10, r20
   uint8_t currentthreadindex;
   thread** current_thread;

   current_thread = getCurrentThread();
   16e1a:	0e 94 e5 b6 	call	0x16dca
   16e1e:	8c 01       	movw	r16, r24
   currentthreadindex = getCurrentThreadIndex();
   16e20:	0e 94 f7 b6 	call	0x16dee

   (*current_thread)->filedata.fileseekstate.fileptr = (uint8_t*)fp;
   16e24:	d8 01       	movw	r26, r16
   16e26:	ed 91       	ld	r30, X+
   16e28:	fc 91       	ld	r31, X
   16e2a:	11 97       	sbiw	r26, 0x01	; 1
   16e2c:	f0 a2       	std	Z+32, r15	; 0x20
   16e2e:	e7 8e       	std	Z+31, r14	; 0x1f
   (*current_thread)->filedata.fileseekstate.offset = offset;
   16e30:	ed 91       	ld	r30, X+
   16e32:	fc 91       	ld	r31, X
   16e34:	11 97       	sbiw	r26, 0x01	; 1
   16e36:	d2 a2       	std	Z+34, r13	; 0x22
   16e38:	c1 a2       	std	Z+33, r12	; 0x21
   (*current_thread)->filedata.fileseekstate.position = position;
   16e3a:	ed 91       	ld	r30, X+
   16e3c:	fc 91       	ld	r31, X
   16e3e:	b4 a2       	std	Z+36, r11	; 0x24
   16e40:	a3 a2       	std	Z+35, r10	; 0x23
   16e42:	ec e3       	ldi	r30, 0x3C	; 60
   16e44:	fa ee       	ldi	r31, 0xEA	; 234
   16e46:	09 95       	icall
   16e48:	1f 91       	pop	r17
   16e4a:	0f 91       	pop	r16
   16e4c:	ff 90       	pop	r15
   16e4e:	ef 90       	pop	r14
   16e50:	df 90       	pop	r13
   16e52:	cf 90       	pop	r12
   16e54:	bf 90       	pop	r11
   16e56:	af 90       	pop	r10
   16e58:	08 95       	ret

00016e5a <getFileMutexAddress.1444>:
mutex *getFileMutexAddress()
{
   mutex *mfile;   
   void (*getaddrfp)(void) = (void (*)(void))GET_FILE_MUTEX_ADDRESS; 
   asm volatile("push r20" "\n\t"
   16e5a:	4f 93       	push	r20
   16e5c:	5f 93       	push	r21
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   16e5e:	e8 e2       	ldi	r30, 0x28	; 40
   16e60:	fa ee       	ldi	r31, 0xEA	; 234
   16e62:	09 95       	icall
   asm volatile(" mov %A0, r20" "\n\t"
   16e64:	84 2f       	mov	r24, r20
   16e66:	95 2f       	mov	r25, r21
	             "mov %B0, r21" "\n\t"
				 :"=r" (mfile)
				 :
                );
    asm volatile("pop r21" "\n\t"
   16e68:	5f 91       	pop	r21
   16e6a:	4f 91       	pop	r20
   16e6c:	08 95       	ret

00016e6e <Mutex_unlock.1438>:
   16e6e:	4f 93       	push	r20
   16e70:	5f 93       	push	r21
   16e72:	48 2f       	mov	r20, r24
   16e74:	59 2f       	mov	r21, r25
   16e76:	e8 e1       	ldi	r30, 0x18	; 24
   16e78:	fa ee       	ldi	r31, 0xEA	; 234
   16e7a:	09 95       	icall
   16e7c:	5f 91       	pop	r21
   16e7e:	4f 91       	pop	r20
   16e80:	08 95       	ret

00016e82 <mystrcpy.1453>:
}


void mystrcpy(char *dest, const char *src)
{
   16e82:	dc 01       	movw	r26, r24
   16e84:	fb 01       	movw	r30, r22
   16e86:	02 c0       	rjmp	.+4      	; 0x16e8c
	int i;
	i = 0;
	while (src[i]!='\0')
	{ dest[i] = src[i];
   16e88:	8d 93       	st	X+, r24
   16e8a:	31 96       	adiw	r30, 0x01	; 1
   16e8c:	80 81       	ld	r24, Z
   16e8e:	88 23       	and	r24, r24
   16e90:	d9 f7       	brne	.-10     	; 0x16e88
	i++;
	}
	dest[i] = '\0';
   16e92:	1c 92       	st	X, r1
   16e94:	08 95       	ret

00016e96 <yield.1402>:
   16e96:	e0 e0       	ldi	r30, 0x00	; 0
   16e98:	fa ee       	ldi	r31, 0xEA	; 234
   16e9a:	09 95       	icall
   16e9c:	08 95       	ret

00016e9e <Barrier_block.1443>:
   16e9e:	ef 92       	push	r14
   16ea0:	ff 92       	push	r15
   16ea2:	0f 93       	push	r16
   16ea4:	1f 93       	push	r17
   16ea6:	f8 2e       	mov	r15, r24
   16ea8:	e6 2e       	mov	r14, r22
   16eaa:	0e 94 e5 b6 	call	0x16dca
   16eae:	dc 01       	movw	r26, r24


_atomic_t _atomic_start(void)
{
  _atomic_t result = SREG;
   16eb0:	0f b7       	in	r16, 0x3f	; 63
  asm volatile("cli" "\n\t"::);
   16eb2:	f8 94       	cli
   16eb4:	11 27       	eor	r17, r17
   16eb6:	ed 91       	ld	r30, X+
   16eb8:	fc 91       	ld	r31, X
   16eba:	11 97       	sbiw	r26, 0x01	; 1
   16ebc:	86 e0       	ldi	r24, 0x06	; 6
   16ebe:	82 83       	std	Z+2, r24	; 0x02
   16ec0:	ed 91       	ld	r30, X+
   16ec2:	fc 91       	ld	r31, X
   16ec4:	11 97       	sbiw	r26, 0x01	; 1
   16ec6:	f3 8e       	std	Z+27, r15	; 0x1b
   16ec8:	ed 91       	ld	r30, X+
   16eca:	fc 91       	ld	r31, X
   16ecc:	e4 8e       	std	Z+28, r14	; 0x1c
   16ece:	0e 94 4b b7 	call	0x16e96
  return result;
}



void _atomic_end(_atomic_t oldSreg)
{
  SREG = oldSreg;
   16ed2:	0f bf       	out	0x3f, r16	; 63
   16ed4:	1f 91       	pop	r17
   16ed6:	0f 91       	pop	r16
   16ed8:	ff 90       	pop	r15
   16eda:	ef 90       	pop	r14
   16edc:	08 95       	ret

00016ede <Mutex_lock.1436>:
   16ede:	ef 92       	push	r14
   16ee0:	ff 92       	push	r15
   16ee2:	0f 93       	push	r16
   16ee4:	1f 93       	push	r17
   16ee6:	cf 93       	push	r28
   16ee8:	df 93       	push	r29
   16eea:	ec 01       	movw	r28, r24
   16eec:	0e 94 e5 b6 	call	0x16dca
   16ef0:	8c 01       	movw	r16, r24
   16ef2:	0e 94 f7 b6 	call	0x16dee
   16ef6:	e8 2e       	mov	r14, r24
   16ef8:	ff b6       	in	r15, 0x3f	; 63
   16efa:	f8 94       	cli
   16efc:	88 81       	ld	r24, Y
   16efe:	88 23       	and	r24, r24
   16f00:	91 f0       	breq	.+36     	; 0x16f26
   16f02:	d8 01       	movw	r26, r16
   16f04:	ed 91       	ld	r30, X+
   16f06:	fc 91       	ld	r31, X
   16f08:	11 97       	sbiw	r26, 0x01	; 1
   16f0a:	83 e0       	ldi	r24, 0x03	; 3
   16f0c:	82 83       	std	Z+2, r24	; 0x02
   16f0e:	ed 91       	ld	r30, X+
   16f10:	fc 91       	ld	r31, X
   16f12:	d4 8f       	std	Z+28, r29	; 0x1c
   16f14:	c3 8f       	std	Z+27, r28	; 0x1b
   16f16:	89 81       	ldd	r24, Y+1	; 0x01
   16f18:	8f 5f       	subi	r24, 0xFF	; 255
   16f1a:	89 83       	std	Y+1, r24	; 0x01
   16f1c:	0e 94 4b b7 	call	0x16e96
   16f20:	89 81       	ldd	r24, Y+1	; 0x01
   16f22:	81 50       	subi	r24, 0x01	; 1
   16f24:	89 83       	std	Y+1, r24	; 0x01
   16f26:	81 e0       	ldi	r24, 0x01	; 1
   16f28:	88 83       	st	Y, r24
   16f2a:	ea 82       	std	Y+2, r14	; 0x02
   16f2c:	8f 2d       	mov	r24, r15
   16f2e:	99 27       	eor	r25, r25
   16f30:	8f bf       	out	0x3f, r24	; 63
   16f32:	df 91       	pop	r29
   16f34:	cf 91       	pop	r28
   16f36:	1f 91       	pop	r17
   16f38:	0f 91       	pop	r16
   16f3a:	ff 90       	pop	r15
   16f3c:	ef 90       	pop	r14
   16f3e:	08 95       	ret

00016f40 <mfwrite.1512>:
   16f40:	8f 92       	push	r8
   16f42:	9f 92       	push	r9
   16f44:	af 92       	push	r10
   16f46:	bf 92       	push	r11
   16f48:	cf 92       	push	r12
   16f4a:	df 92       	push	r13
   16f4c:	ef 92       	push	r14
   16f4e:	ff 92       	push	r15
   16f50:	0f 93       	push	r16
   16f52:	1f 93       	push	r17
   16f54:	6c 01       	movw	r12, r24
   16f56:	5b 01       	movw	r10, r22
   16f58:	4a 01       	movw	r8, r20
   16f5a:	0e 94 e5 b6 	call	0x16dca
   16f5e:	8c 01       	movw	r16, r24
   16f60:	0e 94 f7 b6 	call	0x16dee
   16f64:	0e 94 2d b7 	call	0x16e5a
   16f68:	7c 01       	movw	r14, r24
   16f6a:	0e 94 6f b7 	call	0x16ede
   16f6e:	d8 01       	movw	r26, r16
   16f70:	ed 91       	ld	r30, X+
   16f72:	fc 91       	ld	r31, X
   16f74:	11 97       	sbiw	r26, 0x01	; 1
   16f76:	d0 a2       	std	Z+32, r13	; 0x20
   16f78:	c7 8e       	std	Z+31, r12	; 0x1f
   16f7a:	ed 91       	ld	r30, X+
   16f7c:	fc 91       	ld	r31, X
   16f7e:	11 97       	sbiw	r26, 0x01	; 1
   16f80:	b2 a2       	std	Z+34, r11	; 0x22
   16f82:	a1 a2       	std	Z+33, r10	; 0x21
   16f84:	ed 91       	ld	r30, X+
   16f86:	fc 91       	ld	r31, X
   16f88:	94 a2       	std	Z+36, r9	; 0x24
   16f8a:	83 a2       	std	Z+35, r8	; 0x23
   16f8c:	e8 e3       	ldi	r30, 0x38	; 56
   16f8e:	fa ee       	ldi	r31, 0xEA	; 234
   16f90:	09 95       	icall
   16f92:	64 e0       	ldi	r22, 0x04	; 4
   16f94:	87 e0       	ldi	r24, 0x07	; 7
   16f96:	0e 94 4f b7 	call	0x16e9e
   16f9a:	c7 01       	movw	r24, r14
   16f9c:	0e 94 37 b7 	call	0x16e6e
   16fa0:	1f 91       	pop	r17
   16fa2:	0f 91       	pop	r16
   16fa4:	ff 90       	pop	r15
   16fa6:	ef 90       	pop	r14
   16fa8:	df 90       	pop	r13
   16faa:	cf 90       	pop	r12
   16fac:	bf 90       	pop	r11
   16fae:	af 90       	pop	r10
   16fb0:	9f 90       	pop	r9
   16fb2:	8f 90       	pop	r8
   16fb4:	08 95       	ret

00016fb6 <main>:
}


int main()
{ 
   16fb6:	af 92       	push	r10
   16fb8:	bf 92       	push	r11
   16fba:	cf 92       	push	r12
   16fbc:	df 92       	push	r13
   16fbe:	ef 92       	push	r14
   16fc0:	ff 92       	push	r15
   16fc2:	0f 93       	push	r16
   16fc4:	1f 93       	push	r17


  
  __asm__ __volatile__("sei" ::); 
   16fc6:	78 94       	sei
 
 
 writetask = 0; 
   16fc8:	10 92 88 0c 	sts	0x0C88, r1
 stacklevel = 0; 
   16fcc:	10 92 f9 0b 	sts	0x0BF9, r1
 currentindex = 0; 
   16fd0:	10 92 7f 0c 	sts	0x0C7F, r1
   16fd4:	10 92 7e 0c 	sts	0x0C7E, r1
   16fd8:	0e 94 e5 b6 	call	0x16dca
   16fdc:	5c 01       	movw	r10, r24
   16fde:	0e 94 f7 b6 	call	0x16dee
   16fe2:	4f 93       	push	r20
   16fe4:	5f 93       	push	r21
   16fe6:	e0 e2       	ldi	r30, 0x20	; 32
   16fe8:	fa ee       	ldi	r31, 0xEA	; 234
   16fea:	09 95       	icall
   16fec:	c4 2e       	mov	r12, r20
   16fee:	d5 2e       	mov	r13, r21
   16ff0:	5f 91       	pop	r21
   16ff2:	4f 91       	pop	r20
   16ff4:	4f 93       	push	r20
   16ff6:	5f 93       	push	r21
   16ff8:	e4 e2       	ldi	r30, 0x24	; 36
   16ffa:	fa ee       	ldi	r31, 0xEA	; 234
   16ffc:	09 95       	icall
   16ffe:	e4 2e       	mov	r14, r20
   17000:	f5 2e       	mov	r15, r21
   17002:	5f 91       	pop	r21
   17004:	4f 91       	pop	r20
   17006:	0e 94 2d b7 	call	0x16e5a
   1700a:	8c 01       	movw	r16, r24
   1700c:	0e 94 6f b7 	call	0x16ede
   17010:	6a ee       	ldi	r22, 0xEA	; 234
   17012:	7b e0       	ldi	r23, 0x0B	; 11
   17014:	c6 01       	movw	r24, r12
   17016:	0e 94 41 b7 	call	0x16e82
   1701a:	64 ef       	ldi	r22, 0xF4	; 244
   1701c:	7b e0       	ldi	r23, 0x0B	; 11
   1701e:	c7 01       	movw	r24, r14
   17020:	0e 94 41 b7 	call	0x16e82
   17024:	ec e2       	ldi	r30, 0x2C	; 44
   17026:	fa ee       	ldi	r31, 0xEA	; 234
   17028:	09 95       	icall
   1702a:	61 e0       	ldi	r22, 0x01	; 1
   1702c:	87 e0       	ldi	r24, 0x07	; 7
   1702e:	0e 94 4f b7 	call	0x16e9e
   17032:	c8 01       	movw	r24, r16
   17034:	0e 94 37 b7 	call	0x16e6e
   17038:	d5 01       	movw	r26, r10
   1703a:	ed 91       	ld	r30, X+
   1703c:	fc 91       	ld	r31, X
   1703e:	87 8d       	ldd	r24, Z+31	; 0x1f
   17040:	90 a1       	ldd	r25, Z+32	; 0x20
 
 fileptr = mfopen("/logtrace", "w");
   17042:	90 93 fd 0b 	sts	0x0BFD, r25
   17046:	80 93 fc 0b 	sts	0x0BFC, r24
   1704a:	e4 ee       	ldi	r30, 0xE4	; 228
   1704c:	fa ee       	ldi	r31, 0xEA	; 234
   1704e:	09 95       	icall
   17050:	4f 93       	push	r20
   17052:	5f 93       	push	r21
   17054:	e0 ee       	ldi	r30, 0xE0	; 224
   17056:	fa ee       	ldi	r31, 0xEA	; 234
   17058:	09 95       	icall
   1705a:	e4 2f       	mov	r30, r20
   1705c:	f5 2f       	mov	r31, r21
   1705e:	5f 91       	pop	r21
   17060:	4f 91       	pop	r20
 
 enableTracing();  

 blockaddr = (tracingblock *)getEventBlockAddress();
   17062:	f0 93 f8 0b 	sts	0x0BF8, r31
   17066:	e0 93 f7 0b 	sts	0x0BF7, r30
 eventid = &(blockaddr->internaleventid); 
   1706a:	f0 93 fb 0b 	sts	0x0BFB, r31
   1706e:	e0 93 fa 0b 	sts	0x0BFA, r30
 threadid = &(blockaddr->threadid); 
   17072:	31 96       	adiw	r30, 0x01	; 1
   17074:	f0 93 81 0c 	sts	0x0C81, r31
   17078:	e0 93 80 0c 	sts	0x0C80, r30
   1707c:	31 97       	sbiw	r30, 0x01	; 1
 
 blockaddr->externaladdtracefp = tracingcontrol; 
   1707e:	89 ee       	ldi	r24, 0xE9	; 233
   17080:	98 eb       	ldi	r25, 0xB8	; 184
   17082:	93 83       	std	Z+3, r25	; 0x03
   17084:	82 83       	std	Z+2, r24	; 0x02
 blockaddr->externalapptracefp = tracingcontroluser; 
   17086:	8a e3       	ldi	r24, 0x3A	; 58
   17088:	99 eb       	ldi	r25, 0xB9	; 185
   1708a:	95 83       	std	Z+5, r25	; 0x05
   1708c:	84 83       	std	Z+4, r24	; 0x04
 
 thiscurrentthread = getCurrentThread(); 
   1708e:	0e 94 e5 b6 	call	0x16dca
   17092:	fc 01       	movw	r30, r24
   17094:	90 93 85 0c 	sts	0x0C85, r25
   17098:	80 93 84 0c 	sts	0x0C84, r24
 thisthread = *thiscurrentthread; 
   1709c:	80 81       	ld	r24, Z
   1709e:	91 81       	ldd	r25, Z+1	; 0x01
   170a0:	90 93 87 0c 	sts	0x0C87, r25
   170a4:	80 93 86 0c 	sts	0x0C86, r24
   170a8:	4f 93       	push	r20
   170aa:	5f 93       	push	r21
   170ac:	e8 e0       	ldi	r30, 0x08	; 8
   170ae:	fb ee       	ldi	r31, 0xEB	; 235
   170b0:	09 95       	icall
   170b2:	84 2f       	mov	r24, r20
   170b4:	95 2f       	mov	r25, r21
   170b6:	5f 91       	pop	r21
   170b8:	4f 91       	pop	r20
 
  
  oldstackptraddr = (uint16_t**)getKernelStackPtr(); 
   170ba:	90 93 aa 0c 	sts	0x0CAA, r25
   170be:	80 93 a9 0c 	sts	0x0CA9, r24
}


void debugValue(uint16_t v1, uint16_t v2, uint16_t v3)
{

  void (*fp)(void) = (void (*)(void))DEBUG_VALUE_SYSCALL; 
   asm volatile("push r8" "\n\t"
                "push r9" "\n\t"
                "push r10" "\n\t"
                "push r11" "\n\t"
				"push r12" "\n\t"
				"push r13" "\n\t"
                ::);
   
   asm volatile(" mov r8, %A0" "\n\t"
	             "mov r9, %B0" "\n\t"
				 :
				 :"r" (v1)
                );


   asm volatile(" mov r10, %A0" "\n\t"
	             "mov r11, %B0" "\n\t"
				 :
				 :"r" (v2)
                );
 
   asm volatile(" mov r12, %A0" "\n\t"
	             "mov r13, %B0" "\n\t"
				 :
				 :"r" (v3)
                );


  fp(); 

  asm volatile("pop r13" "\n\t"
	           "pop r12" "\n\t"
	              ::);

  asm volatile("pop r11" "\n\t"
	           "pop r10" "\n\t"
	              ::);

  asm volatile("pop r9" "\n\t"
	           "pop r8" "\n\t"
	              ::);
  return; 


}


void postTask(void (*tp) (void), uint16_t priority)
{
   void (*fp)(void) = (void (*)(void))POST_TASK_SYSCALL; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
				"push r22" "\n\t"
				"push r23" "\n\t"
                ::);
   
   asm volatile(" mov r20, %A0" "\n\t"
	             "mov r21, %B0" "\n\t"
				 :
				 :"r" (tp)
                );


   asm volatile(" mov r22, %A0" "\n\t"
	             "mov r23, %B0" "\n\t"
				 :
				 :"r" (priority)
                );

  fp(); 

  asm volatile("pop r23" "\n\t"
	           "pop r22" "\n\t"
	              ::);

  asm volatile("pop r21" "\n\t"
	           "pop r20" "\n\t"
	              ::);
  return; 


}




void postTaskWithoutLogging(void (*tp) (void), uint16_t priority)
{
   void (*fp)(void) = (void (*)(void))POST_TASK_SYSCALL; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
				"push r22" "\n\t"
				"push r23" "\n\t"
                ::);
   
   asm volatile(" mov r20, %A0" "\n\t"
	             "mov r21, %B0" "\n\t"
				 :
				 :"r" (tp)
                );


   asm volatile(" mov r22, %A0" "\n\t"
	             "mov r23, %B0" "\n\t"
				 :
				 :"r" (priority)
                );

  fp(); 

  asm volatile("pop r23" "\n\t"
	           "pop r22" "\n\t"
	              ::);

  asm volatile("pop r21" "\n\t"
	           "pop r20" "\n\t"
	              ::);
  return; 


}


thread_create_block_type *getCurrentThreadControlBlockAddr()
{
   thread_create_block_type *blockinfo; 
   void (*getaddrfp)(void) = (void (*)(void))GET_THREAD_CONTROL_BLOCK; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   asm volatile(" mov %A0, r20" "\n\t"
	              " mov %B0, r21" "\n\t"
				 :"=r" (blockinfo)
				 :
               );
    asm volatile("pop r21" "\n\t"
	               "pop r20" "\n\t"
	               ::);
   return blockinfo; 
}


void *getCurrentThreadControlMutexAddr()
{
   void *blockinfo; 
   void (*getaddrfp)(void) = (void (*)(void))GET_THREAD_CONTROL_MUTEX; 
   asm volatile("push r20" "\n\t"
                "push r21" "\n\t"
                ::);
   getaddrfp();     
   asm volatile(" mov %A0, r20" "\n\t"
	              " mov %B0, r21" "\n\t"
				 :"=r" (blockinfo)
				 :
               );
    asm volatile("pop r21" "\n\t"
	               "pop r20" "\n\t"
	               ::);
   return blockinfo; 
}





void createThread(void (*fp)(), uint8_t* ram_start, uint8_t *stack_ptr, uint8_t priority, char *threadname)
{
 
 
   mutex* createthreadmutex; 
   thread_create_block_type *threadblock;
   void (*getaddrfp)(void) = (void (*)(void))CREATE_THERAD_SYSCALL;

  
   threadblock = getCurrentThreadControlBlockAddr(); 
   createthreadmutex = (mutex *)getCurrentThreadControlMutexAddr(); 
   
   Mutex_lock(createthreadmutex);
     
   threadblock-> fp = fp; 
   threadblock->ram_start = ram_start; 
   threadblock->stack_ptr = stack_ptr; 
   threadblock->priority = priority;
   threadblock->threadname = threadname; 

   getaddrfp(); 
   
   sleepThread(20); 
   
  
   Mutex_unlock(createthreadmutex); 

   return; 
}




void setThreadTerminateHandler(void (*tp) (void))
{
   void (*fp)(void) = (void (*)(void))SYSCALL_USER_THREAD_TERMINATE_TASK; 
   asm volatile("push r20" "\n\t"
   170c2:	4f 93       	push	r20
   170c4:	5f 93       	push	r21
                "push r21" "\n\t"
				        ::);
   
   asm volatile(" mov r20, %A0" "\n\t"
   170c6:	8f ee       	ldi	r24, 0xEF	; 239
   170c8:	96 eb       	ldi	r25, 0xB6	; 182
   170ca:	48 2f       	mov	r20, r24
   170cc:	59 2f       	mov	r21, r25
	             "mov r21, %B0" "\n\t"
				 :
				 :"r" (tp)
                );


  fp(); 
   170ce:	e0 e0       	ldi	r30, 0x00	; 0
   170d0:	fb ee       	ldi	r31, 0xEB	; 235
   170d2:	09 95       	icall

  asm volatile("pop r21" "\n\t"
   170d4:	5f 91       	pop	r21
   170d6:	4f 91       	pop	r20
 
 setThreadTerminateHandler(cleanUpTraceFunction); 
 
 //setTimerFunction(50, 0, testUpdate);
 
//ADDTRACESTART$$$$$


{
uint32_t tracepointlocation = ((uint32_t)APPTRACEPOINT0*2);

pagenum = tracepointlocation/2/128;
   170d8:	27 e6       	ldi	r18, 0x67	; 103
   170da:	31 e0       	ldi	r19, 0x01	; 1
   170dc:	30 93 ac 0c 	sts	0x0CAC, r19
   170e0:	20 93 ab 0c 	sts	0x0CAB, r18

pageoffset = tracepointlocation%256;
   170e4:	86 e3       	ldi	r24, 0x36	; 54
   170e6:	80 93 ad 0c 	sts	0x0CAD, r24
   return;
}





void addUserTracePoint(uint16_t pagenum, uint16_t pageoffset)
{
   void (*fp)(void) = (void (*)(void))SYSCALL_USER_ADD_TRACE_POINT; 
   globalpagenum = pagenum;
   170ea:	30 93 af 0c 	sts	0x0CAF, r19
   170ee:	20 93 ae 0c 	sts	0x0CAE, r18
   globalpageoffset = pageoffset; 
   170f2:	86 e3       	ldi	r24, 0x36	; 54
   170f4:	90 e0       	ldi	r25, 0x00	; 0
   170f6:	90 93 b1 0c 	sts	0x0CB1, r25
   170fa:	80 93 b0 0c 	sts	0x0CB0, r24
   
   asm volatile("push r20" "\n\t"
   170fe:	4f 93       	push	r20
   17100:	5f 93       	push	r21
   17102:	6f 93       	push	r22
   17104:	7f 93       	push	r23
                "push r21" "\n\t"
								"push r22" "\n\t"
								"push r23" "\n\t"
                ::);
   
   asm volatile(" mov r20, %A0" "\n\t"
   17106:	80 91 ae 0c 	lds	r24, 0x0CAE
   1710a:	90 91 af 0c 	lds	r25, 0x0CAF
   1710e:	48 2f       	mov	r20, r24
   17110:	59 2f       	mov	r21, r25
	             	" mov r21, %B0" "\n\t"
				 :
				 :"r" (globalpagenum)
                );


   asm volatile(" mov r22, %A0" "\n\t"
   17112:	80 91 b0 0c 	lds	r24, 0x0CB0
   17116:	90 91 b1 0c 	lds	r25, 0x0CB1
   1711a:	68 2f       	mov	r22, r24
   1711c:	79 2f       	mov	r23, r25
	             	" mov r23, %B0" "\n\t"
				 :
				 :"r" (globalpageoffset)
                );

  fp(); 
   1711e:	e8 ef       	ldi	r30, 0xF8	; 248
   17120:	fa ee       	ldi	r31, 0xEA	; 234
   17122:	09 95       	icall

  asm volatile("pop r23" "\n\t"
   17124:	7f 91       	pop	r23
   17126:	6f 91       	pop	r22
	           "pop r22" "\n\t"
	              ::);

  asm volatile("pop r21" "\n\t"
   17128:	5f 91       	pop	r21
   1712a:	4f 91       	pop	r20
   1712c:	0e 94 e5 b6 	call	0x16dca
   17130:	fc 01       	movw	r30, r24
   17132:	01 90       	ld	r0, Z+
   17134:	f0 81       	ld	r31, Z
   17136:	e0 2d       	mov	r30, r0
   17138:	85 e0       	ldi	r24, 0x05	; 5
   1713a:	82 83       	std	Z+2, r24	; 0x02
   1713c:	0e 94 4b b7 	call	0x16e96

addUserTracePoint( pagenum,  pageoffset);

}


//ADDTRACEEND$$$$$

 while (1)
 {
 	hibernateThread();
 	if (writetask == 1)
   17140:	80 91 88 0c 	lds	r24, 0x0C88
   17144:	81 30       	cpi	r24, 0x01	; 1
   17146:	91 f7       	brne	.-28     	; 0x1712c
   17148:	0f b7       	in	r16, 0x3f	; 63
   1714a:	f8 94       	cli
   1714c:	11 27       	eor	r17, r17
   1714e:	40 e2       	ldi	r20, 0x20	; 32
   17150:	50 e0       	ldi	r21, 0x00	; 0
   17152:	69 e8       	ldi	r22, 0x89	; 137
   17154:	7c e0       	ldi	r23, 0x0C	; 12
   17156:	80 91 fc 0b 	lds	r24, 0x0BFC
   1715a:	90 91 fd 0b 	lds	r25, 0x0BFD
   1715e:	0e 94 a0 b7 	call	0x16f40
   17162:	41 e0       	ldi	r20, 0x01	; 1
   17164:	50 e0       	ldi	r21, 0x00	; 0
   17166:	60 e2       	ldi	r22, 0x20	; 32
   17168:	70 e0       	ldi	r23, 0x00	; 0
   1716a:	80 91 fc 0b 	lds	r24, 0x0BFC
   1716e:	90 91 fd 0b 	lds	r25, 0x0BFD
   17172:	0e 94 02 b7 	call	0x16e04
   17176:	40 e6       	ldi	r20, 0x60	; 96
   17178:	50 e0       	ldi	r21, 0x00	; 0
   1717a:	6e e1       	ldi	r22, 0x1E	; 30
   1717c:	7c e0       	ldi	r23, 0x0C	; 12
   1717e:	80 91 fc 0b 	lds	r24, 0x0BFC
   17182:	90 91 fd 0b 	lds	r25, 0x0BFD
   17186:	0e 94 a0 b7 	call	0x16f40
   1718a:	41 e0       	ldi	r20, 0x01	; 1
   1718c:	50 e0       	ldi	r21, 0x00	; 0
   1718e:	60 e6       	ldi	r22, 0x60	; 96
   17190:	70 e0       	ldi	r23, 0x00	; 0
   17192:	80 91 fc 0b 	lds	r24, 0x0BFC
   17196:	90 91 fd 0b 	lds	r25, 0x0BFD
   1719a:	0e 94 02 b7 	call	0x16e04
   1719e:	0f bf       	out	0x3f, r16	; 63
   { writeFileTask();
     writetask = 0; 
   171a0:	10 92 88 0c 	sts	0x0C88, r1
   171a4:	c3 cf       	rjmp	.-122    	; 0x1712c

000171a6 <syscall_postThreadTask.1409>:
   171a6:	e8 e6       	ldi	r30, 0x68	; 104
   171a8:	fa ee       	ldi	r31, 0xEA	; 234
   171aa:	09 95       	icall
   171ac:	08 95       	ret

000171ae <wakeupMe.3632>:
//wakeup the current thread once an incoming packet arrives

void wakeupMe()
{
  mythread->state = STATE_ACTIVE;
   171ae:	e0 91 b2 0c 	lds	r30, 0x0CB2
   171b2:	f0 91 b3 0c 	lds	r31, 0x0CB3
   171b6:	82 e0       	ldi	r24, 0x02	; 2
   171b8:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   171ba:	0e 94 d3 b8 	call	0x171a6
   171be:	08 95       	ret

000171c0 <wakeupMeSerial.3936>:
//wakeup the current thread once an incoming packet arrives

void wakeupMeSerial()
{
  mythreadserial->state = STATE_ACTIVE;
   171c0:	e0 91 b4 0c 	lds	r30, 0x0CB4
   171c4:	f0 91 b5 0c 	lds	r31, 0x0CB5
   171c8:	82 e0       	ldi	r24, 0x02	; 2
   171ca:	82 83       	std	Z+2, r24	; 0x02
  syscall_postThreadTask();
   171cc:	0e 94 d3 b8 	call	0x171a6
   171d0:	08 95       	ret

000171d2 <tracingcontrol.1584>:
   171d2:	1f 93       	push	r17
   171d4:	1f b7       	in	r17, 0x3f	; 63
   171d6:	f8 94       	cli
   171d8:	a0 91 80 0c 	lds	r26, 0x0C80
   171dc:	b0 91 81 0c 	lds	r27, 0x0C81
   171e0:	8c 91       	ld	r24, X
   171e2:	83 30       	cpi	r24, 0x03	; 3
   171e4:	11 f1       	breq	.+68     	; 0x1722a
   171e6:	80 91 7e 0c 	lds	r24, 0x0C7E
   171ea:	90 91 7f 0c 	lds	r25, 0x0C7F
   171ee:	fc 01       	movw	r30, r24
   171f0:	e2 50       	subi	r30, 0x02	; 2
   171f2:	f4 4f       	sbci	r31, 0xF4	; 244
   171f4:	21 e0       	ldi	r18, 0x01	; 1
   171f6:	20 83       	st	Z, r18
   171f8:	01 96       	adiw	r24, 0x01	; 1
   171fa:	e0 91 fa 0b 	lds	r30, 0x0BFA
   171fe:	f0 91 fb 0b 	lds	r31, 0x0BFB
   17202:	20 81       	ld	r18, Z
   17204:	fc 01       	movw	r30, r24
   17206:	e2 50       	subi	r30, 0x02	; 2
   17208:	f4 4f       	sbci	r31, 0xF4	; 244
   1720a:	20 83       	st	Z, r18
   1720c:	01 96       	adiw	r24, 0x01	; 1
   1720e:	90 93 7f 0c 	sts	0x0C7F, r25
   17212:	80 93 7e 0c 	sts	0x0C7E, r24
   17216:	2c 91       	ld	r18, X
   17218:	fc 01       	movw	r30, r24
   1721a:	e2 50       	subi	r30, 0x02	; 2
   1721c:	f4 4f       	sbci	r31, 0xF4	; 244
   1721e:	20 83       	st	Z, r18
   17220:	01 96       	adiw	r24, 0x01	; 1
   17222:	90 93 7f 0c 	sts	0x0C7F, r25
   17226:	80 93 7e 0c 	sts	0x0C7E, r24
   1722a:	80 91 7e 0c 	lds	r24, 0x0C7E
   1722e:	90 91 7f 0c 	lds	r25, 0x0C7F
   17232:	86 37       	cpi	r24, 0x76	; 118
   17234:	91 05       	cpc	r25, r1
   17236:	c8 f0       	brcs	.+50     	; 0x1726a
   17238:	ee ef       	ldi	r30, 0xFE	; 254
   1723a:	fb e0       	ldi	r31, 0x0B	; 11
   1723c:	a9 e8       	ldi	r26, 0x89	; 137
   1723e:	bc e0       	ldi	r27, 0x0C	; 12
   17240:	81 91       	ld	r24, Z+
   17242:	8d 93       	st	X+, r24
   17244:	8c e0       	ldi	r24, 0x0C	; 12
   17246:	ee 31       	cpi	r30, 0x1E	; 30
   17248:	f8 07       	cpc	r31, r24
   1724a:	d1 f7       	brne	.-12     	; 0x17240
   1724c:	10 92 7f 0c 	sts	0x0C7F, r1
   17250:	10 92 7e 0c 	sts	0x0C7E, r1
   17254:	e0 91 86 0c 	lds	r30, 0x0C86
   17258:	f0 91 87 0c 	lds	r31, 0x0C87
   1725c:	82 e0       	ldi	r24, 0x02	; 2
   1725e:	82 83       	std	Z+2, r24	; 0x02
   17260:	0e 94 f3 b6 	call	0x16de6
   17264:	81 e0       	ldi	r24, 0x01	; 1
   17266:	80 93 88 0c 	sts	0x0C88, r24
   1726a:	81 2f       	mov	r24, r17
   1726c:	99 27       	eor	r25, r25
   1726e:	8f bf       	out	0x3f, r24	; 63
   17270:	1f 91       	pop	r17
   17272:	08 95       	ret

00017274 <tracingcontroluser>:
   17274:	ed b7       	in	r30, 0x3d	; 61
   17276:	fe b7       	in	r31, 0x3e	; 62
   17278:	81 85       	ldd	r24, Z+9	; 0x09
   1727a:	92 85       	ldd	r25, Z+10	; 0x0a
   1727c:	90 93 83 0c 	sts	0x0C83, r25
   17280:	80 93 82 0c 	sts	0x0C82, r24
   17284:	32 96       	adiw	r30, 0x02	; 2
   17286:	ed bf       	out	0x3d, r30	; 61
   17288:	fe bf       	out	0x3e, r31	; 62
   1728a:	80 91 82 0c 	lds	r24, 0x0C82
   1728e:	90 91 83 0c 	lds	r25, 0x0C83
   17292:	83 5b       	subi	r24, 0xB3	; 179
   17294:	90 4a       	sbci	r25, 0xA0	; 160
   17296:	89 f4       	brne	.+34     	; 0x172ba
   17298:	df 91       	pop	r29
   1729a:	cf 91       	pop	r28
   1729c:	9f 91       	pop	r25
   1729e:	8f 91       	pop	r24
   172a0:	ff 91       	pop	r31
   172a2:	ef 91       	pop	r30
   172a4:	ff 91       	pop	r31
   172a6:	ef 91       	pop	r30
   172a8:	ff 91       	pop	r31
   172aa:	ef 91       	pop	r30
   172ac:	88 e6       	ldi	r24, 0x68	; 104
   172ae:	80 93 2a 0b 	sts	0x0B2A, r24
   172b2:	85 e6       	ldi	r24, 0x65	; 101
   172b4:	80 93 2b 0b 	sts	0x0B2B, r24
   172b8:	8c e6       	ldi	r24, 0x6C	; 108
   172ba:	ff 93       	push	r31
   172bc:	ef 93       	push	r30
   172be:	9f 93       	push	r25
   172c0:	8f 93       	push	r24
   172c2:	0f 92       	push	r0
   172c4:	1f 92       	push	r1
   172c6:	2f 92       	push	r2
   172c8:	3f 92       	push	r3
   172ca:	4f 92       	push	r4
   172cc:	5f 92       	push	r5
   172ce:	6f 92       	push	r6
   172d0:	7f 92       	push	r7
   172d2:	8f 92       	push	r8
   172d4:	9f 92       	push	r9
   172d6:	af 92       	push	r10
   172d8:	bf 92       	push	r11
   172da:	cf 92       	push	r12
   172dc:	df 92       	push	r13
   172de:	ef 92       	push	r14
   172e0:	ff 92       	push	r15
   172e2:	0f 93       	push	r16
   172e4:	1f 93       	push	r17
   172e6:	2f 93       	push	r18
   172e8:	3f 93       	push	r19
   172ea:	4f 93       	push	r20
   172ec:	5f 93       	push	r21
   172ee:	6f 93       	push	r22
   172f0:	7f 93       	push	r23
   172f2:	8f 93       	push	r24
   172f4:	9f 93       	push	r25
   172f6:	af 93       	push	r26
   172f8:	bf 93       	push	r27
   172fa:	cf 93       	push	r28
   172fc:	df 93       	push	r29
   172fe:	ef 93       	push	r30
   17300:	ff 93       	push	r31
   17302:	ff 93       	push	r31
   17304:	ff b7       	in	r31, 0x3f	; 63
   17306:	ff 93       	push	r31
   17308:	1f b7       	in	r17, 0x3f	; 63
   1730a:	f8 94       	cli
   1730c:	80 91 82 0c 	lds	r24, 0x0C82
   17310:	90 91 83 0c 	lds	r25, 0x0C83
   17314:	83 5b       	subi	r24, 0xB3	; 179
   17316:	90 4a       	sbci	r25, 0xA0	; 160
   17318:	d9 f4       	brne	.+54     	; 0x17350
   1731a:	80 91 7e 0c 	lds	r24, 0x0C7E
   1731e:	90 91 7f 0c 	lds	r25, 0x0C7F
   17322:	fc 01       	movw	r30, r24
   17324:	e2 50       	subi	r30, 0x02	; 2
   17326:	f4 4f       	sbci	r31, 0xF4	; 244
   17328:	22 e0       	ldi	r18, 0x02	; 2
   1732a:	20 83       	st	Z, r18
   1732c:	01 96       	adiw	r24, 0x01	; 1
   1732e:	fc 01       	movw	r30, r24
   17330:	e2 50       	subi	r30, 0x02	; 2
   17332:	f4 4f       	sbci	r31, 0xF4	; 244
   17334:	2c e0       	ldi	r18, 0x0C	; 12
   17336:	20 83       	st	Z, r18
   17338:	01 96       	adiw	r24, 0x01	; 1
   1733a:	20 91 38 0b 	lds	r18, 0x0B38
   1733e:	fc 01       	movw	r30, r24
   17340:	e2 50       	subi	r30, 0x02	; 2
   17342:	f4 4f       	sbci	r31, 0xF4	; 244
   17344:	20 83       	st	Z, r18
   17346:	01 96       	adiw	r24, 0x01	; 1
   17348:	90 93 7f 0c 	sts	0x0C7F, r25
   1734c:	80 93 7e 0c 	sts	0x0C7E, r24
   17350:	80 91 7e 0c 	lds	r24, 0x0C7E
   17354:	90 91 7f 0c 	lds	r25, 0x0C7F
   17358:	86 37       	cpi	r24, 0x76	; 118
   1735a:	91 05       	cpc	r25, r1
   1735c:	c8 f0       	brcs	.+50     	; 0x17390
   1735e:	ee ef       	ldi	r30, 0xFE	; 254
   17360:	fb e0       	ldi	r31, 0x0B	; 11
   17362:	a9 e8       	ldi	r26, 0x89	; 137
   17364:	bc e0       	ldi	r27, 0x0C	; 12
   17366:	81 91       	ld	r24, Z+
   17368:	8d 93       	st	X+, r24
   1736a:	8c e0       	ldi	r24, 0x0C	; 12
   1736c:	ee 31       	cpi	r30, 0x1E	; 30
   1736e:	f8 07       	cpc	r31, r24
   17370:	d1 f7       	brne	.-12     	; 0x17366
   17372:	10 92 7f 0c 	sts	0x0C7F, r1
   17376:	10 92 7e 0c 	sts	0x0C7E, r1
   1737a:	e0 91 86 0c 	lds	r30, 0x0C86
   1737e:	f0 91 87 0c 	lds	r31, 0x0C87
   17382:	82 e0       	ldi	r24, 0x02	; 2
   17384:	82 83       	std	Z+2, r24	; 0x02
   17386:	0e 94 f3 b6 	call	0x16de6
   1738a:	81 e0       	ldi	r24, 0x01	; 1
   1738c:	80 93 88 0c 	sts	0x0C88, r24
   17390:	81 2f       	mov	r24, r17
   17392:	99 27       	eor	r25, r25
   17394:	8f bf       	out	0x3f, r24	; 63
   17396:	ff 91       	pop	r31
   17398:	ff bf       	out	0x3f, r31	; 63
   1739a:	ff 91       	pop	r31
   1739c:	ff 91       	pop	r31
   1739e:	ef 91       	pop	r30
   173a0:	df 91       	pop	r29
   173a2:	cf 91       	pop	r28
   173a4:	bf 91       	pop	r27
   173a6:	af 91       	pop	r26
   173a8:	9f 91       	pop	r25
   173aa:	8f 91       	pop	r24
   173ac:	7f 91       	pop	r23
   173ae:	6f 91       	pop	r22
   173b0:	5f 91       	pop	r21
   173b2:	4f 91       	pop	r20
   173b4:	3f 91       	pop	r19
   173b6:	2f 91       	pop	r18
   173b8:	1f 91       	pop	r17
   173ba:	0f 91       	pop	r16
   173bc:	ff 90       	pop	r15
   173be:	ef 90       	pop	r14
   173c0:	df 90       	pop	r13
   173c2:	cf 90       	pop	r12
   173c4:	bf 90       	pop	r11
   173c6:	af 90       	pop	r10
   173c8:	9f 90       	pop	r9
   173ca:	8f 90       	pop	r8
   173cc:	7f 90       	pop	r7
   173ce:	6f 90       	pop	r6
   173d0:	5f 90       	pop	r5
   173d2:	4f 90       	pop	r4
   173d4:	3f 90       	pop	r3
   173d6:	2f 90       	pop	r2
   173d8:	1f 90       	pop	r1
   173da:	0f 90       	pop	r0
   173dc:	8f 91       	pop	r24
   173de:	9f 91       	pop	r25
   173e0:	ef 91       	pop	r30
   173e2:	ff 91       	pop	r31
   173e4:	ef 93       	push	r30
   173e6:	ff 93       	push	r31
   173e8:	80 91 82 0c 	lds	r24, 0x0C82
   173ec:	90 91 83 0c 	lds	r25, 0x0C83
   173f0:	f8 2f       	mov	r31, r24
   173f2:	e9 2f       	mov	r30, r25
   173f4:	09 94       	ijmp
